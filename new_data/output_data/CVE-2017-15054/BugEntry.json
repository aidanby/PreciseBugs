{"buggy_code": ["<?php\n/**\n * @file          admin.settings.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n/*\n* Add a new field to a category\n*/\nfunction fieldAdd(id) {\n    $(\"#post_id\").val(id);\n    $(\"#add_new_field\").dialog(\"open\");\n}\n/*\n* Edit category's folders\n*/\nfunction catInFolders(id) {\n    $(\"#post_id\").val(id);\n    $(\"#catInFolder_title\").html($(\"#item_\"+id).html());    // display title\n    // pre-select folders\n    $(\"#cat_folders_selection > option\").prop(\"selected\", false);\n    var folder = $(\"#catFoldersList_\"+id).val().split(\";\");\n    for (var i=0; i<folder.length; i++) {\n        $(\"#cat_folders_selection option[value=\"+folder[i]+\"]\").attr('selected', 'selected');\n    };\n    // open\n    $(\"#category_in_folder\").dialog(\"open\");\n}\n\n/*\n* Add a new category\n*/\nfunction categoryAdd() {\n    if ($(\"#new_category_label\").val() == \"\") {\n        return false;\n    }\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"addNewCategory\",\n            title   : sanitizeString($(\"#new_category_label\").val())\n        },\n        function(data) {\n            // build new row\n            $(\"#tbl_categories\").append(\n                '<tr id=\"t_cat_'+data[0].id+'\"><td colspan=\"2\">'+\n                '<input type=\"text\" id=\"catOrd_'+data[0].id+'\" size=\"1\" class=\"category_order\" value=\"1\" />&nbsp;&nbsp;'+\n                '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"field_add_in_category\"]; ?>\" onclick=\"fieldAdd('+\n                data[0].id+')\" style=\"cursor:pointer;\">'+\n                '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-plus fa-stack-1x fa-inverse\"></i>'+\n                '</span>&nbsp;'+\n                '<input type=\"radio\" name=\"sel_item\" id=\"item_'+data[0].id+'_cat\" />'+\n                '<label for=\"item_'+data[0].id+'_cat\" id=\"item_'+data[0].id+'\">'+\n                $(\"#new_category_label\").val()+'</label>'+\n                '</td><td>'+\n                '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"category_in_folders\"]; ?>\" onclick=\"catInFolders('+data[0].id+')\" style=\"cursor:pointer;\">'+\n                '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-edit fa-stack-1x fa-inverse\"></i>'+\n                '</span>&nbsp;'+\n                '<?php echo $LANG[\"category_in_folders_title\"]; ?>:'+\n                '<span style=\"font-family:italic; margin-left:10px;\" id=\"catFolders_'+data[0].id+'\"></span>'+\n                '<input type=\"hidden\" id=\"catFoldersList_'+data[0].id+'\" value=\"'+data[0].id+'\" /></td><td></td>');\n            // Add new cat\n            $(\"#moveItemTo\").append('<option value=\"'+data[0].id+'\">'+$(\"#new_category_label\").val()+'</option>');\n            // clean\n            $(\"#new_category_label, #new_item_title\").val(\"\");\n            //loadFieldsList();\n            $(\"#div_loading,#no_category\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n* rename an Element\n*/\nfunction renameItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"renameItem\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_rename']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Delete an Element\n*/\nfunction deleteItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"deleteCategory\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_deletion']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Move an Element\n*/\nfunction moveItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"moveItem\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_moveto']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n/*\n* Change Field Type\n*/\nfunction changeFieldTypeNow() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"changeFieldType\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_change_field_type']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Save the position of the Categories\n*/\nfunction storePosition() {\n    $(\"#div_loading\").show();\n    // prepare listing to save\n    var data = \"\";\n    var id;\n    var val;\n    $('input[class$=\"category_order\"]').each(function(index) {\n        id = $(this).attr(\"id\").split(\"_\");\n        if ($(this).val() == \"\") {\n            val = \"1\";\n        } else {\n            val = $(this).val();\n        }\n        if (data == \"\") {\n            data = id[1]+\":\"+val;\n        } else {\n            data += \";\"+id[1]+\":\"+val;\n        }\n    });\n\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"saveOrder\",\n            data   : data\n        },\n        function(data) {\n            $(\"#div_loading\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n* Reload table\n*/\nfunction loadFieldsList() {\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"loadFieldsList\",\n            title   : prepareExchangedData(sanitizeString($(\"#new_category_label\").val()), \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n        },\n        function(data) {\n            var newList = '<table id=\"tbl_categories\" style=\"\">';\n            // parse json table and disaply\n            var json = $.parseJSON(data);\n            $(json).each(function(i,val){\n                if (val[0] === \"1\") {\n                    newList += '<tr id=\"t_cat_'+val[1]+'\"><td colspan=\"2\">'+\n                    '<input type=\"text\" id=\"catOrd_'+val[1]+'\" size=\"1\" class=\"category_order\" value=\"'+val[3]+'\" />&nbsp;'+\n                    '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"field_add_in_category\"]; ?>\" onclick=\"fieldAdd('+\n                    val[1]+')\" style=\"cursor:pointer;\">'+\n                    '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-plus fa-stack-1x fa-inverse\"></i>'+\n                    '</span>&nbsp;'+\n                    '<input type=\"radio\" name=\"sel_item\" id=\"item_'+val[1]+'_cat\" />'+\n                    '<label for=\"item_'+val[1]+'_cat\" id=\"item_'+val[1]+'\">'+val[2]+'</label>'+\n                    '</td><td>'+\n                    '<span class=\"fa-stack tip\" title=\"<?php echo $LANG['category_in_folders']; ?>\" onclick=\"catInFolders('+val[1]+')\" style=\"cursor:pointer;\">'+\n                    '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-edit fa-stack-1x fa-inverse\"></i>'+\n                    '</span>&nbsp;'+\n                    '<?php echo $LANG['category_in_folders_title']; ?>:'+\n                    '<span style=\"font-family:italic; margin-left:10px;\" id=\"catFolders_'+val[1]+'\">'+val[4]+'</span>'+\n                    '<input type=\"hidden\" id=\"catFoldersList_'+val[1]+'\" value=\"'+val[5]+'\" /></td></tr>';\n                } else {\n                    newList += '<tr id=\"t_field_'+val[1]+'\"><td width=\"60px\"></td>'+\n                    '<td colspan=\"2\"><input type=\"text\" id=\"catOrd_'+val[1]+'\" size=\"1\" class=\"category_order\" value=\"'+val[3]+'\" />&nbsp;'+\n                    '<input type=\"radio\" name=\"sel_item\" id=\"item_'+val[1]+'_cat\" />'+\n                    '<label for=\"item_'+val[1]+'_cat\" id=\"item_'+val[1]+'\">'+val[2]+'</label>';\n\n                    if (val[4] !== \"\") {\n                        newList += '<span id=\"encryt_data_'+val[1]+'\" style=\"margin-left:4px; cursor:pointer;\">';\n                        if (val[4] === \"1\") {\n                            newList += '<i class=\"fa fa-key tip\" title=\"<?php echo $LANG['encrypted_data'];?>\" onclick=\"changeEncrypMode('+val[1]+', 1)\"></i>';\n                        } else if (val[4] === \"0\") {\n                            newList += '<span class=\"fa-stack\" title=\"<?php echo $LANG['not_encrypted_data'];?>\" onclick=\"changeEncrypMode('+val[1]+', 0)\"><i class=\"fa fa-key fa-stack-1x\"></i><i class=\"fa fa-ban fa-stack-1x fa-lg\" style=\"color:red;\"></i></span>';\n                        }\n                        newList += '</span>'\n                    }\n\n                    if (val[6] !== \"\") {\n                        newList += '<span style=\"margin-left:4px;\">';\n                        if (val[6] === \"text\") {\n                            newList += '<i class=\"fa fa-paragraph tip\" title=\"<?php echo $LANG['data_is_text'];?>\"></i>';\n                        } else if (val[6] === \"masked\") {\n                            newList += '<i class=\"fa fa-eye-slash tip\" title=\"<?php echo $LANG['data_is_masked'];?>\"></i>';\n                        }\n                        newList += '</span>'\n                    }\n\n                    newList += '</td></tr>';\n                }\n            });\n\n            // display\n            newList += '</table>';\n            $(\"#new_item_title\").val(\"\");\n            $(\"#categories_list\").html(newList);\n            $(\"#div_loading\").hide();\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Launch the action the admin wants\n//###########\nfunction LaunchAdminActions(action, option)\n{\n    var option;\n\n    $(\"#div_loading\").show();\n    $(\"#email_testing_results, #result_admin_script_backup\").hide();\n    $(\"#result_admin_action_db_backup\").html(\"\");\n    if (action === \"admin_action_db_backup\") {\n        option = $(\"#result_admin_action_db_backup_key\").val();\n    } else if (action === \"admin_action_db_restore\") {\n        $(\"#restore_bck_encryption_key_dialog_error\").html(\"\").hide();\n    } else if (action === \"admin_action_backup_decrypt\") {\n        option = $(\"#bck_script_decrypt_file\").val();\n    } else if (action === \"admin_action_change_salt_key\") {\n        option = prepareExchangedData(\n            sanitizeString($(\"#new_salt_key\").val()),\n            \"encode\",\n            \"<?php echo $_SESSION['key']; ?>\"\n        );\n    } else if (action === \"admin_email_send_backlog\") {\n        $(\"#email_testing_results\")\n            .show().\n            html(\"<?php echo addslashes($LANG['please_wait']); ?>\").attr(\"class\",\"ui-corner-all ui-state-focus\");\n    } else if (action === \"admin_action_attachments_cryption\") {\n        option = $(\"input[name=attachments_cryption]:checked\").val();\n        if (option === \"\" || option === undefined) {\n            $(\"#div_loading\").hide();\n            return false;\n        }\n    } else if (action === \"admin_ldap_test_configuration\") {\n        option = [];\n        var item = {};\n\n        // adding the user\n        item['username'] = $(\"#ldap_test_username\").val();\n        item['username_pwd'] = $(\"#ldap_test_pwd\").val();\n        item['no_username_needed'] = $(\"#ldap_test_no_username\").is(':checked') ? \"1\" : \"0\";\n\n        // adding ldap params\n        $(\"#ldap_config_values tr\").each(function(k){\n            $(this).find(\"input, select\").each(function(i){\n                item[$(this).attr('id')] = $(this).val();\n            });\n        });\n        option.push(item);\n\n        if (option === \"\" || option.length === 0) return;\n\n        // convert to json string\n        option = prepareExchangedData(JSON.stringify(option) , \"encode\", \"<?php echo $_SESSION['key']; ?>\");\n    }\n    //Lauchn ajax query\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n           type        : action,\n           option    : option\n        },\n        function(data) {\n            $(\"#div_loading\").hide();\n            if (data != null) {\n                if (data[0].result == \"db_backup\") {\n                    $(\"#result_admin_action_db_backup\").html(\"<span class='fa fa-file-code-o'></span>&nbsp;<a href='\"+data[0].href+\"'><?php echo $LANG['pdf_download']; ?></a>\").show();\n                } else if (data[0].result == \"pf_done\") {\n                    $(\"#result_admin_action_check_pf\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"db_restore\") {\n                    if (data[0].message !== \"\") {\n                        $(\"#restore_bck_encryption_key_dialog_error\").html(data[0].message).show();\n                    } else {\n                        $(\"#restore_bck_encryption_key_dialog\").dialog(\"close\");\n                        $(\"#result_admin_action_db_restore\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                        $(\"#result_admin_action_db_restore_get_file\").hide();\n                        //deconnect userd\n                        sessionStorage.clear();\n                        window.location.href = \"logout.php\"\n                    }\n                } else if (data[0].result == \"cache_reload\") {\n                    $(\"#result_admin_action_reload_cache_table\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"db_optimize\") {\n                    $(\"#result_admin_action_db_optimize\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"purge_old_files\") {\n                    $(\"#result_admin_action_purge_old_files\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].nb_files_deleted+\"&nbsp;<?php echo $LANG['admin_action_purge_old_files_result']; ?>\").show();\n                } else if (data[0].result == \"db_clean_items\") {\n                    $(\"#result_admin_action_db_clean_items\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].nb_items_deleted+\"&nbsp;<?php echo $LANG['admin_action_db_clean_items_result']; ?>\").show();\n                } else if (data[0].result == \"changed_salt_key\") {\n                    //deconnect user\n                    $(\"#menu_action\").val(\"deconnexion\");\n                    sessionStorage.clear();\n                    window.location.href = \"logout.php\"\n                } else if (data[0].result == \"email_test_conf\" || data[0].result == \"admin_email_send_backlog\") {\n                    if (data[0].error != \"\") {\n                        $(\"#email_testing_results\").html(\"<?php echo addslashes($LANG['admin_email_result_nok']); ?>&nbsp;\"+data[0].message).show().attr(\"class\",\"ui-state-error ui-corner-all\");\n                    } else {\n                        $(\"#email_testing_results\").html(\"<?php echo addslashes(str_replace(\"#email#\", $_SESSION['user_email'], $LANG['admin_email_result_ok'])); ?>\").show().attr(\"class\",\"ui-corner-all ui-state-focus\");\n                    }\n                } else if (data[0].result == \"pw_prefix_correct\") {\n                    $(\"result_admin_action_pw_prefix_correct\").html(data[0].ret).show();\n                } else if (data[0].result == \"attachments_cryption\") {\n                    if (data[0].continu === true) {\n                        $(\"#result_admin_action_attachments_cryption\").html('').show();\n                        manageEncryptionOfAttachments(data[0].list, data[0].cpt);\n                    } else if (data[0].error == \"file_not_encrypted\") {\n                        $(\"#result_admin_action_attachments_cryption\").html(\"It seems the files are not encrypted. Are you sure you want to decrypt? please do a check.\").show();\n                    } else if (data[0].error == \"file_not_clear\") {\n                        $(\"#result_admin_action_attachments_cryption\").html(\"It seems the files are encrypted. Are you sure you want to encrypt? please do a check.\").show();\n                    }\n                } else if (data[0].result == \"rebuild_config_file\") {\n                    $(\"#result_admin_rebuild_config_file\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].option === \"admin_ldap_test_configuration\") {\n                    if (data[0].error !== \"\" && data[0].results === undefined) {\n                        $(\"#ldap_test_msg\").html(data[0].error).show(1).delay(2000).fadeOut(500);\n                    } else {\n                        $(\"#ldap_test_msg\").html(data[0].results).show();\n                    }\n                // for BCK DECRYPT\n                } else if (data[0].result === \"backup_decrypt_fails\") {\n                    $(\"#result_admin_script_backup\").html(data[0].msg).show();\n                } else if (data[0].result === \"backup_decrypt_success\") {\n                    $(\"#result_admin_script_backup\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;<?php echo addslashes($LANG['file_is_now_ready']); ?> - \" + data[0].msg).show(1).delay(5000).fadeOut(500);\n                }\n                //--\n            }\n        },\n        \"json\"\n   );\n}\n\n/*\n*\n*/\nfunction confirmChangingSk() {\n    if (confirm(\"<?php echo addslashes($LANG['confirm_database_reencryption']); ?>\")) {\n        changeMainSaltKey('starting', '');\n    }\n}\n\n/*\n*\n*/\nfunction changeMainSaltKey(start, object)\n{\n    if (object === \"files\") {\n        var nb = 5;\n    } else {\n        var nb = 10;    // can be changed - number of items treated in each loop\n    }\n\n    //console.log(\"Start value: \"+start);\n\n    // start change\n    if (start === \"starting\") {\n        // inform\n        $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-cog fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['starting']; ?>\").show();\n\n        // launch query\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type     : \"admin_action_change_salt_key___start\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].error == \"\" && data[0].nextAction == \"encrypt_items\") {\n                    $(\"#changeMainSaltKey_itemsCount\").append('<input type=\"hidden\" id=\"changeMainSaltKey_itemsCountTotal\" />');\n                    $(\"#changeMainSaltKey_itemsCount, #changeMainSaltKey_itemsCountTotal\").val(data[0].nbOfItems);\n                    //console.log(\"Now launch encryption\");\n                    // start encrypting items with new saltkey\n                    changeMainSaltKey(0, \"items,logs,files,categories\");\n                    //changeMainSaltKey(0, \"files\");\n                } else {\n                    // error mngt\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-alert fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['error_sent_back']; ?> : \"+data[0].error);\n                }\n            },\n            \"json\"\n        );\n\n    } else if (isFinite(start) && object !== \"\") {\n        console.log(\"Step Encrypt - \" +start+\" ; \"+nb+\" ; \"+$(\"#changeMainSaltKey_itemsCount\").val());\n\n        $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-cog fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['treating_items']; ?>...&nbsp;\"+start+\" > \"+(parseInt(start)+parseInt(nb))+\" (<?php echo $LANG['total_number_of_items']; ?> : \"+$(\"#changeMainSaltKey_itemsCount\").val()+\")\");\n\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type         : \"admin_action_change_salt_key___encrypt\",\n                object       : object,\n                start        : start,\n                length       : nb,\n                nbItems      : $(\"#changeMainSaltKey_itemsCount\").val(),\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                console.log(\"Next action: \"+data[0].nextAction);\n                if (data[0].nextAction !== \"encrypting\" && data[0].nextAction !== \"\" && data[0].nextAction !== \"finishing\") {\n                    if (data[0].nbOfItems !== \"\") {\n                        // it is now a new table to be re-encrypted\n                        $(\"#changeMainSaltKey_itemsCount\").val(data[0].nbOfItems);\n                        $(\"#changeMainSaltKey_itemsCountTotal\").val(parseInt(data[0].nbOfItems) + parseInt($(\"#changeMainSaltKey_itemsCountTotal\").val()));\n                        data[0].nextStart = 0;\n                        object = data[0].nextAction;\n                    }\n                    changeMainSaltKey(data[0].nextStart, object);\n                } else if (data[0].nextAction === \"finishing\") {\n                    $(\"#changeMainSaltKey_message\").html(\"<?php echo $LANG['finalizing']; ?>...\");\n                    changeMainSaltKey(\"finishing\");\n                } else {\n                    // error mngt\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-alert fa-spin fa\\\"></i>&nbsp;<?php echo addslashes($LANG['error_sent_back']); ?> : \"+data[0].error);\n                }\n            },\n            \"json\"\n        );\n\n    } else {\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type     : \"admin_action_change_salt_key___end\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].nextAction === \"done\") {\n                    console.log(\"done\");\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-info fa-lg\\\"></i>&nbsp;<?php echo addslashes($LANG['alert_message_done']).\" \".$LANG['number_of_items_treated']; ?> : \" + $(\"#changeMainSaltKey_itemsCountTotal\").val() + '<p><?php echo addslashes($LANG['check_data_after_reencryption']); ?><p><div style=\\\"margin-top:5px;\\\"><a href=\\\"#\\\" onclick=\\\"encryption_show_revert()\\\"><?php echo addslashes($LANG['revert']); ?></a></div>');\n                } else {\n                    // error mngt\n                }\n                $(\"#changeMainSaltKey_itemsCountTotal\").remove();\n            },\n            \"json\"\n        );\n    }\n}\n\nfunction encryption_show_revert() {\n    if (confirm('<?php echo $LANG['revert_the_database']; ?>')) {\n        $(\"#changeMainSaltKey_message\").append('<div style=\"margin-top:5px;\"><i class=\"fa fa-cog fa-spin fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>...</div>')\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type    : \"admin_action_change_salt_key___restore_backup\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#changeMainSaltKey_message\").html('').hide();\n            },\n            \"json\"\n       );\n    }\n}\n\n/*\n* FUNCTION permitting to store into DB the settings changes\n*/\nfunction updateSetting(field)\n{\n    if (field == \"\") return false;\n\n    // store in DB\n    var data = {\"field\":field, \"value\":$(\"#\"+field).val()};\n    //console.log(data);\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n            type    : \"save_option_change\",\n            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            // force page reload in case of encryptClientServer\n            if (field == \"encryptClientServer\") {\n                location.reload(true);\n                return false;\n            }\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#message_box\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data).show().fadeOut(4000);\n\n                return;\n            }\n            if (data.error == \"\") {\n                $(\"#\"+field).after(\"<span class='fa fa-check fa-lg mi-green new_check'></span>\");\n                $(\".new_check\").fadeOut(2000);\n                setTimeout('$(\".new_check\").remove()', 2100);\n            }\n        }\n    );\n}\n\n/*\n* show/hide ldap options\n*/\nfunction showLdapFields(ldap_type) {\n    $(\".tr-ldap\").hide();\n    $(\".tr-\" + ldap_type).show();\n}\n\n/*\n* show/hide file Dec/Enc cryption options\n*/\nfunction startFileEncDecyption() {\n    $(\"#admin_action_attachments_cryption_selection\").show();\n    //\n}\n\n// Init\n$(function() {\n    $('.toggle').toggles({\n        drag: true, // allow dragging the toggle between positions\n        click: true, // allow clicking on the toggle\n        text: {\n            on: '<?php echo $LANG['yes']; ?>', // text for the ON position\n            off: '<?php echo $LANG['no']; ?>' // and off\n        },\n        on: true, // is the toggle ON on init\n        animate: 250, // animation time (ms)\n        easing: 'swing', // animation transition easing function\n        width: 50, // width used if not set in css\n        height: 20, // height if not set in css\n        type: 'compact' // if this is set to 'select' then the select style toggle will be used\n    });\n    $('.toggle').on('toggle', function(e, active) {\n        if (active) {\n            $(\"#\"+e.target.id+\"_input\").val(1);\n            if (e.target.id == \"ldap_mode\") {$(\"#div_ldap_configuration\").show();}\n        } else {\n            $(\"#\"+e.target.id+\"_input\").val(0);\n            if (e.target.id == \"ldap_mode\") {$(\"#div_ldap_configuration\").hide();}\n        }\n\n        // store in DB\n        var data = {\"field\": e.target.id , \"value\": $(\"#\"+e.target.id+\"_input\").val()};\n        console.log(data);\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type    : \"save_option_change\",\n                data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                // force page reload in case of encryptClientServer\n                if (e.target.id == \"encryptClientServer\") {\n                    location.reload(true);\n                    return false;\n                }\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#message_box\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data).show().fadeOut(4000);\n                    return false;\n                }\n                console.log(data);\n                if (data.error == \"\") {\n                    $(\"#\"+e.target.id).after(\"<span class='fa fa-check fa-lg mi-green new_check' style='float:left;margin:-18px 0 0 56px;'></span>\");\n                    $(\".new_check\").fadeOut(2000);\n                    setTimeout('$(\".new_check\").remove()', 2100);\n                }\n            }\n        );\n    });\n\n    // spinner\n    $(\"#upload_imageresize_quality\").spinner({\n        min: 0,\n        max: 100,\n        value: 90,\n        spin: function(event, ui) {\n            updateSetting($(\"#upload_imageresize_quality\").attr('id'));\n        }\n    });\n\n    //BUILD BUTTONSET\n    $(\".div_radio\").buttonset();\n\n    // Build Tabs\n    $(\"#tabs\").tabs({\n        ajaxOptions: {\n            error: function(xhr, status, index, anchor) {\n                $(anchor.hash).html();\n            },\n            beforeSend: function() {\n                $(\"#div_loading\").show();\n            },\n            complete: function() {\n                $(\"#div_loading\").hide();\n            }\n        },\n        beforeLoad: function( event, ui ) {\n            ui.panel.html('<div id=\"loader_tab\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['loading']; ?>...</div>')\n        },\n        load: function( event, ui ) {\n            $(\"#loader_tab\").remove();\n        }\n    });\n\n    $('#tabs').click(function(e){\n        var current_index = $(\"#tabs\").tabs(\"option\",\"active\");\n        if (current_index == 9 || current_index == 10) {\n            $(\"#save_button\").hide();\n        } else {\n            $(\"#save_button\").show();\n        }\n    });\n\n    $('#tbl_categories tr').click(function (event) {\n        $(\"#selected_row\").val($(this).attr(\"id\"));\n    });\n\n    // display text of selected item\n    $(document).on(\"click\",\"input[name=sel_item]\",function(){\n        var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n        $(\"#new_item_title\").val($(\"#item_\"+data[1]).html());\n        $(\"#moveItemTo, #changeFieldType\").val(0);\n    });\n\n    // confirm dialogbox\n    $(\"#category_confirm\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 140,\n        title: \"<?php echo $LANG['confirm']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                $(\"#div_loading\").show();\n                var $this = $(this);\n                // prepare data to send\n                var data = \"\";\n                if ($(\"#post_type\").val() === \"renameItem\") {\n                    data = sanitizeString($(\"#new_item_title\").val());\n                } else if ($(\"#post_type\").val() === \"moveItem\") {\n                    data = $(\"#moveItemTo\").val();\n                } else if ($(\"#post_type\").val() === \"changeFieldType\") {\n                    data = $(\"#changeFieldType\").val();\n                } else if ($(\"#post_type\").val() === \"deleteCategory\") {\n                    data = \"no_data\";\n                }\n                if (data === \"\") {\n                    return false;\n                }\n                // send query\n                $.post(\n                    \"sources/categories.queries.php\",\n                    {\n                        type    : $(\"#post_type\").val(),\n                        id      : $(\"#post_id\").val(),\n                        data    : data\n                    },\n                    function(data) {\n                        if ($(\"#post_type\").val() === \"deleteCategory\") {\n                            $(\"#t_field_\"+$(\"#post_id\").val()).hide();\n                        } else if ($(\"#post_type\").val() === \"renameItem\") {\n                            $(\"#item_\"+$(\"#post_id\").val()).html($(\"#new_item_title\").val());\n                        }\n                        loadFieldsList();\n                        $(\"#new_category_label, #new_item_title\").val(\"\");\n                        $(\"#div_loading\").hide();\n                        $this.dialog(\"close\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#add_new_field\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 550,\n        height: 210,\n        title: \"<?php echo $LANG['define_new_field']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                if ($(\"#new_field_title\").val() !== \"\" && $(\"#post_id\").val() !== \"\") {\n                    $(\"#div_loading\").show();\n                    var $this = $(this);\n                    //send query\n                    $.post(\n                        \"sources/categories.queries.php\",\n                        {\n                            type        : \"addNewField\",\n                            field_title : sanitizeString($(\"#new_field_title\").val()),\n                            field_type  : sanitizeString($(\"#new_field_type\").val()),\n                            id          : $(\"#post_id\").val()\n                        },\n                        function(data) {\n                            $(\"#new_field_title\").val(\"\");\n                            // reload table\n                            loadFieldsList();\n                            $this.dialog(\"close\");\n                        },\n                        \"json\"\n                    );\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#cat_folders_selection\").multiselect({\n        selectedList: 7,\n        multiple:true,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n\n    $(\"#category_in_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 350,\n        title: \"<?php echo $LANG['category_in_folders']; ?>\",\n        open: function() {\n            $(\"#cat_folders_selection\").multiselect('refresh');\n        },\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                // get list of selected folders\n                var ids = \"\";\n                $(\"#cat_folders_selection :selected\").each(function(i, selected) {\n                    if (ids == \"\") ids = $(selected).val();\n                    else ids = ids + \";\" + $(selected).val();\n                });\n                if (ids != \"\") {\n                    $(\"#div_loading, #catInFolder_wait\").show();\n                    var $this = $(this);\n                    //send query\n                    $.post(\n                        \"sources/categories.queries.php\",\n                        {\n                            type        : \"categoryInFolders\",\n                            foldersIds  : ids,\n                            id          : $(\"#post_id\").val()\n                        },\n                        function(data) {\n                            $(\"#new_field_title\").val(\"\");\n                            // display new list\n                            $(\"#catFolders_\"+$(\"#post_id\").val()).html(data[0].list);\n                            // close\n                            $(\"#div_loading, #catInFolder_wait\").hide();\n                            $this.dialog(\"close\");\n                        },\n                        \"json\"\n                    );\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#restore_bck_encryption_key_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width:300,\n        height:180,\n        title: \"<?php echo $LANG['admin_action_db_restore_key']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['ok']; ?>\": function() {\n                LaunchAdminActions(\"admin_action_db_restore\", $(\"#restore_bck_fileObj\").val()+\"&\"+$(\"#restore_bck_encryption_key\").val());\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function(event,ui) {\n            $(\"#div_loading\").hide();\n            $(\"#restore_bck_encryption_key_dialog\").dialog(\"close\");\n        }\n    });\n\n    // SQL IMPORT FOR RESTORING\n    var uploader_restoreDB = new plupload.Uploader({\n        runtimes : \"gears,html5,flash,silverlight,browserplus\",\n        browse_button : \"pickfiles_restoreDB\",\n        container : \"upload_container_restoreDB\",\n        max_file_size : \"10mb\",\n        chunk_size : \"1mb\",\n        unique_names : true,\n        dragdrop : true,\n        multiple_queues : false,\n        multi_selection : false,\n        max_file_count : 1,\n        url : \"sources/upload/upload.files.php\",\n        flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n        filters : [\n            {title : \"SQL files\", extensions : \"sql\"}\n        ],\n        init: {\n            FilesAdded: function(up, files) {\n                $(\"#div_loading\").show();\n                // generate and save token\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type : \"save_token\",\n                        size : 25,\n                        capital: true,\n                        numeric: true,\n                        ambiguous: true,\n                        reason: \"restore_db\",\n                        duration: 10\n                    },\n                    function(data) {\n                        $(\"#user_token\").val(data[0].token);\n                        up.start();\n                    },\n                    \"json\"\n                );\n            },\n            BeforeUpload: function (up, file) {\n                $(\"#import_status_ajax_loader\").show();\n                up.settings.multipart_params = {\n                    \"PHPSESSID\":\"'.$_SESSION['user_id'].'\",\n                    \"File\":file.name,\n                    \"type_upload\":\"restore_db\",\n                    \"user_token\": $(\"#user_token\").val()\n                };\n            },\n            UploadComplete: function(up, files) {\n                $.each(files, function(i, file) {\n                    $(\"#restore_bck_fileObj\").val(file.name);\n                    $(\"#restore_bck_encryption_key_dialog\").dialog(\"open\");\n                });\n            }\n        }\n    });\n    // Uploader options\n    uploader_restoreDB.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n    });\n    uploader_restoreDB.bind(\"Error\", function(up, err) {\n        $(\"#filelist_restoreDB\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_restoreDB.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n    // Load CSV click\n    $(\"#uploadfiles_restoreDB\").click(function(e) {\n        uploader_restoreDB.start();\n        e.preventDefault();\n    });\n    uploader_restoreDB.init();\n    // -end\n\n    //Enable/disable option\n    $(\"#restricted_to\").bind(\"click\", function() {\n        if ($(\"#restricted_to_input\").val()== 1) {\n            $(\"#tr_option_restricted_to_roles\").show();\n        } else {\n            $(\"#tr_option_restricted_to_roles\").hide();\n            $(\"#tr_option_restricted_to_roles_input\").val(\"0\");\n        }\n    });\n    $(\"#anyone_can_modify\").bind(\"click\", function() {\n        if ($(\"#anyone_can_modify_input\").val()== 1) {\n            $(\"#tr_option_anyone_can_modify_bydefault\").show();\n        } else {\n            $(\"#tr_option_anyone_can_modify_bydefault\").hide();\n            $(\"#anyone_can_modify_bydefault_input\").val(\"0\");\n        }\n    });\n\n    //check NEW SALT KEY\n    $(\"#new_salt_key\").keypress(function (e) {\n        var key = e.charCode || e.keyCode || 0;\n        if ($(\"#new_salt_key\").val().length != 16) {\n            $(\"#change_salt_key_image\").html('<i class=\"fa fa-cross mi-red\"></i>');\n            $(\"#change_salt_key_but\").hide();\n        } else {\n            $(\"#change_salt_key_image\").html('<i class=\"fa fa-check mi-green\"></i>');\n            $(\"#change_salt_key_but\").show();\n        }\n        // allow backspace, tab, delete, arrows, letters, numbers and keypad numbers ONLY\n        return (\n            key != 33 && key != 34 && key != 39 && key != 92 && key != 32  && key != 96 && (key < 165)\n            && $(\"#new_salt_key\").val().length <= 32\n       );\n    });\n\n    $(\"button\").button();\n\n    // check if backup table exists\n    $.post(\"sources/admin.queries.php\",\n        {\n            type        : \"is_backup_table_existing\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data === \"1\") {\n                $(\"#changeMainSaltKey_message\").show().html('<?php echo addslashes($LANG['previous_backup_exists']); ?>&nbsp;&nbsp;<b><a href=\"#\" id=\"but_bck_restore\"><?php echo $LANG['yes']; ?></a></b><br /><?php echo $LANG['previous_backup_exists_delete']; ?>&nbsp;&nbsp;<b><a href=\"#\" id=\"but_bck_delete\"><?php echo $LANG['yes']; ?></a></b>');\n\n                // Restore the backup\n                $(\"#but_bck_restore\").click(function(e) {\n                    encryption_show_revert();\n                });\n\n                // Delete the backup\n                $(\"#but_bck_delete\").click(function(e) {\n                    if (confirm(\"<?php echo $LANG['wipe_backup_data']; ?>\")) {\n                        $(\"#changeMainSaltKey_message\").append('<div style=\"margin-top:5px;\"><i class=\"fa fa-cog fa-spin fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>...</div>')\n                        $.post(\n                            \"sources/admin.queries.php\",\n                            {\n                                type    : \"admin_action_change_salt_key___delete_backup\",\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            },\n                            function(data) {\n                                $(\"#changeMainSaltKey_message\").html('').hide();\n                            },\n                            \"json\"\n                       );\n                    }\n                });\n            }\n        }\n    );\n\n\n});\n\nfunction manageEncryptionOfAttachments(list, cpt) {\n    $(\"#div_loading\").show();\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n            type    : \"admin_action_attachments_cryption_continu\",\n            option  : $(\"input[name=attachments_cryption]:checked\").val(),\n            cpt     : cpt,\n            list    : list\n        },\n        function(data) {\n            if (data[0].continu === \"1\" ) {\n                manageEncryptionOfAttachments(data[0].list, data[0].cpt);\n            } else {\n                $(\"#result_admin_action_attachments_cryption\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].cpt+\" files changed.\").show();\n                $('#attachments_cryption_radio1, #attachments_cryption_radio2').prop('checked', false);\n                $(\"#div_loading\").hide();\n            }\n        },\n        \"json\"\n    );\n}\n\nfunction refreshInput()\n{\n    var ids = \"\";\n    $.each($(\"#roles_allowed_to_print_select option:selected\"), function(){\n        if (ids == \"\") ids = $(this).val();\n        else ids = ids + \";\" + $(this).val();\n    });\n    $(\"#roles_allowed_to_print\").val(ids);\n    updateSetting('roles_allowed_to_print');\n}\n\nfunction changeEncrypMode(id, encrypted_data) {\n    // send to server\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"dataIsEncryptedInDB\",\n            id      : id,\n            encrypt : encrypted_data === \"1\" ? \"0\" : \"1\"\n        },\n        function(data) {\n            // show to user\n            if (data[0].error === \"\"){\n                if (encrypted_data === \"1\") {\n                    $(\"#encryt_data_\"+id).html('<span class=\"fa-stack\" title=\"<?php echo $LANG['not_encrypted_data']; ?>\" onclick=\"changeEncrypMode(\\''+id+'\\', \\'0\\')\"><i class=\"fa fa-key fa-stack-1x\"></i><i class=\"fa fa-ban fa-stack-1x fa-lg\" style=\"color:red;\"></i></span>');\n                } else {\n                    $(\"#encryt_data_\"+id).html('<i class=\"fa fa-key tip\" title=\"<?php echo $LANG['encrypted_data']; ?>\" onclick=\"changeEncrypMode(\\''+id+'\\', \\'1\\')\"></i>');\n                }\n            }\n            $(\"#div_loading\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n**\n*/\nfunction generateAndStoreBackupPass() {\n    $.when(\n        generateRandomKey('bck_script_passkey', '40', 'true', 'true', 'false', 'false')\n    ).then(function(x) {\n        updateSetting('bck_script_passkey');\n    });\n}\n//]]>\n</script>", "<?php\n/**\n *\n * @file          admin.settings.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], curPage())) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\necho '\n<input type=\"hidden\" id=\"user_token\" value=\"\" />\n<div style=\"margin-top:10px;\">\n    <form name=\"form_settings\" method=\"post\" action=\"\">';\n// Main div for TABS\necho '\n        <div style=\"width:900px;margin:auto; line-height:20px; padding:10px;\" id=\"tabs\">';\n// Tabs menu\necho '\n            <ul>\n                <li><a href=\"#tabs-1\">'.$LANG['admin_settings_title'].'</a></li>\n                <li><a href=\"#tabs-3\">'.$LANG['admin_misc_title'].'</a></li>\n                <li><a href=\"#tabs-7\">'.$LANG['admin_upload_title'].'</a></li>\n                <li><a href=\"#tabs-2\">'.$LANG['admin_actions_title'].'</a></li>\n                <li><a href=\"#tabs-4\">'.$LANG['admin_ldap_menu'].'</a></li>\n                <li><a href=\"#tabs-5\">'.$LANG['admin_backups'].'</a></li>\n                <li><a href=\"#tabs-6\">'.$LANG['admin_emails'].'</a></li>\n                <li><a href=\"admin.settings_categories.php\">'.$LANG['categories'].'</a></li>\n                <li><a href=\"admin.settings_api.php\">'.$LANG['admin_api'].'</a></li>\n                <li><a href=\"admin.settings_duo.php\">'.$LANG['admin_2factor_authentication_tab'].'</a></li>\n            </ul>';\n// --------------------------------------------------------------------------------\n// TAB N\u00e91\necho '\n            <div id=\"tabs-1\">\n                <table border=\"0\">';\n// cpassman_dir\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_dir\">'.$LANG['admin_misc_cpassman_dir'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"cpassman_dir\" name=\"cpassman_dir\" value=\"', isset($SETTINGS['cpassman_dir']) ? $SETTINGS['cpassman_dir'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// cpassman_url\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_url\">'.$LANG['admin_misc_cpassman_url'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"cpassman_url\" name=\"cpassman_url\" value=\"', isset($SETTINGS['cpassman_url']) ? $SETTINGS['cpassman_url'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// path_to_upload_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"path_to_upload_folder\">'.$LANG['admin_path_to_upload_folder'].'</label>\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_path_to_upload_folder_tip']), ENT_QUOTES).'\"></i>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"path_to_upload_folder\" name=\"path_to_upload_folder\" value=\"', isset($SETTINGS['path_to_upload_folder']) ? $SETTINGS['path_to_upload_folder'] : $SETTINGS['cpassman_dir'].'/upload', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// url_to_upload_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"url_to_upload_folder\">'.$LANG['admin_url_to_upload_folder'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"url_to_upload_folder\" name=\"url_to_upload_folder\" value=\"', isset($SETTINGS['url_to_upload_folder']) ? $SETTINGS['url_to_upload_folder'] : $SETTINGS['cpassman_url'].'/upload', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// path_to_files_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"path_to_files_folder\">'.$LANG['admin_path_to_files_folder'].'</label>\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_path_to_files_folder_tip']), ENT_QUOTES).'\"></i>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"path_to_files_folder\" name=\"path_to_files_folder\" value=\"', isset($SETTINGS['path_to_files_folder']) ? $SETTINGS['path_to_files_folder'] : $SETTINGS['cpassman_dir'].'/files', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// url_to_files_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"url_to_files_folder\">'.$LANG['admin_url_to_files_folder'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"url_to_files_folder\" name=\"url_to_files_folder\" value=\"', isset($SETTINGS['url_to_files_folder']) ? $SETTINGS['url_to_files_folder'] : $SETTINGS['cpassman_url'].'/files', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Favicon\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"favicon\">'.$LANG['admin_misc_favicon'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"favicon\" name=\"favicon\" value=\"', isset($SETTINGS['favicon']) ? $SETTINGS['favicon'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// custom_logo\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_dir\">'.$LANG['admin_misc_custom_logo'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"custom_logo\" name=\"custom_logo\" value=\"', isset($SETTINGS['custom_logo']) ? $SETTINGS['custom_logo'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// custom_login_text\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"cpassman_dir\">'.$LANG['admin_misc_custom_login_text'].'</label>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"80\" id=\"custom_login_text\" name=\"custom_login_text\" value=\"', isset($SETTINGS['custom_login_text']) ? $SETTINGS['custom_login_text'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\necho '\n            </table>';\n\necho '\n            <table>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Maintenance mode\necho '\n            <tr style=\"margin-bottom:3px\">\n            <td>\n                  <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                  <label>' .\n$LANG['settings_maintenance_mode'].'\n                      &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_maintenance_mode_tip']), ENT_QUOTES).'\"></i>\n                  </label>\n            </td>\n            <td>\n                <div class=\"toggle toggle-modern\" id=\"maintenance_mode\" data-toggle-on=\"', isset($SETTINGS['maintenance_mode']) && $SETTINGS['maintenance_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" name=\"maintenance_mode_input\" id=\"maintenance_mode_input\" value=\"', isset($SETTINGS['maintenance_mode']) && $SETTINGS['maintenance_mode'] == 1 ? '1' : '0', '\" />\n            </td>\n            </tr>';\n// default_session_expiration_time\necho '\n            <tr style=\"margin-bottom:3px\">\n            <td>\n                  <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                  <label>'.$LANG['settings_default_session_expiration_time'].'</label>\n            </td>\n            <td>\n                <input type=\"text\" size=\"15\" id=\"default_session_expiration_time\" name=\"default_session_expiration_time\" value=\"', isset($SETTINGS['default_session_expiration_time']) ? $SETTINGS['default_session_expiration_time'] : \"60\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n             </td>\n            </tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n//Enable SSL STS\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                      <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                      <label>' .\n                            $LANG['settings_enable_sts'].'\n                          &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_enable_sts_tip']), ENT_QUOTES).'\"></i>\n                      </label>\n                </td>\n                <td>\n                    <div class=\"toggle toggle-modern\" id=\"enable_sts\" data-toggle-on=\"', isset($SETTINGS['enable_sts']) && $SETTINGS['enable_sts'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" name=\"enable_sts_input\" id=\"enable_sts_input\" value=\"', isset($SETTINGS['enable_sts']) && $SETTINGS['enable_sts'] == 1 ? '1' : '0', '\" />\n                </td>\n            </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n//Proxy\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"proxy_ip\">'.$LANG['admin_proxy_ip'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_proxy_ip_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"15\" id=\"proxy_ip\" name=\"proxy_ip\" value=\"', isset($SETTINGS['proxy_ip']) ? $SETTINGS['proxy_ip'] : \"\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"proxy_port\">'.$LANG['admin_proxy_port'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_proxy_port_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"10\" id=\"proxy_port\" name=\"proxy_port\" value=\"', isset($SETTINGS['proxy_port']) ? $SETTINGS['proxy_port'] : \"\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// pwd_maximum_length\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"pwd_maximum_length\">'.$LANG['admin_pwd_maximum_length'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_pwd_maximum_length_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"10\" id=\"pwd_maximum_length\" name=\"pwd_maximum_length\" value=\"', isset($SETTINGS['pwd_maximum_length']) ? $SETTINGS['pwd_maximum_length'] : 40, '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// TIMEZONE\n// get list of all timezones\n$zones = timezone_identifiers_list();\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"timezone\">'.$LANG['timezone_selection'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"timezone\" name=\"timezone\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"\">-- '.$LANG['select'].' --</option>';\nforeach ($zones as $zone) {\n    echo '\n    <option value=\"'.$zone.'\"', isset($SETTINGS['timezone']) && $SETTINGS['timezone'] == $zone ? ' selected=\"selected\"' : '', '>'.$zone.'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\n// DATE format\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"date_format\">'.$LANG['date_format'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"date_format\" name=\"date_format\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"d/m/Y\"', !isset($SETTINGS['date_format']) || $SETTINGS['date_format'] == \"d/m/Y\" ? ' selected=\"selected\"' : \"\", '>d/m/Y</option>\n                            <option value=\"m/d/Y\"', $SETTINGS['date_format'] == \"m/d/Y\" ? ' selected=\"selected\"' : \"\", '>m/d/Y</option>\n                            <option value=\"d-M-Y\"', $SETTINGS['date_format'] == \"d-M-Y\" ? ' selected=\"selected\"' : \"\", '>d-M-Y</option>\n                            <option value=\"d/m/y\"', $SETTINGS['date_format'] == \"d/m/y\" ? ' selected=\"selected\"' : \"\", '>d/m/y</option>\n                            <option value=\"m/d/y\"', $SETTINGS['date_format'] == \"m/d/y\" ? ' selected=\"selected\"' : \"\", '>m/d/y</option>\n                            <option value=\"d-M-y\"', $SETTINGS['date_format'] == \"d-M-y\" ? ' selected=\"selected\"' : \"\", '>d-M-y</option>\n                            <option value=\"d-m-y\"', $SETTINGS['date_format'] == \"d-m-y\" ? ' selected=\"selected\"' : \"\", '>d-m-y</option>\n                            <option value=\"Y-m-d\"', $SETTINGS['date_format'] == \"Y-m-d\" ? ' selected=\"selected\"' : \"\", '>Y-m-d</option>\n                        </select>\n                    </td>\n                </tr>';\n// TIME format\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"time_format\">'.$LANG['time_format'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"time_format\" name=\"time_format\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"H:i:s\"', !isset($SETTINGS['time_format']) || $SETTINGS['time_format'] == \"H:i:s\" ? ' selected=\"selected\"' : \"\", '>H:i:s</option>\n                            <option value=\"h:m:s a\"', $SETTINGS['time_format'] == \"h:i:s a\" ? ' selected=\"selected\"' : \"\", '>h:i:s a</option>\n                            <option value=\"g:i:s a\"', $SETTINGS['time_format'] == \"g:i:s a\" ? ' selected=\"selected\"' : \"\", '>g:i:s a</option>\n                            <option value=\"G:i:s\"', $SETTINGS['time_format'] == \"G:i:s\" ? ' selected=\"selected\"' : \"\", '>G:i:s</option>\n                        </select>\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// LANGUAGES\n$zones = timezone_identifiers_list();\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"default_language\">'.$LANG['settings_default_language'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"default_language\" name=\"default_language\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"\">-- '.$LANG['select'].' --</option>';\nforeach ($languagesList as $lang) {\n    echo '\n    <option value=\"'.$lang.'\"', isset($SETTINGS['default_language']) && $SETTINGS['default_language'] == $lang ? ' selected=\"selected\"' : '', '>'.$lang.'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Number of used pw\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"number_of_used_pw\">'.$LANG['number_of_used_pw'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"number_of_used_pw\" name=\"number_of_used_pw\" value=\"', isset($SETTINGS['number_of_used_pw']) ? $SETTINGS['number_of_used_pw'] : '5', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Number days before changing pw\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"pw_life_duration\">'.$LANG['pw_life_duration'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"pw_life_duration\" name=\"pw_life_duration\" value=\"', isset($SETTINGS['pw_life_duration']) ? $SETTINGS['pw_life_duration'] : '5', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Number of bad authentication tentations before disabling user\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"nb_bad_authentication\">'.$LANG['nb_false_login_attempts'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"nb_bad_authentication\" name=\"nb_bad_authentication\" value=\"', isset($SETTINGS['nb_bad_authentication']) ? $SETTINGS['nb_bad_authentication'] : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable log connections\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_log_connections'].'</label>\n                    </td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"log_connections\" data-toggle-on=\"', isset($SETTINGS['log_connections']) && $SETTINGS['log_connections'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"log_connections_input\" name=\"log_connections_input\" value=\"', isset($SETTINGS['log_connections']) && $SETTINGS['log_connections'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>';\n// Enable log accessed\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_log_accessed'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"log_accessed\" data-toggle-on=\"', isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"log_accessed_input\" name=\"log_accessed_input\" value=\"', isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] == 1 ? '1' : '0', '\" />\n                </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable PF\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['enable_personal_folder_feature'].'</label>\n                <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['enable_personal_folder_feature_tip']), ENT_QUOTES).'\"></i></span>\n            </td><td>\n                <div class=\"toggle toggle-modern\" id=\"enable_pf_feature\" data-toggle-on=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_pf_feature_input\" name=\"enable_pf_feature_input\" value=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 ? '1' : '0', '\" />\n            </td></tr>';\n\n// enable PF cookie for Personal SALTKEY\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['enable_personal_saltkey_cookie'].'</label>\n            </td><td>\n                <div class=\"toggle toggle-modern\" id=\"enable_personal_saltkey_cookie\" data-toggle-on=\"', isset($SETTINGS['enable_personal_saltkey_cookie']) && $SETTINGS['enable_personal_saltkey_cookie'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_personal_saltkey_cookie_input\" name=\"enable_personal_saltkey_cookie_input\" value=\"', isset($SETTINGS['enable_personal_saltkey_cookie']) && $SETTINGS['enable_personal_saltkey_cookie'] == 1 ? '1' : '0', '\" />\n            </td></tr>';\n// PF cookie for Personal SALTKEY duration\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['personal_saltkey_cookie_duration'].'</label>\n            </td><td>\n            <div class=\"div_radio\">\n                <input type=\"text\" size=\"10\" id=\"personal_saltkey_cookie_duration\" name=\"personal_saltkey_cookie_duration\" value=\"', isset($SETTINGS['personal_saltkey_cookie_duration']) ? $SETTINGS['personal_saltkey_cookie_duration'] : '31', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n            </div>\n            </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Attachments encryption strategy\n\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_attachments_encryption'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_attachments_encryption_tip']), ENT_QUOTES).'\"></i>&nbsp;</span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_attachment_encryption\" data-toggle-on=\"', isset($SETTINGS['enable_attachment_encryption']) && $SETTINGS['enable_attachment_encryption'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_attachment_encryption_input\" name=\"enable_attachment_encryption_input\" value=\"', isset($SETTINGS['enable_attachment_encryption']) && $SETTINGS['enable_attachment_encryption'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable KB\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_kb'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_kb_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_kb\" data-toggle-on=\"', isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_kb_input\" name=\"enable_kb_input\" value=\"', isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable SUGGESTION\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_suggestion'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_suggestion_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_suggestion\" data-toggle-on=\"', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_suggestion_input\" name=\"enable_suggestion_input\" value=\"', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\n// Enable GET TP Information\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_get_tp_info'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_get_tp_info_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"get_tp_info\" data-toggle-on=\"', isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"get_tp_info_input\" name=\"get_tp_info_input\" value=\"', isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '\n                <tr><td colspan=\"3\"><hr /></td></tr>\n                </table>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e92\necho '\n            <div id=\"tabs-2\">';\n// Rebuild Config file\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_rebuild_config_file\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['rebuild_config_file'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['rebuild_config_file_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_rebuild_config_file\" style=\"margin-left:10px;display:none;\"></span>\n                </div>';\n// Update Personal folders for users\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_check_pf\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_check_pf'].'</label>\n                    <span id=\"result_admin_action_check_pf\" style=\"margin-left:10px;display:none;\"></span>\n                </div>';\n// Clean DB with orphan items\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_clean_items\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_db_clean_items'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_clean_items_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_db_clean_items\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Optimize the DB\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_optimize\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_db_optimize'].'</label>\n                    <span id=\"result_admin_action_db_optimize\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Purge old files\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_purge_old_files\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_purge_old_files'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_purge_old_files_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_purge_old_files\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Reload Cache Table\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_reload_cache_table\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_reload_cache_table'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_reload_cache_table_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_reload_cache_table\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Change main SALT key\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"confirmChangingSk()\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_change_salt_key'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_change_salt_key_tip']), ENT_QUOTES).'\"></i></span>\n                        <br/>\n                        <div id=\"changeMainSaltKey_message\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\"></div>\n                    </span>\n                    <input type=\"hidden\" id=\"changeMainSaltKey_itemsCount\" />\n                </div>';\n\n// Encrypt / decrypt attachments\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"startFileEncDecyption()\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    '.$LANG['admin_action_attachments_cryption'].'\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_attachments_cryption_tip']), ENT_QUOTES).'\"></i></span>\n                    <br/>\n                    <div id=\"admin_action_attachments_cryption_selection\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\">\n                        '.$LANG['what_action_to_perform'].':&nbsp;\n                        <span class=\"div_radio\" style=\"\">\n                            <input type=\"radio\" id=\"attachments_cryption_radio1\" name=\"attachments_cryption\" value=\"encrypt\" /><label for=\"attachments_cryption_radio1\">'.$LANG['encrypt'].'</label>\n                            <input type=\"radio\" id=\"attachments_cryption_radio2\" name=\"attachments_cryption\" value=\"decrypt\" /><label for=\"attachments_cryption_radio2\">'.$LANG['decrypt'].'</label>\n                        </span>\n                        &nbsp;&nbsp;<a href=\"#\" onclick=\"LaunchAdminActions(\\'admin_action_attachments_cryption\\')\">'.addslashes($LANG['admin_action_db_backup_start_tip']).'</a>\n                        <div id=\"result_admin_action_attachments_cryption\" class=\"\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\"></div>\n                    </div>\n                </div>';\n\necho '\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00b03\necho '\n            <div id=\"tabs-3\">\n                <table width=\"100%\">';\n// After how long, edition is considered as failed or finished\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_delay_for_item_edition'].\n    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_delay_for_item_edition_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"delay_item_edition\" name=\"delay_item_edition\" value=\"', isset($SETTINGS['delay_item_edition']) ? $SETTINGS['delay_item_edition'] : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// OTV - otv_is_enabled\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['otv_is_enabled'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"otv_is_enabled\" data-toggle-on=\"', isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"otv_is_enabled_input\" name=\"otv_is_enabled_input\" value=\"', isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Expired time for OTV - otv_expiration_period\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_otv_expiration_period'].'</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"otv_expiration_period\" name=\"otv_expiration_period\" value=\"', isset($SETTINGS['otv_expiration_period']) ? $SETTINGS['otv_expiration_period'] : '7', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Managers can edit & delete items they are allowed to see\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_manager_edit'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"manager_edit\" data-toggle-on=\"', isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"manager_edit_input\" name=\"manager_edit_input\" value=\"', isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\n// Managers can move items they are allowed to see\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_manager_move_item'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"manager_move_item\" data-toggle-on=\"', isset($SETTINGS['manager_move_item']) && $SETTINGS['manager_move_item'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"manager_move_item_input\" name=\"manager_move_item_input\" value=\"', isset($SETTINGS['manager_move_item']) && $SETTINGS['manager_move_item'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// max items\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"max_last_items\">'.$LANG['max_last_items'].'</label>\n                    </td><td>\n                    <input type=\"text\" size=\"4\" id=\"max_last_items\" name=\"max_last_items\" value=\"', isset($SETTINGS['max_latest_items']) ? $SETTINGS['max_latest_items'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Duplicate folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"duplicate_folder\" data-toggle-on=\"', isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"duplicate_folder_input\" name=\"duplicate_folder_input\" value=\"', isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Duplicate item name\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_item'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"duplicate_item\" data-toggle-on=\"', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"duplicate_item_input\" name=\"duplicate_item_input\" value=\"', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Duplicate item name in same folder - item_duplicate_in_same_folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_item_in_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"item_duplicate_in_same_folder\" data-toggle-on=\"', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"item_duplicate_in_same_folder_input\" name=\"item_duplicate_in_same_folder_input\" value=\"', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable show_only_accessible_folders\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['show_only_accessible_folders'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['show_only_accessible_folders_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"show_only_accessible_folders\" data-toggle-on=\"', isset($SETTINGS['show_only_accessible_folders']) && $SETTINGS['show_only_accessible_folders'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"show_only_accessible_folders_input\" name=\"show_only_accessible_folders_input\" value=\"', isset($SETTINGS['show_only_accessible_folders']) && $SETTINGS['show_only_accessible_folders'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable subfolder_rights_as_parent\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['subfolder_rights_as_parent'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['subfolder_rights_as_parent_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"subfolder_rights_as_parent\" data-toggle-on=\"', isset($SETTINGS['subfolder_rights_as_parent']) && $SETTINGS['subfolder_rights_as_parent'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"subfolder_rights_as_parent_input\" name=\"subfolder_rights_as_parent_input\" value=\"', isset($SETTINGS['subfolder_rights_as_parent']) && $SETTINGS['subfolder_rights_as_parent'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable create_item_without_password\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['create_item_without_password'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"create_item_without_password\" data-toggle-on=\"', isset($SETTINGS['create_item_without_password']) && $SETTINGS['create_item_without_password'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"create_item_without_password_input\" name=\"create_item_without_password_input\" value=\"', isset($SETTINGS['create_item_without_password']) && $SETTINGS['create_item_without_password'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable FAVOURITES\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_favourites'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_favourites\" data-toggle-on=\"', isset($SETTINGS['enable_favourites']) && $SETTINGS['enable_favourites'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_favourites_input\" name=\"enable_favourites_input\" value=\"', isset($SETTINGS['enable_favourites']) && $SETTINGS['enable_favourites'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable USER can create folders\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_user_can_create_folders'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_user_can_create_folders\" data-toggle-on=\"', isset($SETTINGS['enable_user_can_create_folders']) && $SETTINGS['enable_user_can_create_folders'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_user_can_create_folders_input\" name=\"enable_user_can_create_folders_input\" value=\"', isset($SETTINGS['enable_user_can_create_folders']) && $SETTINGS['enable_user_can_create_folders'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable can_create_root_folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['setting_can_create_root_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"can_create_root_folder\" data-toggle-on=\"', isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"can_create_root_folder_input\" name=\"can_create_root_folder_input\" value=\"', isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable enable_massive_move_delete\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_massive_move_delete'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['enable_massive_move_delete_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_massive_move_delete\" data-toggle-on=\"', isset($SETTINGS['enable_massive_move_delete']) && $SETTINGS['enable_massive_move_delete'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_massive_move_delete_input\" name=\"enable_massive_move_delete_input\" value=\"', isset($SETTINGS['enable_massive_move_delete']) && $SETTINGS['enable_massive_move_delete'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable activate_expiration\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['admin_setting_activate_expiration'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_setting_activate_expiration_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"activate_expiration\" data-toggle-on=\"', isset($SETTINGS['activate_expiration']) && $SETTINGS['activate_expiration'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"activate_expiration_input\" name=\"activate_expiration_input\" value=\"', isset($SETTINGS['activate_expiration']) && $SETTINGS['activate_expiration'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable enable_delete_after_consultation\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['admin_setting_enable_delete_after_consultation'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_setting_enable_delete_after_consultation_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_delete_after_consultation\" data-toggle-on=\"', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_delete_after_consultation_input\" name=\"enable_delete_after_consultation_input\" value=\"', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable Printing\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_printing'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_printing_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"allow_print\" data-toggle-on=\"', isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"allow_print_input\" name=\"allow_print_input\" value=\"', isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\n// Enable Printing Groups - roles_allowed_to_print\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_roles_allowed_to_print'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_roles_allowed_to_print_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"hidden\" id=\"roles_allowed_to_print\" name=\"roles_allowed_to_print\" value=\"', isset($SETTINGS['roles_allowed_to_print']) ? $SETTINGS['roles_allowed_to_print'] : '', '\" />\n                    <select id=\"roles_allowed_to_print_select\" name=\"roles_allowed_to_print_select\" class=\"text ui-widget-content\" multiple=\"multiple\" onchange=\"refreshInput()\">';\nif (!isset($SETTINGS['roles_allowed_to_print']) || empty($SETTINGS['roles_allowed_to_print'])) {\n    $arrRolesToPrint = array();\n} else {\n    $arrRolesToPrint = explode(\";\", $SETTINGS['roles_allowed_to_print']);\n}\n$roles = DB::query(\"SELECT id, title FROM \".prefix_table(\"roles_title\"));\nforeach ($roles as $role) {\n    echo '<option value=\"'.$role['id'].'\"', in_array($role['id'], $arrRolesToPrint) ? ' selected=\"selected\"' : '', '>'.addslashes($role['title']).'</option>';\n}\necho '\n                        </select>\n                </td></tr>';\n// Enable IMPORT\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_importing'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"allow_import\" data-toggle-on=\"', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"allow_import_input\" name=\"allow_import_input\" value=\"', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable Item modification by anyone\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_anyone_can_modify'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_anyone_can_modify_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"anyone_can_modify\" data-toggle-on=\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"anyone_can_modify_input\" name=\"anyone_can_modify_input\" value=\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable Item modification by anyone by default\necho '\n                <tr id=\"tr_option_anyone_can_modify_bydefault\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : ' style=\"display:none;\"', '><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.htmlentities(strip_tags($LANG['settings_anyone_can_modify_bydefault'])).'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"anyone_can_modify_bydefault\" data-toggle-on=\"', isset($SETTINGS['anyone_can_modify_bydefault']) && $SETTINGS['anyone_can_modify_bydefault'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"anyone_can_modify_bydefault_input\" name=\"anyone_can_modify_bydefault_input\" value=\"', isset($SETTINGS['anyone_can_modify_bydefault']) && $SETTINGS['anyone_can_modify_bydefault'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable restricted_to option\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_restricted_to'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"restricted_to\" data-toggle-on=\"', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"restricted_to_input\" name=\"restricted_to_input\" value=\"', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable restricted_to_roles\necho '\n                <tr id=\"tr_option_restricted_to_roles\" style=\"display:', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? 'inline' : 'none', ';\"><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['restricted_to_roles'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"restricted_to_roles\" data-toggle-on=\"', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"restricted_to_roles_input\" name=\"restricted_to_roles_input\" value=\"', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable show copy to clipboard small icons\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['copy_to_clipboard_small_icons'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['copy_to_clipboard_small_icons_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"copy_to_clipboard_small_icons\" data-toggle-on=\"', isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"copy_to_clipboard_small_icons_input\" name=\"copy_to_clipboard_small_icons_input\" value=\"', isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable Show description in items list\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_show_description'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"show_description\" data-toggle-on=\"', isset($SETTINGS['show_description']) && $SETTINGS['show_description'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"show_description_input\" name=\"show_description_input\" value=\"', isset($SETTINGS['show_description']) && $SETTINGS['show_description'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// In Tree, display number of Items in subfolders and number of subfolders - tree_counters\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_tree_counters'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_tree_counters_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"tree_counters\" data-toggle-on=\"', isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"tree_counters_input\" name=\"tree_counters_input\" value=\"', isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// nb of items to display by ajax query\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['nb_items_by_query'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['nb_items_by_query_tip']), ENT_QUOTES).'\"></i></span>\n                    </td><td>\n                    <input type=\"text\" size=\"4\" id=\"nb_items_by_query\" name=\"nb_items_by_query\" value=\"', isset($SETTINGS['nb_items_by_query']) ? $SETTINGS['nb_items_by_query'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable sending email on USER login\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_send_email_on_user_login'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_send_email_on_user_login\" data-toggle-on=\"', isset($SETTINGS['enable_send_email_on_user_login']) && $SETTINGS['enable_send_email_on_user_login'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_send_email_on_user_login_input\" name=\"enable_send_email_on_user_login_input\" value=\"', isset($SETTINGS['enable_send_email_on_user_login']) && $SETTINGS['enable_send_email_on_user_login'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable email notification on item shown\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_email_notification_on_item_shown'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_email_notification_on_item_shown\" data-toggle-on=\"', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_email_notification_on_item_shown_input\" name=\"enable_email_notification_on_item_shown_input\" value=\"', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable email notification when user password is changed\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_email_notification_on_user_pw_change'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_email_notification_on_user_pw_change\" data-toggle-on=\"', isset($SETTINGS['enable_email_notification_on_user_pw_change']) && $SETTINGS['enable_email_notification_on_user_pw_change'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_email_notification_on_user_pw_change_input\" name=\"enable_email_notification_on_user_pw_change_input\" value=\"', isset($SETTINGS['enable_email_notification_on_user_pw_change']) && $SETTINGS['enable_email_notification_on_user_pw_change'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable add manual entries in History\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_insert_manual_entry_item_history'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_insert_manual_entry_item_history_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"insert_manual_entry_item_history\" data-toggle-on=\"', isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"insert_manual_entry_item_history_input\" name=\"insert_manual_entry_item_history_input\" value=\"', isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// OffLine mode options\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_offline_mode'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_offline_mode_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"settings_offline_mode\" data-toggle-on=\"', isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"settings_offline_mode_input\" name=\"settings_offline_mode_input\" value=\"', isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// OffLne KEy Level\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"offline_key_level\">'.$LANG['offline_mode_key_level'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"offline_key_level\" name=\"offline_key_level\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\"', isset($SETTINGS['offline_key_level']) && $SETTINGS['offline_key_level'] == $complex[0] ? ' selected=\"selected\"' : '', '>'.$complex[1].'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// SYSLOG ENABLE\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['syslog_enable'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"syslog_enable\" data-toggle-on=\"', isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"syslog_enable_input\" name=\"syslog_enable_input\" value=\"', isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// SYSLOG Host\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-long-arrow-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['syslog_host'].'\n                        </td>\n                        <td>\n                            <input id=\"syslog_host\" name=\"syslog_host\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['syslog_host']) ? 'localhost' : $SETTINGS['syslog_host'], '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SYSLOG port\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-long-arrow-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['syslog_port'].'\n                        </td>\n                        <td>\n                            <input id=\"syslog_port\" name=\"syslog_port\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['syslog_port']) ? '514' : $SETTINGS['syslog_port'], '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n\n// Automatic server password change\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['server_password_change_enable'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['server_password_change_enable_tip']), ENT_QUOTES).'\"></i>&nbsp;</span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_server_password_change\" data-toggle-on=\"', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_server_password_change_input\" name=\"enable_server_password_change_input\" value=\"', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '\n            </table>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e94\necho '\n            <div id=\"tabs-4\">';\n// Check if LDAP extension is loaded\nif (!extension_loaded('ldap')) {\n    echo '\n    <div style=\"margin-bottom:3px;\">\n        <div class=\"ui-widget-content ui-corner-all\" style=\"padding:10px;\">\n            <i class=\"fa fa-warning fa-2x\"></i>&nbsp;'.$LANG['ldap_extension_not_loaded'].'\n        </div>\n    </div>';\n} else {\n    // Enable LDAP mode\n    echo '\n    <div style=\"margin-bottom:3px;\">\n        <table><tr>\n        <td><label for=\"ldap_mode\">'.$LANG['settings_ldap_mode'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_mode_tip']), ENT_QUOTES).'\"></i></label></td>\n        <td><div class=\"toggle toggle-modern\" id=\"ldap_mode\" data-toggle-on=\"', isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_mode_input\" name=\"ldap_mode_input\" value=\"', isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1 ? '1' : '0', '\" /></td>\n        </tr></table>\n    </div>';\n}\n// LDAP inputs\necho '\n            <div id=\"div_ldap_configuration\" ', (isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1) ? '' : ' style=\"display:none;\"', '>\n                <div style=\"font-weight:bold;font-size:14px;margin:15px 0px 8px 0px;\">'.$LANG['admin_ldap_configuration'].'</div>\n                <table id=\"ldap_config_values\">';\n// Type\n$ldap_type = isset($SETTINGS['ldap_type']) ? $SETTINGS['ldap_type'] : '';\necho '\n                    <tr>\n                        <td><label for=\"ldap_type\">'.$LANG['settings_ldap_type'].'</label></td>\n                        <td>\n                            <select id=\"ldap_type\" name=\"ldap_type\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\')); showLdapFields($(this).val());\">\n                                <option value=\"0\">-- '.$LANG['select'].' --</option>\n                                <option value=\"windows\"', $ldap_type === 'windows' ? ' selected=\"selected\"' : '', '>Windows / Active Directory</option>\n                                <option value=\"posix\"', $ldap_type === 'posix' ? ' selected=\"selected\"' : '', '>Posix / OpenLDAP (RFC2307)</option>\n                                <option value=\"posix-search\"', $ldap_type === 'posix-search' ? ' selected=\"selected\"' : '', '>Posix / OpenLDAP (RFC2307) Search Based</option>\n                            </select>\n                        </td>\n                    </tr>';\n// Domain\necho '\n                    <tr style=\"display:', (isset($ldap_type)) ? '' : 'none', '\" class=\"tr-windows tr-ldap tr-posix tr-posix-search\">\n                        <td><label for=\"ldap_suffix\">'.$LANG['settings_ldap_domain'].'</label></td>\n                        <td><input type=\"text\" size=\"50\" id=\"ldap_suffix\" name=\"ldap_suffix\" class=\"text ui-widget-content\" title=\"@dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_suffix']) ? $SETTINGS['ldap_suffix'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                    </tr>';\n\n// Domain DN\necho '\n                    <tr style=\"display:', (isset($ldap_type) && $ldap_type != 'posix-search') ? '' : 'none', '\" class=\"tr-windows tr-posix tr-ldap\">\n                        <td><label for=\"ldap_domain_dn\">'.$LANG['settings_ldap_domain_dn'].'</label></td>\n                        <td><input type=\"text\" size=\"50\" id=\"ldap_domain_dn\" name=\"ldap_domain_dn\" class=\"text ui-widget-content\" title=\"dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_domain_dn']) ? $SETTINGS['ldap_domain_dn'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                    </tr>';\n/*\n// Subtree for posix / openldap\n        echo '\n                <tr>\n                    <td><label for=\"ldap_suffix\">'.$LANG['settings_ldap_domain_posix'].'</label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_suffix\" name=\"ldap_suffix\" class=\"text ui-widget-content\" title=\"@dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_suffix']) ? $SETTINGS['ldap_suffix'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n*/\n// LDAP username attribute\n        // LDAP Object Class\n        echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_object_class\">'.$LANG['settings_ldap_object_class'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_object_class_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_object_class\" name=\"ldap_object_class\" class=\"text ui-widget-content\" title=\"Person\" value=\"',\n                    isset($SETTINGS['ldap_object_class']) ? $SETTINGS['ldap_object_class'] : 'posixAccount', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n        echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_user_attribute\">'.$LANG['settings_ldap_user_attribute'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_user_attribute_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_user_attribute\" name=\"ldap_user_attribute\" class=\"text ui-widget-content\" title=\"uid\" value=\"',\n                        isset($SETTINGS['ldap_user_attribute']) ? $SETTINGS['ldap_user_attribute'] : 'uid', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_usergroup\">'.$LANG['settings_ldap_usergroup'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_usergroup_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_usergroup\" name=\"ldap_usergroup\" class=\"text ui-widget-content\" title=\"uid\" value=\"',\n                        isset($SETTINGS['ldap_usergroup']) ? $SETTINGS['ldap_usergroup'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BIND DN for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_bind_dn\">'.$LANG['settings_ldap_bind_dn'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_bind_dn_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_bind_dn\" name=\"ldap_bind_dn\" class=\"text ui-widget-content\" title=\"uid=teampass,ou=people,dc=mydomain,dc=local\" value=\"', isset($SETTINGS['ldap_bind_dn']) ? $SETTINGS['ldap_bind_dn'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BIND PASSWD for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_bind_passwd\">'.$LANG['settings_ldap_bind_passwd'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_bind_passwd_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_bind_passwd\" name=\"ldap_bind_passwd\" class=\"text ui-widget-content\" title=\"123password456\" value=\"', isset($SETTINGS['ldap_bind_passwd']) ? $SETTINGS['ldap_bind_passwd'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BASE for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_search_base\">'.$LANG['settings_ldap_search_base'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_search_base_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_search_base\" name=\"ldap_search_base\" class=\"text ui-widget-content\" title=\"ou=people,dc=octopoos,dc=local\" value=\"', isset($SETTINGS['ldap_search_base']) ? $SETTINGS['ldap_search_base'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// Domain controler\necho '\n                <tr>\n                    <td><label for=\"ldap_domain_controler\">'.$LANG['settings_ldap_domain_controler'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_domain_controler_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_domain_controler\" name=\"ldap_domain_controler\" class=\"text ui-widget-content\" title=\"dc01.mydomain.local,dc02.mydomain.local\" value=\"', isset($SETTINGS['ldap_domain_controler']) ? $SETTINGS['ldap_domain_controler'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// AD Port\n    echo '\n                <tr>\n                    <td><label for=\"ldap_port\">'.$LANG['settings_ldap_port'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_port_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_port\" name=\"ldap_port\" class=\"text ui-widget-content\" title=\"389\" value=\"', isset($SETTINGS['ldap_port']) ? $SETTINGS['ldap_port'] : '389', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// AD SSL\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_ssl'].'</label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_ssl\" data-toggle-on=\"', isset($SETTINGS['ldap_ssl']) && $SETTINGS['ldap_ssl'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_ssl_input\" name=\"ldap_ssl_input\" value=\"', isset($SETTINGS['ldap_ssl']) && $SETTINGS['ldap_ssl'] == 1 ? '1' : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\n// AD TLS\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_tls'].'</label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_tls\" data-toggle-on=\"', isset($SETTINGS['ldap_tls']) && $SETTINGS['ldap_tls'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_tls_input\" name=\"ldap_tls_input\" value=\"', isset($SETTINGS['ldap_tls']) && $SETTINGS['ldap_tls'] == 1 ? '1' : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\n// Enable only localy declared users with tips help\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_elusers'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_elusers_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_elusers\" data-toggle-on=\"', isset($SETTINGS['ldap_elusers']) && $SETTINGS['ldap_elusers'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_elusers_input\" name=\"ldap_elusers_input\" value=\"', isset($SETTINGS['ldap_elusers']) && $SETTINGS['ldap_elusers'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>';\necho '\n                </table>';\n\n// Test LDAP configuration\necho '\n                <div style=\"font-weight:bold;font-size:14px;margin:15px 0px 8px 0px;\">\n                    '.$LANG['ldap_test_config'].'\n                </div>\n                    <table>\n                        <tr>\n                            <td><label>'.htmlentities($LANG['ldap_test_username']).'</label></td>\n                            <td><input type=\"text\" size=\"50\" id=\"ldap_test_username\" class=\"text ui-widget-content\" value=\"\" class=\"text ui-widget-content\" /></td>\n                        </tr>\n                        <tr>\n                            <td><label>'.htmlentities($LANG['ldap_test_username_pwd']).'</label></td>\n                            <td><input type=\"password\" size=\"50\" id=\"ldap_test_pwd\" class=\"text ui-widget-content\" value=\"\" class=\"text ui-widget-content\" /></td>\n                        </tr>\n                        <tr>\n                            <td><label for=\"ldap_test_no_username\">'.htmlentities($LANG['no_username_needed']).'</label></td>\n                            <td><input type=\"checkbox\" size=\"50\" id=\"ldap_test_no_username\" /></td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"2\">\n                                <div id=\"ldap_test_msg\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none;\"></div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td><b>'.htmlentities($LANG['admin_action_db_backup_start_tip']).'</b></td>\n                            <td><span class=\"fa-stack\" onclick=\"LaunchAdminActions(\\'admin_ldap_test_configuration\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span></td>\n                        </tr>\n                    </table>';\n\necho '\n            </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e95\necho '\n            <div id=\"tabs-5\">\n                <div class=\"\" style=\"padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_one_shot_backup'].'</b>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table width=\"100%\">';\n// Backup the DB\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td width=\"35%\">\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_action_db_backup'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <span id=\"result_admin_action_db_backup_get_key\" style=\"margin-left:10px; text-align:left;\">\n                            &nbsp;'.$LANG['encrypt_key'].'<input type=\"password\" size=\"20\" id=\"result_admin_action_db_backup_key\" />\n                            &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_key_tip']), ENT_QUOTES).'\"></i>&nbsp;\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_backup\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </span>\n                        <span id=\"result_admin_action_db_backup\" style=\"margin-left:10px;\"></span>\n                        </td>\n                    </tr>';\n// Restore the DB\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_action_db_restore'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_restore_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <span id=\"result_admin_action_db_restore\" style=\"margin-left:10px;\"></span>\n                        <div id=\"upload_container_restoreDB\">\n                            <div id=\"filelist_restoreDB\"></div><br />\n                            <span id=\"pickfiles_restoreDB\" class=\"fa-stack tip\" title=\"'.htmlentities($LANG['select'], ENT_QUOTES).'\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </div>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>';\n\necho '\n                <div class=\"\" style=\"0padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_script_backups'].'</b>&nbsp;\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backups_tip']), ENT_QUOTES).'\"></i></span>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table width=\"100%\">';\n// Backups script path\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td width=\"35%\">\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_path'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_path_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_path\" name=\"bck_script_path\" type=\"text\" size=\"60px\" value=\"', isset($SETTINGS['bck_script_path']) ? $SETTINGS['bck_script_path'] : $SETTINGS['cpassman_dir'].'/backups', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Backups script name\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_filename'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_filename_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_filename\" name=\"bck_script_filename\" type=\"text\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_filename']) ? $SETTINGS['bck_script_filename'] : 'bck_teampass', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Backup key\nif (isset($SETTINGS['bck_script_passkey'])) {\n    require_once './sources/main.functions.php';\n    $currentKey = cryption(\n        $SETTINGS['bck_script_passkey'],\n        \"\",\n        \"decrypt\"\n    )['string'];\n} else {\n    $currentKey = \"\";\n}\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_secret'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_secret_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_passkey\" name=\"bck_script_passkey\" type=\"text\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_passkey']) ? $currentKey : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        &nbsp;\n                        <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['pw_generate']), ENT_QUOTES).'\" onclick=\"generateAndStoreBackupPass();\" style=\"cursor:pointer;\">\n                            <i class=\"fa fa-square fa-stack-2x\"></i>\n                            <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                        </span>\n                        </td>\n                    </tr>';\n// Backups script encryption\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_encryption'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_encryption_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_key\" name=\"bck_script_key\" type=\"password\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_key']) ? $SETTINGS['bck_script_key'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Decrypt SQL file\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_decrypt'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_decrypt_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_decrypt_file\" name=\"bck_script_decrypt_file\" type=\"text\" size=\"50px\" value=\"\" />\n                        &nbsp;\n                        <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_backup_decrypt\\')\" style=\"cursor:pointer;\">\n                            <i class=\"fa fa-square fa-stack-2x\"></i>\n                            <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                        </span>\n                        </td>\n                    </tr>';\n\necho '\n                    <tr>\n                        <td></td>\n                        <td>\n                            <div id=\"result_admin_script_backup\" class=\"ui-state-focus ui-corner-all\" style=\"padding:3px; display:none;\"></div>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e96\necho '\n            <div id=\"tabs-6\">\n                <div class=\"\" style=\"padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_emails_configuration'].'</b>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table>';\n// SMTP server\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_smtp_server'].'\n                        </td>\n                        <td>\n                            <input type=\"text\" size=\"80\" id=\"email_smtp_server\" name=\"email_smtp_server\" value=\"', !isset($SETTINGS['email_smtp_server']) ? $smtp_server : $SETTINGS['email_smtp_server'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP auth\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth'].'\n                        </td>\n                        <td>\n                            <div class=\"toggle toggle-modern\" id=\"email_smtp_auth\" data-toggle-on=\"', isset($SETTINGS['email_smtp_auth']) && $SETTINGS['email_smtp_auth'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"email_smtp_auth_input\" name=\"email_smtp_auth_input\" value=\"', isset($SETTINGS['email_smtp_auth']) && $SETTINGS['email_smtp_auth'] == 1 ? '1' : '0', '\" />\n                        </td>\n                    </tr>';\n// SMTP auth username\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth_username'].'\n                        </td>\n                        <td>\n                            <input id=\"email_auth_username\" name=\"email_auth_username\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_auth_username']) ? $smtp_auth_username : $SETTINGS['email_auth_username'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP auth pwd\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth_pwd'].'\n                        </td>\n                        <td>\n                            <input id=\"email_auth_pwd\" name=\"email_auth_pwd\" type=\"password\" size=\"40px\" value=\"', !isset($SETTINGS['email_auth_pwd']) ? $smtp_auth_password : $SETTINGS['email_auth_pwd'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP server url\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_server_url'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_server_url_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <input id=\"email_server_url\" name=\"email_server_url\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_server_url']) ? $SETTINGS['cpassman_url'] : $SETTINGS['email_server_url'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP port\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_port'].'\n                        </td>\n                        <td>\n                            <input id=\"email_port\" name=\"email_port\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_port']) ? '25' : $SETTINGS['email_port'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP security\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_security'].'\n                        </td>\n                        <td>\n                            <select id=\"email_security\" name=\"email_security\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"none\"', !isset($SETTINGS['email_security']) || $SETTINGS['email_security'] == \"none\" ? ' selected=\"selected\"' : \"\", '>None</option>\n                            <option value=\"ssl\"', isset($SETTINGS['email_security']) && $SETTINGS['email_security'] == \"ssl\" ? ' selected=\"selected\"' : \"\", '>SSL</option>\n                            <option value=\"tls\"', isset($SETTINGS['email_security']) && $SETTINGS['email_security'] == \"tls\" ? ' selected=\"selected\"' : \"\", '>TLS</option>\n                        </select>\n                        </td>\n                    </tr>';\n// SMTP from\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_from'].'\n                        </td>\n                        <td>\n                            <input id=\"email_from\" name=\"email_from\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_from']) ? $email_from : $SETTINGS['email_from'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP from name\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_from_name'].'\n                        </td>\n                        <td>\n                            <input id=\"email_from_name\" name=\"email_from_name\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_from_name']) ? $email_from_name : $SETTINGS['email_from_name'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>';\n\necho '\n                <div class=\"\" style=\"0padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_emails_configuration_testing'].'</b>\n                </div>\n                <div id=\"email_testing_results\" class=\"ui-state-error ui-corner-all\" style=\"padding:5px;display:none;margin:2px;\"></div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table>';\n// Test email configuration\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_test_configuration'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_test_configuration_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_email_test_configuration\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </td>\n                    </tr>';\n// Send emails backlog\nDB::query(\"SELECT * FROM \".prefix_table(\"emails\").\" WHERE status = %s OR status = %s\", 'not_sent', '');\n$nb_emails = DB::count();\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.str_replace(\"#nb_emails#\", $nb_emails, $LANG['admin_email_send_backlog']).'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_send_backlog_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_email_send_backlog\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// TAB N\u00b07\necho '\n            <div id=\"tabs-7\">\n                <table width=\"100%\">';\n// Max file size\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_maxfilesize'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_maxfilesize_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_maxfilesize\" name=\"upload_maxfilesize\" value=\"', isset($SETTINGS['upload_maxfilesize']) ? $SETTINGS['upload_maxfilesize'] : '10', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Documents\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_docext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_docext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_docext\" name=\"upload_docext\" value=\"', isset($SETTINGS['upload_docext']) ? $SETTINGS['upload_docext'] : 'doc,docx,dotx,xls,xlsx,xltx,rtf,csv,txt,pdf,ppt,pptx,pot,dotx,xltx', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Images\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imagesext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_imagesext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_imagesext\" name=\"upload_imagesext\" value=\"', isset($SETTINGS['upload_imagesext']) ? $SETTINGS['upload_imagesext'] : 'jpg,jpeg,gif,png', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Packages\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_pkgext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_pkgext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_pkgext\" name=\"upload_pkgext\" value=\"', isset($SETTINGS['upload_pkgext']) ? $SETTINGS['upload_pkgext'] : '7z,rar,tar,zip', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Other\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_otherext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_otherext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_otherext\" name=\"upload_otherext\" value=\"', isset($SETTINGS['upload_otherext']) ? $SETTINGS['upload_otherext'] : 'sql,xml', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Image resize width / height / quality\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>' .\n                        $LANG['settings_upload_imageresize_options'].'\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_imageresize_options_tip']), ENT_QUOTES).'\"></i>\n                        </label>\n                    </td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"upload_imageresize_options\" data-toggle-on=\"', isset($SETTINGS['upload_imageresize_options']) && $SETTINGS['upload_imageresize_options'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"upload_imageresize_options_input\" name=\"upload_imageresize_options_input\" value=\"', isset($SETTINGS['upload_imageresize_options']) && $SETTINGS['upload_imageresize_options'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_w'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_width\" name=\"upload_imageresize_width\" value=\"',\n                        isset($SETTINGS['upload_imageresize_width']) ? $SETTINGS['upload_imageresize_width'] : '800', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_h'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_height\" name=\"upload_imageresize_height\" value=\"',\n                        isset($SETTINGS['upload_imageresize_height']) ? $SETTINGS['upload_imageresize_height'] : '600', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_q'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_quality\" name=\"upload_imageresize_quality\" value=\"',\n                        isset($SETTINGS['upload_imageresize_quality']) ? $SETTINGS['upload_imageresize_quality'] : '90', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\necho '\n                <tr><td colspan=\"3\"><hr /></td></tr>';\necho '\n                </table>\n            </div>';\n// --------------------------------------------------------------------------------\n\necho '\n        </div>';\n\necho '\n    </form>\n</div>';\n\necho '\n<input id=\"restore_bck_fileObj\" name=\"restore_bck_fileObj\" type=\"hidden\" value=\"\" />\n<div id=\"restore_bck_encryption_key_dialog\" style=\"display:none; text-align:center;\">\n    <input id=\"restore_bck_encryption_key\" name=\"restore_bck_encryption_key\" type=\"text\" value=\"\" />\n    <br>\n    <div class=ui-state-error ui-corner-all\" style=\"display:none;padding:5px;display:none;margin:2px;\" id=\"restore_bck_encryption_key_dialog_error\"></div>\n</div>';\ninclude \"admin.settings.load.php\";\n", "<?php\n/**\n *\n * @file          (api)functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.0\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\n$api_version = \"2.0\";\n$_SESSION['CPM'] = 1;\nrequire_once \"../includes/config/include.php\";\nrequire_once \"../sources/main.functions.php\";\n\nfunction get_ip()\n{\n    if (function_exists('apache_request_headers')) {\n        $headers = apache_request_headers();\n    } else {\n        $headers = $_SERVER;\n    }\n    if (array_key_exists('X-Forwarded-For', $headers) && filter_var($headers['X-Forwarded-For'], FILTER_VALIDATE_IP)) {\n        $the_ip = $headers['X-Forwarded-For'];\n    } elseif (array_key_exists('HTTP_X_FORWARDED_FOR', $headers) && filter_var($headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP)) {\n        $the_ip = $headers['HTTP_X_FORWARDED_FOR'];\n    } else {\n        $the_ip = filter_var($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n    }\n    return $the_ip;\n}\n\n\nfunction teampass_api_enabled()\n{\n    teampass_connect();\n    $response = DB::queryFirstRow(\n        \"SELECT `valeur` FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\",\n        \"admin\",\n        \"api\"\n    );\n    return $response['valeur'];\n}\n\nfunction teampass_whitelist()\n{\n    teampass_connect();\n    $apiip_pool = teampass_get_ips();\n    if (count($apiip_pool) > 0 && array_search(get_ip(), $apiip_pool) === false) {\n        rest_error('IPWHITELIST');\n    }\n}\n\nfunction teampass_connect()\n{\n    global $server, $user, $pass, $database, $link, $port, $encoding;\n    require_once(\"../includes/config/settings.php\");\n    require_once('../includes/libraries/Database/Meekrodb/db.class.php');\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n}\n\nfunction teampass_get_ips()\n{\n    $array_of_results = array();\n    teampass_connect();\n    $response = DB::query(\"select value from \".prefix_table(\"api\").\" WHERE type = %s\", \"ip\");\n    foreach ($response as $data) {\n        array_push($array_of_results, $data['value']);\n    }\n\n    return $array_of_results;\n}\n\nfunction teampass_get_keys()\n{\n    teampass_connect();\n    $response = DB::queryOneColumn(\"value\", \"select * from \".prefix_table(\"api\").\" WHERE type = %s\", \"key\");\n\n    return $response;\n}\n\nfunction rest_head()\n{\n    header('HTTP/1.1 402 Payment Required');\n}\n\nfunction addToCacheTable($item_id)\n{\n    teampass_connect();\n    // get data\n    $data = DB::queryfirstrow(\n        \"SELECT i.label AS label, i.description AS description, i.id_tree AS id_tree, i.perso AS perso, i.restricted_to AS restricted_to, i.login AS login, i.id AS id\n        FROM \".prefix_table(\"items\").\" AS i\n        AND \".prefix_table(\"log_items\").\" AS l ON (l.id_item = i.id)\n        WHERE i.id = %i\n        AND l.action = %s\",\n        intval($item_id),\n        at_creation\n    );\n\n    // Get all TAGS\n    $tags = \"\";\n    $data_tags = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $item_id);\n    foreach ($data_tags as $itemTag) {\n        if (!empty($itemTag['tag'])) {\n            $tags .= $itemTag['tag'].\" \";\n        }\n    }\n\n    // finaly update\n    DB::insert(\n        prefix_table(\"cache\"),\n        array(\n            \"id\" => $data['id'],\n            \"label\" => $data['label'],\n            \"description\" => $data['description'],\n            \"tags\" => $tags,\n            \"id_tree\" => $data['id_tree'],\n            \"perso\" => $data['perso'],\n            \"restricted_to\" => $data['restricted_to'],\n            \"login\" => $data['login'],\n            \"folder\" => \"\",\n            //\"restricted_to\" => \"0\",\n            \"author\" => API_USER_ID,\n            \"renewal_period\" => 0,\n            \"timestamp\" => time(),\n            \"url\" => 0\n        )\n    );\n}\n\n\n/**\n * @param string $setting\n */\nfunction getSettingValue($setting)\n{\n    // get default language\n    $set = DB::queryFirstRow(\n        \"SELECT `valeur` FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\",\n        \"admin\",\n        $setting\n    );\n\n    return $set['valeur'];\n}\n\nfunction rest_delete()\n{\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n    if (apikey_checker($GLOBALS['apikey'])) {\n        include \"../sources/main.functions.php\";\n        teampass_connect();\n        $category_query = \"\";\n\n        if ($GLOBALS['request'][0] == \"write\") {\n            if ($GLOBALS['request'][1] == \"category\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (count($array_category) > 1 && count($array_category) < 5) {\n                    for ($i = count($array_category); $i > 0; $i--) {\n                        $slot = $i - 1;\n                        if (!$slot) {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[$slot].\"' AND parent_id = 0\";\n                        } else {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[$slot].\"' AND parent_id = (\";\n                        }\n                    }\n                    for ($i = 1; $i < count($array_category); $i++) {\n                        $category_query .= \")\";\n                    }\n                } elseif (count($array_category) == 1) {\n                    $category_query = \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[0].\"' AND parent_id = 0\";\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                // Delete items which in category\n                $response = DB::delete(prefix_table(\"items\"), \"id_tree = (\".$category_query.\")\");\n                // Delete sub-categories which in category\n                $response = DB::delete(prefix_table(\"nested_tree\"), \"parent_id = (\".$category_query.\")\");\n                // Delete category\n                $response = DB::delete(prefix_table(\"nested_tree\"), \"id = (\".$category_query.\")\");\n\n                $json['type'] = 'category';\n                $json['category'] = $GLOBALS['request'][2];\n                if ($response) {\n                    $json['status'] = 'OK';\n                } else {\n                    $json['status'] = 'KO';\n                }\n            } elseif ($GLOBALS['request'][1] == \"item\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n                $item = $GLOBALS['request'][3];\n\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $item, $result)) {\n                    rest_error('ITEM_MALFORMED');\n                } elseif (empty($item) || count($array_category) == 0) {\n                    rest_error('MALFORMED');\n                }\n\n                if (count($array_category) > 1 && count($array_category) < 5) {\n                    for ($i = count($array_category); $i > 0; $i--) {\n                        $slot = $i - 1;\n                        if (!$slot) {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[$slot].\"' AND parent_id = 0\";\n                        } else {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[$slot].\"' AND parent_id = (\";\n                        }\n                    }\n                    for ($i = 1; $i < count($array_category); $i++) {\n                        $category_query .= \")\";\n                    }\n                } elseif (count($array_category) == 1) {\n                    $category_query = \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".$array_category[0].\"' AND parent_id = 0\";\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                // Delete item\n                $response = DB::delete(prefix_table(\"items\"), \"id_tree = (\".$category_query.\") and label LIKE '\".$item.\"'\");\n                $json['type'] = 'item';\n                $json['item'] = $item;\n                $json['category'] = $GLOBALS['request'][2];\n                if ($response) {\n                    $json['status'] = 'OK';\n                } else {\n                    $json['status'] = 'KO';\n                }\n            }\n\n            if ($json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } else {\n            rest_error('METHOD');\n        }\n    }\n}\n\nfunction rest_get()\n{\n    global $api_version;\n    global $SETTINGS;\n\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n\n    if (apikey_checker($GLOBALS['apikey'])) {\n        teampass_connect();\n\n        // define the API user through the LABEL of apikey\n        $api_info = DB::queryFirstRow(\n            \"SELECT label\n            FROM \".prefix_table(\"api\").\"\n            WHERE value = %s\",\n            $GLOBALS['apikey']\n        );\n\n        // Load config\n        if (file_exists('../includes/config/tp.config.php')) {\n            require_once '../includes/config/tp.config.php';\n        } else {\n            throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n        }\n\n        if ($GLOBALS['request'][0] == \"read\") {\n            if ($GLOBALS['request'][1] == \"folder\") {\n                /*\n                * READ FOLDERS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get ids\n                if (strpos($GLOBALS['request'][2], \";\") > 0) {\n                    $condition = \"id_tree IN %ls\";\n                    $condition_value = explode(';', $GLOBALS['request'][2]);\n                } else {\n                    $condition = \"id_tree = %s\";\n                    $condition_value = $GLOBALS['request'][2];\n                }\n\n                // get items in this folder\n                $response = DB::query(\n                    \"SELECT id, label, login, pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif='0' AND \".$condition,\n                    $condition_value\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = $data['id'];\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption(\n                        $data['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n\n                    $inc++;\n                }\n            } elseif ($GLOBALS['request'][1] == \"userpw\") {\n                /*\n                * READ USER ITEMS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // about the user\n                $username = $GLOBALS['request'][2];\n                if (strcmp($username, \"admin\") == 0) {\n                    // forbid admin access\n                }\n                $response = DB::query(\"SELECT fonction_id FROM \".prefix_table(\"users\").\" WHERE login='\".$username.\"'\");\n                if (count($response) === 0) {\n                    rest_error('USER_NOT_EXISTS');\n                }\n                foreach ($response as $data) {\n                    $role_str = $data['fonction_id'];\n                }\n                $folder_arr = array();\n                $roles = explode(\";\", $role_str);\n                foreach ($roles as $role) {\n                    $response = DB::query(\"SELECT folder_id FROM \".prefix_table(\"roles_values\").\" WHERE role_id='\".$role.\"'\");\n                    foreach ($response as $data) {\n                        $folder_id = $data['folder_id'];\n                        if (!array_key_exists($folder_id, $folder_arr)) {\n                            array_push($folder_arr, $folder_id);\n                        }\n                    }\n                }\n                $folder_str = array_filter($folder_arr);\n\n                // get ids\n                if (is_array($folder_str)) {\n                    $condition = \"id_tree IN %ls\";\n                    $condition_value = $folder_str;\n                } else {\n                    $condition = \"id_tree = %s\";\n                    $condition_value = $folder_str;\n                }\n\n                $data = \"\";\n                // get items in this module\n                $response = DB::query(\n                    \"SELECT id,label,url,login,pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif='0' AND \".$condition,\n                    $condition_value\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$data['id']]['id'] = $data['id'];\n                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$data['id']]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$data['id']]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$data['id']]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$data['id']]['pw'] = $crypt_pw['string'];\n                    $json[$data['id']]['folder_id'] = $data['id_tree'];\n                    $json[$data['id']]['path'] = $path;\n\n                    $inc++;\n                }\n            } elseif ($GLOBALS['request'][1] == \"userfolders\") {\n                /*\n                * READ USER FOLDERS\n                * Sends back a list of folders\n                */\n                $json = \"\";\n                $username = $GLOBALS['request'][2];\n                if (strcmp($username, \"admin\") == 0) {\n                    // forbid admin access\n                }\n                $response = DB::query(\"SELECT fonction_id FROM \".prefix_table(\"users\").\" WHERE login='\".$username.\"'\");\n                if (count($response) === 0) {\n                    rest_error('USER_NOT_EXISTS');\n                }\n                foreach ($response as $data) {\n                    $role_str = $data['fonction_id'];\n                }\n\n                $folder_arr = array();\n                $roles = explode(\";\", $role_str);\n                $inc = 0;\n                foreach ($roles as $role) {\n                    $response = DB::query(\"SELECT folder_id, type FROM \".prefix_table(\"roles_values\").\" WHERE role_id='\".$role.\"'\");\n                    foreach ($response as $data) {\n                        $folder_id = $data['folder_id'];\n                        if (!array_key_exists($folder_id, $folder_arr)) {\n                            array_push($folder_arr, $folder_id);\n\n                            $response2 = DB::queryFirstRow(\"SELECT title, nlevel FROM \".prefix_table(\"nested_tree\").\" WHERE id='\".$folder_id.\"'\");\n\n                            if (!empty($response2['title'])) {\n                                $json[$folder_id]['id'] = $folder_id;\n                                $json[$folder_id]['title'] = $response2['title'];\n                                $json[$folder_id]['level'] = $response2['nlevel'];\n                                $json[$folder_id]['access_type'] = $data['type'];\n                                $inc++;\n                            }\n                        }\n                    }\n                }\n            } elseif ($GLOBALS['request'][1] == \"items\") {\n                /*\n                * READ ITEMS asked\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get parameters\n                $array_items = explode(';', $GLOBALS['request'][2]);\n\n                // check if not empty\n                if (count($array_items) == 0) {\n                    rest_error('NO_ITEM');\n                }\n\n                // only accepts numeric\n                foreach ($array_items as $item) {\n                    if (!is_numeric($item)) {\n                        rest_error('ITEM_MALFORMED');\n                    }\n                }\n\n                $response = DB::query(\n                    \"SELECT id,label,login,pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif = %i AND id IN %ls\",\n                    \"0\",\n                    $array_items\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = $data['id'];\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n\n                    $inc++;\n                }\n            }\n\n            if (isset($json) && $json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } elseif ($GLOBALS['request'][0] == \"find\") {\n            if ($GLOBALS['request'][1] == \"item\") {\n                /*\n                * FIND ITEMS in FOLDERS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get parameters\n                $array_category = explode(';', $GLOBALS['request'][2]);\n                $item = $GLOBALS['request'][3];\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $item, $result)) {\n                    rest_error('ITEM_MALFORMED');\n                } elseif (empty($item) || count($array_category) == 0) {\n                    rest_error('MALFORMED');\n                }\n\n                if (count($array_category) === 0) {\n                    rest_error('NO_CATEGORY');\n                }\n\n                DB::debugMode(false);\n                $response = DB::query(\n                    \"SELECT id, label, login, pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE\n                    inactif = %i\n                    AND id_tree IN %ls\n                    AND label LIKE %ss\",\n                    \"0\",\n                    $array_category,\n                    $item\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = mb_convert_encoding($data['id'], mb_detect_encoding($data['id']), 'UTF-8');\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n                    $json[$inc]['status'] = utf8_encode(\"OK\");\n\n                    $inc++;\n                }\n                if (isset($json) && $json) {\n                    echo json_encode($json);\n                } else {\n                    rest_error('EMPTY');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"add\") {\n            if ($GLOBALS['request'][1] == \"item\") {\n                // get sent parameters\n                $params = explode(';', base64_decode($GLOBALS['request'][2]));\n                if (count($params) != 9) {\n                    rest_error('ITEMBADDEFINITION');\n                }\n\n                $item_label = $params[0];\n                $item_pwd = $params[1];\n                $item_desc = $params[2];\n                $item_folder_id = $params[3];\n                $item_login = $params[4];\n                $item_email = $params[5];\n                $item_url = $params[6];\n                $item_tags = $params[7];\n                $item_anyonecanmodify = $params[8];\n\n                // do some checks\n                if (!empty($item_label) && !empty($item_pwd) && !empty($item_folder_id)) {\n                    // Check length\n                    if (strlen($item_pwd) > 50) {\n                        rest_error('PASSWORDTOOLONG');\n                    }\n\n                    // Check Folder ID\n                    DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $item_folder_id);\n                    $counter = DB::count();\n                    if ($counter == 0) {\n                        rest_error('NOSUCHFOLDER');\n                    }\n\n                    // check if element doesn't already exist\n                    $item_duplicate_allowed = getSettingValue(\"duplicate_item\");\n                    if ($item_duplicate_allowed !== \"1\") {\n                        DB::query(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE label = %s AND inactif = %i\", addslashes($item_label), \"0\");\n                        $counter = DB::count();\n                        if ($counter != 0) {\n                            $itemExists = 1;\n                            // prevent the error if the label already exists\n                            // so lets just add the time() as a random factor\n                            $item_label .= \" (\".time().\")\";\n                        } else {\n                            $itemExists = 0;\n                        }\n                    } else {\n                        $itemExists = 0;\n                    }\n                    if ($itemExists === 0) {\n                        $encrypt = cryption(\n                            $item_pwd,\n                            \"\",\n                            \"encrypt\"\n                        );\n                        if (empty($encrypt['string'])) {\n                            rest_error('PASSWORDEMPTY');\n                        }\n\n                        // ADD item\n                        try {\n                            DB::insert(\n                                prefix_table(\"items\"),\n                                array(\n                                    \"label\" => $item_label,\n                                    \"description\" => $item_desc,\n                                    'pw' => $encrypt['string'],\n                                    'pw_iv' => '',\n                                    \"email\" => $item_email,\n                                    \"url\" => $item_url,\n                                    \"id_tree\" => intval($item_folder_id),\n                                    \"login\" => $item_login,\n                                    \"inactif\" => 0,\n                                    \"restricted_to\" => \"\",\n                                    \"perso\" => 0,\n                                    \"anyone_can_modify\" => intval($item_anyonecanmodify)\n                                )\n                            );\n                            $newID = DB::InsertId();\n\n                            // log\n                            DB::insert(\n                                prefix_table(\"log_items\"),\n                                array(\n                                    \"id_item\" => $newID,\n                                    \"date\" => time(),\n                                    \"id_user\" => API_USER_ID,\n                                    \"action\" => \"at_creation\",\n                                    \"raison\" => $api_info['label']\n                                )\n                            );\n\n                            // Add tags\n                            $tags = explode(' ', $item_tags);\n                            foreach ((array) $tags as $tag) {\n                                if (!empty($tag)) {\n                                    DB::insert(\n                                        prefix_table(\"tags\"),\n                                        array(\n                                            \"item_id\" => $newID,\n                                            \"tag\" => strtolower($tag)\n                                        )\n                                    );\n                                }\n                            }\n\n                            // Update CACHE table\n                            DB::insert(\n                                prefix_table(\"cache\"),\n                                array(\n                                    \"id\" => $newID,\n                                    \"label\" => $item_label,\n                                    \"description\" => $item_desc,\n                                    \"tags\" => $item_tags,\n                                    \"id_tree\" => $item_folder_id,\n                                    \"perso\" => \"0\",\n                                    \"restricted_to\" => \"\",\n                                    \"login\" => $item_login,\n                                    \"folder\" => \"\",\n                                    \"author\" => API_USER_ID,\n                                    \"renewal_period\" => \"0\",\n                                    \"timestamp\" => time(),\n                                    \"url\" => \"0\"\n                                )\n                            );\n\n                            echo '{\"status\":\"item added\" , \"new_item_id\" : \"'.$newID.'\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('ITEMEXISTS');\n                    }\n                } else {\n                    rest_error('ITEMMISSINGDATA');\n                }\n            } elseif ($GLOBALS['request'][1] == \"user\") {\n            /*\n             * Case where a new user has to be added\n             *\n             * Expected call format: .../api/index.php/add/user/<LOGIN>;<NAME>;<LASTNAME>;<PASSWORD>;<EMAIL>;<ADMINISTRATEDBY>;<READ_ONLY>;<ROLE1,ROLE2,...>;<IS_ADMIN>;<ISMANAGER>;<PERSONAL_FOLDER>?apikey=<VALID API KEY>\n             * with:\n             * for READ_ONLY, IS_ADMIN, IS_MANAGER, PERSONAL_FOLDER, accepted value is 1 for TRUE and 0 for FALSE\n             * for ADMINISTRATEDBY and ROLE1, accepted value is the real label (not the IDs)\n             *\n             * Example: /api/index.php/add/user/U4;Nils;Laumaille;test;nils@laumaille.fr;Users;0;Managers,Users;0;1;1?apikey=sae6iekahxiseL3viShoo0chahc1ievei8aequi\n             *\n             */\n\n                // get user definition\n                $array_user = explode(';', base64_decode($GLOBALS['request'][2]));\n                if (count($array_user) != 11) {\n                    rest_error('USERBADDEFINITION');\n                }\n\n                $login = $array_user[0];\n                $name = $array_user[1];\n                $lastname = $array_user[2];\n                $password = $array_user[3];\n                $email = $array_user[4];\n                $adminby = urldecode($array_user[5]);\n                $isreadonly = urldecode($array_user[6]);\n                $roles = urldecode($array_user[7]);\n                $isadmin = $array_user[8];\n                $ismanager = $array_user[9];\n                $haspf = $array_user[10];\n\n                // Empty user\n                if (mysqli_escape_string($link, htmlspecialchars_decode($login)) == \"\") {\n                    rest_error('USERLOGINEMPTY');\n                }\n                // Check if user already exists\n                $data = DB::query(\n                    \"SELECT id, fonction_id, groupes_interdits, groupes_visibles FROM \".prefix_table(\"users\").\"\n            WHERE login LIKE %ss\",\n                    mysqli_escape_string($link, stripslashes($login))\n                );\n\n                if (DB::count() == 0) {\n                    try {\n                        // find AdminRole code in DB\n                        $resRole = DB::queryFirstRow(\n                            \"SELECT id\n                            FROM \".prefix_table(\"roles_title\").\"\n                            WHERE title LIKE %ss\",\n                            mysqli_escape_string($link, stripslashes($adminby))\n                        );\n\n                        // get default language\n                        $lang = DB::queryFirstRow(\n                            \"SELECT `valeur` FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\",\n                            \"admin\",\n                            \"default_language\"\n                        );\n\n                        // prepare roles list\n                        $rolesList = \"\";\n                        foreach (explode(',', $roles) as $role) {//echo $role.\"-\";\n                            $tmp = DB::queryFirstRow(\n                                \"SELECT `id` FROM \".prefix_table(\"roles_title\").\" WHERE title = %s\",\n                                $role\n                            );\n                            if (empty($rolesList)) {\n                                $rolesList = $tmp['id'];\n                            } else {\n                                $rolesList .= \";\".$tmp['id'];\n                            }\n                        }\n\n                        // Add user in DB\n                        DB::insert(\n                            prefix_table(\"users\"),\n                            array(\n                                'login' => $login,\n                                'name' => $name,\n                                'lastname' => $lastname,\n                                'pw' => bCrypt(stringUtf8Decode($password), COST),\n                                'email' => $email,\n                                'admin' => intval($isadmin),\n                                'gestionnaire' => intval($ismanager),\n                                'read_only' => intval($isreadonly),\n                                'personal_folder' => intval($haspf),\n                                'user_language' => $lang['valeur'],\n                                'fonction_id' => $rolesList,\n                                'groupes_interdits' => '0',\n                                'groupes_visibles' => '0',\n                                'isAdministratedByRole' => empty($resRole) ? '0' : $resRole['id']\n                            )\n                        );\n                        $new_user_id = DB::insertId();\n                        // Create personnal folder\n                        if (intval($haspf) == 1) {\n                            DB::insert(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => '0',\n                                    'title' => $new_user_id,\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0',\n                                    'personal_folder' => '1'\n                                )\n                            );\n                        }\n\n                        // load settings\n                        loadSettings();\n\n                        // Send email to new user\n                        @sendEmail(\n                            $LANG['email_subject_new_user'],\n                            str_replace(\n                                array('#tp_login#', '#tp_pw#', '#tp_link#'),\n                                array(\" \".addslashes($login), addslashes($password), $SETTINGS['email_server_url']),\n                                $LANG['email_new_user_mail']\n                            ),\n                            $email,\n                            \"\"\n                        );\n\n                        // update LOG\n                        logEvents('user_mngt', 'at_user_added', 'api - '.$GLOBALS['apikey'], $new_user_id, \"\");\n\n                        echo '{\"status\":\"user added\"}';\n                    } catch (PDOException $ex) {\n                        echo '<br />'.$ex->getMessage();\n                    }\n                } else {\n                    rest_error('USERALREADYEXISTS');\n                }\n            } elseif ($GLOBALS['request'][1] == \"folder\") {\n            /*\n            * ADDING A FOLDER\n            * <url to teampass>/api/index.php/add/folder/<title>;<complexity_level>;<parent_id>;<renewal_period>;<personal>?apikey=<valid api key>\n            * http://localhost/teampass/api/index.php/add/folder/Import from API;0;38;0;0?apikey=piesae7ahghae1iiP9ohPhaefaideeThohgh1te\n            */\n                if (!empty($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][2]));\n\n                    if (empty($params[0]) === false && (intval($params[1]) >= 0 && intval($params[1]) <= 100)) {\n                        if (empty($params[3])) {\n                            $params[3] = 0;\n                        }\n                        if (empty($params[4])) {\n                            $params[4] = 0;\n                        }\n                        if (empty($params[2])) {\n                            rest_error('NO_DESTINATION_FOLDER');\n                        }\n                        if ($params[2] < 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n\n                        //Check if title doesn't contains html codes\n                        if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $params[0], $out)) {\n                            rest_error('HTML_CODES_NOT_ALLOWED');\n                        }\n\n                        // check if title is numeric\n                        if (is_numeric($params[0]) === true) {\n                            rest_error('TITLE_ONLY_WITH_NUMBERS');\n                        }\n\n                        //Check if duplicate folders name are allowed\n                        $data = DB::queryfirstrow(\n                            \"SELECT valeur\n                            FROM \".prefix_table(\"misc\").\"\n                            WHERE type = %s AND intitule = %s\",\n                            \"admin\",\n                            \"duplicate_folder\"\n                        );\n                        // if valeur = 0 then duplicate folders not allowed\n                        if ($data === 0) {\n                            DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $params[0]);\n                            $counter = DB::count();\n                            if ($counter != 0) {\n                                rest_error('ALREADY_EXISTS');\n                            }\n                        }\n\n                        //check if parent folder is personal\n                        $data = DB::queryfirstrow(\n                            \"SELECT personal_folder\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %i\",\n                            $params[2]\n                        );\n                        if ($data['personal_folder'] === \"1\") {\n                            $isPersonal = 1;\n                        } else {\n                            if ($params[4] === 1) {\n                                $isPersonal = 1;\n                            } else {\n                                $isPersonal = 0;\n                            }\n\n                            // get complexity level for this folder\n                            $data = DB::queryfirstrow(\n                                \"SELECT valeur\n                                FROM \".prefix_table(\"misc\").\"\n                                WHERE intitule = %i AND type = %s\",\n                                $params[2],\n                                \"complex\"\n                            );\n                            if (intval($params[1]) < intval($data['valeur'])) {\n                                rest_error('COMPLEXICITY_LEVEL_NOT_REACHED');\n                            }\n                        }\n\n                        try {\n                            //create folder\n                            DB::insert(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => $params[2],\n                                    'title' => $params[0],\n                                    'personal_folder' => $isPersonal,\n                                    'renewal_period' => $params[3],\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0'\n                                )\n                            );\n                            $newId = DB::insertId();\n\n                            //Add complexity\n                            DB::insert(\n                                prefix_table(\"misc\"),\n                                array(\n                                    'type' => 'complex',\n                                    'intitule' => $newId,\n                                    'valeur' => $params[1]\n                                )\n                            );\n\n                            echo '{\"status\":\"folder created\" , \"new_folder_id\":\"'.$newId.'\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('NO_DATA_EXIST');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"update\") {\n            /*\n            * Section dedicated for UPDATING\n            */\n            if ($GLOBALS['request'][1] == \"item\") {\n                /*\n                * Expected call format: .../api/index.php/update/item/<item_id>/<label>;<password>;<description>;<folder_id>;<login>;<email>;<url>;<tags>;<any one can modify>?apikey=<VALID API KEY>\n                */\n                if ($GLOBALS['request'][2] !== \"\" && is_numeric($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][3]));\n\n                    if (!empty($params[0]) && !empty($params[1]) && !empty($params[3])) {\n                        // Check length\n                        if (strlen($params[1]) > 50) {\n                            rest_error('PASSWORDTOOLONG');\n                        }\n\n                        // Check Folder ID\n                        DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $params[3]);\n                        $counter = DB::count();\n                        if ($counter == 0) {\n                            rest_error('NOSUCHFOLDER');\n                        }\n\n                        // check if item exists\n                        DB::query(\n                            \"SELECT * FROM \".prefix_table(\"items\").\" WHERE id = %i\",\n                            $GLOBALS['request'][2]\n                        );\n                        $counter = DB::count();\n                        if ($counter > 0) {\n                            // encrypt pwd\n                            $encrypt = cryption(\n                                $params[1],\n                                \"\",\n                                \"encrypt\"\n                            );\n                            if (empty($encrypt['string'])) {\n                                rest_error('PASSWORDEMPTY');\n                            }\n\n                            // ADD item\n                            try {\n                                DB::update(\n                                    prefix_table(\"items\"),\n                                    array(\n                                        \"label\" => $params[0],\n                                        \"description\" => $params[2],\n                                        'pw' => $encrypt['string'],\n                                        'pw_iv' => '',\n                                        \"email\" => $params[5],\n                                        \"url\" => $params[6],\n                                        \"id_tree\" => intval($params[3]),\n                                        \"login\" => $params[4],\n                                        \"anyone_can_modify\" => intval($params[8])\n                                    ),\n                                    \"id = %i\",\n                                    $GLOBALS['request'][2]\n                                );\n\n                                // log\n                                DB::insert(\n                                    prefix_table(\"log_items\"),\n                                    array(\n                                        \"id_item\" => $GLOBALS['request'][2],\n                                        \"date\" => time(),\n                                        \"id_user\" => API_USER_ID,\n                                        \"action\" => \"at_modification\"\n                                    )\n                                );\n\n                                // Add tags\n                                $tags = explode(' ', $params[7]);\n                                foreach ((array) $tags as $tag) {\n                                    if (!empty($tag)) {\n                                        // check if already exists\n                                        DB::query(\n                                            \"SELECT * FROM \".prefix_table(\"tags\").\" WHERE tag = %s AND item_id = %i\",\n                                            strtolower($tag),\n                                            $GLOBALS['request'][2]\n                                        );\n                                        $counter = DB::count();\n                                        if ($counter === 0) {\n                                            DB::insert(\n                                                prefix_table(\"tags\"),\n                                                array(\n                                                    \"item_id\" => $GLOBALS['request'][2],\n                                                    \"tag\" => strtolower($tag)\n                                                )\n                                            );\n                                        }\n                                    }\n                                }\n\n                                // Update CACHE table\n                                DB::update(\n                                    prefix_table(\"cache\"),\n                                    array(\n                                        \"label\" => $params[0],\n                                        \"description\" => $params[2],\n                                        \"tags\" => $params[7],\n                                        \"id_tree\" => intval($params[3]),\n                                        \"perso\" => \"0\",\n                                        \"restricted_to\" => \"\",\n                                        \"login\" => $params[4],\n                                        \"folder\" => \"\",\n                                        \"author\" => API_USER_ID,\n                                        \"renewal_period\" => \"0\",\n                                        \"timestamp\" => time(),\n                                        \"url\" => $params[6],\n                                    ),\n                                    \"id = %i\",\n                                    $GLOBALS['request'][2]\n                                );\n\n                                echo '{\"status\":\"item updated\"}';\n                            } catch (PDOException $ex) {\n                                echo '<br />'.$ex->getMessage();\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('ITEMMISSINGDATA');\n                    }\n                } else {\n                    rest_error('NO_ITEM');\n                }\n            } elseif ($GLOBALS['request'][1] == \"folder\") {\n            /*\n            * UPDATING A FOLDER\n            * <url to teampass>/api/index.php/update/folder/<folder_id>/<title>;<complexity_level>;<renewal_period>?apikey=<valid api key>\n            */\n                if ($GLOBALS['request'][2] !== \"\" && is_numeric($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][3]));\n\n                    if (!empty($params[0])) {\n                        if ($params[1] < 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                        if (empty($params[2])) {\n                            $params[2] = 0;\n                        }\n\n                        // check if folder exists and get folder data\n                        $data_folder = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"nested_tree\").\" WHERE id = %s\", $GLOBALS['request'][2]);\n                        $counter = DB::count();\n                        if ($counter === 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n\n                        //Check if title doesn't contains html codes\n                        if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $params[0], $out)) {\n                            rest_error('HTML_CODES_NOT_ALLOWED');\n                        }\n\n                        // check if title is numeric\n                        if (is_numeric($params[0]) === true) {\n                            rest_error('TITLE_ONLY_WITH_NUMBERS');\n                        }\n\n                        // get complexity level for this folder\n                        $data = DB::queryfirstrow(\n                            \"SELECT valeur\n                            FROM \".prefix_table(\"misc\").\"\n                            WHERE intitule = %i AND type = %s\",\n                            $data_folder['parent_id'],\n                            \"complex\"\n                        );\n                        if (intval($params[1]) < intval($data['valeur'])) {\n                            rest_error('COMPLEXICITY_LEVEL_NOT_REACHED');\n                        }\n\n                        try {\n                            DB::update(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => $data_folder['parent_id'],\n                                    'title' => $params[0],\n                                    'personal_folder' => 0,\n                                    'renewal_period' => $params[2],\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0'\n                                ),\n                                \"id = %i\",\n                                $GLOBALS['request'][2]\n                            );\n\n                            //Add complexity\n                            DB::update(\n                                prefix_table(\"misc\"),\n                                array(\n                                    'valeur' => $params[1]\n                                ),\n                                \"intitule = %s AND type = %s\",\n                                $GLOBALS['request'][2],\n                                \"complex\"\n                            );\n\n                            echo '{\"status\":\"folder updated\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('ITEMMISSINGDATA');\n                    }\n                } else {\n                    rest_error('NO_ITEM');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"auth\") {\n            /*\n            ** FOR SECURITY PURPOSE, it is mandatory to use SSL to connect your teampass instance. The user password is not encrypted!\n            **\n            **\n            ** Expected call format: .../api/index.php/auth/<PROTOCOL>/<URL>/<login>/<password>?apikey=<VALID API KEY>\n            ** Example: https://127.0.0.1/teampass/api/index.php/auth/http/www.zadig-tge.adp.com/U1/test/76?apikey=chahthait5Aidood6johh6Avufieb6ohpaixain\n            ** RESTRICTIONS:\n            **              - <PROTOCOL>        ==> http|https|ftp|...\n            **              - <URL>             ==> encode URL without protocol (example: http://www.teampass.net becomes www.teampass.net)\n            **              - <login>           ==> user's login\n            **              - <password>        ==> currently clear password\n            **\n            ** RETURNED ANSWER:\n            **              - format sent back is JSON\n            **              - Example: {\"<item_id>\":{\"label\":\"<pass#1>\",\"login\":\"<login#1>\",\"pw\":\"<pwd#1>\"},\"<item_id>\":{\"label\":\"<pass#2>\",\"login\":\"<login#2>\",\"pw\":\"<pwd#2>\"}}\n            **\n            */\n            // get user credentials\n            if (isset($GLOBALS['request'][3]) && isset($GLOBALS['request'][4])) {\n                // get url\n                if (isset($GLOBALS['request'][1]) && isset($GLOBALS['request'][2])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    if ($pwdlib->verifyPasswordHash($GLOBALS['request'][4], $userData['pw']) === true) {\n                        // define the restriction of \"id_tree\" of this user\n                        //db::debugMode(true);\n                        $userDef = DB::queryOneColumn(\n                            'folder_id',\n                            \"SELECT DISTINCT folder_id\n                            FROM \".prefix_table(\"roles_values\").\"\n                            WHERE type IN ('R', 'W', 'ND', 'NE', 'NDNE', 'NEND') \",\n                            empty($userData['groupes_interdits']) ? \"\" : \"\n                            AND folder_id NOT IN (\".str_replace(\";\", \",\", $userData['groupes_interdits']).\")\",\n                            \"AND role_id IN %ls\n                            GROUP BY folder_id\",\n                            explode(\";\", $userData['groupes_interdits'])\n                        );\n                        // complete with \"groupes_visibles\"\n                        foreach (explode(\";\", $userData['groupes_visibles']) as $v) {\n                            array_push($userDef, $v);\n                        }\n\n                        // find the item associated to the url\n                        $response = DB::query(\n                            \"SELECT id, label, login, pw, pw_iv, id_tree, restricted_to\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE url LIKE %s\n                            AND id_tree IN (\".implode(\",\", $userDef).\")\n                            ORDER BY id DESC\",\n                            $GLOBALS['request'][1].\"://\".urldecode($GLOBALS['request'][2].'%')\n                        );\n                        $counter = DB::count();\n\n                        if ($counter > 0) {\n                            $json = \"\";\n                            foreach ($response as $data) {\n                                // check if item visible\n                                if (empty($data['restricted_to']) ||\n                                    ($data['restricted_to'] != \"\" && in_array($userData['id'], explode(\";\", $data['restricted_to'])))\n                                ) {\n                                    // prepare export\n                                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                                    $crypt_pw = cryption(\n                                        $data['pw'],\n                                        \"\",\n                                        \"decrypt\"\n                                    );\n                                    $json[$data['id']]['pw'] = $crypt_pw['string'];\n                                }\n                            }\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('AUTH_NO_URL');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"auth_tpc\") {\n            /*\n            ** TO BE USED ONLY BY TEAMPASS-CONNECT\n            **\n            */\n            // get user credentials\n            if (isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3]) && isset($GLOBALS['request'][4])) {\n                // get url\n                if (isset($GLOBALS['request'][1])) {\n                    // decode base64 criterium\n                    $tpc_url = base64_decode($GLOBALS['request'][1]);\n                    $user_pwd = base64_decode($GLOBALS['request'][3]);\n                    $user_saltkey = base64_decode($GLOBALS['request'][4]);\n\n                    // is user granted?\n                    //db::debugMode(true);\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`, `encrypted_psk` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][2]\n                    );\n\n                    // check if psk is correct.\n                    $user_saltkey = defuse_validate_personal_key(\n                        $user_saltkey,\n                        $userData['encrypted_psk']\n                    );\n                    if (strpos($user_saltkey, \"Error \") !== false) {\n                        // error\n                        rest_error('AUTH_NO_DATA');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    if ($pwdlib->verifyPasswordHash($user_pwd, $userData['pw']) === true) {\n                        // define the restriction of \"id_tree\" of this user\n                        //db::debugMode(true);\n                        $userDef = DB::queryOneColumn(\n                            'folder_id',\n                            \"SELECT DISTINCT folder_id\n                            FROM \".prefix_table(\"roles_values\").\"\n                            WHERE type IN ('R', 'W', 'ND', 'NE', 'NDNE', 'NEND') \",\n                            empty($userData['groupes_interdits']) ? \"\" : \"AND folder_id NOT IN (\".str_replace(\";\", \",\", $userData['groupes_interdits']).\")\",\n                            \"AND role_id IN %ls\n                            GROUP BY folder_id\",\n                            explode(\";\", $userData['groupes_interdits'])\n                        );\n                        // complete with \"groupes_visibles\"\n                        foreach (explode(\";\", $userData['groupes_visibles']) as $v) {\n                            array_push($userDef, $v);\n                        }\n\n                        // add PF\n                        $userpf = DB::queryFirstRow(\n                            \"SELECT `id` FROM \".$pre.\"nested_tree WHERE title = %s\",\n                            $userData['id']\n                        );\n                        array_push($userDef, $userpf['id']);\n\n                        // find the item associated to the url\n                        $response = DB::query(\n                            \"SELECT id, label, login, pw, pw_iv, id_tree, restricted_to, perso\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE url LIKE %s\n                            AND id_tree IN (\".implode(\",\", array_filter($userDef)).\")\n                            AND inactif = %i\n                            ORDER BY id DESC\",\n                            $tpc_url.'%',\n                            0\n                        );\n                        $counter = DB::count();\n\n                        if ($counter > 0) {\n                            $json = \"\";\n                            foreach ($response as $data) {\n                                // check if item visible\n                                if (empty($data['restricted_to']) ||\n                                    ($data['restricted_to'] != \"\" && in_array($userData['id'], explode(\";\", $data['restricted_to'])))\n                                ) {\n                                    // prepare export\n                                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                                    if ($data['perso'] === \"0\") {\n                                        $crypt_pw = cryption(\n                                            $data['pw'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } elseif (empty($user_saltkey)) {\n                                        $crypt_pw['string'] = \"no_psk\";\n                                    } else {\n                                        $crypt_pw = cryption(\n                                            $data['pw'],\n                                            $user_saltkey,\n                                            \"decrypt\"\n                                        );\n                                    }\n                                    $json[$data['id']]['pw'] = mb_detect_encoding($crypt_pw['string'], 'UTF-8', true) ? $crypt_pw['string'] : \"not_utf8\";\n                                    $json[$data['id']]['perso'] = $data['perso'];\n                                }\n                            }\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('AUTH_NO_URL');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"set\") {\n            /*\n             * Expected call format: .../api/index.php/set/<login_to_save>/<password_to_save>/<url>/<user_login>/<user_password>/<label>/<protocol>?apikey=<VALID API KEY>\n             * Example: https://127.0.0.1/teampass/api/index.php/set/newLogin/newPassword/newUrl/myLogin/myPassword?apikey=gu6Eexaewaishooph6iethoh5woh0yoit6ohquo\n             *\n             * NEW ITEM WILL BE STORED IN SPECIFIC FOLDER\n             */\n            // get user credentials\n            if (isset($GLOBALS['request'][4]) && isset($GLOBALS['request'][5])) {\n                // get url\n                if (isset($GLOBALS['request'][1]) && isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][4]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('AUTH_NO_IDENTIFIER');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    // is user identified?\n                    if ($pwdlib->verifyPasswordHash($GLOBALS['request'][5], $userData['pw']) === true) {\n                        // does the personal folder of this user exists?\n                        DB::queryFirstRow(\n                            \"SELECT `id`\n                            FROM \" . $pre.\"nested_tree\n                            WHERE title = %s AND personal_folder = 1\",\n                            $userData['id']\n                        );\n                        if (DB::count() > 0) {\n                            // check if \"teampass-connect\" folder exists\n                            // if not create it\n                            $folder = DB::queryFirstRow(\n                                \"SELECT `id`\n                                FROM \" . $pre.\"nested_tree\n                                WHERE title = %s\",\n                                \"teampass-connect\"\n                            );\n                            if (DB::count() == 0) {\n                                DB::insert(\n                                    prefix_table(\"nested_tree\"),\n                                    array(\n                                        'parent_id' => '0',\n                                        'title' => \"teampass-connect\"\n                                    )\n                                );\n                                $tpc_folder_id = DB::insertId();\n\n                                //Add complexity\n                                DB::insert(\n                                    prefix_table(\"misc\"),\n                                    array(\n                                        'type' => 'complex',\n                                        'intitule' => $tpc_folder_id,\n                                        'valeur' => '0'\n                                    )\n                                );\n\n                                // rebuild tree\n                                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                                $tree->register();\n                                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                                $tree->rebuild();\n                            } else {\n                                $tpc_folder_id = $folder['id'];\n                            }\n\n                            // encrypt password\n                            $encrypt = cryption(\n                                $GLOBALS['request'][2],\n                                \"\",\n                                \"encrypt\"\n                            );\n\n                            // is there a protocol?\n                            if (isset($GLOBALS['request'][7]) || empty($GLOBALS['request'][7])) {\n                                $protocol = \"http://\";\n                            } else {\n                                $protocol = urldecode($GLOBALS['request'][7]).\"://\";\n                            }\n\n                            // add new item\n                            DB::insert(\n                                prefix_table(\"items\"),\n                                array(\n                                    'label' => \"Credentials for \".urldecode($GLOBALS['request'][3]),\n                                    'description' => \"Imported with Teampass-Connect\",\n                                    'pw' => $encrypt['string'],\n                                    'pw_iv' => \"\",\n                                    'email' => \"\",\n                                    'url' => urldecode($GLOBALS['request'][3]),\n                                    'id_tree' => $tpc_folder_id,\n                                    'login' => $GLOBALS['request'][1],\n                                    'inactif' => '0',\n                                    'restricted_to' => $userData['id'],\n                                    'perso' => '0',\n                                    'anyone_can_modify' => '0',\n                                    'complexity_level' => '0'\n                                )\n                            );\n                            $newID = DB::insertId();\n\n                            // log\n                            logItems(\n                                $newID,\n                                \"Credentials for \".urldecode($GLOBALS['request'][3].'%'),\n                                $userData['id'],\n                                'at_creation',\n                                $GLOBALS['request'][1]\n                            );\n\n                            $json['status'] = \"ok\";\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_PF_EXIST_FOR_USER');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"set_tpc\") {\n            /*\n             * TO BE USED ONLY BY TEAMPASS-CONNECT\n             */\n            // get user credentials\n            if (isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3])) {\n                // get url\n                if (isset($GLOBALS['request'][1])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`, `encrypted_psk` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][2]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('AUTH_NO_IDENTIFIER');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    // prepare TPC parameters\n                    $tpc_param = explode(';@;', base64_decode($GLOBALS['request'][1]));\n                    $tpc_param[5] = base64_decode($tpc_param[5]);\n\n                    // is user identified?\n                    if ($pwdlib->verifyPasswordHash(base64_decode($GLOBALS['request'][3]), $userData['pw']) === true) {\n                        //\n                        if ($tpc_param[4] !== \"0\") {\n                            // it is not a personal folder\n                            $salt = \"\";\n                            $tpc_folder_id = $tpc_param[4];\n                            $perso = '0';\n                            $restricted_to = $userData['id'];\n                        } elseif ($tpc_param[4] === \"0\" && $tpc_param[5] !== \"\") {\n                            // it is a personal folder\n                            $salt = $tpc_param[5];\n\n                            // check if psk is correct.\n                            $salt = defuse_validate_personal_key(\n                                $salt,\n                                $userData['encrypted_psk']\n                            );\n                            if (strpos($salt, \"Error \") !== false) {\n                                // error\n                                rest_error('AUTH_NO_DATA');\n                            }\n\n\n                            $perso = '1';\n                            $restricted_to = \"\";\n\n                            // does the personal folder of this user exists?\n                            $user_folder = DB::queryFirstRow(\n                                \"SELECT `id`\n                                FROM \" . $pre.\"nested_tree\n                                WHERE title = %s AND personal_folder = 1\",\n                                $userData['id']\n                            );\n                            if (DB::count() === 0) {\n                                // check if \"teampass-connect\" folder exists\n                                // if not create it\n                                $folder = DB::queryFirstRow(\n                                    \"SELECT `id`\n                                    FROM \" . $pre.\"nested_tree\n                                    WHERE title = %s\",\n                                    \"teampass-connect\"\n                                );\n                                if (DB::count() == 0) {\n                                    DB::insert(\n                                        prefix_table(\"nested_tree\"),\n                                        array(\n                                            'parent_id' => '0',\n                                            'title' => \"teampass-connect\"\n                                        )\n                                    );\n                                    $tpc_folder_id = DB::insertId();\n\n                                    //Add complexity\n                                    DB::insert(\n                                        prefix_table(\"misc\"),\n                                        array(\n                                            'type' => 'complex',\n                                            'intitule' => $tpc_folder_id,\n                                            'valeur' => '0'\n                                        )\n                                    );\n\n                                    // rebuild tree\n                                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                                    $tree->register();\n                                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                                    $tree->rebuild();\n                                } else {\n                                    $tpc_folder_id = $folder['id'];\n                                }\n                            } else {\n                                $tpc_folder_id = $user_folder['id'];\n                            }\n                        } else {\n                            // there is an error in PSALT\n                            rest_error('NO_PSALTK_PROVIDED');\n                        }\n\n                        // now we continue\n                        // encrypt password\n                        $encrypt = cryption(\n                            urldecode($tpc_param[1]),\n                            $salt,\n                            \"encrypt\"\n                        );\n\n                        // is there a label?\n                        if (empty($tpc_param[3])) {\n                            $label = \"Credentials for \".urldecode($tpc_param[2]);\n                        } else {\n                            $label = urldecode($tpc_param[3]);\n                        }\n\n                        // add new item\n                        DB::insert(\n                            prefix_table(\"items\"),\n                            array(\n                                'label' => $label,\n                                'description' => \"Imported with Teampass-Connect\",\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'email' => \"\",\n                                'url' => urldecode($tpc_param[2]),\n                                'id_tree' => $tpc_folder_id,\n                                'login' => urldecode($tpc_param[0]),\n                                'inactif' => '0',\n                                'restricted_to' => $restricted_to,\n                                'perso' => $perso,\n                                'anyone_can_modify' => '0',\n                                'complexity_level' => '0'\n                            )\n                        );\n                        $newID = DB::insertId();\n\n                        // log\n                        logItems(\n                            $newID,\n                            $label,\n                            $userData['id'],\n                            'at_creation',\n                            ''\n                        );\n\n                        $json['status'] = \"ok\";\n                        $json['new_item_id'] = $newID;\n                        // prepare answer. If no access then inform\n                        if (empty($json)) {\n                            rest_error('AUTH_NO_DATA');\n                        } else {\n                            echo json_encode($json);\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"delete\") {\n        /*\n        * DELETE\n        *\n        * Expected call format: .../api/index.php/delete/folder/<folder_id1;folder_id2;folder_id3>?apikey=<VALID API KEY>\n        * Expected call format: .../api/index.php/delete/item>/<item_id1;item_id2;item_id3>?apikey=<VALID API KEY>\n        */\n            if ($GLOBALS['request'][1] == \"folder\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n\n                // get user info\n                if (isset($GLOBALS['request'][3]) && !empty($GLOBALS['request'][3])) {\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n                    if (DB::count() == 0) {\n                        $user_id = API_USER_ID;\n                    } else {\n                        $user_id = $userData['id'];\n                    }\n                } else {\n                    $user_id = API_USER_ID;\n                }\n\n                if (count($array_category) > 0 && count($array_category) < 5) {\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n\n                    // prepare tree\n                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                    $tree->register();\n                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title', 'personal_folder');\n\n                    // this will delete all sub folders and items associated\n                    for ($i = 0; $i < count($array_category); $i++) {\n                        // Get through each subfolder\n                        $folders = $tree->getDescendants($array_category[$i], true);\n                        if (count($folders) > 0) {\n                            foreach ($folders as $folder) {\n                                if (($folder->parent_id > 0 || $folder->parent_id == 0) && $folder->personal_folder != 1) {\n                                    //Store the deleted folder (recycled bin)\n                                    DB::insert(\n                                        prefix_table(\"misc\"),\n                                        array(\n                                            'type' => 'folder_deleted',\n                                            'intitule' => \"f\".$array_category[$i],\n                                            'valeur' => $folder->id.', '.$folder->parent_id.', '.\n                                                $folder->title.', '.$folder->nleft.', '.$folder->nright.', '.$folder->nlevel.', 0, 0, 0, 0'\n                                        )\n                                    );\n                                    //delete folder\n                                    DB::delete(prefix_table(\"nested_tree\"), \"id = %i\", $folder->id);\n\n                                    //delete items & logs\n                                    $items = DB::query(\n                                        \"SELECT id\n                                        FROM \".prefix_table(\"items\").\"\n                                        WHERE id_tree=%i\",\n                                        $folder->id\n                                    );\n                                    foreach ($items as $item) {\n                                        DB::update(\n                                            prefix_table(\"items\"),\n                                            array(\n                                                'inactif' => '1',\n                                            ),\n                                            \"id = %i\",\n                                            $item['id']\n                                        );\n                                        //log\n                                        DB::insert(\n                                            prefix_table(\"log_items\"),\n                                            array(\n                                                'id_item' => $item['id'],\n                                                'date' => time(),\n                                                'id_user' => $user_id,\n                                                'action' => 'at_delete'\n                                            )\n                                        );\n                                    }\n                                    //Update CACHE table\n                                    updateCacheTable(\"delete_value\", $array_category[$i]);\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                $json['status'] = 'OK';\n            } elseif ($GLOBALS['request'][1] == \"item\") {\n                $array_items = explode(';', $GLOBALS['request'][2]);\n\n                // get user info\n                if (isset($GLOBALS['request'][3]) && !empty($GLOBALS['request'][3])) {\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n                    if (DB::count() == 0) {\n                        $user_id = API_USER_ID;\n                    } else {\n                        $user_id = $userData['id'];\n                    }\n                }\n\n                for ($i = 0, $c = count($array_items); $i < $c; $i++) {\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                        ),\n                        \"id = %i\",\n                        $array_items[$i]\n                    );\n                    //log\n                    DB::insert(\n                        prefix_table(\"log_items\"),\n                        array(\n                            'id_item' => $array_items[$i],\n                            'date' => time(),\n                            'id_user' => $user_id,\n                            'action' => 'at_delete'\n                        )\n                    );\n\n                    //Update CACHE table\n                    updateCacheTable(\"delete_value\", $array_items[$i]);\n                }\n\n                $json['status'] = 'OK';\n            }\n\n            if ($json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } elseif ($GLOBALS['request'][0] == \"new_password\") {\n            if (!empty($GLOBALS['request'][1])) {\n                $params = explode(\";\", $GLOBALS['request'][1]);\n\n                if (empty($params[0])) {\n                    $params[0] = 8;\n                }\n                if (empty($params[1])) {\n                    $params[1] = 0;\n                }\n                if (empty($params[2])) {\n                    $params[2] = 0;\n                }\n                if (empty($params[3])) {\n                    $params[3] = 0;\n                }\n                if (empty($params[4])) {\n                    $params[4] = 0;\n                }\n                if (empty($params[5])) {\n                    $params[5] = 0;\n                }\n                if (empty($params[6])) {\n                    $params[6] = 0;\n                }\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                $pwgen = new SplClassLoader('Encryption\\PwGen', '../includes/libraries');\n                $pwgen->register();\n                $pwgen = new Encryption\\PwGen\\pwgen();\n\n                // init\n                $pwgen->setLength($params[0]);\n                if ($params[1] === \"1\") {\n                    $pwgen->setSecure(true);\n                }\n                if ($params[2] === \"1\") {\n                    $pwgen->setNumerals(true);\n                }\n                if ($params[3] === \"1\") {\n                    $pwgen->setCapitalize(true);\n                }\n                if ($params[4] === \"1\") {\n                    $pwgen->setAmbiguous(true);\n                }\n                if ($params[5] === \"1\" && $params[6] === \"1\") {\n                    $pwgen->setSymbols(true);\n                }\n\n                // generate and send back (generate in base64 if symbols are asked)\n                if ($params[6] === \"1\") {\n                    echo '{\"password\" : \"'.base64_encode($pwgen->generate()).'\"}';\n                } else {\n                    echo '{\"password\" : \"'.($pwgen->generate()).'\"}';\n                }\n            } else {\n                rest_error('NO_PARAMETERS');\n            }\n        } elseif ($GLOBALS['request'][0] === \"info\") {\n            if ($GLOBALS['request'][1] === \"complexicity_levels_list\") {\n                require_once '../includes/language/english.php';\n                $json = array(\n                    0=> $LANG['complex_level0'],\n                    25=> $LANG['complex_level1'],\n                    50=> $LANG['complex_level2'],\n                    60=> $LANG['complex_level3'],\n                    70=> $LANG['complex_level4'],\n                    80=> $LANG['complex_level5'],\n                    90=> $LANG['complex_level6']\n                );\n\n                echo json_encode($json);\n            } elseif ($GLOBALS['request'][1] === \"folder\") {\n                if (!empty($GLOBALS['request'][2]) && is_numeric($GLOBALS['request'][2])) {\n                    $data = DB::queryFirstRow(\n                        \"SELECT * FROM \".$pre.\"nested_tree WHERE id = %i\",\n                        $GLOBALS['request'][2]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('NOSUCHFOLDER');\n                    }\n\n                    // form id_tree to full foldername\n                    require_once '../sources/SplClassLoader.php';\n                    //Load Tree\n                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                    $tree->register();\n                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                    $folder = \"\";\n                    $arbo = $tree->getPath($GLOBALS['request'][2], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($folder)) {\n                            $folder = stripslashes($elem->title);\n                        } else {\n                            $folder .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare info\n                    $json = array(\n                        \"title\" => $data['title'],\n                        \"personal_folder\" => $data['personal_folder'],\n                        \"renewal_period\" => $data['renewal_period'],\n                        \"parent_id\" => $data['parent_id'],\n                        \"path\" => $folder,\n                    );\n\n                    echo json_encode($json);\n                } else {\n                    rest_error('NO_PARAMETERS');\n                }\n            } elseif ($GLOBALS['request'][1] === \"version\") {\n                echo '{\"api-version\":\"'.$api_version.'\"}';\n            } else {\n                rest_error('NO_PARAMETERS');\n            }\n        } else {\n            rest_error('METHOD');\n        }\n    }\n}\n\nfunction rest_put()\n{\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n    if (apikey_checker($GLOBALS['apikey'])) {\n        teampass_connect();\n    }\n}\n\n/**\n * @param string $type\n */\nfunction rest_error($type, $detail = 'N/A')\n{\n    switch ($type) {\n        case 'APIKEY':\n            $message = array('err' => 'This api_key '.$GLOBALS['apikey'].' doesn\\'t exist');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'NO_CATEGORY':\n            $message = array('err' => 'No folder specified');\n            break;\n        case 'NO_ITEM':\n            $message = array('err' => 'No item specified');\n            break;\n        case 'EMPTY':\n            $message = array('err' => 'No results');\n            break;\n        case 'IPWHITELIST':\n            $message = array('err' => 'Ip address not allowed.');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'MYSQLERR':\n            $message = array('err' => $detail);\n            header('HTTP/1.1 500 Internal Server Error');\n            break;\n        case 'METHOD':\n            $message = array('err' => 'Method not authorized');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'ITEMBADDEFINITION':\n            $message = array('err' => 'Item definition not complete');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'ITEM_MALFORMED':\n            $message = array('err' => 'Item definition not numeric');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERBADDEFINITION':\n            $message = array('err' => 'User definition not complete');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERLOGINEMPTY':\n            $message = array('err' => 'Empty Login given');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERALREADYEXISTS':\n            $message = array('err' => 'User already exists');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'REQUEST_SENT_NOT_UNDERSTANDABLE':\n            $message = array('err' => 'URL format is not following requirements');\n            break;\n        case 'AUTH_NOT_GRANTED':\n            $message = array('err' => 'Bad credentials for user');\n            break;\n        case 'AUTH_NO_URL':\n            $message = array('err' => 'URL needed to grant access');\n            break;\n        case 'AUTH_NO_IDENTIFIER':\n            $message = array('err' => 'Credentials needed to grant access');\n            break;\n        case 'AUTH_NO_DATA':\n            $message = array('err' => 'Data not allowed for the user');\n            break;\n        case 'NO_DATA_EXIST':\n            $message = array('err' => 'No data exists');\n            break;\n        case 'NO_DESTINATION_FOLDER':\n            $message = array('err' => 'No destination folder provided');\n            break;\n        case 'PASSWORDTOOLONG':\n            $message = array('err' => 'Password is too long');\n            break;\n        case 'NOSUCHFOLDER':\n            $message = array('err' => 'Folder ID does not exist');\n            break;\n        case 'PASSWORDEMPTY':\n            $message = array('err' => 'Password is empty');\n            break;\n        case 'ITEMEXISTS':\n            $message = array('err' => 'Label already exists');\n            break;\n        case 'ITEMMISSINGDATA':\n            $message = array('err' => 'Label or Password or Folder ID is missing');\n            break;\n        case 'SET_NO_DATA':\n            $message = array('err' => 'No data to be stored');\n            break;\n        case 'NO_PF_EXIST_FOR_USER':\n            $message = array('err' => 'No Personal Folder exists for this user');\n            break;\n        case 'HTML_CODES_NOT_ALLOWED':\n            $message = array('err' => 'HTML tags not allowed');\n            break;\n        case 'TITLE_ONLY_WITH_NUMBERS':\n            $message = array('err' => 'Title only with numbers not allowed');\n            break;\n        case 'ALREADY_EXISTS':\n            $message = array('err' => 'Data already exists');\n            break;\n        case 'COMPLEXICITY_LEVEL_NOT_REACHED':\n            $message = array('err' => 'complexity level was not reached');\n            break;\n        case 'NO_PARAMETERS':\n            $message = array('err' => 'No parameters given');\n            break;\n        case 'USER_NOT_EXISTS':\n            $message = array('err' => 'User does not exist');\n            break;\n        case 'NO_PSALTK_PROVIDED':\n            $message = array('err' => 'No Personal saltkey provided');\n            break;\n        default:\n            $message = array('err' => 'Something happen ... but what ?');\n            header('HTTP/1.1 500 Internal Server Error');\n            break;\n    }\n\n    echo json_encode($message);\n    exit(0);\n}\n\nfunction apikey_checker($apikey_used)\n{\n    teampass_connect();\n    $apikey_pool = teampass_get_keys();\n    if (in_array($apikey_used, $apikey_pool)) {\n        return(1);\n    } else {\n        rest_error('APIKEY', $apikey_used);\n    }\n}\n\nfunction teampass_pbkdf2_hash($var_p, $var_s, $var_c, $var_kl, $var_st = 0, $var_a = 'sha256')\n{\n    $var_kb = $var_st + $var_kl;\n    $var_dk = '';\n\n    for ($block = 1; $block <= $var_kb; $block++) {\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true);\n        for ($var_i = 1; $var_i < $var_c; $var_i++) {\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true));\n        }\n        $var_dk .= $var_ib;\n    }\n\n    return substr($var_dk, $var_st, $var_kl);\n}\n", "2.1.27\n 9/\n Fixed a possible XSS (credit to ADLab of Venustech)\n Improved security related to User Management\n \t> a manager could potentially act on users not related to him\n Improved security related to Items Management\n \t> a user could potentially act on Items he should not have access to\n Securized script.backup.php by adding a security key\n Fixed some other security failures (credit to \u200bsecurity at Amossys)\n #1945 Cannot delete items\n #1944 File upload results in error\n #1941 Visualisation problems\n\n 8/\n Delete install folders and files during installation process\n Custom Field value can be masked\n Database password is encrypted in settings.php file\n PHPMailer library updated to 5.2.23\n TwoFactorAuth library was updated\n Configuration variables are not set in SESSION anymore. Now read from tp.config.php file.\n Fix: issue on offline export\n Fix: error on deleting a folder at root\n #1939 Unable to change page (role management)\n #1937 Error while using script.backup.php in standalone\n #1935 Add folder results in Requested JSON parse failed\n #1933 Trying to move folder results in error message\n #1932 Keepass upload fails\n #1927 Changing language is not possible for users\n #1924 Moving items give error: Requested JSON parse failed\n #1923 Red wheel keeps turning, blocks display of new items\n #1919 Upgrade to release 2.1.27.8 converts encrypted database password back to clear-text\n #1915 Cannot Edit or Delete items in the Personal folder\n #1909 Roles Management - Problem with acess rights \"Edit\" \"Delete\"\n #1903 SSH Password Change does not work\n #1900 Forgot your password --> Page reload automatic\n #1891 Install error - Uncaught Defuse\\\\Crypto\\\\Exception\\\\BadFormatException: Encoded data is shorter than expected\n #1899 Active Directory authentication not working on fresh installed Cent OS 7\n #1890 access rights in manage roles\n #1888 Export to CVS --> empty file (0 kb)\n #1886 JSON Error when importing with an apostrophe (\u2018)\n #1885 Undefined index: SSL_SERVER_CERT\n #1884 Cannot delete custom fields - hangs indefinitely after confirm with spinning gear\n #1882 Can't see any entry on any folder, using any account\n #1881 Doesn't auto-delete install/ folder after installation completed\n #1880 Custom Fields, Not encrypted/decrypted when toggled in Custom-Field Settings Screen\n #1872 New Admin User login not working -JSON Parse file failure\n #1870 Logic issue in headers sending\n #1866 CSV import with empty url leads to value 0\n #1862 Import from Keepass.xml to Personalfolder no access to Item\n #1857 API: Folders created at level 0 instead of correct level\n #1856 Robustified tp.config.php creation in case of upgrade\n #1851 Fix ldap suffix\n #1850 Missing iconv in Docker\n #1840 Added the \"download\" attribute\n #1837 JSON error in Find page when user has no folders to browse\n #1834 Typo in sources/main.functions.php\n #1833 Opening a one time view page give a notice: A session had already been started...\n #1830 Salt key field has already a character filled in.\n #1829 Attachments is broken after upgrade from 2.1.27.0. Fix in progress\n #1828 No error message when duplicate item names at personal keys\n #1826 New dockerfile and docker-compose.yml\n #1820 group vertical scroll bar not work correctly\n #1819 Fix for QR sending from login page\n\n 6-7/\n Fix: upgrade process with encrypted attachments\n Fix for #1806\n\n 5/\n New: Custom Fields are only visible if defined\n Fix issue in tree if subfolder is visible while parent is not\n Fix issues regarding DUOSecurity\n Fix upgrade doesn't start in case that sk.php file has moved\n Fix for Custom Fields not displayed as defined by `order` field\n #1796 Can't add folder from API\n #1787 email notifications are not sent if there are any admins with empty email address\n #1776 Allow restricting items to users and roles - Wrong Item Owner\n #1775 Can not decrypt a created crypted Backup - Improved encryption with Defuse\n #1774 Announce this Item by email\n #1769 Installation issue - no admin account is created\n #1762 Share user rights works backwards\n #1761 Reset of my Personal Saltkey\n #1743 Enable anonymous LDAP queries\n #1690 Unable to set/save personal salt key with LDAP user\n\n 3-4/\n New: Multiselection in Roles vs Folders matrix\n New: LDAP configuration test mode (in progress)\n Fix: Prevent moving a folder to one of its child folder\n Fix: Global saltkey change\n Fix: Copy folder does'nt copy included items\n Fix: Encrypt/Decrypt attachments feature from admin page\n Fix: SQL injection corrected in users.queries.php (author: Pang@ADLab of Venustech)\n #1742 Fix for issue #1539 verifying LDAP groups properly\n #1740 Missing buttons on Users page\n #1737 Cannot import files\n #1735 Dockerfile - PHP extension \"curl\" is loaded Extension curl is not loaded\n #1733 Copy Item doesn't work if copy from public to public folders\n #1731 Cannot login in after fresh install\n #1729 Protection against bigger data than database field size\n #1727 Cannot edit or delete entry in the Personal folder\n\n 2/\n Secure fixes\n Session increase time feature is now increasing with the expected user session duration\n Default language cannot be changed fix\n Fix for \"hide not accessible folders\" option\n #1725 Some fixes\n #1723 Fix spin not removed while reseting user saltkey\n #1722 SELinux issue leads to upload impossible\n #1718 Moving a folder to itself\n #1717 After deleting a folder, items are still visible in search page\n #1713 Doubleclick on directory shows items twice\n #1710 Error on psk change\n #1709 Missing field in table on fresh install\n #1707 \"Restricted To\" not working correctly when creating new items\n #1706 User can edit & delete items without rights\n #1696 Fix for no log for OTV\n #1695 Manager can create folder at root from Items pas\n #1686 Fix for item History dialogbox\n #1685 Fix in Portuguese file\n #1684 Estonian language still missing\n #1679 Sort by don't work in Utilities/logs\n #1676 Pre-auth XSS in index.php\n #1674 name and lastname are changed on other user edit\n #1672 Anonymous settings not stored\n #1670 Incremental upgrade not active\n #1669 Logout - Errors\n #1668 File encryption is not correct in case of upgrade\n #1666 Can`t set avatar\n #1662 Can not delete folders\n #1659 Third level of sub folders in the Personal folder are not seen\n #1654 User management page - no \"next\" button\n\n 2/\n New   Defuse Encryption implemented in place of phpCrypt\n NEW   AGSES authentication implemented\n NEW   Custom Fields data can be encrytped or not in database\n NEW   Folder copy feature\n NEW   Mass move or delete operation on Items\n NEW   Item change proposal\n IMP   Implemented new session encryption library SecureHandler (getting rid of mcrypt extension)\n IMP   Language selection is now in User Profile (Default language is used on authentication page)\n IMP   User creation dialogbox improved with all user properties\n IMP   New user login availability is checked \"live\"\n IMP   Filtering counters in datatables\n IMP   Users Management dialogbox improved\n IMP   2FA authentication change to improve security (no call to external QR generator)\n UPD   AES library updated\n FIX   \"Find\" feature:\n       - copy from public to personal folder\n       - list of folders is refreshed when copying an Item\n #     Copy folders\n #1635 New folder inheritance of parent specific settings\n #1631 Error could be appear on upgrade when checking folders and files\n #1628 URL link to specific item does not work\n #1627 Improved label preview length\n #1625 Request to add/change password\n #1624 Error 500 while importing item with API (with PHP < 7)\n #1621 New option: OTV can be disabled\n #     New option: create Item without password\n #1620 Direct copy password from seach results and large folders\n #1616 Cannot show password with IE11\n #1614 Generate personal folders sets regular root folders also as personal\n #1608 All folders are deleted\n #1603 Attached files disappears\n #1601 Time zone can't be saved in My Profile\n #1593 Insert duplicate label with API\n #1592 Show Client IP in mail to admin about logged on users\n #1588 Fix for OTV links\n #1587 fix for e-mail to administrator on logon does not work\n #1581 Fix for new folder Custom Fields inheritance\n #1579 Fix for preventing a php fatal error\n #1575 Fix for tree not loaded when user has no access to a folder with children\n #1571 Drag and drop from PF to public folder makes item password corrupted\n #1571 Create an item inside another folder than the one selected\n #1561 Personal folder deletion deletes all\n #1559 API IP Whitelist check does not consider XFF\n #1556 Fix bug for upgrading old passwords\n #1553 LDAP support - Add LDAP port - Add support multi LDAP server\n #1551 Authentication through LDAP posix-search\n #1550 2 Factor enabled but can still log in without code\n #1549 Read Only users can use Personal Folders\n #1543 Wrong Saltkey message after setting\n #1533 The change of the main SALT Key doesn't work\n #1532 Added error message in install.js if db-pw contains double quotes\n #1531 Database otv table originator field should be int instead of tinyint\n #1514 User language selection is done in Profile dialogbox\n #1474 New option: create an item without password\n #1472 \"folder access\" and \"role\" settings when adding new user + propage rights from one user\n #1464 CSV files broken, html entities not decoded, newlines not stripped\n #1422 Folders deletion protocol has been securized to prevent unconsistencies in folders tree\n #1412 New option: Manager can move items they can view\n #1408 Display folders visible by a user\n #1299 Export to pdf or csv shows htmlencoded\n\n2.1.26\n #1537 Homepage not loading in French\n #1527 Error Field 'timestamp' doesn't have a default value\n #1526 New .htaccess file in ./includes/config\n #1525 Bad encoding in previous used passwords list\n #1515 Cannot add new users if similar user name exists\n #1512 Long folder names break UI\n #1511 Fix on LDAP due to library upgrade\n #1510 During upgrade, clean personal_folder field in DB\n #1504 Error while creating a new user with API\n #1494 csrfp.config.php not updated on URL change\n #1491 Added check against only numeric folder name\n #1489 JSON error on quick search if no folder access\n #1497 Nothing happens when clicking \"Remove orphan items from database\"\n #1375 Symbol < breaks password in One Time View page\n #1481 Query error\n #1476 Fix personal folder update script for\n #1463 PDF Export still broken\n #1454 API outputs deleted passwords\n #1453 API should have function \"userpw\"\n #1452 API should also output the url to each password\n #1457 New email address not used until logoff & logon\n #1450 Purge log feature - purges nothing\n #1449 Delete category hangs UI and crashes PHP\n #1448 admin delete removed password multiple select not working\n #1445 Password label doesn't preserve '\\' character\n #1439 Fix for large files upload\n #1438 Sanitize ampersand to URL encoding in csrfp.config\n #1426 Fixes for many critical issues with OTV\n #1421 Item will not be automatically deleted when accessed through otv option enabled\n #1415 Installation Issue and PDF export password field mask\n       Fixed problem for user to change self password\n       Fixed problem for deleting all directories\n #1414 Subfolders created into personal folders are presented in Folders and Roles management\n #1409 Updated PDF library to fit 7.x PHP\n #1407 Remove Save button in 2FA settings tab\n #1402 User can define his timezone\n #1395 Error with Chrome while upgrading\n #1394 Replace ascii characters in cpliboard copy\n #1392 Corrected sql error while restoring database\n #1389 Requested JSON parse failed when copying item\n #1386 JSON parse failed (history item view)\n #1384 SyntaxError: Invalid Character if Syslog enabled\n #1383 Export to PDF - Incorrect formatting\n #1381 LDAP user have unlimited access on first logon\n #1380 CSV or KeePass Import - Title as \"0\"\n #1378 JSON parse error when changing user password (with several roles)\n #1369 Cannot save some settings\n #1361 Duo prevents the ability to add/edit items\n #1353 Add ldap_start_tls if set\n #1346 On upgrade settings.php not found\n #1345 Admin, password change and logoff not working\n #1344 Wrap all non-GROUP BY columns in an aggregate function (MIN)\n #1342 Change my password screen loop\n #1340 Upgrade process last step\n #1335 This page doesn't exist\n #1328 Minimum password complexity for folders and items\n #1334 Fix \"installation related pages\" dead link\n #1333 Fix LDAP search base input\n #1332 API not allowing roles separation of pipe '|'\n #1326 Fixed LDAP functionality\n #1325 updated Dockerfile\n #1310 Addes Estonian language\n #1309 error while loading folders (if simplify tree option enabled)\n #1308 Teampass hangs when a folder is create with option \"New sub-folder inherits rights from parent folder\" enabled\n #1301 add ldap_search_base record for db init\n #1300 After 3 bad login attempts, user needs to wait 10s before new try\n #1299 Export to pdf or csv shows htmlencoded\n #1298 Backup-filename on 2.1.27 contains /\n #1292 SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data\n #1284 fix for can_manage_all_users update during upgrade\n #1279 SyntaxError: Unexpected token \u00ee in JSON at position 0\n #1278 CSRFProtector protection while restoring a backup file\n #1276 MySQL 5.7 query error\n #1269 Typo error\n #1263 Error at line 75 in suggestion page\n #1251 Improving CSRFP configuration\n #1240 Security fixes on some missed queries and on non-protected text fields\n #1241 OTV visible more than one time\n #1238 Fix for upgrade.php where mysql_result() command were still not replaced\n #1235 Import from Keepass: missing items with the same title\n #1229 CSRFProtector message while DUO is enabled\n #1225 Unable to Access OTV Link\n #1224 Fixed errors in export_to_html_format\n #1211 No FA code sent from home page\n #1210 Fix for main.queries.php\n #1206 Fix for importing files\n #1203 Needed PHP extensions check during install & update process\n #1197 Awesome Font 4.5.0\n #1193 When I login with user admin \" loading ... \" and it does not finish\n #1192 Cannot save \"enable attachments encryption\"\n #1188 Implemented proposals for source code improvement\n #1186 open/highlight folder tree of displayed item\n #1183 Syntax Error on personal folders option\n #1181 403 Access Forbidden by CSRFProtector! at config save\n #1178 New user right added for managing all users (super Manager)\n #1174 Adding LDAP groups support to 'posix-search' LDAP auth\n #1172 Complete number of Items displayed in Tree\n #1158 Admin password cannot be changed\n #910  Backslashes in accounts are not copied to clipboard\n #268  Password recovery \"Forgot your password?\" don't do anything\n NEW: Server user password change through SSH connection\n NEW: Upgrade database handler improved for better upgrades management\n NEW: New user right added for managing all users (super Manager)\n FIX: If expiration engaged and password is changed, the warning is still present.\n FIX: New suggestion folder could remain empty in some specific cases.\n FIX: By creating a role, this new one is directly visible by creator.\n FIX: Security issue with downloadFile.php. Now protected by session and htaccess.\n FIX: QRCode is not visible in Users list\n FIX: Display inconsistancies in User log results\n Fix: Inconsistency in Delete & Restore process\n Fix: Errors in CSV import process\n Fix: Impossible to proceed with 'password lost' process\n Fix: OTV item not reachable\n Analyzed with RIPS (https://www.ripstech.com/) against security bugs\n\n2.1.25\n #1169 sending Google Authenticator code through index page\n #1160 hiding user password change option if DUOSecurity\n #1152 Error while saving settings\n #1149 log failed user authentication\n #1148 Answer from Server cannot be parsed!\n #1147 Mask/Display password not logged\n #1146 Roles on separate pages\n #1144 Login failure gives odd error\n #1143 import csv double quotes issue\n #1141 Syslog\n #1140 Security fix for Multiple vulnerabilities\n #1135 DataTables warning : table id=t_users - Invalid JSON Response\n #1128 Requested Json Parse Failed\n #1123 No Item to show in a folder after upgrading\n #1122 When deleting an item, confirmation modal doesn't show the name of the item to be deleted\n #1120 Not connect.n Verify Network\n #1114 Cannot Delete Favorites Due to \"undefined function prefix_table() \"\n #1108 Table teampass_keys missing!\n #1103 omplexity Matches new password but still claims otherwise\n #1102 Users cannot create folders\n #1096 One time link view problem\n #1095 Move Personal folder to Group Folder\n #1086 \"Error Encryption of the Password\" after update\n #1078 Send events to syslog\n Fix for changing SaltKey in admin page\n Fix for complete list of Roles in Admin Roles page\n Fix for Users and Items currently edited list that were not proposing \"next\" button\n Fix for label \u201cBy clicking the save button, you will delete \u2026.\u201d persistent\n Fix for list loaded twice if double click in Tree folder\n Fix for search result not displayed if previous folder was empty\n Fix for possible sql injection via LIMIT parameters\n Fix on profile dialogbox\n Implemented Deletion and Restoration events in item's History\n Implemented better handling of User role selection\n Implemented multi personal folders\n Implemented CSRFP library usage for security purpose\n Implemented new \"Yes/No\" button in settings page\n Implemented log view for failed authentication\n Implemented Tree sequentially load (via ajax)\n Add new item from API (for teampass-connect) (not yet tested)\n\n2.1.24\n #1090 - Fix for Export to PDF last folder not taken into consideration\n #1088 - #1085 - Password show problem\n #1087 - Managers can edit and delete Items they are allowed to see flag\n #1085 - Fix for copy to clipboard that sometime fails to work correctly\n #1073 - User can create folder on root without permission\n #1074 - Read only user can create folders + wipe out all items on remove folder\n #1069 - Knowledge Base can not change page\n #1068 - personal saltkey not saved\n #1067 - Suggestion feature not working\n #1064 - Record in db are not deleted when you delete in GUI\n #1058 - Fix API issue while adding an item\n #1063 - Fix for Forgot password not working\n #1062 - Warning for hex2bin function usage (PHP>5.4)\n #1061 - for for Can not import password from keepass xml\n #1055 - Personal item cannot be deleted\n #1048 - Encryption error flag is visible for no reason\n #1045 - Missing fields in table (pw_iv and data_iv)\n #1042 - Added pagination in Users page\n #1042 - Pagination on Users Page\n #1060 - Added new logging events (password copied, password shown)\n #1041 - \"Forgot your password?\" not working\n #1027 - User right more refined with \"No deletion\" possible right\n #953 - Make sure to rebuild the tree when creating an user with a personal folder\n #1035 - added php-xml install check\n #950 - #1005 - can not create Admin account\n #936 - #937 - Session file_exists not allowed while running through open_basedir restriction\n #970 - API special char fix\n #962 - Error message when using the Find-function\n #955 - Fix LDAP Settings UI\n Fix passwords are empty when importing from Keepass\n Fix empty URL column in off-line html\n A lot of small fixes\n New: implemented 2factor authentication DUOSecurity feature\n New: create User via API\n New: Vietnamese language added\n New: Tree structure is loaded dynamically\n New: Notification to Managers for awaiting suggestions\n\n 2.1.23\n #727 - #729 - Encoding problem\n #799 - Error: Field 'field_1' doesn't have a default value\n #830 - Fix documentation syntax\n #829 - Removing unecessary php closing tags\n #807 - Fix rights based on roles for new folders\n #808 - Add a SMTP security parameter to the email configuration\n #805 - Keepass Import improvements\n #790 - Install fixes\n #835 - Links in items description don't work\n #817 - Wrong number of users online\n #838 - Fix for mysqli encoding\n #839 - Keepass fixes\n #853 - New setting for default session expiration delay\n #851 - Multiple fixes for LDAP integration\n #814 - #857\n #880 - Fix for View logs error redeclared function getBits\n #881 - Fix for \"Forgot your password?\" not working\n #900 - Fix for New folder incorrect permissions (read-only)\n #890 - Fix for Personal Folder only read permission\n #910 - Fix for Backslashes in accounts are not copied to clipboard\n #913 - Fix for 'Announce this item by email' fails\n #915 - Export to PDF corrected\n #907 - Move folder feature\n #917 - Fix on API\n #941 - Fix for user_not_exists message (LDAP)\n #988 - Error on copy item\n #992 - Added to Log User Created By\n PR : #871 - #887\n API: add FIND feature\n Fix: copy not possible in RO folders\n Fix: If GA activated, Users can ask for a new code from the login page\n Fix: Off-line file url was not correct in download button\n Removal of Keys table\n Implementation of PhpCrypt library as encryption library (AES-128 with CBC mode)\n Implementation of Awesomefont in Items page\n Clean up of old comments\n Added \"long press\" to show password\n Fix of bug in Offline export\n List of Users is now loaded through Ajax to prevent timeout in case of long list of users\n Personal saltkey change is now performed through Ajax to prevent timeout in case of long list of passwords\n Fix for users with \"Allowed folders\" that can't write inside them.\n Removed extra files from Yubico folder\n Update process: suggestions passwords are reencrypted\n Suggestion migrated to new encryption\n\n2.1.22\n #700 - Errors related to \"includes/js/jstree/themes/default\"\n #718 - Two factor authentication: \"This user has no email set!\"\n #674 - API - User rights\n #697 - Default language setting, not being applied to automatically created ldap users.\n #698 - Default language setting, not being applied to newly created users.\n #707 - httpRequest is missing in upgrade process\n #725 - Disable button after item creation or edition\n #720 - cannot sign up to 2factor\n #690 - limit password export via PDF/CSV to user/group\n #745 - Enable again save_button after error on Add/Edit Item\n #739 - OTV correction\n #731 - Export password to file\n #653 - Passwords preprended during upgrade\n #767 - Backup restore feature fix\n #774 - Call to undefined method DB::queryInsert\n Other: #711 - #699 - #726 - #744 - #684 - #737\n New - Rights \"Read / Write / No Access\" added to folders for better rights management\n New - quick copy to clipboard for password and login\n New - New option : Prevent against duplicate items in same folder\n New - If folder is read-only for the User then it is striked-through\n Changed - list of restricted users refined by folder selected\n Fix - Not possible to see more than 8 Roles in Roles matrix\n\n2.1.21\n #597 - Rapid click on save button on \"Add a folder\"\n #599 - SQL:AUTO_INCREMENT id --> language\n #600 - preg_replace(): Unknown modifier '|'\n #598 - Extra fields in home page\n #602 - can't change user password by very heavy complexity\n #603 - password complexity check only in javascript\n #415 - Items are not show when in folder view. Can easy search and open.\n #578 - API generate new key\n #580 - Redirect to login page when accessing directly an item (if not logged)\n #576 - Mismatch email_body tags\n #607 - HMTL export erroneous download link\n #622 - Tooltip on left menu buttons\n #619 - CSV Import does not import passwords\n #617 - CSV Import doesn't handle passwords with quotes well\n #627 - Complete authentication bypass\n #626 - API vulnerable (improvement in progress)\n #633 - favicon correction\n #636 - MySQL on non-standard port\n #632 - Refactor order of index.php\n #629 - A password for admin account is required during installation\n #654 - Tab character breaks json format\n #652 - one-time view not working when interface is in French\n #658 - Rapid Click on Item Copy\n #657 - Rapid Click on Password Creation\n #656 - Can't Create Folder as User\n #643 - email charset in UTF-8\n #641 - Add and save item -> double click on that icon won't work\n #671 - When password is generated, it is added in confirm field too\n #672 - Changing password makes account inaccessible\n #637 - Multi Domain LDAP\n #673 - Changed strategy for quick icon clipboard copy\n #639 - Design fix in admin page\n #681 - Fix for Folder and Users creation as Administrator\n #680 - Set custom expiry for one time view link\n #682 - Fix SMTP authentication which were used regardless of the settings\n      - Fix a query used in the \"lost password\" management.\n      - Fix the mysql error message when the session_expired page is accesseded...\n - New option permitting to send or not an email to User when admin changes his password\n - Fix for image viewer when option files encryption is set\n - Fix for password complexity level update\n\n2.1.20\n #492 - Default admin password not working\n #509 - Password complexity\n #493 - Unable to purge logs\n #503 - manual insertions in Items History log not working\n #494 - Logs > Administration JSON error\n #491 - Applying email address to user\n #441 - Attachments encryption\n #459 - Turn off strict mode\n #477-#452 - Fix for upgrade\n #459 - Turn off strict mode\n #472 - Error on line 582 index.php\n #474 - Set default to checked for secure passwords\n #497 - Moved GA QR code creation to administration\n #487 - Off-line mode, link make the page scroll up\n #533 #521 #528 - Installation issue\n #525 - Settings.php should not be commited\n #527 - Potential security bug\n #485 - CVS Import on V 2.1.19 quotes problems\n #544 - DataTables warning: JSON data from server could not be parsed\n #547 - User search\n #520 - API access\n #549 #550 - Server Time in footer\n #539 - New feature: Simplify Items Tree\n #547 - Search in Users page\n #401 - Folder role inheretance on new folder\n #552 - added MBstring check\n #554 - Search-Page \"Jump to item\"-Button not working correctly\n Fork from slimm609 - Encrypted Sessions and CSRFGuard enabled\n Issues with folder creation in \"personal folder\"\n #536 - one time view page for anonymous user\n #517 - New feature: Suggest items system\n New feature: Sub-folder inherits of parent folder\n\n2.1.19\n #413 - fix for PHP Parse error: syntax error, unexpected '['\n #447 - fix for PHP Fatal error: Cannot redeclare getBits()\n #442 - problem edit folder\n #399 - Export encrypted passwords (off-line mode)\n #408 - Personal Salt Key changing doesn't work\n #419 - Password complexity not refreshed\n #418 - English translation improvement\n #407 - \"Restricted to\" feature improvement\n #402 - In item list, description is cut with <br />\n #393 - Password input and confirmation field location\n #388 - Unable to move items between folders\n #400 - Extra fields for Item\n #414 - Maintenance mode during upgrade can be disabled\n #389 - Language dropdown not working\n #392 - Check of absolute path for SK.PHP\n #385 - Email not sent ... check your configuration (to be checked)\n #379 - CSV importing not working (to be checked)\n #134 - Login After Session Expires\n #429 - Changed user.psk field to allow NULLs\n #428 : error: iconv(): Detected an illegal character in input string\n #426/#430 : New option to disable information loading in Admin page\n #142 - Google Authenticator implemented\n * Dialogbox not closed when changing folder name\n * Display Item details through Find page error\n\n2.1.18\n #315 - jstree style.css badly referenced\n #314 - Folder is not being deleted\n #320 - Enabling LDAP prevents local admin login\n #317 - server expected extensions are tested\n #318 - Upgrade process badly creates sk.php file\n #348 - Fix for undefined index \"isAdministratedByRole\"\n #350 - Fix for Lock and delete user actions don't refresh page\n #354 - Fix for removing folders\n #359 - Fix for initial user password change complexity check\n #371 - Fix for uploaded files corrupted\n #291 - Fix to support openLDAP / posix style LDAP\n #361 - Option to use login password as SALT key\n * Fix - no possibility to update a Role\n * Fix - editing users by clicking on the fields broken\n * Fix - parse error in database errors log\n * New - requested user password complexity shown when changing password\n * New - option for deactivate client-server encryption (usage of SSL)\n * New - in tree, new counters added (subfolders and items in subfolders numbers)\n * New language added - Catalan\n\n2.1.17\n * New exchange encryption protocol. No key is visible. The channel is\n encrypted at start of session.\n * HTTPS connection can be activated (be carefull, you need a certificate)\n * Change Users passwords encryption\n * Corrected - once clicked on not authorized Item, any Item selection was\n no more possible.\n #283 - Rights on a folder created at root are set.\n #285 - New settings: Anyone can modify option can be activated by default\n #287 - newly created personal folders ar propergated to the group\n #289 - Personal folder name badly constructed\n #270 - Restricted items visible in Find results\n #298 - Protection against bad actions on personal folders\n #299 - User can be explicetly administrated by Managers of specific Roles\n #300 - Personal SK is encrypted in COOKIE\n #301 - Corrected query call error\n #302 - Under \"Views\" users can see items that exist in personal folders\n that have been accessed\n #307 - fclose() statement badly placed\n\n2.1.16\n * #245 - #248 - #249 - #265 - #266 - #267 - #268 - #273\n * #277: Change personal saltkey error\n\n2.1.15\n * list of bugs corrected: #242 - #254 - #244 - #247 - #256 - #250 - #254 - #248\n   #243 - #252 - #232 - #240 - #260 - #259 - #262 - #251 - #236\n * MySQL hashing => todo\n * CSV importation\n\n2.1.14\n * list of bugs corrected: #238 - #235 - #239 - #203 - #201 - #233 - #226 - #236\n   #228 - #189 - #234 - #225 - #239 - #194 - #86\n * Corrected bug for sending emails\n * Different small corrections\n\n2.1.13\n * Code improvement for PSR compliance\n * jQueryUI updated to v1.9\n * Cleanup unused files\n * #207: Managers can only see the Roles they are allowed to.\n * #190, #192, #199, #202, #196, #204, #191, #214 corrected\n * Correction: taking into account user \"can create at root level\" setting\n * Added: saltkey is exported in a unique file that should be moved outside\n   \"www\" server scope.\n * Added: 2-factors authentication\n * Added: new check when Role creation\n * Added: new check for database query error\n * Added: Item in edition will lock any other edition\n * Added: New administrator View permitting to view \"Users actually connected\"\n   and \"Tokens taken for Items in edition\"\n * Added: User account contains now Name and Last Name fields\n\n2.1.12\n * #188\n * #185 Started adjusting codebase to follow PSR 1 and PSR 2 based on ecaron\n \t\twork (thank you)\n\n2.1.11\n * #184 - bug correction\n\n2.1.10\n * #161 - #100 - #175\n * #163 Personal saltkey duration based on cookie (under option)\n * share item -> manage error when email not sent\n * Improved/corrected export CSV and PDF\n * Correction: During upgrade, languages table is wrong\n * Personal Saltkey is stored in cookie (new admin setting)\n * Emails settings are moved to admin settings page (no more in settings.php)\n * Files folder is now a setting (to improve security)\n * Exported PDF is encrypted (contributor: Jay2k1)\n * #168 Add description field in PDF\n * #174 User creation and modification log\n\n2.1.9\n * #126-#132-#130-#131-#139-#129-#141-#146\n * Italian translation\n * Find page - focus in search box (contributor: Jay2k1)\n\n2.1.8\n * SF 206\n * #107-#95-#102-#103-#67-#32-#87-#71-#125-#120-#116-#111-#108-#104-#90-\n   #85-#78-#48-#34-#67-#75-#82-#84\n * bug correction cache table\n * view Item details from the Find page\n * CSV export  -> started\n * mail notification when selecting an item\n * share Item by mail\n * add email field in Item form\n * automatic deletion of Item after X opening or after limit date\n * Roles / Folders matrix: Roles passwords complexity shown\n\n2.1.7\n * SF 247 - 248 - 261 - 264 - 265 - 266 - 267\n * 67:\tprotect uploadify library => different file protection added\n * protect Downloadfile.php\n * SF228: reset personal saltkey (purge personal items)\n * SF262: copy of item is in log\n * old password in log was badly encoded\n * item copy from search page corrected\n * some rights checks added before action\n * email send to new created user\n\n2.1.6\n * #59: settings.php email setting errors\n * #67: Protected upload file\n * added email notification for user requiering an access to a restricted item.\n * 264:\tFeature Request: Password History\n\n2.1.5\n* #56: Temporary solution for keeping old ADMIN profile rights\n\n2.1.4\n* Corrections: SF237, SF240, SF243 , #29, #25,  #32 , #36 , #37 , #39 , #40\n\tSF257, SF259, SF239, #41, #40, #51\n* Improvements:\n\tSF232\n\tSF231:\tHow to Restrict Admin from Viewing items\n\t#31: new setting option for dynamic list\n\t#27: new subfolders only associated to the same roles as the parent folder\n\t#33: folder management in items page\n\tChanging SALT key from admin pages\n\n2.1.3\n* upgrade improvement in case of upgrading from 1.x version.\n\n2.1.2\n* improved upgrade connection errors and automatic credentials import\n* Corrections: #4, #7, 236\n\nv2.1.1\n* 2 bugs correction\n\nv2.1\n* Licence has changed to GNU AFFERO GPL 3.0\n* 203 - password complexity on Roles\n* 121 - Default language can be set + user language stored in DB\n* Encrypt old passwords in LOG_ITEMS table\n* started CRON activity for emails sending\n* new option: send email to Admins when users get connected\n* \"Restricted to\" field not viewable to everyone\n* add an icon for hide/show passwords in clear text (toggle button)\n", "<?php\n/**\n *\n * @file          items.import.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('./sources/SecureHandler.php');\nsession_start();\nif ((!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])) &&\n    $_GET['key'] != $_SESSION['key']\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"home\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// connect to the server\n//load main functions needed\nrequire_once 'sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\necho '\n<input type=\"hidden\" id=\"folder_id_selected\" value=\"', isset($_GET[\"folder_id\"]) ? filter_var(intval($_GET[\"folder_id\"]), FILTER_SANITIZE_NUMBER_INT) : '', '\" />\n<input type=\"hidden\" id=\"import_user_token\" value=\"\" />\n<div id=\"import_tabs\">\n    <ul>\n        <li><a href=\"#tabs-1\">CSV</a></li>\n        <li><a href=\"#tabs-2\">Keepass</a></li>\n    </ul>\n    <!-- TAB1 -->\n    <div id=\"tabs-1\">\n        <!-- show some info -->\n        <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\" id=\"csv_import_info\">\n            <table border=\"0\">\n                <tr>\n                <td valign=\"center\"><span class=\"fa fa-info-circle fa-2x\"></span>&nbsp;</td>\n                <td>'.$LANG['csv_import_information'].'</td>\n                </tr>\n            </table>\n        </div>\n        <!-- show input file -->\n        <div id=\"upload_container_csv\">\n            <div id=\"filelist_csv\"></div><br />\n            <a id=\"pickfiles_csv\" href=\"#\">'.$LANG['csv_import_button_text'].'</a>\n        </div>\n\n        <div style=\"display:none;margin-top:10px;\" id=\"div_import_csv_selection\">\n            <div style=\"\">'.$LANG['csv_import_options'].':</div>\n            <div style=\"margin-left:20px;\">\n            <input type=\"checkbox\" id=\"import_csv_anyone_can_modify\" /><label for=\"import_csv_anyone_can_modify\">'.$LANG['import_csv_anyone_can_modify_txt'].'</label><br />\n            <input type=\"checkbox\" id=\"import_csv_anyone_can_modify_in_role\" /><label for=\"import_csv_anyone_can_modify_in_role\">'.$LANG['import_csv_anyone_can_modify_in_role_txt'].'</label>\n            </div>\n            <div style=\"margin-top:10px;\">'.$LANG['csv_import_items_selection'].':</div>\n            <div id=\"import_selection\" style=\"margin:10px 0 0 10px;\"></div>\n        </div>\n    </div>\n    <!-- end tab -->\n\n    <!-- TAB2 -->\n    <div id=\"tabs-2\">\n        <!-- Prepare a list of all folders that the user can choose -->\n        <div style=\"margin:10px 0 5px 0;\" id=\"keypass_import_options\">\n            <label><b>'.$LANG['import_keepass_to_folder'].'</b></label>&nbsp;\n            <select id=\"import_keepass_items_to\" style=\"width:87%; height:35px;\">\n                <option value=\"0\">'.$LANG['root'].'</option>';\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', './includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n$folders = $tree->getDescendants();\n$prevLevel = 0;\n\n// show list of all folders\nforeach ($folders as $t) {\n    if (in_array($t->id, $_SESSION['groupes_visibles'])) {\n        if (is_numeric($t->title)) {\n            $user = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\", $t->title);\n            $t->title = $user['login'];\n            $t->id = $t->id.\"-perso\";\n        }\n        $ident = \"&nbsp;&nbsp;\";\n        for ($x = 1; $x < $t->nlevel; $x++) {\n            $ident .= \"&nbsp;&nbsp;\";\n        }\n        if (isset($_GET['folder_id']) && filter_var($_GET['folder_id'], FILTER_SANITIZE_NUMBER_INT) == $t->id) {\n            $selected = \" selected\";\n        } else {\n            $selected = \"\";\n        }\n        if ($prevLevel < $t->nlevel) {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        } elseif ($prevLevel == $t->nlevel) {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        } else {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        }\n        $prevLevel = $t->nlevel;\n    }\n}\n        echo '\n            </select>\n        </div>\n\n        <!-- upload options -->\n        <div style=\"\">'.$LANG['csv_import_options'].':</div>\n            <div style=\"margin-left:20px;\">\n            <input type=\"checkbox\" id=\"import_kps_anyone_can_modify\" /><label for=\"import_kps_anyone_can_modify\">'.$LANG['import_csv_anyone_can_modify_txt'].'</label><br />\n            <input type=\"checkbox\" id=\"import_kps_anyone_can_modify_in_role\" /><label for=\"import_kps_anyone_can_modify_in_role\">'.$LANG['import_csv_anyone_can_modify_in_role_txt'].'</label>\n        </div>\n\n        <!-- uploader -->\n         <div id=\"upload_container_kp\" style=\"text-align:center;margin-top:10px;\">\n            <div id=\"filelist_kp\"></div><br />\n            <a id=\"pickfiles_kp\" href=\"#\">'.$LANG['keepass_import_button_text'].'</a>\n        </div>\n\n        <div id=\"kp_import_information\" style=\"margin:10px 0 0 10px;\"></div>\n    </div>\n    <!-- end tab -->\n</div>\n\n<div style=\"text-align:center;margin-top:8px; display:none;\" id=\"import_information\"></div>';\n\n?>\n<script type=\"text/javascript\">\n    $(function() {\n        $(\"#import_keepass_items_to\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n        $(\"#import_tabs\").tabs();\n\n        // CSV IMPORT\n        var csv_filename = '';\n        var uploader_csv = new plupload.Uploader({\n            runtimes : \"gears,html5,flash,silverlight,browserplus\",\n            browse_button : \"pickfiles_csv\",\n            container : \"upload_container_csv\",\n            max_file_size : \"10mb\",\n            chunk_size : \"1mb\",\n            unique_names : true,\n            dragdrop : true,\n            multiple_queues : false,\n            multi_selection : false,\n            max_file_count : 1,\n            url : \"sources/upload/upload.files.php\",\n            flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n            silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n            filters : [\n                {title : \"CSV files\", extensions : \"csv\"}\n            ],\n            init: {\n                FilesAdded: function(up, files) {\n                    // generate and save token\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type : \"save_token\",\n                            size : 25,\n                            capital: true,\n                            numeric: true,\n                            ambiguous: true,\n                            reason: \"import_items_from_csv\",\n                            duration: 10\n                        },\n                        function(data) {\n                            $(\"#import_user_token\").val(data[0].token);\n                            up.start();\n                        },\n                        \"json\"\n                    );\n                },\n                BeforeUpload: function (up, file) {\n                    up.settings.multipart_params = {\n                        \"PHPSESSID\":\"<?php echo $_SESSION['user_id']; ?>\",\n                        \"type_upload\":\"import_items_from_csv\",\n                        \"user_token\": $(\"#import_user_token\").val()\n                    };\n                },\n                UploadComplete: function(up, files) {\n                    $.each(files, function(i, file) {\n                        ImportCSV(csv_filename);\n                        up.splice();    // clear the file queue\n                    });\n                }\n            }\n        });\n\n        // Uploader options\n        uploader_csv.bind(\"UploadProgress\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        });\n        uploader_csv.bind(\"Error\", function(up, err) {\n            $(\"#filelist_csv\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n                \", Message: \" + err.message +\n                (err.file ? \", File: \" + err.file.name : \"\") +\n                \"</div>\"\n            );\n            up.splice();    // Clear the file queue\n            up.refresh(); // Reposition Flash/Silverlight\n        });\n        uploader_csv.bind(\"+\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(\"100%\");\n        });\n        uploader_csv.bind('FileUploaded', function(upldr, file, object) {\n            var myData;\n            try {\n                myData = eval(object.response);\n            } catch(err) {\n                myData = eval('(' + object.response + ')');\n            }\n            csv_filename = myData.newfilename;\n        });\n\n        // Load CSV click\n        $(\"#uploadfiles_csv\").click(function(e) {\n            uploader_csv.start();\n            e.preventDefault();\n        });\n        uploader_csv.init();\n\n        //-----------------------------------------------------\n\n        // KEYPASS IMPORT\n        var kp_filename = '';\n        var uploader_kp = new plupload.Uploader({\n            runtimes : \"gears,html5,flash,silverlight,browserplus\",\n            browse_button : \"pickfiles_kp\",\n            container : \"upload_container_kp\",\n            max_file_size : \"10mb\",\n            chunk_size : \"1mb\",\n            unique_names : true,\n            dragdrop : true,\n            multiple_queues : false,\n            multi_selection : false,\n            max_file_count : 1,\n            url : \"sources/upload/upload.files.php\",\n            flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n            silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n            filters : [\n                {title : \"Keypass files\", extensions : \"xml\"}\n            ],\n            init: {\n                FilesAdded: function(up, files) {\n                    // generate and save token\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type : \"save_token\",\n                            size : 25,\n                            capital: true,\n                            numeric: true,\n                            ambiguous: true,\n                            reason: \"import_items_from_keypass\",\n                            duration: 10\n                        },\n                        function(data) {\n                            $(\"#import_user_token\").val(data[0].token);\n                            up.start();\n                        },\n                        \"json\"\n                    );\n                },\n                BeforeUpload: function (up, file) {\n                    $(\"#import_status_ajax_loader\").show();\n                    up.settings.multipart_params = {\n                        \"PHPSESSID\":\"<?php echo $_SESSION['user_id'];?>\",\n                        \"type_upload\":\"import_items_from_keypass\",\n                        \"user_token\": $(\"#import_user_token\").val()\n                    };\n                },\n                UploadComplete: function(up, files) {\n                    ImportKEEPASS(kp_filename);\n                    up.splice();        // clear the file queue\n                }\n            }\n        });\n        // Uploader options\n        uploader_kp.bind(\"UploadProgress\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        });\n        uploader_kp.bind(\"Error\", function(up, err) {\n            $(\"#filelist_kp\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n                \", Message: \" + err.message +\n                (err.file ? \", File: \" + err.file.name : \"\") +\n                \"</div>\"\n            );\n            up.splice();    // clear the file queue\n            up.refresh(); // Reposition Flash/Silverlight\n        });\n        uploader_kp.bind(\"+\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(\"100%\");\n        });\n        uploader_kp.bind('FileUploaded', function(upldr, file, object) {\n            var myData;\n            try {\n                myData = eval(object.response);\n            } catch(err) {\n                myData = eval('(' + object.response + ')');\n            }\n            kp_filename = myData.newfilename;\n        });\n\n        // Load CSV click\n        $(\"#uploadfiles_kp\").click(function(e) {\n            uploader_kp.start();\n            e.preventDefault();\n        });\n        uploader_kp.init();\n    });\n\n    /*\n     * Import Items to Database\n     */\n\n\n    //Permits to upload passwords from CSV file\n    function ImportCSV(file)\n    {\n        $(\"#import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n        $(\"#import_selection\").html(\"\");\n        $(\"#div_import_csv_selection\").hide();\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_file_format_csv\",\n                file        : file,\n                folder_id   : $(\"#folder_id_selected\").val()\n            },\n            function(data) {\n                if (data[0].error == \"bad_structure\") {\n                    $(\"#import_information\").html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['import_error_no_read_possible']; ?>\").show();\n                } else {\n                    $(\"#div_import_csv_selection\").show();\n                    $(\"#import_selection\").html(data[0].output+'<div style=\"text-align:center;margin-top:8px; display:none;\" id=\"csv_import_information\"></div><div style=\"\"><button id=\"but_csv_start\"><?php echo $LANG['import_button']; ?></button></div>');\n                    $(\"#item_all_selection\").click(function() {\n                        if ($(\"#item_all_selection\").prop(\"checked\")) {\n                            $(\"input[class='item_checkbox']:not([disabled='disabled'])\").attr(\"checked\", true);\n                        } else {\n                            $(\"input[class='item_checkbox']:not([disabled='disabled'])\").removeAttr(\"checked\");\n                        }\n                    });\n                    $(\"#but_csv_start\").click(function() {\n                        launchCSVItemsImport();\n                    });\n                    $(\"#import_items_to\").select2({\n                        multiple: false,\n                        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                        /*selectedText: function(numChecked, numTotal, checkedItems){\n                            return $(checkedItems[0]).attr('title') + ' checked';\n                        }*/\n                    });\n                    $(\"button\").button();\n                    $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['import_button']; ?>')\").button(\"disable\");\n                    $(\"#import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                    // Fade out\n                    $(this).delay(1000).queue(function() {\n                        $(\"#import_information\").effect( \"fade\", \"slow\" );\n                        $(this).dequeue();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    //get list of items checked by user\n    function launchCSVItemsImport()\n    {\n        $(\"#csv_import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n        var items = \"\";\n\n        //Get data checked\n        $(\"input[class=item_checkbox]:checked\").each(function() {\n            var elem = $(this).attr(\"id\").split(\"-\");\n            if (items == \"\") items = $(\"#item_to_import_values-\"+elem[1]).val();\n            else items = items + \"@_#sep#_@\" + $(\"#item_to_import_values-\"+elem[1]).val();\n\n        });\n\n        if (items == \"\") {\n            $(\"#csv_import_information\").html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['error_no_selected_folder']; ?>\").attr(\"class\",\"ui-state-error\");\n            // Fade out\n            $(this).delay(1000).queue(function() {\n                $(\"#csv_import_information\").effect( \"fade\", \"slow\" );\n                $(this).dequeue();\n            });\n            return;\n        }\n\n        //Lauchn ajax query that will insert items into DB\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_items\",\n                folder      : $(\"#import_items_to\").val(),\n                data        : prepareExchangedData(items , \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                import_csv_anyone_can_modify    : $(\"#import_csv_anyone_can_modify\").prop(\"checked\"),\n                import_csv_anyone_can_modify_in_role    : $(\"#import_csv_anyone_can_modify_in_role\").prop(\"checked\")\n            },\n            function(data) {\n                //after inserted, disable the checkbox in order to prevent against new insert\n                var elem = data[0].items.split(\";\");\n                for (var i=0; i<elem.length; i++) {\n                    $(\"#item_to_import-\"+elem[i]).attr(\"disabled\", true);\n                    $(\"#item_text-\"+elem[i]).css(\"textDecoration\", \"line-through\");\n                }\n\n                ListerItems($('#hid_cat').val(), \"\", 0)\n\n                $(\"#csv_import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                // Fade out\n                $(this).delay(1000).queue(function() {\n                    $(\"#csv_import_information\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            },\n            \"json\"\n        );\n    }\n\n\n\n    //Permits to upload passwords from KEEPASS file\n    function ImportKEEPASS(file)\n    {\n        $(\"#import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n\n        //check if file has good format\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_file_format_keepass\",\n                file        : file,\n                destination : $(\"#import_keepass_items_to\").val()\n            },\n            function(data) {\n                $(\"#kp_import_information\").html(data[0].message + \"<?php echo '<br><br><b>'.$LANG['alert_page_will_reload'].'</b>'; ?>\");\n                $(\"#import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                // Reload page\n                $(this).delay(2000).queue(function() {\n                    $(\"#import_information\").effect( \"fade\", \"slow\" );\n                    document.location = \"index.php?page=items\";\n                    $(this).dequeue();\n                });\n            },\n            \"json\"\n        );\n    }\n</script>\n", "<?php\n/**\n * @file          items.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n$var['hidden_asterisk'] = '<i class=\"fa fa-eye fa-border fa-sm tip\" title=\"'.$LANG['show_password'].'\"></i>&nbsp;&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>';\n\n// load csrfprotector\n$csrfp_config = include $SETTINGS['cpassman_dir'].'/includes/libraries/csrfp/libs/csrfp.config.php';\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n    var query_in_progress = 0;\n\n    $(document).on('focusin', function(e) {e.stopImmediatePropagation();});\n\n//  Part of Safari 6 OS X fix\n    //  clean up HTML for sending via JSON to PHP code\n    function clean_up_html_safari(input)\n    {\n        //  applies to Safari 6 on OS X only, so check for that\n        user_agent = navigator.userAgent;\n        if (/Mac OS X.+6\\.\\d\\.\\d\\sSafari/.test(user_agent))\n        {\n            // remove strange divs\n            input = input.replace(/<\\/*div.+>\\n/g, '');\n            /**/\n            //  remove other strange tags\n            allowed_tags = '<strong><em><strike><ol><li><ul><a><br>';\n            input = strip_tags(input, allowed_tags);\n\n            //  replace special characters\n            input = input.replace(/(\\r\\n|\\n|\\r)/gm, '<br>')\n                                                .replace(/\\t/g, '')\n                                                .replace(/\\f/g, '')\n                                                .replace(/\\v/g, '')\n                                                .replace(/\\r/g, '');\n        }\n        return input;\n    }/* */\n\n    function AddNewNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function EditNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function DeleteNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).delNode()\n    }\n\n    //FUNCTION mask/unmask passwords characters\n    function ShowPassword(pw)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if ($('#id_pw').html().indexOf(\"fa-asterisk\") != -1) {\n            itemLog(\"item_password_shown\");\n            $('#id_pw').text($('#hid_pw').val());\n        } else {\n            $('#id_pw').html('<?php echo $var[\"hidden_asterisk\"]; ?>');\n        }\n    }\n\n    $(\"#tabs-02\").on(\n        \"change\",\n        \"#pw1\",\n        function() {\n            $('#visible_pw').val($('#pw1').val());\n        }\n    );\n\n    function ShowPasswords_EditForm()\n    {\n        if ($('#edit_visible_pw').is(\":visible\")) {\n            $('#edit_visible_pw').addClass(\"hidden\");\n        } else {\n            $('#edit_visible_pw').show();\n        }\n    }\n\n    $(\"#edit_pw1\").keyup(function() {\n        $(\"#edit_visible_pw\").text( this.value );\n    });\n\n    $(\"#pw1\").keyup(function() {\n        $(\"#visible_pw\").text( this.value );\n    });\n\n\n\n    /**\n     * Open a dialogbox\n     * @access public\n     * @return void\n     **/\n    function OpenDialog(id, modal)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if (modal == \"false\") {\n            $(\"#\"+id).dialog(\"option\", \"modal\", false);\n        } else {\n            $(\"#\"+id).dialog(\"option\", \"modal\", true);\n        }\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n/*\n*\n*/\nfunction LoadTreeNode(node_id)\n{\n\n}\n\n//###########\n//## FUNCTION : Launch the listing of all items of one category\n//###########\nvar requestRunning = false;\nfunction ListerItems(groupe_id, restricted, start, stop_listing_current_folder)\n{\n    var me = $(this);\n    stop_listing_current_folder = stop_listing_current_folder || \"0\";\n\n    // case where we should stop listing the items\n    if ($(\"#items_listing_should_stop\").val() === \"1\") {\n        requestRunning = false;\n        $(\"#items_listing_should_stop\").val(\"0\");\n        return false;\n    }\n\n    if (stop_listing_current_folder === 1) {\n        me.data('requestRunning', false);\n        $(\"#new_listing_characteristics\").val(groupe_id+\",\"+restricted+\",\"+start+\",0\");\n    } else {\n        $(\"#new_listing_characteristics\").val(\"\");\n    }\n\n\n    // prevent launch of similar query in case of doubleclick\n    if (requestRunning === true) {\n        return false;\n    }\n    requestRunning = true;\n\n    $(\"#request_lastItem, #selected_items\").val(\"\");\n\n    if (groupe_id != undefined) {\n        //refreshTree(groupe_id);\n        if (query_in_progress != 0 && query_in_progress != groupe_id) {\n            request.abort();    //kill previous query if needed\n        }\n        query_in_progress = groupe_id;\n        //LoadingPage();\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        if (start == 0) {\n            //clean form\n            $('#id_label, #id_pw, #id_email, #id_url, #id_desc, #id_login, #id_info, #id_restricted_to, #id_files, #id_tags, #id_kbs, #item_extra_info, #item_viewed_x_times').html(\"\");\n            $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n        }\n        $(\"#items_list\").css(\"display\", \"\");\n\n        $(\"#hid_cat\").val(groupe_id);\n        if ($(\".tr_fields\") != undefined) $(\".tr_fields, .newItemCat, .editItemCat\").addClass(\"hidden\");\n\n        //Disable menu buttons\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n\n        $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG[\"opening_folder\"]); ?>');\n\n        //ajax query\n        request = $.post(\"sources/items.queries.php\",\n            {\n                type        : \"lister_items_groupe\",\n                id          : groupe_id,\n                restricted  : restricted,\n                start       : start,\n                uniqueLoadData : $(\"#uniqueLoadData\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\",\n                nb_items_to_display_once : $(\"#nb_items_to_display_once\").val()\n            },\n            function(data) {\n                if (data == \"Hacking attempt...\") {\n                    alert(\"Hacking attempt...\");\n                    return false;\n                }\n                //get data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                // reset doubleclick prevention\n                requestRunning = false;\n\n                // manage not allowed\n                if (data.error == \"not_allowed\") {\n                   $(\"#div_dialog_message_text\").html(data.error_text);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n                   $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;Error');\n                   $(\"#items_list_loader\").addClass(\"hidden\");\n                   return false;\n                }\n\n                // to be done only in 1st list load\n                if (data.list_to_be_continued === \"end\") {\n                    $(\"#pf_selected\").val(data.IsPersonalFolder);\n\n                    // display path of folders\n                    if (data.arborescence != undefined) {\n                        var path_maxlength = 420;\n                        if ($(\"#path_fontsize\").val() != \"\") $(\"#items_path_var\").css('font-size', $(\"#path_fontsize\").val());\n                        if (data.IsPersonalFolder === 0) {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;' + data.arborescence);\n                        } else {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG['personal_folder']); ?>&nbsp;:&nbsp;' + data.arborescence);\n                        }\n                        var path_levels = data.arborescence.split('&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;').length;\n                        if ($(\"#items_path_var\").width() > path_maxlength) {\n                            $(\"#path_fontsize\").val($(\"#items_path_var\").css('font-size'));\n                            // start reducing size of font\n                            $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size'))-1);\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels < 2) {\n                                while ($(\"#items_path_var\").width() > path_maxlength) {\n                                    $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size')) - 1);\n                                }\n                            }\n\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels >= 2) {\n                                // only take first and last\n                                var nb = 1;\n                                var totalPathLength = occupedWidth = 0;\n                                $(\".path_element\").each(function () {\n                                    totalPathLength += $(this).width();\n                                    if (nb != 1 && nb != (path_levels-1) && nb != path_levels) {\n                                        $(this).html(\"<span class='tip' title='\"+$(this).html()+\"'>...</span>\");\n                                    } else if (nb == path_levels) {\n                                        // next condition occurs if lasst folder name is too long\n                                        if (totalPathLength > path_maxlength) {\n                                            var lastTxt = $(this).html();\n                                            while ($(this).width() > (path_maxlength - occupedWidth)) {\n                                                lastTxt = lastTxt.slice(0, -1);\n                                                $(this).html(lastTxt);\n                                            }\n                                            $(this).html(lastTxt+\"...\");\n                                        }\n                                    }\n                                    occupedWidth += $(this).width()+15; // 15 pixels corresponds to the small right triangle\n                                    nb++;\n                                });\n                            }\n                        }\n                    } else {\n                        $(\"#items_path_var\").html('');\n                    }\n\n                    // store the categories to be displayed\n                    if (data.displayCategories !== undefined) {\n                        $(\"#display_categories\").val(data.displayCategories);\n                    }\n\n                    // store type of access on folder\n                    $(\"#access_level\").val(data.access_level);\n\n                    // warn about a required change of personal SK\n                    if ($(\"#personal_upgrade_needed\").val() == \"1\" && data.recherche_group_pf === 1) {\n                        $(\"#dialog_upgrade_personal_passwords\").dialog(\"open\");\n                    }\n\n                    $(\"#items_loading_progress\").remove();\n\n                    // show correct fodler in Tree\n                    $(\"#jstree\").jstree(\"deselect_all\");\n                    $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n                } else {\n                    $(\"#uniqueLoadData\").val(data.uniqueLoadData);\n                    if ($(\"#items_loading_progress\").length == 0) {\n                        $(\"#items_list_loader\").after('<span id=\"items_loading_progress\">' + Math.round(data.next_start*100/data.counter_full, 0) + '%</span>');\n                    } else {\n                        $(\"#items_loading_progress\").html(Math.round(data.next_start*100/data.counter_full, 0) + '%');\n                    }\n                }\n\n\n                if (data.array_items == \"\" && data.items_count == \"0\") {\n                    $(\"#items_list\").html('<div style=\"text-align:center;margin-top:30px;\"><b><i class=\"fa fa-info-circle\"></i>&nbsp;<?php echo addslashes($LANG['no_item_to_display']); ?></b></div>');\n                }\n\n                if (data.error == \"is_pf_but_no_saltkey\") {\n                    //warn user about his saltkey\n                    $(\"#item_details_no_personal_saltkey\").show();\n                    $(\"#item_details_ok, #item_details_nok\").addClass(\"hidden\");\n\n                    $('#menu_button_add_item').prop('disabled', 'true');\n                    $(\"#items_list_loader, #div_loading\").addClass(\"hidden\");\n                } else if (data.error == \"not_authorized\" || data.access_level === \"\") {\n                    //warn user\n                    $(\"#hid_cat\").val(\"\");\n                    //$(\"#menu_button_copy_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group, #menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_history, #menu_button_share, #menu_button_otv\").prop('disabled', 'true');\n                    $(\"#item_details_nok\").removeClass(\"hidden\");\n                    $(\"#item_details_ok, #item_details_no_personal_saltkey\").addClass(\"hidden\");\n                    $(\"#items_list_loader\").addClass(\"hidden\");\n                } else if (($(\"#user_is_read_only\").val() == 1 && data.recherche_group_pf == 0) || data.access_level == 1) {\n                    //readonly user\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $(\"#more_items\").remove();\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") !== undefined && data.displayCategories !== undefined && data.displayCategories !== \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                } else {\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    //Display items\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $('#complexite_groupe').val(data.folder_complexity);\n                    $('#bloquer_creation_complexite').val(data.bloquer_creation_complexite);\n                    $('#bloquer_modification_complexite').val(data.bloquer_modification_complexite);\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") != undefined && data.displayCategories !== undefined && data.displayCategories != \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    //If no data then empty\n                    if (data.array_items != null) {\n                        $(\".item_draggable\").draggable({\n                            handle: '.grippy',\n                            cursor: \"move\",\n                            opacity: 0.4,\n                            appendTo: 'body',\n                            stop: function(event, ui) {\n                                $(this).removeClass(\"ui-state-highlight\");\n                            },\n                            start: function(event, ui) {\n                                $(this).addClass(\"ui-state-highlight\");\n                            },\n                            helper: function(event) {\n                                return $(\"<div class='ui-widget-header' id='drop_helper'>\"+\"<?php echo addslashes($LANG['drag_drop_helper']); ?>\"+\"</div>\");\n                            }\n                        });\n                        $(\".folder\").droppable({\n                            hoverClass: \"ui-state-error\",\n                            tolerance: 'pointer',\n                            drop: function(event, ui) {\n                                ui.draggable.addClass(\"hidden\");\n                                LoadingPage();\n                                //move item\n                                $.post(\n                                    \"sources/items.queries.php\",\n                                    {\n                                        type      : \"move_item\",\n                                        item_id   : ui.draggable.attr(\"id\"),\n                                        folder_id : $(this).attr(\"id\").substring(4),\n                                        key       : \"<?php echo $_SESSION['key']; ?>\"\n                                    },\n                                    function(data) {\n                                        //increment / decrement number of items in folders\n                                        $(\"#itcount_\"+data[0].from_folder).text(Math.floor($(\"#itcount_\"+data[0].from_folder).text())-1);\n                                        $(\"#itcount_\"+data[0].to_folder).text(Math.floor($(\"#itcount_\"+data[0].to_folder).text())+1);\n                                        $(\"#id_label, #item_viewed_x_times, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to, #id_tags, #id_kbs\").html(\"\");\n                                        LoadingPage();\n                                        displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n                                    },\n                                    \"json\"\n                               );\n                            }\n                        });\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                }\n            }\n        );\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem+\"pw1\").show().focus();\n\n    //show ajax image\n    $(\"#\"+elem+\"pw_wait\").removeClass(\"hidden\");\n\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size      : $(\"#\"+elem + 'pw_size').val(),\n            numerals      : $(\"#\"+elem + 'pw_numerics').prop(\"checked\"),\n            capitalize      : $(\"#\"+elem + 'pw_maj').prop(\"checked\"),\n            symbols      : $(\"#\"+elem + 'pw_symbols').prop(\"checked\"),\n            secure  : $(\"#\"+elem + 'pw_secure').prop(\"checked\"),\n            elem      : elem,\n            force      : \"false\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n               if (data.error == \"true\") {\n                   $(\"#div_dialog_message_text\").html(data.error_msg);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n               } else {\n                $(\"#\"+elem+\"visible_pw\").text(data.key);\n                   $(\"#\"+elem+\"pw1, #\"+elem+\"pw2\").val(data.key);\n                $(\"#\"+elem+\"pw1\").focus();\n               }\n            //$(\"#\"+elem+\"pw1\").show().blur();\n            $(\"#\"+elem+\"pw_wait\").addClass(\"hidden\");\n        }\n   );\n}\n\nfunction pwCopy(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem + 'pw2').val($(\"#\"+elem + 'pw1').val());\n}\n\nfunction catSelected(val)\n{\n    $(\"#hid_cat\").val(val);\n}\n\n/**\n* Get Item complexity\n*/\nfunction RecupComplexite(val, edit, context)\n{\n    context = context || \"\";    // make context optional\n\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"get_complixity_level\",\n            groupe  : val,\n            context : context,\n            item_id : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            funcReturned = 1;\n            if (data.error == undefined || data.error == 0) {\n                $(\"#complexite_groupe\").val(data.val);\n                $(\"#selected_folder_is_personal\").val(data.personal);\n                if (edit == 1) {\n                    $(\"#edit_complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#edit_afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                } else {\n                    $(\"#complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                }\n            } else if (data.error == \"no_edition_possible\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n                funcReturned = 0;\n            } else if (data.error == \"user_is_readonly\") {\n                displayMessage(data.message);\n                funcReturned = 0;\n            } else if (data.error == \"no_folder_creation_possible\" || data.error == \"no_folder_edition_possible\"  || data.error == \"delete_folder\") {\n                displayMessage('<i class=\"fa fa-warning\"></i>&nbsp;' + data.error_msg);\n                $(\"#div_loading\").addClass(\"hidden\");\n                funcReturned = 0;\n            } else {\n                $(\"#div_formulaire_edition_item\").dialog(\"close\");\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\n/**\n* Check if Item has been changed since loaded\n*/\nfunction CheckIfItemChanged()\n{\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type        : \"is_item_changed\",\n            timestamp   : $(\"#timestamp_item_displayed\").val(),\n            item_id     : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            if (data.modified == 1) {\n                funcReturned = 1;\n            } else {\n                funcReturned = 0;\n            }\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\nfunction AjouterItem()\n{\n    $(\"#div_formulaire_saisi_info\").show().html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\");\n    LoadingPage();\n    $(\"#error_detected\").val('');   //Refresh error foolowup\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|;|:|!|=|+|-|*|/|#|\\\"|'|&|]\");\n\n    //Complete url format\n    var url = $(\"#url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($(\"#label\").val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#categorie\").val() == \"na\") erreur = \"<?php echo addslashes($LANG['error_group']); ?>\";\n    else if ($(\"#pw1\").val() != $(\"#pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#enable_delete_after_consultation\").is(':checked') && (($(\"#times_before_deletion\").val() < 1 && $(\"#deletion_after_date\").val() == \"\") || ($(\"#times_before_deletion\").val() == \"\" && $(\"#deletion_after_date\").val() == \"\"))) erreur = \"<?php echo addslashes($LANG['error_times_before_deletion']); ?>\";\n    else if ($(\"#item_tags\").val() != \"\" && reg.test($(\"#item_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if (($('#recherche_group_pf').val() === \"1\" || $('#selected_folder_is_personal').val() === \"1\") && $('#personal_sk_set').val() === \"0\") {\n        erreur = \"<?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?>\";\n    } else{\n        //Check pw complexity level\n        if (\n            ($(\"#bloquer_creation_complexite\").val() == 0 && parseInt($(\"#mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val()))\n            ||\n            ($(\"#bloquer_creation_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            //Manage restrictions\n            var restriction = restriction_role = \"\";\n            $(\"#restricted_to_list option:selected\").each(function () {\n                //check if it's a role\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val().substring(5) + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n            //Manage diffusion list\n            var diffusion = \"\";\n            $(\"#annonce_liste_destinataires option:selected\").each(function () {\n                diffusion += $(this).val() + \";\";\n            });\n            if (diffusion == \";\") diffusion = \"\";\n\n            //Manage description\n            if (CKEDITOR.instances && CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances && CKEDITOR.instances[\"desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#selected_folder_is_personal').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n            //To be deleted\n            if ($(\"#enable_delete_after_consultation\").is(':checked') && ($(\"#times_before_deletion\").val() >= 1 || $(\"#deletion_after_date\").val() != \"\")) {\n                if ($(\"#times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#times_before_deletion\").val();\n                } else if ($(\"#deletion_after_date\").val() != \"\") {\n                    var to_be_deleted = $(\"#deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[1] + '~~' + $(this).val() + '~~' + id[2];\n                else fields += '_|_' + id[1] + '~~' + $(this).val() + '~~' + id[2];\n            });\n\n            // check if a folder is selected\n            var selected_folder;\n            if ($('#categorie').val() === \"\" || $('#categorie').val() === null) {\n                selected_folder = $('#hid_cat').val();\n            } else {\n                selected_folder = $('#categorie').val();\n            }\n\n            //prepare data\n            var data = {\"pw\": sanitizeString($('#pw1').val()) , \"label\": sanitizeString($('#label').val()) ,\n                \"login\": sanitizeString($('#item_login').val()) , \"is_pf\": is_pf.toString() ,\n                \"description\": (description) , \"email\": $('#email').val() , \"url\": url , \"categorie\": selected_folder ,\n                \"restricted_to\": restriction , \"restricted_to_roles\": restriction_role ,\n                \"salt_key_set\": $('#personal_sk_set').val() , \"diffusion\": diffusion , \"id\": $('#id_item').val() ,\n                \"anyone_can_modify\": $('#anyone_can_modify:checked').val() , \"tags\": sanitizeString($('#item_tags').val()) ,\n                \"random_id_from_files\": $('#random_id').val() , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#mypassword_complex\").val())};\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"new_item\",\n                    data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n\n                        return;\n                    }\n\n                    //Check errors\n                    if (data.error === \"item_exists\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_item_exists']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Key verification for Query is not correct!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('User not allowed to access this folder!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password could not be correctly encrypted!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_EMPTY\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password is empty!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html(data.msg);\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.new_id != \"\") {\n                        $(\"#new_show_error\").addClass(\"hidden\");\n\n                        //add new line directly in list of items\n                        $(\"#full_items_list\").append(data.new_entry);\n\n                        //Increment counter\n                        $(\"#itcount_\"+$(\"#hid_cat\").val()).text(Math.floor($(\"#itcount_\"+$(\"#hid_cat\").val()).text())+1);\n\n                        // prepare the display of the new item\n                        AfficherDetailsItem(data.new_id);\n\n                        // refresh list of items\n                        ListerItems($('#categorie').val(), \"\", 0)\n\n                        refreshTree($('#categorie').val());\n\n                        //empty form\n                        $(\"#label, #item_login, #email, #url, #pw1, #visible_pw, #pw2, #item_tags, #deletion_after_date, #times_before_deletion, #mypassword_complex\").val(\"\");\n                        CKEDITOR.instances[\"desc\"].setData(\"\");\n\n                        $(\"#item_tabs\").tabs({selected: 0});\n                        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n                        $(\".fields, .item_field, #categorie, #random_id\").val(\"\");\n                        $(\".fields_div, #item_file_queue, #display_title, #visible_pw\").html(\"\");\n\n                        $(\"#div_formulaire_saisi\").dialog('close');\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                    }\n                    $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n                    $(\"#div_loading\").addClass(\"hidden\");\n                }\n           );\n        } else {\n            $('#new_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n    if (erreur != \"\") {\n        $('#new_show_error').html(erreur).show();\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n    }\n}\n\nfunction EditerItem()\n{\n    $(\"#div_formulaire_edition_item_info\").html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\").show();\n    $(\"#item_detail_zone_loader\").addClass(\"hidden\");\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n    //Complete url format\n    var url = $(\"#edit_url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($('#edit_label').val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#edit_pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#edit_pw1\").val() != $(\"#edit_pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#edit_tags\").val() != \"\" && reg.test($(\"#edit_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if ($(\"#edit_categorie option:selected\").val() == \"\" || typeof  $(\"#edit_categorie option:selected\").val() === \"undefined\")  erreur = \"<?php echo addslashes($LANG['error_no_selected_folder']); ?>\";\n    else{\n        //Check pw complexity level\n        if ((\n                $(\"#bloquer_modification_complexite\").val() == 0 &&\n                parseInt($(\"#edit_mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val())\n           )\n            ||\n            ($(\"#bloquer_modification_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            LoadingPage();  //afficher image de chargement\n            var annonce = 0;\n            if ($('#edit_annonce').attr('checked')) annonce = 1;\n            $(\"#item_detail_zone_loader\").show();\n\n\n            //Manage restriction\n            var restriction = restriction_role = \"\";\n            $(\"#edit_restricted_to_list option:selected\").each(function () {\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val() + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n\n            //Manage diffusion list\n            var myselect = document.getElementById('edit_annonce_liste_destinataires');\n            var diffusion = \"\";\n            for (var loop=0; loop < myselect.options.length; loop++) {\n                if (myselect.options[loop].selected === true) diffusion = diffusion + myselect.options[loop].value + \";\";\n            }\n            if (diffusion == \";\") {\n                diffusion = \"\";\n            }\n\n            //Manage description\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"edit_desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#edit_desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n          //To be deleted\n            if ($(\"#edit_enable_delete_after_consultation\").is(':checked')\n                && ($(\"#edit_times_before_deletion\").val() >= 1 || $(\"#edit_deletion_after_date\").val() != \"\")\n            ) {\n                if ($(\"#edit_times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#edit_times_before_deletion\").val();\n                    //var to_be_deleted_after_date = \"\";\n                } else if ($(\"#edit_deletion_after_date\").val() != \"\") {\n                    //var to_be_deleted = \"0\";\n                    var to_be_deleted = $(\"#edit_deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n                //var to_be_deleted_after_date = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.edit_item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[2] + '~~' + $(this).val();\n                else fields += '_|_' + id[2] + '~~' + $(this).val();\n            });\n\n              //prepare data\n            var data = {\"pw\": sanitizeString($('#edit_pw1').val()) , \"label\": sanitizeString($('#edit_label').val()) ,\n                \"login\": sanitizeString($('#edit_item_login').val()) , \"is_pf\": is_pf ,\n                \"description\": description , \"email\": $('#edit_email').val() , \"url\": url ,\n                \"categorie\": $(\"#edit_categorie option:selected\").val() , \"restricted_to\": restriction ,\n                \"restricted_to_roles\": restriction_role , \"salt_key_set\": $('#personal_sk_set').val() ,\n                \"is_pf\": $('#recherche_group_pf').val() , \"annonce\": annonce , \"diffusion\": diffusion ,\n                \"id\": $('#id_item').val() , \"anyone_can_modify\": $('#edit_anyone_can_modify:checked').val() ,\n                \"tags\": sanitizeString($('#edit_tags').val()) , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#edit_mypassword_complex\").val())};\n\n            //send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"update_item\",\n                    data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\")\n                            .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                            data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n                        return;\n                    }\n\n                    //check if format error\n                    if (data.error === \"ERR_JSON_FORMAT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html(data.error + ' ERROR (JSON is broken)!!!!!')\n                            .show();\n                    } else if (data.error === \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Key verification for Query is not correct!')\n                            .show();\n                        LoadingPage();\n                    }else if (data.error === \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Item password could not be correctly encrypted!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_pw_too_long']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_NOT_ALLOWED_TO_EDIT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\")\n                            .html('User not allowed to edit this Item!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error !== \"\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else {\n                        //refresh item in list\n                        $(\"#fileclass\"+data.id).text($('#edit_label').val());\n\n                        //Refresh form\n                        $(\"#id_label\").text($('#edit_label').val());\n                        //$(\"#id_pw\").text($('#edit_pw1').val());\n                        $(\"#id_email\").html($('#edit_email').val());\n                        $(\"#id_url\").html($('#edit_url').val().escapeHTML());\n                        $(\"#id_desc\").html(description);\n                        $(\"#id_login\").html($('#edit_item_login').val());\n                        $(\"#id_restricted_to\").html(data.list_of_restricted);\n                        $(\"#id_tags\").html(data.tags);\n                        $(\"#id_files\").html(unsanitizeString(data.files));\n                        $(\"#item_edit_list_files\").html(data.files_edit);\n                        $(\"#id_info\").html(unsanitizeString(data.history));\n                        $('#id_pw').html('<?php echo $var['hidden_asterisk']; ?>');\n\n                        //Refresh hidden data\n                        $(\"#hid_label\").val($('#edit_label').val());\n                        $(\"#hid_pw\").val($('#edit_pw1').val());\n                        $(\"#hid_email\").val($('#edit_email').val());\n                        $(\"#hid_url\").val($('#edit_url').val().escapeHTML());\n                        $(\"#hid_desc\").val(description);\n                        $(\"#hid_login\").val($('#edit_item_login').val());\n                        $(\"#hid_restricted_to\").val(restriction);\n                        $(\"#hid_restricted_to_roles\").val(restriction_role);\n                        $(\"#hid_tags\").val($('#edit_tags').val());\n                        $(\"#hid_files\").val(data.files);\n                        /*$(\"#id_categorie\").html(data.id_tree);\n                        $(\"#id_item\").html(data.id);*/\n\n                        // refresh fields\n                        if ($('.edit_item_field').val() != undefined) {\n                            $('.tr_fields').addClass(\"hidden\");\n                            $('.edit_item_field').each(function(i){\n                                id = $(this).attr('id').split('_');\n                                if ($(this).val() !== \"\") {\n                                    // copy data from form to Item Div\n                                    $('#id_field_' + id[2]).html($(this).val());\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val($(this).val());\n                                    $('#cf_tr_' + id[2] + ', .editItemCatName_' + id[3] + ', #tr_catfield_' + id[3]).show()\n                                } else {\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val('');\n                                }\n                                // clear form\n                                $(this).val(\"\");\n                            });\n                        }\n                        $(\"#edit_display_title, #edit_visible_pw\").html(\"\");\n\n                        //calling image lightbox when clicking on link\n                        $(\"a.image_dialog\").click(function(event) {\n                            event.preventDefault();\n                            PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n                        });\n\n                        //Change title in \"last items list\"\n                        $(\"#last_items_\"+data.id).text($('#edit_label').val());\n\n                        //Clear upload queue\n                        $('#item_edit_file_queue').html('');\n                        //Select 1st tab\n                        $(\"#item_edit_tabs\").tabs({ selected: 0 });\n\n                        //if reload page is needed\n                        if (data.reload_page == \"1\") {\n                            //reload list\n                            ListerItems($('#hid_cat').val(), \"\", 0)\n                            //increment / decrement number of items in folders\n                            $(\"#itcount_\"+$('#hid_cat').val()).text(Math.floor($(\"#itcount_\"+$('#hid_cat').val()).text())-1);\n                            $(\"#itcount_\"+$('#edit_categorie').val()).text(Math.floor($(\"#itcount_\"+$('#edit_categorie').val()).text())+1);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        //Prepare clipboard copies\n                        if ($('#edit_pw1').val() != \"\") {\n                            new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_pw1').val());\n                                }\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if ($('#edit_item_login').val() != \"\") {\n                            var clipboard_elogin = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_item_login').val());\n                                }\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n\n\n                        $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //Close dialogbox\n                        $(\"#div_formulaire_edition_item\").dialog('close');\n                        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //hide loader\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                }\n           );\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : $('#id_item').val(),\n                    stat_action                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n\n        } else {\n            $('#edit_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n\n    if (erreur != \"\") {\n        $('#edit_show_error').html(erreur).show();\n        $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n    }\n}\n\nfunction AddNewFolder()\n{\n    if ($(\"#new_rep_titre\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_groupe\").val() === \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_noparent']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_complexite\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\").removeClass(\"hidden\");\n    } else if (/^\\d+$/.test($(\"#new_rep_titre\").val())) {\n        // check if folder title contains only numbers\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#user_ongoing_action\").val() == \"\") {\n        $(\"#add_folder_loader\").removeClass(\"hidden\");\n        $(\"#user_ongoing_action\").val(\"true\");\n        $(\"#new_rep_show_error\").addClass(\"hidden\");\n        if ($(\"#new_rep_role\").val() == undefined) {\n            role_id = \"<?php echo $_SESSION['fonction_id']; ?>\";\n        } else {\n            role_id = $(\"#new_rep_role\").val();\n        }\n\n        //prepare data\n        var data = {\"title\": sanitizeString($('#new_rep_titre').val()),\n            \"complexity\": sanitizeString($('#new_rep_complexite').val()), \"is_pf\": $('#pf_selected').val(),\n            \"parent_id\": $(\"#new_rep_groupe option:selected\").val(), \"renewal_period\":\"0\"};\n\n        //send query\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type   : \"add_folder\",\n                data   : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key    : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#user_ongoing_action\").val(\"\");\n                //Check errors\n                if (data[0].error == \"error_group_exist\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_exist']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_html_codes\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_html_codes']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_title_only_with_numbers\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error != \"\") {\n                    $(\"#new_rep_show_error\").html(data[0].error).removeClass(\"hidden\");\n                } else {\n                    $(\"#new_rep_titre\").val(\"\");\n                    refreshTree(data[0].newid);\n                    $(\"#div_ajout_rep\").dialog(\"close\");\n                }\n                $(\"#add_folder_loader\").addClass(\"hidden\");\n            },\n            \"json\"\n           );\n    }\n}\n\n\nfunction SupprimerFolder()\n{\n    if ($(\"#delete_rep_groupe_validate\").is(':checked') === false) {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['please_confirm']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe\").val() === \"0\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_group']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe option:selected\").text() === \"<?php echo $_SESSION['login']; ?>\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else {\n        $(\"#del_folder_loader\").show();\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type    : \"delete_folder\",\n                id      : $(\"#delete_rep_groupe\").val(),\n                key        : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#del_folder_loader\").addClass(\"hidden\");\n\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#div_loading\").addClass(\"hidden\");\n                    $(\"#div_dialog_message_text\")\n                        .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                        data);\n                    $(\"#div_dialog_message\").dialog(\"open\");\n                    return;\n                }\n\n                if (data.error !== \"\") {\n                    if (data.error === \"ERR_SUB_FOLDERS_EXIST\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_cannot_delete_subfolders_exist']); ?>\").show(1).delay(3000).fadeOut(1000);\n\n                    } else if (data.error === \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(3000).fadeOut(1000);\n                    }\n                } else {\n                    refreshTree(data.parent_id);\n                    ListerItems(data.parent_id,'', 0);\n                    $(\"#div_supprimer_rep\").dialog(\"close\");\n                }\n            }\n       );\n    }\n}\n\nfunction AfficherDetailsItem(id, salt_key_required, expired_item, restricted, display, open_edit, reload, id_tree)\n{\n    // If a request is already launched, then kill new.\n    if ($(\"#request_ongoing\").val() !== \"\") {\n        request.abort();\n        return;\n    }\n    id_tree = id_tree || \"\";\n    salt_key_required = salt_key_required || 0;\n    id_tree = id_tree || \"\";\n    id_tree = id_tree || \"\";\n\n    // Store status query running\n    $(\"#request_ongoing\").val(\"1\");\n\n    // If opening new item, reinit hidden fields\n    if ($(\"#request_lastItem\").val() != id) {\n        $(\"#request_lastItem\").val(\"\");\n        $(\"#item_editable\").val(\"\");\n    }\n\n    // Don't show details\n    if (display === \"no_display\") {\n        $(\"#item_details_nok\").removeClass(\"hidden\");\n        $(\"#item_details_ok\").addClass(\"hidden\");\n        $(\"#item_details_expired\").addClass(\"hidden\");\n        $(\"#item_details_expired_full\").addClass(\"hidden\");\n        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_url, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n    if ($(\"#is_admin\").val() == \"1\") {\n        $('#menu_button_edit_item,#menu_button_del_item,#menu_button_copy_item').attr('disabled', 'disabled');\n    }\n\n    if ($(\"#edit_restricted_to\") != undefined) {\n        $(\"#edit_restricted_to\").val(\"\");\n    }\n\n    // Check if personal SK is needed and set\n    if (($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"0\") && salt_key_required === \"1\") {\n        $(\"#set_personal_saltkey_warning\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg'></span>&nbsp;</span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?></div>\").show(1).delay(2500).fadeOut(1000);\n        $('#div_set_personal_saltkey').dialog('open');\n\n        //$(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg mi-red'></span>&nbsp;<\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        $(\"#div_loading\").addClass(\"hidden\");\n        //$(\"#div_dialog_message\").dialog(\"open\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    } else if ($('#recherche_group_pf').val() === \"0\" || ($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"1\")) {\n        // Double click\n        if (open_edit == 1 && $(\"#item_editable\").val() == 1 && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            open_edit_item_div(\n                <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === \"1\") {\n    echo 1;\n} else {\n    echo 0;\n}?>\n            );\n        } else if ($(\"#request_lastItem\").val() == id && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            LoadingPage();\n            return;\n        } else {\n            $(\"#timestamp_item_displayed\").val(\"\");\n            var data = {\n                \"id\" : id,\n                \"folder_id\" : $('#hid_cat').val(),\n                \"salt_key_required\" : $('#recherche_group_pf').val(),\n                \"salt_key_set\" : $('#personal_sk_set').val(),\n                \"expired_item\" : expired_item === undefined ? \"\" : expired_item,\n                \"restricted\" : expired_item === undefined ? \"\" : expired_item,\n                \"page\" : \"items\"\n            };\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type : 'show_details_item',\n                    data : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_raw) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data_raw , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data_raw);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error != \"\") {\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data.error);\n                        $(\"#div_dialog_message\").show();\n                    }\n\n                    // reset password shown info\n                    $(\"#pw_shown\").val(\"0\");\n\n                    // show some info on top\n                    if (data.auto_update_pwd_frequency != \"0\") var auto_update_pwd = \"<i class='fa fa-shield tip' title='<?php echo addslashes($LANG['server_auto_update_password_enabled_tip']); ?>'></i>&nbsp;<b>\"+data.auto_update_pwd_frequency+\"</b>&nbsp;|&nbsp;\";\n                    else var auto_update_pwd = \"\";\n                    $(\"#item_viewed_x_times\").html(auto_update_pwd+\"&nbsp;<i class='fa fa-sticky-note-o tip' title='Number of times item was displayed'></i>&nbsp;<b>\"+data.viewed_no+\"</b>\");\n\n                    // Show timestamp\n                    $(\"#timestamp_item_displayed\").val(data.timestamp);\n\n                    //Change the class of this selected item\n                    if ($(\"#selected_items\").val() != \"\") {\n                        $(\"#fileclass\"+$(\"#selected_items\").val()).removeClass(\"fileselected\");\n                    }\n                    $(\"#selected_items\").val(data.id);\n\n                    //Show saltkey\n                    if (data.edit_item_salt_key == \"1\") {\n                        $(\"#edit_item_salt_key\").show();\n                    } else {\n                        $(\"#edit_item_salt_key\").addClass(\"hidden\");\n                    }\n\n                    // clean some not used fields\n                    //$(\"#item_history_log, #edit_past_pwds, #hid_files, #item_edit_list_files\").html(\"\");\n\n                    //Show detail item\n                    if (data.show_detail_option == \"0\") {\n                        $(\"#item_details_ok\").removeClass(\"hidden\");\n                        $(\"#item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }if (data.show_detail_option == \"1\") {\n                        $(\"#item_details_ok, #item_details_expired\").removeClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                    } else if (data.show_detail_option == \"2\") {\n                        $(\"#item_details_ok, #item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }\n                    $(\"#item_details_nok\").addClass(\"hidden\");\n                    $(\"#fileclass\"+data.id).addClass(\"fileselected\");\n                    $(\"item_editable\").val(0);\n\n                    if (data.show_details == \"1\" && data.show_detail_option != \"2\") {\n                        //unprotect data\n                        data.login = unsanitizeString(data.login);\n\n                        $(\"#id_files\").html(\"\");\n\n                        //Display details\n                        $(\"#id_label\").html(data.label);\n                        $(\"#hid_label\").val(unsanitizeString(data.label));\n                        if (data.pw === \"\") {\n                            $(\"#id_pw\").html(\"\");\n                        } else {\n                            $(\"#id_pw\").html('<?php echo $var['hidden_asterisk']; ?>');\n                        }\n                        $(\"#hid_pw\").val(unsanitizeString(data.pw));\n                        if (data.url != \"\") {\n                            $(\"#id_url\").html(data.url+data.link);\n                            $(\"#hid_url\").val(data.url);\n                        } else {\n                            $(\"#id_url\").html(\"\");\n                            $(\"#hid_url\").val(\"\");\n                        }\n                        $(\"#id_desc\").html(data.description);\n                        $(\"#hid_desc\").val(data.description);\n                        $(\"#id_login\").html(data.login);\n                        $(\"#hid_login\").val(data.login);\n                        $(\"#id_email\").html(data.email);\n                        $(\"#hid_email\").val(data.email);\n                        //prepare nice list of users / groups\n                        var tmp_arr = data.id_restricted_to.split(\";\");\n                        var html_users = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_users += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-user fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        var tmp_arr = data.id_restricted_to_roles.split(\";\");\n                        var html_groups = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_groups += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-group fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        $(\"#id_restricted_to\").html(\n                            html_users+\n                            html_groups\n                        );\n                        $(\"#hid_restricted_to\").val(data.id_restricted_to);\n                        $(\"#hid_restricted_to_roles\").val(data.id_restricted_to_roles);\n                        $(\"#id_tags\").html(data.tags);\n                        // extract real tags list\n                        var item_tag = \"\";\n                        $(\"span.item_tag\").each(function(){\n                            if (item_tag == \"\") item_tag = $(this).text();\n                            else item_tag += \" \"+$(this).text();\n                        });\n                        $(\"#hid_tags\").val(item_tag);\n                        $(\"#hid_anyone_can_modify\").val(data.anyone_can_modify);\n                        $(\"#id_categorie\").val(data.folder);\n                        $(\"#id_item\").val(data.id);\n                        $(\"#id_kbs\").html(data.links_to_kbs);\n                        $(\".tip\").tooltipster({\n                            maxWidth: 400,\n                            contentAsHTML: true,\n                            multiple: true\n                        });\n\n                        // ---\n                        // Show Field values\n                        $(\".fields\").val(\"\");\n                        $(\".fields_div\").html(\"\");\n                        // If no CF then hide\n                        if (data.fields === \"\") {\n                            $(\".tr_fields\").addClass(\"hidden\");\n                        } else {\n                            $(\".tr_cf, .tr_fields\").removeClass(\"hidden\");\n                            var liste = data.fields.split('_|_');\n                            for (var i=0; i<liste.length; i++) {\n                                var field = liste[i].split('~~');\n                                $(\"#cf_tr_\" + field[0] + \", #tr_catfield_\" + field[2]).show();\n                                $('#hid_field_' + field[0] + '_' + field[2]).val(field[1]);\n                                if (field[3] === \"masked\") {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html('<?php echo $var['hidden_asterisk']; ?>');\n                                } else {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html(field[1]);\n                                }\n                            }\n                        }\n\n                        //Anyone can modify button\n                        if (data.anyone_can_modify == \"1\") {\n                            $(\"#edit_anyone_can_modify\").attr('checked', true);\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            $(\"#edit_anyone_can_modify\").attr('checked', false);\n                            $(\"#new_history_entry_form\").addClass(\"hidden\");\n                        }\n\n                        //Show to be deleted in case activated\n                        if (data.to_be_deleted == \"not_enabled\") {\n                            $(\"#edit_to_be_deleted\").addClass(\"hidden\");\n                        } else {\n                            $(\"#edit_to_be_deleted\").show();\n                            if (data.to_be_deleted != \"\") {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",true);\n                                if (data.to_be_deleted_type == 2) {\n                                    $(\"#edit_times_before_deletion\").val(\"\");\n                                    $(\"#edit_deletion_after_date\").val(data.to_be_deleted);\n                                } else {\n                                    $(\"#edit_times_before_deletion\").val(data.to_be_deleted);\n                                    $(\"#edit_deletion_after_date\").val(\"\");\n                                }\n                            } else {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",false);\n                                $(\"#edit_times_before_deletion, #edit_deletion_after_date\").val(\"\");\n                            }\n                        }\n\n                        //manage buttons\n                        if ($(\"#user_is_read_only\").val() == 1) {\n                            $('#menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.user_can_modify == 0) {\n                            $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            //$(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            //$(\"#menu_button_add_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        }\n                        //$(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n\n                        // disable share button for personal folder\n                        if ($(\"#recherche_group_pf\").val() == 1) {\n                            $(\"#menu_button_share, #menu_button_otv\").attr('disabled', 'disabled');\n                        } else {\n                            $(\"#menu_button_share, #menu_button_otv\").prop(\"disabled\", false);\n                        }\n\n                        //Manage to deleted information\n                        if (data.to_be_deleted != 0 && data.to_be_deleted != null && data.to_be_deleted != \"not_enabled\") {\n                            $('#item_extra_info')\n                                .html(\"<b><i class='fa fa-bell-o mi-red'></i></b>&nbsp;\")\n                                .attr(\"title\", \"<?php echo addslashes($LANG['automatic_deletion_activated']); ?>\");\n                            $('#item_extra_info').tooltipster({multiple: true});\n                        } else {\n                            $('#item_extra_info').html(\"\");\n                        }\n\n                        if (data.notification_status == 0 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'true\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        } else if (data.notification_status == 1 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'false\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-red\"></i>&nbsp;');\n                            $('#item_extra_info').html(\"<i><i class=\\'fa fa-bell mi-green\\'></i>&nbsp;<?php echo addslashes($LANG['notify_activated']); ?></i>\");\n                        } else {\n                            $('#menu_button_notify').attr('disabled', 'disabled');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        }\n\n                        //Prepare clipboard copies\n                        if (data.pw != \"\") {\n                            var clipboard_pw = new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return (unsanitizeString(data.pw));\n                                }\n                            });\n                            clipboard_pw.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n                                itemLog(\"item_password_copied\");\n\n                                e.clearSelection();\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if (data.login != \"\") {\n                            var clipboard_login = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return (data.login);\n                                }\n                            });\n                            clipboard_login.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n                        // #525\n                        if (data.url != \"\") {\n                            var clipboard_url = new Clipboard(\"#menu_button_copy_url\", {\n                                text: function() {\n                                    return unsanitizeString(data.url);\n                                }\n                            });\n                            clipboard_url.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                        }\n\n                        //prepare link to clipboard\n                        var clipboard_link = new Clipboard(\"#menu_button_copy_link\", {\n                            text: function() {\n                                return \"<?php echo $SETTINGS['cpassman_url']; ?>\"+\"/index.php?page=items&group=\"+data.folder+\"&id=\"+data.id;\n                            }\n                        });\n                        clipboard_link.on('success', function(e) {\n                            $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied']); ?>\").show().fadeOut(1000);\n\n                            e.clearSelection();\n                        });\n\n\n                        //set if user can edit\n                        if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            $(\"#item_editable\").val(1);\n                        }\n\n                        //Manage double click\n                        if (open_edit === true && (data.restricted == \"1\" || data.user_can_modify == \"1\")) {\n                            open_edit_item_div(\n                            <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}?>);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        // continue loading data\n                        showDetailsStep2(id, param);\n\n                    } else if (data.show_details === \"1\" && data.show_detail_option === \"2\") {\n                        $(\"#item_details_nok\").addClass(\"hidden\");\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").show();\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    } else {\n                        //Dont show details\n                        $(\"#item_details_nok\").removeClass(\"hidden\");\n                        $(\"#item_details_nok_restriction_list\").html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo addslashes($LANG['author']); ?>: </b>' + data.author + '<br /><b><?php echo addslashes($LANG['restricted_to']); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"SendMail(\\'request_access_to_author\\',\\'' + data.id + ',' + data.id_user + '\\',\\'<?php echo $_SESSION['key']; ?>\\',\\'<?php echo addslashes($LANG['forgot_my_pw_email_sent']); ?>\\')\"><?php echo addslashes($LANG['request_access_ot_item']); ?></a></u></div>');\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                    $(\"#request_ongoing\").val(\"\");\n                }\n           );\n\n            if (id_tree != \"\" && id_tree != $(\"#hid_cat\").val()) {\n                refreshTree(id_tree, \"0\");\n            }\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : id,\n                    scope                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n       }\n    //Store Item id shown\n    $(\"#request_lastItem\").val(id);\n    }\n}\n\n\n/*\n* Loading Item details step 2\n*/\nfunction showDetailsStep2(id, param)\n{\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n        type     : \"showDetailsStep2\",\n        id         : id\n        },\n        function(data) {\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#div_loading\").addClass(\"hidden\");\n                $(\"#request_ongoing\").val(\"\");\n                $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                $(\"#div_dialog_message\").dialog(\"open\");\n\n                return;\n            }\n\n            if (data.error !== \"\") {\n                $(\"#div_dialog_message_text\").html(data.error_text);\n                $(\"#div_dialog_message\").show();\n                return false;\n            }\n\n            $(\"#item_history_log\").html(htmlspecialchars_decode(data.history));\n            $(\"#edit_past_pwds\").attr('title', htmlspecialchars_decode(data.history_of_pwds));\n            $(\"#edit_past_pwds_div\").html(htmlspecialchars_decode(data.history_of_pwds));\n\n            $(\"#id_files\").html(data.files_id);\n            $(\"#hid_files\").val(data.files_id);\n            $(\"#item_edit_list_files\").html(data.files_edit);\n\n            //$(\"#div_last_items\").html(htmlspecialchars_decode(data.div_last_items));\n\n            // function calling image lightbox when clicking on link\n            $(\"a.image_dialog\").click(function(event) {\n                event.preventDefault();\n                PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n            });\n\n            //Set favourites icon\n            if (data.favourite == \"1\") {\n                $(\"#menu_button_add_fav\").attr(\"disabled\",\"disabled\");\n                $(\"#menu_button_del_fav\").prop(\"disabled\", false);\n            } else {\n                $(\"#menu_button_add_fav\").prop(\"disabled\", false);\n                $(\"#menu_button_del_fav\").attr(\"disabled\",\"disabled\");\n            }\n\n            // set indicator if item has change proposal\n            if (parseInt(data.has_change_proposal) > 0) {\n                $(\"#item_extra_info\").prepend('<i class=\"fa fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo addslashes($LANG['item_has_change_proposal']); ?>\" onclick=\"\"></i>&nbsp;');\n            }\n\n            $(param).prop(\"disabled\", false);\n            $(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n            $(\"#div_loading\").addClass(\"hidden\");\n\n            $(\".tip\").tooltipster({multiple: true});\n\n            // refresh\n            if ($(\"#hid_cat\").val() !== \"\") {\n                refreshListLastSeenItems();\n            }\n         }\n     );\n};\n\n/*\n   * FUNCTION\n   * Launch an action when clicking on a quick icon\n   * $action = 0 => Make not favorite\n   * $action = 1 => Make favorite\n*/\nfunction ActionOnQuickIcon(id, action)\n{\n    //change quick icon\n    if (action == 1) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star mi-yellow' onclick='ActionOnQuickIcon(\"+id+\",0)'></i>\");\n    } else if (action == 0) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star-o' onclick='ActionOnQuickIcon(\"+id+\",1)'></i>\");\n    }\n\n    //Send query\n    LoadingPage();\n    $.post(\"sources/items.queries.php\",\n        {\n            type    : 'action_on_quick_icon',\n            id      : id,\n            action  : action\n        },\n        function(data) {\n            LoadingPage();\n            displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : prepare new folder dialogbox\n//###########\nfunction open_add_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"create_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual folder in the dialogbox\n    $('#new_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#div_ajout_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare editing folder dialogbox\n//###########\nfunction open_edit_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"edit_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual forlder in the dialogbox\n    $('#edit_folder_folder option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#edit_folder_title').val($.trim($('#edit_folder_folder :selected').text()));\n    $('#edit_folder_complexity').val($('#complexite_groupe').val());\n    $('#div_editer_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare moving folder dialogbox\n//###########\nfunction open_move_group_div()\n{\n    if ($.inArray($(\"#hid_cat\").val(), $(\"#personal_visible_groups_list\").val().split(',')) != -1 && $(\"#personal_sk_set\").val() === \"0\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_personal_sk_expected']); ?>\");\n        return false;\n    }\n\n    if ($(\"#hid_cat\").val() == \"<?php if (isset($_SESSION['personal_folders'][0])) {\n    echo $_SESSION['personal_folders'][0];\n} else {\n    echo \"\";\n}\n?>\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0) == 0) return false;\n\n    //Select the actual folder in the dialogbox\n    //$('#move_folder_id option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#move_folder_title').html($.trim($('#move_folder_id :selected').text())+\" [id\"+$('#hid_cat').val()+\"]\");\n    $('#move_folder_id').val(0);\n    $('#div_move_folder').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare delete folder dialogbox\n//###########\nfunction open_del_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"delete_folder\") == 0) {\n        return false;\n    } else {\n        $('#div_supprimer_rep').dialog('open');\n        $('#delete_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n        $(\"#div_loading\").addClass(\"hidden\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_add_item_div()\n{\n    LoadingPage();\n\n    //Check if personal SK is needed and set\n    if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 0) {\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        LoadingPage();\n        $(\"#div_dialog_message\").dialog(\"open\");\n    } else if ($(\"#hid_cat\").val() == \"\") {\n        LoadingPage();\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['error_no_selected_folder']); ?><\\/div>\").dialog(\"open\");\n    } else if ($('#recherche_group_pf').val() == 0 || ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)) {\n        // is user read only and it is not a personal folder\n        if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            LoadingPage();\n            return false;\n        }\n\n        //Select the actual forlder in the dialogbox\n        $('#categorie').val($('#hid_cat').val());\n\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            $(\"#div_loading\").addClass(\"hidden\");\n            return false;\n        }\n\n        //Show WYGIWYS editor\n        CKEDITOR.replace(\n            \"desc\",\n            {\n                toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n                height: 100,\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            }\n        );\n\n        // prepare select2 for users\n        $(\"#annonce_liste_destinataires\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n\n        if ($(\"#recherche_group_pf\").val() == 1) {\n            $(\"#div_editRestricted\").addClass(\"hidden\");\n        } else {\n            $(\"#div_editRestricted\").show();\n        }\n\n        //open dialog\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_saisi\").dialog(\"open\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare editing item dialogbox\n//###########\nfunction open_edit_item_div(restricted_to_roles)\n{\n    // is user read only and it is not a personal folder\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        // Exclude the case where the user is in his PF with PSK set\n        if ($('#recherche_group_pf').val() === \"1\" && $(\"#personal_sk_set\").val() === \"1\") {\n            // do nothing\n        } else {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            return false;\n        }\n    }\n\n    // If no Item selected, no edition possible\n    if ($(\"#selected_items\").val() == \"\") {\n        displayMessage(\"<?php echo addslashes($LANG['none_selected_text']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // Get complexity level for this folder\n    // and stop edition if Item edited by another user\n    var compReturn = RecupComplexite($('#hid_cat').val(), 1);\n\n    if (compReturn == 0) {\n        if (CKEDITOR.instances[\"edit_desc\"]) {\n            CKEDITOR.instances[\"edit_desc\"].destroy();\n        }\n        if (CKEDITOR.instances[\"desc\"]) {\n            CKEDITOR.instances[\"desc\"].destroy();\n        }\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Check if Item has changed since loaded\n    if (CheckIfItemChanged() == 1) {\n        var tmp = $(\"#\"+$(\"#selected_items\").val()).attr(\"ondblclick\");\n        tmp = tmp.substring(20,tmp.indexOf(\")\"));\n        tmp = tmp.replace(/'/g, \"\").split(',');\n        AfficherDetailsItem(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], 1, 1);\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Show WYGIWYG editor\n    CKEDITOR.replace(\n        \"edit_desc\",\n        {\n            toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n            height: 100,\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        }\n   );\n    CKEDITOR.instances[\"edit_desc\"].setData($('#hid_desc').val());\n\n    $('#edit_display_title').html($('#hid_label').val());\n    $('#edit_label').val($('#hid_label').val());\n    $('#edit_desc').html($('#hid_desc').val());\n    $('#edit_pw1, #edit_pw2').val($('#hid_pw').val());\n    $(\"#edit_visible_pw\").text($('#hid_pw').val());\n    $('#edit_item_login').val($('#hid_login').val());\n    $('#edit_email').val($('#hid_email').val());\n    $('#edit_url').val($('#hid_url').val());\n    $('#edit_categorie').val($('#id_categorie').val());\n    if ($('#edit_restricted_to').val() != undefined) {\n        $('#edit_restricted_to').val($('#hid_restricted_to').val());\n    }\n    if ($('#edit_restricted_to_roles').val() != undefined) {\n        $('#edit_restricted_to_roles').val($('#hid_restricted_to_roles').val());\n    }\n    $('#edit_tags').val($('#hid_tags').val());\n    if ($('#hid_anyone_can_modify').val() == \"1\") {\n        $('#edit_anyone_can_modify').attr(\"checked\",\"checked\");\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    } else {\n        $('#edit_anyone_can_modify').attr(\"checked\",false);\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    }\n    // fields display\n    if ($('.fields').val() != undefined && $(\"#display_categories\").val() != \"\") {\n        $('.fields').each(function(i){\n            id = $(this).attr('id').split('_');\n            $('#edit_field_' + id[2] + '_' + id[3]).val(htmlspecialchars_decode($('#hid_field_' + id[2] + '_' + id[3]).val()));\n        });\n    }\n\n    //Get list of people in restriction list\n    if ($(\"#recherche_group_pf\").val() == 1) {\n        $(\"#div_editRestricted\").addClass(\"hidden\");\n    } else {\n        $(\"#div_editRestricted\").show();\n        // tick selected users / roles\n        if ($('#edit_restricted_to').val() != undefined) {\n            var list = $('#hid_restricted_to').val().split(';');\n            for (var i=0; i<list.length; i++) {\n                var elem = list[i];\n                if (elem != \"\") {\n                    $(\".folder_rights_user_edit\").each(function() {\n                        if ($(this).attr(\"id\") == elem) {\n                            $(this).prop(\"checked\", true);\n                            exit;\n                        }\n                    });\n                }\n            }\n        }\n\n        if ($('#edit_restricted_to').val() != undefined) {\n            $('#edit_restricted_to_list').empty();\n            if (restricted_to_roles == 1) {\n                //add optgroup\n                var optgroup = $('<optgroup>');\n                optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n            }\n            /*var liste = $('#input_liste_utilisateurs').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                    }\n                }\n            }*/\n        }\n\n        //Add list of roles if option is set\n        if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n            var j = i;\n            //add optgroup\n            var optgroup = $('<optgroup>');\n            optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n\n            var liste = $('#input_list_roles').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='role_\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to_roles').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value='role_\"+elem[0]+\"']\").attr('selected', true);\n                    }\n                    if (i==0) $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n                }\n                j++;\n            }\n        }\n    }\n\n    // prepare select2 for users\n    $(\"#edit_annonce_liste_destinataires\").select2({\n        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n    });\n\n    // disable folder selection if PF\n    if ($('#recherche_group_pf').val() == \"1\") {\n        $(\"#edit_categorie\").prop(\"disabled\", true);\n    } else {\n        $(\"#edit_categorie\").prop(\"disabled\", false);\n    }\n\n    //open dialog\n    $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n    $(\"#div_formulaire_edition_item\").dialog(\"open\");\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_del_item_div()\n{\n    // is user read only\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"2\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $(\"#div_loading\").removeClass(\"hidden\");\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            return false;\n        }\n\n        $(\"#div_loading\").addClass(\"hidden\");\n        $('#div_del_item').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare copy item dialogbox\n//###########\nfunction open_copy_item_to_folder_div()\n{\n    // is user read only\n    if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $('#copy_in_folder').val($(\"#hid_cat\").val());\n        $('#div_copy_item_to_folder').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n\n//###########\n//## FUNCTION : Clear HTML tags from a string\n//###########\nfunction clear_html_tags()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"clear_html_tags\",\n            id_item  : $(\"#id_item\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#edit_desc\").val(data.description);\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to delete an attached file\n//###########\nfunction delete_attached_file(file_id)\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"delete_attached_file\",\n            file_id : file_id,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#span_edit_file_\"+file_id).css(\"textDecoration\", \"line-through\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to preview an attached image\n//###########\nPreviewImage = function(uri,title) {\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"image_preview_preparation\",\n            uri     : uri,\n            title   : title,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            $(\"#dialog_files\").html('<img id=\"image_files\" src=\"\" />');\n            //Get the HTML Elements\n            imageDialog = $(\"#dialog_files\");\n            imageTag = $('#image_files');\n\n            //Set the image src\n            imageTag.attr(\"src\", data.new_file);\n\n            //When the image has loaded, display the dialog\n            imageTag\n            .error(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                displayMessage(\"<?php echo \"<i class='fa fa-exclamation-triangle fa-2x'></i>  \".addslashes($LANG['error_file_is_missing']); ?>\");\n            })\n            .load(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                imageDialog.dialog({\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    width: 'auto',\n                    title: title,\n                    open: function( event, ui ) {\n                        // nothing to do\n                    },\n                    close: function (event, ui) {\n                        // delete file\n                        $.post(\n                            \"sources/main.queries.php\",\n                            {\n                                type    : \"file_deletion\",\n                                filename: data.file_path,\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            }\n                        );\n                    }\n                });\n            });\n        }\n    );\n}\n\nfunction notify_click(status)\n{\n    $.post(\"sources/items.queries.php\",\n    {\n        type     : \"notify_a_user\",\n        user_id : <?php echo $_SESSION['user_id']; ?>,\n        status    : status,\n        notify_type : 'on_show',\n        notify_role : '',\n        item_id : $('#id_item').val(),\n        key        : \"<?php echo $_SESSION['key']; ?>\"\n    },\n    function(data) {\n        if (data[0].error == \"something_wrong\") {\n            $(\"#new_show_error\").html('ERROR!!');\n            $(\"#new_show_error\").show();\n        } else {\n            $(\"#new_show_error\").addClass(\"hidden\");\n            if (data[0].new_status == \"true\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'false\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"<?php echo addslashes($LANG['notify_activated']); ?>\");\n            } else if (data[0].new_status == \"false\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'true\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"\");\n            }\n        }\n    },\n    \"json\"\n    );\n}\n\n/*\n** Checks if current item title is a duplicate in current folder\n*/\nfunction checkTitleDuplicate(itemTitle, checkInCurrentFolder, checkInAllFolders, textFieldId)\n{\n    $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n    $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n    if (itemTitle != \"\") {\n        if (checkInCurrentFolder == \"1\" || checkInAllFolders == \"1\") {\n            //prepare data\n            var data = {\"label\": itemTitle.replace(/\"/g,'&quot;') , \"idFolder\": $('#hid_cat').val()};\n\n            if (checkInCurrentFolder == \"1\") {\n                var typeOfCheck = \"same_folder\";\n            } else {\n                var typeOfCheck = \"all_folders\";\n            }\n\n            // disable Save button\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disable\");\n\n            // send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"check_for_title_duplicate\",\n                    option  : typeOfCheck,\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].duplicate != \"1\") {\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                        // display title\n                        $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n                    } else {\n                        $(\"#label\").focus();\n                        $(\"#new_show_error\").html(\"<?php echo addslashes($LANG['duplicate_title_in_same_folder']); ?>\").show();\n                    }\n                }\n            );\n        } else {\n            // display title\n            $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n        }\n    }\n}\n\n/*\n* builds the folders tree\n*/\nfunction refreshTree(node_to_select, do_refresh, refresh_visible_folders)\n{\n    do_refresh = do_refresh || \"\"\n    node_to_select = node_to_select || \"\";\n    refresh_visible_folders = refresh_visible_folders || 1;\n\n    if (refresh_visible_folders !== 1) {\n        $(\"#jstree\").jstree(\"deselect_all\");\n        $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n        return false;\n    }\n\n    if (do_refresh !== \"0\") {\n        $('#jstree').jstree(true).refresh();\n    }\n\n    if (node_to_select !== \"\") {\n        $(\"#hid_cat\").val(node_to_select);\n        $(\"#jstree\").jstree(\"deselect_all\");\n\n        $('#jstree')\n        .one(\"refresh.jstree\", function (e, data) {\n            data.instance.select_node(\"#li_\"+node_to_select);\n        });\n        //.jstree(\"select_node\", \"#li_\"+node_to_select);\n\n    }\n\n    if (refresh_visible_folders === 1) {\n        refreshVisibleFolders();\n    }\n}\n\n/*\n* refreshes the various lists of folders used in dialogboxes\n*/\nfunction refreshVisibleFolders()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"refresh_visible_folders\",\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            //check if format error\n            if (data.error == \"\") {\n                // append new list\n                $(\"#categorie, #edit_categorie, #new_rep_groupe, #edit_folder_folder, #delete_rep_groupe\").find('option').remove().end().append(data.selectVisibleFoldersOptions);\n                $(\"#move_folder_id\").find('option').remove().end().append(data.selectFullVisibleFoldersOptions);\n                $(\"#copy_in_folder\").find('option').remove().end().append(data.selectVisibleActiveFoldersOptions);\n\n                // remove ROOT option if exists\n                $('#edit_folder_folder option[value=\"0\"]').remove();\n                $('#delete_rep_groupe option[value=\"0\"]').remove();\n            }\n        }\n   );\n}\n\n\n//###########\n//## EXECUTE WHEN PAGE IS LOADED\n//###########\n$(function() {\n\n    var clear_tp_clipboard = new Clipboard(\"#but_empty_clipboard\", {\n        text: function() {\n            return \"cleared\";\n        }\n    });\n    clear_tp_clipboard.on('success', function(e) {\n        $(\"#message_box\").html(\"super\").show().fadeOut(1000);\n\n        e.clearSelection();\n    });\n\n    $.ajaxSetup({\n        error: function(jqXHR, exception) {\n            if (jqXHR.status === 0) {\n                console.log('Not connect.\\nVerify Network.');\n            } else if (jqXHR.status == 404) {\n                alert('Requested page not found. [404]');\n            } else if (jqXHR.status == 500) {\n                alert('Internal Server Error [500].');\n            } else if (exception === 'parsererror') {\n                alert('Requested JSON parse failed.');\n            } else if (exception === 'timeout') {\n                alert('Time out error.');\n            } else if (exception === 'abort') {\n                alert('Ajax request aborted.');\n            } else {\n                alert('Uncaught Error.n' + jqXHR.responseText);\n            }\n        }\n    });\n\n    // manage item div resize\n    $( \"#item_details_scroll\" ).resizable({handles: {'s': '#handle'}});\n    $(\"#handle\").dblclick(function() {\n        var inner = $(\"#item_details_scroll\").find('table');\n        var current_height = $(\"#item_details_scroll\").height();\n        $(\"#item_details_scroll\").animate({top:'+='+(current_height-inner.height())}, 0);\n        $(\"#item_details_scroll\").height(inner.outerHeight(true));\n    });\n\n    $('#toppathwrap').addClass(\"hidden\");\n    if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n    //Expend/Collapse jstree\n    $(\"#jstree_close\").click(function() {\n        $(\"#jstree\").jstree(\"close_all\");\n    });\n    $(\"#jstree_open\").click(function() {\n        $(\"#jstree\").jstree(\"open_all\");\n    });\n    $(\"#jstree_search\").keypress(function(e) {\n        if (e.keyCode == 13) {\n            $(\"#jstree\").jstree(\"search\",$(\"#jstree_search\").val());\n        }\n    });\n\n    $(\".quick_menu\").menu({\n        icons: { submenu: \"no-icon\" }\n    });\n    $(\".quick_menu_left\").menu({\n        position: {\n            my : \"right top\",\n            at : \"left top\"\n        }\n    });\n\n    $('.menu_200, .menu_150').on('blur', function () {\n        $(this).addClass(\"hidden\");\n    });\n\n    $(\"#pw_size, #edit_pw_size\").spinner({\n        min:   3,\n        step:  1,\n        numberFormat: \"n\"\n    });\n\n    //Disable menu buttons\n    $('#menu_button_edit_item,#menu_button_del_item,#menu_button_add_fav,#menu_button_del_fav').attr('disabled', 'disabled');\n\n    //DIsable more buttons if read only user\n    if ($(\"#user_is_read_only\").val() == 1) {\n        $('#menu_button_add_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group').attr('disabled', 'disabled');\n    }\n\n    // Autoresize Textareas\n    $(\".items_tree, #items_content\").addClass(\"ui-corner-all\");\n\n    //automatic height\n    var window_height = $(window).height();\n    $(\"#div_items, #content\").height(window_height-170);\n    $(\"#items_center\").height(window_height-390);\n    $(\"#items_list\").height(window_height-440);\n    $(\".items_tree\").height(window_height-160);\n    $(\"#jstree\").height(window_height-185);\n\n    //warning if screen height too short\n    if (parseInt(window_height-440) <= 30) {\n        $(\"#div_dialog_message_text\").html(\"<?php echo addslashes($LANG['warning_screen_height']); ?>\");\n        $(\"#div_dialog_message\").dialog('open');\n    }\n\n    //Evaluate number of items to display - depends on screen height\n    if (parseInt($(\"#nb_items_to_display_once\").val()) || $(\"#nb_items_to_display_once\").val() == \"max\") {\n        //do nothing ... good value\n    } else {\n        //adapt to the screen height\n        $(\"#nb_items_to_display_once\").val(Math.max(Math.round((window_height-450)/23),2));\n    }\n\n    // Build buttons\n    $(\"#custom_pw, #edit_custom_pw\").buttonset();\n    $(\".cpm_button, #anyone_can_modify, #annonce, #edit_anyone_can_modify, #edit_annonce, .button\").button();\n\n    //Build multiselect box\n\n    //Build tree\n    $('#jstree').jstree({\n        \"core\" : {\n            \"animation\" : 0,\n            \"check_callback\" : true,\n            'data' : {\n                'url' : \"./sources/tree.php\",\n                \"dataType\" : \"json\",\n                \"async\" : true,\n                'data' : function (node) {\n                    return { 'id' : node.id.split('_')[1] };\n                }\n            },\n            \"strings\" : {\n                \"Loading ...\" : \"<?php echo addslashes($LANG['loading']); ?>...\"\n            },\n            \"error\" : {\n\n            }\n        },\n        \"plugins\" : [\n            \"state\", \"search\"\n        ]\n    })\n    //search in tree\n    .bind(\"search.jstree\", function (e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($(\"#jstree li>a.jstree-search\").attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // load list of visible folders for current user\n    refreshVisibleFolders();\n\n    $(\"#add_folder\").click(function() {\n        var posit = $('#item_selected').val();\n        //alert($(\"ul\").text());\n    });\n\n    $(\"#for_searchtext\").addClass(\"hidden\");\n    $(\"#copy_pw_done\").addClass(\"hidden\");\n    $(\"#copy_login_done\").addClass(\"hidden\");\n\n    //PREPARE DIALOGBOXES\n    //=> ADD A NEW GROUP\n    $(\"#div_ajout_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_add_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                AddNewFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#new_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#new_rep_show_error\").addClass(\"hidden\");\n            $(\"#new_rep_show_error\").html(\"\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> EDIT A GROUP\n    $(\"#div_editer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 490,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#edit_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#edit_folder_title\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_folder\").val() == \"0\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_complexity\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if (/^\\d+$/.test($(\"#edit_folder_title\").val())) {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else {\n                    $(\"#edit_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"title\": $('#edit_folder_title').val().replace(/\"/g,'&quot;'),\n                        \"complexity\": $('#edit_folder_complexity').val(),\n                        \"folder\": $('#edit_folder_folder').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"update_folder\",\n                            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                refreshTree($('#edit_folder_folder').val());\n                                $(\"#folder_name_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#path_elem_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#fld_\"+$('#edit_folder_folder').val()).html($('#edit_folder_title').val());\n                                $(\"#edit_folder_title\").val($('#edit_folder_title').val());\n                                $(\"#div_editer_rep\").dialog(\"close\");\n                            } else {\n                                if (data[0].error === \"ERR_TITLE_ONLY_WITH_NUMBERS\") {\n                                    $(\"#edit_rep_show_error\").html('<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>').show();\n                                } else {\n                                    $(\"#edit_rep_show_error\").html(data[0].error).show();\n                                }\n\n                            }\n                            $(\"#edit_folder_loader\").addClass(\"hidden\");\n                            $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_folder_loader\").addClass(\"hidden\");\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n    // =>\n    $(\"#div_copy_item_to_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_copy_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\"#copy_in_folder\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n            $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", false);\n            $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").addClass(\"hidden\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_copy_item_to_folder_item\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").show().html(\"<span><?php echo addslashes($LANG['please_wait']).\" <i class=\\'fa fa-cog fa-spin'></i>\"; ?></span>\");\n                $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", true);\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"copy_item\",\n                        item_id     : $('#id_item').val(),\n                        source_id   : $('#hid_cat').val(),\n                        dest_id     : $('#copy_in_folder').val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error !== \"\") {\n                            $(\"#copy_item_to_folder_show_error\").html(data[1].error_text).show(1).delay(2000).fadeOut(1000);\n                        }\n                        //if OK\n                        if (data[0].status == \"ok\") {\n                            //window.location.href = \"index.php?page=items&group=\"+$('#copy_in_folder').val()+\"&id=\"+data[1].new_id;\n                            ListerItems($('#copy_in_folder').val(),'', 0);\n                            AfficherDetailsItem(data[1].new_id);\n                            refreshTree($('#copy_in_folder').val());\n                            $(\"#copy_in_folder\").val(\"\");\n                            $(\"#div_copy_item_to_folder\").dialog('close');\n                        }\n                        $(\"#copy_item_info\").addClass(\"hidden\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#copy_item_to_folder_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_item_to_folder\").dialog('close');\n            }\n        }\n    });\n    // <=\n\n    //=> MOVE A GROUP\n    $(\"#div_move_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 350,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_mov_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#move_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#move_folder_id\").val() == \"0\") {\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else if($('#hid_cat').val() === $('#move_folder_id').val()) {\n                    // do not move to itself\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else {\n                    $(\"#move_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\")\n                        .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\")\n                        .prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"source_folder_id\": $('#hid_cat').val(),\n                        \"target_folder_id\": $('#move_folder_id').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"move_folder\",\n                            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key     : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                $(\"#div_move_folder ~ .ui-dialog-buttonpane\")\n                                    .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                                ListerItems($('#hid_cat').val(), \"\", 0);\n                                $(\"#move_folder_loader\").addClass(\"hidden\");\n                                refreshTree();\n                                $(\"#div_move_folder\").dialog(\"close\");\n                            } else {\n                                $(\"#move_rep_show_error\").html(data[0].error).show();\n                            }\n                            $(\"#move_folder_loader\").addClass(\"hidden\");\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(\"#move_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n\n    //=> COPY OF FOLDER\n    $(\"#div_copy_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 290,\n        title: \"<?php echo addslashes($LANG['copy_folder']); ?>\",\n        close: function () {\n            $(\"#copy_folder_source_id, #copy_folder_destination_id\").children('option').remove();\n            $(\"#div_copy_folder_msg\")\n                .html('')\n                .removeClass(\"ui-state-highlight\")\n                .addClass(\"hidden\");\n        },\n        open: function(event,ui) {\n            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // get list of folders\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"get_list_of_folders\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").addClass(\"hidden\");\n\n                        //display to user\n                        $(\"#copy_folder_source_id, #copy_folder_destination_id\").append(data[0].list_folders);\n\n                        $(\"#copy_folder_source_id\").val($(\"#hid_cat\").val());\n                    },\n                    \"json\"\n                );\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                if ($(\"#copy_folder_source_id\").val() === \"\" || $(\"#copy_folder_destination_id\").val() === \"\") {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_must_enter_all_fields']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n                if ($(\"#copy_folder_source_id\").val() === $(\"#copy_folder_destination_id\").val()) {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_source_and_destination_are_equal']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n\n                $(\"#div_copy_folder_msg\")\n                    .html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>')\n                    .addClass(\"ui-state-highlight\")\n                    .show();\n\n                //prepare data\n                var data = {\"source_folder_id\": $('#copy_folder_source_id').val(),\n                    \"target_folder_id\": $('#copy_folder_destination_id').val()};\n\n                //Send query\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"copy_folder\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error == \"\") {\n                            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                            refreshTree();\n                            $(\"#div_copy_folder\").dialog(\"close\");\n                        } else {\n                            $(\"#div_copy_folder_msg\").html(data[0].error).show().delay(2000).fadeOut(1000);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#div_copy_folder_msg\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        }\n    });\n    //<=\n\n    //=> DELETE A GROUP\n    $(\"#div_supprimer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 230,\n        title: \"<?php echo addslashes($LANG['item_menu_del_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['delete']); ?>\": function() {\n                SupprimerFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        },\n        close: function() {\n            $(\"#delete_rep_groupe_validate\").prop(\"checked\", false);\n            $(\"#del_rep_show_error\").html(\"\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> ADD A NEW ITEM\n    $(\"#div_formulaire_saisi\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_add_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disabled\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_loading\").removeClass(\"hidden\");\n                $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                AjouterItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_tabs\").tabs({ selected: 0 });\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#label\").focus();\n            $(\"#visible_pw\").html(\"\");\n            $(\"#item_tabs\").tabs(\"option\", \"active\", 0);\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#form_tab_fields\") != undefined)\n                    $(\"#item_tabs\").tabs(\"option\", \"hidden\", 3);\n            } else {\n                if ($(\"#form_tab_fields\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#item_tabs\").tabs(\"option\", \"show\", 3);\n            }\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#expected_complexity\").show();\n            }\n\n            $(\"#categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#item_upload_list\").html(\"\");\n            $(\".item_field\").val(\"\");  // clean values in Fields\n            $(\"#pw1\").focus();\n            $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> EDITER UN ELEMENT\n    $(\"#div_formulaire_edition_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n                EditerItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_edit_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_edit_tabs\").tabs({ selected: 0 });\n                $(\"#div_loading\").addClass(\"hidden\");\n                //Close dialog box\n                $(this).dialog('close');\n            }\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#div_loading, #edit_show_error\").addClass(\"hidden\");\n            $(\"#item_edit_upload_list\").html(\"\");\n            $(\".edit_item_field\").val(\"\");  // clean values in Fields\n            //Unlock the Item\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"free_item_for_edition\",\n                    id      : $(\"#id_item\").val(),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n        },\n        open: function(event,ui) {\n            //refresh pw complexity\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",1  );\n            $(\"#edit_pw1\").first().focus();\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",0  );\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#edit_item_more\") != undefined) $(\"#edit_item_more\").addClass(\"hidden\");\n            } else {\n                if ($(\"#edit_item_more\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#edit_item_more\").show();\n            }\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#edit_expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#edit_expected_complexity\").show();\n            }\n\n            $(\"#edit_categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n\n            // get list of Users\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"build_list_of_users\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        var list = data.list.split(';');\n                        for (var i=0; i<list.length; i++) {\n                            var elem = list[i].split('#');\n                            if (elem[0] != \"\") {\n                                $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                                var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                                if (index != -1) {\n                                    $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                                }\n                            }\n                        }\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SUPPRIMER UN ELEMENT\n    $(\"#div_del_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 220,\n        title: \"<?php echo addslashes($LANG['item_menu_del_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['del_button']); ?>\": function() {\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"del_item\",\n                        id          : $(\"#id_item\").val(),\n                        categorie   : $('#hid_cat').val(),\n                        label       : $(\"#hid_label\").val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").removeClass(\"hidden\");\n\n                        // refresh list of items\n                        $(\"#full_items_list\").html(\"\");\n                        ListerItems($('#hid_cat').val(), \"\", 0)\n\n                        // reload tree\n                        refreshTree($('#hid_cat').val());\n\n                        // clean fields\n                        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n                        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n                        $(\"#selected_items\").val(\"\");\n\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n               );\n                $(this).dialog('close');\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_del_item_selection\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        }\n    });\n    //<=\n    //=> SHOW LINK COPIED DIALOG\n    $(\"#div_item_copied\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['admin_main']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW HISTORY DIALOG\n    $(\"#div_item_history\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 650,\n        height: 400,\n        title: \"<?php echo addslashes($LANG['history']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // load content\n            const data = {\"id\":$(\"#id_item\").val()};\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"load_item_history\",\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        $(\"#item_history_log\").html(data.new_html);\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_item_share\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['send']); ?>\": function() {\n                $(\"#div_item_share_error\").addClass(\"hidden\");\n                if (IsValidEmail($(\"#item_share_email\").val())) {    //check if email format is ok\n                    $(\"#div_item_share_status\").show();\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"send_email\",\n                            id      : $(\"#id_item\").val(),\n                            receipt    : $(\"#item_share_email\").val(),\n                            cat      : \"share_this_item\",\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#div_item_share_status\").html(\"\").addClass(\"hidden\");\n                            if (data[0].error == \"\") {\n                                $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['share_sent_ok']); ?>\").show();\n                            } else {\n                                $(\"#div_item_share_error\").html(data[0].message).show();\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['bad_email_format']); ?>\").show();\n                }\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW ITEM UPDATED DIALOG\n    $(\"#div_item_updated\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 300,\n        height: 100,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_suggest_change\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 750,\n        height: 450,\n        title: \"<?php echo addslashes($LANG['suggest_password_change']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-cog fa-spin fa-2x\"></i>').show().removeClass(\"ui-state-error\");\n\n                // do checks\n                if (!IsValidEmail($(\"#email_change\").val()) && $(\"#email_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['email_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n                if (!validateURL($(\"#url_change\").val()) && $(\"#url_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['url_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n\n                // prepare changes\n                var data = {\"label\": $(\"#label_change\").val(), \"pwd\": $(\"#pwd_change\").val(),\n                    \"url\": $(\"#url_change\").val(), \"login\": $(\"#login_change\").val(),\n                    \"email\": $(\"#email_change\").val(), \"folder\": $(\"#hid_cat\").val(),\n                    \"comment\": $(\"#comment_change\").val(), \"item_id\": $(\"#id_item\").val()};\n\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type    : \"suggest_item_change\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        id      : $(\"#id_item\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error === \"\") {\n                            $(\"#div_suggest_change_wait\").html(\"<?php echo addslashes($LANG['suggestion_done']); ?>\").show(1).delay(1500).fadeOut(1000);\n                            setTimeout(\n                                function() {\n                                    $(\"#div_suggest_change\").dialog(\"close\");\n                                },\n                                500\n                            );\n                        }\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#div_suggest_change_html\")\n            .html(\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['label']); ?></label><input type=\"text\" id=\"label_change\" value=\"'+$(\"#hid_label\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['pw']); ?></label><input type=\"text\" id=\"pwd_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '&nbsp;<i class=\"fa fa-info-circle fa-lg tip\" title=\"<?php echo addslashes($LANG['suggest_change_password_blank']); ?>\"></i>' +\n                //'<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['description']); ?></label><textarea id=\"description_change_change\" class=\"input_text_80 ui-widget-content ui-corner-all\">'+$(\"#hid_desc\").val()+'</textarea>' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['index_login']); ?></label><input type=\"text\" id=\"login_change\" value=\"'+$(\"#hid_login\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['email']); ?></label><input type=\"text\" id=\"email_change\" value=\"'+$(\"#hid_email\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['url']); ?></label><input type=\"text\" id=\"url_change\" value=\"'+$(\"#hid_url\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['comment']); ?></label><input type=\"text\" id=\"comment_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">'\n            )\n            .show();\n            $(\".tip\").tooltipster({multiple: true});\n        }\n    });\n    //<=\n\n    // => ATTACHMENTS INIT\n    var uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_attach_pickfiles\",\n        container : \"item_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },\n<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_upload_wait\").show();\n\n                if ($(\"#random_id\").val() == \"\") {\n                    var post_id = CreateRandomString(9,\"num_no_0\");\n                    $(\"#random_id\").val(post_id);\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $(\"#random_id\").val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : false,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_upload_wait\").addClass(\"hidden\");\n                $(\"#files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#remove_\" + file.id).remove();\n    });\n    uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n\n    // Load edit uploaded click\n    $(\"#item_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 10\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                uploader_attachments.start();\n            },\n            \"json\"\n        );\n        e.preventDefault();\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_upload_list').append(\n                '<div id= file.id><span id=\"remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#files_number\").val(parseInt($(\"#files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    // Prepare uplupload object for attachments upload\n    var edit_uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_edit_attach_pickfiles\",\n        container : \"item_edit_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n        ?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_edit_upload_wait\").show();\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $('#selected_items').val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : true,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#edit_files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_edit_upload_wait\").addClass(\"hidden\");\n                $(\"#edit_files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    edit_uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n    edit_uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_edit_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    edit_uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n\n    // Load edit uploaded click\n    $(\"#item_edit_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 30\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                edit_uploader_attachments.start();\n            },\n            \"json\"\n        );\n\n        e.preventDefault();\n    });\n    edit_uploader_attachments.init();\n    edit_uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_edit_upload_list').append(\n                '<div id= file.id><span id=\"edit_remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#edit_files_number\").val(parseInt($(\"#edit_files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    //Launch items loading\n    if ($(\"#jstree_group_selected\").val() == \"\") {\n        var first_group = 1;\n    } else {\n        var first_group = $(\"#jstree_group_selected\").val();\n    }\n\n    if ($(\"#hid_cat\").val() != \"\") {\n        first_group = $(\"#hid_cat\").val();\n    }\n\n    //load items\n    if (parseInt($(\"#query_next_start\").val()) > 0) start = parseInt($(\"#query_next_start\").val());\n    else start = 0;\n\n    // load list of items\n    if (first_group !== \"\") {\n        ListerItems(first_group,'', start);\n    }\n\n    //Load item if needed and display items list\n    if ($(\"#open_id\").val() !== \"\") {\n        AfficherDetailsItem($(\"#open_id\").val());\n        //refreshTree($(\"#hid_cat\").val(), \"0\");\n        $(\"#open_item_by_get\").val(\"\");\n    }\n\n    //Password meter for item creation\n    $(\"#pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#pw1').bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    });\n\n    $(\"#tabs-02\").on(\n        \"score.simplePassMeter\",\n        \"#pw1\",\n        function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    );\n\n\n    //Password meter for item update\n    $(\"#edit_pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#edit_pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#edit_pw1').on(\n        \"score.simplePassMeter\", function(jQEvent, score) {\n            $(\"#edit_mypassword_complex\").val(score);\n        }\n    );\n\n    //Text search watermark\n    var tbval = $('#jstree_search').val();\n    $('#jstree_search').focus(function() { $(this).val('');});\n    $('#jstree_search').blur(function() { $(this).val(tbval);});\n    $('#search_item').focus(function() { $(this).val('');});\n    $('#search_item').blur(function() { $(this).val(tbval);});\n\n    //add date selector\n    $(\".datepicker\").datepicker({\n        dateFormat:\"<?php echo str_replace(array(\"Y\", \"M\"), array(\"yy\", \"mm\"), $SETTINGS['date_format']); ?>\",\n        changeMonth: true,\n        changeYear: true\n    });\n\n    //autocomplete for TAGS\n    $(\"#item_tags, #edit_tags\")\n        .focus()\n        .bind( \"keydown\", function( event ) {\n            if ( event.keyCode === $.ui.keyCode.TAB &&\n                    $( this ).data( \"autocomplete\" ).menu.active ) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            //source: 'sources/items.queries.php?type=autocomplete_tags',\n            source: function( request, response ) {\n                $.getJSON( \"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast( request.term )\n                }, response );\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast( this.value );\n            },\n            select: function( event, ui ) {\n                var terms = split( this.value );\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push( ui.item.value );\n                // add placeholder to get the comma-and-space at the end\n                terms.push( \"\" );\n                this.value = terms.join( \" \" );\n\n                return false;\n            }\n        }\n    );\n\n    //DIALOG FOR OFFLINE MODE\n    $(\"#dialog_offline_mode\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['offline_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_offline_generate']); ?>\": function() {\n                generateOfflineFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_offline_mode\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR EXPORT FILE\n    $(\"#dialog_export_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['print_out_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_export_file']); ?>\": function() {\n                exportItemsToFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_export_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR IMPORT FILE\n    $(\"#dialog_import_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['import_csv_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_import_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n\n    // DIALOG BOX FOR PERSONAL PASSWORDS UPGRADE\n    $(\"#dialog_upgrade_personal_passwords\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 300,\n        title: \"<?php echo addslashes($LANG['upgrade_needed']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['admin_action_db_backup_start_tip']); ?>\": function() {\n                $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type    : \"reencrypt_personal_pwd_start\",\n                        user_id : \"<?php echo $_SESSION['user_id']; ?>\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error != \"\") {\n                            $(\"#dialog_upgrade_personal_passwords_status\").html(data[0].error).addClass(\"ui-state-error\").show();\n                        } else {\n                            reEncryptPersonalPwds(data[0].pws_list, data[0].currentId, data[0].nb);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    //DIALOG FOR SSH\n    $(\"#dialog_ssh\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 620,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['update_server_password']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_ssh\").html(\"<i class=\\'fa fa-cog fa-spin fa-2x\\'></i>&nbsp;<b><?php echo addslashes($LANG['please_wait']); ?></b>\");\n        }\n    });\n\n    //Simulate a CRON activity (only 8 secs after page loading)\n    setTimeout(\n        function() {\n            // send email\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"send_waiting_emails\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n\n            // send statistics\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"sending_statistics\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n        },\n        8000\n    );\n\n    NProgress.done();\n});\n\n// show password during longpress\nvar mouseStillDown = false;\n$('#item_details_ok').on('mousedown', '.unhide_masked_data', function(event) {\n    mouseStillDown = true;\n     showPwdContinuous($(this).attr('id'));\n}).on('mouseup', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n}).on('mouseleave', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n});\nvar showPwdContinuous = function(elem_id){\n    if(mouseStillDown){\n        $('#'+elem_id).text($('#h'+elem_id).val());\n        setTimeout(\"showPwdContinuous('\"+elem_id+\"')\", 50);\n        // log password is shown\n        if (elem_id === \"id_pw\" && $(\"#pw_shown\").val() == \"0\") {\n            itemLog(\"item_password_shown\");\n            $(\"#pw_shown\").val(\"1\");\n        }\n    } else {\n        $('#'+elem_id).html('<?php echo $var['hidden_asterisk']; ?>');\n        $('.tip').tooltipster({multiple: true});\n    }\n}\n\nvar showPwd = function(){\n    $(\"#visible_pw, #edit_visible_pw\").toggle();\n}\n\n/*\n* permits to save\n*/\nfunction itemLog(log_case)\n{\n    $.post(\n        \"sources/items.logs.php\",\n        {\n            type        : log_case,\n            id_item     : $('#id_item').val(),\n            folder_id   : $('#hid_cat').val(),\n        hid_label   : $('#hid_label').val(),\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        }\n    );\n}\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n    return string;\n}\n\n/**\n * Permit to load dynamically the list of Items\n */\nfunction proceed_list_update(stop_proceeding)\n{\n    stop_proceeding = stop_proceeding || \"\";\n\n    if (stop_proceeding === \"1\" || ($(\"#new_listing_characteristics\").val() !== \"\" && $(\"#query_next_start\").val() !== \"end\")) {\n        var tmp = $(\"#new_listing_characteristics\").val().split(',');\n        $(\"#new_listing_characteristics\").val(\"\");\n        ListerItems(tmp[0], tmp[1], tmp[2], tmp[3]);\n        return false;\n    }\n\n    if ($(\"#query_next_start\").val() !== \"end\") {\n        //Check if nb of items do display > to 0\n        if ($(\"#nb_items_to_display_once\").val() > 0) {\n            ListerItems($(\"#hid_cat\").val(),'', parseInt($(\"#query_next_start\").val()));\n        }\n    } else {\n        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n        $(\"#items_list_loader\").addClass(\"hidden\");\n\n        // prepare clipboard items\n        var clipboard = new Clipboard('.mini_login');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n            e.clearSelection();\n        });\n\n        var clipboard = new Clipboard('.mini_pw');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n            itemLog(\"item_password_copied\");\n            e.clearSelection();\n        });\n\n        $(\".tip\").tooltipster({multiple: true});\n        $(\".mini_login, .mini_pw\").css(\"cursor\", \"pointer\");\n\n        var restricted_to_roles = <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}\n?>;\n\n        // refine users list to the related roles\n        $.post(\n            \"sources/items.queries.php\",\n            {\n                type        : \"get_refined_list_of_users\",\n                iFolderId   : $('#hid_cat').val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                // *** restricted_to_list ***\n                $(\"#restricted_to_list\").empty();\n                // add list of users\n                if ($('#restricted_to').val() != undefined) {\n                    $(\"#restricted_to_list\").append(data.selOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#restricted_to_list\").append(data.selOptionsRoles);\n                    $(\".folder_rights_role\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n\n                // *** edit_restricted_to_list ***\n                $(\"#edit_restricted_to_list\").empty();\n                if ($('#edit_restricted_to').val() != undefined) {\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user_edit\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsRoles);\n                    $(\".folder_rights_role_edit\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#edit_restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n            }\n       );\n    }\n}\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction items_list_filter(id)\n{\n    $(\"#full_items_list\").find(\"li\").show();\n    if (id) {\n        $(\"#full_items_list\").find(\"a:not(:contains(\" + id + \"))\").parent().addClass(\"hidden\");\n        $(\"#full_items_list\").find(\"a:contains(\" + id + \")\").parent().show();\n    }\n}\n\n\nfunction manage_history_entry(type, id)\n{\n    var data = {\"item_id\": $(\"#id_item\").val(), \"label\": sanitizeString($('#add_history_entry_label').val())};\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type      : \"history_entry_add\",\n            folder_id : $('#hid_cat').val(),\n            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key       : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error == \"\") {\n                $(\"#item_history_log_error\").html(\"\").addClass(\"hidden\");\n                $(\"#add_history_entry_label\").val(\"\");\n                $(\"#item_history_log\").append(htmlspecialchars_decode(data.new_line));\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_item_history\").dialog(\"open\");\n        }\n   );\n}\n\n\n/*\n* Launch the redirection to OTV page\n*/\nfunction prepareOneTimeView()\n{\n    if ($(\"#selected_items\").val() == \"\") return;\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"generate_OTV_url\",\n            id      : $(\"#id_item\").val(),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            if (data.error == \"\") {\n                $(\"#div_dialog_message\").dialog({height:300,minWidth:750});\n                $(\"#div_dialog_message\").dialog('open');\n                $(\"#div_dialog_message_text\").html(data.url+\n                    '<div style=\"margin-top:30px;font-size:13px;text-align:center;\"><span id=\"show_otv_copied\" class=\"ui-state-focus ui-corner-all\" style=\"padding:10px;display:none;\"></span></div>'\n                );\n\n                // prepare clipboard\n                var clipboard = new Clipboard(\"#button_copy_otv_link\", {\n                    text: function() {\n                        return unsanitizeString($('#otv_link').text());\n                    }\n                });\n                clipboard.on('success', function(e) {\n                    $(\"#show_otv_copied\").html(\"<?php echo addslashes($LANG['link_is_copied']); ?>\").show().fadeOut(2000);\n\n                    e.clearSelection();\n                });\n\n                $(\".tip\").tooltipster({multiple: true});\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        },\n        \"json\"\n   );\n}\n\nfunction globalItemsSearch()\n{\n    if ($(\"#search_item\").val() != \"\") {\n        // stop items loading (if on-going)\n        $(\"#items_listing_should_stop\").val(\"1\");\n\n        // wait\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching']); ?>');\n\n        // clean\n        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, #item_extra_info\").html(\"\");\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n        $(\"#full_items_list\").html(\"\");\n        $(\"#selected_items\").val(\"\");\n\n        // send query\n        $.get(\n            \"sources/find.queries.php\",\n            {\n                type        : \"search_for_items\",\n                sSearch     : $(\"#search_item\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                displayMessage(data.message);\n                $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>');\n                $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n                $(\"#full_items_list\").html(data.items_html);\n                $(\"#items_list_loader\").addClass(\"hidden\");\n            }\n        );\n    }\n}\n\n/*\n*\n*/\nfunction searchItemsWithTags(tag)\n{\n    //console.log(\">\"+tag);\n    if (tag == \"\") return false\n\n    // wait\n    $(\"#items_list_loader\").removeClass(\"hidden\");\n    $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching_tag']); ?>&nbsp;<b>' + tag + '</b> ...');\n\n    // clean\n    $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n    $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n    $(\"#full_items_list\").html(\"\");\n    $(\"#selected_items\").val(\"\");\n\n    // send query\n    $.get(\n        \"sources/find.queries.php\",\n        {\n            type        : \"search_for_items_with_tags\",\n            tagSearch   : tag,\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            displayMessage(data.message);\n            $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>&nbsp;<b>' + tag + '</b>');\n            $(\"#full_items_list\").html(data.items_html);\n            $(\"#items_list_loader\").addClass(\"hidden\");\n        }\n    );\n}\n\nfunction loadOfflineDialog()\n{\n    $(\"#dialog_offline_mode\").dialog({\n        open: function(event, ui) {\n            $(\"#div_offline_mode\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.offline.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadExportDialog()\n{\n    $(\"#dialog_export_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_export_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.export.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadImportDialog()\n{\n    $(\"#dialog_import_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_import_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.import.php?key=<?php echo $_SESSION['key']; ?>&folder_id=\"+$(\"#hid_cat\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction reEncryptPersonalPwds(remainingIds, currentId, nb)\n{\n    //console.log(remainingIds+\";\"+currentId+\";\"+nb);\n    $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n\n    $.ajax({\n        url: \"sources/utils.queries.php\",\n        type : 'POST',\n        dataType : \"json\",\n        data : {\n            type        : \"reencrypt_personal_pwd\",\n            currentId   : currentId,\n            user_id     : \"<?php echo $_SESSION['user_id']; ?>\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        complete : function(data, statut){\n            var aIds = remainingIds.split(\",\");\n            var currentID = aIds[0];\n            aIds.shift();\n            var nb2 = aIds.length;\n            aIds = aIds.toString();\n            if (nb == 0)\n                $(\"#reencryption_progress\").html(\"100%\");\n            else\n                $(\"#reencryption_progress\").html(Math.floor(((nb-nb2) / nb) * 100)+\"%\");\n\n            if (nb2 != \"0\" || (nb2 == \"\" && currentID != \"\")) {\n                reEncryptPersonalPwds(aIds, currentID, nb);\n            } else {\n                $(\"#dialog_upgrade_personal_passwords\").html('<i class=\"fa fa-info\"></i>&nbsp;<?php echo addslashes($LANG['operation_encryption_done']); ?>');\n\n                // ensure that no upgrade popup is shown\n                $(\"#personal_upgrade_needed\").val(\"\");\n            }\n        }\n    });\n}\n\n function serverAutoChangePwd()\n {\n    //console.log(\"opening\");\n    $(\"#dialog_ssh\").dialog({\n        open: function(event, ui) {\n            $(\"#div_ssh\").load(\n                \"<?php echo $SETTINGS['cpassman_url'].'/ssh.php?key='.$_SESSION['key']; ?>&id=\"+$(\"#selected_items\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\n/*\n**\n*/\nfunction showPasswordsHistory() {\n    if ($('#edit_past_pwds_div').text() !== \"\") {\n        $('#edit_past_pwds_div').toggle();\n    }\n}\n\n$.fn.simulateClick = function() {\n    return this.each(function() {\n        if('createEvent' in document) {\n            var doc = this.ownerDocument,\n                evt = doc.createEvent('MouseEvents');\n            evt.initMouseEvent('click', true, true, doc.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n            this.dispatchEvent(evt);\n        } else {\n            this.click(); // IE Boss!\n        }\n    });\n}\n\n\n// escape HTML characters\nString.prototype.escapeHTML = function() {\n    return this.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n//]]>\n</script>\n", "<?php\n/**\n *\n * @file          items.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], curPage())) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare GET variables\n$get_group = $superGlobal->get(\"group\", \"GET\");\n$get_id = $superGlobal->get(\"id\", \"GET\");\n\n// Prepare SESSION variables\n$session_user_admin = $superGlobal->get(\"user_admin\", \"SESSION\");\n\n\nif ($session_user_admin === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n    && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n    $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n    $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n}\n\n// Get list of users\n$usersList = array();\n$rows = DB::query(\"SELECT id,login,email FROM \".$pre.\"users ORDER BY login ASC\");\nforeach ($rows as $record) {\n    $usersList[$record['login']] = array(\n        \"id\" => $record['id'],\n        \"login\" => $record['login'],\n        \"email\" => $record['email'],\n        );\n}\n// Get list of roles\n$arrRoles = array();\n$listRoles = \"\";\n$rows = DB::query(\"SELECT id,title FROM \".$pre.\"roles_title ORDER BY title ASC\");\nforeach ($rows as $reccord) {\n    $arrRoles[$reccord['title']] = array(\n        'id' => $reccord['id'],\n        'title' => $reccord['title']\n        );\n    if (empty($listRoles)) {\n        $listRoles = $reccord['id'].'#'.$reccord['title'];\n    } else {\n        $listRoles .= ';'.$reccord['id'].'#'.$reccord['title'];\n    }\n}\n\n// Hidden things\necho '\n<input type=\"hidden\" name=\"hid_cat\" id=\"hid_cat\" value=\"', $get_group !== null ? $get_group : \"\", '\" />\n<input type=\"hidden\" id=\"complexite_groupe\" value=\"\" />\n<input type=\"hidden\" name=\"selected_items\" id=\"selected_items\" value=\"\" />\n<input type=\"hidden\" id=\"bloquer_creation_complexite\" value=\"\" />\n<input type=\"hidden\" id=\"bloquer_modification_complexite\" value=\"\" />\n<input type=\"hidden\" id=\"error_detected\" value=\"\" />\n<input type=\"hidden\" name=\"random_id\" id=\"random_id\" value=\"\" />\n<input type=\"hidden\" id=\"edit_wysiwyg_displayed\" value=\"\" />\n<input type=\"hidden\" id=\"richtext_on\" value=\"1\" />\n<input type=\"hidden\" id=\"query_next_start\" value=\"0\" />\n<input type=\"hidden\" id=\"display_categories\" value=\"0\" />\n<input type=\"hidden\" id=\"nb_items_to_display_once\" value=\"', isset($SETTINGS['nb_items_by_query']) ? htmlspecialchars($SETTINGS['nb_items_by_query']) : 'auto', '\" />\n<input type=\"hidden\" id=\"user_is_read_only\" value=\"', isset($_SESSION['user_read_only']) && $_SESSION['user_read_only'] == 1 ? '1' : '', '\" />\n<input type=\"hidden\" id=\"request_ongoing\" value=\"\" />\n<input type=\"hidden\" id=\"request_lastItem\" value=\"\" />\n<input type=\"hidden\" id=\"item_editable\" value=\"\" />\n<input type=\"hidden\" id=\"timestamp_item_displayed\" value=\"\" />\n<input type=\"hidden\" id=\"pf_selected\" value=\"\" />\n<input type=\"hidden\" id=\"user_ongoing_action\" value=\"\" />\n<input type=\"hidden\" id=\"input_list_roles\" value=\"'.htmlentities($listRoles).'\" />\n<input type=\"hidden\" id=\"path_fontsize\" value=\"\" />\n<input type=\"hidden\" id=\"access_level\" value=\"\" />\n<input type=\"hidden\" id=\"empty_clipboard\" value=\"\" />\n<input type=\"hidden\" id=\"selected_folder_is_personal\" value=\"\" />\n<input type=\"hidden\" id=\"personal_visible_groups_list\" value=\"', isset($_SESSION['personal_visible_groups_list']) ? $_SESSION['personal_visible_groups_list'] : \"\", '\" />\n<input type=\"hidden\" id=\"create_item_without_password\" value=\"', isset($SETTINGS['create_item_without_password']) ? $SETTINGS['create_item_without_password'] : \"0\", '\" />';\n// Hidden objects for Item search\nif ($get_group !== null && $get_id !== null) {\n    echo '\n    <input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"'.$get_group.'\" />\n    <input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"'.$get_id.'\" />\n    <input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"', in_array($get_group, $_SESSION['personal_visible_groups']) ? '1' : '0', '\" />\n    <input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"true\" />';\n} elseif ($get_group !== null && $get_id === null) {\n    echo '<input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"'.$get_group.'\" />';\n    echo '<input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"', in_array($get_group, $_SESSION['personal_visible_groups']) ? '1' : '0', '\" />';\n    echo '<input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"\" />';\n} else {\n    echo '<input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"\" />';\n}\n// Is personal SK available\necho '\n<input type=\"hidden\" name=\"personal_sk_set\" id=\"personal_sk_set\" value=\"', isset($_SESSION['user_settings']['session_psk']) && !empty($_SESSION['user_settings']['session_psk']) ? '1' : '0', '\" />\n<input type=\"hidden\" id=\"personal_upgrade_needed\" value=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 && $session_user_admin !== '1' && isset($_SESSION['user_upgrade_needed']) && $_SESSION['user_upgrade_needed'] == 1 ? '1' : '0', '\" />';\n// define what group todisplay in Tree\nif (isset($_COOKIE['jstree_select']) && !empty($_COOKIE['jstree_select'])) {\n    $firstGroup = str_replace(\"#li_\", \"\", $_COOKIE['jstree_select']);\n} else {\n    $firstGroup = \"\";\n}\n\necho '\n<input type=\"hidden\" name=\"jstree_group_selected\" id=\"jstree_group_selected\" value=\"'.htmlspecialchars($firstGroup).'\" />\n<input type=\"hidden\" id=\"item_user_token\" value=\"\" />\n<input type=\"hidden\" id=\"items_listing_should_stop\" value=\"\" />\n<input type=\"hidden\" id=\"new_listing_characteristics\" value=\"\" />\n<input type=\"hidden\" id=\"uniqueLoadData\" value=\"\" />';\n\necho '\n<div id=\"div_items\">';\n// MAIN ITEMS TREE\necho '\n    <div class=\"items_tree\">\n        <div id=\"quick_menu\" style=\"float:left; margin-right: 5px;\">\n            <ul class=\"quick_menu\">\n                <li><i class=\"fa fa-bars\"></i>\n                    <ul class=\"menu_250\">\n                        <li id=\"jstree_open\"><i class=\"fa fa-expand fa-fw\"></i>&nbsp; '.$LANG['expand'].'</li>\n                        <li id=\"jstree_close\"><i class=\"fa fa-compress fa-fw\"></i>&nbsp; '.$LANG['collapse'].'</li>\n                        <li onclick=\"refreshTree()\"><i class=\"fa fa-refresh fa-fw\"></i>&nbsp; '.$LANG['refresh'].'</li>\n                        <li onclick=\"open_add_group_div()\"><i class=\"fa fa-plus fa-fw\"></i>&nbsp; '.$LANG['item_menu_add_rep'].'</li>\n                        <li onclick=\"open_edit_group_div()\"><i class=\"fa fa-pencil fa-fw\"></i>&nbsp; '.$LANG['item_menu_edi_rep'].'</li>\n                        <li onclick=\"open_move_group_div()\"><i class=\"fa fa-arrows fa-fw\"></i>&nbsp; '.$LANG['item_menu_mov_rep'].'</li>\n                        <li onclick=\"open_del_group_div()\"><i class=\"fa fa-eraser fa-fw\"></i>&nbsp; '.$LANG['item_menu_del_rep'].'</li>\n                        <li onclick=\"$(\\'#div_copy_folder\\').dialog(\\'open\\');\"><i class=\"fa fa-copy fa-fw\"></i>&nbsp; '.$LANG['copy_folder'].'</li>\n                        ', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 && $session_user_admin !== '1' ? '<li onclick=\"loadImportDialog()\"><i class=\"fa fa-cloud-upload fa-fw\"></i>&nbsp; '.$LANG['import_csv_menu_title'].'</li>' : '',\n                        (isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 && $session_user_admin !== '1' && $_SESSION['temporary']['user_can_printout'] === true) ? '<li onclick=\"loadExportDialog()\"><i class=\"fa fa-cloud-download fa-fw\"></i>&nbsp; '.$LANG['print_out_menu_title'].'</li>' : '',\n                        (isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 && $session_user_admin !== '1') ? '<li onclick=\"loadOfflineDialog()\"><i class=\"fa fa-laptop fa-fw\"></i>&nbsp; '.$LANG['offline_menu_title'].'</li>' : '', '\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <div style=\"margin:3px 0px 10px 18px;font-weight:bold;\">\n            '.$LANG['items_browser_title'].'\n            <input type=\"text\" name=\"jstree_search\" id=\"jstree_search\" class=\"text ui-widget-content ui-corner-all search_tree\" value=\"'.htmlentities(strip_tags($LANG['item_menu_find']), ENT_QUOTES).'\" />\n        </div>\n        <div id=\"sidebar\" class=\"sidebar\">\n            <div id=\"jstree\" style=\"overflow:auto;\"></div>\n        </div>\n    </div>';\n// Zone top right - items list\necho '\n    <div id=\"items_content\">\n        <div id=\"items_center\">\n            <div id=\"items_path\" class=\"ui-corner-all\">\n                <div class=\"quick_menu1\" style=\"float:left; margin-right: 5px;\">\n                    <ul class=\"quick_menu\">\n                        <li><i class=\"fa fa-bars\"></i>\n                            <ul class=\"menu_250\">\n                                <li id=\"menu_button_add_item\" onclick=\"open_add_item_div()\"><i class=\"fa fa-plus fa-fw\"></i>&nbsp; '.$LANG['item_menu_add_elem'].'</li>\n                                <li id=\"menu_button_edit_item\" onclick=\"open_edit_item_div(', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? 1 : 0, ')\"><i class=\"fa fa-pencil fa-fw\"></i>&nbsp; '.$LANG['item_menu_edi_elem'].'</li>\n                                <li id=\"menu_button_del_item\" onclick=\"open_del_item_div()\"><i class=\"fa fa-eraser fa-fw\"></i>&nbsp; '.$LANG['item_menu_del_elem'].'</li>\n                                <li id=\"menu_button_copy_item\" onclick=\"open_copy_item_to_folder_div()\"><i class=\"fa fa-copy fa-fw\"></i>&nbsp; '.$LANG['item_menu_copy_elem'].'</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n\n                <div style=\"margin-top: 3px;\">\n                    <div id=\"txt1\"  style=\"float:left;\">\n                        <span id=\"items_path_var\"></span>\n                    </div>\n\n                    <div class=\"input-group margin-bottom-sm\" style=\"float:right; margin-top:-1px;\">\n                        <span class=\"input-group-addon\"><i class=\"fa fa-binoculars fa-fw\"></i></span>\n                        <input class=\"form-control text ui-widget-content\" type=\"text\" onkeypress=\"javascript:if (event.keyCode == 13) globalItemsSearch();\" id=\"search_item\" />\n                    </div>\n\n                    <i id=\"items_list_loader\" style=\"float:right;margin-right:5px;\" class=\"fa fa-cog fa-spin mi-red hidden\"></i>&nbsp;\n                </div>\n            </div>\n            <div id=\"items_list\"></div>\n        </div>';\n// Zone ITEM DETAIL\necho '\n        <div id=\"item_details_ok\">\n            <input type=\"hidden\" id=\"id_categorie\" value=\"\" />\n            <input type=\"hidden\" id=\"id_item\" value=\"\" />\n            <input type=\"hidden\" id=\"hid_anyone_can_modify\" value=\"\" />\n            <div style=\"height:220px;overflow-y:auto;\" id=\"item_details_scroll\">\n                <div id=\"handle\" class=\"ui-resizable-handle ui-resizable-n\"></div>';\n\necho'\n                <div id=\"item_details_expired\" style=\"display:none;background-color:white; margin:5px;\">\n                    <div class=\"ui-state-error ui-corner-all\" style=\"padding:2px;\">\n                        <i class=\"fa fa-warning\"></i>&nbsp;<b>'.$LANG['pw_is_expired_-_update_it'].'</b>\n                    </div>\n                </div>\n                <table width=\"100%\" id=\"item_details_table\">';\n// Line for LABEL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\" colspan=\"2\">\n                        <div class=\"quick_menu2\" style=\"float:left; margin-right: 5px;\">\n                            <ul class=\"quick_menu ui-menu\">\n                                <li><i class=\"fa fa-bars\"></i>\n                                    <ul class=\"menu_250\">\n                                        <li id=\"menu_button_copy_pw\" class=\"copy_clipboard\"><i class=\"fa fa-lock fa-fw\"></i>&nbsp; '.$LANG['pw_copy_clipboard'].'</li>\n                                        <li id=\"menu_button_copy_login\" class=\"copy_clipboard\"><i class=\"fa fa-user fa-fw\"></i>&nbsp; '.$LANG['login_copy'].'</li>\n                                        <li id=\"menu_button_show_pw\" onclick=\"ShowPassword()\"><i class=\"fa fa-eye fa-fw\"></i>&nbsp; '.$LANG['mask_pw'].'</li>\n                                        <li id=\"menu_button_copy_link\" class=\"copy_clipboard\"><i class=\"fa fa-link fa-fw\"></i>&nbsp; '.$LANG['url_copy'].'</li>\n                                        <li id=\"menu_button_history\" onclick=\"OpenDialog(\\'div_item_history\\', \\'false\\')\"><i class=\"fa fa-history fa-fw\"></i>&nbsp; '.$LANG['history'].'</li>\n                                        <li id=\"menu_button_share\" onclick=\"OpenDialog(\\'div_item_share\\', \\'false\\')\"><i class=\"fa fa-share fa-fw\"></i>&nbsp; '.$LANG['share'].'</li>',\n                                        (isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1) ? '<li id=\"menu_button_otv\" onclick=\"prepareOneTimeView()\"><i class=\"fa fa-users fa-fw\"></i>&nbsp; '.$LANG['one_time_item_view'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? '\n                                        <li id=\"menu_button_notify\"><i class=\"fa fa-volume-up fa-fw\"></i>&nbsp; '.$LANG['notify_me_on_change'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 && isset($_SESSION['user_read_only']) && $_SESSION['user_read_only'] !== \"1\" ? '\n                                        <li onclick=\"serverAutoChangePwd()\"><i class=\"fa fa-server fa-fw\"></i>&nbsp; '.$LANG['update_server_password'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? '\n                                        <li onclick=\"OpenDialog(\\'div_suggest_change\\', \\'false\\')\"><i class=\"fa fa-random fa-fw\"></i>&nbsp; '.$LANG['suggest_password_change'].'</li>' : '', '\n                                    </ul>\n                                </li>\n                            </ul>\n                        </div>\n                        <div id=\"id_label\" style=\"display:inline; margin:4px 0px 0px 120px; \"></div>\n                        <input type=\"hidden\" id=\"hid_label\" value=\"', isset($dataItem) ? htmlspecialchars($dataItem['label']) : '', '\" />\n                        <div style=\"float:right; font-family:arial; margin-right:5px;\" id=\"item_viewed_x_times\"></div>\n\n                        <!-- INFO -->\n                        <div class=\"\" style=\"float:right;margin-right:5px;\" id=\"item_extra_info\" title=\"\"></div>\n                        <!-- INFO END -->\n\n                    </td>\n                </tr>';\n// Line for DESCRIPTION\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\" width=\"180px\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['description'].' :</td>\n                    <td>\n                        <div id=\"id_desc\" style=\"font-style:italic;display:inline;\"></div><input type=\"hidden\" id=\"hid_desc\" value=\"', isset($dataItem) ? htmlspecialchars($dataItem['description']) : '', '\" />\n                    </td>\n                </tr>';\n// Line for PW\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['pw'].' :<span id=\"button_quick_pw_copy\" class=\"fa fa-paste fa-border fa-sm tip\" style=\"cursor:pointer;display:none;float:right;margin-right:2px;\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i></td>\n                    <td>\n                        &nbsp;\n                        <div id=\"id_pw\" class=\"unhide_masked_data\" style=\"float:left; cursor:pointer; width:300px;\"></div>\n                        <input type=\"hidden\" id=\"hid_pw\" value=\"\" />\n                        <input type=\"hidden\" id=\"pw_shown\" value=\"0\" />\n                    </td>\n                </tr>';\n// Line for LOGIN\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['index_login'].' :<span id=\"button_quick_login_copy\" class=\"fa fa-paste fa-border fa-sm tip\" style=\"cursor:pointer;display:none;float:right;margin-right:2px;\" title=\"'.$LANG['item_menu_copy_login'].'\"></span></td>\n                    <td>\n                        <div id=\"id_login\" style=\"float:left;\"></div>\n                        <input type=\"hidden\" id=\"hid_login\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for EMAIL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['email'].' :</td>\n                    <td>\n                        <div id=\"id_email\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_email\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for URL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['url'].' :</td>\n                    <td>\n                        <div id=\"id_url\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_url\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for FILES\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['files_&_images'].' :</td>\n                    <td>\n                        <div id=\"id_files\" style=\"display:inline;font-size:11px;\"></div><input type=\"hidden\" id=\"hid_files\" />\n                        <div id=\"dialog_files\" style=\"display: none;\">\n\n                        </div>\n                    </td>\n                </tr>';\n// Line for RESTRICTED TO\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['restricted_to'].' :</td>\n                    <td>\n                        <div id=\"id_restricted_to\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_restricted_to\" /><input type=\"hidden\" id=\"hid_restricted_to_roles\" />\n                    </td>\n                </tr>';\n// Line for TAGS\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['tags'].' :</td>\n                    <td>\n                        <div id=\"id_tags\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_tags\" />\n                    </td>\n                </tr>';\n// Line for KBs\nif (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n    echo '\n                    <tr>\n                        <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['kbs'].' :</td>\n                        <td>\n                            <div id=\"id_kbs\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_kbs\" />\n                        </td>\n                    </tr>';\n}\n// lines for FIELDS\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    foreach ($_SESSION['item_fields'] as $elem) {\n        $itemCatName = $elem[0];\n        echo '\n                    <tr class=\"tr_fields hidden\" id=\"tr_catfield_'.$elem[0].'\">\n                        <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$elem[1].' :</td>\n                        <td></td>\n                    </tr>';\n        foreach ($elem[2] as $field) {\n            echo '\n                    <tr class=\"tr_cf tr_fields hidden\" id=\"cf_tr_'.$field[0].'\">\n                        <td valign=\"top\" class=\"td_title\">&nbsp;&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;<i>'.$field[1].'</i> :</td>\n                        <td>';\n            if ($field[3] === \"masked\") {\n                echo '\n                            <div id=\"id_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" style=\"float:left; cursor:pointer; width:300px;\" class=\"fields_div unhide_masked_data pointer\"></div><input type=\"hidden\" id=\"hid_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" class=\"fields\" />';\n            } else {\n                echo '\n                            <div id=\"id_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" style=\"display:inline;\" class=\"fields_div\"></div><input type=\"hidden\" id=\"hid_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" class=\"fields\" />';\n            }\n            echo '\n                        </td>\n                    </tr>';\n        }\n    }\n}\necho '\n                </table>\n            </div>\n        </div>';\n// # NOT ALLOWED\necho '\n        <div id=\"item_details_nok\" class=\"hidden\" style=\"width:400px; margin:20px auto 20px auto;\">\n            <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['not_allowed_to_see_pw'].'</b>\n                <span id=\"item_details_nok_restriction_list\"></span>\n            </div>\n        </div>';\n// DATA EXPIRED\necho '\n        <div id=\"item_details_expired_full\" style=\"display:none; width:400px; margin:20px auto 20px auto;\">\n            <div class=\"ui-state-error ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['pw_is_expired_-_update_it'].'</b>\n            </div>\n        </div>';\n// # NOT ALLOWED\necho '\n        <div id=\"item_details_no_personal_saltkey\" style=\"display:none; width:400px; margin:20px auto 20px auto; height:180px;\">\n            <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['home_personal_saltkey_info'].'</b>\n            </div>\n        </div>';\n\necho '\n    </div>';\n\necho '\n</div>';\n\n\n/********************************\n* NEW Item Form\n*/\necho '\n<div id=\"div_formulaire_saisi\" style=\"display:none;\">\n    <form method=\"post\" name=\"new_item\" action=\"\">\n        <div id=\"afficher_visibilite\" style=\"text-align:center;margin-bottom:6px;height:20px;\"></div>\n        <div id=\"display_title\" style=\"text-align:center;margin-bottom:6px;font-size:17px;font-weight:bold;height:25px;\"></div>\n        <div id=\"new_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n\n        <div id=\"item_tabs\">\n        <ul>\n            <li><a href=\"#tabs-01\">'.$LANG['definition'].'</a></li>\n            <li><a href=\"#tabs-02\">'.$LANG['index_password'].' &amp; '.$LANG['visibility'].'</a></li>\n            <li><a href=\"#tabs-03\">'.$LANG['files_&_images'].'</a></li>\n            ', isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1 ?\n            '<li id=\"form_tab_fields\"><a href=\"#tabs-04\">'.$LANG['more'].'</a></li>' : '', '\n        </ul>\n        <div id=\"tabs-01\">';\n// Line for LABEL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['label'].' : </label>\n            <input type=\"text\" name=\"label\" id=\"label\" onchange=\"checkTitleDuplicate(this.value, \\'', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 0 : 1, '\\', \\'', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 0 : 1, '\\', \\'display_title\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for DESCRIPTION\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['description'].' : </label>\n            <span id=\"desc_span\">\n                <textarea rows=\"5\" cols=\"60\" name=\"desc\" id=\"desc\" class=\"input_text\"></textarea>\n            </span>\n            <br />';\n// Line for FOLDERS\necho '\n            <label for=\"\" class=\"\">'.$LANG['group'].' : </label>\n            <select name=\"categorie\" id=\"categorie\" onchange=\"RecupComplexite(this.value,0)\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\"><option style=\"display: none;\"></option></select>';\n// Line for LOGIN\necho '\n            <label for=\"\" class=\"label_cpm\" style=\"margin-top:10px;\">'.$LANG['login'].' : </label>\n            <input type=\"text\" name=\"item_login\" id=\"item_login\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for EMAIL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['email'].' : </label>\n            <input type=\"text\" name=\"email\" id=\"email\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for URL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['url'].' : </label>\n            <input type=\"text\" name=\"url\" id=\"url\" class=\"input_text text ui-widget-content ui-corner-all\" />\n        </div>';\n// Tabs Items N?2\necho '\n        <div id=\"tabs-02\">';\n// Line for folder complexity\necho'\n            <div style=\"margin-bottom:10px;\" id=\"expected_complexity\">\n                <label for=\"\" class=\"form_label_180\">'.$LANG['complex_asked'].'</label>\n                <span id=\"complex_attendue\" style=\"color:#D04806; margin-left:40px;\"></span>\n            </div>';\n// Line for PW\necho '\n            <label class=\"label_cpm\">'.$LANG['used_pw'].' :<span id=\"prout\"></span>\n                <span id=\"visible_pw\" style=\"display:none;margin-left:10px;font-weight:bold;\"></span>\n                <span id=\"pw_wait\" style=\"display:none;margin-left:10px;\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n            </label>\n            <input type=\"password\" id=\"pw1\" class=\"input_text text ui-widget-content ui-corner-all\" />\n            <input type=\"hidden\" id=\"mypassword_complex\" />\n            <label for=\"\" class=\"label_cpm\">'.$LANG['index_change_pw_confirmation'].' :</label>\n            <input type=\"password\" name=\"pw2\" id=\"pw2\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <div style=\"font-size:9px; text-align:center; width:100%;\">\n                <span id=\"custom_pw\">\n                    <input type=\"checkbox\" id=\"pw_numerics\" /><label for=\"pw_numerics\">123</label>\n                    <input type=\"checkbox\" id=\"pw_maj\" /><label for=\"pw_maj\">ABC</label>\n                    <input type=\"checkbox\" id=\"pw_symbols\" /><label for=\"pw_symbols\">@#&amp;</label>\n                    <input type=\"checkbox\" id=\"pw_secure\" checked=\"checked\" /><label for=\"pw_secure\">'.$LANG['secure'].'</label>\n                    &nbsp;<label for=\"pw_size\">'.$LANG['size'].' : </label>\n                    &nbsp;<input type=\"text\" size=\"2\" id=\"pw_size\" value=\"8\" style=\"font-size:10px;\" />\n                </span>\n\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['pw_generate'].'\" onclick=\"pwGenerate(\\'\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['copy'].'\" onclick=\"pwCopy(\\'\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-copy fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['mask_pw'].'\" onclick=\"showPwd()\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-eye fa-stack-1x fa-inverse\"></i>\n                </span>\n            </div>\n            <div style=\"width:100%;\">\n                <div id=\"pw_strength\" style=\"margin:5px 0 5px 120px;\"></div>\n            </div>';\n\n// Line for RESTRICTED TO\nif (isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1) {\n    echo '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['restricted_to'].' : </label>\n            <select name=\"restricted_to_list\" id=\"restricted_to_list\" multiple=\"multiple\" style=\"width:100%;\" class=\"ui-widget-content\"></select>\n            <input type=\"hidden\" name=\"restricted_to\" id=\"restricted_to\" />\n            <input type=\"hidden\" size=\"50\" name=\"restricted_to_roles\" id=\"restricted_to_roles\" />\n            <div style=\"line-height:10px;\">&nbsp;</div>';\n}\n// Line for TAGS\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['tags'].' : </label>\n            <input type=\"text\" name=\"item_tags\" id=\"item_tags\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for Item modification\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"anyone_can_modify\" id=\"anyone_can_modify\"',\n                    isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] == 1 ?\n                    ' checked=\"checked\"' : '', ' />\n                <label for=\"anyone_can_modify\">'.$LANG['anyone_can_modify'].'</label>\n            </div>';\n// Line for Item automatically deleted\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"enable_delete_after_consultation\" id=\"enable_delete_after_consultation\" />\n                <label for=\"enable_delete_after_consultation\">'.$LANG['enable_delete_after_consultation'].'</label>\n                <input type=\"text\" value=\"1\" size=\"1\" id=\"times_before_deletion\" />&nbsp;'.$LANG['times'].'&nbsp;\n                '.$LANG['automatic_del_after_date_text'].'&nbsp;<input type=\"text\" value=\"\" class=\"datepicker\" readonly=\"readonly\" size=\"10\" id=\"deletion_after_date\" onchange=\"$(\\'#times_before_deletion\\').val(\\'\\')\" />\n            </div>';\n// Line for EMAIL\necho '\n            <div>\n                <div style=\"line-height:10px;\">&nbsp;</div>\n                <label for=\"\" class=\"label_cpm\">'.$LANG['email_announce'].' : </label>\n                <select id=\"annonce_liste_destinataires\" multiple=\"multiple\" style=\"width:100%\">';\nforeach ($usersList as $user) {\n                    echo '<option value=\"'.$user['email'].'\">'.$user['login'].'</option>';\n}\n                echo '\n                </select>\n            </div>';\n\necho '\n\n        </div>';\n// Tabs EDIT N?3\necho '\n        <div id=\"tabs-03\">\n            <div id=\"item_upload\">\n                <div id=\"item_upload_list\"></div><br />\n                <div id=\"item_upload_wait\" class=\"ui-state-focus ui-corner-all\" style=\"display:none;padding:2px;margin:5px 0 5px 0;\">'.$LANG['please_wait'].'...</div>\n                <a id=\"item_attach_pickfiles\" href=\"#\" class=\"button\">'.$LANG['select'].'</a>\n                <a id=\"item_attach_uploadfiles\" href=\"#\" class=\"button\">'.$LANG['start_upload'].'</a>\n                <input type=\"hidden\" id=\"files_number\" value=\"0\" />\n            </div>\n        </div>';\n// Tabs N\u00b04\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    echo '\n        <div id=\"tabs-04\">\n            <div id=\"item_more\">';\n    // load all categories and fields\n    foreach ($_SESSION['item_fields'] as $elem) {\n        $itemCatName = $elem[0];\n        echo '\n                <div id=\"newItemCatName_'.$itemCatName.'\" class=\"newItemCat\">\n                    <div style=\"font-weight:bold;font-size:12px;\">\n                        <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$elem[1].'\n                    </div>';\n        foreach ($elem[2] as $field) {\n                echo '\n                    <div style=\"margin:2px 0 2px 15px;\">\n                        <span class=\"fa fa-tag mi-grey-1\">&nbsp;</span>\n                        <label class=\"cpm_label\">'.$field[1].'</span>\n                        <input type=\"text\" id=\"field_'.$field[0].'_'.$field[2].'\" class=\"item_field input_text text ui-widget-content ui-corner-all\" size=\"40\">\n                    </div>';\n        }\n        echo '\n                </div>';\n    }\n    echo '\n            </div>\n        </div>';\n}\necho '\n    </div>';\necho '\n    </form>\n    <div style=\"display:none; padding:5px; margin-top:5px; text-align:center;\" id=\"div_formulaire_saisi_info\" class=\"ui-state-default ui-corner-all\"></div>\n</div>';\n\n/***************************\n* Edit Item Form\n*/\necho '\n<div id=\"div_formulaire_edition_item\" style=\"display:none;\">\n    <form method=\"post\" name=\"form_edit\" action=\"\">\n    <div id=\"edit_afficher_visibilite\" style=\"text-align:center;margin-bottom:6px;height:25px;\"></div>\n    <div id=\"edit_display_title\" style=\"text-align:center;margin-bottom:6px;font-size:17px;font-weight:bold;height:25px;\"></div>\n    <div id=\"edit_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>';\n// Prepare TABS\necho '\n    <div id=\"item_edit_tabs\">\n        <ul>\n            <li><a href=\"#tabs-1\">'.$LANG['definition'].'</a></li>\n            <li><a href=\"#tabs-2\">'.$LANG['index_password'].' &amp; '.$LANG['visibility'].'</a></li>\n            <li><a href=\"#tabs-3\">'.$LANG['files_&_images'].'</a></li>\n            ', isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1 ?\n            '<li id=\"form_edit_tab_fields\"><a href=\"#tabs-4\">'.$LANG['more'].'</a></li>' : '', '\n        </ul>\n        <div id=\"tabs-1\">\n            <label for=\"\" class=\"cpm_label\">'.$LANG['label'].' : </label>\n            <input type=\"text\" size=\"60\" id=\"edit_label\" onchange=\"checkTitleDuplicate(this.value, \\'', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 0 : 1, '\\', \\'', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 0 : 1, '\\', \\'edit_display_title\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['description'].'&nbsp;<span class=\"fa fa-eraser\" style=\"cursor:pointer;\" onclick=\"clear_html_tags()\"></span>&nbsp;</label>\n            <span id=\"edit_desc_span\">\n                <textarea rows=\"5\" cols=\"70\" id=\"edit_desc\" name=\"edit_desc\" class=\"input_text\"></textarea>\n            </span>';\n// Line for FOLDER\necho '\n            <div style=\"margin:10px 0px 10px 0px;\">\n            <label for=\"\" class=\"\">'.$LANG['group'].' : </label>\n            <select id=\"edit_categorie\" onchange=\"RecupComplexite(this.value,1)\" style=\"width:100%;\"><option style=\"display: none;\"></option></select>\n            </div>';\n// Line for LOGIN\necho '\n            <label for=\"\" class=\"cpm_label\">'.$LANG['login'].' : </label>\n            <input type=\"text\" id=\"edit_item_login\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['email'].' : </label>\n            <input type=\"text\" id=\"edit_email\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['url'].' : </label>\n            <input type=\"text\" id=\"edit_url\" class=\"input_text text ui-widget-content ui-corner-all\" />\n        </div>';\n// TABS edit n?2\necho '\n        <div id=\"tabs-2\">';\n// Line for folder complexity\necho'\n            <div style=\"margin-bottom:10px;\" id=\"edit_expected_complexity\">\n                <label for=\"\" class=\"cpm_label\">'.$LANG['complex_asked'].'</label>\n                <span id=\"edit_complex_attendue\" style=\"color:#D04806;\"></span>\n            </div>';\n\necho '\n            <div style=\"line-height:20px;\">\n                <label for=\"\" class=\"label_cpm\">'.$LANG['used_pw'].' :\n                    <span id=\"edit_visible_pw\" style=\"display:none;margin-left:10px;font-weight:bold; padding:2px;\" class=\"ui-corner-all ui-state-default\"></span>\n                    <span id=\"edit_pw_wait\" style=\"margin-left:10px;\" class=\"hidden\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n                </label>\n                <input type=\"password\" id=\"edit_pw1\" class=\"input_text text ui-widget-content ui-corner-all\" style=\"width:390px;\" />\n                <span class=\"fa fa-history tip\" style=\"cursor:pointer;\" id=\"edit_past_pwds\" onclick=\"showPasswordsHistory()\"></span>\n                <div style=\"display:none; padding:3px; width:390px; font-weight:normal; font-size:11px; font-family:italic;\" id=\"edit_past_pwds_div\" class=\"ui-corner-all ui-state-default\"></div>\n                <input type=\"hidden\" id=\"edit_mypassword_complex\" />\n\n                <label for=\"\" class=\"cpm_label\">'.$LANG['confirm'].' : </label>\n                <input type=\"password\" id=\"edit_pw2\" class=\"input_text text ui-widget-content ui-corner-all\" style=\"width:390px;\" />\n            </div>\n            <div style=\"font-size:9px; text-align:center; width:100%;\">\n                <span id=\"edit_custom_pw\">\n                    <input type=\"checkbox\" id=\"edit_pw_numerics\" /><label for=\"edit_pw_numerics\">123</label>\n                    <input type=\"checkbox\" id=\"edit_pw_maj\" /><label for=\"edit_pw_maj\">ABC</label>\n                    <input type=\"checkbox\" id=\"edit_pw_symbols\" /><label for=\"edit_pw_symbols\">@#&amp;</label>\n                    <input type=\"checkbox\" id=\"edit_pw_secure\" checked=\"checked\" /><label for=\"edit_pw_secure\">'.$LANG['secure'].'</label>\n                    &nbsp;<label for=\"edit_pw_size\">'.$LANG['size'].' : </label>\n                    &nbsp;<input type=\"text\" size=\"2\" id=\"edit_pw_size\" value=\"8\" style=\"font-size:10px;\" />\n                </span>\n\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['pw_generate'].'\" onclick=\"pwGenerate(\\'edit\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['copy'].'\" onclick=\"pwCopy(\\'edit\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-copy fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['mask_pw'].'\" onclick=\"ShowPasswords_EditForm()\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-eye fa-stack-1x fa-inverse\"></i>\n                </span>\n            </div>\n            <div style=\"width:100%;\">\n                <div id=\"edit_pw_strength\" style=\"margin:5px 0 5px 120px;\"></div>\n            </div>';\n\nif (isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1) {\n    echo '\n            <div id=\"div_editRestricted\">\n                <label for=\"\" class=\"label_cpm\">'.$LANG['restricted_to'].' : </label>\n                <select name=\"edit_restricted_to_list\" id=\"edit_restricted_to_list\" multiple=\"multiple\" style=\"width:100%\"></select>\n                <input type=\"hidden\" size=\"50\" name=\"edit_restricted_to\" id=\"edit_restricted_to\" />\n                <input type=\"hidden\" size=\"50\" name=\"edit_restricted_to_roles\" id=\"edit_restricted_to_roles\" />\n                <div style=\"line-height:10px;\">&nbsp;</div>\n            </div>';\n}\n\necho '\n            <label for=\"\" class=\"cpm_label\">'.$LANG['tags'].' : </label>\n            <input type=\"text\" size=\"50\" name=\"edit_tags\" id=\"edit_tags\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for Item modification\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"edit_anyone_can_modify\" id=\"edit_anyone_can_modify\"',\n                    isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] == 1 ?\n                    ' checked=\"checked\"' : '', ' />\n                <label for=\"edit_anyone_can_modify\">'.$LANG['anyone_can_modify'].'</label>\n            </div>';\n// Line for Item automatically deleted\necho '\n            <div id=\"edit_to_be_deleted\" style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"edit_enable_delete_after_consultation\" id=\"edit_enable_delete_after_consultation\" />\n                <label for=\"edit_enable_delete_after_consultation\">'.$LANG['enable_delete_after_consultation'].'</label>\n                <input type=\"text\" value=\"\" size=\"1\" id=\"edit_times_before_deletion\" onchange=\"$(\\'#edit_deletion_after_date\\').val(\\'\\')\" />&nbsp;'.$LANG['times'].'&nbsp;\n                '.$LANG['automatic_del_after_date_text'].'&nbsp;<input type=\"text\" value=\"\" class=\"datepicker\" readonly=\"readonly\" size=\"10\" id=\"edit_deletion_after_date\" onchange=\"$(\\'#edit_times_before_deletion\\').val(\\'\\')\" />\n            </div>';\n\necho '\n            <div id=\"div_anounce_change_by_email\">\n                <div style=\"line-height:10px;\">&nbsp;</div>\n                <label for=\"\" class=\"label_cpm\">'.$LANG['email_announce'].' : </label>\n                <select id=\"edit_annonce_liste_destinataires\" multiple=\"multiple\" style=\"width:100%\">';\nforeach ($usersList as $user) {\n    echo '<option value=\"'.$user['email'].'\">'.$user['login'].'</option>';\n}\necho '\n                </select>\n            </div>';\n\necho '\n        </div>';\n// Tab EDIT N\u00b03\necho '\n        <div id=\"tabs-3\">\n            <div style=\"font-weight:bold;font-size:12px;\">\n                <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$LANG['uploaded_files'].'\n            </div>\n            <div id=\"item_edit_list_files\" style=\"margin-left:5px;\"></div>\n            <div style=\"margin-top:10px;font-weight:bold;font-size:12px;\">\n                <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$LANG['upload_files'].'\n            </div>\n            <div id=\"item_edit_upload\">\n                <div id=\"item_edit_upload_list\"></div><br />\n                <div id=\"item_edit_upload_wait\" class=\"ui-state-focus ui-corner-all\" style=\"display:none;padding:2px;margin:5px 0 5px 0;\">'.$LANG['please_wait'].'...</div>\n                <a id=\"item_edit_attach_pickfiles\" href=\"#\" class=\"button\">'.$LANG['select'].'</a>\n                <a id=\"item_edit_attach_uploadfiles\" href=\"#sd\" class=\"button\">'.$LANG['start_upload'].'</a>\n                <input type=\"hidden\" id=\"edit_files_number\" value=\"0\" />\n            </div>\n        </div>';\n// Tabs EDIT N\u00b04 -> Categories\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    echo '\n        <div id=\"tabs-4\">\n            <div id=\"edit_item_more\">';\n    // load all categories and fields\n    foreach ($_SESSION['item_fields'] as $elem) {\n        echo '\n                <div class=\"editItemCat\" id=\"editItemCatName_'.$elem[0].'\">\n                    <div style=\"font-weight:bold;font-size:12px;\">\n                        <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$elem[1].'\n                    </div>';\n        foreach ($elem[2] as $field) {\n            echo '\n                    <div style=\"margin:2px 0 2px 15px;\">\n                        <span class=\"fa fa-tag mi-grey-1\">&nbsp;</span>\n                        <label class=\"cpm_label\">'.$field[1].'</label>\n                        <input type=\"text\" id=\"edit_field_'.$field[0].'_'.$elem[0].'\" class=\"edit_item_field input_text text ui-widget-content ui-corner-all\" size=\"40\">\n                    </div>';\n        }\n        echo '\n                </div>';\n    }\n    echo '\n            </div>\n        </div>\n    </div>';\n}\necho '\n    <div style=\"display:none; padding:5px;\" id=\"div_formulaire_edition_item_info\" class=\"ui-state-default ui-corner-all\"></div>\n    </div>\n    </form>\n</div>';\n\n/*\n* ADD NEW FOLDER form\n*/\necho '\n<div id=\"div_ajout_rep\" style=\"display:none;\">\n    <div id=\"new_rep_show_error\" style=\"text-align:center;margin:2px;\" class=\"ui-state-error ui-corner-all\"></div>\n    <table>\n        <tr>\n            <td>'.$LANG['label'].' : </td>\n            <td><input type=\"text\" id=\"new_rep_titre\" style=\"width:242px; padding:3px;\" class=\"ui-widget-content\" /></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['sub_group_of'].' : </td>\n            <td><select id=\"new_rep_groupe\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n                ', (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 || $_SESSION['user_manager'] === \"1\") ? '<option value=\"0\">'.$LANG['root'].'</option>' : '', '\n            </select></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['complex_asked'].' : </td>\n            <td><select id=\"new_rep_complexite\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\">'.$complex[1].'</option>';\n}\necho '\n            </select>\n            </td>\n        </tr>';\necho '\n    </table>\n    <div id=\"add_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire EDITER REPERTORIE\necho '\n<div id=\"div_editer_rep\" style=\"display:none;\">\n    <div id=\"edit_rep_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <table>\n        <tr>\n            <td>'.$LANG['new_label'].' : </td>\n            <td><input type=\"text\" id=\"edit_folder_title\" style=\"width:242px; padding:3px;\" class=\"ui-widget-content\" /></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['group_select'].' : </td>\n            <td><select id=\"edit_folder_folder\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\"></select></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['complex_asked'].' : </td>\n            <td><select id=\"edit_folder_complexity\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n                <option value=\"\">---</option>';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\">'.$complex[1].'</option>';\n}\necho '\n            </select>\n            </td>\n        </tr>\n    </table>\n    <div id=\"edit_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire MOVE FOLDER\necho '\n<div id=\"div_move_folder\" style=\"display:none;\">\n    <div id=\"move_rep_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"text-align:center;margin-top:20px;\">\n        <p>'.$LANG['folder_will_be_moved_below'].'</p>\n        <div>\n        <select id=\"move_folder_id\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n        </select>\n        </div>\n    </div>\n    <div id=\"move_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire COPY FOLDER\necho '\n<div id=\"div_copy_folder\" style=\"display:none;\">\n    <div id=\"div_copy_folder_info\" class=\"ui-widget-content ui-state-highlight ui-corner-all\" style=\"padding:5px;\"><span class=\"fa fa-info-circle fa-2x\"></span>&nbsp;'.$LANG['copy_folder_info'].'</div>\n\n    <div style=\"margin:10px 0 0 0;\">\n        <label style=\"float:left; width:150px;\">'.$LANG['copy_folder_source'].'</label>\n        <select id=\"copy_folder_source_id\" style=\"width:300px; padding:3px;\" class=\"ui-widget-content\"></select>\n    </div>\n    <div style=\"margin:10px 0 0 0;\">\n        <label style=\"float:left; width:150px;\">'.$LANG['copy_folder_destination'].'</label>\n        <select id=\"copy_folder_destination_id\" style=\"width:300px; padding:3px;\" class=\"ui-widget-content\"></select>\n    </div>\n\n    <div id=\"div_copy_folder_msg\" style=\"text-align:center;padding:5px;display:none; margin-top:10px; font-size:14px;\" class=\"ui-corner-all\"></div>\n</div>';\n// Formulaire SUPPRIMER REPERTORIE\necho '\n<div id=\"div_supprimer_rep\" style=\"display:none;\">\n    <table>\n        <tr>\n            <td>'.$LANG['group_select'].' : </td>\n            <td><select id=\"delete_rep_groupe\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n            </select></td>\n        </tr>\n        <tr>\n        <td colspan=\"2\">\n            <div id=\"delete_rep_groupe_validate_div\" class=\"ui-state-default ui-corner-all\" style=\"padding:5px; margin-top:10px;\">\n                <input type=\"checkbox\" id=\"delete_rep_groupe_validate\"><label for=\"delete_rep_groupe_validate\">'.$LANG['confirm_delete_group'].'</label>\n            </div>\n        </td>\n        </tr>\n    </table>\n    <div id=\"del_rep_show_error\" style=\"text-align:center;padding:5px;display:none;margin-top:10px;\" class=\"ui-state-error ui-corner-all\"></div>\n\n    <div id=\"del_folder_loader\" style=\"display:none;text-align:center;margin-top:15px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// SUPPRIMER UN ELEMENT\necho '\n<div id=\"div_del_item\" style=\"display:none;\">\n        <h2 id=\"div_del_item_selection\"></h2>\n        <div style=\"text-align:center;padding:8px;\" class=\"ui-state-error ui-corner-all\">\n            <span class=\"fa fa-warning fa-2x\"></span>&nbsp;'.$LANG['confirm_deletion'].'\n        </div>\n</div>';\n// DIALOG INFORM USER THAT LINK IS COPIED\necho '\n<div id=\"div_item_copied\" style=\"display:none;\">\n    <div style=\"text-align:center;padding:8px;\" class=\"ui-state-focus ui-corner-all\">\n        <span class=\"fa fa-info fa-2x\"></span>&nbsp;'.$LANG['link_is_copied'].'\n    </div>\n    <div id=\"div_display_link\"></div>\n</div>';\n// DIALOG TO WHAT FOLDER COPYING ITEM\necho '\n<div id=\"div_copy_item_to_folder\" style=\"display:none;\">\n    <h2 id=\"div_copy_item_to_folder_item\"></h2>\n    <div style=\"text-align:center;\">\n        <div>'.$LANG['item_copy_to_folder'].'</div>\n        <div style=\"margin:10px;\">\n            <select id=\"copy_in_folder\" style=\"width:300px;\">\n                ', (isset($_SESSION['can_create_root_folder']) && $_SESSION['can_create_root_folder'] == 1) ? '<option value=\"0\">'.$LANG['root'].'</option>' : '', ''.\n            '</select>\n        </div>\n    </div>\n    <div id=\"copy_item_to_folder_show_error\" style=\"text-align:center;margin:2px;display:none; padding:3px;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"height:20px;text-align:center;margin:2px;\" id=\"copy_item_info\" class=\"\"></div>\n</div>';\n// DIALOG FOR HISTORY OF ITEM\necho '\n<div id=\"div_item_history\" style=\"display:none;\">\n    <div id=\"item_history_log\"></div>\n    ', (isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1) ?\n'<div id=\"new_history_entry_form\" style=\"display:none; margin-top:10px;\"><hr>\n        <div id=\"div_add_history_entry\">\n            <div id=\"item_history_log_error\"></div>\n            '.$LANG['label'].'&nbsp;<input type=\"text\" id=\"add_history_entry_label\" size=\"40\" />&nbsp;\n            <span class=\"button\" style=\"margin-top:6px;\" onclick=\"manage_history_entry(\\'add_entry\\',\\'\\')\">'.$LANG['add_history_entry'].'</div>\n        </div>\n    </div>'\n:'', '\n</div>';\n// DIALOG FOR ITEM SHARE\necho '\n<div id=\"div_item_share\" style=\"display:none;\">\n    <div id=\"div_item_share_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"\">'.$LANG['item_share_text'].'</div>\n    <input type=\"text\" id=\"item_share_email\" class=\"ui-corner-all\" style=\"width:100%;\" />\n    <div id=\"div_item_share_status\" style=\"text-align:center;margin-top:15px;display:none; padding:5px;\" class=\"ui-corner-all\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n// DIALOG FOR ITEM IS UPDATED\necho '\n<div id=\"div_item_updated\" style=\"display:none;\">\n    <div style=\"\">'.$LANG['item_updated_text'].'</div>\n</div><br />';\n\n// DIALOG FOR SUGGESTING PWD CHANGE\necho '\n<div id=\"div_suggest_change\" style=\"display:none;\">\n    <div style=\"padding:5px; text-align:center;\" class=\"ui-corner-all ui-state-default\"><i class=\"fa fa-info-circle fa-lg\"></i>&nbsp;'.$LANG['suggest_password_change_intro'].'</div>\n    <div style=\" margin-top:10px;\" id=\"div_suggest_change_html\"></div>\n    <div id=\"div_suggest_change_wait\" style=\"margin-top:10; padding:5px; display:none;\" class=\"ui-state-focus ui-corner-all\"></div>\n</div><br />';\n\n// Off line mode\nif (isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1) {\n    echo '\n    <div id=\"dialog_offline_mode\" style=\"display:none;\">\n        <div id=\"div_offline_mode\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// Export items to file\nif (isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 && $_SESSION['temporary']['user_can_printout'] === true) {\n    echo '\n    <div id=\"dialog_export_file\" style=\"display:none;\">\n        <div id=\"div_export_file\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// Import items\nif (isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 && $session_user_admin !== '1') {\n    echo '\n    <div id=\"dialog_import_file\" style=\"display:none;\">\n        <div id=\"div_import_file\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// USERS passwords upgrade\nif (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1\n    && $session_user_admin !== '1' && isset($_SESSION['user_upgrade_needed']) && $_SESSION['user_upgrade_needed'] == 1\n) {\n    echo '\n    <div id=\"dialog_upgrade_personal_passwords\" style=\"display:none;\">\n        <div style=\"text-align:center;\">\n            <div>'.$LANG['pf_change_encryption'].'</div>\n            <div id=\"dialog_upgrade_personal_passwords_status\" style=\"margin:15px 0 15px 0; font-weight:bold;\">', isset($_SESSION['user_settings']['session_psk']) ? $LANG['pf_sk_set'] : $LANG['pf_sk_not_set'], '</div>\n        </div>\n    </div>';\n}\n\n// SSH dialogbox\necho '\n<div id=\"dialog_ssh\" style=\"display:none;padding:4px;\">\n    <div id=\"div_ssh\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n\nrequire_once 'items.load.php';\n", "<?php\n/**\n *\n * @file          index.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('./sources/SecureHandler.php');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"home\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\n// reload user avatar\n$userData = DB::queryFirstRow(\n    \"SELECT avatar, avatar_thumb\n    FROM \".prefix_table(\"users\").\"\n    WHERE id=%i\",\n    $_SESSION['user_id']\n);\n$_SESSION['user_avatar'] = $userData['avatar'];\n$_SESSION['user_avatar_thumb'] = $userData['avatar_thumb'];\n\n// prepare avatar\nif (isset($userData['avatar']) && !empty($userData['avatar'])) {\n    if (file_exists('includes/avatars/'.$userData['avatar'])) {\n        $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$userData['avatar'];\n    } else {\n        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n    }\n} else {\n    $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n}\n\n// user type\nif (isset($LANG) === true) {\n    if ($_SESSION['user_admin'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['god'];\n    } elseif ($_SESSION['user_manager'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['gestionnaire'];\n    } elseif ($_SESSION['user_read_only'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['read_only_account'];\n    } else {\n        $_SESSION['user_privilege'] = $LANG['user'];\n    }\n}\n\n// prepare list of timezones\nforeach (timezone_identifiers_list() as $zone) {\n    $arrayTimezones[$zone] = $zone;\n}\n\n// prepare lsit of flags\n$rows = DB::query(\"SELECT label FROM \".prefix_table(\"languages\").\" ORDER BY label ASC\");\nforeach ($rows as $record) {\n    $arraFlags[$record['label']] = $record['label'];\n}\n\necho '\n<input type=\"hidden\" id=\"profile_user_token\" value=\"\" />\n<table style=\"margin-left:7px;\">\n    <tr>\n        <td rowspan=\"4\" style=\"width:94px\">\n            <div id=\"profile_photo\" class=\"ui-widget ui-state-highlight\" style=\"padding:2px; text-align:center;\"><img src=\"'.$avatar.'\" /></div>\n        </td>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['name'].':</td>\n        <td><b>', isset($_SESSION['name']) && !empty($_SESSION['name']) ? $_SESSION['name'].' '.$_SESSION['lastname'] : $_SESSION['login'], '</b></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['user_login'].':</td>\n        <td><span style=\"\">'.$_SESSION['login'].'</span></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['email'].':</td>\n        <td title=\"'.$LANG['click_to_change'].'\"><span style=\"cursor:pointer;\" class=\"editable_textarea\" id=\"email_'.$_SESSION['user_id'].'\">'.$_SESSION['user_email'].'</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['role'].':</td>\n        <td>'.$_SESSION['user_privilege'].'</td>\n    </tr>\n</table>\n\n<div style=\"float:left; margin-left:10px;\">\n   <ul class=\"menu\" style=\"\">\n      <li class=\"menu_150\" style=\"padding:4px; text-align:left;\"><i class=\"fa fa-bars fa-fw\"></i>&nbsp;'.$LANG['admin_actions_title'].'\n         <ul class=\"menu_250\" style=\"text-align:left;\">\n            <li id=\"but_pickfiles_photo\"><i class=\"fa fa-camera fa-fw\"></i> &nbsp;'.$LANG['upload_new_avatar'].'</li>';\nif (!isset($SETTINGS['duo']) || $SETTINGS['duo'] == 0) {\n    echo '\n            <li id=\"but_change_password\"><i class=\"fa fa-key fa-fw\"></i> &nbsp;'.$LANG['index_change_pw'].'</li>';\n}\necho '\n            <li id=\"but_change_psk\"><i class=\"fa fa-lock fa-fw\"></i> &nbsp;'.$LANG['menu_title_new_personal_saltkey'].'</li>\n            <li id=\"but_reset_psk\"><i class=\"fa fa-eraser fa-fw\"></i> &nbsp;'.$LANG['personal_saltkey_lost'].'</li>\n         </ul>\n      </li>\n   </ul>\n</div>\n\n<div style=\"float:left;width:95%;margin:10px 0 5px 10px;\">\n    <hr>\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-child fa-fw fa-lg\"></i>&nbsp;\n        '.$LANG['index_last_seen'].' ', isset($SETTINGS['date_format']) ? date($SETTINGS['date_format'], $_SESSION['derniere_connexion']) : date(\"d/m/Y\", $_SESSION['derniere_connexion']), ' '.$LANG['at'].' ', isset($SETTINGS['time_format']) ? date($SETTINGS['time_format'], $_SESSION['derniere_connexion']) : date(\"H:i:s\", $_SESSION['derniere_connexion']), '\n    </div>';\nif (isset($_SESSION['last_pw_change']) && !empty($_SESSION['last_pw_change'])) {\n    echo '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-calendar fa-fw fa-lg\"></i>&nbsp;'. $LANG['index_last_pw_change'].' ', isset($SETTINGS['date_format']) ? date($SETTINGS['date_format'], $_SESSION['last_pw_change']) : (isset($_SESSION['last_pw_change']) ? date(\"d/m/Y\", $_SESSION['last_pw_change']) : \"-\").'. ', $_SESSION['numDaysBeforePwExpiration'] == \"infinite\" ? '' : $LANG['index_pw_expiration'].' '.$_SESSION['numDaysBeforePwExpiration'].' '.$LANG['days'].'\n    </div>';\n}\necho '\n    <div style=\"margin-bottom:6px;margin-top:6px;\">\n        <i class=\"fa fa-cloud-upload fa-fw fa-lg\"></i>&nbsp;\n        <span id=\"plupload_runtime2\" class=\"ui-state-error ui-corner-all\" style=\"width:350px;\">'.$LANG['error_upload_runtime_not_found'].'</span>\n        <input type=\"hidden\" id=\"upload_enabled2\" value=\"\" />\n    </div>\n    <hr>\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-code-fork fa-fw fa-lg\"></i>&nbsp;'. $LANG['tree_load_strategy'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_select\" id=\"treeloadstrategy_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">'.$_SESSION['user_settings']['treeloadstrategy'].'</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n\nif ((isset($_SESSION['user_settings']['usertimezone']) === true && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") || isset($SETTINGS['timezone']) === true) {\n    echo '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-clock-o fa-fw fa-lg\"></i>&nbsp;'. $LANG['timezone_selection'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_timezone\" id=\"usertimezone_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', (isset($_SESSION['user_settings']['usertimezone']) && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") ? $_SESSION['user_settings']['usertimezone'] : $SETTINGS['timezone'], '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n}\n\necho '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-language fa-fw fa-lg\"></i>&nbsp;'. $LANG['user_language'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_language\" id=\"userlanguage_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', isset($_SESSION['user_language']) ? $_SESSION['user_language'] : $SETTINGS['default_language'], '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n\n\nif (isset($SETTINGS['agses_authentication_enabled']) && $SETTINGS['agses_authentication_enabled'] == 1) {\n    echo '\n    <hr>\n\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-id-card-o fa-lg\"></i>&nbsp;'. $LANG['user_profile_agses_card_id'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_textarea\" id=\"agses-usercardid_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', isset($_SESSION['user_settings']['agses-usercardid']) ? $_SESSION['user_settings']['agses-usercardid'] : '', '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n}\n\necho '\n</div>\n\n<hr>\n\n<div style=\"display:none;margin:3px 0 10px 0;text-align:center;padding:4px;\" id=\"field_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n\n<div style=\"float:left;width:100%;margin-top:3px;\">\n    <div style=\"text-align:center;margin:5px;padding:3px;display:none;\" id=\"profile_info_box\" class=\"ui-widget ui-state-highlight ui-corner-all\"></div>\n    <div style=\"height:20px;text-align:center;margin:2px;\" id=\"change_pwd_error\" class=\"\"></div>\n    <div id=\"upload_container_photo\" style=\"display:none;\"></div>\n    <div id=\"filelist_photo\" style=\"display:none;\"></div>';\n\n// if DUOSecurity enabled then changing PWD is not allowed\nif (!isset($SETTINGS['duo']) || $SETTINGS['duo'] == 0) {\n    echo '\n    <div id=\"div_change_password\" style=\"display:none; padding:5px;\" class=\"ui-widget ui-state-default\">\n        <div style=\"text-align:center;margin:5px;padding:3px;\" id=\"change_pwd_complexPw\" class=\"ui-widget ui-state-active ui-corner-all\"></div>\n        <label for=\"new_pw\" class=\"form_label\">'.$LANG['index_new_pw'].' :</label>\n        <input type=\"password\" size=\"15\" name=\"new_pw\" id=\"new_pw\" />\n        <br />\n        <label for=\"new_pw2\" class=\"form_label\">'.$LANG['index_change_pw_confirmation'].' :</label>\n        <input type=\"password\" size=\"15\" name=\"new_pw2\" id=\"new_pw2\" />\n        <div id=\"pw_strength\" style=\"margin:10px 0 10px 120px;text-align:center;\"></div>\n        <input type=\"hidden\" id=\"pw_strength_value\" />\n        <span class=\"button\" id=\"button_change_pw\">'.$LANG['index_change_pw_button'].'</span>&nbsp;\n        <span id=\"password_change_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'</span>\n    </div>';\n}\n\n//change the saltkey dialogbox\necho '\n    <div id=\"div_change_psk\" style=\"display:none;padding:5px;\" class=\"ui-widget ui-state-default\">\n      <div style=\"margin-bottom:4px; padding:6px;\" class=\"ui-state-highlight\">\n         <i class=\"fa fa-exclamation-triangle fa-fw mi-red\"></i>&nbsp;'.$LANG['new_saltkey_warning'].'\n      </div>\n        <label for=\"new_personal_saltkey\" class=\"form_label\">'.$LANG['new_saltkey'].' :</label>\n      <input type=\"text\" size=\"30\" name=\"new_personal_saltkey\" id=\"new_personal_saltkey\" class=\"text_without_symbols tip\" title=\"'.$LANG['text_without_symbols'].'\" />\n      <br />\n      <label for=\"old_personal_saltkey\" class=\"form_label\">'.$LANG['old_saltkey'].' :</label>\n      <input type=\"text\" size=\"30\" name=\"old_personal_saltkey\" id=\"old_personal_saltkey\" value=\"\" class=\"text_without_symbols\" />\n\n      <div style=\"margin-top:4px;\">\n         <span class=\"button\" id=\"button_change_psk\">'.$LANG['index_change_pw_button'].'</span>&nbsp;\n         <span id=\"psk_change_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<span id=\"psk_change_wait_info\">'.$LANG['please_wait'].'</span></span>\n      </div>\n   </div>';\n\n\n//saltkey LOST dialogbox\necho '\n    <div id=\"div_reset_psk\" style=\"display:none;padding:5px;\" class=\"ui-widget ui-state-default\">\n        <div style=\"margin-bottom:4px; padding:6px;\" class=\"ui-state-highlight\">\n            <i class=\"fa fa-exclamation-triangle fa-fw mi-red\"></i>&nbsp;'.$LANG['new_saltkey_warning_lost'].'\n        </div>\n\n        <div style=\"margin-top:4px;\">\n            <input type=\"checkbox\" id=\"reset_psk_confirm\" />&nbsp;<label for=\"reset_psk_confirm\">'.$LANG['please_confirm_operation'].'</label>\n        </div>\n\n        <div style=\"margin-top:4px;\">\n            <span class=\"button\" id=\"button_reset_psk\">'.$LANG['continue'].'</span>&nbsp;\n            <span id=\"psk_reset_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<span id=\"psk_reset_wait_info\">'.$LANG['please_wait'].'</span></span>\n        </div>\n   </div>';\necho '\n</div>';\n\n// Pw complexity levels\nif (isset($_SESSION['user_language']) && $_SESSION['user_language'] !== \"0\") {\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n?>\n<script type=\"text/javascript\">\n$(function() {\n    $(\".tip\").tooltipster({multiple: true});\n    // password\n    $(\"#but_change_password\").click(function() {\n        $(\"#change_pwd_complexPw\").html(\"<?php echo $LANG['complex_asked']; ?> : <?php echo $SETTINGS_EXT['pwComplexity'][$_SESSION['user_pw_complexity']][1]; ?>\");\n        $(\"#change_pwd_error\").hide();\n      $(\"#div_change_psk, #div_reset_psk\").hide();\n\n      if ($(\"#div_change_password\").not(\":visible\")) {\n         $(\"#div_change_password\").show();\n         $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 580);\n      }\n    });\n\n    //Password meter\n    if ($(\"#new_pw\").length) {\n        $(\"#new_pw\").simplePassMeter({\n            \"requirements\": {},\n            \"container\": \"#pw_strength\",\n            \"defaultText\" : \"<?php echo $LANG['index_pw_level_txt']; ?>\",\n            \"ratings\": [\n                {\"minScore\": 0,\n                    \"className\": \"meterFail\",\n                    \"text\": \"<?php echo $LANG['complex_level0']; ?>\"\n                },\n                {\"minScore\": 25,\n                    \"className\": \"meterWarn\",\n                    \"text\": \"<?php echo $LANG['complex_level1']; ?>\"\n                },\n                {\"minScore\": 50,\n                    \"className\": \"meterWarn\",\n                    \"text\": \"<?php echo $LANG['complex_level2']; ?>\"\n                },\n                {\"minScore\": 60,\n                    \"className\": \"meterGood\",\n                    \"text\": \"<?php echo $LANG['complex_level3']; ?>\"\n                },\n                {\"minScore\": 70,\n                    \"className\": \"meterGood\",\n                    \"text\": \"<?php echo $LANG['complex_level4']; ?>\"\n                },\n                {\"minScore\": 80,\n                    \"className\": \"meterExcel\",\n                    \"text\": \"<?php echo $LANG['complex_level5']; ?>\"\n                },\n                {\"minScore\": 90,\n                    \"className\": \"meterExcel\",\n                    \"text\": \"<?php echo $LANG['complex_level6']; ?>\"\n                }\n            ]\n        });\n    }\n    $(\"#new_pw\").bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#pw_strength_value\").val(score);\n        }\n    });\n\n    // launche password change\n    $(\"#button_change_pw\").click(function() {\n        $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").hide();\n        if ($(\"#new_pw\").val() != \"\" && $(\"#new_pw\").val() == $(\"#new_pw2\").val()) {\n            if (parseInt($(\"#pw_strength_value\").val()) >= parseInt($(\"#user_pw_complexity\").val())) {\n                $(\"#password_change_wait\").show();\n                var data = '{\"new_pw\":\"'+sanitizeString($(\"#new_pw\").val())+'\"}';\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type                : \"change_pw\",\n                        change_pw_origine   : \"user_change\",\n                        complexity          : $(\"#pw_strength_value\").val(),\n                        data                : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n                    },\n                    function(data) {\n                        if (data[0].error == \"already_used\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['pw_used']; ?></span>\");\n                        } else if (data[0].error == \"complexity_level_not_reached\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_complex_not_enought']; ?></span>\");\n                        } else if (data[0].error == \"pwd_hash_not_correct\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_not_allowed_to']; ?></span>\");\n                        } else {\n                            $(\"#div_change_password\").hide();\n                            $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 450);\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                        }\n                        $(\"#password_change_wait\").hide();\n                        $(\"#profile_info_box\").html(\"<?php echo $LANG['alert_message_done']; ?>\").show();\n\n                        $(this).delay(2000).queue(function() {\n                            $(\"#profile_info_box\").effect( \"fade\", \"slow\" );\n                            $(this).dequeue();\n                        });\n                    },\n                    \"json\"\n                );\n            } else {\n                $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<?php echo $LANG['error_complex_not_enought']; ?>\");\n                $(this).delay(1000).queue(function() {\n                    $(\"#change_pwd_error\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            }\n        } else {\n            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<?php echo $LANG['index_pw_error_identical']; ?>\");\n            $(this).delay(1000).queue(function() {\n                $(\"#change_pwd_error\").effect( \"fade\", \"slow\" );\n                $(this).dequeue();\n            });\n        }\n    });\n\n    // AVATAR IMPORT\n    var uploader_photo = new plupload.Uploader({\n        runtimes : \"gears,html5,flash,silverlight,browserplus\",\n        browse_button : \"but_pickfiles_photo\",\n        container : \"upload_container_photo\",\n        max_file_size : \"2mb\",\n        chunk_size : \"1mb\",\n        unique_names : true,\n        dragdrop : true,\n        multiple_queues : false,\n        multi_selection : false,\n        max_file_count : 1,\n        filters : [\n            {title : \"PNG files\", extensions : \"png\"}\n        ],\n        resize : {\n            width : \"90\",\n            height : \"90\",\n            quality : \"90\"\n        },\n        url : \"sources/upload/upload.files.php\",\n        flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n        init: {\n            FilesAdded: function(up, files) {\n                // generate and save token\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type : \"save_token\",\n                        size : 25,\n                        capital: true,\n                        numeric: true,\n                        ambiguous: true,\n                        reason: \"avatar_profile_upload\",\n                        duration: 10\n                    },\n                    function(data) {\n                        $(\"#profile_user_token\").val(data[0].token);\n                        up.start();\n                    },\n                    \"json\"\n                );\n            },\n            BeforeUpload: function (up, file) {\n                var tmp = Math.random().toString(36).substring(7);\n\n                up.settings.multipart_params = {\n                    \"PHPSESSID\":\"<?php echo $_SESSION['user_id']; ?>\",\n                    \"newFileName\":\"user<?php echo $_SESSION['user_id']; ?>\"+tmp,\n                    \"type_upload\":\"upload_profile_photo\",\n                    \"user_token\": $(\"#profile_user_token\").val()\n                };\n            }\n        }\n    });\n\n    // Show runtime status\n    uploader_photo.bind(\"Init\", function(up, params) {\n        $(\"#plupload_runtime2\").html(\"<?php echo $LANG['runtime_upload']; ?> \" + params.runtime).removeClass('ui-state-error');\n        $(\"#upload_enabled2\").val(\"1\");\n    });\n\n    // get error\n    uploader_photo.bind(\"Error\", function(up, err) {\n        $(\"#filelist_photo\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n     // get response\n    uploader_photo.bind(\"FileUploaded\", function(up, file, object) {\n        var myData;\n        try {\n            myData = eval(object.response);\n        } catch(err) {\n            myData = eval('(' + object.response + ')');\n        }\n        $(\"#profile_photo\").html('<img src=\"includes/avatars/'+myData.filename+'\" />');\n        $(\"#user_avatar_thumb\").attr('src', 'includes/avatars/'+myData.filename_thumb);\n        $(\"#filelist_photo\").html('').hide();\n    });\n\n    uploader_photo.init();\n\n   $(\"#but_pickfiles_photo\").click(function() {\n      $(\"#div_change_psk, #div_reset_psk, #div_change_password\").hide();\n      $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 450);\n   });\n\n    //inline editing\n    $(\".editable_textarea\").editable(\"sources/users.queries.php\", {\n        onsubmit: function(settings, value) {\n            console.log(value);\n        },\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        type   : \"text\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name   : \"newValue\",\n        width  : 220\n    });\n    $(\".editable_select\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data   : \" {'full':'<?php echo $LANG['full']; ?>','sequential':'<?php echo $LANG['sequential']; ?>', 'selected':'<?php echo $_SESSION['user_settings']['treeloadstrategy']; ?>'}\",\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_language\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data   : '<?php print json_encode($arraFlags); ?>',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_timezone\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data : '<?php print json_encode($arrayTimezones); ?>',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_yesno\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data : '{\"O\":\"<?php echo $LANG['no']; ?>\",\"1\":\"<?php echo $LANG['yes']; ?>\"}',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n\n    $('.jeditable-activate').click(function() {\n        $(this).prev().click();\n    });\n\n\n    // PSK\n    $(\"#but_change_psk\").click(function() {\n      // hide other divs\n      $(\"#div_change_password, #div_reset_psk\").hide();\n\n      // prepare fields\n      $(\"#new_personal_saltkey\").val(\"\");\n      $(\"#old_personal_saltkey\").val(\"<?php echo addslashes(str_replace(\"&quot;\", '\"', @$_SESSION['user_settings']['clear_psk'])); ?>\");\n\n      $(\"#div_change_psk\").show();\n      $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 600);\n    });\n\n    // manage CHANGE OF PERSONAL SALTKEY\n    $(\"#button_change_psk\").click(function() {\n        $(\"#psk_change_wait\").show();\n\n        if ($(\"#new_personal_saltkey\").val() === \"\" || $(\"#old_personal_saltkey\").val() === \"\") {\n            $(\"#psk_change_wait\").hide();\n            $(\"#div_change_psk\").before('<div id=\"tmp_msg\" class=\"ui-widget ui-state-error ui-corner-all\" style=\"margin-bottom:3px; padding:3px;\"><?php echo addslashes($LANG['home_personal_saltkey_label']); ?></div>');\n\n            $(this).delay(1000).queue(function() {\n                $(\"#tmp_msg\").effect( \"fade\", \"slow\" );\n                $(\"#tmp_msg\").remove();\n                $(this).dequeue();\n            });\n            return false;\n        }\n\n        var data_to_share = \"{\\\"sk\\\":\\\"\" + sanitizeString($(\"#new_personal_saltkey\").val()) + \"\\\", \\\"old_sk\\\":\\\"\" + sanitizeString($(\"#old_personal_saltkey\").val()) + \"\\\"}\";\n\n        $(\"#psk_change_wait_info\").html(\"... 0%\");\n\n        //Send query\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type            : \"change_personal_saltkey\",\n                data_to_share   : prepareExchangedData(data_to_share, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key             : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (data.error == \"no\") {\n                    changePersonalSaltKey(data_to_share, data.list, data.nb_total);\n                } else {\n                    $(\"#psk_change_wait\").hide();\n                    $(\"#div_change_psk\").before('<div id=\"tmp_msg\" class=\"ui-widget ui-state-error ui-corner-all\" style=\"margin-bottom:3px; padding:3px;\">' + data.error + '</div>');\n\n                    $(this).delay(3000).queue(function() {\n                        $(\"#tmp_msg\").effect( \"fade\", \"slow\" );\n                        $(\"#tmp_msg\").remove();\n                        $(this).dequeue();\n                    });\n                    return false;\n                }\n            }\n        );\n    });\n\n\n    // RESET PSK\n    $(\"#but_reset_psk\").click(function() {\n        // hide other divs\n        $(\"#div_change_password, #div_change_psk\").hide();\n\n        // prepare fields\n        $(\"#new_reset_psk\").val(\"\");\n\n        $(\"#div_reset_psk\").show();\n        $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 600);\n    });\n    $(\"#button_reset_psk\").click(function() {\n        if ($(\"#reset_psk_confirm\").is(\":checked\")) {\n            $(\"#psk_reset_wait\").show();\n\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                type    : \"reset_personal_saltkey\",\n                key             : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    $(\"#psk_reset_wait\").hide();\n                    $(\"#button_reset_psk\").after('<div id=\"reset_temp\"><?php echo $LANG['alert_message_done']; ?></div>');\n\n                    $(this).delay(1500).queue(function() {\n                        $(\"#div_reset_psk\").effect( \"fade\", \"slow\" );\n                        $(\"#reset_temp\").remove();\n                        $(this).dequeue();\n                    });\n\n                    $(\"#psk_change_wait_info\").html(\"<?php echo $LANG['alert_message_done']; ?>\");\n                    location.reload();\n                }\n            );\n        }\n    });\n\n    $( \".button\" ).button();\n\n   $(\".menu\").menu({\n      icon: {},\n      position: { my: \"left top\", at: \"right top\" }\n   });\n\n   // prevent usage of symbols in Personal saltkey\n   $(\".text_without_symbols\").bind(\"keydown\", function (event) {\n      switch (event.keyCode) {\n         case 8:  // Backspace\n         case 9:  // Tab\n         case 13: // Enter\n         case 37: // Left\n         case 38: // Up\n         case 39: // Right\n         case 40: // Down\n         break;\n         default:\n         var regex = new RegExp(\"^[a-zA-Z0-9.,/#&$@()%*]+$\");\n         var key = event.key;\n         if (!regex.test(key)) {\n            $(\"#field_warning\").html(\"<?php echo addslashes($LANG['character_not_allowed']); ?>\").stop(true,true).show().fadeOut(1000);\n            event.preventDefault();\n            return false;\n         }\n         break;\n      }\n   }).bind(\"paste\",function(e){\n      $(\"#field_warning\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\").stop(true,true).show().fadeOut(1000);\n      e.preventDefault();\n   });\n});\n\n\nfunction changePersonalSaltKey(credentials, ids, nb_total)\n{\n   // extract current id and adapt list\n   var aIds = ids.split(\",\");\n   var currentID = aIds[0];\n   aIds.shift();\n   var nb = aIds.length;\n   aIds = aIds.toString();\n\n   if (nb == 0)\n      $(\"#psk_change_wait_info\").html(\"&nbsp;...&nbsp;\"+\"100%\");\n   else\n      $(\"#psk_change_wait_info\").html(\"&nbsp;...&nbsp;\"+Math.floor(((nb_total-nb) / nb_total) * 100)+\"%\");\n\n    var data = \"{\\\"psk\\\":\\\"\"+sanitizeString($(\"#new_personal_saltkey\").val())+\"\\\"}\";\n    $.post(\n      \"sources/main.queries.php\",\n        {\n           type    : \"store_personal_saltkey\",\n           data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n           debug   : true\n        },\n        function(data){\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            console.log(data);\n            if (data.error !== \"\") {\n                // display error\n                $(\"#psk_change_wait_info\").html(data.error);\n                $(this).delay(4000).queue(function() {\n                    $(\"#main_info_box\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            } else {\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type            : \"reencrypt_personal_pwd\",\n                        data_to_share   : prepareExchangedData(credentials, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        currentId       : currentID,\n                        key             : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data){\n                        if (currentID === \"\") {\n                            $(\"#psk_change_wait_info\").html(\"<?php echo $LANG['alert_message_done']; ?>\");\n                            location.reload();\n                        } else {\n                            if (data[0].error === \"\") {\n                            changePersonalSaltKey(credentials, aIds, nb_total);\n                            } else {\n                                $(\"#psk_change_wait_info\").html(data[0].error);\n                            }\n                        }\n                    },\n                    \"json\"\n                );\n            }\n        }\n    );\n\n\n}\n </script>", "<?php\n\n/**\n * @file          admin.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"manage_settings\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/tp.config.php';\n\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// connect to the server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n//Load AES\n$aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n$aes->register();\n\n// Load AntiXSS\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n$antiXss = new protect\\AntiXSS\\AntiXSS();\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_session_key = filter_input(INPUT_POST, 'session_key', FILTER_SANITIZE_STRING);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_list = filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_NUMBER_INT);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_action = filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING);\n$post_cpt = filter_input(INPUT_POST, 'cpt', FILTER_SANITIZE_NUMBER_INT);\n$post_object = filter_input(INPUT_POST, 'object', FILTER_SANITIZE_STRING);\n$post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n$post_length = filter_input(INPUT_POST, 'length', FILTER_SANITIZE_NUMBER_INT);\n$post_option = filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING);\n$post_nbItems = filter_input(INPUT_POST, 'nbItems', FILTER_SANITIZE_NUMBER_INT);\n\nswitch ($post_type) {\n    #CASE for getting informations about the tool\n    # connection to author's cpassman website\n    case \"cpm_status\":\n        $text = \"<ul>\";\n        $error = \"\";\n        if (!isset($SETTINGS_EXT['admin_no_info']) || (isset($SETTINGS_EXT['admin_no_info']) && $SETTINGS_EXT['admin_no_info'] == 0)) {\n            if (isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1) {\n                $handleDistant = array();\n                if (isset($SETTINGS['proxy_ip']) && !empty($SETTINGS['proxy_ip'])) {\n                    $fp = fsockopen($SETTINGS['proxy_ip'], $SETTINGS['proxy_port']);\n                } else {\n                    $fp = @fsockopen(\"www.teampass.net\", 80);\n                }\n                if (!$fp) {\n                    $error = \"connection\";\n                } else {\n                    $out = \"GET http://teampass.net/teampass_ext_lib.txt HTTP/1.0\\r\\n\";\n                    $out .= \"Host: teampass.net\\r\\n\";\n                    $out .= \"Connection: Close\\r\\n\\r\\n\";\n                    fwrite($fp, $out);\n\n                    while (($line = fgets($fp, 4096)) !== false) {\n                        $handleDistant[] = $line;\n                    }\n                    if (!feof($fp)) {\n                        $error = \"Error: unexpected fgets() fail\\n\";\n                    }\n                    fclose($fp);\n                }\n\n                if (count($handleDistant) > 0) {\n                    while (list($cle, $val) = each($handleDistant)) {\n                        if (substr($val, 0, 3) == \"nom\") {\n                            $tab = explode('|', $val);\n                            foreach ($tab as $elem) {\n                                $tmp = explode('#', $elem);\n                                $text .= '<li><u>'.$LANG[$tmp[0]].\"</u> : \".$tmp[1].'</li>';\n                                if ($tmp[0] == \"version\") {\n                                    $text .= '<li><u>'.$LANG['your_version'].\"</u> : \".$SETTINGS_EXT['version'];\n                                    if (floatval($SETTINGS_EXT['version']) < floatval($tmp[1])) {\n                                        $text .= '&nbsp;&nbsp;<b>'.$LANG['please_update'].'</b>';\n                                    }\n                                    $text .= '</li>';\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                $error = \"conf_block\";\n            }\n        } else {\n            $error = \"conf_block\";\n        }\n        $text .= \"</ul>\";\n\n        echo '[{\"error\":\"'.$error.'\" , \"output\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $text).'\"}]';\n        break;\n\n    ###########################################################\n    #CASE for refreshing all Personal Folders\n    case \"admin_action_check_pf\":\n        //get through all users\n        $rows = DB::query(\n            \"SELECT id, login, email\n            FROM \".prefix_table(\"users\").\"\n            ORDER BY login ASC\"\n        );\n        foreach ($rows as $record) {\n            //update PF field for user\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'personal_folder' => '1'\n                ),\n                \"id = %i\",\n                $record['id']\n            );\n\n            //if folder doesn't exist then create it\n            $data = DB::queryfirstrow(\n                \"SELECT id\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE title = %s AND parent_id = %i\",\n                $record['id'],\n                0\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                //If not exist then add it\n                DB::insert(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => '0',\n                        'title' => $record['id'],\n                        'personal_folder' => '1'\n                    )\n                );\n\n                //rebuild fuild tree folder\n                $tree->rebuild();\n            } else {\n                //If exists then update it\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'personal_folder' => '1'\n                    ),\n                    \"title=%s AND parent_id=%i\",\n                    $record['id'],\n                    0\n                );\n                //rebuild fuild tree folder\n                $tree->rebuild();\n\n                // Get an array of all folders\n                $folders = $tree->getDescendants($data['id'], false, true, true);\n                foreach ($folders as $folder) {\n                    //update PF field for user\n                    DB::update(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'personal_folder' => '1'\n                        ),\n                        \"id = %s\",\n                        $folder\n                    );\n                }\n            }\n        }\n\n\n        echo '[{\"result\" : \"pf_done\"}]';\n        break;\n\n    ###########################################################\n    #CASE for deleting all items from DB that are linked to a folder that has been deleted\n    case \"admin_action_db_clean_items\":\n        //Libraries call\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        //init\n        $foldersIds = array();\n        $text = \"\";\n        $nbItemsDeleted = 0;\n\n        // Get an array of all folders\n        $folders = $tree->getDescendants();\n        foreach ($folders as $folder) {\n            if (!in_array($folder->id, $foldersIds)) {\n                array_push($foldersIds, $folder->id);\n            }\n        }\n\n        $items = DB::query(\"SELECT id,label FROM \".prefix_table(\"items\").\" WHERE id_tree NOT IN %li\", $foldersIds);\n        foreach ($items as $item) {\n            $text .= $item['label'].\"[\".$item['id'].\"] - \";\n            //Delete item\n            DB::DELETE(prefix_table(\"items\"), \"id = %i\", $item['id']);\n            //log\n            DB::DELETE(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n\n            $nbItemsDeleted++;\n        }\n\n        // delete orphan items\n        $rows = DB::query(\n            \"SELECT id\n            FROM \".prefix_table(\"items\").\"\n            ORDER BY id ASC\"\n        );\n        foreach ($rows as $item) {\n            DB::query(\n                \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i AND action = %s\",\n                $item['id'],\n                \"at_creation\"\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::DELETE(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                DB::DELETE(prefix_table(\"categories_items\"), \"item_id = %i\", $item['id']);\n                DB::DELETE(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                $nbItemsDeleted++;\n            }\n        }\n\n        //Update CACHE table\n        updateCacheTable(\"reload\");\n\n        //show some info\n        echo '[{\"result\" : \"db_clean_items\",\"nb_items_deleted\":\"'.$nbItemsDeleted.'\"}]';\n        break;\n\n    ###########################################################\n    #CASE for creating a DB backup\n    case \"admin_action_db_backup\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        $return = \"\";\n\n        //Get all tables\n        $tables = array();\n        $result = DB::query('SHOW TABLES');\n        foreach ($result as $row) {\n            $tables[] = $row[\"Tables_in_\".$database];\n        }\n\n        //cycle through\n        foreach ($tables as $table) {\n            if (empty($pre) || substr_count($table, $pre) > 0) {\n                // Do query\n                $result = DB::queryRaw('SELECT * FROM '.$table);\n                $mysqli_result = DB::queryRaw(\n                    \"SELECT *\n                    FROM INFORMATION_SCHEMA.COLUMNS\n                    WHERE table_schema = %s\n                    AND table_name = %s\",\n                    $database,\n                    $table\n                );\n                $numFields = DB::count();\n\n                // prepare a drop table\n                $return .= 'DROP TABLE '.$table.';';\n                $row2 = DB::queryfirstrow('SHOW CREATE TABLE '.$table);\n                $return .= \"\\n\\n\".$row2[\"Create Table\"].\";\\n\\n\";\n\n                //prepare all fields and datas\n                for ($i = 0; $i < $numFields; $i++) {\n                    while ($row = $result->fetch_row()) {\n                        $return .= 'INSERT INTO '.$table.' VALUES(';\n                        for ($j = 0; $j < $numFields; $j++) {\n                            $row[$j] = addslashes($row[$j]);\n                            $row[$j] = preg_replace(\"/\\n/\", \"\\\\n\", $row[$j]);\n                            if (isset($row[$j])) {\n                                $return .= '\"'.$row[$j].'\"';\n                            } else {\n                                $return .= 'NULL';\n                            }\n                            if ($j < ($numFields - 1)) {\n                                $return .= ',';\n                            }\n                        }\n                        $return .= \");\\n\";\n                    }\n                }\n                $return .= \"\\n\\n\\n\";\n            }\n        }\n\n        if (!empty($return)) {\n            // get a token\n            $token = GenerateCryptKey(20);\n\n            //save file\n            $filename = time().'-'.$token.'.sql';\n            $handle = fopen($SETTINGS['path_to_files_folder'].\"/\".$filename, 'w+');\n\n            //write file\n            fwrite($handle, $return);\n            fclose($handle);\n\n            // Encrypt the file\n            if (empty($post_option) === false) {\n                // Encrypt the file\n                prepareFileWithDefuse(\n                    'encrypt',\n                    $SETTINGS['path_to_files_folder'].\"/\".$filename,\n                    $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$filename,\n                    $post_option\n                );\n\n                // Do clean\n                unlink($SETTINGS['path_to_files_folder'].\"/\".$filename);\n                rename(\n                    $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$filename,\n                    $SETTINGS['path_to_files_folder'].\"/\".$filename\n                );\n            }\n\n            //generate 2d key\n            $_SESSION['key_tmp'] = GenerateCryptKey(20, true);\n\n            //update LOG\n            logEvents('admin_action', 'dataBase backup', $_SESSION['user_id'], $_SESSION['login']);\n\n            echo '[{\"result\":\"db_backup\" , \"href\":\"sources/downloadFile.php?name='.urlencode($filename).'&sub=files&file='.$filename.'&type=sql&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&pathIsFiles=1\"}]';\n        }\n        break;\n\n    ###########################################################\n    #CASE for restoring a DB backup\n    case \"admin_action_db_restore\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $dataPost = explode('&', $post_option);\n        $file = htmlspecialchars($dataPost[0]);\n        $key = htmlspecialchars($dataPost[1]);\n\n        // Undecrypt the file\n        if (empty($key) === false) {\n            // Decrypt the file\n            $ret = prepareFileWithDefuse(\n                'decrypt',\n                $SETTINGS['path_to_files_folder'].\"/\".$file,\n                $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$file,\n                $key\n            );\n\n            if ($ret !== true) {\n                echo '[{\"result\":\"db_restore\" , \"message\":\"'.$ret.'\"}]';\n                break;\n            }\n\n            // Do clean\n            fileDelete($SETTINGS['path_to_files_folder'].\"/\".$file);\n            $file = $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$file;\n        } else {\n            $file = $SETTINGS['path_to_files_folder'].\"/\".$file;\n        }\n\n        //read sql file\n        if ($handle = fopen($file, \"r\")) {\n            $query = \"\";\n            while (!feof($handle)) {\n                $query .= fgets($handle, 4096);\n                if (substr(rtrim($query), -1) == ';') {\n                    //launch query\n                    DB::queryRaw($query);\n                    $query = '';\n                }\n            }\n            fclose($handle);\n        }\n\n        //delete file\n        fileDelete($file);\n\n        //Show done\n        echo '[{\"result\":\"db_restore\"}]';\n        break;\n\n    ###########################################################\n    #CASE for optimizing the DB\n    case \"admin_action_db_optimize\":\n        //Get all tables\n        $alltables = DB::query(\"SHOW TABLES\");\n        foreach ($alltables as $table) {\n            foreach ($table as $i => $tablename) {\n                if (substr_count($tablename, $pre) > 0) {\n                    // launch optimization quieries\n                    DB::query(\"ANALYZE TABLE `\".$tablename.\"`\");\n                    DB::query(\"OPTIMIZE TABLE `\".$tablename.\"`\");\n                }\n            }\n        }\n\n        //Clean up LOG_ITEMS table\n        $rows = DB::query(\n            \"SELECT id\n            FROM \".prefix_table(\"items\").\"\n            ORDER BY id ASC\"\n        );\n        foreach ($rows as $item) {\n            DB::query(\n                \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i AND action = %s\",\n                $item['id'],\n                \"at_creation\"\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                //Create new at_creation entry\n                $rowTmp = DB::queryFirstRow(\n                    \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE id_item=%i ORDER BY date ASC\",\n                    $item['id']\n                );\n                DB::insert(\n                    prefix_table(\"log_items\"),\n                    array(\n                        'id_item'     => $item['id'],\n                        'date'         => $rowTmp['date'] - 1,\n                        'id_user'     => \"\",\n                        'action'     => \"at_creation\",\n                        'raison'    => \"\"\n                    )\n                );\n            }\n        }\n\n        //Show done\n        echo '[{\"result\":\"db_optimize\"}]';\n        break;\n\n    ###########################################################\n    #CASE for deleted old files in folder \"files\"\n    case \"admin_action_purge_old_files\":\n        $nbFilesDeleted = 0;\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        //read folder\n        $dir = opendir($SETTINGS['path_to_files_folder']);\n\n        //delete file FILES\n        while (false !== ($f = readdir($dir))) {\n            if ($f != \".\" && $f !== \"..\" && $f !== \".htaccess\") {\n                if ((time() - filectime($dir.$f)) > 604800) {\n                    fileDelete($SETTINGS['path_to_files_folder'].\"/\".$f);\n                    $nbFilesDeleted++;\n                }\n            }\n        }\n        //Close dir\n        closedir($dir);\n\n        //read folder  UPLOAD\n        $dir = opendir($SETTINGS['path_to_upload_folder']);\n\n        //delete file\n        while (false !== ($f = readdir($dir))) {\n            if ($f != \".\" && $f !== \"..\") {\n                if (strpos($f, \"_delete.\") > 0) {\n                    fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$f);\n                    $nbFilesDeleted++;\n                }\n            }\n        }\n        //Close dir\n        closedir($dir);\n\n        //Show done\n        echo '[{\"result\":\"purge_old_files\",\"nb_files_deleted\":\"'.$nbFilesDeleted.'\"}]';\n        break;\n\n    /*\n    * Reload the Cache table\n    */\n    case \"admin_action_reload_cache_table\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        updateCacheTable(\"reload\", \"\");\n        echo '[{\"result\":\"cache_reload\"}]';\n        break;\n\n    /*\n       * REBUILD CONFIG FILE\n    */\n    case \"admin_action_rebuild_config_file\":\n        $error = \"\";\n\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        $ret = handleConfigFile(\"rebuild\");\n\n        if ($ret !== true) {\n            $error = $ret;\n        } else {\n            $error = \"rebuild_config_file\";\n        }\n\n        echo '[{\"result\":\"'.$error.'\"}]';\n        break;\n\n\n    /*\n    * Decrypt a backup file\n    */\n    case \"admin_action_backup_decrypt\":\n        // Init\n        $msg = \"\";\n        $result = \"\";\n        $filename = $post_option;\n        //get backups infos\n        $rows = DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s\", \"admin\");\n        foreach ($rows as $record) {\n            $tp_settings[$record['intitule']] = $record['valeur'];\n        }\n\n        // check if backup file is in DB.\n        // If YES then it is encrypted with DEFUSE\n        $bck = DB::queryFirstRow(\"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"backup\", \"filename\");\n\n        //read file\n        $return = \"\";\n        $Fnm = $tp_settings['bck_script_path'].'/'.$filename.'.sql';\n        if (file_exists($Fnm)) {\n            if (!empty($bck) && $bck['valeur'] === $filename) {\n                $err = \"\";\n\n                // it means that file is DEFUSE encrypted\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/Crypto.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/DerivedKeys.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/File.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/Core.php';\n\n                try {\n                    \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                        $SETTINGS['bck_script_path'].'/'.$post_option.'.sql',\n                        $SETTINGS['bck_script_path'].'/'.str_replace('encrypted', 'clear', filename).'.sql',\n                        $SETTINGS['bck_script_key']\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                }\n\n                if (!empty($err)) {\n                    echo '[{ \"result\":\"backup_decrypt_fails\" , \"msg\":\"'.$err.'\"}]';\n                    break;\n                }\n            } else {\n                    // file is bCrypt encrypted\n                $inF = fopen($Fnm, \"r\");\n                while (!feof($inF)) {\n                    $return .= fgets($inF, 4096);\n                }\n                fclose($inF);\n\n\n                $return = Encryption\\Crypt\\aesctr::decrypt($return, $tp_settings['bck_script_key'], 256);\n\n                //save the file\n                $handle = fopen($tp_settings['bck_script_path'].'/'.$filename.'.clear'.'.sql', 'w+');\n                fwrite($handle, $return);\n                fclose($handle);\n            }\n            $result = \"backup_decrypt_success\";\n            $msg = $tp_settings['bck_script_path'].'/'.$filename.'.clear'.'.sql';\n        } else {\n            $result = \"backup_decrypt_fails\";\n            $msg = \"File not found: \".$Fnm;\n        }\n        echo '[{ \"result\":\"'.$result.'\" , \"msg\":\"'.$msg.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key START\n    */\n    case \"admin_action_change_salt_key___start\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n        require_once('main.functions.php');\n\n        // store old sk\n        $_SESSION['reencrypt_old_salt'] = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n\n        // generate new saltkey\n        $old_sk_filename = SECUREPATH.\"/teampass-seckey.txt\".'.'.date(\"Y_m_d\", mktime(0, 0, 0, date('m'), date('d'), date('y'))).'.'.time();\n        copy(\n            SECUREPATH.\"/teampass-seckey.txt\",\n            $old_sk_filename\n        );\n        $new_key = defuse_generate_key();\n        file_put_contents(\n            SECUREPATH.\"/teampass-seckey.txt\",\n            $new_key\n        );\n\n        // store new sk\n        $_SESSION['reencrypt_new_salt'] = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        //put tool in maintenance.\n        DB::update(\n            prefix_table(\"misc\"),\n            array(\n                'valeur' => '1',\n            ),\n            \"intitule = %s AND type= %s\",\n            \"maintenance_mode\",\n            \"admin\"\n        );\n        //log\n        logEvents('system', 'change_salt_key', $_SESSION['user_id'], $_SESSION['login']);\n\n        // get number of items to change\n        DB::query(\"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\", 0);\n        $nb_of_items = DB::count();\n\n        // create backup table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n        DB::query(\n            \"CREATE TABLE `\".prefix_table(\"sk_reencrypt_backup\").\"` (\n            `id` int(12) NOT null AUTO_INCREMENT,\n            `current_table` varchar(100) NOT NULL,\n            `current_field` varchar(500) NOT NULL,\n            `value_id` varchar(500) NOT NULL,\n            `value` text NOT NULL,\n            `value2` varchar(500) NOT NULL,\n            `current_sql` text NOT NULL,\n            `result` text NOT NULL,\n            PRIMARY KEY (`id`)\n            ) CHARSET=utf8;\"\n        );\n\n        // store old SK in backup table\n        DB::insert(\n            prefix_table(\"sk_reencrypt_backup\"),\n            array(\n                'current_table' => 'old_sk',\n                'current_field' => 'old_sk',\n                'value_id' => 'old_sk',\n                'value' => $_SESSION['reencrypt_old_salt'],\n                'current_sql' => \"old_sk\",\n                'value2' => $old_sk_filename,\n                'result' => \"none\"\n            )\n        );\n\n        // delete previous backup files\n        $files = glob($SETTINGS['path_to_upload_folder'].'/*'); // get all file names\n        foreach ($files as $file) { // iterate files\n            if (is_file($file)) {\n                $file_parts = pathinfo($file);\n                if (strpos($file_parts['filename'], \".bck-change-sk\") !== false) {\n                    unlink($file); // delete file\n                }\n            }\n        }\n\n        echo '[{\"nextAction\":\"encrypt_items\" , \"error\":\"'.$error.'\" , \"nbOfItems\":\"'.$nb_of_items.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - ENCRYPT\n    */\n    case \"admin_action_change_salt_key___encrypt\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Allowed values for $_POST['object'] : \"items,logs,files,categories\"\n        if (!in_array($post_object, explode(\"items,logs,files,categories\", \",\"), true)) {\n            echo prepareExchangedData(array(\"error\" => \"This input is not allowed\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n        require_once 'main.functions.php';\n\n        // prepare SK\n        if (empty($_SESSION['reencrypt_new_salt']) || empty($_SESSION['reencrypt_old_salt'])) {\n            // SK is not correct\n            echo '[{\"nextAction\":\"\" , \"error\":\"saltkeys are empty???\" , \"nbOfItems\":\"\"}]';\n            break;\n        }\n\n        // what objects to treat\n        if (empty($post_object) === true) {\n            // no more object to treat\n            $nextAction = \"finishing\";\n        } else {\n            // manage list of objects\n            $objects = explode(\",\", $post_object);\n\n            if ($objects[0] === \"items\") {\n                //change all encrypted data in Items (passwords)\n                $rows = DB::query(\n                    \"SELECT id, pw, pw_iv\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE perso = %s\n                    LIMIT \".$post_start.\", \".$post_length,\n                    \"0\"\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'items',\n                            'current_field' => 'pw',\n                            'value_id' => $record['id'],\n                            'value' => $record['pw'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"items\").\" SET pw = '\".$record['pw'].\"' WHERE id = '\".$record['id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    $pw = cryption(\n                        $record['pw'],\n                        $_SESSION['reencrypt_old_salt'],\n                        \"decrypt\"\n                    );\n                    //encrypt with new SALT\n                    $encrypt = cryption(\n                        $pw['string'],\n                        $_SESSION['reencrypt_new_salt'],\n                        \"encrypt\"\n                    );\n\n                    //save in DB\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'pw' => $encrypt['string'],\n                            'pw_iv' => \"\"\n                        ),\n                        \"id = %i\",\n                        $record['id']\n                    );\n\n                    // update backup table\n                    DB::update(\n                        prefix_table('sk_reencrypt_backup'),\n                        array(\n                            'result' => \"ok\"\n                            ),\n                        \"id=%i\",\n                        $newID\n                    );\n                }\n            // ---\n            // CASE OF LOGS\n            // ---\n            } elseif ($objects[0] === \"logs\") {\n                //change all encrypted data in Logs (passwords)\n                $rows = DB::query(\n                    \"SELECT raison, increment_id\n                    FROM \".prefix_table(\"log_items\").\"\n                    WHERE action = %s AND raison LIKE 'at_pw :%'\n                    LIMIT \".$post_start.\", \".$post_length,\n                    \"at_modification\"\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'log_items',\n                            'current_field' => 'raison',\n                            'value_id' => $record['increment_id'],\n                            'value' => $record['raison'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"log_items\").\" SET raison = '\".$record['raison'].\"' WHERE increment_id = '\".$record['increment_id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    // extract the pwd\n                    $tmp = explode('at_pw :', $record['raison']);\n                    if (!empty($tmp[1])) {\n                        $pw = cryption(\n                            $tmp[1],\n                            $_SESSION['reencrypt_old_salt'],\n                            \"decrypt\"\n                        );\n                        //encrypt with new SALT\n                        $encrypt = cryption(\n                            $pw['string'],\n                            $_SESSION['reencrypt_new_salt'],\n                            \"encrypt\"\n                        );\n\n                        // save in DB\n                        DB::update(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'raison' => 'at_pw :'.$encrypt['string'],\n                                'encryption_type' => 'defuse'\n                            ),\n                            \"increment_id = %i\",\n                            $record['increment_id']\n                        );\n\n                        // update backup table\n                        DB::update(\n                            prefix_table('sk_reencrypt_backup'),\n                            array(\n                                'result' => \"ok\"\n                                ),\n                            \"id=%i\",\n                            $newID\n                        );\n                    }\n                }\n            // ---\n            // CASE OF CATEGORIES\n            // ---\n            } elseif ($objects[0] === \"categories\") {\n                //change all encrypted data in CATEGORIES (passwords)\n                $rows = DB::query(\n                    \"SELECT id, data\n                    FROM \".prefix_table(\"categories_items\").\"\n                    LIMIT \".$post_start.\", \".$post_length\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'categories_items',\n                            'current_field' => 'data',\n                            'value_id' => $record['id'],\n                            'value' => $record['data'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"categories_items\").\" SET data = '\".$record['data'].\"' WHERE id = '\".$record['id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    //\n                    $pw = cryption(\n                        $record['data'],\n                        $_SESSION['reencrypt_old_salt'],\n                        \"decrypt\"\n                    );\n                    //encrypt with new SALT\n                    $encrypt = cryption(\n                        $pw['string'],\n                        $_SESSION['reencrypt_new_salt'],\n                        \"encrypt\"\n                    );\n                    // save in DB\n                    DB::update(\n                        prefix_table(\"categories_items\"),\n                        array(\n                            'data' => $encrypt['string'],\n                            'encryption_type' => 'defuse'\n                        ),\n                        \"id = %i\",\n                        $record['id']\n                    );\n\n                    // update backup table\n                    DB::update(\n                        prefix_table('sk_reencrypt_backup'),\n                        array(\n                            'result' => \"ok\"\n                            ),\n                        \"id=%i\",\n                        $newID\n                    );\n                }\n            // ---\n            // CASE OF FILES\n            // ---\n            } elseif ($objects[0] === \"files\") {\n                // Change all encrypted data in FILES (passwords)\n                $rows = DB::query(\n                    \"SELECT id, file, status\n                    FROM \".prefix_table(\"files\").\"\n                    WHERE status = 'encrypted'\n                    LIMIT \".$post_start.\", \".$post_length\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'files',\n                            'current_field' => 'file',\n                            'value_id' => $record['id'],\n                            'value' => $record['file'],\n                            'current_sql' => \"no_query\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['file'])) {\n                        // make a copy of file\n                        if (!copy(\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\".copy\"\n                        )) {\n                            $error = \"Copy not possible\";\n                            exit;\n                        } else {\n                            // prepare a bck of file (that will not be deleted)\n                            $backup_filename = $record['file'].\".bck-change-sk.\".time();\n                            copy(\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                                $SETTINGS['path_to_upload_folder'].'/'.$backup_filename\n                            );\n                        }\n\n\n                        // Treat the file\n                        // STEP1 - Do decryption\n                            prepareFileWithDefuse(\n                                'decrypt',\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\"\n                            );\n\n                            // Do cleanup of files\n                            unlink($SETTINGS['path_to_upload_folder'].'/'.$record['file']);\n\n                        // STEP2 - Do encryption\n                            prepareFileWithDefuse(\n                                'encryp',\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\",\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file']\n                            );\n\n                            // Do cleanup of files\n                            unlink($SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\");\n\n\n                        // Update backup table\n                        DB::update(\n                            prefix_table('sk_reencrypt_backup'),\n                            array(\n                                'value2' => $backup_filename,\n                                'result' => \"ok\"\n                                ),\n                            \"id=%i\",\n                            $newID\n                        );\n                    }\n                }\n            }\n\n            $nextStart = intval($post_start) + intval($post_length);\n\n            // check if last item to change has been treated\n            if ($nextStart >= intval($post_nbItems)) {\n                array_shift($objects);\n                $nextAction = implode(\",\", $objects); // remove first object of the list\n\n                // do some things for new object\n                if (isset($objects[0])) {\n                    if ($objects[0] === \"logs\") {\n                        DB::query(\"SELECT increment_id FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND raison LIKE 'at_pw :%'\", \"at_modification\");\n                    } elseif ($objects[0] === \"files\") {\n                        DB::query(\"SELECT id FROM \".prefix_table(\"files\"));\n                    } elseif ($objects[0] === \"categories\") {\n                        DB::query(\"SELECT id FROM \".prefix_table(\"categories_items\"));\n                    } elseif ($objects[0] === \"custfields\") {\n                        DB::query(\"SELECT raison FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND raison LIKE 'at_pw :%'\", \"at_modification\");\n                    }\n                    $nb_of_items = DB::count();\n                } else {\n                    // now finishing\n                    $nextAction = \"finishing\";\n                    $nb_of_items = $error = $nextStart = \"\";\n                }\n            } else {\n                $nextAction = $post_object;\n                $nb_of_items = \"\";\n            }\n        }\n\n        echo '[{ \"nextAction\":\"'.$nextAction.'\" , \"nextStart\":\"'.$nextStart.'\" , \"error\":\"'.$error.'\" , \"nbOfItems\":\"'.$nb_of_items.'\" , \"oldsk\" : \"'.$_SESSION['reencrypt_old_salt'].'\" , \"newsk\" : \"'.$_SESSION['reencrypt_new_salt'].'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - END\n    */\n    case \"admin_action_change_salt_key___end\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n\n        // quit maintenance mode.\n        DB::update(\n            prefix_table(\"misc\"),\n            array(\n                'valeur' => '0',\n            ),\n            \"intitule = %s AND type= %s\",\n            \"maintenance_mode\",\n            \"admin\"\n        );\n\n        echo '[{\"nextAction\":\"done\" , \"error\":\"'.$error.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - Restore BACKUP data\n    */\n    case \"admin_action_change_salt_key___restore_backup\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // delete files\n        $rows = DB::query(\n            \"SELECT current_table, value, value2, current_sql\n            FROM \".prefix_table(\"sk_reencrypt_backup\")\n        );\n        foreach ($rows as $record) {\n            if ($record['current_table'] === \"items\" || $record['current_table'] === \"logs\" || $record['current_table'] === \"categories\") {\n                // excute query\n                DB::query(\n                    str_replace(\"\\'\", \"'\", $record['current_sql'])\n                );\n            } elseif ($record['current_table'] === \"files\") {\n                // restore backup file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value'])) {\n                    unlink($SETTINGS['path_to_upload_folder'].'/'.$record['value']);\n                    if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value2'])) {\n                        rename(\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['value2'],\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['value']\n                        );\n                    }\n                }\n            } elseif ($record['current_table'] === \"old_sk\") {\n                $previous_saltkey_filename = $record['value2'];\n            }\n        }\n\n        // restore saltkey file\n        if (file_exists($previous_saltkey_filename)) {\n            unlink(SECUREPATH.\"/teampass-seckey.txt\");\n            rename(\n                $previous_saltkey_filename,\n                SECUREPATH.'/teampass-seckey.txt'\n            );\n        }\n\n        // drop table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n\n        echo '[{\"status\":\"done\"}]';\n        break;\n\n    /*\n    * Change SALT Key - Delete BACKUP data\n    */\n    case \"admin_action_change_salt_key___delete_backup\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // delete files\n        $rows = DB::query(\n            \"SELECT value, value2\n            FROM \".prefix_table(\"sk_reencrypt_backup\").\"\n            WHERE current_table = 'files'\"\n        );\n        foreach ($rows as $record) {\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value2'])) {\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$record['value2']);\n            }\n        }\n\n        // drop table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n\n        echo '[{\"status\":\"done\"}]';\n        break;\n\n    /*\n    * Test the email configuraiton\n    */\n    case \"admin_email_test_configuration\":\n        if (empty($_SESSION['user_email'])) {\n            echo '[{\"result\":\"email_test_conf\", \"error\":\"error_mail_not_send\" , \"message\":\"User has no email defined!\"}]';\n        } else {\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            echo '[{\"result\":\"email_test_conf\", '.sendEmail($LANG['admin_email_test_subject'], $LANG['admin_email_test_body'], $_SESSION['user_email']).'}]';\n        }\n        break;\n\n    /*\n    * Send emails in backlog\n    */\n    case \"admin_email_send_backlog\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $rows = DB::query(\"SELECT * FROM \".prefix_table(\"emails\").\" WHERE status = %s OR status = %s\", \"not_sent\", \"\");\n        foreach ($rows as $record) {\n            //send email\n            $ret = json_decode(\n                @sendEmail(\n                    $record['subject'],\n                    $record['body'],\n                    $record['receivers']\n                )\n            );\n\n            if (!empty($ret['error'])) {\n                //update item_id in files table\n                DB::update(\n                    prefix_table(\"emails\"),\n                    array(\n                        'status' => \"not_sent\"\n                    ),\n                    \"timestamp = %s\",\n                    $record['timestamp']\n                );\n            } else {\n                //delete from DB\n                DB::delete(prefix_table(\"emails\"), \"timestamp = %s\", $record['timestamp']);\n            }\n        }\n\n        //update LOG\n        logEvents('admin_action', 'Emails backlog', $_SESSION['user_id'], $_SESSION['login']);\n\n        echo '[{\"result\":\"admin_email_send_backlog\", '.@sendEmail($LANG['admin_email_test_subject'], $LANG['admin_email_test_body'], $SETTINGS['email_from']).'}]';\n        break;\n\n    /*\n    * Generate exchanges encryption keys\n    */\n    case \"admin_action_generate_encrypt_keys\":\n        require_once(\"../includes/libraries/jCryption/jcryption.php\");\n        $keyLength = 1024;\n        $jCryption = new jCryption();\n        $numberOfPairs = 100;\n        $arrKeyPairs = array();\n        for ($i = 0; $i < $numberOfPairs; $i++) {\n            $arrKeyPairs[] = $jCryption->generateKeypair($keyLength);\n        }\n        $file = array();\n        $file[] = '<?php';\n        $file[] = '$arrKeys = ';\n        $file[] = var_export($arrKeyPairs, true);\n        $file[] = ';';\n        file_put_contents(SECUREPATH.\"/\".$numberOfPairs.\"_\".$keyLength.\"_keys.inc.php\", implode(\"\\n\", $file));\n\n        echo '[{\"result\":\"generated_keys_file\", \"error\":\"\"}]';\n        break;\n\n    /*\n    * Correct passwords prefix\n    */\n    /*case \"admin_action_pw_prefix_correct\":\n        require_once 'main.functions.php';\n        $numOfItemsChanged = 0;\n        // go for all Items and get their PW\n        $rows = DB::query(\"SELECT id, pw, pw_iv FROM \".prefix_table(\"items\").\" WHERE perso = %s\", \"0\");\n        foreach ($rows as $record) {\n            // check if key exists for this item\n            DB::query(\"SELECT * FROM \".prefix_table(\"keys\").\" WHERE `id` = %i AND `sql_table` = %s\", $record['id'], \"items\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                $storePrefix = false;\n                // decrypt pw\n                $pw = cryption($record['pw'], SALT, $record['pw_iv'], \"decrypt\");\n                if (!empty($pw['string']) && strlen($pw['string']) > 15 && isutf8($pw['string'])) {\n                    // Pw seems to have a prefix\n                    // get old prefix\n                    $randomKey = substr($pw, 0, 15);\n                    // check if prefix contains only lowercase and numerics\n                    //TODO\n                    // should we store?\n                    $storePrefix = true;\n                } elseif (!empty($pw) && isutf8($pw)) {\n                    // Pw doesn't seem to have a prefix\n\n                    // re-encrypt with key prefix\n                    $randomKey = generateKey();\n                    $pw = $randomKey.$pw;\n                    $pw = encrypt($pw);\n\n                    // store pw\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'pw' => $pw\n                        ),\n                        \"id=%s\",\n                        $record['id']\n                    );\n                    // should we store?\n                    $storePrefix = true;\n                }\n                if ($storePrefix === true) {\n                    // store key prefix\n                    DB::insert(\n                        prefix_table(\"keys\"),\n                        array(\n                            'table'     => 'items',\n                            'id'        => $record['id'],\n                            'rand_key'  => $randomKey\n                        )\n                    );\n                }\n\n                $numOfItemsChanged++;\n            }\n        }\n        echo '[{\"result\":\"pw_prefix_correct\", \"error\":\"\", \"ret\":\"'.$LANG['alert_message_done'].' '.$numOfItemsChanged.' '.$LANG['items_changed'].'\"}]';\n        break;*/\n\n    /*\n    * Attachments encryption\n    */\n    case \"admin_action_attachments_cryption\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        // init\n        $error = \"\";\n        $ret = \"\";\n        $cpt = 0;\n        $filesList = \"\";\n        $continu = true;\n\n        // get through files\n        if (null !== $post_option && empty($post_option) === false) {\n            // Loop on files\n            $rows = DB::query(\n                \"SELECT id, file, status\n                FROM \".prefix_table(\"files\").\"\n                LIMIT \".$post_start.\", \". $post_length\n            );\n            foreach ($rows as $record) {\n                if (is_file($SETTINGS['path_to_upload_folder'].'/'.$record['file'])) {\n                    $addFile = 0;\n                    if ($post_option== \"decrypt\" && $record['status'] === 'encrypted') {\n                        $addFile = 1;\n                    } elseif ($post_option == \"encrypt\" && $record['status'] === 'clear') {\n                        $addFile = 1;\n                    }\n\n                    if ($addFile === '1') {\n                        if (empty($filesList)) {\n                            $filesList = $entry;\n                        } else {\n                            $filesList .= \";\".$entry;\n                        }\n                    }\n                }\n            }\n        } else {\n            $error = \"No option\";\n        }\n\n        echo '[{\"result\":\"attachments_cryption\", \"error\":\"'.$error.'\", \"continu\":\"'.$continu.'\", \"list\":\"'.$filesList.'\", \"cpt\":\"0\"}]';\n        break;\n\n    /*\n     * Attachments encryption - Treatment in several loops\n     */\n    case \"admin_action_attachments_cryption_continu\":\n        include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $cpt = 0;\n        $newFilesList = \"\";\n        $continu = true;\n        $error = \"\";\n\n        // load PhpEncryption library\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'File.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // treat 10 files\n        $filesList = explode(';', $post_list);\n        foreach ($filesList as $file) {\n            if ($cpt < 5) {\n                // skip file is Coherancey not respected\n                if (is_file($SETTINGS['path_to_upload_folder'].'/'.$file)) {\n                    // Case where we want to decrypt\n                    if ($post_option === \"decrypt\") {\n                        prepareFileWithDefuse(\n                            'decrypt',\n                            $SETTINGS['path_to_upload_folder'].'/'.$file,\n                            $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file\n                        );\n                    // Case where we want to encrypt\n                    } elseif ($post_option === \"encrypt\") {\n                        prepareFileWithDefuse(\n                            'encrypt',\n                            $SETTINGS['path_to_upload_folder'].'/'.$file,\n                            $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file\n                        );\n                    }\n                    // Do file cleanup\n                    fileDelete($SETTINGS['path_to_upload_folder'].'/'.$file);\n                    rename(\n                        $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file,\n                        $SETTINGS['path_to_upload_folder'].'/'.$file\n                    );\n\n                    // store in DB\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'status' => $post_option === \"decrypt\" ? \"clear\" : \"encrypted\"\n                                ),\n                            \"file=%s\",\n                            $file\n                        );\n\n                        $cpt++;\n                }\n            } else {\n                // build list\n                if (empty($newFilesList)) {\n                    $newFilesList = $file;\n                } else {\n                    $newFilesList .= \";\".$file;\n                }\n            }\n        }\n\n        if (empty($newFilesList)) {\n            $continu = false;\n        }\n\n        echo '[{\"error\":\"'.$error.'\", \"continu\":\"'.$continu.'\", \"list\":\"'.$newFilesList.'\", \"cpt\":\"'.($post_cpt + $cpt).'\"}]';\n        break;\n\n    /*\n     * API save key\n     */\n    case \"admin_action_api_save_key\":\n        // Check KEY and rights\n        if ($post_session_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Init\n        $error = \"\";\n\n        // add new key\n        if (null !== $post_action && $post_action === \"add\") {\n            DB::insert(\n                prefix_table(\"api\"),\n                array(\n                    'id'        => null,\n                    'type'      => 'key',\n                    'label'     => $post_label,\n                    'value'       => $post_key,\n                    'timestamp' => time()\n                )\n            );\n        // Update existing key\n        } elseif (null !== $post_action && $post_action === \"update\") {\n            DB::update(\n                prefix_table(\"api\"),\n                array(\n                    'label'     => $post_label,\n                    'timestamp' => time()\n                ),\n                \"id=%i\",\n                $post_id\n            );\n        // Delete existing key\n        } elseif (null !== $post_action && $post_action === \"delete\") {\n            DB::query(\n                \"DELETE FROM \".prefix_table(\"api\").\" WHERE id = %i\",\n                $post_id\n            );\n        }\n        echo '[{\"error\":\"'.$error.'\"}]';\n        break;\n\n    /*\n       * API save key\n    */\n    case \"admin_action_api_save_ip\":\n        // Check KEY and rights\n        if ($post_session_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Init\n        $error = \"\";\n\n        // add new key\n        if (null !== $post_action && $post_action === \"add\") {\n            DB::insert(\n                prefix_table(\"api\"),\n                array(\n                    'id'        => null,\n                    'type'      => 'ip',\n                    'label'     => $post_label,\n                    'value'       => $post_key,\n                    'timestamp' => time()\n                )\n            );\n        // Update existing key\n        } elseif (null !== $post_action && $post_action === \"update\") {\n                DB::update(\n                    prefix_table(\"api\"),\n                    array(\n                        'label'     => $post_label,\n                        'value'     => $post_key,\n                        'timestamp' => time()\n                    ),\n                    \"id=%i\",\n                    $post_id\n                );\n        // Delete existing key\n        } elseif (null !== $post_action && $post_action === \"delete\") {\n            DB::query(\"DELETE FROM \".prefix_table(\"api\").\" WHERE id=%i\", $post_id);\n        }\n        echo '[{\"error\":\"'.$error.'\"}]';\n        break;\n\n    case \"save_api_status\":\n        // Do query\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"api\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"api\",\n                    'valeur' => $post_status\n                    )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $post_status\n                    ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"api\"\n            );\n        }\n        $SETTINGS['api'] = $post_status;\n        break;\n\n    case \"save_duo_status\":\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"duo\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"duo\",\n                    'valeur' => $post_status\n                    )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $post_status\n                    ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"duo\"\n            );\n        }$post_status;\n        break;\n\n    case \"save_duo_in_sk_file\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // Prepare variables\n        $akey = htmlspecialchars_decode($dataReceived['akey']);\n        $ikey = htmlspecialchars_decode($dataReceived['ikey']);\n        $skey = htmlspecialchars_decode($dataReceived['skey']);\n        $host = htmlspecialchars_decode($dataReceived['host']);\n\n        //get infos from SETTINGS.PHP file\n        $filename = $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n        $tmp_skfile = '';\n        if (file_exists($filename)) {\n            // get sk.php file path\n            $settingsFile = file($filename);\n            while (list($key, $val) = each($settingsFile)) {\n                if (substr_count($val, \"@define('SECUREPATH'\")) {\n                    $tmp_skfile = substr($val, 23, strpos($val, \"');\") - 23).'/sk.php';\n                }\n            }\n\n            // before perform a copy of sk.php file\n            if (file_exists($tmp_skfile)) {\n                //Do a copy of the existing file\n                if (!copy(\n                    $tmp_skfile,\n                    $tmp_skfile.'.'.date(\n                        \"Y_m_d\",\n                        mktime(0, 0, 0, date('m'), date('d'), date('y'))\n                    )\n                )) {\n                    echo '[{\"result\" : \"\" , \"error\" : \"Could NOT perform a copy of file: '.$tmp_skfile.'\"}]';\n                    break;\n                } else {\n                    fileDelete($tmp_skfile);\n                }\n            } else {\n                // send back an error\n                echo '[{\"result\" : \"\" , \"error\" : \"Could NOT access file: '.$tmp_skfile.'\"}]';\n                break;\n            }\n        }\n\n        // Write back values in sk.php file\n        $fh = fopen($tmp_skfile, 'w');\n        $result2 = fwrite(\n            $fh,\n            utf8_encode(\n                \"<?php\n@define('COST', '13'); // Don't change this.\n// DUOSecurity credentials\n@define('AKEY', '\".(string) $akey.\"');\n@define('IKEY', '\".(string) $ikey.\"');\n@define('SKEY', '\".(string) $skey.\"');\n@define('HOST', '\".(string) $host.\"');\n?>\"\n            )\n        );\n        fclose($fh);\n\n\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['admin_duo_stored']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_google_options\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // Google Authentication\n        if (htmlspecialchars_decode($dataReceived['google_authentication']) == \"false\") {\n            $tmp = 0;\n        } else {\n            $tmp = 1;\n        }\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"google_authentication\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"google_authentication\",\n                    'valeur' => $tmp\n                )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $tmp\n                ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"google_authentication\"\n            );\n        }\n        $SETTINGS['google_authentication'] = htmlspecialchars_decode($dataReceived['google_authentication']);\n\n        // ga_website_name\n        if (!is_null($dataReceived['ga_website_name'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"ga_website_name\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"ga_website_name\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['ga_website_name'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['ga_website_name'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"ga_website_name\"\n                );\n            }\n            $SETTINGS['ga_website_name'] = htmlspecialchars_decode($dataReceived['ga_website_name']);\n        } else {\n            $SETTINGS['ga_website_name'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_agses_options\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // agses_hosted_url\n        if (!is_null($dataReceived['agses_hosted_url'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_url\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_url\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_url'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_url'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_url\"\n                );\n            }\n            $SETTINGS['agses_hosted_url'] = htmlspecialchars_decode($dataReceived['agses_hosted_url']);\n        } else {\n            $SETTINGS['agses_hosted_url'] = \"\";\n        }\n\n        // agses_hosted_id\n        if (!is_null($dataReceived['agses_hosted_id'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_id\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_id\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_id'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_id'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_id\"\n                );\n            }\n            $SETTINGS['agses_hosted_id'] = htmlspecialchars_decode($dataReceived['agses_hosted_id']);\n        } else {\n            $SETTINGS['agses_hosted_id'] = \"\";\n        }\n\n        // agses_hosted_apikey\n        if (!is_null($dataReceived['agses_hosted_apikey'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_apikey\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_apikey\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_apikey'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_apikey'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_apikey\"\n                );\n            }\n            $SETTINGS['agses_hosted_apikey'] = htmlspecialchars_decode($dataReceived['agses_hosted_apikey']);\n        } else {\n            $SETTINGS['agses_hosted_apikey'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_option_change\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n        $type = \"admin\";\n\n        require_once 'main.functions.php';\n\n        // In case of key, then encrypt it\n        if ($dataReceived['field'] === 'bck_script_passkey') {\n            $dataReceived['value'] = cryption(\n                $dataReceived['value'],\n                \"\",\n                \"encrypt\"\n            )['string'];\n        }\n\n        // Check if setting is already in DB. If NO then insert, if YES then update.\n        $data = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\"\n            WHERE type = %s AND intitule = %s\",\n            $type,\n            $dataReceived['field']\n        );\n        $counter = DB::count();\n        if ($counter === 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $dataReceived['value'],\n                    'type' => $type,\n                    'intitule' => $dataReceived['field']\n                    )\n            );\n            // in case of stats enabled, add the actual time\n            if ($dataReceived['field'] === 'send_stats') {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => time(),\n                        'type' => $type,\n                        'intitule' => $dataReceived['field'].'_time'\n                        )\n                );\n            }\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $dataReceived['value']\n                    ),\n                \"type = %s AND intitule = %s\",\n                $type,\n                $dataReceived['field']\n            );\n            // in case of stats enabled, update the actual time\n            if ($dataReceived['field'] === 'send_stats') {\n                // Check if previous time exists, if not them insert this value in DB\n                $data_time = DB::query(\n                    \"SELECT * FROM \".prefix_table(\"misc\").\"\n                    WHERE type = %s AND intitule = %s\",\n                    $type,\n                    $dataReceived['field'].'_time'\n                );\n                $counter = DB::count();\n                if ($counter === 0) {\n                    DB::insert(\n                        prefix_table(\"misc\"),\n                        array(\n                            'valeur' => 0,\n                            'type' => $type,\n                            'intitule' => $dataReceived['field'].'_time'\n                            )\n                    );\n                } else {\n                    DB::update(\n                        prefix_table(\"misc\"),\n                        array(\n                            'valeur' => 0\n                            ),\n                        \"type = %s AND intitule = %s\",\n                        $type,\n                        $dataReceived['field']\n                    );\n                }\n            }\n        }\n\n        // special Cases\n        if ($dataReceived['field'] == \"cpassman_url\") {\n            // update also jsUrl for CSFP protection\n            $jsUrl = $dataReceived['value'].'/includes/libraries/csrfp/js/csrfprotector.js';\n            $csrfp_file = \"../includes/libraries/csrfp/libs/csrfp.config.php\";\n            $data = file_get_contents($csrfp_file);\n            $posJsUrl = strpos($data, '\"jsUrl\" => \"');\n            $posEndLine = strpos($data, '\",', $posJsUrl);\n            $line = substr($data, $posJsUrl, ($posEndLine - $posJsUrl + 2));\n            $newdata = str_replace($line, '\"jsUrl\" => \"'.$jsUrl.'\",', $data);\n            file_put_contents($csrfp_file, $antiXss->xss_clean($newdata));\n        } elseif ($dataReceived['field'] == \"restricted_to_input\" && $dataReceived['value'] == \"0\") {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => 0\n                    ),\n                \"type = %s AND intitule = %s\",\n                $type,\n                'restricted_to_roles'\n            );\n        }\n\n        // store in SESSION\n        $SETTINGS[$dataReceived['field']] = $dataReceived['value'];\n\n        // save change in config file\n        handleConfigFile(\"update\", $dataReceived['field'], $dataReceived['value']);\n\n        // Encrypt data to return\n        echo prepareExchangedData(\n            array(\n                \"error\" => \"\",\n                \"misc\" => $counter.\" ; \".$SETTINGS[$dataReceived['field']]\n            ),\n            \"encode\"\n        );\n        break;\n\n    case \"get_values_for_statistics\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Encrypt data to return\n        echo prepareExchangedData(\n            getStatisticsData(),\n            \"encode\"\n        );\n\n        break;\n\n    case \"save_sending_statistics\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // send statistics\n        if (null !== $post_status) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"send_stats\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"send_stats\",\n                        'valeur' => $post_status\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $post_status\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"send_stats\"\n                );\n            }\n            $SETTINGS['send_stats'] = $post_status;\n        } else {\n            $SETTINGS['send_stats'] = \"0\";\n        }\n\n        // send statistics items\n        if (null !== $post_list) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"send_statistics_items\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"send_statistics_items\",\n                        'valeur' => $post_list\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $post_list\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"send_statistics_items\"\n                );\n            }\n            $SETTINGS['send_statistics_items'] = $post_list;\n        } else {\n            $SETTINGS['send_statistics_items'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"admin_ldap_test_configuration\":\n        // Check\n        if (null !== $post_option || empty($post_option) === true) {\n            echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"error\" : \"No options\" }]';\n            break;\n        }\n\n        require_once 'main.functions.php';\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData($post_option, \"decode\");\n\n        if (empty($dataReceived[0]['username_pwd']) || empty($dataReceived[0]['username'])) {\n            echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"error\" : \"No user credentials\" }]';\n            break;\n        }\n\n        $debug_ldap = $ldap_suffix = \"\";\n\n        //Multiple Domain Names\n        if (strpos(html_entity_decode($dataReceived[0]['username']), '\\\\') === true) {\n            $ldap_suffix = \"@\".substr(html_entity_decode($dataReceived[0]['username']), 0, strpos(html_entity_decode($dataReceived[0]['username']), '\\\\'));\n            $dataReceived[0]['username'] = substr(html_entity_decode($dataReceived[0]['username']), strpos(html_entity_decode($dataReceived[0]['username']), '\\\\') + 1);\n        }\n        if ($dataReceived[0]['ldap_type'] === 'posix-search') {\n            $ldapURIs = \"\";\n            foreach (explode(\",\", $dataReceived[0]['ldap_domain_controler']) as $domainControler) {\n                if ($dataReceived[0]['ldap_ssl_input'] == 1) {\n                    $ldapURIs .= \"ldaps://\".$domainControler.\":\".$dataReceived[0]['ldap_port'].\" \";\n                } else {\n                    $ldapURIs .= \"ldap://\".$domainControler.\":\".$dataReceived[0]['ldap_port'].\" \";\n                }\n            }\n\n            $debug_ldap .= \"LDAP URIs : \".$ldapURIs.\"<br/>\";\n\n            $ldapconn = ldap_connect($ldapURIs);\n\n            if ($dataReceived[0]['ldap_tls_input']) {\n                ldap_start_tls($ldapconn);\n            }\n\n            $debug_ldap .= \"LDAP connection : \".($ldapconn ? \"Connected\" : \"Failed\").\"<br/>\";\n\n            ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);\n            if ($ldapconn) {\n                $ldapbind = @ldap_bind($ldapconn, $dataReceived[0]['ldap_bind_dn'], $dataReceived[0]['ldap_bind_passwd']);\n\n                $debug_ldap .= \"LDAP bind : \".($ldapbind ? \"Bound\" : \"Failed\").\"<br/>\";\n\n                if ($ldapbind) {\n                    $filter = \"(&(\".$dataReceived[0]['ldap_user_attribute'].\"=$username)(objectClass=\".$dataReceived[0]['ldap_object_class'].\"))\";\n                    $result = ldap_search(\n                        $ldapconn,\n                        $dataReceived[0]['ldap_search_base'],\n                        $filter,\n                        array('dn', 'mail', 'givenname', 'sn')\n                    );\n                    if (isset($dataReceived[0]['ldap_usergroup'])) {\n                        $filter_group = \"memberUid=\".$username;\n                        $result_group = ldap_search(\n                            $ldapconn,\n                            $dataReceived[0]['ldap_usergroup'],\n                            $filter_group,\n                            array('dn')\n                        );\n\n                        $debug_ldap .= 'Search filter (group): '.$filter_group.\"<br/>\".\n                                    'Results : '.print_r(ldap_get_entries($ldapconn, $result_group), true).\"<br/>\";\n\n                        if (!ldap_count_entries($ldapconn, $result_group)) {\n                                $ldapConnection = \"Error - No entries found\";\n                        }\n                    }\n\n                    $debug_ldap .= 'Search filter : '.$filter.\"<br/>\".\n                            'Results : '.print_r(ldap_get_entries($ldapconn, $result), true).\"<br/>\";\n\n                    if (ldap_count_entries($ldapconn, $result)) {\n                        // try auth\n                        $result = ldap_get_entries($ldapconn, $result);\n                        $user_dn = $result[0]['dn'];\n                        $ldapbind = ldap_bind($ldapconn, $user_dn, $passwordClear);\n                        if ($ldapbind) {\n                            $ldapConnection = \"Successfully connected\";\n                        } else {\n                            $ldapConnection = \"Error - Cannot connect user!\";\n                        }\n                    }\n                } else {\n                    $ldapConnection = \"Error - Could not bind server!\";\n                }\n            } else {\n                $ldapConnection = \"Error - Could not connect to server!\";\n            }\n        } else {\n            $debug_ldap .= \"Get all ldap params: <br/>\".\n                '  - base_dn : '.$dataReceived[0]['ldap_domain_dn'].\"<br/>\".\n                '  - account_suffix : '.$dataReceived[0]['ldap_suffix'].\"<br/>\".\n                '  - domain_controllers : '.$dataReceived[0]['ldap_domain_controler'].\"<br/>\".\n                '  - port : '.$dataReceived[0]['ldap_port'].\"<br/>\".\n                '  - use_ssl : '.$dataReceived[0]['ldap_ssl_input'].\"<br/>\".\n                '  - use_tls : '.$dataReceived[0]['ldap_tls_input'].\"<br/>*********<br/>\";\n\n            $adldap = new SplClassLoader('adLDAP', '../includes/libraries/LDAP');\n            $adldap->register();\n\n            // Posix style LDAP handles user searches a bit differently\n            if ($dataReceived[0]['ldap_type'] === 'posix') {\n                $ldap_suffix = ','.$dataReceived[0]['ldap_suffix'].','.$dataReceived[0]['ldap_domain_dn'];\n            } elseif ($dataReceived[0]['ldap_type'] === 'windows' && $ldap_suffix === '') { //Multiple Domain Names\n                $ldap_suffix = $dataReceived[0]['ldap_suffix'];\n            }\n            $adldap = new adLDAP\\adLDAP(\n                array(\n                    'base_dn' => $dataReceived[0]['ldap_domain_dn'],\n                    'account_suffix' => $ldap_suffix,\n                    'domain_controllers' => explode(\",\", $dataReceived[0]['ldap_domain_controler']),\n                    'port' => $dataReceived[0]['ldap_port'],\n                    'use_ssl' => $dataReceived[0]['ldap_ssl_input'],\n                    'use_tls' => $dataReceived[0]['ldap_tls_input']\n                )\n            );\n\n            $debug_ldap .= \"Create new adldap object : \".$adldap->getLastError().\"<br/><br/>\";\n\n            // openLDAP expects an attribute=value pair\n            if ($dataReceived[0]['ldap_type'] === 'posix') {\n                $auth_username = $dataReceived[0]['ldap_user_attribute'].'='.$dataReceived[0]['username'];\n            } else {\n                $auth_username = $dataReceived[0]['username'];\n            }\n\n            // authenticate the user\n            if ($adldap->authenticate($auth_username, html_entity_decode($dataReceived[0]['username_pwd']))) {\n                $ldapConnection = \"Successfull\";\n            } else {\n                $ldapConnection = \"Not possible to get connected with this user\";\n            }\n\n            $debug_ldap .= \"After authenticate : \".$adldap->getLastError().\"<br/><br/>\".\n                \"ldap status : \".$ldapConnection; //Debug\n        }\n\n        echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"results\" : \"'.$antiXss->xss_clean($debug_ldap).'\" }]';\n\n        break;\n\n    case \"is_backup_table_existing\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        if ($result = DB::query(\"SHOW TABLES LIKE '\".prefix_table(\"sk_reencrypt_backup\").\"'\")) {\n            if (DB::count() === 1) {\n                echo \"1\";\n            } else {\n                echo \"0\";\n            }\n        } else {\n            echo \"0\";\n        }\n\n        break;\n}\n", "<?php\n/**\n * @file          import.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nuse Goodby\\CSV\\Import\\Standard\\Lexer;\nuse Goodby\\CSV\\Import\\Standard\\Interpreter;\nuse Goodby\\CSV\\Import\\Standard\\LexerConfig;\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// No time limit\nset_time_limit(0);\n\n// Set some constants for program readability\ndefine('KP_PATH', 0);\ndefine('KP_GROUP', 1);\ndefine('KP_TITLE', 2);\ndefine('KP_PASSWORD', 3);\ndefine('KP_USERNAME', 4);\ndefine('KP_URL', 5);\ndefine('KP_UUID', 6);\ndefine('KP_NOTES', 7);\n\n/*\n * sanitiseString\n *\n * Used to format the string ready for insertion in to the database\n */\n/**\n * @param string $crLFReplacement\n */\nfunction sanitiseString($str, $crLFReplacement)\n{\n    $str = preg_replace('#[\\r\\n]#', $crLFReplacement, $str);\n    $str = str_replace('\\\\', '&#92;', $str);\n    $str = str_replace('\"', \"&quot;\", $str);\n    if (!empty($str)) {\n        addslashes($str);\n    }\n    return $str;\n}\n\nglobal $k, $settings;\nheader(\"Content-type: text/html; charset=utf-8\");\nerror_reporting(E_ERROR);\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n\n//Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// call needed functions\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n// connect to the server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n\n//Load AES\n$aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n$aes->register();\n\n//User's language loading\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n\n// Build query\nswitch (filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n    //Check if import CSV file format is what expected\n    case \"import_file_format_csv\":\n        //load full tree\n        $tree->rebuild();\n        $tree = $tree->getDescendants();\n\n        // do some initializations\n        $file = $SETTINGS['path_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING);\n        $size = 4096;\n        $separator = \",\";\n        $enclosure = '\"';\n        $fields_expected = array(\"Label\", \"Login\", \"Password\", \"URL\", \"Comments\"); //requiered fields from CSV\n        $importation_possible = true;\n        $display = \"<table>\";\n        $line_number = $prev_level = 0;\n        $account = $text = \"\";\n        $continue_on_next_line = false;\n\n        // Open file\n        if ($fp = fopen($file, \"r\")) {\n            // data from CSV\n            $valuesToImport = array();\n            // load libraries\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/Lexer.php';\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/Interpreter.php';\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/LexerConfig.php';\n\n            // Lexer configuration\n            $config = new LexerConfig();\n            $lexer = new Lexer($config);\n            $config->setIgnoreHeaderLine(\"true\");\n            // extract data from CSV file\n            $interpreter = new Interpreter();\n            $interpreter->addObserver(function (array $row) use (&$valuesToImport) {\n                $valuesToImport[] = array(\n                    'Label'     => $row[0],\n                    'Login'     => $row[1],\n                    'Password'  => $row[2],\n                    'url'       => $row[3],\n                    'Comments'  => $row[4],\n                );\n            });\n            $lexer->parse($file, $interpreter);\n\n            // extract one line\n            foreach ($valuesToImport as $key => $row) {\n                //Check number of fields. MUST be 5. if not stop importation\n                if (count($row) != 5) {\n                    $importation_possible = false;\n                    //Stop if file has not expected structure\n                    if ($importation_possible === false) {\n                        echo '[{\"error\":\"bad_structure\"}]';\n                        break;\n                    }\n                }\n\n                //If any comment is on several lines, then replace 'lf' character\n                $row['Comments'] = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"<br />\", $row['Comments']);\n\n                // Check if current line contains a \"<br />\" character in order to identify an ITEM on several CSV lines\n                if (substr_count('<br />', $row['Comments']) > 0 || substr_count('<br />', $row['Label']) > 0) {\n                    $continue_on_next_line = true;\n                    $comment .= addslashes($row['Label']);\n                } else {\n                    // Store in variable values from previous line\n                    if (!empty($account)) {\n                        if ($continue_on_next_line === false) {\n                            // Prepare listing that will be shown to user\n                            $display .= '<tr><td><input type=\\\"checkbox\\\" class=\\\"item_checkbox\\\" id=\\\"item_to_import-'.$line_number.'\\\" /></td><td><span id=\\\"item_text-'.$line_number.'\\\">'.$account.'</span><input type=\\\"hidden\\\" value=\\\"'.$account.'@|@'.$login.'@|@'.$pwd.'@|@'.$url.'@|@'.$comment.'@|@'.$line_number.'\\\" id=\\\"item_to_import_values-'.$line_number.'\\\" /></td></tr>';\n\n                            // Initialize this variable in order to restart from scratch\n                            $account = \"\";\n                        }\n                    }\n                }\n\n                // Get values of current line\n                if ($account == \"\" && $continue_on_next_line === false) {\n                    $account = htmlspecialchars($row['Label'], ENT_QUOTES, 'UTF-8');\n                    $login = htmlspecialchars($row['Login'], ENT_QUOTES, 'UTF-8');\n                    $pwd = str_replace('\"', \"&quot;\", $row['Password']);\n                    $url = addslashes($row['url']);\n                    $to_find = array(\"\\\"\", \"'\");\n                    $to_ins = array(\"&quot\", \"&#39;\");\n                    $comment = htmlentities(addslashes(str_replace($to_find, $to_ins, $row['Comments'])), ENT_QUOTES, 'UTF-8');\n\n                    $continue_on_next_line = false;\n                }\n\n                //increment number of lines found\n                $line_number++;\n            }\n            // close file\n            fclose($fp);\n\n            // remove file\n            fileDelete($file);\n        } else {\n            echo '[{\"error\":\"cannot_open\"}]';\n            break;\n        }\n\n        if ($line_number > 0) {\n            //add last line\n            $display .= '<tr><td><input type=\\\"checkbox\\\" class=\\\"item_checkbox\\\" id=\\\"item_to_import-'.$line_number.'\\\" /></td><td><span id=\\\"item_text-'.$line_number.'\\\">'.$account.'</span><input type=\\\"hidden\\\" value=\\\"'.$account.'@|@'.$login.'@|@'.str_replace('\"', \"&quote;\", $pwd).'@|@'.$url.'@|@'.$comment.'@|@'.$line_number.'\\\" id=\\\"item_to_import_values-'.$line_number.'\\\" /></td></tr>';\n\n            // Add a checkbox for select/unselect all others\n            $display .= '<tr><td colspan=\\\"2\\\"><br><input type=\\\"checkbox\\\" id=\\\"item_all_selection\\\" />&nbsp;'.$LANG['all'].'</td></tr>';\n\n            // Prepare a list of all folders that the user can choose\n            $display .= '</table><div style=\\\"margin:10px 0 10px 0;\\\"><label><b>'.$LANG['import_to_folder'].'</b></label>&nbsp;<select id=\\\"import_items_to\\\" style=\\\"width:87%;\\\">';\n            foreach ($tree as $t) {\n                if (in_array($t->id, $_SESSION['groupes_visibles'])) {\n                    $ident = \"\";\n                    for ($x = 1; $x < $t->nlevel; $x++) {\n                        $ident .= \"&nbsp;&nbsp;\";\n                    }\n                    if (null !== filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT) && filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT) === $t->id) {\n                        $selected = \" selected\";\n                    } else {\n                        $selected = \"\";\n                    }\n                    if ($prev_level != null && $prev_level < $t->nlevel) {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    } elseif ($prev_level != null && $prev_level == $t->nlevel) {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    } else {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    }\n                    $prev_level = $t->nlevel;\n                }\n            }\n            $display .= '</select></div>';\n\n            // Show results to user.\n            echo '[{\"error\":\"no\" , \"output\" : \"'.$display.'\"}]';\n        }\n        break;\n\n    //Insert into DB the items the user has selected\n    case \"import_items\":\n        //decrypt and retreive data in JSON format\n        $dataReceived = (Encryption\\Crypt\\aesctr::decrypt(\n            filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n            $_SESSION['key'],\n            256\n        ));\n\n        //Get some info about personal folder\n        if (filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT) === $_SESSION['user_id']) {\n            $personalFolder = 1;\n        } else {\n            $personalFolder = 0;\n        }\n        $data_fld = DB::queryFirstRow(\n            \"SELECT title\n            FROM \".prefix_table(\"nested_tree\").\"\n            WHERE id = %i\",\n            filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT)\n        );\n\n        //Prepare variables\n        $listItems = htmlspecialchars_decode($dataReceived);\n        $list = \"\";\n\n        foreach (explode('@_#sep#_@', stripslashes($listItems)) as $item) {\n            //For each item, insert into DB\n            $item = explode('@|@', $item); //explode item to get all fields\n\n            //Encryption key\n            if ($personalFolder == 1) {\n                $encrypt = cryption(\n                    $item[2],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"encrypt\"\n                );\n            } else {\n                $encrypt = cryption(\n                    $item[2],\n                    \"\",\n                    \"encrypt\"\n                );\n            }\n\n            // Insert new item in table ITEMS\n            DB::insert(\n                prefix_table(\"items\"),\n                array(\n                    'label' => substr($item[0], 0, 500),\n                    'description' => empty($item[4]) ? '' : $item[4],\n                    'pw' => $encrypt['string'],\n                    'pw_iv' => $encrypt['iv'],\n                    'url' => empty($item[3]) ? '' : substr($item[3], 0, 500),\n                    'id_tree' => filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT),\n                    'login' => empty($item[1]) ? '' : substr($item[1], 0, 200),\n                    'anyone_can_modify' => filter_input(INPUT_POST, 'import_csv_anyone_can_modify', FILTER_SANITIZE_STRING) === \"true\" ? 1 : 0\n                )\n            );\n            $newId = DB::insertId();\n\n            //if asked, anyone in role can modify\n            if (null !== filter_input(INPUT_POST, 'import_csv_anyone_can_modify_in_role', FILTER_SANITIZE_STRING)\n                && filter_input(INPUT_POST, 'import_csv_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) === \"true\"\n            ) {\n                foreach ($_SESSION['arr_roles'] as $role) {\n                    DB::insert(\n                        prefix_table(\"restriction_to_roles\"),\n                        array(\n                            'role_id' => $role['id'],\n                            'item_id' => $newId\n                        )\n                    );\n                }\n            }\n\n            // Insert new item in table LOGS_ITEMS\n            DB::insert(\n                prefix_table(\"log_items\"),\n                array(\n                    'id_item' => $newId,\n                    'date' => time(),\n                    'id_user' => $_SESSION['user_id'],\n                    'action' => 'at_creation'\n                )\n            );\n\n            if (empty($list)) {\n                $list = $item[5];\n            } else {\n                $list .= \";\".$item[5];\n            }\n\n            //Add entry to cache table\n            DB::insert(\n                prefix_table(\"cache\"),\n                array(\n                    'id' => $newId,\n                    'label' => substr($item[0], 0, 500),\n                    'description' => empty($item[4]) ? '' : $item[4],\n                    'id_tree' => filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT),\n                    'url' => \"0\",\n                    'perso' => $personalFolder == 0 ? 0 : 1,\n                    'login' => empty($item[1]) ? '' : substr($item[1], 0, 500),\n                    'folder' => $data_fld['title'],\n                    'author' => $_SESSION['user_id'],\n                    'timestamp' => time(),\n                    'tags' => '',\n                    'restricted_to' => '0',\n                    'renewal_period' => \"0\",\n                    'timestamp' => time()\n                )\n            );\n        }\n        echo '[{\"items\":\"'.$list.'\"}]';\n        break;\n\n    //Check if import KEEPASS file format is what expected\n    case \"import_file_format_keepass\":\n        //Initialization\n        $root = $meta = $group = $entry = $key = $title = $notes = $pwd = $username = $url = $notKeepassFile = $newItem = $history = $generatorFound = false;\n        $name = $levelInProgress = $previousLevel = $fullPath = $historyLevel = $path = $display = $keepassVersion = \"\";\n        $numGroups = $numItems = 0;\n        $temparray = $arrFolders = array();\n        $levelMin = 2;\n        $foldersSeparator = '@&##&@';\n        $itemsSeparator = '<=|#|=>';\n        $lineEndSeparator = '@*1|#9*|@';\n\n        //prepare CACHE files\n        $cacheFileName = $SETTINGS['path_to_files_folder'].\"/cpassman_cache_\".md5(time().mt_rand());\n        $cacheFileNameFolder = $cacheFileName.\"_folders\";\n        $cacheFile = fopen($cacheFileName, \"w\");\n        $cacheFileF = fopen($cacheFileNameFolder, \"w\");\n        $logFileName = \"/keepassImport_\".date('YmdHis').\".log\";\n        $cacheLogFile = fopen($SETTINGS['path_to_files_folder'].$logFileName, 'w');\n\n        //read xml file\n        if (file_exists(\"'\".$SETTINGS['path_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING)).\"'\") {\n            $xml = simplexml_load_file(\n                $SETTINGS['path_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING)\n            );\n        }\n\n        /**\n        Recursive function that will permit to read each level of XML nodes\n         */\n        function recursiveKeepassXML($xmlRoot, $xmlLevel = 0)\n        {\n            global $meta, $root, $group, $name, $entry, $levelMin, $title, $notes, $pwd, $username, $url,\n                $newItem, $temparray, $history, $levelInProgress, $historyLevel,\n                $path, $previousLevel, $generatorFound, $cacheFile, $cacheFileF, $numGroups,\n                $numItems, $foldersSeparator, $itemsSeparator, $keepassVersion, $arrFolders;\n\n            $groupsArray = array();\n\n            // For each node, get the name and SimpleXML balise\n            foreach ($xmlRoot as $nom => $elem) {\n                /*\n                * check if file is generated by keepass 1\n                * key \"pwentry\" is only used in KP1.xx XML files\n                */\n                if ($nom == \"pwentry\") {\n                    if (empty($keepassVersion)) {\n                        $keepassVersion = 1;\n                        $generatorFound = true;\n                        $entry = true;\n                    } else {\n                        $entry = true;\n                    }\n\n                    //get children\n                    $xmlChildren = $elem->children();\n\n                    //recursive call\n                    recursiveKeepassXML($xmlChildren, $xmlLevel + 1);\n                }\n                //IMPORTING KEEPASS 1 XML FILE\n                if ($keepassVersion == 1) {\n                    if ($entry === true && $nom == \"expiretime\") {\n                        //save previous keepass entry\n                        $tree = preg_replace('/\\\\\\\\/', $foldersSeparator, $temparray['tree']);\n                        fputs(\n                            $cacheFile,\n                            $tree.$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.$temparray[KP_TITLE].\n                            $itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].\n                            $itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n                        );\n\n                        if (!in_array($temparray['tree'], $arrFolders)) {\n                            fwrite($cacheFileF, $tree.\"\\n\");\n                            array_push($arrFolders, $temparray['tree']);\n                        }\n\n                        $temparray = array();\n                        $newItem++;\n                    }\n\n                    if ($entry === true && $nom == \"group\") {\n                        $temparray[KP_GROUP] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                        foreach ($elem->attributes() as $attributeskey0 => $attributesvalue1) {\n                            if ($attributeskey0 == \"tree\") {\n                                $path = explode('\\\\', $attributesvalue1);\n                                if (count($path) > 1) {\n                                    unset($path[0]);\n                                    $temparray['tree'] = implode('\\\\', $path).'\\\\'.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray['tree'] = $temparray[KP_GROUP];\n                                }\n                            }\n                        }\n                        $numGroups++;\n                    } elseif ($entry === true && $nom == \"title\") {\n                        $temparray[KP_TITLE] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"username\") {\n                        $temparray[KP_USERNAME] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"url\") {\n                        $temparray[KP_URL] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"uuid\") {\n                        $temparray[KP_UUID] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                    } elseif ($entry === true && $nom == \"password\") {\n                        $temparray[KP_PW] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"notes\") {\n                        $temparray[KP_NOTES] = sanitiseString($elem, '');\n                    }\n                }\n\n                /*\n                   * check if file is generated by keepass 2\n                */\n                if (trim($elem) == \"\" && $keepassVersion != 1) {\n                    //check if file is generated by keepass 2\n                    if ($nom == \"Meta\") {\n                        $meta = true;\n                    }\n                    if ($nom == \"Root\") {\n                        $root = true;\n                    }\n\n                    if ($nom == \"Group\") {\n                        $group = true;\n                        $entry = false;\n                        $name = \"\";\n\n                        // recap previous info\n                        if (!empty($temparray[KP_TITLE])) {\n                            //store data\n                            fputs(\n                                $cacheFile,\n                                $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].\n                                $itemsSeparator.$temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].\n                                $itemsSeparator.$temparray[KP_USERNAME].$itemsSeparator.\n                                $temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n                            );\n\n                            //Clean temp array\n                            $temparray[KP_TITLE] = $temparray[KP_NOTES] = $temparray[KP_PW] = $temparray[KP_USERNAME] = $temparray[KP_URL] = \"\";\n\n                            //increment number\n                            $numItems++;\n                        }\n                        $historyLevel = 0;\n                    }\n\n                    //History node needs to be managed in order to not polluate final list\n                    if ($nom == \"History\") {\n                        $history = true;\n                        $entry = false;\n                        $historyLevel = $xmlLevel;\n                    }\n\n                    if ($nom == \"Entry\" && ($xmlLevel < $historyLevel || empty($historyLevel))) {\n                        $entry = true;\n                        $group = false;\n\n                        // recap previous info\n                        if (!empty($temparray[KP_TITLE])) {\n                            //store data\n                            fputs($cacheFile, $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.$temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].$itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\");\n\n                            //Clean temp array\n                            $temparray[KP_TITLE] = $temparray[KP_NOTES] = $temparray[KP_PW] = $temparray[KP_USERNAME] = $temparray[KP_URL] = $temparray[KP_UUID] = \"\";\n\n                            //increment number\n                            $numItems++;\n                        }\n                        $historyLevel = 0;\n                    }\n\n                    //get children\n                    $xmlChildren = $elem->children();\n\n                    //recursive call\n                    recursiveKeepassXML($xmlChildren, $xmlLevel + 1);\n\n                    //IMPORTING KEEPASS 2 XML FILE\n                } elseif ($keepassVersion != 1) {\n                    // exit if XML file not generated by KeePass\n                    if ($meta === true && $nom == \"Generator\" && $elem == \"KeePass\") {\n                        $generatorFound = true;\n                        $keepassVersion = 2;\n                        break;\n                    } elseif ($root === true && $xmlLevel > $levelMin) {\n                        //Check each node name and get data from some of them\n                        if ($entry === true && $nom == \"Key\" && $elem == \"Title\") {\n                            $title = true;\n                            $notes = $pwd = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"Notes\") {\n                            $notes = true;\n                            $title = $pwd = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"UUID\") {\n                            $temparray[KP_UUID] = $elem;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"Password\") {\n                            $pwd = true;\n                            $notes = $title = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"URL\") {\n                            $url = true;\n                            $notes = $pwd = $title = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"UserName\") {\n                            $username = true;\n                            $notes = $pwd = $url = $title = false;\n                        } elseif ($group === true && $nom == \"Name\") {\n                            $temparray[KP_GROUP] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                            $temparray['level'] = $xmlLevel;\n                            //build current path\n                            if ($xmlLevel > $levelInProgress) {\n                                if (!empty($temparray[KP_PATH])) {\n                                    $temparray[KP_PATH] .= $foldersSeparator.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                }\n                            } elseif ($xmlLevel == $levelInProgress) {\n                                if ($levelInProgress == 3) {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = substr($temparray[KP_PATH], 0, strrpos($temparray[KP_PATH], $foldersSeparator) + strlen($foldersSeparator)).$temparray[KP_GROUP];\n                                }\n                            } else {\n                                $diff = abs($xmlLevel - $levelInProgress) + 1;\n                                $tmp = explode($foldersSeparator, $temparray[KP_PATH]);\n                                $temparray[KP_PATH] = \"\";\n                                for ($x = 0; $x < (count($tmp) - $diff); $x++) {\n                                    if (!empty($temparray[KP_PATH])) {\n                                        $temparray[KP_PATH] = $temparray[KP_PATH].$foldersSeparator.$tmp[$x];\n                                    } else {\n                                        $temparray[KP_PATH] = $tmp[$x];\n                                    }\n                                }\n                                if (!empty($temparray[KP_PATH])) {\n                                    $temparray[KP_PATH] .= $foldersSeparator.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                }\n                            }\n\n                            //store folders\n                            if (!in_array($temparray[KP_PATH], $groupsArray)) {\n                                fwrite($cacheFileF, $temparray[KP_PATH].\"\\n\");\n                                array_push($groupsArray, $temparray[KP_PATH]);\n                                //increment number\n                                $numGroups++;\n                            }\n\n                            //Store actual level\n                            $levelInProgress = $xmlLevel;\n                            $previousLevel = $temparray[KP_GROUP];\n                        } elseif ($title === true && $nom == \"Value\") {\n                            $title = false;\n                            $temparray[KP_TITLE] = sanitiseString($elem, '');\n                        } elseif ($notes === true && $nom == \"Value\") {\n                            $notes = false;\n                            $temparray[KP_NOTES] = sanitiseString($elem, '');\n                        } elseif ($pwd === true && $nom == \"Value\") {\n                            $pwd = false;\n                            $temparray[KP_PW] = sanitiseString($elem, '');\n                        } elseif ($url === true && $nom == \"Value\") {\n                            $url = false;\n                            $temparray[KP_URL] = sanitiseString($elem, '');\n                        } elseif ($username === true && $nom == \"Value\") {\n                            $username = false;\n                            $temparray[KP_USERNAME] = sanitiseString($elem, '');\n                        }\n                    }\n                }\n            }\n        }\n\n        fputs($cacheLogFile, date('H:i:s ').\"Writing XML File \".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING).\"\\n\");\n\n        // Go through each node of XML file\n        recursiveKeepassXML($xml);\n\n        //Stop if not a keepass file\n        if ($generatorFound === false) {\n            //Close file & delete it\n            fclose($cacheFileF);\n            fclose($cacheFile);\n            unlink($cacheFileName);\n            unlink($cacheFileNameFolder);\n            unlink($SETTINGS['url_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING));\n\n            fputs($cacheLogFile, date('H:i').$LANG['import_error_no_read_possible_kp'].\"\\n\");\n\n            echo '[{\"error\":\"not_kp_file\" , \"message\":\"'.$LANG['import_error_no_read_possible_kp'].'\"}]';\n            break;\n        }\n\n        //save last item\n        if (!empty($temparray[KP_TITLE])) {\n            //store data\n            fputs(\n                $cacheFile,\n                $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.\n                $temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].\n                $itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n            );\n\n            //increment number\n            $numItems++;\n        }\n\n        ##################\n        ## STARTING IMPORTING IF NO ERRORS OR NOT EMPTY\n        ##################\n        if ($numItems > 0 || $numGroups > 0) {\n            // Write in file\n            fputs($cacheLogFile, date('H:i:s ').$LANG['nb_folders'].' '.$numGroups.\"\\n\");\n            fputs($cacheLogFile, date('H:i:s ').$LANG['nb_items'].' '.$numItems.\"\\n\");\n\n            $import_perso = false;\n            $itemsArray = array();\n            $text = '<span class=\"fa fa-folder-open\"></span>&nbsp;'.$LANG['nb_folders'].': '.\n                $numGroups.'<br /><span class=\"fa fa-tag\"></span>>&nbsp;'.$LANG['nb_items'].': '.\n                $numItems.'<br /><br />';\n            $post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_STRING);\n\n            // If personal folder, then remove the suffix in ID\n            if (substr_count($post_destination, '-perso') > 0) {\n                $post_destination = str_replace('-perso', '', $post_destination);\n            }\n\n            // If destination is not ROOT then get the complexity level\n            if (strpos($post_destination, \"perso\") !== 0) {\n                $levelPwComplexity = 50;\n                $startPathLevel = 1;\n                $import_perso = true;\n            } elseif ($post_destination > 0) {\n                $data = DB::queryFirstRow(\n                    \"SELECT m.valeur as value, t.nlevel as nlevel\n                    FROM \".prefix_table(\"misc\").\" as m\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as t ON (m.intitule = t.id)\n                    WHERE m.type = %s AND m.intitule = %s\",\n                    \"complex\",\n                    mysqli_escape_string($link, $post_destination)\n                );\n                $levelPwComplexity = $data['value'];\n                $startPathLevel = $data['nlevel'];\n            } else {\n                $levelPwComplexity = 50;\n                $startPathLevel = 0;\n            }\n\n            //Get all folders from file\n            fclose($cacheFileF);\n            $cacheFileF = fopen($cacheFileNameFolder, \"r\");\n\n            //Create folders\n            $i = 1;\n            $level = 0;\n            $foldersArray = array();\n            $nbFoldersImported = 0;\n\n            fputs($cacheLogFile, date('H:i:s ').\"Creating Folders\\n\");\n            $results = \"Folders\\n\\n\";\n\n            while (!feof($cacheFileF)) {\n                $folder = fgets($cacheFileF, 4096);\n                if (!empty($folder)) {\n                    $folder = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), '', $folder);\n                    //get number of levels in path\n                    $path = explode($foldersSeparator, $folder);\n                    $folderLevel = count($path);\n\n                    //get folder name\n                    if (strrpos($folder, $foldersSeparator) > 0) {\n                        $fold = substr($folder, strrpos($folder, $foldersSeparator) + strlen($foldersSeparator));\n                        $parent = implode($foldersSeparator, array_slice($path, 0, -1));\n                        $parent_id = $foldersArray[$parent]['id'];\n                    } else {\n                        $fold = $folder;\n                        $parent_id = $post_destination; //permits to select the folder destination\n                    }\n\n                    $fold = stripslashes($fold);\n                    //create folder - if not exists at the same level\n                    DB::query(\n                        \"SELECT * FROM \".prefix_table(\"nested_tree\").\"\n                        WHERE nlevel = %i AND title = %s AND parent_id = %i LIMIT 1\",\n                        intval($folderLevel + $startPathLevel),\n                        $fold,\n                        $parent_id\n                    );\n                    $results .= str_replace($foldersSeparator, '\\\\', $folder);\n                    $counter = DB::count();\n                    if ($counter == 0) {\n                        $results .= \" - Inserting\\n\";\n                        //do query\n                        DB::insert(\n                            prefix_table(\"nested_tree\"),\n                            array(\n                                'parent_id' => $parent_id,\n                                'title' => stripslashes($fold),\n                                'nlevel' => $folderLevel\n                            )\n                        );\n                        $id = DB::insertId();\n                        //Add complexity level => level is set to \"medium\" by default.\n                        DB::insert(\n                            prefix_table(\"misc\"),\n                            array(\n                                'type' => 'complex',\n                                'intitule' => $id,\n                                'valeur' => $levelPwComplexity\n                            )\n                        );\n\n                        //For each role to which the user depends on, add the folder just created.\n                        foreach ($_SESSION['arr_roles'] as $role) {\n                            DB::insert(\n                                prefix_table(\"roles_values\"),\n                                array(\n                                    'role_id' => $role['id'],\n                                    'folder_id' => $id,\n                                    'type' => \"W\"\n                                )\n                            );\n                        }\n\n                        //Add this new folder to the list of visible folders for the user.\n                        array_push($_SESSION['groupes_visibles'], $id);\n\n                        //increment number of imported folders\n                        $nbFoldersImported++;\n                    } else {\n                        $results .= \" - Skipped\\n\";\n                        //get folder actual ID\n                        $data = DB::queryFirstRow(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE nlevel = %i AND title = %s AND parent_id = %i\",\n                            intval($folderLevel + $startPathLevel),\n                            $fold,\n                            $parent_id\n                        );\n                        $id = $data['id'];\n                    }\n\n                    //store in array\n                    $foldersArray[$folder] = array(\n                        'folder' => $fold,\n                        'nlevel' => $folderLevel,\n                        'id' => $id\n                    );\n\n                    $_SESSION['nb_folders']++;\n                    $i++;\n                }\n            }\n\n            $results .= \"\\n\\nItems\\n\\n\";\n            //if no new folders them inform\n            if ($nbFoldersImported > 0) {\n                fputs($cacheLogFile, date('H:i:s ').\"Setting User Rights\\n\");\n                //Refresh the rights of actual user\n                identifyUserRights(\n                    implode(';', $_SESSION['groupes_visibles']).';'.$newId,\n                    $_SESSION['groupes_interdits'],\n                    $_SESSION['is_admin'],\n                    $_SESSION['fonction_id']\n                );\n\n                fputs($cacheLogFile, date('H:i:s ').\"Rebuilding Tree\\n\");\n                //rebuild full tree\n                $tree->rebuild();\n            }\n\n            fputs($cacheLogFile, date('H:i:s ').\"Importing Items\\n\");\n\n            // Now import ITEMS\n            $nbItemsImported = 0;\n            $count = 0;\n\n            //Get some info about personal folder\n            if ($post_destination == $_SESSION['user_id']) {\n                $personalFolder = 1;\n            } else {\n                $personalFolder = 0;\n            }\n\n            //prepare file to be read\n            fclose($cacheFile);\n            $cacheFile = fopen($cacheFileName, \"r\");\n\n            while (!feof($cacheFile)) {\n                //prepare an array with item to import\n                $full_item = fgets($cacheFile, 8192);\n                $full_item = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), '', $full_item);\n                $item = explode($itemsSeparator, $full_item);\n\n                $count++;\n                if (!($count % 10)) {\n                    fputs($cacheLogFile, date('H:i:s ').\"  Imported $count items (\".number_format(($count / $numItems) * 100, 1).\")\\n\");\n                }\n\n                if (!empty($item[KP_TITLE])) {\n                    //$count++;\n                    //check if not exists\n                    $results .= str_replace($foldersSeparator, \"\\\\\", $item[KP_PATH]).'\\\\'.$item[KP_TITLE];\n\n                    $pwd = $item[KP_PASSWORD];\n\n                    //Get folder label\n                    if (count($foldersArray) == 0 || empty($item[KP_PATH])) {\n                        $folderId = $post_destination;\n                    } else {\n                        $folderId = $foldersArray[$item[KP_PATH]]['id'];\n                    }\n                    $data = DB::queryFirstRow(\n                        \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        intval($folderId)\n                    );\n\n                    // escape if folderId is empty\n                    if (!empty($folderId)) {\n                        $results .= \" - Inserting\\n\";\n\n                        // prepare PW\n                        if ($import_perso === true) {\n                            $encrypt = cryption(\n                                $pwd,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                        } else {\n                            $encrypt = cryption(\n                                $pwd,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        //ADD item\n                        DB::insert(\n                            prefix_table(\"items\"),\n                            array(\n                                'label' => substr(stripslashes($item[KP_TITLE]), 0, 500),\n                                'description' => stripslashes(str_replace($lineEndSeparator, '<br />', $item[KP_NOTES])),\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => $encrypt['iv'],\n                                'url' => substr(stripslashes($item[KP_URL]), 0, 500),\n                                'id_tree' => $folderId,\n                                'login' => substr(stripslashes($item[KP_USERNAME]), 0, 500),\n                                'anyone_can_modify' => filter_input(INPUT_POST, 'import_kps_anyone_can_modify', FILTER_SANITIZE_STRING) === \"true\" ? 1 : 0\n                            )\n                        );\n                        $newId = DB::insertId();\n\n                        //if asked, anyone in role can modify\n                        if (null !== filter_input(INPUT_POST, 'import_kps_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) && filter_input(INPUT_POST, 'import_kps_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) === \"true\") {\n                            foreach ($_SESSION['arr_roles'] as $role) {\n                                DB::insert(\n                                    prefix_table(\"restriction_to_roles\"),\n                                    array(\n                                        'role_id' => $role['id'],\n                                        'item_id' => $newId\n                                    )\n                                );\n                            }\n                        }\n\n                        //Add log\n                        DB::insert(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'id_item' => $newId,\n                                'date' => time(),\n                                'id_user' => $_SESSION['user_id'],\n                                'action' => 'at_creation',\n                                'raison' => 'at_import'\n                            )\n                        );\n\n                        //Add entry to cache table\n                        DB::insert(\n                            prefix_table(\"cache\"),\n                            array(\n                                'id' => $newId,\n                                'label' => substr(stripslashes($item[KP_TITLE]), 0, 500),\n                                'description' => stripslashes(str_replace($lineEndSeparator, '<br />', $item[KP_NOTES])),\n                                'url' => (isset($item[KP_NOTES]) && !empty($item[KP_NOTES])) ? $item[KP_NOTES] : \"0\",\n                                'tags' => \"\",\n                                'id_tree' => $folderId,\n                                'perso' => $personalFolder == 0 ? 0 : 1,\n                                'login' => substr(stripslashes($item[KP_USERNAME]), 0, 500),\n                                'restricted_to' => \"0\",\n                                'folder' => $data['title'],\n                                'author' => $_SESSION['user_id'],\n                                'renewal_period' => \"0\",\n                                'timestamp' => time()\n                            )\n                        );\n\n                        //increment number of imported items\n                        $nbItemsImported++;\n                    } else {\n                        $results .= \" - \".$item[KP_TITLE].\" was not imported\\n\";\n                    }\n                    fputs($cacheLogFile, date('H:i:s ').\" \".$results.\"\\n\");\n                }\n            }\n\n            //SHow finished\n            $text .= \"Folders imported: $nbFoldersImported<br />\";\n            $text .= \"Items imported: $nbItemsImported<br />\";\n            $text .= '</div><br /><br /><b>'.$LANG['import_kp_finished'].'</b>';\n            $text .= '<a href=\\''.$SETTINGS['url_to_files_folder'].'/'.$logFileName.'\\' target=\\'_blank\\'>'.$LANG['pdf_download'].'</a>';\n\n            fputs($cacheLogFile, date('H:i:s ').\"Import finished\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Statistics\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Folders imported: $nbFoldersImported\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Items imported: $nbItemsImported\\n\\n\".$results);\n\n            //Delete cache file\n            fclose($cacheFileF);\n            fclose($cacheFile);\n            fclose($cacheLogFile);\n            unlink($cacheFileName);\n            unlink($cacheFileNameFolder);\n            unlink($SETTINGS['path_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING));\n\n            //Display all messages to user\n            echo '[{\"error\":\"no\" , \"message\":\"'.str_replace('\"', \"&quote;\", strip_tags($text, '<br /><a><div><b><br>')).'\"}]';\n        } else {\n            echo '[{\"error\":\"yes\" , \"message\":\"\"}]';\n        }\n        break;\n}\n\nspl_autoload_register(function ($class) {\n    $prefix = 'League\\\\Csv\\\\';\n    $base_dir = __DIR__.'/src/';\n    $len = strlen($prefix);\n    if (strncmp($prefix, $class, $len) !== 0) {\n        // no, move to the next registered autoloader\n        return;\n    }\n    $relative_class = substr($class, $len);\n    $file = $base_dir.str_replace('\\\\', '/', $relative_class).'.php';\n    if (file_exists($file)) {\n        require $file;\n    }\n});\n", "<?php\n/**\n * @file          items.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'home') === false) {\n    // Not allowed page\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\n/**\n * Define Timezone\n**/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Pragma: no-cache');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n\n// Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n// phpcrypt\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare POST variables\n$post_page = filter_input(INPUT_POST, 'page', FILTER_SANITIZE_STRING);\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_STRING);\n$post_cat = filter_input(INPUT_POST, 'cat', FILTER_SANITIZE_STRING);\n$post_receipt = filter_input(INPUT_POST, 'receipt', FILTER_SANITIZE_STRING);\n$post_item_id = filter_input(INPUT_POST, 'item_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id_tree = filter_input(INPUT_POST, 'id_tree', FILTER_SANITIZE_NUMBER_INT);\n$post_folder_id = filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_NUMBER_INT);\n$post_source = filter_input(INPUT_POST, 'source', FILTER_SANITIZE_NUMBER_INT);\n$post_user_id = filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT);\n$post_iFolderId = filter_input(INPUT_POST, 'iFolderId', FILTER_SANITIZE_NUMBER_INT);\n\n// Do asked action\nif (null !== $post_type) {\n    switch ($post_type) {\n        /*\n        * CASE\n        * creating a new ITEM\n        */\n        case \"new_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            // Prepare variables\n            $label = filter_var(htmlspecialchars_decode($dataReceived['label']), FILTER_SANITIZE_STRING);\n            $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n            $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n            $tags = htmlspecialchars_decode($dataReceived['tags']);\n\n            // is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (!in_array($dataReceived['categorie'], array_keys($_SESSION['list_folders_limited']))\n                    && !in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])\n                    && !in_array($dataReceived['categorie'], $_SESSION['personal_visible_groups_list'])\n                ) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            } else {\n                if (!in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true &&\n                !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // is pwd empty?\n            if (empty($pw) &&\n                isset($_SESSION['user_settings']['create_item_without_password']) &&\n                $_SESSION['user_settings']['create_item_without_password'] !== '1'\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                break;\n            }\n\n            // Check length\n            if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                break;\n            }\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = \"\";\n            $data = DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"items\").\"\n                WHERE label = %s AND inactif = %i\",\n                $label,\n                0\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (isset($SETTINGS['duplicate_item'])\n                && $SETTINGS['duplicate_item'] === '0'\n                && $dataReceived['salt_key_set'] === '1'\n                && isset($dataReceived['salt_key_set'])\n                && $dataReceived['is_pf'] === '1'\n                && isset($dataReceived['is_pf'])\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && $itemExists === 0)\n                ||\n                (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '1')\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user_settings']['create_item_without_password'])\n                    && $_SESSION['user_settings']['create_item_without_password'] !== '1'\n                    ) ||\n                    !empty($pw)\n                ) {\n                    // encrypt PW\n                    if ($dataReceived['salt_key_set'] === '1' &&\n                        isset($dataReceived['salt_key_set']) &&\n                        $dataReceived['is_pf'] === '1' &&\n                        isset($dataReceived['is_pf'])\n                    ) {\n                        $passwd = cryption(\n                            $pw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                        $restictedTo = $_SESSION['user_id'];\n                    } else {\n                        $passwd = cryption(\n                            $pw,\n                            \"\",\n                            \"encrypt\"\n                        );\n                    }\n                } else {\n                    $passwd['string'] = '';\n                }\n\n                if (!empty($passwd[\"error\"])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_ENCRYPTION\", \"msg\" => $passwd[\"error\"]), \"encode\");\n                    break;\n                }\n\n                // ADD item\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => $label,\n                        'description' => $dataReceived['description'],\n                        'pw' => $passwd['string'],\n                        'pw_iv' => \"\",\n                        'email' => noHTML($dataReceived['email']),\n                        'url' => noHTML($url),\n                        'id_tree' => $dataReceived['categorie'],\n                        'login' => noHTML($login),\n                        'inactif' => '0',\n                        'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                        'perso' => (isset($dataReceived['salt_key_set']) && $dataReceived['salt_key_set'] === '1' && isset($dataReceived['is_pf']) && $dataReceived['is_pf'] === '1') ? '1' : '0',\n                        'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                        'complexity_level' => $dataReceived['complexity_level']\n                        )\n                );\n                $newID = DB::insertId();\n                $pw = $passwd['string'];\n\n                // update fields\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                        $field_data = explode(\"~~\", $field);\n                        if (count($field_data) > 1 && !empty($field_data[1])) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                \"SELECT encrypted_data\n                                FROM \".prefix_table(\"categories\").\"\n                                WHERE id = %i\",\n                                $field_data[0]\n                            );\n                            if ($dataTmp['encrypted_data'] === '1') {\n                                $encrypt = cryption(\n                                    $field_data[1],\n                                    \"\",\n                                    \"encrypt\"\n                                );\n                                $enc_type = \"defuse\";\n                            } else {\n                                $encrypt['string'] = $field_data[1];\n                                $enc_type = \"not_set\";\n                            }\n\n\n                            DB::insert(\n                                prefix_table('categories_items'),\n                                array(\n                                    'item_id' => $newID,\n                                    'field_id' => $field_data[0],\n                                    'data' => $encrypt['string'],\n                                    'data_iv' => \"\",\n                                    'encryption_type' => $enc_type\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if ($dataReceived['to_be_deleted'] != 0 && !empty($dataReceived['to_be_deleted'])) {\n                    $date_stamp = dateToStamp($dataReceived['to_be_deleted']);\n                    DB::insert(\n                        prefix_table('automatic_del'),\n                        array(\n                            'item_id' => $newID,\n                            'del_enabled' => 1, /* Possible values: 0=deactivated;1=activated */\n                            'del_type' => $date_stamp !== false ? 2 : 1, /* Possible values:  1=counter;2=date */\n                            'del_value' => $date_stamp !== false ? $date_stamp : $dataReceived['to_be_deleted']\n                            )\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (isset($dataReceived['restricted_to_roles'])) {\n                    foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                        DB::insert(\n                            prefix_table('restriction_to_roles'),\n                            array(\n                                'role_id' => $role,\n                                'item_id' => $newID\n                                )\n                        );\n                    }\n                }\n                // log\n                logItems($newID, $label, $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add tags\n                $tags = explode(' ', $tags);\n                foreach ($tags as $tag) {\n                    if (!empty($tag)) {\n                        DB::insert(\n                            prefix_table('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag)\n                                )\n                        );\n                    }\n                }\n                // Check if any files have been added\n                if (!empty($dataReceived['random_id_from_files'])) {\n                    $rows = DB::query(\n                        \"SELECT id\n                        FROM \".prefix_table(\"files\").\"\n                        WHERE id_item = %s\",\n                        $dataReceived['random_id_from_files']\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'id_item' => $newID\n                                ),\n                            \"id=%i\",\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (!empty($dataReceived['diffusion'])) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n                    // send email\n                    foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                        if (!empty($emailAddress)) {\n                            // send it\n                            sendEmail(\n                                $LANG['email_subject'],\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                ),\n                                $emailAddress,\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                )\n                            );\n                        }\n                    }\n                }\n                // Get Expiration date\n                $expirationFlag = '';\n                if ($SETTINGS['activate_expiration'] === '1') {\n                    $expirationFlag = '<i class=\"fa fa-flag mi-green\"></i>&nbsp;';\n                }\n                // Prepare full line\n                $html = '<li class=\"item_draggable'\n                .'\" id=\"'.$newID.'\" style=\"margin-left:-30px;\">'\n                .'<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>'\n                .$expirationFlag.'<i class=\"fa fa-sm fa-warning mi-yellow\"></i>&nbsp;'.\n                '&nbsp;<a id=\"fileclass'.$newID.'\" class=\"file\" onclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', \\'\\', \\'\\')\" ondblclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', true, \\'\\')\">'.\n                stripslashes($dataReceived['label']);\n                if (!empty($dataReceived['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                    $html .= '&nbsp;<font size=2px>['.strip_tags(stripslashes(substr(cleanString($dataReceived['description']), 0, 30))).']</font>';\n                }\n                $html .= '</a><span style=\"float:right;margin:2px 10px 0px 0px;\">';\n                // mini icon for collab\n                if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                    if ($dataReceived['anyone_can_modify'] === '1') {\n                        $itemCollab = '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                    }\n                }\n                // display quick icon shortcuts ?\n                if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                    $itemLogin = $itemPw = \"\";\n\n                    if (!empty($dataReceived['login'])) {\n                        $itemLogin = '<span id=\"iconlogin_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-user mi-black\"></i>&nbsp;</span>';\n                    }\n                    if (!empty($dataReceived['pw'])) {\n                        $itemPw = '<span id=\"iconpw_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-lock mi-black\"></i>&nbsp;</span>';\n                    }\n                    $html .= $itemLogin.'&nbsp;'.$itemPw;\n                }\n                // Prepare make Favorite small icon\n                $html .= '&nbsp;<span id=\"quick_icon_fav_'.$newID.'\" title=\"Manage Favorite\" class=\"cursor\">';\n                if (in_array($newID, $_SESSION['favourites'])) {\n                    $html .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$newID.',0)\" class=\"tip\"></i>';\n                } else {\n                    $html .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$newID.',1)\" class=\"tip\"></i>';\n                }\n\n                $html .= '</span></li>';\n                // Build array with items\n                $itemsIDList = array($newID, $dataReceived['pw'], $login);\n\n                $returnValues = array(\n                    \"item_exists\" => $itemExists,\n                    \"error\" => \"no\",\n                    \"new_id\" => $newID,\n                    \"new_pw\" => $dataReceived['pw'],\n                    \"new_login\" => $login,\n                    \"new_entry\" => $html,\n                    \"array_items\" => $itemsIDList,\n                    \"show_clipboard_small_icons\" => (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') ? 1 : 0\n                    );\n            } elseif (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && (int) $itemExists === 1) {\n                // Encrypt data to return\n                echo prepareExchangedData(array(\"error\" => \"item_exists\"), \"encode\");\n                break;\n            }\n\n            // Update CACHE table\n            updateCacheTable(\"add_value\", $newID);\n\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * update an ITEM\n        */\n        case \"update_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // init\n            $reloadPage = false;\n            $returnValues = array();\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            if (count($dataReceived) > 0) {\n                // Prepare variables\n                $label = filter_var(($dataReceived['label']), FILTER_SANITIZE_STRING);\n                $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n                $pw = $original_pw = $sentPw = htmlspecialchars_decode($dataReceived['pw']);\n                $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n                $tags = htmlspecialchars_decode($dataReceived['tags']);\n                $email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_STRING);\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && (!in_array($dataReceived['categorie'], $_SESSION['personal_folders']) || $dataReceived['is_pf'] !== '1')) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                if ((\n                        in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])\n                        && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id']))\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify'])\n                        && $SETTINGS['anyone_can_modify'] === '1'\n                        && $dataItem['anyone_can_modify'] === '1'\n                        && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1')\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $restrictionActive === false)\n                ) {\n                    // Is pwd empty?\n                    if (empty($pw) && isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                        break;\n                    }\n\n                    // Check length\n                    if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                        break;\n                    }\n                    // Get existing values\n                    $data = DB::queryfirstrow(\n                        \"SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login,\n                        i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                        u.login as user_login, u.email as user_email\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id=l.id_item)\n                        INNER JOIN \".prefix_table(\"users\").\" as u ON (u.id=l.id_user)\n                        WHERE i.id=%i\",\n                        $dataReceived['id']\n                    );\n                    // encrypt PW\n                    if ((isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') || !empty($pw)) {\n                        if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                            $sentPw = $pw;\n                            $passwd = cryption(\n                                $pw,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                            $restictedTo = $_SESSION['user_id'];\n                        } else {\n                            $passwd = cryption(\n                                $pw,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        if (!empty($passwd[\"error\"])) {\n                            echo prepareExchangedData(array(\"error\" => $passwd[\"error\"]), \"encode\");\n                            break;\n                        }\n                    } else {\n                        $passwd['string'] = \"\";\n                    }\n\n                    // ---Manage tags\n                    // deleting existing tags for this item\n                    DB::delete($pre.\"tags\", \"item_id = %i\", $dataReceived['id']);\n\n                    // Add new tags\n                    $return_tags = \"\";\n                    $tags = explode(' ', $tags);\n                    foreach ($tags as $tag) {\n                        if (!empty($tag)) {\n                            // save in DB\n                            DB::insert(\n                                prefix_table('tags'),\n                                array(\n                                    'item_id' => $dataReceived['id'],\n                                    'tag' => strtolower($tag)\n                                )\n                            );\n                            // prepare display\n                            if (empty($tags)) {\n                                $return_tags = \"<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            } else {\n                                $return_tags .= \"&nbsp;&nbsp;<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'label' => $label,\n                            'description' => $dataReceived['description'],\n                            'pw' => $passwd['string'],\n                            'pw_iv' => \"\",\n                            'email' => $email,\n                            'login' => $login,\n                            'url' => $url,\n                            'id_tree' => (!isset($dataReceived['categorie']) || $dataReceived['categorie'] === \"undefined\") ? $dataItem['id_tree'] : $dataReceived['categorie'],\n                            'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                            'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                            'complexity_level' => $dataReceived['complexity_level']\n                            ),\n                        \"id=%i\",\n                        $dataReceived['id']\n                    );\n                    // update fields\n                    if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                        foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                            $field_data = explode(\"~~\", $field);\n                            if (count($field_data) > 1 && !empty($field_data[1])) {\n                                $dataTmpCat = DB::queryFirstRow(\n                                    \"SELECT c.title AS title, i.data AS data, i.data_iv AS data_iv, i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data\n                                    FROM \".prefix_table(\"categories_items\").\" AS i\n                                    INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                                    WHERE i.field_id = %i AND i.item_id = %i\",\n                                    $field_data[0],\n                                    $dataReceived['id']\n                                );\n                                // store Field text in DB\n                                if (count($dataTmpCat['title']) === 0) {\n                                    // get info about this custom field\n                                    $dataTmpCat = DB::queryFirstRow(\n                                        \"SELECT title, encrypted_data\n                                        FROM \".prefix_table(\"categories\").\"\n                                        WHERE id = %i\",\n                                        $field_data[0]\n                                    );\n\n                                    // should we encrypt the data\n                                    if ($dataTmpCat['encrypted_data'] === '1') {\n                                        $encrypt = cryption(\n                                            $field_data[1],\n                                            \"\",\n                                            \"encrypt\"\n                                        );\n                                        $enc_type = \"defuse\";\n                                    } else {\n                                        $encrypt['string'] = $field_data[1];\n                                        $enc_type = \"not_set\";\n                                    }\n\n                                    // store field text\n                                    DB::insert(\n                                        prefix_table('categories_items'),\n                                        array(\n                                            'item_id' => $dataReceived['id'],\n                                            'field_id' => $field_data[0],\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => \"\",\n                                            'encryption_type' => $enc_type\n                                        )\n                                    );\n\n                                    // update LOG\n                                    logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' : '.$field_data[1]);\n                                } else {\n                                    // compare the old and new value\n                                    if ($dataTmpCat['encryption_type'] === \"defuse\") {\n                                        $oldVal = cryption(\n                                            $dataTmpCat['data'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } else {\n                                        $oldVal['string'] = $dataTmpCat['data'];\n                                    }\n\n                                    if ($field_data[1] !== $oldVal['string']) {\n                                        // should we encrypt the data\n                                        if ($dataTmpCat['encrypted_data'] === '1') {\n                                            $encrypt = cryption(\n                                                $field_data[1],\n                                                \"\",\n                                                \"encrypt\"\n                                            );\n                                            $enc_type = \"defuse\";\n                                        } else {\n                                            $encrypt['string'] = $field_data[1];\n                                            $enc_type = \"not_set\";\n                                        }\n\n                                        // update value\n                                        DB::update(\n                                            prefix_table('categories_items'),\n                                            array(\n                                                'data' => $encrypt['string'],\n                                                'data_iv' => \"\",\n                                                'encryption_type' => $enc_type\n                                            ),\n                                            \"item_id = %i AND field_id = %i\",\n                                            $dataReceived['id'],\n                                            $field_data[0]\n                                        );\n\n                                        // update LOG\n                                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' => '.$oldVal['string']);\n                                    }\n                                }\n                            } else {\n                                if (empty($field_data[1])) {\n                                    DB::delete(\n                                        $pre.\"categories_items\",\n                                        \"item_id = %i AND field_id = %s\",\n                                        $dataReceived['id'],\n                                        $field_data[0]\n                                    );\n                                }\n                            }\n                        }\n                    }\n\n                    // Update automatic deletion - Only by the creator of the Item\n                    if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                        // check if elem exists in Table. If not add it or update it.\n                        DB::query(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id = %i\", $dataReceived['id']);\n                        if (DB::count() === 0) {\n                            // No automatic deletion for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Automatic deletion to be added\n                                DB::insert(\n                                    prefix_table('automatic_del'),\n                                    array(\n                                        'item_id' => $dataReceived['id'],\n                                        'del_enabled' => 1,\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        )\n                                );\n                                // update LOG\n                                logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                            }\n                        } else {\n                            // Automatic deletion exists for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Update automatic deletion\n                                DB::update(\n                                    $pre.\"automatic_del\",\n                                    array(\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        ),\n                                    \"item_id = %i\",\n                                    $dataReceived['id']\n                                );\n                            } else {\n                                // delete automatic deleteion for this item\n                                DB::delete($pre.\"automatic_del\", \"item_id = %i\", $dataReceived['id']);\n                            }\n                            // update LOG\n                            logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                        }\n                    }\n\n                    // get readable list of restriction\n                    $listOfRestricted = $oldRestrictionList = \"\";\n                    if (!empty($dataReceived['restricted_to']) && $SETTINGS['restricted_to'] === '1') {\n                        foreach (explode(';', $dataReceived['restricted_to']) as $userRest) {\n                            if (!empty($userRest)) {\n                                $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= %i\", $userRest);\n                                if (empty($listOfRestricted)) {\n                                    $listOfRestricted = $dataTmp['login'];\n                                } else {\n                                    $listOfRestricted .= \";\".$dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                    if ($data['restricted_to'] != $dataReceived['restricted_to'] && $SETTINGS['restricted_to'] === '1') {\n                        if (!empty($data['restricted_to'])) {\n                            foreach (explode(';', $data['restricted_to']) as $userRest) {\n                                if (!empty($userRest)) {\n                                    $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                                    if (empty($oldRestrictionList)) {\n                                        $oldRestrictionList = $dataTmp['login'];\n                                    } else {\n                                        $oldRestrictionList .= \";\".$dataTmp['login'];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Manage retriction_to_roles\n                    if (isset($dataReceived['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                        // get values before deleting them\n                        $rows = DB::query(\n                            \"SELECT t.title\n                            FROM \".prefix_table(\"roles_title\").\" as t\n                            INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                            WHERE r.item_id = %i\n                            ORDER BY t.title ASC\",\n                            $dataReceived['id']\n                        );\n                        foreach ($rows as $record) {\n                            if (empty($oldRestrictionList)) {\n                                $oldRestrictionList = $record['title'];\n                            } else {\n                                $oldRestrictionList .= \";\".$record['title'];\n                            }\n                        }\n                        // delete previous values\n                        DB::delete(prefix_table(\"restriction_to_roles\"), \"item_id = %i\", $dataReceived['id']);\n                        // add roles for item\n                        foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                            $role = explode(\"role_\", $role);\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefix_table('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $dataReceived['id']\n                                    )\n                            );\n                            $dataTmp = DB::queryfirstrow(\"SELECT title FROM \".prefix_table(\"roles_title\").\" WHERE id= \".$role);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['title'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['title'];\n                            }\n                        }\n                    }\n                    // Update CACHE table\n                    updateCacheTable(\"update_value\", $dataReceived['id']);\n                    // Log all modifications done\n                    /*LABEL */\n                    if ($data['label'] != $label) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_label : '.$data['label'].' => '.$label);\n                    }\n                    /*LOGIN */\n                    if ($data['login'] != $login) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_login : '.$data['login'].' => '.$login);\n                    }\n                    /*EMAIL */\n                    if ($data['email'] != $dataReceived['email']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_email : '.$data['email'].' => '.$dataReceived['email']);\n                    }\n                    /*URL */\n                    if ($data['url'] != $url && $url != \"http://\") {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_url : '.$data['url'].' => '.$url);\n                    }\n                    /*DESCRIPTION */\n                    if ($data['description'] != $dataReceived['description']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_description');\n                    }\n                    /*FOLDER */\n                    if ($data['id_tree'] != $dataReceived['categorie']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_category : '.$data['id_tree'].' => '.$dataReceived['categorie']);\n                        // ask for page reloading\n                        $reloadPage = true;\n                    }\n                    /*PASSWORD */\n                    if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    } else {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            \"\",\n                            \"decrypt\"\n                        );\n                    }\n                    if ($sentPw != $oldPwClear['string']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_pw :'.$oldPw, \"\", \"defuse\");\n                    }\n                    /*RESTRICTIONS */\n                    if ($data['restricted_to'] != $dataReceived['restricted_to']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_restriction : '.$oldRestrictionList.' => '.$listOfRestricted);\n                    }\n                    // Reload new values\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT *\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                        WHERE i.id = %i AND l.action = %s\",\n                        $dataReceived['id'],\n                        \"at_creation\"\n                    );\n                    // Reload History\n                    $history = \"\";\n                    $rows = DB::query(\n                        \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                        FROM \".prefix_table(\"log_items\").\" as l\n                        LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                        WHERE l.action <> %s AND id_item=%s\",\n                        \"at_shown\",\n                        $dataReceived['id']\n                    );\n                    foreach ($rows as $record) {\n                        $reason = explode(':', $record['raison']);\n                        if (empty($history)) {\n                            $history = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".$record['login'].\" - \".$LANG[$record['action']].\n                            \" - \".(!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.$reason[1] : $LANG[trim($reason[0])]) : '');\n                        } else {\n                            $history .= \"<br />\".date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".\n                            $record['login'].\" - \".$LANG[$record['action']].\" - \".\n                            (!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' => '.$reason[1] : ($record['action'] != \"at_manual\" ? $LANG[trim($reason[0])] : trim($reason[0]))) : '');\n                        }\n                    }\n                    // decrypt PW\n                    if (empty($dataReceived['salt_key'])) {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            \"\",\n                            \"encrypt\"\n                        );\n                    } else {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                    }\n\n                    $pw = cleanString($encrypt['string']);\n                    // generate 2d key\n                    $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                    // Prepare files listing\n                    $files = $filesEdit = \"\";\n                    // launch query\n                    $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $dataReceived['id']);\n                    foreach ($rows as $record) {\n                        // get icon image depending on file format\n                        $iconImage = fileFormatImage($record['extension']);\n\n                        // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                        if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                            $files .= '<i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\"image_dialog\" href=\"#'.$record['id'].'\" title=\"'.$record['name'].'\">'.$record['name'].'</a><br />';\n                        } else {\n                            $files .= '<i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&type=sub&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' target=\\'_blank\\'>'.$record['name'].'</a><br />';\n                        }\n                        // Prepare list of files for edit dialogbox\n                        $filesEdit .= '<span id=\"span_edit_file_'.$record['id'].'\"><span class=\"fa fa-'.$iconImage.'\"></span>&nbsp;<span class=\"fa fa-eraser tip\" style=\"cursor:pointer;\"  onclick=\"delete_attached_file(\\\"'.$record['id'].'\\\")\" title=\"'.$LANG['at_delete'].'\"></span>&nbsp;'.$record['name'].\"</span><br />\";\n                    }\n                    // Send email\n                    if (!empty($dataReceived['diffusion'])) {\n                        foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                            if (!empty($emailAddress)) {\n                                sendEmail(\n                                    $LANG['email_subject_item_updated'],\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                    $emailAddress,\n                                    str_replace(\"#item_label#\", $label, $LANG['email_bodyalt_item_updated'])\n                                );\n                            }\n                        }\n                    }\n\n                    // send email to user that whant to be notified\n                    if ($dataItem['notification'] !== null && !empty($dataItem['notification'])) {\n                        $users_to_be_notified = array_filter(explode(\";\", $dataItem['notification']));\n\n                        // perform query to get emails\n                        $users_email = DB::QUERY(\n                            \"SELECT id, email\n                            FROM \".prefix_table(\"users\").\"\n                            WHERE id IN %li\",\n                            $users_to_be_notified\n                        );\n\n                        // build emails list\n                        $mailing = \"\";\n                        foreach ($users_email as $record) {\n                            if (empty($mailing)) {\n                                $mailing = $record['email'];\n                            } else {\n                                $mailing = \",\".$record['email'];\n                            }\n                        }\n\n                        // send email\n                        DB::insert(\n                            prefix_table('emails'),\n                            array(\n                                'timestamp' => time(),\n                                'subject' => $LANG['email_subject_item_updated'],\n                                'body' =>\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                'receivers' => $mailing,\n                                'status' => ''\n                                )\n                        );\n                    }\n\n                    // Prepare some stuff to return\n                    $arrData = array(\n                        \"files\" => $files,\n                        \"history\" => str_replace('\"', '&quot;', $history),\n                        \"files_edit\" => $filesEdit,\n                        \"id_tree\" => $dataItem['id_tree'],\n                        \"id\" => $dataItem['id'],\n                        \"reload_page\" => $reloadPage,\n                        \"restriction_to\" => $dataReceived['restricted_to'].$dataReceived['restricted_to_roles'],\n                        \"list_of_restricted\" => $listOfRestricted,\n                        \"tags\" => $return_tags,\n                        \"error\" => \"\"\n                        );\n                } else {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_NOT_ALLOWED_TO_EDIT\"), \"encode\");\n                    break;\n                }\n            } else {\n                // an error appears on JSON format\n                $arrData = array(\"error\" => \"ERR_JSON_FORMAT\");\n            }\n            // return data\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\"..\"\n          * CASE\n          * Copy an Item\n        */\n        case \"copy_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"1'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // Prepare POST variables\n            $post_source_id = filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT);\n            $post_dest_id = filter_input(INPUT_POST, 'dest_id', FILTER_SANITIZE_NUMBER_INT);\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === '1'\n                && (!in_array($post_source_id, $_SESSION['personal_folders'])\n                    || !in_array($post_dest_id, $_SESSION['personal_folders']))\n            ) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $returnValues = $pw = \"\";\n            $is_perso = 0;\n\n            if (empty($post_item_id) === false\n                && empty($post_dest_id) === false\n            ) {\n                // load the original record into an array\n                $originalRecord = DB::queryfirstrow(\n                    \"SELECT * FROM \".prefix_table(\"items\").\"\n                    WHERE id=%i\",\n                    $post_item_id\n                );\n\n                // Check if the folder where this item is, is accessible to the user\n                if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles'])) {\n                    $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                    echo $returnValues;\n                    break;\n                }\n\n                // Load the destination folder record into an array\n                $dataDestination = DB::queryfirstrow(\n                    \"SELECT personal_folder FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id=%i\",\n                    $post_dest_id\n                );\n\n                // previous is personal folder and public one\n                if ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now public\n                    $is_perso = 0;\n                // previous is public folder and personal one\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '1') {\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // previous is public folder and personal one\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // is public item\n                    $is_perso = 0;\n                } else {\n                    $returnValues = '[{\"error\" : \"case_not_managed\"}, {\"error_text\" : \"ERROR - case is not managed\"}]';\n                        echo $returnValues;\n                        break;\n                }\n\n                // insert the new record and get the new auto_increment id\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => \"duplicate\"\n                    )\n                );\n                $newID = DB::insertId();\n                // generate the query to update the new record with the previous values\n                $aSet = array();\n                foreach ($originalRecord as $key => $value) {\n                    if ($key === \"id_tree\") {\n                        array_push($aSet, array(\"id_tree\" => $post_dest_id));\n                    } elseif ($key === \"viewed_no\") {\n                        array_push($aSet, array(\"viewed_no\" => \"0\"));\n                    } elseif ($key === \"pw\" && !empty($pw)) {\n                        array_push($aSet, array(\"pw\" => $originalRecord['pw']));\n                        array_push($aSet, array(\"pw_iv\" => \"\"));\n                    } elseif ($key === \"perso\") {\n                        array_push($aSet, array(\"perso\" => $is_perso));\n                    } elseif ($key != \"id\" && $key != \"key\") {\n                        array_push($aSet, array($key => $value));\n                    }\n                }\n\n                DB::update(\n                    prefix_table(\"items\"),\n                    $aSet,\n                    \"id = %i\",\n                    $newID\n                );\n                // Add attached itms\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_item_id);\n                foreach ($rows as $record) {\n                    // duplicate file\n                    $fileRandomId = md5($record['name'].time());\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$record['file'],\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$fileRandomId\n                    );\n\n                    // store in DB\n                    DB::insert(\n                        prefix_table('files'),\n                        array(\n                            'id_item' => $newID,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $fileRandomId,\n                            'status' => $record['status']\n                        )\n                    );\n                }\n\n                // Add specific restrictions\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('restriction_to_roles'),\n                        array(\n                            'item_id' => $newID,\n                            'role_id' => $record['role_id']\n                            )\n                    );\n                }\n\n                // Add Tags\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"tags\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('tags'),\n                        array(\n                            'item_id' => $newID,\n                            'tag' => $record['tag']\n                            )\n                    );\n                }\n\n                // Add custom fields\n\n\n                // Add this duplicate in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add the fact that item has been copied in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_copy', $_SESSION['login']);\n                // reload cache table\n                require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n                updateCacheTable(\"reload\", \"\");\n\n                $returnValues = '[{\"status\" : \"ok\"}, {\"new_id\" : \"'.$newID.'\"}]';\n            } else {\n                // no item\n                $returnValues = '[{\"error\" : \"no_item\"}, {\"error_text\" : \"No item ID\"}]';\n            }\n            // return data\n            echo $returnValues;\n            break;\n\n        /*\n          * CASE\n          * Display informations of selected item\n        */\n        case \"show_details_item\":\n            // Check KEY and rights\n            $_SESSION['user_settings']['show_step2'] = false;\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Init post variables\n            $post_id = filter_var(htmlspecialchars_decode($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_salt_key_required = filter_var(htmlspecialchars_decode($dataReceived['salt_key_required']), FILTER_SANITIZE_STRING);\n            $post_salt_key_set = filter_var(htmlspecialchars_decode($dataReceived['salt_key_set']), FILTER_SANITIZE_STRING);\n            $post_expired_item = filter_var(htmlspecialchars_decode($dataReceived['expired_item']), FILTER_SANITIZE_STRING);\n            $post_restricted = filter_var(htmlspecialchars_decode($dataReceived['restricted']), FILTER_SANITIZE_STRING);\n            $post_page = filter_var(htmlspecialchars_decode($dataReceived['page']), FILTER_SANITIZE_STRING);\n\n            $arrData = array();\n            // return ID\n            $arrData['id'] = $post_id;\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author'] = \"API\";\n\n            // Check if item is deleted\n            // taking into account that item can be restored.\n            // so if restoration timestamp is higher than the deletion one\n            // then we can show it\n            $item_deleted = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_delete\"\n            );\n            $dataDeleted = DB::count();\n\n            $item_restored = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_restored\"\n            );\n\n            if ($dataDeleted != 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n                // This item is deleted => exit\n                echo prepareExchangedData(array('show_detail_option' => 2), \"encode\");\n                break;\n            }\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                WHERE i.id = %i AND l.action = %s\",\n                $post_id,\n                \"at_creation\"\n            );\n            // LEFT JOIN \".$pre.\"categories_items as c ON (c.id_item = i.id)\n            // INNER JOIN \".$pre.\"automatic_del as d ON (d.item_id = i.id)\n            // Get all USERS infos\n            $listNotif = array_filter(explode(\";\", $dataItem['notification']));\n            $listRest = array_filter(explode(\";\", $dataItem['restricted_to']));\n            $listeRestriction = $listNotification = $listNotificationEmails = \"\";\n            $user_in_restricted_list_of_item = false;\n            $rows = DB::query(\"SELECT id, login, email FROM \".prefix_table(\"users\"));\n            foreach ($rows as $record) {\n                // Get auhtor\n                if ($record['id'] === $dataItem['id_user']) {\n                    $arrData['author'] = $record['login'];\n                    $arrData['author_email'] = $record['email'];\n                    $arrData['id_user'] = $dataItem['id_user'];\n                    if (in_array($record['id'], $listNotif)) {\n                        $arrData['notification_status'] = true;\n                    } else {\n                        $arrData['notification_status'] = false;\n                    }\n                }\n\n                // Get restriction list for users\n                if (in_array($record['id'], $listRest)) {\n                    $listeRestriction .= $record['login'].\";\";\n                    if ($_SESSION['user_id'] === $record['id']) {\n                        $user_in_restricted_list_of_item = true;\n                    }\n                }\n                // Get notification list for users\n                if (in_array($record['id'], $listNotif)) {\n                    $listNotification .= $record['login'].\";\";\n                    $listNotificationEmails .= $record['email'].\",\";\n                }\n            }\n            // manage case of API user\n            if ($dataItem['id_user'] === API_USER_ID) {\n                $arrData['author'] = \"API [\".$dataItem['description'].\"]\";\n                $arrData['id_user'] = API_USER_ID;\n                $arrData['author_email'] = \"\";\n                $arrData['notification_status'] = false;\n            }\n\n            // Get all tags for this item\n            $tags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $post_id);\n            foreach ($rows as $record) {\n                if (empty($tags)) {\n                    $tags = \"<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                } else {\n                    $tags .= \"&nbsp;&nbsp;<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                }\n            }\n\n            // TODO -> improve this check\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n\n\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\n                \"SELECT role_id\n                FROM \".prefix_table(\"restriction_to_roles\").\"\n                WHERE item_id=%i\",\n                $post_id\n            );\n            foreach ($rows_tmp as $rec_tmp) {\n                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                    $restrictionActive = false;\n                }\n            }\n\n            // Uncrypt PW\n            if (null !== $post_salt_key_required\n                && $post_salt_key_required === '1'\n                && null !== $post_salt_key_set\n                && $post_salt_key_set === '1'\n            ) {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 1;\n            } else {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 0;\n            }\n\n            $pw = @$pw['string'];\n            if (!isUTF8($pw)) {\n                $pw = '';\n            }\n\n            // check if item is expired\n            if (null !== $post_expired_item\n                && $post_expired_item === '1'\n            ) {\n                $item_is_expired = true;\n            } else {\n                $item_is_expired = false;\n            }\n\n\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $user_in_restricted_list_of_item === true)\n                ||\n                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n                    && $restrictionActive === false\n                )\n            ) {\n                // Allow show details\n                $arrData['show_details'] = 1;\n                // Display menu icon for deleting if user is allowed\n                if ($dataItem['id_user'] == $_SESSION['user_id']\n                    || $_SESSION['is_admin'] === '1'\n                    || ($_SESSION['user_manager'] === '1' && $SETTINGS['manager_edit'] === '1')\n                    || $dataItem['anyone_can_modify'] === '1'\n                    || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role'])\n                    || in_array($_SESSION['user_id'], $restrictedTo)\n                ) {\n                    $arrData['user_can_modify'] = 1;\n                    $user_is_allowed_to_modify = true;\n                } else {\n                    $arrData['user_can_modify'] = 0;\n                    $user_is_allowed_to_modify = false;\n                }\n\n                // Get restriction list for roles\n                $listRestrictionRoles = array();\n                if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                    // Add restriction if item is restricted to roles\n                    $rows = DB::query(\n                        \"SELECT t.title\n                        FROM \".prefix_table(\"roles\").\"_title as t\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['title'], $listRestrictionRoles)) {\n                            array_push($listRestrictionRoles, $record['title']);\n                        }\n                    }\n                }\n                // Check if any KB is linked to this item\n                if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] === '1') {\n                    $tmp = \"\";\n                    $rows = DB::query(\n                        \"SELECT k.label, k.id\n                        FROM \".prefix_table(\"kb_items\").\" as i\n                        INNER JOIN \".prefix_table(\"kb\").\" as k ON (i.kb_id=k.id)\n                        WHERE i.item_id = %i\n                        ORDER BY k.label ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (empty($tmp)) {\n                            $tmp = \"<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        } else {\n                            $tmp .= \"&nbsp;<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        }\n                    }\n                    $arrData['links_to_kbs'] = $tmp;\n                }\n                // Prepare DIalogBox data\n                if ($item_is_expired === false) {\n                    $arrData['show_detail_option'] = 0;\n                } elseif ($user_is_allowed_to_modify === true && $item_is_expired === true) {\n                    $arrData['show_detail_option'] = 1;\n                } else {\n                    $arrData['show_detail_option'] = 2;\n                }\n\n                $arrData['label'] = htmlspecialchars_decode($dataItem['label']);\n                $arrData['pw'] = $pw;\n                $arrData['email'] = $dataItem['email'];\n                $arrData['url'] = htmlspecialchars_decode($dataItem['url']);\n                $arrData['folder'] = $dataItem['id_tree'];\n                if (!empty($dataItem['url'])) {\n                    $arrData['link'] = \"&nbsp;<a href='\".$dataItem['url'].\"' target='_blank'>&nbsp;<i class='fa fa-link tip' title='\".$LANG['open_url_link'].\"'></i></a>\";\n                }\n\n                $arrData['description'] = preg_replace('/(?<!\\\\r)\\\\n+(?!\\\\r)/', '', strip_tags($dataItem['description'], $SETTINGS_EXT['allowedTags']));\n                $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']));\n                $arrData['id_restricted_to'] = $listeRestriction;\n                $arrData['id_restricted_to_roles'] = count($listRestrictionRoles) > 0 ? implode(\";\", $listRestrictionRoles).\";\" : \"\";\n                $arrData['tags'] = $tags;\n                $arrData['folder'] = $dataItem['id_tree'];\n\n                if (isset($SETTINGS['enable_server_password_change'])\n                    && $SETTINGS['enable_server_password_change'] === '1') {\n                    $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n                } else {\n                    $arrData['auto_update_pwd_frequency'] = \"0\";\n                }\n\n                if (isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] === '1') {\n                    $arrData['anyone_can_modify'] = 1;\n                } else {\n                    $arrData['anyone_can_modify'] = $dataItem['anyone_can_modify'];\n                }\n\n                // statistics\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'viewed_no' => $dataItem['viewed_no'] + 1,\n                    ),\n                    \"id = %i\",\n                    $post_id\n                );\n                $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n                // get fields\n                $fieldsTmp = $arrCatList = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1'\n                    && null !== $post_page && $post_page === \"items\"\n                ) {\n                    // get list of associated Categories\n                    $arrCatList = array();\n                    $rows_tmp = DB::query(\n                        \"SELECT id_category\n                        FROM \".prefix_table(\"categories_folders\").\"\n                        WHERE id_folder=%i\",\n                        $post_folder_id\n                    );\n                    if (DB::count() > 0) {\n                        foreach ($rows_tmp as $row) {\n                            array_push($arrCatList, $row['id_category']);\n                        }\n\n                        // get fields for this Item\n                        $rows_tmp = DB::query(\n                            \"SELECT i.field_id AS field_id, i.data AS data, i.data_iv AS data_iv,\n                            i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                            c.type as field_type\n                            FROM \".prefix_table(\"categories_items\").\" AS i\n                            INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                            WHERE i.item_id=%i AND c.parent_id IN %ls\",\n                            $post_id,\n                            $arrCatList\n                        );\n                        foreach ($rows_tmp as $row) {\n                            // Uncrypt data\n                            if ($row['encryption_type'] === \"defuse\") {\n                                $fieldText = cryption(\n                                    $row['data'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                                $fieldText = $fieldText['string'];\n                            } else {\n                                $fieldText = $row['data'];\n                            }\n\n                            // build returned list of Fields text\n                            if (empty($fieldsTmp)) {\n                                $fieldsTmp = $row['field_id'].\n                                    \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                    \"~~\".$row['field_type'];\n                            } else {\n                                $fieldsTmp .= \"_|_\".$row['field_id'].\n                                \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                \"~~\".$row['field_type'];\n                            }\n                        }\n                    }\n                }\n                $arrData['fields'] = $fieldsTmp;\n                $arrData['categories'] = $arrCatList;\n\n                // Manage user restriction\n                if (null !== $post_restricted) {\n                    $arrData['restricted'] = $post_restricted;\n                } else {\n                    $arrData['restricted'] = \"\";\n                }\n                // Decrement the number before being deleted\n                $dataDelete = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id=%i\", $post_id);\n                $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                $arrData['to_be_deleted_type'] = $dataDelete['del_type'];\n                if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                    if ($dataDelete['del_enabled'] === '1' || $arrData['id_user'] != $_SESSION['user_id']) {\n                        if ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] >= 1) {\n                            // decrease counter\n                            DB::update(\n                                $pre.\"automatic_del\",\n                                array(\n                                    'del_value' => $dataDelete['del_value'] - 1\n                                    ),\n                                \"item_id = %i\",\n                                $post_id\n                            );\n                            // store value\n                            $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                        } elseif ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] <= 1 || $dataDelete['del_type'] === '2' && $dataDelete['del_value'] < time()\n                        ) {\n                            $arrData['show_details'] = 0;\n                            // delete item\n                            DB::delete($pre.\"automatic_del\", \"item_id = %i\", $post_id);\n                            // make inactive object\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'inactif' => '1',\n                                    ),\n                                \"id = %i\",\n                                $post_id\n                            );\n                            // log\n                            logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login'], 'at_automatically_deleted');\n                            $arrData['to_be_deleted'] = 0;\n                        } elseif ($dataDelete['del_type'] === '2') {\n                            $arrData['to_be_deleted'] = date($SETTINGS['date_format'], $dataDelete['del_value']);\n                        }\n                    } else {\n                        $arrData['to_be_deleted'] = \"\";\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = \"not_enabled\";\n                }\n                // send notification if enabled\n                if (isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] === '1') {\n                    // send back infos\n                    DB::insert(\n                        prefix_table('emails'),\n                        array(\n                            'timestamp' => time(),\n                            'subject' => $LANG['email_on_open_notification_subject'],\n                            'body' => str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($arrData['author']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_on_open_notification_mail']),\n                            'receivers' => $listNotificationEmails,\n                            'status' => ''\n                            )\n                    );\n                } else {\n                    $arrData['notification_list'] = \"\";\n                    $arrData['notification_status'] = \"\";\n                }\n            } else {\n                $arrData['show_details'] = 0;\n                // get readable list of restriction\n                $listOfRestricted = \"\";\n                if (!empty($dataItem['restricted_to'])) {\n                    foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                        if (!empty($userRest)) {\n                            $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                $arrData['restricted_to'] = $listOfRestricted;\n            }\n            $arrData['timestamp'] = time();\n\n            $_SESSION['user_settings']['show_step2'] = true;\n\n            // Encrypt data to return\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\n           * CASE\n           * Display History of the selected Item\n        */\n        case \"showDetailsStep2\":\n            // get Item info\n            if ($_SESSION['user_settings']['show_step2'] !== true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Load item data\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n\n\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\n                \"SELECT role_id\n                FROM \".prefix_table(\"restriction_to_roles\").\"\n                WHERE item_id=%i\",\n                $post_id\n            );\n            foreach ($rows_tmp as $rec_tmp) {\n                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                    $restrictionActive = false;\n                }\n            }\n\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $user_in_restricted_list_of_item === true)\n                ||\n                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n                    && $restrictionActive === false\n                )\n            ) {\n                // GET Audit trail\n                $history = \"\";\n                $historyOfPws = \"\";\n                $rows = DB::query(\n                    \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login, l.raison_iv AS raison_iv\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE id_item=%i AND action <> %s\n                    ORDER BY date ASC\",\n                    $post_id,\n                    \"at_shown\"\n                );\n                foreach ($rows as $record) {\n                    $reason = explode(':', $record['raison']);\n                    if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                        // check if item is PF\n                        if ($dataItem['perso'] != 1) {\n                            $reason[1] = cryption(\n                                $reason[1],\n                                \"\",\n                                \"decrypt\"\n                            );\n                        } else {\n                            $reason[1] = cryption(\n                                $reason[1],\n                                $_SESSION['user_settings']['session_psk'],\n                                \"decrypt\"\n                            );\n                        }\n                        $reason[1] = @$reason[1]['string'];\n                        // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                        if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                            $reason[1] = \"\";\n                        }\n                    }\n                    // imported via API\n                    if (empty($record['login'])) {\n                        $record['login'] = $LANG['imported_via_api'];\n                    }\n\n                    if (!empty($reason[1]) || $record['action'] === \"at_copy\" || $record['action'] === \"at_creation\" || $record['action'] === \"at_manual\" || $record['action'] === \"at_modification\" || $record['action'] === \"at_delete\" || $record['action'] === \"at_restored\") {\n                        if (trim($reason[0]) === \"at_pw\" && empty($reason[1]) === false) {\n                            if (empty($historyOfPws)) {\n                                $historyOfPws = $LANG['previous_pw'].\"\\n\".$reason[1];\n                            } else {\n                                $historyOfPws .= \"\\n\".$reason[1];\n                            }\n                        }\n                    }\n                }\n\n                // generate 2d key\n                $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                // Prepare files listing\n                $files = $filesEdit = \"\";\n                // launch query\n                $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_id);\n                foreach ($rows as $record) {\n                    // get icon image depending on file format\n                    $iconImage = fileFormatImage($record['extension']);\n\n                    // prepare text to display\n                    if (strlen($record['name']) > 60 && strrpos($record['name'], \".\") >= 56) {\n                        $filename = substr($record['name'], 0, 50).\"(...)\".substr($record['name'], strrpos($record['name'], \".\"));\n                    } else {\n                        $filename = $record['name'];\n                    }\n\n                    // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                    if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                        $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\\'image_dialog\\' href=\\'#'.$record['id'].'\\' title=\\''.$record['name'].'\\'>'.$filename.'</a></div>';\n                    } else {\n                        $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' class=\\'small_spacing\\'>'.$filename.'</a></div>';\n                    }\n                    // Prepare list of files for edit dialogbox\n                    $filesEdit .= '<span id=\\'span_edit_file_'.$record['id'].'\\'><span class=\\'fa fa-'.$iconImage.'\\'></span>&nbsp;<span class=\\'fa fa-eraser tip\\' style=\\'cursor:pointer;\\' onclick=\\'delete_attached_file(\"'.$record['id'].'\")\\' title=\\''.$LANG['at_delete'].'\\'></span>&nbsp;'.$filename.\"</span><br />\";\n                }\n                // display lists\n                $filesEdit = str_replace('\"', '&quot;', $filesEdit);\n                $files_id = $files;\n\n                // disable add bookmark if alread bookmarked\n                if (in_array($post_id, $_SESSION['favourites'])) {\n                    $favourite = 1;\n                } else {\n                    $favourite = 0;\n                }\n\n                // Add the fact that item has been viewed in logs\n                if (isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] === '1') {\n                    logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_shown', $_SESSION['login']);\n                }\n\n                // Add this item to the latests list\n                if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                    if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                        array_pop($_SESSION['latest_items']); //delete last items\n                    }\n                    array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                    // update DB\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'latest_items' => implode(';', $_SESSION['latest_items'])\n                            ),\n                        \"id=\".$_SESSION['user_id']\n                    );\n                }\n\n                // has this item a change proposal\n                DB::query(\"SELECT * FROM \".$pre.\"items_change WHERE item_id = %i\", $post_id);\n\n                $_SESSION['user_settings']['show_step2'] = false;\n\n                echo prepareExchangedData(\n                    array(\n                        \"history\" => htmlspecialchars($history, ENT_QUOTES, 'UTF-8'),\n                        \"history_of_pwds\" => htmlspecialchars($historyOfPws, ENT_QUOTES, 'UTF-8'),\n                        \"favourite\" => $favourite,\n                        \"files_edit\" => $filesEdit,\n                        \"files_id\" => $files_id,\n                        \"has_change_proposal\" => DB::count(),\n                        \"error\" => \"\"\n                    ),\n                    \"encode\"\n                );\n            }\n            break;\n\n        /*\n         * CASE\n         * Delete an item\n        */\n        case \"del_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // Check that user can access this item\n            $granted = accessToItemIsGranted($post_id);\n            if ($granted !== true) {\n                echo prepareExchangedData(array(\"error\" => $granted), \"encode\");\n                break;\n            }\n\n            // Load item data\n            $data = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // delete item consists in disabling it\n            DB::update(\n                prefix_table(\"items\"),\n                array(\n                    'inactif' => '1',\n                    ),\n                \"id = %i\",\n                $post_id\n            );\n            // log\n            logItems($post_id, $post_label, $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n            // Update CACHE table\n            updateCacheTable(\"delete_value\", $post_id);\n            break;\n\n        /*\n        * CASE\n        * Update a Group\n        */\n        case \"update_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $title = filter_var(htmlspecialchars_decode($dataReceived['title']), FILTER_SANITIZE_STRING);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check if user is allowed to access this folder\n            if (!in_array($post_folder_id, $_SESSION['groupes_visibles'])) {\n                echo '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                break;\n            }\n\n            // Check if title doesn't contains html codes\n            if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $title, $out)) {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_html_codes']).'\" } ]';\n                break;\n            }\n            // check that title is not numeric\n            if (is_numeric($title) === true) {\n                echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n                break;\n            }\n\n            // Check if duplicate folders name are allowed\n            $createNewFolder = true;\n            if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n                $data = DB::queryFirstRow(\"SELECT id, title FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $title);\n                if (!empty($data['id']) && $dataReceived['folder'] != $data['id']) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_group_exist']).'\" } ]';\n                    break;\n                }\n            }\n\n            // query on folder\n            $data = DB::queryfirstrow(\n                \"SELECT parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // check if complexity level is good\n            // if manager or admin don't care\n            if ($_SESSION['is_admin'] != 1 && $_SESSION['user_manager'] != 1 && $data['personal_folder'] === '0') {\n                $data = DB::queryfirstrow(\n                    \"SELECT valeur\n                    FROM \".prefix_table(\"misc\").\"\n                    WHERE intitule = %i AND type = %s\",\n                    $data['parent_id'],\n                    \"complex\"\n                );\n                if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_folder_complexity_lower_than_top_folder'].\" [<b>\".$SETTINGS_EXT['pwComplexity'][$data['valeur']][1]).'</b>]\"} ]';\n                    break;\n                }\n            }\n\n            // update Folders table\n            $tmp = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $dataReceived['folder']\n            );\n            if ($tmp['parent_id'] != 0 || $tmp['title'] != $_SESSION['user_id'] || $tmp['personal_folder'] != 1) {\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'title' => $title\n                        ),\n                    'id=%s',\n                    $post_folder_id\n                );\n                // update complixity value\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $dataReceived['complexity']\n                        ),\n                    'intitule = %s AND type = %s',\n                    $post_folder_id,\n                    \"complex\"\n                );\n                // rebuild fuild tree folder\n                $tree->rebuild();\n            }\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Move a Group including sub-folders\n        */\n        case \"move_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" :  \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check that user can access this folder\n            if (!in_array($post_source_folder_id, $_SESSION['groupes_visibles'])\n                || !in_array($post_target_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $tmp_source = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_source_folder_id\n            );\n\n            $tmp_target = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_target_folder_id\n            );\n\n            // check if target is not a child of source\n            if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['personal_folder'] === '1' || $tmp_target['personal_folder'] === '1') {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            if ($tmp_source['parent_id'] !== \"0\") {\n                // moving SOURCE folder\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => $post_target_folder_id\n                        ),\n                    'id=%s',\n                    $post_source_folder_id\n                );\n                $tree->rebuild();\n            }\n\n\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Store hierarchic position of Group\n        */\n        case 'save_position':\n            DB::update(\n                prefix_table(\"nested_tree\"),\n                array(\n                    'parent_id' => $post_destination\n                    ),\n                'id = %i',\n                $post_source\n            );\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            break;\n\n        /*\n        * CASE\n        * List items of a group\n        */\n        case 'lister_items_groupe':\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.str_replace('\"', '\\\"', $LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Prepare POST variables\n            $post_restricted = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_NUMBER_INT);\n            $post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n            $post_nb_items_to_display_once = filter_input(INPUT_POST, 'nb_items_to_display_once', FILTER_SANITIZE_NUMBER_INT);\n\n            $arboHtml = $html = \"\";\n            $folderIsPf = false;\n            $showError = 0;\n            $itemsIDList = $rights = $returnedData = $uniqueLoadData = array();\n            // Build query limits\n            if (empty($post_start) === true) {\n                $start = 0;\n            } else {\n                $start = $post_start;\n            }\n\n            // to do only on 1st iteration\n            if (intval($start) === 0) {\n                // Prepare tree\n                $arbo = $tree->getPath($post_id, true);\n                foreach ($arbo as $elem) {\n                    if ($elem->title == $_SESSION['user_id'] && $elem->nlevel === '1') {\n                        $elem->title = $_SESSION['login'];\n                        $folderIsPf = true;\n                    }\n                    $arboHtml_tmp = '<a class=\"path_element\" id=\"path_elem_'.$elem->id.'\"';\n                    if (in_array($elem->id, $_SESSION['groupes_visibles'])) {\n                        $arboHtml_tmp .= ' style=\"cursor:pointer;\" onclick=\"ListerItems('.$elem->id.', \\'\\', 0)\"';\n                    }\n                    $arboHtml_tmp .= '>'.htmlspecialchars(stripslashes($elem->title), ENT_QUOTES).'</a>';\n                    if (empty($arboHtml)) {\n                        $arboHtml = $arboHtml_tmp;\n                    } else {\n                        $arboHtml .= '&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;'.$arboHtml_tmp;\n                    }\n                }\n                $uniqueLoadData['arboHtml'] = $arboHtml;\n\n                // store last folder accessed in cookie\n                setcookie(\n                    \"jstree_select\",\n                    $post_id,\n                    time() + 60 * 60 * 24 * $SETTINGS['personal_saltkey_cookie_duration'],\n                    '/'\n                );\n\n                // check role access on this folder (get the most restrictive) (2.1.23)\n                $accessLevel = 2;\n                $arrTmp = [];\n                foreach (explode(';', $_SESSION['fonction_id']) as $role) {\n                    $access = DB::queryFirstRow(\n                        \"SELECT type FROM \".prefix_table(\"roles_values\").\" WHERE role_id = %i AND folder_id = %i\",\n                        $role,\n                        $post_id\n                    );\n                    if ($access['type'] === \"R\") {\n                        array_push($arrTmp, 1);\n                    } elseif ($access['type'] === \"W\") {\n                        array_push($arrTmp, 0);\n                    } elseif ($access['type'] === \"ND\") {\n                        array_push($arrTmp, 2);\n                    } else {\n                        array_push($arrTmp, 3);\n                    }\n                }\n                $accessLevel = min($arrTmp);\n                $uniqueLoadData['accessLevel'] = $accessLevel;\n\n                // check if this folder is a PF. If yes check if saltket is set\n                if ((!isset($_SESSION['user_settings']['encrypted_psk']) || empty($_SESSION['user_settings']['encrypted_psk'])) && $folderIsPf === true) {\n                    $showError = \"is_pf_but_no_saltkey\";\n                }\n                $uniqueLoadData['showError'] = $showError;\n\n                // check if items exist\n                $where = new WhereClause('and');\n                if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                    $counter = count($_SESSION['list_folders_limited'][$post_id]);\n                    $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n                } elseif (!in_array(\n                    $post_id,\n                    array_merge(\n                        $_SESSION['groupes_visibles'],\n                        @array_keys($_SESSION['list_restricted_folders_for_items']),\n                        @array_keys($_SESSION['list_folders_limited'])\n                    )\n                )) {\n                    echo prepareExchangedData(array(\"error\" => \"not_authorized\"), \"encode\");\n                    break;\n                } else {\n                    DB::query(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE inactif = %i\", 0);\n                    $counter = DB::count();\n                    $uniqueLoadData['counter'] = $counter;\n                }\n\n\n                // Identify if it is a personal folder\n                if (in_array($post_id, $_SESSION['personal_visible_groups'])) {\n                    $findPfGroup = 1;\n                } else {\n                    $findPfGroup = \"\";\n                }\n                $uniqueLoadData['findPfGroup'] = $findPfGroup;\n\n\n                // Get folder complexity\n                $folderComplexity = DB::queryFirstRow(\n                    \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %i\",\n                    \"complex\",\n                    $post_id\n                );\n                $folderComplexity = $folderComplexity['valeur'];\n                $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n                // Has this folder some categories to be displayed?\n                $displayCategories = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    $catRow = DB::query(\n                        \"SELECT id_category FROM \".prefix_table(\"categories_folders\").\" WHERE id_folder = %i\",\n                        $post_id\n                    );\n                    if (count($catRow) > 0) {\n                        foreach ($catRow as $cat) {\n                            if (empty($displayCategories)) {\n                                $displayCategories = $cat['id_category'];\n                            } else {\n                                $displayCategories .= \";\".$cat['id_category'];\n                            }\n                        }\n                    }\n                }\n                $uniqueLoadData['displayCategories'] = $displayCategories;\n\n                // is this folder a personal one\n                $folder_is_personal = in_array($post_id, $_SESSION['personal_folders']);\n                $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n                //\n                $folder_is_in_personal = in_array($post_id, array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n                $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n                //\n                if (isset($_SESSION['list_folders_editable_by_role'])) {\n                    $list_folders_editable_by_role = in_array($post_id, $_SESSION['list_folders_editable_by_role']);\n                } else {\n                    $list_folders_editable_by_role = \"\";\n                }\n                $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n            } else {\n                // get preloaded data\n                $uniqueLoadData = json_decode(\n                    filter_input(INPUT_POST, 'uniqueLoadData', FILTER_UNSAFE_RAW),\n                    true\n                );\n\n                // initialize main variables\n                $showError = $uniqueLoadData['showError'];\n                $accessLevel = $uniqueLoadData['accessLevel'];\n                $counter = $uniqueLoadData['counter'];\n                $findPfGroup = $uniqueLoadData['findPfGroup'];\n                $counter_full = $uniqueLoadData['counter_full'];\n                $displayCategories = $uniqueLoadData['displayCategories'];\n                $folderComplexity = $uniqueLoadData['folderComplexity'];\n                $arboHtml = $uniqueLoadData['arboHtml'];\n                $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n                $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n                $list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n            }\n\n            // prepare query WHere conditions\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$post_id]);\n            } else {\n                $where->add('i.id_tree=%i', $post_id);\n            }\n\n            // build the HTML for this set of Items\n            if ($counter > 0 && empty($showError)) {\n                // init variables\n                $init_personal_folder = false;\n                $expired_item = false;\n                $limited_to_items = \"\";\n\n                // List all ITEMS\n                if ($folderIsPf === false) {\n                    $where->add('i.inactif=%i', 0);\n                    $where->add('l.date=%l', \"(SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                    if (!empty($limited_to_items)) {\n                        $where->add('i.id IN %ls', explode(\",\", $limited_to_items));\n                    }\n\n                    $query_limit = \" LIMIT \".\n                        $start.\",\".\n                        $post_nb_items_to_display_once;\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\".$query_limit, //\n                        $where\n                    );\n                } else {\n                    $post_nb_items_to_display_once = \"max\";\n                    $where->add('i.inactif=%i', 0);\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\",\n                        $where\n                    );\n                }\n\n                $idManaged = '';\n                $i = 0;\n                $arr_items_html = array();\n\n                foreach ($rows as $record) {\n                    // exclude all results except the first one returned by query\n                    if (empty($idManaged) || $idManaged != $record['id']) {\n                        $new_line = '';\n\n                        // Get Expiration date\n                        $expirationFlag = '';\n                        $expired_item = 0;\n                        if ($SETTINGS['activate_expiration'] === '1') {\n                            if ($record['renewal_period'] > 0 &&\n                                ($record['date'] + ($record['renewal_period'] * $SETTINGS_EXT['one_month_seconds'])) < time()\n                            ) {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-red fa-sm\"></i>&nbsp;';\n                                $expired_item = 1;\n                            } else {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-green fa-sm\"></i>&nbsp;';\n                            }\n                        }\n                        // list of restricted users\n                        $is_user_in_restricted_list = in_array($_SESSION['user_id'], explode(';', $record['restricted_to']));\n\n                        $itemPw = $itemLogin = \"\";\n                        $displayItem = false;\n                        $need_sk = false;\n                        $canMove = false;\n                        $item_is_restricted_to_role = false;\n                        // TODO: Element is restricted to a group. Check if element can be seen by user\n                        // => r\u00e9cup\u00e9rer un tableau contenant les roles associ\u00e9s \u00e0 cet ID (a partir table restriction_to_roles)\n                        $user_is_included_in_role = false;\n                        $roles = DB::query(\n                            \"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\",\n                            $record['id']\n                        );\n\n                        if (DB::count() > 0) {\n                            $item_is_restricted_to_role = true;\n                            foreach ($roles as $val) {\n                                if (in_array($val['role_id'], $_SESSION['user_roles'])) {\n                                    $user_is_included_in_role = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // Manage the restricted_to variable\n                        if (null !== $post_restricted) {\n                            $restrictedTo = $post_restricted;\n                        } else {\n                            $restrictedTo = \"\";\n                        }\n\n                        if ($list_folders_editable_by_role === '1') {\n                            if (empty($restrictedTo)) {\n                                $restrictedTo = $_SESSION['user_id'];\n                            } else {\n                                $restrictedTo .= ','.$_SESSION['user_id'];\n                            }\n                        }\n\n                        // Can user modify it?\n                        if ($record['anyone_can_modify'] === '1'\n                            || $_SESSION['user_id'] === $record['log_user']\n                            || ($_SESSION['user_read_only'] === '1' && $folderIsPf === false)\n                            || (isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] === '1') // force draggable if user is manager\n                        ) {\n                            $canMove = true;\n                        }\n\n                        // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                        if ($record['perso'] !== '1' && (int) $folder_is_personal === 1) {\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'perso' => 1\n                                ),\n                                \"id=%i\",\n                                $record['id']\n                            );\n                            $record['perso'] = '1';\n                        }\n\n\n                        // CASE where item is restricted to a role to which the user is not associated\n                        if (isset($user_is_included_in_role)\n                            && $user_is_included_in_role === false\n                            && isset($item_is_restricted_to_role)\n                            && $item_is_restricted_to_role === true\n                            && (int) $is_user_in_restricted_list !== 1\n                            && (int) $folder_is_personal !== 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                            $displayItem = false;\n                            $need_sk = false;\n                            $canMove = false;\n                        // Case where item is in own personal folder\n                        } elseif ((int) $folder_is_in_personal === 1\n                            && (int) $record['perso'] === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-user-secret mi-grey-1 fa-sm\"></i>&nbsp';\n                            $findPfGroup = 1;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'1\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'1\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $need_sk = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users included user\n                        } elseif (!empty($record['restricted_to'])\n                            || (int) $list_folders_editable_by_role === 1\n                            && (int) $is_user_in_restricted_list === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users not including user\n                        } elseif ((int) $record['perso'] === 1\n                            ||\n                            (\n                                !empty($record['restricted_to'])\n                                && (int) $is_user_in_restricted_list !== 1\n                            )\n                            ||\n                            (\n                                isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            )\n                        ) {\n                            if (isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            ) {\n                                $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                                $findPfGroup = 0;\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                                $displayItem = false;\n                                $need_sk = true;\n                                $canMove = false;\n                            } else {\n                                $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                                // reinit in case of not personal group\n                                if ($init_personal_folder === false) {\n                                    $findPfGroup = \"\";\n                                    $init_personal_folder = true;\n                                }\n\n                                if (!empty($record['restricted_to']) && $is_user_in_restricted_list === '1') {\n                                    $displayItem = true;\n                                }\n                            }\n                        } else {\n                            $perso = '<i class=\"fa fa-tag mi-green fa-sm\"></i>&nbsp';\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            // reinit in case of not personal group\n                            if ($init_personal_folder === false) {\n                                $findPfGroup = \"\";\n                                $init_personal_folder = true;\n                            }\n                        }\n                        // Prepare full line\n                        $new_line .= '<li name=\"'.strip_tags(htmlentities(cleanString($record['label']))).'\" ondblclick=\"'.$action_dbl.'\" class=\"';\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= 'item_draggable';\n                        } else {\n                            $new_line .= 'item';\n                        }\n\n                        $new_line .= ' trunc_line\" id=\"'.$record['id'].'\" style=\"\">';\n\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= '<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>';\n                        } else {\n                            $new_line .= '<span style=\"margin-left:11px;\"></span>';\n                        }\n\n\n                        $label = stripslashes(handleBackslash($record['label']));\n                        $new_line .= $expirationFlag.''.$perso.'&nbsp;<a id=\"fileclass'.$record['id'].'\" class=\"file \" onclick=\"'.$action.'\"><div class=\"truncate\">'.$label.'&nbsp;<font size=\"1px\">';\n\n                        // manage desc to show\n                        if (!empty($record['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                            $desc = explode(\"<br>\", $record['description']);\n                            $new_line .= '['.strip_tags(stripslashes(cleanString($desc[0]))).']';\n                        }\n\n                        $new_line .= '</div></font>';\n\n                        $new_line .= '</a>';\n\n                        //\n                        $new_line .= '<span style=\"float:right;margin-top:2px;\">';\n\n                        // increment array for icons shortcuts (don't do if option is not enabled)\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($need_sk === true && isset($_SESSION['user_settings']['session_psk'])) {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    $_SESSION['user_settings']['session_psk'],\n                                    \"decrypt\"\n                                );\n                            } else {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                            }\n\n                            // test charset => may cause a json error if is not utf8\n                            $pw = $pw['string'];\n                            if (!isUTF8($pw)) {\n                                $pw = \"\";\n                                $new_line .= '<i class=\"fa fa-warning fa-sm mi-red tip\" title=\"'.$LANG['pw_encryption_error'].'\"></i>&nbsp;';\n                            } elseif (empty($pw) === true) {\n                                $new_line .= '&nbsp;<i class=\"fa fa-exclamation-circle fa-sm mi-yellow tip\" title=\"'.$LANG['password_is_empty'].'\"></i>&nbsp;';\n                            }\n                        } else {\n                            $pw = \"\";\n                        }\n\n                        // mini icon for collab\n                        if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                            if ($record['anyone_can_modify'] === '1') {\n                                $new_line .= '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                            }\n                        }\n\n                        // display quick icon shortcuts ?\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($displayItem === true) {\n                                if (!empty($record['login'])) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-user mi-black mini_login\" data-clipboard-text=\"'.strtr($record['login'], '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_login'].'\"></i>&nbsp;';\n                                }\n                                if (!empty($pw)) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-lock mi-black mini_pw\" data-clipboard-text=\"'.strtr($pw, '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i>&nbsp;';\n                                }\n                            }\n                        }\n                        // Prepare make Favorite small icon\n                        $new_line .= '<span id=\"quick_icon_fav_'.$record['id'].'\" title=\"Manage Favorite\" class=\"cursor tip\">';\n                        if (in_array($record['id'], $_SESSION['favourites'])) {\n                            $new_line .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$record['id'].',0)\" class=\"tip\"></i>';\n                        } else {\n                            $new_line .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$record['id'].',1)\" class=\"tip\"></i>';\n                        }\n\n                        $new_line .= '</span></li>';\n                        // Build array with items\n                        array_push($itemsIDList, array($record['id'], $pw, $record['login'], $displayItem));\n\n                        // build full html\n                        $html .= $new_line;\n\n                        $i++;\n                    }\n                    $idManaged = $record['id'];\n                }\n\n                $rights = recupDroitCreationSansComplexite($post_id);\n            }\n\n            // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n            // count\n            if (intval($start) === 0) {\n                DB::query(\n                    \"SELECT i.id\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as n ON (i.id_tree = n.id)\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id = l.id_item)\n                    WHERE %l\n                    ORDER BY i.label ASC, l.date DESC\",\n                    $where\n                );\n                $counter_full = DB::count();\n                $uniqueLoadData['counter_full'] = $counter_full;\n            }\n\n            // Check list to be continued status\n            if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n                $listToBeContinued = \"yes\";\n            } else {\n                $listToBeContinued = \"end\";\n            }\n\n            //  Fixing items not being displayed\n            $html = iconv(\n                'UTF-8',\n                'UTF-8//IGNORE',\n                mb_convert_encoding(\n                    $html,\n                    \"UTF-8\",\n                    \"UTF-8\"\n                )\n            );\n\n\n            // Prepare returned values\n            $returnValues = array(\n                \"recherche_group_pf\" => $findPfGroup,\n                \"arborescence\" => $arboHtml,\n                \"array_items\" => $itemsIDList,\n                \"items_html\" => $html,\n                \"error\" => $showError,\n                \"saltkey_is_required\" => $folderIsPf === true ? 1 : 0,\n                \"show_clipboard_small_icons\" => isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1' ? 1 : 0,\n                \"next_start\" => intval($post_nb_items_to_display_once) + intval($start),\n                \"list_to_be_continued\" => $listToBeContinued,\n                \"items_count\" => $counter,\n                \"counter_full\" => $counter_full,\n                'folder_complexity' => $folderComplexity,\n                'displayCategories' => $displayCategories,\n                'access_level' => $accessLevel,\n                'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n                'uniqueLoadData' => json_encode($uniqueLoadData)\n            );\n            // Check if $rights is not null\n            if (count($rights) > 0) {\n                $returnValues = array_merge($returnValues, $rights);\n            }\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get complexity level of a group\n        */\n        case \"get_complixity_level\":\n            // Prepare POST variables\n            $post_groupe = filter_input(INPUT_POST, 'groupe', FILTER_SANITIZE_STRING);\n            $post_context = filter_input(INPUT_POST, 'context', FILTER_SANITIZE_STRING);\n\n            // get some info about ITEM\n            $dataItem = DB::queryfirstrow(\n                \"SELECT perso, anyone_can_modify\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $post_item_id\n            );\n            // is user allowed to access this folder - readonly\n            if (null !== $post_groupe && empty($post_groupe) === false) {\n                if (in_array($post_groupe, $_SESSION['read_only_folders']) || !in_array($post_groupe, $_SESSION['groupes_visibles'])) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                        if ($dataItem['anyone_can_modify'] != 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                \"error\" => \"user_is_readonly\",\n                                \"message\" => $LANG['error_not_allowed_to']\n                            );\n                            echo prepareExchangedData($returnValues, \"encode\");\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            \"error\" => \"user_is_readonly\",\n                            \"message\" => $LANG['error_not_allowed_to']\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            if (null !== $post_item_id && empty($post_item_id) === false) {\n                // Lock Item (if already locked), go back and warn\n                $dataTmp = DB::queryFirstRow(\"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\", $post_item_id);\n\n                // If token is taken for this Item and delay is passed then delete it.\n                if (isset($SETTINGS['delay_item_edition']) &&\n                    $SETTINGS['delay_item_edition'] > 0 && !empty($dataTmp['timestamp']) &&\n                    round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n                ) {\n                    DB::delete(prefix_table(\"items_edition\"), \"item_id = %i\", $post_item_id);\n                    //reload the previous data\n                    $dataTmp = DB::queryFirstRow(\n                        \"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\",\n                        $post_item_id\n                    );\n                }\n\n                // If edition by same user (and token not freed before for any reason, then update timestamp)\n                if (!empty($dataTmp['timestamp']) && $dataTmp['user_id'] == $_SESSION['user_id']) {\n                    DB::update(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            \"timestamp\" => time()\n                        ),\n                        \"user_id = %i AND item_id = %i\",\n                        $_SESSION['user_id'],\n                        $post_item_id\n                    );\n                    // If no token for this Item, then initialize one\n                } elseif (empty($dataTmp[0])) {\n                    DB::insert(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            'timestamp' => time(),\n                            'item_id' => $post_item_id,\n                            'user_id' => $_SESSION['user_id']\n                        )\n                    );\n                    // Edition not possible\n                } else {\n                    $returnValues = array(\n                        \"error\" => \"no_edition_possible\",\n                        \"error_msg\" => addslashes($LANG['error_no_edition_possible_locked'])\n                    );\n                    echo prepareExchangedData($returnValues, \"encode\");\n                    break;\n                }\n            }\n\n            // do query on this folder\n            $data_this_folder = DB::queryFirstRow(\n                \"SELECT id, personal_folder, title\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %s\",\n                $post_groupe\n            );\n\n            // check if user can perform this action\n            if (null !== $post_context && empty($post_context) === false) {\n                if ($post_context === \"create_folder\" || $post_context === \"edit_folder\" || $post_context === \"delete_folder\") {\n                    if ($_SESSION['is_admin'] !== '1'\n                        && ($_SESSION['user_manager'] !== '1')\n                        && (\n                            isset($SETTINGS['enable_user_can_create_folders'])\n                           && $SETTINGS['enable_user_can_create_folders'] !== '1'\n                        )\n                        && (\n                            $data_this_folder['personal_folder'] !== '1' && $data_this_folder['title'] !== $_SESSION['user_id']\n                        )   // take into consideration if this is a personal folder\n                    ) {\n                        $returnValues = array(\n                            \"error\" => \"no_folder_creation_possible\",\n                            \"error_msg\" => addslashes($LANG['error_not_allowed_to'])\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            // Get required Complexity for this Folder\n            $data = DB::queryFirstRow(\n                \"SELECT m.valeur, n.personal_folder\n                FROM \".prefix_table(\"misc\").\" AS m\n                INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (m.intitule = n.id)\n                WHERE type=%s AND intitule = %s\",\n                \"complex\",\n                $post_groupe\n            );\n\n            if (isset($data['valeur']) && (!empty($data['valeur']) || $data['valeur'] === '0')) {\n                $complexity = $SETTINGS_EXT['pwComplexity'][$data['valeur']][1];\n                $folder_is_personal = $data['personal_folder'];\n            } else {\n                $complexity = $LANG['not_defined'];\n\n                // if not defined, then previous query failed and personal_folder is null\n                // do new query to know if current folder is pf\n                $data_pf = DB::queryFirstRow(\n                    \"SELECT personal_folder\n                    FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id = %s\",\n                    $post_groupe\n                );\n                $folder_is_personal = $data_pf['personal_folder'];\n            }\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $visibilite = \"\";\n            if (empty($dataPf[0]) === false) {\n                $visibilite = $_SESSION['login'];\n            } else {\n                $rows = DB::query(\n                    \"SELECT t.title\n                    FROM \".prefix_table(\"roles_values\").\" as v\n                    INNER JOIN \".prefix_table(\"roles_title\").\" as t ON (v.role_id = t.id)\n                    WHERE v.folder_id = %i\n                    GROUP BY title\",\n                    $post_groupe\n                );\n                foreach ($rows as $record) {\n                    if (empty($visibilite)) {\n                        $visibilite = $record['title'];\n                    } else {\n                        $visibilite .= \" - \".$record['title'];\n                    }\n                }\n            }\n\n            recupDroitCreationSansComplexite($post_groupe);\n\n            $returnValues = array(\n                \"val\" => $data['valeur'],\n                \"visibility\" => $visibilite,\n                \"complexity\" => $complexity,\n                \"personal\" => $folder_is_personal\n            );\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * DELETE attached file from an item\n        */\n        case \"delete_attached_file\":\n            // Get some info before deleting\n            $data = DB::queryFirstRow(\n                \"SELECT name, id_item, file\n                FROM \".prefix_table(\"files\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // Load item data\n            $data_item = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $data['id_item']\n            );\n\n            // Check that user can access this folder\n            if (!in_array($data_item['id_tree'], $_SESSION['groupes_visibles'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            if (!empty($data['id_item'])) {\n                // Delete from FILES table\n                DB::delete(\n                    prefix_table(\"files\"),\n                    \"id = %i\",\n                    filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                // Update the log\n                logItems($data['id_item'], $data['name'], $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_del_file : '.$data['name']);\n                // Delete file from server\n                fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$data['file']);\n            }\n            break;\n\n        /*\n        * CASE\n        * REBUILD the description editor\n        */\n        case \"rebuild_description_textarea\":\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING);\n\n            $returnValues = array();\n            if (isset($SETTINGS['richtext']) && $SETTINGS['richtext'] === '1') {\n                if ($post_id === \"desc\") {\n                    $returnValues['desc'] = '$(\"#desc\").ckeditor({toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                } elseif ($post_id === \"edit_desc\") {\n                    $returnValues['desc'] = 'CKEDITOR.replace(\"edit_desc\",{toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                }\n            }\n            // Multselect\n            $returnValues['multi_select'] = '$(\"#edit_restricted_to_list\").multiselect({selectedList: 7, minWidth: 430, height: 145, checkAllText: \"'.$LANG['check_all_text'].'\", uncheckAllText: \"'.$LANG['uncheck_all_text'].'\",noneSelectedText: \"'.$LANG['none_selected_text'].'\"});';\n            // Display popup\n            if ($post_id === \"edit_desc\") {\n                $returnValues['dialog'] = '$(\"#div_formulaire_edition_item\").dialog(\"open\");';\n            } else {\n                $returnValues['dialog'] = '$(\"#div_formulaire_saisi\").dialog(\"open\");';\n            }\n            echo $returnValues;\n            break;\n\n        /*\n        * CASE\n        * Clear HTML tags\n        */\n        case \"clear_html_tags\":\n            // Get information for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT description FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n                filter_input(INPUT_POST, 'id_item', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // Clean up the string\n            echo json_encode(array(\"description\" => strip_tags($dataItem['description'])), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            break;\n\n        /*\n        * FUNCTION\n        * Launch an action when clicking on a quick icon\n        * $action = 0 => Make not favorite\n        * $action = 1 => Make favorite\n        */\n        case \"action_on_quick_icon\":\n            if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '1') {\n                // Add new favourite\n                array_push($_SESSION['favourites'], $post_id);\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'favourites' => implode(';', $_SESSION['favourites'])\n                        ),\n                    'id = %i',\n                    $_SESSION['user_id']\n                );\n                // Update SESSION with this new favourite\n                $data = DB::queryfirstrow(\n                    \"SELECT label,id_tree\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE id = \".mysqli_real_escape_string($link, $post_id)\n                );\n                $_SESSION['favourites_tab'][$post_id] = array(\n                    'label' => $data['label'],\n                    'url' => 'index.php?page=items&amp;group='.$data['id_tree'].'&amp;id='.$post_id\n                    );\n            } elseif (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '0') {\n                // delete from session\n                foreach ($_SESSION['favourites'] as $key => $value) {\n                    if ($_SESSION['favourites'][$key] === $post_id) {\n                        unset($_SESSION['favourites'][$key]);\n                        break;\n                    }\n                }\n                // delete from DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        \"favourites\" =>implode(';', $_SESSION['favourites'])\n                    ),\n                    \"id = %i\",\n                    $_SESSION['user_id']\n                );\n                // refresh session fav list\n                if (isset($_SESSION['favourites_tab'])) {\n                    foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                        if ($key == $post_id) {\n                            unset($_SESSION['favourites_tab'][$key]);\n                            break;\n                        }\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Move an ITEM\n        */\n        case \"move_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']\n                || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n            ) {\n                // error\n                exit();\n            }\n            // get data about item\n            $dataSource = DB::queryfirstrow(\n                \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                WHERE i.id=%i\",\n                $post_item_id\n            );\n            // get data about new folder\n            $dataDestination = DB::queryfirstrow(\n                \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // Check that user can access this folder\n            if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                echo '[{\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"}]';\n                break;\n            }\n\n            // previous is non personal folder and new too\n            if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                        ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"encrypt\"\n                );\n                // update pw\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 1\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    \"\",\n                    \"encrypt\"\n                );\n\n                // update item\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 0\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            }\n            // Log item moved\n            logItems(\n                $post_item_id,\n                $dataSource['label'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n            );\n\n            echo '[{\"from_folder\":\"'.$dataSource['id_tree'].'\" , \"to_folder\":\"'.$post_folder_id.'\"}]';\n            break;\n\n        /*\n        * CASE\n        * MASSIVE Move an ITEM\n        */\n        case \"mass_move_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])) {\n                // error\n                exit();\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get data about item\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                        WHERE i.id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo '[{\"error\":\"not_allowed\" , \"status\":\"ok\"}]';\n                        break;\n                    }\n\n                    // get data about new folder\n                    $dataDestination = DB::queryfirstrow(\n                        \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        $post_folder_id\n                    );\n\n                    // previous is non personal folder and new too\n                    if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            \"\",\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"encrypt\"\n                        );\n                        // update pw\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 1\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            \"\",\n                            \"encrypt\"\n                        );\n\n                        // update item\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 0\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    }\n                    // Log item moved\n                    logItems(\n                        $item_id,\n                        $dataSource['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n                    );\n                }\n            }\n\n            // reload cache table\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            updateCacheTable(\"reload\", \"\");\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n            break;\n\n        /*\n         * CASE\n         * MASSIVE Delete an item\n        */\n        case \"mass_delete_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get info\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT label, id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // perform a check in case of Read-Only user creating an item in his PF\n                    if ($_SESSION['user_read_only'] === true) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // delete item consists in disabling it\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                            ),\n                        \"id = %i\",\n                        $item_id\n                    );\n                    // log\n                    logItems($item_id, $dataSource['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n                    // Update CACHE table\n                    updateCacheTable(\"delete_value\", $item_id);\n                }\n            }\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n\n            break;\n\n            /*\n           * CASE\n           * Send email\n        */\n        case \"send_email\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (empty(filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING)) === false) {\n                    $content = explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING));\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                if ($post_cat === \"request_access_to_author\") {\n                    $dataAuthor = DB::queryfirstrow(\"SELECT email,login FROM \".prefix_table(\"users\").\" WHERE id= \".$content[1]);\n                    $dataItem = DB::queryfirstrow(\"SELECT label FROM \".prefix_table(\"items\").\" WHERE id= \".$content[0]);\n                    $ret = sendEmail(\n                        $LANG['email_request_access_subject'],\n                        str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($dataAuthor['login']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_request_access_mail']),\n                        $dataAuthor['email']\n                    );\n                } elseif ($post_cat === \"share_this_item\") {\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT label,id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id= %i\",\n                        $post_id\n                    );\n                    // send email\n                    $ret = sendEmail(\n                        $LANG['email_share_item_subject'],\n                        str_replace(\n                            array('#tp_link#', '#tp_user#', '#tp_item#'),\n                            array($SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataItem['id_tree'].'&id='.$post_id, addslashes($_SESSION['login']), addslashes($dataItem['label'])),\n                            $LANG['email_share_item_mail']\n                        ),\n                        $post_receipt\n                    );\n                }\n                echo '[{'.$ret.'}]';\n            }\n            break;\n\n        /*\n           * CASE\n           * manage notification of an Item\n        */\n        case \"notify_a_user\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (filter_input(INPUT_POST, 'notify_type', FILTER_SANITIZE_STRING) === \"on_show\") {\n                    // Check if values already exist\n                    $data = DB::queryfirstrow(\n                        \"SELECT notification FROM \".prefix_table(\"items\").\" WHERE id = %i\",\n                        $post_item_id\n                    );\n                    $notifiedUsers = explode(';', $data['notification']);\n                    // User is not in actual notification list\n                    if ($post_status === \"true\" && !in_array($post_user_id, $notifiedUsers)) {\n                        // User is not in actual notification list and wants to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT).\";\"\n                                    : $data['notification'].filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                        echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                        break;\n                    } elseif ($post_status === false && in_array($post_user_id, $notifiedUsers)) {\n                        // TODO : delete user from array and store in DB\n                        // User is in actual notification list and doesn't want to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                    : $data['notification'].\";\".filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Item History Log - add new entry\n        */\n        case \"history_entry_add\":\n            if ($post_key !== $_SESSION['key']) {\n                $data = array(\"error\" => \"key_is_wrong\");\n                echo prepareExchangedData($data, \"encode\");\n                break;\n            } else {\n                // decrypt and retreive data in JSON format\n                $dataReceived = prepareExchangedData($post_data, \"decode\");\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['item_id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                if ((\n                        (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false\n                    )\n                    ||\n                    (@in_array(\n                        $post_id,\n                        $_SESSION['list_folders_limited'][$post_folder_id]\n                    ))\n                ) {\n                    $error = \"\";\n                    // Query\n                    logItems($dataReceived['item_id'], $dataItem['label'], $_SESSION['user_id'], 'at_manual', $_SESSION['login'], htmlspecialchars_decode($dataReceived['label']));\n                    // Prepare new line\n                    $data = DB::queryfirstrow(\n                        \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i ORDER BY date DESC\",\n                        $dataReceived['item_id']\n                    );\n                    $historic = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $data['date']).\" - \".$_SESSION['login'].\" - \".$LANG[$data['action']].\" - \".$data['raison'];\n                    // send back\n                    $data = array(\n                        \"error\" => \"\",\n                        \"new_line\" => \"<br>\".addslashes($historic)\n                    );\n                    echo prepareExchangedData($data, \"encode\");\n                } else {\n                    $data = array(\"error\" => \"something_wrong\");\n                    echo prepareExchangedData($data, \"encode\");\n                    break;\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"free_item_for_edition\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            DB::delete(\n                prefix_table(\"items_edition\"),\n                \"item_id = %i\",\n                $post_id\n            );\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"is_item_changed\":\n            $data = DB::queryFirstRow(\n                \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND id_item = %i ORDER BY date DESC\",\n                \"at_modification\",\n                $post_item_id\n            );\n            // Check if it's in a personal folder. If yes, then force complexity overhead.\n            if ($data['date'] > filter_input(INPUT_POST, 'timestamp', FILTER_SANITIZE_STRING)) {\n                echo '{ \"modified\" : \"1\" }';\n            } else {\n                echo '{ \"modified\" : \"0\" }';\n            }\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"generate_OTV_url\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // delete all existing old otv codes\n            $rows = DB::query(\"SELECT id FROM \".prefix_table(\"otv\").\" WHERE timestamp < \".(time() - $SETTINGS['otv_expiration_period'] * 86400));\n            foreach ($rows as $record) {\n                DB::delete(prefix_table('otv'), \"id=%i\", $record['id']);\n            }\n\n            // generate session\n            $otv_code = GenerateCryptKey(32, false, true, true, true, false);\n\n            DB::insert(\n                prefix_table(\"otv\"),\n                array(\n                    'id' => null,\n                    'item_id' => $post_id,\n                    'timestamp' => time(),\n                    'originator' => intval($_SESSION['user_id']),\n                    'code' => $otv_code\n                    )\n            );\n            $newID = DB::insertId();\n\n            $otv_session = array(\n                \"code\"      => $otv_code,\n                \"stamp\" => time()\n            );\n\n            if (!isset($SETTINGS['otv_expiration_period'])) {\n                $SETTINGS['otv_expiration_period'] = 7;\n            }\n            $url = $SETTINGS['cpassman_url'].\"/index.php?otv=true&\".http_build_query($otv_session);\n            $exp_date = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n            echo json_encode(\n                array(\n                    \"error\" => \"\",\n                    \"url\" => str_replace(\n                        array(\"#URL#\", \"#DAY#\"),\n                        array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.addslashes($LANG['copy']).'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                        $LANG['one_time_view_item_url_box']\n                    )\n                )\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"image_preview_preparation\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $file_info = DB::queryfirstrow(\n                \"SELECT file, status FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            // prepare image info\n            $post_title = filter_input(INPUT_POST, 'title', FILTER_SANITIZE_STRING);\n            $image_code = $file_info['file'];\n            $extension = substr($post_title, strrpos($post_title, '.') + 1);\n            $file_to_display = $SETTINGS['url_to_upload_folder'].'/'.$image_code;\n            $file_suffix = \"\";\n\n            // should we encrypt/decrypt the file\n            encrypt_or_decrypt_file($file_info['file'], $file_info['status']);\n\n            // should we decrypt the attachment?\n            if (isset($file_info['status']) && $file_info['status'] === \"encrypted\") {\n                // Delete the file as viewed\n                fileDelete($SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension);\n\n                // Open the file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$image_code)) {\n                    // Should we encrypt or decrypt?\n                    prepareFileWithDefuse(\n                        'decrypt',\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code,\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                    );\n\n                    // prepare variable\n                    $file_to_display = $file_to_display.\"_delete.\".$extension;\n                    $file_suffix = \"_delete.\".$extension;\n                }\n            }\n\n            // Encrypt data to return\n            echo prepareExchangedData(\n                array(\n                    \"error\" => \"\",\n                    \"new_file\" => $file_to_display,\n                    \"file_suffix\" => $file_suffix,\n                    \"file_path\" => $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"delete_file\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $result = DB::queryfirstrow(\n                \"SELECT file FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            fileDelete($SETTINGS['path_to_upload_folder'].'/'.$result['file'].filter_input(INPUT_POST, 'file_suffix', FILTER_SANITIZE_STRING));\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"get_refined_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n\n            // get list of users\n            $aList = array();\n            $selOptionsUsers = \"\";\n            $selOptionsRoles = \"\";\n            $selEOptionsUsers = \"\";\n            $selEOptionsRoles = \"\";\n            $rows = DB::query(\n                \"SELECT r.role_id AS role_id, t.title AS title\n                FROM \".prefix_table(\"roles_values\").\" AS r\n                INNER JOIN \".prefix_table(\"roles_title\").\" AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i\",\n                $post_iFolderId\n            );\n            foreach ($rows as $record) {\n                $selOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role\">'.$record['title'].'</option>';\n                $selEOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role_edit\">'.$record['title'].'</option>';\n                $rows2 = DB::query(\"SELECT id, login, fonction_id FROM \".prefix_table(\"users\").\" WHERE fonction_id LIKE '%\".$record['role_id'].\"%'\");\n                foreach ($rows2 as $record2) {\n                    foreach (explode(\";\", $record2['fonction_id']) as $role) {\n                        if (!in_array($record2['id'], $aList) && $role == $record['role_id']) {\n                            array_push($aList, $record2['id']);\n                            $selOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user\">'.$record2['login'].'</option>';\n                            $selEOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user_edit\">'.$record2['login'].'</option>';\n                        }\n                    }\n                }\n            }\n\n            // export data\n            $data = array(\n                'error' => $error,\n                'selOptionsUsers' => $selOptionsUsers,\n                'selOptionsRoles' => $selOptionsRoles,\n                'selEOptionsUsers' => $selEOptionsUsers,\n                'selEOptionsRoles' => $selEOptionsRoles\n            );\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"check_for_title_duplicate\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n            $duplicate = 0;\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Prepare variables\n            $label = htmlspecialchars_decode($dataReceived['label']);\n            $idFolder = $dataReceived['idFolder'];\n\n            // don't check if Personal Folder\n            $data = DB::queryFirstRow(\"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $idFolder);\n            if ($data['title'] == $_SESSION['user_id']) {\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , error\" : \"\"}]';\n            } else {\n                if (filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING) === \"same_folder\") {\n                // case unique folder\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id_tree = %i AND label = %s\",\n                        $idFolder,\n                        $label\n                    );\n                } else {\n                // case complete database\n\n                    //get list of personal folders\n                    $arrayPf = array();\n                    $listPf = \"\";\n                    if (!empty($row['id'])) {\n                        $rows = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n                            \"1\"\n                        );\n                        foreach ($rows as $record) {\n                            if (!in_array($record['id'], $arrayPf)) {\n                                array_push($arrayPf, $record['id']);\n                            }\n                        }\n                    }\n\n                    // build WHERE condition\n                    $where = new WhereClause('and');\n                    $where->add('id_tree = %i', $idFolder);\n                    $where->add('label = %s', $label);\n                    if (!empty($arrayPf)) {\n                        $where->add(\"id_tree NOT IN (\".implode(',', $arrayPf).\")\");\n                    }\n\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE %l\",\n                        $where\n                    );\n                }\n\n                // count results\n                if (DB::count() > 0) {\n                    $duplicate = 1;\n                }\n\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , \"error\" : \"\"}]';\n            }\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"refresh_visible_folders\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Build list of visible folders\n            $selectVisibleFoldersOptions = $selectVisibleNonPersonalFoldersOptions = $selectVisibleActiveFoldersOptions = \"\";\n            if (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] === '1') {\n                $selectVisibleFoldersOptions = '<option value=\"0\">'.$LANG['root'].'</option>';\n            }\n\n            if ($_SESSION['user_admin'] === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n                && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n                $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n            }\n\n            if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n                $listFoldersLimitedKeys = @array_keys($_SESSION['list_folders_limited']);\n            } else {\n                $listFoldersLimitedKeys = array();\n            }\n            // list of items accessible but not in an allowed folder\n            if (isset($_SESSION['list_restricted_folders_for_items'])\n                && count($_SESSION['list_restricted_folders_for_items']) > 0) {\n                $listRestrictedFoldersForItemsKeys = @array_keys($_SESSION['list_restricted_folders_for_items']);\n            } else {\n                $listRestrictedFoldersForItemsKeys = array();\n            }\n\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $folders = $tree->getDescendants();\n\n            foreach ($folders as $folder) {\n                // Be sure that user can only see folders he/she is allowed to\n                if (!in_array($folder->id, $_SESSION['forbiden_pfs'])\n                    || in_array($folder->id, $_SESSION['groupes_visibles'])\n                    || in_array($folder->id, $listFoldersLimitedKeys)\n                    || in_array($folder->id, $listRestrictedFoldersForItemsKeys)\n                ) {\n                    $displayThisNode = false;\n                    $hide_node = false;\n                    $nbChildrenItems = 0;\n                    // Check if any allowed folder is part of the descendants of this node\n                    $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                    foreach ($nodeDescendants as $node) {\n                        // manage tree counters\n                        if (isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] === '1') {\n                            DB::query(\n                                \"SELECT * FROM \".prefix_table(\"items\").\"\n                                WHERE inactif=%i AND id_tree = %i\",\n                                0,\n                                $node\n                            );\n                            $nbChildrenItems += DB::count();\n                        }\n                        if (in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items']))\n                            || @in_array($node, $listFoldersLimitedKeys)\n                            || @in_array($node, $listRestrictedFoldersForItemsKeys)\n                        ) {\n                            $displayThisNode = true;\n                            //break;\n                        }\n                    }\n\n                    if ($displayThisNode === true) {\n                        $ident = \"\";\n                        for ($x = 1; $x < $folder->nlevel; $x++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n\n                        // resize title if necessary\n                        $fldTitle = str_replace(\"&\", \"&amp;\", $folder->title);\n\n                        // rename personal folder with user login\n                        if ($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1') {\n                            $fldTitle = $_SESSION['login'];\n                        }\n\n                        // build select for all visible folders\n                        if (in_array($folder->id, $_SESSION['groupes_visibles']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            if ($_SESSION['user_read_only'] === '0' || ($_SESSION['user_read_only'] === '1' && in_array($folder->id, $_SESSION['personal_visible_groups']))) {\n                                if (($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1')) { //\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" >'.$ident.$fldTitle.'</option>';\n                                } else {\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                                }\n                            } else {\n                                $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                            }\n                        } else {\n                            $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for non personal visible folders\n                        if (isset($_SESSION['all_non_personal_folders']) && in_array($folder->id, $_SESSION['all_non_personal_folders'])) {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for active folders (where user can do something)\n                        if (isset($_SESSION['list_restricted_folders_for_items']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                    }\n                }\n            }\n\n            $data = array(\n                'error' => \"\",\n                'selectVisibleFoldersOptions' => ($selectVisibleFoldersOptions),\n                'selectVisibleNonPersonalFoldersOptions' => ($selectVisibleNonPersonalFoldersOptions),\n                'selectVisibleActiveFoldersOptions' => ($selectVisibleActiveFoldersOptions),\n                'selectFullVisibleFoldersOptions' => str_replace('disabled=\"disabled\"', \"\", $selectVisibleFoldersOptions)\n            );\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Load item history\n        */\n        case \"load_item_history\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $id = noHTML(htmlspecialchars_decode($dataReceived['id']));\n\n            // get item info\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $id\n            );\n\n            // get item history\n            $history = '<table style=\"margin:0px; width:100%; border-collapse: collapse; background-color:#D4D5D5;\" cellspacing=\"0\" cellpadding=\"1\">';\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, l.raison_iv AS raison_iv,\n                u.login as login, u.avatar_thumb as avatar_thumb\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'].\" [\".$record['raison'].\"]\";\n                }\n\n                if (!empty($reason[1])\n                    || $record['action'] === \"at_copy\"\n                    || $record['action'] === \"at_creation\"\n                    || $record['action'] === \"at_manual\"\n                    || $record['action'] === \"at_modification\"\n                    || $record['action'] === \"at_delete\"\n                    || $record['action'] === \"at_restored\") {\n                    // Prepare avatar\n                    if (isset($record['avatar_thumb']) && !empty($record['avatar_thumb'])) {\n                        if (file_exists($SETTINGS['cpassman_dir'].'/includes/avatars/'.$record['avatar_thumb'])) {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$record['avatar_thumb'];\n                        } else {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                        }\n                    } else {\n                        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                    }\n\n                    $history .= '<tr style=\"\">'.\n                        '<td rowspan=\"2\" style=\"width:40px;\"><img src=\"'.$avatar.'\" style=\"border-radius:20px; height:35px;\"></td>'.\n                        '<td colspan=\"2\" style=\"font-size:11px;\"><i>'.$LANG['by'].' '.$record['login'].' '.$LANG['at'].' '.date($SETTINGS['date_format'].' '.$SETTINGS['time_format'], $record['date']).'</i></td></tr>'.\n                        '<tr style=\"border-bottom:3px solid #C9C9C9;\"><td style=\"width:100px;\"><b>'.$LANG[$record['action']].'</b></td>'.\n                        '<td style=\"\">'.(!empty($record['raison']) && $record['action'] !== \"at_creation\" ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.handleBackslash($reason[1]) : ($record['action'] === \"at_manual\" ? $reason[0] : $LANG[trim($reason[0])])) : '').'</td>'.\n                        '</tr>'.\n                        '<tr></tr>';\n                }\n            }\n            $history .= \"</table>\";\n\n            $data = array(\n                'error' => \"\",\n                'new_html' => $history\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        case \"suggest_item_change\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retrieve data in JSON format\n            $data_received = prepareExchangedData($post_data, \"decode\");\n\n            // prepare variables\n            $label = htmlspecialchars_decode($data_received['label']);\n            $pwd = htmlspecialchars_decode($data_received['pwd']);\n            $login = htmlspecialchars_decode($data_received['login']);\n            $email = htmlspecialchars_decode($data_received['email']);\n            $url = htmlspecialchars_decode($data_received['url']);\n            $folder = htmlspecialchars_decode($data_received['folder']);\n            $comment = htmlspecialchars_decode($data_received['comment']);\n            $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n            if (empty($pwd)) {\n                $encrypt['string'] = \"\";\n            } else {\n                $encrypt = cryption($pwd, \"\", \"encrypt\");\n            }\n\n            // query\n            DB::insert(\n                prefix_table(\"items_change\"),\n                array(\n                    'item_id' => $item_id,\n                    'label' => $label,\n                    'pw' => $encrypt['string'],\n                    'login' => $login,\n                    'email' => $email,\n                    'url' => $url,\n                    'description' => \"\",\n                    'comment' => $comment,\n                    'folder_id' => $folder,\n                    'user_id' => $_SESSION['user_id'],\n                    'timestamp' => time()\n                )\n            );\n            $newID = DB::insertId();\n\n            // get some info to add to the notification email\n            $resp_user = DB::queryfirstrow(\n                \"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\",\n                $_SESSION['user_id']\n            );\n            $resp_folder = DB::queryfirstrow(\n                \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $folder\n            );\n\n            // notify Managers\n            $rows = DB::query(\n                \"SELECT email\n                FROM \".prefix_table(\"users\").\"\n                WHERE `gestionnaire` = %i AND `email` IS NOT NULL\",\n                1\n            );\n            foreach ($rows as $record) {\n                sendEmail(\n                    $LANG['suggestion_notify_subject'],\n                    str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), $LANG['suggestion_notify_body']),\n                    $record['email']\n                );\n            }\n\n            echo '[ { \"error\" : \"\" } ]';\n            break;\n\n        case \"build_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Get list of users\n            $usersList = array();\n            $usersString = \"\";\n            $rows = DB::query(\"SELECT id,login,email FROM \".$pre.\"users ORDER BY login ASC\");\n            foreach ($rows as $record) {\n                $usersList[$record['login']] = array(\n                    \"id\" => $record['id'],\n                    \"login\" => $record['login'],\n                    \"email\" => $record['email'],\n                    );\n                $usersString .= $record['id'].\"#\".$record['login'].\";\";\n            }\n\n            $data = array(\n                'error' => \"\",\n                'list' => $usersString\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n            break;\n    }\n}\n// Build the QUERY in case of GET\nif (isset($_GET['type'])) {\n    switch ($_GET['type']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case \"autocomplete_tags\":\n            // Get a list off all existing TAGS\n            $listOfTags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE tag LIKE %ss GROUP BY tag\", $_GET['term']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"'.$record['tag'].'\"';\n                } else {\n                    $listOfTags .= ', \"'.$record['tag'].'\"';\n                }\n            }\n            echo \"[\".$listOfTags.\"]\";\n            break;\n    }\n}\n\n/*\n* FUNCTION\n* Identify if this group authorize creation of item without the complexit level reached\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        \"SELECT bloquer_creation, bloquer_modification, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data['personal_folder'] === '1') {\n        return array(\"bloquer_modification_complexite\" => 1, \"bloquer_creation_complexite\" => 1);\n    }\n\n    return array(\"bloquer_modification_complexite\" => $data['bloquer_modification'], \"bloquer_creation_complexite\" => $data['bloquer_creation']);\n}\n\n/*\n* FUNCTION\n* permits to identify what icon to display depending on file extension\n*/\nfunction fileFormatImage($ext)\n{\n    global $SETTINGS_EXT;\n    if (in_array($ext, $SETTINGS_EXT['office_file_ext'])) {\n        $image = \"file-word-o\";\n    } elseif ($ext === \"pdf\") {\n        $image = \"file-pdf-o\";\n    } elseif (in_array($ext, $SETTINGS_EXT['image_file_ext'])) {\n        $image = \"file-image-o\";\n    } elseif ($ext === \"txt\") {\n        $image = \"file-text-o\";\n    } else {\n        $image = \"file-o\";\n    }\n\n    return $image;\n}\n\n/*\n* FUNCTION\n* permits to remplace some specific characters in password\n*/\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n", "<?php\n/**\n *\n * @file          main.functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link\n */\n\n//define pbkdf2 iteration count\ndefine('ITCOUNT', '2072');\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} elseif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// load phpCrypt\nif (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n    require_once '../includes/libraries/phpcrypt/phpCrypt.php';\n    require_once '../includes/config/settings.php';\n} else {\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n}\n\n// Prepare PHPCrypt class calls\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare Encryption class calls\nuse \\Defuse\\Crypto\\Crypto;\nuse \\Defuse\\Crypto\\Exception as Ex;\n\n//Generate N# of random bits for use as salt\n/**\n * @param integer $size\n */\nfunction getBits($size)\n{\n    $str = '';\n    $var_x = $size + 10;\n    for ($var_i = 0; $var_i < $var_x; $var_i++) {\n        $str .= base_convert(mt_rand(1, 36), 10, 36);\n    }\n    return substr($str, 0, $size);\n}\n\n//generate pbkdf2 compliant hash\nfunction strHashPbkdf2($var_p, $var_s, $var_c, $var_kl, $var_a = 'sha256', $var_st = 0)\n{\n    $var_kb = $var_st + $var_kl; // Key blocks to compute\n    $var_dk = ''; // Derived key\n\n    for ($block = 1; $block <= $var_kb; $block++) { // Create key\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true); // Initial hash for this block\n        for ($var_i = 1; $var_i < $var_c; $var_i++) { // Perform block iterations\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true)); // XOR each iterate\n        }\n        $var_dk .= $var_ib; // Append iterated block\n    }\n    return substr($var_dk, $var_st, $var_kl); // Return derived key of correct length\n}\n\n/**\n * stringUtf8Decode()\n *\n * utf8_decode\n */\nfunction stringUtf8Decode($string)\n{\n    return str_replace(\" \", \"+\", utf8_decode($string));\n}\n\n/**\n * encryptOld()\n *\n * crypt a string\n * @param string $text\n */\nfunction encryptOld($text, $personalSalt = \"\")\n{\n    if (empty($personalSalt) === false) {\n        return trim(\n            base64_encode(\n                mcrypt_encrypt(\n                    MCRYPT_RIJNDAEL_256,\n                    $personalSalt,\n                    $text,\n                    MCRYPT_MODE_ECB,\n                    mcrypt_create_iv(\n                        mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                        MCRYPT_RAND\n                    )\n                )\n            )\n        );\n    }\n\n    // If $personalSalt is not empty\n    return trim(\n        base64_encode(\n            mcrypt_encrypt(\n                MCRYPT_RIJNDAEL_256,\n                SALT,\n                $text,\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        )\n    );\n}\n\n/**\n * decryptOld()\n *\n * decrypt a crypted string\n */\nfunction decryptOld($text, $personalSalt = \"\")\n{\n    if (!empty($personalSalt)) {\n        return trim(\n            mcrypt_decrypt(\n                MCRYPT_RIJNDAEL_256,\n                $personalSalt,\n                base64_decode($text),\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        );\n    }\n\n    // No personal SK\n    return trim(\n        mcrypt_decrypt(\n            MCRYPT_RIJNDAEL_256,\n            SALT,\n            base64_decode($text),\n            MCRYPT_MODE_ECB,\n            mcrypt_create_iv(\n                mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                MCRYPT_RAND\n            )\n        )\n    );\n}\n\n/**\n * encrypt()\n *\n * crypt a string\n * @param string $decrypted\n */\nfunction encrypt($decrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n\n    //set our salt to a variable\n    // Get 64 random bits for the salt for pbkdf2\n    $pbkdf2Salt = getBits(64);\n    // generate a pbkdf2 key to use for the encryption.\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Build $init_vect and $ivBase64.  We use a block size of 256 bits (AES compliant)\n    // and CTR mode.  (Note: ECB mode is inadequate as IV is not used.)\n    $init_vect = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, 'ctr'), MCRYPT_RAND);\n\n    //base64 trim\n    if (strlen($ivBase64 = rtrim(base64_encode($init_vect), '=')) != 43) {\n        return false;\n    }\n    // Encrypt $decrypted\n    $encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $decrypted, 'ctr', $init_vect);\n    // MAC the encrypted text\n    $mac = hash_hmac('sha256', $encrypted, $staticSalt);\n    // We're done!\n    return base64_encode($ivBase64.$encrypted.$mac.$pbkdf2Salt);\n}\n\n/**\n * decrypt()\n *\n * decrypt a crypted string\n */\nfunction decrypt($encrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n    //base64 decode the entire payload\n    $encrypted = base64_decode($encrypted);\n    // get the salt\n    $pbkdf2Salt = substr($encrypted, -64);\n    //remove the salt from the string\n    $encrypted = substr($encrypted, 0, -64);\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Retrieve $init_vect which is the first 22 characters plus ==, base64_decoded.\n    $init_vect = base64_decode(substr($encrypted, 0, 43).'==');\n    // Remove $init_vect from $encrypted.\n    $encrypted = substr($encrypted, 43);\n    // Retrieve $mac which is the last 64 characters of $encrypted.\n    $mac = substr($encrypted, -64);\n    // Remove the last 64 chars from encrypted (remove MAC)\n    $encrypted = substr($encrypted, 0, -64);\n    //verify the sha256hmac from the encrypted data before even trying to decrypt it\n    if (hash_hmac('sha256', $encrypted, $staticSalt) != $mac) {\n        return false;\n    }\n    // Decrypt the data.\n    $decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, 'ctr', $init_vect), \"\\0\\4\");\n    // Yay!\n    return $decrypted;\n}\n\n\n/**\n * genHash()\n *\n * Generate a hash for user login\n * @param string $password\n */\nfunction bCrypt($password, $cost)\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; $i++) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n    return crypt($password, $salt);\n}\n\nfunction cryption_before_defuse($message, $saltkey, $init_vect, $type = null, $scope = \"public\")\n{\n    if (DEFUSE_ENCRYPTION === true) {\n        if ($scope === \"perso\") {\n            return defuse_crypto(\n                $message,\n                $saltkey,\n                $type\n            );\n        } else {\n            return defuse_crypto(\n                $message,\n                file_get_contents(SECUREPATH.\"/teampass-seckey.txt\"),\n                $type\n            );\n        }\n    } else {\n        return cryption_phpCrypt($message, $saltkey, $init_vect, $type);\n    }\n}\n\n/*\n * cryption() - Encrypt and decrypt string based upon phpCrypt library\n *\n * Using AES_128 and mode CBC\n *\n * $key and $init_vect have to be given in hex format\n */\nfunction cryption_phpCrypt($string, $key, $init_vect, $type)\n{\n    // manage key origin\n    if (null != SALT && $key != SALT) {\n        // check key (AES-128 requires a 16 bytes length key)\n        if (strlen($key) < 16) {\n            for ($inc = strlen($key) + 1; $inc <= 16; $inc++) {\n                $key .= chr(0);\n            }\n        } elseif (strlen($key) > 16) {\n            $key = substr($key, 16);\n        }\n    }\n\n    // load crypt\n    $crypt = new PHP_Crypt($key, PHP_Crypt::CIPHER_AES_128, PHP_Crypt::MODE_CBC);\n\n    if ($type == \"encrypt\") {\n        // generate IV and encrypt\n        $init_vect = $crypt->createIV();\n        $encrypt = $crypt->encrypt($string);\n        // return\n        return array(\n            \"string\" => bin2hex($encrypt),\n            \"iv\" => bin2hex($init_vect),\n            \"error\" => empty($encrypt) ? \"ERR_ENCRYPTION_NOT_CORRECT\" : \"\"\n        );\n    } elseif ($type == \"decrypt\") {\n        // case if IV is empty\n        if (empty($init_vect)) {\n                    return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // convert\n        try {\n            $string = testHex2Bin(trim($string));\n            $init_vect = testHex2Bin($init_vect);\n        } catch (Exception $e) {\n            return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // load IV\n        $crypt->IV($init_vect);\n        // decrypt\n        $decrypt = $crypt->decrypt($string);\n        // return\n        return array(\n            'string' => str_replace(chr(0), \"\", $decrypt),\n            'error' => \"\"\n        );\n    }\n}\n\nfunction testHex2Bin($val)\n{\n    if (!@hex2bin($val)) {\n        throw new Exception(\"ERROR\");\n    }\n    return hex2bin($val);\n}\n\n/**\n * @param string $ascii_key\n * @param string $type\n */\nfunction cryption($message, $ascii_key, $type) //defuse_crypto\n{\n    global $SETTINGS;\n\n    // load PhpEncryption library\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/';\n    }\n\n    require_once $path.'Crypto.php';\n    require_once $path.'Encoding.php';\n    require_once $path.'DerivedKeys.php';\n    require_once $path.'Key.php';\n    require_once $path.'KeyOrPassword.php';\n    require_once $path.'File.php';\n    require_once $path.'RuntimeTests.php';\n    require_once $path.'KeyProtectedByPassword.php';\n    require_once $path.'Core.php';\n\n    // init\n    $err = '';\n    if (empty($ascii_key)) {\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n    }\n\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        if ($type === \"encrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === \"decrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = \"an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : \"\",\n        'error' => $err\n    );\n}\n\nfunction defuse_generate_key()\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\nfunction defuse_generate_personal_key($psk)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    $protected_key_encoded = $protected_key->saveToAsciiSafeString();\n\n    return $protected_key_encoded; // save this in user table\n}\n\n/**\n * @param string $psk\n */\nfunction defuse_validate_personal_key($psk, $protected_key_encoded)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    try {\n        $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return \"Error - Major issue as the encryption is broken.\";\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return \"Error - The saltkey is not the correct one.\";\n    }\n\n    return $user_key_encoded; // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted\n * @param  [type] $value Encrypted string\n * @return [type]        Decrypted string\n */\nfunction defuse_return_decrypted($value)\n{\n    if (substr($value, 0, 3) === \"def\") {\n        $value = cryption($value, \"\", \"decrypt\")['string'];\n    }\n    return $value;\n}\n\n/**\n * trimElement()\n *\n * trim a string depending on a specific string\n * @param string $element\n * @return string\n */\nfunction trimElement($chaine, $element)\n{\n    if (!empty($chaine)) {\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) == $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) == $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n    return $chaine;\n}\n\n/**\n * cleanString()\n *\n * permits to suppress all \"special\" characters from string\n */\nfunction cleanString($string, $special = false)\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = array();\n    for ($i = 0; $i <= 31; $i++) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, \"<br />\");\n    if ($special == \"1\") {\n        $tabSpecialChar = array_merge($tabSpecialChar, array(\"</li>\", \"<ul>\", \"<ol>\"));\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\nfunction db_error_handler($params)\n{\n    echo \"Error: \".$params['error'].\"<br>\\n\";\n    echo \"Query: \".$params['query'].\"<br>\\n\";\n    throw new Exception(\"Error - Query\", 1);\n}\n\n/**\n * [identifyUserRights description]\n * @param  string $groupesVisiblesUser  [description]\n * @param  string $groupesInterditsUser [description]\n * @param  string $isAdmin              [description]\n * @param  string $idFonctions          [description]\n * @return string                       [description]\n */\nfunction identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmin, $idFonctions)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR\n    if ($isAdmin == 1) {\n        $groupesVisibles = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['list_restricted_folders_for_items'] = array();\n        $_SESSION['list_folders_editable_by_role'] = array();\n        $_SESSION['list_folders_limited'] = array();\n        $_SESSION['groupes_visibles_list'] = \"\";\n        $_SESSION['list_folders_limited'] = \"\";\n        $rows = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\", 0);\n        foreach ($rows as $record) {\n            array_push($groupesVisibles, $record['id']);\n        }\n        $_SESSION['groupes_visibles'] = $groupesVisibles;\n        $_SESSION['all_non_personal_folders'] = $groupesVisibles;\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n        $where = new WhereClause('and'); // create a WHERE statement of pieces joined by ANDs\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n        // Get ID of personal folder\n        $persfld = DB::queryfirstrow(\n            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\",\n            $_SESSION['user_id']\n        );\n        if (!empty($persfld['id'])) {\n            if (!in_array($persfld['id'], $_SESSION['groupes_visibles'])) {\n                array_push($_SESSION['groupes_visibles'], $persfld['id']);\n                array_push($_SESSION['personal_visible_groups'], $persfld['id']);\n                // get all descendants\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                $tree->rebuild();\n                $tst = $tree->getDescendants($persfld['id']);\n                foreach ($tst as $t) {\n                    array_push($_SESSION['groupes_visibles'], $t->id);\n                    array_push($_SESSION['personal_visible_groups'], $t->id);\n                }\n            }\n        }\n\n        // get complete list of ROLES\n        $tmp = explode(\";\", $idFonctions);\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n            ORDER BY title ASC\"\n        );\n        foreach ($rows as $record) {\n            if (!empty($record['id']) && !in_array($record['id'], $tmp)) {\n                array_push($tmp, $record['id']);\n            }\n        }\n        $_SESSION['fonction_id'] = implode(\";\", $tmp);\n\n        $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n        $_SESSION['is_admin'] = $isAdmin;\n        // Check if admin has created Folders and Roles\n        DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::query(\"SELECT * FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    } else {\n        // init\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['fonction_id'] = $idFonctions;\n        $groupesInterdits = array();\n        if (!is_array($groupesInterditsUser)) {\n            $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, \";\"));\n        }\n        if (!empty($groupesInterditsUser) && count($groupesInterditsUser) > 0) {\n            $groupesInterdits = $groupesInterditsUser;\n        }\n        $_SESSION['is_admin'] = $isAdmin;\n        $fonctionsAssociees = explode(';', trimElement($idFonctions, \";\"));\n\n        $listAllowedFolders = $listFoldersLimited = $listFoldersEditableByRole = $listRestrictedFoldersForItems = $listReadOnlyFolders = array();\n\n        // rechercher tous les groupes visibles en fonction des roles de l'utilisateur\n        foreach ($fonctionsAssociees as $roleId) {\n            if (!empty($roleId)) {\n                // Get allowed folders for each Role\n                $rows = DB::query(\"SELECT folder_id FROM \".prefix_table(\"roles_values\").\" WHERE role_id=%i\", $roleId);\n\n                if (DB::count() > 0) {\n                    $tmp = DB::queryfirstrow(\"SELECT allow_pw_change FROM \".prefix_table(\"roles_title\").\" WHERE id = %i\", $roleId);\n                    foreach ($rows as $record) {\n                        if (isset($record['folder_id']) && !in_array($record['folder_id'], $listAllowedFolders)) {\n                            array_push($listAllowedFolders, $record['folder_id']);\n                        }\n                        // Check if this group is allowed to modify any pw in allowed folders\n                        if ($tmp['allow_pw_change'] == 1 && !in_array($record['folder_id'], $listFoldersEditableByRole)) {\n                            array_push($listFoldersEditableByRole, $record['folder_id']);\n                        }\n                    }\n                    // Check for the users roles if some specific rights exist on items\n                    $rows = DB::query(\n                        \"SELECT i.id_tree, r.item_id\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (r.item_id=i.id)\n                        WHERE r.role_id=%i\n                        ORDER BY i.id_tree ASC\",\n                        $roleId\n                    );\n                    $inc = 0;\n                    foreach ($rows as $record) {\n                        if (isset($record['id_tree'])) {\n                            $listFoldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n                            $inc++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Does this user is allowed to see other items\n        $inc = 0;\n        $rows = DB::query(\n            \"SELECT id, id_tree FROM \".prefix_table(\"items\").\"\n            WHERE restricted_to LIKE %ss AND inactif=%s\",\n            $_SESSION['user_id'].';',\n            '0'\n        );\n        foreach ($rows as $record) {\n            $listRestrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            $inc++;\n        }\n        // => Build final lists\n        // Clean arrays\n        $listAllowedFolders = array_unique($listAllowedFolders);\n        $groupesVisiblesUser = explode(';', trimElement($groupesVisiblesUser, \";\"));\n        // Add user allowed folders\n        $allowedFoldersTmp = array_unique(\n            array_merge($listAllowedFolders, $groupesVisiblesUser)\n        );\n        // Exclude from allowed folders all the specific user forbidden folders\n        $allowedFolders = array();\n        foreach ($allowedFoldersTmp as $ident) {\n            if (!in_array($ident, $groupesInterditsUser) && !empty($ident)) {\n                array_push($allowedFolders, $ident);\n            }\n        }\n\n        // Clean array\n        $listAllowedFolders = array_filter(array_unique($allowedFolders));\n\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n\n        $where = new WhereClause('and');\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n\n        $persoFlds = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE %l\", $where);\n        foreach ($persoFlds as $persoFldId) {\n            array_push($_SESSION['forbiden_pfs'], $persoFldId['id']);\n        }\n        // Get IDs of personal folders\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $persoFld = DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $_SESSION['user_id']);\n            if (!empty($persoFld['id'])) {\n                if (!in_array($persoFld['id'], $listAllowedFolders)) {\n                    array_push($_SESSION['personal_folders'], $persoFld['id']);\n                    // get all descendants\n                    $ids = $tree->getDescendants($persoFld['id'], true, false);\n                    foreach ($ids as $ident) {\n                        array_push($listAllowedFolders, $ident->id);\n                        array_push($_SESSION['personal_visible_groups'], $ident->id);\n                        array_push($_SESSION['personal_folders'], $ident->id);\n                    }\n                }\n            }\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W or N in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, array_unique(array_merge($listReadOnlyFolders, $_SESSION['personal_folders'])))) {   //\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && in_array($folderId, $groupesVisiblesUser) === false) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        } else {\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, $listReadOnlyFolders)) {\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && !in_array($folderId, $groupesVisiblesUser)) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        }\n\n        // check if change proposals on User's items\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n            DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"items_change\").\" AS c\n                LEFT JOIN \".prefix_table(\"log_items\").\" AS i ON (c.item_id = i.id_item)\n                WHERE i.action = %s AND i.id_user = %i\",\n                \"at_creation\",\n                $_SESSION['user_id']\n            );\n            $_SESSION['nb_item_change_proposals'] = DB::count();\n        } else {\n            $_SESSION['nb_item_change_proposals'] = 0;\n        }\n\n        $_SESSION['all_non_personal_folders'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles_list'] = implode(',', $listAllowedFolders);\n        $_SESSION['personal_visible_groups_list'] = implode(',', $_SESSION['personal_visible_groups']);\n        $_SESSION['read_only_folders'] = $listReadOnlyFolders;\n        $_SESSION['no_access_folders'] = $groupesInterdits;\n\n        $_SESSION['list_folders_limited'] = $listFoldersLimited;\n        $_SESSION['list_folders_editable_by_role'] = $listFoldersEditableByRole;\n        $_SESSION['list_restricted_folders_for_items'] = $listRestrictedFoldersForItems;\n        // Folders and Roles numbers\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    }\n\n    // update user's timestamp\n    DB::update(\n        prefix_table('users'),\n        array(\n            'timestamp' => time()\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n}\n\n/**\n * updateCacheTable()\n *\n * Update the CACHE table\n * @param string $action\n */\nfunction updateCacheTable($action, $ident = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Rebuild full cache table\n    if ($action === \"reload\") {\n        // truncate table\n        DB::query(\"TRUNCATE TABLE \".prefix_table(\"cache\"));\n\n        // reload date\n        $rows = DB::query(\n            \"SELECT *\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            AND l.action = %s\n            AND i.inactif = %i\",\n            'at_creation',\n            0\n        );\n        foreach ($rows as $record) {\n            // Get all TAGS\n            $tags = \"\";\n            $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $record['id']);\n            foreach ($itemTags as $itemTag) {\n                if (!empty($itemTag['tag'])) {\n                    $tags .= $itemTag['tag'].\" \";\n                }\n            }\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\"SELECT renewal_period FROM \".prefix_table('nested_tree').\" WHERE id=%i\", $record['id_tree']);\n\n            // form id_tree to full foldername\n            $folder = \"\";\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                    $elem->title = $_SESSION['login'];\n                }\n                if (empty($folder)) {\n                    $folder = stripslashes($elem->title);\n                } else {\n                    $folder .= \" \u00bb \".stripslashes($elem->title);\n                }\n            }\n            // store data\n            DB::insert(\n                prefix_table('cache'),\n                array(\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => isset($record['description']) ? $record['description'] : \"\",\n                    'url' => (isset($record['url']) && !empty($record['url'])) ? $record['url'] : \"0\",\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => (isset($record['restricted_to']) && !empty($record['restricted_to'])) ? $record['restricted_to'] : \"0\",\n                    'login' => isset($record['login']) ? $record['login'] : \"\",\n                    'folder' => $folder,\n                    'author' => $record['id_user'],\n                    'renewal_period' => isset($resNT['renewal_period']) ? $resNT['renewal_period'] : \"0\",\n                    'timestamp' => $record['date']\n                    )\n            );\n        }\n        // UPDATE an item\n    } elseif ($action === \"update_value\") {\n        // get new value from db\n        $data = DB::queryfirstrow(\n            \"SELECT label, description, id_tree, perso, restricted_to, login, url\n            FROM \".prefix_table('items').\"\n            WHERE id=%i\",\n            $ident\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::update(\n            prefix_table('cache'),\n            array(\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => $tags,\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => $data['perso'],\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"0\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                ),\n            \"id = %i\",\n            $ident\n        );\n        // ADD an item\n    } elseif ($action === \"add_value\") {\n        // get new value from db\n        $data = DB::queryFirstRow(\n            \"SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            WHERE i.id = %i\n            AND l.action = %s\",\n            $ident,\n            'at_creation'\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id = %i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::insert(\n            prefix_table('cache'),\n            array(\n                'id' => $data['id'],\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => (isset($tags) && !empty($tags)) ? $tags : \"None\",\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => (isset($data['perso']) && !empty($data['perso']) && $data['perso'] !== \"None\") ? $data['perso'] : \"0\",\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"None\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                'timestamp' => $data['date']\n            )\n        );\n\n        // DELETE an item\n    } elseif ($action === \"delete_value\") {\n        DB::delete(prefix_table('cache'), \"id = %i\", $ident);\n    }\n}\n\n/*\n*\n*/\nfunction getStatisticsData()\n{\n    global $SETTINGS;\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        0\n    );\n    $counter_folders = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        1\n    );\n    $counter_folders_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        0\n    );\n    $counter_items = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        1\n    );\n    $counter_items_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\"\"\n    );\n    $counter_users = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE admin = %i\",\n        1\n    );\n    $admins = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE gestionnaire = %i\",\n        1\n    );\n    $managers = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE read_only = %i\",\n        1\n    );\n    $readOnly = DB::count();\n\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        \"SELECT name FROM \".prefix_table(\"languages\")\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            \"SELECT * FROM \".prefix_table(\"users\").\" WHERE user_language = %s\",\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        \"SELECT user_ip FROM \".prefix_table(\"users\")\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] = $usedIp[$ip['user_ip']] + 1;\n        } elseif (!empty($ip['user_ip']) && $ip['user_ip'] !== \"none\") {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return array(\n        \"error\" => \"\",\n        \"stat_phpversion\" => phpversion(),\n        \"stat_folders\" => $counter_folders,\n        \"stat_folders_shared\" => intval($counter_folders) - intval($counter_folders_perso),\n        \"stat_items\" => $counter_items,\n        \"stat_items_shared\" => intval($counter_items) - intval($counter_items_perso),\n        \"stat_users\" => $counter_users,\n        \"stat_admins\" => $admins,\n        \"stat_managers\" => $managers,\n        \"stat_ro\" => $readOnly,\n        \"stat_kb\" => $SETTINGS['enable_kb'],\n        \"stat_pf\" => $SETTINGS['enable_pf_feature'],\n        \"stat_fav\" => $SETTINGS['enable_favourites'],\n        \"stat_teampassversion\" => $SETTINGS['cpassman_version'],\n        \"stat_ldap\" => $SETTINGS['ldap_mode'],\n        \"stat_agses\" => $SETTINGS['agses_authentication_enabled'],\n        \"stat_duo\" => $SETTINGS['duo'],\n        \"stat_suggestion\" => $SETTINGS['enable_suggestion'],\n        \"stat_api\" => $SETTINGS['api'],\n        \"stat_customfields\" => $SETTINGS['item_extra_fields'],\n        \"stat_syslog\" => $SETTINGS['syslog_enable'],\n        \"stat_2fa\" => $SETTINGS['google_authentication'],\n        \"stat_stricthttps\" => $SETTINGS['enable_sts'],\n        \"stat_mysqlversion\" => DB::serverVersion(),\n        \"stat_languages\" => $usedLang,\n        \"stat_country\" => $usedIp\n    );\n}\n\n/**\n * sendEmail()\n *\n * @return\n */\nfunction sendEmail($subject, $textMail, $email, $textMailAlt = \"\")\n{\n    global $LANG;\n    global $SETTINGS;\n\n    // CAse where email not defined\n    if ($email === \"none\") {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n\n    include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n    //load library\n    $user_language = isset($_SESSION['user_language']) ? $_SESSION['user_language'] : \"english\";\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$user_language.'.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Email/Phpmailer/PHPMailerAutoload.php';\n\n    // load PHPMailer\n    $mail = new PHPMailer();\n\n    // send to user\n    $mail->setLanguage(\"en\", \"../includes/libraries/Email/Phpmailer/language/\");\n    $mail->SMTPDebug = 0; //value 1 can be used to debug\n    $mail->Port = $SETTINGS['email_port']; //COULD BE USED\n    $mail->CharSet = \"utf-8\";\n    if ($SETTINGS['email_security'] === \"tls\" || $SETTINGS['email_security'] === \"ssl\") {\n        $mail->SMTPSecure = $SETTINGS['email_security'];\n    }\n    $mail->isSmtp(); // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server']; // SMTP servers\n    $mail->SMTPAuth = $SETTINGS['email_smtp_auth'] == '1' ? true : false; // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username']; // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd']; // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    $mail->addAddress($email); //Destinataire\n    $mail->WordWrap = 80; // set word wrap\n    $mail->isHtml(true); // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $textMail;\n    $mail->AltBody = $textMailAlt;\n    // send email\n    if (!$mail->send()) {\n        return '\"error\":\"error_mail_not_send\" , \"message\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $mail->ErrorInfo).'\"';\n    } else {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n}\n\n/**\n * generateKey()\n *\n * @return\n */\nfunction generateKey()\n{\n    return substr(md5(rand().rand()), 0, 15);\n}\n\n/**\n * dateToStamp()\n *\n * @return\n */\nfunction dateToStamp($date)\n{\n    global $SETTINGS;\n\n    $date = date_parse_from_format($SETTINGS['date_format'], $date);\n    if ($date['warning_count'] == 0 && $date['error_count'] == 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    } else {\n        return false;\n    }\n}\n\nfunction isDate($date)\n{\n    return (strtotime($date) !== false);\n}\n\n/**\n * isUTF8()\n *\n * @return integer is the string in UTF8 format.\n */\n\nfunction isUTF8($string)\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/*\n* FUNCTION\n* permits to prepare data to be exchanged\n*/\n/**\n * @param string $type\n */\nfunction prepareExchangedData($data, $type)\n{\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n    //Load AES\n    $aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n    $aes->register();\n\n    if ($type == \"encode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            );\n        } else {\n            return Encryption\\Crypt\\aesctr::encrypt(\n                json_encode(\n                    $data,\n                    JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n                ),\n                $_SESSION['key'],\n                256\n            );\n        }\n    } elseif ($type == \"decode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_decode(\n                $data,\n                true\n            );\n        } else {\n            return json_decode(\n                Encryption\\Crypt\\aesctr::decrypt(\n                    $data,\n                    $_SESSION['key'],\n                    256\n                ),\n                true\n            );\n        }\n    }\n}\n\nfunction make_thumb($src, $dest, $desired_width)\n{\n    /* read the source image */\n    $source_image = imagecreatefrompng($src);\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = floor($height * ($desired_width / $width));\n\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/*\n** check table prefix in SQL query\n*/\n/**\n * @param string $table\n */\nfunction prefix_table($table)\n{\n    global $pre;\n    $safeTable = htmlspecialchars($pre.$table);\n    if (!empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    } else {\n        // stop error no table\n        return \"table_not_exists\";\n    }\n}\n\n/*\n * Creates a KEY using PasswordLib\n */\nfunction GenerateCryptKey($size = \"\", $secure = false, $numerals = false, $capitalize = false, $ambiguous = false, $symbols = false)\n{\n    // load library\n    $pwgen = new SplClassLoader('Encryption\\PwGen', '../includes/libraries');\n    $pwgen->register();\n    $pwgen = new Encryption\\PwGen\\pwgen();\n\n    // init\n    if (!empty($size)) {\n        $pwgen->setLength($size);\n    }\n    if (!empty($secure)) {\n        $pwgen->setSecure($secure);\n    }\n    if (!empty($numerals)) {\n        $pwgen->setNumerals($numerals);\n    }\n    if (!empty($capitalize)) {\n        $pwgen->setCapitalize($capitalize);\n    }\n    if (!empty($ambiguous)) {\n        $pwgen->setAmbiguous($ambiguous);\n    }\n    if (!empty($symbols)) {\n        $pwgen->setSymbols($symbols);\n    }\n\n    // generate and send back\n    return $pwgen->generate();\n}\n\n/*\n* Send sysLOG message\n* @param string $message\n* @param string $host\n*/\nfunction send_syslog($message, $host, $port, $component = \"teampass\")\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = \"<123>\".date('M d H:i:s ').$component.\": \".$message;\n    socket_sendto($sock, $syslog_message, strlen($syslog_message), 0, $host, $port);\n    socket_close($sock);\n}\n\n\n\n/**\n * logEvents()\n *\n * permits to log events into DB\n * @param string $type\n * @param string $label\n * @param string $field_1\n */\nfunction logEvents($type, $label, $who, $login = \"\", $field_1 = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    if (empty($who)) {\n        $who = get_client_ip_server();\n    }\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    DB::insert(\n        prefix_table(\"log_system\"),\n        array(\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? \"\" : $field_1\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        if ($type == \"user_mngt\") {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" to the user \".$field_1.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        } else {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        }\n    }\n}\n\n/**\n * @param string $item\n * @param string $action\n */\nfunction logItems($ident, $item, $id_user, $action, $login = \"\", $raison = null, $raison_iv = null, $encryption_type = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n    DB::insert(\n        prefix_table(\"log_items\"),\n        array(\n            'id_item' => $ident,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => $raison_iv,\n            'encryption_type' => $encryption_type\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        send_syslog(\n            \"The Item \".$item.\" was \".$action.\" by \".$login.\" \".$raison,\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            \"teampass\"\n        );\n    }\n}\n\n/*\n* Function to get the client ip address\n */\nfunction get_client_ip_server()\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n            $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n            $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS\n *\n * @param string $input The input string\n * @param string $encoding Which character encoding are we using?\n * @return string\n */\nfunction noHTML($input, $encoding = 'UTF-8')\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * handleConfigFile()\n *\n * permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n */\nfunction handleConfigFile($action, $field = null, $value = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    $tp_config_file = \"../includes/config/tp.config.php\";\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    if (!file_exists($tp_config_file) || $action == \"rebuild\") {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (!copy($tp_config_file, $tp_config_file.'.'.date(\"Y_m_d_His\", time()))) {\n                return \"ERROR: Could not copy file '\".$tp_config_file.\"'\";\n            }\n        }\n\n        // regenerate\n        $data = array();\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s\",\n            \"admin\"\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\".$record['intitule'].\"' => '\".$record['valeur'].\"',\\n\");\n        }\n        array_push($data, \");\");\n        $data = array_unique($data);\n    } elseif ($action == \"update\" && !empty($field)) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, \");\")) {\n                break;\n            }\n\n            //\n            if (stristr($line, \"'\".$field.\"' => '\")) {\n                $data[$inc] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n                $bFound = true;\n                break;\n            }\n            $inc++;\n        }\n        if ($bFound === false) {\n            $data[($inc - 1)] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', isset($data) ? $data : array()));\n\n    return true;\n}\n\n/*\n** Permits to replace &#92; to permit correct display\n*/\n/**\n * @param string $input\n */\nfunction handleBackslash($input)\n{\n    return str_replace(\"&amp;#92;\", \"&#92;\", $input);\n}\n\n/*\n** Permits to loas settings\n*/\nfunction loadSettings()\n{\n    global $SETTINGS;\n\n    /* LOAD CPASSMAN SETTINGS */\n    if (!isset($SETTINGS['loaded']) || $SETTINGS['loaded'] != 1) {\n        $SETTINGS['duplicate_folder'] = 0; //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0; //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5; //by default, this value is set to 5;\n        $settings = array();\n\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s_type OR type=%s_type2\",\n            array(\n                'type' => \"admin\",\n                'type2' => \"settings\"\n            )\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] == 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/*\n** check if folder has custom fields.\n** Ensure that target one also has same custom fields\n*/\nfunction checkCFconsistency($source_id, $target_id)\n{\n    $source_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/*\n*\n*/\nfunction encrypt_or_decrypt_file($filename_to_rework, $filename_status)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // Include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    // Get file info in DB\n    $fileInfo = DB::queryfirstrow(\n        \"SELECT id FROM \".prefix_table(\"files\").\" WHERE file = %s\",\n        filter_var($filename_to_rework, FILTER_SANITIZE_STRING)\n    );\n    if (empty($fileInfo['id']) === false) {\n        // Load PhpEncryption library\n        $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        if (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"1\" &&\n            isset($filename_status)\n            && ($filename_status === \"clear\"\n                || $filename_status === \"0\")\n        ) {\n            // File needs to be encrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // Make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // Do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::encryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'encrypted'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        } elseif (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"0\"\n            && isset($filename_status)\n            && $filename_status === \"encrypted\"\n        ) {\n            // file needs to be decrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::decryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'clear'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        }\n    }\n\n    // Exit\n    return false;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse\n * @param  string $type        can be either encrypt or decrypt\n * @param  string $source_file path to source file\n * @param  string $target_file path to target file\n * @return string              'true' is success or error message\n */\nfunction prepareFileWithDefuse($type, $source_file, $target_file, $password = '')\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // Protect against bad inputs\n    if (is_array($source_file) ||is_array($target_file)) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n    if (empty($password) === true) {\n    /*\n    File encryption/decryption is done with the SALTKEY\n     */\n\n        // get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // Now perform action on the file\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"decryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"encryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    } else {\n    /*\n    File encryption/decryption is done with special password and not the SALTKEY\n     */\n\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    }\n\n    // return error\n    if (empty($err) === false) {\n        return $err;\n    } else {\n        return true;\n    }\n}\n\n/*\n* NOT TO BE USED\n*/\nfunction debugTeampass($text)\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    fputs($debugFile, $text);\n    fclose($debugFile);\n}\n\n\n/**\n * DELETE the file with expected command depending on server type\n * @param  string $file Path to file\n * @return              Nothing\n */\nfunction fileDelete($file)\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/*\n* Permits to extract the file extension\n*/\nfunction getFileExtension($file)\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * array_map\n * @param  [type] $func [description]\n * @param  [type] $arr  [description]\n * @return [type]       [description]\n */\nfunction array_map_r($func, $arr)\n{\n    $newArr = array();\n\n    foreach ($arr as $key => $value) {\n        $newArr[ $key ] = (is_array($value) ? array_map_r($func, $value) : ( is_array($func) ? call_user_func_array($func, $value) : $func( $value )));\n    }\n\n    return $newArr;\n}\n\n/**\n * Permits to clean and sanitize text to be displayed\n * @param  string $text text to clean\n * @param  string $type what clean to perform\n * @return string       text cleaned up\n */\nfunction cleanText($string, $type = \"\")\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if ($type === \"css\") {\n        // Escape text and quotes in UTF8 format\n        return htmlentities($string, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n    } elseif ($type === \"html\" || empty($type)) {\n        // Html cleaner\n        return $antiXss->xss_clean($string);\n    }\n}\n\n/**\n * Performs chmod operation on subfolders\n * @param  string  $dir             Parent folder\n * @param  integer $dirPermissions  New permission on folders\n * @param  integer $filePermissions New permission on files\n * @return boolean                  Success/Failure\n */\nfunction chmodRecursive($dir, $dirPermissions, $filePermissions)\n{\n    $pointer_dir = opendir($dir);\n    $res = true;\n    while ($file = readdir($pointer_dir)) {\n        if (($file == \".\") || ($file == \"..\")) {\n            continue;\n        }\n\n        $fullPath = $dir.\"/\".$file;\n\n        if (is_dir($fullPath)) {\n            if ($res = @chmod($fullPath, $dirPermissions)) {\n                $res = @chmodRecursive($fullPath, $dirPermissions, $filePermissions);\n            }\n        } else {\n            $res = chmod($fullPath, $filePermissions);\n        }\n        if (!$res) {\n            closedir($pointer_dir);\n            return false;\n        }\n    }\n    closedir($pointer_dir);\n    if (is_dir($dir) && $res) {\n        $res = @chmod($dir, $dirPermissions);\n    }\n\n    return $res;\n}\n\n/**\n * Check if user can access to this item\n * @param $item_id\n */\nfunction accessToItemIsGranted($item_id)\n{\n    // Load item data\n    $data = DB::queryFirstRow(\n        \"SELECT id_tree\n        FROM \".prefix_table(\"items\").\"\n        WHERE id = %i\",\n        $item_id\n    );\n//echo in_array($item_id, $_SESSION['list_restricted_folders_for_items'][$data['id_tree']]).\" - \".$item_id.\" - \".$data['id_tree'].\" - \";\nprint_r($_SESSION['list_folders_editable_by_role']);\n    // Check if user can access this folder\n    if (!in_array($data['id_tree'], $_SESSION['groupes_visibles'])) {\n        // Now check if this folder is restricted to user\n        if (isset($_SESSION['list_restricted_folders_for_items'][$data['id_tree']])\n            && !in_array($item_id, $_SESSION['list_restricted_folders_for_items'][$data['id_tree']])\n        ) {\n            return \"ERR_FOLDER_NOT_ALLOWED\";\n        } else {\n            return \"ERR_FOLDER_NOT_ALLOWED\";\n        }\n    }\n\n    return true;\n}\n", "<?php\n/**\n * @file        upload.files.php\n * @author      Nils Laumaill\u00e9\n * @version     2.1.16\n * @copyright   (c) 2009-2012 Nils Laumaill\u00e9\n * @licensing   GNU AFFERO GPL 3.0\n * @link        http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('../SecureHandler.php');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"items\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    handleUploadError('Not allowed to ...');\n    exit();\n}\n\n//check for session\nif (null !== filter_input(INPUT_POST, 'PHPSESSID', FILTER_SANITIZE_STRING)) {\n    session_id(filter_input(INPUT_POST, 'PHPSESSID', FILTER_SANITIZE_STRING));\n} elseif (isset($_GET['PHPSESSID'])) {\n    session_id(filter_var($_GET['PHPSESSID'], FILTER_SANITIZE_STRING));\n} else {\n    handleUploadError('No Session was found.');\n}\n\n// load functions\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n// Prepare POST variables\n$post_user_token = filter_input(INPUT_POST, 'user_token', FILTER_SANITIZE_STRING);\n$post_type_upload = filter_input(INPUT_POST, 'type_upload', FILTER_SANITIZE_STRING);\n$post_newFileName = filter_input(INPUT_POST, 'newFileName', FILTER_SANITIZE_STRING);\n$post_timezone = filter_input(INPUT_POST, 'timezone', FILTER_SANITIZE_STRING);\n\n// Get parameters\n$chunk = isset($_REQUEST[\"chunk\"]) ? intval($_REQUEST[\"chunk\"]) : 0;\n$chunks = isset($_REQUEST[\"chunks\"]) ? intval($_REQUEST[\"chunks\"]) : 0;\n$fileName = isset($_REQUEST[\"name\"]) ? filter_var($_REQUEST[\"name\"], FILTER_SANITIZE_STRING) : '';\n\n// token check\nif (null === $post_user_token) {\n    handleUploadError('No user token found.');\n    exit();\n} else {\n    // delete expired tokens\n    DB::delete(prefix_table(\"tokens\"), \"end_timestamp < %i\", time());\n\n    if ($chunk < ($chunks - 1)) {\n        // increase end_timestamp for token\n        DB::update(\n            prefix_table('tokens'),\n            array(\n                'end_timestamp' => time() + 10\n                ),\n            \"user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n    } else {\n        // check if token is expired\n        $data = DB::queryFirstRow(\n            \"SELECT end_timestamp FROM \".prefix_table(\"tokens\").\" WHERE user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n        // clear user token\n        DB::delete(\n            prefix_table(\"tokens\"),\n            \"user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n\n        if (time() > $data['end_timestamp']) {\n            // too old\n            handleAttachmentError('User token expired.', 110);\n            die();\n        }\n    }\n}\n\n\n// HTTP headers for no cache etc\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\n\nif (null !== $post_type_upload && $post_type_upload === \"upload_profile_photo\") {\n    $targetDir = $SETTINGS['cpassman_dir'].'/includes/avatars';\n} else {\n    $targetDir = $SETTINGS['path_to_files_folder'];\n}\n\n$cleanupTargetDir = true; // Remove old files\n$maxFileAge = 5 * 3600; // Temp file age in seconds\n$valid_chars_regex = 'A-Za-z0-9_'; //accept only those characters\n$MAX_FILENAME_LENGTH = 260;\n$max_file_size_in_bytes = 2147483647; //2Go\n\nif (null !== $post_timezone) {\n    date_default_timezone_set($post_timezone);\n}\n\n// Check post_max_size\n$POST_MAX_SIZE = ini_get('post_max_size');\n$unit = strtoupper(substr($POST_MAX_SIZE, -1));\n$multiplier = ($unit == 'M' ? 1048576 : ($unit == 'K' ? 1024 : ($unit == 'G' ? 1073741824 : 1)));\nif ((int) $_SERVER['CONTENT_LENGTH'] > $multiplier * (int) $POST_MAX_SIZE && $POST_MAX_SIZE) {\n    handleUploadError('POST exceeded maximum allowed size.');\n}\n\n// Validate the file size (Warning: the largest files supported by this code is 2GB)\n$file_size = @filesize($_FILES['file']['tmp_name']);\nif (!$file_size || $file_size > $max_file_size_in_bytes) {\n    handleUploadError('File exceeds the maximum allowed size');\n}\nif ($file_size <= 0) {\n    handleUploadError('File size outside allowed lower bound');\n}\n\n// 5 minutes execution time\nset_time_limit(5 * 60);\n\n\n// Validate the upload\nif (!isset($_FILES['file'])) {\n    handleUploadError('No upload found in $_FILES for Filedata');\n} elseif (isset($_FILES['file']['error']) && $_FILES['file']['error'] != 0) {\n    handleUploadError($uploadErrors[$_FILES['Filedata']['error']]);\n} elseif (!isset($_FILES['file']['tmp_name']) || !@is_uploaded_file($_FILES['file']['tmp_name'])) {\n    handleUploadError('Upload failed is_uploaded_file test.');\n} elseif (!isset($_FILES['file']['name'])) {\n    handleUploadError('File has no name.');\n}\n\n\n// Validate file name (for our purposes we'll just remove invalid characters)\n$file_name = preg_replace(\n    '/[^'.$valid_chars_regex.'\\.]/',\n    '',\n    filter_var(\n        strtolower(basename($_FILES['file']['name'])),\n        FILTER_SANITIZE_STRING\n    )\n);\nif (strlen($file_name) == 0 || strlen($file_name) > $MAX_FILENAME_LENGTH) {\n    handleUploadError('Invalid file name: '.$file_name.'.');\n}\n\n// Validate file extension\n$ext = strtolower(getFileExtension($_REQUEST[\"name\"]));\nif (!in_array(\n    $ext,\n    explode(\n        ',',\n        $SETTINGS['upload_docext'].','.$SETTINGS['upload_imagesext'].\n        ','.$SETTINGS['upload_pkgext'].','.$SETTINGS['upload_otherext']\n    )\n)) {\n    handleUploadError('Invalid file extension.');\n}\n\n// is destination folder writable\nif (is_writable($SETTINGS['path_to_files_folder']) === false) {\n    handleUploadError('Not enough permissions on folder '.$SETTINGS['path_to_files_folder'].'.');\n}\n\n// Clean the fileName for security reasons\n$fileName = preg_replace('/[^\\w\\.]+/', '_', $fileName);\n$fileName = preg_replace('/[^'.$valid_chars_regex.'\\.]/', '', strtolower(basename($fileName)));\n\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir.DIRECTORY_SEPARATOR.$fileName)) {\n    $fileNameA = substr($fileName, 0, $ext);\n    $fileNameB = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir.DIRECTORY_SEPARATOR.$fileNameA.'_'.$count.$fileNameB)) {\n        $count++;\n    }\n\n    $fileName = $fileNameA.'_'.$count.$fileNameB;\n}\n\n$filePath = $targetDir.DIRECTORY_SEPARATOR.$fileName;\n\n// Create target dir\nif (!file_exists($targetDir)) {\n    try {\n        mkdir($targetDir, 0777, true);\n    } catch (Exception $e) {\n        print_r($e);\n    }\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir.DIRECTORY_SEPARATOR.$file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file)\n            && (filemtime($tmpfilePath) < time() - $maxFileAge)\n            && ($tmpfilePath != \"{$filePath}.part\")\n        ) {\n            fileDelete($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n// Look for the content type header\nif (isset($_SERVER[\"HTTP_CONTENT_TYPE\"])) {\n    $contentType = $_SERVER[\"HTTP_CONTENT_TYPE\"];\n}\n\nif (isset($_SERVER[\"CONTENT_TYPE\"])) {\n    $contentType = $_SERVER[\"CONTENT_TYPE\"];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\nif (strpos($contentType, \"multipart\") !== false) {\n    if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen($_FILES['file']['tmp_name'], \"rb\");\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                die(\n                    '{\"jsonrpc\" : \"2.0\",\n                    \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"},\n                    \"id\" : \"id\"}'\n                );\n            }\n            fclose($in);\n            fclose($out);\n            fileDelete($_FILES['file']['tmp_name']);\n        } else {\n            die(\n                '{\"jsonrpc\" : \"2.0\",\n                \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"},\n                \"id\" : \"id\"}'\n            );\n        }\n    } else {\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n    }\n} else {\n    // Open temp file\n    $out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");\n    if ($out) {\n        // Read binary input stream and append it to temp file\n        $in = fopen(\"php://input\", \"rb\");\n\n        if ($in) {\n            while ($buff = fread($in, 4096)) {\n                fwrite($out, $buff);\n            }\n        } else {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n        }\n\n        fclose($in);\n        fclose($out);\n    } else {\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n    }\n}\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    rename(\"{$filePath}.part\", $filePath);\n} else {\n    // continue uploading other chunks\n    die();\n}\n\n\nif (null !== ($post_type_upload)\n    && empty($post_type_upload) === false\n    && $post_type_upload === \"import_items_from_csv\"\n) {\n    $newFileName = time().\"_\".$_SESSION['user_id'];\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName\n    );\n} elseif (null !== ($post_type_upload)\n    && $post_type_upload === \"import_items_from_keypass\"\n) {\n    $newFileName = time().\"_\".$_SESSION['user_id'];\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName\n    );\n} elseif (null !== ($post_type_upload)\n    && $post_type_upload === \"upload_profile_photo\"\n) {\n    // sanitize the new file name\n    $newFileName = preg_replace('/[^\\w\\._]+/', '_', htmlentities($post_newFileName, ENT_QUOTES));\n    $newFileName = preg_replace('/[^'.$valid_chars_regex.'\\.]/', '', strtolower(basename($newFileName)));\n\n    // get file extension\n    $ext = pathinfo($filePath, PATHINFO_EXTENSION);\n\n    // rename the file\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.'.'.$ext\n    );\n\n    // make thumbnail\n    make_thumb(\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.'.'.$ext,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.\"_thumb\".'.'.$ext,\n        40\n    );\n\n    //Connect to mysql server\n    require_once '../../includes/config/settings.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\nDB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    // get current avatar and delete it\n    $data = DB::queryFirstRow(\"SELECT avatar, avatar_thumb FROM \".$pre.\"users WHERE id=%i\", $_SESSION['user_id']);\n    fileDelete($targetDir.DIRECTORY_SEPARATOR.$data['avatar']);\n    fileDelete($targetDir.DIRECTORY_SEPARATOR.$data['avatar_thumb']);\n\n    // store in DB the new avatar\n    DB::query(\n        \"UPDATE \".$pre.\"users\n        SET avatar='\".$newFileName.'.'.$ext.\"', avatar_thumb='\".$newFileName.\"_thumb\".'.'.$ext.\"'\n        WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n\n    // store in session\n    $_SESSION['user_avatar'] = $newFileName.'.'.$ext;\n    $_SESSION['user_avatar_thumb'] = $newFileName.\"_thumb\".'.'.$ext;\n\n    echo '{\"filename\" : \"'.htmlentities($_SESSION['user_avatar'], ENT_QUOTES).'\" , \"filename_thumb\" : \"'.htmlentities($_SESSION['user_avatar_thumb'], ENT_QUOTES).'\"}';\n    exit();\n} else {\n    $newFileName = time().\"_\".$_SESSION['user_id'];\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName\n    );\n}\n\n// Return JSON-RPC response\ndie('{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\" , \"newfilename\" : \"'.$newFileName.'\"}');\n\n\n/* Handles the error output. */\nfunction handleUploadError($message)\n{\n    echo htmlentities($message, ENT_QUOTES);\n    exit();\n}\n"], "fixing_code": ["<?php\n/**\n * @file          admin.settings.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n/*\n* Add a new field to a category\n*/\nfunction fieldAdd(id) {\n    $(\"#post_id\").val(id);\n    $(\"#add_new_field\").dialog(\"open\");\n}\n/*\n* Edit category's folders\n*/\nfunction catInFolders(id) {\n    $(\"#post_id\").val(id);\n    $(\"#catInFolder_title\").html($(\"#item_\"+id).html());    // display title\n    // pre-select folders\n    $(\"#cat_folders_selection > option\").prop(\"selected\", false);\n    var folder = $(\"#catFoldersList_\"+id).val().split(\";\");\n    for (var i=0; i<folder.length; i++) {\n        $(\"#cat_folders_selection option[value=\"+folder[i]+\"]\").attr('selected', 'selected');\n    };\n    // open\n    $(\"#category_in_folder\").dialog(\"open\");\n}\n\n/*\n* Add a new category\n*/\nfunction categoryAdd() {\n    if ($(\"#new_category_label\").val() == \"\") {\n        return false;\n    }\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"addNewCategory\",\n            title   : sanitizeString($(\"#new_category_label\").val())\n        },\n        function(data) {\n            // build new row\n            $(\"#tbl_categories\").append(\n                '<tr id=\"t_cat_'+data[0].id+'\"><td colspan=\"2\">'+\n                '<input type=\"text\" id=\"catOrd_'+data[0].id+'\" size=\"1\" class=\"category_order\" value=\"1\" />&nbsp;&nbsp;'+\n                '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"field_add_in_category\"]; ?>\" onclick=\"fieldAdd('+\n                data[0].id+')\" style=\"cursor:pointer;\">'+\n                '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-plus fa-stack-1x fa-inverse\"></i>'+\n                '</span>&nbsp;'+\n                '<input type=\"radio\" name=\"sel_item\" id=\"item_'+data[0].id+'_cat\" />'+\n                '<label for=\"item_'+data[0].id+'_cat\" id=\"item_'+data[0].id+'\">'+\n                $(\"#new_category_label\").val()+'</label>'+\n                '</td><td>'+\n                '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"category_in_folders\"]; ?>\" onclick=\"catInFolders('+data[0].id+')\" style=\"cursor:pointer;\">'+\n                '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-edit fa-stack-1x fa-inverse\"></i>'+\n                '</span>&nbsp;'+\n                '<?php echo $LANG[\"category_in_folders_title\"]; ?>:'+\n                '<span style=\"font-family:italic; margin-left:10px;\" id=\"catFolders_'+data[0].id+'\"></span>'+\n                '<input type=\"hidden\" id=\"catFoldersList_'+data[0].id+'\" value=\"'+data[0].id+'\" /></td><td></td>');\n            // Add new cat\n            $(\"#moveItemTo\").append('<option value=\"'+data[0].id+'\">'+$(\"#new_category_label\").val()+'</option>');\n            // clean\n            $(\"#new_category_label, #new_item_title\").val(\"\");\n            //loadFieldsList();\n            $(\"#div_loading,#no_category\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n* rename an Element\n*/\nfunction renameItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"renameItem\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_rename']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Delete an Element\n*/\nfunction deleteItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"deleteCategory\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_deletion']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Move an Element\n*/\nfunction moveItem() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"moveItem\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_moveto']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n/*\n* Change Field Type\n*/\nfunction changeFieldTypeNow() {\n    var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n    $(\"#post_id\").val(data[1]);\n    $(\"#post_type\").val(\"changeFieldType\");\n    $(\"#category_confirm_text\").html(\"<?php echo $LANG['confirm_change_field_type']; ?>\");\n    $(\"#category_confirm\").dialog(\"open\");\n}\n\n/*\n* Save the position of the Categories\n*/\nfunction storePosition() {\n    $(\"#div_loading\").show();\n    // prepare listing to save\n    var data = \"\";\n    var id;\n    var val;\n    $('input[class$=\"category_order\"]').each(function(index) {\n        id = $(this).attr(\"id\").split(\"_\");\n        if ($(this).val() == \"\") {\n            val = \"1\";\n        } else {\n            val = $(this).val();\n        }\n        if (data == \"\") {\n            data = id[1]+\":\"+val;\n        } else {\n            data += \";\"+id[1]+\":\"+val;\n        }\n    });\n\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"saveOrder\",\n            data   : data\n        },\n        function(data) {\n            $(\"#div_loading\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n* Reload table\n*/\nfunction loadFieldsList() {\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"loadFieldsList\",\n            title   : prepareExchangedData(sanitizeString($(\"#new_category_label\").val()), \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n        },\n        function(data) {\n            var newList = '<table id=\"tbl_categories\" style=\"\">';\n            // parse json table and disaply\n            var json = $.parseJSON(data);\n            $(json).each(function(i,val){\n                if (val[0] === \"1\") {\n                    newList += '<tr id=\"t_cat_'+val[1]+'\"><td colspan=\"2\">'+\n                    '<input type=\"text\" id=\"catOrd_'+val[1]+'\" size=\"1\" class=\"category_order\" value=\"'+val[3]+'\" />&nbsp;'+\n                    '<span class=\"fa-stack tip\" title=\"<?php echo $LANG[\"field_add_in_category\"]; ?>\" onclick=\"fieldAdd('+\n                    val[1]+')\" style=\"cursor:pointer;\">'+\n                    '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-plus fa-stack-1x fa-inverse\"></i>'+\n                    '</span>&nbsp;'+\n                    '<input type=\"radio\" name=\"sel_item\" id=\"item_'+val[1]+'_cat\" />'+\n                    '<label for=\"item_'+val[1]+'_cat\" id=\"item_'+val[1]+'\">'+val[2]+'</label>'+\n                    '</td><td>'+\n                    '<span class=\"fa-stack tip\" title=\"<?php echo $LANG['category_in_folders']; ?>\" onclick=\"catInFolders('+val[1]+')\" style=\"cursor:pointer;\">'+\n                    '<i class=\"fa fa-square fa-stack-2x\"></i><i class=\"fa fa-edit fa-stack-1x fa-inverse\"></i>'+\n                    '</span>&nbsp;'+\n                    '<?php echo $LANG['category_in_folders_title']; ?>:'+\n                    '<span style=\"font-family:italic; margin-left:10px;\" id=\"catFolders_'+val[1]+'\">'+val[4]+'</span>'+\n                    '<input type=\"hidden\" id=\"catFoldersList_'+val[1]+'\" value=\"'+val[5]+'\" /></td></tr>';\n                } else {\n                    newList += '<tr id=\"t_field_'+val[1]+'\"><td width=\"60px\"></td>'+\n                    '<td colspan=\"2\"><input type=\"text\" id=\"catOrd_'+val[1]+'\" size=\"1\" class=\"category_order\" value=\"'+val[3]+'\" />&nbsp;'+\n                    '<input type=\"radio\" name=\"sel_item\" id=\"item_'+val[1]+'_cat\" />'+\n                    '<label for=\"item_'+val[1]+'_cat\" id=\"item_'+val[1]+'\">'+val[2]+'</label>';\n\n                    if (val[4] !== \"\") {\n                        newList += '<span id=\"encryt_data_'+val[1]+'\" style=\"margin-left:4px; cursor:pointer;\">';\n                        if (val[4] === \"1\") {\n                            newList += '<i class=\"fa fa-key tip\" title=\"<?php echo $LANG['encrypted_data'];?>\" onclick=\"changeEncrypMode('+val[1]+', 1)\"></i>';\n                        } else if (val[4] === \"0\") {\n                            newList += '<span class=\"fa-stack\" title=\"<?php echo $LANG['not_encrypted_data'];?>\" onclick=\"changeEncrypMode('+val[1]+', 0)\"><i class=\"fa fa-key fa-stack-1x\"></i><i class=\"fa fa-ban fa-stack-1x fa-lg\" style=\"color:red;\"></i></span>';\n                        }\n                        newList += '</span>'\n                    }\n\n                    if (val[6] !== \"\") {\n                        newList += '<span style=\"margin-left:4px;\">';\n                        if (val[6] === \"text\") {\n                            newList += '<i class=\"fa fa-paragraph tip\" title=\"<?php echo $LANG['data_is_text'];?>\"></i>';\n                        } else if (val[6] === \"masked\") {\n                            newList += '<i class=\"fa fa-eye-slash tip\" title=\"<?php echo $LANG['data_is_masked'];?>\"></i>';\n                        }\n                        newList += '</span>'\n                    }\n\n                    newList += '</td></tr>';\n                }\n            });\n\n            // display\n            newList += '</table>';\n            $(\"#new_item_title\").val(\"\");\n            $(\"#categories_list\").html(newList);\n            $(\"#div_loading\").hide();\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Launch the action the admin wants\n//###########\nfunction LaunchAdminActions(action, option)\n{\n    var option;\n\n    $(\"#div_loading\").show();\n    $(\"#email_testing_results, #result_admin_script_backup\").hide();\n    $(\"#result_admin_action_db_backup\").html(\"\");\n    if (action === \"admin_action_db_backup\") {\n        option = $(\"#result_admin_action_db_backup_key\").val();\n    } else if (action === \"admin_action_db_restore\") {\n        $(\"#restore_bck_encryption_key_dialog_error\")\n            .html(\"<span class='fa fa-cog fa-spin fa'>&nbsp;</span><?php echo addslashes($LANG['please_wait']); ?>\")\n            .attr(\"class\",\"ui-corner-all ui-state-focus\")\n            .show();\n    } else if (action === \"admin_action_backup_decrypt\") {\n        option = $(\"#bck_script_decrypt_file\").val();\n    } else if (action === \"admin_action_change_salt_key\") {\n        option = prepareExchangedData(\n            sanitizeString($(\"#new_salt_key\").val()),\n            \"encode\",\n            \"<?php echo $_SESSION['key']; ?>\"\n        );\n    } else if (action === \"admin_email_send_backlog\") {\n        $(\"#email_testing_results\")\n            .show().\n            html(\"<?php echo addslashes($LANG['please_wait']); ?>\").attr(\"class\",\"ui-corner-all ui-state-focus\");\n    } else if (action === \"admin_action_attachments_cryption\") {\n        option = $(\"input[name=attachments_cryption]:checked\").val();\n        if (option === \"\" || option === undefined) {\n            $(\"#div_loading\").hide();\n            return false;\n        }\n    } else if (action === \"admin_ldap_test_configuration\") {\n        option = [];\n        var item = {};\n\n        // adding the user\n        item['username'] = $(\"#ldap_test_username\").val();\n        item['username_pwd'] = $(\"#ldap_test_pwd\").val();\n        item['no_username_needed'] = $(\"#ldap_test_no_username\").is(':checked') ? \"1\" : \"0\";\n\n        // adding ldap params\n        $(\"#ldap_config_values tr\").each(function(k){\n            $(this).find(\"input, select\").each(function(i){\n                item[$(this).attr('id')] = $(this).val();\n            });\n        });\n        option.push(item);\n\n        if (option === \"\" || option.length === 0) return;\n\n        // convert to json string\n        option = prepareExchangedData(JSON.stringify(option) , \"encode\", \"<?php echo $_SESSION['key']; ?>\");\n    }\n\n    //Lauchn ajax query\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n           type        : action,\n           option    : option\n        },\n        function(data) {\n            $(\"#div_loading\").hide();\n            if (data != null) {\n                if (data[0].result == \"db_backup\") {\n                    $(\"#result_admin_action_db_backup\").html(\"<span class='fa fa-file-code-o'></span>&nbsp;<a href='\"+data[0].href+\"'><?php echo $LANG['pdf_download']; ?></a>\").show();\n                } else if (data[0].result == \"pf_done\") {\n                    $(\"#result_admin_action_check_pf\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"db_restore\") {\n                    if (data[0].message !== \"\") {\n                        $(\"#restore_bck_encryption_key_dialog_error\")\n                            .html(data[0].message)\n                            .attr(\"class\",\"ui-corner-all ui-state-error\")\n                            .show();\n                    } else {\n                        $(\"#restore_bck_encryption_key_dialog\").dialog(\"close\");\n                        $(\"#result_admin_action_db_restore\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                        $(\"#result_admin_action_db_restore_get_file\").hide();\n                        //deconnect userd\n                        sessionStorage.clear();\n                        window.location.href = \"logout.php\"\n                    }\n                } else if (data[0].result == \"cache_reload\") {\n                    $(\"#result_admin_action_reload_cache_table\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"db_optimize\") {\n                    $(\"#result_admin_action_db_optimize\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].result == \"purge_old_files\") {\n                    $(\"#result_admin_action_purge_old_files\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].nb_files_deleted+\"&nbsp;<?php echo $LANG['admin_action_purge_old_files_result']; ?>\").show();\n                } else if (data[0].result == \"db_clean_items\") {\n                    $(\"#result_admin_action_db_clean_items\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].nb_items_deleted+\"&nbsp;<?php echo $LANG['admin_action_db_clean_items_result']; ?>\").show();\n                } else if (data[0].result == \"changed_salt_key\") {\n                    //deconnect user\n                    $(\"#menu_action\").val(\"deconnexion\");\n                    sessionStorage.clear();\n                    window.location.href = \"logout.php\"\n                } else if (data[0].result == \"email_test_conf\" || data[0].result == \"admin_email_send_backlog\") {\n                    if (data[0].error != \"\") {\n                        $(\"#email_testing_results\").html(\"<?php echo addslashes($LANG['admin_email_result_nok']); ?>&nbsp;\"+data[0].message).show().attr(\"class\",\"ui-state-error ui-corner-all\");\n                    } else {\n                        $(\"#email_testing_results\").html(\"<?php echo addslashes(str_replace(\"#email#\", $_SESSION['user_email'], $LANG['admin_email_result_ok'])); ?>\").show().attr(\"class\",\"ui-corner-all ui-state-focus\");\n                    }\n                } else if (data[0].result == \"pw_prefix_correct\") {\n                    $(\"result_admin_action_pw_prefix_correct\").html(data[0].ret).show();\n                } else if (data[0].result == \"attachments_cryption\") {\n                    if (data[0].continu === true) {\n                        $(\"#result_admin_action_attachments_cryption\").html('').show();\n                        manageEncryptionOfAttachments(data[0].list, data[0].cpt);\n                    } else if (data[0].error == \"file_not_encrypted\") {\n                        $(\"#result_admin_action_attachments_cryption\").html(\"It seems the files are not encrypted. Are you sure you want to decrypt? please do a check.\").show();\n                    } else if (data[0].error == \"file_not_clear\") {\n                        $(\"#result_admin_action_attachments_cryption\").html(\"It seems the files are encrypted. Are you sure you want to encrypt? please do a check.\").show();\n                    }\n                } else if (data[0].result == \"rebuild_config_file\") {\n                    $(\"#result_admin_rebuild_config_file\").html(\"<span class='fa fa-check mi-green'></span>\").show();\n                } else if (data[0].option === \"admin_ldap_test_configuration\") {\n                    if (data[0].error !== \"\" && data[0].results === undefined) {\n                        $(\"#ldap_test_msg\").html(data[0].error).show(1).delay(2000).fadeOut(500);\n                    } else {\n                        $(\"#ldap_test_msg\").html(data[0].results).show();\n                    }\n                // for BCK DECRYPT\n                } else if (data[0].result === \"backup_decrypt_fails\") {\n                    $(\"#result_admin_script_backup\").html(data[0].msg).show();\n                } else if (data[0].result === \"backup_decrypt_success\") {\n                    $(\"#result_admin_script_backup\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;<?php echo addslashes($LANG['file_is_now_ready']); ?> - \" + data[0].msg).show(1).delay(5000).fadeOut(500);\n                }\n                //--\n            }\n        },\n        \"json\"\n   );\n}\n\n/*\n*\n*/\nfunction confirmChangingSk() {\n    if (confirm(\"<?php echo addslashes($LANG['confirm_database_reencryption']); ?>\")) {\n        changeMainSaltKey('starting', '');\n    }\n}\n\n/*\n*\n*/\nfunction changeMainSaltKey(start, object)\n{\n    if (object === \"files\") {\n        var nb = 5;\n    } else {\n        var nb = 10;    // can be changed - number of items treated in each loop\n    }\n\n    //console.log(\"Start value: \"+start);\n\n    // start change\n    if (start === \"starting\") {\n        // inform\n        $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-cog fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['starting']; ?>\").show();\n\n        // launch query\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type     : \"admin_action_change_salt_key___start\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].error == \"\" && data[0].nextAction == \"encrypt_items\") {\n                    $(\"#changeMainSaltKey_itemsCount\").append('<input type=\"hidden\" id=\"changeMainSaltKey_itemsCountTotal\" />');\n                    $(\"#changeMainSaltKey_itemsCount, #changeMainSaltKey_itemsCountTotal\").val(data[0].nbOfItems);\n                    //console.log(\"Now launch encryption\");\n                    // start encrypting items with new saltkey\n                    changeMainSaltKey(0, \"items,logs,files,categories\");\n                    //changeMainSaltKey(0, \"files\");\n                } else {\n                    // error mngt\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-alert fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['error_sent_back']; ?> : \"+data[0].error);\n                }\n            },\n            \"json\"\n        );\n\n    } else if (isFinite(start) && object !== \"\") {\n        console.log(\"Step Encrypt - \" +start+\" ; \"+nb+\" ; \"+$(\"#changeMainSaltKey_itemsCount\").val());\n\n        $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-cog fa-spin fa\\\"></i>&nbsp;<?php echo $LANG['treating_items']; ?>...&nbsp;\"+start+\" > \"+(parseInt(start)+parseInt(nb))+\" (<?php echo $LANG['total_number_of_items']; ?> : \"+$(\"#changeMainSaltKey_itemsCount\").val()+\")\");\n\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type         : \"admin_action_change_salt_key___encrypt\",\n                object       : object,\n                start        : start,\n                length       : nb,\n                nbItems      : $(\"#changeMainSaltKey_itemsCount\").val(),\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                console.log(\"Next action: \"+data[0].nextAction);\n                if (data[0].nextAction !== \"encrypting\" && data[0].nextAction !== \"\" && data[0].nextAction !== \"finishing\") {\n                    if (data[0].nbOfItems !== \"\") {\n                        // it is now a new table to be re-encrypted\n                        $(\"#changeMainSaltKey_itemsCount\").val(data[0].nbOfItems);\n                        $(\"#changeMainSaltKey_itemsCountTotal\").val(parseInt(data[0].nbOfItems) + parseInt($(\"#changeMainSaltKey_itemsCountTotal\").val()));\n                        data[0].nextStart = 0;\n                        object = data[0].nextAction;\n                    }\n                    changeMainSaltKey(data[0].nextStart, object);\n                } else if (data[0].nextAction === \"finishing\") {\n                    $(\"#changeMainSaltKey_message\").html(\"<?php echo $LANG['finalizing']; ?>...\");\n                    changeMainSaltKey(\"finishing\");\n                } else {\n                    // error mngt\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-alert fa-spin fa\\\"></i>&nbsp;<?php echo addslashes($LANG['error_sent_back']); ?> : \"+data[0].error);\n                }\n            },\n            \"json\"\n        );\n\n    } else {\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type     : \"admin_action_change_salt_key___end\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].nextAction === \"done\") {\n                    console.log(\"done\");\n                    $(\"#changeMainSaltKey_message\").html(\"<i class=\\\"fa fa-info fa-lg\\\"></i>&nbsp;<?php echo addslashes($LANG['alert_message_done']).\" \".$LANG['number_of_items_treated']; ?> : \" + $(\"#changeMainSaltKey_itemsCountTotal\").val() + '<p><?php echo addslashes($LANG['check_data_after_reencryption']); ?><p><div style=\\\"margin-top:5px;\\\"><a href=\\\"#\\\" onclick=\\\"encryption_show_revert()\\\"><?php echo addslashes($LANG['revert']); ?></a></div>');\n                } else {\n                    // error mngt\n                }\n                $(\"#changeMainSaltKey_itemsCountTotal\").remove();\n            },\n            \"json\"\n        );\n    }\n}\n\nfunction encryption_show_revert() {\n    if (confirm('<?php echo $LANG['revert_the_database']; ?>')) {\n        $(\"#changeMainSaltKey_message\").append('<div style=\"margin-top:5px;\"><i class=\"fa fa-cog fa-spin fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>...</div>')\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type    : \"admin_action_change_salt_key___restore_backup\",\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#changeMainSaltKey_message\").html('').hide();\n            },\n            \"json\"\n       );\n    }\n}\n\n/*\n* FUNCTION permitting to store into DB the settings changes\n*/\nfunction updateSetting(field)\n{\n    if (field == \"\") return false;\n\n    // store in DB\n    var data = {\"field\":field, \"value\":$(\"#\"+field).val()};\n    //console.log(data);\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n            type    : \"save_option_change\",\n            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            // force page reload in case of encryptClientServer\n            if (field == \"encryptClientServer\") {\n                location.reload(true);\n                return false;\n            }\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#message_box\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data).show().fadeOut(4000);\n\n                return;\n            }\n            if (data.error == \"\") {\n                $(\"#\"+field).after(\"<span class='fa fa-check fa-lg mi-green new_check'></span>\");\n                $(\".new_check\").fadeOut(2000);\n                setTimeout('$(\".new_check\").remove()', 2100);\n            }\n        }\n    );\n}\n\n/*\n* show/hide ldap options\n*/\nfunction showLdapFields(ldap_type) {\n    $(\".tr-ldap\").hide();\n    $(\".tr-\" + ldap_type).show();\n}\n\n/*\n* show/hide file Dec/Enc cryption options\n*/\nfunction startFileEncDecyption() {\n    $(\"#admin_action_attachments_cryption_selection\").show();\n    //\n}\n\n// Init\n$(function() {\n    $('.toggle').toggles({\n        drag: true, // allow dragging the toggle between positions\n        click: true, // allow clicking on the toggle\n        text: {\n            on: '<?php echo $LANG['yes']; ?>', // text for the ON position\n            off: '<?php echo $LANG['no']; ?>' // and off\n        },\n        on: true, // is the toggle ON on init\n        animate: 250, // animation time (ms)\n        easing: 'swing', // animation transition easing function\n        width: 50, // width used if not set in css\n        height: 20, // height if not set in css\n        type: 'compact' // if this is set to 'select' then the select style toggle will be used\n    });\n    $('.toggle').on('toggle', function(e, active) {\n        if (active) {\n            $(\"#\"+e.target.id+\"_input\").val(1);\n            if (e.target.id == \"ldap_mode\") {$(\"#div_ldap_configuration\").show();}\n        } else {\n            $(\"#\"+e.target.id+\"_input\").val(0);\n            if (e.target.id == \"ldap_mode\") {$(\"#div_ldap_configuration\").hide();}\n        }\n\n        // store in DB\n        var data = {\"field\": e.target.id , \"value\": $(\"#\"+e.target.id+\"_input\").val()};\n        console.log(data);\n        $.post(\n            \"sources/admin.queries.php\",\n            {\n                type    : \"save_option_change\",\n                data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key     : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                // force page reload in case of encryptClientServer\n                if (e.target.id == \"encryptClientServer\") {\n                    location.reload(true);\n                    return false;\n                }\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#message_box\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data).show().fadeOut(4000);\n                    return false;\n                }\n                console.log(data);\n                if (data.error == \"\") {\n                    $(\"#\"+e.target.id).after(\"<span class='fa fa-check fa-lg mi-green new_check' style='float:left;margin:-18px 0 0 56px;'></span>\");\n                    $(\".new_check\").fadeOut(2000);\n                    setTimeout('$(\".new_check\").remove()', 2100);\n                }\n            }\n        );\n    });\n\n    // spinner\n    $(\"#upload_imageresize_quality\").spinner({\n        min: 0,\n        max: 100,\n        value: 90,\n        spin: function(event, ui) {\n            updateSetting($(\"#upload_imageresize_quality\").attr('id'));\n        }\n    });\n\n    //BUILD BUTTONSET\n    $(\".div_radio\").buttonset();\n\n    // Build Tabs\n    $(\"#tabs\").tabs({\n        ajaxOptions: {\n            error: function(xhr, status, index, anchor) {\n                $(anchor.hash).html();\n            },\n            beforeSend: function() {\n                $(\"#div_loading\").show();\n            },\n            complete: function() {\n                $(\"#div_loading\").hide();\n            }\n        },\n        beforeLoad: function( event, ui ) {\n            ui.panel.html('<div id=\"loader_tab\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['loading']; ?>...</div>')\n        },\n        load: function( event, ui ) {\n            $(\"#loader_tab\").remove();\n        }\n    });\n\n    $('#tabs').click(function(e){\n        var current_index = $(\"#tabs\").tabs(\"option\",\"active\");\n        if (current_index == 9 || current_index == 10) {\n            $(\"#save_button\").hide();\n        } else {\n            $(\"#save_button\").show();\n        }\n    });\n\n    $('#tbl_categories tr').click(function (event) {\n        $(\"#selected_row\").val($(this).attr(\"id\"));\n    });\n\n    // display text of selected item\n    $(document).on(\"click\",\"input[name=sel_item]\",function(){\n        var data = $(\"input[name=sel_item]:checked\").attr(\"id\").split('_');\n        $(\"#new_item_title\").val($(\"#item_\"+data[1]).html());\n        $(\"#moveItemTo, #changeFieldType\").val(0);\n    });\n\n    // confirm dialogbox\n    $(\"#category_confirm\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 140,\n        title: \"<?php echo $LANG['confirm']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                $(\"#div_loading\").show();\n                var $this = $(this);\n                // prepare data to send\n                var data = \"\";\n                if ($(\"#post_type\").val() === \"renameItem\") {\n                    data = sanitizeString($(\"#new_item_title\").val());\n                } else if ($(\"#post_type\").val() === \"moveItem\") {\n                    data = $(\"#moveItemTo\").val();\n                } else if ($(\"#post_type\").val() === \"changeFieldType\") {\n                    data = $(\"#changeFieldType\").val();\n                } else if ($(\"#post_type\").val() === \"deleteCategory\") {\n                    data = \"no_data\";\n                }\n                if (data === \"\") {\n                    return false;\n                }\n                // send query\n                $.post(\n                    \"sources/categories.queries.php\",\n                    {\n                        type    : $(\"#post_type\").val(),\n                        id      : $(\"#post_id\").val(),\n                        data    : data\n                    },\n                    function(data) {\n                        if ($(\"#post_type\").val() === \"deleteCategory\") {\n                            $(\"#t_field_\"+$(\"#post_id\").val()).hide();\n                        } else if ($(\"#post_type\").val() === \"renameItem\") {\n                            $(\"#item_\"+$(\"#post_id\").val()).html($(\"#new_item_title\").val());\n                        }\n                        loadFieldsList();\n                        $(\"#new_category_label, #new_item_title\").val(\"\");\n                        $(\"#div_loading\").hide();\n                        $this.dialog(\"close\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#add_new_field\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 550,\n        height: 210,\n        title: \"<?php echo $LANG['define_new_field']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                if ($(\"#new_field_title\").val() !== \"\" && $(\"#post_id\").val() !== \"\") {\n                    $(\"#div_loading\").show();\n                    var $this = $(this);\n                    //send query\n                    $.post(\n                        \"sources/categories.queries.php\",\n                        {\n                            type        : \"addNewField\",\n                            field_title : sanitizeString($(\"#new_field_title\").val()),\n                            field_type  : sanitizeString($(\"#new_field_type\").val()),\n                            id          : $(\"#post_id\").val()\n                        },\n                        function(data) {\n                            $(\"#new_field_title\").val(\"\");\n                            // reload table\n                            loadFieldsList();\n                            $this.dialog(\"close\");\n                        },\n                        \"json\"\n                    );\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#cat_folders_selection\").multiselect({\n        selectedList: 7,\n        multiple:true,\n        checkAllText: \"<?php echo $LANG['check_all_text']; ?>\",\n        uncheckAllText: \"<?php echo $LANG['uncheck_all_text']; ?>\"\n    });\n\n    $(\"#category_in_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 350,\n        title: \"<?php echo $LANG['category_in_folders']; ?>\",\n        open: function() {\n            $(\"#cat_folders_selection\").multiselect('refresh');\n        },\n        buttons: {\n            \"<?php echo $LANG['confirm']; ?>\": function() {\n                // get list of selected folders\n                var ids = \"\";\n                $(\"#cat_folders_selection :selected\").each(function(i, selected) {\n                    if (ids == \"\") ids = $(selected).val();\n                    else ids = ids + \";\" + $(selected).val();\n                });\n                if (ids != \"\") {\n                    $(\"#div_loading, #catInFolder_wait\").show();\n                    var $this = $(this);\n                    //send query\n                    $.post(\n                        \"sources/categories.queries.php\",\n                        {\n                            type        : \"categoryInFolders\",\n                            foldersIds  : ids,\n                            id          : $(\"#post_id\").val()\n                        },\n                        function(data) {\n                            $(\"#new_field_title\").val(\"\");\n                            // display new list\n                            $(\"#catFolders_\"+$(\"#post_id\").val()).html(data[0].list);\n                            // close\n                            $(\"#div_loading, #catInFolder_wait\").hide();\n                            $this.dialog(\"close\");\n                        },\n                        \"json\"\n                    );\n                }\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(\"#div_loading\").hide();\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    $(\"#restore_bck_encryption_key_dialog\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width:300,\n        height:180,\n        title: \"<?php echo $LANG['admin_action_db_restore_key']; ?>\",\n        buttons: {\n            \"<?php echo $LANG['ok']; ?>\": function() {\n                LaunchAdminActions(\"admin_action_db_restore\", $(\"#restore_bck_fileObj\").val()+\"&\"+$(\"#restore_bck_encryption_key\").val());\n            },\n            \"<?php echo $LANG['cancel_button']; ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function(event,ui) {\n            $(\"#div_loading\").hide();\n            $(\"#restore_bck_encryption_key_dialog\").dialog(\"close\");\n        }\n    });\n\n    // SQL IMPORT FOR RESTORING\n    var restore_operation_id = '';\n    var uploader_restoreDB = new plupload.Uploader({\n        runtimes : \"gears,html5,flash,silverlight,browserplus\",\n        browse_button : \"pickfiles_restoreDB\",\n        container : \"upload_container_restoreDB\",\n        max_file_size : \"10mb\",\n        chunk_size : \"1mb\",\n        unique_names : true,\n        dragdrop : true,\n        multiple_queues : false,\n        multi_selection : false,\n        max_file_count : 1,\n        url : \"sources/upload/upload.files.php\",\n        flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n        filters : [\n            {title : \"SQL files\", extensions : \"sql\"}\n        ],\n        init: {\n            FilesAdded: function(up, files) {\n                $(\"#div_loading\").show();\n                // generate and save token\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type : \"save_token\",\n                        size : 25,\n                        capital: true,\n                        numeric: true,\n                        ambiguous: true,\n                        reason: \"restore_db\",\n                        duration: 10\n                    },\n                    function(data) {\n                        $(\"#user_token\").val(data[0].token);\n                        up.start();\n                    },\n                    \"json\"\n                );\n            },\n            BeforeUpload: function (up, file) {\n                $(\"#import_status_ajax_loader\").show();\n                up.settings.multipart_params = {\n                    \"PHPSESSID\":\"<?php echo $_SESSION['user_id']; ?>\",\n                    \"File\":file.name,\n                    \"type_upload\":\"restore_db\",\n                    \"user_token\": $(\"#user_token\").val()\n                };\n            },\n            UploadComplete: function(up, files) {\n                $(\"#restore_bck_fileObj\").val(restore_operation_id);\n                $(\"#restore_bck_encryption_key_dialog\").dialog(\"open\");\n            }\n        }\n    });\n    // Uploader options\n    uploader_restoreDB.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n    });\n    uploader_restoreDB.bind(\"Error\", function(up, err) {\n        $(\"#filelist_restoreDB\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_restoreDB.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n    uploader_restoreDB.bind('FileUploaded', function(upldr, file, object) {\n        var myData = prepareExchangedData(object.response, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n        restore_operation_id = myData.operation_id;\n    });\n    // Load CSV click\n    $(\"#uploadfiles_restoreDB\").click(function(e) {\n        uploader_restoreDB.start();\n        e.preventDefault();\n    });\n    uploader_restoreDB.init();\n    // -end\n\n    //Enable/disable option\n    $(\"#restricted_to\").bind(\"click\", function() {\n        if ($(\"#restricted_to_input\").val()== 1) {\n            $(\"#tr_option_restricted_to_roles\").show();\n        } else {\n            $(\"#tr_option_restricted_to_roles\").hide();\n            $(\"#tr_option_restricted_to_roles_input\").val(\"0\");\n        }\n    });\n    $(\"#anyone_can_modify\").bind(\"click\", function() {\n        if ($(\"#anyone_can_modify_input\").val()== 1) {\n            $(\"#tr_option_anyone_can_modify_bydefault\").show();\n        } else {\n            $(\"#tr_option_anyone_can_modify_bydefault\").hide();\n            $(\"#anyone_can_modify_bydefault_input\").val(\"0\");\n        }\n    });\n\n    //check NEW SALT KEY\n    $(\"#new_salt_key\").keypress(function (e) {\n        var key = e.charCode || e.keyCode || 0;\n        if ($(\"#new_salt_key\").val().length != 16) {\n            $(\"#change_salt_key_image\").html('<i class=\"fa fa-cross mi-red\"></i>');\n            $(\"#change_salt_key_but\").hide();\n        } else {\n            $(\"#change_salt_key_image\").html('<i class=\"fa fa-check mi-green\"></i>');\n            $(\"#change_salt_key_but\").show();\n        }\n        // allow backspace, tab, delete, arrows, letters, numbers and keypad numbers ONLY\n        return (\n            key != 33 && key != 34 && key != 39 && key != 92 && key != 32  && key != 96 && (key < 165)\n            && $(\"#new_salt_key\").val().length <= 32\n       );\n    });\n\n    $(\"button\").button();\n\n    // check if backup table exists\n    $.post(\"sources/admin.queries.php\",\n        {\n            type        : \"is_backup_table_existing\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            if (data === \"1\") {\n                $(\"#changeMainSaltKey_message\").show().html('<?php echo addslashes($LANG['previous_backup_exists']); ?>&nbsp;&nbsp;<b><a href=\"#\" id=\"but_bck_restore\"><?php echo $LANG['yes']; ?></a></b><br /><?php echo $LANG['previous_backup_exists_delete']; ?>&nbsp;&nbsp;<b><a href=\"#\" id=\"but_bck_delete\"><?php echo $LANG['yes']; ?></a></b>');\n\n                // Restore the backup\n                $(\"#but_bck_restore\").click(function(e) {\n                    encryption_show_revert();\n                });\n\n                // Delete the backup\n                $(\"#but_bck_delete\").click(function(e) {\n                    if (confirm(\"<?php echo $LANG['wipe_backup_data']; ?>\")) {\n                        $(\"#changeMainSaltKey_message\").append('<div style=\"margin-top:5px;\"><i class=\"fa fa-cog fa-spin fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>...</div>')\n                        $.post(\n                            \"sources/admin.queries.php\",\n                            {\n                                type    : \"admin_action_change_salt_key___delete_backup\",\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            },\n                            function(data) {\n                                $(\"#changeMainSaltKey_message\").html('').hide();\n                            },\n                            \"json\"\n                       );\n                    }\n                });\n            }\n        }\n    );\n\n\n});\n\nfunction manageEncryptionOfAttachments(list, cpt) {\n    $(\"#div_loading\").show();\n    $.post(\n        \"sources/admin.queries.php\",\n        {\n            type    : \"admin_action_attachments_cryption_continu\",\n            option  : $(\"input[name=attachments_cryption]:checked\").val(),\n            cpt     : cpt,\n            list    : list\n        },\n        function(data) {\n            if (data[0].continu === \"1\" ) {\n                manageEncryptionOfAttachments(data[0].list, data[0].cpt);\n            } else {\n                $(\"#result_admin_action_attachments_cryption\").html(\"<span class='fa fa-check mi-green'></span>&nbsp;\"+data[0].cpt+\" files changed.\").show();\n                $('#attachments_cryption_radio1, #attachments_cryption_radio2').prop('checked', false);\n                $(\"#div_loading\").hide();\n            }\n        },\n        \"json\"\n    );\n}\n\nfunction refreshInput()\n{\n    var ids = \"\";\n    $.each($(\"#roles_allowed_to_print_select option:selected\"), function(){\n        if (ids == \"\") ids = $(this).val();\n        else ids = ids + \";\" + $(this).val();\n    });\n    $(\"#roles_allowed_to_print\").val(ids);\n    updateSetting('roles_allowed_to_print');\n}\n\nfunction changeEncrypMode(id, encrypted_data) {\n    // send to server\n    $(\"#div_loading\").show();\n    //send query\n    $.post(\n        \"sources/categories.queries.php\",\n        {\n            type    : \"dataIsEncryptedInDB\",\n            id      : id,\n            encrypt : encrypted_data === \"1\" ? \"0\" : \"1\"\n        },\n        function(data) {\n            // show to user\n            if (data[0].error === \"\"){\n                if (encrypted_data === \"1\") {\n                    $(\"#encryt_data_\"+id).html('<span class=\"fa-stack\" title=\"<?php echo $LANG['not_encrypted_data']; ?>\" onclick=\"changeEncrypMode(\\''+id+'\\', \\'0\\')\"><i class=\"fa fa-key fa-stack-1x\"></i><i class=\"fa fa-ban fa-stack-1x fa-lg\" style=\"color:red;\"></i></span>');\n                } else {\n                    $(\"#encryt_data_\"+id).html('<i class=\"fa fa-key tip\" title=\"<?php echo $LANG['encrypted_data']; ?>\" onclick=\"changeEncrypMode(\\''+id+'\\', \\'1\\')\"></i>');\n                }\n            }\n            $(\"#div_loading\").hide();\n        },\n        \"json\"\n   );\n}\n\n/*\n**\n*/\nfunction generateAndStoreBackupPass() {\n    $.when(\n        generateRandomKey('bck_script_passkey', '40', 'true', 'true', 'false', 'false')\n    ).then(function(x) {\n        updateSetting('bck_script_passkey');\n    });\n}\n//]]>\n</script>", "<?php\n/**\n *\n * @file          admin.settings.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], curPage())) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\necho '\n<input type=\"hidden\" id=\"user_token\" value=\"\" />\n<div style=\"margin-top:10px;\">\n    <form name=\"form_settings\" method=\"post\" action=\"\">';\n// Main div for TABS\necho '\n        <div style=\"width:900px;margin:auto; line-height:20px; padding:10px;\" id=\"tabs\">';\n// Tabs menu\necho '\n            <ul>\n                <li><a href=\"#tabs-1\">'.$LANG['admin_settings_title'].'</a></li>\n                <li><a href=\"#tabs-3\">'.$LANG['admin_misc_title'].'</a></li>\n                <li><a href=\"#tabs-7\">'.$LANG['admin_upload_title'].'</a></li>\n                <li><a href=\"#tabs-2\">'.$LANG['admin_actions_title'].'</a></li>\n                <li><a href=\"#tabs-4\">'.$LANG['admin_ldap_menu'].'</a></li>\n                <li><a href=\"#tabs-5\">'.$LANG['admin_backups'].'</a></li>\n                <li><a href=\"#tabs-6\">'.$LANG['admin_emails'].'</a></li>\n                <li><a href=\"admin.settings_categories.php\">'.$LANG['categories'].'</a></li>\n                <li><a href=\"admin.settings_api.php\">'.$LANG['admin_api'].'</a></li>\n                <li><a href=\"admin.settings_duo.php\">'.$LANG['admin_2factor_authentication_tab'].'</a></li>\n            </ul>';\n// --------------------------------------------------------------------------------\n// TAB N\u00e91\necho '\n            <div id=\"tabs-1\">\n                <table border=\"0\">';\n// cpassman_dir\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_dir\">'.$LANG['admin_misc_cpassman_dir'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"cpassman_dir\" name=\"cpassman_dir\" value=\"', isset($SETTINGS['cpassman_dir']) ? $SETTINGS['cpassman_dir'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// cpassman_url\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_url\">'.$LANG['admin_misc_cpassman_url'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"cpassman_url\" name=\"cpassman_url\" value=\"', isset($SETTINGS['cpassman_url']) ? $SETTINGS['cpassman_url'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// path_to_upload_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"path_to_upload_folder\">'.$LANG['admin_path_to_upload_folder'].'</label>\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_path_to_upload_folder_tip']), ENT_QUOTES).'\"></i>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"path_to_upload_folder\" name=\"path_to_upload_folder\" value=\"', isset($SETTINGS['path_to_upload_folder']) ? $SETTINGS['path_to_upload_folder'] : $SETTINGS['cpassman_dir'].'/upload', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// url_to_upload_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"url_to_upload_folder\">'.$LANG['admin_url_to_upload_folder'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"url_to_upload_folder\" name=\"url_to_upload_folder\" value=\"', isset($SETTINGS['url_to_upload_folder']) ? $SETTINGS['url_to_upload_folder'] : $SETTINGS['cpassman_url'].'/upload', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// path_to_files_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"path_to_files_folder\">'.$LANG['admin_path_to_files_folder'].'</label>\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_path_to_files_folder_tip']), ENT_QUOTES).'\"></i>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"path_to_files_folder\" name=\"path_to_files_folder\" value=\"', isset($SETTINGS['path_to_files_folder']) ? $SETTINGS['path_to_files_folder'] : $SETTINGS['cpassman_dir'].'/files', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// url_to_files_folder\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"url_to_files_folder\">'.$LANG['admin_url_to_files_folder'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"url_to_files_folder\" name=\"url_to_files_folder\" value=\"', isset($SETTINGS['url_to_files_folder']) ? $SETTINGS['url_to_files_folder'] : $SETTINGS['cpassman_url'].'/files', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Favicon\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"favicon\">'.$LANG['admin_misc_favicon'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"favicon\" name=\"favicon\" value=\"', isset($SETTINGS['favicon']) ? $SETTINGS['favicon'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// custom_logo\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"cpassman_dir\">'.$LANG['admin_misc_custom_logo'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"80\" id=\"custom_logo\" name=\"custom_logo\" value=\"', isset($SETTINGS['custom_logo']) ? $SETTINGS['custom_logo'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// custom_login_text\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"cpassman_dir\">'.$LANG['admin_misc_custom_login_text'].'</label>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"80\" id=\"custom_login_text\" name=\"custom_login_text\" value=\"', isset($SETTINGS['custom_login_text']) ? $SETTINGS['custom_login_text'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\necho '\n            </table>';\n\necho '\n            <table>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Maintenance mode\necho '\n            <tr style=\"margin-bottom:3px\">\n            <td>\n                  <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                  <label>' .\n$LANG['settings_maintenance_mode'].'\n                      &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_maintenance_mode_tip']), ENT_QUOTES).'\"></i>\n                  </label>\n            </td>\n            <td>\n                <div class=\"toggle toggle-modern\" id=\"maintenance_mode\" data-toggle-on=\"', isset($SETTINGS['maintenance_mode']) && $SETTINGS['maintenance_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" name=\"maintenance_mode_input\" id=\"maintenance_mode_input\" value=\"', isset($SETTINGS['maintenance_mode']) && $SETTINGS['maintenance_mode'] == 1 ? '1' : '0', '\" />\n            </td>\n            </tr>';\n// default_session_expiration_time\necho '\n            <tr style=\"margin-bottom:3px\">\n            <td>\n                  <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                  <label>'.$LANG['settings_default_session_expiration_time'].'</label>\n            </td>\n            <td>\n                <input type=\"text\" size=\"15\" id=\"default_session_expiration_time\" name=\"default_session_expiration_time\" value=\"', isset($SETTINGS['default_session_expiration_time']) ? $SETTINGS['default_session_expiration_time'] : \"60\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n             </td>\n            </tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n//Enable SSL STS\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                      <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                      <label>' .\n                            $LANG['settings_enable_sts'].'\n                          &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_enable_sts_tip']), ENT_QUOTES).'\"></i>\n                      </label>\n                </td>\n                <td>\n                    <div class=\"toggle toggle-modern\" id=\"enable_sts\" data-toggle-on=\"', isset($SETTINGS['enable_sts']) && $SETTINGS['enable_sts'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" name=\"enable_sts_input\" id=\"enable_sts_input\" value=\"', isset($SETTINGS['enable_sts']) && $SETTINGS['enable_sts'] == 1 ? '1' : '0', '\" />\n                </td>\n            </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n//Proxy\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"proxy_ip\">'.$LANG['admin_proxy_ip'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_proxy_ip_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"15\" id=\"proxy_ip\" name=\"proxy_ip\" value=\"', isset($SETTINGS['proxy_ip']) ? $SETTINGS['proxy_ip'] : \"\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"proxy_port\">'.$LANG['admin_proxy_port'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_proxy_port_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"10\" id=\"proxy_port\" name=\"proxy_port\" value=\"', isset($SETTINGS['proxy_port']) ? $SETTINGS['proxy_port'] : \"\", '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// pwd_maximum_length\necho '\n            <tr style=\"margin-bottom:3px\">\n                <td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"pwd_maximum_length\">'.$LANG['admin_pwd_maximum_length'].'</label>\n                    &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_pwd_maximum_length_tip']), ENT_QUOTES).'\"></i>\n                </td>\n                <td>\n                    <input type=\"text\" size=\"10\" id=\"pwd_maximum_length\" name=\"pwd_maximum_length\" value=\"', isset($SETTINGS['pwd_maximum_length']) ? $SETTINGS['pwd_maximum_length'] : 40, '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td>\n            </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// TIMEZONE\n// get list of all timezones\n$zones = timezone_identifiers_list();\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"timezone\">'.$LANG['timezone_selection'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"timezone\" name=\"timezone\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"\">-- '.$LANG['select'].' --</option>';\nforeach ($zones as $zone) {\n    echo '\n    <option value=\"'.$zone.'\"', isset($SETTINGS['timezone']) && $SETTINGS['timezone'] == $zone ? ' selected=\"selected\"' : '', '>'.$zone.'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\n// DATE format\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"date_format\">'.$LANG['date_format'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"date_format\" name=\"date_format\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"d/m/Y\"', !isset($SETTINGS['date_format']) || $SETTINGS['date_format'] == \"d/m/Y\" ? ' selected=\"selected\"' : \"\", '>d/m/Y</option>\n                            <option value=\"m/d/Y\"', $SETTINGS['date_format'] == \"m/d/Y\" ? ' selected=\"selected\"' : \"\", '>m/d/Y</option>\n                            <option value=\"d-M-Y\"', $SETTINGS['date_format'] == \"d-M-Y\" ? ' selected=\"selected\"' : \"\", '>d-M-Y</option>\n                            <option value=\"d/m/y\"', $SETTINGS['date_format'] == \"d/m/y\" ? ' selected=\"selected\"' : \"\", '>d/m/y</option>\n                            <option value=\"m/d/y\"', $SETTINGS['date_format'] == \"m/d/y\" ? ' selected=\"selected\"' : \"\", '>m/d/y</option>\n                            <option value=\"d-M-y\"', $SETTINGS['date_format'] == \"d-M-y\" ? ' selected=\"selected\"' : \"\", '>d-M-y</option>\n                            <option value=\"d-m-y\"', $SETTINGS['date_format'] == \"d-m-y\" ? ' selected=\"selected\"' : \"\", '>d-m-y</option>\n                            <option value=\"Y-m-d\"', $SETTINGS['date_format'] == \"Y-m-d\" ? ' selected=\"selected\"' : \"\", '>Y-m-d</option>\n                        </select>\n                    </td>\n                </tr>';\n// TIME format\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"time_format\">'.$LANG['time_format'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"time_format\" name=\"time_format\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"H:i:s\"', !isset($SETTINGS['time_format']) || $SETTINGS['time_format'] == \"H:i:s\" ? ' selected=\"selected\"' : \"\", '>H:i:s</option>\n                            <option value=\"h:m:s a\"', $SETTINGS['time_format'] == \"h:i:s a\" ? ' selected=\"selected\"' : \"\", '>h:i:s a</option>\n                            <option value=\"g:i:s a\"', $SETTINGS['time_format'] == \"g:i:s a\" ? ' selected=\"selected\"' : \"\", '>g:i:s a</option>\n                            <option value=\"G:i:s\"', $SETTINGS['time_format'] == \"G:i:s\" ? ' selected=\"selected\"' : \"\", '>G:i:s</option>\n                        </select>\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// LANGUAGES\n$zones = timezone_identifiers_list();\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"default_language\">'.$LANG['settings_default_language'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"default_language\" name=\"default_language\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"\">-- '.$LANG['select'].' --</option>';\nforeach ($languagesList as $lang) {\n    echo '\n    <option value=\"'.$lang.'\"', isset($SETTINGS['default_language']) && $SETTINGS['default_language'] == $lang ? ' selected=\"selected\"' : '', '>'.$lang.'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Number of used pw\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"number_of_used_pw\">'.$LANG['number_of_used_pw'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"number_of_used_pw\" name=\"number_of_used_pw\" value=\"', isset($SETTINGS['number_of_used_pw']) ? $SETTINGS['number_of_used_pw'] : '5', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Number days before changing pw\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"pw_life_duration\">'.$LANG['pw_life_duration'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"pw_life_duration\" name=\"pw_life_duration\" value=\"', isset($SETTINGS['pw_life_duration']) ? $SETTINGS['pw_life_duration'] : '5', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n// Number of bad authentication tentations before disabling user\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"nb_bad_authentication\">'.$LANG['nb_false_login_attempts'].'</label>\n                    </td>\n                    <td>\n                        <input type=\"text\" size=\"10\" id=\"nb_bad_authentication\" name=\"nb_bad_authentication\" value=\"', isset($SETTINGS['nb_bad_authentication']) ? $SETTINGS['nb_bad_authentication'] : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable log connections\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_log_connections'].'</label>\n                    </td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"log_connections\" data-toggle-on=\"', isset($SETTINGS['log_connections']) && $SETTINGS['log_connections'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"log_connections_input\" name=\"log_connections_input\" value=\"', isset($SETTINGS['log_connections']) && $SETTINGS['log_connections'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>';\n// Enable log accessed\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_log_accessed'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"log_accessed\" data-toggle-on=\"', isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"log_accessed_input\" name=\"log_accessed_input\" value=\"', isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] == 1 ? '1' : '0', '\" />\n                </td>\n                </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable PF\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['enable_personal_folder_feature'].'</label>\n                <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['enable_personal_folder_feature_tip']), ENT_QUOTES).'\"></i></span>\n            </td><td>\n                <div class=\"toggle toggle-modern\" id=\"enable_pf_feature\" data-toggle-on=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_pf_feature_input\" name=\"enable_pf_feature_input\" value=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 ? '1' : '0', '\" />\n            </td></tr>';\n\n// enable PF cookie for Personal SALTKEY\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['enable_personal_saltkey_cookie'].'</label>\n            </td><td>\n                <div class=\"toggle toggle-modern\" id=\"enable_personal_saltkey_cookie\" data-toggle-on=\"', isset($SETTINGS['enable_personal_saltkey_cookie']) && $SETTINGS['enable_personal_saltkey_cookie'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_personal_saltkey_cookie_input\" name=\"enable_personal_saltkey_cookie_input\" value=\"', isset($SETTINGS['enable_personal_saltkey_cookie']) && $SETTINGS['enable_personal_saltkey_cookie'] == 1 ? '1' : '0', '\" />\n            </td></tr>';\n// PF cookie for Personal SALTKEY duration\necho '\n            <tr><td>\n                <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                <label>'.$LANG['personal_saltkey_cookie_duration'].'</label>\n            </td><td>\n            <div class=\"div_radio\">\n                <input type=\"text\" size=\"10\" id=\"personal_saltkey_cookie_duration\" name=\"personal_saltkey_cookie_duration\" value=\"', isset($SETTINGS['personal_saltkey_cookie_duration']) ? $SETTINGS['personal_saltkey_cookie_duration'] : '31', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n            </div>\n            </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Attachments encryption strategy\n\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_attachments_encryption'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_attachments_encryption_tip']), ENT_QUOTES).'\"></i>&nbsp;</span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_attachment_encryption\" data-toggle-on=\"', isset($SETTINGS['enable_attachment_encryption']) && $SETTINGS['enable_attachment_encryption'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_attachment_encryption_input\" name=\"enable_attachment_encryption_input\" value=\"', isset($SETTINGS['enable_attachment_encryption']) && $SETTINGS['enable_attachment_encryption'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable KB\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_kb'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_kb_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_kb\" data-toggle-on=\"', isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_kb_input\" name=\"enable_kb_input\" value=\"', isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable SUGGESTION\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_suggestion'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_suggestion_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"enable_suggestion\" data-toggle-on=\"', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_suggestion_input\" name=\"enable_suggestion_input\" value=\"', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\n// Enable GET TP Information\necho '\n                    <tr><td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>\n                            '.$LANG['settings_get_tp_info'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_get_tp_info_tip']), ENT_QUOTES).'\"></i></span>\n                        </label>\n                        </td><td>\n                            <div class=\"toggle toggle-modern\" id=\"get_tp_info\" data-toggle-on=\"', isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"get_tp_info_input\" name=\"get_tp_info_input\" value=\"', isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1 ? '1' : '0', '\" />\n                    </td></tr>';\n\necho '\n                <tr><td colspan=\"3\"><hr /></td></tr>\n                </table>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e92\necho '\n            <div id=\"tabs-2\">';\n// Rebuild Config file\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_rebuild_config_file\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['rebuild_config_file'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['rebuild_config_file_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_rebuild_config_file\" style=\"margin-left:10px;display:none;\"></span>\n                </div>';\n// Update Personal folders for users\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_check_pf\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_check_pf'].'</label>\n                    <span id=\"result_admin_action_check_pf\" style=\"margin-left:10px;display:none;\"></span>\n                </div>';\n// Clean DB with orphan items\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_clean_items\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_db_clean_items'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_clean_items_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_db_clean_items\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Optimize the DB\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_optimize\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_db_optimize'].'</label>\n                    <span id=\"result_admin_action_db_optimize\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Purge old files\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_purge_old_files\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_purge_old_files'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_purge_old_files_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_purge_old_files\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Reload Cache Table\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_reload_cache_table\\')\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_reload_cache_table'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_reload_cache_table_tip']), ENT_QUOTES).'\"></i></span>\n                    <span id=\"result_admin_action_reload_cache_table\" style=\"margin-left:10px;\"></span>\n                </div>';\n// Change main SALT key\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"confirmChangingSk()\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    <label>'.$LANG['admin_action_change_salt_key'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_change_salt_key_tip']), ENT_QUOTES).'\"></i></span>\n                        <br/>\n                        <div id=\"changeMainSaltKey_message\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\"></div>\n                    </span>\n                    <input type=\"hidden\" id=\"changeMainSaltKey_itemsCount\" />\n                </div>';\n\n// Encrypt / decrypt attachments\necho '\n                <div style=\"margin-bottom:3px\">\n                    <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"startFileEncDecyption()\" style=\"cursor:pointer;\">\n                        <i class=\"fa fa-square fa-stack-2x\"></i>\n                        <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                    </span>\n                    '.$LANG['admin_action_attachments_cryption'].'\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_attachments_cryption_tip']), ENT_QUOTES).'\"></i></span>\n                    <br/>\n                    <div id=\"admin_action_attachments_cryption_selection\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\">\n                        '.$LANG['what_action_to_perform'].':&nbsp;\n                        <span class=\"div_radio\" style=\"\">\n                            <input type=\"radio\" id=\"attachments_cryption_radio1\" name=\"attachments_cryption\" value=\"encrypt\" /><label for=\"attachments_cryption_radio1\">'.$LANG['encrypt'].'</label>\n                            <input type=\"radio\" id=\"attachments_cryption_radio2\" name=\"attachments_cryption\" value=\"decrypt\" /><label for=\"attachments_cryption_radio2\">'.$LANG['decrypt'].'</label>\n                        </span>\n                        &nbsp;&nbsp;<a href=\"#\" onclick=\"LaunchAdminActions(\\'admin_action_attachments_cryption\\')\">'.addslashes($LANG['admin_action_db_backup_start_tip']).'</a>\n                        <div id=\"result_admin_action_attachments_cryption\" class=\"\" style=\"padding:10px; display:none; margin-left:30px; text-align:center;\"></div>\n                    </div>\n                </div>';\n\necho '\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00b03\necho '\n            <div id=\"tabs-3\">\n                <table width=\"100%\">';\n// After how long, edition is considered as failed or finished\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_delay_for_item_edition'].\n    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_delay_for_item_edition_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"delay_item_edition\" name=\"delay_item_edition\" value=\"', isset($SETTINGS['delay_item_edition']) ? $SETTINGS['delay_item_edition'] : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// OTV - otv_is_enabled\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['otv_is_enabled'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"otv_is_enabled\" data-toggle-on=\"', isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"otv_is_enabled_input\" name=\"otv_is_enabled_input\" value=\"', isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Expired time for OTV - otv_expiration_period\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_otv_expiration_period'].'</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"otv_expiration_period\" name=\"otv_expiration_period\" value=\"', isset($SETTINGS['otv_expiration_period']) ? $SETTINGS['otv_expiration_period'] : '7', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Managers can edit & delete items they are allowed to see\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_manager_edit'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"manager_edit\" data-toggle-on=\"', isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"manager_edit_input\" name=\"manager_edit_input\" value=\"', isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\n// Managers can move items they are allowed to see\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_manager_move_item'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"manager_move_item\" data-toggle-on=\"', isset($SETTINGS['manager_move_item']) && $SETTINGS['manager_move_item'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"manager_move_item_input\" name=\"manager_move_item_input\" value=\"', isset($SETTINGS['manager_move_item']) && $SETTINGS['manager_move_item'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// max items\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label for=\"max_last_items\">'.$LANG['max_last_items'].'</label>\n                    </td><td>\n                    <input type=\"text\" size=\"4\" id=\"max_last_items\" name=\"max_last_items\" value=\"', isset($SETTINGS['max_latest_items']) ? $SETTINGS['max_latest_items'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Duplicate folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"duplicate_folder\" data-toggle-on=\"', isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"duplicate_folder_input\" name=\"duplicate_folder_input\" value=\"', isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Duplicate item name\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_item'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"duplicate_item\" data-toggle-on=\"', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"duplicate_item_input\" name=\"duplicate_item_input\" value=\"', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Duplicate item name in same folder - item_duplicate_in_same_folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['duplicate_item_in_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"item_duplicate_in_same_folder\" data-toggle-on=\"', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"item_duplicate_in_same_folder_input\" name=\"item_duplicate_in_same_folder_input\" value=\"', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable show_only_accessible_folders\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['show_only_accessible_folders'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['show_only_accessible_folders_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"show_only_accessible_folders\" data-toggle-on=\"', isset($SETTINGS['show_only_accessible_folders']) && $SETTINGS['show_only_accessible_folders'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"show_only_accessible_folders_input\" name=\"show_only_accessible_folders_input\" value=\"', isset($SETTINGS['show_only_accessible_folders']) && $SETTINGS['show_only_accessible_folders'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable subfolder_rights_as_parent\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['subfolder_rights_as_parent'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['subfolder_rights_as_parent_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"subfolder_rights_as_parent\" data-toggle-on=\"', isset($SETTINGS['subfolder_rights_as_parent']) && $SETTINGS['subfolder_rights_as_parent'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"subfolder_rights_as_parent_input\" name=\"subfolder_rights_as_parent_input\" value=\"', isset($SETTINGS['subfolder_rights_as_parent']) && $SETTINGS['subfolder_rights_as_parent'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable create_item_without_password\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['create_item_without_password'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"create_item_without_password\" data-toggle-on=\"', isset($SETTINGS['create_item_without_password']) && $SETTINGS['create_item_without_password'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"create_item_without_password_input\" name=\"create_item_without_password_input\" value=\"', isset($SETTINGS['create_item_without_password']) && $SETTINGS['create_item_without_password'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable FAVOURITES\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_favourites'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_favourites\" data-toggle-on=\"', isset($SETTINGS['enable_favourites']) && $SETTINGS['enable_favourites'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_favourites_input\" name=\"enable_favourites_input\" value=\"', isset($SETTINGS['enable_favourites']) && $SETTINGS['enable_favourites'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable USER can create folders\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_user_can_create_folders'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_user_can_create_folders\" data-toggle-on=\"', isset($SETTINGS['enable_user_can_create_folders']) && $SETTINGS['enable_user_can_create_folders'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_user_can_create_folders_input\" name=\"enable_user_can_create_folders_input\" value=\"', isset($SETTINGS['enable_user_can_create_folders']) && $SETTINGS['enable_user_can_create_folders'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable can_create_root_folder\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['setting_can_create_root_folder'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"can_create_root_folder\" data-toggle-on=\"', isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"can_create_root_folder_input\" name=\"can_create_root_folder_input\" value=\"', isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable enable_massive_move_delete\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_massive_move_delete'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['enable_massive_move_delete_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_massive_move_delete\" data-toggle-on=\"', isset($SETTINGS['enable_massive_move_delete']) && $SETTINGS['enable_massive_move_delete'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_massive_move_delete_input\" name=\"enable_massive_move_delete_input\" value=\"', isset($SETTINGS['enable_massive_move_delete']) && $SETTINGS['enable_massive_move_delete'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable activate_expiration\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['admin_setting_activate_expiration'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_setting_activate_expiration_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"activate_expiration\" data-toggle-on=\"', isset($SETTINGS['activate_expiration']) && $SETTINGS['activate_expiration'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"activate_expiration_input\" name=\"activate_expiration_input\" value=\"', isset($SETTINGS['activate_expiration']) && $SETTINGS['activate_expiration'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable enable_delete_after_consultation\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['admin_setting_enable_delete_after_consultation'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_setting_enable_delete_after_consultation_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_delete_after_consultation\" data-toggle-on=\"', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_delete_after_consultation_input\" name=\"enable_delete_after_consultation_input\" value=\"', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable Printing\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_printing'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_printing_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"allow_print\" data-toggle-on=\"', isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"allow_print_input\" name=\"allow_print_input\" value=\"', isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\n// Enable Printing Groups - roles_allowed_to_print\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_roles_allowed_to_print'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_roles_allowed_to_print_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"hidden\" id=\"roles_allowed_to_print\" name=\"roles_allowed_to_print\" value=\"', isset($SETTINGS['roles_allowed_to_print']) ? $SETTINGS['roles_allowed_to_print'] : '', '\" />\n                    <select id=\"roles_allowed_to_print_select\" name=\"roles_allowed_to_print_select\" class=\"text ui-widget-content\" multiple=\"multiple\" onchange=\"refreshInput()\">';\nif (!isset($SETTINGS['roles_allowed_to_print']) || empty($SETTINGS['roles_allowed_to_print'])) {\n    $arrRolesToPrint = array();\n} else {\n    $arrRolesToPrint = explode(\";\", $SETTINGS['roles_allowed_to_print']);\n}\n$roles = DB::query(\"SELECT id, title FROM \".prefix_table(\"roles_title\"));\nforeach ($roles as $role) {\n    echo '<option value=\"'.$role['id'].'\"', in_array($role['id'], $arrRolesToPrint) ? ' selected=\"selected\"' : '', '>'.addslashes($role['title']).'</option>';\n}\necho '\n                        </select>\n                </td></tr>';\n// Enable IMPORT\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_importing'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"allow_import\" data-toggle-on=\"', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"allow_import_input\" name=\"allow_import_input\" value=\"', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Enable Item modification by anyone\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_anyone_can_modify'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_anyone_can_modify_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"anyone_can_modify\" data-toggle-on=\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"anyone_can_modify_input\" name=\"anyone_can_modify_input\" value=\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable Item modification by anyone by default\necho '\n                <tr id=\"tr_option_anyone_can_modify_bydefault\"', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : ' style=\"display:none;\"', '><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.htmlentities(strip_tags($LANG['settings_anyone_can_modify_bydefault'])).'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"anyone_can_modify_bydefault\" data-toggle-on=\"', isset($SETTINGS['anyone_can_modify_bydefault']) && $SETTINGS['anyone_can_modify_bydefault'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"anyone_can_modify_bydefault_input\" name=\"anyone_can_modify_bydefault_input\" value=\"', isset($SETTINGS['anyone_can_modify_bydefault']) && $SETTINGS['anyone_can_modify_bydefault'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable restricted_to option\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_restricted_to'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"restricted_to\" data-toggle-on=\"', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"restricted_to_input\" name=\"restricted_to_input\" value=\"', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable restricted_to_roles\necho '\n                <tr id=\"tr_option_restricted_to_roles\" style=\"display:', isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1 ? 'inline' : 'none', ';\"><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['restricted_to_roles'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"restricted_to_roles\" data-toggle-on=\"', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"restricted_to_roles_input\" name=\"restricted_to_roles_input\" value=\"', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable show copy to clipboard small icons\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['copy_to_clipboard_small_icons'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['copy_to_clipboard_small_icons_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"copy_to_clipboard_small_icons\" data-toggle-on=\"', isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"copy_to_clipboard_small_icons_input\" name=\"copy_to_clipboard_small_icons_input\" value=\"', isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// Enable Show description in items list\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_show_description'].'\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"show_description\" data-toggle-on=\"', isset($SETTINGS['show_description']) && $SETTINGS['show_description'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"show_description_input\" name=\"show_description_input\" value=\"', isset($SETTINGS['show_description']) && $SETTINGS['show_description'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// In Tree, display number of Items in subfolders and number of subfolders - tree_counters\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_tree_counters'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_tree_counters_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"tree_counters\" data-toggle-on=\"', isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"tree_counters_input\" name=\"tree_counters_input\" value=\"', isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// nb of items to display by ajax query\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['nb_items_by_query'].'</label>\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['nb_items_by_query_tip']), ENT_QUOTES).'\"></i></span>\n                    </td><td>\n                    <input type=\"text\" size=\"4\" id=\"nb_items_by_query\" name=\"nb_items_by_query\" value=\"', isset($SETTINGS['nb_items_by_query']) ? $SETTINGS['nb_items_by_query'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable sending email on USER login\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_send_email_on_user_login'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_send_email_on_user_login\" data-toggle-on=\"', isset($SETTINGS['enable_send_email_on_user_login']) && $SETTINGS['enable_send_email_on_user_login'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_send_email_on_user_login_input\" name=\"enable_send_email_on_user_login_input\" value=\"', isset($SETTINGS['enable_send_email_on_user_login']) && $SETTINGS['enable_send_email_on_user_login'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable email notification on item shown\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_email_notification_on_item_shown'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_email_notification_on_item_shown\" data-toggle-on=\"', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_email_notification_on_item_shown_input\" name=\"enable_email_notification_on_item_shown_input\" value=\"', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// enable email notification when user password is changed\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['enable_email_notification_on_user_pw_change'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_email_notification_on_user_pw_change\" data-toggle-on=\"', isset($SETTINGS['enable_email_notification_on_user_pw_change']) && $SETTINGS['enable_email_notification_on_user_pw_change'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_email_notification_on_user_pw_change_input\" name=\"enable_email_notification_on_user_pw_change_input\" value=\"', isset($SETTINGS['enable_email_notification_on_user_pw_change']) && $SETTINGS['enable_email_notification_on_user_pw_change'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// enable add manual entries in History\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_insert_manual_entry_item_history'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_insert_manual_entry_item_history_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"insert_manual_entry_item_history\" data-toggle-on=\"', isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"insert_manual_entry_item_history_input\" name=\"insert_manual_entry_item_history_input\" value=\"', isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// OffLine mode options\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>\n                        '.$LANG['settings_offline_mode'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_offline_mode_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"settings_offline_mode\" data-toggle-on=\"', isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"settings_offline_mode_input\" name=\"settings_offline_mode_input\" value=\"', isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// OffLne KEy Level\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label for=\"offline_key_level\">'.$LANG['offline_mode_key_level'].'</label>\n                    </td>\n                    <td>\n                        <select id=\"offline_key_level\" name=\"offline_key_level\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\"', isset($SETTINGS['offline_key_level']) && $SETTINGS['offline_key_level'] == $complex[0] ? ' selected=\"selected\"' : '', '>'.$complex[1].'</option>';\n}\necho '\n                        </select>\n                    </td>\n                </tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// SYSLOG ENABLE\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['syslog_enable'].'</label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"syslog_enable\" data-toggle-on=\"', isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"syslog_enable_input\" name=\"syslog_enable_input\" value=\"', isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n// SYSLOG Host\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-long-arrow-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['syslog_host'].'\n                        </td>\n                        <td>\n                            <input id=\"syslog_host\" name=\"syslog_host\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['syslog_host']) ? 'localhost' : $SETTINGS['syslog_host'], '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SYSLOG port\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-long-arrow-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['syslog_port'].'\n                        </td>\n                        <td>\n                            <input id=\"syslog_port\" name=\"syslog_port\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['syslog_port']) ? '514' : $SETTINGS['syslog_port'], '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n\n// Automatic server password change\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['server_password_change_enable'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['server_password_change_enable_tip']), ENT_QUOTES).'\"></i>&nbsp;</span>\n                    </label>\n                    </td><td>\n                        <div class=\"toggle toggle-modern\" id=\"enable_server_password_change\" data-toggle-on=\"', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"enable_server_password_change_input\" name=\"enable_server_password_change_input\" value=\"', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 ? '1' : '0', '\" />\n                </td></tr>';\n\necho '\n            </table>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e94\necho '\n            <div id=\"tabs-4\">';\n// Check if LDAP extension is loaded\nif (!extension_loaded('ldap')) {\n    echo '\n    <div style=\"margin-bottom:3px;\">\n        <div class=\"ui-widget-content ui-corner-all\" style=\"padding:10px;\">\n            <i class=\"fa fa-warning fa-2x\"></i>&nbsp;'.$LANG['ldap_extension_not_loaded'].'\n        </div>\n    </div>';\n} else {\n    // Enable LDAP mode\n    echo '\n    <div style=\"margin-bottom:3px;\">\n        <table><tr>\n        <td><label for=\"ldap_mode\">'.$LANG['settings_ldap_mode'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_mode_tip']), ENT_QUOTES).'\"></i></label></td>\n        <td><div class=\"toggle toggle-modern\" id=\"ldap_mode\" data-toggle-on=\"', isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_mode_input\" name=\"ldap_mode_input\" value=\"', isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1 ? '1' : '0', '\" /></td>\n        </tr></table>\n    </div>';\n}\n// LDAP inputs\necho '\n            <div id=\"div_ldap_configuration\" ', (isset($SETTINGS['ldap_mode']) && $SETTINGS['ldap_mode'] == 1) ? '' : ' style=\"display:none;\"', '>\n                <div style=\"font-weight:bold;font-size:14px;margin:15px 0px 8px 0px;\">'.$LANG['admin_ldap_configuration'].'</div>\n                <table id=\"ldap_config_values\">';\n// Type\n$ldap_type = isset($SETTINGS['ldap_type']) ? $SETTINGS['ldap_type'] : '';\necho '\n                    <tr>\n                        <td><label for=\"ldap_type\">'.$LANG['settings_ldap_type'].'</label></td>\n                        <td>\n                            <select id=\"ldap_type\" name=\"ldap_type\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\')); showLdapFields($(this).val());\">\n                                <option value=\"0\">-- '.$LANG['select'].' --</option>\n                                <option value=\"windows\"', $ldap_type === 'windows' ? ' selected=\"selected\"' : '', '>Windows / Active Directory</option>\n                                <option value=\"posix\"', $ldap_type === 'posix' ? ' selected=\"selected\"' : '', '>Posix / OpenLDAP (RFC2307)</option>\n                                <option value=\"posix-search\"', $ldap_type === 'posix-search' ? ' selected=\"selected\"' : '', '>Posix / OpenLDAP (RFC2307) Search Based</option>\n                            </select>\n                        </td>\n                    </tr>';\n// Domain\necho '\n                    <tr style=\"display:', (isset($ldap_type)) ? '' : 'none', '\" class=\"tr-windows tr-ldap tr-posix tr-posix-search\">\n                        <td><label for=\"ldap_suffix\">'.$LANG['settings_ldap_domain'].'</label></td>\n                        <td><input type=\"text\" size=\"50\" id=\"ldap_suffix\" name=\"ldap_suffix\" class=\"text ui-widget-content\" title=\"@dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_suffix']) ? $SETTINGS['ldap_suffix'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                    </tr>';\n\n// Domain DN\necho '\n                    <tr style=\"display:', (isset($ldap_type) && $ldap_type != 'posix-search') ? '' : 'none', '\" class=\"tr-windows tr-posix tr-ldap\">\n                        <td><label for=\"ldap_domain_dn\">'.$LANG['settings_ldap_domain_dn'].'</label></td>\n                        <td><input type=\"text\" size=\"50\" id=\"ldap_domain_dn\" name=\"ldap_domain_dn\" class=\"text ui-widget-content\" title=\"dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_domain_dn']) ? $SETTINGS['ldap_domain_dn'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                    </tr>';\n/*\n// Subtree for posix / openldap\n        echo '\n                <tr>\n                    <td><label for=\"ldap_suffix\">'.$LANG['settings_ldap_domain_posix'].'</label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_suffix\" name=\"ldap_suffix\" class=\"text ui-widget-content\" title=\"@dc=example,dc=com\" value=\"', isset($SETTINGS['ldap_suffix']) ? $SETTINGS['ldap_suffix'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n*/\n// LDAP username attribute\n        // LDAP Object Class\n        echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_object_class\">'.$LANG['settings_ldap_object_class'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_object_class_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_object_class\" name=\"ldap_object_class\" class=\"text ui-widget-content\" title=\"Person\" value=\"',\n                    isset($SETTINGS['ldap_object_class']) ? $SETTINGS['ldap_object_class'] : 'posixAccount', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n        echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_user_attribute\">'.$LANG['settings_ldap_user_attribute'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_user_attribute_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_user_attribute\" name=\"ldap_user_attribute\" class=\"text ui-widget-content\" title=\"uid\" value=\"',\n                        isset($SETTINGS['ldap_user_attribute']) ? $SETTINGS['ldap_user_attribute'] : 'uid', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_usergroup\">'.$LANG['settings_ldap_usergroup'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_usergroup_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_usergroup\" name=\"ldap_usergroup\" class=\"text ui-widget-content\" title=\"uid\" value=\"',\n                        isset($SETTINGS['ldap_usergroup']) ? $SETTINGS['ldap_usergroup'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BIND DN for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_bind_dn\">'.$LANG['settings_ldap_bind_dn'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_bind_dn_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_bind_dn\" name=\"ldap_bind_dn\" class=\"text ui-widget-content\" title=\"uid=teampass,ou=people,dc=mydomain,dc=local\" value=\"', isset($SETTINGS['ldap_bind_dn']) ? $SETTINGS['ldap_bind_dn'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BIND PASSWD for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_bind_passwd\">'.$LANG['settings_ldap_bind_passwd'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_bind_passwd_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_bind_passwd\" name=\"ldap_bind_passwd\" class=\"text ui-widget-content\" title=\"123password456\" value=\"', isset($SETTINGS['ldap_bind_passwd']) ? $SETTINGS['ldap_bind_passwd'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n                // LDAP BASE for search\n                echo '\n                <tr style=\"display:', (isset($ldap_type) && $ldap_type === 'posix-search') ? '' : 'none', '\" class=\"tr-posix-search tr-ldap\">\n                    <td><label for=\"ldap_search_base\">'.$LANG['settings_ldap_search_base'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_search_base_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_search_base\" name=\"ldap_search_base\" class=\"text ui-widget-content\" title=\"ou=people,dc=octopoos,dc=local\" value=\"', isset($SETTINGS['ldap_search_base']) ? $SETTINGS['ldap_search_base'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// Domain controler\necho '\n                <tr>\n                    <td><label for=\"ldap_domain_controler\">'.$LANG['settings_ldap_domain_controler'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_domain_controler_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_domain_controler\" name=\"ldap_domain_controler\" class=\"text ui-widget-content\" title=\"dc01.mydomain.local,dc02.mydomain.local\" value=\"', isset($SETTINGS['ldap_domain_controler']) ? $SETTINGS['ldap_domain_controler'] : '', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// AD Port\n    echo '\n                <tr>\n                    <td><label for=\"ldap_port\">'.$LANG['settings_ldap_port'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_port_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td><input type=\"text\" size=\"50\" id=\"ldap_port\" name=\"ldap_port\" class=\"text ui-widget-content\" title=\"389\" value=\"', isset($SETTINGS['ldap_port']) ? $SETTINGS['ldap_port'] : '389', '\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" /></td>\n                </tr>';\n\n// AD SSL\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_ssl'].'</label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_ssl\" data-toggle-on=\"', isset($SETTINGS['ldap_ssl']) && $SETTINGS['ldap_ssl'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_ssl_input\" name=\"ldap_ssl_input\" value=\"', isset($SETTINGS['ldap_ssl']) && $SETTINGS['ldap_ssl'] == 1 ? '1' : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\n// AD TLS\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_tls'].'</label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_tls\" data-toggle-on=\"', isset($SETTINGS['ldap_tls']) && $SETTINGS['ldap_tls'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_tls_input\" name=\"ldap_tls_input\" value=\"', isset($SETTINGS['ldap_tls']) && $SETTINGS['ldap_tls'] == 1 ? '1' : '0', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>';\n\n// Enable only localy declared users with tips help\necho '\n                <tr>\n                    <td><label>'.$LANG['settings_ldap_elusers'].'&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_ldap_elusers_tip']), ENT_QUOTES).'\"></i></label></td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"ldap_elusers\" data-toggle-on=\"', isset($SETTINGS['ldap_elusers']) && $SETTINGS['ldap_elusers'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"ldap_elusers_input\" name=\"ldap_elusers_input\" value=\"', isset($SETTINGS['ldap_elusers']) && $SETTINGS['ldap_elusers'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>';\necho '\n                </table>';\n\n// Test LDAP configuration\necho '\n                <div style=\"font-weight:bold;font-size:14px;margin:15px 0px 8px 0px;\">\n                    '.$LANG['ldap_test_config'].'\n                </div>\n                    <table>\n                        <tr>\n                            <td><label>'.htmlentities($LANG['ldap_test_username']).'</label></td>\n                            <td><input type=\"text\" size=\"50\" id=\"ldap_test_username\" class=\"text ui-widget-content\" value=\"\" class=\"text ui-widget-content\" /></td>\n                        </tr>\n                        <tr>\n                            <td><label>'.htmlentities($LANG['ldap_test_username_pwd']).'</label></td>\n                            <td><input type=\"password\" size=\"50\" id=\"ldap_test_pwd\" class=\"text ui-widget-content\" value=\"\" class=\"text ui-widget-content\" /></td>\n                        </tr>\n                        <tr>\n                            <td><label for=\"ldap_test_no_username\">'.htmlentities($LANG['no_username_needed']).'</label></td>\n                            <td><input type=\"checkbox\" size=\"50\" id=\"ldap_test_no_username\" /></td>\n                        </tr>\n                        <tr>\n                            <td colspan=\"2\">\n                                <div id=\"ldap_test_msg\" class=\"ui-widget-content ui-state-focus ui-corner-all\" style=\"padding:10px; display:none;\"></div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td><b>'.htmlentities($LANG['admin_action_db_backup_start_tip']).'</b></td>\n                            <td><span class=\"fa-stack\" onclick=\"LaunchAdminActions(\\'admin_ldap_test_configuration\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span></td>\n                        </tr>\n                    </table>';\n\necho '\n            </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e95\necho '\n            <div id=\"tabs-5\">\n                <div class=\"\" style=\"padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_one_shot_backup'].'</b>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table width=\"100%\">';\n// Backup the DB\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td width=\"35%\">\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_action_db_backup'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <span id=\"result_admin_action_db_backup_get_key\" style=\"margin-left:10px; text-align:left;\">\n                            &nbsp;'.$LANG['encrypt_key'].'<input type=\"password\" size=\"20\" id=\"result_admin_action_db_backup_key\" />\n                            &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_key_tip']), ENT_QUOTES).'\"></i>&nbsp;\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_db_backup\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </span>\n                        <span id=\"result_admin_action_db_backup\" style=\"margin-left:10px;\"></span>\n                        </td>\n                    </tr>';\n// Restore the DB\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_action_db_restore'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_restore_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <span id=\"result_admin_action_db_restore\" style=\"margin-left:10px;\"></span>\n                        <div id=\"upload_container_restoreDB\">\n                            <div id=\"filelist_restoreDB\"></div><br />\n                            <span id=\"pickfiles_restoreDB\" class=\"fa-stack tip\" title=\"'.htmlentities($LANG['select'], ENT_QUOTES).'\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </div>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>';\n\necho '\n                <div class=\"\" style=\"0padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_script_backups'].'</b>&nbsp;\n                    <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backups_tip']), ENT_QUOTES).'\"></i></span>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table width=\"100%\">';\n// Backups script path\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td width=\"35%\">\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_path'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_path_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_path\" name=\"bck_script_path\" type=\"text\" size=\"60px\" value=\"', isset($SETTINGS['bck_script_path']) ? $SETTINGS['bck_script_path'] : $SETTINGS['cpassman_dir'].'/backups', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Backups script name\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_filename'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_filename_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_filename\" name=\"bck_script_filename\" type=\"text\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_filename']) ? $SETTINGS['bck_script_filename'] : 'bck_teampass', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Backup key\nif (isset($SETTINGS['bck_script_passkey'])) {\n    require_once './sources/main.functions.php';\n    $currentKey = cryption(\n        $SETTINGS['bck_script_passkey'],\n        \"\",\n        \"decrypt\"\n    )['string'];\n} else {\n    $currentKey = \"\";\n}\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_secret'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_secret_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_passkey\" name=\"bck_script_passkey\" type=\"text\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_passkey']) ? $currentKey : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        &nbsp;\n                        <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['pw_generate']), ENT_QUOTES).'\" onclick=\"generateAndStoreBackupPass();\" style=\"cursor:pointer;\">\n                            <i class=\"fa fa-square fa-stack-2x\"></i>\n                            <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                        </span>\n                        </td>\n                    </tr>';\n// Backups script encryption\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_encryption'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_encryption_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_key\" name=\"bck_script_key\" type=\"password\" size=\"50px\" value=\"', isset($SETTINGS['bck_script_key']) ? $SETTINGS['bck_script_key'] : '', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// Decrypt SQL file\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        '.$LANG['admin_script_backup_decrypt'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_script_backup_decrypt_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                        <input id=\"bck_script_decrypt_file\" name=\"bck_script_decrypt_file\" type=\"text\" size=\"50px\" value=\"\" />\n                        &nbsp;\n                        <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_action_backup_decrypt\\')\" style=\"cursor:pointer;\">\n                            <i class=\"fa fa-square fa-stack-2x\"></i>\n                            <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                        </span>\n                        </td>\n                    </tr>';\n\necho '\n                    <tr>\n                        <td></td>\n                        <td>\n                            <div id=\"result_admin_script_backup\" class=\"ui-state-focus ui-corner-all\" style=\"padding:3px; display:none;\"></div>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// --------------------------------------------------------------------------------\n// TAB N\u00e96\necho '\n            <div id=\"tabs-6\">\n                <div class=\"\" style=\"padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_emails_configuration'].'</b>\n                </div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table>';\n// SMTP server\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_smtp_server'].'\n                        </td>\n                        <td>\n                            <input type=\"text\" size=\"80\" id=\"email_smtp_server\" name=\"email_smtp_server\" value=\"', !isset($SETTINGS['email_smtp_server']) ? $smtp_server : $SETTINGS['email_smtp_server'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP auth\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth'].'\n                        </td>\n                        <td>\n                            <div class=\"toggle toggle-modern\" id=\"email_smtp_auth\" data-toggle-on=\"', isset($SETTINGS['email_smtp_auth']) && $SETTINGS['email_smtp_auth'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"email_smtp_auth_input\" name=\"email_smtp_auth_input\" value=\"', isset($SETTINGS['email_smtp_auth']) && $SETTINGS['email_smtp_auth'] == 1 ? '1' : '0', '\" />\n                        </td>\n                    </tr>';\n// SMTP auth username\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth_username'].'\n                        </td>\n                        <td>\n                            <input id=\"email_auth_username\" name=\"email_auth_username\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_auth_username']) ? $smtp_auth_username : $SETTINGS['email_auth_username'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP auth pwd\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_auth_pwd'].'\n                        </td>\n                        <td>\n                            <input id=\"email_auth_pwd\" name=\"email_auth_pwd\" type=\"password\" size=\"40px\" value=\"', !isset($SETTINGS['email_auth_pwd']) ? $smtp_auth_password : $SETTINGS['email_auth_pwd'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP server url\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_server_url'].'\n                        <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_server_url_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <input id=\"email_server_url\" name=\"email_server_url\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_server_url']) ? $SETTINGS['cpassman_url'] : $SETTINGS['email_server_url'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP port\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_port'].'\n                        </td>\n                        <td>\n                            <input id=\"email_port\" name=\"email_port\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_port']) ? '25' : $SETTINGS['email_port'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP security\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_security'].'\n                        </td>\n                        <td>\n                            <select id=\"email_security\" name=\"email_security\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\">\n                            <option value=\"none\"', !isset($SETTINGS['email_security']) || $SETTINGS['email_security'] == \"none\" ? ' selected=\"selected\"' : \"\", '>None</option>\n                            <option value=\"ssl\"', isset($SETTINGS['email_security']) && $SETTINGS['email_security'] == \"ssl\" ? ' selected=\"selected\"' : \"\", '>SSL</option>\n                            <option value=\"tls\"', isset($SETTINGS['email_security']) && $SETTINGS['email_security'] == \"tls\" ? ' selected=\"selected\"' : \"\", '>TLS</option>\n                        </select>\n                        </td>\n                    </tr>';\n// SMTP from\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_from'].'\n                        </td>\n                        <td>\n                            <input id=\"email_from\" name=\"email_from\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_from']) ? $email_from : $SETTINGS['email_from'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n// SMTP from name\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                            <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_from_name'].'\n                        </td>\n                        <td>\n                            <input id=\"email_from_name\" name=\"email_from_name\" type=\"text\" size=\"40px\" value=\"', !isset($SETTINGS['email_from_name']) ? $email_from_name : $SETTINGS['email_from_name'], '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>';\n\necho '\n                <div class=\"\" style=\"0padding: 0 .7em;\">\n                   <i class=\"fa fa-chevron-circle-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <b>'.$LANG['admin_emails_configuration_testing'].'</b>\n                </div>\n                <div id=\"email_testing_results\" class=\"ui-state-error ui-corner-all\" style=\"padding:5px;display:none;margin:2px;\"></div>\n                <div style=\"margin:0 0 5px 20px;\">\n                    <table>';\n// Test email configuration\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.$LANG['admin_email_test_configuration'].'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_test_configuration_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_email_test_configuration\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </td>\n                    </tr>';\n// Send emails backlog\nDB::query(\"SELECT * FROM \".prefix_table(\"emails\").\" WHERE status = %s OR status = %s\", 'not_sent', '');\n$nb_emails = DB::count();\necho '\n                    <tr style=\"margin-bottom:3px\">\n                        <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                            '.str_replace(\"#nb_emails#\", $nb_emails, $LANG['admin_email_send_backlog']).'\n                            <span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['admin_email_send_backlog_tip']), ENT_QUOTES).'\"></i></span>\n                        </td>\n                        <td>\n                            <span class=\"fa-stack tip\" title=\"'.htmlentities(strip_tags($LANG['admin_action_db_backup_start_tip']), ENT_QUOTES).'\" onclick=\"LaunchAdminActions(\\'admin_email_send_backlog\\')\" style=\"cursor:pointer;\">\n                                <i class=\"fa fa-square fa-stack-2x\"></i>\n                                <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                            </span>\n                        </td>\n                    </tr>';\n\necho '\n                    </table>\n                </div>\n            </div>';\n// --------------------------------------------------------------------------------\n// TAB N\u00b07\necho '\n            <div id=\"tabs-7\">\n                <table width=\"100%\">';\n// Max file size\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_maxfilesize'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_maxfilesize_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_maxfilesize\" name=\"upload_maxfilesize\" value=\"', isset($SETTINGS['upload_maxfilesize']) ? $SETTINGS['upload_maxfilesize'] : '10', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Documents\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_docext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_docext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_docext\" name=\"upload_docext\" value=\"', isset($SETTINGS['upload_docext']) ? $SETTINGS['upload_docext'] : 'doc,docx,dotx,xls,xlsx,xltx,rtf,csv,txt,pdf,ppt,pptx,pot,dotx,xltx', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Images\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imagesext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_imagesext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_imagesext\" name=\"upload_imagesext\" value=\"', isset($SETTINGS['upload_imagesext']) ? $SETTINGS['upload_imagesext'] : 'jpg,jpeg,gif,png', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Packages\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_pkgext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_pkgext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_pkgext\" name=\"upload_pkgext\" value=\"', isset($SETTINGS['upload_pkgext']) ? $SETTINGS['upload_pkgext'] : '7z,rar,tar,zip', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\n// Extension for Other\necho '\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_otherext'].\n                    '<span style=\"margin-left:0px;\">&nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_otherext_tip']), ENT_QUOTES).'\"></i></span>\n                    </label>\n                    </td><td>\n                    <input type=\"text\" size=\"70\" id=\"upload_otherext\" name=\"upload_otherext\" value=\"', isset($SETTINGS['upload_otherext']) ? $SETTINGS['upload_otherext'] : 'sql,xml', '\" class=\"text ui-widget-content\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\necho '<tr><td colspan=\"3\"><hr /></td></tr>';\n// Image resize width / height / quality\necho '\n                <tr style=\"margin-bottom:3px\">\n                    <td>\n                        <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                        <label>' .\n                        $LANG['settings_upload_imageresize_options'].'\n                        &nbsp;<i class=\"fa fa-question-circle tip\" title=\"'.htmlentities(strip_tags($LANG['settings_upload_imageresize_options_tip']), ENT_QUOTES).'\"></i>\n                        </label>\n                    </td>\n                    <td>\n                        <div class=\"toggle toggle-modern\" id=\"upload_imageresize_options\" data-toggle-on=\"', isset($SETTINGS['upload_imageresize_options']) && $SETTINGS['upload_imageresize_options'] == 1 ? 'true' : 'false', '\"></div><input type=\"hidden\" id=\"upload_imageresize_options_input\" name=\"upload_imageresize_options_input\" value=\"', isset($SETTINGS['upload_imageresize_options']) && $SETTINGS['upload_imageresize_options'] == 1 ? '1' : '0', '\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_w'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_width\" name=\"upload_imageresize_width\" value=\"',\n                        isset($SETTINGS['upload_imageresize_width']) ? $SETTINGS['upload_imageresize_width'] : '800', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_h'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_height\" name=\"upload_imageresize_height\" value=\"',\n                        isset($SETTINGS['upload_imageresize_height']) ? $SETTINGS['upload_imageresize_height'] : '600', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                    </td>\n                </tr>\n                <tr><td>\n                    <i class=\"fa fa-chevron-right mi-grey-1\" style=\"margin-right: .3em;\">&nbsp;</i>\n                    <label>'.$LANG['settings_upload_imageresize_options_q'].\n                    '</label>\n                    </td><td>\n                    <input type=\"text\" size=\"5\" id=\"upload_imageresize_quality\" name=\"upload_imageresize_quality\" value=\"',\n                        isset($SETTINGS['upload_imageresize_quality']) ? $SETTINGS['upload_imageresize_quality'] : '90', '\" class=\"text ui-widget-content upl_img_opt\" onchange=\"updateSetting($(this).attr(\\'id\\'));\" />\n                </td></tr>';\necho '\n                <tr><td colspan=\"3\"><hr /></td></tr>';\necho '\n                </table>\n            </div>';\n// --------------------------------------------------------------------------------\n\necho '\n        </div>';\n\necho '\n    </form>\n</div>';\n\necho '\n<input id=\"restore_bck_fileObj\" name=\"restore_bck_fileObj\" type=\"hidden\" value=\"\" />\n<div id=\"restore_bck_encryption_key_dialog\" style=\"display:none; text-align:center;\">\n    <input id=\"restore_bck_encryption_key\" name=\"restore_bck_encryption_key\" type=\"text\" value=\"\" />\n    <br>\n    <div class=\"ui-state-error ui-corner-all\" style=\"display:none;padding:5px;display:none;margin:2px;\" id=\"restore_bck_encryption_key_dialog_error\"></div>\n</div>';\ninclude \"admin.settings.load.php\";\n", "<?php\n/**\n *\n * @file          (api)functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.0\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\n$api_version = \"2.0\";\n$_SESSION['CPM'] = 1;\nrequire_once \"../includes/config/include.php\";\nrequire_once \"../sources/main.functions.php\";\n\nfunction get_ip()\n{\n    if (function_exists('apache_request_headers')) {\n        $headers = apache_request_headers();\n    } else {\n        $headers = $_SERVER;\n    }\n    if (array_key_exists('X-Forwarded-For', $headers) && filter_var($headers['X-Forwarded-For'], FILTER_VALIDATE_IP)) {\n        $the_ip = $headers['X-Forwarded-For'];\n    } elseif (array_key_exists('HTTP_X_FORWARDED_FOR', $headers) && filter_var($headers['HTTP_X_FORWARDED_FOR'], FILTER_VALIDATE_IP)) {\n        $the_ip = $headers['HTTP_X_FORWARDED_FOR'];\n    } else {\n        $the_ip = filter_var($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n    }\n    return $the_ip;\n}\n\n\nfunction teampass_api_enabled()\n{\n    teampass_connect();\n    $response = DB::queryFirstRow(\n        \"SELECT `valeur` FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\",\n        \"admin\",\n        \"api\"\n    );\n    return $response['valeur'];\n}\n\nfunction teampass_whitelist()\n{\n    teampass_connect();\n    $apiip_pool = teampass_get_ips();\n    if (count($apiip_pool) > 0 && array_search(get_ip(), $apiip_pool) === false) {\n        rest_error('IPWHITELIST');\n    }\n}\n\nfunction teampass_connect()\n{\n    global $server, $user, $pass, $database, $link, $port, $encoding;\n    require_once(\"../includes/config/settings.php\");\n    require_once('../includes/libraries/Database/Meekrodb/db.class.php');\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n}\n\nfunction teampass_get_ips()\n{\n    $array_of_results = array();\n    teampass_connect();\n    $response = DB::query(\"select value from \".prefix_table(\"api\").\" WHERE type = %s\", \"ip\");\n    foreach ($response as $data) {\n        array_push($array_of_results, $data['value']);\n    }\n\n    return $array_of_results;\n}\n\nfunction teampass_get_keys()\n{\n    teampass_connect();\n    $response = DB::queryOneColumn(\"value\", \"select * from \".prefix_table(\"api\").\" WHERE type = %s\", \"key\");\n\n    return $response;\n}\n\nfunction rest_head()\n{\n    header('HTTP/1.1 402 Payment Required');\n}\n\nfunction addToCacheTable($item_id)\n{\n    teampass_connect();\n    // get data\n    $data = DB::queryfirstrow(\n        \"SELECT i.label AS label, i.description AS description, i.id_tree AS id_tree, i.perso AS perso, i.restricted_to AS restricted_to, i.login AS login, i.id AS id\n        FROM \".prefix_table(\"items\").\" AS i\n        AND \".prefix_table(\"log_items\").\" AS l ON (l.id_item = i.id)\n        WHERE i.id = %i\n        AND l.action = %s\",\n        intval($item_id),\n        at_creation\n    );\n\n    // Get all TAGS\n    $tags = \"\";\n    $data_tags = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $item_id);\n    foreach ($data_tags as $itemTag) {\n        if (!empty($itemTag['tag'])) {\n            $tags .= $itemTag['tag'].\" \";\n        }\n    }\n\n    // finaly update\n    DB::insert(\n        prefix_table(\"cache\"),\n        array(\n            \"id\" => $data['id'],\n            \"label\" => $data['label'],\n            \"description\" => $data['description'],\n            \"tags\" => $tags,\n            \"id_tree\" => $data['id_tree'],\n            \"perso\" => $data['perso'],\n            \"restricted_to\" => $data['restricted_to'],\n            \"login\" => $data['login'],\n            \"folder\" => \"\",\n            //\"restricted_to\" => \"0\",\n            \"author\" => API_USER_ID,\n            \"renewal_period\" => 0,\n            \"timestamp\" => time(),\n            \"url\" => 0\n        )\n    );\n}\n\n\n/**\n * @param string $setting\n */\nfunction getSettingValue($setting)\n{\n    // get default language\n    $set = DB::queryFirstRow(\n        \"SELECT `valeur` FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\",\n        \"admin\",\n        $setting\n    );\n\n    return $set['valeur'];\n}\n\nfunction rest_delete()\n{\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n    if (apikey_checker($GLOBALS['apikey'])) {\n        include \"../sources/main.functions.php\";\n        teampass_connect();\n        $category_query = \"\";\n\n        if ($GLOBALS['request'][0] == \"write\") {\n            if ($GLOBALS['request'][1] == \"category\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (count($array_category) > 1 && count($array_category) < 5) {\n                    for ($i = count($array_category); $i > 0; $i--) {\n                        $slot = $i - 1;\n                        if (!$slot) {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[$slot], FILTER_SANITIZE_STRING).\"' AND parent_id = 0\";\n                        } else {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[$slot], FILTER_SANITIZE_STRING).\"' AND parent_id = (\";\n                        }\n                    }\n                    for ($i = 1; $i < count($array_category); $i++) {\n                        $category_query .= \")\";\n                    }\n                } elseif (count($array_category) == 1) {\n                    $category_query = \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[0], FILTER_SANITIZE_STRING).\"' AND parent_id = 0\";\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                // Delete items which in category\n                $response = DB::delete(prefix_table(\"items\"), \"id_tree = (\".$category_query.\")\");\n                // Delete sub-categories which in category\n                $response = DB::delete(prefix_table(\"nested_tree\"), \"parent_id = (\".$category_query.\")\");\n                // Delete category\n                $response = DB::delete(prefix_table(\"nested_tree\"), \"id = (\".$category_query.\")\");\n\n                $json['type'] = 'category';\n                $json['category'] = $GLOBALS['request'][2];\n                if ($response) {\n                    $json['status'] = 'OK';\n                } else {\n                    $json['status'] = 'KO';\n                }\n            } elseif ($GLOBALS['request'][1] == \"item\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n                $item = $GLOBALS['request'][3];\n\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $item, $result)) {\n                    rest_error('ITEM_MALFORMED');\n                } elseif (empty($item) || count($array_category) == 0) {\n                    rest_error('MALFORMED');\n                }\n\n                if (count($array_category) > 1 && count($array_category) < 5) {\n                    for ($i = count($array_category); $i > 0; $i--) {\n                        $slot = $i - 1;\n                        if (!$slot) {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[$slot], FILTER_SANITIZE_STRING).\"' AND parent_id = 0\";\n                        } else {\n                            $category_query .= \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[$slot], FILTER_SANITIZE_STRING).\"' AND parent_id = (\";\n                        }\n                    }\n                    for ($i = 1; $i < count($array_category); $i++) {\n                        $category_query .= \")\";\n                    }\n                } elseif (count($array_category) == 1) {\n                    $category_query = \"select id from \".prefix_table(\"nested_tree\").\" where title LIKE '\".filter_var($array_category[0], FILTER_SANITIZE_STRING).\"' AND parent_id = 0\";\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                // Delete item\n                $response = DB::delete(prefix_table(\"items\"), \"id_tree = (\".$category_query.\") and label LIKE '\".filter_var($item, FILTER_SANITIZE_STRING).\"'\");\n                $json['type'] = 'item';\n                $json['item'] = $item;\n                $json['category'] = $GLOBALS['request'][2];\n                if ($response) {\n                    $json['status'] = 'OK';\n                } else {\n                    $json['status'] = 'KO';\n                }\n            }\n\n            if ($json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } else {\n            rest_error('METHOD');\n        }\n    }\n}\n\nfunction rest_get()\n{\n    global $api_version;\n    global $SETTINGS;\n\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n\n    if (apikey_checker($GLOBALS['apikey'])) {\n        teampass_connect();\n\n        // define the API user through the LABEL of apikey\n        $api_info = DB::queryFirstRow(\n            \"SELECT label\n            FROM \".prefix_table(\"api\").\"\n            WHERE value = %s\",\n            $GLOBALS['apikey']\n        );\n\n        // Load config\n        if (file_exists('../includes/config/tp.config.php')) {\n            require_once '../includes/config/tp.config.php';\n        } else {\n            throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n        }\n\n        if ($GLOBALS['request'][0] == \"read\") {\n            if ($GLOBALS['request'][1] == \"folder\") {\n                /*\n                * READ FOLDERS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get ids\n                if (strpos($GLOBALS['request'][2], \";\") > 0) {\n                    $condition = \"id_tree IN %ls\";\n                    $condition_value = explode(';', $GLOBALS['request'][2]);\n                } else {\n                    $condition = \"id_tree = %s\";\n                    $condition_value = $GLOBALS['request'][2];\n                }\n\n                // get items in this folder\n                $response = DB::query(\n                    \"SELECT id, label, login, pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif='0' AND \".$condition,\n                    $condition_value\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = $data['id'];\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption(\n                        $data['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n\n                    $inc++;\n                }\n            } elseif ($GLOBALS['request'][1] == \"userpw\") {\n                /*\n                * READ USER ITEMS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // about the user\n                $username = $GLOBALS['request'][2];\n                if (strcmp($username, \"admin\") == 0) {\n                    // forbid admin access\n                }\n                $response = DB::query(\n                    \"SELECT fonction_id\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE login = %s'\",\n                    $username\n                );\n                if (count($response) === 0) {\n                    rest_error('USER_NOT_EXISTS');\n                }\n                foreach ($response as $data) {\n                    $role_str = $data['fonction_id'];\n                }\n                $folder_arr = array();\n                $roles = explode(\";\", $role_str);\n                foreach ($roles as $role) {\n                    $response = DB::query(\n                        \"SELECT folder_id\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE role_id = %i\",\n                        $role\n                    );\n                    foreach ($response as $data) {\n                        $folder_id = $data['folder_id'];\n                        if (!array_key_exists($folder_id, $folder_arr)) {\n                            array_push($folder_arr, $folder_id);\n                        }\n                    }\n                }\n                $folder_str = array_filter($folder_arr);\n\n                // get ids\n                if (is_array($folder_str)) {\n                    $condition = \"id_tree IN %ls\";\n                    $condition_value = $folder_str;\n                } else {\n                    $condition = \"id_tree = %s\";\n                    $condition_value = $folder_str;\n                }\n\n                $data = \"\";\n                // get items in this module\n                $response = DB::query(\n                    \"SELECT id,label,url,login,pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif='0' AND \".$condition,\n                    $condition_value\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$data['id']]['id'] = $data['id'];\n                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$data['id']]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$data['id']]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$data['id']]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$data['id']]['pw'] = $crypt_pw['string'];\n                    $json[$data['id']]['folder_id'] = $data['id_tree'];\n                    $json[$data['id']]['path'] = $path;\n\n                    $inc++;\n                }\n            } elseif ($GLOBALS['request'][1] == \"userfolders\") {\n                /*\n                * READ USER FOLDERS\n                * Sends back a list of folders\n                */\n                $json = \"\";\n                $username = $GLOBALS['request'][2];\n                if (strcmp($username, \"admin\") == 0) {\n                    // forbid admin access\n                }\n                $response = DB::query(\n                    \"SELECT fonction_id\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE login = %s\",\n                    $username\n                );\n                if (count($response) === 0) {\n                    rest_error('USER_NOT_EXISTS');\n                }\n                foreach ($response as $data) {\n                    $role_str = $data['fonction_id'];\n                }\n\n                $folder_arr = array();\n                $roles = explode(\";\", $role_str);\n                $inc = 0;\n                foreach ($roles as $role) {\n                    $response = DB::query(\n                        \"SELECT folder_id, type\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE role_id = %i\",\n                        $role\n                    );\n                    foreach ($response as $data) {\n                        $folder_id = $data['folder_id'];\n                        if (!array_key_exists($folder_id, $folder_arr)) {\n                            array_push($folder_arr, $folder_id);\n\n                            $response2 = DB::queryFirstRow(\n                                \"SELECT title, nlevel\n                                FROM \".prefix_table(\"nested_tree\").\"\n                                WHERE id = %i\",\n                                $folder_id\n                            );\n\n                            if (!empty($response2['title'])) {\n                                $json[$folder_id]['id'] = $folder_id;\n                                $json[$folder_id]['title'] = $response2['title'];\n                                $json[$folder_id]['level'] = $response2['nlevel'];\n                                $json[$folder_id]['access_type'] = $data['type'];\n                                $inc++;\n                            }\n                        }\n                    }\n                }\n            } elseif ($GLOBALS['request'][1] == \"items\") {\n                /*\n                * READ ITEMS asked\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get parameters\n                $array_items = explode(';', $GLOBALS['request'][2]);\n\n                // check if not empty\n                if (count($array_items) == 0) {\n                    rest_error('NO_ITEM');\n                }\n\n                // only accepts numeric\n                foreach ($array_items as $item) {\n                    if (!is_numeric($item)) {\n                        rest_error('ITEM_MALFORMED');\n                    }\n                }\n\n                $response = DB::query(\n                    \"SELECT id,label,login,pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE inactif = %i AND id IN %ls\",\n                    \"0\",\n                    $array_items\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = $data['id'];\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n\n                    $inc++;\n                }\n            }\n\n            if (isset($json) && $json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } elseif ($GLOBALS['request'][0] == \"find\") {\n            if ($GLOBALS['request'][1] == \"item\") {\n                /*\n                * FIND ITEMS in FOLDERS\n                */\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                //Load Tree\n                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                $tree->register();\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                // get parameters\n                $array_category = explode(';', $GLOBALS['request'][2]);\n                $item = $GLOBALS['request'][3];\n                foreach ($array_category as $category) {\n                    if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $category, $result)) {\n                        rest_error('CATEGORY_MALFORMED');\n                    }\n                }\n\n                if (!preg_match_all(\"/^([\\w\\:\\'\\-\\s\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd\u00ff]+)$/i\", $item, $result)) {\n                    rest_error('ITEM_MALFORMED');\n                } elseif (empty($item) || count($array_category) == 0) {\n                    rest_error('MALFORMED');\n                }\n\n                if (count($array_category) === 0) {\n                    rest_error('NO_CATEGORY');\n                }\n\n                DB::debugMode(false);\n                $response = DB::query(\n                    \"SELECT id, label, login, pw, pw_iv, url, id_tree, description, email\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE\n                    inactif = %i\n                    AND id_tree IN %ls\n                    AND label LIKE %ss\",\n                    \"0\",\n                    $array_category,\n                    $item\n                );\n                $inc = 0;\n                foreach ($response as $data) {\n                    // build the path to the Item\n                    $path = \"\";\n                    $arbo = $tree->getPath($data['id_tree'], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($path)) {\n                            $path = stripslashes($elem->title);\n                        } else {\n                            $path .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare output\n                    $json[$inc]['id'] = mb_convert_encoding($data['id'], mb_detect_encoding($data['id']), 'UTF-8');\n                    $json[$inc]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                    $json[$inc]['description'] = mb_convert_encoding($data['description'], mb_detect_encoding($data['description']), 'UTF-8');\n                    $json[$inc]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                    $json[$inc]['email'] = mb_convert_encoding($data['email'], mb_detect_encoding($data['email']), 'UTF-8');\n                    $json[$inc]['url'] = mb_convert_encoding($data['url'], mb_detect_encoding($data['url']), 'UTF-8');\n                    $crypt_pw = cryption($data['pw'], \"\", \"decrypt\");\n                    $json[$inc]['pw'] = $crypt_pw['string'];\n                    $json[$inc]['folder_id'] = $data['id_tree'];\n                    $json[$inc]['path'] = $path;\n                    $json[$inc]['status'] = utf8_encode(\"OK\");\n\n                    $inc++;\n                }\n                if (isset($json) && $json) {\n                    echo json_encode($json);\n                } else {\n                    rest_error('EMPTY');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"add\") {\n            if ($GLOBALS['request'][1] == \"item\") {\n                // get sent parameters\n                $params = explode(';', base64_decode($GLOBALS['request'][2]));\n                if (count($params) != 9) {\n                    rest_error('ITEMBADDEFINITION');\n                }\n\n                $item_label = $params[0];\n                $item_pwd = $params[1];\n                $item_desc = $params[2];\n                $item_folder_id = $params[3];\n                $item_login = $params[4];\n                $item_email = $params[5];\n                $item_url = $params[6];\n                $item_tags = $params[7];\n                $item_anyonecanmodify = $params[8];\n\n                // do some checks\n                if (!empty($item_label) && !empty($item_pwd) && !empty($item_folder_id)) {\n                    // Check length\n                    if (strlen($item_pwd) > 50) {\n                        rest_error('PASSWORDTOOLONG');\n                    }\n\n                    // Check Folder ID\n                    DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $item_folder_id);\n                    $counter = DB::count();\n                    if ($counter == 0) {\n                        rest_error('NOSUCHFOLDER');\n                    }\n\n                    // check if element doesn't already exist\n                    $item_duplicate_allowed = getSettingValue(\"duplicate_item\");\n                    if ($item_duplicate_allowed !== \"1\") {\n                        DB::query(\n                            \"SELECT *\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE label = %s AND inactif = %i\",\n                            addslashes($item_label),\n                            \"0\"\n                        );\n                        $counter = DB::count();\n                        if ($counter != 0) {\n                            $itemExists = 1;\n                            // prevent the error if the label already exists\n                            // so lets just add the time() as a random factor\n                            $item_label .= \" (\".time().\")\";\n                        } else {\n                            $itemExists = 0;\n                        }\n                    } else {\n                        $itemExists = 0;\n                    }\n                    if ($itemExists === 0) {\n                        $encrypt = cryption(\n                            $item_pwd,\n                            \"\",\n                            \"encrypt\"\n                        );\n                        if (empty($encrypt['string'])) {\n                            rest_error('PASSWORDEMPTY');\n                        }\n\n                        // ADD item\n                        try {\n                            DB::insert(\n                                prefix_table(\"items\"),\n                                array(\n                                    \"label\" => $item_label,\n                                    \"description\" => $item_desc,\n                                    'pw' => $encrypt['string'],\n                                    'pw_iv' => '',\n                                    \"email\" => $item_email,\n                                    \"url\" => $item_url,\n                                    \"id_tree\" => intval($item_folder_id),\n                                    \"login\" => $item_login,\n                                    \"inactif\" => 0,\n                                    \"restricted_to\" => \"\",\n                                    \"perso\" => 0,\n                                    \"anyone_can_modify\" => intval($item_anyonecanmodify)\n                                )\n                            );\n                            $newID = DB::InsertId();\n\n                            // log\n                            DB::insert(\n                                prefix_table(\"log_items\"),\n                                array(\n                                    \"id_item\" => $newID,\n                                    \"date\" => time(),\n                                    \"id_user\" => API_USER_ID,\n                                    \"action\" => \"at_creation\",\n                                    \"raison\" => $api_info['label']\n                                )\n                            );\n\n                            // Add tags\n                            $tags = explode(' ', $item_tags);\n                            foreach ((array) $tags as $tag) {\n                                if (!empty($tag)) {\n                                    DB::insert(\n                                        prefix_table(\"tags\"),\n                                        array(\n                                            \"item_id\" => $newID,\n                                            \"tag\" => strtolower($tag)\n                                        )\n                                    );\n                                }\n                            }\n\n                            // Update CACHE table\n                            DB::insert(\n                                prefix_table(\"cache\"),\n                                array(\n                                    \"id\" => $newID,\n                                    \"label\" => $item_label,\n                                    \"description\" => $item_desc,\n                                    \"tags\" => $item_tags,\n                                    \"id_tree\" => $item_folder_id,\n                                    \"perso\" => \"0\",\n                                    \"restricted_to\" => \"\",\n                                    \"login\" => $item_login,\n                                    \"folder\" => \"\",\n                                    \"author\" => API_USER_ID,\n                                    \"renewal_period\" => \"0\",\n                                    \"timestamp\" => time(),\n                                    \"url\" => \"0\"\n                                )\n                            );\n\n                            echo '{\"status\":\"item added\" , \"new_item_id\" : \"'.$newID.'\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('ITEMEXISTS');\n                    }\n                } else {\n                    rest_error('ITEMMISSINGDATA');\n                }\n            } elseif ($GLOBALS['request'][1] == \"user\") {\n            /*\n             * Case where a new user has to be added\n             *\n             * Expected call format: .../api/index.php/add/user/<LOGIN>;<NAME>;<LASTNAME>;<PASSWORD>;<EMAIL>;<ADMINISTRATEDBY>;<READ_ONLY>;<ROLE1,ROLE2,...>;<IS_ADMIN>;<ISMANAGER>;<PERSONAL_FOLDER>?apikey=<VALID API KEY>\n             * with:\n             * for READ_ONLY, IS_ADMIN, IS_MANAGER, PERSONAL_FOLDER, accepted value is 1 for TRUE and 0 for FALSE\n             * for ADMINISTRATEDBY and ROLE1, accepted value is the real label (not the IDs)\n             *\n             * Example: /api/index.php/add/user/U4;Nils;Laumaille;test;nils@laumaille.fr;Users;0;Managers,Users;0;1;1?apikey=sae6iekahxiseL3viShoo0chahc1ievei8aequi\n             *\n             */\n\n                // get user definition\n                $array_user = explode(';', base64_decode($GLOBALS['request'][2]));\n                if (count($array_user) != 11) {\n                    rest_error('USERBADDEFINITION');\n                }\n\n                $login = $array_user[0];\n                $name = $array_user[1];\n                $lastname = $array_user[2];\n                $password = $array_user[3];\n                $email = $array_user[4];\n                $adminby = urldecode($array_user[5]);\n                $isreadonly = urldecode($array_user[6]);\n                $roles = urldecode($array_user[7]);\n                $isadmin = $array_user[8];\n                $ismanager = $array_user[9];\n                $haspf = $array_user[10];\n\n                // Empty user\n                if (mysqli_escape_string($link, htmlspecialchars_decode($login)) == \"\") {\n                    rest_error('USERLOGINEMPTY');\n                }\n                // Check if user already exists\n                $data = DB::query(\n                    \"SELECT id, fonction_id, groupes_interdits, groupes_visibles\n                    FROM \".prefix_table(\"users\").\"\n                    WHERE login LIKE %ss\",\n                    mysqli_escape_string($link, stripslashes($login))\n                );\n\n                if (DB::count() == 0) {\n                    try {\n                        // find AdminRole code in DB\n                        $resRole = DB::queryFirstRow(\n                            \"SELECT id\n                            FROM \".prefix_table(\"roles_title\").\"\n                            WHERE title LIKE %ss\",\n                            mysqli_escape_string($link, stripslashes($adminby))\n                        );\n\n                        // get default language\n                        $lang = DB::queryFirstRow(\n                            \"SELECT `valeur`\n                            FROM \".prefix_table(\"misc\").\"\n                            WHERE type = %s AND intitule = %s\",\n                            \"admin\",\n                            \"default_language\"\n                        );\n\n                        // prepare roles list\n                        $rolesList = \"\";\n                        foreach (explode(',', $roles) as $role) {//echo $role.\"-\";\n                            $tmp = DB::queryFirstRow(\n                                \"SELECT `id`\n                                FROM \".prefix_table(\"roles_title\").\"\n                                WHERE title = %s\",\n                                $role\n                            );\n                            if (empty($rolesList)) {\n                                $rolesList = $tmp['id'];\n                            } else {\n                                $rolesList .= \";\".$tmp['id'];\n                            }\n                        }\n\n                        // Add user in DB\n                        DB::insert(\n                            prefix_table(\"users\"),\n                            array(\n                                'login' => $login,\n                                'name' => $name,\n                                'lastname' => $lastname,\n                                'pw' => bCrypt(stringUtf8Decode($password), COST),\n                                'email' => $email,\n                                'admin' => intval($isadmin),\n                                'gestionnaire' => intval($ismanager),\n                                'read_only' => intval($isreadonly),\n                                'personal_folder' => intval($haspf),\n                                'user_language' => $lang['valeur'],\n                                'fonction_id' => $rolesList,\n                                'groupes_interdits' => '0',\n                                'groupes_visibles' => '0',\n                                'isAdministratedByRole' => empty($resRole) ? '0' : $resRole['id']\n                            )\n                        );\n                        $new_user_id = DB::insertId();\n                        // Create personnal folder\n                        if (intval($haspf) == 1) {\n                            DB::insert(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => '0',\n                                    'title' => $new_user_id,\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0',\n                                    'personal_folder' => '1'\n                                )\n                            );\n                        }\n\n                        // load settings\n                        loadSettings();\n\n                        // Send email to new user\n                        @sendEmail(\n                            $LANG['email_subject_new_user'],\n                            str_replace(\n                                array('#tp_login#', '#tp_pw#', '#tp_link#'),\n                                array(\" \".addslashes($login), addslashes($password), $SETTINGS['email_server_url']),\n                                $LANG['email_new_user_mail']\n                            ),\n                            $email,\n                            \"\"\n                        );\n\n                        // update LOG\n                        logEvents('user_mngt', 'at_user_added', 'api - '.$GLOBALS['apikey'], $new_user_id, \"\");\n\n                        echo '{\"status\":\"user added\"}';\n                    } catch (PDOException $ex) {\n                        echo '<br />'.$ex->getMessage();\n                    }\n                } else {\n                    rest_error('USERALREADYEXISTS');\n                }\n            } elseif ($GLOBALS['request'][1] == \"folder\") {\n            /*\n            * ADDING A FOLDER\n            * <url to teampass>/api/index.php/add/folder/<title>;<complexity_level>;<parent_id>;<renewal_period>;<personal>?apikey=<valid api key>\n            * http://localhost/teampass/api/index.php/add/folder/Import from API;0;38;0;0?apikey=piesae7ahghae1iiP9ohPhaefaideeThohgh1te\n            */\n                if (!empty($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][2]));\n\n                    if (empty($params[0]) === false && (intval($params[1]) >= 0 && intval($params[1]) <= 100)) {\n                        if (empty($params[3])) {\n                            $params[3] = 0;\n                        }\n                        if (empty($params[4])) {\n                            $params[4] = 0;\n                        }\n                        if (empty($params[2])) {\n                            rest_error('NO_DESTINATION_FOLDER');\n                        }\n                        if ($params[2] < 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n\n                        //Check if title doesn't contains html codes\n                        if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $params[0], $out)) {\n                            rest_error('HTML_CODES_NOT_ALLOWED');\n                        }\n\n                        // check if title is numeric\n                        if (is_numeric($params[0]) === true) {\n                            rest_error('TITLE_ONLY_WITH_NUMBERS');\n                        }\n\n                        //Check if duplicate folders name are allowed\n                        $data = DB::queryfirstrow(\n                            \"SELECT valeur\n                            FROM \".prefix_table(\"misc\").\"\n                            WHERE type = %s AND intitule = %s\",\n                            \"admin\",\n                            \"duplicate_folder\"\n                        );\n                        // if valeur = 0 then duplicate folders not allowed\n                        if ($data === 0) {\n                            DB::query(\n                                \"SELECT *\n                                FROM \".prefix_table(\"nested_tree\").\"\n                                WHERE title = %s\",\n                                $params[0]\n                            );\n                            $counter = DB::count();\n                            if ($counter != 0) {\n                                rest_error('ALREADY_EXISTS');\n                            }\n                        }\n\n                        //check if parent folder is personal\n                        $data = DB::queryfirstrow(\n                            \"SELECT personal_folder\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %i\",\n                            $params[2]\n                        );\n                        if ($data['personal_folder'] === \"1\") {\n                            $isPersonal = 1;\n                        } else {\n                            if ($params[4] === 1) {\n                                $isPersonal = 1;\n                            } else {\n                                $isPersonal = 0;\n                            }\n\n                            // get complexity level for this folder\n                            $data = DB::queryfirstrow(\n                                \"SELECT valeur\n                                FROM \".prefix_table(\"misc\").\"\n                                WHERE intitule = %i AND type = %s\",\n                                $params[2],\n                                \"complex\"\n                            );\n                            if (intval($params[1]) < intval($data['valeur'])) {\n                                rest_error('COMPLEXICITY_LEVEL_NOT_REACHED');\n                            }\n                        }\n\n                        try {\n                            //create folder\n                            DB::insert(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => $params[2],\n                                    'title' => $params[0],\n                                    'personal_folder' => $isPersonal,\n                                    'renewal_period' => $params[3],\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0'\n                                )\n                            );\n                            $newId = DB::insertId();\n\n                            //Add complexity\n                            DB::insert(\n                                prefix_table(\"misc\"),\n                                array(\n                                    'type' => 'complex',\n                                    'intitule' => $newId,\n                                    'valeur' => $params[1]\n                                )\n                            );\n\n                            echo '{\"status\":\"folder created\" , \"new_folder_id\":\"'.$newId.'\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('NO_DATA_EXIST');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"update\") {\n            /*\n            * Section dedicated for UPDATING\n            */\n            if ($GLOBALS['request'][1] == \"item\") {\n                /*\n                * Expected call format: .../api/index.php/update/item/<item_id>/<label>;<password>;<description>;<folder_id>;<login>;<email>;<url>;<tags>;<any one can modify>?apikey=<VALID API KEY>\n                */\n                if ($GLOBALS['request'][2] !== \"\" && is_numeric($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][3]));\n\n                    if (!empty($params[0]) && !empty($params[1]) && !empty($params[3])) {\n                        // Check length\n                        if (strlen($params[1]) > 50) {\n                            rest_error('PASSWORDTOOLONG');\n                        }\n\n                        // Check Folder ID\n                        DB::query(\n                            \"SELECT *\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %i\",\n                            $params[3]\n                        );\n                        $counter = DB::count();\n                        if ($counter == 0) {\n                            rest_error('NOSUCHFOLDER');\n                        }\n\n                        // check if item exists\n                        DB::query(\n                            \"SELECT *\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE id = %i\",\n                            $GLOBALS['request'][2]\n                        );\n                        $counter = DB::count();\n                        if ($counter > 0) {\n                            // encrypt pwd\n                            $encrypt = cryption(\n                                $params[1],\n                                \"\",\n                                \"encrypt\"\n                            );\n                            if (empty($encrypt['string'])) {\n                                rest_error('PASSWORDEMPTY');\n                            }\n\n                            // ADD item\n                            try {\n                                DB::update(\n                                    prefix_table(\"items\"),\n                                    array(\n                                        \"label\" => $params[0],\n                                        \"description\" => $params[2],\n                                        'pw' => $encrypt['string'],\n                                        'pw_iv' => '',\n                                        \"email\" => $params[5],\n                                        \"url\" => $params[6],\n                                        \"id_tree\" => intval($params[3]),\n                                        \"login\" => $params[4],\n                                        \"anyone_can_modify\" => intval($params[8])\n                                    ),\n                                    \"id = %i\",\n                                    $GLOBALS['request'][2]\n                                );\n\n                                // log\n                                DB::insert(\n                                    prefix_table(\"log_items\"),\n                                    array(\n                                        \"id_item\" => $GLOBALS['request'][2],\n                                        \"date\" => time(),\n                                        \"id_user\" => API_USER_ID,\n                                        \"action\" => \"at_modification\"\n                                    )\n                                );\n\n                                // Add tags\n                                $tags = explode(' ', $params[7]);\n                                foreach ((array) $tags as $tag) {\n                                    if (!empty($tag)) {\n                                        // check if already exists\n                                        DB::query(\n                                            \"SELECT *\n                                            FROM \".prefix_table(\"tags\").\"\n                                            WHERE tag = %s AND item_id = %i\",\n                                            strtolower($tag),\n                                            $GLOBALS['request'][2]\n                                        );\n                                        $counter = DB::count();\n                                        if ($counter === 0) {\n                                            DB::insert(\n                                                prefix_table(\"tags\"),\n                                                array(\n                                                    \"item_id\" => $GLOBALS['request'][2],\n                                                    \"tag\" => strtolower($tag)\n                                                )\n                                            );\n                                        }\n                                    }\n                                }\n\n                                // Update CACHE table\n                                DB::update(\n                                    prefix_table(\"cache\"),\n                                    array(\n                                        \"label\" => $params[0],\n                                        \"description\" => $params[2],\n                                        \"tags\" => $params[7],\n                                        \"id_tree\" => intval($params[3]),\n                                        \"perso\" => \"0\",\n                                        \"restricted_to\" => \"\",\n                                        \"login\" => $params[4],\n                                        \"folder\" => \"\",\n                                        \"author\" => API_USER_ID,\n                                        \"renewal_period\" => \"0\",\n                                        \"timestamp\" => time(),\n                                        \"url\" => $params[6],\n                                    ),\n                                    \"id = %i\",\n                                    $GLOBALS['request'][2]\n                                );\n\n                                echo '{\"status\":\"item updated\"}';\n                            } catch (PDOException $ex) {\n                                echo '<br />'.$ex->getMessage();\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('ITEMMISSINGDATA');\n                    }\n                } else {\n                    rest_error('NO_ITEM');\n                }\n            } elseif ($GLOBALS['request'][1] == \"folder\") {\n            /*\n            * UPDATING A FOLDER\n            * <url to teampass>/api/index.php/update/folder/<folder_id>/<title>;<complexity_level>;<renewal_period>?apikey=<valid api key>\n            */\n                if ($GLOBALS['request'][2] !== \"\" && is_numeric($GLOBALS['request'][2])) {\n                    // get sent parameters\n                    $params = explode(';', base64_decode($GLOBALS['request'][3]));\n\n                    if (!empty($params[0])) {\n                        if ($params[1] < 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                        if (empty($params[2])) {\n                            $params[2] = 0;\n                        }\n\n                        // check if folder exists and get folder data\n                        $data_folder = DB::queryfirstrow(\n                            \"SELECT *\n                            FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE id = %s\",\n                            $GLOBALS['request'][2]\n                        );\n                        $counter = DB::count();\n                        if ($counter === 0) {\n                            rest_error('NO_DATA_EXIST');\n                        }\n\n                        //Check if title doesn't contains html codes\n                        if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $params[0], $out)) {\n                            rest_error('HTML_CODES_NOT_ALLOWED');\n                        }\n\n                        // check if title is numeric\n                        if (is_numeric($params[0]) === true) {\n                            rest_error('TITLE_ONLY_WITH_NUMBERS');\n                        }\n\n                        // get complexity level for this folder\n                        $data = DB::queryfirstrow(\n                            \"SELECT valeur\n                            FROM \".prefix_table(\"misc\").\"\n                            WHERE intitule = %i AND type = %s\",\n                            $data_folder['parent_id'],\n                            \"complex\"\n                        );\n                        if (intval($params[1]) < intval($data['valeur'])) {\n                            rest_error('COMPLEXICITY_LEVEL_NOT_REACHED');\n                        }\n\n                        try {\n                            DB::update(\n                                prefix_table(\"nested_tree\"),\n                                array(\n                                    'parent_id' => $data_folder['parent_id'],\n                                    'title' => $params[0],\n                                    'personal_folder' => 0,\n                                    'renewal_period' => $params[2],\n                                    'bloquer_creation' => '0',\n                                    'bloquer_modification' => '0'\n                                ),\n                                \"id = %i\",\n                                $GLOBALS['request'][2]\n                            );\n\n                            //Add complexity\n                            DB::update(\n                                prefix_table(\"misc\"),\n                                array(\n                                    'valeur' => $params[1]\n                                ),\n                                \"intitule = %s AND type = %s\",\n                                $GLOBALS['request'][2],\n                                \"complex\"\n                            );\n\n                            echo '{\"status\":\"folder updated\"}';\n                        } catch (PDOException $ex) {\n                            echo '<br />'.$ex->getMessage();\n                        }\n                    } else {\n                        rest_error('ITEMMISSINGDATA');\n                    }\n                } else {\n                    rest_error('NO_ITEM');\n                }\n            }\n        } elseif ($GLOBALS['request'][0] == \"auth\") {\n            /*\n            ** FOR SECURITY PURPOSE, it is mandatory to use SSL to connect your teampass instance. The user password is not encrypted!\n            **\n            **\n            ** Expected call format: .../api/index.php/auth/<PROTOCOL>/<URL>/<login>/<password>?apikey=<VALID API KEY>\n            ** Example: https://127.0.0.1/teampass/api/index.php/auth/http/www.zadig-tge.adp.com/U1/test/76?apikey=chahthait5Aidood6johh6Avufieb6ohpaixain\n            ** RESTRICTIONS:\n            **              - <PROTOCOL>        ==> http|https|ftp|...\n            **              - <URL>             ==> encode URL without protocol (example: http://www.teampass.net becomes www.teampass.net)\n            **              - <login>           ==> user's login\n            **              - <password>        ==> currently clear password\n            **\n            ** RETURNED ANSWER:\n            **              - format sent back is JSON\n            **              - Example: {\"<item_id>\":{\"label\":\"<pass#1>\",\"login\":\"<login#1>\",\"pw\":\"<pwd#1>\"},\"<item_id>\":{\"label\":\"<pass#2>\",\"login\":\"<login#2>\",\"pw\":\"<pwd#2>\"}}\n            **\n            */\n            // get user credentials\n            if (isset($GLOBALS['request'][3]) && isset($GLOBALS['request'][4])) {\n                // get url\n                if (isset($GLOBALS['request'][1]) && isset($GLOBALS['request'][2])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`\n                        FROM \".$pre.\"users\n                        WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    if ($pwdlib->verifyPasswordHash($GLOBALS['request'][4], $userData['pw']) === true) {\n                        // define the restriction of \"id_tree\" of this user\n                        //db::debugMode(true);\n                        $userDef = DB::queryOneColumn(\n                            'folder_id',\n                            \"SELECT DISTINCT folder_id\n                            FROM \".prefix_table(\"roles_values\").\"\n                            WHERE type IN ('R', 'W', 'ND', 'NE', 'NDNE', 'NEND') \",\n                            empty($userData['groupes_interdits']) ? \"\" : \"\n                            AND folder_id NOT IN (\".str_replace(\";\", \",\", $userData['groupes_interdits']).\")\",\n                            \"AND role_id IN %ls\n                            GROUP BY folder_id\",\n                            explode(\";\", $userData['groupes_interdits'])\n                        );\n                        // complete with \"groupes_visibles\"\n                        foreach (explode(\";\", $userData['groupes_visibles']) as $v) {\n                            array_push($userDef, $v);\n                        }\n\n                        // find the item associated to the url\n                        $response = DB::query(\n                            \"SELECT id, label, login, pw, pw_iv, id_tree, restricted_to\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE url LIKE %s\n                            AND id_tree IN (\".implode(\",\", $userDef).\")\n                            ORDER BY id DESC\",\n                            $GLOBALS['request'][1].\"://\".urldecode($GLOBALS['request'][2].'%')\n                        );\n                        $counter = DB::count();\n\n                        if ($counter > 0) {\n                            $json = \"\";\n                            foreach ($response as $data) {\n                                // check if item visible\n                                if (empty($data['restricted_to']) ||\n                                    ($data['restricted_to'] != \"\" && in_array($userData['id'], explode(\";\", $data['restricted_to'])))\n                                ) {\n                                    // prepare export\n                                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                                    $crypt_pw = cryption(\n                                        $data['pw'],\n                                        \"\",\n                                        \"decrypt\"\n                                    );\n                                    $json[$data['id']]['pw'] = $crypt_pw['string'];\n                                }\n                            }\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('AUTH_NO_URL');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"auth_tpc\") {\n            /*\n            ** TO BE USED ONLY BY TEAMPASS-CONNECT\n            **\n            */\n            // get user credentials\n            if (isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3]) && isset($GLOBALS['request'][4])) {\n                // get url\n                if (isset($GLOBALS['request'][1])) {\n                    // decode base64 criterium\n                    $tpc_url = base64_decode($GLOBALS['request'][1]);\n                    $user_pwd = base64_decode($GLOBALS['request'][3]);\n                    $user_saltkey = base64_decode($GLOBALS['request'][4]);\n\n                    // is user granted?\n                    //db::debugMode(true);\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`, `encrypted_psk`\n                        FROM \".$pre.\"users\n                        WHERE login = %s\",\n                        $GLOBALS['request'][2]\n                    );\n\n                    // check if psk is correct.\n                    $user_saltkey = defuse_validate_personal_key(\n                        $user_saltkey,\n                        $userData['encrypted_psk']\n                    );\n                    if (strpos($user_saltkey, \"Error \") !== false) {\n                        // error\n                        rest_error('AUTH_NO_DATA');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    if ($pwdlib->verifyPasswordHash($user_pwd, $userData['pw']) === true) {\n                        // define the restriction of \"id_tree\" of this user\n                        //db::debugMode(true);\n                        $userDef = DB::queryOneColumn(\n                            'folder_id',\n                            \"SELECT DISTINCT folder_id\n                            FROM \".prefix_table(\"roles_values\").\"\n                            WHERE type IN ('R', 'W', 'ND', 'NE', 'NDNE', 'NEND') \",\n                            empty($userData['groupes_interdits']) ? \"\" : \"AND folder_id NOT IN (\".str_replace(\";\", \",\", $userData['groupes_interdits']).\")\",\n                            \"AND role_id IN %ls\n                            GROUP BY folder_id\",\n                            explode(\";\", $userData['groupes_interdits'])\n                        );\n                        // complete with \"groupes_visibles\"\n                        foreach (explode(\";\", $userData['groupes_visibles']) as $v) {\n                            array_push($userDef, $v);\n                        }\n\n                        // add PF\n                        $userpf = DB::queryFirstRow(\n                            \"SELECT `id` FROM \".$pre.\"nested_tree WHERE title = %s\",\n                            $userData['id']\n                        );\n                        array_push($userDef, $userpf['id']);\n\n                        // find the item associated to the url\n                        $response = DB::query(\n                            \"SELECT id, label, login, pw, pw_iv, id_tree, restricted_to, perso\n                            FROM \".prefix_table(\"items\").\"\n                            WHERE url LIKE %s\n                            AND id_tree IN (\".implode(\",\", array_filter($userDef)).\")\n                            AND inactif = %i\n                            ORDER BY id DESC\",\n                            $tpc_url.'%',\n                            0\n                        );\n                        $counter = DB::count();\n\n                        if ($counter > 0) {\n                            $json = \"\";\n                            foreach ($response as $data) {\n                                // check if item visible\n                                if (empty($data['restricted_to']) ||\n                                    ($data['restricted_to'] != \"\" && in_array($userData['id'], explode(\";\", $data['restricted_to'])))\n                                ) {\n                                    // prepare export\n                                    $json[$data['id']]['label'] = mb_convert_encoding($data['label'], mb_detect_encoding($data['label']), 'UTF-8');\n                                    $json[$data['id']]['login'] = mb_convert_encoding($data['login'], mb_detect_encoding($data['login']), 'UTF-8');\n                                    if ($data['perso'] === \"0\") {\n                                        $crypt_pw = cryption(\n                                            $data['pw'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } elseif (empty($user_saltkey)) {\n                                        $crypt_pw['string'] = \"no_psk\";\n                                    } else {\n                                        $crypt_pw = cryption(\n                                            $data['pw'],\n                                            $user_saltkey,\n                                            \"decrypt\"\n                                        );\n                                    }\n                                    $json[$data['id']]['pw'] = mb_detect_encoding($crypt_pw['string'], 'UTF-8', true) ? $crypt_pw['string'] : \"not_utf8\";\n                                    $json[$data['id']]['perso'] = $data['perso'];\n                                }\n                            }\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_DATA_EXIST');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('AUTH_NO_URL');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"set\") {\n            /*\n             * Expected call format: .../api/index.php/set/<login_to_save>/<password_to_save>/<url>/<user_login>/<user_password>/<label>/<protocol>?apikey=<VALID API KEY>\n             * Example: https://127.0.0.1/teampass/api/index.php/set/newLogin/newPassword/newUrl/myLogin/myPassword?apikey=gu6Eexaewaishooph6iethoh5woh0yoit6ohquo\n             *\n             * NEW ITEM WILL BE STORED IN SPECIFIC FOLDER\n             */\n            // get user credentials\n            if (isset($GLOBALS['request'][4]) && isset($GLOBALS['request'][5])) {\n                // get url\n                if (isset($GLOBALS['request'][1]) && isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`\n                        FROM \".$pre.\"users\n                        WHERE login = %s\",\n                        $GLOBALS['request'][4]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('AUTH_NO_IDENTIFIER');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    // is user identified?\n                    if ($pwdlib->verifyPasswordHash($GLOBALS['request'][5], $userData['pw']) === true) {\n                        // does the personal folder of this user exists?\n                        DB::queryFirstRow(\n                            \"SELECT `id`\n                            FROM \" . $pre.\"nested_tree\n                            WHERE title = %s AND personal_folder = 1\",\n                            $userData['id']\n                        );\n                        if (DB::count() > 0) {\n                            // check if \"teampass-connect\" folder exists\n                            // if not create it\n                            $folder = DB::queryFirstRow(\n                                \"SELECT `id`\n                                FROM \" . $pre.\"nested_tree\n                                WHERE title = %s\",\n                                \"teampass-connect\"\n                            );\n                            if (DB::count() == 0) {\n                                DB::insert(\n                                    prefix_table(\"nested_tree\"),\n                                    array(\n                                        'parent_id' => '0',\n                                        'title' => \"teampass-connect\"\n                                    )\n                                );\n                                $tpc_folder_id = DB::insertId();\n\n                                //Add complexity\n                                DB::insert(\n                                    prefix_table(\"misc\"),\n                                    array(\n                                        'type' => 'complex',\n                                        'intitule' => $tpc_folder_id,\n                                        'valeur' => '0'\n                                    )\n                                );\n\n                                // rebuild tree\n                                $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                                $tree->register();\n                                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                                $tree->rebuild();\n                            } else {\n                                $tpc_folder_id = $folder['id'];\n                            }\n\n                            // encrypt password\n                            $encrypt = cryption(\n                                $GLOBALS['request'][2],\n                                \"\",\n                                \"encrypt\"\n                            );\n\n                            // is there a protocol?\n                            if (isset($GLOBALS['request'][7]) || empty($GLOBALS['request'][7])) {\n                                $protocol = \"http://\";\n                            } else {\n                                $protocol = urldecode($GLOBALS['request'][7]).\"://\";\n                            }\n\n                            // add new item\n                            DB::insert(\n                                prefix_table(\"items\"),\n                                array(\n                                    'label' => \"Credentials for \".urldecode($GLOBALS['request'][3]),\n                                    'description' => \"Imported with Teampass-Connect\",\n                                    'pw' => $encrypt['string'],\n                                    'pw_iv' => \"\",\n                                    'email' => \"\",\n                                    'url' => urldecode($GLOBALS['request'][3]),\n                                    'id_tree' => $tpc_folder_id,\n                                    'login' => $GLOBALS['request'][1],\n                                    'inactif' => '0',\n                                    'restricted_to' => $userData['id'],\n                                    'perso' => '0',\n                                    'anyone_can_modify' => '0',\n                                    'complexity_level' => '0'\n                                )\n                            );\n                            $newID = DB::insertId();\n\n                            // log\n                            logItems(\n                                $newID,\n                                \"Credentials for \".urldecode($GLOBALS['request'][3].'%'),\n                                $userData['id'],\n                                'at_creation',\n                                $GLOBALS['request'][1]\n                            );\n\n                            $json['status'] = \"ok\";\n                            // prepare answer. If no access then inform\n                            if (empty($json)) {\n                                rest_error('AUTH_NO_DATA');\n                            } else {\n                                echo json_encode($json);\n                            }\n                        } else {\n                            rest_error('NO_PF_EXIST_FOR_USER');\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"set_tpc\") {\n            /*\n             * TO BE USED ONLY BY TEAMPASS-CONNECT\n             */\n            // get user credentials\n            if (isset($GLOBALS['request'][2]) && isset($GLOBALS['request'][3])) {\n                // get url\n                if (isset($GLOBALS['request'][1])) {\n                    // is user granted?\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id`, `pw`, `groupes_interdits`, `groupes_visibles`, `fonction_id`, `encrypted_psk`\n                        FROM \".$pre.\"users\n                        WHERE login = %s\",\n                        $GLOBALS['request'][2]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('AUTH_NO_IDENTIFIER');\n                    }\n\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n                    $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n                    $pwdlib->register();\n                    $pwdlib = new PasswordLib\\PasswordLib();\n\n                    // prepare TPC parameters\n                    $tpc_param = explode(';@;', base64_decode($GLOBALS['request'][1]));\n                    $tpc_param[5] = base64_decode($tpc_param[5]);\n\n                    // is user identified?\n                    if ($pwdlib->verifyPasswordHash(base64_decode($GLOBALS['request'][3]), $userData['pw']) === true) {\n                        //\n                        if ($tpc_param[4] !== \"0\") {\n                            // it is not a personal folder\n                            $salt = \"\";\n                            $tpc_folder_id = $tpc_param[4];\n                            $perso = '0';\n                            $restricted_to = $userData['id'];\n                        } elseif ($tpc_param[4] === \"0\" && $tpc_param[5] !== \"\") {\n                            // it is a personal folder\n                            $salt = $tpc_param[5];\n\n                            // check if psk is correct.\n                            $salt = defuse_validate_personal_key(\n                                $salt,\n                                $userData['encrypted_psk']\n                            );\n                            if (strpos($salt, \"Error \") !== false) {\n                                // error\n                                rest_error('AUTH_NO_DATA');\n                            }\n\n\n                            $perso = '1';\n                            $restricted_to = \"\";\n\n                            // does the personal folder of this user exists?\n                            $user_folder = DB::queryFirstRow(\n                                \"SELECT `id`\n                                FROM \" . $pre.\"nested_tree\n                                WHERE title = %s AND personal_folder = 1\",\n                                $userData['id']\n                            );\n                            if (DB::count() === 0) {\n                                // check if \"teampass-connect\" folder exists\n                                // if not create it\n                                $folder = DB::queryFirstRow(\n                                    \"SELECT `id`\n                                    FROM \" . $pre.\"nested_tree\n                                    WHERE title = %s\",\n                                    \"teampass-connect\"\n                                );\n                                if (DB::count() == 0) {\n                                    DB::insert(\n                                        prefix_table(\"nested_tree\"),\n                                        array(\n                                            'parent_id' => '0',\n                                            'title' => \"teampass-connect\"\n                                        )\n                                    );\n                                    $tpc_folder_id = DB::insertId();\n\n                                    //Add complexity\n                                    DB::insert(\n                                        prefix_table(\"misc\"),\n                                        array(\n                                            'type' => 'complex',\n                                            'intitule' => $tpc_folder_id,\n                                            'valeur' => '0'\n                                        )\n                                    );\n\n                                    // rebuild tree\n                                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                                    $tree->register();\n                                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                                    $tree->rebuild();\n                                } else {\n                                    $tpc_folder_id = $folder['id'];\n                                }\n                            } else {\n                                $tpc_folder_id = $user_folder['id'];\n                            }\n                        } else {\n                            // there is an error in PSALT\n                            rest_error('NO_PSALTK_PROVIDED');\n                        }\n\n                        // now we continue\n                        // encrypt password\n                        $encrypt = cryption(\n                            urldecode($tpc_param[1]),\n                            $salt,\n                            \"encrypt\"\n                        );\n\n                        // is there a label?\n                        if (empty($tpc_param[3])) {\n                            $label = \"Credentials for \".urldecode($tpc_param[2]);\n                        } else {\n                            $label = urldecode($tpc_param[3]);\n                        }\n\n                        // add new item\n                        DB::insert(\n                            prefix_table(\"items\"),\n                            array(\n                                'label' => $label,\n                                'description' => \"Imported with Teampass-Connect\",\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'email' => \"\",\n                                'url' => urldecode($tpc_param[2]),\n                                'id_tree' => $tpc_folder_id,\n                                'login' => urldecode($tpc_param[0]),\n                                'inactif' => '0',\n                                'restricted_to' => $restricted_to,\n                                'perso' => $perso,\n                                'anyone_can_modify' => '0',\n                                'complexity_level' => '0'\n                            )\n                        );\n                        $newID = DB::insertId();\n\n                        // log\n                        logItems(\n                            $newID,\n                            $label,\n                            $userData['id'],\n                            'at_creation',\n                            ''\n                        );\n\n                        $json['status'] = \"ok\";\n                        $json['new_item_id'] = $newID;\n                        // prepare answer. If no access then inform\n                        if (empty($json)) {\n                            rest_error('AUTH_NO_DATA');\n                        } else {\n                            echo json_encode($json);\n                        }\n                    } else {\n                        rest_error('AUTH_NOT_GRANTED');\n                    }\n                } else {\n                    rest_error('SET_NO_DATA');\n                }\n            } else {\n                rest_error('AUTH_NO_IDENTIFIER');\n            }\n        } elseif ($GLOBALS['request'][0] == \"delete\") {\n        /*\n        * DELETE\n        *\n        * Expected call format: .../api/index.php/delete/folder/<folder_id1;folder_id2;folder_id3>?apikey=<VALID API KEY>\n        * Expected call format: .../api/index.php/delete/item>/<item_id1;item_id2;item_id3>?apikey=<VALID API KEY>\n        */\n            if ($GLOBALS['request'][1] == \"folder\") {\n                $array_category = explode(';', $GLOBALS['request'][2]);\n\n                // get user info\n                if (isset($GLOBALS['request'][3]) && !empty($GLOBALS['request'][3])) {\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n                    if (DB::count() == 0) {\n                        $user_id = API_USER_ID;\n                    } else {\n                        $user_id = $userData['id'];\n                    }\n                } else {\n                    $user_id = API_USER_ID;\n                }\n\n                if (count($array_category) > 0 && count($array_category) < 5) {\n                    // load passwordLib library\n                    require_once '../sources/SplClassLoader.php';\n\n                    // prepare tree\n                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                    $tree->register();\n                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title', 'personal_folder');\n\n                    // this will delete all sub folders and items associated\n                    for ($i = 0; $i < count($array_category); $i++) {\n                        // Get through each subfolder\n                        $folders = $tree->getDescendants($array_category[$i], true);\n                        if (count($folders) > 0) {\n                            foreach ($folders as $folder) {\n                                if (($folder->parent_id > 0 || $folder->parent_id == 0) && $folder->personal_folder != 1) {\n                                    //Store the deleted folder (recycled bin)\n                                    DB::insert(\n                                        prefix_table(\"misc\"),\n                                        array(\n                                            'type' => 'folder_deleted',\n                                            'intitule' => \"f\".$array_category[$i],\n                                            'valeur' => $folder->id.', '.$folder->parent_id.', '.\n                                                $folder->title.', '.$folder->nleft.', '.$folder->nright.', '.$folder->nlevel.', 0, 0, 0, 0'\n                                        )\n                                    );\n                                    //delete folder\n                                    DB::delete(prefix_table(\"nested_tree\"), \"id = %i\", $folder->id);\n\n                                    //delete items & logs\n                                    $items = DB::query(\n                                        \"SELECT id\n                                        FROM \".prefix_table(\"items\").\"\n                                        WHERE id_tree=%i\",\n                                        $folder->id\n                                    );\n                                    foreach ($items as $item) {\n                                        DB::update(\n                                            prefix_table(\"items\"),\n                                            array(\n                                                'inactif' => '1',\n                                            ),\n                                            \"id = %i\",\n                                            $item['id']\n                                        );\n                                        //log\n                                        DB::insert(\n                                            prefix_table(\"log_items\"),\n                                            array(\n                                                'id_item' => $item['id'],\n                                                'date' => time(),\n                                                'id_user' => $user_id,\n                                                'action' => 'at_delete'\n                                            )\n                                        );\n                                    }\n                                    //Update CACHE table\n                                    updateCacheTable(\"delete_value\", $array_category[$i]);\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    rest_error('NO_CATEGORY');\n                }\n\n                $json['status'] = 'OK';\n            } elseif ($GLOBALS['request'][1] == \"item\") {\n                $array_items = explode(';', $GLOBALS['request'][2]);\n\n                // get user info\n                if (isset($GLOBALS['request'][3]) && !empty($GLOBALS['request'][3])) {\n                    $userData = DB::queryFirstRow(\n                        \"SELECT `id` FROM \".$pre.\"users WHERE login = %s\",\n                        $GLOBALS['request'][3]\n                    );\n                    if (DB::count() == 0) {\n                        $user_id = API_USER_ID;\n                    } else {\n                        $user_id = $userData['id'];\n                    }\n                }\n\n                for ($i = 0, $c = count($array_items); $i < $c; $i++) {\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                        ),\n                        \"id = %i\",\n                        $array_items[$i]\n                    );\n                    //log\n                    DB::insert(\n                        prefix_table(\"log_items\"),\n                        array(\n                            'id_item' => $array_items[$i],\n                            'date' => time(),\n                            'id_user' => $user_id,\n                            'action' => 'at_delete'\n                        )\n                    );\n\n                    //Update CACHE table\n                    updateCacheTable(\"delete_value\", $array_items[$i]);\n                }\n\n                $json['status'] = 'OK';\n            }\n\n            if ($json) {\n                echo json_encode($json);\n            } else {\n                rest_error('EMPTY');\n            }\n        } elseif ($GLOBALS['request'][0] == \"new_password\") {\n            if (!empty($GLOBALS['request'][1])) {\n                $params = explode(\";\", $GLOBALS['request'][1]);\n\n                if (empty($params[0])) {\n                    $params[0] = 8;\n                }\n                if (empty($params[1])) {\n                    $params[1] = 0;\n                }\n                if (empty($params[2])) {\n                    $params[2] = 0;\n                }\n                if (empty($params[3])) {\n                    $params[3] = 0;\n                }\n                if (empty($params[4])) {\n                    $params[4] = 0;\n                }\n                if (empty($params[5])) {\n                    $params[5] = 0;\n                }\n                if (empty($params[6])) {\n                    $params[6] = 0;\n                }\n\n                // load library\n                require_once '../sources/SplClassLoader.php';\n                $pwgen = new SplClassLoader('Encryption\\PwGen', '../includes/libraries');\n                $pwgen->register();\n                $pwgen = new Encryption\\PwGen\\pwgen();\n\n                // init\n                $pwgen->setLength($params[0]);\n                if ($params[1] === \"1\") {\n                    $pwgen->setSecure(true);\n                }\n                if ($params[2] === \"1\") {\n                    $pwgen->setNumerals(true);\n                }\n                if ($params[3] === \"1\") {\n                    $pwgen->setCapitalize(true);\n                }\n                if ($params[4] === \"1\") {\n                    $pwgen->setAmbiguous(true);\n                }\n                if ($params[5] === \"1\" && $params[6] === \"1\") {\n                    $pwgen->setSymbols(true);\n                }\n\n                // generate and send back (generate in base64 if symbols are asked)\n                if ($params[6] === \"1\") {\n                    echo '{\"password\" : \"'.base64_encode($pwgen->generate()).'\"}';\n                } else {\n                    echo '{\"password\" : \"'.($pwgen->generate()).'\"}';\n                }\n            } else {\n                rest_error('NO_PARAMETERS');\n            }\n        } elseif ($GLOBALS['request'][0] === \"info\") {\n            if ($GLOBALS['request'][1] === \"complexicity_levels_list\") {\n                require_once '../includes/language/english.php';\n                $json = array(\n                    0=> $LANG['complex_level0'],\n                    25=> $LANG['complex_level1'],\n                    50=> $LANG['complex_level2'],\n                    60=> $LANG['complex_level3'],\n                    70=> $LANG['complex_level4'],\n                    80=> $LANG['complex_level5'],\n                    90=> $LANG['complex_level6']\n                );\n\n                echo json_encode($json);\n            } elseif ($GLOBALS['request'][1] === \"folder\") {\n                if (!empty($GLOBALS['request'][2]) && is_numeric($GLOBALS['request'][2])) {\n                    $data = DB::queryFirstRow(\n                        \"SELECT * FROM \".$pre.\"nested_tree WHERE id = %i\",\n                        $GLOBALS['request'][2]\n                    );\n                    if (DB::count() == 0) {\n                        rest_error('NOSUCHFOLDER');\n                    }\n\n                    // form id_tree to full foldername\n                    require_once '../sources/SplClassLoader.php';\n                    //Load Tree\n                    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n                    $tree->register();\n                    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n                    $folder = \"\";\n                    $arbo = $tree->getPath($GLOBALS['request'][2], true);\n                    foreach ($arbo as $elem) {\n                        if (empty($folder)) {\n                            $folder = stripslashes($elem->title);\n                        } else {\n                            $folder .= \" > \".stripslashes($elem->title);\n                        }\n                    }\n\n                    // prepare info\n                    $json = array(\n                        \"title\" => $data['title'],\n                        \"personal_folder\" => $data['personal_folder'],\n                        \"renewal_period\" => $data['renewal_period'],\n                        \"parent_id\" => $data['parent_id'],\n                        \"path\" => $folder,\n                    );\n\n                    echo json_encode($json);\n                } else {\n                    rest_error('NO_PARAMETERS');\n                }\n            } elseif ($GLOBALS['request'][1] === \"version\") {\n                echo '{\"api-version\":\"'.$api_version.'\"}';\n            } else {\n                rest_error('NO_PARAMETERS');\n            }\n        } else {\n            rest_error('METHOD');\n        }\n    }\n}\n\nfunction rest_put()\n{\n    if (!@count($GLOBALS['request']) == 0) {\n        $request_uri = $GLOBALS['_SERVER']['REQUEST_URI'];\n        preg_match('/\\/api(\\/index.php|)\\/(.*)\\?apikey=(.*)/', $request_uri, $matches);\n        if (count($matches) == 0) {\n            rest_error('REQUEST_SENT_NOT_UNDERSTANDABLE');\n        }\n        $GLOBALS['request'] = explode('/', $matches[2]);\n    }\n    if (apikey_checker($GLOBALS['apikey'])) {\n        teampass_connect();\n    }\n}\n\n/**\n * @param string $type\n */\nfunction rest_error($type, $detail = 'N/A')\n{\n    switch ($type) {\n        case 'APIKEY':\n            $message = array('err' => 'This api_key '.$GLOBALS['apikey'].' doesn\\'t exist');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'NO_CATEGORY':\n            $message = array('err' => 'No folder specified');\n            break;\n        case 'NO_ITEM':\n            $message = array('err' => 'No item specified');\n            break;\n        case 'EMPTY':\n            $message = array('err' => 'No results');\n            break;\n        case 'IPWHITELIST':\n            $message = array('err' => 'Ip address not allowed.');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'MYSQLERR':\n            $message = array('err' => $detail);\n            header('HTTP/1.1 500 Internal Server Error');\n            break;\n        case 'METHOD':\n            $message = array('err' => 'Method not authorized');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'ITEMBADDEFINITION':\n            $message = array('err' => 'Item definition not complete');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'ITEM_MALFORMED':\n            $message = array('err' => 'Item definition not numeric');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERBADDEFINITION':\n            $message = array('err' => 'User definition not complete');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERLOGINEMPTY':\n            $message = array('err' => 'Empty Login given');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'USERALREADYEXISTS':\n            $message = array('err' => 'User already exists');\n            header('HTTP/1.1 405 Method Not Allowed');\n            break;\n        case 'REQUEST_SENT_NOT_UNDERSTANDABLE':\n            $message = array('err' => 'URL format is not following requirements');\n            break;\n        case 'AUTH_NOT_GRANTED':\n            $message = array('err' => 'Bad credentials for user');\n            break;\n        case 'AUTH_NO_URL':\n            $message = array('err' => 'URL needed to grant access');\n            break;\n        case 'AUTH_NO_IDENTIFIER':\n            $message = array('err' => 'Credentials needed to grant access');\n            break;\n        case 'AUTH_NO_DATA':\n            $message = array('err' => 'Data not allowed for the user');\n            break;\n        case 'NO_DATA_EXIST':\n            $message = array('err' => 'No data exists');\n            break;\n        case 'NO_DESTINATION_FOLDER':\n            $message = array('err' => 'No destination folder provided');\n            break;\n        case 'PASSWORDTOOLONG':\n            $message = array('err' => 'Password is too long');\n            break;\n        case 'NOSUCHFOLDER':\n            $message = array('err' => 'Folder ID does not exist');\n            break;\n        case 'PASSWORDEMPTY':\n            $message = array('err' => 'Password is empty');\n            break;\n        case 'ITEMEXISTS':\n            $message = array('err' => 'Label already exists');\n            break;\n        case 'ITEMMISSINGDATA':\n            $message = array('err' => 'Label or Password or Folder ID is missing');\n            break;\n        case 'SET_NO_DATA':\n            $message = array('err' => 'No data to be stored');\n            break;\n        case 'NO_PF_EXIST_FOR_USER':\n            $message = array('err' => 'No Personal Folder exists for this user');\n            break;\n        case 'HTML_CODES_NOT_ALLOWED':\n            $message = array('err' => 'HTML tags not allowed');\n            break;\n        case 'TITLE_ONLY_WITH_NUMBERS':\n            $message = array('err' => 'Title only with numbers not allowed');\n            break;\n        case 'ALREADY_EXISTS':\n            $message = array('err' => 'Data already exists');\n            break;\n        case 'COMPLEXICITY_LEVEL_NOT_REACHED':\n            $message = array('err' => 'complexity level was not reached');\n            break;\n        case 'NO_PARAMETERS':\n            $message = array('err' => 'No parameters given');\n            break;\n        case 'USER_NOT_EXISTS':\n            $message = array('err' => 'User does not exist');\n            break;\n        case 'NO_PSALTK_PROVIDED':\n            $message = array('err' => 'No Personal saltkey provided');\n            break;\n        default:\n            $message = array('err' => 'Something happen ... but what ?');\n            header('HTTP/1.1 500 Internal Server Error');\n            break;\n    }\n\n    echo json_encode($message);\n    exit(0);\n}\n\nfunction apikey_checker($apikey_used)\n{\n    teampass_connect();\n    $apikey_pool = teampass_get_keys();\n    if (in_array($apikey_used, $apikey_pool)) {\n        return(1);\n    } else {\n        rest_error('APIKEY', $apikey_used);\n    }\n}\n\nfunction teampass_pbkdf2_hash($var_p, $var_s, $var_c, $var_kl, $var_st = 0, $var_a = 'sha256')\n{\n    $var_kb = $var_st + $var_kl;\n    $var_dk = '';\n\n    for ($block = 1; $block <= $var_kb; $block++) {\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true);\n        for ($var_i = 1; $var_i < $var_c; $var_i++) {\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true));\n        }\n        $var_dk .= $var_ib;\n    }\n\n    return substr($var_dk, $var_st, $var_kl);\n}\n", "2.1.27\n 9/\n Fixed a possible XSS (credit to ADLab of Venustech)\n Improved security related to User Management\n \t> a manager could potentially act on users not related to him\n Improved security related to Items Management\n \t> a user could potentially act on Items he should not have access to\n Securized script.backup.php by adding a security key\n Fixed some other security failures (credit to \u200bsecurity at Amossys)\n Improved security regarding uploading files\n Fixed issue while restoring DB from administration page\n #1945 Cannot delete items\n #1944 File upload results in error\n #1941 Visualisation problems\n\n 8/\n Delete install folders and files during installation process\n Custom Field value can be masked\n Database password is encrypted in settings.php file\n PHPMailer library updated to 5.2.23\n TwoFactorAuth library was updated\n Configuration variables are not set in SESSION anymore. Now read from tp.config.php file.\n Fix: issue on offline export\n Fix: error on deleting a folder at root\n #1939 Unable to change page (role management)\n #1937 Error while using script.backup.php in standalone\n #1935 Add folder results in Requested JSON parse failed\n #1933 Trying to move folder results in error message\n #1932 Keepass upload fails\n #1927 Changing language is not possible for users\n #1924 Moving items give error: Requested JSON parse failed\n #1923 Red wheel keeps turning, blocks display of new items\n #1919 Upgrade to release 2.1.27.8 converts encrypted database password back to clear-text\n #1915 Cannot Edit or Delete items in the Personal folder\n #1909 Roles Management - Problem with acess rights \"Edit\" \"Delete\"\n #1903 SSH Password Change does not work\n #1900 Forgot your password --> Page reload automatic\n #1891 Install error - Uncaught Defuse\\\\Crypto\\\\Exception\\\\BadFormatException: Encoded data is shorter than expected\n #1899 Active Directory authentication not working on fresh installed Cent OS 7\n #1890 access rights in manage roles\n #1888 Export to CVS --> empty file (0 kb)\n #1886 JSON Error when importing with an apostrophe (\u2018)\n #1885 Undefined index: SSL_SERVER_CERT\n #1884 Cannot delete custom fields - hangs indefinitely after confirm with spinning gear\n #1882 Can't see any entry on any folder, using any account\n #1881 Doesn't auto-delete install/ folder after installation completed\n #1880 Custom Fields, Not encrypted/decrypted when toggled in Custom-Field Settings Screen\n #1872 New Admin User login not working -JSON Parse file failure\n #1870 Logic issue in headers sending\n #1866 CSV import with empty url leads to value 0\n #1862 Import from Keepass.xml to Personalfolder no access to Item\n #1857 API: Folders created at level 0 instead of correct level\n #1856 Robustified tp.config.php creation in case of upgrade\n #1851 Fix ldap suffix\n #1850 Missing iconv in Docker\n #1840 Added the \"download\" attribute\n #1837 JSON error in Find page when user has no folders to browse\n #1834 Typo in sources/main.functions.php\n #1833 Opening a one time view page give a notice: A session had already been started...\n #1830 Salt key field has already a character filled in.\n #1829 Attachments is broken after upgrade from 2.1.27.0. Fix in progress\n #1828 No error message when duplicate item names at personal keys\n #1826 New dockerfile and docker-compose.yml\n #1820 group vertical scroll bar not work correctly\n #1819 Fix for QR sending from login page\n\n 6-7/\n Fix: upgrade process with encrypted attachments\n Fix for #1806\n\n 5/\n New: Custom Fields are only visible if defined\n Fix issue in tree if subfolder is visible while parent is not\n Fix issues regarding DUOSecurity\n Fix upgrade doesn't start in case that sk.php file has moved\n Fix for Custom Fields not displayed as defined by `order` field\n #1796 Can't add folder from API\n #1787 email notifications are not sent if there are any admins with empty email address\n #1776 Allow restricting items to users and roles - Wrong Item Owner\n #1775 Can not decrypt a created crypted Backup - Improved encryption with Defuse\n #1774 Announce this Item by email\n #1769 Installation issue - no admin account is created\n #1762 Share user rights works backwards\n #1761 Reset of my Personal Saltkey\n #1743 Enable anonymous LDAP queries\n #1690 Unable to set/save personal salt key with LDAP user\n\n 3-4/\n New: Multiselection in Roles vs Folders matrix\n New: LDAP configuration test mode (in progress)\n Fix: Prevent moving a folder to one of its child folder\n Fix: Global saltkey change\n Fix: Copy folder does'nt copy included items\n Fix: Encrypt/Decrypt attachments feature from admin page\n Fix: SQL injection corrected in users.queries.php (author: Pang@ADLab of Venustech)\n #1742 Fix for issue #1539 verifying LDAP groups properly\n #1740 Missing buttons on Users page\n #1737 Cannot import files\n #1735 Dockerfile - PHP extension \"curl\" is loaded Extension curl is not loaded\n #1733 Copy Item doesn't work if copy from public to public folders\n #1731 Cannot login in after fresh install\n #1729 Protection against bigger data than database field size\n #1727 Cannot edit or delete entry in the Personal folder\n\n 2/\n Secure fixes\n Session increase time feature is now increasing with the expected user session duration\n Default language cannot be changed fix\n Fix for \"hide not accessible folders\" option\n #1725 Some fixes\n #1723 Fix spin not removed while reseting user saltkey\n #1722 SELinux issue leads to upload impossible\n #1718 Moving a folder to itself\n #1717 After deleting a folder, items are still visible in search page\n #1713 Doubleclick on directory shows items twice\n #1710 Error on psk change\n #1709 Missing field in table on fresh install\n #1707 \"Restricted To\" not working correctly when creating new items\n #1706 User can edit & delete items without rights\n #1696 Fix for no log for OTV\n #1695 Manager can create folder at root from Items pas\n #1686 Fix for item History dialogbox\n #1685 Fix in Portuguese file\n #1684 Estonian language still missing\n #1679 Sort by don't work in Utilities/logs\n #1676 Pre-auth XSS in index.php\n #1674 name and lastname are changed on other user edit\n #1672 Anonymous settings not stored\n #1670 Incremental upgrade not active\n #1669 Logout - Errors\n #1668 File encryption is not correct in case of upgrade\n #1666 Can`t set avatar\n #1662 Can not delete folders\n #1659 Third level of sub folders in the Personal folder are not seen\n #1654 User management page - no \"next\" button\n\n 2/\n New   Defuse Encryption implemented in place of phpCrypt\n NEW   AGSES authentication implemented\n NEW   Custom Fields data can be encrytped or not in database\n NEW   Folder copy feature\n NEW   Mass move or delete operation on Items\n NEW   Item change proposal\n IMP   Implemented new session encryption library SecureHandler (getting rid of mcrypt extension)\n IMP   Language selection is now in User Profile (Default language is used on authentication page)\n IMP   User creation dialogbox improved with all user properties\n IMP   New user login availability is checked \"live\"\n IMP   Filtering counters in datatables\n IMP   Users Management dialogbox improved\n IMP   2FA authentication change to improve security (no call to external QR generator)\n UPD   AES library updated\n FIX   \"Find\" feature:\n       - copy from public to personal folder\n       - list of folders is refreshed when copying an Item\n #     Copy folders\n #1635 New folder inheritance of parent specific settings\n #1631 Error could be appear on upgrade when checking folders and files\n #1628 URL link to specific item does not work\n #1627 Improved label preview length\n #1625 Request to add/change password\n #1624 Error 500 while importing item with API (with PHP < 7)\n #1621 New option: OTV can be disabled\n #     New option: create Item without password\n #1620 Direct copy password from seach results and large folders\n #1616 Cannot show password with IE11\n #1614 Generate personal folders sets regular root folders also as personal\n #1608 All folders are deleted\n #1603 Attached files disappears\n #1601 Time zone can't be saved in My Profile\n #1593 Insert duplicate label with API\n #1592 Show Client IP in mail to admin about logged on users\n #1588 Fix for OTV links\n #1587 fix for e-mail to administrator on logon does not work\n #1581 Fix for new folder Custom Fields inheritance\n #1579 Fix for preventing a php fatal error\n #1575 Fix for tree not loaded when user has no access to a folder with children\n #1571 Drag and drop from PF to public folder makes item password corrupted\n #1571 Create an item inside another folder than the one selected\n #1561 Personal folder deletion deletes all\n #1559 API IP Whitelist check does not consider XFF\n #1556 Fix bug for upgrading old passwords\n #1553 LDAP support - Add LDAP port - Add support multi LDAP server\n #1551 Authentication through LDAP posix-search\n #1550 2 Factor enabled but can still log in without code\n #1549 Read Only users can use Personal Folders\n #1543 Wrong Saltkey message after setting\n #1533 The change of the main SALT Key doesn't work\n #1532 Added error message in install.js if db-pw contains double quotes\n #1531 Database otv table originator field should be int instead of tinyint\n #1514 User language selection is done in Profile dialogbox\n #1474 New option: create an item without password\n #1472 \"folder access\" and \"role\" settings when adding new user + propage rights from one user\n #1464 CSV files broken, html entities not decoded, newlines not stripped\n #1422 Folders deletion protocol has been securized to prevent unconsistencies in folders tree\n #1412 New option: Manager can move items they can view\n #1408 Display folders visible by a user\n #1299 Export to pdf or csv shows htmlencoded\n\n2.1.26\n #1537 Homepage not loading in French\n #1527 Error Field 'timestamp' doesn't have a default value\n #1526 New .htaccess file in ./includes/config\n #1525 Bad encoding in previous used passwords list\n #1515 Cannot add new users if similar user name exists\n #1512 Long folder names break UI\n #1511 Fix on LDAP due to library upgrade\n #1510 During upgrade, clean personal_folder field in DB\n #1504 Error while creating a new user with API\n #1494 csrfp.config.php not updated on URL change\n #1491 Added check against only numeric folder name\n #1489 JSON error on quick search if no folder access\n #1497 Nothing happens when clicking \"Remove orphan items from database\"\n #1375 Symbol < breaks password in One Time View page\n #1481 Query error\n #1476 Fix personal folder update script for\n #1463 PDF Export still broken\n #1454 API outputs deleted passwords\n #1453 API should have function \"userpw\"\n #1452 API should also output the url to each password\n #1457 New email address not used until logoff & logon\n #1450 Purge log feature - purges nothing\n #1449 Delete category hangs UI and crashes PHP\n #1448 admin delete removed password multiple select not working\n #1445 Password label doesn't preserve '\\' character\n #1439 Fix for large files upload\n #1438 Sanitize ampersand to URL encoding in csrfp.config\n #1426 Fixes for many critical issues with OTV\n #1421 Item will not be automatically deleted when accessed through otv option enabled\n #1415 Installation Issue and PDF export password field mask\n       Fixed problem for user to change self password\n       Fixed problem for deleting all directories\n #1414 Subfolders created into personal folders are presented in Folders and Roles management\n #1409 Updated PDF library to fit 7.x PHP\n #1407 Remove Save button in 2FA settings tab\n #1402 User can define his timezone\n #1395 Error with Chrome while upgrading\n #1394 Replace ascii characters in cpliboard copy\n #1392 Corrected sql error while restoring database\n #1389 Requested JSON parse failed when copying item\n #1386 JSON parse failed (history item view)\n #1384 SyntaxError: Invalid Character if Syslog enabled\n #1383 Export to PDF - Incorrect formatting\n #1381 LDAP user have unlimited access on first logon\n #1380 CSV or KeePass Import - Title as \"0\"\n #1378 JSON parse error when changing user password (with several roles)\n #1369 Cannot save some settings\n #1361 Duo prevents the ability to add/edit items\n #1353 Add ldap_start_tls if set\n #1346 On upgrade settings.php not found\n #1345 Admin, password change and logoff not working\n #1344 Wrap all non-GROUP BY columns in an aggregate function (MIN)\n #1342 Change my password screen loop\n #1340 Upgrade process last step\n #1335 This page doesn't exist\n #1328 Minimum password complexity for folders and items\n #1334 Fix \"installation related pages\" dead link\n #1333 Fix LDAP search base input\n #1332 API not allowing roles separation of pipe '|'\n #1326 Fixed LDAP functionality\n #1325 updated Dockerfile\n #1310 Addes Estonian language\n #1309 error while loading folders (if simplify tree option enabled)\n #1308 Teampass hangs when a folder is create with option \"New sub-folder inherits rights from parent folder\" enabled\n #1301 add ldap_search_base record for db init\n #1300 After 3 bad login attempts, user needs to wait 10s before new try\n #1299 Export to pdf or csv shows htmlencoded\n #1298 Backup-filename on 2.1.27 contains /\n #1292 SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data\n #1284 fix for can_manage_all_users update during upgrade\n #1279 SyntaxError: Unexpected token \u00ee in JSON at position 0\n #1278 CSRFProtector protection while restoring a backup file\n #1276 MySQL 5.7 query error\n #1269 Typo error\n #1263 Error at line 75 in suggestion page\n #1251 Improving CSRFP configuration\n #1240 Security fixes on some missed queries and on non-protected text fields\n #1241 OTV visible more than one time\n #1238 Fix for upgrade.php where mysql_result() command were still not replaced\n #1235 Import from Keepass: missing items with the same title\n #1229 CSRFProtector message while DUO is enabled\n #1225 Unable to Access OTV Link\n #1224 Fixed errors in export_to_html_format\n #1211 No FA code sent from home page\n #1210 Fix for main.queries.php\n #1206 Fix for importing files\n #1203 Needed PHP extensions check during install & update process\n #1197 Awesome Font 4.5.0\n #1193 When I login with user admin \" loading ... \" and it does not finish\n #1192 Cannot save \"enable attachments encryption\"\n #1188 Implemented proposals for source code improvement\n #1186 open/highlight folder tree of displayed item\n #1183 Syntax Error on personal folders option\n #1181 403 Access Forbidden by CSRFProtector! at config save\n #1178 New user right added for managing all users (super Manager)\n #1174 Adding LDAP groups support to 'posix-search' LDAP auth\n #1172 Complete number of Items displayed in Tree\n #1158 Admin password cannot be changed\n #910  Backslashes in accounts are not copied to clipboard\n #268  Password recovery \"Forgot your password?\" don't do anything\n NEW: Server user password change through SSH connection\n NEW: Upgrade database handler improved for better upgrades management\n NEW: New user right added for managing all users (super Manager)\n FIX: If expiration engaged and password is changed, the warning is still present.\n FIX: New suggestion folder could remain empty in some specific cases.\n FIX: By creating a role, this new one is directly visible by creator.\n FIX: Security issue with downloadFile.php. Now protected by session and htaccess.\n FIX: QRCode is not visible in Users list\n FIX: Display inconsistancies in User log results\n Fix: Inconsistency in Delete & Restore process\n Fix: Errors in CSV import process\n Fix: Impossible to proceed with 'password lost' process\n Fix: OTV item not reachable\n Analyzed with RIPS (https://www.ripstech.com/) against security bugs\n\n2.1.25\n #1169 sending Google Authenticator code through index page\n #1160 hiding user password change option if DUOSecurity\n #1152 Error while saving settings\n #1149 log failed user authentication\n #1148 Answer from Server cannot be parsed!\n #1147 Mask/Display password not logged\n #1146 Roles on separate pages\n #1144 Login failure gives odd error\n #1143 import csv double quotes issue\n #1141 Syslog\n #1140 Security fix for Multiple vulnerabilities\n #1135 DataTables warning : table id=t_users - Invalid JSON Response\n #1128 Requested Json Parse Failed\n #1123 No Item to show in a folder after upgrading\n #1122 When deleting an item, confirmation modal doesn't show the name of the item to be deleted\n #1120 Not connect.n Verify Network\n #1114 Cannot Delete Favorites Due to \"undefined function prefix_table() \"\n #1108 Table teampass_keys missing!\n #1103 omplexity Matches new password but still claims otherwise\n #1102 Users cannot create folders\n #1096 One time link view problem\n #1095 Move Personal folder to Group Folder\n #1086 \"Error Encryption of the Password\" after update\n #1078 Send events to syslog\n Fix for changing SaltKey in admin page\n Fix for complete list of Roles in Admin Roles page\n Fix for Users and Items currently edited list that were not proposing \"next\" button\n Fix for label \u201cBy clicking the save button, you will delete \u2026.\u201d persistent\n Fix for list loaded twice if double click in Tree folder\n Fix for search result not displayed if previous folder was empty\n Fix for possible sql injection via LIMIT parameters\n Fix on profile dialogbox\n Implemented Deletion and Restoration events in item's History\n Implemented better handling of User role selection\n Implemented multi personal folders\n Implemented CSRFP library usage for security purpose\n Implemented new \"Yes/No\" button in settings page\n Implemented log view for failed authentication\n Implemented Tree sequentially load (via ajax)\n Add new item from API (for teampass-connect) (not yet tested)\n\n2.1.24\n #1090 - Fix for Export to PDF last folder not taken into consideration\n #1088 - #1085 - Password show problem\n #1087 - Managers can edit and delete Items they are allowed to see flag\n #1085 - Fix for copy to clipboard that sometime fails to work correctly\n #1073 - User can create folder on root without permission\n #1074 - Read only user can create folders + wipe out all items on remove folder\n #1069 - Knowledge Base can not change page\n #1068 - personal saltkey not saved\n #1067 - Suggestion feature not working\n #1064 - Record in db are not deleted when you delete in GUI\n #1058 - Fix API issue while adding an item\n #1063 - Fix for Forgot password not working\n #1062 - Warning for hex2bin function usage (PHP>5.4)\n #1061 - for for Can not import password from keepass xml\n #1055 - Personal item cannot be deleted\n #1048 - Encryption error flag is visible for no reason\n #1045 - Missing fields in table (pw_iv and data_iv)\n #1042 - Added pagination in Users page\n #1042 - Pagination on Users Page\n #1060 - Added new logging events (password copied, password shown)\n #1041 - \"Forgot your password?\" not working\n #1027 - User right more refined with \"No deletion\" possible right\n #953 - Make sure to rebuild the tree when creating an user with a personal folder\n #1035 - added php-xml install check\n #950 - #1005 - can not create Admin account\n #936 - #937 - Session file_exists not allowed while running through open_basedir restriction\n #970 - API special char fix\n #962 - Error message when using the Find-function\n #955 - Fix LDAP Settings UI\n Fix passwords are empty when importing from Keepass\n Fix empty URL column in off-line html\n A lot of small fixes\n New: implemented 2factor authentication DUOSecurity feature\n New: create User via API\n New: Vietnamese language added\n New: Tree structure is loaded dynamically\n New: Notification to Managers for awaiting suggestions\n\n 2.1.23\n #727 - #729 - Encoding problem\n #799 - Error: Field 'field_1' doesn't have a default value\n #830 - Fix documentation syntax\n #829 - Removing unecessary php closing tags\n #807 - Fix rights based on roles for new folders\n #808 - Add a SMTP security parameter to the email configuration\n #805 - Keepass Import improvements\n #790 - Install fixes\n #835 - Links in items description don't work\n #817 - Wrong number of users online\n #838 - Fix for mysqli encoding\n #839 - Keepass fixes\n #853 - New setting for default session expiration delay\n #851 - Multiple fixes for LDAP integration\n #814 - #857\n #880 - Fix for View logs error redeclared function getBits\n #881 - Fix for \"Forgot your password?\" not working\n #900 - Fix for New folder incorrect permissions (read-only)\n #890 - Fix for Personal Folder only read permission\n #910 - Fix for Backslashes in accounts are not copied to clipboard\n #913 - Fix for 'Announce this item by email' fails\n #915 - Export to PDF corrected\n #907 - Move folder feature\n #917 - Fix on API\n #941 - Fix for user_not_exists message (LDAP)\n #988 - Error on copy item\n #992 - Added to Log User Created By\n PR : #871 - #887\n API: add FIND feature\n Fix: copy not possible in RO folders\n Fix: If GA activated, Users can ask for a new code from the login page\n Fix: Off-line file url was not correct in download button\n Removal of Keys table\n Implementation of PhpCrypt library as encryption library (AES-128 with CBC mode)\n Implementation of Awesomefont in Items page\n Clean up of old comments\n Added \"long press\" to show password\n Fix of bug in Offline export\n List of Users is now loaded through Ajax to prevent timeout in case of long list of users\n Personal saltkey change is now performed through Ajax to prevent timeout in case of long list of passwords\n Fix for users with \"Allowed folders\" that can't write inside them.\n Removed extra files from Yubico folder\n Update process: suggestions passwords are reencrypted\n Suggestion migrated to new encryption\n\n2.1.22\n #700 - Errors related to \"includes/js/jstree/themes/default\"\n #718 - Two factor authentication: \"This user has no email set!\"\n #674 - API - User rights\n #697 - Default language setting, not being applied to automatically created ldap users.\n #698 - Default language setting, not being applied to newly created users.\n #707 - httpRequest is missing in upgrade process\n #725 - Disable button after item creation or edition\n #720 - cannot sign up to 2factor\n #690 - limit password export via PDF/CSV to user/group\n #745 - Enable again save_button after error on Add/Edit Item\n #739 - OTV correction\n #731 - Export password to file\n #653 - Passwords preprended during upgrade\n #767 - Backup restore feature fix\n #774 - Call to undefined method DB::queryInsert\n Other: #711 - #699 - #726 - #744 - #684 - #737\n New - Rights \"Read / Write / No Access\" added to folders for better rights management\n New - quick copy to clipboard for password and login\n New - New option : Prevent against duplicate items in same folder\n New - If folder is read-only for the User then it is striked-through\n Changed - list of restricted users refined by folder selected\n Fix - Not possible to see more than 8 Roles in Roles matrix\n\n2.1.21\n #597 - Rapid click on save button on \"Add a folder\"\n #599 - SQL:AUTO_INCREMENT id --> language\n #600 - preg_replace(): Unknown modifier '|'\n #598 - Extra fields in home page\n #602 - can't change user password by very heavy complexity\n #603 - password complexity check only in javascript\n #415 - Items are not show when in folder view. Can easy search and open.\n #578 - API generate new key\n #580 - Redirect to login page when accessing directly an item (if not logged)\n #576 - Mismatch email_body tags\n #607 - HMTL export erroneous download link\n #622 - Tooltip on left menu buttons\n #619 - CSV Import does not import passwords\n #617 - CSV Import doesn't handle passwords with quotes well\n #627 - Complete authentication bypass\n #626 - API vulnerable (improvement in progress)\n #633 - favicon correction\n #636 - MySQL on non-standard port\n #632 - Refactor order of index.php\n #629 - A password for admin account is required during installation\n #654 - Tab character breaks json format\n #652 - one-time view not working when interface is in French\n #658 - Rapid Click on Item Copy\n #657 - Rapid Click on Password Creation\n #656 - Can't Create Folder as User\n #643 - email charset in UTF-8\n #641 - Add and save item -> double click on that icon won't work\n #671 - When password is generated, it is added in confirm field too\n #672 - Changing password makes account inaccessible\n #637 - Multi Domain LDAP\n #673 - Changed strategy for quick icon clipboard copy\n #639 - Design fix in admin page\n #681 - Fix for Folder and Users creation as Administrator\n #680 - Set custom expiry for one time view link\n #682 - Fix SMTP authentication which were used regardless of the settings\n      - Fix a query used in the \"lost password\" management.\n      - Fix the mysql error message when the session_expired page is accesseded...\n - New option permitting to send or not an email to User when admin changes his password\n - Fix for image viewer when option files encryption is set\n - Fix for password complexity level update\n\n2.1.20\n #492 - Default admin password not working\n #509 - Password complexity\n #493 - Unable to purge logs\n #503 - manual insertions in Items History log not working\n #494 - Logs > Administration JSON error\n #491 - Applying email address to user\n #441 - Attachments encryption\n #459 - Turn off strict mode\n #477-#452 - Fix for upgrade\n #459 - Turn off strict mode\n #472 - Error on line 582 index.php\n #474 - Set default to checked for secure passwords\n #497 - Moved GA QR code creation to administration\n #487 - Off-line mode, link make the page scroll up\n #533 #521 #528 - Installation issue\n #525 - Settings.php should not be commited\n #527 - Potential security bug\n #485 - CVS Import on V 2.1.19 quotes problems\n #544 - DataTables warning: JSON data from server could not be parsed\n #547 - User search\n #520 - API access\n #549 #550 - Server Time in footer\n #539 - New feature: Simplify Items Tree\n #547 - Search in Users page\n #401 - Folder role inheretance on new folder\n #552 - added MBstring check\n #554 - Search-Page \"Jump to item\"-Button not working correctly\n Fork from slimm609 - Encrypted Sessions and CSRFGuard enabled\n Issues with folder creation in \"personal folder\"\n #536 - one time view page for anonymous user\n #517 - New feature: Suggest items system\n New feature: Sub-folder inherits of parent folder\n\n2.1.19\n #413 - fix for PHP Parse error: syntax error, unexpected '['\n #447 - fix for PHP Fatal error: Cannot redeclare getBits()\n #442 - problem edit folder\n #399 - Export encrypted passwords (off-line mode)\n #408 - Personal Salt Key changing doesn't work\n #419 - Password complexity not refreshed\n #418 - English translation improvement\n #407 - \"Restricted to\" feature improvement\n #402 - In item list, description is cut with <br />\n #393 - Password input and confirmation field location\n #388 - Unable to move items between folders\n #400 - Extra fields for Item\n #414 - Maintenance mode during upgrade can be disabled\n #389 - Language dropdown not working\n #392 - Check of absolute path for SK.PHP\n #385 - Email not sent ... check your configuration (to be checked)\n #379 - CSV importing not working (to be checked)\n #134 - Login After Session Expires\n #429 - Changed user.psk field to allow NULLs\n #428 : error: iconv(): Detected an illegal character in input string\n #426/#430 : New option to disable information loading in Admin page\n #142 - Google Authenticator implemented\n * Dialogbox not closed when changing folder name\n * Display Item details through Find page error\n\n2.1.18\n #315 - jstree style.css badly referenced\n #314 - Folder is not being deleted\n #320 - Enabling LDAP prevents local admin login\n #317 - server expected extensions are tested\n #318 - Upgrade process badly creates sk.php file\n #348 - Fix for undefined index \"isAdministratedByRole\"\n #350 - Fix for Lock and delete user actions don't refresh page\n #354 - Fix for removing folders\n #359 - Fix for initial user password change complexity check\n #371 - Fix for uploaded files corrupted\n #291 - Fix to support openLDAP / posix style LDAP\n #361 - Option to use login password as SALT key\n * Fix - no possibility to update a Role\n * Fix - editing users by clicking on the fields broken\n * Fix - parse error in database errors log\n * New - requested user password complexity shown when changing password\n * New - option for deactivate client-server encryption (usage of SSL)\n * New - in tree, new counters added (subfolders and items in subfolders numbers)\n * New language added - Catalan\n\n2.1.17\n * New exchange encryption protocol. No key is visible. The channel is\n encrypted at start of session.\n * HTTPS connection can be activated (be carefull, you need a certificate)\n * Change Users passwords encryption\n * Corrected - once clicked on not authorized Item, any Item selection was\n no more possible.\n #283 - Rights on a folder created at root are set.\n #285 - New settings: Anyone can modify option can be activated by default\n #287 - newly created personal folders ar propergated to the group\n #289 - Personal folder name badly constructed\n #270 - Restricted items visible in Find results\n #298 - Protection against bad actions on personal folders\n #299 - User can be explicetly administrated by Managers of specific Roles\n #300 - Personal SK is encrypted in COOKIE\n #301 - Corrected query call error\n #302 - Under \"Views\" users can see items that exist in personal folders\n that have been accessed\n #307 - fclose() statement badly placed\n\n2.1.16\n * #245 - #248 - #249 - #265 - #266 - #267 - #268 - #273\n * #277: Change personal saltkey error\n\n2.1.15\n * list of bugs corrected: #242 - #254 - #244 - #247 - #256 - #250 - #254 - #248\n   #243 - #252 - #232 - #240 - #260 - #259 - #262 - #251 - #236\n * MySQL hashing => todo\n * CSV importation\n\n2.1.14\n * list of bugs corrected: #238 - #235 - #239 - #203 - #201 - #233 - #226 - #236\n   #228 - #189 - #234 - #225 - #239 - #194 - #86\n * Corrected bug for sending emails\n * Different small corrections\n\n2.1.13\n * Code improvement for PSR compliance\n * jQueryUI updated to v1.9\n * Cleanup unused files\n * #207: Managers can only see the Roles they are allowed to.\n * #190, #192, #199, #202, #196, #204, #191, #214 corrected\n * Correction: taking into account user \"can create at root level\" setting\n * Added: saltkey is exported in a unique file that should be moved outside\n   \"www\" server scope.\n * Added: 2-factors authentication\n * Added: new check when Role creation\n * Added: new check for database query error\n * Added: Item in edition will lock any other edition\n * Added: New administrator View permitting to view \"Users actually connected\"\n   and \"Tokens taken for Items in edition\"\n * Added: User account contains now Name and Last Name fields\n\n2.1.12\n * #188\n * #185 Started adjusting codebase to follow PSR 1 and PSR 2 based on ecaron\n \t\twork (thank you)\n\n2.1.11\n * #184 - bug correction\n\n2.1.10\n * #161 - #100 - #175\n * #163 Personal saltkey duration based on cookie (under option)\n * share item -> manage error when email not sent\n * Improved/corrected export CSV and PDF\n * Correction: During upgrade, languages table is wrong\n * Personal Saltkey is stored in cookie (new admin setting)\n * Emails settings are moved to admin settings page (no more in settings.php)\n * Files folder is now a setting (to improve security)\n * Exported PDF is encrypted (contributor: Jay2k1)\n * #168 Add description field in PDF\n * #174 User creation and modification log\n\n2.1.9\n * #126-#132-#130-#131-#139-#129-#141-#146\n * Italian translation\n * Find page - focus in search box (contributor: Jay2k1)\n\n2.1.8\n * SF 206\n * #107-#95-#102-#103-#67-#32-#87-#71-#125-#120-#116-#111-#108-#104-#90-\n   #85-#78-#48-#34-#67-#75-#82-#84\n * bug correction cache table\n * view Item details from the Find page\n * CSV export  -> started\n * mail notification when selecting an item\n * share Item by mail\n * add email field in Item form\n * automatic deletion of Item after X opening or after limit date\n * Roles / Folders matrix: Roles passwords complexity shown\n\n2.1.7\n * SF 247 - 248 - 261 - 264 - 265 - 266 - 267\n * 67:\tprotect uploadify library => different file protection added\n * protect Downloadfile.php\n * SF228: reset personal saltkey (purge personal items)\n * SF262: copy of item is in log\n * old password in log was badly encoded\n * item copy from search page corrected\n * some rights checks added before action\n * email send to new created user\n\n2.1.6\n * #59: settings.php email setting errors\n * #67: Protected upload file\n * added email notification for user requiering an access to a restricted item.\n * 264:\tFeature Request: Password History\n\n2.1.5\n* #56: Temporary solution for keeping old ADMIN profile rights\n\n2.1.4\n* Corrections: SF237, SF240, SF243 , #29, #25,  #32 , #36 , #37 , #39 , #40\n\tSF257, SF259, SF239, #41, #40, #51\n* Improvements:\n\tSF232\n\tSF231:\tHow to Restrict Admin from Viewing items\n\t#31: new setting option for dynamic list\n\t#27: new subfolders only associated to the same roles as the parent folder\n\t#33: folder management in items page\n\tChanging SALT key from admin pages\n\n2.1.3\n* upgrade improvement in case of upgrading from 1.x version.\n\n2.1.2\n* improved upgrade connection errors and automatic credentials import\n* Corrections: #4, #7, 236\n\nv2.1.1\n* 2 bugs correction\n\nv2.1\n* Licence has changed to GNU AFFERO GPL 3.0\n* 203 - password complexity on Roles\n* 121 - Default language can be set + user language stored in DB\n* Encrypt old passwords in LOG_ITEMS table\n* started CRON activity for emails sending\n* new option: send email to Admins when users get connected\n* \"Restricted to\" field not viewable to everyone\n* add an icon for hide/show passwords in clear text (toggle button)\n", "<?php\n/**\n *\n * @file          items.import.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('./sources/SecureHandler.php');\nsession_start();\nif ((!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])) &&\n    $_GET['key'] != $_SESSION['key']\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"home\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// connect to the server\n//load main functions needed\nrequire_once 'sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\necho '\n<input type=\"hidden\" id=\"folder_id_selected\" value=\"', isset($_GET[\"folder_id\"]) ? filter_var(intval($_GET[\"folder_id\"]), FILTER_SANITIZE_NUMBER_INT) : '', '\" />\n<input type=\"hidden\" id=\"import_user_token\" value=\"\" />\n<div id=\"import_tabs\">\n    <ul>\n        <li><a href=\"#tabs-1\">CSV</a></li>\n        <li><a href=\"#tabs-2\">Keepass</a></li>\n    </ul>\n    <!-- TAB1 -->\n    <div id=\"tabs-1\">\n        <!-- show some info -->\n        <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\" id=\"csv_import_info\">\n            <table border=\"0\">\n                <tr>\n                <td valign=\"center\"><span class=\"fa fa-info-circle fa-2x\"></span>&nbsp;</td>\n                <td>'.$LANG['csv_import_information'].'</td>\n                </tr>\n            </table>\n        </div>\n        <!-- show input file -->\n        <div id=\"upload_container_csv\">\n            <div id=\"filelist_csv\"></div><br />\n            <a id=\"pickfiles_csv\" href=\"#\">'.$LANG['csv_import_button_text'].'</a>\n        </div>\n\n        <div style=\"display:none;margin-top:10px;\" id=\"div_import_csv_selection\">\n            <div style=\"\">'.$LANG['csv_import_options'].':</div>\n            <div style=\"margin-left:20px;\">\n            <input type=\"checkbox\" id=\"import_csv_anyone_can_modify\" /><label for=\"import_csv_anyone_can_modify\">'.$LANG['import_csv_anyone_can_modify_txt'].'</label><br />\n            <input type=\"checkbox\" id=\"import_csv_anyone_can_modify_in_role\" /><label for=\"import_csv_anyone_can_modify_in_role\">'.$LANG['import_csv_anyone_can_modify_in_role_txt'].'</label>\n            </div>\n            <div style=\"margin-top:10px;\">'.$LANG['csv_import_items_selection'].':</div>\n            <div id=\"import_selection\" style=\"margin:10px 0 0 10px;\"></div>\n        </div>\n    </div>\n    <!-- end tab -->\n\n    <!-- TAB2 -->\n    <div id=\"tabs-2\">\n        <!-- Prepare a list of all folders that the user can choose -->\n        <div style=\"margin:10px 0 5px 0;\" id=\"keypass_import_options\">\n            <label><b>'.$LANG['import_keepass_to_folder'].'</b></label>&nbsp;\n            <select id=\"import_keepass_items_to\" style=\"width:87%; height:35px;\">\n                <option value=\"0\">'.$LANG['root'].'</option>';\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', './includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n$folders = $tree->getDescendants();\n$prevLevel = 0;\n\n// show list of all folders\nforeach ($folders as $t) {\n    if (in_array($t->id, $_SESSION['groupes_visibles'])) {\n        if (is_numeric($t->title)) {\n            $user = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\", $t->title);\n            $t->title = $user['login'];\n            $t->id = $t->id.\"-perso\";\n        }\n        $ident = \"&nbsp;&nbsp;\";\n        for ($x = 1; $x < $t->nlevel; $x++) {\n            $ident .= \"&nbsp;&nbsp;\";\n        }\n        if (isset($_GET['folder_id']) && filter_var($_GET['folder_id'], FILTER_SANITIZE_NUMBER_INT) == $t->id) {\n            $selected = \" selected\";\n        } else {\n            $selected = \"\";\n        }\n        if ($prevLevel < $t->nlevel) {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        } elseif ($prevLevel == $t->nlevel) {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        } else {\n            echo '<option value=\"'.$t->id.'\"'.$selected.'>'.$ident.$t->title.'</option>';\n        }\n        $prevLevel = $t->nlevel;\n    }\n}\n        echo '\n            </select>\n        </div>\n\n        <!-- upload options -->\n        <div style=\"\">'.$LANG['csv_import_options'].':</div>\n            <div style=\"margin-left:20px;\">\n            <input type=\"checkbox\" id=\"import_kps_anyone_can_modify\" /><label for=\"import_kps_anyone_can_modify\">'.$LANG['import_csv_anyone_can_modify_txt'].'</label><br />\n            <input type=\"checkbox\" id=\"import_kps_anyone_can_modify_in_role\" /><label for=\"import_kps_anyone_can_modify_in_role\">'.$LANG['import_csv_anyone_can_modify_in_role_txt'].'</label>\n        </div>\n\n        <!-- uploader -->\n         <div id=\"upload_container_kp\" style=\"text-align:center;margin-top:10px;\">\n            <div id=\"filelist_kp\"></div><br />\n            <a id=\"pickfiles_kp\" href=\"#\">'.$LANG['keepass_import_button_text'].'</a>\n        </div>\n\n        <div id=\"kp_import_information\" style=\"margin:10px 0 0 10px;\"></div>\n    </div>\n    <!-- end tab -->\n</div>\n\n<div style=\"text-align:center;margin-top:8px; display:none;\" id=\"import_information\"></div>';\n\n?>\n<script type=\"text/javascript\">\n    $(function() {\n        $(\"#import_keepass_items_to\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n        $(\"#import_tabs\").tabs();\n\n        // CSV IMPORT\n        var csv_filename = '';\n        var uploader_csv = new plupload.Uploader({\n            runtimes : \"gears,html5,flash,silverlight,browserplus\",\n            browse_button : \"pickfiles_csv\",\n            container : \"upload_container_csv\",\n            max_file_size : \"10mb\",\n            chunk_size : \"1mb\",\n            unique_names : true,\n            dragdrop : true,\n            multiple_queues : false,\n            multi_selection : false,\n            max_file_count : 1,\n            url : \"sources/upload/upload.files.php\",\n            flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n            silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n            filters : [\n                {title : \"CSV files\", extensions : \"csv\"}\n            ],\n            init: {\n                FilesAdded: function(up, files) {\n                    // generate and save token\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type : \"save_token\",\n                            size : 25,\n                            capital: true,\n                            numeric: true,\n                            ambiguous: true,\n                            reason: \"import_items_from_csv\",\n                            duration: 10\n                        },\n                        function(data) {\n                            $(\"#import_user_token\").val(data[0].token);\n                            up.start();\n                        },\n                        \"json\"\n                    );\n                },\n                BeforeUpload: function (up, file) {\n                    up.settings.multipart_params = {\n                        \"PHPSESSID\":\"<?php echo $_SESSION['user_id']; ?>\",\n                        \"type_upload\":\"import_items_from_csv\",\n                        \"user_token\": $(\"#import_user_token\").val()\n                    };\n                },\n                UploadComplete: function(up, files) {\n                    ImportCSV(csv_filename);\n                    up.splice();    // clear the file queue\n                }\n            }\n        });\n\n        // Uploader options\n        uploader_csv.bind(\"UploadProgress\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        });\n        uploader_csv.bind(\"Error\", function(up, err) {\n            $(\"#filelist_csv\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n                \", Message: \" + err.message +\n                (err.file ? \", File: \" + err.file.name : \"\") +\n                \"</div>\"\n            );\n            up.splice();    // Clear the file queue\n            up.refresh(); // Reposition Flash/Silverlight\n        });\n        uploader_csv.bind(\"+\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(\"100%\");\n        });\n        uploader_csv.bind('FileUploaded', function(upldr, file, object) {\n            var myData = prepareExchangedData(object.response, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            csv_filename = myData.operation_id;\n        });\n\n        // Load CSV click\n        $(\"#uploadfiles_csv\").click(function(e) {\n            uploader_csv.start();\n            e.preventDefault();\n        });\n        uploader_csv.init();\n\n        //-----------------------------------------------------\n\n        // KEYPASS IMPORT\n        var kp_filename = '';\n        var uploader_kp = new plupload.Uploader({\n            runtimes : \"gears,html5,flash,silverlight,browserplus\",\n            browse_button : \"pickfiles_kp\",\n            container : \"upload_container_kp\",\n            max_file_size : \"10mb\",\n            chunk_size : \"1mb\",\n            unique_names : true,\n            dragdrop : true,\n            multiple_queues : false,\n            multi_selection : false,\n            max_file_count : 1,\n            url : \"sources/upload/upload.files.php\",\n            flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n            silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n            filters : [\n                {title : \"Keypass files\", extensions : \"xml\"}\n            ],\n            init: {\n                FilesAdded: function(up, files) {\n                    // generate and save token\n                    $.post(\n                        \"sources/main.queries.php\",\n                        {\n                            type : \"save_token\",\n                            size : 25,\n                            capital: true,\n                            numeric: true,\n                            ambiguous: true,\n                            reason: \"import_items_from_keypass\",\n                            duration: 10\n                        },\n                        function(data) {\n                            $(\"#import_user_token\").val(data[0].token);\n                            up.start();\n                        },\n                        \"json\"\n                    );\n                },\n                BeforeUpload: function (up, file) {\n                    $(\"#import_status_ajax_loader\").show();\n                    up.settings.multipart_params = {\n                        \"PHPSESSID\":\"<?php echo $_SESSION['user_id'];?>\",\n                        \"type_upload\":\"import_items_from_keypass\",\n                        \"user_token\": $(\"#import_user_token\").val()\n                    };\n                },\n                UploadComplete: function(up, files) {\n                    ImportKEEPASS(kp_filename);\n                    up.splice();        // clear the file queue\n                }\n            }\n        });\n        // Uploader options\n        uploader_kp.bind(\"UploadProgress\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        });\n        uploader_kp.bind(\"Error\", function(up, err) {\n            $(\"#filelist_kp\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n                \", Message: \" + err.message +\n                (err.file ? \", File: \" + err.file.name : \"\") +\n                \"</div>\"\n            );\n            up.splice();    // clear the file queue\n            up.refresh(); // Reposition Flash/Silverlight\n        });\n        uploader_kp.bind(\"+\", function(up, file) {\n            $(\"#\" + file.id + \" b\").html(\"100%\");\n        });\n        uploader_kp.bind('FileUploaded', function(upldr, file, object) {\n            var myData = prepareExchangedData(object.response, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            kp_filename = myData.operation_id;\n        });\n\n        // Load CSV click\n        $(\"#uploadfiles_kp\").click(function(e) {\n            uploader_kp.start();\n            e.preventDefault();\n        });\n        uploader_kp.init();\n    });\n\n    /*\n     * Import Items to Database\n     */\n\n\n    //Permits to upload passwords from CSV file\n    function ImportCSV(file)\n    {\n        $(\"#import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n        $(\"#import_selection\").html(\"\");\n        $(\"#div_import_csv_selection\").hide();\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_file_format_csv\",\n                file        : file,\n                folder_id   : $(\"#folder_id_selected\").val()\n            },\n            function(data) {\n                if (data[0].error == \"bad_structure\") {\n                    $(\"#import_information\").html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['import_error_no_read_possible']; ?>\").show();\n                } else {\n                    $(\"#div_import_csv_selection\").show();\n                    $(\"#import_selection\").html(data[0].output+'<div style=\"text-align:center;margin-top:8px; display:none;\" id=\"csv_import_information\"></div><div style=\"\"><button id=\"but_csv_start\"><?php echo $LANG['import_button']; ?></button></div>');\n                    $(\"#item_all_selection\").click(function() {\n                        if ($(\"#item_all_selection\").prop(\"checked\")) {\n                            $(\"input[class='item_checkbox']:not([disabled='disabled'])\").attr(\"checked\", true);\n                        } else {\n                            $(\"input[class='item_checkbox']:not([disabled='disabled'])\").removeAttr(\"checked\");\n                        }\n                    });\n                    $(\"#but_csv_start\").click(function() {\n                        launchCSVItemsImport();\n                    });\n                    $(\"#import_items_to\").select2({\n                        multiple: false,\n                        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                        /*selectedText: function(numChecked, numTotal, checkedItems){\n                            return $(checkedItems[0]).attr('title') + ' checked';\n                        }*/\n                    });\n                    $(\"button\").button();\n                    $(\".ui-dialog-buttonpane button:contains('<?php echo $LANG['import_button']; ?>')\").button(\"disable\");\n                    $(\"#import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                    // Fade out\n                    $(this).delay(1000).queue(function() {\n                        $(\"#import_information\").effect( \"fade\", \"slow\" );\n                        $(this).dequeue();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    //get list of items checked by user\n    function launchCSVItemsImport()\n    {\n        $(\"#csv_import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n        var items = \"\";\n\n        //Get data checked\n        $(\"input[class=item_checkbox]:checked\").each(function() {\n            var elem = $(this).attr(\"id\").split(\"-\");\n            if (items == \"\") items = $(\"#item_to_import_values-\"+elem[1]).val();\n            else items = items + \"@_#sep#_@\" + $(\"#item_to_import_values-\"+elem[1]).val();\n\n        });\n\n        if (items == \"\") {\n            $(\"#csv_import_information\").html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['error_no_selected_folder']; ?>\").attr(\"class\",\"ui-state-error\");\n            // Fade out\n            $(this).delay(1000).queue(function() {\n                $(\"#csv_import_information\").effect( \"fade\", \"slow\" );\n                $(this).dequeue();\n            });\n            return;\n        }\n\n        //Lauchn ajax query that will insert items into DB\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_items\",\n                folder      : $(\"#import_items_to\").val(),\n                data        : prepareExchangedData(items , \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                import_csv_anyone_can_modify    : $(\"#import_csv_anyone_can_modify\").prop(\"checked\"),\n                import_csv_anyone_can_modify_in_role    : $(\"#import_csv_anyone_can_modify_in_role\").prop(\"checked\")\n            },\n            function(data) {\n                //after inserted, disable the checkbox in order to prevent against new insert\n                var elem = data[0].items.split(\";\");\n                for (var i=0; i<elem.length; i++) {\n                    $(\"#item_to_import-\"+elem[i]).attr(\"disabled\", true);\n                    $(\"#item_text-\"+elem[i]).css(\"textDecoration\", \"line-through\");\n                }\n\n                ListerItems($('#hid_cat').val(), \"\", 0)\n\n                $(\"#csv_import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                // Fade out\n                $(this).delay(1000).queue(function() {\n                    $(\"#csv_import_information\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            },\n            \"json\"\n        );\n    }\n\n\n\n    //Permits to upload passwords from KEEPASS file\n    function ImportKEEPASS(file)\n    {\n        $(\"#import_information\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo $LANG['please_wait']; ?>').attr(\"class\",\"\").show();\n\n        //check if file has good format\n        $.post(\n            \"sources/import.queries.php\",\n            {\n                type        : \"import_file_format_keepass\",\n                file        : file,\n                destination : $(\"#import_keepass_items_to\").val()\n            },\n            function(data) {\n                $(\"#kp_import_information\").html(data[0].message + \"<?php echo '<br><br><b>'.$LANG['alert_page_will_reload'].'</b>'; ?>\");\n                $(\"#import_information\").show().html(\"<i class='fa fa-exclamation-circle'></i>&nbsp;<?php echo $LANG['alert_message_done']; ?>\").attr(\"class\",\"ui-state-highlight\");\n                // Reload page\n                /*$(this).delay(2000).queue(function() {\n                    $(\"#import_information\").effect( \"fade\", \"slow\" );\n                    document.location = \"index.php?page=items\";\n                    $(this).dequeue();\n                });*/\n            },\n            \"json\"\n        );\n    }\n</script>\n", "<?php\n/**\n * @file          items.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n$var['hidden_asterisk'] = '<i class=\"fa fa-eye fa-border fa-sm tip\" title=\"'.$LANG['show_password'].'\"></i>&nbsp;&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>';\n\n// load csrfprotector\n$csrfp_config = include $SETTINGS['cpassman_dir'].'/includes/libraries/csrfp/libs/csrfp.config.php';\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n    var query_in_progress = 0;\n\n    $(document).on('focusin', function(e) {e.stopImmediatePropagation();});\n\n//  Part of Safari 6 OS X fix\n    //  clean up HTML for sending via JSON to PHP code\n    function clean_up_html_safari(input)\n    {\n        //  applies to Safari 6 on OS X only, so check for that\n        user_agent = navigator.userAgent;\n        if (/Mac OS X.+6\\.\\d\\.\\d\\sSafari/.test(user_agent))\n        {\n            // remove strange divs\n            input = input.replace(/<\\/*div.+>\\n/g, '');\n            /**/\n            //  remove other strange tags\n            allowed_tags = '<strong><em><strike><ol><li><ul><a><br>';\n            input = strip_tags(input, allowed_tags);\n\n            //  replace special characters\n            input = input.replace(/(\\r\\n|\\n|\\r)/gm, '<br>')\n                                                .replace(/\\t/g, '')\n                                                .replace(/\\f/g, '')\n                                                .replace(/\\v/g, '')\n                                                .replace(/\\r/g, '');\n        }\n        return input;\n    }/* */\n\n    function AddNewNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function EditNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function DeleteNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).delNode()\n    }\n\n    //FUNCTION mask/unmask passwords characters\n    function ShowPassword(pw)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if ($('#id_pw').html().indexOf(\"fa-asterisk\") != -1) {\n            itemLog(\"item_password_shown\");\n            $('#id_pw').text($('#hid_pw').val());\n        } else {\n            $('#id_pw').html('<?php echo $var[\"hidden_asterisk\"]; ?>');\n        }\n    }\n\n    $(\"#tabs-02\").on(\n        \"change\",\n        \"#pw1\",\n        function() {\n            $('#visible_pw').val($('#pw1').val());\n        }\n    );\n\n    function ShowPasswords_EditForm()\n    {\n        if ($('#edit_visible_pw').is(\":visible\")) {\n            $('#edit_visible_pw').addClass(\"hidden\");\n        } else {\n            $('#edit_visible_pw').show();\n        }\n    }\n\n    $(\"#edit_pw1\").keyup(function() {\n        $(\"#edit_visible_pw\").text( this.value );\n    });\n\n    $(\"#pw1\").keyup(function() {\n        $(\"#visible_pw\").text( this.value );\n    });\n\n\n\n    /**\n     * Open a dialogbox\n     * @access public\n     * @return void\n     **/\n    function OpenDialog(id, modal)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if (modal == \"false\") {\n            $(\"#\"+id).dialog(\"option\", \"modal\", false);\n        } else {\n            $(\"#\"+id).dialog(\"option\", \"modal\", true);\n        }\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n/*\n*\n*/\nfunction LoadTreeNode(node_id)\n{\n\n}\n\n//###########\n//## FUNCTION : Launch the listing of all items of one category\n//###########\nvar requestRunning = false;\nfunction ListerItems(groupe_id, restricted, start, stop_listing_current_folder)\n{\n    var me = $(this);\n    stop_listing_current_folder = stop_listing_current_folder || \"0\";\n\n    // case where we should stop listing the items\n    if ($(\"#items_listing_should_stop\").val() === \"1\") {\n        requestRunning = false;\n        $(\"#items_listing_should_stop\").val(\"0\");\n        return false;\n    }\n\n    if (stop_listing_current_folder === 1) {\n        me.data('requestRunning', false);\n        $(\"#new_listing_characteristics\").val(groupe_id+\",\"+restricted+\",\"+start+\",0\");\n    } else {\n        $(\"#new_listing_characteristics\").val(\"\");\n    }\n\n\n    // prevent launch of similar query in case of doubleclick\n    if (requestRunning === true) {\n        return false;\n    }\n    requestRunning = true;\n\n    $(\"#request_lastItem, #selected_items\").val(\"\");\n\n    if (groupe_id != undefined) {\n        //refreshTree(groupe_id);\n        if (query_in_progress != 0 && query_in_progress != groupe_id) {\n            request.abort();    //kill previous query if needed\n        }\n        query_in_progress = groupe_id;\n        //LoadingPage();\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        if (start == 0) {\n            //clean form\n            $('#id_label, #id_pw, #id_email, #id_url, #id_desc, #id_login, #id_info, #id_restricted_to, #id_files, #id_tags, #id_kbs, #item_extra_info, #item_viewed_x_times').html(\"\");\n            $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n        }\n        $(\"#items_list\").css(\"display\", \"\");\n\n        $(\"#hid_cat\").val(groupe_id);\n        if ($(\".tr_fields\") != undefined) $(\".tr_fields, .newItemCat, .editItemCat\").addClass(\"hidden\");\n\n        //Disable menu buttons\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n\n        $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG[\"opening_folder\"]); ?>');\n\n        //ajax query\n        request = $.post(\"sources/items.queries.php\",\n            {\n                type        : \"lister_items_groupe\",\n                id          : groupe_id,\n                restricted  : restricted,\n                start       : start,\n                uniqueLoadData : $(\"#uniqueLoadData\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\",\n                nb_items_to_display_once : $(\"#nb_items_to_display_once\").val()\n            },\n            function(data) {\n                if (data == \"Hacking attempt...\") {\n                    alert(\"Hacking attempt...\");\n                    return false;\n                }\n                //get data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                // reset doubleclick prevention\n                requestRunning = false;\n\n                // manage not allowed\n                if (data.error == \"not_allowed\") {\n                   $(\"#div_dialog_message_text\").html(data.error_text);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n                   $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;Error');\n                   $(\"#items_list_loader\").addClass(\"hidden\");\n                   return false;\n                }\n\n                // to be done only in 1st list load\n                if (data.list_to_be_continued === \"end\") {\n                    $(\"#pf_selected\").val(data.IsPersonalFolder);\n\n                    // display path of folders\n                    if (data.arborescence != undefined) {\n                        var path_maxlength = 420;\n                        if ($(\"#path_fontsize\").val() != \"\") $(\"#items_path_var\").css('font-size', $(\"#path_fontsize\").val());\n                        if (data.IsPersonalFolder === 0) {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;' + data.arborescence);\n                        } else {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG['personal_folder']); ?>&nbsp;:&nbsp;' + data.arborescence);\n                        }\n                        var path_levels = data.arborescence.split('&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;').length;\n                        if ($(\"#items_path_var\").width() > path_maxlength) {\n                            $(\"#path_fontsize\").val($(\"#items_path_var\").css('font-size'));\n                            // start reducing size of font\n                            $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size'))-1);\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels < 2) {\n                                while ($(\"#items_path_var\").width() > path_maxlength) {\n                                    $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size')) - 1);\n                                }\n                            }\n\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels >= 2) {\n                                // only take first and last\n                                var nb = 1;\n                                var totalPathLength = occupedWidth = 0;\n                                $(\".path_element\").each(function () {\n                                    totalPathLength += $(this).width();\n                                    if (nb != 1 && nb != (path_levels-1) && nb != path_levels) {\n                                        $(this).html(\"<span class='tip' title='\"+$(this).html()+\"'>...</span>\");\n                                    } else if (nb == path_levels) {\n                                        // next condition occurs if lasst folder name is too long\n                                        if (totalPathLength > path_maxlength) {\n                                            var lastTxt = $(this).html();\n                                            while ($(this).width() > (path_maxlength - occupedWidth)) {\n                                                lastTxt = lastTxt.slice(0, -1);\n                                                $(this).html(lastTxt);\n                                            }\n                                            $(this).html(lastTxt+\"...\");\n                                        }\n                                    }\n                                    occupedWidth += $(this).width()+15; // 15 pixels corresponds to the small right triangle\n                                    nb++;\n                                });\n                            }\n                        }\n                    } else {\n                        $(\"#items_path_var\").html('');\n                    }\n\n                    // store the categories to be displayed\n                    if (data.displayCategories !== undefined) {\n                        $(\"#display_categories\").val(data.displayCategories);\n                    }\n\n                    // store type of access on folder\n                    $(\"#access_level\").val(data.access_level);\n\n                    // warn about a required change of personal SK\n                    if ($(\"#personal_upgrade_needed\").val() == \"1\" && data.recherche_group_pf === 1) {\n                        $(\"#dialog_upgrade_personal_passwords\").dialog(\"open\");\n                    }\n\n                    $(\"#items_loading_progress\").remove();\n\n                    // show correct fodler in Tree\n                    $(\"#jstree\").jstree(\"deselect_all\");\n                    $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n                } else {\n                    $(\"#uniqueLoadData\").val(data.uniqueLoadData);\n                    if ($(\"#items_loading_progress\").length == 0) {\n                        $(\"#items_list_loader\").after('<span id=\"items_loading_progress\">' + Math.round(data.next_start*100/data.counter_full, 0) + '%</span>');\n                    } else {\n                        $(\"#items_loading_progress\").html(Math.round(data.next_start*100/data.counter_full, 0) + '%');\n                    }\n                }\n\n\n                if (data.array_items == \"\" && data.items_count == \"0\") {\n                    $(\"#items_list\").html('<div style=\"text-align:center;margin-top:30px;\"><b><i class=\"fa fa-info-circle\"></i>&nbsp;<?php echo addslashes($LANG['no_item_to_display']); ?></b></div>');\n                }\n\n                if (data.error == \"is_pf_but_no_saltkey\") {\n                    //warn user about his saltkey\n                    $(\"#item_details_no_personal_saltkey\").show();\n                    $(\"#item_details_ok, #item_details_nok\").addClass(\"hidden\");\n\n                    $('#menu_button_add_item').prop('disabled', 'true');\n                    $(\"#items_list_loader, #div_loading\").addClass(\"hidden\");\n                } else if (data.error == \"not_authorized\" || data.access_level === \"\") {\n                    //warn user\n                    $(\"#hid_cat\").val(\"\");\n                    //$(\"#menu_button_copy_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group, #menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_history, #menu_button_share, #menu_button_otv\").prop('disabled', 'true');\n                    $(\"#item_details_nok\").removeClass(\"hidden\");\n                    $(\"#item_details_ok, #item_details_no_personal_saltkey\").addClass(\"hidden\");\n                    $(\"#items_list_loader\").addClass(\"hidden\");\n                } else if (($(\"#user_is_read_only\").val() == 1 && data.recherche_group_pf == 0) || data.access_level == 1) {\n                    //readonly user\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $(\"#more_items\").remove();\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") !== undefined && data.displayCategories !== undefined && data.displayCategories !== \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                } else {\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    //Display items\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $('#complexite_groupe').val(data.folder_complexity);\n                    $('#bloquer_creation_complexite').val(data.bloquer_creation_complexite);\n                    $('#bloquer_modification_complexite').val(data.bloquer_modification_complexite);\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") != undefined && data.displayCategories !== undefined && data.displayCategories != \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    //If no data then empty\n                    if (data.array_items != null) {\n                        $(\".item_draggable\").draggable({\n                            handle: '.grippy',\n                            cursor: \"move\",\n                            opacity: 0.4,\n                            appendTo: 'body',\n                            stop: function(event, ui) {\n                                $(this).removeClass(\"ui-state-highlight\");\n                            },\n                            start: function(event, ui) {\n                                $(this).addClass(\"ui-state-highlight\");\n                            },\n                            helper: function(event) {\n                                return $(\"<div class='ui-widget-header' id='drop_helper'>\"+\"<?php echo addslashes($LANG['drag_drop_helper']); ?>\"+\"</div>\");\n                            }\n                        });\n                        $(\".folder\").droppable({\n                            hoverClass: \"ui-state-error\",\n                            tolerance: 'pointer',\n                            drop: function(event, ui) {\n                                ui.draggable.addClass(\"hidden\");\n                                LoadingPage();\n                                //move item\n                                $.post(\n                                    \"sources/items.queries.php\",\n                                    {\n                                        type      : \"move_item\",\n                                        item_id   : ui.draggable.attr(\"id\"),\n                                        folder_id : $(this).attr(\"id\").substring(4),\n                                        key       : \"<?php echo $_SESSION['key']; ?>\"\n                                    },\n                                    function(data) {\n                                        //increment / decrement number of items in folders\n                                        $(\"#itcount_\"+data[0].from_folder).text(Math.floor($(\"#itcount_\"+data[0].from_folder).text())-1);\n                                        $(\"#itcount_\"+data[0].to_folder).text(Math.floor($(\"#itcount_\"+data[0].to_folder).text())+1);\n                                        $(\"#id_label, #item_viewed_x_times, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to, #id_tags, #id_kbs\").html(\"\");\n                                        LoadingPage();\n                                        displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n                                    },\n                                    \"json\"\n                               );\n                            }\n                        });\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                }\n            }\n        );\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem+\"pw1\").show().focus();\n\n    //show ajax image\n    $(\"#\"+elem+\"pw_wait\").removeClass(\"hidden\");\n\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size      : $(\"#\"+elem + 'pw_size').val(),\n            numerals      : $(\"#\"+elem + 'pw_numerics').prop(\"checked\"),\n            capitalize      : $(\"#\"+elem + 'pw_maj').prop(\"checked\"),\n            symbols      : $(\"#\"+elem + 'pw_symbols').prop(\"checked\"),\n            secure  : $(\"#\"+elem + 'pw_secure').prop(\"checked\"),\n            elem      : elem,\n            force      : \"false\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n               if (data.error == \"true\") {\n                   $(\"#div_dialog_message_text\").html(data.error_msg);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n               } else {\n                $(\"#\"+elem+\"visible_pw\").text(data.key);\n                   $(\"#\"+elem+\"pw1, #\"+elem+\"pw2\").val(data.key);\n                $(\"#\"+elem+\"pw1\").focus();\n               }\n            //$(\"#\"+elem+\"pw1\").show().blur();\n            $(\"#\"+elem+\"pw_wait\").addClass(\"hidden\");\n        }\n   );\n}\n\nfunction pwCopy(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem + 'pw2').val($(\"#\"+elem + 'pw1').val());\n}\n\nfunction catSelected(val)\n{\n    $(\"#hid_cat\").val(val);\n}\n\n/**\n* Get Item complexity\n*/\nfunction RecupComplexite(val, edit, context)\n{\n    context = context || \"\";    // make context optional\n\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"get_complixity_level\",\n            groupe  : val,\n            context : context,\n            item_id : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            funcReturned = 1;\n            if (data.error == undefined || data.error == 0) {\n                $(\"#complexite_groupe\").val(data.val);\n                $(\"#selected_folder_is_personal\").val(data.personal);\n                if (edit == 1) {\n                    $(\"#edit_complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#edit_afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                } else {\n                    $(\"#complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                }\n            } else if (data.error == \"no_edition_possible\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n                funcReturned = 0;\n            } else if (data.error == \"user_is_readonly\") {\n                displayMessage(data.message);\n                funcReturned = 0;\n            } else if (data.error == \"no_folder_creation_possible\" || data.error == \"no_folder_edition_possible\"  || data.error == \"delete_folder\") {\n                displayMessage('<i class=\"fa fa-warning\"></i>&nbsp;' + data.error_msg);\n                $(\"#div_loading\").addClass(\"hidden\");\n                funcReturned = 0;\n            } else {\n                $(\"#div_formulaire_edition_item\").dialog(\"close\");\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\n/**\n* Check if Item has been changed since loaded\n*/\nfunction CheckIfItemChanged()\n{\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type        : \"is_item_changed\",\n            timestamp   : $(\"#timestamp_item_displayed\").val(),\n            item_id     : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            if (data.modified == 1) {\n                funcReturned = 1;\n            } else {\n                funcReturned = 0;\n            }\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\nfunction AjouterItem()\n{\n    $(\"#div_formulaire_saisi_info\").show().html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\");\n    LoadingPage();\n    $(\"#error_detected\").val('');   //Refresh error foolowup\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|;|:|!|=|+|-|*|/|#|\\\"|'|&|]\");\n\n    //Complete url format\n    var url = $(\"#url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($(\"#label\").val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#categorie\").val() == \"na\") erreur = \"<?php echo addslashes($LANG['error_group']); ?>\";\n    else if ($(\"#pw1\").val() != $(\"#pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#enable_delete_after_consultation\").is(':checked') && (($(\"#times_before_deletion\").val() < 1 && $(\"#deletion_after_date\").val() == \"\") || ($(\"#times_before_deletion\").val() == \"\" && $(\"#deletion_after_date\").val() == \"\"))) erreur = \"<?php echo addslashes($LANG['error_times_before_deletion']); ?>\";\n    else if ($(\"#item_tags\").val() != \"\" && reg.test($(\"#item_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if (($('#recherche_group_pf').val() === \"1\" || $('#selected_folder_is_personal').val() === \"1\") && $('#personal_sk_set').val() === \"0\") {\n        erreur = \"<?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?>\";\n    } else{\n        //Check pw complexity level\n        if (\n            ($(\"#bloquer_creation_complexite\").val() == 0 && parseInt($(\"#mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val()))\n            ||\n            ($(\"#bloquer_creation_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            //Manage restrictions\n            var restriction = restriction_role = \"\";\n            $(\"#restricted_to_list option:selected\").each(function () {\n                //check if it's a role\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val().substring(5) + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n            //Manage diffusion list\n            var diffusion = \"\";\n            $(\"#annonce_liste_destinataires option:selected\").each(function () {\n                diffusion += $(this).val() + \";\";\n            });\n            if (diffusion == \";\") diffusion = \"\";\n\n            //Manage description\n            if (CKEDITOR.instances && CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances && CKEDITOR.instances[\"desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#selected_folder_is_personal').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n            //To be deleted\n            if ($(\"#enable_delete_after_consultation\").is(':checked') && ($(\"#times_before_deletion\").val() >= 1 || $(\"#deletion_after_date\").val() != \"\")) {\n                if ($(\"#times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#times_before_deletion\").val();\n                } else if ($(\"#deletion_after_date\").val() != \"\") {\n                    var to_be_deleted = $(\"#deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[1] + '~~' + $(this).val() + '~~' + id[2];\n                else fields += '_|_' + id[1] + '~~' + $(this).val() + '~~' + id[2];\n            });\n\n            // check if a folder is selected\n            var selected_folder;\n            if ($('#categorie').val() === \"\" || $('#categorie').val() === null) {\n                selected_folder = $('#hid_cat').val();\n            } else {\n                selected_folder = $('#categorie').val();\n            }\n\n            //prepare data\n            var data = {\"pw\": sanitizeString($('#pw1').val()) , \"label\": sanitizeString($('#label').val()) ,\n                \"login\": sanitizeString($('#item_login').val()) , \"is_pf\": is_pf.toString() ,\n                \"description\": (description) , \"email\": $('#email').val() , \"url\": url , \"categorie\": selected_folder ,\n                \"restricted_to\": restriction , \"restricted_to_roles\": restriction_role ,\n                \"salt_key_set\": $('#personal_sk_set').val() , \"diffusion\": diffusion , \"id\": $('#id_item').val() ,\n                \"anyone_can_modify\": $('#anyone_can_modify:checked').val() , \"tags\": sanitizeString($('#item_tags').val()) ,\n                \"random_id_from_files\": $('#random_id').val() , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#mypassword_complex\").val())};\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"new_item\",\n                    data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n\n                        return;\n                    }\n\n                    //Check errors\n                    if (data.error === \"item_exists\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_item_exists']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Key verification for Query is not correct!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('User not allowed to access this folder!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password could not be correctly encrypted!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_EMPTY\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password is empty!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html(data.msg);\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.new_id != \"\") {\n                        $(\"#new_show_error\").addClass(\"hidden\");\n\n                        //add new line directly in list of items\n                        $(\"#full_items_list\").append(data.new_entry);\n\n                        //Increment counter\n                        $(\"#itcount_\"+$(\"#hid_cat\").val()).text(Math.floor($(\"#itcount_\"+$(\"#hid_cat\").val()).text())+1);\n\n                        // prepare the display of the new item\n                        AfficherDetailsItem(data.new_id);\n\n                        // refresh list of items\n                        ListerItems($('#categorie').val(), \"\", 0)\n\n                        refreshTree($('#categorie').val());\n\n                        //empty form\n                        $(\"#label, #item_login, #email, #url, #pw1, #visible_pw, #pw2, #item_tags, #deletion_after_date, #times_before_deletion, #mypassword_complex\").val(\"\");\n                        CKEDITOR.instances[\"desc\"].setData(\"\");\n\n                        $(\"#item_tabs\").tabs({selected: 0});\n                        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n                        $(\".fields, .item_field, #categorie, #random_id\").val(\"\");\n                        $(\".fields_div, #item_file_queue, #display_title, #visible_pw\").html(\"\");\n\n                        $(\"#div_formulaire_saisi\").dialog('close');\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                    }\n                    $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n                    $(\"#div_loading\").addClass(\"hidden\");\n                }\n           );\n        } else {\n            $('#new_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n    if (erreur != \"\") {\n        $('#new_show_error').html(erreur).show();\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n    }\n}\n\nfunction EditerItem()\n{\n    $(\"#div_formulaire_edition_item_info\").html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\").show();\n    $(\"#item_detail_zone_loader\").addClass(\"hidden\");\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n    //Complete url format\n    var url = $(\"#edit_url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($('#edit_label').val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#edit_pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#edit_pw1\").val() != $(\"#edit_pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#edit_tags\").val() != \"\" && reg.test($(\"#edit_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if ($(\"#edit_categorie option:selected\").val() == \"\" || typeof  $(\"#edit_categorie option:selected\").val() === \"undefined\")  erreur = \"<?php echo addslashes($LANG['error_no_selected_folder']); ?>\";\n    else{\n        //Check pw complexity level\n        if ((\n                $(\"#bloquer_modification_complexite\").val() == 0 &&\n                parseInt($(\"#edit_mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val())\n           )\n            ||\n            ($(\"#bloquer_modification_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            LoadingPage();  //afficher image de chargement\n            var annonce = 0;\n            if ($('#edit_annonce').attr('checked')) annonce = 1;\n            $(\"#item_detail_zone_loader\").show();\n\n\n            //Manage restriction\n            var restriction = restriction_role = \"\";\n            $(\"#edit_restricted_to_list option:selected\").each(function () {\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val() + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n\n            //Manage diffusion list\n            var myselect = document.getElementById('edit_annonce_liste_destinataires');\n            var diffusion = \"\";\n            for (var loop=0; loop < myselect.options.length; loop++) {\n                if (myselect.options[loop].selected === true) diffusion = diffusion + myselect.options[loop].value + \";\";\n            }\n            if (diffusion == \";\") {\n                diffusion = \"\";\n            }\n\n            //Manage description\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"edit_desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#edit_desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n          //To be deleted\n            if ($(\"#edit_enable_delete_after_consultation\").is(':checked')\n                && ($(\"#edit_times_before_deletion\").val() >= 1 || $(\"#edit_deletion_after_date\").val() != \"\")\n            ) {\n                if ($(\"#edit_times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#edit_times_before_deletion\").val();\n                    //var to_be_deleted_after_date = \"\";\n                } else if ($(\"#edit_deletion_after_date\").val() != \"\") {\n                    //var to_be_deleted = \"0\";\n                    var to_be_deleted = $(\"#edit_deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n                //var to_be_deleted_after_date = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.edit_item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[2] + '~~' + $(this).val();\n                else fields += '_|_' + id[2] + '~~' + $(this).val();\n            });\n\n              //prepare data\n            var data = {\"pw\": sanitizeString($('#edit_pw1').val()) , \"label\": sanitizeString($('#edit_label').val()) ,\n                \"login\": sanitizeString($('#edit_item_login').val()) , \"is_pf\": is_pf ,\n                \"description\": description , \"email\": $('#edit_email').val() , \"url\": url ,\n                \"categorie\": $(\"#edit_categorie option:selected\").val() , \"restricted_to\": restriction ,\n                \"restricted_to_roles\": restriction_role , \"salt_key_set\": $('#personal_sk_set').val() ,\n                \"is_pf\": $('#recherche_group_pf').val() , \"annonce\": annonce , \"diffusion\": diffusion ,\n                \"id\": $('#id_item').val() , \"anyone_can_modify\": $('#edit_anyone_can_modify:checked').val() ,\n                \"tags\": sanitizeString($('#edit_tags').val()) , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#edit_mypassword_complex\").val())};\n\n            //send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"update_item\",\n                    data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\")\n                            .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                            data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n                        return;\n                    }\n\n                    //check if format error\n                    if (data.error === \"ERR_JSON_FORMAT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html(data.error + ' ERROR (JSON is broken)!!!!!')\n                            .show();\n                    } else if (data.error === \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Key verification for Query is not correct!')\n                            .show();\n                        LoadingPage();\n                    }else if (data.error === \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Item password could not be correctly encrypted!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_pw_too_long']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_NOT_ALLOWED_TO_EDIT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\")\n                            .html('User not allowed to edit this Item!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error !== \"\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else {\n                        //refresh item in list\n                        $(\"#fileclass\"+data.id).text($('#edit_label').val());\n\n                        //Refresh form\n                        $(\"#id_label\").text($('#edit_label').val());\n                        //$(\"#id_pw\").text($('#edit_pw1').val());\n                        $(\"#id_email\").html($('#edit_email').val());\n                        $(\"#id_url\").html($('#edit_url').val().escapeHTML());\n                        $(\"#id_desc\").html(description);\n                        $(\"#id_login\").html($('#edit_item_login').val());\n                        $(\"#id_restricted_to\").html(data.list_of_restricted);\n                        $(\"#id_tags\").html(data.tags);\n                        $(\"#id_files\").html(unsanitizeString(data.files));\n                        $(\"#item_edit_list_files\").html(data.files_edit);\n                        $(\"#id_info\").html(unsanitizeString(data.history));\n                        $('#id_pw').html('<?php echo $var['hidden_asterisk']; ?>');\n\n                        //Refresh hidden data\n                        $(\"#hid_label\").val($('#edit_label').val());\n                        $(\"#hid_pw\").val($('#edit_pw1').val());\n                        $(\"#hid_email\").val($('#edit_email').val());\n                        $(\"#hid_url\").val($('#edit_url').val().escapeHTML());\n                        $(\"#hid_desc\").val(description);\n                        $(\"#hid_login\").val($('#edit_item_login').val());\n                        $(\"#hid_restricted_to\").val(restriction);\n                        $(\"#hid_restricted_to_roles\").val(restriction_role);\n                        $(\"#hid_tags\").val($('#edit_tags').val());\n                        $(\"#hid_files\").val(data.files);\n                        /*$(\"#id_categorie\").html(data.id_tree);\n                        $(\"#id_item\").html(data.id);*/\n\n                        // refresh fields\n                        if ($('.edit_item_field').val() != undefined) {\n                            $('.tr_fields').addClass(\"hidden\");\n                            $('.edit_item_field').each(function(i){\n                                id = $(this).attr('id').split('_');\n                                if ($(this).val() !== \"\") {\n                                    // copy data from form to Item Div\n                                    $('#id_field_' + id[2]).html($(this).val());\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val($(this).val());\n                                    $('#cf_tr_' + id[2] + ', .editItemCatName_' + id[3] + ', #tr_catfield_' + id[3]).show()\n                                } else {\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val('');\n                                }\n                                // clear form\n                                $(this).val(\"\");\n                            });\n                        }\n                        $(\"#edit_display_title, #edit_visible_pw\").html(\"\");\n\n                        //calling image lightbox when clicking on link\n                        $(\"a.image_dialog\").click(function(event) {\n                            event.preventDefault();\n                            PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n                        });\n\n                        //Change title in \"last items list\"\n                        $(\"#last_items_\"+data.id).text($('#edit_label').val());\n\n                        //Clear upload queue\n                        $('#item_edit_file_queue').html('');\n                        //Select 1st tab\n                        $(\"#item_edit_tabs\").tabs({ selected: 0 });\n\n                        //if reload page is needed\n                        if (data.reload_page == \"1\") {\n                            //reload list\n                            ListerItems($('#hid_cat').val(), \"\", 0)\n                            //increment / decrement number of items in folders\n                            $(\"#itcount_\"+$('#hid_cat').val()).text(Math.floor($(\"#itcount_\"+$('#hid_cat').val()).text())-1);\n                            $(\"#itcount_\"+$('#edit_categorie').val()).text(Math.floor($(\"#itcount_\"+$('#edit_categorie').val()).text())+1);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        //Prepare clipboard copies\n                        if ($('#edit_pw1').val() != \"\") {\n                            new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_pw1').val());\n                                }\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if ($('#edit_item_login').val() != \"\") {\n                            var clipboard_elogin = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_item_login').val());\n                                }\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n\n\n                        $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //Close dialogbox\n                        $(\"#div_formulaire_edition_item\").dialog('close');\n                        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //hide loader\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                }\n           );\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : $('#id_item').val(),\n                    stat_action                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n\n        } else {\n            $('#edit_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n\n    if (erreur != \"\") {\n        $('#edit_show_error').html(erreur).show();\n        $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n    }\n}\n\nfunction AddNewFolder()\n{\n    if ($(\"#new_rep_titre\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_groupe\").val() === \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_noparent']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_complexite\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\").removeClass(\"hidden\");\n    } else if (/^\\d+$/.test($(\"#new_rep_titre\").val())) {\n        // check if folder title contains only numbers\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#user_ongoing_action\").val() == \"\") {\n        $(\"#add_folder_loader\").removeClass(\"hidden\");\n        $(\"#user_ongoing_action\").val(\"true\");\n        $(\"#new_rep_show_error\").addClass(\"hidden\");\n        if ($(\"#new_rep_role\").val() == undefined) {\n            role_id = \"<?php echo $_SESSION['fonction_id']; ?>\";\n        } else {\n            role_id = $(\"#new_rep_role\").val();\n        }\n\n        //prepare data\n        var data = {\"title\": sanitizeString($('#new_rep_titre').val()),\n            \"complexity\": sanitizeString($('#new_rep_complexite').val()), \"is_pf\": $('#pf_selected').val(),\n            \"parent_id\": $(\"#new_rep_groupe option:selected\").val(), \"renewal_period\":\"0\"};\n\n        //send query\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type   : \"add_folder\",\n                data   : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key    : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#user_ongoing_action\").val(\"\");\n                //Check errors\n                if (data[0].error == \"error_group_exist\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_exist']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_html_codes\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_html_codes']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_title_only_with_numbers\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error != \"\") {\n                    $(\"#new_rep_show_error\").html(data[0].error).removeClass(\"hidden\");\n                } else {\n                    $(\"#new_rep_titre\").val(\"\");\n                    refreshTree(data[0].newid);\n                    $(\"#div_ajout_rep\").dialog(\"close\");\n                }\n                $(\"#add_folder_loader\").addClass(\"hidden\");\n            },\n            \"json\"\n           );\n    }\n}\n\n\nfunction SupprimerFolder()\n{\n    if ($(\"#delete_rep_groupe_validate\").is(':checked') === false) {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['please_confirm']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe\").val() === \"0\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_group']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe option:selected\").text() === \"<?php echo $_SESSION['login']; ?>\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else {\n        $(\"#del_folder_loader\").show();\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type    : \"delete_folder\",\n                id      : $(\"#delete_rep_groupe\").val(),\n                key        : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#del_folder_loader\").addClass(\"hidden\");\n\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#div_loading\").addClass(\"hidden\");\n                    $(\"#div_dialog_message_text\")\n                        .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                        data);\n                    $(\"#div_dialog_message\").dialog(\"open\");\n                    return;\n                }\n\n                if (data.error !== \"\") {\n                    if (data.error === \"ERR_SUB_FOLDERS_EXIST\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_cannot_delete_subfolders_exist']); ?>\").show(1).delay(3000).fadeOut(1000);\n\n                    } else if (data.error === \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(3000).fadeOut(1000);\n                    }\n                } else {\n                    refreshTree(data.parent_id);\n                    ListerItems(data.parent_id,'', 0);\n                    $(\"#div_supprimer_rep\").dialog(\"close\");\n                }\n            }\n       );\n    }\n}\n\nfunction AfficherDetailsItem(id, salt_key_required, expired_item, restricted, display, open_edit, reload, id_tree)\n{\n    // If a request is already launched, then kill new.\n    if ($(\"#request_ongoing\").val() !== \"\") {\n        request.abort();\n        return;\n    }\n    id_tree = id_tree || \"\";\n    salt_key_required = salt_key_required || 0;\n    id_tree = id_tree || \"\";\n    id_tree = id_tree || \"\";\n\n    // Store status query running\n    $(\"#request_ongoing\").val(\"1\");\n\n    // If opening new item, reinit hidden fields\n    if ($(\"#request_lastItem\").val() != id) {\n        $(\"#request_lastItem\").val(\"\");\n        $(\"#item_editable\").val(\"\");\n    }\n\n    // Don't show details\n    if (display === \"no_display\") {\n        $(\"#item_details_nok\").removeClass(\"hidden\");\n        $(\"#item_details_ok\").addClass(\"hidden\");\n        $(\"#item_details_expired\").addClass(\"hidden\");\n        $(\"#item_details_expired_full\").addClass(\"hidden\");\n        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_url, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n    if ($(\"#is_admin\").val() == \"1\") {\n        $('#menu_button_edit_item,#menu_button_del_item,#menu_button_copy_item').attr('disabled', 'disabled');\n    }\n\n    if ($(\"#edit_restricted_to\") != undefined) {\n        $(\"#edit_restricted_to\").val(\"\");\n    }\n\n    // Check if personal SK is needed and set\n    if (($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"0\") && salt_key_required === \"1\") {\n        $(\"#set_personal_saltkey_warning\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg'></span>&nbsp;</span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?></div>\").show(1).delay(2500).fadeOut(1000);\n        $('#div_set_personal_saltkey').dialog('open');\n\n        //$(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg mi-red'></span>&nbsp;<\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        $(\"#div_loading\").addClass(\"hidden\");\n        //$(\"#div_dialog_message\").dialog(\"open\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    } else if ($('#recherche_group_pf').val() === \"0\" || ($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"1\")) {\n        // Double click\n        if (open_edit == 1 && $(\"#item_editable\").val() == 1 && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            open_edit_item_div(\n                <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === \"1\") {\n    echo 1;\n} else {\n    echo 0;\n}?>\n            );\n        } else if ($(\"#request_lastItem\").val() == id && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            LoadingPage();\n            return;\n        } else {\n            $(\"#timestamp_item_displayed\").val(\"\");\n            var data = {\n                \"id\" : id,\n                \"folder_id\" : $('#hid_cat').val(),\n                \"salt_key_required\" : $('#recherche_group_pf').val(),\n                \"salt_key_set\" : $('#personal_sk_set').val(),\n                \"expired_item\" : expired_item === undefined ? \"\" : expired_item,\n                \"restricted\" : expired_item === undefined ? \"\" : expired_item,\n                \"page\" : \"items\"\n            };\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type : 'show_details_item',\n                    data : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_raw) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data_raw , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data_raw);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error != \"\") {\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data.error);\n                        $(\"#div_dialog_message\").show();\n                    }\n\n                    // reset password shown info\n                    $(\"#pw_shown\").val(\"0\");\n\n                    // show some info on top\n                    if (data.auto_update_pwd_frequency != \"0\") var auto_update_pwd = \"<i class='fa fa-shield tip' title='<?php echo addslashes($LANG['server_auto_update_password_enabled_tip']); ?>'></i>&nbsp;<b>\"+data.auto_update_pwd_frequency+\"</b>&nbsp;|&nbsp;\";\n                    else var auto_update_pwd = \"\";\n                    $(\"#item_viewed_x_times\").html(auto_update_pwd+\"&nbsp;<i class='fa fa-sticky-note-o tip' title='Number of times item was displayed'></i>&nbsp;<b>\"+data.viewed_no+\"</b>\");\n\n                    // Show timestamp\n                    $(\"#timestamp_item_displayed\").val(data.timestamp);\n\n                    //Change the class of this selected item\n                    if ($(\"#selected_items\").val() != \"\") {\n                        $(\"#fileclass\"+$(\"#selected_items\").val()).removeClass(\"fileselected\");\n                    }\n                    $(\"#selected_items\").val(data.id);\n\n                    //Show saltkey\n                    if (data.edit_item_salt_key == \"1\") {\n                        $(\"#edit_item_salt_key\").show();\n                    } else {\n                        $(\"#edit_item_salt_key\").addClass(\"hidden\");\n                    }\n\n                    // clean some not used fields\n                    //$(\"#item_history_log, #edit_past_pwds, #hid_files, #item_edit_list_files\").html(\"\");\n\n                    //Show detail item\n                    if (data.show_detail_option == \"0\") {\n                        $(\"#item_details_ok\").removeClass(\"hidden\");\n                        $(\"#item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }if (data.show_detail_option == \"1\") {\n                        $(\"#item_details_ok, #item_details_expired\").removeClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                    } else if (data.show_detail_option == \"2\") {\n                        $(\"#item_details_ok, #item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }\n                    $(\"#item_details_nok\").addClass(\"hidden\");\n                    $(\"#fileclass\"+data.id).addClass(\"fileselected\");\n                    $(\"item_editable\").val(0);\n\n                    if (data.show_details == \"1\" && data.show_detail_option != \"2\") {\n                        //unprotect data\n                        data.login = unsanitizeString(data.login);\n\n                        $(\"#id_files\").html(\"\");\n\n                        //Display details\n                        $(\"#id_label\").html(data.label);\n                        $(\"#hid_label\").val(unsanitizeString(data.label));\n                        if (data.pw === \"\") {\n                            $(\"#id_pw\").html(\"\");\n                        } else {\n                            $(\"#id_pw\").html('<?php echo $var['hidden_asterisk']; ?>');\n                        }\n                        $(\"#hid_pw\").val(unsanitizeString(data.pw));\n                        if (data.url != \"\") {\n                            $(\"#id_url\").html(data.url+data.link);\n                            $(\"#hid_url\").val(data.url);\n                        } else {\n                            $(\"#id_url\").html(\"\");\n                            $(\"#hid_url\").val(\"\");\n                        }\n                        $(\"#id_desc\").html(data.description);\n                        $(\"#hid_desc\").val(data.description);\n                        $(\"#id_login\").html(data.login);\n                        $(\"#hid_login\").val(data.login);\n                        $(\"#id_email\").html(data.email);\n                        $(\"#hid_email\").val(data.email);\n                        //prepare nice list of users / groups\n                        var tmp_arr = data.id_restricted_to.split(\";\");\n                        var html_users = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_users += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-user fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        var tmp_arr = data.id_restricted_to_roles.split(\";\");\n                        var html_groups = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_groups += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-group fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        $(\"#id_restricted_to\").html(\n                            html_users+\n                            html_groups\n                        );\n                        $(\"#hid_restricted_to\").val(data.id_restricted_to);\n                        $(\"#hid_restricted_to_roles\").val(data.id_restricted_to_roles);\n                        $(\"#id_tags\").html(data.tags);\n                        // extract real tags list\n                        var item_tag = \"\";\n                        $(\"span.item_tag\").each(function(){\n                            if (item_tag == \"\") item_tag = $(this).text();\n                            else item_tag += \" \"+$(this).text();\n                        });\n                        $(\"#hid_tags\").val(item_tag);\n                        $(\"#hid_anyone_can_modify\").val(data.anyone_can_modify);\n                        $(\"#id_categorie\").val(data.folder);\n                        $(\"#id_item\").val(data.id);\n                        $(\"#id_kbs\").html(data.links_to_kbs);\n                        $(\".tip\").tooltipster({\n                            maxWidth: 400,\n                            contentAsHTML: true,\n                            multiple: true\n                        });\n\n                        // ---\n                        // Show Field values\n                        $(\".fields\").val(\"\");\n                        $(\".fields_div\").html(\"\");\n                        // If no CF then hide\n                        if (data.fields === \"\") {\n                            $(\".tr_fields\").addClass(\"hidden\");\n                        } else {\n                            $(\".tr_cf, .tr_fields\").removeClass(\"hidden\");\n                            var liste = data.fields.split('_|_');\n                            for (var i=0; i<liste.length; i++) {\n                                var field = liste[i].split('~~');\n                                $(\"#cf_tr_\" + field[0] + \", #tr_catfield_\" + field[2]).show();\n                                $('#hid_field_' + field[0] + '_' + field[2]).val(field[1]);\n                                if (field[3] === \"masked\") {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html('<?php echo $var['hidden_asterisk']; ?>');\n                                } else {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html(field[1]);\n                                }\n                            }\n                        }\n\n                        //Anyone can modify button\n                        if (data.anyone_can_modify == \"1\") {\n                            $(\"#edit_anyone_can_modify\").attr('checked', true);\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            $(\"#edit_anyone_can_modify\").attr('checked', false);\n                            $(\"#new_history_entry_form\").addClass(\"hidden\");\n                        }\n\n                        //Show to be deleted in case activated\n                        if (data.to_be_deleted == \"not_enabled\") {\n                            $(\"#edit_to_be_deleted\").addClass(\"hidden\");\n                        } else {\n                            $(\"#edit_to_be_deleted\").show();\n                            if (data.to_be_deleted != \"\") {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",true);\n                                if (data.to_be_deleted_type == 2) {\n                                    $(\"#edit_times_before_deletion\").val(\"\");\n                                    $(\"#edit_deletion_after_date\").val(data.to_be_deleted);\n                                } else {\n                                    $(\"#edit_times_before_deletion\").val(data.to_be_deleted);\n                                    $(\"#edit_deletion_after_date\").val(\"\");\n                                }\n                            } else {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",false);\n                                $(\"#edit_times_before_deletion, #edit_deletion_after_date\").val(\"\");\n                            }\n                        }\n\n                        //manage buttons\n                        if ($(\"#user_is_read_only\").val() == 1) {\n                            $('#menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.user_can_modify == 0) {\n                            $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            //$(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            //$(\"#menu_button_add_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        }\n                        //$(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n\n                        // disable share button for personal folder\n                        if ($(\"#recherche_group_pf\").val() == 1) {\n                            $(\"#menu_button_share, #menu_button_otv\").attr('disabled', 'disabled');\n                        } else {\n                            $(\"#menu_button_share, #menu_button_otv\").prop(\"disabled\", false);\n                        }\n\n                        //Manage to deleted information\n                        if (data.to_be_deleted != 0 && data.to_be_deleted != null && data.to_be_deleted != \"not_enabled\") {\n                            $('#item_extra_info')\n                                .html(\"<b><i class='fa fa-bell-o mi-red'></i></b>&nbsp;\")\n                                .attr(\"title\", \"<?php echo addslashes($LANG['automatic_deletion_activated']); ?>\");\n                            $('#item_extra_info').tooltipster({multiple: true});\n                        } else {\n                            $('#item_extra_info').html(\"\");\n                        }\n\n                        if (data.notification_status == 0 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'true\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        } else if (data.notification_status == 1 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'false\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-red\"></i>&nbsp;');\n                            $('#item_extra_info').html(\"<i><i class=\\'fa fa-bell mi-green\\'></i>&nbsp;<?php echo addslashes($LANG['notify_activated']); ?></i>\");\n                        } else {\n                            $('#menu_button_notify').attr('disabled', 'disabled');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        }\n\n                        //Prepare clipboard copies\n                        if (data.pw != \"\") {\n                            var clipboard_pw = new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return (unsanitizeString(data.pw));\n                                }\n                            });\n                            clipboard_pw.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n                                itemLog(\"item_password_copied\");\n\n                                e.clearSelection();\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if (data.login != \"\") {\n                            var clipboard_login = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return (data.login);\n                                }\n                            });\n                            clipboard_login.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n                        // #525\n                        if (data.url != \"\") {\n                            var clipboard_url = new Clipboard(\"#menu_button_copy_url\", {\n                                text: function() {\n                                    return unsanitizeString(data.url);\n                                }\n                            });\n                            clipboard_url.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                        }\n\n                        //prepare link to clipboard\n                        var clipboard_link = new Clipboard(\"#menu_button_copy_link\", {\n                            text: function() {\n                                return \"<?php echo $SETTINGS['cpassman_url']; ?>\"+\"/index.php?page=items&group=\"+data.folder+\"&id=\"+data.id;\n                            }\n                        });\n                        clipboard_link.on('success', function(e) {\n                            $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied']); ?>\").show().fadeOut(1000);\n\n                            e.clearSelection();\n                        });\n\n\n                        //set if user can edit\n                        if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            $(\"#item_editable\").val(1);\n                        }\n\n                        //Manage double click\n                        if (open_edit === true && (data.restricted == \"1\" || data.user_can_modify == \"1\")) {\n                            open_edit_item_div(\n                            <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}?>);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        // continue loading data\n                        showDetailsStep2(id, param);\n\n                    } else if (data.show_details === \"1\" && data.show_detail_option === \"2\") {\n                        $(\"#item_details_nok\").addClass(\"hidden\");\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").show();\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    } else {\n                        //Dont show details\n                        $(\"#item_details_nok\").removeClass(\"hidden\");\n                        $(\"#item_details_nok_restriction_list\").html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo addslashes($LANG['author']); ?>: </b>' + data.author + '<br /><b><?php echo addslashes($LANG['restricted_to']); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"SendMail(\\'request_access_to_author\\',\\'' + data.id + ',' + data.id_user + '\\',\\'<?php echo $_SESSION['key']; ?>\\',\\'<?php echo addslashes($LANG['forgot_my_pw_email_sent']); ?>\\')\"><?php echo addslashes($LANG['request_access_ot_item']); ?></a></u></div>');\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                    $(\"#request_ongoing\").val(\"\");\n                }\n           );\n\n            if (id_tree != \"\" && id_tree != $(\"#hid_cat\").val()) {\n                refreshTree(id_tree, \"0\");\n            }\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : id,\n                    scope                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n       }\n    //Store Item id shown\n    $(\"#request_lastItem\").val(id);\n    }\n}\n\n\n/*\n* Loading Item details step 2\n*/\nfunction showDetailsStep2(id, param)\n{\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n        type     : \"showDetailsStep2\",\n        id         : id\n        },\n        function(data) {\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#div_loading\").addClass(\"hidden\");\n                $(\"#request_ongoing\").val(\"\");\n                $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                $(\"#div_dialog_message\").dialog(\"open\");\n\n                return;\n            }\n\n            if (data.error !== \"\") {\n                $(\"#div_dialog_message_text\").html(data.error_text);\n                $(\"#div_dialog_message\").show();\n                return false;\n            }\n\n            $(\"#item_history_log\").html(htmlspecialchars_decode(data.history));\n            $(\"#edit_past_pwds\").attr('title', htmlspecialchars_decode(data.history_of_pwds));\n            $(\"#edit_past_pwds_div\").html(htmlspecialchars_decode(data.history_of_pwds));\n\n            $(\"#id_files\").html(data.files_id);\n            $(\"#hid_files\").val(data.files_id);\n            $(\"#item_edit_list_files\").html(data.files_edit);\n\n            //$(\"#div_last_items\").html(htmlspecialchars_decode(data.div_last_items));\n\n            // function calling image lightbox when clicking on link\n            $(\"a.image_dialog\").click(function(event) {\n                event.preventDefault();\n                PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n            });\n\n            //Set favourites icon\n            if (data.favourite == \"1\") {\n                $(\"#menu_button_add_fav\").attr(\"disabled\",\"disabled\");\n                $(\"#menu_button_del_fav\").prop(\"disabled\", false);\n            } else {\n                $(\"#menu_button_add_fav\").prop(\"disabled\", false);\n                $(\"#menu_button_del_fav\").attr(\"disabled\",\"disabled\");\n            }\n\n            // set indicator if item has change proposal\n            if (parseInt(data.has_change_proposal) > 0) {\n                $(\"#item_extra_info\").prepend('<i class=\"fa fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo addslashes($LANG['item_has_change_proposal']); ?>\" onclick=\"\"></i>&nbsp;');\n            }\n\n            $(param).prop(\"disabled\", false);\n            $(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n            $(\"#div_loading\").addClass(\"hidden\");\n\n            $(\".tip\").tooltipster({multiple: true});\n\n            // refresh\n            if ($(\"#hid_cat\").val() !== \"\") {\n                refreshListLastSeenItems();\n            }\n         }\n     );\n};\n\n/*\n   * FUNCTION\n   * Launch an action when clicking on a quick icon\n   * $action = 0 => Make not favorite\n   * $action = 1 => Make favorite\n*/\nfunction ActionOnQuickIcon(id, action)\n{\n    //change quick icon\n    if (action == 1) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star mi-yellow' onclick='ActionOnQuickIcon(\"+id+\",0)'></i>\");\n    } else if (action == 0) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star-o' onclick='ActionOnQuickIcon(\"+id+\",1)'></i>\");\n    }\n\n    //Send query\n    LoadingPage();\n    $.post(\"sources/items.queries.php\",\n        {\n            type    : 'action_on_quick_icon',\n            id      : id,\n            action  : action\n        },\n        function(data) {\n            LoadingPage();\n            displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : prepare new folder dialogbox\n//###########\nfunction open_add_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"create_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual folder in the dialogbox\n    $('#new_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#div_ajout_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare editing folder dialogbox\n//###########\nfunction open_edit_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"edit_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual forlder in the dialogbox\n    $('#edit_folder_folder option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#edit_folder_title').val($.trim($('#edit_folder_folder :selected').text()));\n    $('#edit_folder_complexity').val($('#complexite_groupe').val());\n    $('#div_editer_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare moving folder dialogbox\n//###########\nfunction open_move_group_div()\n{\n    if ($.inArray($(\"#hid_cat\").val(), $(\"#personal_visible_groups_list\").val().split(',')) != -1 && $(\"#personal_sk_set\").val() === \"0\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_personal_sk_expected']); ?>\");\n        return false;\n    }\n\n    if ($(\"#hid_cat\").val() == \"<?php if (isset($_SESSION['personal_folders'][0])) {\n    echo $_SESSION['personal_folders'][0];\n} else {\n    echo \"\";\n}\n?>\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0) == 0) return false;\n\n    //Select the actual folder in the dialogbox\n    //$('#move_folder_id option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#move_folder_title').html($.trim($('#move_folder_id :selected').text())+\" [id\"+$('#hid_cat').val()+\"]\");\n    $('#move_folder_id').val(0);\n    $('#div_move_folder').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare delete folder dialogbox\n//###########\nfunction open_del_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"delete_folder\") == 0) {\n        return false;\n    } else {\n        $('#div_supprimer_rep').dialog('open');\n        $('#delete_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n        $(\"#div_loading\").addClass(\"hidden\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_add_item_div()\n{\n    LoadingPage();\n\n    //Check if personal SK is needed and set\n    if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 0) {\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        LoadingPage();\n        $(\"#div_dialog_message\").dialog(\"open\");\n    } else if ($(\"#hid_cat\").val() == \"\") {\n        LoadingPage();\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['error_no_selected_folder']); ?><\\/div>\").dialog(\"open\");\n    } else if ($('#recherche_group_pf').val() == 0 || ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)) {\n        // is user read only and it is not a personal folder\n        if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            LoadingPage();\n            return false;\n        }\n\n        //Select the actual forlder in the dialogbox\n        $('#categorie').val($('#hid_cat').val());\n\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            $(\"#div_loading\").addClass(\"hidden\");\n            return false;\n        }\n\n        //Show WYGIWYS editor\n        CKEDITOR.replace(\n            \"desc\",\n            {\n                toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n                height: 100,\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            }\n        );\n\n        // prepare select2 for users\n        $(\"#annonce_liste_destinataires\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n\n        if ($(\"#recherche_group_pf\").val() == 1) {\n            $(\"#div_editRestricted\").addClass(\"hidden\");\n        } else {\n            $(\"#div_editRestricted\").show();\n        }\n\n        //open dialog\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_saisi\").dialog(\"open\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare editing item dialogbox\n//###########\nfunction open_edit_item_div(restricted_to_roles)\n{\n    // is user read only and it is not a personal folder\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        // Exclude the case where the user is in his PF with PSK set\n        if ($('#recherche_group_pf').val() === \"1\" && $(\"#personal_sk_set\").val() === \"1\") {\n            // do nothing\n        } else {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            return false;\n        }\n    }\n\n    // If no Item selected, no edition possible\n    if ($(\"#selected_items\").val() == \"\") {\n        displayMessage(\"<?php echo addslashes($LANG['none_selected_text']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // Get complexity level for this folder\n    // and stop edition if Item edited by another user\n    var compReturn = RecupComplexite($('#hid_cat').val(), 1);\n\n    if (compReturn == 0) {\n        if (CKEDITOR.instances[\"edit_desc\"]) {\n            CKEDITOR.instances[\"edit_desc\"].destroy();\n        }\n        if (CKEDITOR.instances[\"desc\"]) {\n            CKEDITOR.instances[\"desc\"].destroy();\n        }\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Check if Item has changed since loaded\n    if (CheckIfItemChanged() == 1) {\n        var tmp = $(\"#\"+$(\"#selected_items\").val()).attr(\"ondblclick\");\n        tmp = tmp.substring(20,tmp.indexOf(\")\"));\n        tmp = tmp.replace(/'/g, \"\").split(',');\n        AfficherDetailsItem(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], 1, 1);\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Show WYGIWYG editor\n    CKEDITOR.replace(\n        \"edit_desc\",\n        {\n            toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n            height: 100,\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        }\n   );\n    CKEDITOR.instances[\"edit_desc\"].setData($('#hid_desc').val());\n\n    $('#edit_display_title').html($('#hid_label').val());\n    $('#edit_label').val($('#hid_label').val());\n    $('#edit_desc').html($('#hid_desc').val());\n    $('#edit_pw1, #edit_pw2').val($('#hid_pw').val());\n    $(\"#edit_visible_pw\").text($('#hid_pw').val());\n    $('#edit_item_login').val($('#hid_login').val());\n    $('#edit_email').val($('#hid_email').val());\n    $('#edit_url').val($('#hid_url').val());\n    $('#edit_categorie').val($('#id_categorie').val());\n    if ($('#edit_restricted_to').val() != undefined) {\n        $('#edit_restricted_to').val($('#hid_restricted_to').val());\n    }\n    if ($('#edit_restricted_to_roles').val() != undefined) {\n        $('#edit_restricted_to_roles').val($('#hid_restricted_to_roles').val());\n    }\n    $('#edit_tags').val($('#hid_tags').val());\n    if ($('#hid_anyone_can_modify').val() == \"1\") {\n        $('#edit_anyone_can_modify').attr(\"checked\",\"checked\");\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    } else {\n        $('#edit_anyone_can_modify').attr(\"checked\",false);\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    }\n    // fields display\n    if ($('.fields').val() != undefined && $(\"#display_categories\").val() != \"\") {\n        $('.fields').each(function(i){\n            id = $(this).attr('id').split('_');\n            $('#edit_field_' + id[2] + '_' + id[3]).val(htmlspecialchars_decode($('#hid_field_' + id[2] + '_' + id[3]).val()));\n        });\n    }\n\n    //Get list of people in restriction list\n    if ($(\"#recherche_group_pf\").val() == 1) {\n        $(\"#div_editRestricted\").addClass(\"hidden\");\n    } else {\n        $(\"#div_editRestricted\").show();\n        // tick selected users / roles\n        if ($('#edit_restricted_to').val() != undefined) {\n            var list = $('#hid_restricted_to').val().split(';');\n            for (var i=0; i<list.length; i++) {\n                var elem = list[i];\n                if (elem != \"\") {\n                    $(\".folder_rights_user_edit\").each(function() {\n                        if ($(this).attr(\"id\") == elem) {\n                            $(this).prop(\"checked\", true);\n                            exit;\n                        }\n                    });\n                }\n            }\n        }\n\n        if ($('#edit_restricted_to').val() != undefined) {\n            $('#edit_restricted_to_list').empty();\n            if (restricted_to_roles == 1) {\n                //add optgroup\n                var optgroup = $('<optgroup>');\n                optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n            }\n            /*var liste = $('#input_liste_utilisateurs').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                    }\n                }\n            }*/\n        }\n\n        //Add list of roles if option is set\n        if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n            var j = i;\n            //add optgroup\n            var optgroup = $('<optgroup>');\n            optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n\n            var liste = $('#input_list_roles').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='role_\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to_roles').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value='role_\"+elem[0]+\"']\").attr('selected', true);\n                    }\n                    if (i==0) $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n                }\n                j++;\n            }\n        }\n    }\n\n    // prepare select2 for users\n    $(\"#edit_annonce_liste_destinataires\").select2({\n        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n    });\n\n    // disable folder selection if PF\n    if ($('#recherche_group_pf').val() == \"1\") {\n        $(\"#edit_categorie\").prop(\"disabled\", true);\n    } else {\n        $(\"#edit_categorie\").prop(\"disabled\", false);\n    }\n\n    //open dialog\n    $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n    $(\"#div_formulaire_edition_item\").dialog(\"open\");\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_del_item_div()\n{\n    // is user read only\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"2\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $(\"#div_loading\").removeClass(\"hidden\");\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            return false;\n        }\n\n        $(\"#div_loading\").addClass(\"hidden\");\n        $('#div_del_item').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare copy item dialogbox\n//###########\nfunction open_copy_item_to_folder_div()\n{\n    // is user read only\n    if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $('#copy_in_folder').val($(\"#hid_cat\").val());\n        $('#div_copy_item_to_folder').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n\n//###########\n//## FUNCTION : Clear HTML tags from a string\n//###########\nfunction clear_html_tags()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"clear_html_tags\",\n            id_item  : $(\"#id_item\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#edit_desc\").val(data.description);\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to delete an attached file\n//###########\nfunction delete_attached_file(file_id)\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"delete_attached_file\",\n            file_id : file_id,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#span_edit_file_\"+file_id).css(\"textDecoration\", \"line-through\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to preview an attached image\n//###########\nPreviewImage = function(uri,title) {\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"image_preview_preparation\",\n            uri     : uri,\n            title   : title,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            $(\"#dialog_files\").html('<img id=\"image_files\" src=\"\" />');\n            //Get the HTML Elements\n            imageDialog = $(\"#dialog_files\");\n            imageTag = $('#image_files');\n\n            //Set the image src\n            imageTag.attr(\"src\", data.new_file);\n\n            //When the image has loaded, display the dialog\n            imageTag\n            .error(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                displayMessage(\"<?php echo \"<i class='fa fa-exclamation-triangle fa-2x'></i>  \".addslashes($LANG['error_file_is_missing']); ?>\");\n            })\n            .load(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                imageDialog.dialog({\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    width: 'auto',\n                    title: title,\n                    open: function( event, ui ) {\n                        // nothing to do\n                    },\n                    close: function (event, ui) {\n                        // delete file\n                        $.post(\n                            \"sources/main.queries.php\",\n                            {\n                                type    : \"file_deletion\",\n                                filename: data.file_path,\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            }\n                        );\n                    }\n                });\n            });\n        }\n    );\n}\n\nfunction notify_click(status)\n{\n    $.post(\"sources/items.queries.php\",\n    {\n        type     : \"notify_a_user\",\n        user_id : <?php echo $_SESSION['user_id']; ?>,\n        status    : status,\n        notify_type : 'on_show',\n        notify_role : '',\n        item_id : $('#id_item').val(),\n        key        : \"<?php echo $_SESSION['key']; ?>\"\n    },\n    function(data) {\n        if (data[0].error == \"something_wrong\") {\n            $(\"#new_show_error\").html('ERROR!!');\n            $(\"#new_show_error\").show();\n        } else {\n            $(\"#new_show_error\").addClass(\"hidden\");\n            if (data[0].new_status == \"true\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'false\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"<?php echo addslashes($LANG['notify_activated']); ?>\");\n            } else if (data[0].new_status == \"false\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'true\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"\");\n            }\n        }\n    },\n    \"json\"\n    );\n}\n\n/*\n** Checks if current item title is a duplicate in current folder\n*/\nfunction checkTitleDuplicate(itemTitle, checkInCurrentFolder, checkInAllFolders, textFieldId)\n{\n    $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n    $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n    if (itemTitle != \"\") {\n        if (checkInCurrentFolder == \"1\" || checkInAllFolders == \"1\") {\n            //prepare data\n            var data = {\"label\": itemTitle.replace(/\"/g,'&quot;') , \"idFolder\": $('#hid_cat').val()};\n\n            if (checkInCurrentFolder == \"1\") {\n                var typeOfCheck = \"same_folder\";\n            } else {\n                var typeOfCheck = \"all_folders\";\n            }\n\n            // disable Save button\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disable\");\n\n            // send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"check_for_title_duplicate\",\n                    option  : typeOfCheck,\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].duplicate != \"1\") {\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                        // display title\n                        $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n                    } else {\n                        $(\"#label\").focus();\n                        $(\"#new_show_error\").html(\"<?php echo addslashes($LANG['duplicate_title_in_same_folder']); ?>\").show();\n                    }\n                }\n            );\n        } else {\n            // display title\n            $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n        }\n    }\n}\n\n/*\n* builds the folders tree\n*/\nfunction refreshTree(node_to_select, do_refresh, refresh_visible_folders)\n{\n    do_refresh = do_refresh || \"\"\n    node_to_select = node_to_select || \"\";\n    refresh_visible_folders = refresh_visible_folders || 1;\n\n    if (refresh_visible_folders !== 1) {\n        $(\"#jstree\").jstree(\"deselect_all\");\n        $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n        return false;\n    }\n\n    if (do_refresh !== \"0\") {\n        $('#jstree').jstree(true).refresh();\n    }\n\n    if (node_to_select !== \"\") {\n        $(\"#hid_cat\").val(node_to_select);\n        $(\"#jstree\").jstree(\"deselect_all\");\n\n        $('#jstree')\n        .one(\"refresh.jstree\", function (e, data) {\n            data.instance.select_node(\"#li_\"+node_to_select);\n        });\n        //.jstree(\"select_node\", \"#li_\"+node_to_select);\n\n    }\n\n    if (refresh_visible_folders === 1) {\n        refreshVisibleFolders();\n    }\n}\n\n/*\n* refreshes the various lists of folders used in dialogboxes\n*/\nfunction refreshVisibleFolders()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"refresh_visible_folders\",\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            //check if format error\n            if (data.error == \"\") {\n                // append new list\n                $(\"#categorie, #edit_categorie, #new_rep_groupe, #edit_folder_folder, #delete_rep_groupe\").find('option').remove().end().append(data.selectVisibleFoldersOptions);\n                $(\"#move_folder_id\").find('option').remove().end().append(data.selectFullVisibleFoldersOptions);\n                $(\"#copy_in_folder\").find('option').remove().end().append(data.selectVisibleActiveFoldersOptions);\n\n                // remove ROOT option if exists\n                $('#edit_folder_folder option[value=\"0\"]').remove();\n                $('#delete_rep_groupe option[value=\"0\"]').remove();\n            }\n        }\n   );\n}\n\n\n//###########\n//## EXECUTE WHEN PAGE IS LOADED\n//###########\n$(function() {\n\n    var clear_tp_clipboard = new Clipboard(\"#but_empty_clipboard\", {\n        text: function() {\n            return \"cleared\";\n        }\n    });\n    clear_tp_clipboard.on('success', function(e) {\n        $(\"#message_box\").html(\"super\").show().fadeOut(1000);\n\n        e.clearSelection();\n    });\n\n    $.ajaxSetup({\n        error: function(jqXHR, exception) {\n            if (jqXHR.status === 0) {\n                console.log('Not connect.\\nVerify Network.');\n            } else if (jqXHR.status == 404) {\n                alert('Requested page not found. [404]');\n            } else if (jqXHR.status == 500) {\n                alert('Internal Server Error [500].');\n            } else if (exception === 'parsererror') {\n                alert('Requested JSON parse failed.');\n            } else if (exception === 'timeout') {\n                alert('Time out error.');\n            } else if (exception === 'abort') {\n                alert('Ajax request aborted.');\n            } else {\n                alert('Uncaught Error.n' + jqXHR.responseText);\n            }\n        }\n    });\n\n    // manage item div resize\n    $( \"#item_details_scroll\" ).resizable({handles: {'s': '#handle'}});\n    $(\"#handle\").dblclick(function() {\n        var inner = $(\"#item_details_scroll\").find('table');\n        var current_height = $(\"#item_details_scroll\").height();\n        $(\"#item_details_scroll\").animate({top:'+='+(current_height-inner.height())}, 0);\n        $(\"#item_details_scroll\").height(inner.outerHeight(true));\n    });\n\n    $('#toppathwrap').addClass(\"hidden\");\n    if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n    //Expend/Collapse jstree\n    $(\"#jstree_close\").click(function() {\n        $(\"#jstree\").jstree(\"close_all\");\n    });\n    $(\"#jstree_open\").click(function() {\n        $(\"#jstree\").jstree(\"open_all\");\n    });\n    $(\"#jstree_search\").keypress(function(e) {\n        if (e.keyCode == 13) {\n            $(\"#jstree\").jstree(\"search\",$(\"#jstree_search\").val());\n        }\n    });\n\n    $(\".quick_menu\").menu({\n        icons: { submenu: \"no-icon\" }\n    });\n    $(\".quick_menu_left\").menu({\n        position: {\n            my : \"right top\",\n            at : \"left top\"\n        }\n    });\n\n    $('.menu_200, .menu_150').on('blur', function () {\n        $(this).addClass(\"hidden\");\n    });\n\n    $(\"#pw_size, #edit_pw_size\").spinner({\n        min:   3,\n        step:  1,\n        numberFormat: \"n\"\n    });\n\n    //Disable menu buttons\n    $('#menu_button_edit_item,#menu_button_del_item,#menu_button_add_fav,#menu_button_del_fav').attr('disabled', 'disabled');\n\n    //DIsable more buttons if read only user\n    if ($(\"#user_is_read_only\").val() == 1) {\n        $('#menu_button_add_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group').attr('disabled', 'disabled');\n    }\n\n    // Autoresize Textareas\n    $(\".items_tree, #items_content\").addClass(\"ui-corner-all\");\n\n    //automatic height\n    var window_height = $(window).height();\n    $(\"#div_items, #content\").height(window_height-170);\n    $(\"#items_center\").height(window_height-390);\n    $(\"#items_list\").height(window_height-440);\n    $(\".items_tree\").height(window_height-160);\n    $(\"#jstree\").height(window_height-185);\n\n    //warning if screen height too short\n    if (parseInt(window_height-440) <= 30) {\n        $(\"#div_dialog_message_text\").html(\"<?php echo addslashes($LANG['warning_screen_height']); ?>\");\n        $(\"#div_dialog_message\").dialog('open');\n    }\n\n    //Evaluate number of items to display - depends on screen height\n    if (parseInt($(\"#nb_items_to_display_once\").val()) || $(\"#nb_items_to_display_once\").val() == \"max\") {\n        //do nothing ... good value\n    } else {\n        //adapt to the screen height\n        $(\"#nb_items_to_display_once\").val(Math.max(Math.round((window_height-450)/23),2));\n    }\n\n    // Build buttons\n    $(\"#custom_pw, #edit_custom_pw\").buttonset();\n    $(\".cpm_button, #anyone_can_modify, #annonce, #edit_anyone_can_modify, #edit_annonce, .button\").button();\n\n    //Build multiselect box\n\n    //Build tree\n    $('#jstree').jstree({\n        \"core\" : {\n            \"animation\" : 0,\n            \"check_callback\" : true,\n            'data' : {\n                'url' : \"./sources/tree.php\",\n                \"dataType\" : \"json\",\n                \"async\" : true,\n                'data' : function (node) {\n                    return { 'id' : node.id.split('_')[1] };\n                }\n            },\n            \"strings\" : {\n                \"Loading ...\" : \"<?php echo addslashes($LANG['loading']); ?>...\"\n            },\n            \"error\" : {\n\n            }\n        },\n        \"plugins\" : [\n            \"state\", \"search\"\n        ]\n    })\n    //search in tree\n    .bind(\"search.jstree\", function (e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($(\"#jstree li>a.jstree-search\").attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // load list of visible folders for current user\n    refreshVisibleFolders();\n\n    $(\"#add_folder\").click(function() {\n        var posit = $('#item_selected').val();\n        //alert($(\"ul\").text());\n    });\n\n    $(\"#for_searchtext\").addClass(\"hidden\");\n    $(\"#copy_pw_done\").addClass(\"hidden\");\n    $(\"#copy_login_done\").addClass(\"hidden\");\n\n    //PREPARE DIALOGBOXES\n    //=> ADD A NEW GROUP\n    $(\"#div_ajout_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_add_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                AddNewFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#new_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#new_rep_show_error\").addClass(\"hidden\");\n            $(\"#new_rep_show_error\").html(\"\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> EDIT A GROUP\n    $(\"#div_editer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 490,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#edit_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#edit_folder_title\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_folder\").val() == \"0\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_complexity\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if (/^\\d+$/.test($(\"#edit_folder_title\").val())) {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else {\n                    $(\"#edit_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"title\": $('#edit_folder_title').val().replace(/\"/g,'&quot;'),\n                        \"complexity\": $('#edit_folder_complexity').val(),\n                        \"folder\": $('#edit_folder_folder').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"update_folder\",\n                            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                refreshTree($('#edit_folder_folder').val());\n                                $(\"#folder_name_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#path_elem_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#fld_\"+$('#edit_folder_folder').val()).html($('#edit_folder_title').val());\n                                $(\"#edit_folder_title\").val($('#edit_folder_title').val());\n                                $(\"#div_editer_rep\").dialog(\"close\");\n                            } else {\n                                if (data[0].error === \"ERR_TITLE_ONLY_WITH_NUMBERS\") {\n                                    $(\"#edit_rep_show_error\").html('<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>').show();\n                                } else {\n                                    $(\"#edit_rep_show_error\").html(data[0].error).show();\n                                }\n\n                            }\n                            $(\"#edit_folder_loader\").addClass(\"hidden\");\n                            $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_folder_loader\").addClass(\"hidden\");\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n    // =>\n    $(\"#div_copy_item_to_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_copy_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\"#copy_in_folder\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n            $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", false);\n            $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").addClass(\"hidden\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_copy_item_to_folder_item\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").show().html(\"<span><?php echo addslashes($LANG['please_wait']).\" <i class=\\'fa fa-cog fa-spin'></i>\"; ?></span>\");\n                $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", true);\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"copy_item\",\n                        item_id     : $('#id_item').val(),\n                        source_id   : $('#hid_cat').val(),\n                        dest_id     : $('#copy_in_folder').val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error !== \"\") {\n                            $(\"#copy_item_to_folder_show_error\").html(data[1].error_text).show(1).delay(2000).fadeOut(1000);\n                        }\n                        //if OK\n                        if (data[0].status == \"ok\") {\n                            //window.location.href = \"index.php?page=items&group=\"+$('#copy_in_folder').val()+\"&id=\"+data[1].new_id;\n                            ListerItems($('#copy_in_folder').val(),'', 0);\n                            AfficherDetailsItem(data[1].new_id);\n                            refreshTree($('#copy_in_folder').val());\n                            $(\"#copy_in_folder\").val(\"\");\n                            $(\"#div_copy_item_to_folder\").dialog('close');\n                        }\n                        $(\"#copy_item_info\").addClass(\"hidden\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#copy_item_to_folder_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_item_to_folder\").dialog('close');\n            }\n        }\n    });\n    // <=\n\n    //=> MOVE A GROUP\n    $(\"#div_move_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 350,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_mov_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#move_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#move_folder_id\").val() == \"0\") {\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else if($('#hid_cat').val() === $('#move_folder_id').val()) {\n                    // do not move to itself\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else {\n                    $(\"#move_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\")\n                        .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\")\n                        .prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"source_folder_id\": $('#hid_cat').val(),\n                        \"target_folder_id\": $('#move_folder_id').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"move_folder\",\n                            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key     : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                $(\"#div_move_folder ~ .ui-dialog-buttonpane\")\n                                    .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                                ListerItems($('#hid_cat').val(), \"\", 0);\n                                $(\"#move_folder_loader\").addClass(\"hidden\");\n                                refreshTree();\n                                $(\"#div_move_folder\").dialog(\"close\");\n                            } else {\n                                $(\"#move_rep_show_error\").html(data[0].error).show();\n                            }\n                            $(\"#move_folder_loader\").addClass(\"hidden\");\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(\"#move_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n\n    //=> COPY OF FOLDER\n    $(\"#div_copy_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 290,\n        title: \"<?php echo addslashes($LANG['copy_folder']); ?>\",\n        close: function () {\n            $(\"#copy_folder_source_id, #copy_folder_destination_id\").children('option').remove();\n            $(\"#div_copy_folder_msg\")\n                .html('')\n                .removeClass(\"ui-state-highlight\")\n                .addClass(\"hidden\");\n        },\n        open: function(event,ui) {\n            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // get list of folders\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"get_list_of_folders\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").addClass(\"hidden\");\n\n                        //display to user\n                        $(\"#copy_folder_source_id, #copy_folder_destination_id\").append(data[0].list_folders);\n\n                        $(\"#copy_folder_source_id\").val($(\"#hid_cat\").val());\n                    },\n                    \"json\"\n                );\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                if ($(\"#copy_folder_source_id\").val() === \"\" || $(\"#copy_folder_destination_id\").val() === \"\") {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_must_enter_all_fields']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n                if ($(\"#copy_folder_source_id\").val() === $(\"#copy_folder_destination_id\").val()) {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_source_and_destination_are_equal']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n\n                $(\"#div_copy_folder_msg\")\n                    .html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>')\n                    .addClass(\"ui-state-highlight\")\n                    .show();\n\n                //prepare data\n                var data = {\"source_folder_id\": $('#copy_folder_source_id').val(),\n                    \"target_folder_id\": $('#copy_folder_destination_id').val()};\n\n                //Send query\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"copy_folder\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error == \"\") {\n                            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                            refreshTree();\n                            $(\"#div_copy_folder\").dialog(\"close\");\n                        } else {\n                            $(\"#div_copy_folder_msg\").html(data[0].error).show().delay(2000).fadeOut(1000);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#div_copy_folder_msg\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        }\n    });\n    //<=\n\n    //=> DELETE A GROUP\n    $(\"#div_supprimer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 230,\n        title: \"<?php echo addslashes($LANG['item_menu_del_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['delete']); ?>\": function() {\n                SupprimerFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        },\n        close: function() {\n            $(\"#delete_rep_groupe_validate\").prop(\"checked\", false);\n            $(\"#del_rep_show_error\").html(\"\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> ADD A NEW ITEM\n    $(\"#div_formulaire_saisi\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_add_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disabled\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_loading\").removeClass(\"hidden\");\n                $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                AjouterItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_tabs\").tabs({ selected: 0 });\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#label\").focus();\n            $(\"#visible_pw\").html(\"\");\n            $(\"#item_tabs\").tabs(\"option\", \"active\", 0);\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#form_tab_fields\") != undefined)\n                    $(\"#item_tabs\").tabs(\"option\", \"hidden\", 3);\n            } else {\n                if ($(\"#form_tab_fields\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#item_tabs\").tabs(\"option\", \"show\", 3);\n            }\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#expected_complexity\").show();\n            }\n\n            $(\"#categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#item_upload_list\").html(\"\");\n            $(\".item_field\").val(\"\");  // clean values in Fields\n            $(\"#pw1\").focus();\n            $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> EDITER UN ELEMENT\n    $(\"#div_formulaire_edition_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n                EditerItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_edit_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_edit_tabs\").tabs({ selected: 0 });\n                $(\"#div_loading\").addClass(\"hidden\");\n                //Close dialog box\n                $(this).dialog('close');\n            }\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#div_loading, #edit_show_error\").addClass(\"hidden\");\n            $(\"#item_edit_upload_list\").html(\"\");\n            $(\".edit_item_field\").val(\"\");  // clean values in Fields\n            //Unlock the Item\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"free_item_for_edition\",\n                    id      : $(\"#id_item\").val(),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n        },\n        open: function(event,ui) {\n            //refresh pw complexity\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",1  );\n            $(\"#edit_pw1\").first().focus();\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",0  );\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#edit_item_more\") != undefined) $(\"#edit_item_more\").addClass(\"hidden\");\n            } else {\n                if ($(\"#edit_item_more\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#edit_item_more\").show();\n            }\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#edit_expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#edit_expected_complexity\").show();\n            }\n\n            $(\"#edit_categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n\n            // get list of Users\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"build_list_of_users\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        var list = data.list.split(';');\n                        for (var i=0; i<list.length; i++) {\n                            var elem = list[i].split('#');\n                            if (elem[0] != \"\") {\n                                $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                                var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                                if (index != -1) {\n                                    $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                                }\n                            }\n                        }\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SUPPRIMER UN ELEMENT\n    $(\"#div_del_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 220,\n        title: \"<?php echo addslashes($LANG['item_menu_del_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['del_button']); ?>\": function() {\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"del_item\",\n                        id          : $(\"#id_item\").val(),\n                        categorie   : $('#hid_cat').val(),\n                        label       : $(\"#hid_label\").val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").removeClass(\"hidden\");\n\n                        // refresh list of items\n                        $(\"#full_items_list\").html(\"\");\n                        ListerItems($('#hid_cat').val(), \"\", 0)\n\n                        // reload tree\n                        refreshTree($('#hid_cat').val());\n\n                        // clean fields\n                        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n                        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n                        $(\"#selected_items\").val(\"\");\n\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n               );\n                $(this).dialog('close');\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_del_item_selection\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        }\n    });\n    //<=\n    //=> SHOW LINK COPIED DIALOG\n    $(\"#div_item_copied\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['admin_main']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW HISTORY DIALOG\n    $(\"#div_item_history\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 650,\n        height: 400,\n        title: \"<?php echo addslashes($LANG['history']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // load content\n            const data = {\"id\":$(\"#id_item\").val()};\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"load_item_history\",\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        $(\"#item_history_log\").html(data.new_html);\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_item_share\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['send']); ?>\": function() {\n                $(\"#div_item_share_error\").addClass(\"hidden\");\n                if (IsValidEmail($(\"#item_share_email\").val())) {    //check if email format is ok\n                    $(\"#div_item_share_status\").show();\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"send_email\",\n                            id      : $(\"#id_item\").val(),\n                            receipt    : $(\"#item_share_email\").val(),\n                            cat      : \"share_this_item\",\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#div_item_share_status\").html(\"\").addClass(\"hidden\");\n                            if (data[0].error == \"\") {\n                                $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['share_sent_ok']); ?>\").show();\n                            } else {\n                                $(\"#div_item_share_error\").html(data[0].message).show();\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['bad_email_format']); ?>\").show();\n                }\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW ITEM UPDATED DIALOG\n    $(\"#div_item_updated\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 300,\n        height: 100,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_suggest_change\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 750,\n        height: 450,\n        title: \"<?php echo addslashes($LANG['suggest_password_change']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-cog fa-spin fa-2x\"></i>').show().removeClass(\"ui-state-error\");\n\n                // do checks\n                if (!IsValidEmail($(\"#email_change\").val()) && $(\"#email_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['email_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n                if (!validateURL($(\"#url_change\").val()) && $(\"#url_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['url_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n\n                // prepare changes\n                var data = {\"label\": $(\"#label_change\").val(), \"pwd\": $(\"#pwd_change\").val(),\n                    \"url\": $(\"#url_change\").val(), \"login\": $(\"#login_change\").val(),\n                    \"email\": $(\"#email_change\").val(), \"folder\": $(\"#hid_cat\").val(),\n                    \"comment\": $(\"#comment_change\").val(), \"item_id\": $(\"#id_item\").val()};\n\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type    : \"suggest_item_change\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        id      : $(\"#id_item\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error === \"\") {\n                            $(\"#div_suggest_change_wait\").html(\"<?php echo addslashes($LANG['suggestion_done']); ?>\").show(1).delay(1500).fadeOut(1000);\n                            setTimeout(\n                                function() {\n                                    $(\"#div_suggest_change\").dialog(\"close\");\n                                },\n                                500\n                            );\n                        }\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#div_suggest_change_html\")\n            .html(\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['label']); ?></label><input type=\"text\" id=\"label_change\" value=\"'+$(\"#hid_label\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['pw']); ?></label><input type=\"text\" id=\"pwd_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '&nbsp;<i class=\"fa fa-info-circle fa-lg tip\" title=\"<?php echo addslashes($LANG['suggest_change_password_blank']); ?>\"></i>' +\n                //'<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['description']); ?></label><textarea id=\"description_change_change\" class=\"input_text_80 ui-widget-content ui-corner-all\">'+$(\"#hid_desc\").val()+'</textarea>' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['index_login']); ?></label><input type=\"text\" id=\"login_change\" value=\"'+$(\"#hid_login\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['email']); ?></label><input type=\"text\" id=\"email_change\" value=\"'+$(\"#hid_email\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['url']); ?></label><input type=\"text\" id=\"url_change\" value=\"'+$(\"#hid_url\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['comment']); ?></label><input type=\"text\" id=\"comment_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">'\n            )\n            .show();\n            $(\".tip\").tooltipster({multiple: true});\n        }\n    });\n    //<=\n\n    // => ATTACHMENTS INIT\n    var uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_attach_pickfiles\",\n        container : \"item_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },\n<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_upload_wait\").removeClass(\"hidden\");\n\n                if ($(\"#random_id\").val() == \"\") {\n                    var post_id = CreateRandomString(9,\"num_no_0\");\n                    $(\"#random_id\").val(post_id);\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $(\"#random_id\").val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : false,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_upload_wait\").addClass(\"hidden\");\n                $(\"#files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#remove_\" + file.id).remove();\n    });\n    uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n\n    // Load edit uploaded click\n    $(\"#item_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 10\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                uploader_attachments.start();\n            },\n            \"json\"\n        );\n        e.preventDefault();\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_upload_list').append(\n                '<div id= file.id><span id=\"remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#files_number\").val(parseInt($(\"#files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    // Prepare uplupload object for attachments upload\n    var edit_uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_edit_attach_pickfiles\",\n        container : \"item_edit_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n        ?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_edit_upload_wait\").removeClass(\"hidden\");\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $('#selected_items').val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : true,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#edit_files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_edit_upload_wait\").addClass(\"hidden\");\n                $(\"#edit_files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    edit_uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n    edit_uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_edit_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    edit_uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n\n    // Load edit uploaded click\n    $(\"#item_edit_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 30\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                edit_uploader_attachments.start();\n            },\n            \"json\"\n        );\n\n        e.preventDefault();\n    });\n    edit_uploader_attachments.init();\n    edit_uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_edit_upload_list').append(\n                '<div id= file.id><span id=\"edit_remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#edit_files_number\").val(parseInt($(\"#edit_files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    //Launch items loading\n    if ($(\"#jstree_group_selected\").val() == \"\") {\n        var first_group = 1;\n    } else {\n        var first_group = $(\"#jstree_group_selected\").val();\n    }\n\n    if ($(\"#hid_cat\").val() != \"\") {\n        first_group = $(\"#hid_cat\").val();\n    }\n\n    //load items\n    if (parseInt($(\"#query_next_start\").val()) > 0) start = parseInt($(\"#query_next_start\").val());\n    else start = 0;\n\n    // load list of items\n    if (first_group !== \"\") {\n        ListerItems(first_group,'', start);\n    }\n\n    //Load item if needed and display items list\n    if ($(\"#open_id\").val() !== \"\") {\n        AfficherDetailsItem($(\"#open_id\").val());\n        //refreshTree($(\"#hid_cat\").val(), \"0\");\n        $(\"#open_item_by_get\").val(\"\");\n    }\n\n    //Password meter for item creation\n    $(\"#pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#pw1').bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    });\n\n    $(\"#tabs-02\").on(\n        \"score.simplePassMeter\",\n        \"#pw1\",\n        function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    );\n\n\n    //Password meter for item update\n    $(\"#edit_pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#edit_pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#edit_pw1').on(\n        \"score.simplePassMeter\", function(jQEvent, score) {\n            $(\"#edit_mypassword_complex\").val(score);\n        }\n    );\n\n    //Text search watermark\n    var tbval = $('#jstree_search').val();\n    $('#jstree_search').focus(function() { $(this).val('');});\n    $('#jstree_search').blur(function() { $(this).val(tbval);});\n    $('#search_item').focus(function() { $(this).val('');});\n    $('#search_item').blur(function() { $(this).val(tbval);});\n\n    //add date selector\n    $(\".datepicker\").datepicker({\n        dateFormat:\"<?php echo str_replace(array(\"Y\", \"M\"), array(\"yy\", \"mm\"), $SETTINGS['date_format']); ?>\",\n        changeMonth: true,\n        changeYear: true\n    });\n\n    //autocomplete for TAGS\n    $(\"#item_tags, #edit_tags\")\n        .focus()\n        .bind( \"keydown\", function( event ) {\n            if ( event.keyCode === $.ui.keyCode.TAB &&\n                    $( this ).data( \"autocomplete\" ).menu.active ) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            //source: 'sources/items.queries.php?type=autocomplete_tags',\n            source: function( request, response ) {\n                $.getJSON( \"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast( request.term )\n                }, response );\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast( this.value );\n            },\n            select: function( event, ui ) {\n                var terms = split( this.value );\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push( ui.item.value );\n                // add placeholder to get the comma-and-space at the end\n                terms.push( \"\" );\n                this.value = terms.join( \" \" );\n\n                return false;\n            }\n        }\n    );\n\n    //DIALOG FOR OFFLINE MODE\n    $(\"#dialog_offline_mode\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['offline_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_offline_generate']); ?>\": function() {\n                generateOfflineFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_offline_mode\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR EXPORT FILE\n    $(\"#dialog_export_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['print_out_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_export_file']); ?>\": function() {\n                exportItemsToFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_export_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR IMPORT FILE\n    $(\"#dialog_import_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['import_csv_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_import_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n\n    // DIALOG BOX FOR PERSONAL PASSWORDS UPGRADE\n    $(\"#dialog_upgrade_personal_passwords\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 300,\n        title: \"<?php echo addslashes($LANG['upgrade_needed']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['admin_action_db_backup_start_tip']); ?>\": function() {\n                $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type    : \"reencrypt_personal_pwd_start\",\n                        user_id : \"<?php echo $_SESSION['user_id']; ?>\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error != \"\") {\n                            $(\"#dialog_upgrade_personal_passwords_status\").html(data[0].error).addClass(\"ui-state-error\").show();\n                        } else {\n                            reEncryptPersonalPwds(data[0].pws_list, data[0].currentId, data[0].nb);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    //DIALOG FOR SSH\n    $(\"#dialog_ssh\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 620,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['update_server_password']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_ssh\").html(\"<i class=\\'fa fa-cog fa-spin fa-2x\\'></i>&nbsp;<b><?php echo addslashes($LANG['please_wait']); ?></b>\");\n        }\n    });\n\n    //Simulate a CRON activity (only 8 secs after page loading)\n    setTimeout(\n        function() {\n            // send email\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"send_waiting_emails\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n\n            // send statistics\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"sending_statistics\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n        },\n        8000\n    );\n\n    NProgress.done();\n});\n\n// show password during longpress\nvar mouseStillDown = false;\n$('#item_details_ok').on('mousedown', '.unhide_masked_data', function(event) {\n    mouseStillDown = true;\n     showPwdContinuous($(this).attr('id'));\n}).on('mouseup', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n}).on('mouseleave', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n});\nvar showPwdContinuous = function(elem_id){\n    if(mouseStillDown){\n        $('#'+elem_id).text($('#h'+elem_id).val());\n        setTimeout(\"showPwdContinuous('\"+elem_id+\"')\", 50);\n        // log password is shown\n        if (elem_id === \"id_pw\" && $(\"#pw_shown\").val() == \"0\") {\n            itemLog(\"item_password_shown\");\n            $(\"#pw_shown\").val(\"1\");\n        }\n    } else {\n        $('#'+elem_id).html('<?php echo $var['hidden_asterisk']; ?>');\n        $('.tip').tooltipster({multiple: true});\n    }\n}\n\nvar showPwd = function(){\n    $(\"#visible_pw, #edit_visible_pw\").toggle();\n}\n\n/*\n* permits to save\n*/\nfunction itemLog(log_case)\n{\n    $.post(\n        \"sources/items.logs.php\",\n        {\n            type        : log_case,\n            id_item     : $('#id_item').val(),\n            folder_id   : $('#hid_cat').val(),\n        hid_label   : $('#hid_label').val(),\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        }\n    );\n}\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n    return string;\n}\n\n/**\n * Permit to load dynamically the list of Items\n */\nfunction proceed_list_update(stop_proceeding)\n{\n    stop_proceeding = stop_proceeding || \"\";\n\n    if (stop_proceeding === \"1\" || ($(\"#new_listing_characteristics\").val() !== \"\" && $(\"#query_next_start\").val() !== \"end\")) {\n        var tmp = $(\"#new_listing_characteristics\").val().split(',');\n        $(\"#new_listing_characteristics\").val(\"\");\n        ListerItems(tmp[0], tmp[1], tmp[2], tmp[3]);\n        return false;\n    }\n\n    if ($(\"#query_next_start\").val() !== \"end\") {\n        //Check if nb of items do display > to 0\n        if ($(\"#nb_items_to_display_once\").val() > 0) {\n            ListerItems($(\"#hid_cat\").val(),'', parseInt($(\"#query_next_start\").val()));\n        }\n    } else {\n        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n        $(\"#items_list_loader\").addClass(\"hidden\");\n\n        // prepare clipboard items\n        var clipboard = new Clipboard('.mini_login');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n            e.clearSelection();\n        });\n\n        var clipboard = new Clipboard('.mini_pw');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n            itemLog(\"item_password_copied\");\n            e.clearSelection();\n        });\n\n        $(\".tip\").tooltipster({multiple: true});\n        $(\".mini_login, .mini_pw\").css(\"cursor\", \"pointer\");\n\n        var restricted_to_roles = <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}\n?>;\n\n        // refine users list to the related roles\n        $.post(\n            \"sources/items.queries.php\",\n            {\n                type        : \"get_refined_list_of_users\",\n                iFolderId   : $('#hid_cat').val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                // *** restricted_to_list ***\n                $(\"#restricted_to_list\").empty();\n                // add list of users\n                if ($('#restricted_to').val() != undefined) {\n                    $(\"#restricted_to_list\").append(data.selOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#restricted_to_list\").append(data.selOptionsRoles);\n                    $(\".folder_rights_role\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n\n                // *** edit_restricted_to_list ***\n                $(\"#edit_restricted_to_list\").empty();\n                if ($('#edit_restricted_to').val() != undefined) {\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user_edit\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsRoles);\n                    $(\".folder_rights_role_edit\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#edit_restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n            }\n       );\n    }\n}\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction items_list_filter(id)\n{\n    $(\"#full_items_list\").find(\"li\").show();\n    if (id) {\n        $(\"#full_items_list\").find(\"a:not(:contains(\" + id + \"))\").parent().addClass(\"hidden\");\n        $(\"#full_items_list\").find(\"a:contains(\" + id + \")\").parent().show();\n    }\n}\n\n\nfunction manage_history_entry(type, id)\n{\n    var data = {\"item_id\": $(\"#id_item\").val(), \"label\": sanitizeString($('#add_history_entry_label').val())};\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type      : \"history_entry_add\",\n            folder_id : $('#hid_cat').val(),\n            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key       : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error == \"\") {\n                $(\"#item_history_log_error\").html(\"\").addClass(\"hidden\");\n                $(\"#add_history_entry_label\").val(\"\");\n                $(\"#item_history_log\").append(htmlspecialchars_decode(data.new_line));\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_item_history\").dialog(\"open\");\n        }\n   );\n}\n\n\n/*\n* Launch the redirection to OTV page\n*/\nfunction prepareOneTimeView()\n{\n    if ($(\"#selected_items\").val() == \"\") return;\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"generate_OTV_url\",\n            id      : $(\"#id_item\").val(),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            if (data.error == \"\") {\n                $(\"#div_dialog_message\").dialog({height:300,minWidth:750});\n                $(\"#div_dialog_message\").dialog('open');\n                $(\"#div_dialog_message_text\").html(data.url+\n                    '<div style=\"margin-top:30px;font-size:13px;text-align:center;\"><span id=\"show_otv_copied\" class=\"ui-state-focus ui-corner-all\" style=\"padding:10px;display:none;\"></span></div>'\n                );\n\n                // prepare clipboard\n                var clipboard = new Clipboard(\"#button_copy_otv_link\", {\n                    text: function() {\n                        return unsanitizeString($('#otv_link').text());\n                    }\n                });\n                clipboard.on('success', function(e) {\n                    $(\"#show_otv_copied\").html(\"<?php echo addslashes($LANG['link_is_copied']); ?>\").show().fadeOut(2000);\n\n                    e.clearSelection();\n                });\n\n                $(\".tip\").tooltipster({multiple: true});\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        },\n        \"json\"\n   );\n}\n\nfunction globalItemsSearch()\n{\n    if ($(\"#search_item\").val() != \"\") {\n        // stop items loading (if on-going)\n        $(\"#items_listing_should_stop\").val(\"1\");\n\n        // wait\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching']); ?>');\n\n        // clean\n        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, #item_extra_info\").html(\"\");\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n        $(\"#full_items_list\").html(\"\");\n        $(\"#selected_items\").val(\"\");\n\n        // send query\n        $.get(\n            \"sources/find.queries.php\",\n            {\n                type        : \"search_for_items\",\n                sSearch     : $(\"#search_item\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                displayMessage(data.message);\n                $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>');\n                $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n                $(\"#full_items_list\").html(data.items_html);\n                $(\"#items_list_loader\").addClass(\"hidden\");\n            }\n        );\n    }\n}\n\n/*\n*\n*/\nfunction searchItemsWithTags(tag)\n{\n    //console.log(\">\"+tag);\n    if (tag == \"\") return false\n\n    // wait\n    $(\"#items_list_loader\").removeClass(\"hidden\");\n    $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching_tag']); ?>&nbsp;<b>' + tag + '</b> ...');\n\n    // clean\n    $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n    $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n    $(\"#full_items_list\").html(\"\");\n    $(\"#selected_items\").val(\"\");\n\n    // send query\n    $.get(\n        \"sources/find.queries.php\",\n        {\n            type        : \"search_for_items_with_tags\",\n            tagSearch   : tag,\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            displayMessage(data.message);\n            $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>&nbsp;<b>' + tag + '</b>');\n            $(\"#full_items_list\").html(data.items_html);\n            $(\"#items_list_loader\").addClass(\"hidden\");\n        }\n    );\n}\n\nfunction loadOfflineDialog()\n{\n    $(\"#dialog_offline_mode\").dialog({\n        open: function(event, ui) {\n            $(\"#div_offline_mode\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.offline.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadExportDialog()\n{\n    $(\"#dialog_export_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_export_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.export.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadImportDialog()\n{\n    $(\"#dialog_import_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_import_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.import.php?key=<?php echo $_SESSION['key']; ?>&folder_id=\"+$(\"#hid_cat\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction reEncryptPersonalPwds(remainingIds, currentId, nb)\n{\n    //console.log(remainingIds+\";\"+currentId+\";\"+nb);\n    $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n\n    $.ajax({\n        url: \"sources/utils.queries.php\",\n        type : 'POST',\n        dataType : \"json\",\n        data : {\n            type        : \"reencrypt_personal_pwd\",\n            currentId   : currentId,\n            user_id     : \"<?php echo $_SESSION['user_id']; ?>\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        complete : function(data, statut){\n            var aIds = remainingIds.split(\",\");\n            var currentID = aIds[0];\n            aIds.shift();\n            var nb2 = aIds.length;\n            aIds = aIds.toString();\n            if (nb == 0)\n                $(\"#reencryption_progress\").html(\"100%\");\n            else\n                $(\"#reencryption_progress\").html(Math.floor(((nb-nb2) / nb) * 100)+\"%\");\n\n            if (nb2 != \"0\" || (nb2 == \"\" && currentID != \"\")) {\n                reEncryptPersonalPwds(aIds, currentID, nb);\n            } else {\n                $(\"#dialog_upgrade_personal_passwords\").html('<i class=\"fa fa-info\"></i>&nbsp;<?php echo addslashes($LANG['operation_encryption_done']); ?>');\n\n                // ensure that no upgrade popup is shown\n                $(\"#personal_upgrade_needed\").val(\"\");\n            }\n        }\n    });\n}\n\n function serverAutoChangePwd()\n {\n    //console.log(\"opening\");\n    $(\"#dialog_ssh\").dialog({\n        open: function(event, ui) {\n            $(\"#div_ssh\").load(\n                \"<?php echo $SETTINGS['cpassman_url'].'/ssh.php?key='.$_SESSION['key']; ?>&id=\"+$(\"#selected_items\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\n/*\n**\n*/\nfunction showPasswordsHistory() {\n    if ($('#edit_past_pwds_div').text() !== \"\") {\n        $('#edit_past_pwds_div').toggle();\n    }\n}\n\n$.fn.simulateClick = function() {\n    return this.each(function() {\n        if('createEvent' in document) {\n            var doc = this.ownerDocument,\n                evt = doc.createEvent('MouseEvents');\n            evt.initMouseEvent('click', true, true, doc.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n            this.dispatchEvent(evt);\n        } else {\n            this.click(); // IE Boss!\n        }\n    });\n}\n\n\n// escape HTML characters\nString.prototype.escapeHTML = function() {\n    return this.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n//]]>\n</script>\n", "<?php\n/**\n *\n * @file          items.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], curPage())) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare GET variables\n$get_group = $superGlobal->get(\"group\", \"GET\");\n$get_id = $superGlobal->get(\"id\", \"GET\");\n\n// Prepare SESSION variables\n$session_user_admin = $superGlobal->get(\"user_admin\", \"SESSION\");\n\n\nif ($session_user_admin === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n    && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n    $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n    $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n}\n\n// Get list of users\n$usersList = array();\n$rows = DB::query(\"SELECT id,login,email FROM \".$pre.\"users ORDER BY login ASC\");\nforeach ($rows as $record) {\n    $usersList[$record['login']] = array(\n        \"id\" => $record['id'],\n        \"login\" => $record['login'],\n        \"email\" => $record['email'],\n        );\n}\n// Get list of roles\n$arrRoles = array();\n$listRoles = \"\";\n$rows = DB::query(\"SELECT id,title FROM \".$pre.\"roles_title ORDER BY title ASC\");\nforeach ($rows as $reccord) {\n    $arrRoles[$reccord['title']] = array(\n        'id' => $reccord['id'],\n        'title' => $reccord['title']\n        );\n    if (empty($listRoles)) {\n        $listRoles = $reccord['id'].'#'.$reccord['title'];\n    } else {\n        $listRoles .= ';'.$reccord['id'].'#'.$reccord['title'];\n    }\n}\n\n// Hidden things\necho '\n<input type=\"hidden\" name=\"hid_cat\" id=\"hid_cat\" value=\"', $get_group !== null ? $get_group : \"\", '\" />\n<input type=\"hidden\" id=\"complexite_groupe\" value=\"\" />\n<input type=\"hidden\" name=\"selected_items\" id=\"selected_items\" value=\"\" />\n<input type=\"hidden\" id=\"bloquer_creation_complexite\" value=\"\" />\n<input type=\"hidden\" id=\"bloquer_modification_complexite\" value=\"\" />\n<input type=\"hidden\" id=\"error_detected\" value=\"\" />\n<input type=\"hidden\" name=\"random_id\" id=\"random_id\" value=\"\" />\n<input type=\"hidden\" id=\"edit_wysiwyg_displayed\" value=\"\" />\n<input type=\"hidden\" id=\"richtext_on\" value=\"1\" />\n<input type=\"hidden\" id=\"query_next_start\" value=\"0\" />\n<input type=\"hidden\" id=\"display_categories\" value=\"0\" />\n<input type=\"hidden\" id=\"nb_items_to_display_once\" value=\"', isset($SETTINGS['nb_items_by_query']) ? htmlspecialchars($SETTINGS['nb_items_by_query']) : 'auto', '\" />\n<input type=\"hidden\" id=\"user_is_read_only\" value=\"', isset($_SESSION['user_read_only']) && $_SESSION['user_read_only'] == 1 ? '1' : '', '\" />\n<input type=\"hidden\" id=\"request_ongoing\" value=\"\" />\n<input type=\"hidden\" id=\"request_lastItem\" value=\"\" />\n<input type=\"hidden\" id=\"item_editable\" value=\"\" />\n<input type=\"hidden\" id=\"timestamp_item_displayed\" value=\"\" />\n<input type=\"hidden\" id=\"pf_selected\" value=\"\" />\n<input type=\"hidden\" id=\"user_ongoing_action\" value=\"\" />\n<input type=\"hidden\" id=\"input_list_roles\" value=\"'.htmlentities($listRoles).'\" />\n<input type=\"hidden\" id=\"path_fontsize\" value=\"\" />\n<input type=\"hidden\" id=\"access_level\" value=\"\" />\n<input type=\"hidden\" id=\"empty_clipboard\" value=\"\" />\n<input type=\"hidden\" id=\"selected_folder_is_personal\" value=\"\" />\n<input type=\"hidden\" id=\"personal_visible_groups_list\" value=\"', isset($_SESSION['personal_visible_groups_list']) ? $_SESSION['personal_visible_groups_list'] : \"\", '\" />\n<input type=\"hidden\" id=\"create_item_without_password\" value=\"', isset($SETTINGS['create_item_without_password']) ? $SETTINGS['create_item_without_password'] : \"0\", '\" />';\n// Hidden objects for Item search\nif ($get_group !== null && $get_id !== null) {\n    echo '\n    <input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"'.$get_group.'\" />\n    <input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"'.$get_id.'\" />\n    <input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"', in_array($get_group, $_SESSION['personal_visible_groups']) ? '1' : '0', '\" />\n    <input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"true\" />';\n} elseif ($get_group !== null && $get_id === null) {\n    echo '<input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"'.$get_group.'\" />';\n    echo '<input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"', in_array($get_group, $_SESSION['personal_visible_groups']) ? '1' : '0', '\" />';\n    echo '<input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"\" />';\n} else {\n    echo '<input type=\"hidden\" name=\"open_folder\" id=\"open_folder\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"open_id\" id=\"open_id\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"recherche_group_pf\" id=\"recherche_group_pf\" value=\"\" />';\n    echo '<input type=\"hidden\" name=\"open_item_by_get\" id=\"open_item_by_get\" value=\"\" />';\n}\n// Is personal SK available\necho '\n<input type=\"hidden\" name=\"personal_sk_set\" id=\"personal_sk_set\" value=\"', isset($_SESSION['user_settings']['session_psk']) && !empty($_SESSION['user_settings']['session_psk']) ? '1' : '0', '\" />\n<input type=\"hidden\" id=\"personal_upgrade_needed\" value=\"', isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1 && $session_user_admin !== '1' && isset($_SESSION['user_upgrade_needed']) && $_SESSION['user_upgrade_needed'] == 1 ? '1' : '0', '\" />';\n// define what group todisplay in Tree\nif (isset($_COOKIE['jstree_select']) && !empty($_COOKIE['jstree_select'])) {\n    $firstGroup = str_replace(\"#li_\", \"\", $_COOKIE['jstree_select']);\n} else {\n    $firstGroup = \"\";\n}\n\necho '\n<input type=\"hidden\" name=\"jstree_group_selected\" id=\"jstree_group_selected\" value=\"'.htmlspecialchars($firstGroup).'\" />\n<input type=\"hidden\" id=\"item_user_token\" value=\"\" />\n<input type=\"hidden\" id=\"items_listing_should_stop\" value=\"\" />\n<input type=\"hidden\" id=\"new_listing_characteristics\" value=\"\" />\n<input type=\"hidden\" id=\"uniqueLoadData\" value=\"\" />';\n\necho '\n<div id=\"div_items\">';\n// MAIN ITEMS TREE\necho '\n    <div class=\"items_tree\">\n        <div id=\"quick_menu\" style=\"float:left; margin-right: 5px;\">\n            <ul class=\"quick_menu\">\n                <li><i class=\"fa fa-bars\"></i>\n                    <ul class=\"menu_250\">\n                        <li id=\"jstree_open\"><i class=\"fa fa-expand fa-fw\"></i>&nbsp; '.$LANG['expand'].'</li>\n                        <li id=\"jstree_close\"><i class=\"fa fa-compress fa-fw\"></i>&nbsp; '.$LANG['collapse'].'</li>\n                        <li onclick=\"refreshTree()\"><i class=\"fa fa-refresh fa-fw\"></i>&nbsp; '.$LANG['refresh'].'</li>\n                        <li onclick=\"open_add_group_div()\"><i class=\"fa fa-plus fa-fw\"></i>&nbsp; '.$LANG['item_menu_add_rep'].'</li>\n                        <li onclick=\"open_edit_group_div()\"><i class=\"fa fa-pencil fa-fw\"></i>&nbsp; '.$LANG['item_menu_edi_rep'].'</li>\n                        <li onclick=\"open_move_group_div()\"><i class=\"fa fa-arrows fa-fw\"></i>&nbsp; '.$LANG['item_menu_mov_rep'].'</li>\n                        <li onclick=\"open_del_group_div()\"><i class=\"fa fa-eraser fa-fw\"></i>&nbsp; '.$LANG['item_menu_del_rep'].'</li>\n                        <li onclick=\"$(\\'#div_copy_folder\\').dialog(\\'open\\');\"><i class=\"fa fa-copy fa-fw\"></i>&nbsp; '.$LANG['copy_folder'].'</li>\n                        ', isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 && $session_user_admin !== '1' ? '<li onclick=\"loadImportDialog()\"><i class=\"fa fa-cloud-upload fa-fw\"></i>&nbsp; '.$LANG['import_csv_menu_title'].'</li>' : '',\n                        (isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 && $session_user_admin !== '1' && $_SESSION['temporary']['user_can_printout'] === true) ? '<li onclick=\"loadExportDialog()\"><i class=\"fa fa-cloud-download fa-fw\"></i>&nbsp; '.$LANG['print_out_menu_title'].'</li>' : '',\n                        (isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1 && $session_user_admin !== '1') ? '<li onclick=\"loadOfflineDialog()\"><i class=\"fa fa-laptop fa-fw\"></i>&nbsp; '.$LANG['offline_menu_title'].'</li>' : '', '\n                    </ul>\n                </li>\n            </ul>\n        </div>\n        <div style=\"margin:3px 0px 10px 18px;font-weight:bold;\">\n            '.$LANG['items_browser_title'].'\n            <input type=\"text\" name=\"jstree_search\" id=\"jstree_search\" class=\"text ui-widget-content ui-corner-all search_tree\" value=\"'.htmlentities(strip_tags($LANG['item_menu_find']), ENT_QUOTES).'\" />\n        </div>\n        <div id=\"sidebar\" class=\"sidebar\">\n            <div id=\"jstree\" style=\"overflow:auto;\"></div>\n        </div>\n    </div>';\n// Zone top right - items list\necho '\n    <div id=\"items_content\">\n        <div id=\"items_center\">\n            <div id=\"items_path\" class=\"ui-corner-all\">\n                <div class=\"quick_menu1\" style=\"float:left; margin-right: 5px;\">\n                    <ul class=\"quick_menu\">\n                        <li><i class=\"fa fa-bars\"></i>\n                            <ul class=\"menu_250\">\n                                <li id=\"menu_button_add_item\" onclick=\"open_add_item_div()\"><i class=\"fa fa-plus fa-fw\"></i>&nbsp; '.$LANG['item_menu_add_elem'].'</li>\n                                <li id=\"menu_button_edit_item\" onclick=\"open_edit_item_div(', isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1 ? 1 : 0, ')\"><i class=\"fa fa-pencil fa-fw\"></i>&nbsp; '.$LANG['item_menu_edi_elem'].'</li>\n                                <li id=\"menu_button_del_item\" onclick=\"open_del_item_div()\"><i class=\"fa fa-eraser fa-fw\"></i>&nbsp; '.$LANG['item_menu_del_elem'].'</li>\n                                <li id=\"menu_button_copy_item\" onclick=\"open_copy_item_to_folder_div()\"><i class=\"fa fa-copy fa-fw\"></i>&nbsp; '.$LANG['item_menu_copy_elem'].'</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>\n\n                <div style=\"margin-top: 3px;\">\n                    <div id=\"txt1\"  style=\"float:left;\">\n                        <span id=\"items_path_var\"></span>\n                    </div>\n\n                    <div class=\"input-group margin-bottom-sm\" style=\"float:right; margin-top:-1px;\">\n                        <span class=\"input-group-addon\"><i class=\"fa fa-binoculars fa-fw\"></i></span>\n                        <input class=\"form-control text ui-widget-content\" type=\"text\" onkeypress=\"javascript:if (event.keyCode == 13) globalItemsSearch();\" id=\"search_item\" />\n                    </div>\n\n                    <i id=\"items_list_loader\" style=\"float:right;margin-right:5px;\" class=\"fa fa-cog fa-spin mi-red hidden\"></i>&nbsp;\n                </div>\n            </div>\n            <div id=\"items_list\"></div>\n        </div>';\n// Zone ITEM DETAIL\necho '\n        <div id=\"item_details_ok\">\n            <input type=\"hidden\" id=\"id_categorie\" value=\"\" />\n            <input type=\"hidden\" id=\"id_item\" value=\"\" />\n            <input type=\"hidden\" id=\"hid_anyone_can_modify\" value=\"\" />\n            <div style=\"height:220px;overflow-y:auto;\" id=\"item_details_scroll\">\n                <div id=\"handle\" class=\"ui-resizable-handle ui-resizable-n\"></div>';\n\necho'\n                <div id=\"item_details_expired\" style=\"display:none;background-color:white; margin:5px;\">\n                    <div class=\"ui-state-error ui-corner-all\" style=\"padding:2px;\">\n                        <i class=\"fa fa-warning\"></i>&nbsp;<b>'.$LANG['pw_is_expired_-_update_it'].'</b>\n                    </div>\n                </div>\n                <table width=\"100%\" id=\"item_details_table\">';\n// Line for LABEL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\" colspan=\"2\">\n                        <div class=\"quick_menu2\" style=\"float:left; margin-right: 5px;\">\n                            <ul class=\"quick_menu ui-menu\">\n                                <li><i class=\"fa fa-bars\"></i>\n                                    <ul class=\"menu_250\">\n                                        <li id=\"menu_button_copy_pw\" class=\"copy_clipboard\"><i class=\"fa fa-lock fa-fw\"></i>&nbsp; '.$LANG['pw_copy_clipboard'].'</li>\n                                        <li id=\"menu_button_copy_login\" class=\"copy_clipboard\"><i class=\"fa fa-user fa-fw\"></i>&nbsp; '.$LANG['login_copy'].'</li>\n                                        <li id=\"menu_button_show_pw\" onclick=\"ShowPassword()\"><i class=\"fa fa-eye fa-fw\"></i>&nbsp; '.$LANG['mask_pw'].'</li>\n                                        <li id=\"menu_button_copy_link\" class=\"copy_clipboard\"><i class=\"fa fa-link fa-fw\"></i>&nbsp; '.$LANG['url_copy'].'</li>\n                                        <li id=\"menu_button_history\" onclick=\"OpenDialog(\\'div_item_history\\', \\'false\\')\"><i class=\"fa fa-history fa-fw\"></i>&nbsp; '.$LANG['history'].'</li>\n                                        <li id=\"menu_button_share\" onclick=\"OpenDialog(\\'div_item_share\\', \\'false\\')\"><i class=\"fa fa-share fa-fw\"></i>&nbsp; '.$LANG['share'].'</li>',\n                                        (isset($SETTINGS['otv_is_enabled']) && $SETTINGS['otv_is_enabled'] == 1) ? '<li id=\"menu_button_otv\" onclick=\"prepareOneTimeView()\"><i class=\"fa fa-users fa-fw\"></i>&nbsp; '.$LANG['one_time_item_view'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] == 1 ? '\n                                        <li id=\"menu_button_notify\"><i class=\"fa fa-volume-up fa-fw\"></i>&nbsp; '.$LANG['notify_me_on_change'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_server_password_change']) && $SETTINGS['enable_server_password_change'] == 1 && isset($_SESSION['user_read_only']) && $_SESSION['user_read_only'] !== \"1\" ? '\n                                        <li onclick=\"serverAutoChangePwd()\"><i class=\"fa fa-server fa-fw\"></i>&nbsp; '.$LANG['update_server_password'].'</li>' : '', '\n                                        ', isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1 ? '\n                                        <li onclick=\"OpenDialog(\\'div_suggest_change\\', \\'false\\')\"><i class=\"fa fa-random fa-fw\"></i>&nbsp; '.$LANG['suggest_password_change'].'</li>' : '', '\n                                    </ul>\n                                </li>\n                            </ul>\n                        </div>\n                        <div id=\"id_label\" style=\"display:inline; margin:4px 0px 0px 120px; \"></div>\n                        <input type=\"hidden\" id=\"hid_label\" value=\"', isset($dataItem) ? htmlspecialchars($dataItem['label']) : '', '\" />\n                        <div style=\"float:right; font-family:arial; margin-right:5px;\" id=\"item_viewed_x_times\"></div>\n\n                        <!-- INFO -->\n                        <div class=\"\" style=\"float:right;margin-right:5px;\" id=\"item_extra_info\" title=\"\"></div>\n                        <!-- INFO END -->\n\n                    </td>\n                </tr>';\n// Line for DESCRIPTION\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\" width=\"180px\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['description'].' :</td>\n                    <td>\n                        <div id=\"id_desc\" style=\"font-style:italic;display:inline;\"></div><input type=\"hidden\" id=\"hid_desc\" value=\"', isset($dataItem) ? htmlspecialchars($dataItem['description']) : '', '\" />\n                    </td>\n                </tr>';\n// Line for PW\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['pw'].' :<span id=\"button_quick_pw_copy\" class=\"fa fa-paste fa-border fa-sm tip\" style=\"cursor:pointer;display:none;float:right;margin-right:2px;\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i></td>\n                    <td>\n                        &nbsp;\n                        <div id=\"id_pw\" class=\"unhide_masked_data\" style=\"float:left; cursor:pointer; width:300px;\"></div>\n                        <input type=\"hidden\" id=\"hid_pw\" value=\"\" />\n                        <input type=\"hidden\" id=\"pw_shown\" value=\"0\" />\n                    </td>\n                </tr>';\n// Line for LOGIN\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['index_login'].' :<span id=\"button_quick_login_copy\" class=\"fa fa-paste fa-border fa-sm tip\" style=\"cursor:pointer;display:none;float:right;margin-right:2px;\" title=\"'.$LANG['item_menu_copy_login'].'\"></span></td>\n                    <td>\n                        <div id=\"id_login\" style=\"float:left;\"></div>\n                        <input type=\"hidden\" id=\"hid_login\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for EMAIL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['email'].' :</td>\n                    <td>\n                        <div id=\"id_email\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_email\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for URL\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['url'].' :</td>\n                    <td>\n                        <div id=\"id_url\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_url\" value=\"\" />\n                    </td>\n                </tr>';\n// Line for FILES\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['files_&_images'].' :</td>\n                    <td>\n                        <div id=\"id_files\" style=\"display:inline;font-size:11px;\"></div><input type=\"hidden\" id=\"hid_files\" />\n                        <div id=\"dialog_files\" style=\"display: none;\">\n\n                        </div>\n                    </td>\n                </tr>';\n// Line for RESTRICTED TO\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['restricted_to'].' :</td>\n                    <td>\n                        <div id=\"id_restricted_to\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_restricted_to\" /><input type=\"hidden\" id=\"hid_restricted_to_roles\" />\n                    </td>\n                </tr>';\n// Line for TAGS\necho '\n                <tr>\n                    <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['tags'].' :</td>\n                    <td>\n                        <div id=\"id_tags\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_tags\" />\n                    </td>\n                </tr>';\n// Line for KBs\nif (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n    echo '\n                    <tr>\n                        <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$LANG['kbs'].' :</td>\n                        <td>\n                            <div id=\"id_kbs\" style=\"display:inline;\"></div><input type=\"hidden\" id=\"hid_kbs\" />\n                        </td>\n                    </tr>';\n}\n// lines for FIELDS\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    foreach ($_SESSION['item_fields'] as $elem) {\n        $itemCatName = $elem[0];\n        echo '\n                    <tr class=\"tr_fields hidden\" id=\"tr_catfield_'.$elem[0].'\">\n                        <td valign=\"top\" class=\"td_title\">&nbsp;<i class=\"fa fa-angle-right\"></i>&nbsp;'.$elem[1].' :</td>\n                        <td></td>\n                    </tr>';\n        foreach ($elem[2] as $field) {\n            echo '\n                    <tr class=\"tr_cf tr_fields hidden\" id=\"cf_tr_'.$field[0].'\">\n                        <td valign=\"top\" class=\"td_title\">&nbsp;&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;<i>'.$field[1].'</i> :</td>\n                        <td>';\n            if ($field[3] === \"masked\") {\n                echo '\n                            <div id=\"id_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" style=\"float:left; cursor:pointer; width:300px;\" class=\"fields_div unhide_masked_data pointer\"></div><input type=\"hidden\" id=\"hid_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" class=\"fields\" />';\n            } else {\n                echo '\n                            <div id=\"id_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" style=\"display:inline;\" class=\"fields_div\"></div><input type=\"hidden\" id=\"hid_field_'.htmlspecialchars($field[0]).'_'.$elem[0].'\" class=\"fields\" />';\n            }\n            echo '\n                        </td>\n                    </tr>';\n        }\n    }\n}\necho '\n                </table>\n            </div>\n        </div>';\n// # NOT ALLOWED\necho '\n        <div id=\"item_details_nok\" class=\"hidden\" style=\"width:400px; margin:20px auto 20px auto;\">\n            <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['not_allowed_to_see_pw'].'</b>\n                <span id=\"item_details_nok_restriction_list\"></span>\n            </div>\n        </div>';\n// DATA EXPIRED\necho '\n        <div id=\"item_details_expired_full\" style=\"display:none; width:400px; margin:20px auto 20px auto;\">\n            <div class=\"ui-state-error ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['pw_is_expired_-_update_it'].'</b>\n            </div>\n        </div>';\n// # NOT ALLOWED\necho '\n        <div id=\"item_details_no_personal_saltkey\" style=\"display:none; width:400px; margin:20px auto 20px auto; height:180px;\">\n            <div class=\"ui-state-highlight ui-corner-all\" style=\"padding:10px;\">\n                <i class=\"fa fa-warning fa-2x mi-red\"></i>&nbsp;<b>'.$LANG['home_personal_saltkey_info'].'</b>\n            </div>\n        </div>';\n\necho '\n    </div>';\n\necho '\n</div>';\n\n\n/********************************\n* NEW Item Form\n*/\necho '\n<div id=\"div_formulaire_saisi\" style=\"display:none;\">\n    <form method=\"post\" name=\"new_item\" action=\"\">\n        <div id=\"afficher_visibilite\" style=\"text-align:center;margin-bottom:6px;height:20px;\"></div>\n        <div id=\"display_title\" style=\"text-align:center;margin-bottom:6px;font-size:17px;font-weight:bold;height:25px;\"></div>\n        <div id=\"new_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n\n        <div id=\"item_tabs\">\n        <ul>\n            <li><a href=\"#tabs-01\">'.$LANG['definition'].'</a></li>\n            <li><a href=\"#tabs-02\">'.$LANG['index_password'].' &amp; '.$LANG['visibility'].'</a></li>\n            <li><a href=\"#tabs-03\">'.$LANG['files_&_images'].'</a></li>\n            ', isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1 ?\n            '<li id=\"form_tab_fields\"><a href=\"#tabs-04\">'.$LANG['more'].'</a></li>' : '', '\n        </ul>\n        <div id=\"tabs-01\">';\n// Line for LABEL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['label'].' : </label>\n            <input type=\"text\" name=\"label\" id=\"label\" onchange=\"checkTitleDuplicate(this.value, \\'', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 0 : 1, '\\', \\'', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 0 : 1, '\\', \\'display_title\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for DESCRIPTION\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['description'].' : </label>\n            <span id=\"desc_span\">\n                <textarea rows=\"5\" cols=\"60\" name=\"desc\" id=\"desc\" class=\"input_text\"></textarea>\n            </span>\n            <br />';\n// Line for FOLDERS\necho '\n            <label for=\"\" class=\"\">'.$LANG['group'].' : </label>\n            <select name=\"categorie\" id=\"categorie\" onchange=\"RecupComplexite(this.value,0)\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\"><option style=\"display: none;\"></option></select>';\n// Line for LOGIN\necho '\n            <label for=\"\" class=\"label_cpm\" style=\"margin-top:10px;\">'.$LANG['login'].' : </label>\n            <input type=\"text\" name=\"item_login\" id=\"item_login\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for EMAIL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['email'].' : </label>\n            <input type=\"text\" name=\"email\" id=\"email\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for URL\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['url'].' : </label>\n            <input type=\"text\" name=\"url\" id=\"url\" class=\"input_text text ui-widget-content ui-corner-all\" />\n        </div>';\n// Tabs Items N?2\necho '\n        <div id=\"tabs-02\">';\n// Line for folder complexity\necho'\n            <div style=\"margin-bottom:10px;\" id=\"expected_complexity\">\n                <label for=\"\" class=\"form_label_180\">'.$LANG['complex_asked'].'</label>\n                <span id=\"complex_attendue\" style=\"color:#D04806; margin-left:40px;\"></span>\n            </div>';\n// Line for PW\necho '\n            <label class=\"label_cpm\">'.$LANG['used_pw'].' :<span id=\"prout\"></span>\n                <span id=\"visible_pw\" style=\"display:none;margin-left:10px;font-weight:bold;\"></span>\n                <span id=\"pw_wait\" style=\"display:none;margin-left:10px;\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n            </label>\n            <input type=\"password\" id=\"pw1\" class=\"input_text text ui-widget-content ui-corner-all\" />\n            <input type=\"hidden\" id=\"mypassword_complex\" />\n            <label for=\"\" class=\"label_cpm\">'.$LANG['index_change_pw_confirmation'].' :</label>\n            <input type=\"password\" name=\"pw2\" id=\"pw2\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <div style=\"font-size:9px; text-align:center; width:100%;\">\n                <span id=\"custom_pw\">\n                    <input type=\"checkbox\" id=\"pw_numerics\" /><label for=\"pw_numerics\">123</label>\n                    <input type=\"checkbox\" id=\"pw_maj\" /><label for=\"pw_maj\">ABC</label>\n                    <input type=\"checkbox\" id=\"pw_symbols\" /><label for=\"pw_symbols\">@#&amp;</label>\n                    <input type=\"checkbox\" id=\"pw_secure\" checked=\"checked\" /><label for=\"pw_secure\">'.$LANG['secure'].'</label>\n                    &nbsp;<label for=\"pw_size\">'.$LANG['size'].' : </label>\n                    &nbsp;<input type=\"text\" size=\"2\" id=\"pw_size\" value=\"8\" style=\"font-size:10px;\" />\n                </span>\n\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['pw_generate'].'\" onclick=\"pwGenerate(\\'\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['copy'].'\" onclick=\"pwCopy(\\'\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-copy fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['mask_pw'].'\" onclick=\"showPwd()\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-eye fa-stack-1x fa-inverse\"></i>\n                </span>\n            </div>\n            <div style=\"width:100%;\">\n                <div id=\"pw_strength\" style=\"margin:5px 0 5px 120px;\"></div>\n            </div>';\n\n// Line for RESTRICTED TO\nif (isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1) {\n    echo '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['restricted_to'].' : </label>\n            <select name=\"restricted_to_list\" id=\"restricted_to_list\" multiple=\"multiple\" style=\"width:100%;\" class=\"ui-widget-content\"></select>\n            <input type=\"hidden\" name=\"restricted_to\" id=\"restricted_to\" />\n            <input type=\"hidden\" size=\"50\" name=\"restricted_to_roles\" id=\"restricted_to_roles\" />\n            <div style=\"line-height:10px;\">&nbsp;</div>';\n}\n// Line for TAGS\necho '\n            <label for=\"\" class=\"label_cpm\">'.$LANG['tags'].' : </label>\n            <input type=\"text\" name=\"item_tags\" id=\"item_tags\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for Item modification\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"anyone_can_modify\" id=\"anyone_can_modify\"',\n                    isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] == 1 ?\n                    ' checked=\"checked\"' : '', ' />\n                <label for=\"anyone_can_modify\">'.$LANG['anyone_can_modify'].'</label>\n            </div>';\n// Line for Item automatically deleted\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"enable_delete_after_consultation\" id=\"enable_delete_after_consultation\" />\n                <label for=\"enable_delete_after_consultation\">'.$LANG['enable_delete_after_consultation'].'</label>\n                <input type=\"text\" value=\"1\" size=\"1\" id=\"times_before_deletion\" />&nbsp;'.$LANG['times'].'&nbsp;\n                '.$LANG['automatic_del_after_date_text'].'&nbsp;<input type=\"text\" value=\"\" class=\"datepicker\" readonly=\"readonly\" size=\"10\" id=\"deletion_after_date\" onchange=\"$(\\'#times_before_deletion\\').val(\\'\\')\" />\n            </div>';\n// Line for EMAIL\necho '\n            <div>\n                <div style=\"line-height:10px;\">&nbsp;</div>\n                <label for=\"\" class=\"label_cpm\">'.$LANG['email_announce'].' : </label>\n                <select id=\"annonce_liste_destinataires\" multiple=\"multiple\" style=\"width:100%\">';\nforeach ($usersList as $user) {\n                    echo '<option value=\"'.$user['email'].'\">'.$user['login'].'</option>';\n}\n                echo '\n                </select>\n            </div>';\n\necho '\n\n        </div>';\n// Tabs EDIT N?3\necho '\n        <div id=\"tabs-03\">\n            <div id=\"item_upload\">\n                <div id=\"item_upload_list\"></div><br />\n                <div id=\"item_upload_wait\" class=\"ui-state-focus ui-corner-all hidden\" style=\"padding:2px;margin:5px 0 5px 0;\">'.$LANG['please_wait'].'...</div>\n                <a id=\"item_attach_pickfiles\" href=\"#\" class=\"button\">'.$LANG['select'].'</a>\n                <a id=\"item_attach_uploadfiles\" href=\"#\" class=\"button\">'.$LANG['start_upload'].'</a>\n                <input type=\"hidden\" id=\"files_number\" value=\"0\" />\n            </div>\n        </div>';\n// Tabs N\u00b04\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    echo '\n        <div id=\"tabs-04\">\n            <div id=\"item_more\">';\n    // load all categories and fields\n    foreach ($_SESSION['item_fields'] as $elem) {\n        $itemCatName = $elem[0];\n        echo '\n                <div id=\"newItemCatName_'.$itemCatName.'\" class=\"newItemCat\">\n                    <div style=\"font-weight:bold;font-size:12px;\">\n                        <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$elem[1].'\n                    </div>';\n        foreach ($elem[2] as $field) {\n                echo '\n                    <div style=\"margin:2px 0 2px 15px;\">\n                        <span class=\"fa fa-tag mi-grey-1\">&nbsp;</span>\n                        <label class=\"cpm_label\">'.$field[1].'</span>\n                        <input type=\"text\" id=\"field_'.$field[0].'_'.$field[2].'\" class=\"item_field input_text text ui-widget-content ui-corner-all\" size=\"40\">\n                    </div>';\n        }\n        echo '\n                </div>';\n    }\n    echo '\n            </div>\n        </div>';\n}\necho '\n    </div>';\necho '\n    </form>\n    <div style=\"display:none; padding:5px; margin-top:5px; text-align:center;\" id=\"div_formulaire_saisi_info\" class=\"ui-state-default ui-corner-all\"></div>\n</div>';\n\n/***************************\n* Edit Item Form\n*/\necho '\n<div id=\"div_formulaire_edition_item\" style=\"display:none;\">\n    <form method=\"post\" name=\"form_edit\" action=\"\">\n    <div id=\"edit_afficher_visibilite\" style=\"text-align:center;margin-bottom:6px;height:25px;\"></div>\n    <div id=\"edit_display_title\" style=\"text-align:center;margin-bottom:6px;font-size:17px;font-weight:bold;height:25px;\"></div>\n    <div id=\"edit_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>';\n// Prepare TABS\necho '\n    <div id=\"item_edit_tabs\">\n        <ul>\n            <li><a href=\"#tabs-1\">'.$LANG['definition'].'</a></li>\n            <li><a href=\"#tabs-2\">'.$LANG['index_password'].' &amp; '.$LANG['visibility'].'</a></li>\n            <li><a href=\"#tabs-3\">'.$LANG['files_&_images'].'</a></li>\n            ', isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1 ?\n            '<li id=\"form_edit_tab_fields\"><a href=\"#tabs-4\">'.$LANG['more'].'</a></li>' : '', '\n        </ul>\n        <div id=\"tabs-1\">\n            <label for=\"\" class=\"cpm_label\">'.$LANG['label'].' : </label>\n            <input type=\"text\" size=\"60\" id=\"edit_label\" onchange=\"checkTitleDuplicate(this.value, \\'', isset($SETTINGS['item_duplicate_in_same_folder']) && $SETTINGS['item_duplicate_in_same_folder'] == 1 ? 0 : 1, '\\', \\'', isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] == 1 ? 0 : 1, '\\', \\'edit_display_title\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['description'].'&nbsp;<span class=\"fa fa-eraser\" style=\"cursor:pointer;\" onclick=\"clear_html_tags()\"></span>&nbsp;</label>\n            <span id=\"edit_desc_span\">\n                <textarea rows=\"5\" cols=\"70\" id=\"edit_desc\" name=\"edit_desc\" class=\"input_text\"></textarea>\n            </span>';\n// Line for FOLDER\necho '\n            <div style=\"margin:10px 0px 10px 0px;\">\n            <label for=\"\" class=\"\">'.$LANG['group'].' : </label>\n            <select id=\"edit_categorie\" onchange=\"RecupComplexite(this.value,1)\" style=\"width:100%;\"><option style=\"display: none;\"></option></select>\n            </div>';\n// Line for LOGIN\necho '\n            <label for=\"\" class=\"cpm_label\">'.$LANG['login'].' : </label>\n            <input type=\"text\" id=\"edit_item_login\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['email'].' : </label>\n            <input type=\"text\" id=\"edit_email\" class=\"input_text text ui-widget-content ui-corner-all\" />\n\n            <label for=\"\" class=\"cpm_label\">'.$LANG['url'].' : </label>\n            <input type=\"text\" id=\"edit_url\" class=\"input_text text ui-widget-content ui-corner-all\" />\n        </div>';\n// TABS edit n?2\necho '\n        <div id=\"tabs-2\">';\n// Line for folder complexity\necho'\n            <div style=\"margin-bottom:10px;\" id=\"edit_expected_complexity\">\n                <label for=\"\" class=\"cpm_label\">'.$LANG['complex_asked'].'</label>\n                <span id=\"edit_complex_attendue\" style=\"color:#D04806;\"></span>\n            </div>';\n\necho '\n            <div style=\"line-height:20px;\">\n                <label for=\"\" class=\"label_cpm\">'.$LANG['used_pw'].' :\n                    <span id=\"edit_visible_pw\" style=\"display:none;margin-left:10px;font-weight:bold; padding:2px;\" class=\"ui-corner-all ui-state-default\"></span>\n                    <span id=\"edit_pw_wait\" style=\"margin-left:10px;\" class=\"hidden\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n                </label>\n                <input type=\"password\" id=\"edit_pw1\" class=\"input_text text ui-widget-content ui-corner-all\" style=\"width:390px;\" />\n                <span class=\"fa fa-history tip\" style=\"cursor:pointer;\" id=\"edit_past_pwds\" onclick=\"showPasswordsHistory()\"></span>\n                <div style=\"display:none; padding:3px; width:390px; font-weight:normal; font-size:11px; font-family:italic;\" id=\"edit_past_pwds_div\" class=\"ui-corner-all ui-state-default\"></div>\n                <input type=\"hidden\" id=\"edit_mypassword_complex\" />\n\n                <label for=\"\" class=\"cpm_label\">'.$LANG['confirm'].' : </label>\n                <input type=\"password\" id=\"edit_pw2\" class=\"input_text text ui-widget-content ui-corner-all\" style=\"width:390px;\" />\n            </div>\n            <div style=\"font-size:9px; text-align:center; width:100%;\">\n                <span id=\"edit_custom_pw\">\n                    <input type=\"checkbox\" id=\"edit_pw_numerics\" /><label for=\"edit_pw_numerics\">123</label>\n                    <input type=\"checkbox\" id=\"edit_pw_maj\" /><label for=\"edit_pw_maj\">ABC</label>\n                    <input type=\"checkbox\" id=\"edit_pw_symbols\" /><label for=\"edit_pw_symbols\">@#&amp;</label>\n                    <input type=\"checkbox\" id=\"edit_pw_secure\" checked=\"checked\" /><label for=\"edit_pw_secure\">'.$LANG['secure'].'</label>\n                    &nbsp;<label for=\"edit_pw_size\">'.$LANG['size'].' : </label>\n                    &nbsp;<input type=\"text\" size=\"2\" id=\"edit_pw_size\" value=\"8\" style=\"font-size:10px;\" />\n                </span>\n\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['pw_generate'].'\" onclick=\"pwGenerate(\\'edit\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-cogs fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['copy'].'\" onclick=\"pwCopy(\\'edit\\')\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-copy fa-stack-1x fa-inverse\"></i>\n                </span>&nbsp;\n                <span class=\"fa-stack fa-lg tip\" title=\"'.$LANG['mask_pw'].'\" onclick=\"ShowPasswords_EditForm()\" style=\"cursor:pointer;\">\n                    <i class=\"fa fa-square fa-stack-2x\"></i>\n                    <i class=\"fa fa-eye fa-stack-1x fa-inverse\"></i>\n                </span>\n            </div>\n            <div style=\"width:100%;\">\n                <div id=\"edit_pw_strength\" style=\"margin:5px 0 5px 120px;\"></div>\n            </div>';\n\nif (isset($SETTINGS['restricted_to']) && $SETTINGS['restricted_to'] == 1) {\n    echo '\n            <div id=\"div_editRestricted\">\n                <label for=\"\" class=\"label_cpm\">'.$LANG['restricted_to'].' : </label>\n                <select name=\"edit_restricted_to_list\" id=\"edit_restricted_to_list\" multiple=\"multiple\" style=\"width:100%\"></select>\n                <input type=\"hidden\" size=\"50\" name=\"edit_restricted_to\" id=\"edit_restricted_to\" />\n                <input type=\"hidden\" size=\"50\" name=\"edit_restricted_to_roles\" id=\"edit_restricted_to_roles\" />\n                <div style=\"line-height:10px;\">&nbsp;</div>\n            </div>';\n}\n\necho '\n            <label for=\"\" class=\"cpm_label\">'.$LANG['tags'].' : </label>\n            <input type=\"text\" size=\"50\" name=\"edit_tags\" id=\"edit_tags\" class=\"input_text text ui-widget-content ui-corner-all\" />';\n// Line for Item modification\necho '\n            <div style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"edit_anyone_can_modify\" id=\"edit_anyone_can_modify\"',\n                    isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] == 1 ?\n                    ' checked=\"checked\"' : '', ' />\n                <label for=\"edit_anyone_can_modify\">'.$LANG['anyone_can_modify'].'</label>\n            </div>';\n// Line for Item automatically deleted\necho '\n            <div id=\"edit_to_be_deleted\" style=\"width:100%;margin:0px 0px 6px 0px;', isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] == 1 ? '' : 'display:none;', '\">\n                <input type=\"checkbox\" name=\"edit_enable_delete_after_consultation\" id=\"edit_enable_delete_after_consultation\" />\n                <label for=\"edit_enable_delete_after_consultation\">'.$LANG['enable_delete_after_consultation'].'</label>\n                <input type=\"text\" value=\"\" size=\"1\" id=\"edit_times_before_deletion\" onchange=\"$(\\'#edit_deletion_after_date\\').val(\\'\\')\" />&nbsp;'.$LANG['times'].'&nbsp;\n                '.$LANG['automatic_del_after_date_text'].'&nbsp;<input type=\"text\" value=\"\" class=\"datepicker\" readonly=\"readonly\" size=\"10\" id=\"edit_deletion_after_date\" onchange=\"$(\\'#edit_times_before_deletion\\').val(\\'\\')\" />\n            </div>';\n\necho '\n            <div id=\"div_anounce_change_by_email\">\n                <div style=\"line-height:10px;\">&nbsp;</div>\n                <label for=\"\" class=\"label_cpm\">'.$LANG['email_announce'].' : </label>\n                <select id=\"edit_annonce_liste_destinataires\" multiple=\"multiple\" style=\"width:100%\">';\nforeach ($usersList as $user) {\n    echo '<option value=\"'.$user['email'].'\">'.$user['login'].'</option>';\n}\necho '\n                </select>\n            </div>';\n\necho '\n        </div>';\n// Tab EDIT N\u00b03\necho '\n        <div id=\"tabs-3\">\n            <div style=\"font-weight:bold;font-size:12px;\">\n                <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$LANG['uploaded_files'].'\n            </div>\n            <div id=\"item_edit_list_files\" style=\"margin-left:5px;\"></div>\n            <div style=\"margin-top:10px;font-weight:bold;font-size:12px;\">\n                <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$LANG['upload_files'].'\n            </div>\n            <div id=\"item_edit_upload\">\n                <div id=\"item_edit_upload_list\"></div><br />\n                <div id=\"item_edit_upload_wait\" class=\"ui-state-focus ui-corner-all hidden\" style=\"padding:2px;margin:5px 0 5px 0;\">'.$LANG['please_wait'].'...</div>\n                <a id=\"item_edit_attach_pickfiles\" href=\"#\" class=\"button\">'.$LANG['select'].'</a>\n                <a id=\"item_edit_attach_uploadfiles\" href=\"#sd\" class=\"button\">'.$LANG['start_upload'].'</a>\n                <input type=\"hidden\" id=\"edit_files_number\" value=\"0\" />\n            </div>\n        </div>';\n// Tabs EDIT N\u00b04 -> Categories\nif (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] == 1) {\n    echo '\n        <div id=\"tabs-4\">\n            <div id=\"edit_item_more\">';\n    // load all categories and fields\n    foreach ($_SESSION['item_fields'] as $elem) {\n        echo '\n                <div class=\"editItemCat\" id=\"editItemCatName_'.$elem[0].'\">\n                    <div style=\"font-weight:bold;font-size:12px;\">\n                        <span class=\"fa fa-folder-open mi-grey-1\">&nbsp;</span>'.$elem[1].'\n                    </div>';\n        foreach ($elem[2] as $field) {\n            echo '\n                    <div style=\"margin:2px 0 2px 15px;\">\n                        <span class=\"fa fa-tag mi-grey-1\">&nbsp;</span>\n                        <label class=\"cpm_label\">'.$field[1].'</label>\n                        <input type=\"text\" id=\"edit_field_'.$field[0].'_'.$elem[0].'\" class=\"edit_item_field input_text text ui-widget-content ui-corner-all\" size=\"40\">\n                    </div>';\n        }\n        echo '\n                </div>';\n    }\n    echo '\n            </div>\n        </div>\n    </div>';\n}\necho '\n    <div style=\"display:none; padding:5px;\" id=\"div_formulaire_edition_item_info\" class=\"ui-state-default ui-corner-all\"></div>\n    </div>\n    </form>\n</div>';\n\n/*\n* ADD NEW FOLDER form\n*/\necho '\n<div id=\"div_ajout_rep\" style=\"display:none;\">\n    <div id=\"new_rep_show_error\" style=\"text-align:center;margin:2px;\" class=\"ui-state-error ui-corner-all\"></div>\n    <table>\n        <tr>\n            <td>'.$LANG['label'].' : </td>\n            <td><input type=\"text\" id=\"new_rep_titre\" style=\"width:242px; padding:3px;\" class=\"ui-widget-content\" /></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['sub_group_of'].' : </td>\n            <td><select id=\"new_rep_groupe\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n                ', (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] == 1 || $_SESSION['user_manager'] === \"1\") ? '<option value=\"0\">'.$LANG['root'].'</option>' : '', '\n            </select></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['complex_asked'].' : </td>\n            <td><select id=\"new_rep_complexite\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\">'.$complex[1].'</option>';\n}\necho '\n            </select>\n            </td>\n        </tr>';\necho '\n    </table>\n    <div id=\"add_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire EDITER REPERTORIE\necho '\n<div id=\"div_editer_rep\" style=\"display:none;\">\n    <div id=\"edit_rep_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <table>\n        <tr>\n            <td>'.$LANG['new_label'].' : </td>\n            <td><input type=\"text\" id=\"edit_folder_title\" style=\"width:242px; padding:3px;\" class=\"ui-widget-content\" /></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['group_select'].' : </td>\n            <td><select id=\"edit_folder_folder\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\"></select></td>\n        </tr>\n        <tr>\n            <td>'.$LANG['complex_asked'].' : </td>\n            <td><select id=\"edit_folder_complexity\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n                <option value=\"\">---</option>';\nforeach ($SETTINGS_EXT['pwComplexity'] as $complex) {\n    echo '<option value=\"'.$complex[0].'\">'.$complex[1].'</option>';\n}\necho '\n            </select>\n            </td>\n        </tr>\n    </table>\n    <div id=\"edit_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire MOVE FOLDER\necho '\n<div id=\"div_move_folder\" style=\"display:none;\">\n    <div id=\"move_rep_show_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"text-align:center;margin-top:20px;\">\n        <p>'.$LANG['folder_will_be_moved_below'].'</p>\n        <div>\n        <select id=\"move_folder_id\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n        </select>\n        </div>\n    </div>\n    <div id=\"move_folder_loader\" style=\"display:none;text-align:center;margin-top:20px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// Formulaire COPY FOLDER\necho '\n<div id=\"div_copy_folder\" style=\"display:none;\">\n    <div id=\"div_copy_folder_info\" class=\"ui-widget-content ui-state-highlight ui-corner-all\" style=\"padding:5px;\"><span class=\"fa fa-info-circle fa-2x\"></span>&nbsp;'.$LANG['copy_folder_info'].'</div>\n\n    <div style=\"margin:10px 0 0 0;\">\n        <label style=\"float:left; width:150px;\">'.$LANG['copy_folder_source'].'</label>\n        <select id=\"copy_folder_source_id\" style=\"width:300px; padding:3px;\" class=\"ui-widget-content\"></select>\n    </div>\n    <div style=\"margin:10px 0 0 0;\">\n        <label style=\"float:left; width:150px;\">'.$LANG['copy_folder_destination'].'</label>\n        <select id=\"copy_folder_destination_id\" style=\"width:300px; padding:3px;\" class=\"ui-widget-content\"></select>\n    </div>\n\n    <div id=\"div_copy_folder_msg\" style=\"text-align:center;padding:5px;display:none; margin-top:10px; font-size:14px;\" class=\"ui-corner-all\"></div>\n</div>';\n// Formulaire SUPPRIMER REPERTORIE\necho '\n<div id=\"div_supprimer_rep\" style=\"display:none;\">\n    <table>\n        <tr>\n            <td>'.$LANG['group_select'].' : </td>\n            <td><select id=\"delete_rep_groupe\" style=\"width:250px; padding:3px;\" class=\"ui-widget-content\">\n            </select></td>\n        </tr>\n        <tr>\n        <td colspan=\"2\">\n            <div id=\"delete_rep_groupe_validate_div\" class=\"ui-state-default ui-corner-all\" style=\"padding:5px; margin-top:10px;\">\n                <input type=\"checkbox\" id=\"delete_rep_groupe_validate\"><label for=\"delete_rep_groupe_validate\">'.$LANG['confirm_delete_group'].'</label>\n            </div>\n        </td>\n        </tr>\n    </table>\n    <div id=\"del_rep_show_error\" style=\"text-align:center;padding:5px;display:none;margin-top:10px;\" class=\"ui-state-error ui-corner-all\"></div>\n\n    <div id=\"del_folder_loader\" style=\"display:none;text-align:center;margin-top:15px;\">\n        <i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'...\n    </div>\n</div>';\n// SUPPRIMER UN ELEMENT\necho '\n<div id=\"div_del_item\" style=\"display:none;\">\n        <h2 id=\"div_del_item_selection\"></h2>\n        <div style=\"text-align:center;padding:8px;\" class=\"ui-state-error ui-corner-all\">\n            <span class=\"fa fa-warning fa-2x\"></span>&nbsp;'.$LANG['confirm_deletion'].'\n        </div>\n</div>';\n// DIALOG INFORM USER THAT LINK IS COPIED\necho '\n<div id=\"div_item_copied\" style=\"display:none;\">\n    <div style=\"text-align:center;padding:8px;\" class=\"ui-state-focus ui-corner-all\">\n        <span class=\"fa fa-info fa-2x\"></span>&nbsp;'.$LANG['link_is_copied'].'\n    </div>\n    <div id=\"div_display_link\"></div>\n</div>';\n// DIALOG TO WHAT FOLDER COPYING ITEM\necho '\n<div id=\"div_copy_item_to_folder\" style=\"display:none;\">\n    <h2 id=\"div_copy_item_to_folder_item\"></h2>\n    <div style=\"text-align:center;\">\n        <div>'.$LANG['item_copy_to_folder'].'</div>\n        <div style=\"margin:10px;\">\n            <select id=\"copy_in_folder\" style=\"width:300px;\">\n                ', (isset($_SESSION['can_create_root_folder']) && $_SESSION['can_create_root_folder'] == 1) ? '<option value=\"0\">'.$LANG['root'].'</option>' : '', ''.\n            '</select>\n        </div>\n    </div>\n    <div id=\"copy_item_to_folder_show_error\" style=\"text-align:center;margin:2px;display:none; padding:3px;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"height:20px;text-align:center;margin:2px;\" id=\"copy_item_info\" class=\"\"></div>\n</div>';\n// DIALOG FOR HISTORY OF ITEM\necho '\n<div id=\"div_item_history\" style=\"display:none;\">\n    <div id=\"item_history_log\"></div>\n    ', (isset($SETTINGS['insert_manual_entry_item_history']) && $SETTINGS['insert_manual_entry_item_history'] == 1) ?\n'<div id=\"new_history_entry_form\" style=\"display:none; margin-top:10px;\"><hr>\n        <div id=\"div_add_history_entry\">\n            <div id=\"item_history_log_error\"></div>\n            '.$LANG['label'].'&nbsp;<input type=\"text\" id=\"add_history_entry_label\" size=\"40\" />&nbsp;\n            <span class=\"button\" style=\"margin-top:6px;\" onclick=\"manage_history_entry(\\'add_entry\\',\\'\\')\">'.$LANG['add_history_entry'].'</div>\n        </div>\n    </div>'\n:'', '\n</div>';\n// DIALOG FOR ITEM SHARE\necho '\n<div id=\"div_item_share\" style=\"display:none;\">\n    <div id=\"div_item_share_error\" style=\"text-align:center;margin:2px;display:none;\" class=\"ui-state-error ui-corner-all\"></div>\n    <div style=\"\">'.$LANG['item_share_text'].'</div>\n    <input type=\"text\" id=\"item_share_email\" class=\"ui-corner-all\" style=\"width:100%;\" />\n    <div id=\"div_item_share_status\" style=\"text-align:center;margin-top:15px;display:none; padding:5px;\" class=\"ui-corner-all\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n// DIALOG FOR ITEM IS UPDATED\necho '\n<div id=\"div_item_updated\" style=\"display:none;\">\n    <div style=\"\">'.$LANG['item_updated_text'].'</div>\n</div><br />';\n\n// DIALOG FOR SUGGESTING PWD CHANGE\necho '\n<div id=\"div_suggest_change\" style=\"display:none;\">\n    <div style=\"padding:5px; text-align:center;\" class=\"ui-corner-all ui-state-default\"><i class=\"fa fa-info-circle fa-lg\"></i>&nbsp;'.$LANG['suggest_password_change_intro'].'</div>\n    <div style=\" margin-top:10px;\" id=\"div_suggest_change_html\"></div>\n    <div id=\"div_suggest_change_wait\" style=\"margin-top:10; padding:5px; display:none;\" class=\"ui-state-focus ui-corner-all\"></div>\n</div><br />';\n\n// Off line mode\nif (isset($SETTINGS['settings_offline_mode']) && $SETTINGS['settings_offline_mode'] == 1) {\n    echo '\n    <div id=\"dialog_offline_mode\" style=\"display:none;\">\n        <div id=\"div_offline_mode\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// Export items to file\nif (isset($SETTINGS['allow_print']) && $SETTINGS['allow_print'] == 1 && $_SESSION['temporary']['user_can_printout'] === true) {\n    echo '\n    <div id=\"dialog_export_file\" style=\"display:none;\">\n        <div id=\"div_export_file\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// Import items\nif (isset($SETTINGS['allow_import']) && $SETTINGS['allow_import'] == 1 && $session_user_admin !== '1') {\n    echo '\n    <div id=\"dialog_import_file\" style=\"display:none;\">\n        <div id=\"div_import_file\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n}\n\n// USERS passwords upgrade\nif (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1\n    && $session_user_admin !== '1' && isset($_SESSION['user_upgrade_needed']) && $_SESSION['user_upgrade_needed'] == 1\n) {\n    echo '\n    <div id=\"dialog_upgrade_personal_passwords\" style=\"display:none;\">\n        <div style=\"text-align:center;\">\n            <div>'.$LANG['pf_change_encryption'].'</div>\n            <div id=\"dialog_upgrade_personal_passwords_status\" style=\"margin:15px 0 15px 0; font-weight:bold;\">', isset($_SESSION['user_settings']['session_psk']) ? $LANG['pf_sk_set'] : $LANG['pf_sk_not_set'], '</div>\n        </div>\n    </div>';\n}\n\n// SSH dialogbox\necho '\n<div id=\"dialog_ssh\" style=\"display:none;padding:4px;\">\n    <div id=\"div_ssh\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n\nrequire_once 'items.load.php';\n", "<?php\n/**\n *\n * @file          index.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('./sources/SecureHandler.php');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"home\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\n// reload user avatar\n$userData = DB::queryFirstRow(\n    \"SELECT avatar, avatar_thumb\n    FROM \".prefix_table(\"users\").\"\n    WHERE id=%i\",\n    $_SESSION['user_id']\n);\n$_SESSION['user_avatar'] = $userData['avatar'];\n$_SESSION['user_avatar_thumb'] = $userData['avatar_thumb'];\n\n// prepare avatar\nif (isset($userData['avatar']) && !empty($userData['avatar'])) {\n    if (file_exists('includes/avatars/'.$userData['avatar'])) {\n        $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$userData['avatar'];\n    } else {\n        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n    }\n} else {\n    $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n}\n\n// user type\nif (isset($LANG) === true) {\n    if ($_SESSION['user_admin'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['god'];\n    } elseif ($_SESSION['user_manager'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['gestionnaire'];\n    } elseif ($_SESSION['user_read_only'] === '1') {\n        $_SESSION['user_privilege'] = $LANG['read_only_account'];\n    } else {\n        $_SESSION['user_privilege'] = $LANG['user'];\n    }\n}\n\n// prepare list of timezones\nforeach (timezone_identifiers_list() as $zone) {\n    $arrayTimezones[$zone] = $zone;\n}\n\n// prepare lsit of flags\n$rows = DB::query(\"SELECT label FROM \".prefix_table(\"languages\").\" ORDER BY label ASC\");\nforeach ($rows as $record) {\n    $arraFlags[$record['label']] = $record['label'];\n}\n\necho '\n<input type=\"hidden\" id=\"profile_user_token\" value=\"\" />\n<table style=\"margin-left:7px;\">\n    <tr>\n        <td rowspan=\"4\" style=\"width:94px\">\n            <div id=\"profile_photo\" class=\"ui-widget ui-state-highlight\" style=\"padding:2px; text-align:center;\"><img src=\"'.$avatar.'\" /></div>\n        </td>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['name'].':</td>\n        <td><b>', isset($_SESSION['name']) && !empty($_SESSION['name']) ? $_SESSION['name'].' '.$_SESSION['lastname'] : $_SESSION['login'], '</b></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['user_login'].':</td>\n        <td><span style=\"\">'.$_SESSION['login'].'</span></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['email'].':</td>\n        <td title=\"'.$LANG['click_to_change'].'\"><span style=\"cursor:pointer;\" class=\"editable_textarea\" id=\"email_'.$_SESSION['user_id'].'\">'.$_SESSION['user_email'].'</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i></td>\n    </tr>\n    <tr>\n        <td style=\"width:70px;\">&nbsp;'.$LANG['role'].':</td>\n        <td>'.$_SESSION['user_privilege'].'</td>\n    </tr>\n</table>\n\n<div style=\"float:left; margin-left:10px;\">\n   <ul class=\"menu\" style=\"\">\n      <li class=\"menu_150\" style=\"padding:4px; text-align:left;\"><i class=\"fa fa-bars fa-fw\"></i>&nbsp;'.$LANG['admin_actions_title'].'\n         <ul class=\"menu_250\" style=\"text-align:left;\">\n            <li id=\"but_pickfiles_photo\"><i class=\"fa fa-camera fa-fw\"></i> &nbsp;'.$LANG['upload_new_avatar'].'</li>';\nif (!isset($SETTINGS['duo']) || $SETTINGS['duo'] == 0) {\n    echo '\n            <li id=\"but_change_password\"><i class=\"fa fa-key fa-fw\"></i> &nbsp;'.$LANG['index_change_pw'].'</li>';\n}\necho '\n            <li id=\"but_change_psk\"><i class=\"fa fa-lock fa-fw\"></i> &nbsp;'.$LANG['menu_title_new_personal_saltkey'].'</li>\n            <li id=\"but_reset_psk\"><i class=\"fa fa-eraser fa-fw\"></i> &nbsp;'.$LANG['personal_saltkey_lost'].'</li>\n         </ul>\n      </li>\n   </ul>\n</div>\n\n<div style=\"float:left;width:95%;margin:10px 0 5px 10px;\">\n    <hr>\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-child fa-fw fa-lg\"></i>&nbsp;\n        '.$LANG['index_last_seen'].' ', isset($SETTINGS['date_format']) ? date($SETTINGS['date_format'], $_SESSION['derniere_connexion']) : date(\"d/m/Y\", $_SESSION['derniere_connexion']), ' '.$LANG['at'].' ', isset($SETTINGS['time_format']) ? date($SETTINGS['time_format'], $_SESSION['derniere_connexion']) : date(\"H:i:s\", $_SESSION['derniere_connexion']), '\n    </div>';\nif (isset($_SESSION['last_pw_change']) && !empty($_SESSION['last_pw_change'])) {\n    echo '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-calendar fa-fw fa-lg\"></i>&nbsp;'. $LANG['index_last_pw_change'].' ', isset($SETTINGS['date_format']) ? date($SETTINGS['date_format'], $_SESSION['last_pw_change']) : (isset($_SESSION['last_pw_change']) ? date(\"d/m/Y\", $_SESSION['last_pw_change']) : \"-\").'. ', $_SESSION['numDaysBeforePwExpiration'] == \"infinite\" ? '' : $LANG['index_pw_expiration'].' '.$_SESSION['numDaysBeforePwExpiration'].' '.$LANG['days'].'\n    </div>';\n}\necho '\n    <div style=\"margin-bottom:6px;margin-top:6px;\">\n        <i class=\"fa fa-cloud-upload fa-fw fa-lg\"></i>&nbsp;\n        <span id=\"plupload_runtime2\" class=\"ui-state-error ui-corner-all\" style=\"width:350px;\">'.$LANG['error_upload_runtime_not_found'].'</span>\n        <input type=\"hidden\" id=\"upload_enabled2\" value=\"\" />\n    </div>\n    <hr>\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-code-fork fa-fw fa-lg\"></i>&nbsp;'. $LANG['tree_load_strategy'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_select\" id=\"treeloadstrategy_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">'.$_SESSION['user_settings']['treeloadstrategy'].'</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n\nif ((isset($_SESSION['user_settings']['usertimezone']) === true && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") || isset($SETTINGS['timezone']) === true) {\n    echo '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-clock-o fa-fw fa-lg\"></i>&nbsp;'. $LANG['timezone_selection'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_timezone\" id=\"usertimezone_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', (isset($_SESSION['user_settings']['usertimezone']) && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") ? $_SESSION['user_settings']['usertimezone'] : $SETTINGS['timezone'], '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n}\n\necho '\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-language fa-fw fa-lg\"></i>&nbsp;'. $LANG['user_language'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_language\" id=\"userlanguage_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', isset($_SESSION['user_language']) ? $_SESSION['user_language'] : $SETTINGS['default_language'], '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n\n\nif (isset($SETTINGS['agses_authentication_enabled']) && $SETTINGS['agses_authentication_enabled'] == 1) {\n    echo '\n    <hr>\n\n    <div style=\"margin-bottom:6px;\">\n        <i class=\"fa fa-id-card-o fa-lg\"></i>&nbsp;'. $LANG['user_profile_agses_card_id'].':&nbsp;<span style=\"cursor:pointer; font-weight:bold;\" class=\"editable_textarea\" id=\"agses-usercardid_'.$_SESSION['user_id'].'\" title=\"'.$LANG['click_to_change'].'\">', isset($_SESSION['user_settings']['agses-usercardid']) ? $_SESSION['user_settings']['agses-usercardid'] : '', '</span>&nbsp;<i class=\"fa fa-pencil fa-fw jeditable-activate\" style=\"cursor:pointer;\"></i>\n    </div>';\n}\n\necho '\n</div>\n\n<hr>\n\n<div style=\"display:none;margin:3px 0 10px 0;text-align:center;padding:4px;\" id=\"field_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n\n<div style=\"float:left;width:100%;margin-top:3px;\">\n    <div style=\"text-align:center;margin:5px;padding:3px;display:none;\" id=\"profile_info_box\" class=\"ui-widget ui-state-highlight ui-corner-all\"></div>\n    <div style=\"height:20px;text-align:center;margin:2px;\" id=\"change_pwd_error\" class=\"\"></div>\n    <div id=\"upload_container_photo\" style=\"display:none;\"></div>\n    <div id=\"filelist_photo\" style=\"display:none;\"></div>';\n\n// if DUOSecurity enabled then changing PWD is not allowed\nif (!isset($SETTINGS['duo']) || $SETTINGS['duo'] == 0) {\n    echo '\n    <div id=\"div_change_password\" style=\"display:none; padding:5px;\" class=\"ui-widget ui-state-default\">\n        <div style=\"text-align:center;margin:5px;padding:3px;\" id=\"change_pwd_complexPw\" class=\"ui-widget ui-state-active ui-corner-all\"></div>\n        <label for=\"new_pw\" class=\"form_label\">'.$LANG['index_new_pw'].' :</label>\n        <input type=\"password\" size=\"15\" name=\"new_pw\" id=\"new_pw\" />\n        <br />\n        <label for=\"new_pw2\" class=\"form_label\">'.$LANG['index_change_pw_confirmation'].' :</label>\n        <input type=\"password\" size=\"15\" name=\"new_pw2\" id=\"new_pw2\" />\n        <div id=\"pw_strength\" style=\"margin:10px 0 10px 120px;text-align:center;\"></div>\n        <input type=\"hidden\" id=\"pw_strength_value\" />\n        <span class=\"button\" id=\"button_change_pw\">'.$LANG['index_change_pw_button'].'</span>&nbsp;\n        <span id=\"password_change_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;'.$LANG['please_wait'].'</span>\n    </div>';\n}\n\n//change the saltkey dialogbox\necho '\n    <div id=\"div_change_psk\" style=\"display:none;padding:5px;\" class=\"ui-widget ui-state-default\">\n      <div style=\"margin-bottom:4px; padding:6px;\" class=\"ui-state-highlight\">\n         <i class=\"fa fa-exclamation-triangle fa-fw mi-red\"></i>&nbsp;'.$LANG['new_saltkey_warning'].'\n      </div>\n        <label for=\"new_personal_saltkey\" class=\"form_label\">'.$LANG['new_saltkey'].' :</label>\n      <input type=\"text\" size=\"30\" name=\"new_personal_saltkey\" id=\"new_personal_saltkey\" class=\"text_without_symbols tip\" title=\"'.$LANG['text_without_symbols'].'\" />\n      <br />\n      <label for=\"old_personal_saltkey\" class=\"form_label\">'.$LANG['old_saltkey'].' :</label>\n      <input type=\"text\" size=\"30\" name=\"old_personal_saltkey\" id=\"old_personal_saltkey\" value=\"\" class=\"text_without_symbols\" />\n\n      <div style=\"margin-top:4px;\">\n         <span class=\"button\" id=\"button_change_psk\">'.$LANG['index_change_pw_button'].'</span>&nbsp;\n         <span id=\"psk_change_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<span id=\"psk_change_wait_info\">'.$LANG['please_wait'].'</span></span>\n      </div>\n   </div>';\n\n\n//saltkey LOST dialogbox\necho '\n    <div id=\"div_reset_psk\" style=\"display:none;padding:5px;\" class=\"ui-widget ui-state-default\">\n        <div style=\"margin-bottom:4px; padding:6px;\" class=\"ui-state-highlight\">\n            <i class=\"fa fa-exclamation-triangle fa-fw mi-red\"></i>&nbsp;'.$LANG['new_saltkey_warning_lost'].'\n        </div>\n\n        <div style=\"margin-top:4px;\">\n            <input type=\"checkbox\" id=\"reset_psk_confirm\" />&nbsp;<label for=\"reset_psk_confirm\">'.$LANG['please_confirm_operation'].'</label>\n        </div>\n\n        <div style=\"margin-top:4px;\">\n            <span class=\"button\" id=\"button_reset_psk\">'.$LANG['continue'].'</span>&nbsp;\n            <span id=\"psk_reset_wait\" style=\"display:none;\"><i class=\"fa fa-cog fa-spin\"></i>&nbsp;<span id=\"psk_reset_wait_info\">'.$LANG['please_wait'].'</span></span>\n        </div>\n   </div>';\necho '\n</div>';\n\n// Pw complexity levels\nif (isset($_SESSION['user_language']) && $_SESSION['user_language'] !== \"0\") {\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n?>\n<script type=\"text/javascript\" src=\"includes/js/functions.js\"></script>\n<script type=\"text/javascript\">\n$(function() {\n    $(\".tip\").tooltipster({multiple: true});\n    // password\n    $(\"#but_change_password\").click(function() {\n        $(\"#change_pwd_complexPw\").html(\"<?php echo $LANG['complex_asked']; ?> : <?php echo $SETTINGS_EXT['pwComplexity'][$_SESSION['user_pw_complexity']][1]; ?>\");\n        $(\"#change_pwd_error\").hide();\n      $(\"#div_change_psk, #div_reset_psk\").hide();\n\n      if ($(\"#div_change_password\").not(\":visible\")) {\n         $(\"#div_change_password\").show();\n         $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 580);\n      }\n    });\n\n    //Password meter\n    if ($(\"#new_pw\").length) {\n        $(\"#new_pw\").simplePassMeter({\n            \"requirements\": {},\n            \"container\": \"#pw_strength\",\n            \"defaultText\" : \"<?php echo $LANG['index_pw_level_txt']; ?>\",\n            \"ratings\": [\n                {\"minScore\": 0,\n                    \"className\": \"meterFail\",\n                    \"text\": \"<?php echo $LANG['complex_level0']; ?>\"\n                },\n                {\"minScore\": 25,\n                    \"className\": \"meterWarn\",\n                    \"text\": \"<?php echo $LANG['complex_level1']; ?>\"\n                },\n                {\"minScore\": 50,\n                    \"className\": \"meterWarn\",\n                    \"text\": \"<?php echo $LANG['complex_level2']; ?>\"\n                },\n                {\"minScore\": 60,\n                    \"className\": \"meterGood\",\n                    \"text\": \"<?php echo $LANG['complex_level3']; ?>\"\n                },\n                {\"minScore\": 70,\n                    \"className\": \"meterGood\",\n                    \"text\": \"<?php echo $LANG['complex_level4']; ?>\"\n                },\n                {\"minScore\": 80,\n                    \"className\": \"meterExcel\",\n                    \"text\": \"<?php echo $LANG['complex_level5']; ?>\"\n                },\n                {\"minScore\": 90,\n                    \"className\": \"meterExcel\",\n                    \"text\": \"<?php echo $LANG['complex_level6']; ?>\"\n                }\n            ]\n        });\n    }\n    $(\"#new_pw\").bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#pw_strength_value\").val(score);\n        }\n    });\n\n    // launche password change\n    $(\"#button_change_pw\").click(function() {\n        $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").hide();\n        if ($(\"#new_pw\").val() != \"\" && $(\"#new_pw\").val() == $(\"#new_pw2\").val()) {\n            if (parseInt($(\"#pw_strength_value\").val()) >= parseInt($(\"#user_pw_complexity\").val())) {\n                $(\"#password_change_wait\").show();\n                var data = '{\"new_pw\":\"'+sanitizeString($(\"#new_pw\").val())+'\"}';\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type                : \"change_pw\",\n                        change_pw_origine   : \"user_change\",\n                        complexity          : $(\"#pw_strength_value\").val(),\n                        data                : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\")\n                    },\n                    function(data) {\n                        if (data[0].error == \"already_used\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['pw_used']; ?></span>\");\n                        } else if (data[0].error == \"complexity_level_not_reached\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_complex_not_enought']; ?></span>\");\n                        } else if (data[0].error == \"pwd_hash_not_correct\") {\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<span><?php echo $LANG['error_not_allowed_to']; ?></span>\");\n                        } else {\n                            $(\"#div_change_password\").hide();\n                            $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 450);\n                            $(\"#new_pw, #new_pw2\").val(\"\");\n                        }\n                        $(\"#password_change_wait\").hide();\n                        $(\"#profile_info_box\").html(\"<?php echo $LANG['alert_message_done']; ?>\").show();\n\n                        $(this).delay(2000).queue(function() {\n                            $(\"#profile_info_box\").effect( \"fade\", \"slow\" );\n                            $(this).dequeue();\n                        });\n                    },\n                    \"json\"\n                );\n            } else {\n                $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<?php echo $LANG['error_complex_not_enought']; ?>\");\n                $(this).delay(1000).queue(function() {\n                    $(\"#change_pwd_error\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            }\n        } else {\n            $(\"#change_pwd_error\").addClass(\"ui-state-error ui-corner-all\").show().html(\"<?php echo $LANG['index_pw_error_identical']; ?>\");\n            $(this).delay(1000).queue(function() {\n                $(\"#change_pwd_error\").effect( \"fade\", \"slow\" );\n                $(this).dequeue();\n            });\n        }\n    });\n\n    // AVATAR IMPORT\n    var uploader_photo = new plupload.Uploader({\n        runtimes : \"gears,html5,flash,silverlight,browserplus\",\n        browse_button : \"but_pickfiles_photo\",\n        container : \"upload_container_photo\",\n        max_file_size : \"2mb\",\n        chunk_size : \"1mb\",\n        unique_names : true,\n        dragdrop : true,\n        multiple_queues : false,\n        multi_selection : false,\n        max_file_count : 1,\n        filters : [\n            {title : \"PNG files\", extensions : \"png\"}\n        ],\n        resize : {\n            width : \"90\",\n            height : \"90\",\n            quality : \"90\"\n        },\n        url : \"sources/upload/upload.files.php\",\n        flash_swf_url : \"includes/libraries/Plupload/plupload.flash.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/plupload.silverlight.xap\",\n        init: {\n            FilesAdded: function(up, files) {\n                // generate and save token\n                $.post(\n                    \"sources/main.queries.php\",\n                    {\n                        type : \"save_token\",\n                        size : 25,\n                        capital: true,\n                        numeric: true,\n                        ambiguous: true,\n                        reason: \"avatar_profile_upload\",\n                        duration: 10\n                    },\n                    function(data) {\n                        $(\"#profile_user_token\").val(data[0].token);\n                        up.start();\n                    },\n                    \"json\"\n                );\n            },\n            BeforeUpload: function (up, file) {\n                var tmp = Math.random().toString(36).substring(7);\n\n                up.settings.multipart_params = {\n                    \"PHPSESSID\":\"<?php echo $_SESSION['user_id']; ?>\",\n                    \"type_upload\":\"upload_profile_photo\",\n                    \"user_token\": $(\"#profile_user_token\").val()\n                };\n            }\n        }\n    });\n\n    // Show runtime status\n    uploader_photo.bind(\"Init\", function(up, params) {\n        $(\"#plupload_runtime2\").html(\"<?php echo $LANG['runtime_upload']; ?> \" + params.runtime).removeClass('ui-state-error');\n        $(\"#upload_enabled2\").val(\"1\");\n    });\n\n    // get error\n    uploader_photo.bind(\"Error\", function(up, err) {\n        $(\"#filelist_photo\").html(\"<div class='ui-state-error ui-corner-all'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n     // get response\n    uploader_photo.bind(\"FileUploaded\", function(up, file, object) {\n        // Decode returned data\n        var myData = prepareExchangedData(object.response, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n        // update form\n        $(\"#profile_photo\").html('<img src=\"includes/avatars/'+myData.filename+'\" />');\n        $(\"#user_avatar_thumb\").attr('src', 'includes/avatars/'+myData.filename_thumb);\n        $(\"#filelist_photo\").html('').hide();\n    });\n\n    uploader_photo.init();\n\n   $(\"#but_pickfiles_photo\").click(function() {\n      $(\"#div_change_psk, #div_reset_psk, #div_change_password\").hide();\n      $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 450);\n   });\n\n    //inline editing\n    $(\".editable_textarea\").editable(\"sources/users.queries.php\", {\n        onsubmit: function(settings, value) {\n            console.log(value);\n        },\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        type   : \"text\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name   : \"newValue\",\n        width  : 220\n    });\n    $(\".editable_select\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data   : \" {'full':'<?php echo $LANG['full']; ?>','sequential':'<?php echo $LANG['sequential']; ?>', 'selected':'<?php echo $_SESSION['user_settings']['treeloadstrategy']; ?>'}\",\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_language\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data   : '<?php print json_encode($arraFlags); ?>',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_timezone\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data : '<?php print json_encode($arrayTimezones); ?>',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n    $(\".editable_yesno\").editable(\"sources/users.queries.php\", {\n        indicator : \"<img src=\\'includes/images/loading.gif\\' />\",\n        data : '{\"O\":\"<?php echo $LANG['no']; ?>\",\"1\":\"<?php echo $LANG['yes']; ?>\"}',\n        type   : 'select',\n        select : true,\n        onblur : \"cancel\",\n        submit : \"<i class=\\'fa fa-check mi-green\\'></i>&nbsp;\",\n        cancel : \"<i class=\\'fa fa-remove mi-red\\'></i>&nbsp;\",\n        name : \"newValue\"\n    });\n\n    $('.jeditable-activate').click(function() {\n        $(this).prev().click();\n    });\n\n\n    // PSK\n    $(\"#but_change_psk\").click(function() {\n      // hide other divs\n      $(\"#div_change_password, #div_reset_psk\").hide();\n\n      // prepare fields\n      $(\"#new_personal_saltkey\").val(\"\");\n      $(\"#old_personal_saltkey\").val(\"<?php echo addslashes(str_replace(\"&quot;\", '\"', @$_SESSION['user_settings']['clear_psk'])); ?>\");\n\n      $(\"#div_change_psk\").show();\n      $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 600);\n    });\n\n    // manage CHANGE OF PERSONAL SALTKEY\n    $(\"#button_change_psk\").click(function() {\n        $(\"#psk_change_wait\").show();\n\n        if ($(\"#new_personal_saltkey\").val() === \"\" || $(\"#old_personal_saltkey\").val() === \"\") {\n            $(\"#psk_change_wait\").hide();\n            $(\"#div_change_psk\").before('<div id=\"tmp_msg\" class=\"ui-widget ui-state-error ui-corner-all\" style=\"margin-bottom:3px; padding:3px;\"><?php echo addslashes($LANG['home_personal_saltkey_label']); ?></div>');\n\n            $(this).delay(1000).queue(function() {\n                $(\"#tmp_msg\").effect( \"fade\", \"slow\" );\n                $(\"#tmp_msg\").remove();\n                $(this).dequeue();\n            });\n            return false;\n        }\n\n        var data_to_share = \"{\\\"sk\\\":\\\"\" + sanitizeString($(\"#new_personal_saltkey\").val()) + \"\\\", \\\"old_sk\\\":\\\"\" + sanitizeString($(\"#old_personal_saltkey\").val()) + \"\\\"}\";\n\n        $(\"#psk_change_wait_info\").html(\"... 0%\");\n\n        //Send query\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type            : \"change_personal_saltkey\",\n                data_to_share   : prepareExchangedData(data_to_share, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key             : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (data.error == \"no\") {\n                    changePersonalSaltKey(data_to_share, data.list, data.nb_total);\n                } else {\n                    $(\"#psk_change_wait\").hide();\n                    $(\"#div_change_psk\").before('<div id=\"tmp_msg\" class=\"ui-widget ui-state-error ui-corner-all\" style=\"margin-bottom:3px; padding:3px;\">' + data.error + '</div>');\n\n                    $(this).delay(3000).queue(function() {\n                        $(\"#tmp_msg\").effect( \"fade\", \"slow\" );\n                        $(\"#tmp_msg\").remove();\n                        $(this).dequeue();\n                    });\n                    return false;\n                }\n            }\n        );\n    });\n\n\n    // RESET PSK\n    $(\"#but_reset_psk\").click(function() {\n        // hide other divs\n        $(\"#div_change_password, #div_change_psk\").hide();\n\n        // prepare fields\n        $(\"#new_reset_psk\").val(\"\");\n\n        $(\"#div_reset_psk\").show();\n        $(\"#dialog_user_profil\").dialog(\"option\", \"height\", 600);\n    });\n    $(\"#button_reset_psk\").click(function() {\n        if ($(\"#reset_psk_confirm\").is(\":checked\")) {\n            $(\"#psk_reset_wait\").show();\n\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                type    : \"reset_personal_saltkey\",\n                key             : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    $(\"#psk_reset_wait\").hide();\n                    $(\"#button_reset_psk\").after('<div id=\"reset_temp\"><?php echo $LANG['alert_message_done']; ?></div>');\n\n                    $(this).delay(1500).queue(function() {\n                        $(\"#div_reset_psk\").effect( \"fade\", \"slow\" );\n                        $(\"#reset_temp\").remove();\n                        $(this).dequeue();\n                    });\n\n                    $(\"#psk_change_wait_info\").html(\"<?php echo $LANG['alert_message_done']; ?>\");\n                    location.reload();\n                }\n            );\n        }\n    });\n\n    $( \".button\" ).button();\n\n   $(\".menu\").menu({\n      icon: {},\n      position: { my: \"left top\", at: \"right top\" }\n   });\n\n   // prevent usage of symbols in Personal saltkey\n   $(\".text_without_symbols\").bind(\"keydown\", function (event) {\n      switch (event.keyCode) {\n         case 8:  // Backspace\n         case 9:  // Tab\n         case 13: // Enter\n         case 37: // Left\n         case 38: // Up\n         case 39: // Right\n         case 40: // Down\n         break;\n         default:\n         var regex = new RegExp(\"^[a-zA-Z0-9.,/#&$@()%*]+$\");\n         var key = event.key;\n         if (!regex.test(key)) {\n            $(\"#field_warning\").html(\"<?php echo addslashes($LANG['character_not_allowed']); ?>\").stop(true,true).show().fadeOut(1000);\n            event.preventDefault();\n            return false;\n         }\n         break;\n      }\n   }).bind(\"paste\",function(e){\n      $(\"#field_warning\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\").stop(true,true).show().fadeOut(1000);\n      e.preventDefault();\n   });\n});\n\n\nfunction changePersonalSaltKey(credentials, ids, nb_total)\n{\n   // extract current id and adapt list\n   var aIds = ids.split(\",\");\n   var currentID = aIds[0];\n   aIds.shift();\n   var nb = aIds.length;\n   aIds = aIds.toString();\n\n   if (nb == 0)\n      $(\"#psk_change_wait_info\").html(\"&nbsp;...&nbsp;\"+\"100%\");\n   else\n      $(\"#psk_change_wait_info\").html(\"&nbsp;...&nbsp;\"+Math.floor(((nb_total-nb) / nb_total) * 100)+\"%\");\n\n    var data = \"{\\\"psk\\\":\\\"\"+sanitizeString($(\"#new_personal_saltkey\").val())+\"\\\"}\";\n    $.post(\n      \"sources/main.queries.php\",\n        {\n           type    : \"store_personal_saltkey\",\n           data    : prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n           debug   : true\n        },\n        function(data){\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            console.log(data);\n            if (data.error !== \"\") {\n                // display error\n                $(\"#psk_change_wait_info\").html(data.error);\n                $(this).delay(4000).queue(function() {\n                    $(\"#main_info_box\").effect( \"fade\", \"slow\" );\n                    $(this).dequeue();\n                });\n            } else {\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type            : \"reencrypt_personal_pwd\",\n                        data_to_share   : prepareExchangedData(credentials, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        currentId       : currentID,\n                        key             : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data){\n                        if (currentID === \"\") {\n                            $(\"#psk_change_wait_info\").html(\"<?php echo $LANG['alert_message_done']; ?>\");\n                            location.reload();\n                        } else {\n                            if (data[0].error === \"\") {\n                            changePersonalSaltKey(credentials, aIds, nb_total);\n                            } else {\n                                $(\"#psk_change_wait_info\").html(data[0].error);\n                            }\n                        }\n                    },\n                    \"json\"\n                );\n            }\n        }\n    );\n}\n</script>\n", "<?php\n\n/**\n * @file          admin.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"manage_settings\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\ninclude $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/tp.config.php';\n\nheader(\"Content-type: text/html; charset=utf-8\");\nheader(\"Cache-Control: no-cache, no-store, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// connect to the server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n//Load AES\n$aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n$aes->register();\n\n// Load AntiXSS\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n$antiXss = new protect\\AntiXSS\\AntiXSS();\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_session_key = filter_input(INPUT_POST, 'session_key', FILTER_SANITIZE_STRING);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_list = filter_input(INPUT_POST, 'list', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_NUMBER_INT);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_action = filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING);\n$post_cpt = filter_input(INPUT_POST, 'cpt', FILTER_SANITIZE_NUMBER_INT);\n$post_object = filter_input(INPUT_POST, 'object', FILTER_SANITIZE_STRING);\n$post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n$post_length = filter_input(INPUT_POST, 'length', FILTER_SANITIZE_NUMBER_INT);\n$post_option = filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING);\n$post_nbItems = filter_input(INPUT_POST, 'nbItems', FILTER_SANITIZE_NUMBER_INT);\n\nswitch ($post_type) {\n    #CASE for getting informations about the tool\n    # connection to author's cpassman website\n    case \"cpm_status\":\n        $text = \"<ul>\";\n        $error = \"\";\n        if (!isset($SETTINGS_EXT['admin_no_info']) || (isset($SETTINGS_EXT['admin_no_info']) && $SETTINGS_EXT['admin_no_info'] == 0)) {\n            if (isset($SETTINGS['get_tp_info']) && $SETTINGS['get_tp_info'] == 1) {\n                $handleDistant = array();\n                if (isset($SETTINGS['proxy_ip']) && !empty($SETTINGS['proxy_ip'])) {\n                    $fp = fsockopen($SETTINGS['proxy_ip'], $SETTINGS['proxy_port']);\n                } else {\n                    $fp = @fsockopen(\"www.teampass.net\", 80);\n                }\n                if (!$fp) {\n                    $error = \"connection\";\n                } else {\n                    $out = \"GET http://teampass.net/teampass_ext_lib.txt HTTP/1.0\\r\\n\";\n                    $out .= \"Host: teampass.net\\r\\n\";\n                    $out .= \"Connection: Close\\r\\n\\r\\n\";\n                    fwrite($fp, $out);\n\n                    while (($line = fgets($fp, 4096)) !== false) {\n                        $handleDistant[] = $line;\n                    }\n                    if (!feof($fp)) {\n                        $error = \"Error: unexpected fgets() fail\\n\";\n                    }\n                    fclose($fp);\n                }\n\n                if (count($handleDistant) > 0) {\n                    while (list($cle, $val) = each($handleDistant)) {\n                        if (substr($val, 0, 3) == \"nom\") {\n                            $tab = explode('|', $val);\n                            foreach ($tab as $elem) {\n                                $tmp = explode('#', $elem);\n                                $text .= '<li><u>'.$LANG[$tmp[0]].\"</u> : \".$tmp[1].'</li>';\n                                if ($tmp[0] == \"version\") {\n                                    $text .= '<li><u>'.$LANG['your_version'].\"</u> : \".$SETTINGS_EXT['version'];\n                                    if (floatval($SETTINGS_EXT['version']) < floatval($tmp[1])) {\n                                        $text .= '&nbsp;&nbsp;<b>'.$LANG['please_update'].'</b>';\n                                    }\n                                    $text .= '</li>';\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                $error = \"conf_block\";\n            }\n        } else {\n            $error = \"conf_block\";\n        }\n        $text .= \"</ul>\";\n\n        echo '[{\"error\":\"'.$error.'\" , \"output\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $text).'\"}]';\n        break;\n\n    ###########################################################\n    #CASE for refreshing all Personal Folders\n    case \"admin_action_check_pf\":\n        //get through all users\n        $rows = DB::query(\n            \"SELECT id, login, email\n            FROM \".prefix_table(\"users\").\"\n            ORDER BY login ASC\"\n        );\n        foreach ($rows as $record) {\n            //update PF field for user\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'personal_folder' => '1'\n                ),\n                \"id = %i\",\n                $record['id']\n            );\n\n            //if folder doesn't exist then create it\n            $data = DB::queryfirstrow(\n                \"SELECT id\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE title = %s AND parent_id = %i\",\n                $record['id'],\n                0\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                //If not exist then add it\n                DB::insert(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => '0',\n                        'title' => $record['id'],\n                        'personal_folder' => '1'\n                    )\n                );\n\n                //rebuild fuild tree folder\n                $tree->rebuild();\n            } else {\n                //If exists then update it\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'personal_folder' => '1'\n                    ),\n                    \"title=%s AND parent_id=%i\",\n                    $record['id'],\n                    0\n                );\n                //rebuild fuild tree folder\n                $tree->rebuild();\n\n                // Get an array of all folders\n                $folders = $tree->getDescendants($data['id'], false, true, true);\n                foreach ($folders as $folder) {\n                    //update PF field for user\n                    DB::update(\n                        prefix_table(\"nested_tree\"),\n                        array(\n                            'personal_folder' => '1'\n                        ),\n                        \"id = %s\",\n                        $folder\n                    );\n                }\n            }\n        }\n\n\n        echo '[{\"result\" : \"pf_done\"}]';\n        break;\n\n    ###########################################################\n    #CASE for deleting all items from DB that are linked to a folder that has been deleted\n    case \"admin_action_db_clean_items\":\n        //Libraries call\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        //init\n        $foldersIds = array();\n        $text = \"\";\n        $nbItemsDeleted = 0;\n\n        // Get an array of all folders\n        $folders = $tree->getDescendants();\n        foreach ($folders as $folder) {\n            if (!in_array($folder->id, $foldersIds)) {\n                array_push($foldersIds, $folder->id);\n            }\n        }\n\n        $items = DB::query(\"SELECT id,label FROM \".prefix_table(\"items\").\" WHERE id_tree NOT IN %li\", $foldersIds);\n        foreach ($items as $item) {\n            $text .= $item['label'].\"[\".$item['id'].\"] - \";\n            //Delete item\n            DB::DELETE(prefix_table(\"items\"), \"id = %i\", $item['id']);\n            //log\n            DB::DELETE(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n\n            $nbItemsDeleted++;\n        }\n\n        // delete orphan items\n        $rows = DB::query(\n            \"SELECT id\n            FROM \".prefix_table(\"items\").\"\n            ORDER BY id ASC\"\n        );\n        foreach ($rows as $item) {\n            DB::query(\n                \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i AND action = %s\",\n                $item['id'],\n                \"at_creation\"\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::DELETE(prefix_table(\"items\"), \"id = %i\", $item['id']);\n                DB::DELETE(prefix_table(\"categories_items\"), \"item_id = %i\", $item['id']);\n                DB::DELETE(prefix_table(\"log_items\"), \"id_item = %i\", $item['id']);\n                $nbItemsDeleted++;\n            }\n        }\n\n        //Update CACHE table\n        updateCacheTable(\"reload\");\n\n        //show some info\n        echo '[{\"result\" : \"db_clean_items\",\"nb_items_deleted\":\"'.$nbItemsDeleted.'\"}]';\n        break;\n\n    ###########################################################\n    #CASE for creating a DB backup\n    case \"admin_action_db_backup\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        $return = \"\";\n\n        //Get all tables\n        $tables = array();\n        $result = DB::query('SHOW TABLES');\n        foreach ($result as $row) {\n            $tables[] = $row[\"Tables_in_\".$database];\n        }\n\n        //cycle through\n        foreach ($tables as $table) {\n            if (empty($pre) || substr_count($table, $pre) > 0) {\n                // Do query\n                $result = DB::queryRaw('SELECT * FROM '.$table);\n                $mysqli_result = DB::queryRaw(\n                    \"SELECT *\n                    FROM INFORMATION_SCHEMA.COLUMNS\n                    WHERE table_schema = %s\n                    AND table_name = %s\",\n                    $database,\n                    $table\n                );\n                $numFields = DB::count();\n\n                // prepare a drop table\n                $return .= 'DROP TABLE '.$table.';';\n                $row2 = DB::queryfirstrow('SHOW CREATE TABLE '.$table);\n                $return .= \"\\n\\n\".$row2[\"Create Table\"].\";\\n\\n\";\n\n                //prepare all fields and datas\n                for ($i = 0; $i < $numFields; $i++) {\n                    while ($row = $result->fetch_row()) {\n                        $return .= 'INSERT INTO '.$table.' VALUES(';\n                        for ($j = 0; $j < $numFields; $j++) {\n                            $row[$j] = addslashes($row[$j]);\n                            $row[$j] = preg_replace(\"/\\n/\", \"\\\\n\", $row[$j]);\n                            if (isset($row[$j])) {\n                                $return .= '\"'.$row[$j].'\"';\n                            } else {\n                                $return .= 'NULL';\n                            }\n                            if ($j < ($numFields - 1)) {\n                                $return .= ',';\n                            }\n                        }\n                        $return .= \");\\n\";\n                    }\n                }\n                $return .= \"\\n\\n\\n\";\n            }\n        }\n\n        if (!empty($return)) {\n            // get a token\n            $token = GenerateCryptKey(20);\n\n            //save file\n            $filename = time().'-'.$token.'.sql';\n            $handle = fopen($SETTINGS['path_to_files_folder'].\"/\".$filename, 'w+');\n\n            //write file\n            fwrite($handle, $return);\n            fclose($handle);\n\n            // Encrypt the file\n            if (empty($post_option) === false) {\n                // Encrypt the file\n                prepareFileWithDefuse(\n                    'encrypt',\n                    $SETTINGS['path_to_files_folder'].\"/\".$filename,\n                    $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$filename,\n                    $post_option\n                );\n\n                // Do clean\n                unlink($SETTINGS['path_to_files_folder'].\"/\".$filename);\n                rename(\n                    $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$filename,\n                    $SETTINGS['path_to_files_folder'].\"/\".$filename\n                );\n            }\n\n            //generate 2d key\n            $_SESSION['key_tmp'] = GenerateCryptKey(20, true);\n\n            //update LOG\n            logEvents('admin_action', 'dataBase backup', $_SESSION['user_id'], $_SESSION['login']);\n\n            echo '[{\"result\":\"db_backup\" , \"href\":\"sources/downloadFile.php?name='.urlencode($filename).'&sub=files&file='.$filename.'&type=sql&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&pathIsFiles=1\"}]';\n        }\n        break;\n\n    ###########################################################\n    #CASE for restoring a DB backup\n    case \"admin_action_db_restore\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $dataPost = explode('&', $post_option);\n        $file = htmlspecialchars($dataPost[0]);\n        $key = htmlspecialchars($dataPost[1]);\n\n        // Get filename from database\n        $data = DB::queryFirstRow(\n            \"SELECT valeur\n            FROM \".$pre.\"misc\n            WHERE increment_id = %i\",\n            $file\n        );\n\n        $file = $data['valeur'];\n\n        // Delete operation id\n        DB::delete(\n            prefix_table('misc'),\n            \"increment_id = %i\",\n            $file\n        );\n\n        // Undecrypt the file\n        if (empty($key) === false) {\n            // Decrypt the file\n            $ret = prepareFileWithDefuse(\n                'decrypt',\n                $SETTINGS['path_to_files_folder'].\"/\".$file,\n                $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$file,\n                $key\n            );\n\n            if ($ret !== true) {\n                echo '[{\"result\":\"db_restore\" , \"message\":\"'.$ret.'\"}]';\n                break;\n            }\n\n            // Do clean\n            fileDelete($SETTINGS['path_to_files_folder'].\"/\".$file);\n            $file = $SETTINGS['path_to_files_folder'].\"/defuse_temp_\".$file;\n        } else {\n            $file = $SETTINGS['path_to_files_folder'].\"/\".$file;\n        }\n\n        //read sql file\n        if ($handle = fopen($file, \"r\")) {\n            $query = \"\";\n            while (!feof($handle)) {\n                $query .= fgets($handle, 4096);\n                if (substr(rtrim($query), -1) == ';') {\n                    //launch query\n                    DB::queryRaw($query);\n                    $query = '';\n                }\n            }\n            fclose($handle);\n        }\n\n        //delete file\n        fileDelete($file);\n\n        //Show done\n        echo '[{\"result\":\"db_restore\" , \"message\":\"\"}]';\n        break;\n\n    ###########################################################\n    #CASE for optimizing the DB\n    case \"admin_action_db_optimize\":\n        //Get all tables\n        $alltables = DB::query(\"SHOW TABLES\");\n        foreach ($alltables as $table) {\n            foreach ($table as $i => $tablename) {\n                if (substr_count($tablename, $pre) > 0) {\n                    // launch optimization quieries\n                    DB::query(\"ANALYZE TABLE `\".$tablename.\"`\");\n                    DB::query(\"OPTIMIZE TABLE `\".$tablename.\"`\");\n                }\n            }\n        }\n\n        //Clean up LOG_ITEMS table\n        $rows = DB::query(\n            \"SELECT id\n            FROM \".prefix_table(\"items\").\"\n            ORDER BY id ASC\"\n        );\n        foreach ($rows as $item) {\n            DB::query(\n                \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i AND action = %s\",\n                $item['id'],\n                \"at_creation\"\n            );\n            $counter = DB::count();\n            if ($counter == 0) {\n                //Create new at_creation entry\n                $rowTmp = DB::queryFirstRow(\n                    \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE id_item=%i ORDER BY date ASC\",\n                    $item['id']\n                );\n                DB::insert(\n                    prefix_table(\"log_items\"),\n                    array(\n                        'id_item'     => $item['id'],\n                        'date'         => $rowTmp['date'] - 1,\n                        'id_user'     => \"\",\n                        'action'     => \"at_creation\",\n                        'raison'    => \"\"\n                    )\n                );\n            }\n        }\n\n        //Show done\n        echo '[{\"result\":\"db_optimize\" , \"message\":\"\"}]';\n        break;\n\n    ###########################################################\n    #CASE for deleted old files in folder \"files\"\n    case \"admin_action_purge_old_files\":\n        $nbFilesDeleted = 0;\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        //read folder\n        $dir = opendir($SETTINGS['path_to_files_folder']);\n\n        //delete file FILES\n        while (false !== ($f = readdir($dir))) {\n            if ($f != \".\" && $f !== \"..\" && $f !== \".htaccess\") {\n                if ((time() - filectime($dir.$f)) > 604800) {\n                    fileDelete($SETTINGS['path_to_files_folder'].\"/\".$f);\n                    $nbFilesDeleted++;\n                }\n            }\n        }\n        //Close dir\n        closedir($dir);\n\n        //read folder  UPLOAD\n        $dir = opendir($SETTINGS['path_to_upload_folder']);\n\n        //delete file\n        while (false !== ($f = readdir($dir))) {\n            if ($f != \".\" && $f !== \"..\") {\n                if (strpos($f, \"_delete.\") > 0) {\n                    fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$f);\n                    $nbFilesDeleted++;\n                }\n            }\n        }\n        //Close dir\n        closedir($dir);\n\n        //Show done\n        echo '[{\"result\":\"purge_old_files\",\"nb_files_deleted\":\"'.$nbFilesDeleted.'\"}]';\n        break;\n\n    /*\n    * Reload the Cache table\n    */\n    case \"admin_action_reload_cache_table\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        updateCacheTable(\"reload\", \"\");\n        echo '[{\"result\":\"cache_reload\"}]';\n        break;\n\n    /*\n       * REBUILD CONFIG FILE\n    */\n    case \"admin_action_rebuild_config_file\":\n        $error = \"\";\n\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n        $ret = handleConfigFile(\"rebuild\");\n\n        if ($ret !== true) {\n            $error = $ret;\n        } else {\n            $error = \"rebuild_config_file\";\n        }\n\n        echo '[{\"result\":\"'.$error.'\"}]';\n        break;\n\n\n    /*\n    * Decrypt a backup file\n    */\n    case \"admin_action_backup_decrypt\":\n        // Init\n        $msg = \"\";\n        $result = \"\";\n        $filename = $post_option;\n        //get backups infos\n        $rows = DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s\", \"admin\");\n        foreach ($rows as $record) {\n            $tp_settings[$record['intitule']] = $record['valeur'];\n        }\n\n        // check if backup file is in DB.\n        // If YES then it is encrypted with DEFUSE\n        $bck = DB::queryFirstRow(\"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"backup\", \"filename\");\n\n        //read file\n        $return = \"\";\n        $Fnm = $tp_settings['bck_script_path'].'/'.$filename.'.sql';\n        if (file_exists($Fnm)) {\n            if (!empty($bck) && $bck['valeur'] === $filename) {\n                $err = \"\";\n\n                // it means that file is DEFUSE encrypted\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/Crypto.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/DerivedKeys.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/File.php';\n                require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/Core.php';\n\n                try {\n                    \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                        $SETTINGS['bck_script_path'].'/'.$post_option.'.sql',\n                        $SETTINGS['bck_script_path'].'/'.str_replace('encrypted', 'clear', filename).'.sql',\n                        $SETTINGS['bck_script_key']\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                }\n\n                if (!empty($err)) {\n                    echo '[{ \"result\":\"backup_decrypt_fails\" , \"msg\":\"'.$err.'\"}]';\n                    break;\n                }\n            } else {\n                    // file is bCrypt encrypted\n                $inF = fopen($Fnm, \"r\");\n                while (!feof($inF)) {\n                    $return .= fgets($inF, 4096);\n                }\n                fclose($inF);\n\n\n                $return = Encryption\\Crypt\\aesctr::decrypt($return, $tp_settings['bck_script_key'], 256);\n\n                //save the file\n                $handle = fopen($tp_settings['bck_script_path'].'/'.$filename.'.clear'.'.sql', 'w+');\n                fwrite($handle, $return);\n                fclose($handle);\n            }\n            $result = \"backup_decrypt_success\";\n            $msg = $tp_settings['bck_script_path'].'/'.$filename.'.clear'.'.sql';\n        } else {\n            $result = \"backup_decrypt_fails\";\n            $msg = \"File not found: \".$Fnm;\n        }\n        echo '[{ \"result\":\"'.$result.'\" , \"msg\":\"'.$msg.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key START\n    */\n    case \"admin_action_change_salt_key___start\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n        require_once('main.functions.php');\n\n        // store old sk\n        $_SESSION['reencrypt_old_salt'] = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n\n        // generate new saltkey\n        $old_sk_filename = SECUREPATH.\"/teampass-seckey.txt\".'.'.date(\"Y_m_d\", mktime(0, 0, 0, date('m'), date('d'), date('y'))).'.'.time();\n        copy(\n            SECUREPATH.\"/teampass-seckey.txt\",\n            $old_sk_filename\n        );\n        $new_key = defuse_generate_key();\n        file_put_contents(\n            SECUREPATH.\"/teampass-seckey.txt\",\n            $new_key\n        );\n\n        // store new sk\n        $_SESSION['reencrypt_new_salt'] = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        //put tool in maintenance.\n        DB::update(\n            prefix_table(\"misc\"),\n            array(\n                'valeur' => '1',\n            ),\n            \"intitule = %s AND type= %s\",\n            \"maintenance_mode\",\n            \"admin\"\n        );\n        //log\n        logEvents('system', 'change_salt_key', $_SESSION['user_id'], $_SESSION['login']);\n\n        // get number of items to change\n        DB::query(\"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\", 0);\n        $nb_of_items = DB::count();\n\n        // create backup table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n        DB::query(\n            \"CREATE TABLE `\".prefix_table(\"sk_reencrypt_backup\").\"` (\n            `id` int(12) NOT null AUTO_INCREMENT,\n            `current_table` varchar(100) NOT NULL,\n            `current_field` varchar(500) NOT NULL,\n            `value_id` varchar(500) NOT NULL,\n            `value` text NOT NULL,\n            `value2` varchar(500) NOT NULL,\n            `current_sql` text NOT NULL,\n            `result` text NOT NULL,\n            PRIMARY KEY (`id`)\n            ) CHARSET=utf8;\"\n        );\n\n        // store old SK in backup table\n        DB::insert(\n            prefix_table(\"sk_reencrypt_backup\"),\n            array(\n                'current_table' => 'old_sk',\n                'current_field' => 'old_sk',\n                'value_id' => 'old_sk',\n                'value' => $_SESSION['reencrypt_old_salt'],\n                'current_sql' => \"old_sk\",\n                'value2' => $old_sk_filename,\n                'result' => \"none\"\n            )\n        );\n\n        // delete previous backup files\n        $files = glob($SETTINGS['path_to_upload_folder'].'/*'); // get all file names\n        foreach ($files as $file) { // iterate files\n            if (is_file($file)) {\n                $file_parts = pathinfo($file);\n                if (strpos($file_parts['filename'], \".bck-change-sk\") !== false) {\n                    unlink($file); // delete file\n                }\n            }\n        }\n\n        echo '[{\"nextAction\":\"encrypt_items\" , \"error\":\"'.$error.'\" , \"nbOfItems\":\"'.$nb_of_items.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - ENCRYPT\n    */\n    case \"admin_action_change_salt_key___encrypt\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Allowed values for $_POST['object'] : \"items,logs,files,categories\"\n        if (!in_array($post_object, explode(\"items,logs,files,categories\", \",\"), true)) {\n            echo prepareExchangedData(array(\"error\" => \"This input is not allowed\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n        require_once 'main.functions.php';\n\n        // prepare SK\n        if (empty($_SESSION['reencrypt_new_salt']) || empty($_SESSION['reencrypt_old_salt'])) {\n            // SK is not correct\n            echo '[{\"nextAction\":\"\" , \"error\":\"saltkeys are empty???\" , \"nbOfItems\":\"\"}]';\n            break;\n        }\n\n        // what objects to treat\n        if (empty($post_object) === true) {\n            // no more object to treat\n            $nextAction = \"finishing\";\n        } else {\n            // manage list of objects\n            $objects = explode(\",\", $post_object);\n\n            if ($objects[0] === \"items\") {\n                //change all encrypted data in Items (passwords)\n                $rows = DB::query(\n                    \"SELECT id, pw, pw_iv\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE perso = %s\n                    LIMIT \".$post_start.\", \".$post_length,\n                    \"0\"\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'items',\n                            'current_field' => 'pw',\n                            'value_id' => $record['id'],\n                            'value' => $record['pw'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"items\").\" SET pw = '\".$record['pw'].\"' WHERE id = '\".$record['id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    $pw = cryption(\n                        $record['pw'],\n                        $_SESSION['reencrypt_old_salt'],\n                        \"decrypt\"\n                    );\n                    //encrypt with new SALT\n                    $encrypt = cryption(\n                        $pw['string'],\n                        $_SESSION['reencrypt_new_salt'],\n                        \"encrypt\"\n                    );\n\n                    //save in DB\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'pw' => $encrypt['string'],\n                            'pw_iv' => \"\"\n                        ),\n                        \"id = %i\",\n                        $record['id']\n                    );\n\n                    // update backup table\n                    DB::update(\n                        prefix_table('sk_reencrypt_backup'),\n                        array(\n                            'result' => \"ok\"\n                            ),\n                        \"id=%i\",\n                        $newID\n                    );\n                }\n            // ---\n            // CASE OF LOGS\n            // ---\n            } elseif ($objects[0] === \"logs\") {\n                //change all encrypted data in Logs (passwords)\n                $rows = DB::query(\n                    \"SELECT raison, increment_id\n                    FROM \".prefix_table(\"log_items\").\"\n                    WHERE action = %s AND raison LIKE 'at_pw :%'\n                    LIMIT \".$post_start.\", \".$post_length,\n                    \"at_modification\"\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'log_items',\n                            'current_field' => 'raison',\n                            'value_id' => $record['increment_id'],\n                            'value' => $record['raison'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"log_items\").\" SET raison = '\".$record['raison'].\"' WHERE increment_id = '\".$record['increment_id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    // extract the pwd\n                    $tmp = explode('at_pw :', $record['raison']);\n                    if (!empty($tmp[1])) {\n                        $pw = cryption(\n                            $tmp[1],\n                            $_SESSION['reencrypt_old_salt'],\n                            \"decrypt\"\n                        );\n                        //encrypt with new SALT\n                        $encrypt = cryption(\n                            $pw['string'],\n                            $_SESSION['reencrypt_new_salt'],\n                            \"encrypt\"\n                        );\n\n                        // save in DB\n                        DB::update(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'raison' => 'at_pw :'.$encrypt['string'],\n                                'encryption_type' => 'defuse'\n                            ),\n                            \"increment_id = %i\",\n                            $record['increment_id']\n                        );\n\n                        // update backup table\n                        DB::update(\n                            prefix_table('sk_reencrypt_backup'),\n                            array(\n                                'result' => \"ok\"\n                                ),\n                            \"id=%i\",\n                            $newID\n                        );\n                    }\n                }\n            // ---\n            // CASE OF CATEGORIES\n            // ---\n            } elseif ($objects[0] === \"categories\") {\n                //change all encrypted data in CATEGORIES (passwords)\n                $rows = DB::query(\n                    \"SELECT id, data\n                    FROM \".prefix_table(\"categories_items\").\"\n                    LIMIT \".$post_start.\", \".$post_length\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'categories_items',\n                            'current_field' => 'data',\n                            'value_id' => $record['id'],\n                            'value' => $record['data'],\n                            'current_sql' => \"UPDATE \".prefix_table(\"categories_items\").\" SET data = '\".$record['data'].\"' WHERE id = '\".$record['id'].\"';\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    //\n                    $pw = cryption(\n                        $record['data'],\n                        $_SESSION['reencrypt_old_salt'],\n                        \"decrypt\"\n                    );\n                    //encrypt with new SALT\n                    $encrypt = cryption(\n                        $pw['string'],\n                        $_SESSION['reencrypt_new_salt'],\n                        \"encrypt\"\n                    );\n                    // save in DB\n                    DB::update(\n                        prefix_table(\"categories_items\"),\n                        array(\n                            'data' => $encrypt['string'],\n                            'encryption_type' => 'defuse'\n                        ),\n                        \"id = %i\",\n                        $record['id']\n                    );\n\n                    // update backup table\n                    DB::update(\n                        prefix_table('sk_reencrypt_backup'),\n                        array(\n                            'result' => \"ok\"\n                            ),\n                        \"id=%i\",\n                        $newID\n                    );\n                }\n            // ---\n            // CASE OF FILES\n            // ---\n            } elseif ($objects[0] === \"files\") {\n                // Change all encrypted data in FILES (passwords)\n                $rows = DB::query(\n                    \"SELECT id, file, status\n                    FROM \".prefix_table(\"files\").\"\n                    WHERE status = 'encrypted'\n                    LIMIT \".$post_start.\", \".$post_length\n                );\n                foreach ($rows as $record) {\n                    // backup data\n                    DB::insert(\n                        prefix_table(\"sk_reencrypt_backup\"),\n                        array(\n                            'current_table' => 'files',\n                            'current_field' => 'file',\n                            'value_id' => $record['id'],\n                            'value' => $record['file'],\n                            'current_sql' => \"no_query\",\n                            'value2' => \"none\",\n                            'result' => \"none\"\n                        )\n                    );\n                    $newID = DB::insertId();\n\n                    if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['file'])) {\n                        // make a copy of file\n                        if (!copy(\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\".copy\"\n                        )) {\n                            $error = \"Copy not possible\";\n                            exit;\n                        } else {\n                            // prepare a bck of file (that will not be deleted)\n                            $backup_filename = $record['file'].\".bck-change-sk.\".time();\n                            copy(\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                                $SETTINGS['path_to_upload_folder'].'/'.$backup_filename\n                            );\n                        }\n\n\n                        // Treat the file\n                        // STEP1 - Do decryption\n                            prepareFileWithDefuse(\n                                'decrypt',\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'],\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\"\n                            );\n\n                            // Do cleanup of files\n                            unlink($SETTINGS['path_to_upload_folder'].'/'.$record['file']);\n\n                        // STEP2 - Do encryption\n                            prepareFileWithDefuse(\n                                'encryp',\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\",\n                                $SETTINGS['path_to_upload_folder'].'/'.$record['file']\n                            );\n\n                            // Do cleanup of files\n                            unlink($SETTINGS['path_to_upload_folder'].'/'.$record['file'].\"_encrypted\");\n\n\n                        // Update backup table\n                        DB::update(\n                            prefix_table('sk_reencrypt_backup'),\n                            array(\n                                'value2' => $backup_filename,\n                                'result' => \"ok\"\n                                ),\n                            \"id=%i\",\n                            $newID\n                        );\n                    }\n                }\n            }\n\n            $nextStart = intval($post_start) + intval($post_length);\n\n            // check if last item to change has been treated\n            if ($nextStart >= intval($post_nbItems)) {\n                array_shift($objects);\n                $nextAction = implode(\",\", $objects); // remove first object of the list\n\n                // do some things for new object\n                if (isset($objects[0])) {\n                    if ($objects[0] === \"logs\") {\n                        DB::query(\"SELECT increment_id FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND raison LIKE 'at_pw :%'\", \"at_modification\");\n                    } elseif ($objects[0] === \"files\") {\n                        DB::query(\"SELECT id FROM \".prefix_table(\"files\"));\n                    } elseif ($objects[0] === \"categories\") {\n                        DB::query(\"SELECT id FROM \".prefix_table(\"categories_items\"));\n                    } elseif ($objects[0] === \"custfields\") {\n                        DB::query(\"SELECT raison FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND raison LIKE 'at_pw :%'\", \"at_modification\");\n                    }\n                    $nb_of_items = DB::count();\n                } else {\n                    // now finishing\n                    $nextAction = \"finishing\";\n                    $nb_of_items = $error = $nextStart = \"\";\n                }\n            } else {\n                $nextAction = $post_object;\n                $nb_of_items = \"\";\n            }\n        }\n\n        echo '[{ \"nextAction\":\"'.$nextAction.'\" , \"nextStart\":\"'.$nextStart.'\" , \"error\":\"'.$error.'\" , \"nbOfItems\":\"'.$nb_of_items.'\" , \"oldsk\" : \"'.$_SESSION['reencrypt_old_salt'].'\" , \"newsk\" : \"'.$_SESSION['reencrypt_new_salt'].'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - END\n    */\n    case \"admin_action_change_salt_key___end\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        $error = \"\";\n\n        // quit maintenance mode.\n        DB::update(\n            prefix_table(\"misc\"),\n            array(\n                'valeur' => '0',\n            ),\n            \"intitule = %s AND type= %s\",\n            \"maintenance_mode\",\n            \"admin\"\n        );\n\n        echo '[{\"nextAction\":\"done\" , \"error\":\"'.$error.'\"}]';\n        break;\n\n    /*\n    * Change SALT Key - Restore BACKUP data\n    */\n    case \"admin_action_change_salt_key___restore_backup\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // delete files\n        $rows = DB::query(\n            \"SELECT current_table, value, value2, current_sql\n            FROM \".prefix_table(\"sk_reencrypt_backup\")\n        );\n        foreach ($rows as $record) {\n            if ($record['current_table'] === \"items\" || $record['current_table'] === \"logs\" || $record['current_table'] === \"categories\") {\n                // excute query\n                DB::query(\n                    str_replace(\"\\'\", \"'\", $record['current_sql'])\n                );\n            } elseif ($record['current_table'] === \"files\") {\n                // restore backup file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value'])) {\n                    unlink($SETTINGS['path_to_upload_folder'].'/'.$record['value']);\n                    if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value2'])) {\n                        rename(\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['value2'],\n                            $SETTINGS['path_to_upload_folder'].'/'.$record['value']\n                        );\n                    }\n                }\n            } elseif ($record['current_table'] === \"old_sk\") {\n                $previous_saltkey_filename = $record['value2'];\n            }\n        }\n\n        // restore saltkey file\n        if (file_exists($previous_saltkey_filename)) {\n            unlink(SECUREPATH.\"/teampass-seckey.txt\");\n            rename(\n                $previous_saltkey_filename,\n                SECUREPATH.'/teampass-seckey.txt'\n            );\n        }\n\n        // drop table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n\n        echo '[{\"status\":\"done\"}]';\n        break;\n\n    /*\n    * Change SALT Key - Delete BACKUP data\n    */\n    case \"admin_action_change_salt_key___delete_backup\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // delete files\n        $rows = DB::query(\n            \"SELECT value, value2\n            FROM \".prefix_table(\"sk_reencrypt_backup\").\"\n            WHERE current_table = 'files'\"\n        );\n        foreach ($rows as $record) {\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$record['value2'])) {\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$record['value2']);\n            }\n        }\n\n        // drop table\n        DB::query(\"DROP TABLE IF EXISTS \".prefix_table(\"sk_reencrypt_backup\"));\n\n        echo '[{\"status\":\"done\"}]';\n        break;\n\n    /*\n    * Test the email configuraiton\n    */\n    case \"admin_email_test_configuration\":\n        if (empty($_SESSION['user_email'])) {\n            echo '[{\"result\":\"email_test_conf\", \"error\":\"error_mail_not_send\" , \"message\":\"User has no email defined!\"}]';\n        } else {\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            echo '[{\"result\":\"email_test_conf\", '.sendEmail($LANG['admin_email_test_subject'], $LANG['admin_email_test_body'], $_SESSION['user_email']).'}]';\n        }\n        break;\n\n    /*\n    * Send emails in backlog\n    */\n    case \"admin_email_send_backlog\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $rows = DB::query(\"SELECT * FROM \".prefix_table(\"emails\").\" WHERE status = %s OR status = %s\", \"not_sent\", \"\");\n        foreach ($rows as $record) {\n            //send email\n            $ret = json_decode(\n                @sendEmail(\n                    $record['subject'],\n                    $record['body'],\n                    $record['receivers']\n                )\n            );\n\n            if (!empty($ret['error'])) {\n                //update item_id in files table\n                DB::update(\n                    prefix_table(\"emails\"),\n                    array(\n                        'status' => \"not_sent\"\n                    ),\n                    \"timestamp = %s\",\n                    $record['timestamp']\n                );\n            } else {\n                //delete from DB\n                DB::delete(prefix_table(\"emails\"), \"timestamp = %s\", $record['timestamp']);\n            }\n        }\n\n        //update LOG\n        logEvents('admin_action', 'Emails backlog', $_SESSION['user_id'], $_SESSION['login']);\n\n        echo '[{\"result\":\"admin_email_send_backlog\", '.@sendEmail($LANG['admin_email_test_subject'], $LANG['admin_email_test_body'], $SETTINGS['email_from']).'}]';\n        break;\n\n    /*\n    * Generate exchanges encryption keys\n    */\n    case \"admin_action_generate_encrypt_keys\":\n        require_once(\"../includes/libraries/jCryption/jcryption.php\");\n        $keyLength = 1024;\n        $jCryption = new jCryption();\n        $numberOfPairs = 100;\n        $arrKeyPairs = array();\n        for ($i = 0; $i < $numberOfPairs; $i++) {\n            $arrKeyPairs[] = $jCryption->generateKeypair($keyLength);\n        }\n        $file = array();\n        $file[] = '<?php';\n        $file[] = '$arrKeys = ';\n        $file[] = var_export($arrKeyPairs, true);\n        $file[] = ';';\n        file_put_contents(SECUREPATH.\"/\".$numberOfPairs.\"_\".$keyLength.\"_keys.inc.php\", implode(\"\\n\", $file));\n\n        echo '[{\"result\":\"generated_keys_file\", \"error\":\"\"}]';\n        break;\n\n    /*\n    * Correct passwords prefix\n    */\n    /*case \"admin_action_pw_prefix_correct\":\n        require_once 'main.functions.php';\n        $numOfItemsChanged = 0;\n        // go for all Items and get their PW\n        $rows = DB::query(\"SELECT id, pw, pw_iv FROM \".prefix_table(\"items\").\" WHERE perso = %s\", \"0\");\n        foreach ($rows as $record) {\n            // check if key exists for this item\n            DB::query(\"SELECT * FROM \".prefix_table(\"keys\").\" WHERE `id` = %i AND `sql_table` = %s\", $record['id'], \"items\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                $storePrefix = false;\n                // decrypt pw\n                $pw = cryption($record['pw'], SALT, $record['pw_iv'], \"decrypt\");\n                if (!empty($pw['string']) && strlen($pw['string']) > 15 && isutf8($pw['string'])) {\n                    // Pw seems to have a prefix\n                    // get old prefix\n                    $randomKey = substr($pw, 0, 15);\n                    // check if prefix contains only lowercase and numerics\n                    //TODO\n                    // should we store?\n                    $storePrefix = true;\n                } elseif (!empty($pw) && isutf8($pw)) {\n                    // Pw doesn't seem to have a prefix\n\n                    // re-encrypt with key prefix\n                    $randomKey = generateKey();\n                    $pw = $randomKey.$pw;\n                    $pw = encrypt($pw);\n\n                    // store pw\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'pw' => $pw\n                        ),\n                        \"id=%s\",\n                        $record['id']\n                    );\n                    // should we store?\n                    $storePrefix = true;\n                }\n                if ($storePrefix === true) {\n                    // store key prefix\n                    DB::insert(\n                        prefix_table(\"keys\"),\n                        array(\n                            'table'     => 'items',\n                            'id'        => $record['id'],\n                            'rand_key'  => $randomKey\n                        )\n                    );\n                }\n\n                $numOfItemsChanged++;\n            }\n        }\n        echo '[{\"result\":\"pw_prefix_correct\", \"error\":\"\", \"ret\":\"'.$LANG['alert_message_done'].' '.$numOfItemsChanged.' '.$LANG['items_changed'].'\"}]';\n        break;*/\n\n    /*\n    * Attachments encryption\n    */\n    case \"admin_action_attachments_cryption\":\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        // init\n        $error = \"\";\n        $ret = \"\";\n        $cpt = 0;\n        $filesList = \"\";\n        $continu = true;\n\n        // get through files\n        if (null !== $post_option && empty($post_option) === false) {\n            // Loop on files\n            $rows = DB::query(\n                \"SELECT id, file, status\n                FROM \".prefix_table(\"files\").\"\n                LIMIT \".$post_start.\", \". $post_length\n            );\n            foreach ($rows as $record) {\n                if (is_file($SETTINGS['path_to_upload_folder'].'/'.$record['file'])) {\n                    $addFile = 0;\n                    if ($post_option== \"decrypt\" && $record['status'] === 'encrypted') {\n                        $addFile = 1;\n                    } elseif ($post_option == \"encrypt\" && $record['status'] === 'clear') {\n                        $addFile = 1;\n                    }\n\n                    if ($addFile === '1') {\n                        if (empty($filesList)) {\n                            $filesList = $entry;\n                        } else {\n                            $filesList .= \";\".$entry;\n                        }\n                    }\n                }\n            }\n        } else {\n            $error = \"No option\";\n        }\n\n        echo '[{\"result\":\"attachments_cryption\", \"error\":\"'.$error.'\", \"continu\":\"'.$continu.'\", \"list\":\"'.$filesList.'\", \"cpt\":\"0\"}]';\n        break;\n\n    /*\n     * Attachments encryption - Treatment in several loops\n     */\n    case \"admin_action_attachments_cryption_continu\":\n        include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n        require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n        $cpt = 0;\n        $newFilesList = \"\";\n        $continu = true;\n        $error = \"\";\n\n        // load PhpEncryption library\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'File.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/'.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // treat 10 files\n        $filesList = explode(';', $post_list);\n        foreach ($filesList as $file) {\n            if ($cpt < 5) {\n                // skip file is Coherancey not respected\n                if (is_file($SETTINGS['path_to_upload_folder'].'/'.$file)) {\n                    // Case where we want to decrypt\n                    if ($post_option === \"decrypt\") {\n                        prepareFileWithDefuse(\n                            'decrypt',\n                            $SETTINGS['path_to_upload_folder'].'/'.$file,\n                            $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file\n                        );\n                    // Case where we want to encrypt\n                    } elseif ($post_option === \"encrypt\") {\n                        prepareFileWithDefuse(\n                            'encrypt',\n                            $SETTINGS['path_to_upload_folder'].'/'.$file,\n                            $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file\n                        );\n                    }\n                    // Do file cleanup\n                    fileDelete($SETTINGS['path_to_upload_folder'].'/'.$file);\n                    rename(\n                        $SETTINGS['path_to_upload_folder'].'/defuse_temp_'.$file,\n                        $SETTINGS['path_to_upload_folder'].'/'.$file\n                    );\n\n                    // store in DB\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'status' => $post_option === \"decrypt\" ? \"clear\" : \"encrypted\"\n                                ),\n                            \"file=%s\",\n                            $file\n                        );\n\n                        $cpt++;\n                }\n            } else {\n                // build list\n                if (empty($newFilesList)) {\n                    $newFilesList = $file;\n                } else {\n                    $newFilesList .= \";\".$file;\n                }\n            }\n        }\n\n        if (empty($newFilesList)) {\n            $continu = false;\n        }\n\n        echo '[{\"error\":\"'.$error.'\", \"continu\":\"'.$continu.'\", \"list\":\"'.$newFilesList.'\", \"cpt\":\"'.($post_cpt + $cpt).'\"}]';\n        break;\n\n    /*\n     * API save key\n     */\n    case \"admin_action_api_save_key\":\n        // Check KEY and rights\n        if ($post_session_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Init\n        $error = \"\";\n\n        // add new key\n        if (null !== $post_action && $post_action === \"add\") {\n            DB::insert(\n                prefix_table(\"api\"),\n                array(\n                    'id'        => null,\n                    'type'      => 'key',\n                    'label'     => $post_label,\n                    'value'       => $post_key,\n                    'timestamp' => time()\n                )\n            );\n        // Update existing key\n        } elseif (null !== $post_action && $post_action === \"update\") {\n            DB::update(\n                prefix_table(\"api\"),\n                array(\n                    'label'     => $post_label,\n                    'timestamp' => time()\n                ),\n                \"id=%i\",\n                $post_id\n            );\n        // Delete existing key\n        } elseif (null !== $post_action && $post_action === \"delete\") {\n            DB::query(\n                \"DELETE FROM \".prefix_table(\"api\").\" WHERE id = %i\",\n                $post_id\n            );\n        }\n        echo '[{\"error\":\"'.$error.'\"}]';\n        break;\n\n    /*\n       * API save key\n    */\n    case \"admin_action_api_save_ip\":\n        // Check KEY and rights\n        if ($post_session_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Init\n        $error = \"\";\n\n        // add new key\n        if (null !== $post_action && $post_action === \"add\") {\n            DB::insert(\n                prefix_table(\"api\"),\n                array(\n                    'id'        => null,\n                    'type'      => 'ip',\n                    'label'     => $post_label,\n                    'value'       => $post_key,\n                    'timestamp' => time()\n                )\n            );\n        // Update existing key\n        } elseif (null !== $post_action && $post_action === \"update\") {\n                DB::update(\n                    prefix_table(\"api\"),\n                    array(\n                        'label'     => $post_label,\n                        'value'     => $post_key,\n                        'timestamp' => time()\n                    ),\n                    \"id=%i\",\n                    $post_id\n                );\n        // Delete existing key\n        } elseif (null !== $post_action && $post_action === \"delete\") {\n            DB::query(\"DELETE FROM \".prefix_table(\"api\").\" WHERE id=%i\", $post_id);\n        }\n        echo '[{\"error\":\"'.$error.'\"}]';\n        break;\n\n    case \"save_api_status\":\n        // Do query\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"api\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"api\",\n                    'valeur' => $post_status\n                    )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $post_status\n                    ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"api\"\n            );\n        }\n        $SETTINGS['api'] = $post_status;\n        break;\n\n    case \"save_duo_status\":\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"duo\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"duo\",\n                    'valeur' => $post_status\n                    )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $post_status\n                    ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"duo\"\n            );\n        }$post_status;\n        break;\n\n    case \"save_duo_in_sk_file\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // Prepare variables\n        $akey = htmlspecialchars_decode($dataReceived['akey']);\n        $ikey = htmlspecialchars_decode($dataReceived['ikey']);\n        $skey = htmlspecialchars_decode($dataReceived['skey']);\n        $host = htmlspecialchars_decode($dataReceived['host']);\n\n        //get infos from SETTINGS.PHP file\n        $filename = $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n        $tmp_skfile = '';\n        if (file_exists($filename)) {\n            // get sk.php file path\n            $settingsFile = file($filename);\n            while (list($key, $val) = each($settingsFile)) {\n                if (substr_count($val, \"@define('SECUREPATH'\")) {\n                    $tmp_skfile = substr($val, 23, strpos($val, \"');\") - 23).'/sk.php';\n                }\n            }\n\n            // before perform a copy of sk.php file\n            if (file_exists($tmp_skfile)) {\n                //Do a copy of the existing file\n                if (!copy(\n                    $tmp_skfile,\n                    $tmp_skfile.'.'.date(\n                        \"Y_m_d\",\n                        mktime(0, 0, 0, date('m'), date('d'), date('y'))\n                    )\n                )) {\n                    echo '[{\"result\" : \"\" , \"error\" : \"Could NOT perform a copy of file: '.$tmp_skfile.'\"}]';\n                    break;\n                } else {\n                    fileDelete($tmp_skfile);\n                }\n            } else {\n                // send back an error\n                echo '[{\"result\" : \"\" , \"error\" : \"Could NOT access file: '.$tmp_skfile.'\"}]';\n                break;\n            }\n        }\n\n        // Write back values in sk.php file\n        $fh = fopen($tmp_skfile, 'w');\n        $result2 = fwrite(\n            $fh,\n            utf8_encode(\n                \"<?php\n@define('COST', '13'); // Don't change this.\n// DUOSecurity credentials\n@define('AKEY', '\".(string) $akey.\"');\n@define('IKEY', '\".(string) $ikey.\"');\n@define('SKEY', '\".(string) $skey.\"');\n@define('HOST', '\".(string) $host.\"');\n?>\"\n            )\n        );\n        fclose($fh);\n\n\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['admin_duo_stored']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_google_options\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // Google Authentication\n        if (htmlspecialchars_decode($dataReceived['google_authentication']) == \"false\") {\n            $tmp = 0;\n        } else {\n            $tmp = 1;\n        }\n        DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"google_authentication\");\n        $counter = DB::count();\n        if ($counter == 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'type' => \"admin\",\n                    \"intitule\" => \"google_authentication\",\n                    'valeur' => $tmp\n                )\n            );\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $tmp\n                ),\n                \"type = %s AND intitule = %s\",\n                \"admin\",\n                \"google_authentication\"\n            );\n        }\n        $SETTINGS['google_authentication'] = htmlspecialchars_decode($dataReceived['google_authentication']);\n\n        // ga_website_name\n        if (!is_null($dataReceived['ga_website_name'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"ga_website_name\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"ga_website_name\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['ga_website_name'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['ga_website_name'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"ga_website_name\"\n                );\n            }\n            $SETTINGS['ga_website_name'] = htmlspecialchars_decode($dataReceived['ga_website_name']);\n        } else {\n            $SETTINGS['ga_website_name'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_agses_options\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n\n        // agses_hosted_url\n        if (!is_null($dataReceived['agses_hosted_url'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_url\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_url\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_url'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_url'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_url\"\n                );\n            }\n            $SETTINGS['agses_hosted_url'] = htmlspecialchars_decode($dataReceived['agses_hosted_url']);\n        } else {\n            $SETTINGS['agses_hosted_url'] = \"\";\n        }\n\n        // agses_hosted_id\n        if (!is_null($dataReceived['agses_hosted_id'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_id\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_id\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_id'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_id'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_id\"\n                );\n            }\n            $SETTINGS['agses_hosted_id'] = htmlspecialchars_decode($dataReceived['agses_hosted_id']);\n        } else {\n            $SETTINGS['agses_hosted_id'] = \"\";\n        }\n\n        // agses_hosted_apikey\n        if (!is_null($dataReceived['agses_hosted_apikey'])) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"agses_hosted_apikey\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"agses_hosted_apikey\",\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_apikey'])\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => htmlspecialchars_decode($dataReceived['agses_hosted_apikey'])\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"agses_hosted_apikey\"\n                );\n            }\n            $SETTINGS['agses_hosted_apikey'] = htmlspecialchars_decode($dataReceived['agses_hosted_apikey']);\n        } else {\n            $SETTINGS['agses_hosted_apikey'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"save_option_change\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData(\n            $post_data,\n            \"decode\"\n        );\n        $type = \"admin\";\n\n        require_once 'main.functions.php';\n\n        // In case of key, then encrypt it\n        if ($dataReceived['field'] === 'bck_script_passkey') {\n            $dataReceived['value'] = cryption(\n                $dataReceived['value'],\n                \"\",\n                \"encrypt\"\n            )['string'];\n        }\n\n        // Check if setting is already in DB. If NO then insert, if YES then update.\n        $data = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\"\n            WHERE type = %s AND intitule = %s\",\n            $type,\n            $dataReceived['field']\n        );\n        $counter = DB::count();\n        if ($counter === 0) {\n            DB::insert(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $dataReceived['value'],\n                    'type' => $type,\n                    'intitule' => $dataReceived['field']\n                    )\n            );\n            // in case of stats enabled, add the actual time\n            if ($dataReceived['field'] === 'send_stats') {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => time(),\n                        'type' => $type,\n                        'intitule' => $dataReceived['field'].'_time'\n                        )\n                );\n            }\n        } else {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => $dataReceived['value']\n                    ),\n                \"type = %s AND intitule = %s\",\n                $type,\n                $dataReceived['field']\n            );\n            // in case of stats enabled, update the actual time\n            if ($dataReceived['field'] === 'send_stats') {\n                // Check if previous time exists, if not them insert this value in DB\n                $data_time = DB::query(\n                    \"SELECT * FROM \".prefix_table(\"misc\").\"\n                    WHERE type = %s AND intitule = %s\",\n                    $type,\n                    $dataReceived['field'].'_time'\n                );\n                $counter = DB::count();\n                if ($counter === 0) {\n                    DB::insert(\n                        prefix_table(\"misc\"),\n                        array(\n                            'valeur' => 0,\n                            'type' => $type,\n                            'intitule' => $dataReceived['field'].'_time'\n                            )\n                    );\n                } else {\n                    DB::update(\n                        prefix_table(\"misc\"),\n                        array(\n                            'valeur' => 0\n                            ),\n                        \"type = %s AND intitule = %s\",\n                        $type,\n                        $dataReceived['field']\n                    );\n                }\n            }\n        }\n\n        // special Cases\n        if ($dataReceived['field'] == \"cpassman_url\") {\n            // update also jsUrl for CSFP protection\n            $jsUrl = $dataReceived['value'].'/includes/libraries/csrfp/js/csrfprotector.js';\n            $csrfp_file = \"../includes/libraries/csrfp/libs/csrfp.config.php\";\n            $data = file_get_contents($csrfp_file);\n            $posJsUrl = strpos($data, '\"jsUrl\" => \"');\n            $posEndLine = strpos($data, '\",', $posJsUrl);\n            $line = substr($data, $posJsUrl, ($posEndLine - $posJsUrl + 2));\n            $newdata = str_replace($line, '\"jsUrl\" => \"'.$jsUrl.'\",', $data);\n            file_put_contents($csrfp_file, $antiXss->xss_clean($newdata));\n        } elseif ($dataReceived['field'] == \"restricted_to_input\" && $dataReceived['value'] == \"0\") {\n            DB::update(\n                prefix_table(\"misc\"),\n                array(\n                    'valeur' => 0\n                    ),\n                \"type = %s AND intitule = %s\",\n                $type,\n                'restricted_to_roles'\n            );\n        }\n\n        // store in SESSION\n        $SETTINGS[$dataReceived['field']] = $dataReceived['value'];\n\n        // save change in config file\n        handleConfigFile(\"update\", $dataReceived['field'], $dataReceived['value']);\n\n        // Encrypt data to return\n        echo prepareExchangedData(\n            array(\n                \"error\" => \"\",\n                \"misc\" => $counter.\" ; \".$SETTINGS[$dataReceived['field']]\n            ),\n            \"encode\"\n        );\n        break;\n\n    case \"get_values_for_statistics\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // Encrypt data to return\n        echo prepareExchangedData(\n            getStatisticsData(),\n            \"encode\"\n        );\n\n        break;\n\n    case \"save_sending_statistics\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        // send statistics\n        if (null !== $post_status) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"send_stats\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"send_stats\",\n                        'valeur' => $post_status\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $post_status\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"send_stats\"\n                );\n            }\n            $SETTINGS['send_stats'] = $post_status;\n        } else {\n            $SETTINGS['send_stats'] = \"0\";\n        }\n\n        // send statistics items\n        if (null !== $post_list) {\n            DB::query(\"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %s\", \"admin\", \"send_statistics_items\");\n            $counter = DB::count();\n            if ($counter == 0) {\n                DB::insert(\n                    prefix_table(\"misc\"),\n                    array(\n                        'type' => \"admin\",\n                        \"intitule\" => \"send_statistics_items\",\n                        'valeur' => $post_list\n                    )\n                );\n            } else {\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $post_list\n                    ),\n                    \"type = %s AND intitule = %s\",\n                    \"admin\",\n                    \"send_statistics_items\"\n                );\n            }\n            $SETTINGS['send_statistics_items'] = $post_list;\n        } else {\n            $SETTINGS['send_statistics_items'] = \"\";\n        }\n\n        // send data\n        echo '[{\"result\" : \"'.addslashes($LANG['done']).'\" , \"error\" : \"\"}]';\n        break;\n\n    case \"admin_ldap_test_configuration\":\n        // Check\n        if (null !== $post_option || empty($post_option) === true) {\n            echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"error\" : \"No options\" }]';\n            break;\n        }\n\n        require_once 'main.functions.php';\n\n        // decrypt and retreive data in JSON format\n        $dataReceived = prepareExchangedData($post_option, \"decode\");\n\n        if (empty($dataReceived[0]['username_pwd']) || empty($dataReceived[0]['username'])) {\n            echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"error\" : \"No user credentials\" }]';\n            break;\n        }\n\n        $debug_ldap = $ldap_suffix = \"\";\n\n        //Multiple Domain Names\n        if (strpos(html_entity_decode($dataReceived[0]['username']), '\\\\') === true) {\n            $ldap_suffix = \"@\".substr(html_entity_decode($dataReceived[0]['username']), 0, strpos(html_entity_decode($dataReceived[0]['username']), '\\\\'));\n            $dataReceived[0]['username'] = substr(html_entity_decode($dataReceived[0]['username']), strpos(html_entity_decode($dataReceived[0]['username']), '\\\\') + 1);\n        }\n        if ($dataReceived[0]['ldap_type'] === 'posix-search') {\n            $ldapURIs = \"\";\n            foreach (explode(\",\", $dataReceived[0]['ldap_domain_controler']) as $domainControler) {\n                if ($dataReceived[0]['ldap_ssl_input'] == 1) {\n                    $ldapURIs .= \"ldaps://\".$domainControler.\":\".$dataReceived[0]['ldap_port'].\" \";\n                } else {\n                    $ldapURIs .= \"ldap://\".$domainControler.\":\".$dataReceived[0]['ldap_port'].\" \";\n                }\n            }\n\n            $debug_ldap .= \"LDAP URIs : \".$ldapURIs.\"<br/>\";\n\n            $ldapconn = ldap_connect($ldapURIs);\n\n            if ($dataReceived[0]['ldap_tls_input']) {\n                ldap_start_tls($ldapconn);\n            }\n\n            $debug_ldap .= \"LDAP connection : \".($ldapconn ? \"Connected\" : \"Failed\").\"<br/>\";\n\n            ldap_set_option($ldapconn, LDAP_OPT_PROTOCOL_VERSION, 3);\n            if ($ldapconn) {\n                $ldapbind = @ldap_bind($ldapconn, $dataReceived[0]['ldap_bind_dn'], $dataReceived[0]['ldap_bind_passwd']);\n\n                $debug_ldap .= \"LDAP bind : \".($ldapbind ? \"Bound\" : \"Failed\").\"<br/>\";\n\n                if ($ldapbind) {\n                    $filter = \"(&(\".$dataReceived[0]['ldap_user_attribute'].\"=$username)(objectClass=\".$dataReceived[0]['ldap_object_class'].\"))\";\n                    $result = ldap_search(\n                        $ldapconn,\n                        $dataReceived[0]['ldap_search_base'],\n                        $filter,\n                        array('dn', 'mail', 'givenname', 'sn')\n                    );\n                    if (isset($dataReceived[0]['ldap_usergroup'])) {\n                        $filter_group = \"memberUid=\".$username;\n                        $result_group = ldap_search(\n                            $ldapconn,\n                            $dataReceived[0]['ldap_usergroup'],\n                            $filter_group,\n                            array('dn')\n                        );\n\n                        $debug_ldap .= 'Search filter (group): '.$filter_group.\"<br/>\".\n                                    'Results : '.print_r(ldap_get_entries($ldapconn, $result_group), true).\"<br/>\";\n\n                        if (!ldap_count_entries($ldapconn, $result_group)) {\n                                $ldapConnection = \"Error - No entries found\";\n                        }\n                    }\n\n                    $debug_ldap .= 'Search filter : '.$filter.\"<br/>\".\n                            'Results : '.print_r(ldap_get_entries($ldapconn, $result), true).\"<br/>\";\n\n                    if (ldap_count_entries($ldapconn, $result)) {\n                        // try auth\n                        $result = ldap_get_entries($ldapconn, $result);\n                        $user_dn = $result[0]['dn'];\n                        $ldapbind = ldap_bind($ldapconn, $user_dn, $passwordClear);\n                        if ($ldapbind) {\n                            $ldapConnection = \"Successfully connected\";\n                        } else {\n                            $ldapConnection = \"Error - Cannot connect user!\";\n                        }\n                    }\n                } else {\n                    $ldapConnection = \"Error - Could not bind server!\";\n                }\n            } else {\n                $ldapConnection = \"Error - Could not connect to server!\";\n            }\n        } else {\n            $debug_ldap .= \"Get all ldap params: <br/>\".\n                '  - base_dn : '.$dataReceived[0]['ldap_domain_dn'].\"<br/>\".\n                '  - account_suffix : '.$dataReceived[0]['ldap_suffix'].\"<br/>\".\n                '  - domain_controllers : '.$dataReceived[0]['ldap_domain_controler'].\"<br/>\".\n                '  - port : '.$dataReceived[0]['ldap_port'].\"<br/>\".\n                '  - use_ssl : '.$dataReceived[0]['ldap_ssl_input'].\"<br/>\".\n                '  - use_tls : '.$dataReceived[0]['ldap_tls_input'].\"<br/>*********<br/>\";\n\n            $adldap = new SplClassLoader('adLDAP', '../includes/libraries/LDAP');\n            $adldap->register();\n\n            // Posix style LDAP handles user searches a bit differently\n            if ($dataReceived[0]['ldap_type'] === 'posix') {\n                $ldap_suffix = ','.$dataReceived[0]['ldap_suffix'].','.$dataReceived[0]['ldap_domain_dn'];\n            } elseif ($dataReceived[0]['ldap_type'] === 'windows' && $ldap_suffix === '') { //Multiple Domain Names\n                $ldap_suffix = $dataReceived[0]['ldap_suffix'];\n            }\n            $adldap = new adLDAP\\adLDAP(\n                array(\n                    'base_dn' => $dataReceived[0]['ldap_domain_dn'],\n                    'account_suffix' => $ldap_suffix,\n                    'domain_controllers' => explode(\",\", $dataReceived[0]['ldap_domain_controler']),\n                    'port' => $dataReceived[0]['ldap_port'],\n                    'use_ssl' => $dataReceived[0]['ldap_ssl_input'],\n                    'use_tls' => $dataReceived[0]['ldap_tls_input']\n                )\n            );\n\n            $debug_ldap .= \"Create new adldap object : \".$adldap->getLastError().\"<br/><br/>\";\n\n            // openLDAP expects an attribute=value pair\n            if ($dataReceived[0]['ldap_type'] === 'posix') {\n                $auth_username = $dataReceived[0]['ldap_user_attribute'].'='.$dataReceived[0]['username'];\n            } else {\n                $auth_username = $dataReceived[0]['username'];\n            }\n\n            // authenticate the user\n            if ($adldap->authenticate($auth_username, html_entity_decode($dataReceived[0]['username_pwd']))) {\n                $ldapConnection = \"Successfull\";\n            } else {\n                $ldapConnection = \"Not possible to get connected with this user\";\n            }\n\n            $debug_ldap .= \"After authenticate : \".$adldap->getLastError().\"<br/><br/>\".\n                \"ldap status : \".$ldapConnection; //Debug\n        }\n\n        echo '[{ \"option\" : \"admin_ldap_test_configuration\", \"results\" : \"'.$antiXss->xss_clean($debug_ldap).'\" }]';\n\n        break;\n\n    case \"is_backup_table_existing\":\n        // Check KEY and rights\n        if ($post_key !== $_SESSION['key']) {\n            echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n            break;\n        }\n\n        if ($result = DB::query(\"SHOW TABLES LIKE '\".prefix_table(\"sk_reencrypt_backup\").\"'\")) {\n            if (DB::count() === 1) {\n                echo \"1\";\n            } else {\n                echo \"0\";\n            }\n        } else {\n            echo \"0\";\n        }\n\n        break;\n}\n", "<?php\n/**\n * @file          import.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nuse Goodby\\CSV\\Import\\Standard\\Lexer;\nuse Goodby\\CSV\\Import\\Standard\\Interpreter;\nuse Goodby\\CSV\\Import\\Standard\\LexerConfig;\n\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// No time limit\nset_time_limit(0);\n\n// Set some constants for program readability\ndefine('KP_PATH', 0);\ndefine('KP_GROUP', 1);\ndefine('KP_TITLE', 2);\ndefine('KP_PASSWORD', 3);\ndefine('KP_USERNAME', 4);\ndefine('KP_URL', 5);\ndefine('KP_UUID', 6);\ndefine('KP_NOTES', 7);\n\n/*\n * sanitiseString\n *\n * Used to format the string ready for insertion in to the database\n */\n/**\n * @param string $crLFReplacement\n */\nfunction sanitiseString($str, $crLFReplacement)\n{\n    $str = preg_replace('#[\\r\\n]#', $crLFReplacement, $str);\n    $str = str_replace('\\\\', '&#92;', $str);\n    $str = str_replace('\"', \"&quot;\", $str);\n    if (!empty($str)) {\n        addslashes($str);\n    }\n    return $str;\n}\n\nglobal $k, $settings;\nheader(\"Content-type: text/html; charset=utf-8\");\nerror_reporting(E_ERROR);\ninclude $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n\n//Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// call needed functions\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n// connect to the server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n\n//Load AES\n$aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n$aes->register();\n\n//User's language loading\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n\n// Build query\nswitch (filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING)) {\n    //Check if import CSV file format is what expected\n    case \"import_file_format_csv\":\n        //load full tree\n        $tree->rebuild();\n        $tree = $tree->getDescendants();\n       // Init post variable\n        $post_operation_id = filter_input(INPUT_POST, 'file', FILTER_SANITIZE_NUMBER_INT);\n\n        // Get filename from database\n        $data = DB::queryFirstRow(\n            \"SELECT valeur\n            FROM \".$pre.\"misc\n            WHERE increment_id = %i\",\n            $post_operation_id\n        );\n\n        // Delete operation id\n        DB::delete(\n            prefix_table('misc'),\n            \"increment_id = %i\",\n            $post_operation_id\n        );\n\n        // do some initializations\n        $file = $SETTINGS['path_to_files_folder'].\"/\".$data['valeur'];\n        $size = 4096;\n        $separator = \",\";\n        $enclosure = '\"';\n        $fields_expected = array(\"Label\", \"Login\", \"Password\", \"URL\", \"Comments\"); //requiered fields from CSV\n        $importation_possible = true;\n        $display = \"<table>\";\n        $line_number = $prev_level = 0;\n        $account = $text = \"\";\n        $continue_on_next_line = false;\n\n        // Open file\n        if ($fp = fopen($file, \"r\")) {\n            // data from CSV\n            $valuesToImport = array();\n            // load libraries\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/Lexer.php';\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/Interpreter.php';\n            require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Goodby/CSV/Import/Standard/LexerConfig.php';\n\n            // Lexer configuration\n            $config = new LexerConfig();\n            $lexer = new Lexer($config);\n            $config->setIgnoreHeaderLine(\"true\");\n            // extract data from CSV file\n            $interpreter = new Interpreter();\n            $interpreter->addObserver(function (array $row) use (&$valuesToImport) {\n                $valuesToImport[] = array(\n                    'Label'     => $row[0],\n                    'Login'     => $row[1],\n                    'Password'  => $row[2],\n                    'url'       => $row[3],\n                    'Comments'  => $row[4],\n                );\n            });\n            $lexer->parse($file, $interpreter);\n\n            // extract one line\n            foreach ($valuesToImport as $key => $row) {\n                //Check number of fields. MUST be 5. if not stop importation\n                if (count($row) != 5) {\n                    $importation_possible = false;\n                    //Stop if file has not expected structure\n                    if ($importation_possible === false) {\n                        echo '[{\"error\":\"bad_structure\"}]';\n                        break;\n                    }\n                }\n\n                //If any comment is on several lines, then replace 'lf' character\n                $row['Comments'] = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), \"<br />\", $row['Comments']);\n\n                // Check if current line contains a \"<br />\" character in order to identify an ITEM on several CSV lines\n                if (substr_count('<br />', $row['Comments']) > 0 || substr_count('<br />', $row['Label']) > 0) {\n                    $continue_on_next_line = true;\n                    $comment .= addslashes($row['Label']);\n                } else {\n                    // Store in variable values from previous line\n                    if (!empty($account)) {\n                        if ($continue_on_next_line === false) {\n                            // Prepare listing that will be shown to user\n                            $display .= '<tr><td><input type=\\\"checkbox\\\" class=\\\"item_checkbox\\\" id=\\\"item_to_import-'.$line_number.'\\\" /></td><td><span id=\\\"item_text-'.$line_number.'\\\">'.$account.'</span><input type=\\\"hidden\\\" value=\\\"'.$account.'@|@'.$login.'@|@'.$pwd.'@|@'.$url.'@|@'.$comment.'@|@'.$line_number.'\\\" id=\\\"item_to_import_values-'.$line_number.'\\\" /></td></tr>';\n\n                            // Initialize this variable in order to restart from scratch\n                            $account = \"\";\n                        }\n                    }\n                }\n\n                // Get values of current line\n                if ($account == \"\" && $continue_on_next_line === false) {\n                    $account = htmlspecialchars($row['Label'], ENT_QUOTES, 'UTF-8');\n                    $login = htmlspecialchars($row['Login'], ENT_QUOTES, 'UTF-8');\n                    $pwd = str_replace('\"', \"&quot;\", $row['Password']);\n                    $url = addslashes($row['url']);\n                    $to_find = array(\"\\\"\", \"'\");\n                    $to_ins = array(\"&quot\", \"&#39;\");\n                    $comment = htmlentities(addslashes(str_replace($to_find, $to_ins, $row['Comments'])), ENT_QUOTES, 'UTF-8');\n\n                    $continue_on_next_line = false;\n                }\n\n                //increment number of lines found\n                $line_number++;\n            }\n            // close file\n            fclose($fp);\n\n            // remove file\n            fileDelete($file);\n        } else {\n            echo '[{\"error\":\"cannot_open\"}]';\n            break;\n        }\n\n        if ($line_number > 0) {\n            //add last line\n            $display .= '<tr><td><input type=\\\"checkbox\\\" class=\\\"item_checkbox\\\" id=\\\"item_to_import-'.$line_number.'\\\" /></td><td><span id=\\\"item_text-'.$line_number.'\\\">'.$account.'</span><input type=\\\"hidden\\\" value=\\\"'.$account.'@|@'.$login.'@|@'.str_replace('\"', \"&quote;\", $pwd).'@|@'.$url.'@|@'.$comment.'@|@'.$line_number.'\\\" id=\\\"item_to_import_values-'.$line_number.'\\\" /></td></tr>';\n\n            // Add a checkbox for select/unselect all others\n            $display .= '<tr><td colspan=\\\"2\\\"><br><input type=\\\"checkbox\\\" id=\\\"item_all_selection\\\" />&nbsp;'.$LANG['all'].'</td></tr>';\n\n            // Prepare a list of all folders that the user can choose\n            $display .= '</table><div style=\\\"margin:10px 0 10px 0;\\\"><label><b>'.$LANG['import_to_folder'].'</b></label>&nbsp;<select id=\\\"import_items_to\\\" style=\\\"width:87%;\\\">';\n            foreach ($tree as $t) {\n                if (in_array($t->id, $_SESSION['groupes_visibles'])) {\n                    $ident = \"\";\n                    for ($x = 1; $x < $t->nlevel; $x++) {\n                        $ident .= \"&nbsp;&nbsp;\";\n                    }\n                    if (null !== filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT) && filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT) === $t->id) {\n                        $selected = \" selected\";\n                    } else {\n                        $selected = \"\";\n                    }\n                    if ($prev_level != null && $prev_level < $t->nlevel) {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    } elseif ($prev_level != null && $prev_level == $t->nlevel) {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    } else {\n                        $display .= '<option value=\\\"'.$t->id.'\\\"'.$selected.'>'.$ident.str_replace(array(\"&\", '\"'), array(\"&amp;\", \"&quot;\"), $t->title).'</option>';\n                    }\n                    $prev_level = $t->nlevel;\n                }\n            }\n            $display .= '</select></div>';\n\n            // Show results to user.\n            echo '[{\"error\":\"no\" , \"output\" : \"'.$display.'\"}]';\n        }\n\n        break;\n\n    //Insert into DB the items the user has selected\n    case \"import_items\":\n        //decrypt and retreive data in JSON format\n        $dataReceived = (Encryption\\Crypt\\aesctr::decrypt(\n            filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING),\n            $_SESSION['key'],\n            256\n        ));\n\n        //Get some info about personal folder\n        if (filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT) === $_SESSION['user_id']) {\n            $personalFolder = 1;\n        } else {\n            $personalFolder = 0;\n        }\n        $data_fld = DB::queryFirstRow(\n            \"SELECT title\n            FROM \".prefix_table(\"nested_tree\").\"\n            WHERE id = %i\",\n            filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT)\n        );\n\n        //Prepare variables\n        $listItems = htmlspecialchars_decode($dataReceived);\n        $list = \"\";\n\n        foreach (explode('@_#sep#_@', stripslashes($listItems)) as $item) {\n            //For each item, insert into DB\n            $item = explode('@|@', $item); //explode item to get all fields\n\n            //Encryption key\n            if ($personalFolder == 1) {\n                $encrypt = cryption(\n                    $item[2],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"encrypt\"\n                );\n            } else {\n                $encrypt = cryption(\n                    $item[2],\n                    \"\",\n                    \"encrypt\"\n                );\n            }\n\n            // Insert new item in table ITEMS\n            DB::insert(\n                prefix_table(\"items\"),\n                array(\n                    'label' => substr($item[0], 0, 500),\n                    'description' => empty($item[4]) ? '' : $item[4],\n                    'pw' => $encrypt['string'],\n                    'pw_iv' => $encrypt['iv'],\n                    'url' => empty($item[3]) ? '' : substr($item[3], 0, 500),\n                    'id_tree' => filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT),\n                    'login' => empty($item[1]) ? '' : substr($item[1], 0, 200),\n                    'anyone_can_modify' => filter_input(INPUT_POST, 'import_csv_anyone_can_modify', FILTER_SANITIZE_STRING) === \"true\" ? 1 : 0\n                )\n            );\n            $newId = DB::insertId();\n\n            //if asked, anyone in role can modify\n            if (null !== filter_input(INPUT_POST, 'import_csv_anyone_can_modify_in_role', FILTER_SANITIZE_STRING)\n                && filter_input(INPUT_POST, 'import_csv_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) === \"true\"\n            ) {\n                foreach ($_SESSION['arr_roles'] as $role) {\n                    DB::insert(\n                        prefix_table(\"restriction_to_roles\"),\n                        array(\n                            'role_id' => $role['id'],\n                            'item_id' => $newId\n                        )\n                    );\n                }\n            }\n\n            // Insert new item in table LOGS_ITEMS\n            DB::insert(\n                prefix_table(\"log_items\"),\n                array(\n                    'id_item' => $newId,\n                    'date' => time(),\n                    'id_user' => $_SESSION['user_id'],\n                    'action' => 'at_creation'\n                )\n            );\n\n            if (empty($list)) {\n                $list = $item[5];\n            } else {\n                $list .= \";\".$item[5];\n            }\n\n            //Add entry to cache table\n            DB::insert(\n                prefix_table(\"cache\"),\n                array(\n                    'id' => $newId,\n                    'label' => substr($item[0], 0, 500),\n                    'description' => empty($item[4]) ? '' : $item[4],\n                    'id_tree' => filter_input(INPUT_POST, 'folder', FILTER_SANITIZE_NUMBER_INT),\n                    'url' => \"0\",\n                    'perso' => $personalFolder == 0 ? 0 : 1,\n                    'login' => empty($item[1]) ? '' : substr($item[1], 0, 500),\n                    'folder' => $data_fld['title'],\n                    'author' => $_SESSION['user_id'],\n                    'timestamp' => time(),\n                    'tags' => '',\n                    'restricted_to' => '0',\n                    'renewal_period' => \"0\",\n                    'timestamp' => time()\n                )\n            );\n        }\n        echo '[{\"items\":\"'.$list.'\"}]';\n        break;\n\n    //Check if import KEEPASS file format is what expected\n    case \"import_file_format_keepass\":\n        //Initialization\n        $root = $meta = $group = $entry = $key = $title = $notes = $pwd = $username = $url = $notKeepassFile = $newItem = $history = $generatorFound = false;\n        $name = $levelInProgress = $previousLevel = $fullPath = $historyLevel = $path = $display = $keepassVersion = \"\";\n        $numGroups = $numItems = 0;\n        $temparray = $arrFolders = array();\n        $levelMin = 2;\n        $foldersSeparator = '@&##&@';\n        $itemsSeparator = '<=|#|=>';\n        $lineEndSeparator = '@*1|#9*|@';\n\n        //prepare CACHE files\n        $cacheFileName = $SETTINGS['path_to_files_folder'].\"/cpassman_cache_\".md5(time().mt_rand());\n        $cacheFileNameFolder = $cacheFileName.\"_folders\";\n        $cacheFile = fopen($cacheFileName, \"w\");\n        $cacheFileF = fopen($cacheFileNameFolder, \"w\");\n        $logFileName = \"/keepassImport_\".date('YmdHis').\".log\";\n        $cacheLogFile = fopen($SETTINGS['path_to_files_folder'].$logFileName, 'w');\n\n        // Init post variable\n        $post_operation_id = filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING);\n\n        // Get filename from database\n        $data = DB::queryFirstRow(\n            \"SELECT valeur\n            FROM \".$pre.\"misc\n            WHERE increment_id = %i\",\n            $post_operation_id\n        );\n\n        // Delete operation id\n        DB::delete(\n            prefix_table('misc'),\n            \"increment_id = %i\",\n            $post_operation_id\n        );\n\n        // do some initializations\n        $file = $data['valeur'];\n\n        //read xml file\n        if (file_exists($SETTINGS['path_to_files_folder'].\"/\".$file)) {\n            $xml = simplexml_load_file(\n                $SETTINGS['path_to_files_folder'].\"/\".$file\n            );\n        }\n\n        /**\n        Recursive function that will permit to read each level of XML nodes\n         */\n        function recursiveKeepassXML($xmlRoot, $xmlLevel = 0)\n        {\n            global $meta, $root, $group, $name, $entry, $levelMin, $title, $notes, $pwd, $username, $url,\n                $newItem, $temparray, $history, $levelInProgress, $historyLevel,\n                $path, $previousLevel, $generatorFound, $cacheFile, $cacheFileF, $numGroups,\n                $numItems, $foldersSeparator, $itemsSeparator, $keepassVersion, $arrFolders;\n\n            $groupsArray = array();\n\n            // For each node, get the name and SimpleXML balise\n            foreach ($xmlRoot as $nom => $elem) {\n                /*\n                * check if file is generated by keepass 1\n                * key \"pwentry\" is only used in KP1.xx XML files\n                */\n                if ($nom == \"pwentry\") {\n                    if (empty($keepassVersion)) {\n                        $keepassVersion = 1;\n                        $generatorFound = true;\n                        $entry = true;\n                    } else {\n                        $entry = true;\n                    }\n\n                    //get children\n                    $xmlChildren = $elem->children();\n\n                    //recursive call\n                    recursiveKeepassXML($xmlChildren, $xmlLevel + 1);\n                }\n                //IMPORTING KEEPASS 1 XML FILE\n                if ($keepassVersion == 1) {\n                    if ($entry === true && $nom == \"expiretime\") {\n                        //save previous keepass entry\n                        $tree = preg_replace('/\\\\\\\\/', $foldersSeparator, $temparray['tree']);\n                        fputs(\n                            $cacheFile,\n                            $tree.$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.$temparray[KP_TITLE].\n                            $itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].\n                            $itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n                        );\n\n                        if (!in_array($temparray['tree'], $arrFolders)) {\n                            fwrite($cacheFileF, $tree.\"\\n\");\n                            array_push($arrFolders, $temparray['tree']);\n                        }\n\n                        $temparray = array();\n                        $newItem++;\n                    }\n\n                    if ($entry === true && $nom == \"group\") {\n                        $temparray[KP_GROUP] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                        foreach ($elem->attributes() as $attributeskey0 => $attributesvalue1) {\n                            if ($attributeskey0 == \"tree\") {\n                                $path = explode('\\\\', $attributesvalue1);\n                                if (count($path) > 1) {\n                                    unset($path[0]);\n                                    $temparray['tree'] = implode('\\\\', $path).'\\\\'.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray['tree'] = $temparray[KP_GROUP];\n                                }\n                            }\n                        }\n                        $numGroups++;\n                    } elseif ($entry === true && $nom == \"title\") {\n                        $temparray[KP_TITLE] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"username\") {\n                        $temparray[KP_USERNAME] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"url\") {\n                        $temparray[KP_URL] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"uuid\") {\n                        $temparray[KP_UUID] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                    } elseif ($entry === true && $nom == \"password\") {\n                        $temparray[KP_PW] = sanitiseString($elem, '');\n                    } elseif ($entry === true && $nom == \"notes\") {\n                        $temparray[KP_NOTES] = sanitiseString($elem, '');\n                    }\n                }\n\n                /*\n                   * check if file is generated by keepass 2\n                */\n                if (trim($elem) == \"\" && $keepassVersion != 1) {\n                    //check if file is generated by keepass 2\n                    if ($nom == \"Meta\") {\n                        $meta = true;\n                    }\n                    if ($nom == \"Root\") {\n                        $root = true;\n                    }\n\n                    if ($nom == \"Group\") {\n                        $group = true;\n                        $entry = false;\n                        $name = \"\";\n\n                        // recap previous info\n                        if (!empty($temparray[KP_TITLE])) {\n                            //store data\n                            fputs(\n                                $cacheFile,\n                                $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].\n                                $itemsSeparator.$temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].\n                                $itemsSeparator.$temparray[KP_USERNAME].$itemsSeparator.\n                                $temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n                            );\n\n                            //Clean temp array\n                            $temparray[KP_TITLE] = $temparray[KP_NOTES] = $temparray[KP_PW] = $temparray[KP_USERNAME] = $temparray[KP_URL] = \"\";\n\n                            //increment number\n                            $numItems++;\n                        }\n                        $historyLevel = 0;\n                    }\n\n                    //History node needs to be managed in order to not polluate final list\n                    if ($nom == \"History\") {\n                        $history = true;\n                        $entry = false;\n                        $historyLevel = $xmlLevel;\n                    }\n\n                    if ($nom == \"Entry\" && ($xmlLevel < $historyLevel || empty($historyLevel))) {\n                        $entry = true;\n                        $group = false;\n\n                        // recap previous info\n                        if (!empty($temparray[KP_TITLE])) {\n                            //store data\n                            fputs($cacheFile, $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.$temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].$itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\");\n\n                            //Clean temp array\n                            $temparray[KP_TITLE] = $temparray[KP_NOTES] = $temparray[KP_PW] = $temparray[KP_USERNAME] = $temparray[KP_URL] = $temparray[KP_UUID] = \"\";\n\n                            //increment number\n                            $numItems++;\n                        }\n                        $historyLevel = 0;\n                    }\n\n                    //get children\n                    $xmlChildren = $elem->children();\n\n                    //recursive call\n                    recursiveKeepassXML($xmlChildren, $xmlLevel + 1);\n\n                    //IMPORTING KEEPASS 2 XML FILE\n                } elseif ($keepassVersion != 1) {\n                    // exit if XML file not generated by KeePass\n                    if ($meta === true && $nom == \"Generator\" && $elem == \"KeePass\") {\n                        $generatorFound = true;\n                        $keepassVersion = 2;\n                        break;\n                    } elseif ($root === true && $xmlLevel > $levelMin) {\n                        //Check each node name and get data from some of them\n                        if ($entry === true && $nom == \"Key\" && $elem == \"Title\") {\n                            $title = true;\n                            $notes = $pwd = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"Notes\") {\n                            $notes = true;\n                            $title = $pwd = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"UUID\") {\n                            $temparray[KP_UUID] = $elem;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"Password\") {\n                            $pwd = true;\n                            $notes = $title = $url = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"URL\") {\n                            $url = true;\n                            $notes = $pwd = $title = $username = false;\n                        } elseif ($entry === true && $nom == \"Key\" && $elem == \"UserName\") {\n                            $username = true;\n                            $notes = $pwd = $url = $title = false;\n                        } elseif ($group === true && $nom == \"Name\") {\n                            $temparray[KP_GROUP] = addslashes(preg_replace('#[\\r\\n]#', '', $elem));\n                            $temparray['level'] = $xmlLevel;\n                            //build current path\n                            if ($xmlLevel > $levelInProgress) {\n                                if (!empty($temparray[KP_PATH])) {\n                                    $temparray[KP_PATH] .= $foldersSeparator.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                }\n                            } elseif ($xmlLevel == $levelInProgress) {\n                                if ($levelInProgress == 3) {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = substr($temparray[KP_PATH], 0, strrpos($temparray[KP_PATH], $foldersSeparator) + strlen($foldersSeparator)).$temparray[KP_GROUP];\n                                }\n                            } else {\n                                $diff = abs($xmlLevel - $levelInProgress) + 1;\n                                $tmp = explode($foldersSeparator, $temparray[KP_PATH]);\n                                $temparray[KP_PATH] = \"\";\n                                for ($x = 0; $x < (count($tmp) - $diff); $x++) {\n                                    if (!empty($temparray[KP_PATH])) {\n                                        $temparray[KP_PATH] = $temparray[KP_PATH].$foldersSeparator.$tmp[$x];\n                                    } else {\n                                        $temparray[KP_PATH] = $tmp[$x];\n                                    }\n                                }\n                                if (!empty($temparray[KP_PATH])) {\n                                    $temparray[KP_PATH] .= $foldersSeparator.$temparray[KP_GROUP];\n                                } else {\n                                    $temparray[KP_PATH] = $temparray[KP_GROUP];\n                                }\n                            }\n\n                            //store folders\n                            if (!in_array($temparray[KP_PATH], $groupsArray)) {\n                                fwrite($cacheFileF, $temparray[KP_PATH].\"\\n\");\n                                array_push($groupsArray, $temparray[KP_PATH]);\n                                //increment number\n                                $numGroups++;\n                            }\n\n                            //Store actual level\n                            $levelInProgress = $xmlLevel;\n                            $previousLevel = $temparray[KP_GROUP];\n                        } elseif ($title === true && $nom == \"Value\") {\n                            $title = false;\n                            $temparray[KP_TITLE] = sanitiseString($elem, '');\n                        } elseif ($notes === true && $nom == \"Value\") {\n                            $notes = false;\n                            $temparray[KP_NOTES] = sanitiseString($elem, '');\n                        } elseif ($pwd === true && $nom == \"Value\") {\n                            $pwd = false;\n                            $temparray[KP_PW] = sanitiseString($elem, '');\n                        } elseif ($url === true && $nom == \"Value\") {\n                            $url = false;\n                            $temparray[KP_URL] = sanitiseString($elem, '');\n                        } elseif ($username === true && $nom == \"Value\") {\n                            $username = false;\n                            $temparray[KP_USERNAME] = sanitiseString($elem, '');\n                        }\n                    }\n                }\n            }\n        }\n\n        fputs($cacheLogFile, date('H:i:s ').\"Writing XML File \".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING).\"\\n\");\n\n        // Go through each node of XML file\n        recursiveKeepassXML($xml);\n\n        //Stop if not a keepass file\n        if ($generatorFound === false) {\n            //Close file & delete it\n            fclose($cacheFileF);\n            fclose($cacheFile);\n            unlink($cacheFileName);\n            unlink($cacheFileNameFolder);\n            unlink($SETTINGS['url_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING));\n\n            fputs($cacheLogFile, date('H:i').$LANG['import_error_no_read_possible_kp'].\"\\n\");\n\n            echo '[{\"error\":\"not_kp_file\" , \"message\":\"'.$LANG['import_error_no_read_possible_kp'].'\"}]';\n            break;\n        }\n\n        //save last item\n        if (!empty($temparray[KP_TITLE])) {\n            //store data\n            fputs(\n                $cacheFile,\n                $temparray[KP_PATH].$itemsSeparator.$temparray[KP_GROUP].$itemsSeparator.\n                $temparray[KP_TITLE].$itemsSeparator.$temparray[KP_PW].$itemsSeparator.$temparray[KP_USERNAME].\n                $itemsSeparator.$temparray[KP_URL].$itemsSeparator.$temparray[KP_UUID].$itemsSeparator.$temparray[KP_NOTES].\"\\n\"\n            );\n\n            //increment number\n            $numItems++;\n        }\n\n        ##################\n        ## STARTING IMPORTING IF NO ERRORS OR NOT EMPTY\n        ##################\n        if ($numItems > 0 || $numGroups > 0) {\n            // Write in file\n            fputs($cacheLogFile, date('H:i:s ').$LANG['nb_folders'].' '.$numGroups.\"\\n\");\n            fputs($cacheLogFile, date('H:i:s ').$LANG['nb_items'].' '.$numItems.\"\\n\");\n\n            $import_perso = false;\n            $itemsArray = array();\n            $text = '<span class=\"fa fa-folder-open\"></span>&nbsp;'.$LANG['nb_folders'].': '.\n                $numGroups.'<br /><span class=\"fa fa-tag\"></span>>&nbsp;'.$LANG['nb_items'].': '.\n                $numItems.'<br /><br />';\n            $post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_STRING);\n\n            // If personal folder, then remove the suffix in ID\n            if (substr_count($post_destination, '-perso') > 0) {\n                $post_destination = str_replace('-perso', '', $post_destination);\n            }\n\n            // If destination is not ROOT then get the complexity level\n            if (strpos($post_destination, \"perso\") !== 0) {\n                $levelPwComplexity = 50;\n                $startPathLevel = 1;\n                $import_perso = true;\n            } elseif ($post_destination > 0) {\n                $data = DB::queryFirstRow(\n                    \"SELECT m.valeur as value, t.nlevel as nlevel\n                    FROM \".prefix_table(\"misc\").\" as m\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as t ON (m.intitule = t.id)\n                    WHERE m.type = %s AND m.intitule = %s\",\n                    \"complex\",\n                    mysqli_escape_string($link, $post_destination)\n                );\n                $levelPwComplexity = $data['value'];\n                $startPathLevel = $data['nlevel'];\n            } else {\n                $levelPwComplexity = 50;\n                $startPathLevel = 0;\n            }\n\n            //Get all folders from file\n            fclose($cacheFileF);\n            $cacheFileF = fopen($cacheFileNameFolder, \"r\");\n\n            //Create folders\n            $i = 1;\n            $level = 0;\n            $foldersArray = array();\n            $nbFoldersImported = 0;\n\n            fputs($cacheLogFile, date('H:i:s ').\"Creating Folders\\n\");\n            $results = \"Folders\\n\\n\";\n\n            while (!feof($cacheFileF)) {\n                $folder = fgets($cacheFileF, 4096);\n                if (!empty($folder)) {\n                    $folder = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), '', $folder);\n                    //get number of levels in path\n                    $path = explode($foldersSeparator, $folder);\n                    $folderLevel = count($path);\n\n                    //get folder name\n                    if (strrpos($folder, $foldersSeparator) > 0) {\n                        $fold = substr($folder, strrpos($folder, $foldersSeparator) + strlen($foldersSeparator));\n                        $parent = implode($foldersSeparator, array_slice($path, 0, -1));\n                        $parent_id = $foldersArray[$parent]['id'];\n                    } else {\n                        $fold = $folder;\n                        $parent_id = $post_destination; //permits to select the folder destination\n                    }\n\n                    $fold = stripslashes($fold);\n                    //create folder - if not exists at the same level\n                    DB::query(\n                        \"SELECT * FROM \".prefix_table(\"nested_tree\").\"\n                        WHERE nlevel = %i AND title = %s AND parent_id = %i LIMIT 1\",\n                        intval($folderLevel + $startPathLevel),\n                        $fold,\n                        $parent_id\n                    );\n                    $results .= str_replace($foldersSeparator, '\\\\', $folder);\n                    $counter = DB::count();\n                    if ($counter == 0) {\n                        $results .= \" - Inserting\\n\";\n                        //do query\n                        DB::insert(\n                            prefix_table(\"nested_tree\"),\n                            array(\n                                'parent_id' => $parent_id,\n                                'title' => stripslashes($fold),\n                                'nlevel' => $folderLevel\n                            )\n                        );\n                        $id = DB::insertId();\n                        //Add complexity level => level is set to \"medium\" by default.\n                        DB::insert(\n                            prefix_table(\"misc\"),\n                            array(\n                                'type' => 'complex',\n                                'intitule' => $id,\n                                'valeur' => $levelPwComplexity\n                            )\n                        );\n\n                        //For each role to which the user depends on, add the folder just created.\n                        foreach ($_SESSION['arr_roles'] as $role) {\n                            DB::insert(\n                                prefix_table(\"roles_values\"),\n                                array(\n                                    'role_id' => $role['id'],\n                                    'folder_id' => $id,\n                                    'type' => \"W\"\n                                )\n                            );\n                        }\n\n                        //Add this new folder to the list of visible folders for the user.\n                        array_push($_SESSION['groupes_visibles'], $id);\n\n                        //increment number of imported folders\n                        $nbFoldersImported++;\n                    } else {\n                        $results .= \" - Skipped\\n\";\n                        //get folder actual ID\n                        $data = DB::queryFirstRow(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\"\n                            WHERE nlevel = %i AND title = %s AND parent_id = %i\",\n                            intval($folderLevel + $startPathLevel),\n                            $fold,\n                            $parent_id\n                        );\n                        $id = $data['id'];\n                    }\n\n                    //store in array\n                    $foldersArray[$folder] = array(\n                        'folder' => $fold,\n                        'nlevel' => $folderLevel,\n                        'id' => $id\n                    );\n\n                    $_SESSION['nb_folders']++;\n                    $i++;\n                }\n            }\n\n            $results .= \"\\n\\nItems\\n\\n\";\n            //if no new folders them inform\n            if ($nbFoldersImported > 0) {\n                fputs($cacheLogFile, date('H:i:s ').\"Setting User Rights\\n\");\n                //Refresh the rights of actual user\n                identifyUserRights(\n                    implode(';', $_SESSION['groupes_visibles']).';'.$newId,\n                    $_SESSION['groupes_interdits'],\n                    $_SESSION['is_admin'],\n                    $_SESSION['fonction_id']\n                );\n\n                fputs($cacheLogFile, date('H:i:s ').\"Rebuilding Tree\\n\");\n                //rebuild full tree\n                $tree->rebuild();\n            }\n\n            fputs($cacheLogFile, date('H:i:s ').\"Importing Items\\n\");\n\n            // Now import ITEMS\n            $nbItemsImported = 0;\n            $count = 0;\n\n            //Get some info about personal folder\n            if ($post_destination == $_SESSION['user_id']) {\n                $personalFolder = 1;\n            } else {\n                $personalFolder = 0;\n            }\n\n            //prepare file to be read\n            fclose($cacheFile);\n            $cacheFile = fopen($cacheFileName, \"r\");\n\n            while (!feof($cacheFile)) {\n                //prepare an array with item to import\n                $full_item = fgets($cacheFile, 8192);\n                $full_item = str_replace(array(\"\\r\\n\", \"\\n\", \"\\r\"), '', $full_item);\n                $item = explode($itemsSeparator, $full_item);\n\n                $count++;\n                if (!($count % 10)) {\n                    fputs($cacheLogFile, date('H:i:s ').\"  Imported $count items (\".number_format(($count / $numItems) * 100, 1).\")\\n\");\n                }\n\n                if (!empty($item[KP_TITLE])) {\n                    //$count++;\n                    //check if not exists\n                    $results .= str_replace($foldersSeparator, \"\\\\\", $item[KP_PATH]).'\\\\'.$item[KP_TITLE];\n\n                    $pwd = $item[KP_PASSWORD];\n\n                    //Get folder label\n                    if (count($foldersArray) == 0 || empty($item[KP_PATH])) {\n                        $folderId = $post_destination;\n                    } else {\n                        $folderId = $foldersArray[$item[KP_PATH]]['id'];\n                    }\n                    $data = DB::queryFirstRow(\n                        \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        intval($folderId)\n                    );\n\n                    // escape if folderId is empty\n                    if (!empty($folderId)) {\n                        $results .= \" - Inserting\\n\";\n\n                        // prepare PW\n                        if ($import_perso === true) {\n                            $encrypt = cryption(\n                                $pwd,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                        } else {\n                            $encrypt = cryption(\n                                $pwd,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        //ADD item\n                        DB::insert(\n                            prefix_table(\"items\"),\n                            array(\n                                'label' => substr(stripslashes($item[KP_TITLE]), 0, 500),\n                                'description' => stripslashes(str_replace($lineEndSeparator, '<br />', $item[KP_NOTES])),\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => $encrypt['iv'],\n                                'url' => substr(stripslashes($item[KP_URL]), 0, 500),\n                                'id_tree' => $folderId,\n                                'login' => substr(stripslashes($item[KP_USERNAME]), 0, 500),\n                                'anyone_can_modify' => filter_input(INPUT_POST, 'import_kps_anyone_can_modify', FILTER_SANITIZE_STRING) === \"true\" ? 1 : 0\n                            )\n                        );\n                        $newId = DB::insertId();\n\n                        //if asked, anyone in role can modify\n                        if (null !== filter_input(INPUT_POST, 'import_kps_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) && filter_input(INPUT_POST, 'import_kps_anyone_can_modify_in_role', FILTER_SANITIZE_STRING) === \"true\") {\n                            foreach ($_SESSION['arr_roles'] as $role) {\n                                DB::insert(\n                                    prefix_table(\"restriction_to_roles\"),\n                                    array(\n                                        'role_id' => $role['id'],\n                                        'item_id' => $newId\n                                    )\n                                );\n                            }\n                        }\n\n                        //Add log\n                        DB::insert(\n                            prefix_table(\"log_items\"),\n                            array(\n                                'id_item' => $newId,\n                                'date' => time(),\n                                'id_user' => $_SESSION['user_id'],\n                                'action' => 'at_creation',\n                                'raison' => 'at_import'\n                            )\n                        );\n\n                        //Add entry to cache table\n                        DB::insert(\n                            prefix_table(\"cache\"),\n                            array(\n                                'id' => $newId,\n                                'label' => substr(stripslashes($item[KP_TITLE]), 0, 500),\n                                'description' => stripslashes(str_replace($lineEndSeparator, '<br />', $item[KP_NOTES])),\n                                'url' => (isset($item[KP_NOTES]) && !empty($item[KP_NOTES])) ? $item[KP_NOTES] : \"0\",\n                                'tags' => \"\",\n                                'id_tree' => $folderId,\n                                'perso' => $personalFolder == 0 ? 0 : 1,\n                                'login' => substr(stripslashes($item[KP_USERNAME]), 0, 500),\n                                'restricted_to' => \"0\",\n                                'folder' => $data['title'],\n                                'author' => $_SESSION['user_id'],\n                                'renewal_period' => \"0\",\n                                'timestamp' => time()\n                            )\n                        );\n\n                        //increment number of imported items\n                        $nbItemsImported++;\n                    } else {\n                        $results .= \" - \".$item[KP_TITLE].\" was not imported\\n\";\n                    }\n                    fputs($cacheLogFile, date('H:i:s ').\" \".$results.\"\\n\");\n                }\n            }\n\n            //SHow finished\n            $text .= \"Folders imported: $nbFoldersImported<br />\";\n            $text .= \"Items imported: $nbItemsImported<br />\";\n            $text .= '</div><br /><br /><b>'.$LANG['import_kp_finished'].'</b>';\n            $text .= '<a href=\\''.$SETTINGS['url_to_files_folder'].'/'.$logFileName.'\\' target=\\'_blank\\'>'.$LANG['pdf_download'].'</a>';\n\n            fputs($cacheLogFile, date('H:i:s ').\"Import finished\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Statistics\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Folders imported: $nbFoldersImported\\n\");\n            fputs($cacheLogFile, date('H:i:s ').\"Items imported: $nbItemsImported\\n\\n\".$results);\n\n            //Delete cache file\n            fclose($cacheFileF);\n            fclose($cacheFile);\n            fclose($cacheLogFile);\n            unlink($cacheFileName);\n            unlink($cacheFileNameFolder);\n            unlink($SETTINGS['path_to_files_folder'].\"/\".filter_input(INPUT_POST, 'file', FILTER_SANITIZE_STRING));\n\n            //Display all messages to user\n            echo '[{\"error\":\"no\" , \"message\":\"'.str_replace('\"', \"&quote;\", strip_tags($text, '<br /><a><div><b><br>')).'\"}]';\n        } else {\n            echo '[{\"error\":\"yes\" , \"message\":\"\"}]';\n        }\n        break;\n}\n\nspl_autoload_register(function ($class) {\n    $prefix = 'League\\\\Csv\\\\';\n    $base_dir = __DIR__.'/src/';\n    $len = strlen($prefix);\n    if (strncmp($prefix, $class, $len) !== 0) {\n        // no, move to the next registered autoloader\n        return;\n    }\n    $relative_class = substr($class, $len);\n    $file = $base_dir.str_replace('\\\\', '/', $relative_class).'.php';\n    if (file_exists($file)) {\n        require $file;\n    }\n});\n", "<?php\n/**\n * @file          items.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'home') === false) {\n    // Not allowed page\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\n/**\n * Define Timezone\n**/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Pragma: no-cache');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n\n// Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n// phpcrypt\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare POST variables\n$post_page = filter_input(INPUT_POST, 'page', FILTER_SANITIZE_STRING);\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_STRING);\n$post_cat = filter_input(INPUT_POST, 'cat', FILTER_SANITIZE_STRING);\n$post_receipt = filter_input(INPUT_POST, 'receipt', FILTER_SANITIZE_STRING);\n$post_item_id = filter_input(INPUT_POST, 'item_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id_tree = filter_input(INPUT_POST, 'id_tree', FILTER_SANITIZE_NUMBER_INT);\n$post_folder_id = filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_NUMBER_INT);\n$post_source = filter_input(INPUT_POST, 'source', FILTER_SANITIZE_NUMBER_INT);\n$post_user_id = filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT);\n$post_iFolderId = filter_input(INPUT_POST, 'iFolderId', FILTER_SANITIZE_NUMBER_INT);\n\n// Do asked action\nif (null !== $post_type) {\n    switch ($post_type) {\n        /*\n        * CASE\n        * creating a new ITEM\n        */\n        case \"new_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            // Prepare variables\n            $label = filter_var(htmlspecialchars_decode($dataReceived['label']), FILTER_SANITIZE_STRING);\n            $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n            $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n            $tags = htmlspecialchars_decode($dataReceived['tags']);\n\n            // is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (!in_array($dataReceived['categorie'], array_keys($_SESSION['list_folders_limited']))\n                    && !in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])\n                    && !in_array($dataReceived['categorie'], $_SESSION['personal_visible_groups_list'])\n                ) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            } else {\n                if (!in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true &&\n                !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // is pwd empty?\n            if (empty($pw) &&\n                isset($_SESSION['user_settings']['create_item_without_password']) &&\n                $_SESSION['user_settings']['create_item_without_password'] !== '1'\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                break;\n            }\n\n            // Check length\n            if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                break;\n            }\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = \"\";\n            $data = DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"items\").\"\n                WHERE label = %s AND inactif = %i\",\n                $label,\n                0\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (isset($SETTINGS['duplicate_item'])\n                && $SETTINGS['duplicate_item'] === '0'\n                && $dataReceived['salt_key_set'] === '1'\n                && isset($dataReceived['salt_key_set'])\n                && $dataReceived['is_pf'] === '1'\n                && isset($dataReceived['is_pf'])\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && $itemExists === 0)\n                ||\n                (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '1')\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user_settings']['create_item_without_password'])\n                    && $_SESSION['user_settings']['create_item_without_password'] !== '1'\n                    ) ||\n                    !empty($pw)\n                ) {\n                    // encrypt PW\n                    if ($dataReceived['salt_key_set'] === '1' &&\n                        isset($dataReceived['salt_key_set']) &&\n                        $dataReceived['is_pf'] === '1' &&\n                        isset($dataReceived['is_pf'])\n                    ) {\n                        $passwd = cryption(\n                            $pw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                        $restictedTo = $_SESSION['user_id'];\n                    } else {\n                        $passwd = cryption(\n                            $pw,\n                            \"\",\n                            \"encrypt\"\n                        );\n                    }\n                } else {\n                    $passwd['string'] = '';\n                }\n\n                if (!empty($passwd[\"error\"])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_ENCRYPTION\", \"msg\" => $passwd[\"error\"]), \"encode\");\n                    break;\n                }\n\n                // ADD item\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => $label,\n                        'description' => $dataReceived['description'],\n                        'pw' => $passwd['string'],\n                        'pw_iv' => \"\",\n                        'email' => noHTML($dataReceived['email']),\n                        'url' => noHTML($url),\n                        'id_tree' => $dataReceived['categorie'],\n                        'login' => noHTML($login),\n                        'inactif' => '0',\n                        'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                        'perso' => (isset($dataReceived['salt_key_set']) && $dataReceived['salt_key_set'] === '1' && isset($dataReceived['is_pf']) && $dataReceived['is_pf'] === '1') ? '1' : '0',\n                        'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                        'complexity_level' => $dataReceived['complexity_level']\n                        )\n                );\n                $newID = DB::insertId();\n                $pw = $passwd['string'];\n\n                // update fields\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                        $field_data = explode(\"~~\", $field);\n                        if (count($field_data) > 1 && !empty($field_data[1])) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                \"SELECT encrypted_data\n                                FROM \".prefix_table(\"categories\").\"\n                                WHERE id = %i\",\n                                $field_data[0]\n                            );\n                            if ($dataTmp['encrypted_data'] === '1') {\n                                $encrypt = cryption(\n                                    $field_data[1],\n                                    \"\",\n                                    \"encrypt\"\n                                );\n                                $enc_type = \"defuse\";\n                            } else {\n                                $encrypt['string'] = $field_data[1];\n                                $enc_type = \"not_set\";\n                            }\n\n\n                            DB::insert(\n                                prefix_table('categories_items'),\n                                array(\n                                    'item_id' => $newID,\n                                    'field_id' => $field_data[0],\n                                    'data' => $encrypt['string'],\n                                    'data_iv' => \"\",\n                                    'encryption_type' => $enc_type\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if ($dataReceived['to_be_deleted'] != 0 && !empty($dataReceived['to_be_deleted'])) {\n                    $date_stamp = dateToStamp($dataReceived['to_be_deleted']);\n                    DB::insert(\n                        prefix_table('automatic_del'),\n                        array(\n                            'item_id' => $newID,\n                            'del_enabled' => 1, /* Possible values: 0=deactivated;1=activated */\n                            'del_type' => $date_stamp !== false ? 2 : 1, /* Possible values:  1=counter;2=date */\n                            'del_value' => $date_stamp !== false ? $date_stamp : $dataReceived['to_be_deleted']\n                            )\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (isset($dataReceived['restricted_to_roles'])) {\n                    foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                        DB::insert(\n                            prefix_table('restriction_to_roles'),\n                            array(\n                                'role_id' => $role,\n                                'item_id' => $newID\n                                )\n                        );\n                    }\n                }\n                // log\n                logItems($newID, $label, $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add tags\n                $tags = explode(' ', $tags);\n                foreach ($tags as $tag) {\n                    if (!empty($tag)) {\n                        DB::insert(\n                            prefix_table('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag)\n                                )\n                        );\n                    }\n                }\n                // Check if any files have been added\n                if (!empty($dataReceived['random_id_from_files'])) {\n                    $rows = DB::query(\n                        \"SELECT id\n                        FROM \".prefix_table(\"files\").\"\n                        WHERE id_item = %s\",\n                        $dataReceived['random_id_from_files']\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'id_item' => $newID\n                                ),\n                            \"id=%i\",\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (!empty($dataReceived['diffusion'])) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n                    // send email\n                    foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                        if (!empty($emailAddress)) {\n                            // send it\n                            sendEmail(\n                                $LANG['email_subject'],\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                ),\n                                $emailAddress,\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                )\n                            );\n                        }\n                    }\n                }\n                // Get Expiration date\n                $expirationFlag = '';\n                if ($SETTINGS['activate_expiration'] === '1') {\n                    $expirationFlag = '<i class=\"fa fa-flag mi-green\"></i>&nbsp;';\n                }\n                // Prepare full line\n                $html = '<li class=\"item_draggable'\n                .'\" id=\"'.$newID.'\" style=\"margin-left:-30px;\">'\n                .'<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>'\n                .$expirationFlag.'<i class=\"fa fa-sm fa-warning mi-yellow\"></i>&nbsp;'.\n                '&nbsp;<a id=\"fileclass'.$newID.'\" class=\"file\" onclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', \\'\\', \\'\\')\" ondblclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', true, \\'\\')\">'.\n                stripslashes($dataReceived['label']);\n                if (!empty($dataReceived['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                    $html .= '&nbsp;<font size=2px>['.strip_tags(stripslashes(substr(cleanString($dataReceived['description']), 0, 30))).']</font>';\n                }\n                $html .= '</a><span style=\"float:right;margin:2px 10px 0px 0px;\">';\n                // mini icon for collab\n                if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                    if ($dataReceived['anyone_can_modify'] === '1') {\n                        $itemCollab = '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                    }\n                }\n                // display quick icon shortcuts ?\n                if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                    $itemLogin = $itemPw = \"\";\n\n                    if (!empty($dataReceived['login'])) {\n                        $itemLogin = '<span id=\"iconlogin_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-user mi-black\"></i>&nbsp;</span>';\n                    }\n                    if (!empty($dataReceived['pw'])) {\n                        $itemPw = '<span id=\"iconpw_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-lock mi-black\"></i>&nbsp;</span>';\n                    }\n                    $html .= $itemLogin.'&nbsp;'.$itemPw;\n                }\n                // Prepare make Favorite small icon\n                $html .= '&nbsp;<span id=\"quick_icon_fav_'.$newID.'\" title=\"Manage Favorite\" class=\"cursor\">';\n                if (in_array($newID, $_SESSION['favourites'])) {\n                    $html .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$newID.',0)\" class=\"tip\"></i>';\n                } else {\n                    $html .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$newID.',1)\" class=\"tip\"></i>';\n                }\n\n                $html .= '</span></li>';\n                // Build array with items\n                $itemsIDList = array($newID, $dataReceived['pw'], $login);\n\n                $returnValues = array(\n                    \"item_exists\" => $itemExists,\n                    \"error\" => \"no\",\n                    \"new_id\" => $newID,\n                    \"new_pw\" => $dataReceived['pw'],\n                    \"new_login\" => $login,\n                    \"new_entry\" => $html,\n                    \"array_items\" => $itemsIDList,\n                    \"show_clipboard_small_icons\" => (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') ? 1 : 0\n                    );\n            } elseif (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && (int) $itemExists === 1) {\n                // Encrypt data to return\n                echo prepareExchangedData(array(\"error\" => \"item_exists\"), \"encode\");\n                break;\n            }\n\n            // Add item to CACHE table if new item has been created\n            if (isset($newID) === true) {\n                updateCacheTable(\"add_value\", $newID);\n            }\n\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * update an ITEM\n        */\n        case \"update_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // init\n            $reloadPage = false;\n            $returnValues = array();\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            if (count($dataReceived) > 0) {\n                // Prepare variables\n                $label = filter_var(($dataReceived['label']), FILTER_SANITIZE_STRING);\n                $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n                $pw = $original_pw = $sentPw = htmlspecialchars_decode($dataReceived['pw']);\n                $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n                $tags = htmlspecialchars_decode($dataReceived['tags']);\n                $email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_STRING);\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && (!in_array($dataReceived['categorie'], $_SESSION['personal_folders']) || $dataReceived['is_pf'] !== '1')) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                if ((\n                        in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])\n                        && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id']))\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify'])\n                        && $SETTINGS['anyone_can_modify'] === '1'\n                        && $dataItem['anyone_can_modify'] === '1'\n                        && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1')\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $restrictionActive === false)\n                ) {\n                    // Is pwd empty?\n                    if (empty($pw) && isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                        break;\n                    }\n\n                    // Check length\n                    if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                        break;\n                    }\n                    // Get existing values\n                    $data = DB::queryfirstrow(\n                        \"SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login,\n                        i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                        u.login as user_login, u.email as user_email\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id=l.id_item)\n                        INNER JOIN \".prefix_table(\"users\").\" as u ON (u.id=l.id_user)\n                        WHERE i.id=%i\",\n                        $dataReceived['id']\n                    );\n                    // encrypt PW\n                    if ((isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') || !empty($pw)) {\n                        if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                            $sentPw = $pw;\n                            $passwd = cryption(\n                                $pw,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                            $restictedTo = $_SESSION['user_id'];\n                        } else {\n                            $passwd = cryption(\n                                $pw,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        if (!empty($passwd[\"error\"])) {\n                            echo prepareExchangedData(array(\"error\" => $passwd[\"error\"]), \"encode\");\n                            break;\n                        }\n                    } else {\n                        $passwd['string'] = \"\";\n                    }\n\n                    // ---Manage tags\n                    // deleting existing tags for this item\n                    DB::delete($pre.\"tags\", \"item_id = %i\", $dataReceived['id']);\n\n                    // Add new tags\n                    $return_tags = \"\";\n                    $tags = explode(' ', $tags);\n                    foreach ($tags as $tag) {\n                        if (!empty($tag)) {\n                            // save in DB\n                            DB::insert(\n                                prefix_table('tags'),\n                                array(\n                                    'item_id' => $dataReceived['id'],\n                                    'tag' => strtolower($tag)\n                                )\n                            );\n                            // prepare display\n                            if (empty($tags)) {\n                                $return_tags = \"<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            } else {\n                                $return_tags .= \"&nbsp;&nbsp;<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'label' => $label,\n                            'description' => $dataReceived['description'],\n                            'pw' => $passwd['string'],\n                            'pw_iv' => \"\",\n                            'email' => $email,\n                            'login' => $login,\n                            'url' => $url,\n                            'id_tree' => (!isset($dataReceived['categorie']) || $dataReceived['categorie'] === \"undefined\") ? $dataItem['id_tree'] : $dataReceived['categorie'],\n                            'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                            'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                            'complexity_level' => $dataReceived['complexity_level']\n                            ),\n                        \"id=%i\",\n                        $dataReceived['id']\n                    );\n                    // update fields\n                    if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                        foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                            $field_data = explode(\"~~\", $field);\n                            if (count($field_data) > 1 && !empty($field_data[1])) {\n                                $dataTmpCat = DB::queryFirstRow(\n                                    \"SELECT c.title AS title, i.data AS data, i.data_iv AS data_iv, i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data\n                                    FROM \".prefix_table(\"categories_items\").\" AS i\n                                    INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                                    WHERE i.field_id = %i AND i.item_id = %i\",\n                                    $field_data[0],\n                                    $dataReceived['id']\n                                );\n                                // store Field text in DB\n                                if (count($dataTmpCat['title']) === 0) {\n                                    // get info about this custom field\n                                    $dataTmpCat = DB::queryFirstRow(\n                                        \"SELECT title, encrypted_data\n                                        FROM \".prefix_table(\"categories\").\"\n                                        WHERE id = %i\",\n                                        $field_data[0]\n                                    );\n\n                                    // should we encrypt the data\n                                    if ($dataTmpCat['encrypted_data'] === '1') {\n                                        $encrypt = cryption(\n                                            $field_data[1],\n                                            \"\",\n                                            \"encrypt\"\n                                        );\n                                        $enc_type = \"defuse\";\n                                    } else {\n                                        $encrypt['string'] = $field_data[1];\n                                        $enc_type = \"not_set\";\n                                    }\n\n                                    // store field text\n                                    DB::insert(\n                                        prefix_table('categories_items'),\n                                        array(\n                                            'item_id' => $dataReceived['id'],\n                                            'field_id' => $field_data[0],\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => \"\",\n                                            'encryption_type' => $enc_type\n                                        )\n                                    );\n\n                                    // update LOG\n                                    logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' : '.$field_data[1]);\n                                } else {\n                                    // compare the old and new value\n                                    if ($dataTmpCat['encryption_type'] === \"defuse\") {\n                                        $oldVal = cryption(\n                                            $dataTmpCat['data'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } else {\n                                        $oldVal['string'] = $dataTmpCat['data'];\n                                    }\n\n                                    if ($field_data[1] !== $oldVal['string']) {\n                                        // should we encrypt the data\n                                        if ($dataTmpCat['encrypted_data'] === '1') {\n                                            $encrypt = cryption(\n                                                $field_data[1],\n                                                \"\",\n                                                \"encrypt\"\n                                            );\n                                            $enc_type = \"defuse\";\n                                        } else {\n                                            $encrypt['string'] = $field_data[1];\n                                            $enc_type = \"not_set\";\n                                        }\n\n                                        // update value\n                                        DB::update(\n                                            prefix_table('categories_items'),\n                                            array(\n                                                'data' => $encrypt['string'],\n                                                'data_iv' => \"\",\n                                                'encryption_type' => $enc_type\n                                            ),\n                                            \"item_id = %i AND field_id = %i\",\n                                            $dataReceived['id'],\n                                            $field_data[0]\n                                        );\n\n                                        // update LOG\n                                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' => '.$oldVal['string']);\n                                    }\n                                }\n                            } else {\n                                if (empty($field_data[1])) {\n                                    DB::delete(\n                                        $pre.\"categories_items\",\n                                        \"item_id = %i AND field_id = %s\",\n                                        $dataReceived['id'],\n                                        $field_data[0]\n                                    );\n                                }\n                            }\n                        }\n                    }\n\n                    // Update automatic deletion - Only by the creator of the Item\n                    if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                        // check if elem exists in Table. If not add it or update it.\n                        DB::query(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id = %i\", $dataReceived['id']);\n                        if (DB::count() === 0) {\n                            // No automatic deletion for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Automatic deletion to be added\n                                DB::insert(\n                                    prefix_table('automatic_del'),\n                                    array(\n                                        'item_id' => $dataReceived['id'],\n                                        'del_enabled' => 1,\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        )\n                                );\n                                // update LOG\n                                logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                            }\n                        } else {\n                            // Automatic deletion exists for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Update automatic deletion\n                                DB::update(\n                                    $pre.\"automatic_del\",\n                                    array(\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        ),\n                                    \"item_id = %i\",\n                                    $dataReceived['id']\n                                );\n                            } else {\n                                // delete automatic deleteion for this item\n                                DB::delete($pre.\"automatic_del\", \"item_id = %i\", $dataReceived['id']);\n                            }\n                            // update LOG\n                            logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                        }\n                    }\n\n                    // get readable list of restriction\n                    $listOfRestricted = $oldRestrictionList = \"\";\n                    if (!empty($dataReceived['restricted_to']) && $SETTINGS['restricted_to'] === '1') {\n                        foreach (explode(';', $dataReceived['restricted_to']) as $userRest) {\n                            if (!empty($userRest)) {\n                                $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= %i\", $userRest);\n                                if (empty($listOfRestricted)) {\n                                    $listOfRestricted = $dataTmp['login'];\n                                } else {\n                                    $listOfRestricted .= \";\".$dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                    if ($data['restricted_to'] != $dataReceived['restricted_to'] && $SETTINGS['restricted_to'] === '1') {\n                        if (!empty($data['restricted_to'])) {\n                            foreach (explode(';', $data['restricted_to']) as $userRest) {\n                                if (!empty($userRest)) {\n                                    $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                                    if (empty($oldRestrictionList)) {\n                                        $oldRestrictionList = $dataTmp['login'];\n                                    } else {\n                                        $oldRestrictionList .= \";\".$dataTmp['login'];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Manage retriction_to_roles\n                    if (isset($dataReceived['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                        // get values before deleting them\n                        $rows = DB::query(\n                            \"SELECT t.title\n                            FROM \".prefix_table(\"roles_title\").\" as t\n                            INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                            WHERE r.item_id = %i\n                            ORDER BY t.title ASC\",\n                            $dataReceived['id']\n                        );\n                        foreach ($rows as $record) {\n                            if (empty($oldRestrictionList)) {\n                                $oldRestrictionList = $record['title'];\n                            } else {\n                                $oldRestrictionList .= \";\".$record['title'];\n                            }\n                        }\n                        // delete previous values\n                        DB::delete(prefix_table(\"restriction_to_roles\"), \"item_id = %i\", $dataReceived['id']);\n                        // add roles for item\n                        foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                            $role = explode(\"role_\", $role);\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefix_table('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $dataReceived['id']\n                                    )\n                            );\n                            $dataTmp = DB::queryfirstrow(\"SELECT title FROM \".prefix_table(\"roles_title\").\" WHERE id= \".$role);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['title'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['title'];\n                            }\n                        }\n                    }\n                    // Update CACHE table\n                    updateCacheTable(\"update_value\", $dataReceived['id']);\n                    // Log all modifications done\n                    /*LABEL */\n                    if ($data['label'] != $label) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_label : '.$data['label'].' => '.$label);\n                    }\n                    /*LOGIN */\n                    if ($data['login'] != $login) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_login : '.$data['login'].' => '.$login);\n                    }\n                    /*EMAIL */\n                    if ($data['email'] != $dataReceived['email']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_email : '.$data['email'].' => '.$dataReceived['email']);\n                    }\n                    /*URL */\n                    if ($data['url'] != $url && $url != \"http://\") {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_url : '.$data['url'].' => '.$url);\n                    }\n                    /*DESCRIPTION */\n                    if ($data['description'] != $dataReceived['description']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_description');\n                    }\n                    /*FOLDER */\n                    if ($data['id_tree'] != $dataReceived['categorie']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_category : '.$data['id_tree'].' => '.$dataReceived['categorie']);\n                        // ask for page reloading\n                        $reloadPage = true;\n                    }\n                    /*PASSWORD */\n                    if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    } else {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            \"\",\n                            \"decrypt\"\n                        );\n                    }\n                    if ($sentPw != $oldPwClear['string']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_pw :'.$oldPw, \"\", \"defuse\");\n                    }\n                    /*RESTRICTIONS */\n                    if ($data['restricted_to'] != $dataReceived['restricted_to']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_restriction : '.$oldRestrictionList.' => '.$listOfRestricted);\n                    }\n                    // Reload new values\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT *\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                        WHERE i.id = %i AND l.action = %s\",\n                        $dataReceived['id'],\n                        \"at_creation\"\n                    );\n                    // Reload History\n                    $history = \"\";\n                    $rows = DB::query(\n                        \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                        FROM \".prefix_table(\"log_items\").\" as l\n                        LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                        WHERE l.action <> %s AND id_item=%s\",\n                        \"at_shown\",\n                        $dataReceived['id']\n                    );\n                    foreach ($rows as $record) {\n                        $reason = explode(':', $record['raison']);\n                        if (empty($history)) {\n                            $history = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".$record['login'].\" - \".$LANG[$record['action']].\n                            \" - \".(!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.$reason[1] : $LANG[trim($reason[0])]) : '');\n                        } else {\n                            $history .= \"<br />\".date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".\n                            $record['login'].\" - \".$LANG[$record['action']].\" - \".\n                            (!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' => '.$reason[1] : ($record['action'] != \"at_manual\" ? $LANG[trim($reason[0])] : trim($reason[0]))) : '');\n                        }\n                    }\n                    // decrypt PW\n                    if (empty($dataReceived['salt_key'])) {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            \"\",\n                            \"encrypt\"\n                        );\n                    } else {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                    }\n\n                    $pw = cleanString($encrypt['string']);\n                    // generate 2d key\n                    $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                    // Prepare files listing\n                    $files = $filesEdit = \"\";\n                    // launch query\n                    $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $dataReceived['id']);\n                    foreach ($rows as $record) {\n                        // get icon image depending on file format\n                        $iconImage = fileFormatImage($record['extension']);\n\n                        // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                        if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                            $files .= '<i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\"image_dialog\" href=\"#'.$record['id'].'\" title=\"'.$record['name'].'\">'.$record['name'].'</a><br />';\n                        } else {\n                            $files .= '<i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&type=sub&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' target=\\'_blank\\'>'.$record['name'].'</a><br />';\n                        }\n                        // Prepare list of files for edit dialogbox\n                        $filesEdit .= '<span id=\"span_edit_file_'.$record['id'].'\"><span class=\"fa fa-'.$iconImage.'\"></span>&nbsp;<span class=\"fa fa-eraser tip\" style=\"cursor:pointer;\"  onclick=\"delete_attached_file(\\\"'.$record['id'].'\\\")\" title=\"'.$LANG['at_delete'].'\"></span>&nbsp;'.$record['name'].\"</span><br />\";\n                    }\n                    // Send email\n                    if (!empty($dataReceived['diffusion'])) {\n                        foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                            if (!empty($emailAddress)) {\n                                sendEmail(\n                                    $LANG['email_subject_item_updated'],\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                    $emailAddress,\n                                    str_replace(\"#item_label#\", $label, $LANG['email_bodyalt_item_updated'])\n                                );\n                            }\n                        }\n                    }\n\n                    // send email to user that whant to be notified\n                    if ($dataItem['notification'] !== null && !empty($dataItem['notification'])) {\n                        $users_to_be_notified = array_filter(explode(\";\", $dataItem['notification']));\n\n                        // perform query to get emails\n                        $users_email = DB::QUERY(\n                            \"SELECT id, email\n                            FROM \".prefix_table(\"users\").\"\n                            WHERE id IN %li\",\n                            $users_to_be_notified\n                        );\n\n                        // build emails list\n                        $mailing = \"\";\n                        foreach ($users_email as $record) {\n                            if (empty($mailing)) {\n                                $mailing = $record['email'];\n                            } else {\n                                $mailing = \",\".$record['email'];\n                            }\n                        }\n\n                        // send email\n                        DB::insert(\n                            prefix_table('emails'),\n                            array(\n                                'timestamp' => time(),\n                                'subject' => $LANG['email_subject_item_updated'],\n                                'body' =>\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                'receivers' => $mailing,\n                                'status' => ''\n                                )\n                        );\n                    }\n\n                    // Prepare some stuff to return\n                    $arrData = array(\n                        \"files\" => $files,\n                        \"history\" => str_replace('\"', '&quot;', $history),\n                        \"files_edit\" => $filesEdit,\n                        \"id_tree\" => $dataItem['id_tree'],\n                        \"id\" => $dataItem['id'],\n                        \"reload_page\" => $reloadPage,\n                        \"restriction_to\" => $dataReceived['restricted_to'].$dataReceived['restricted_to_roles'],\n                        \"list_of_restricted\" => $listOfRestricted,\n                        \"tags\" => $return_tags,\n                        \"error\" => \"\"\n                        );\n                } else {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_NOT_ALLOWED_TO_EDIT\"), \"encode\");\n                    break;\n                }\n            } else {\n                // an error appears on JSON format\n                $arrData = array(\"error\" => \"ERR_JSON_FORMAT\");\n            }\n            // return data\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\"..\"\n          * CASE\n          * Copy an Item\n        */\n        case \"copy_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"1'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // Prepare POST variables\n            $post_source_id = filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT);\n            $post_dest_id = filter_input(INPUT_POST, 'dest_id', FILTER_SANITIZE_NUMBER_INT);\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === '1'\n                && (!in_array($post_source_id, $_SESSION['personal_folders'])\n                    || !in_array($post_dest_id, $_SESSION['personal_folders']))\n            ) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $returnValues = $pw = \"\";\n            $is_perso = 0;\n\n            if (empty($post_item_id) === false\n                && empty($post_dest_id) === false\n            ) {\n                // load the original record into an array\n                $originalRecord = DB::queryfirstrow(\n                    \"SELECT * FROM \".prefix_table(\"items\").\"\n                    WHERE id=%i\",\n                    $post_item_id\n                );\n\n                // Check if the folder where this item is, is accessible to the user\n                if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles'])) {\n                    $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                    echo $returnValues;\n                    break;\n                }\n\n                // Load the destination folder record into an array\n                $dataDestination = DB::queryfirstrow(\n                    \"SELECT personal_folder FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id=%i\",\n                    $post_dest_id\n                );\n\n                // previous is personal folder and public one\n                if ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now public\n                    $is_perso = 0;\n                // previous is public folder and personal one\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '1') {\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // previous is public folder and personal one\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // is public item\n                    $is_perso = 0;\n                } else {\n                    $returnValues = '[{\"error\" : \"case_not_managed\"}, {\"error_text\" : \"ERROR - case is not managed\"}]';\n                        echo $returnValues;\n                        break;\n                }\n\n                // insert the new record and get the new auto_increment id\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => \"duplicate\"\n                    )\n                );\n                $newID = DB::insertId();\n                // generate the query to update the new record with the previous values\n                $aSet = array();\n                foreach ($originalRecord as $key => $value) {\n                    if ($key === \"id_tree\") {\n                        array_push($aSet, array(\"id_tree\" => $post_dest_id));\n                    } elseif ($key === \"viewed_no\") {\n                        array_push($aSet, array(\"viewed_no\" => \"0\"));\n                    } elseif ($key === \"pw\" && !empty($pw)) {\n                        array_push($aSet, array(\"pw\" => $originalRecord['pw']));\n                        array_push($aSet, array(\"pw_iv\" => \"\"));\n                    } elseif ($key === \"perso\") {\n                        array_push($aSet, array(\"perso\" => $is_perso));\n                    } elseif ($key != \"id\" && $key != \"key\") {\n                        array_push($aSet, array($key => $value));\n                    }\n                }\n\n                DB::update(\n                    prefix_table(\"items\"),\n                    $aSet,\n                    \"id = %i\",\n                    $newID\n                );\n                // Add attached itms\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_item_id);\n                foreach ($rows as $record) {\n                    // duplicate file\n                    $fileRandomId = md5($record['name'].time());\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$record['file'],\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$fileRandomId\n                    );\n\n                    // store in DB\n                    DB::insert(\n                        prefix_table('files'),\n                        array(\n                            'id_item' => $newID,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $fileRandomId,\n                            'status' => $record['status']\n                        )\n                    );\n                }\n\n                // Add specific restrictions\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('restriction_to_roles'),\n                        array(\n                            'item_id' => $newID,\n                            'role_id' => $record['role_id']\n                            )\n                    );\n                }\n\n                // Add Tags\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"tags\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('tags'),\n                        array(\n                            'item_id' => $newID,\n                            'tag' => $record['tag']\n                            )\n                    );\n                }\n\n                // Add custom fields\n\n\n                // Add this duplicate in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add the fact that item has been copied in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_copy', $_SESSION['login']);\n                // reload cache table\n                require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n                updateCacheTable(\"reload\", \"\");\n\n                $returnValues = '[{\"status\" : \"ok\"}, {\"new_id\" : \"'.$newID.'\"}]';\n            } else {\n                // no item\n                $returnValues = '[{\"error\" : \"no_item\"}, {\"error_text\" : \"No item ID\"}]';\n            }\n            // return data\n            echo $returnValues;\n            break;\n\n        /*\n          * CASE\n          * Display informations of selected item\n        */\n        case \"show_details_item\":\n            // Check KEY and rights\n            $_SESSION['user_settings']['show_step2'] = false;\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Init post variables\n            $post_id = filter_var(htmlspecialchars_decode($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_salt_key_required = filter_var(htmlspecialchars_decode($dataReceived['salt_key_required']), FILTER_SANITIZE_STRING);\n            $post_salt_key_set = filter_var(htmlspecialchars_decode($dataReceived['salt_key_set']), FILTER_SANITIZE_STRING);\n            $post_expired_item = filter_var(htmlspecialchars_decode($dataReceived['expired_item']), FILTER_SANITIZE_STRING);\n            $post_restricted = filter_var(htmlspecialchars_decode($dataReceived['restricted']), FILTER_SANITIZE_STRING);\n            $post_page = filter_var(htmlspecialchars_decode($dataReceived['page']), FILTER_SANITIZE_STRING);\n\n            $arrData = array();\n            // return ID\n            $arrData['id'] = $post_id;\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author'] = \"API\";\n\n            // Check if item is deleted\n            // taking into account that item can be restored.\n            // so if restoration timestamp is higher than the deletion one\n            // then we can show it\n            $item_deleted = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_delete\"\n            );\n            $dataDeleted = DB::count();\n\n            $item_restored = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_restored\"\n            );\n\n            if ($dataDeleted != 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n                // This item is deleted => exit\n                echo prepareExchangedData(array('show_detail_option' => 2), \"encode\");\n                break;\n            }\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                WHERE i.id = %i AND l.action = %s\",\n                $post_id,\n                \"at_creation\"\n            );\n            // LEFT JOIN \".$pre.\"categories_items as c ON (c.id_item = i.id)\n            // INNER JOIN \".$pre.\"automatic_del as d ON (d.item_id = i.id)\n            // Get all USERS infos\n            $listNotif = array_filter(explode(\";\", $dataItem['notification']));\n            $listRest = array_filter(explode(\";\", $dataItem['restricted_to']));\n            $listeRestriction = $listNotification = $listNotificationEmails = \"\";\n            $user_in_restricted_list_of_item = false;\n            $rows = DB::query(\"SELECT id, login, email FROM \".prefix_table(\"users\"));\n            foreach ($rows as $record) {\n                // Get auhtor\n                if ($record['id'] === $dataItem['id_user']) {\n                    $arrData['author'] = $record['login'];\n                    $arrData['author_email'] = $record['email'];\n                    $arrData['id_user'] = $dataItem['id_user'];\n                    if (in_array($record['id'], $listNotif)) {\n                        $arrData['notification_status'] = true;\n                    } else {\n                        $arrData['notification_status'] = false;\n                    }\n                }\n\n                // Get restriction list for users\n                if (in_array($record['id'], $listRest)) {\n                    $listeRestriction .= $record['login'].\";\";\n                    if ($_SESSION['user_id'] === $record['id']) {\n                        $user_in_restricted_list_of_item = true;\n                    }\n                }\n                // Get notification list for users\n                if (in_array($record['id'], $listNotif)) {\n                    $listNotification .= $record['login'].\";\";\n                    $listNotificationEmails .= $record['email'].\",\";\n                }\n            }\n            // manage case of API user\n            if ($dataItem['id_user'] === API_USER_ID) {\n                $arrData['author'] = \"API [\".$dataItem['description'].\"]\";\n                $arrData['id_user'] = API_USER_ID;\n                $arrData['author_email'] = \"\";\n                $arrData['notification_status'] = false;\n            }\n\n            // Get all tags for this item\n            $tags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $post_id);\n            foreach ($rows as $record) {\n                if (empty($tags)) {\n                    $tags = \"<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                } else {\n                    $tags .= \"&nbsp;&nbsp;<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                }\n            }\n\n            // TODO -> improve this check\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n\n\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\n                \"SELECT role_id\n                FROM \".prefix_table(\"restriction_to_roles\").\"\n                WHERE item_id=%i\",\n                $post_id\n            );\n            foreach ($rows_tmp as $rec_tmp) {\n                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                    $restrictionActive = false;\n                }\n            }\n\n            // Uncrypt PW\n            if (null !== $post_salt_key_required\n                && $post_salt_key_required === '1'\n                && null !== $post_salt_key_set\n                && $post_salt_key_set === '1'\n            ) {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 1;\n            } else {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 0;\n            }\n\n            $pw = @$pw['string'];\n            if (!isUTF8($pw)) {\n                $pw = '';\n            }\n\n            // check if item is expired\n            if (null !== $post_expired_item\n                && $post_expired_item === '1'\n            ) {\n                $item_is_expired = true;\n            } else {\n                $item_is_expired = false;\n            }\n\n\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $user_in_restricted_list_of_item === true)\n                ||\n                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n                    && $restrictionActive === false\n                )\n            ) {\n                // Allow show details\n                $arrData['show_details'] = 1;\n                // Display menu icon for deleting if user is allowed\n                if ($dataItem['id_user'] == $_SESSION['user_id']\n                    || $_SESSION['is_admin'] === '1'\n                    || ($_SESSION['user_manager'] === '1' && $SETTINGS['manager_edit'] === '1')\n                    || $dataItem['anyone_can_modify'] === '1'\n                    || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role'])\n                    || in_array($_SESSION['user_id'], $restrictedTo)\n                ) {\n                    $arrData['user_can_modify'] = 1;\n                    $user_is_allowed_to_modify = true;\n                } else {\n                    $arrData['user_can_modify'] = 0;\n                    $user_is_allowed_to_modify = false;\n                }\n\n                // Get restriction list for roles\n                $listRestrictionRoles = array();\n                if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                    // Add restriction if item is restricted to roles\n                    $rows = DB::query(\n                        \"SELECT t.title\n                        FROM \".prefix_table(\"roles\").\"_title as t\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['title'], $listRestrictionRoles)) {\n                            array_push($listRestrictionRoles, $record['title']);\n                        }\n                    }\n                }\n                // Check if any KB is linked to this item\n                if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] === '1') {\n                    $tmp = \"\";\n                    $rows = DB::query(\n                        \"SELECT k.label, k.id\n                        FROM \".prefix_table(\"kb_items\").\" as i\n                        INNER JOIN \".prefix_table(\"kb\").\" as k ON (i.kb_id=k.id)\n                        WHERE i.item_id = %i\n                        ORDER BY k.label ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (empty($tmp)) {\n                            $tmp = \"<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        } else {\n                            $tmp .= \"&nbsp;<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        }\n                    }\n                    $arrData['links_to_kbs'] = $tmp;\n                }\n                // Prepare DIalogBox data\n                if ($item_is_expired === false) {\n                    $arrData['show_detail_option'] = 0;\n                } elseif ($user_is_allowed_to_modify === true && $item_is_expired === true) {\n                    $arrData['show_detail_option'] = 1;\n                } else {\n                    $arrData['show_detail_option'] = 2;\n                }\n\n                $arrData['label'] = htmlspecialchars_decode($dataItem['label']);\n                $arrData['pw'] = $pw;\n                $arrData['email'] = $dataItem['email'];\n                $arrData['url'] = htmlspecialchars_decode($dataItem['url']);\n                $arrData['folder'] = $dataItem['id_tree'];\n                if (!empty($dataItem['url'])) {\n                    $arrData['link'] = \"&nbsp;<a href='\".$dataItem['url'].\"' target='_blank'>&nbsp;<i class='fa fa-link tip' title='\".$LANG['open_url_link'].\"'></i></a>\";\n                }\n\n                $arrData['description'] = preg_replace('/(?<!\\\\r)\\\\n+(?!\\\\r)/', '', strip_tags($dataItem['description'], $SETTINGS_EXT['allowedTags']));\n                $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']));\n                $arrData['id_restricted_to'] = $listeRestriction;\n                $arrData['id_restricted_to_roles'] = count($listRestrictionRoles) > 0 ? implode(\";\", $listRestrictionRoles).\";\" : \"\";\n                $arrData['tags'] = $tags;\n                $arrData['folder'] = $dataItem['id_tree'];\n\n                if (isset($SETTINGS['enable_server_password_change'])\n                    && $SETTINGS['enable_server_password_change'] === '1') {\n                    $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n                } else {\n                    $arrData['auto_update_pwd_frequency'] = \"0\";\n                }\n\n                if (isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] === '1') {\n                    $arrData['anyone_can_modify'] = 1;\n                } else {\n                    $arrData['anyone_can_modify'] = $dataItem['anyone_can_modify'];\n                }\n\n                // statistics\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'viewed_no' => $dataItem['viewed_no'] + 1,\n                    ),\n                    \"id = %i\",\n                    $post_id\n                );\n                $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n                // get fields\n                $fieldsTmp = $arrCatList = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1'\n                    && null !== $post_page && $post_page === \"items\"\n                ) {\n                    // get list of associated Categories\n                    $arrCatList = array();\n                    $rows_tmp = DB::query(\n                        \"SELECT id_category\n                        FROM \".prefix_table(\"categories_folders\").\"\n                        WHERE id_folder=%i\",\n                        $post_folder_id\n                    );\n                    if (DB::count() > 0) {\n                        foreach ($rows_tmp as $row) {\n                            array_push($arrCatList, $row['id_category']);\n                        }\n\n                        // get fields for this Item\n                        $rows_tmp = DB::query(\n                            \"SELECT i.field_id AS field_id, i.data AS data, i.data_iv AS data_iv,\n                            i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                            c.type as field_type\n                            FROM \".prefix_table(\"categories_items\").\" AS i\n                            INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                            WHERE i.item_id=%i AND c.parent_id IN %ls\",\n                            $post_id,\n                            $arrCatList\n                        );\n                        foreach ($rows_tmp as $row) {\n                            // Uncrypt data\n                            if ($row['encryption_type'] === \"defuse\") {\n                                $fieldText = cryption(\n                                    $row['data'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                                $fieldText = $fieldText['string'];\n                            } else {\n                                $fieldText = $row['data'];\n                            }\n\n                            // build returned list of Fields text\n                            if (empty($fieldsTmp)) {\n                                $fieldsTmp = $row['field_id'].\n                                    \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                    \"~~\".$row['field_type'];\n                            } else {\n                                $fieldsTmp .= \"_|_\".$row['field_id'].\n                                \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                \"~~\".$row['field_type'];\n                            }\n                        }\n                    }\n                }\n                $arrData['fields'] = $fieldsTmp;\n                $arrData['categories'] = $arrCatList;\n\n                // Manage user restriction\n                if (null !== $post_restricted) {\n                    $arrData['restricted'] = $post_restricted;\n                } else {\n                    $arrData['restricted'] = \"\";\n                }\n                // Decrement the number before being deleted\n                $dataDelete = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id=%i\", $post_id);\n                $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                $arrData['to_be_deleted_type'] = $dataDelete['del_type'];\n                if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                    if ($dataDelete['del_enabled'] === '1' || $arrData['id_user'] != $_SESSION['user_id']) {\n                        if ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] >= 1) {\n                            // decrease counter\n                            DB::update(\n                                $pre.\"automatic_del\",\n                                array(\n                                    'del_value' => $dataDelete['del_value'] - 1\n                                    ),\n                                \"item_id = %i\",\n                                $post_id\n                            );\n                            // store value\n                            $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                        } elseif ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] <= 1 || $dataDelete['del_type'] === '2' && $dataDelete['del_value'] < time()\n                        ) {\n                            $arrData['show_details'] = 0;\n                            // delete item\n                            DB::delete($pre.\"automatic_del\", \"item_id = %i\", $post_id);\n                            // make inactive object\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'inactif' => '1',\n                                    ),\n                                \"id = %i\",\n                                $post_id\n                            );\n                            // log\n                            logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login'], 'at_automatically_deleted');\n                            $arrData['to_be_deleted'] = 0;\n                        } elseif ($dataDelete['del_type'] === '2') {\n                            $arrData['to_be_deleted'] = date($SETTINGS['date_format'], $dataDelete['del_value']);\n                        }\n                    } else {\n                        $arrData['to_be_deleted'] = \"\";\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = \"not_enabled\";\n                }\n                // send notification if enabled\n                if (isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] === '1') {\n                    // send back infos\n                    DB::insert(\n                        prefix_table('emails'),\n                        array(\n                            'timestamp' => time(),\n                            'subject' => $LANG['email_on_open_notification_subject'],\n                            'body' => str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($arrData['author']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_on_open_notification_mail']),\n                            'receivers' => $listNotificationEmails,\n                            'status' => ''\n                            )\n                    );\n                } else {\n                    $arrData['notification_list'] = \"\";\n                    $arrData['notification_status'] = \"\";\n                }\n            } else {\n                $arrData['show_details'] = 0;\n                // get readable list of restriction\n                $listOfRestricted = \"\";\n                if (!empty($dataItem['restricted_to'])) {\n                    foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                        if (!empty($userRest)) {\n                            $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                $arrData['restricted_to'] = $listOfRestricted;\n            }\n            $arrData['timestamp'] = time();\n\n            $_SESSION['user_settings']['show_step2'] = true;\n\n            // Encrypt data to return\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\n           * CASE\n           * Display History of the selected Item\n        */\n        case \"showDetailsStep2\":\n            // get Item info\n            if ($_SESSION['user_settings']['show_step2'] !== true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Load item data\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n\n\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\n                \"SELECT role_id\n                FROM \".prefix_table(\"restriction_to_roles\").\"\n                WHERE item_id=%i\",\n                $post_id\n            );\n            foreach ($rows_tmp as $rec_tmp) {\n                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                    $restrictionActive = false;\n                }\n            }\n\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $user_in_restricted_list_of_item === true)\n                ||\n                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n                    && $restrictionActive === false\n                )\n            ) {\n                // GET Audit trail\n                $history = \"\";\n                $historyOfPws = \"\";\n                $rows = DB::query(\n                    \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login, l.raison_iv AS raison_iv\n                    FROM \".prefix_table(\"log_items\").\" as l\n                    LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                    WHERE id_item=%i AND action <> %s\n                    ORDER BY date ASC\",\n                    $post_id,\n                    \"at_shown\"\n                );\n                foreach ($rows as $record) {\n                    $reason = explode(':', $record['raison']);\n                    if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                        // check if item is PF\n                        if ($dataItem['perso'] != 1) {\n                            $reason[1] = cryption(\n                                $reason[1],\n                                \"\",\n                                \"decrypt\"\n                            );\n                        } else {\n                            $reason[1] = cryption(\n                                $reason[1],\n                                $_SESSION['user_settings']['session_psk'],\n                                \"decrypt\"\n                            );\n                        }\n                        $reason[1] = @$reason[1]['string'];\n                        // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                        if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                            $reason[1] = \"\";\n                        }\n                    }\n                    // imported via API\n                    if (empty($record['login'])) {\n                        $record['login'] = $LANG['imported_via_api'];\n                    }\n\n                    if (!empty($reason[1]) || $record['action'] === \"at_copy\" || $record['action'] === \"at_creation\" || $record['action'] === \"at_manual\" || $record['action'] === \"at_modification\" || $record['action'] === \"at_delete\" || $record['action'] === \"at_restored\") {\n                        if (trim($reason[0]) === \"at_pw\" && empty($reason[1]) === false) {\n                            if (empty($historyOfPws)) {\n                                $historyOfPws = $LANG['previous_pw'].\"\\n\".$reason[1];\n                            } else {\n                                $historyOfPws .= \"\\n\".$reason[1];\n                            }\n                        }\n                    }\n                }\n\n                // generate 2d key\n                $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                // Prepare files listing\n                $files = $filesEdit = \"\";\n                // launch query\n                $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_id);\n                foreach ($rows as $record) {\n                    // get icon image depending on file format\n                    $iconImage = fileFormatImage($record['extension']);\n\n                    // prepare text to display\n                    if (strlen($record['name']) > 60 && strrpos($record['name'], \".\") >= 56) {\n                        $filename = substr($record['name'], 0, 50).\"(...)\".substr($record['name'], strrpos($record['name'], \".\"));\n                    } else {\n                        $filename = $record['name'];\n                    }\n\n                    // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                    if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                        $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\\'image_dialog\\' href=\\'#'.$record['id'].'\\' title=\\''.$record['name'].'\\'>'.$filename.'</a></div>';\n                    } else {\n                        $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' class=\\'small_spacing\\'>'.$filename.'</a></div>';\n                    }\n                    // Prepare list of files for edit dialogbox\n                    $filesEdit .= '<span id=\\'span_edit_file_'.$record['id'].'\\'><span class=\\'fa fa-'.$iconImage.'\\'></span>&nbsp;<span class=\\'fa fa-eraser tip\\' style=\\'cursor:pointer;\\' onclick=\\'delete_attached_file(\"'.$record['id'].'\")\\' title=\\''.$LANG['at_delete'].'\\'></span>&nbsp;'.$filename.\"</span><br />\";\n                }\n                // display lists\n                $filesEdit = str_replace('\"', '&quot;', $filesEdit);\n                $files_id = $files;\n\n                // disable add bookmark if alread bookmarked\n                if (in_array($post_id, $_SESSION['favourites'])) {\n                    $favourite = 1;\n                } else {\n                    $favourite = 0;\n                }\n\n                // Add the fact that item has been viewed in logs\n                if (isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] === '1') {\n                    logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_shown', $_SESSION['login']);\n                }\n\n                // Add this item to the latests list\n                if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                    if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                        array_pop($_SESSION['latest_items']); //delete last items\n                    }\n                    array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                    // update DB\n                    DB::update(\n                        prefix_table(\"users\"),\n                        array(\n                            'latest_items' => implode(';', $_SESSION['latest_items'])\n                            ),\n                        \"id=\".$_SESSION['user_id']\n                    );\n                }\n\n                // has this item a change proposal\n                DB::query(\"SELECT * FROM \".$pre.\"items_change WHERE item_id = %i\", $post_id);\n\n                $_SESSION['user_settings']['show_step2'] = false;\n\n                echo prepareExchangedData(\n                    array(\n                        \"history\" => htmlspecialchars($history, ENT_QUOTES, 'UTF-8'),\n                        \"history_of_pwds\" => htmlspecialchars($historyOfPws, ENT_QUOTES, 'UTF-8'),\n                        \"favourite\" => $favourite,\n                        \"files_edit\" => $filesEdit,\n                        \"files_id\" => $files_id,\n                        \"has_change_proposal\" => DB::count(),\n                        \"error\" => \"\"\n                    ),\n                    \"encode\"\n                );\n            }\n            break;\n\n        /*\n         * CASE\n         * Delete an item\n        */\n        case \"del_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // Check that user can access this item\n            $granted = accessToItemIsGranted($post_id);\n            if ($granted !== true) {\n                echo prepareExchangedData(array(\"error\" => $granted), \"encode\");\n                break;\n            }\n\n            // Load item data\n            $data = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // delete item consists in disabling it\n            DB::update(\n                prefix_table(\"items\"),\n                array(\n                    'inactif' => '1',\n                    ),\n                \"id = %i\",\n                $post_id\n            );\n            // log\n            logItems($post_id, $post_label, $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n            // Update CACHE table\n            updateCacheTable(\"delete_value\", $post_id);\n            break;\n\n        /*\n        * CASE\n        * Update a Group\n        */\n        case \"update_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $title = filter_var(htmlspecialchars_decode($dataReceived['title']), FILTER_SANITIZE_STRING);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check if user is allowed to access this folder\n            if (!in_array($post_folder_id, $_SESSION['groupes_visibles'])) {\n                echo '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                break;\n            }\n\n            // Check if title doesn't contains html codes\n            if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $title, $out)) {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_html_codes']).'\" } ]';\n                break;\n            }\n            // check that title is not numeric\n            if (is_numeric($title) === true) {\n                echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n                break;\n            }\n\n            // Check if duplicate folders name are allowed\n            $createNewFolder = true;\n            if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n                $data = DB::queryFirstRow(\"SELECT id, title FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $title);\n                if (!empty($data['id']) && $dataReceived['folder'] != $data['id']) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_group_exist']).'\" } ]';\n                    break;\n                }\n            }\n\n            // query on folder\n            $data = DB::queryfirstrow(\n                \"SELECT parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // check if complexity level is good\n            // if manager or admin don't care\n            if ($_SESSION['is_admin'] != 1 && $_SESSION['user_manager'] != 1 && $data['personal_folder'] === '0') {\n                $data = DB::queryfirstrow(\n                    \"SELECT valeur\n                    FROM \".prefix_table(\"misc\").\"\n                    WHERE intitule = %i AND type = %s\",\n                    $data['parent_id'],\n                    \"complex\"\n                );\n                if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_folder_complexity_lower_than_top_folder'].\" [<b>\".$SETTINGS_EXT['pwComplexity'][$data['valeur']][1]).'</b>]\"} ]';\n                    break;\n                }\n            }\n\n            // update Folders table\n            $tmp = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $dataReceived['folder']\n            );\n            if ($tmp['parent_id'] != 0 || $tmp['title'] != $_SESSION['user_id'] || $tmp['personal_folder'] != 1) {\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'title' => $title\n                        ),\n                    'id=%s',\n                    $post_folder_id\n                );\n                // update complixity value\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $dataReceived['complexity']\n                        ),\n                    'intitule = %s AND type = %s',\n                    $post_folder_id,\n                    \"complex\"\n                );\n                // rebuild fuild tree folder\n                $tree->rebuild();\n            }\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Move a Group including sub-folders\n        */\n        case \"move_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" :  \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check that user can access this folder\n            if (!in_array($post_source_folder_id, $_SESSION['groupes_visibles'])\n                || !in_array($post_target_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $tmp_source = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_source_folder_id\n            );\n\n            $tmp_target = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_target_folder_id\n            );\n\n            // check if target is not a child of source\n            if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['personal_folder'] === '1' || $tmp_target['personal_folder'] === '1') {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            if ($tmp_source['parent_id'] !== \"0\") {\n                // moving SOURCE folder\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => $post_target_folder_id\n                        ),\n                    'id=%s',\n                    $post_source_folder_id\n                );\n                $tree->rebuild();\n            }\n\n\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Store hierarchic position of Group\n        */\n        case 'save_position':\n            DB::update(\n                prefix_table(\"nested_tree\"),\n                array(\n                    'parent_id' => $post_destination\n                    ),\n                'id = %i',\n                $post_source\n            );\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            break;\n\n        /*\n        * CASE\n        * List items of a group\n        */\n        case 'lister_items_groupe':\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.str_replace('\"', '\\\"', $LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Prepare POST variables\n            $post_restricted = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_NUMBER_INT);\n            $post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n            $post_nb_items_to_display_once = filter_input(INPUT_POST, 'nb_items_to_display_once', FILTER_SANITIZE_NUMBER_INT);\n\n            $arboHtml = $html = \"\";\n            $folderIsPf = false;\n            $showError = 0;\n            $itemsIDList = $rights = $returnedData = $uniqueLoadData = array();\n            // Build query limits\n            if (empty($post_start) === true) {\n                $start = 0;\n            } else {\n                $start = $post_start;\n            }\n\n            // to do only on 1st iteration\n            if (intval($start) === 0) {\n                // Prepare tree\n                $arbo = $tree->getPath($post_id, true);\n                foreach ($arbo as $elem) {\n                    if ($elem->title == $_SESSION['user_id'] && $elem->nlevel === '1') {\n                        $elem->title = $_SESSION['login'];\n                        $folderIsPf = true;\n                    }\n                    $arboHtml_tmp = '<a class=\"path_element\" id=\"path_elem_'.$elem->id.'\"';\n                    if (in_array($elem->id, $_SESSION['groupes_visibles'])) {\n                        $arboHtml_tmp .= ' style=\"cursor:pointer;\" onclick=\"ListerItems('.$elem->id.', \\'\\', 0)\"';\n                    }\n                    $arboHtml_tmp .= '>'.htmlspecialchars(stripslashes($elem->title), ENT_QUOTES).'</a>';\n                    if (empty($arboHtml)) {\n                        $arboHtml = $arboHtml_tmp;\n                    } else {\n                        $arboHtml .= '&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;'.$arboHtml_tmp;\n                    }\n                }\n                $uniqueLoadData['arboHtml'] = $arboHtml;\n\n                // store last folder accessed in cookie\n                setcookie(\n                    \"jstree_select\",\n                    $post_id,\n                    time() + 60 * 60 * 24 * $SETTINGS['personal_saltkey_cookie_duration'],\n                    '/'\n                );\n\n                // check role access on this folder (get the most restrictive) (2.1.23)\n                $accessLevel = 2;\n                $arrTmp = [];\n                foreach (explode(';', $_SESSION['fonction_id']) as $role) {\n                    $access = DB::queryFirstRow(\n                        \"SELECT type FROM \".prefix_table(\"roles_values\").\" WHERE role_id = %i AND folder_id = %i\",\n                        $role,\n                        $post_id\n                    );\n                    if ($access['type'] === \"R\") {\n                        array_push($arrTmp, 1);\n                    } elseif ($access['type'] === \"W\") {\n                        array_push($arrTmp, 0);\n                    } elseif ($access['type'] === \"ND\") {\n                        array_push($arrTmp, 2);\n                    } else {\n                        array_push($arrTmp, 3);\n                    }\n                }\n                $accessLevel = min($arrTmp);\n                $uniqueLoadData['accessLevel'] = $accessLevel;\n\n                // check if this folder is a PF. If yes check if saltket is set\n                if ((!isset($_SESSION['user_settings']['encrypted_psk']) || empty($_SESSION['user_settings']['encrypted_psk'])) && $folderIsPf === true) {\n                    $showError = \"is_pf_but_no_saltkey\";\n                }\n                $uniqueLoadData['showError'] = $showError;\n\n                // check if items exist\n                $where = new WhereClause('and');\n                if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                    $counter = count($_SESSION['list_folders_limited'][$post_id]);\n                    $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n                } elseif (!in_array(\n                    $post_id,\n                    array_merge(\n                        $_SESSION['groupes_visibles'],\n                        @array_keys($_SESSION['list_restricted_folders_for_items']),\n                        @array_keys($_SESSION['list_folders_limited'])\n                    )\n                )) {\n                    echo prepareExchangedData(array(\"error\" => \"not_authorized\"), \"encode\");\n                    break;\n                } else {\n                    DB::query(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE inactif = %i\", 0);\n                    $counter = DB::count();\n                    $uniqueLoadData['counter'] = $counter;\n                }\n\n\n                // Identify if it is a personal folder\n                if (in_array($post_id, $_SESSION['personal_visible_groups'])) {\n                    $findPfGroup = 1;\n                } else {\n                    $findPfGroup = \"\";\n                }\n                $uniqueLoadData['findPfGroup'] = $findPfGroup;\n\n\n                // Get folder complexity\n                $folderComplexity = DB::queryFirstRow(\n                    \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %i\",\n                    \"complex\",\n                    $post_id\n                );\n                $folderComplexity = $folderComplexity['valeur'];\n                $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n                // Has this folder some categories to be displayed?\n                $displayCategories = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    $catRow = DB::query(\n                        \"SELECT id_category FROM \".prefix_table(\"categories_folders\").\" WHERE id_folder = %i\",\n                        $post_id\n                    );\n                    if (count($catRow) > 0) {\n                        foreach ($catRow as $cat) {\n                            if (empty($displayCategories)) {\n                                $displayCategories = $cat['id_category'];\n                            } else {\n                                $displayCategories .= \";\".$cat['id_category'];\n                            }\n                        }\n                    }\n                }\n                $uniqueLoadData['displayCategories'] = $displayCategories;\n\n                // is this folder a personal one\n                $folder_is_personal = in_array($post_id, $_SESSION['personal_folders']);\n                $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n                //\n                $folder_is_in_personal = in_array($post_id, array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n                $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n                //\n                if (isset($_SESSION['list_folders_editable_by_role'])) {\n                    $list_folders_editable_by_role = in_array($post_id, $_SESSION['list_folders_editable_by_role']);\n                } else {\n                    $list_folders_editable_by_role = \"\";\n                }\n                $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n            } else {\n                // get preloaded data\n                $uniqueLoadData = json_decode(\n                    filter_input(INPUT_POST, 'uniqueLoadData', FILTER_UNSAFE_RAW),\n                    true\n                );\n\n                // initialize main variables\n                $showError = $uniqueLoadData['showError'];\n                $accessLevel = $uniqueLoadData['accessLevel'];\n                $counter = $uniqueLoadData['counter'];\n                $findPfGroup = $uniqueLoadData['findPfGroup'];\n                $counter_full = $uniqueLoadData['counter_full'];\n                $displayCategories = $uniqueLoadData['displayCategories'];\n                $folderComplexity = $uniqueLoadData['folderComplexity'];\n                $arboHtml = $uniqueLoadData['arboHtml'];\n                $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n                $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n                $list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n            }\n\n            // prepare query WHere conditions\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$post_id]);\n            } else {\n                $where->add('i.id_tree=%i', $post_id);\n            }\n\n            // build the HTML for this set of Items\n            if ($counter > 0 && empty($showError)) {\n                // init variables\n                $init_personal_folder = false;\n                $expired_item = false;\n                $limited_to_items = \"\";\n\n                // List all ITEMS\n                if ($folderIsPf === false) {\n                    $where->add('i.inactif=%i', 0);\n                    $where->add('l.date=%l', \"(SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                    if (!empty($limited_to_items)) {\n                        $where->add('i.id IN %ls', explode(\",\", $limited_to_items));\n                    }\n\n                    $query_limit = \" LIMIT \".\n                        $start.\",\".\n                        $post_nb_items_to_display_once;\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\".$query_limit, //\n                        $where\n                    );\n                } else {\n                    $post_nb_items_to_display_once = \"max\";\n                    $where->add('i.inactif=%i', 0);\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\",\n                        $where\n                    );\n                }\n\n                $idManaged = '';\n                $i = 0;\n                $arr_items_html = array();\n\n                foreach ($rows as $record) {\n                    // exclude all results except the first one returned by query\n                    if (empty($idManaged) || $idManaged != $record['id']) {\n                        $new_line = '';\n\n                        // Get Expiration date\n                        $expirationFlag = '';\n                        $expired_item = 0;\n                        if ($SETTINGS['activate_expiration'] === '1') {\n                            if ($record['renewal_period'] > 0 &&\n                                ($record['date'] + ($record['renewal_period'] * $SETTINGS_EXT['one_month_seconds'])) < time()\n                            ) {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-red fa-sm\"></i>&nbsp;';\n                                $expired_item = 1;\n                            } else {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-green fa-sm\"></i>&nbsp;';\n                            }\n                        }\n                        // list of restricted users\n                        $is_user_in_restricted_list = in_array($_SESSION['user_id'], explode(';', $record['restricted_to']));\n\n                        $itemPw = $itemLogin = \"\";\n                        $displayItem = false;\n                        $need_sk = false;\n                        $canMove = false;\n                        $item_is_restricted_to_role = false;\n                        // TODO: Element is restricted to a group. Check if element can be seen by user\n                        // => r\u00e9cup\u00e9rer un tableau contenant les roles associ\u00e9s \u00e0 cet ID (a partir table restriction_to_roles)\n                        $user_is_included_in_role = false;\n                        $roles = DB::query(\n                            \"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\",\n                            $record['id']\n                        );\n\n                        if (DB::count() > 0) {\n                            $item_is_restricted_to_role = true;\n                            foreach ($roles as $val) {\n                                if (in_array($val['role_id'], $_SESSION['user_roles'])) {\n                                    $user_is_included_in_role = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // Manage the restricted_to variable\n                        if (null !== $post_restricted) {\n                            $restrictedTo = $post_restricted;\n                        } else {\n                            $restrictedTo = \"\";\n                        }\n\n                        if ($list_folders_editable_by_role === '1') {\n                            if (empty($restrictedTo)) {\n                                $restrictedTo = $_SESSION['user_id'];\n                            } else {\n                                $restrictedTo .= ','.$_SESSION['user_id'];\n                            }\n                        }\n\n                        // Can user modify it?\n                        if ($record['anyone_can_modify'] === '1'\n                            || $_SESSION['user_id'] === $record['log_user']\n                            || ($_SESSION['user_read_only'] === '1' && $folderIsPf === false)\n                            || (isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] === '1') // force draggable if user is manager\n                        ) {\n                            $canMove = true;\n                        }\n\n                        // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                        if ($record['perso'] !== '1' && (int) $folder_is_personal === 1) {\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'perso' => 1\n                                ),\n                                \"id=%i\",\n                                $record['id']\n                            );\n                            $record['perso'] = '1';\n                        }\n\n\n                        // CASE where item is restricted to a role to which the user is not associated\n                        if (isset($user_is_included_in_role)\n                            && $user_is_included_in_role === false\n                            && isset($item_is_restricted_to_role)\n                            && $item_is_restricted_to_role === true\n                            && (int) $is_user_in_restricted_list !== 1\n                            && (int) $folder_is_personal !== 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                            $displayItem = false;\n                            $need_sk = false;\n                            $canMove = false;\n                        // Case where item is in own personal folder\n                        } elseif ((int) $folder_is_in_personal === 1\n                            && (int) $record['perso'] === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-user-secret mi-grey-1 fa-sm\"></i>&nbsp';\n                            $findPfGroup = 1;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'1\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'1\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $need_sk = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users included user\n                        } elseif (!empty($record['restricted_to'])\n                            || (int) $list_folders_editable_by_role === 1\n                            && (int) $is_user_in_restricted_list === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users not including user\n                        } elseif ((int) $record['perso'] === 1\n                            ||\n                            (\n                                !empty($record['restricted_to'])\n                                && (int) $is_user_in_restricted_list !== 1\n                            )\n                            ||\n                            (\n                                isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            )\n                        ) {\n                            if (isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            ) {\n                                $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                                $findPfGroup = 0;\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                                $displayItem = false;\n                                $need_sk = true;\n                                $canMove = false;\n                            } else {\n                                $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                                // reinit in case of not personal group\n                                if ($init_personal_folder === false) {\n                                    $findPfGroup = \"\";\n                                    $init_personal_folder = true;\n                                }\n\n                                if (!empty($record['restricted_to']) && $is_user_in_restricted_list === '1') {\n                                    $displayItem = true;\n                                }\n                            }\n                        } else {\n                            $perso = '<i class=\"fa fa-tag mi-green fa-sm\"></i>&nbsp';\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            // reinit in case of not personal group\n                            if ($init_personal_folder === false) {\n                                $findPfGroup = \"\";\n                                $init_personal_folder = true;\n                            }\n                        }\n                        // Prepare full line\n                        $new_line .= '<li name=\"'.strip_tags(htmlentities(cleanString($record['label']))).'\" ondblclick=\"'.$action_dbl.'\" class=\"';\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= 'item_draggable';\n                        } else {\n                            $new_line .= 'item';\n                        }\n\n                        $new_line .= ' trunc_line\" id=\"'.$record['id'].'\" style=\"\">';\n\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= '<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>';\n                        } else {\n                            $new_line .= '<span style=\"margin-left:11px;\"></span>';\n                        }\n\n\n                        $label = stripslashes(handleBackslash($record['label']));\n                        $new_line .= $expirationFlag.''.$perso.'&nbsp;<a id=\"fileclass'.$record['id'].'\" class=\"file \" onclick=\"'.$action.'\"><div class=\"truncate\">'.$label.'&nbsp;<font size=\"1px\">';\n\n                        // manage desc to show\n                        if (!empty($record['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                            $desc = explode(\"<br>\", $record['description']);\n                            $new_line .= '['.strip_tags(stripslashes(cleanString($desc[0]))).']';\n                        }\n\n                        $new_line .= '</div></font>';\n\n                        $new_line .= '</a>';\n\n                        //\n                        $new_line .= '<span style=\"float:right;margin-top:2px;\">';\n\n                        // increment array for icons shortcuts (don't do if option is not enabled)\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($need_sk === true && isset($_SESSION['user_settings']['session_psk'])) {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    $_SESSION['user_settings']['session_psk'],\n                                    \"decrypt\"\n                                );\n                            } else {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                            }\n\n                            // test charset => may cause a json error if is not utf8\n                            $pw = $pw['string'];\n                            if (!isUTF8($pw)) {\n                                $pw = \"\";\n                                $new_line .= '<i class=\"fa fa-warning fa-sm mi-red tip\" title=\"'.$LANG['pw_encryption_error'].'\"></i>&nbsp;';\n                            } elseif (empty($pw) === true) {\n                                $new_line .= '&nbsp;<i class=\"fa fa-exclamation-circle fa-sm mi-yellow tip\" title=\"'.$LANG['password_is_empty'].'\"></i>&nbsp;';\n                            }\n                        } else {\n                            $pw = \"\";\n                        }\n\n                        // mini icon for collab\n                        if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                            if ($record['anyone_can_modify'] === '1') {\n                                $new_line .= '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                            }\n                        }\n\n                        // display quick icon shortcuts ?\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($displayItem === true) {\n                                if (!empty($record['login'])) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-user mi-black mini_login\" data-clipboard-text=\"'.strtr($record['login'], '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_login'].'\"></i>&nbsp;';\n                                }\n                                if (!empty($pw)) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-lock mi-black mini_pw\" data-clipboard-text=\"'.strtr($pw, '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i>&nbsp;';\n                                }\n                            }\n                        }\n                        // Prepare make Favorite small icon\n                        $new_line .= '<span id=\"quick_icon_fav_'.$record['id'].'\" title=\"Manage Favorite\" class=\"cursor tip\">';\n                        if (in_array($record['id'], $_SESSION['favourites'])) {\n                            $new_line .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$record['id'].',0)\" class=\"tip\"></i>';\n                        } else {\n                            $new_line .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$record['id'].',1)\" class=\"tip\"></i>';\n                        }\n\n                        $new_line .= '</span></li>';\n                        // Build array with items\n                        array_push($itemsIDList, array($record['id'], $pw, $record['login'], $displayItem));\n\n                        // build full html\n                        $html .= $new_line;\n\n                        $i++;\n                    }\n                    $idManaged = $record['id'];\n                }\n\n                $rights = recupDroitCreationSansComplexite($post_id);\n            }\n\n            // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n            // count\n            if (intval($start) === 0) {\n                DB::query(\n                    \"SELECT i.id\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as n ON (i.id_tree = n.id)\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id = l.id_item)\n                    WHERE %l\n                    ORDER BY i.label ASC, l.date DESC\",\n                    $where\n                );\n                $counter_full = DB::count();\n                $uniqueLoadData['counter_full'] = $counter_full;\n            }\n\n            // Check list to be continued status\n            if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n                $listToBeContinued = \"yes\";\n            } else {\n                $listToBeContinued = \"end\";\n            }\n\n            //  Fixing items not being displayed\n            $html = iconv(\n                'UTF-8',\n                'UTF-8//IGNORE',\n                mb_convert_encoding(\n                    $html,\n                    \"UTF-8\",\n                    \"UTF-8\"\n                )\n            );\n\n\n            // Prepare returned values\n            $returnValues = array(\n                \"recherche_group_pf\" => $findPfGroup,\n                \"arborescence\" => $arboHtml,\n                \"array_items\" => $itemsIDList,\n                \"items_html\" => $html,\n                \"error\" => $showError,\n                \"saltkey_is_required\" => $folderIsPf === true ? 1 : 0,\n                \"show_clipboard_small_icons\" => isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1' ? 1 : 0,\n                \"next_start\" => intval($post_nb_items_to_display_once) + intval($start),\n                \"list_to_be_continued\" => $listToBeContinued,\n                \"items_count\" => $counter,\n                \"counter_full\" => $counter_full,\n                'folder_complexity' => $folderComplexity,\n                'displayCategories' => $displayCategories,\n                'access_level' => $accessLevel,\n                'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n                'uniqueLoadData' => json_encode($uniqueLoadData)\n            );\n            // Check if $rights is not null\n            if (count($rights) > 0) {\n                $returnValues = array_merge($returnValues, $rights);\n            }\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get complexity level of a group\n        */\n        case \"get_complixity_level\":\n            // Prepare POST variables\n            $post_groupe = filter_input(INPUT_POST, 'groupe', FILTER_SANITIZE_STRING);\n            $post_context = filter_input(INPUT_POST, 'context', FILTER_SANITIZE_STRING);\n\n            // get some info about ITEM\n            $dataItem = DB::queryfirstrow(\n                \"SELECT perso, anyone_can_modify\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $post_item_id\n            );\n            // is user allowed to access this folder - readonly\n            if (null !== $post_groupe && empty($post_groupe) === false) {\n                if (in_array($post_groupe, $_SESSION['read_only_folders']) || !in_array($post_groupe, $_SESSION['groupes_visibles'])) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                        if ($dataItem['anyone_can_modify'] != 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                \"error\" => \"user_is_readonly\",\n                                \"message\" => $LANG['error_not_allowed_to']\n                            );\n                            echo prepareExchangedData($returnValues, \"encode\");\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            \"error\" => \"user_is_readonly\",\n                            \"message\" => $LANG['error_not_allowed_to']\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            if (null !== $post_item_id && empty($post_item_id) === false) {\n                // Lock Item (if already locked), go back and warn\n                $dataTmp = DB::queryFirstRow(\"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\", $post_item_id);\n\n                // If token is taken for this Item and delay is passed then delete it.\n                if (isset($SETTINGS['delay_item_edition']) &&\n                    $SETTINGS['delay_item_edition'] > 0 && !empty($dataTmp['timestamp']) &&\n                    round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n                ) {\n                    DB::delete(prefix_table(\"items_edition\"), \"item_id = %i\", $post_item_id);\n                    //reload the previous data\n                    $dataTmp = DB::queryFirstRow(\n                        \"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\",\n                        $post_item_id\n                    );\n                }\n\n                // If edition by same user (and token not freed before for any reason, then update timestamp)\n                if (!empty($dataTmp['timestamp']) && $dataTmp['user_id'] == $_SESSION['user_id']) {\n                    DB::update(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            \"timestamp\" => time()\n                        ),\n                        \"user_id = %i AND item_id = %i\",\n                        $_SESSION['user_id'],\n                        $post_item_id\n                    );\n                    // If no token for this Item, then initialize one\n                } elseif (empty($dataTmp[0])) {\n                    DB::insert(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            'timestamp' => time(),\n                            'item_id' => $post_item_id,\n                            'user_id' => $_SESSION['user_id']\n                        )\n                    );\n                    // Edition not possible\n                } else {\n                    $returnValues = array(\n                        \"error\" => \"no_edition_possible\",\n                        \"error_msg\" => addslashes($LANG['error_no_edition_possible_locked'])\n                    );\n                    echo prepareExchangedData($returnValues, \"encode\");\n                    break;\n                }\n            }\n\n            // do query on this folder\n            $data_this_folder = DB::queryFirstRow(\n                \"SELECT id, personal_folder, title\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %s\",\n                $post_groupe\n            );\n\n            // check if user can perform this action\n            if (null !== $post_context && empty($post_context) === false) {\n                if ($post_context === \"create_folder\" || $post_context === \"edit_folder\" || $post_context === \"delete_folder\") {\n                    if ($_SESSION['is_admin'] !== '1'\n                        && ($_SESSION['user_manager'] !== '1')\n                        && (\n                            isset($SETTINGS['enable_user_can_create_folders'])\n                           && $SETTINGS['enable_user_can_create_folders'] !== '1'\n                        )\n                        && (\n                            $data_this_folder['personal_folder'] !== '1' && $data_this_folder['title'] !== $_SESSION['user_id']\n                        )   // take into consideration if this is a personal folder\n                    ) {\n                        $returnValues = array(\n                            \"error\" => \"no_folder_creation_possible\",\n                            \"error_msg\" => addslashes($LANG['error_not_allowed_to'])\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            // Get required Complexity for this Folder\n            $data = DB::queryFirstRow(\n                \"SELECT m.valeur, n.personal_folder\n                FROM \".prefix_table(\"misc\").\" AS m\n                INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (m.intitule = n.id)\n                WHERE type=%s AND intitule = %s\",\n                \"complex\",\n                $post_groupe\n            );\n\n            if (isset($data['valeur']) && (!empty($data['valeur']) || $data['valeur'] === '0')) {\n                $complexity = $SETTINGS_EXT['pwComplexity'][$data['valeur']][1];\n                $folder_is_personal = $data['personal_folder'];\n            } else {\n                $complexity = $LANG['not_defined'];\n\n                // if not defined, then previous query failed and personal_folder is null\n                // do new query to know if current folder is pf\n                $data_pf = DB::queryFirstRow(\n                    \"SELECT personal_folder\n                    FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id = %s\",\n                    $post_groupe\n                );\n                $folder_is_personal = $data_pf['personal_folder'];\n            }\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $visibilite = \"\";\n            if (empty($dataPf[0]) === false) {\n                $visibilite = $_SESSION['login'];\n            } else {\n                $rows = DB::query(\n                    \"SELECT t.title\n                    FROM \".prefix_table(\"roles_values\").\" as v\n                    INNER JOIN \".prefix_table(\"roles_title\").\" as t ON (v.role_id = t.id)\n                    WHERE v.folder_id = %i\n                    GROUP BY title\",\n                    $post_groupe\n                );\n                foreach ($rows as $record) {\n                    if (empty($visibilite)) {\n                        $visibilite = $record['title'];\n                    } else {\n                        $visibilite .= \" - \".$record['title'];\n                    }\n                }\n            }\n\n            recupDroitCreationSansComplexite($post_groupe);\n\n            $returnValues = array(\n                \"val\" => $data['valeur'],\n                \"visibility\" => $visibilite,\n                \"complexity\" => $complexity,\n                \"personal\" => $folder_is_personal\n            );\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * DELETE attached file from an item\n        */\n        case \"delete_attached_file\":\n            // Get some info before deleting\n            $data = DB::queryFirstRow(\n                \"SELECT name, id_item, file\n                FROM \".prefix_table(\"files\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // Load item data\n            $data_item = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $data['id_item']\n            );\n\n            // Check that user can access this folder\n            if (!in_array($data_item['id_tree'], $_SESSION['groupes_visibles'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            if (!empty($data['id_item'])) {\n                // Delete from FILES table\n                DB::delete(\n                    prefix_table(\"files\"),\n                    \"id = %i\",\n                    filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                // Update the log\n                logItems($data['id_item'], $data['name'], $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_del_file : '.$data['name']);\n                // Delete file from server\n                fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$data['file']);\n            }\n            break;\n\n        /*\n        * CASE\n        * REBUILD the description editor\n        */\n        case \"rebuild_description_textarea\":\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING);\n\n            $returnValues = array();\n            if (isset($SETTINGS['richtext']) && $SETTINGS['richtext'] === '1') {\n                if ($post_id === \"desc\") {\n                    $returnValues['desc'] = '$(\"#desc\").ckeditor({toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                } elseif ($post_id === \"edit_desc\") {\n                    $returnValues['desc'] = 'CKEDITOR.replace(\"edit_desc\",{toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                }\n            }\n            // Multselect\n            $returnValues['multi_select'] = '$(\"#edit_restricted_to_list\").multiselect({selectedList: 7, minWidth: 430, height: 145, checkAllText: \"'.$LANG['check_all_text'].'\", uncheckAllText: \"'.$LANG['uncheck_all_text'].'\",noneSelectedText: \"'.$LANG['none_selected_text'].'\"});';\n            // Display popup\n            if ($post_id === \"edit_desc\") {\n                $returnValues['dialog'] = '$(\"#div_formulaire_edition_item\").dialog(\"open\");';\n            } else {\n                $returnValues['dialog'] = '$(\"#div_formulaire_saisi\").dialog(\"open\");';\n            }\n            echo $returnValues;\n            break;\n\n        /*\n        * CASE\n        * Clear HTML tags\n        */\n        case \"clear_html_tags\":\n            // Get information for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT description FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n                filter_input(INPUT_POST, 'id_item', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // Clean up the string\n            echo json_encode(array(\"description\" => strip_tags($dataItem['description'])), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            break;\n\n        /*\n        * FUNCTION\n        * Launch an action when clicking on a quick icon\n        * $action = 0 => Make not favorite\n        * $action = 1 => Make favorite\n        */\n        case \"action_on_quick_icon\":\n            if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '1') {\n                // Add new favourite\n                array_push($_SESSION['favourites'], $post_id);\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'favourites' => implode(';', $_SESSION['favourites'])\n                        ),\n                    'id = %i',\n                    $_SESSION['user_id']\n                );\n                // Update SESSION with this new favourite\n                $data = DB::queryfirstrow(\n                    \"SELECT label,id_tree\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE id = \".mysqli_real_escape_string($link, $post_id)\n                );\n                $_SESSION['favourites_tab'][$post_id] = array(\n                    'label' => $data['label'],\n                    'url' => 'index.php?page=items&amp;group='.$data['id_tree'].'&amp;id='.$post_id\n                    );\n            } elseif (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '0') {\n                // delete from session\n                foreach ($_SESSION['favourites'] as $key => $value) {\n                    if ($_SESSION['favourites'][$key] === $post_id) {\n                        unset($_SESSION['favourites'][$key]);\n                        break;\n                    }\n                }\n                // delete from DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        \"favourites\" =>implode(';', $_SESSION['favourites'])\n                    ),\n                    \"id = %i\",\n                    $_SESSION['user_id']\n                );\n                // refresh session fav list\n                if (isset($_SESSION['favourites_tab'])) {\n                    foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                        if ($key == $post_id) {\n                            unset($_SESSION['favourites_tab'][$key]);\n                            break;\n                        }\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Move an ITEM\n        */\n        case \"move_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']\n                || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n            ) {\n                // error\n                exit();\n            }\n            // get data about item\n            $dataSource = DB::queryfirstrow(\n                \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                WHERE i.id=%i\",\n                $post_item_id\n            );\n            // get data about new folder\n            $dataDestination = DB::queryfirstrow(\n                \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // Check that user can access this folder\n            if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                echo '[{\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"}]';\n                break;\n            }\n\n            // previous is non personal folder and new too\n            if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                        ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"encrypt\"\n                );\n                // update pw\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 1\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    \"\",\n                    \"encrypt\"\n                );\n\n                // update item\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 0\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            }\n            // Log item moved\n            logItems(\n                $post_item_id,\n                $dataSource['label'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n            );\n\n            echo '[{\"from_folder\":\"'.$dataSource['id_tree'].'\" , \"to_folder\":\"'.$post_folder_id.'\"}]';\n            break;\n\n        /*\n        * CASE\n        * MASSIVE Move an ITEM\n        */\n        case \"mass_move_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])) {\n                // error\n                exit();\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get data about item\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                        WHERE i.id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo '[{\"error\":\"not_allowed\" , \"status\":\"ok\"}]';\n                        break;\n                    }\n\n                    // get data about new folder\n                    $dataDestination = DB::queryfirstrow(\n                        \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        $post_folder_id\n                    );\n\n                    // previous is non personal folder and new too\n                    if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            \"\",\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"encrypt\"\n                        );\n                        // update pw\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 1\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            \"\",\n                            \"encrypt\"\n                        );\n\n                        // update item\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 0\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    }\n                    // Log item moved\n                    logItems(\n                        $item_id,\n                        $dataSource['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n                    );\n                }\n            }\n\n            // reload cache table\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            updateCacheTable(\"reload\", \"\");\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n            break;\n\n        /*\n         * CASE\n         * MASSIVE Delete an item\n        */\n        case \"mass_delete_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get info\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT label, id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // perform a check in case of Read-Only user creating an item in his PF\n                    if ($_SESSION['user_read_only'] === true) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // delete item consists in disabling it\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                            ),\n                        \"id = %i\",\n                        $item_id\n                    );\n\n                    // log\n                    logItems($item_id, $dataSource['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n\n                    // Update CACHE table\n                    updateCacheTable(\"delete_value\", $item_id);\n                }\n            }\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n\n            break;\n\n            /*\n           * CASE\n           * Send email\n        */\n        case \"send_email\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (empty(filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING)) === false) {\n                    $content = explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING));\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                if ($post_cat === \"request_access_to_author\") {\n                    $dataAuthor = DB::queryfirstrow(\"SELECT email,login FROM \".prefix_table(\"users\").\" WHERE id= \".$content[1]);\n                    $dataItem = DB::queryfirstrow(\"SELECT label FROM \".prefix_table(\"items\").\" WHERE id= \".$content[0]);\n                    $ret = sendEmail(\n                        $LANG['email_request_access_subject'],\n                        str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($dataAuthor['login']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_request_access_mail']),\n                        $dataAuthor['email']\n                    );\n                } elseif ($post_cat === \"share_this_item\") {\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT label,id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id= %i\",\n                        $post_id\n                    );\n                    // send email\n                    $ret = sendEmail(\n                        $LANG['email_share_item_subject'],\n                        str_replace(\n                            array('#tp_link#', '#tp_user#', '#tp_item#'),\n                            array($SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataItem['id_tree'].'&id='.$post_id, addslashes($_SESSION['login']), addslashes($dataItem['label'])),\n                            $LANG['email_share_item_mail']\n                        ),\n                        $post_receipt\n                    );\n                }\n                echo '[{'.$ret.'}]';\n            }\n            break;\n\n        /*\n           * CASE\n           * manage notification of an Item\n        */\n        case \"notify_a_user\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (filter_input(INPUT_POST, 'notify_type', FILTER_SANITIZE_STRING) === \"on_show\") {\n                    // Check if values already exist\n                    $data = DB::queryfirstrow(\n                        \"SELECT notification FROM \".prefix_table(\"items\").\" WHERE id = %i\",\n                        $post_item_id\n                    );\n                    $notifiedUsers = explode(';', $data['notification']);\n                    // User is not in actual notification list\n                    if ($post_status === \"true\" && !in_array($post_user_id, $notifiedUsers)) {\n                        // User is not in actual notification list and wants to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT).\";\"\n                                    : $data['notification'].filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                        echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                        break;\n                    } elseif ($post_status === false && in_array($post_user_id, $notifiedUsers)) {\n                        // TODO : delete user from array and store in DB\n                        // User is in actual notification list and doesn't want to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                    : $data['notification'].\";\".filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Item History Log - add new entry\n        */\n        case \"history_entry_add\":\n            if ($post_key !== $_SESSION['key']) {\n                $data = array(\"error\" => \"key_is_wrong\");\n                echo prepareExchangedData($data, \"encode\");\n                break;\n            } else {\n                // decrypt and retreive data in JSON format\n                $dataReceived = prepareExchangedData($post_data, \"decode\");\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['item_id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                if ((\n                        (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false\n                    )\n                    ||\n                    (@in_array(\n                        $post_id,\n                        $_SESSION['list_folders_limited'][$post_folder_id]\n                    ))\n                ) {\n                    $error = \"\";\n                    // Query\n                    logItems($dataReceived['item_id'], $dataItem['label'], $_SESSION['user_id'], 'at_manual', $_SESSION['login'], htmlspecialchars_decode($dataReceived['label']));\n                    // Prepare new line\n                    $data = DB::queryfirstrow(\n                        \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i ORDER BY date DESC\",\n                        $dataReceived['item_id']\n                    );\n                    $historic = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $data['date']).\" - \".$_SESSION['login'].\" - \".$LANG[$data['action']].\" - \".$data['raison'];\n                    // send back\n                    $data = array(\n                        \"error\" => \"\",\n                        \"new_line\" => \"<br>\".addslashes($historic)\n                    );\n                    echo prepareExchangedData($data, \"encode\");\n                } else {\n                    $data = array(\"error\" => \"something_wrong\");\n                    echo prepareExchangedData($data, \"encode\");\n                    break;\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"free_item_for_edition\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            DB::delete(\n                prefix_table(\"items_edition\"),\n                \"item_id = %i\",\n                $post_id\n            );\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"is_item_changed\":\n            $data = DB::queryFirstRow(\n                \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND id_item = %i ORDER BY date DESC\",\n                \"at_modification\",\n                $post_item_id\n            );\n            // Check if it's in a personal folder. If yes, then force complexity overhead.\n            if ($data['date'] > filter_input(INPUT_POST, 'timestamp', FILTER_SANITIZE_STRING)) {\n                echo '{ \"modified\" : \"1\" }';\n            } else {\n                echo '{ \"modified\" : \"0\" }';\n            }\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"generate_OTV_url\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // delete all existing old otv codes\n            $rows = DB::query(\"SELECT id FROM \".prefix_table(\"otv\").\" WHERE timestamp < \".(time() - $SETTINGS['otv_expiration_period'] * 86400));\n            foreach ($rows as $record) {\n                DB::delete(prefix_table('otv'), \"id=%i\", $record['id']);\n            }\n\n            // generate session\n            $otv_code = GenerateCryptKey(32, false, true, true, true, false);\n\n            DB::insert(\n                prefix_table(\"otv\"),\n                array(\n                    'id' => null,\n                    'item_id' => $post_id,\n                    'timestamp' => time(),\n                    'originator' => intval($_SESSION['user_id']),\n                    'code' => $otv_code\n                    )\n            );\n            $newID = DB::insertId();\n\n            $otv_session = array(\n                \"code\"      => $otv_code,\n                \"stamp\" => time()\n            );\n\n            if (!isset($SETTINGS['otv_expiration_period'])) {\n                $SETTINGS['otv_expiration_period'] = 7;\n            }\n            $url = $SETTINGS['cpassman_url'].\"/index.php?otv=true&\".http_build_query($otv_session);\n            $exp_date = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n            echo json_encode(\n                array(\n                    \"error\" => \"\",\n                    \"url\" => str_replace(\n                        array(\"#URL#\", \"#DAY#\"),\n                        array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.addslashes($LANG['copy']).'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                        $LANG['one_time_view_item_url_box']\n                    )\n                )\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"image_preview_preparation\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $file_info = DB::queryfirstrow(\n                \"SELECT file, status FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            // prepare image info\n            $post_title = filter_input(INPUT_POST, 'title', FILTER_SANITIZE_STRING);\n            $image_code = $file_info['file'];\n            $extension = substr($post_title, strrpos($post_title, '.') + 1);\n            $file_to_display = $SETTINGS['url_to_upload_folder'].'/'.$image_code;\n            $file_suffix = \"\";\n\n            // should we encrypt/decrypt the file\n            encrypt_or_decrypt_file($file_info['file'], $file_info['status']);\n\n            // should we decrypt the attachment?\n            if (isset($file_info['status']) && $file_info['status'] === \"encrypted\") {\n                // Delete the file as viewed\n                fileDelete($SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension);\n\n                // Open the file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$image_code)) {\n                    // Should we encrypt or decrypt?\n                    prepareFileWithDefuse(\n                        'decrypt',\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code,\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                    );\n\n                    // prepare variable\n                    $file_to_display = $file_to_display.\"_delete.\".$extension;\n                    $file_suffix = \"_delete.\".$extension;\n                }\n            }\n\n            // Encrypt data to return\n            echo prepareExchangedData(\n                array(\n                    \"error\" => \"\",\n                    \"new_file\" => $file_to_display,\n                    \"file_suffix\" => $file_suffix,\n                    \"file_path\" => $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"delete_file\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $result = DB::queryfirstrow(\n                \"SELECT file FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            fileDelete($SETTINGS['path_to_upload_folder'].'/'.$result['file'].filter_input(INPUT_POST, 'file_suffix', FILTER_SANITIZE_STRING));\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"get_refined_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n\n            // get list of users\n            $aList = array();\n            $selOptionsUsers = \"\";\n            $selOptionsRoles = \"\";\n            $selEOptionsUsers = \"\";\n            $selEOptionsRoles = \"\";\n            $rows = DB::query(\n                \"SELECT r.role_id AS role_id, t.title AS title\n                FROM \".prefix_table(\"roles_values\").\" AS r\n                INNER JOIN \".prefix_table(\"roles_title\").\" AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i\",\n                $post_iFolderId\n            );\n            foreach ($rows as $record) {\n                $selOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role\">'.$record['title'].'</option>';\n                $selEOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role_edit\">'.$record['title'].'</option>';\n                $rows2 = DB::query(\"SELECT id, login, fonction_id FROM \".prefix_table(\"users\").\" WHERE fonction_id LIKE '%\".$record['role_id'].\"%'\");\n                foreach ($rows2 as $record2) {\n                    foreach (explode(\";\", $record2['fonction_id']) as $role) {\n                        if (!in_array($record2['id'], $aList) && $role == $record['role_id']) {\n                            array_push($aList, $record2['id']);\n                            $selOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user\">'.$record2['login'].'</option>';\n                            $selEOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user_edit\">'.$record2['login'].'</option>';\n                        }\n                    }\n                }\n            }\n\n            // export data\n            $data = array(\n                'error' => $error,\n                'selOptionsUsers' => $selOptionsUsers,\n                'selOptionsRoles' => $selOptionsRoles,\n                'selEOptionsUsers' => $selEOptionsUsers,\n                'selEOptionsRoles' => $selEOptionsRoles\n            );\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"check_for_title_duplicate\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n            $duplicate = 0;\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Prepare variables\n            $label = htmlspecialchars_decode($dataReceived['label']);\n            $idFolder = $dataReceived['idFolder'];\n\n            // don't check if Personal Folder\n            $data = DB::queryFirstRow(\"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $idFolder);\n            if ($data['title'] == $_SESSION['user_id']) {\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , error\" : \"\"}]';\n            } else {\n                if (filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING) === \"same_folder\") {\n                // case unique folder\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id_tree = %i AND label = %s\",\n                        $idFolder,\n                        $label\n                    );\n                } else {\n                // case complete database\n\n                    //get list of personal folders\n                    $arrayPf = array();\n                    $listPf = \"\";\n                    if (!empty($row['id'])) {\n                        $rows = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n                            \"1\"\n                        );\n                        foreach ($rows as $record) {\n                            if (!in_array($record['id'], $arrayPf)) {\n                                array_push($arrayPf, $record['id']);\n                            }\n                        }\n                    }\n\n                    // build WHERE condition\n                    $where = new WhereClause('and');\n                    $where->add('id_tree = %i', $idFolder);\n                    $where->add('label = %s', $label);\n                    if (!empty($arrayPf)) {\n                        $where->add(\"id_tree NOT IN (\".implode(',', $arrayPf).\")\");\n                    }\n\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE %l\",\n                        $where\n                    );\n                }\n\n                // count results\n                if (DB::count() > 0) {\n                    $duplicate = 1;\n                }\n\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , \"error\" : \"\"}]';\n            }\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"refresh_visible_folders\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Build list of visible folders\n            $selectVisibleFoldersOptions = $selectVisibleNonPersonalFoldersOptions = $selectVisibleActiveFoldersOptions = \"\";\n            if (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] === '1') {\n                $selectVisibleFoldersOptions = '<option value=\"0\">'.$LANG['root'].'</option>';\n            }\n\n            if ($_SESSION['user_admin'] === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n                && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n                $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n            }\n\n            if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n                $listFoldersLimitedKeys = @array_keys($_SESSION['list_folders_limited']);\n            } else {\n                $listFoldersLimitedKeys = array();\n            }\n            // list of items accessible but not in an allowed folder\n            if (isset($_SESSION['list_restricted_folders_for_items'])\n                && count($_SESSION['list_restricted_folders_for_items']) > 0) {\n                $listRestrictedFoldersForItemsKeys = @array_keys($_SESSION['list_restricted_folders_for_items']);\n            } else {\n                $listRestrictedFoldersForItemsKeys = array();\n            }\n\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $folders = $tree->getDescendants();\n\n            foreach ($folders as $folder) {\n                // Be sure that user can only see folders he/she is allowed to\n                if (!in_array($folder->id, $_SESSION['forbiden_pfs'])\n                    || in_array($folder->id, $_SESSION['groupes_visibles'])\n                    || in_array($folder->id, $listFoldersLimitedKeys)\n                    || in_array($folder->id, $listRestrictedFoldersForItemsKeys)\n                ) {\n                    $displayThisNode = false;\n                    $hide_node = false;\n                    $nbChildrenItems = 0;\n                    // Check if any allowed folder is part of the descendants of this node\n                    $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                    foreach ($nodeDescendants as $node) {\n                        // manage tree counters\n                        if (isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] === '1') {\n                            DB::query(\n                                \"SELECT * FROM \".prefix_table(\"items\").\"\n                                WHERE inactif=%i AND id_tree = %i\",\n                                0,\n                                $node\n                            );\n                            $nbChildrenItems += DB::count();\n                        }\n                        if (in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items']))\n                            || @in_array($node, $listFoldersLimitedKeys)\n                            || @in_array($node, $listRestrictedFoldersForItemsKeys)\n                        ) {\n                            $displayThisNode = true;\n                            //break;\n                        }\n                    }\n\n                    if ($displayThisNode === true) {\n                        $ident = \"\";\n                        for ($x = 1; $x < $folder->nlevel; $x++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n\n                        // resize title if necessary\n                        $fldTitle = str_replace(\"&\", \"&amp;\", $folder->title);\n\n                        // rename personal folder with user login\n                        if ($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1') {\n                            $fldTitle = $_SESSION['login'];\n                        }\n\n                        // build select for all visible folders\n                        if (in_array($folder->id, $_SESSION['groupes_visibles']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            if ($_SESSION['user_read_only'] === '0' || ($_SESSION['user_read_only'] === '1' && in_array($folder->id, $_SESSION['personal_visible_groups']))) {\n                                if (($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1')) { //\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" >'.$ident.$fldTitle.'</option>';\n                                } else {\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                                }\n                            } else {\n                                $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                            }\n                        } else {\n                            $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for non personal visible folders\n                        if (isset($_SESSION['all_non_personal_folders']) && in_array($folder->id, $_SESSION['all_non_personal_folders'])) {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for active folders (where user can do something)\n                        if (isset($_SESSION['list_restricted_folders_for_items']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                    }\n                }\n            }\n\n            $data = array(\n                'error' => \"\",\n                'selectVisibleFoldersOptions' => ($selectVisibleFoldersOptions),\n                'selectVisibleNonPersonalFoldersOptions' => ($selectVisibleNonPersonalFoldersOptions),\n                'selectVisibleActiveFoldersOptions' => ($selectVisibleActiveFoldersOptions),\n                'selectFullVisibleFoldersOptions' => str_replace('disabled=\"disabled\"', \"\", $selectVisibleFoldersOptions)\n            );\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Load item history\n        */\n        case \"load_item_history\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $id = noHTML(htmlspecialchars_decode($dataReceived['id']));\n\n            // get item info\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $id\n            );\n\n            // get item history\n            $history = '<table style=\"margin:0px; width:100%; border-collapse: collapse; background-color:#D4D5D5;\" cellspacing=\"0\" cellpadding=\"1\">';\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, l.raison_iv AS raison_iv,\n                u.login as login, u.avatar_thumb as avatar_thumb\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'].\" [\".$record['raison'].\"]\";\n                }\n\n                if (!empty($reason[1])\n                    || $record['action'] === \"at_copy\"\n                    || $record['action'] === \"at_creation\"\n                    || $record['action'] === \"at_manual\"\n                    || $record['action'] === \"at_modification\"\n                    || $record['action'] === \"at_delete\"\n                    || $record['action'] === \"at_restored\") {\n                    // Prepare avatar\n                    if (isset($record['avatar_thumb']) && !empty($record['avatar_thumb'])) {\n                        if (file_exists($SETTINGS['cpassman_dir'].'/includes/avatars/'.$record['avatar_thumb'])) {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$record['avatar_thumb'];\n                        } else {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                        }\n                    } else {\n                        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                    }\n\n                    $history .= '<tr style=\"\">'.\n                        '<td rowspan=\"2\" style=\"width:40px;\"><img src=\"'.$avatar.'\" style=\"border-radius:20px; height:35px;\"></td>'.\n                        '<td colspan=\"2\" style=\"font-size:11px;\"><i>'.$LANG['by'].' '.$record['login'].' '.$LANG['at'].' '.date($SETTINGS['date_format'].' '.$SETTINGS['time_format'], $record['date']).'</i></td></tr>'.\n                        '<tr style=\"border-bottom:3px solid #C9C9C9;\"><td style=\"width:100px;\"><b>'.$LANG[$record['action']].'</b></td>'.\n                        '<td style=\"\">'.(!empty($record['raison']) && $record['action'] !== \"at_creation\" ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.handleBackslash($reason[1]) : ($record['action'] === \"at_manual\" ? $reason[0] : $LANG[trim($reason[0])])) : '').'</td>'.\n                        '</tr>'.\n                        '<tr></tr>';\n                }\n            }\n            $history .= \"</table>\";\n\n            $data = array(\n                'error' => \"\",\n                'new_html' => $history\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        case \"suggest_item_change\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retrieve data in JSON format\n            $data_received = prepareExchangedData($post_data, \"decode\");\n\n            // prepare variables\n            $label = htmlspecialchars_decode($data_received['label']);\n            $pwd = htmlspecialchars_decode($data_received['pwd']);\n            $login = htmlspecialchars_decode($data_received['login']);\n            $email = htmlspecialchars_decode($data_received['email']);\n            $url = htmlspecialchars_decode($data_received['url']);\n            $folder = htmlspecialchars_decode($data_received['folder']);\n            $comment = htmlspecialchars_decode($data_received['comment']);\n            $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n            if (empty($pwd)) {\n                $encrypt['string'] = \"\";\n            } else {\n                $encrypt = cryption($pwd, \"\", \"encrypt\");\n            }\n\n            // query\n            DB::insert(\n                prefix_table(\"items_change\"),\n                array(\n                    'item_id' => $item_id,\n                    'label' => $label,\n                    'pw' => $encrypt['string'],\n                    'login' => $login,\n                    'email' => $email,\n                    'url' => $url,\n                    'description' => \"\",\n                    'comment' => $comment,\n                    'folder_id' => $folder,\n                    'user_id' => $_SESSION['user_id'],\n                    'timestamp' => time()\n                )\n            );\n            $newID = DB::insertId();\n\n            // get some info to add to the notification email\n            $resp_user = DB::queryfirstrow(\n                \"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\",\n                $_SESSION['user_id']\n            );\n            $resp_folder = DB::queryfirstrow(\n                \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $folder\n            );\n\n            // notify Managers\n            $rows = DB::query(\n                \"SELECT email\n                FROM \".prefix_table(\"users\").\"\n                WHERE `gestionnaire` = %i AND `email` IS NOT NULL\",\n                1\n            );\n            foreach ($rows as $record) {\n                sendEmail(\n                    $LANG['suggestion_notify_subject'],\n                    str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), $LANG['suggestion_notify_body']),\n                    $record['email']\n                );\n            }\n\n            echo '[ { \"error\" : \"\" } ]';\n            break;\n\n        case \"build_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Get list of users\n            $usersList = array();\n            $usersString = \"\";\n            $rows = DB::query(\"SELECT id,login,email FROM \".$pre.\"users ORDER BY login ASC\");\n            foreach ($rows as $record) {\n                $usersList[$record['login']] = array(\n                    \"id\" => $record['id'],\n                    \"login\" => $record['login'],\n                    \"email\" => $record['email'],\n                    );\n                $usersString .= $record['id'].\"#\".$record['login'].\";\";\n            }\n\n            $data = array(\n                'error' => \"\",\n                'list' => $usersString\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n            break;\n    }\n}\n// Build the QUERY in case of GET\nif (isset($_GET['type'])) {\n    switch ($_GET['type']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case \"autocomplete_tags\":\n            // Get a list off all existing TAGS\n            $listOfTags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE tag LIKE %ss GROUP BY tag\", $_GET['term']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"'.$record['tag'].'\"';\n                } else {\n                    $listOfTags .= ', \"'.$record['tag'].'\"';\n                }\n            }\n            echo \"[\".$listOfTags.\"]\";\n            break;\n    }\n}\n\n/*\n* FUNCTION\n* Identify if this group authorize creation of item without the complexit level reached\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        \"SELECT bloquer_creation, bloquer_modification, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data['personal_folder'] === '1') {\n        return array(\"bloquer_modification_complexite\" => 1, \"bloquer_creation_complexite\" => 1);\n    }\n\n    return array(\"bloquer_modification_complexite\" => $data['bloquer_modification'], \"bloquer_creation_complexite\" => $data['bloquer_creation']);\n}\n\n/*\n* FUNCTION\n* permits to identify what icon to display depending on file extension\n*/\nfunction fileFormatImage($ext)\n{\n    global $SETTINGS_EXT;\n    if (in_array($ext, $SETTINGS_EXT['office_file_ext'])) {\n        $image = \"file-word-o\";\n    } elseif ($ext === \"pdf\") {\n        $image = \"file-pdf-o\";\n    } elseif (in_array($ext, $SETTINGS_EXT['image_file_ext'])) {\n        $image = \"file-image-o\";\n    } elseif ($ext === \"txt\") {\n        $image = \"file-text-o\";\n    } else {\n        $image = \"file-o\";\n    }\n\n    return $image;\n}\n\n/*\n* FUNCTION\n* permits to remplace some specific characters in password\n*/\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n", "<?php\n/**\n *\n * @file          main.functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link\n */\n\n//define pbkdf2 iteration count\ndefine('ITCOUNT', '2072');\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} elseif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// load phpCrypt\nif (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n    require_once '../includes/libraries/phpcrypt/phpCrypt.php';\n    require_once '../includes/config/settings.php';\n} else {\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n}\n\n// Prepare PHPCrypt class calls\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare Encryption class calls\nuse \\Defuse\\Crypto\\Crypto;\nuse \\Defuse\\Crypto\\Exception as Ex;\n\n//Generate N# of random bits for use as salt\n/**\n * @param integer $size\n */\nfunction getBits($size)\n{\n    $str = '';\n    $var_x = $size + 10;\n    for ($var_i = 0; $var_i < $var_x; $var_i++) {\n        $str .= base_convert(mt_rand(1, 36), 10, 36);\n    }\n    return substr($str, 0, $size);\n}\n\n//generate pbkdf2 compliant hash\nfunction strHashPbkdf2($var_p, $var_s, $var_c, $var_kl, $var_a = 'sha256', $var_st = 0)\n{\n    $var_kb = $var_st + $var_kl; // Key blocks to compute\n    $var_dk = ''; // Derived key\n\n    for ($block = 1; $block <= $var_kb; $block++) { // Create key\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true); // Initial hash for this block\n        for ($var_i = 1; $var_i < $var_c; $var_i++) { // Perform block iterations\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true)); // XOR each iterate\n        }\n        $var_dk .= $var_ib; // Append iterated block\n    }\n    return substr($var_dk, $var_st, $var_kl); // Return derived key of correct length\n}\n\n/**\n * stringUtf8Decode()\n *\n * utf8_decode\n */\nfunction stringUtf8Decode($string)\n{\n    return str_replace(\" \", \"+\", utf8_decode($string));\n}\n\n/**\n * encryptOld()\n *\n * crypt a string\n * @param string $text\n */\nfunction encryptOld($text, $personalSalt = \"\")\n{\n    if (empty($personalSalt) === false) {\n        return trim(\n            base64_encode(\n                mcrypt_encrypt(\n                    MCRYPT_RIJNDAEL_256,\n                    $personalSalt,\n                    $text,\n                    MCRYPT_MODE_ECB,\n                    mcrypt_create_iv(\n                        mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                        MCRYPT_RAND\n                    )\n                )\n            )\n        );\n    }\n\n    // If $personalSalt is not empty\n    return trim(\n        base64_encode(\n            mcrypt_encrypt(\n                MCRYPT_RIJNDAEL_256,\n                SALT,\n                $text,\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        )\n    );\n}\n\n/**\n * decryptOld()\n *\n * decrypt a crypted string\n */\nfunction decryptOld($text, $personalSalt = \"\")\n{\n    if (!empty($personalSalt)) {\n        return trim(\n            mcrypt_decrypt(\n                MCRYPT_RIJNDAEL_256,\n                $personalSalt,\n                base64_decode($text),\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        );\n    }\n\n    // No personal SK\n    return trim(\n        mcrypt_decrypt(\n            MCRYPT_RIJNDAEL_256,\n            SALT,\n            base64_decode($text),\n            MCRYPT_MODE_ECB,\n            mcrypt_create_iv(\n                mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                MCRYPT_RAND\n            )\n        )\n    );\n}\n\n/**\n * encrypt()\n *\n * crypt a string\n * @param string $decrypted\n */\nfunction encrypt($decrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n\n    //set our salt to a variable\n    // Get 64 random bits for the salt for pbkdf2\n    $pbkdf2Salt = getBits(64);\n    // generate a pbkdf2 key to use for the encryption.\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Build $init_vect and $ivBase64.  We use a block size of 256 bits (AES compliant)\n    // and CTR mode.  (Note: ECB mode is inadequate as IV is not used.)\n    $init_vect = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, 'ctr'), MCRYPT_RAND);\n\n    //base64 trim\n    if (strlen($ivBase64 = rtrim(base64_encode($init_vect), '=')) != 43) {\n        return false;\n    }\n    // Encrypt $decrypted\n    $encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $decrypted, 'ctr', $init_vect);\n    // MAC the encrypted text\n    $mac = hash_hmac('sha256', $encrypted, $staticSalt);\n    // We're done!\n    return base64_encode($ivBase64.$encrypted.$mac.$pbkdf2Salt);\n}\n\n/**\n * decrypt()\n *\n * decrypt a crypted string\n */\nfunction decrypt($encrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n    //base64 decode the entire payload\n    $encrypted = base64_decode($encrypted);\n    // get the salt\n    $pbkdf2Salt = substr($encrypted, -64);\n    //remove the salt from the string\n    $encrypted = substr($encrypted, 0, -64);\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Retrieve $init_vect which is the first 22 characters plus ==, base64_decoded.\n    $init_vect = base64_decode(substr($encrypted, 0, 43).'==');\n    // Remove $init_vect from $encrypted.\n    $encrypted = substr($encrypted, 43);\n    // Retrieve $mac which is the last 64 characters of $encrypted.\n    $mac = substr($encrypted, -64);\n    // Remove the last 64 chars from encrypted (remove MAC)\n    $encrypted = substr($encrypted, 0, -64);\n    //verify the sha256hmac from the encrypted data before even trying to decrypt it\n    if (hash_hmac('sha256', $encrypted, $staticSalt) != $mac) {\n        return false;\n    }\n    // Decrypt the data.\n    $decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, 'ctr', $init_vect), \"\\0\\4\");\n    // Yay!\n    return $decrypted;\n}\n\n\n/**\n * genHash()\n *\n * Generate a hash for user login\n * @param string $password\n */\nfunction bCrypt($password, $cost)\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; $i++) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n    return crypt($password, $salt);\n}\n\nfunction cryption_before_defuse($message, $saltkey, $init_vect, $type = null, $scope = \"public\")\n{\n    if (DEFUSE_ENCRYPTION === true) {\n        if ($scope === \"perso\") {\n            return defuse_crypto(\n                $message,\n                $saltkey,\n                $type\n            );\n        } else {\n            return defuse_crypto(\n                $message,\n                file_get_contents(SECUREPATH.\"/teampass-seckey.txt\"),\n                $type\n            );\n        }\n    } else {\n        return cryption_phpCrypt($message, $saltkey, $init_vect, $type);\n    }\n}\n\n/*\n * cryption() - Encrypt and decrypt string based upon phpCrypt library\n *\n * Using AES_128 and mode CBC\n *\n * $key and $init_vect have to be given in hex format\n */\nfunction cryption_phpCrypt($string, $key, $init_vect, $type)\n{\n    // manage key origin\n    if (null != SALT && $key != SALT) {\n        // check key (AES-128 requires a 16 bytes length key)\n        if (strlen($key) < 16) {\n            for ($inc = strlen($key) + 1; $inc <= 16; $inc++) {\n                $key .= chr(0);\n            }\n        } elseif (strlen($key) > 16) {\n            $key = substr($key, 16);\n        }\n    }\n\n    // load crypt\n    $crypt = new PHP_Crypt($key, PHP_Crypt::CIPHER_AES_128, PHP_Crypt::MODE_CBC);\n\n    if ($type == \"encrypt\") {\n        // generate IV and encrypt\n        $init_vect = $crypt->createIV();\n        $encrypt = $crypt->encrypt($string);\n        // return\n        return array(\n            \"string\" => bin2hex($encrypt),\n            \"iv\" => bin2hex($init_vect),\n            \"error\" => empty($encrypt) ? \"ERR_ENCRYPTION_NOT_CORRECT\" : \"\"\n        );\n    } elseif ($type == \"decrypt\") {\n        // case if IV is empty\n        if (empty($init_vect)) {\n                    return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // convert\n        try {\n            $string = testHex2Bin(trim($string));\n            $init_vect = testHex2Bin($init_vect);\n        } catch (Exception $e) {\n            return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // load IV\n        $crypt->IV($init_vect);\n        // decrypt\n        $decrypt = $crypt->decrypt($string);\n        // return\n        return array(\n            'string' => str_replace(chr(0), \"\", $decrypt),\n            'error' => \"\"\n        );\n    }\n}\n\nfunction testHex2Bin($val)\n{\n    if (!@hex2bin($val)) {\n        throw new Exception(\"ERROR\");\n    }\n    return hex2bin($val);\n}\n\n/**\n * @param string $ascii_key\n * @param string $type\n */\nfunction cryption($message, $ascii_key, $type) //defuse_crypto\n{\n    global $SETTINGS;\n\n    // load PhpEncryption library\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/';\n    }\n\n    require_once $path.'Crypto.php';\n    require_once $path.'Encoding.php';\n    require_once $path.'DerivedKeys.php';\n    require_once $path.'Key.php';\n    require_once $path.'KeyOrPassword.php';\n    require_once $path.'File.php';\n    require_once $path.'RuntimeTests.php';\n    require_once $path.'KeyProtectedByPassword.php';\n    require_once $path.'Core.php';\n\n    // init\n    $err = '';\n    if (empty($ascii_key)) {\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n    }\n\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        if ($type === \"encrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === \"decrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = \"an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : \"\",\n        'error' => $err\n    );\n}\n\nfunction defuse_generate_key()\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\nfunction defuse_generate_personal_key($psk)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    $protected_key_encoded = $protected_key->saveToAsciiSafeString();\n\n    return $protected_key_encoded; // save this in user table\n}\n\n/**\n * @param string $psk\n */\nfunction defuse_validate_personal_key($psk, $protected_key_encoded)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    try {\n        $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return \"Error - Major issue as the encryption is broken.\";\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return \"Error - The saltkey is not the correct one.\";\n    }\n\n    return $user_key_encoded; // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted\n * @param  [type] $value Encrypted string\n * @return [type]        Decrypted string\n */\nfunction defuse_return_decrypted($value)\n{\n    if (substr($value, 0, 3) === \"def\") {\n        $value = cryption($value, \"\", \"decrypt\")['string'];\n    }\n    return $value;\n}\n\n/**\n * trimElement()\n *\n * trim a string depending on a specific string\n * @param string $element\n * @return string\n */\nfunction trimElement($chaine, $element)\n{\n    if (!empty($chaine)) {\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) == $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) == $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n    return $chaine;\n}\n\n/**\n * cleanString()\n *\n * permits to suppress all \"special\" characters from string\n */\nfunction cleanString($string, $special = false)\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = array();\n    for ($i = 0; $i <= 31; $i++) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, \"<br />\");\n    if ($special == \"1\") {\n        $tabSpecialChar = array_merge($tabSpecialChar, array(\"</li>\", \"<ul>\", \"<ol>\"));\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\nfunction db_error_handler($params)\n{\n    echo \"Error: \".$params['error'].\"<br>\\n\";\n    echo \"Query: \".$params['query'].\"<br>\\n\";\n    throw new Exception(\"Error - Query\", 1);\n}\n\n/**\n * [identifyUserRights description]\n * @param  string $groupesVisiblesUser  [description]\n * @param  string $groupesInterditsUser [description]\n * @param  string $isAdmin              [description]\n * @param  string $idFonctions          [description]\n * @return string                       [description]\n */\nfunction identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmin, $idFonctions)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR\n    if ($isAdmin == 1) {\n        $groupesVisibles = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['list_restricted_folders_for_items'] = array();\n        $_SESSION['list_folders_editable_by_role'] = array();\n        $_SESSION['list_folders_limited'] = array();\n        $_SESSION['groupes_visibles_list'] = \"\";\n        $_SESSION['list_folders_limited'] = \"\";\n        $rows = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\", 0);\n        foreach ($rows as $record) {\n            array_push($groupesVisibles, $record['id']);\n        }\n        $_SESSION['groupes_visibles'] = $groupesVisibles;\n        $_SESSION['all_non_personal_folders'] = $groupesVisibles;\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n        $where = new WhereClause('and'); // create a WHERE statement of pieces joined by ANDs\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n        // Get ID of personal folder\n        $persfld = DB::queryfirstrow(\n            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\",\n            $_SESSION['user_id']\n        );\n        if (!empty($persfld['id'])) {\n            if (!in_array($persfld['id'], $_SESSION['groupes_visibles'])) {\n                array_push($_SESSION['groupes_visibles'], $persfld['id']);\n                array_push($_SESSION['personal_visible_groups'], $persfld['id']);\n                // get all descendants\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                $tree->rebuild();\n                $tst = $tree->getDescendants($persfld['id']);\n                foreach ($tst as $t) {\n                    array_push($_SESSION['groupes_visibles'], $t->id);\n                    array_push($_SESSION['personal_visible_groups'], $t->id);\n                }\n            }\n        }\n\n        // get complete list of ROLES\n        $tmp = explode(\";\", $idFonctions);\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n            ORDER BY title ASC\"\n        );\n        foreach ($rows as $record) {\n            if (!empty($record['id']) && !in_array($record['id'], $tmp)) {\n                array_push($tmp, $record['id']);\n            }\n        }\n        $_SESSION['fonction_id'] = implode(\";\", $tmp);\n\n        $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n        $_SESSION['is_admin'] = $isAdmin;\n        // Check if admin has created Folders and Roles\n        DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::query(\"SELECT * FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    } else {\n        // init\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['fonction_id'] = $idFonctions;\n        $groupesInterdits = array();\n        if (!is_array($groupesInterditsUser)) {\n            $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, \";\"));\n        }\n        if (!empty($groupesInterditsUser) && count($groupesInterditsUser) > 0) {\n            $groupesInterdits = $groupesInterditsUser;\n        }\n        $_SESSION['is_admin'] = $isAdmin;\n        $fonctionsAssociees = explode(';', trimElement($idFonctions, \";\"));\n\n        $listAllowedFolders = $listFoldersLimited = $listFoldersEditableByRole = $listRestrictedFoldersForItems = $listReadOnlyFolders = array();\n\n        // rechercher tous les groupes visibles en fonction des roles de l'utilisateur\n        foreach ($fonctionsAssociees as $roleId) {\n            if (!empty($roleId)) {\n                // Get allowed folders for each Role\n                $rows = DB::query(\"SELECT folder_id FROM \".prefix_table(\"roles_values\").\" WHERE role_id=%i\", $roleId);\n\n                if (DB::count() > 0) {\n                    $tmp = DB::queryfirstrow(\"SELECT allow_pw_change FROM \".prefix_table(\"roles_title\").\" WHERE id = %i\", $roleId);\n                    foreach ($rows as $record) {\n                        if (isset($record['folder_id']) && !in_array($record['folder_id'], $listAllowedFolders)) {\n                            array_push($listAllowedFolders, $record['folder_id']);\n                        }\n                        // Check if this group is allowed to modify any pw in allowed folders\n                        if ($tmp['allow_pw_change'] == 1 && !in_array($record['folder_id'], $listFoldersEditableByRole)) {\n                            array_push($listFoldersEditableByRole, $record['folder_id']);\n                        }\n                    }\n                    // Check for the users roles if some specific rights exist on items\n                    $rows = DB::query(\n                        \"SELECT i.id_tree, r.item_id\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (r.item_id=i.id)\n                        WHERE r.role_id=%i\n                        ORDER BY i.id_tree ASC\",\n                        $roleId\n                    );\n                    $inc = 0;\n                    foreach ($rows as $record) {\n                        if (isset($record['id_tree'])) {\n                            $listFoldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n                            $inc++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Does this user is allowed to see other items\n        $inc = 0;\n        $rows = DB::query(\n            \"SELECT id, id_tree FROM \".prefix_table(\"items\").\"\n            WHERE restricted_to LIKE %ss AND inactif=%s\",\n            $_SESSION['user_id'].';',\n            '0'\n        );\n        foreach ($rows as $record) {\n            $listRestrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            $inc++;\n        }\n        // => Build final lists\n        // Clean arrays\n        $listAllowedFolders = array_unique($listAllowedFolders);\n        $groupesVisiblesUser = explode(';', trimElement($groupesVisiblesUser, \";\"));\n        // Add user allowed folders\n        $allowedFoldersTmp = array_unique(\n            array_merge($listAllowedFolders, $groupesVisiblesUser)\n        );\n        // Exclude from allowed folders all the specific user forbidden folders\n        $allowedFolders = array();\n        foreach ($allowedFoldersTmp as $ident) {\n            if (!in_array($ident, $groupesInterditsUser) && !empty($ident)) {\n                array_push($allowedFolders, $ident);\n            }\n        }\n\n        // Clean array\n        $listAllowedFolders = array_filter(array_unique($allowedFolders));\n\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n\n        $where = new WhereClause('and');\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n\n        $persoFlds = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE %l\", $where);\n        foreach ($persoFlds as $persoFldId) {\n            array_push($_SESSION['forbiden_pfs'], $persoFldId['id']);\n        }\n        // Get IDs of personal folders\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $persoFld = DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $_SESSION['user_id']);\n            if (!empty($persoFld['id'])) {\n                if (!in_array($persoFld['id'], $listAllowedFolders)) {\n                    array_push($_SESSION['personal_folders'], $persoFld['id']);\n                    // get all descendants\n                    $ids = $tree->getDescendants($persoFld['id'], true, false);\n                    foreach ($ids as $ident) {\n                        array_push($listAllowedFolders, $ident->id);\n                        array_push($_SESSION['personal_visible_groups'], $ident->id);\n                        array_push($_SESSION['personal_folders'], $ident->id);\n                    }\n                }\n            }\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W or N in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, array_unique(array_merge($listReadOnlyFolders, $_SESSION['personal_folders'])))) {   //\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && in_array($folderId, $groupesVisiblesUser) === false) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        } else {\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, $listReadOnlyFolders)) {\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && !in_array($folderId, $groupesVisiblesUser)) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        }\n\n        // check if change proposals on User's items\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n            DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"items_change\").\" AS c\n                LEFT JOIN \".prefix_table(\"log_items\").\" AS i ON (c.item_id = i.id_item)\n                WHERE i.action = %s AND i.id_user = %i\",\n                \"at_creation\",\n                $_SESSION['user_id']\n            );\n            $_SESSION['nb_item_change_proposals'] = DB::count();\n        } else {\n            $_SESSION['nb_item_change_proposals'] = 0;\n        }\n\n        $_SESSION['all_non_personal_folders'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles_list'] = implode(',', $listAllowedFolders);\n        $_SESSION['personal_visible_groups_list'] = implode(',', $_SESSION['personal_visible_groups']);\n        $_SESSION['read_only_folders'] = $listReadOnlyFolders;\n        $_SESSION['no_access_folders'] = $groupesInterdits;\n\n        $_SESSION['list_folders_limited'] = $listFoldersLimited;\n        $_SESSION['list_folders_editable_by_role'] = $listFoldersEditableByRole;\n        $_SESSION['list_restricted_folders_for_items'] = $listRestrictedFoldersForItems;\n        // Folders and Roles numbers\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    }\n\n    // update user's timestamp\n    DB::update(\n        prefix_table('users'),\n        array(\n            'timestamp' => time()\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n}\n\n/**\n * updateCacheTable()\n *\n * Update the CACHE table\n * @param string $action\n */\nfunction updateCacheTable($action, $ident = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Rebuild full cache table\n    if ($action === \"reload\") {\n        // truncate table\n        DB::query(\"TRUNCATE TABLE \".prefix_table(\"cache\"));\n\n        // reload date\n        $rows = DB::query(\n            \"SELECT *\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            AND l.action = %s\n            AND i.inactif = %i\",\n            'at_creation',\n            0\n        );\n        foreach ($rows as $record) {\n            // Get all TAGS\n            $tags = \"\";\n            $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $record['id']);\n            foreach ($itemTags as $itemTag) {\n                if (!empty($itemTag['tag'])) {\n                    $tags .= $itemTag['tag'].\" \";\n                }\n            }\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\"SELECT renewal_period FROM \".prefix_table('nested_tree').\" WHERE id=%i\", $record['id_tree']);\n\n            // form id_tree to full foldername\n            $folder = \"\";\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                    $elem->title = $_SESSION['login'];\n                }\n                if (empty($folder)) {\n                    $folder = stripslashes($elem->title);\n                } else {\n                    $folder .= \" \u00bb \".stripslashes($elem->title);\n                }\n            }\n            // store data\n            DB::insert(\n                prefix_table('cache'),\n                array(\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => isset($record['description']) ? $record['description'] : \"\",\n                    'url' => (isset($record['url']) && !empty($record['url'])) ? $record['url'] : \"0\",\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => (isset($record['restricted_to']) && !empty($record['restricted_to'])) ? $record['restricted_to'] : \"0\",\n                    'login' => isset($record['login']) ? $record['login'] : \"\",\n                    'folder' => $folder,\n                    'author' => $record['id_user'],\n                    'renewal_period' => isset($resNT['renewal_period']) ? $resNT['renewal_period'] : \"0\",\n                    'timestamp' => $record['date']\n                    )\n            );\n        }\n        // UPDATE an item\n    } elseif ($action === \"update_value\") {\n        // get new value from db\n        $data = DB::queryfirstrow(\n            \"SELECT label, description, id_tree, perso, restricted_to, login, url\n            FROM \".prefix_table('items').\"\n            WHERE id=%i\",\n            $ident\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::update(\n            prefix_table('cache'),\n            array(\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => $tags,\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => $data['perso'],\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"0\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                ),\n            \"id = %i\",\n            $ident\n        );\n        // ADD an item\n    } elseif ($action === \"add_value\") {\n        // get new value from db\n        $data = DB::queryFirstRow(\n            \"SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            WHERE i.id = %i\n            AND l.action = %s\",\n            $ident,\n            'at_creation'\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id = %i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::insert(\n            prefix_table('cache'),\n            array(\n                'id' => $data['id'],\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => (isset($tags) && !empty($tags)) ? $tags : \"None\",\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => (isset($data['perso']) && !empty($data['perso']) && $data['perso'] !== \"None\") ? $data['perso'] : \"0\",\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"None\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                'timestamp' => $data['date']\n            )\n        );\n\n        // DELETE an item\n    } elseif ($action === \"delete_value\") {\n        DB::delete(prefix_table('cache'), \"id = %i\", $ident);\n    }\n}\n\n/*\n*\n*/\nfunction getStatisticsData()\n{\n    global $SETTINGS;\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        0\n    );\n    $counter_folders = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        1\n    );\n    $counter_folders_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        0\n    );\n    $counter_items = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        1\n    );\n    $counter_items_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\"\"\n    );\n    $counter_users = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE admin = %i\",\n        1\n    );\n    $admins = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE gestionnaire = %i\",\n        1\n    );\n    $managers = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE read_only = %i\",\n        1\n    );\n    $readOnly = DB::count();\n\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        \"SELECT name FROM \".prefix_table(\"languages\")\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            \"SELECT * FROM \".prefix_table(\"users\").\" WHERE user_language = %s\",\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        \"SELECT user_ip FROM \".prefix_table(\"users\")\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] = $usedIp[$ip['user_ip']] + 1;\n        } elseif (!empty($ip['user_ip']) && $ip['user_ip'] !== \"none\") {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return array(\n        \"error\" => \"\",\n        \"stat_phpversion\" => phpversion(),\n        \"stat_folders\" => $counter_folders,\n        \"stat_folders_shared\" => intval($counter_folders) - intval($counter_folders_perso),\n        \"stat_items\" => $counter_items,\n        \"stat_items_shared\" => intval($counter_items) - intval($counter_items_perso),\n        \"stat_users\" => $counter_users,\n        \"stat_admins\" => $admins,\n        \"stat_managers\" => $managers,\n        \"stat_ro\" => $readOnly,\n        \"stat_kb\" => $SETTINGS['enable_kb'],\n        \"stat_pf\" => $SETTINGS['enable_pf_feature'],\n        \"stat_fav\" => $SETTINGS['enable_favourites'],\n        \"stat_teampassversion\" => $SETTINGS['cpassman_version'],\n        \"stat_ldap\" => $SETTINGS['ldap_mode'],\n        \"stat_agses\" => $SETTINGS['agses_authentication_enabled'],\n        \"stat_duo\" => $SETTINGS['duo'],\n        \"stat_suggestion\" => $SETTINGS['enable_suggestion'],\n        \"stat_api\" => $SETTINGS['api'],\n        \"stat_customfields\" => $SETTINGS['item_extra_fields'],\n        \"stat_syslog\" => $SETTINGS['syslog_enable'],\n        \"stat_2fa\" => $SETTINGS['google_authentication'],\n        \"stat_stricthttps\" => $SETTINGS['enable_sts'],\n        \"stat_mysqlversion\" => DB::serverVersion(),\n        \"stat_languages\" => $usedLang,\n        \"stat_country\" => $usedIp\n    );\n}\n\n/**\n * sendEmail()\n *\n * @return\n */\nfunction sendEmail($subject, $textMail, $email, $textMailAlt = \"\")\n{\n    global $LANG;\n    global $SETTINGS;\n\n    // CAse where email not defined\n    if ($email === \"none\") {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n\n    include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n    //load library\n    $user_language = isset($_SESSION['user_language']) ? $_SESSION['user_language'] : \"english\";\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$user_language.'.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Email/Phpmailer/PHPMailerAutoload.php';\n\n    // load PHPMailer\n    $mail = new PHPMailer();\n\n    // send to user\n    $mail->setLanguage(\"en\", \"../includes/libraries/Email/Phpmailer/language/\");\n    $mail->SMTPDebug = 0; //value 1 can be used to debug\n    $mail->Port = $SETTINGS['email_port']; //COULD BE USED\n    $mail->CharSet = \"utf-8\";\n    if ($SETTINGS['email_security'] === \"tls\" || $SETTINGS['email_security'] === \"ssl\") {\n        $mail->SMTPSecure = $SETTINGS['email_security'];\n    }\n    $mail->isSmtp(); // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server']; // SMTP servers\n    $mail->SMTPAuth = $SETTINGS['email_smtp_auth'] == '1' ? true : false; // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username']; // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd']; // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    $mail->addAddress($email); //Destinataire\n    $mail->WordWrap = 80; // set word wrap\n    $mail->isHtml(true); // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $textMail;\n    $mail->AltBody = $textMailAlt;\n    // send email\n    if (!$mail->send()) {\n        return '\"error\":\"error_mail_not_send\" , \"message\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $mail->ErrorInfo).'\"';\n    } else {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n}\n\n/**\n * generateKey()\n *\n * @return\n */\nfunction generateKey()\n{\n    return substr(md5(rand().rand()), 0, 15);\n}\n\n/**\n * dateToStamp()\n *\n * @return\n */\nfunction dateToStamp($date)\n{\n    global $SETTINGS;\n\n    $date = date_parse_from_format($SETTINGS['date_format'], $date);\n    if ($date['warning_count'] == 0 && $date['error_count'] == 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    } else {\n        return false;\n    }\n}\n\nfunction isDate($date)\n{\n    return (strtotime($date) !== false);\n}\n\n/**\n * isUTF8()\n *\n * @return integer is the string in UTF8 format.\n */\n\nfunction isUTF8($string)\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/*\n* FUNCTION\n* permits to prepare data to be exchanged\n*/\n/**\n * @param string $type\n */\nfunction prepareExchangedData($data, $type)\n{\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n    //Load AES\n    $aes = new SplClassLoader('Encryption\\Crypt', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $aes->register();\n\n    if ($type == \"encode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            );\n        } else {\n            return Encryption\\Crypt\\aesctr::encrypt(\n                json_encode(\n                    $data,\n                    JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n                ),\n                $_SESSION['key'],\n                256\n            );\n        }\n    } elseif ($type == \"decode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_decode(\n                $data,\n                true\n            );\n        } else {\n            return json_decode(\n                Encryption\\Crypt\\aesctr::decrypt(\n                    $data,\n                    $_SESSION['key'],\n                    256\n                ),\n                true\n            );\n        }\n    }\n}\n\nfunction make_thumb($src, $dest, $desired_width)\n{\n    /* read the source image */\n    $source_image = imagecreatefrompng($src);\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = floor($height * ($desired_width / $width));\n\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/*\n** check table prefix in SQL query\n*/\n/**\n * @param string $table\n */\nfunction prefix_table($table)\n{\n    global $pre;\n    $safeTable = htmlspecialchars($pre.$table);\n    if (!empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    } else {\n        // stop error no table\n        return \"table_not_exists\";\n    }\n}\n\n/*\n * Creates a KEY using PasswordLib\n */\nfunction GenerateCryptKey($size = \"\", $secure = false, $numerals = false, $capitalize = false, $ambiguous = false, $symbols = false)\n{\n    global $SETTINGS;\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    // load library\n    $pwgen = new SplClassLoader('Encryption\\PwGen', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $pwgen->register();\n    $pwgen = new Encryption\\PwGen\\pwgen();\n\n    // init\n    if (!empty($size)) {\n        $pwgen->setLength($size);\n    }\n    if (!empty($secure)) {\n        $pwgen->setSecure($secure);\n    }\n    if (!empty($numerals)) {\n        $pwgen->setNumerals($numerals);\n    }\n    if (!empty($capitalize)) {\n        $pwgen->setCapitalize($capitalize);\n    }\n    if (!empty($ambiguous)) {\n        $pwgen->setAmbiguous($ambiguous);\n    }\n    if (!empty($symbols)) {\n        $pwgen->setSymbols($symbols);\n    }\n\n    // generate and send back\n    return $pwgen->generate();\n}\n\n/*\n* Send sysLOG message\n* @param string $message\n* @param string $host\n*/\nfunction send_syslog($message, $host, $port, $component = \"teampass\")\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = \"<123>\".date('M d H:i:s ').$component.\": \".$message;\n    socket_sendto($sock, $syslog_message, strlen($syslog_message), 0, $host, $port);\n    socket_close($sock);\n}\n\n\n\n/**\n * logEvents()\n *\n * permits to log events into DB\n * @param string $type\n * @param string $label\n * @param string $field_1\n */\nfunction logEvents($type, $label, $who, $login = \"\", $field_1 = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    if (empty($who)) {\n        $who = get_client_ip_server();\n    }\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    DB::insert(\n        prefix_table(\"log_system\"),\n        array(\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? \"\" : $field_1\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        if ($type == \"user_mngt\") {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" to the user \".$field_1.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        } else {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        }\n    }\n}\n\n/**\n * @param string $item\n * @param string $action\n */\nfunction logItems($ident, $item, $id_user, $action, $login = \"\", $raison = null, $raison_iv = null, $encryption_type = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n    DB::insert(\n        prefix_table(\"log_items\"),\n        array(\n            'id_item' => $ident,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => $raison_iv,\n            'encryption_type' => $encryption_type\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        send_syslog(\n            \"The Item \".$item.\" was \".$action.\" by \".$login.\" \".$raison,\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            \"teampass\"\n        );\n    }\n}\n\n/*\n* Function to get the client ip address\n */\nfunction get_client_ip_server()\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n            $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n            $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS\n *\n * @param string $input The input string\n * @param string $encoding Which character encoding are we using?\n * @return string\n */\nfunction noHTML($input, $encoding = 'UTF-8')\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * handleConfigFile()\n *\n * permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n */\nfunction handleConfigFile($action, $field = null, $value = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    $tp_config_file = \"../includes/config/tp.config.php\";\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    if (!file_exists($tp_config_file) || $action == \"rebuild\") {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (!copy($tp_config_file, $tp_config_file.'.'.date(\"Y_m_d_His\", time()))) {\n                return \"ERROR: Could not copy file '\".$tp_config_file.\"'\";\n            }\n        }\n\n        // regenerate\n        $data = array();\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s\",\n            \"admin\"\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\".$record['intitule'].\"' => '\".$record['valeur'].\"',\\n\");\n        }\n        array_push($data, \");\");\n        $data = array_unique($data);\n    } elseif ($action == \"update\" && !empty($field)) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, \");\")) {\n                break;\n            }\n\n            //\n            if (stristr($line, \"'\".$field.\"' => '\")) {\n                $data[$inc] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n                $bFound = true;\n                break;\n            }\n            $inc++;\n        }\n        if ($bFound === false) {\n            $data[($inc - 1)] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', isset($data) ? $data : array()));\n\n    return true;\n}\n\n/*\n** Permits to replace &#92; to permit correct display\n*/\n/**\n * @param string $input\n */\nfunction handleBackslash($input)\n{\n    return str_replace(\"&amp;#92;\", \"&#92;\", $input);\n}\n\n/*\n** Permits to loas settings\n*/\nfunction loadSettings()\n{\n    global $SETTINGS;\n\n    /* LOAD CPASSMAN SETTINGS */\n    if (!isset($SETTINGS['loaded']) || $SETTINGS['loaded'] != 1) {\n        $SETTINGS['duplicate_folder'] = 0; //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0; //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5; //by default, this value is set to 5;\n        $settings = array();\n\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s_type OR type=%s_type2\",\n            array(\n                'type' => \"admin\",\n                'type2' => \"settings\"\n            )\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] == 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/*\n** check if folder has custom fields.\n** Ensure that target one also has same custom fields\n*/\nfunction checkCFconsistency($source_id, $target_id)\n{\n    $source_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/*\n*\n*/\nfunction encrypt_or_decrypt_file($filename_to_rework, $filename_status)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // Include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    // Get file info in DB\n    $fileInfo = DB::queryfirstrow(\n        \"SELECT id FROM \".prefix_table(\"files\").\" WHERE file = %s\",\n        filter_var($filename_to_rework, FILTER_SANITIZE_STRING)\n    );\n    if (empty($fileInfo['id']) === false) {\n        // Load PhpEncryption library\n        $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        if (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"1\" &&\n            isset($filename_status)\n            && ($filename_status === \"clear\"\n                || $filename_status === \"0\")\n        ) {\n            // File needs to be encrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // Make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // Do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::encryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'encrypted'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        } elseif (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"0\"\n            && isset($filename_status)\n            && $filename_status === \"encrypted\"\n        ) {\n            // file needs to be decrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::decryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'clear'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        }\n    }\n\n    // Exit\n    return false;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse\n * @param  string $type        can be either encrypt or decrypt\n * @param  string $source_file path to source file\n * @param  string $target_file path to target file\n * @return string              'true' is success or error message\n */\nfunction prepareFileWithDefuse($type, $source_file, $target_file, $password = '')\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // Protect against bad inputs\n    if (is_array($source_file) ||is_array($target_file)) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n    if (empty($password) === true) {\n    /*\n    File encryption/decryption is done with the SALTKEY\n     */\n\n        // get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // Now perform action on the file\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"decryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"encryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    } else {\n    /*\n    File encryption/decryption is done with special password and not the SALTKEY\n     */\n\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    }\n\n    // return error\n    if (empty($err) === false) {\n        return $err;\n    } else {\n        return true;\n    }\n}\n\n/*\n* NOT TO BE USED\n*/\nfunction debugTeampass($text)\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    fputs($debugFile, $text);\n    fclose($debugFile);\n}\n\n\n/**\n * DELETE the file with expected command depending on server type\n * @param  string $file Path to file\n * @return              Nothing\n */\nfunction fileDelete($file)\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/*\n* Permits to extract the file extension\n*/\nfunction getFileExtension($file)\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * array_map\n * @param  [type] $func [description]\n * @param  [type] $arr  [description]\n * @return [type]       [description]\n */\nfunction array_map_r($func, $arr)\n{\n    $newArr = array();\n\n    foreach ($arr as $key => $value) {\n        $newArr[ $key ] = (is_array($value) ? array_map_r($func, $value) : ( is_array($func) ? call_user_func_array($func, $value) : $func( $value )));\n    }\n\n    return $newArr;\n}\n\n/**\n * Permits to clean and sanitize text to be displayed\n * @param  string $text text to clean\n * @param  string $type what clean to perform\n * @return string       text cleaned up\n */\nfunction cleanText($string, $type = \"\")\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if ($type === \"css\") {\n        // Escape text and quotes in UTF8 format\n        return htmlentities($string, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n    } elseif ($type === \"html\" || empty($type)) {\n        // Html cleaner\n        return $antiXss->xss_clean($string);\n    }\n}\n\n/**\n * Performs chmod operation on subfolders\n * @param  string  $dir             Parent folder\n * @param  integer $dirPermissions  New permission on folders\n * @param  integer $filePermissions New permission on files\n * @return boolean                  Success/Failure\n */\nfunction chmodRecursive($dir, $dirPermissions, $filePermissions)\n{\n    $pointer_dir = opendir($dir);\n    $res = true;\n    while ($file = readdir($pointer_dir)) {\n        if (($file == \".\") || ($file == \"..\")) {\n            continue;\n        }\n\n        $fullPath = $dir.\"/\".$file;\n\n        if (is_dir($fullPath)) {\n            if ($res = @chmod($fullPath, $dirPermissions)) {\n                $res = @chmodRecursive($fullPath, $dirPermissions, $filePermissions);\n            }\n        } else {\n            $res = chmod($fullPath, $filePermissions);\n        }\n        if (!$res) {\n            closedir($pointer_dir);\n            return false;\n        }\n    }\n    closedir($pointer_dir);\n    if (is_dir($dir) && $res) {\n        $res = @chmod($dir, $dirPermissions);\n    }\n\n    return $res;\n}\n\n/**\n * Check if user can access to this item\n * @param $item_id\n */\nfunction accessToItemIsGranted($item_id)\n{\n    // Load item data\n    $data = DB::queryFirstRow(\n        \"SELECT id_tree\n        FROM \".prefix_table(\"items\").\"\n        WHERE id = %i\",\n        $item_id\n    );\n//echo in_array($item_id, $_SESSION['list_restricted_folders_for_items'][$data['id_tree']]).\" - \".$item_id.\" - \".$data['id_tree'].\" - \";\nprint_r($_SESSION['list_folders_editable_by_role']);\n    // Check if user can access this folder\n    if (!in_array($data['id_tree'], $_SESSION['groupes_visibles'])) {\n        // Now check if this folder is restricted to user\n        if (isset($_SESSION['list_restricted_folders_for_items'][$data['id_tree']])\n            && !in_array($item_id, $_SESSION['list_restricted_folders_for_items'][$data['id_tree']])\n        ) {\n            return \"ERR_FOLDER_NOT_ALLOWED\";\n        } else {\n            return \"ERR_FOLDER_NOT_ALLOWED\";\n        }\n    }\n\n    return true;\n}\n", "<?php\n/**\n * @file        upload.files.php\n * @author      Nils Laumaill\u00e9\n * @version     2.1.16\n * @copyright   (c) 2009-2012 Nils Laumaill\u00e9\n * @licensing   GNU AFFERO GPL 3.0\n * @link        http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nrequire_once('../SecureHandler.php');\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1 ||\n    !isset($_SESSION['user_id']) || empty($_SESSION['user_id']) ||\n    !isset($_SESSION['key']) || empty($_SESSION['key'])\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (!checkUser($_SESSION['user_id'], $_SESSION['key'], \"items\")) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    handleUploadError('Not allowed to ...');\n    exit();\n}\n\n//check for session\nif (null !== filter_input(INPUT_POST, 'PHPSESSID', FILTER_SANITIZE_STRING)) {\n    session_id(filter_input(INPUT_POST, 'PHPSESSID', FILTER_SANITIZE_STRING));\n} elseif (isset($_GET['PHPSESSID'])) {\n    session_id(filter_var($_GET['PHPSESSID'], FILTER_SANITIZE_STRING));\n} else {\n    handleUploadError('No Session was found.');\n}\n\n// load functions\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n// Prepare POST variables\n$post_user_token = filter_input(INPUT_POST, 'user_token', FILTER_SANITIZE_STRING);\n$post_type_upload = filter_input(INPUT_POST, 'type_upload', FILTER_SANITIZE_STRING);\n$post_newFileName = filter_input(INPUT_POST, 'newFileName', FILTER_SANITIZE_STRING);\n$post_timezone = filter_input(INPUT_POST, 'timezone', FILTER_SANITIZE_STRING);\n\n// Get parameters\n$chunk = isset($_REQUEST[\"chunk\"]) ? intval($_REQUEST[\"chunk\"]) : 0;\n$chunks = isset($_REQUEST[\"chunks\"]) ? intval($_REQUEST[\"chunks\"]) : 0;\n$fileName = isset($_REQUEST[\"name\"]) ? filter_var($_REQUEST[\"name\"], FILTER_SANITIZE_STRING) : '';\n\n// token check\nif (null === $post_user_token) {\n    handleUploadError('No user token found.');\n    exit();\n} else {\n    // delete expired tokens\n    DB::delete(prefix_table(\"tokens\"), \"end_timestamp < %i\", time());\n\n    if ($chunk < ($chunks - 1)) {\n        // increase end_timestamp for token\n        DB::update(\n            prefix_table('tokens'),\n            array(\n                'end_timestamp' => time() + 10\n            ),\n            \"user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n    } else {\n        // check if token is expired\n        $data = DB::queryFirstRow(\n            \"SELECT end_timestamp FROM \".prefix_table(\"tokens\").\" WHERE user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n        // clear user token\n        DB::delete(\n            prefix_table(\"tokens\"),\n            \"user_id = %i AND token = %s\",\n            $_SESSION['user_id'],\n            $post_user_token\n        );\n\n        if (time() > $data['end_timestamp']) {\n            // too old\n            handleAttachmentError('User token expired.', 110);\n            die();\n        }\n    }\n}\n\n\n// HTTP headers for no cache etc\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\nheader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\nheader(\"Cache-Control: no-store, no-cache, must-revalidate\");\nheader(\"Cache-Control: post-check=0, pre-check=0\", false);\nheader(\"Pragma: no-cache\");\n\n\nif (null !== $post_type_upload && $post_type_upload === \"upload_profile_photo\") {\n    $targetDir = $SETTINGS['cpassman_dir'].'/includes/avatars';\n} else {\n    $targetDir = $SETTINGS['path_to_files_folder'];\n}\n\n$cleanupTargetDir = true; // Remove old files\n$maxFileAge = 5 * 3600; // Temp file age in seconds\n$valid_chars_regex = 'A-Za-z0-9_'; //accept only those characters\n$MAX_FILENAME_LENGTH = 260;\n$max_file_size_in_bytes = 2147483647; //2Go\n\nif (null !== $post_timezone) {\n    date_default_timezone_set($post_timezone);\n}\n\n// Check post_max_size\n$POST_MAX_SIZE = ini_get('post_max_size');\n$unit = strtoupper(substr($POST_MAX_SIZE, -1));\n$multiplier = ($unit == 'M' ? 1048576 : ($unit == 'K' ? 1024 : ($unit == 'G' ? 1073741824 : 1)));\nif ((int) $_SERVER['CONTENT_LENGTH'] > $multiplier * (int) $POST_MAX_SIZE && $POST_MAX_SIZE) {\n    handleUploadError('POST exceeded maximum allowed size.');\n}\n\n// Validate the file size (Warning: the largest files supported by this code is 2GB)\n$file_size = @filesize($_FILES['file']['tmp_name']);\nif (!$file_size || $file_size > $max_file_size_in_bytes) {\n    handleUploadError('File exceeds the maximum allowed size');\n}\nif ($file_size <= 0) {\n    handleUploadError('File size outside allowed lower bound');\n}\n\n// 5 minutes execution time\nset_time_limit(5 * 60);\n\n\n// Validate the upload\nif (!isset($_FILES['file'])) {\n    handleUploadError('No upload found in $_FILES for Filedata');\n} elseif (isset($_FILES['file']['error']) && $_FILES['file']['error'] != 0) {\n    handleUploadError($uploadErrors[$_FILES['Filedata']['error']]);\n} elseif (!isset($_FILES['file']['tmp_name']) || !@is_uploaded_file($_FILES['file']['tmp_name'])) {\n    handleUploadError('Upload failed is_uploaded_file test.');\n} elseif (!isset($_FILES['file']['name'])) {\n    handleUploadError('File has no name.');\n}\n\n\n// Validate file name (for our purposes we'll just remove invalid characters)\n$file_name = preg_replace(\n    '/[^'.$valid_chars_regex.'\\.]/',\n    '',\n    filter_var(\n        strtolower(basename($_FILES['file']['name'])),\n        FILTER_SANITIZE_STRING\n    )\n);\nif (strlen($file_name) == 0 || strlen($file_name) > $MAX_FILENAME_LENGTH) {\n    handleUploadError('Invalid file name: '.$file_name.'.');\n}\n\n// Validate file extension\n$ext = strtolower(getFileExtension($_REQUEST[\"name\"]));\nif (!in_array(\n    $ext,\n    explode(\n        ',',\n        $SETTINGS['upload_docext'].','.$SETTINGS['upload_imagesext'].\n        ','.$SETTINGS['upload_pkgext'].','.$SETTINGS['upload_otherext']\n    )\n)) {\n    handleUploadError('Invalid file extension.');\n}\n\n// is destination folder writable\nif (is_writable($SETTINGS['path_to_files_folder']) === false) {\n    handleUploadError('Not enough permissions on folder '.$SETTINGS['path_to_files_folder'].'.');\n}\n\n// Clean the fileName for security reasons\n$fileName = preg_replace('/[^\\w\\.]+/', '_', $fileName);\n$fileName = preg_replace('/[^'.$valid_chars_regex.'\\.]/', '', strtolower(basename($fileName)));\n\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir.DIRECTORY_SEPARATOR.$fileName)) {\n    $fileNameA = substr($fileName, 0, $ext);\n    $fileNameB = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir.DIRECTORY_SEPARATOR.$fileNameA.'_'.$count.$fileNameB)) {\n        $count++;\n    }\n\n    $fileName = $fileNameA.'_'.$count.$fileNameB;\n}\n\n$filePath = $targetDir.DIRECTORY_SEPARATOR.$fileName;\n\n// Create target dir\nif (!file_exists($targetDir)) {\n    try {\n        mkdir($targetDir, 0777, true);\n    } catch (Exception $e) {\n        print_r($e);\n    }\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir.DIRECTORY_SEPARATOR.$file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file)\n            && (filemtime($tmpfilePath) < time() - $maxFileAge)\n            && ($tmpfilePath != \"{$filePath}.part\")\n        ) {\n            fileDelete($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n// Look for the content type header\nif (isset($_SERVER[\"HTTP_CONTENT_TYPE\"])) {\n    $contentType = $_SERVER[\"HTTP_CONTENT_TYPE\"];\n}\n\nif (isset($_SERVER[\"CONTENT_TYPE\"])) {\n    $contentType = $_SERVER[\"CONTENT_TYPE\"];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\nif (strpos($contentType, \"multipart\") !== false) {\n    if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen($_FILES['file']['tmp_name'], \"rb\");\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                die(\n                    '{\"jsonrpc\" : \"2.0\",\n                    \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"},\n                    \"id\" : \"id\"}'\n                );\n            }\n            fclose($in);\n            fclose($out);\n            fileDelete($_FILES['file']['tmp_name']);\n        } else {\n            die(\n                '{\"jsonrpc\" : \"2.0\",\n                \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"},\n                \"id\" : \"id\"}'\n            );\n        }\n    } else {\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n    }\n} else {\n    // Open temp file\n    $out = fopen(\"{$filePath}.part\", $chunk == 0 ? \"wb\" : \"ab\");\n    if ($out) {\n        // Read binary input stream and append it to temp file\n        $in = fopen(\"php://input\", \"rb\");\n\n        if ($in) {\n            while ($buff = fread($in, 4096)) {\n                fwrite($out, $buff);\n            }\n        } else {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n        }\n\n        fclose($in);\n        fclose($out);\n    } else {\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n    }\n}\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    rename(\"{$filePath}.part\", $filePath);\n} else {\n    // continue uploading other chunks\n    die();\n}\n\n// generate file name\n$newFileName = GenerateCryptKey(40, false, true, true, false, false);\n\n//Connect to mysql server\nrequire_once '../../includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\nif (null !== ($post_type_upload)\n    && empty($post_type_upload) === false\n    && $post_type_upload === \"import_items_from_csv\"\n) {\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.\".\".$ext\n    );\n\n    // Add in DB\n    DB::insert(\n        prefix_table(\"misc\"),\n        array(\n            'type' => \"temp_file\",\n            'intitule' => \"filename\",\n            'valeur' => $newFileName.\".\".$ext\n        )\n    );\n\n    // return info\n    echo prepareExchangedData(\n        array(\n            \"operation_id\" => DB::insertId()\n        ),\n        \"encode\"\n    );\n\n    exit();\n} elseif (null !== ($post_type_upload)\n    && $post_type_upload === \"import_items_from_keypass\"\n) {\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.\".\".$ext\n    );\n\n    // Add in DB\n    DB::insert(\n        prefix_table(\"misc\"),\n        array(\n            'type' => \"temp_file\",\n            'intitule' => \"filename\",\n            'valeur' => $newFileName.\".\".$ext\n        )\n    );\n\n    // return info\n    echo prepareExchangedData(\n        array(\n            \"operation_id\" => DB::insertId()\n        ),\n        \"encode\"\n    );\n\n    exit();\n} elseif (null !== ($post_type_upload)\n    && $post_type_upload === \"upload_profile_photo\"\n) {\n    // get file extension\n    $ext = pathinfo($filePath, PATHINFO_EXTENSION);\n\n    // rename the file\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.'.'.$ext\n    );\n\n    // make thumbnail\n    make_thumb(\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.'.'.$ext,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.\"_thumb\".'.'.$ext,\n        40\n    );\n\n    // get current avatar and delete it\n    $data = DB::queryFirstRow(\"SELECT avatar, avatar_thumb FROM \".$pre.\"users WHERE id=%i\", $_SESSION['user_id']);\n    fileDelete($targetDir.DIRECTORY_SEPARATOR.$data['avatar']);\n    fileDelete($targetDir.DIRECTORY_SEPARATOR.$data['avatar_thumb']);\n\n    // store in DB the new avatar\n    DB::query(\n        \"UPDATE \".$pre.\"users\n        SET avatar='\".$newFileName.'.'.$ext.\"', avatar_thumb='\".$newFileName.\"_thumb\".'.'.$ext.\"'\n        WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n\n    // store in session\n    $_SESSION['user_avatar'] = $newFileName.'.'.$ext;\n    $_SESSION['user_avatar_thumb'] = $newFileName.\"_thumb\".'.'.$ext;\n\n    // return info\n    echo prepareExchangedData(\n        array(\n            \"filename\" => htmlentities($_SESSION['user_avatar'], ENT_QUOTES),\n            \"filename_thumb\" => htmlentities($_SESSION['user_avatar_thumb'], ENT_QUOTES)\n        ),\n        \"encode\"\n    );\n\n    exit();\n} elseif (null !== ($post_type_upload)\n    && $post_type_upload === \"restore_db\"\n) {\n    rename(\n        $filePath,\n        $targetDir.DIRECTORY_SEPARATOR.$newFileName.\".\".$ext\n    );\n\n    // Add in DB\n    DB::insert(\n        prefix_table(\"misc\"),\n        array(\n            'type' => \"temp_file\",\n            'intitule' => \"filename\",\n            'valeur' => $newFileName.\".\".$ext\n        )\n    );\n\n    // return info\n    echo prepareExchangedData(\n        array(\n            \"operation_id\" => DB::insertId()\n        ),\n        \"encode\"\n    );\n\n    exit();\n}\n\n\n\n/* Handles the error output. */\nfunction handleUploadError($message)\n{\n    echo htmlentities($message, ENT_QUOTES);\n    exit();\n}\n"], "filenames": ["admin.settings.load.php", "admin.settings.php", "api/functions.php", "changelog.md", "items.import.php", "items.load.php", "items.php", "profile.php", "sources/admin.queries.php", "sources/import.queries.php", "sources/items.queries.php", "sources/main.functions.php", "sources/upload/upload.files.php"], "buggy_code_start_loc": [255, 1621, 191, 9, 226, 3364, 552, 262, 394, 107, 455, 1289, 76], "buggy_code_end_loc": [906, 1622, 1600, 9, 491, 3474, 747, 725, 487, 383, 3391, 1377, 397], "fixing_code_start_loc": [255, 1621, 191, 10, 226, 3364, 552, 263, 395, 108, 455, 1289, 76], "fixing_code_end_loc": [918, 1622, 1663, 12, 481, 3474, 747, 721, 504, 422, 3396, 1380, 460], "type": "CWE-434", "message": "An arbitrary file upload vulnerability, present in TeamPass before 2.1.27.9, allows remote authenticated users to upload arbitrary files leading to Remote Command Execution. To exploit this vulnerability, an authenticated attacker has to tamper with parameters of a request to upload.files.php, in order to select the correct branch and be able to upload any arbitrary file. From there, it can simply access the file to execute code on the server.", "other": {"cve": {"id": "CVE-2017-15054", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-27T19:29:00.347", "lastModified": "2017-12-07T18:28:41.063", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An arbitrary file upload vulnerability, present in TeamPass before 2.1.27.9, allows remote authenticated users to upload arbitrary files leading to Remote Command Execution. To exploit this vulnerability, an authenticated attacker has to tamper with parameters of a request to upload.files.php, in order to select the correct branch and be able to upload any arbitrary file. From there, it can simply access the file to execute code on the server."}, {"lang": "es", "value": "Una vulnerabilidad de subida de archivos arbitrarios, presente en versiones anteriores a la 2.1.27.9 de TeamPass, permite que usuarios autenticados remotos suban archivos arbitrarios conduciendo a la ejecuci\u00f3n remota de comandos. Para explotar esta vulnerabilidad, un atacante autenticado tiene que alterar los par\u00e1metros de una petici\u00f3n en upload.files.php para seleccionar la rama correcta y ser capaz de subir cualquier archivo arbitrario. Desde ah\u00ed, puede simplemente acceder al archivo para ejecutar c\u00f3digo en el servidor."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.27.9", "matchCriteriaId": "35D9C25C-1C7F-404B-B27E-00B1BC77A868"}]}]}], "references": [{"url": "http://blog.amossys.fr/teampass-multiple-cve-01.html", "source": "cve@mitre.org", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}, {"url": "https://github.com/nilsteampassnet/TeamPass/commit/9811c9d453da4bd1101ff7033250d1fbedf101fc", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/TeamPass/commit/9811c9d453da4bd1101ff7033250d1fbedf101fc"}}