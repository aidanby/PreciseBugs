{"buggy_code": ["<?php\n\n/**\n * interface/modules/zend_modules/module/Installer/src/Installer/Controller/InstallerController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jacob T.Paul <jacob@zhservices.com>\n * @author    Vipin Kumar <vipink@zhservices.com>\n * @author    Remesh Babu S <remesh@zhservices.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2020 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2013 Z&H Consultancy Services Private Limited <sam@zhservices.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace Installer\\Controller;\n\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse Laminas\\Json\\Json;\nuse Installer\\Model\\InstModule;\nuse Application\\Listener\\Listener;\nuse Installer\\Model\\InstModuleTable;\nuse Laminas\\Db\\Adapter\\Adapter;\nuse OpenEMR\\Common\\Utils\\RandomGenUtils;\nuse Laminas\\Console\\Request as ConsoleRequest;\nuse OpenEMR\\Services\\Utils\\SQLUpgradeService;\n\nclass InstallerController extends AbstractActionController\n{\n    /**\n     * @var InstModuleTable\n     */\n    protected $InstallerTable;\n    protected $listenerObject;\n\n    /**\n     * @var Laminas\\Db\\Adapter\\Adapter\n     */\n    private $dbAdapter;\n\n    public function __construct(InstModuleTable $installerTable)\n    {\n        $this->listenerObject = new Listener();\n        $this->InstallerTable = $installerTable;\n        $this->dbAdapter = $adapter ?? null;\n    }\n\n    public function nolayout()\n    {\n        // Turn off the layout, i.e. only render the view script.\n        $viewModel = new ViewModel();\n        $viewModel->setTerminal(true);\n        return $viewModel;\n    }\n\n    public function indexAction()\n    {\n        //get the list of installed and new modules\n        $result = $this->getInstallerTable()->allModules();\n\n        $allModules = array();\n        foreach ($result as $dataArray) {\n            $mod = new InstModule();\n            $mod->exchangeArray($dataArray);\n            $mod = $this->makeButtonForSqlAction($mod);\n            $mod = $this->makeButtonForAClAction($mod);\n            array_push($allModules, $mod);\n        }\n\n        return new ViewModel(array(\n            'InstallersExisting' => $allModules,\n            'InstallersAll' => $allModules,\n            'listenerObject' => $this->listenerObject,\n            'dependencyObject' => $this->getInstallerTable(),\n            // TODO: @adunsulag there should be a way to pull this from application.config.php but so far the answer eludes me.\n            'coreModules' => ['Application', 'Acl', 'Installer', 'FHIR', 'PatientFlowBoard']\n        ));\n    }\n\n    /**\n     * @return Installer\\Model\\InstModuleTable\n     */\n    public function getInstallerTable(): InstModuleTable\n    {\n        return $this->InstallerTable;\n    }\n\n    public function registerAction()\n    {\n        $status = false;\n        $request = $this->getRequest();\n        if (method_exists($request, 'isPost')) {\n            if ($request->getPost('mtype') == 'zend') {\n                // TODO: We want to be able to load the modules\n                // from the database.. however, this can be fairly slow so we might want to do some kind of APC caching of the module\n                // list that is loaded using the OpenEMR db connector and not the zend db connector, cache the modules, and then\n                // we can filter / update that list.  We'll have to inject the unloaded module list into the installer but that is fine.\n                $rel_path = \"public/\" . $request->getPost('mod_name') . \"/\";\n\n                // registering the table inserts the module record into the database.\n                // it's always loaded regardless, but it inserts it in the database as not activated\n                if ($this->getInstallerTable()->register($request->getPost('mod_name'), $rel_path, 0, $GLOBALS['zendModDir'])) {\n                    $status = true;\n                }\n            } else {\n                // TODO: there doesn't appear to be any methodology in how to load these custom registered modules... which seems pretty odd.\n                // there aren't any in the system... but why have this then?\n                $rel_path = $request->getPost('mod_name') . \"/index.php\";\n                if ($this->getInstallerTable()->register($request->getPost('mod_name'), $rel_path)) {\n                    $status = true;\n                }\n            }\n            die($status ? $this->listenerObject->z_xlt(\"Success\") : $this->listenerObject->z_xlt(\"Failure\"));\n        } else {\n            $moduleType = $request->getParam('mtype');\n            $moduleName = $request->getParam('modname');\n            if ($moduleType == 'zend') {\n                $rel_path = \"public/\" . $moduleName . \"/\";\n                // registering the table inserts the module record into the database.\n                // it's always loaded regardless, but it inserts it in the database as not activated\n                if ($this->getInstallerTable()->register($moduleName, $rel_path, 0, $GLOBALS['zendModDir'])) {\n                    $status = true;\n                }\n                die($status ? $this->listenerObject->z_xlt(\"Success\") : $this->listenerObject->z_xlt(\"Failure\"));\n            } else {\n                die(\"not supported\");\n            }\n        }\n    }\n\n    public function manageAction()\n    {\n        $outputToBrowser = '';\n        $request = $this->getRequest();\n        $status = $this->listenerObject->z_xlt(\"Failure\");\n        if ($request->isPost()) {\n            if ($request->getPost('modAction') == \"enable\") {\n                $status = $this->EnableModule($request->getPost('modId'));\n            } elseif ($request->getPost('modAction') == \"disable\") {\n                $status = $this->DisableModule($request->getPost('modId'));\n            } elseif ($request->getPost('modAction') == \"install\") {\n                $modId = $request->getPost('modId');\n                $mod_enc_menu = $request->getPost('mod_enc_menu');\n                $mod_nick_name = $request->getPost('mod_nick_name');\n                $status = $this->InstallModule($modId, $mod_enc_menu, $mod_nick_name);\n            } elseif ($request->getPost('modAction') == 'install_sql') {\n                if ($this->InstallModuleSQL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not open table\") . '.' . $this->listenerObject->z_xlt(\"sql\") . ', ' . $this->listenerObject->z_xlt(\"broken form\") . \"?\";\n                }\n            } elseif ($request->getPost('modAction') == 'upgrade_sql') {\n                $div = $this->UpgradeModuleSQL($request->getPost('modId'));\n                $status = $this->listenerObject->z_xlt(\"Success\");\n            } elseif ($request->getPost('modAction') == 'install_acl') {\n                if ($div = $this->InstallModuleACL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not install ACL\");\n                }\n            } elseif ($request->getPost('modAction') == 'upgrade_acl') {\n                if ($div = $this->UpgradeModuleACL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not install ACL\");\n                }\n            } elseif ($request->getPost('modAction') == \"unregister\") {\n                $status = $this->UnregisterModule($request->getPost('modId'));\n            }\n        }\n        $output = \"\";\n        if (!empty($div) && is_array($div)) {\n            $output = implode(\"<br />\\n\", $div);\n        }\n        echo json_encode([\"status\" => $status, \"output\" => $output]);\n        exit(0);\n    }\n\n    /**\n     * @param $version\n     * @return int|string\n     */\n    function upgradeAclFromVersion($ACL_UPGRADE, $version)\n    {\n        $toVersion = '';\n        foreach ($ACL_UPGRADE as $toVersion => $function) {\n            if (version_compare($version, $toVersion) < 0) {\n                $function();\n            }\n        }\n        return $toVersion;\n    }\n\n    /**\n     * Function to install ACL for the installed modules\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    private function installACL($dir)\n    {\n        $aclfile = $dir . \"/moduleACL.php\";\n        if (file_exists($aclfile)) {\n            include_once($aclfile);\n        }\n    }\n\n    /**\n     * Used to recreate the application config file\n     *\n     * @param unknown_type $data\n     * @return string\n     */\n    private function getContent($data)\n    {\n        $string = \"\";\n        foreach ($data as $key => $value) {\n            $string .= \" '$key' => \";\n            if (is_array($value)) {\n                $string .= \" array(\";\n                $string .= $this->getContent($value);\n                $string .= \" )\";\n            } else {\n                $string .= \"'$value'\";\n            }\n\n            $string .= \",\";\n        }\n\n        return $string;\n    }\n\n    public function SaveHooksAction()\n    {\n        $request = $this->getRequest();\n        $postArr = $request->getPost();\n        //DELETE OLD HOOKS OF A MODULE\n        $this->getInstallerTable()->deleteModuleHooks($postArr['mod_id']);\n        if (!empty($postArr['hook_hanger']) && count($postArr['hook_hanger']) > 0) {\n            foreach ($postArr['hook_hanger'] as $hookId => $hooks) {\n                foreach ($hooks as $hangerId => $hookHanger) {\n                    $this->getInstallerTable()->saveHooks($postArr['mod_id'], $hookId, $hangerId);\n                }\n            }\n\n            $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Saved Successfully\"));\n        } else {\n            $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"No Hooks enabled for this Module\"));\n        }\n\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function configureAction()\n    {\n        $request = $this->getRequest();\n        $modId = $request->getPost('mod_id');\n\n        /** Configuration Details */\n        $result = $this->getInstallerTable()->getConfigSettings($modId);\n        $configuration = array();\n        foreach ($result as $tmp) {\n            $configuration[$tmp['field_name']] = $tmp;\n        }\n\n        //INSERT MODULE HOOKS IF NOT EXISTS\n        $moduleDirectory = $this->getInstallerTable()->getModuleDirectory($modId);\n        //GET MODULE HOOKS FROM A FUNCTION IN CONFIGURATION MODEL CLASS\n        $hooksArr = $this->getInstallerTable()->getModuleHooks($moduleDirectory);\n\n        if (count($hooksArr) > 0) {\n            foreach ($hooksArr as $hook) {\n                if (count($hook) > 0) {\n                    if ($this->getInstallerTable()->checkModuleHookExists($modId, $hook['name']) == \"0\") {\n                        $this->getInstallerTable()->saveModuleHooks($modId, $hook['name'], $hook['title'], $hook['path']);\n                    }\n                }\n            }\n        } else {\n            //DELETE ADDED HOOKS TO HANGERS OF THIS MODULE, IF NO HOOKS EXIST IN THIS MODULE\n            $this->getInstallerTable()->deleteModuleHooks($modId);\n            //DELETE MODULE HOOKS\n            $this->getInstallerTable()->deleteModuleHookSettings($modId);\n        }\n\n        //GET MODULE ACL SECTION FROM A FUNCTION IN CONFIGURATION MODEL CLASS\n        $aclArray = $this->getInstallerTable()->getModuleAclSections($moduleDirectory);\n        if (sizeof($aclArray) > 0) {\n            $this->getInstallerTable()->insertAclSections($aclArray, $moduleDirectory, $modId);\n        } else {\n            $this->getInstallerTable()->deleteACLSections($modId);\n        }\n\n        $obj = $this->getInstallerTable()->getObject($moduleDirectory, 'Controller');\n        $aclArray = array();\n        if ($obj) {\n            $aclArray = $obj->getAclConfig();\n        }\n\n        /** Configuration Form and Configuration Form Class */\n        $configForm = $this->getInstallerTable()->getFormObject($moduleDirectory);\n\n        /** Setup Config Details */\n        $setup = $this->getInstallerTable()->getSetupObject($moduleDirectory);\n\n        return new ViewModel(array(\n            'mod_id' => $modId,\n            'TabSettings' => $this->getInstallerTable()->getTabSettings($modId),\n            'ACL' => $this->getInstallerTable()->getSettings('ACL', $modId),\n            'OemrUserGroup' => $this->getInstallerTable()->getOemrUserGroup(),\n            'OemrUserGroupAroMap' => $this->getInstallerTable()->getOemrUserGroupAroMap(),\n            'ListActiveUsers' => $this->getInstallerTable()->getActiveUsers(),\n            'ListActiveACL' => $this->getInstallerTable()->getActiveACL($modId),\n            'ListActiveHooks' => $this->getInstallerTable()->getActiveHooks($modId),\n            'helperObject' => $this->helperObject,\n            'configuration' => $configuration,\n            'hangers' => $this->getInstallerTable()->getHangers(),\n            'Hooks' => $hooksArr,\n            'hookObject' => $this->getInstallerTable(),\n            'settings' => $configForm,\n            'listenerObject' => $this->listenerObject,\n            'setup' => $setup,\n        ));\n    }\n\n    public function saveConfigAction()\n    {\n        $request = $this->getRequest();\n        $moduleId = $request->getPost()->module_id;\n\n        foreach ($request->getPost() as $key => $value) {\n            $fieldName = $key;\n            $fieldValue = $value;\n            if ($fieldName != 'module_id') {\n                $result = $this->getInstallerTable()->saveSettings($fieldName, $fieldValue, $moduleId);\n            }\n        }\n\n        $data = array();\n        $returnArr = array('modeId' => $moduleId);\n        $return = new JsonModel($returnArr);\n        return $return;\n    }\n\n    public function DeleteAclAction()\n    {\n        $request = $this->getRequest();\n        $this->getInstallerTable()->DeleteAcl($request->getPost());\n        $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Deleted Successfully\"));\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function DeleteHooksAction()\n    {\n        $request = $this->getRequest();\n        $this->getInstallerTable()->DeleteHooks($request->getPost());\n        $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Deleted Successfully\"));\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function nickNameAction()\n    {\n        $request = $this->getRequest();\n        $nickname = $request->getPost()->nickname;\n        echo $this->getInstallerTable()->validateNickName(trim($nickname));\n        exit(0);\n    }\n\n    function getModuleVersionFromFile($modId)\n    {\n        //SQL version of Module\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n\n        $version_of_module = $ModulePath . \"/version.php\";\n        $table_sql = $ModulePath . \"/table.sql\";\n        $install_sql = $ModulePath . \"/sql/install.sql\";\n        $install_acl = $ModulePath . \"/acl/acl_setup.php\";\n        if (file_exists($version_of_module) && (file_exists($table_sql) || file_exists($install_sql) || file_exists($install_acl))) {\n            include_once($version_of_module);\n            $version = $v_major . \".\" . $v_minor . \".\" . $v_patch;\n            return $version;\n        }\n        return false;\n    }\n\n    public function getFilesForUpgrade($modDirectory, $sqldir)\n    {\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $modDirectory;\n        $versions = [];\n        $dh = opendir($sqldir);\n        if (!$dh) {\n            return false;\n        }\n\n        while (false !== ($sfname = readdir($dh))) {\n            if (substr($sfname, 0, 1) == '.') {\n                continue;\n            }\n\n            if (preg_match('/^(\\d+)_(\\d+)_(\\d+)-to-\\d+_\\d+_\\d+_upgrade.sql$/', $sfname, $matches)) {\n                $version = $matches[1] . '.' . $matches[2] . '.' . $matches[3];\n                $versions[$version] = $sfname;\n            }\n        }\n        $arrayKeys = array_keys($versions);\n        usort($arrayKeys, 'version_compare');\n        $sortVersions = array();\n        foreach ($arrayKeys as $key) {\n            $sortVersions[$key] = $versions[$key];\n        }\n        return $sortVersions;\n    }\n\n    public function makeButtonForSqlAction(InstModule $mod)\n    {\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($mod->modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n        $sqldir = $ModulePath . \"/sql\";\n        if (!is_dir($sqldir)) {\n            $sqldir = $ModulePath;\n        }\n        $mod->sql_action = \"\";\n\n        if (file_exists($sqldir . \"/install.sql\") && file_exists($ModulePath . \"/version.php\") && empty($mod->sql_version)) {\n            $mod->sql_action = \"install\";\n        }\n\n        if (!empty($mod->sql_version) && $mod->sqlRun == 1) {\n            $versions = $this->getFilesForUpgrade($mod->modDirectory, $sqldir);\n\n            if (count($versions) > 0) {\n                foreach ($versions as $version => $sfname) {\n                    if (version_compare($version, $mod->sql_version) < 0) {\n                        continue;\n                    }\n                    $mod->sql_action = \"upgrade\";\n                }\n            }\n        }\n        return $mod;\n    }\n\n    public function makeButtonForACLAction(InstModule $mod)\n    {\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($mod->modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n        $sqldir = $ModulePath . \"/acl\";\n        $mod->acl_action = \"\";\n\n        if (file_exists($sqldir . \"/acl_setup.php\") && file_exists($ModulePath . \"/version.php\") && empty($mod->acl_version)) {\n            $mod->acl_action = \"install\";\n        }\n        if (file_exists($sqldir . \"/acl_upgrade.php\") && file_exists($ModulePath . \"/version.php\") && !empty($mod->acl_version)) {\n            global $ACL_UPGRADE;\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            include_once($sqldir . \"/acl_upgrade.php\");\n\n            foreach ($ACL_UPGRADE as $toVersion => $function) {\n                if (version_compare($mod->acl_version, $toVersion) > 0) {\n                    continue;\n                }\n                $mod->acl_action = \"upgrade\";\n            }\n        }\n        return $mod;\n    }\n\n    /**\n     * @param $moduleName\n     * @return bool\n     */\n    public function getModuleId($moduleName)\n    {\n        if (empty($moduleName)) {\n            return false;\n        }\n        $allModules = $this->getInstallerTable()->allModules();\n        foreach ($allModules as $module) {\n            if ($module[\"mod_directory\"] === $moduleName) {\n                return $module[\"mod_id\"];\n            }\n        }\n    }\n\n    /**\n     * @param string $modId\n     * @return bool\n     */\n    public function InstallModuleSQL($modId = '')\n    {\n        $registryEntry = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $dirModule = $registryEntry->modDirectory;\n        $modType = $registryEntry->type;\n        if ($this->getInstallerTable()->installSQL($modId, $modType, $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule)) {\n            $values = array($registryEntry->mod_nick_name,$registryEntry->mod_enc_menu);\n            $values[2] = $this->getModuleVersionFromFile($modId);\n            $values[3] = $registryEntry->acl_version;\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param string $modId\n     * @return array\n     */\n    public function UpgradeModuleSQL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $sqlInstallLocation = $modDir . '/sql';\n        // if this is a custom module that for some reason doesn't have the SQL in a sql folder...\n        if (!file_exists($sqlInstallLocation)) {\n            $sqlInstallLocation = $modDir;\n        }\n\n        $versions = $this->getFilesForUpgrade($Module->modDirectory, $sqlInstallLocation);\n\n        $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n        $div = [];\n        $outputToBrowser = '';\n        foreach ($versions as $version => $filename) {\n            if (version_compare($version, $Module->sql_version) < 0) {\n                continue;\n            }\n            ob_start();\n            $sqlUpgradeService = new SQLUpgradeService();\n            $sqlUpgradeService->setRenderOutputToScreen(true);\n            $sqlUpgradeService->upgradeFromSqlFile($filename, $sqlInstallLocation);\n            $outputToBrowser .= ob_get_contents();\n            ob_end_clean();\n        }\n\n        if (preg_match_all(\"/(.*)\\<br \\/\\>\\n/i\", $outputToBrowser, $matches)) {\n            $add_query_string = 0;\n            $add_ended_divs = 0;\n            $k = 0;\n            foreach ($matches[1] as $string) {\n                $prev_html_tag = false;\n                if (preg_match(\"/<([a-z]+).*?>([^<]+)<\\/([a-z]+)>/i\", $string, $mm)) {\n                    if ($add_query_string > 0) {\n                        $div[] = \"</div>\";\n                        $add_ended_divs++;\n                    }\n                    $div[] = $string;\n                    $prev_html_tag = true;\n                    $curr_html_tag = true;\n                }\n                if (!$prev_html_tag && $curr_html_tag) {\n                    $div[] = \"<div class='show_hide_log'>\" . xlt(\"show/hide executed query log\") . \"</div><div class='spoiler' style='margin-left: 10px' >\" . $string;\n                    $curr_html_tag = false;\n                } elseif (!$prev_html_tag && !$curr_html_tag) {\n                    $div[] = $string;\n                    $add_query_string++;\n                }\n                if (count($matches[1]) == (count($div) - $add_ended_divs) && (!$prev_html_tag && !$curr_html_tag)) {\n                    $div[] = \"</div>\";\n                }\n                $k++;\n            }\n        }\n        $values[2] = $this->getModuleVersionFromFile($modId);\n        $values[3] = $Module->acl_version;\n        $this->getInstallerTable()->updateRegistered($modId, '', $values);\n        return $div;\n    }\n\n    /**\n     * @param string $modId\n     * @return bool\n     */\n    public function InstallModuleACL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $div = [];\n        if (file_exists($modDir . \"/acl/acl_setup.php\") && empty($modDir->acl_version)) {\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            ob_start();\n            include_once($modDir . \"/acl/acl_setup.php\");\n            $div[] = ob_get_contents();\n            ob_end_clean();\n            $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n            $values[2] = $Module->sql_version;\n            $values[3] = $this->getModuleVersionFromFile($modId);\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            return $div;\n        }\n        return false;\n    }\n\n    /**\n     * Function to Enable Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function EnableModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->updateRegistered($modId, \"mod_active=0\");\n        if ($resp['status'] == 'failure' && $resp['code'] == '200') {\n            $status = $resp['value'];\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n        return $status;\n    }\n\n    /**\n     * Function to Disable Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function DisableModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->updateRegistered($modId, \"mod_active=1\");\n        if ($resp['status'] == 'failure' && $resp['code'] == '200') {\n            $plural = \"Module\";\n            if (count($resp['value']) > 1) {\n                $plural = \"Modules\";\n            }\n\n            $status = $this->listenerObject->z_xlt(\"Dependency Problem\") . ':' . implode(\", \", $resp['value']) . \" \" . $this->listenerObject->z_xlt($plural) . \" \" . $this->listenerObject->z_xlt(\"Should be Enabled\");\n        } elseif ($resp['status'] == 'failure' && ($resp['code'] == '300' || $resp['code'] == '400')) {\n            $status = $resp['value'];\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n        return $status;\n    }\n\n    /**\n     * Function to Install Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function InstallModule($modId = '', $mod_enc_menu = '', $mod_nick_name = '')\n    {\n        $registryEntry = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modType = $registryEntry->type;\n        $dirModule = $registryEntry->modDirectory;\n        $sqlInstalled = false;\n        if ($modType == InstModuleTable::MODULE_TYPE_CUSTOM) {\n            $fullDirectory = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . $GLOBALS['customModDir'] . \"/\" . $dirModule;\n            if ($this->getInstallerTable()->installSQL($modId, $modType, $fullDirectory)) {\n                $sqlInstalled = true;\n            } else {\n                // TODO: This is a wierd error... why is it written like this?\n                $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not open table\") . '.' . $this->listenerObject->z_xlt(\"sql\") . ', ' . $this->listenerObject->z_xlt(\"broken form\") . \"?\";\n            }\n        } else if ($modType == InstModuleTable::MODULE_TYPE_ZEND) {\n            $fullDirectory = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule;\n            if ($this->getInstallerTable()->installSQL($modId, $modType, $fullDirectory)) {\n                $sqlInstalled = true;\n            } else {\n                $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not run sql query\");\n            }\n        }\n\n        if ($sqlInstalled) {\n            $values = array($mod_nick_name, $mod_enc_menu);\n            $values[2] = $this->getModuleVersionFromFile($modId);\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n\n        return $status;\n    }\n\n    /**\n     * Function to Unregister Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function UnregisterModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->unRegister($modId);\n        if ($resp == 'failure') {\n            $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"Failed to unregister module.\");\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n\n        return $status;\n    }\n\n\n\n\n\n\n    /**\n     * @param string $modId\n     * @return array|bool\n     */\n    public function UpgradeModuleACL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $div = [];\n        if (file_exists($modDir . \"/acl/acl_upgrade.php\") && !empty($Module->acl_version)) {\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            ob_start();\n            $ACL_UPGRADE = include_once($modDir . \"/acl/acl_upgrade.php\");\n            $version = $this->upgradeAclFromVersion($ACL_UPGRADE, $Module->acl_version);\n            $div[] = ob_get_contents();\n            ob_end_clean();\n\n            if (strlen($version) > 0) {\n                $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n                $values[2] = $Module->sql_version;\n                $values[3] = $this->getModuleVersionFromFile($modId);\n                $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            }\n            return $div;\n        }\n        return false;\n    }\n\n    /**\n     *\n     */\n    public function commandInstallModuleAction()\n    {\n        $request = $this->getRequest();\n        if (!$request instanceof ConsoleRequest) {\n            throw new RuntimeException('You can only use this action from a console!');\n        }\n\n        $moduleAction = $request->getParam('modaction');\n        $moduleName = $request->getParam('modname');\n\n        $moduleId = null;\n        $div = [];\n\n        echo PHP_EOL . '--- Run command [' . $moduleAction . '] in module:  ' . $moduleName . '---' . PHP_EOL;\n        echo 'start process - ' . date('Y-m-d H:i:s') . PHP_EOL;\n\n        if (!empty($moduleAction) && !empty($moduleName) && $moduleName != \"all\") {\n            $moduleId = $this->getModuleId($moduleName);\n        }\n\n        if ($moduleId !== null) {\n            echo 'module [' . $moduleName . '] was found' . PHP_EOL;\n\n            $msg = \"command completed successfully\";\n\n            if ($moduleAction === \"install_sql\") {\n                $this->InstallModuleSQL($moduleId);\n            } elseif ($moduleAction === \"upgrade_sql\") {\n                $div = $this->UpgradeModuleSQL($moduleId);\n            } elseif ($moduleAction === \"install_acl\") {\n                $div = $this->InstallModuleACL($moduleId);\n            } elseif ($moduleAction === \"upgrade_acl\") {\n                $div = $this->UpgradeModuleACL($moduleId);\n            } elseif ($moduleAction === \"enable\") {\n                $div = $this->DisableModule($moduleId);\n            } elseif ($moduleAction === \"disable\") {\n                $div = $this->EnableModule($moduleId);\n            } elseif ($moduleAction === \"install\") {\n                $div = $this->InstallModule($moduleId);\n            } elseif ($moduleAction === \"unregister\") {\n                $div = $this->UnregisterModule($moduleId);\n            } else {\n                $msg = 'Unsupported command';\n            }\n        } else {\n            $msg = \"module Id is null\";\n        }\n\n\n        $output = \"\";\n\n        if (is_array($div)) {\n            $output = implode(\"<br />\\n\", $div) . PHP_EOL;\n        }\n        echo $output;\n\n        exit($msg . PHP_EOL);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * interface/modules/zend_modules/module/Installer/src/Installer/Controller/InstallerController.php\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Jacob T.Paul <jacob@zhservices.com>\n * @author    Vipin Kumar <vipink@zhservices.com>\n * @author    Remesh Babu S <remesh@zhservices.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2020 Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2013 Z&H Consultancy Services Private Limited <sam@zhservices.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace Installer\\Controller;\n\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\nuse Laminas\\View\\Model\\JsonModel;\nuse Laminas\\Json\\Json;\nuse Installer\\Model\\InstModule;\nuse Application\\Listener\\Listener;\nuse Installer\\Model\\InstModuleTable;\nuse Laminas\\Db\\Adapter\\Adapter;\nuse OpenEMR\\Common\\Acl\\AclMain;\nuse OpenEMR\\Common\\Utils\\RandomGenUtils;\nuse Laminas\\Console\\Request as ConsoleRequest;\nuse OpenEMR\\Services\\Utils\\SQLUpgradeService;\n\nclass InstallerController extends AbstractActionController\n{\n    /**\n     * @var InstModuleTable\n     */\n    protected $InstallerTable;\n    protected $listenerObject;\n\n    /**\n     * @var Laminas\\Db\\Adapter\\Adapter\n     */\n    private $dbAdapter;\n\n    public function __construct(InstModuleTable $installerTable)\n    {\n        $this->listenerObject = new Listener();\n        $this->InstallerTable = $installerTable;\n        $this->dbAdapter = $adapter ?? null;\n    }\n\n    public function nolayout()\n    {\n        // Turn off the layout, i.e. only render the view script.\n        $viewModel = new ViewModel();\n        $viewModel->setTerminal(true);\n        return $viewModel;\n    }\n\n    public function indexAction()\n    {\n        //get the list of installed and new modules\n        $result = $this->getInstallerTable()->allModules();\n\n        $allModules = array();\n        foreach ($result as $dataArray) {\n            $mod = new InstModule();\n            $mod->exchangeArray($dataArray);\n            $mod = $this->makeButtonForSqlAction($mod);\n            $mod = $this->makeButtonForAClAction($mod);\n            array_push($allModules, $mod);\n        }\n\n        return new ViewModel(array(\n            'InstallersExisting' => $allModules,\n            'InstallersAll' => $allModules,\n            'listenerObject' => $this->listenerObject,\n            'dependencyObject' => $this->getInstallerTable(),\n            // TODO: @adunsulag there should be a way to pull this from application.config.php but so far the answer eludes me.\n            'coreModules' => ['Application', 'Acl', 'Installer', 'FHIR', 'PatientFlowBoard']\n        ));\n    }\n\n    /**\n     * @return Installer\\Model\\InstModuleTable\n     */\n    public function getInstallerTable(): InstModuleTable\n    {\n        return $this->InstallerTable;\n    }\n\n    public function registerAction()\n    {\n        if (!AclMain::aclCheckCore('admin', 'manage_modules')) {\n            echo xlt('Not Authorized');\n            exit;\n        }\n\n        $status = false;\n        $request = $this->getRequest();\n        if (method_exists($request, 'isPost')) {\n            if ($request->getPost('mtype') == 'zend') {\n                // TODO: We want to be able to load the modules\n                // from the database.. however, this can be fairly slow so we might want to do some kind of APC caching of the module\n                // list that is loaded using the OpenEMR db connector and not the zend db connector, cache the modules, and then\n                // we can filter / update that list.  We'll have to inject the unloaded module list into the installer but that is fine.\n                $rel_path = \"public/\" . $request->getPost('mod_name') . \"/\";\n\n                // registering the table inserts the module record into the database.\n                // it's always loaded regardless, but it inserts it in the database as not activated\n                if ($this->getInstallerTable()->register($request->getPost('mod_name'), $rel_path, 0, $GLOBALS['zendModDir'])) {\n                    $status = true;\n                }\n            } else {\n                // TODO: there doesn't appear to be any methodology in how to load these custom registered modules... which seems pretty odd.\n                // there aren't any in the system... but why have this then?\n                $rel_path = $request->getPost('mod_name') . \"/index.php\";\n                if ($this->getInstallerTable()->register($request->getPost('mod_name'), $rel_path)) {\n                    $status = true;\n                }\n            }\n            die($status ? $this->listenerObject->z_xlt(\"Success\") : $this->listenerObject->z_xlt(\"Failure\"));\n        } else {\n            $moduleType = $request->getParam('mtype');\n            $moduleName = $request->getParam('modname');\n            if ($moduleType == 'zend') {\n                $rel_path = \"public/\" . $moduleName . \"/\";\n                // registering the table inserts the module record into the database.\n                // it's always loaded regardless, but it inserts it in the database as not activated\n                if ($this->getInstallerTable()->register($moduleName, $rel_path, 0, $GLOBALS['zendModDir'])) {\n                    $status = true;\n                }\n                die($status ? $this->listenerObject->z_xlt(\"Success\") : $this->listenerObject->z_xlt(\"Failure\"));\n            } else {\n                die(\"not supported\");\n            }\n        }\n    }\n\n    public function manageAction()\n    {\n        if (!AclMain::aclCheckCore('admin', 'manage_modules')) {\n            echo json_encode([\"status\" => xlt('Not Authorized')]);\n            exit;\n        }\n\n        $outputToBrowser = '';\n        $request = $this->getRequest();\n        $status = $this->listenerObject->z_xlt(\"Failure\");\n        if ($request->isPost()) {\n            if ($request->getPost('modAction') == \"enable\") {\n                $status = $this->EnableModule($request->getPost('modId'));\n            } elseif ($request->getPost('modAction') == \"disable\") {\n                $status = $this->DisableModule($request->getPost('modId'));\n            } elseif ($request->getPost('modAction') == \"install\") {\n                $modId = $request->getPost('modId');\n                $mod_enc_menu = $request->getPost('mod_enc_menu');\n                $mod_nick_name = $request->getPost('mod_nick_name');\n                $status = $this->InstallModule($modId, $mod_enc_menu, $mod_nick_name);\n            } elseif ($request->getPost('modAction') == 'install_sql') {\n                if ($this->InstallModuleSQL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not open table\") . '.' . $this->listenerObject->z_xlt(\"sql\") . ', ' . $this->listenerObject->z_xlt(\"broken form\") . \"?\";\n                }\n            } elseif ($request->getPost('modAction') == 'upgrade_sql') {\n                $div = $this->UpgradeModuleSQL($request->getPost('modId'));\n                $status = $this->listenerObject->z_xlt(\"Success\");\n            } elseif ($request->getPost('modAction') == 'install_acl') {\n                if ($div = $this->InstallModuleACL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not install ACL\");\n                }\n            } elseif ($request->getPost('modAction') == 'upgrade_acl') {\n                if ($div = $this->UpgradeModuleACL($request->getPost('modId'))) {\n                    $status = $this->listenerObject->z_xlt(\"Success\");\n                } else {\n                    $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not install ACL\");\n                }\n            } elseif ($request->getPost('modAction') == \"unregister\") {\n                $status = $this->UnregisterModule($request->getPost('modId'));\n            }\n        }\n        $output = \"\";\n        if (!empty($div) && is_array($div)) {\n            $output = implode(\"<br />\\n\", $div);\n        }\n        echo json_encode([\"status\" => $status, \"output\" => $output]);\n        exit(0);\n    }\n\n    /**\n     * @param $version\n     * @return int|string\n     */\n    function upgradeAclFromVersion($ACL_UPGRADE, $version)\n    {\n        $toVersion = '';\n        foreach ($ACL_UPGRADE as $toVersion => $function) {\n            if (version_compare($version, $toVersion) < 0) {\n                $function();\n            }\n        }\n        return $toVersion;\n    }\n\n    /**\n     * Function to install ACL for the installed modules\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    private function installACL($dir)\n    {\n        $aclfile = $dir . \"/moduleACL.php\";\n        if (file_exists($aclfile)) {\n            include_once($aclfile);\n        }\n    }\n\n    /**\n     * Used to recreate the application config file\n     *\n     * @param unknown_type $data\n     * @return string\n     */\n    private function getContent($data)\n    {\n        $string = \"\";\n        foreach ($data as $key => $value) {\n            $string .= \" '$key' => \";\n            if (is_array($value)) {\n                $string .= \" array(\";\n                $string .= $this->getContent($value);\n                $string .= \" )\";\n            } else {\n                $string .= \"'$value'\";\n            }\n\n            $string .= \",\";\n        }\n\n        return $string;\n    }\n\n    public function SaveHooksAction()\n    {\n        $request = $this->getRequest();\n        $postArr = $request->getPost();\n        //DELETE OLD HOOKS OF A MODULE\n        $this->getInstallerTable()->deleteModuleHooks($postArr['mod_id']);\n        if (!empty($postArr['hook_hanger']) && count($postArr['hook_hanger']) > 0) {\n            foreach ($postArr['hook_hanger'] as $hookId => $hooks) {\n                foreach ($hooks as $hangerId => $hookHanger) {\n                    $this->getInstallerTable()->saveHooks($postArr['mod_id'], $hookId, $hangerId);\n                }\n            }\n\n            $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Saved Successfully\"));\n        } else {\n            $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"No Hooks enabled for this Module\"));\n        }\n\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function configureAction()\n    {\n        $request = $this->getRequest();\n        $modId = $request->getPost('mod_id');\n\n        /** Configuration Details */\n        $result = $this->getInstallerTable()->getConfigSettings($modId);\n        $configuration = array();\n        foreach ($result as $tmp) {\n            $configuration[$tmp['field_name']] = $tmp;\n        }\n\n        //INSERT MODULE HOOKS IF NOT EXISTS\n        $moduleDirectory = $this->getInstallerTable()->getModuleDirectory($modId);\n        //GET MODULE HOOKS FROM A FUNCTION IN CONFIGURATION MODEL CLASS\n        $hooksArr = $this->getInstallerTable()->getModuleHooks($moduleDirectory);\n\n        if (count($hooksArr) > 0) {\n            foreach ($hooksArr as $hook) {\n                if (count($hook) > 0) {\n                    if ($this->getInstallerTable()->checkModuleHookExists($modId, $hook['name']) == \"0\") {\n                        $this->getInstallerTable()->saveModuleHooks($modId, $hook['name'], $hook['title'], $hook['path']);\n                    }\n                }\n            }\n        } else {\n            //DELETE ADDED HOOKS TO HANGERS OF THIS MODULE, IF NO HOOKS EXIST IN THIS MODULE\n            $this->getInstallerTable()->deleteModuleHooks($modId);\n            //DELETE MODULE HOOKS\n            $this->getInstallerTable()->deleteModuleHookSettings($modId);\n        }\n\n        //GET MODULE ACL SECTION FROM A FUNCTION IN CONFIGURATION MODEL CLASS\n        $aclArray = $this->getInstallerTable()->getModuleAclSections($moduleDirectory);\n        if (sizeof($aclArray) > 0) {\n            $this->getInstallerTable()->insertAclSections($aclArray, $moduleDirectory, $modId);\n        } else {\n            $this->getInstallerTable()->deleteACLSections($modId);\n        }\n\n        $obj = $this->getInstallerTable()->getObject($moduleDirectory, 'Controller');\n        $aclArray = array();\n        if ($obj) {\n            $aclArray = $obj->getAclConfig();\n        }\n\n        /** Configuration Form and Configuration Form Class */\n        $configForm = $this->getInstallerTable()->getFormObject($moduleDirectory);\n\n        /** Setup Config Details */\n        $setup = $this->getInstallerTable()->getSetupObject($moduleDirectory);\n\n        return new ViewModel(array(\n            'mod_id' => $modId,\n            'TabSettings' => $this->getInstallerTable()->getTabSettings($modId),\n            'ACL' => $this->getInstallerTable()->getSettings('ACL', $modId),\n            'OemrUserGroup' => $this->getInstallerTable()->getOemrUserGroup(),\n            'OemrUserGroupAroMap' => $this->getInstallerTable()->getOemrUserGroupAroMap(),\n            'ListActiveUsers' => $this->getInstallerTable()->getActiveUsers(),\n            'ListActiveACL' => $this->getInstallerTable()->getActiveACL($modId),\n            'ListActiveHooks' => $this->getInstallerTable()->getActiveHooks($modId),\n            'helperObject' => $this->helperObject,\n            'configuration' => $configuration,\n            'hangers' => $this->getInstallerTable()->getHangers(),\n            'Hooks' => $hooksArr,\n            'hookObject' => $this->getInstallerTable(),\n            'settings' => $configForm,\n            'listenerObject' => $this->listenerObject,\n            'setup' => $setup,\n        ));\n    }\n\n    public function saveConfigAction()\n    {\n        $request = $this->getRequest();\n        $moduleId = $request->getPost()->module_id;\n\n        foreach ($request->getPost() as $key => $value) {\n            $fieldName = $key;\n            $fieldValue = $value;\n            if ($fieldName != 'module_id') {\n                $result = $this->getInstallerTable()->saveSettings($fieldName, $fieldValue, $moduleId);\n            }\n        }\n\n        $data = array();\n        $returnArr = array('modeId' => $moduleId);\n        $return = new JsonModel($returnArr);\n        return $return;\n    }\n\n    public function DeleteAclAction()\n    {\n        $request = $this->getRequest();\n        $this->getInstallerTable()->DeleteAcl($request->getPost());\n        $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Deleted Successfully\"));\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function DeleteHooksAction()\n    {\n        $request = $this->getRequest();\n        $this->getInstallerTable()->DeleteHooks($request->getPost());\n        $return[0] = array('return' => 1, 'msg' => $this->listenerObject->z_xlt(\"Deleted Successfully\"));\n        $arr = new JsonModel($return);\n        return $arr;\n    }\n\n    public function nickNameAction()\n    {\n        $request = $this->getRequest();\n        $nickname = $request->getPost()->nickname;\n        echo $this->getInstallerTable()->validateNickName(trim($nickname));\n        exit(0);\n    }\n\n    function getModuleVersionFromFile($modId)\n    {\n        //SQL version of Module\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n\n        $version_of_module = $ModulePath . \"/version.php\";\n        $table_sql = $ModulePath . \"/table.sql\";\n        $install_sql = $ModulePath . \"/sql/install.sql\";\n        $install_acl = $ModulePath . \"/acl/acl_setup.php\";\n        if (file_exists($version_of_module) && (file_exists($table_sql) || file_exists($install_sql) || file_exists($install_acl))) {\n            include_once($version_of_module);\n            $version = $v_major . \".\" . $v_minor . \".\" . $v_patch;\n            return $version;\n        }\n        return false;\n    }\n\n    public function getFilesForUpgrade($modDirectory, $sqldir)\n    {\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $modDirectory;\n        $versions = [];\n        $dh = opendir($sqldir);\n        if (!$dh) {\n            return false;\n        }\n\n        while (false !== ($sfname = readdir($dh))) {\n            if (substr($sfname, 0, 1) == '.') {\n                continue;\n            }\n\n            if (preg_match('/^(\\d+)_(\\d+)_(\\d+)-to-\\d+_\\d+_\\d+_upgrade.sql$/', $sfname, $matches)) {\n                $version = $matches[1] . '.' . $matches[2] . '.' . $matches[3];\n                $versions[$version] = $sfname;\n            }\n        }\n        $arrayKeys = array_keys($versions);\n        usort($arrayKeys, 'version_compare');\n        $sortVersions = array();\n        foreach ($arrayKeys as $key) {\n            $sortVersions[$key] = $versions[$key];\n        }\n        return $sortVersions;\n    }\n\n    public function makeButtonForSqlAction(InstModule $mod)\n    {\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($mod->modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n        $sqldir = $ModulePath . \"/sql\";\n        if (!is_dir($sqldir)) {\n            $sqldir = $ModulePath;\n        }\n        $mod->sql_action = \"\";\n\n        if (file_exists($sqldir . \"/install.sql\") && file_exists($ModulePath . \"/version.php\") && empty($mod->sql_version)) {\n            $mod->sql_action = \"install\";\n        }\n\n        if (!empty($mod->sql_version) && $mod->sqlRun == 1) {\n            $versions = $this->getFilesForUpgrade($mod->modDirectory, $sqldir);\n\n            if (count($versions) > 0) {\n                foreach ($versions as $version => $sfname) {\n                    if (version_compare($version, $mod->sql_version) < 0) {\n                        continue;\n                    }\n                    $mod->sql_action = \"upgrade\";\n                }\n            }\n        }\n        return $mod;\n    }\n\n    public function makeButtonForACLAction(InstModule $mod)\n    {\n        $dirModule = $this->getInstallerTable()->getRegistryEntry($mod->modId, \"mod_directory\");\n        $ModulePath = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule->modDirectory;\n        $sqldir = $ModulePath . \"/acl\";\n        $mod->acl_action = \"\";\n\n        if (file_exists($sqldir . \"/acl_setup.php\") && file_exists($ModulePath . \"/version.php\") && empty($mod->acl_version)) {\n            $mod->acl_action = \"install\";\n        }\n        if (file_exists($sqldir . \"/acl_upgrade.php\") && file_exists($ModulePath . \"/version.php\") && !empty($mod->acl_version)) {\n            global $ACL_UPGRADE;\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            include_once($sqldir . \"/acl_upgrade.php\");\n\n            foreach ($ACL_UPGRADE as $toVersion => $function) {\n                if (version_compare($mod->acl_version, $toVersion) > 0) {\n                    continue;\n                }\n                $mod->acl_action = \"upgrade\";\n            }\n        }\n        return $mod;\n    }\n\n    /**\n     * @param $moduleName\n     * @return bool\n     */\n    public function getModuleId($moduleName)\n    {\n        if (empty($moduleName)) {\n            return false;\n        }\n        $allModules = $this->getInstallerTable()->allModules();\n        foreach ($allModules as $module) {\n            if ($module[\"mod_directory\"] === $moduleName) {\n                return $module[\"mod_id\"];\n            }\n        }\n    }\n\n    /**\n     * @param string $modId\n     * @return bool\n     */\n    public function InstallModuleSQL($modId = '')\n    {\n        $registryEntry = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $dirModule = $registryEntry->modDirectory;\n        $modType = $registryEntry->type;\n        if ($this->getInstallerTable()->installSQL($modId, $modType, $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule)) {\n            $values = array($registryEntry->mod_nick_name,$registryEntry->mod_enc_menu);\n            $values[2] = $this->getModuleVersionFromFile($modId);\n            $values[3] = $registryEntry->acl_version;\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param string $modId\n     * @return array\n     */\n    public function UpgradeModuleSQL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $sqlInstallLocation = $modDir . '/sql';\n        // if this is a custom module that for some reason doesn't have the SQL in a sql folder...\n        if (!file_exists($sqlInstallLocation)) {\n            $sqlInstallLocation = $modDir;\n        }\n\n        $versions = $this->getFilesForUpgrade($Module->modDirectory, $sqlInstallLocation);\n\n        $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n        $div = [];\n        $outputToBrowser = '';\n        foreach ($versions as $version => $filename) {\n            if (version_compare($version, $Module->sql_version) < 0) {\n                continue;\n            }\n            ob_start();\n            $sqlUpgradeService = new SQLUpgradeService();\n            $sqlUpgradeService->setRenderOutputToScreen(true);\n            $sqlUpgradeService->upgradeFromSqlFile($filename, $sqlInstallLocation);\n            $outputToBrowser .= ob_get_contents();\n            ob_end_clean();\n        }\n\n        if (preg_match_all(\"/(.*)\\<br \\/\\>\\n/i\", $outputToBrowser, $matches)) {\n            $add_query_string = 0;\n            $add_ended_divs = 0;\n            $k = 0;\n            foreach ($matches[1] as $string) {\n                $prev_html_tag = false;\n                if (preg_match(\"/<([a-z]+).*?>([^<]+)<\\/([a-z]+)>/i\", $string, $mm)) {\n                    if ($add_query_string > 0) {\n                        $div[] = \"</div>\";\n                        $add_ended_divs++;\n                    }\n                    $div[] = $string;\n                    $prev_html_tag = true;\n                    $curr_html_tag = true;\n                }\n                if (!$prev_html_tag && $curr_html_tag) {\n                    $div[] = \"<div class='show_hide_log'>\" . xlt(\"show/hide executed query log\") . \"</div><div class='spoiler' style='margin-left: 10px' >\" . $string;\n                    $curr_html_tag = false;\n                } elseif (!$prev_html_tag && !$curr_html_tag) {\n                    $div[] = $string;\n                    $add_query_string++;\n                }\n                if (count($matches[1]) == (count($div) - $add_ended_divs) && (!$prev_html_tag && !$curr_html_tag)) {\n                    $div[] = \"</div>\";\n                }\n                $k++;\n            }\n        }\n        $values[2] = $this->getModuleVersionFromFile($modId);\n        $values[3] = $Module->acl_version;\n        $this->getInstallerTable()->updateRegistered($modId, '', $values);\n        return $div;\n    }\n\n    /**\n     * @param string $modId\n     * @return bool\n     */\n    public function InstallModuleACL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $div = [];\n        if (file_exists($modDir . \"/acl/acl_setup.php\") && empty($modDir->acl_version)) {\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            ob_start();\n            include_once($modDir . \"/acl/acl_setup.php\");\n            $div[] = ob_get_contents();\n            ob_end_clean();\n            $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n            $values[2] = $Module->sql_version;\n            $values[3] = $this->getModuleVersionFromFile($modId);\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            return $div;\n        }\n        return false;\n    }\n\n    /**\n     * Function to Enable Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function EnableModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->updateRegistered($modId, \"mod_active=0\");\n        if ($resp['status'] == 'failure' && $resp['code'] == '200') {\n            $status = $resp['value'];\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n        return $status;\n    }\n\n    /**\n     * Function to Disable Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function DisableModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->updateRegistered($modId, \"mod_active=1\");\n        if ($resp['status'] == 'failure' && $resp['code'] == '200') {\n            $plural = \"Module\";\n            if (count($resp['value']) > 1) {\n                $plural = \"Modules\";\n            }\n\n            $status = $this->listenerObject->z_xlt(\"Dependency Problem\") . ':' . implode(\", \", $resp['value']) . \" \" . $this->listenerObject->z_xlt($plural) . \" \" . $this->listenerObject->z_xlt(\"Should be Enabled\");\n        } elseif ($resp['status'] == 'failure' && ($resp['code'] == '300' || $resp['code'] == '400')) {\n            $status = $resp['value'];\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n        return $status;\n    }\n\n    /**\n     * Function to Install Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function InstallModule($modId = '', $mod_enc_menu = '', $mod_nick_name = '')\n    {\n        $registryEntry = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modType = $registryEntry->type;\n        $dirModule = $registryEntry->modDirectory;\n        $sqlInstalled = false;\n        if ($modType == InstModuleTable::MODULE_TYPE_CUSTOM) {\n            $fullDirectory = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . $GLOBALS['customModDir'] . \"/\" . $dirModule;\n            if ($this->getInstallerTable()->installSQL($modId, $modType, $fullDirectory)) {\n                $sqlInstalled = true;\n            } else {\n                // TODO: This is a wierd error... why is it written like this?\n                $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not open table\") . '.' . $this->listenerObject->z_xlt(\"sql\") . ', ' . $this->listenerObject->z_xlt(\"broken form\") . \"?\";\n            }\n        } else if ($modType == InstModuleTable::MODULE_TYPE_ZEND) {\n            $fullDirectory = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $dirModule;\n            if ($this->getInstallerTable()->installSQL($modId, $modType, $fullDirectory)) {\n                $sqlInstalled = true;\n            } else {\n                $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"could not run sql query\");\n            }\n        }\n\n        if ($sqlInstalled) {\n            $values = array($mod_nick_name, $mod_enc_menu);\n            $values[2] = $this->getModuleVersionFromFile($modId);\n            $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n\n        return $status;\n    }\n\n    /**\n     * Function to Unregister Module\n     *\n     * @param string $dir Location of the php file which calling functions to add sections,aco etc.\n     * @return boolean\n     */\n    public function UnregisterModule($modId = '')\n    {\n        $resp = $this->getInstallerTable()->unRegister($modId);\n        if ($resp == 'failure') {\n            $status = $this->listenerObject->z_xlt(\"ERROR\") . ':' . $this->listenerObject->z_xlt(\"Failed to unregister module.\");\n        } else {\n            $status = $this->listenerObject->z_xlt(\"Success\");\n        }\n\n        return $status;\n    }\n\n\n\n\n\n\n    /**\n     * @param string $modId\n     * @return array|bool\n     */\n    public function UpgradeModuleACL($modId = '')\n    {\n        $Module = $this->getInstallerTable()->getRegistryEntry($modId, \"mod_directory\");\n        $modDir = $GLOBALS['srcdir'] . \"/../\" . $GLOBALS['baseModDir'] . \"zend_modules/module/\" . $Module->modDirectory;\n        $div = [];\n        if (file_exists($modDir . \"/acl/acl_upgrade.php\") && !empty($Module->acl_version)) {\n            // Pass a variable, so below scripts can not be run on their own\n            $aclSetupFlag = true;\n            ob_start();\n            $ACL_UPGRADE = include_once($modDir . \"/acl/acl_upgrade.php\");\n            $version = $this->upgradeAclFromVersion($ACL_UPGRADE, $Module->acl_version);\n            $div[] = ob_get_contents();\n            ob_end_clean();\n\n            if (strlen($version) > 0) {\n                $values = array($Module->mod_nick_name,$Module->mod_enc_menu);\n                $values[2] = $Module->sql_version;\n                $values[3] = $this->getModuleVersionFromFile($modId);\n                $this->getInstallerTable()->updateRegistered($modId, '', $values);\n            }\n            return $div;\n        }\n        return false;\n    }\n\n    /**\n     *\n     */\n    public function commandInstallModuleAction()\n    {\n        $request = $this->getRequest();\n        if (!$request instanceof ConsoleRequest) {\n            throw new RuntimeException('You can only use this action from a console!');\n        }\n\n        $moduleAction = $request->getParam('modaction');\n        $moduleName = $request->getParam('modname');\n\n        $moduleId = null;\n        $div = [];\n\n        echo PHP_EOL . '--- Run command [' . $moduleAction . '] in module:  ' . $moduleName . '---' . PHP_EOL;\n        echo 'start process - ' . date('Y-m-d H:i:s') . PHP_EOL;\n\n        if (!empty($moduleAction) && !empty($moduleName) && $moduleName != \"all\") {\n            $moduleId = $this->getModuleId($moduleName);\n        }\n\n        if ($moduleId !== null) {\n            echo 'module [' . $moduleName . '] was found' . PHP_EOL;\n\n            $msg = \"command completed successfully\";\n\n            if ($moduleAction === \"install_sql\") {\n                $this->InstallModuleSQL($moduleId);\n            } elseif ($moduleAction === \"upgrade_sql\") {\n                $div = $this->UpgradeModuleSQL($moduleId);\n            } elseif ($moduleAction === \"install_acl\") {\n                $div = $this->InstallModuleACL($moduleId);\n            } elseif ($moduleAction === \"upgrade_acl\") {\n                $div = $this->UpgradeModuleACL($moduleId);\n            } elseif ($moduleAction === \"enable\") {\n                $div = $this->DisableModule($moduleId);\n            } elseif ($moduleAction === \"disable\") {\n                $div = $this->EnableModule($moduleId);\n            } elseif ($moduleAction === \"install\") {\n                $div = $this->InstallModule($moduleId);\n            } elseif ($moduleAction === \"unregister\") {\n                $div = $this->UnregisterModule($moduleId);\n            } else {\n                $msg = 'Unsupported command';\n            }\n        } else {\n            $msg = \"module Id is null\";\n        }\n\n\n        $output = \"\";\n\n        if (is_array($div)) {\n            $output = implode(\"<br />\\n\", $div) . PHP_EOL;\n        }\n        echo $output;\n\n        exit($msg . PHP_EOL);\n    }\n}\n"], "filenames": ["interface/modules/zend_modules/module/Installer/src/Installer/Controller/InstallerController.php"], "buggy_code_start_loc": [26], "buggy_code_end_loc": [135], "fixing_code_start_loc": [27], "fixing_code_end_loc": [147], "type": "CWE-639", "message": "Non Privilege User can Enable or Disable Registered in GitHub repository openemr/openemr prior to 6.1.0.1.", "other": {"cve": {"id": "CVE-2022-1461", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-25T11:15:07.340", "lastModified": "2022-05-04T19:37:36.507", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Non Privilege User can Enable or Disable Registered in GitHub repository openemr/openemr prior to 6.1.0.1."}, {"lang": "es", "value": "Un Usuario no Privilegiado puede Habilitar o Deshabilitar el Registro en el repositorio de GitHub openemr/openemr versiones anteriores a 6.1.0.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1220"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.1.0.1", "matchCriteriaId": "D9EC87FD-D2E4-45C2-B84B-192DC80A2074"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/3af1f4a28a8df0e446043232214ed08cc8e0889d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/690a8ec5-64fc-4180-9f1f-c3c599bae0a9", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/3af1f4a28a8df0e446043232214ed08cc8e0889d"}}