{"buggy_code": ["FROM alpine:3.16\n\n# Internals, you probably don't need to change these\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_INI=${APP_DIR}/ckan.ini\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_STORAGE_PATH=/var/lib/ckan\nENV GIT_URL=https://github.com/ckan/ckan.git\n# CKAN version to build\n#ENV GIT_BRANCH=dev-v2.10\nENV GIT_BRANCH=ckan-2.10.0\n# Customize these on the .env file if needed\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n\n# UWSGI options\nENV UWSGI_HARAKIRI=50\n\nWORKDIR ${APP_DIR}\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache tzdata \\\n        git \\\n        gettext \\\n        postgresql-client \\\n        python3 \\\n        libxml2 \\\n        libxslt \\\n        musl-dev \\\n        uwsgi \\\n        uwsgi-http \\\n        uwsgi-corerouter \\\n        uwsgi-python \\\n        py3-gevent \\\n        uwsgi-gevent \\\n        libmagic \\\n        curl \\\n        patch \\\n        sudo && \\\n    # Packages to build CKAN requirements and plugins\n    apk add --no-cache --virtual .build-deps \\\n        postgresql-dev \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n    \tlibtool \\\n        python3-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        openssl-dev \\\n        libffi-dev \\\n        cargo && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Install pip, supervisord and uwsgi\n    curl -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python3 ${SRC_DIR}/get-pip.py && \\\n    pip3 install supervisor && \\\n    mkdir /etc/supervisord.d && \\\n    #pip wheel --wheel-dir=/wheels uwsgi gevent && \\\n    rm -rf ${SRC_DIR}/get-pip.py\n\nCOPY setup/supervisord.conf /etc\n\n# Install CKAN\nRUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n    cd ${SRC_DIR}/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip3 install --no-binary markdown -r requirements.txt && \\\n    # Install CKAN envvars to support loading config from environment variables\n    pip3 install -e git+https://github.com/okfn/ckanext-envvars.git#egg=ckanext-envvars && \\\n    # Create and update CKAN config\n    ckan generate config ${CKAN_INI} && \\\n    ckan config-tool ${CKAN_INI} \"beaker.session.secret = \" && \\\n    ckan config-tool ${CKAN_INI} \"ckan.plugins = ${CKAN__PLUGINS}\"\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan\n\n# Create local storage folder\nRUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n    chown -R ckan:ckan ${CKAN_STORAGE_PATH}\n\nCOPY setup/prerun.py ${APP_DIR}\nCOPY setup/start_ckan.sh ${APP_DIR}\nADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir /docker-entrypoint.d\n\nRUN chown ckan -R /srv/app\n\nRUN addgroup sudo && \\\n    adduser ckan sudo\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit CMD [\"/srv/app/start_ckan.sh\"]\n\nCMD [\"/srv/app/start_ckan.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=ckan-2.10.0\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.10.0 image , `make build`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))\n\tdocker build -t $(TAG_NAME) .\nendif\n\npush: ## Push a CKAN 2.10.0 image to the DockerHub registry, `make push`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0))\n\tdocker push $(TAG_NAME)\nendif\n", "import os\nimport sys\nimport subprocess\nimport psycopg2\ntry:\n    from urllib.request import urlopen\n    from urllib.error import URLError\nexcept ImportError:\n    from urllib2 import urlopen\n    from urllib2 import URLError\n\nimport time\nimport re\nimport json\n\nckan_ini = os.environ.get(\"CKAN_INI\", \"/srv/app/ckan.ini\")\n\nRETRY = 5\n\n\ndef update_plugins():\n\n    plugins = os.environ.get(\"CKAN__PLUGINS\", \"\")\n    print((\"[prerun] Setting the following plugins in {}:\".format(ckan_ini)))\n    print(plugins)\n    cmd = [\"ckan\", \"config-tool\", ckan_ini, \"ckan.plugins = {}\".format(plugins)]\n    subprocess.check_output(cmd, stderr=subprocess.STDOUT)\n    print(\"[prerun] Plugins set.\")\n\n\ndef check_main_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_SQLALCHEMY_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_SQLALCHEMY_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_datastore_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_DATASTORE_WRITE_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_db_connection(conn_str, retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    try:\n        connection = psycopg2.connect(conn_str)\n\n    except psycopg2.Error as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to the database, waiting...\")\n        time.sleep(10)\n        check_db_connection(conn_str, retry=retry - 1)\n    else:\n        connection.close()\n\n\ndef check_solr_connection(retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    url = os.environ.get(\"CKAN_SOLR_URL\", \"\")\n    search_url = '{url}/schema/name?wt=json'.format(url=url)\n\n    try:\n        connection = urlopen(search_url)\n    except URLError as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to solr, waiting...\")\n        time.sleep(10)\n        check_solr_connection(retry=retry - 1)\n    else:\n        import re                                                                                                                                                      \n        conn_info = connection.read()                                                                                                                                  \n        schema_name = json.loads(conn_info)                                                                                                                            \n        if 'ckan' in schema_name['name']:                                                                                                                              \n            print('[prerun] Succesfully connected to solr and CKAN schema loaded')                                                                                     \n        else:                                                                                                                                                          \n            print('[prerun] Succesfully connected to solr, but CKAN schema not found')\n\n\ndef init_db():\n\n    db_command = [\"ckan\", \"-c\", ckan_ini, \"db\", \"init\"]\n    print(\"[prerun] Initializing or upgrading db - start\")\n    try:\n        subprocess.check_output(db_command, stderr=subprocess.STDOUT)\n        print(\"[prerun] Initializing or upgrading db - end\")\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n\n\ndef init_datastore_db():\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] Skipping datastore initialization\")\n        return\n\n    datastore_perms_command = [\"ckan\", \"-c\", ckan_ini, \"datastore\", \"set-permissions\"]\n\n    connection = psycopg2.connect(conn_str)\n    cursor = connection.cursor()\n\n    print(\"[prerun] Initializing datastore db - start\")\n    try:\n        datastore_perms = subprocess.Popen(\n            datastore_perms_command, stdout=subprocess.PIPE\n        )\n\n        perms_sql = datastore_perms.stdout.read()\n        # Remove internal pg command as psycopg2 does not like it\n        perms_sql = re.sub(b'\\\\\\\\connect \"(.*)\"', b\"\", perms_sql)\n        cursor.execute(perms_sql)\n        for notice in connection.notices:\n            print(notice)\n\n        connection.commit()\n\n        print(\"[prerun] Initializing datastore db - end\")\n        print(datastore_perms.stdout.read())\n    except psycopg2.Error as e:\n        print(\"[prerun] Could not initialize datastore\")\n        print(str(e))\n\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n    finally:\n        cursor.close()\n        connection.close()\n\n\ndef create_sysadmin():\n\n    name = os.environ.get(\"CKAN_SYSADMIN_NAME\")\n    password = os.environ.get(\"CKAN_SYSADMIN_PASSWORD\")\n    email = os.environ.get(\"CKAN_SYSADMIN_EMAIL\")\n\n    if name and password and email:\n\n        # Check if user exists\n        command = [\"ckan\", \"-c\", ckan_ini, \"user\", \"show\", name]\n\n        out = subprocess.check_output(command)\n        if b\"User:None\" not in re.sub(b\"\\s\", b\"\", out):\n            print(\"[prerun] Sysadmin user exists, skipping creation\")\n            return\n\n        # Create user\n        command = [\n            \"ckan\",\n            \"-c\",\n            ckan_ini,\n            \"user\",\n            \"add\",\n            name,\n            \"password=\" + password,\n            \"email=\" + email,\n        ]\n\n        subprocess.call(command)\n        print(\"[prerun] Created user {0}\".format(name))\n\n        # Make it sysadmin\n        command = [\"ckan\", \"-c\", ckan_ini, \"sysadmin\", \"add\", name]\n\n        subprocess.call(command)\n        print(\"[prerun] Made user {0} a sysadmin\".format(name))\n\n\nif __name__ == \"__main__\":\n\n    maintenance = os.environ.get(\"MAINTENANCE_MODE\", \"\").lower() == \"true\"\n\n    if maintenance:\n        print(\"[prerun] Maintenance mode, skipping setup...\")\n    else:\n        check_main_db_connection()\n        init_db()\n        update_plugins()\n        check_datastore_db_connection()\n        init_datastore_db()\n        check_solr_connection()\n        create_sysadmin()\n        ", "#!/bin/sh\n\n# Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)\nckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    ckan config-tool $CKAN_INI \"WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Run the prerun script to init CKAN and create the default admin user\nsudo -u ckan -EH python3 prerun.py\n\necho \"Set up ckan.datapusher.api_token in the CKAN config file\"\nckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Set the common uwsgi options\nUWSGI_OPTS=\"--plugins http,python \\\n            --socket /tmp/uwsgi.sock \\\n            --wsgi-file /srv/app/wsgi.py \\\n            --module wsgi:application \\\n            --uid 92 --gid 92 \\\n            --http 0.0.0.0:5000 \\\n            --master --enable-threads \\\n            --lazy-apps \\\n            -p 2 -L -b 32768 --vacuum \\\n            --harakiri $UWSGI_HARAKIRI\"\n\nif [ $? -eq 0 ]\nthen\n    # Start supervisord\n    supervisord --configuration /etc/supervisord.conf &\n    # Start uwsgi\n    sudo -u ckan -EH uwsgi $UWSGI_OPTS\nelse\n  echo \"[prerun] failed...not starting CKAN.\"\nfi\n", "FROM ckan/ckan-base:ckan-2.10.0\n\n\nENV APP_DIR=/srv/app\nENV SRC_EXTENSIONS_DIR=/srv/app/src_extensions\n\n# Install packages needed by the dev requirements\nRUN apk add --no-cache libffi-dev\n\n# Install CKAN dev requirements\nRUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n\n# Create folder for local extensions sources\nRUN mkdir ${SRC_EXTENSIONS_DIR}\n\nCOPY setup/start_ckan_development.sh ${APP_DIR}\n\nRUN chown ckan -R /srv/app\n\nCMD [\"/srv/app/start_ckan_development.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=ckan-2.10.0-dev\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN ckan-2.10.0-dev image , `make build`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))\n\tdocker build -t $(TAG_NAME) .\nendif\n\npush: ## Push a CKAN ckan-2.10.0-dev image to the DockerHub registry, `make push`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.10.0-dev))\n\tdocker push $(TAG_NAME)\nendif", "#!/bin/sh\n\n# Install any local extensions in the src_extensions volume\necho \"Looking for local extensions to install...\"\necho \"Extension dir contents:\"\nls -la $SRC_EXTENSIONS_DIR\nfor i in $SRC_EXTENSIONS_DIR/*\ndo\n    if [ -d $i ];\n    then\n\n        if [ -f $i/pip-requirements.txt ];\n        then\n            pip install -r $i/pip-requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/requirements.txt ];\n        then\n            pip install -r $i/requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/dev-requirements.txt ];\n        then\n            pip install -r $i/dev-requirements.txt\n            echo \"Found dev-requirements file in $i\"\n        fi\n        if [ -f $i/setup.py ];\n        then\n            cd $i\n            python3 $i/setup.py develop\n            echo \"Found setup.py file in $i\"\n            cd $APP_DIR\n        fi\n\n        # Point `use` in test.ini to location of `test-core.ini`\n        if [ -f $i/test.ini ];\n        then\n            echo \"Updating \\`test.ini\\` reference to \\`test-core.ini\\` for plugin $i\"\n            ckan config-tool $i/test.ini \"use = config:../../src/ckan/test-core.ini\"\n        fi\n    fi\ndone\n\n# Set debug to true\necho \"Enabling debug mode\"\nckan config-tool $CKAN_INI -s DEFAULT \"debug = true\"\n\n# Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)\nckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    ckan config-tool $CKAN_INI \"WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Update the plugins setting in the ini file with the values defined in the env var\necho \"Loading the following plugins: $CKAN__PLUGINS\"\nckan config-tool $CKAN_INI \"ckan.plugins = $CKAN__PLUGINS\"\n\n# Update test-core.ini DB, SOLR & Redis settings\necho \"Loading test settings into test-core.ini\"\nckan config-tool $SRC_DIR/ckan/test-core.ini \\\n    \"sqlalchemy.url = $TEST_CKAN_SQLALCHEMY_URL\" \\\n    \"ckan.datastore.write_url = $TEST_CKAN_DATASTORE_WRITE_URL\" \\\n    \"ckan.datastore.read_url = $TEST_CKAN_DATASTORE_READ_URL\" \\\n    \"solr_url = $TEST_CKAN_SOLR_URL\" \\\n    \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n\n# Run the prerun script to init CKAN and create the default admin user\nsudo -u ckan -EH python3 prerun.py\n\necho \"Set up ckan.datapusher.api_token in the CKAN config file\"\nckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Start supervisord\nsupervisord --configuration /etc/supervisord.conf &\n\n# Start the development server with automatic reload\nsudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0", "FROM alpine:3.13\n\n# Internals, you probably don't need to change these\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_INI=${APP_DIR}/ckan.ini\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_STORAGE_PATH=/var/lib/ckan\nENV GIT_URL=https://github.com/ckan/ckan.git\n# CKAN version to build\nENV GIT_BRANCH=ckan-2.9.8\n# Customize these on the .env file if needed\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n\n# UWSGI options\nENV UWSGI_HARAKIRI=50\n\nWORKDIR ${APP_DIR}\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache tzdata \\\n        git \\\n        gettext \\\n        postgresql-client \\\n        python3 \\\n        libxml2 \\\n        libxslt \\\n        musl-dev \\\n        uwsgi \\\n        uwsgi-http \\\n        uwsgi-corerouter \\\n        uwsgi-python \\\n        py3-gevent \\\n        uwsgi-gevent \\\n        libmagic \\\n        curl \\\n        patch \\\n        sudo && \\\n    # Packages to build CKAN requirements and plugins\n    apk add --no-cache --virtual .build-deps \\\n        postgresql-dev \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n    \tlibtool \\\n        python3-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        openssl-dev \\\n        libffi-dev \\\n        cargo && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Install pip, supervisord and uwsgi\n    curl -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python3 ${SRC_DIR}/get-pip.py && \\\n    pip3 install supervisor && \\\n    mkdir /etc/supervisord.d && \\\n    #pip wheel --wheel-dir=/wheels uwsgi gevent && \\\n    rm -rf ${SRC_DIR}/get-pip.py\n\nCOPY setup/supervisord.conf /etc\n\n# Install CKAN\nRUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n    cd ${SRC_DIR}/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip3 install -r requirement-setuptools.txt && \\\n    pip3 install --no-binary markdown -r requirements.txt && \\\n    # Install CKAN envvars to support loading config from environment variables\n    pip3 install -e git+https://github.com/okfn/ckanext-envvars.git#egg=ckanext-envvars && \\\n    # Create and update CKAN config\n    ckan generate config ${CKAN_INI} && \\\n    ckan config-tool ${CKAN_INI} \"beaker.session.secret = \" && \\\n    ckan config-tool ${CKAN_INI} \"ckan.plugins = ${CKAN__PLUGINS}\"\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /srv/app -s /bin/bash -D -G ckan ckan\n\n# Create local storage folder\nRUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n    chown -R ckan:ckan ${CKAN_STORAGE_PATH}\n\nCOPY setup/prerun.py ${APP_DIR}\nCOPY setup/start_ckan.sh ${APP_DIR}\nADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir /docker-entrypoint.d\n\nRUN chown ckan -R /srv/app\n\nRUN addgroup sudo && \\\n    adduser ckan sudo\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1\n\nCMD [\"/srv/app/start_ckan.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=ckan-2.9.8\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.9.8 image , `make build`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))\n\tdocker build -t $(TAG_NAME) .\nendif\n\npush: ## Push a CKAN 2.9.8 image to the DockerHub registry, `make push`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8))\n\tdocker push $(TAG_NAME)\nendif", "import os\nimport sys\nimport subprocess\nimport psycopg2\ntry:\n    from urllib.request import urlopen\n    from urllib.error import URLError\nexcept ImportError:\n    from urllib2 import urlopen\n    from urllib2 import URLError\n\nimport time\nimport re\nimport json\n\nckan_ini = os.environ.get(\"CKAN_INI\", \"/srv/app/ckan.ini\")\n\nRETRY = 5\n\n\ndef update_plugins():\n\n    plugins = os.environ.get(\"CKAN__PLUGINS\", \"\")\n    print((\"[prerun] Setting the following plugins in {}:\".format(ckan_ini)))\n    print(plugins)\n    cmd = [\"ckan\", \"config-tool\", ckan_ini, \"ckan.plugins = {}\".format(plugins)]\n    subprocess.check_output(cmd, stderr=subprocess.STDOUT)\n    print(\"[prerun] Plugins set.\")\n\n\ndef check_main_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_SQLALCHEMY_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_SQLALCHEMY_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_datastore_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_DATASTORE_WRITE_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_db_connection(conn_str, retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    try:\n        connection = psycopg2.connect(conn_str)\n\n    except psycopg2.Error as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to the database, waiting...\")\n        time.sleep(10)\n        check_db_connection(conn_str, retry=retry - 1)\n    else:\n        connection.close()\n\n\ndef check_solr_connection(retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    url = os.environ.get(\"CKAN_SOLR_URL\", \"\")\n    search_url = '{url}/schema/name?wt=json'.format(url=url)\n\n    try:\n        connection = urlopen(search_url)\n    except URLError as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to solr, waiting...\")\n        time.sleep(10)\n        check_solr_connection(retry=retry - 1)\n    else:\n        import re                                                                                                                                                      \n        conn_info = connection.read()                                                                                                                                  \n        schema_name = json.loads(conn_info)                                                                                                                            \n        if 'ckan' in schema_name['name']:                                                                                                                              \n            print('[prerun] Succesfully connected to solr and CKAN schema loaded')                                                                                     \n        else:                                                                                                                                                          \n            print('[prerun] Succesfully connected to solr, but CKAN schema not found')\n\n\ndef init_db():\n\n    db_command = [\"ckan\", \"-c\", ckan_ini, \"db\", \"init\"]\n    print(\"[prerun] Initializing or upgrading db - start\")\n    try:\n        subprocess.check_output(db_command, stderr=subprocess.STDOUT)\n        print(\"[prerun] Initializing or upgrading db - end\")\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n\n\ndef init_datastore_db():\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] Skipping datastore initialization\")\n        return\n\n    datastore_perms_command = [\"ckan\", \"-c\", ckan_ini, \"datastore\", \"set-permissions\"]\n\n    connection = psycopg2.connect(conn_str)\n    cursor = connection.cursor()\n\n    print(\"[prerun] Initializing datastore db - start\")\n    try:\n        datastore_perms = subprocess.Popen(\n            datastore_perms_command, stdout=subprocess.PIPE\n        )\n\n        perms_sql = datastore_perms.stdout.read()\n        # Remove internal pg command as psycopg2 does not like it\n        perms_sql = re.sub(b'\\\\\\\\connect \"(.*)\"', b\"\", perms_sql)\n        cursor.execute(perms_sql)\n        for notice in connection.notices:\n            print(notice)\n\n        connection.commit()\n\n        print(\"[prerun] Initializing datastore db - end\")\n        print(datastore_perms.stdout.read())\n    except psycopg2.Error as e:\n        print(\"[prerun] Could not initialize datastore\")\n        print(str(e))\n\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n    finally:\n        cursor.close()\n        connection.close()\n\n\ndef create_sysadmin():\n\n    name = os.environ.get(\"CKAN_SYSADMIN_NAME\")\n    password = os.environ.get(\"CKAN_SYSADMIN_PASSWORD\")\n    email = os.environ.get(\"CKAN_SYSADMIN_EMAIL\")\n\n    if name and password and email:\n\n        # Check if user exists\n        command = [\"ckan\", \"-c\", ckan_ini, \"user\", \"show\", name]\n\n        out = subprocess.check_output(command)\n        if b\"User:None\" not in re.sub(b\"\\s\", b\"\", out):\n            print(\"[prerun] Sysadmin user exists, skipping creation\")\n            return\n\n        # Create user\n        command = [\n            \"ckan\",\n            \"-c\",\n            ckan_ini,\n            \"user\",\n            \"add\",\n            name,\n            \"password=\" + password,\n            \"email=\" + email,\n        ]\n\n        subprocess.call(command)\n        print(\"[prerun] Created user {0}\".format(name))\n\n        # Make it sysadmin\n        command = [\"ckan\", \"-c\", ckan_ini, \"sysadmin\", \"add\", name]\n\n        subprocess.call(command)\n        print(\"[prerun] Made user {0} a sysadmin\".format(name))\n\n\nif __name__ == \"__main__\":\n\n    maintenance = os.environ.get(\"MAINTENANCE_MODE\", \"\").lower() == \"true\"\n\n    if maintenance:\n        print(\"[prerun] Maintenance mode, skipping setup...\")\n    else:\n        check_main_db_connection()\n        init_db()\n        update_plugins()\n        check_datastore_db_connection()\n        init_datastore_db()\n        check_solr_connection()\n        create_sysadmin()\n        ", "#!/bin/bash\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Run the prerun script to init CKAN and create the default admin user\nsudo -u ckan -EH python3 prerun.py\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Set the common uwsgi options\nUWSGI_OPTS=\"--plugins http,python \\\n            --socket /tmp/uwsgi.sock \\\n            --wsgi-file /srv/app/wsgi.py \\\n            --module wsgi:application \\\n            --uid 92 --gid 92 \\\n            --http 0.0.0.0:5000 \\\n            --master --enable-threads \\\n            --lazy-apps \\\n            -p 2 -L -b 32768 --vacuum \\\n            --harakiri $UWSGI_HARAKIRI\"\n\nif [ $? -eq 0 ]\nthen\n    # Start supervisord\n    supervisord --configuration /etc/supervisord.conf &\n    # Start uwsgi\n    sudo -u ckan -EH uwsgi $UWSGI_OPTS\nelse\n  echo \"[prerun] failed...not starting CKAN.\"\nfi\n", "FROM ckan/ckan-base:2.9.8\n\n\nENV APP_DIR=/srv/app\nENV SRC_EXTENSIONS_DIR=/srv/app/src_extensions\n\n# Install packages needed by the dev requirements\nRUN apk add --no-cache libffi-dev\n\n# Install CKAN dev requirements\nRUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n\n# Create folder for local extensions sources\nRUN mkdir ${SRC_EXTENSIONS_DIR}\n\nCOPY setup/start_ckan_development.sh ${APP_DIR}\n\nRUN chown ckan -R /srv/app\n\nCMD [\"/srv/app/start_ckan_development.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=ckan-2.9.8-dev\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.9.8-dev image , `make build`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))\n\tdocker build -t $(TAG_NAME) .\nendif\n\npush: ## Push a CKAN 2.9.8-dev image to the DockerHub registry, `make push`\nifeq ($(CKAN_VERSION),$(filter $(CKAN_VERSION),ckan-2.9.8-dev))\n\tdocker push $(TAG_NAME)\nendif", "#!/bin/bash\n\n# Install any local extensions in the src_extensions volume\necho \"Looking for local extensions to install...\"\necho \"Extension dir contents:\"\nls -la $SRC_EXTENSIONS_DIR\nfor i in $SRC_EXTENSIONS_DIR/*\ndo\n    if [ -d $i ];\n    then\n\n        if [ -f $i/pip-requirements.txt ];\n        then\n            pip install -r $i/pip-requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/requirements.txt ];\n        then\n            pip install -r $i/requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/dev-requirements.txt ];\n        then\n            pip install -r $i/dev-requirements.txt\n            echo \"Found dev-requirements file in $i\"\n        fi\n        if [ -f $i/setup.py ];\n        then\n            cd $i\n            python3 $i/setup.py develop\n            echo \"Found setup.py file in $i\"\n            cd $APP_DIR\n        fi\n\n        # Point `use` in test.ini to location of `test-core.ini`\n        if [ -f $i/test.ini ];\n        then\n            echo \"Updating \\`test.ini\\` reference to \\`test-core.ini\\` for plugin $i\"\n            ckan config-tool $i/test.ini \"use = config:../../src/ckan/test-core.ini\"\n        fi\n    fi\ndone\n\n# Set debug to true\necho \"Enabling debug mode\"\nckan config-tool $CKAN_INI -s DEFAULT \"debug = true\"\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Update the plugins setting in the ini file with the values defined in the env var\necho \"Loading the following plugins: $CKAN__PLUGINS\"\nckan config-tool $CKAN_INI \"ckan.plugins = $CKAN__PLUGINS\"\n\n# Update test-core.ini DB, SOLR & Redis settings\necho \"Loading test settings into test-core.ini\"\nckan config-tool $SRC_DIR/ckan/test-core.ini \\\n    \"sqlalchemy.url = $TEST_CKAN_SQLALCHEMY_URL\" \\\n    \"ckan.datastore.write_url = $TEST_CKAN_DATASTORE_WRITE_URL\" \\\n    \"ckan.datastore.read_url = $TEST_CKAN_DATASTORE_READ_URL\" \\\n    \"solr_url = $TEST_CKAN_SOLR_URL\" \\\n    \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n\n# Run the prerun script to init CKAN and create the default admin user\nsudo -u ckan -EH python3 prerun.py\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Start supervisord\nsupervisord --configuration /etc/supervisord.conf &\n\n# Start the development server with automatic reload\nsudo -u ckan -EH ckan -c $CKAN_INI run -H 0.0.0.0"], "fixing_code": ["FROM alpine:3.17\nARG CKAN_VERSION=ckan-2.10.0\n\n# Internals, you probably don't need to change these\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_INI=${APP_DIR}/ckan.ini\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_STORAGE_PATH=/var/lib/ckan\nENV GIT_URL=https://github.com/ckan/ckan.git\n# CKAN version to build\nENV GIT_BRANCH=${CKAN_VERSION}\n# Customize these on the .env file if needed\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n\n# UWSGI options\nENV UWSGI_HARAKIRI=50\n\nWORKDIR ${APP_DIR}\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache tzdata \\\n        git \\\n        gettext \\\n        postgresql-client \\\n        python3 \\\n        libxml2 \\\n        libxslt \\\n        musl-dev \\\n        uwsgi \\\n        uwsgi-http \\\n        uwsgi-corerouter \\\n        uwsgi-python \\\n        py3-gevent \\\n        uwsgi-gevent \\\n        libmagic \\\n        curl \\\n        patch \\\n        bash && \\\n    # Packages to build CKAN requirements and plugins\n    apk add --no-cache --virtual .build-deps \\\n        postgresql-dev \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n    \tlibtool \\\n        python3-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        openssl-dev \\\n        libffi-dev \\\n        cargo && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Install pip, supervisord and uwsgi\n    curl -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python3 ${SRC_DIR}/get-pip.py && \\\n    pip3 install supervisor && \\\n    mkdir /etc/supervisord.d && \\\n    rm -rf ${SRC_DIR}/get-pip.py\n\nCOPY setup/supervisord.conf /etc\n\n# Install CKAN\nRUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n    cd ${SRC_DIR}/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip3 install --no-binary markdown -r requirements.txt && \\\n    # Install CKAN envvars to support loading config from environment variables\n    pip3 install -e git+https://github.com/okfn/ckanext-envvars.git#egg=ckanext-envvars && \\\n    # Create and update CKAN config\n    ckan generate config ${CKAN_INI} && \\\n    ckan config-tool ${CKAN_INI} \"beaker.session.secret = \" && \\\n    ckan config-tool ${CKAN_INI} \"ckan.plugins = ${CKAN__PLUGINS}\"\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan\n\n# Create local storage folder\nRUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n    chown -R ckan:ckan ${CKAN_STORAGE_PATH}\n\nCOPY setup/prerun.py ${APP_DIR}\nCOPY setup/start_ckan.sh ${APP_DIR}\nADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\nRUN chmod 644 ${APP_DIR}/wsgi.py\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir /docker-entrypoint.d\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit CMD [\"/srv/app/start_ckan.sh\"]\n\nCMD [\"/srv/app/start_ckan.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=2.10.0\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.x.x image , `make build`\n\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n\npush: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`\n\tdocker push $(TAG_NAME)\n", "import os\nimport sys\nimport subprocess\nimport psycopg2\ntry:\n    from urllib.request import urlopen\n    from urllib.error import URLError\nexcept ImportError:\n    from urllib2 import urlopen\n    from urllib2 import URLError\n\nimport time\nimport re\nimport json\n\nckan_ini = os.environ.get(\"CKAN_INI\", \"/srv/app/ckan.ini\")\n\nRETRY = 5\n\n\ndef update_plugins():\n\n    plugins = os.environ.get(\"CKAN__PLUGINS\", \"\")\n    print((\"[prerun] Setting the following plugins in {}:\".format(ckan_ini)))\n    print(plugins)\n    cmd = [\"ckan\", \"config-tool\", ckan_ini, \"ckan.plugins = {}\".format(plugins)]\n    subprocess.check_output(cmd, stderr=subprocess.STDOUT)\n    print(\"[prerun] Plugins set.\")\n\n\ndef check_main_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_SQLALCHEMY_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_SQLALCHEMY_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_datastore_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_DATASTORE_WRITE_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_db_connection(conn_str, retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    try:\n        connection = psycopg2.connect(conn_str)\n\n    except psycopg2.Error as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to the database, waiting...\")\n        time.sleep(10)\n        check_db_connection(conn_str, retry=retry - 1)\n    else:\n        connection.close()\n\n\ndef check_solr_connection(retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    url = os.environ.get(\"CKAN_SOLR_URL\", \"\")\n    search_url = '{url}/schema/name?wt=json'.format(url=url)\n\n    try:\n        connection = urlopen(search_url)\n    except URLError as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to solr, waiting...\")\n        time.sleep(10)\n        check_solr_connection(retry=retry - 1)\n    else:\n        import re                                                                                                                                                      \n        conn_info = connection.read()                                                                                                                                  \n        schema_name = json.loads(conn_info)                                                                                                                            \n        if 'ckan' in schema_name['name']:                                                                                                                              \n            print('[prerun] Succesfully connected to solr and CKAN schema loaded')                                                                                     \n        else:                                                                                                                                                          \n            print('[prerun] Succesfully connected to solr, but CKAN schema not found')\n\n\ndef init_db():\n\n    db_command = [\"ckan\", \"-c\", ckan_ini, \"db\", \"init\"]\n    print(\"[prerun] Initializing or upgrading db - start\")\n    try:\n        subprocess.check_output(db_command, stderr=subprocess.STDOUT)\n        print(\"[prerun] Initializing or upgrading db - end\")\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n\n\ndef init_datastore_db():\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] Skipping datastore initialization\")\n        return\n\n    datastore_perms_command = [\"ckan\", \"-c\", ckan_ini, \"datastore\", \"set-permissions\"]\n\n    connection = psycopg2.connect(conn_str)\n    cursor = connection.cursor()\n\n    print(\"[prerun] Initializing datastore db - start\")\n    try:\n        datastore_perms = subprocess.Popen(\n            datastore_perms_command, stdout=subprocess.PIPE\n        )\n\n        perms_sql = datastore_perms.stdout.read()\n        # Remove internal pg command as psycopg2 does not like it\n        perms_sql = re.sub(b'\\\\\\\\connect \"(.*)\"', b\"\", perms_sql)\n        cursor.execute(perms_sql)\n        for notice in connection.notices:\n            print(notice)\n\n        connection.commit()\n\n        print(\"[prerun] Initializing datastore db - end\")\n        print(datastore_perms.stdout.read())\n    except psycopg2.Error as e:\n        print(\"[prerun] Could not initialize datastore\")\n        print(str(e))\n\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n    finally:\n        cursor.close()\n        connection.close()\n\n\ndef create_sysadmin():\n\n    name = os.environ.get(\"CKAN_SYSADMIN_NAME\")\n    password = os.environ.get(\"CKAN_SYSADMIN_PASSWORD\")\n    email = os.environ.get(\"CKAN_SYSADMIN_EMAIL\")\n\n    if name and password and email:\n\n        # Check if user exists\n        command = [\"ckan\", \"-c\", ckan_ini, \"user\", \"show\", name]\n\n        out = subprocess.check_output(command)\n        if b\"User:None\" not in re.sub(b\"\\s\", b\"\", out):\n            print(\"[prerun] Sysadmin user exists, skipping creation\")\n            return\n\n        # Create user\n        command = [\n            \"ckan\",\n            \"-c\",\n            ckan_ini,\n            \"user\",\n            \"add\",\n            name,\n            \"password=\" + password,\n            \"email=\" + email,\n        ]\n\n        subprocess.call(command)\n        print(\"[prerun] Created user {0}\".format(name))\n\n        # Make it sysadmin\n        command = [\"ckan\", \"-c\", ckan_ini, \"sysadmin\", \"add\", name]\n\n        subprocess.call(command)\n        print(\"[prerun] Made user {0} a sysadmin\".format(name))\n\n        # cleanup permissions\n        # We're running as root before pivoting to uwsgi and dropping privs\n        data_dir = \"%s/storage\" % os.environ['CKAN_STORAGE_PATH']\n\n        command = [\"chown\", \"-R\", \"ckan:ckan\", data_dir]\n        subprocess.call(command)\n        print(\"[prerun] Ensured storage directory is owned by ckan\")\n\nif __name__ == \"__main__\":\n\n    maintenance = os.environ.get(\"MAINTENANCE_MODE\", \"\").lower() == \"true\"\n\n    if maintenance:\n        print(\"[prerun] Maintenance mode, skipping setup...\")\n    else:\n        check_main_db_connection()\n        init_db()\n        update_plugins()\n        check_datastore_db_connection()\n        init_datastore_db()\n        check_solr_connection()\n        create_sysadmin()\n        ", "#!/bin/sh\n\n# Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)\nckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    ckan config-tool $CKAN_INI \"WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Run the prerun script to init CKAN and create the default admin user\npython3 prerun.py\n\necho \"Set up ckan.datapusher.api_token in the CKAN config file\"\nckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Set the common uwsgi options\nUWSGI_OPTS=\"--plugins http,python \\\n            --socket /tmp/uwsgi.sock \\\n            --wsgi-file /srv/app/wsgi.py \\\n            --module wsgi:application \\\n            --uid 92 --gid 92 \\\n            --http 0.0.0.0:5000 \\\n            --master --enable-threads \\\n            --lazy-apps \\\n            -p 2 -L -b 32768 --vacuum \\\n            --harakiri $UWSGI_HARAKIRI\"\n\nif [ $? -eq 0 ]\nthen\n    # Start supervisord\n    supervisord --configuration /etc/supervisord.conf &\n    # Start uwsgi\n    uwsgi $UWSGI_OPTS\nelse\n  echo \"[prerun] failed...not starting CKAN.\"\nfi\n", "FROM ckan/ckan-base:2.10.0\n\n\nENV APP_DIR=/srv/app\nENV SRC_EXTENSIONS_DIR=/srv/app/src_extensions\n\n# Install packages needed by the dev requirements\nRUN apk add --no-cache libffi-dev\n\n# Install CKAN dev requirements\nRUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n\n# Create folder for local extensions sources\nRUN mkdir -p ${SRC_EXTENSIONS_DIR}\n\nCOPY setup/start_ckan_development.sh ${APP_DIR}\n\nCMD [\"/srv/app/start_ckan_development.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=2.10.0-dev\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.x-dev image , `make build`\n\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n\npush: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`\n\tdocker push $(TAG_NAME)\n", "#!/bin/sh\n\n# Install any local extensions in the src_extensions volume\necho \"Looking for local extensions to install...\"\necho \"Extension dir contents:\"\nls -la $SRC_EXTENSIONS_DIR\nfor i in $SRC_EXTENSIONS_DIR/*\ndo\n    if [ -d $i ];\n    then\n\n        if [ -f $i/pip-requirements.txt ];\n        then\n            pip install -r $i/pip-requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/requirements.txt ];\n        then\n            pip install -r $i/requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/dev-requirements.txt ];\n        then\n            pip install -r $i/dev-requirements.txt\n            echo \"Found dev-requirements file in $i\"\n        fi\n        if [ -f $i/setup.py ];\n        then\n            cd $i\n            python3 $i/setup.py develop\n            echo \"Found setup.py file in $i\"\n            cd $APP_DIR\n        fi\n\n        # Point `use` in test.ini to location of `test-core.ini`\n        if [ -f $i/test.ini ];\n        then\n            echo \"Updating \\`test.ini\\` reference to \\`test-core.ini\\` for plugin $i\"\n            ckan config-tool $i/test.ini \"use = config:../../src/ckan/test-core.ini\"\n        fi\n    fi\ndone\n\n# Set debug to true\necho \"Enabling debug mode\"\nckan config-tool $CKAN_INI -s DEFAULT \"debug = true\"\n\n# Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)\nckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    ckan config-tool $CKAN_INI \"WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Update the plugins setting in the ini file with the values defined in the env var\necho \"Loading the following plugins: $CKAN__PLUGINS\"\nckan config-tool $CKAN_INI \"ckan.plugins = $CKAN__PLUGINS\"\n\n# Update test-core.ini DB, SOLR & Redis settings\necho \"Loading test settings into test-core.ini\"\nckan config-tool $SRC_DIR/ckan/test-core.ini \\\n    \"sqlalchemy.url = $TEST_CKAN_SQLALCHEMY_URL\" \\\n    \"ckan.datastore.write_url = $TEST_CKAN_DATASTORE_WRITE_URL\" \\\n    \"ckan.datastore.read_url = $TEST_CKAN_DATASTORE_READ_URL\" \\\n    \"solr_url = $TEST_CKAN_SOLR_URL\" \\\n    \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n\n# Run the prerun script to init CKAN and create the default admin user\npython3 prerun.py\n\necho \"Set up ckan.datapusher.api_token in the CKAN config file\"\nckan config-tool $CKAN_INI \"ckan.datapusher.api_token=$(ckan -c $CKAN_INI user token add ckan_admin datapusher | tail -n 1 | tr -d '\\t')\"\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Start supervisord\nsupervisord --configuration /etc/supervisord.conf &\n\n# Start the development server as the ckan user with automatic reload\nsu ckan -c \"/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0\"", "FROM alpine:3.15\nARG CKAN_VERSION=2.9.8\n\n# Internals, you probably don't need to change these\nENV APP_DIR=/srv/app\nENV SRC_DIR=/srv/app/src\nENV CKAN_INI=${APP_DIR}/ckan.ini\nENV PIP_SRC=${SRC_DIR}\nENV CKAN_STORAGE_PATH=/var/lib/ckan\nENV GIT_URL=https://github.com/ckan/ckan.git\n# CKAN version to build\nENV GIT_BRANCH=${CKAN_VERSION}\n# Customize these on the .env file if needed\nENV CKAN_SITE_URL=http://localhost:5000\nENV CKAN__PLUGINS image_view text_view recline_view datastore datapusher envvars\n\n# UWSGI options\nENV UWSGI_HARAKIRI=50\n\nWORKDIR ${APP_DIR}\n\n# Install necessary packages to run CKAN\nRUN apk add --no-cache tzdata \\\n        git \\\n        gettext \\\n        postgresql-client \\\n        python3 \\\n        libxml2 \\\n        libxslt \\\n        musl-dev \\\n        uwsgi \\\n        uwsgi-http \\\n        uwsgi-corerouter \\\n        uwsgi-python \\\n        py3-gevent \\\n        uwsgi-gevent \\\n        libmagic \\\n        curl \\\n        patch && \\\n    # Packages to build CKAN requirements and plugins\n    apk add --no-cache --virtual .build-deps \\\n        postgresql-dev \\\n        gcc \\\n        make \\\n        g++ \\\n        autoconf \\\n        automake \\\n    \tlibtool \\\n        python3-dev \\\n        libxml2-dev \\\n        libxslt-dev \\\n        linux-headers \\\n        openssl-dev \\\n        libffi-dev \\\n        cargo && \\\n    # Create SRC_DIR\n    mkdir -p ${SRC_DIR} && \\\n    # Install pip, supervisord and uwsgi\n    curl -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/get-pip.py && \\\n    python3 ${SRC_DIR}/get-pip.py && \\\n    pip3 install supervisor && \\\n    mkdir /etc/supervisord.d && \\\n    #pip wheel --wheel-dir=/wheels uwsgi gevent && \\\n    rm -rf ${SRC_DIR}/get-pip.py\n\nCOPY setup/supervisord.conf /etc\n\n# Install CKAN\nRUN pip3 install -e git+${GIT_URL}@${GIT_BRANCH}#egg=ckan && \\\n    cd ${SRC_DIR}/ckan && \\\n    cp who.ini ${APP_DIR} && \\\n    pip3 install -r requirement-setuptools.txt && \\\n    pip3 install --no-binary markdown -r requirements.txt && \\\n    # Install CKAN envvars to support loading config from environment variables\n    pip3 install -e git+https://github.com/okfn/ckanext-envvars.git#egg=ckanext-envvars && \\\n    # Create and update CKAN config\n    ckan generate config ${CKAN_INI} && \\\n    ckan config-tool ${CKAN_INI} \"beaker.session.secret = \" && \\\n    ckan config-tool ${CKAN_INI} \"ckan.plugins = ${CKAN__PLUGINS}\"\n\n# Create a local user and group to run the app\nRUN addgroup -g 92 -S ckan && \\\n    adduser -u 92 -h /home/ckan -s /bin/bash -D -G ckan ckan\n\n# Create local storage folder\nRUN mkdir -p ${CKAN_STORAGE_PATH} && \\\n    chown -R ckan:ckan ${CKAN_STORAGE_PATH}\n\nCOPY setup/prerun.py ${APP_DIR}\nCOPY setup/start_ckan.sh ${APP_DIR}\nADD https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/wsgi.py ${APP_DIR}\nRUN chmod 644 ${APP_DIR}/wsgi.py\n\n# Create entrypoint directory for children image scripts\nONBUILD RUN mkdir /docker-entrypoint.d\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=60s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1\n\nCMD [\"/srv/app/start_ckan.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\n\nCKAN_VERSION=2.9.8\n\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\n\nbuild:\t## Build a CKAN 2.x.x image , `make build`\n\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n\npush: ## Push a CKAN 2.x.x image to the DockerHub registry, `make push`\n\tdocker push $(TAG_NAME)", "import os\nimport sys\nimport subprocess\nimport psycopg2\ntry:\n    from urllib.request import urlopen\n    from urllib.error import URLError\nexcept ImportError:\n    from urllib2 import urlopen\n    from urllib2 import URLError\n\nimport time\nimport re\nimport json\n\nckan_ini = os.environ.get(\"CKAN_INI\", \"/srv/app/ckan.ini\")\n\nRETRY = 5\n\n\ndef update_plugins():\n\n    plugins = os.environ.get(\"CKAN__PLUGINS\", \"\")\n    print((\"[prerun] Setting the following plugins in {}:\".format(ckan_ini)))\n    print(plugins)\n    cmd = [\"ckan\", \"config-tool\", ckan_ini, \"ckan.plugins = {}\".format(plugins)]\n    subprocess.check_output(cmd, stderr=subprocess.STDOUT)\n    print(\"[prerun] Plugins set.\")\n\n\ndef check_main_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_SQLALCHEMY_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_SQLALCHEMY_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_datastore_db_connection(retry=None):\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] CKAN_DATASTORE_WRITE_URL not defined, not checking db\")\n    return check_db_connection(conn_str, retry)\n\n\ndef check_db_connection(conn_str, retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    try:\n        connection = psycopg2.connect(conn_str)\n\n    except psycopg2.Error as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to the database, waiting...\")\n        time.sleep(10)\n        check_db_connection(conn_str, retry=retry - 1)\n    else:\n        connection.close()\n\n\ndef check_solr_connection(retry=None):\n\n    if retry is None:\n        retry = RETRY\n    elif retry == 0:\n        print(\"[prerun] Giving up after 5 tries...\")\n        sys.exit(1)\n\n    url = os.environ.get(\"CKAN_SOLR_URL\", \"\")\n    search_url = '{url}/schema/name?wt=json'.format(url=url)\n\n    try:\n        connection = urlopen(search_url)\n    except URLError as e:\n        print(str(e))\n        print(\"[prerun] Unable to connect to solr, waiting...\")\n        time.sleep(10)\n        check_solr_connection(retry=retry - 1)\n    else:\n        import re                                                                                                                                                      \n        conn_info = connection.read()                                                                                                                                  \n        schema_name = json.loads(conn_info)                                                                                                                            \n        if 'ckan' in schema_name['name']:                                                                                                                              \n            print('[prerun] Succesfully connected to solr and CKAN schema loaded')                                                                                     \n        else:                                                                                                                                                          \n            print('[prerun] Succesfully connected to solr, but CKAN schema not found')\n\n\ndef init_db():\n\n    db_command = [\"ckan\", \"-c\", ckan_ini, \"db\", \"init\"]\n    print(\"[prerun] Initializing or upgrading db - start\")\n    try:\n        subprocess.check_output(db_command, stderr=subprocess.STDOUT)\n        print(\"[prerun] Initializing or upgrading db - end\")\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n\n\ndef init_datastore_db():\n\n    conn_str = os.environ.get(\"CKAN_DATASTORE_WRITE_URL\")\n    if not conn_str:\n        print(\"[prerun] Skipping datastore initialization\")\n        return\n\n    datastore_perms_command = [\"ckan\", \"-c\", ckan_ini, \"datastore\", \"set-permissions\"]\n\n    connection = psycopg2.connect(conn_str)\n    cursor = connection.cursor()\n\n    print(\"[prerun] Initializing datastore db - start\")\n    try:\n        datastore_perms = subprocess.Popen(\n            datastore_perms_command, stdout=subprocess.PIPE\n        )\n\n        perms_sql = datastore_perms.stdout.read()\n        # Remove internal pg command as psycopg2 does not like it\n        perms_sql = re.sub(b'\\\\\\\\connect \"(.*)\"', b\"\", perms_sql)\n        cursor.execute(perms_sql)\n        for notice in connection.notices:\n            print(notice)\n\n        connection.commit()\n\n        print(\"[prerun] Initializing datastore db - end\")\n        print(datastore_perms.stdout.read())\n    except psycopg2.Error as e:\n        print(\"[prerun] Could not initialize datastore\")\n        print(str(e))\n\n    except subprocess.CalledProcessError as e:\n        if \"OperationalError\" in e.output:\n            print(e.output)\n            print(\"[prerun] Database not ready, waiting a bit before exit...\")\n            time.sleep(5)\n            sys.exit(1)\n        else:\n            print(e.output)\n            raise e\n    finally:\n        cursor.close()\n        connection.close()\n\n\ndef create_sysadmin():\n\n    name = os.environ.get(\"CKAN_SYSADMIN_NAME\")\n    password = os.environ.get(\"CKAN_SYSADMIN_PASSWORD\")\n    email = os.environ.get(\"CKAN_SYSADMIN_EMAIL\")\n\n    if name and password and email:\n\n        # Check if user exists\n        command = [\"ckan\", \"-c\", ckan_ini, \"user\", \"show\", name]\n\n        out = subprocess.check_output(command)\n        if b\"User:None\" not in re.sub(b\"\\s\", b\"\", out):\n            print(\"[prerun] Sysadmin user exists, skipping creation\")\n            return\n\n        # Create user\n        command = [\n            \"ckan\",\n            \"-c\",\n            ckan_ini,\n            \"user\",\n            \"add\",\n            name,\n            \"password=\" + password,\n            \"email=\" + email,\n        ]\n\n        subprocess.call(command)\n        print(\"[prerun] Created user {0}\".format(name))\n\n        # Make it sysadmin\n        command = [\"ckan\", \"-c\", ckan_ini, \"sysadmin\", \"add\", name]\n\n        subprocess.call(command)\n        print(\"[prerun] Made user {0} a sysadmin\".format(name))\n\n        # cleanup permissions\n        # We're running as root before pivoting to uwsgi and dropping privs\n        data_dir = \"%s/storage\" % os.environ['CKAN_STORAGE_PATH']\n\n        command = [\"chown\", \"-R\", \"ckan:ckan\", data_dir]\n        subprocess.call(command)\n        print(\"[prerun] Ensured storage directory is owned by ckan\")\n\nif __name__ == \"__main__\":\n\n    maintenance = os.environ.get(\"MAINTENANCE_MODE\", \"\").lower() == \"true\"\n\n    if maintenance:\n        print(\"[prerun] Maintenance mode, skipping setup...\")\n    else:\n        check_main_db_connection()\n        init_db()\n        update_plugins()\n        check_datastore_db_connection()\n        init_datastore_db()\n        check_solr_connection()\n        create_sysadmin()\n        ", "#!/bin/bash\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Run the prerun script to init CKAN and create the default admin user\npython3 prerun.py\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Set the common uwsgi options\nUWSGI_OPTS=\"--plugins http,python \\\n            --socket /tmp/uwsgi.sock \\\n            --wsgi-file /srv/app/wsgi.py \\\n            --module wsgi:application \\\n            --uid 92 --gid 92 \\\n            --http 0.0.0.0:5000 \\\n            --master --enable-threads \\\n            --lazy-apps \\\n            -p 2 -L -b 32768 --vacuum \\\n            --harakiri $UWSGI_HARAKIRI\"\n\nif [ $? -eq 0 ]\nthen\n    # Start supervisord\n    supervisord --configuration /etc/supervisord.conf &\n    # Start uwsgi\n    uwsgi $UWSGI_OPTS\nelse\n  echo \"[prerun] failed...not starting CKAN.\"\nfi\n", "FROM ckan/ckan-base:2.9.8\n\n\nENV APP_DIR=/srv/app\nENV SRC_EXTENSIONS_DIR=/srv/app/src_extensions\n\n# Install packages needed by the dev requirements\nRUN apk add --no-cache libffi-dev\n\n# Install CKAN dev requirements\nRUN pip3 install -r https://raw.githubusercontent.com/ckan/ckan/${GIT_BRANCH}/dev-requirements.txt\n\n# Create folder for local extensions sources\nRUN mkdir -p ${SRC_EXTENSIONS_DIR}\n\nCOPY setup/start_ckan_development.sh ${APP_DIR}\n\nCMD [\"/srv/app/start_ckan_development.sh\"]", ".PHONY: all help build build-all push\nSHELL := /bin/bash\nCKAN_VERSION=2.9.8-dev\nTAG_NAME=\"ckan/ckan-base:$(CKAN_VERSION)\"\n\nall: help\nhelp:\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-30s\\033[0m %s\\n\", $$1, $$2}'\n\nbuild:\t## Build a CKAN 2.x-dev image , `make build`\n\tdocker build --build-arg=\"CKAN_VERSION=ckan-$(CKAN_VERSION)\" -t $(TAG_NAME) .\n\npush: ## Push a CKAN 2.x-dev image to the DockerHub registry, `make push`\n\tdocker push $(TAG_NAME)\n", "#!/bin/bash\n\n# Install any local extensions in the src_extensions volume\necho \"Looking for local extensions to install...\"\necho \"Extension dir contents:\"\nls -la $SRC_EXTENSIONS_DIR\nfor i in $SRC_EXTENSIONS_DIR/*\ndo\n    if [ -d $i ];\n    then\n\n        if [ -f $i/pip-requirements.txt ];\n        then\n            pip install -r $i/pip-requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/requirements.txt ];\n        then\n            pip install -r $i/requirements.txt\n            echo \"Found requirements file in $i\"\n        fi\n        if [ -f $i/dev-requirements.txt ];\n        then\n            pip install -r $i/dev-requirements.txt\n            echo \"Found dev-requirements file in $i\"\n        fi\n        if [ -f $i/setup.py ];\n        then\n            cd $i\n            python3 $i/setup.py develop\n            echo \"Found setup.py file in $i\"\n            cd $APP_DIR\n        fi\n\n        # Point `use` in test.ini to location of `test-core.ini`\n        if [ -f $i/test.ini ];\n        then\n            echo \"Updating \\`test.ini\\` reference to \\`test-core.ini\\` for plugin $i\"\n            ckan config-tool $i/test.ini \"use = config:../../src/ckan/test-core.ini\"\n        fi\n    fi\ndone\n\n# Set debug to true\necho \"Enabling debug mode\"\nckan config-tool $CKAN_INI -s DEFAULT \"debug = true\"\n\n# Set up the Secret key used by Beaker and Flask\n# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var\nif grep -E \"beaker.session.secret ?= ?$\" ckan.ini\nthen\n    echo \"Setting beaker.session.secret in ini file\"\n    ckan config-tool $CKAN_INI \"beaker.session.secret=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')\"\n    JWT_SECRET=$(python3 -c 'import secrets; print(\"string:\" + secrets.token_urlsafe())')\n    ckan config-tool $CKAN_INI \"api_token.jwt.encode.secret=${JWT_SECRET}\"\n    ckan config-tool $CKAN_INI \"api_token.jwt.decode.secret=${JWT_SECRET}\"\nfi\n\n# Update the plugins setting in the ini file with the values defined in the env var\necho \"Loading the following plugins: $CKAN__PLUGINS\"\nckan config-tool $CKAN_INI \"ckan.plugins = $CKAN__PLUGINS\"\n\n# Update test-core.ini DB, SOLR & Redis settings\necho \"Loading test settings into test-core.ini\"\nckan config-tool $SRC_DIR/ckan/test-core.ini \\\n    \"sqlalchemy.url = $TEST_CKAN_SQLALCHEMY_URL\" \\\n    \"ckan.datastore.write_url = $TEST_CKAN_DATASTORE_WRITE_URL\" \\\n    \"ckan.datastore.read_url = $TEST_CKAN_DATASTORE_READ_URL\" \\\n    \"solr_url = $TEST_CKAN_SOLR_URL\" \\\n    \"ckan.redis.url = $TEST_CKAN_REDIS_URL\"\n\n# Run the prerun script to init CKAN and create the default admin user\npython3 prerun.py\n\n# Run any startup scripts provided by images extending this one\nif [[ -d \"/docker-entrypoint.d\" ]]\nthen\n    for f in /docker-entrypoint.d/*; do\n        case \"$f\" in\n            *.sh)     echo \"$0: Running init file $f\"; . \"$f\" ;;\n            *.py)     echo \"$0: Running init file $f\"; python3 \"$f\"; echo ;;\n            *)        echo \"$0: Ignoring $f (not an sh or py file)\" ;;\n        esac\n        echo\n    done\nfi\n\n# Start supervisord\nsupervisord --configuration /etc/supervisord.conf &\n\n# Start the development server as the ckan user with automatic reload\nsu ckan -c \"/usr/bin/ckan -c $CKAN_INI run -H 0.0.0.0\""], "filenames": ["ckan-2.10/base/Dockerfile", "ckan-2.10/base/Makefile", "ckan-2.10/base/setup/prerun.py", "ckan-2.10/base/setup/start_ckan.sh", "ckan-2.10/dev/Dockerfile", "ckan-2.10/dev/Makefile", "ckan-2.10/dev/setup/start_ckan_development.sh", "ckan-2.9/base/Dockerfile", "ckan-2.9/base/Makefile", "ckan-2.9/base/setup/prerun.py", "ckan-2.9/base/setup/start_ckan.sh", "ckan-2.9/dev/Dockerfile", "ckan-2.9/dev/Makefile", "ckan-2.9/dev/setup/start_ckan_development.sh"], "buggy_code_start_loc": [1, 3, 196, 19, 1, 3, 77, 1, 3, 196, 15, 14, 3, 73], "buggy_code_end_loc": [100, 19, 196, 55, 20, 19, 100, 100, 19, 196, 48, 20, 19, 93], "fixing_code_start_loc": [1, 3, 197, 19, 1, 3, 77, 1, 3, 197, 15, 14, 3, 73], "fixing_code_end_loc": [94, 14, 204, 55, 17, 14, 100, 95, 18, 204, 48, 17, 14, 93], "type": "CWE-269", "message": "CKAN is an open-source data management system for powering data hubs and data portals. Prior to versions 2.9.9 and 2.10.1, the `ckan` user (equivalent to www-data) owned code and configuration files in the docker container and the `ckan` user had the permissions to use sudo. These issues allowed for code execution or privilege escalation if an arbitrary file write bug was available. Versions 2.9.9, 2.9.9-dev, 2.10.1, and 2.10.1-dev contain a patch.\n\n\n\n", "other": {"cve": {"id": "CVE-2023-32696", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-30T19:15:10.023", "lastModified": "2023-06-06T00:53:59.340", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "CKAN is an open-source data management system for powering data hubs and data portals. Prior to versions 2.9.9 and 2.10.1, the `ckan` user (equivalent to www-data) owned code and configuration files in the docker container and the `ckan` user had the permissions to use sudo. These issues allowed for code execution or privilege escalation if an arbitrary file write bug was available. Versions 2.9.9, 2.9.9-dev, 2.10.1, and 2.10.1-dev contain a patch.\n\n\n\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:okfn:ckan:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.9.9", "matchCriteriaId": "92E424CF-0024-4B08-986C-D899503F7CCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:okfn:ckan:2.10.0:*:*:*:*:*:*:*", "matchCriteriaId": "5B88933D-4004-4D42-BB4F-8552FA2A7871"}]}]}], "references": [{"url": "https://github.com/ckan/ckan-docker-base/commit/5483c46ce9b518a4e1b626ef7032cce2c1d75c7d", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ckan/ckan-docker-base/security/advisories/GHSA-c74x-xfvr-x5wg", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ckan/ckan-docker-base/commit/5483c46ce9b518a4e1b626ef7032cce2c1d75c7d"}}