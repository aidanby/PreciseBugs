{"buggy_code": ["#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!define MULTIDOMAIN 0\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/tmp/kamailio_fifo\")\n\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# add value to ;lr param to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans()) {\n\t\t\troute(RELAY);\n\t\t}\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\",\"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# user location service\n\troute(LOCATION);\n}\n\n\nroute[RELAY] {\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\troute(RELAY);\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\", \"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n\n\troute(RELAY);\n\texit;\n}\n\n\n# IP authorization and user uthentication\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself) {\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n}\n", "#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable mysql\n#     - define WITH_PRESENCE\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     - set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n# *** To enable database aliases lookup execute:\n#     - enable mysql\n#     - define WITH_ALIASDB\n#\n# *** To enable speed dial lookup execute:\n#     - enable mysql\n#     - define WITH_SPEEDDIAL\n#\n# *** To enable multi-domain support execute:\n#     - enable mysql\n#     - define WITH_MULTIDOMAIN\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enable XMLRPC support execute:\n#     - define WITH_XMLRPC\n#     - adjust route[XMLRPC] for access policy\n#\n# *** To enable the embedded http server:\n#     - define WITH_XHTTP\n#\n# *** To enable the RPC web interface execute:\n#     - enable xhttp\n#     - define WITH_XHTTP_RPC\n#\n# *** To enable the provisioning web interface execute:\n#     - enable mysql\n#     - enable xhttp\n#     - define WITH_XHTTP_PI\n#\n# *** To enable anti-flood detection execute:\n#     - adjust pike and htable=>ipban settings as needed (default is\n#       block if more than 16 requests in 2 seconds and ban for 300 seconds)\n#     - define WITH_ANTIFLOOD\n#\n# *** To block 3XX redirect replies execute:\n#     - define WITH_BLOCK3XX\n#\n# *** To enable VoiceMail routing execute:\n#     - define WITH_VOICEMAIL\n#     - set the value of voicemail.srv_ip\n#     - adjust the value of voicemail.srv_port\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!ifdef WITH_MULTIDOMAIN\n# - the value for 'use_domain' parameters\n#!define MULTIDOMAIN 1\n#!else\n#!define MULTIDOMAIN 0\n#!endif\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n#!ifdef WITH_XHTTP\ntcp_accept_no_cl=yes\n#!endif\n\n####### Custom Parameters #########\n\n# These parameters can be modified runtime via RPC interface\n# - see the documentation of 'cfg_rpc' module.\n#\n# Format: group.id = value 'desc' description\n# Access: $sel(cfg_get.group.id) or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip: valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\" desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip = \"\" desc \"PSTN GW Address\"\npstn.gw_port = \"\" desc \"PSTN GW Port\"\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n# VoiceMail Routing on offline, busy or no answer\n#\n# - by default Voicemail server IP is empty to avoid misrouting\nvoicemail.srv_ip = \"\" desc \"VoiceMail IP Address\"\nvoicemail.srv_port = \"5060\" desc \"VoiceMail Port\"\n#!endif\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules_k:modules\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules_k/:/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_ALIASDB\nloadmodule \"alias_db.so\"\n#!endif\n\n#!ifdef WITH_SPEEDDIAL\nloadmodule \"speeddial.so\"\n#!endif\n\n#!ifdef WITH_MULTIDOMAIN\nloadmodule \"domain.so\"\n#!endif\n\n#!ifdef WITH_PRESENCE\nloadmodule \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\nloadmodule \"htable.so\"\nloadmodule \"pike.so\"\n#!endif\n\n#!ifdef WITH_XMLRPC\nloadmodule \"xmlrpc.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n#!ifdef WITH_XHTTP\nloadmodule \"xhttp.so\"\n#!endif\n\n#!ifdef WITH_XHTTP_RPC\nloadmodule \"xhttp_rpc.so\"\n#!endif\n\n#!ifdef WITH_XHTTP_PI\nloadmodule \"xhttp_pi.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/tmp/kamailio_fifo\")\n\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# add value to ;lr param to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n# ----- alias_db params -----\n#!ifdef WITH_ALIASDB\nmodparam(\"alias_db\", \"db_url\", DBURL)\nmodparam(\"alias_db\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- speeddial params -----\n#!ifdef WITH_SPEEDDIAL\nmodparam(\"speeddial\", \"db_url\", DBURL)\nmodparam(\"speeddial\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- domain params -----\n#!ifdef WITH_MULTIDOMAIN\nmodparam(\"domain\", \"db_url\", DBURL)\n# register callback to match myself condition with domains list\nmodparam(\"domain\", \"register_myself\", 1)\n#!endif\n\n\n#!ifdef WITH_PRESENCE\n# ----- presence params -----\nmodparam(\"presence\", \"db_url\", DBURL)\n\n# ----- presence_xml params -----\nmodparam(\"presence_xml\", \"db_url\", DBURL)\nmodparam(\"presence_xml\", \"force_active\", 1)\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\n# ----- pike params -----\nmodparam(\"pike\", \"sampling_time_unit\", 2)\nmodparam(\"pike\", \"reqs_density_per_unit\", 16)\nmodparam(\"pike\", \"remove_latency\", 4)\n\n# ----- htable params -----\n# ip ban htable with autoexpire after 5 minutes\nmodparam(\"htable\", \"htable\", \"ipban=>size=8;autoexpire=300;\")\n#!endif\n\n#!ifdef WITH_XMLRPC\n# ----- xmlrpc params -----\nmodparam(\"xmlrpc\", \"route\", \"XMLRPC\");\nmodparam(\"xmlrpc\", \"url_match\", \"^/RPC\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\n#!endif\n\n#!ifdef WITH_XHTTP_RPC\nmodparam(\"xhttp_rpc\", \"xhttp_rpc_root\", \"http_rpc\")\n#!endif\n\n#!ifdef WITH_XHTTP_PI\nmodparam(\"xhttp_pi\", \"xhttp_pi_root\", \"http_pi\")\nmodparam(\"xhttp_pi\", \"framework\", \"/usr/local/etc/kamailio/pi_framework.xml\")\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans())\n\t\t\tt_relay();\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle presence related requests\n\troute(PRESENCE);\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\", \"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# dispatch destinations to PSTN\n\troute(PSTN);\n\n\t# user location service\n\troute(LOCATION);\n\n\troute(RELAY);\n}\n\n\nroute[RELAY] {\n\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\n\tif (is_method(\"SUBSCRIBE\") && uri == myself) {\n\t\t# in-dialog subscribe requests\n\t\troute(PRESENCE);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\tt_relay();\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\", \"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\n#!ifdef WITH_SPEEDDIAL\n\t# search for short dialing - 2-digit extension\n\tif($rU=~\"^[0-9][0-9]$\")\n\t\tif(sd_lookup(\"speed_dial\"))\n\t\t\troute(SIPOUT);\n#!endif\n\n#!ifdef WITH_ALIASDB\n\t# search in DB-based aliases\n\tif(alias_db_lookup(\"dbaliases\"))\n\t\troute(SIPOUT);\n#!endif\n\n\t$avp(oexten) = $rU;\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\troute(TOVOICEMAIL);\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n}\n\n# Presence server route\nroute[PRESENCE] {\n\tif(!is_method(\"PUBLISH|SUBSCRIBE\"))\n\t\treturn;\n\n#!ifdef WITH_PRESENCE\n\tif (!t_newtran()) {\n\t\tsl_reply_error();\n\t\texit;\n\t}\n\n\tif(is_method(\"PUBLISH\")) {\n\t\thandle_publish();\n\t\tt_release();\n\t} else if( is_method(\"SUBSCRIBE\")) {\n\t\thandle_subscribe();\n\t\tt_release();\n\t}\n\texit;\n#!endif\n\t\n\t# if presence enabled, this part will not be executed\n\tif (is_method(\"PUBLISH\") || $rU==$null) {\n\t\tsl_send_reply(\"404\", \"Not here\");\n\t\texit;\n\t}\n\treturn;\n}\n\n# Authentication route\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself) {\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection route\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n\t# check if PSTN GW IP is defined\n\tif (strempty($sel(cfg_get.pstn.gw_ip))) {\n\t\txlog(\"SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n\t\treturn;\n\t}\n\n\t# route to PSTN dialed numbers starting with '+' or '00'\n\t#     (international format)\n\t# - update the condition to match your dialing rules for PSTN routing\n\tif(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n\t\treturn;\n\n\t# only local users allowed to call\n\tif(from_uri!=myself) {\n\t\tsl_send_reply(\"403\", \"Not Allowed\");\n\t\texit;\n\t}\n\n\tif (strempty($sel(cfg_get.pstn.gw_port))) {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\t} else {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip) + \":\"\n\t\t\t\t\t+ $sel(cfg_get.pstn.gw_port);\n\t}\n\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# XMLRPC routing\n#!ifdef WITH_XMLRPC\nroute[XMLRPC] {\n\t# allow XMLRPC from localhost\n\tif ((method==\"POST\" || method==\"GET\")\n\t\t\t&& (src_ip==127.0.0.1)) {\n\t\t# close connection only for xmlrpclib user agents (there is a bug in\n\t\t# xmlrpclib: it waits for EOF before interpreting the response).\n\t\tif ($hdr(User-Agent) =~ \"xmlrpclib\")\n\t\t\tset_reply_close();\n\t\tset_reply_no_connect();\n\t\tdispatch_rpc();\n\t\texit;\n\t}\n\tsend_reply(\"403\", \"Forbidden\");\n\texit;\n}\n#!endif\n\n# Routing to voicemail server\nroute[TOVOICEMAIL] {\n#!ifdef WITH_VOICEMAIL\n\tif(!is_method(\"INVITE\"))\n\t\treturn;\n\n\t# check if VoiceMail server IP is defined\n\tif (strempty($sel(cfg_get.voicemail.srv_ip))) {\n\t\txlog(\"SCRIPT: VoiceMail rotuing enabled but IP not defined\\n\");\n\t\treturn;\n\t}\n\tif($avp(oexten)==$null)\n\t\treturn;\n\n\t$ru = \"sip:\" + $avp(oexten) + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n\n#!ifdef WITH_BLOCK3XX\n\t# block call redirect based on 3xx replies.\n\tif (t_check_status(\"3[0-9][0-9]\")) {\n\t\tt_reply(\"404\",\"Not found\");\n\t\texit;\n\t}\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n\t# serial forking\n\t# - route to voicemail on busy or no answer (timeout)\n\tif (t_check_status(\"486|408\")) {\n\t\troute(TOVOICEMAIL);\n\t\texit;\n\t}\n#!endif\n}\n\n# Handling HTTP events\n#!ifdef WITH_XHTTP\nevent_route[xhttp:request] {\n#!ifdef WITH_XHTTP_RPC\n\t$var(xhttp_rpc_root) = $(hu{s.substr,0,9});\n\tif ($var(xhttp_rpc_root) == \"/http_rpc\") {\n\t\tdispatch_xhttp_rpc();\n\t}\n#!endif\n#!ifdef WITH_XHTTP_PI\n\t$var(xhttp_rpc_root) = $(hu{s.substr,0,8});\n\tif ($var(xhttp_rpc_root) == \"/http_pi\") {\n\t\tdispatch_xhttp_pi();\n\t}\n#!endif\n\txhttp_reply(\"200\", \"OK\", \"text/html\",\n\t\t\"<html><body>Wrong URL $hu</body></html>\");\n}\n#!endif\n\n", "#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable mysql\n#     - define WITH_PRESENCE\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     - set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n# *** To enable database aliases lookup execute:\n#     - enable mysql\n#     - define WITH_ALIASDB\n#\n# *** To enable speed dial lookup execute:\n#     - enable mysql\n#     - define WITH_SPEEDDIAL\n#\n# *** To enable multi-domain support execute:\n#     - enable mysql\n#     - define WITH_MULTIDOMAIN\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enable XMLRPC support execute:\n#     - define WITH_XMLRPC\n#     - adjust route[XMLRPC] for access policy\n#\n# *** To enable anti-flood detection execute:\n#     - adjust pike and htable=>ipban settings as needed (default is\n#       block if more than 16 requests in 2 seconds and ban for 300 seconds)\n#     - define WITH_ANTIFLOOD\n#\n# *** To block 3XX redirect replies execute:\n#     - define WITH_BLOCK3XX\n#\n# *** To enable VoiceMail routing execute:\n#     - define WITH_VOICEMAIL\n#     - set the value of voicemail.srv_ip\n#     - adjust the value of voicemail.srv_port\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!ifdef WITH_MULTIDOMAIN\n# - the value for 'use_domain' parameters\n#!define MULTIDOMAIN 1\n#!else\n#!define MULTIDOMAIN 0\n#!endif\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n####### Custom Parameters #########\n\n# These parameters can be modified runtime via RPC interface\n# - see the documentation of 'cfg_rpc' module.\n#\n# Format: group.id = value 'desc' description\n# Access: $sel(cfg_get.group.id) or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip: valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\" desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip = \"\" desc \"PSTN GW Address\"\npstn.gw_port = \"\" desc \"PSTN GW Port\"\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n# VoiceMail Routing on offline, busy or no answer\n#\n# - by default Voicemail server IP is empty to avoid misrouting\nvoicemail.srv_ip = \"\" desc \"VoiceMail IP Address\"\nvoicemail.srv_port = \"5060\" desc \"VoiceMail Port\"\n#!endif\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules/\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_ALIASDB\nloadmodule \"alias_db.so\"\n#!endif\n\n#!ifdef WITH_SPEEDDIAL\nloadmodule \"speeddial.so\"\n#!endif\n\n#!ifdef WITH_MULTIDOMAIN\nloadmodule \"domain.so\"\n#!endif\n\n#!ifdef WITH_PRESENCE\nloadmodule \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\nloadmodule \"htable.so\"\nloadmodule \"pike.so\"\n#!endif\n\n#!ifdef WITH_XMLRPC\nloadmodule \"xmlrpc.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/tmp/kamailio_fifo\")\n\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# set next param to 1 to add value to ;lr param (helps with some UAs)\nmodparam(\"rr\", \"enable_full_lr\", 0)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n# ----- alias_db params -----\n#!ifdef WITH_ALIASDB\nmodparam(\"alias_db\", \"db_url\", DBURL)\nmodparam(\"alias_db\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- speeddial params -----\n#!ifdef WITH_SPEEDDIAL\nmodparam(\"speeddial\", \"db_url\", DBURL)\nmodparam(\"speeddial\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- domain params -----\n#!ifdef WITH_MULTIDOMAIN\nmodparam(\"domain\", \"db_url\", DBURL)\n# register callback to match myself condition with domains list\nmodparam(\"domain\", \"register_myself\", 1)\n#!endif\n\n\n#!ifdef WITH_PRESENCE\n# ----- presence params -----\nmodparam(\"presence\", \"db_url\", DBURL)\n\n# ----- presence_xml params -----\nmodparam(\"presence_xml\", \"db_url\", DBURL)\nmodparam(\"presence_xml\", \"force_active\", 1)\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\n# ----- pike params -----\nmodparam(\"pike\", \"sampling_time_unit\", 2)\nmodparam(\"pike\", \"reqs_density_per_unit\", 16)\nmodparam(\"pike\", \"remove_latency\", 4)\n\n# ----- htable params -----\n# ip ban htable with autoexpire after 5 minutes\nmodparam(\"htable\", \"htable\", \"ipban=>size=8;autoexpire=300;\")\n#!endif\n\n#!ifdef WITH_XMLRPC\n# ----- xmlrpc params -----\nmodparam(\"xmlrpc\", \"route\", \"XMLRPC\");\nmodparam(\"xmlrpc\", \"url_match\", \"^/RPC\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\nmodparam(\"debugger\", \"log_level_name\", \"exec\")\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans()) {\n\t\t\troute(RELAY);\n\t\t}\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle presence related requests\n\troute(PRESENCE);\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\",\"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# dispatch destinations to PSTN\n\troute(PSTN);\n\n\t# user location service\n\troute(LOCATION);\n}\n\n# Wrapper for relaying requests\nroute[RELAY] {\n\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\n\tif (is_method(\"SUBSCRIBE\") && uri == myself) {\n\t\t# in-dialog subscribe requests\n\t\troute(PRESENCE);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\troute(RELAY);\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\",\"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\n#!ifdef WITH_SPEEDDIAL\n\t# search for short dialing - 2-digit extension\n\tif($rU=~\"^[0-9][0-9]$\")\n\t\tif(sd_lookup(\"speed_dial\"))\n\t\t\troute(SIPOUT);\n#!endif\n\n#!ifdef WITH_ALIASDB\n\t# search in DB-based aliases\n\tif(alias_db_lookup(\"dbaliases\"))\n\t\troute(SIPOUT);\n#!endif\n\n\t$avp(oexten) = $rU;\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\troute(TOVOICEMAIL);\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n\n\troute(RELAY);\n\texit;\n}\n\n# Presence server processing\nroute[PRESENCE] {\n\tif(!is_method(\"PUBLISH|SUBSCRIBE\"))\n\t\treturn;\n\n\tif(is_method(\"SUBSCRIBE\") && $hdr(Event)==\"message-summary\") {\n\t\troute(TOVOICEMAIL);\n\t\t# returns here if no voicemail server is configured\n\t\tsl_send_reply(\"404\", \"No voicemail service\");\n\t\texit;\n\t}\n\n#!ifdef WITH_PRESENCE\n\tif (!t_newtran()) {\n\t\tsl_reply_error();\n\t\texit;\n\t}\n\n\tif(is_method(\"PUBLISH\")) {\n\t\thandle_publish();\n\t\tt_release();\n\t} else if(is_method(\"SUBSCRIBE\")) {\n\t\thandle_subscribe();\n\t\tt_release();\n\t}\n\texit;\n#!endif\n\t\n\t# if presence enabled, this part will not be executed\n\tif (is_method(\"PUBLISH\") || $rU==$null) {\n\t\tsl_send_reply(\"404\", \"Not here\");\n\t\texit;\n\t}\n\treturn;\n}\n\n# IP authorization and user uthentication\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself)\n\t{\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control and singaling updates for NAT traversal\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n\t# check if PSTN GW IP is defined\n\tif (strempty($sel(cfg_get.pstn.gw_ip))) {\n\t\txlog(\"SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n\t\treturn;\n\t}\n\n\t# route to PSTN dialed numbers starting with '+' or '00'\n\t#     (international format)\n\t# - update the condition to match your dialing rules for PSTN routing\n\tif(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n\t\treturn;\n\n\t# only local users allowed to call\n\tif(from_uri!=myself) {\n\t\tsl_send_reply(\"403\", \"Not Allowed\");\n\t\texit;\n\t}\n\n\tif (strempty($sel(cfg_get.pstn.gw_port))) {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\t} else {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip) + \":\"\n\t\t\t\t\t+ $sel(cfg_get.pstn.gw_port);\n\t}\n\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# XMLRPC routing\n#!ifdef WITH_XMLRPC\nroute[XMLRPC] {\n\t# allow XMLRPC from localhost\n\tif ((method==\"POST\" || method==\"GET\")\n\t\t\t&& (src_ip==127.0.0.1)) {\n\t\t# close connection only for xmlrpclib user agents (there is a bug in\n\t\t# xmlrpclib: it waits for EOF before interpreting the response).\n\t\tif ($hdr(User-Agent) =~ \"xmlrpclib\")\n\t\t\tset_reply_close();\n\t\tset_reply_no_connect();\n\t\tdispatch_rpc();\n\t\texit;\n\t}\n\tsend_reply(\"403\", \"Forbidden\");\n\texit;\n}\n#!endif\n\n# Routing to voicemail server\nroute[TOVOICEMAIL] {\n#!ifdef WITH_VOICEMAIL\n\tif(!is_method(\"INVITE|SUBSCRIBE\"))\n\t\treturn;\n\n\t# check if VoiceMail server IP is defined\n\tif (strempty($sel(cfg_get.voicemail.srv_ip))) {\n\t\txlog(\"SCRIPT: VoiceMail rotuing enabled but IP not defined\\n\");\n\t\treturn;\n\t}\n\tif(is_method(\"INVITE\")) {\n\t\tif($avp(oexten)==$null)\n\t\t\treturn;\n\t\t$ru = \"sip:\" + $avp(oexten) + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\t} else {\n\t\tif($rU==$null)\n\t\t\treturn;\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\t}\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n\n#!ifdef WITH_BLOCK3XX\n\t# block call redirect based on 3xx replies.\n\tif (t_check_status(\"3[0-9][0-9]\")) {\n\t\tt_reply(\"404\",\"Not found\");\n\t\texit;\n\t}\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n\t# serial forking\n\t# - route to voicemail on busy or no answer (timeout)\n\tif (t_check_status(\"486|408\")) {\n\t\t$du = $null;\n\t\troute(TOVOICEMAIL);\n\t\texit;\n\t}\n#!endif\n}\n", "\n#ifndef __ctl_defaults_h\n#define __ctl_defaults_h\n/*listen by default on: */\n#ifdef SRNAME\n/* this is used when compiling sercmd tool */\n#define DEFAULT_CTL_SOCKET  \"unixs:/tmp/\" SRNAME \"_ctl\"\n#else\n/* this is used when compiling sip server */\n#define DEFAULT_CTL_SOCKET  \"unixs:/tmp/\" NAME \"_ctl\"\n#endif\n/* port used by default for tcp/udp if no port is explicitely specified */\n#define DEFAULT_CTL_PORT 2049\n\n#define PROC_CTL -32\n\n#endif\n", "#\n# $Id$\n#\n# control tool for maintaining Kamailio\n#\n#===================================================================\n\n##### ----------------------------------------------- #####\n### FIFO specific variables and functions\n#\n\n##### ----------------------------------------------- #####\n### load CTL base\n#\nif [ -f \"$MYLIBDIR/kamctl.ctlbase\" ]; then\n\t. \"$MYLIBDIR/kamctl.ctlbase\"\nelse\n\tmwarn \"Cannot load CTL core functions '$MYLIBDIR/kamctl.ctlbase' ...\"\n\t# exit -1\nfi\n\n#\n##### ----------------------------------------------- #####\n### parameters\n#\nif [ -z \"$FIFOPATH\" ]; then\n\tif [ -z \"$OSER_FIFO\" ]; then\n\t\tFIFOPATH=/tmp/kamailio_fifo\n\telse\n\t\tFIFOPATH=$OSER_FIFO\n\tfi\nfi\n\n#\n##### ----------------------------------------------- #####\n### functions\n#\nusage_fifo() {\n\techo\n\tmecho \" -- command 'mi' - send raw MI commands\"\n\techo\ncat <<EOF\n mi ................................. send raw MI command\n fifo ............................... send raw FIFO (MI) command\nEOF\n}\nUSAGE_FUNCTIONS=\"$USAGE_FUNCTIONS usage_fifo\"\n\n\nfifo_cmd()\n{\n\tmdbg \"entering fifo_cmd $*\"\n\t\n\tif [ \"$#\" -lt 1 ]; then\n\t\tmerr \"fifo_cmd must take at least command name as parameter\"\n\t\texit 1\n\tfi\n\tname=kamailio_receiver_$$\n\tpath=$CHROOT_DIR/tmp/$name\n\t# delete existing fifo file with same name\n\tif test -p $path; then\n\t\trm -f $path\n\tfi\n\tif [ ! -w $FIFOPATH ]; then\n\t\tmerr \"Error opening Kamailio's FIFO $FIFOPATH\"\n\t\tmerr \"Make sure you have the line 'modparam(\\\"mi_fifo\\\", \\\"fifo_name\\\", \\\"$FIFOPATH\\\")' in your config\"\n\t\tmerr \"and also have loaded the mi_fifo module.\"\n\t\tif [ ! -z $CHROOT_DIR ]; then\n\t\t\tmerr \"[chrooted environment] Check that $FIFOPATH is symlinked to ${CHROOT_DIR}${FIFOPATH}\"\n\t\tfi\n\t\texit 2\n\tfi\n\tif ! test -p $path; then\n\t\tmkfifo $path\n\t\tif [ $? -ne 0 ] ; then\n\t\t\tmerr \"error opening read fifo $path\"\n\t\t\texit 3\n\t\tfi\n\t\tchmod a+w $path\n\tfi\n\n\t# construct the command now\n\tCMD=\":$1:$name\\n\";\n\tshift\n\twhile [ -n \"$1\" ] ; do\n\t\tCMD=\"${CMD}${1}\\n\"\n\t\tshift\n\tdone\n\tCMD=\"${CMD}\\n\"\n\n\ttrap \"rm -f $path; kill 0\" 2\n\n\t# start reader now so that it is ready for replies\n\t# immediately after a request was sent out\n\tcat < $path | filter_fl &\n\n\t# issue FIFO request (printf taken to deal with \\n)\n\tprintf \"$CMD\" > $FIFOPATH\n\n\t# wait for the reader to complete\n\twait\n\trm $path\n\n\tmdbg \"FIFO command was:\\n$CMD\"\n}\n\n\nCTLCMD=fifo_cmd\n\nfifo_kamailio_monitor() {\n\tname=kamailio_receiver_$$\n\tpath=$CHROOT_DIR/tmp/$name\n\t# delete existing fifo file with same name\n\tif test -p $path; then\n\t\trm -f $path\n\tfi\n\tif [ ! -w $FIFOPATH ]; then\n\t\tmerr \"Error opening Kamailio's FIFO $FIFOPATH\"\n\t\tmerr \"Make sure you have the line 'modparam(\\\"mi_fifo\\\", \\\"fifo_name\\\", \\\"$FIFOPATH\\\")' in your config\"\n\t\tmerr \"and also have loaded the mi_fifo module.\"\n\t\texit 1\n\tfi\n\tif ! test -p $path; then\n\t\tmkfifo $path\n\t\tif [ $? -ne 0 ] ; then\n\t\t\tmerr \"monitor - error opening read fifo $path\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod a+w $path\n\tfi\n\ttrap \"rm $path;  clear; echo monitor ^C-ed; exit 1\" 2\n\tattempt=0\n\tif [ \"$2\" = \"\" ]; then\n\t    loops=-1;\n\telse\n\t    loops=$2;\n\tfi\n\tclear\n\twhile [ $loops -ne $attempt ] ; do\n\t\tattempt=`$EXPR $attempt + 1`\n\t\t#clear\n\t\ttput clear\n\t\t\n\t\t# print_stats $name $path $attempt\n\t\tmecho \"[cycle #: $attempt; if constant make sure server lives]\"\n\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:version:$name\n\nEOF\n\t\twait\n\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH << EOF\n:uptime:$name\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"Transaction Statistics: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nUAS_transactions\nUAC_transactions\ninuse_transactions\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"Stateless Server Statistics: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nsent_replies\nsent_err_replies\nreceived_ACKs\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"UsrLoc Stats: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nusrloc:\n\nEOF\n\t\twait\n\t\t\n\t\tif [ $loops -ne $attempt ] ; then\n\t\t\tsleep $WATCH_PERIOD\n\t\tfi\n\tdone\n\trm $path\n\texit 0\n}\n\nKAMAILIO_MONITOR=fifo_kamailio_monitor\n\n", "# $Id$\n#\n# The Kamailio configuration file for the control tools.\n#\n# Here you can set variables used in the kamctl and kamdbctl setup\n# scripts. Per default all variables here are commented out, the control tools\n# will use their internal default values.\n\n## your SIP domain\n# SIP_DOMAIN=kamailio.org\n\n## chrooted directory\n# $CHROOT_DIR=\"/path/to/chrooted/directory\"\n\n## database type: MYSQL, PGSQL, ORACLE, DB_BERKELEY, DBTEXT, or SQLITE\n# by default none is loaded\n#\n# If you want to setup a database with kamdbctl, you must at least specify\n# this parameter.\n# DBENGINE=MYSQL\n\n## database host\n# DBHOST=localhost\n\n## database name (for ORACLE this is TNS name)\n# DBNAME=kamailio\n\n# database path used by dbtext, db_berkeley or sqlite\n# DB_PATH=\"/usr/local/etc/kamailio/dbtext\"\n\n## database read/write user\n# DBRWUSER=\"kamailio\"\n\n## password for database read/write user\n# DBRWPW=\"kamailiorw\"\n\n## database read only user\n# DBROUSER=\"kamailioro\"\n\n## password for database read only user\n# DBROPW=\"kamailioro\"\n\n## database access host (from where is kamctl used)\n# DBACCESSHOST=192.168.0.1\n\n## database super user (for ORACLE this is 'scheme-creator' user)\n# DBROOTUSER=\"root\"\n\n# user name column\n# USERCOL=\"username\"\n\n\n# SQL definitions\n# If you change this definitions here, then you must change them \n# in db/schema/entities.xml too.\n# FIXME\n\n# FOREVER=\"2030-05-28 21:32:15\"\n# DEFAULT_Q=\"1.0\"\n\n\n# Program to calculate a message-digest fingerprint \n# MD5=\"md5sum\"\n\n# awk tool\n# AWK=\"awk\"\n\n# gdb tool\n# GDB=\"gdb\"\n\n# If you use a system with a grep and egrep that is not 100% gnu grep compatible,\n# e.g. solaris, install the gnu grep (ggrep) and specify this below.\n#\n# grep tool\n# GREP=\"grep\"\n\n# egrep tool\n# EGREP=\"egrep\"\n\n# sed tool\n# SED=\"sed\"\n\n# tail tool\n# LAST_LINE=\"tail -n 1\"\n\n# expr tool\n# EXPR=\"expr\"\n\n\n# Describe what additional tables to install. Valid values for the variables\n# below are yes/no/ask. With ask (default) it will interactively ask the user\n# for an answer, while yes/no allow for automated, unassisted installs.\n#\n\n# If to install tables for the modules in the EXTRA_MODULES variable.\n# INSTALL_EXTRA_TABLES=ask\n\n# If to install presence related tables.\n# INSTALL_PRESENCE_TABLES=ask\n\n# If to install uid modules related tables.\n# INSTALL_DBUID_TABLES=ask\n\n# Define what module tables should be installed.\n# If you use the postgres database and want to change the installed tables, then you\n# must also adjust the STANDARD_TABLES or EXTRA_TABLES variable accordingly in the\n# kamdbctl.base script.\n\n# Kamailio standard modules\n# STANDARD_MODULES=\"standard acc lcr domain group permissions registrar usrloc msilo\n#                   alias_db uri_db speeddial avpops auth_db pdt dialog dispatcher\n#                   dialplan\"\n\n# Kamailio extra modules\n# EXTRA_MODULES=\"imc cpl siptrace domainpolicy carrierroute userblacklist htable purple sca\"\n\n\n## type of aliases used: DB - database aliases; UL - usrloc aliases\n## - default: none\n# ALIASES_TYPE=\"DB\"\n\n## control engine: FIFO or UNIXSOCK\n## - default FIFO\n# CTLENGINE=\"FIFO\"\n\n## path to FIFO file\n# FIFOPATH=\"/tmp/kamailio_fifo\"\n\n## check ACL names; default on (1); off (0)\n# VERIFY_ACL=1\n\n## ACL names - if VERIFY_ACL is set, only the ACL names from below list\n## are accepted\n# ACL_GROUPS=\"local ld int voicemail free-pstn\"\n\n## verbose - debug purposes - default '0'\n# VERBOSE=1\n\n## do (1) or don't (0) store plaintext passwords\n## in the subscriber table - default '1'\n# STORE_PLAINTEXT_PW=0\n\n## Kamailio START Options\n## PID file path - default is: /var/run/kamailio.pid\n# PID_FILE=/var/run/kamailio.pid\n\n## Extra start options - default is: not set\n# example: start Kamailio with 64MB share memory: STARTOPTIONS=\"-m 64\"\n# STARTOPTIONS=\n"], "fixing_code": ["#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!define MULTIDOMAIN 0\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/var/run/kamailio/kamailio_fifo\")\n\n# ----- ctl params -----\nmodparam(\"ctl\", \"binrpc\", \"unix:/var/run/kamailio/kamailio_ctl\")\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# add value to ;lr param to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans()) {\n\t\t\troute(RELAY);\n\t\t}\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\",\"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# user location service\n\troute(LOCATION);\n}\n\n\nroute[RELAY] {\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\troute(RELAY);\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\", \"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n\n\troute(RELAY);\n\texit;\n}\n\n\n# IP authorization and user uthentication\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself) {\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n}\n", "#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable mysql\n#     - define WITH_PRESENCE\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     - set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n# *** To enable database aliases lookup execute:\n#     - enable mysql\n#     - define WITH_ALIASDB\n#\n# *** To enable speed dial lookup execute:\n#     - enable mysql\n#     - define WITH_SPEEDDIAL\n#\n# *** To enable multi-domain support execute:\n#     - enable mysql\n#     - define WITH_MULTIDOMAIN\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enable XMLRPC support execute:\n#     - define WITH_XMLRPC\n#     - adjust route[XMLRPC] for access policy\n#\n# *** To enable the embedded http server:\n#     - define WITH_XHTTP\n#\n# *** To enable the RPC web interface execute:\n#     - enable xhttp\n#     - define WITH_XHTTP_RPC\n#\n# *** To enable the provisioning web interface execute:\n#     - enable mysql\n#     - enable xhttp\n#     - define WITH_XHTTP_PI\n#\n# *** To enable anti-flood detection execute:\n#     - adjust pike and htable=>ipban settings as needed (default is\n#       block if more than 16 requests in 2 seconds and ban for 300 seconds)\n#     - define WITH_ANTIFLOOD\n#\n# *** To block 3XX redirect replies execute:\n#     - define WITH_BLOCK3XX\n#\n# *** To enable VoiceMail routing execute:\n#     - define WITH_VOICEMAIL\n#     - set the value of voicemail.srv_ip\n#     - adjust the value of voicemail.srv_port\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!ifdef WITH_MULTIDOMAIN\n# - the value for 'use_domain' parameters\n#!define MULTIDOMAIN 1\n#!else\n#!define MULTIDOMAIN 0\n#!endif\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n#!ifdef WITH_XHTTP\ntcp_accept_no_cl=yes\n#!endif\n\n####### Custom Parameters #########\n\n# These parameters can be modified runtime via RPC interface\n# - see the documentation of 'cfg_rpc' module.\n#\n# Format: group.id = value 'desc' description\n# Access: $sel(cfg_get.group.id) or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip: valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\" desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip = \"\" desc \"PSTN GW Address\"\npstn.gw_port = \"\" desc \"PSTN GW Port\"\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n# VoiceMail Routing on offline, busy or no answer\n#\n# - by default Voicemail server IP is empty to avoid misrouting\nvoicemail.srv_ip = \"\" desc \"VoiceMail IP Address\"\nvoicemail.srv_port = \"5060\" desc \"VoiceMail Port\"\n#!endif\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules_k:modules\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules_k/:/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_ALIASDB\nloadmodule \"alias_db.so\"\n#!endif\n\n#!ifdef WITH_SPEEDDIAL\nloadmodule \"speeddial.so\"\n#!endif\n\n#!ifdef WITH_MULTIDOMAIN\nloadmodule \"domain.so\"\n#!endif\n\n#!ifdef WITH_PRESENCE\nloadmodule \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\nloadmodule \"htable.so\"\nloadmodule \"pike.so\"\n#!endif\n\n#!ifdef WITH_XMLRPC\nloadmodule \"xmlrpc.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n#!ifdef WITH_XHTTP\nloadmodule \"xhttp.so\"\n#!endif\n\n#!ifdef WITH_XHTTP_RPC\nloadmodule \"xhttp_rpc.so\"\n#!endif\n\n#!ifdef WITH_XHTTP_PI\nloadmodule \"xhttp_pi.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/var/run/kamailio/kamailio_fifo\")\n\n# ----- ctl params -----\nmodparam(\"ctl\", \"binrpc\", \"unix:/var/run/kamailio/kamailio_ctl\")\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# add value to ;lr param to cope with most of the UAs\nmodparam(\"rr\", \"enable_full_lr\", 1)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n# ----- alias_db params -----\n#!ifdef WITH_ALIASDB\nmodparam(\"alias_db\", \"db_url\", DBURL)\nmodparam(\"alias_db\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- speeddial params -----\n#!ifdef WITH_SPEEDDIAL\nmodparam(\"speeddial\", \"db_url\", DBURL)\nmodparam(\"speeddial\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- domain params -----\n#!ifdef WITH_MULTIDOMAIN\nmodparam(\"domain\", \"db_url\", DBURL)\n# register callback to match myself condition with domains list\nmodparam(\"domain\", \"register_myself\", 1)\n#!endif\n\n\n#!ifdef WITH_PRESENCE\n# ----- presence params -----\nmodparam(\"presence\", \"db_url\", DBURL)\n\n# ----- presence_xml params -----\nmodparam(\"presence_xml\", \"db_url\", DBURL)\nmodparam(\"presence_xml\", \"force_active\", 1)\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\n# ----- pike params -----\nmodparam(\"pike\", \"sampling_time_unit\", 2)\nmodparam(\"pike\", \"reqs_density_per_unit\", 16)\nmodparam(\"pike\", \"remove_latency\", 4)\n\n# ----- htable params -----\n# ip ban htable with autoexpire after 5 minutes\nmodparam(\"htable\", \"htable\", \"ipban=>size=8;autoexpire=300;\")\n#!endif\n\n#!ifdef WITH_XMLRPC\n# ----- xmlrpc params -----\nmodparam(\"xmlrpc\", \"route\", \"XMLRPC\");\nmodparam(\"xmlrpc\", \"url_match\", \"^/RPC\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\n#!endif\n\n#!ifdef WITH_XHTTP_RPC\nmodparam(\"xhttp_rpc\", \"xhttp_rpc_root\", \"http_rpc\")\n#!endif\n\n#!ifdef WITH_XHTTP_PI\nmodparam(\"xhttp_pi\", \"xhttp_pi_root\", \"http_pi\")\nmodparam(\"xhttp_pi\", \"framework\", \"/usr/local/etc/kamailio/pi_framework.xml\")\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans())\n\t\t\tt_relay();\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle presence related requests\n\troute(PRESENCE);\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\", \"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# dispatch destinations to PSTN\n\troute(PSTN);\n\n\t# user location service\n\troute(LOCATION);\n\n\troute(RELAY);\n}\n\n\nroute[RELAY] {\n\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\n\tif (is_method(\"SUBSCRIBE\") && uri == myself) {\n\t\t# in-dialog subscribe requests\n\t\troute(PRESENCE);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\tt_relay();\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\", \"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\n#!ifdef WITH_SPEEDDIAL\n\t# search for short dialing - 2-digit extension\n\tif($rU=~\"^[0-9][0-9]$\")\n\t\tif(sd_lookup(\"speed_dial\"))\n\t\t\troute(SIPOUT);\n#!endif\n\n#!ifdef WITH_ALIASDB\n\t# search in DB-based aliases\n\tif(alias_db_lookup(\"dbaliases\"))\n\t\troute(SIPOUT);\n#!endif\n\n\t$avp(oexten) = $rU;\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\troute(TOVOICEMAIL);\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n}\n\n# Presence server route\nroute[PRESENCE] {\n\tif(!is_method(\"PUBLISH|SUBSCRIBE\"))\n\t\treturn;\n\n#!ifdef WITH_PRESENCE\n\tif (!t_newtran()) {\n\t\tsl_reply_error();\n\t\texit;\n\t}\n\n\tif(is_method(\"PUBLISH\")) {\n\t\thandle_publish();\n\t\tt_release();\n\t} else if( is_method(\"SUBSCRIBE\")) {\n\t\thandle_subscribe();\n\t\tt_release();\n\t}\n\texit;\n#!endif\n\t\n\t# if presence enabled, this part will not be executed\n\tif (is_method(\"PUBLISH\") || $rU==$null) {\n\t\tsl_send_reply(\"404\", \"Not here\");\n\t\texit;\n\t}\n\treturn;\n}\n\n# Authentication route\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself) {\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection route\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n\t# check if PSTN GW IP is defined\n\tif (strempty($sel(cfg_get.pstn.gw_ip))) {\n\t\txlog(\"SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n\t\treturn;\n\t}\n\n\t# route to PSTN dialed numbers starting with '+' or '00'\n\t#     (international format)\n\t# - update the condition to match your dialing rules for PSTN routing\n\tif(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n\t\treturn;\n\n\t# only local users allowed to call\n\tif(from_uri!=myself) {\n\t\tsl_send_reply(\"403\", \"Not Allowed\");\n\t\texit;\n\t}\n\n\tif (strempty($sel(cfg_get.pstn.gw_port))) {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\t} else {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip) + \":\"\n\t\t\t\t\t+ $sel(cfg_get.pstn.gw_port);\n\t}\n\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# XMLRPC routing\n#!ifdef WITH_XMLRPC\nroute[XMLRPC] {\n\t# allow XMLRPC from localhost\n\tif ((method==\"POST\" || method==\"GET\")\n\t\t\t&& (src_ip==127.0.0.1)) {\n\t\t# close connection only for xmlrpclib user agents (there is a bug in\n\t\t# xmlrpclib: it waits for EOF before interpreting the response).\n\t\tif ($hdr(User-Agent) =~ \"xmlrpclib\")\n\t\t\tset_reply_close();\n\t\tset_reply_no_connect();\n\t\tdispatch_rpc();\n\t\texit;\n\t}\n\tsend_reply(\"403\", \"Forbidden\");\n\texit;\n}\n#!endif\n\n# Routing to voicemail server\nroute[TOVOICEMAIL] {\n#!ifdef WITH_VOICEMAIL\n\tif(!is_method(\"INVITE\"))\n\t\treturn;\n\n\t# check if VoiceMail server IP is defined\n\tif (strempty($sel(cfg_get.voicemail.srv_ip))) {\n\t\txlog(\"SCRIPT: VoiceMail rotuing enabled but IP not defined\\n\");\n\t\treturn;\n\t}\n\tif($avp(oexten)==$null)\n\t\treturn;\n\n\t$ru = \"sip:\" + $avp(oexten) + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n\n#!ifdef WITH_BLOCK3XX\n\t# block call redirect based on 3xx replies.\n\tif (t_check_status(\"3[0-9][0-9]\")) {\n\t\tt_reply(\"404\",\"Not found\");\n\t\texit;\n\t}\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n\t# serial forking\n\t# - route to voicemail on busy or no answer (timeout)\n\tif (t_check_status(\"486|408\")) {\n\t\troute(TOVOICEMAIL);\n\t\texit;\n\t}\n#!endif\n}\n\n# Handling HTTP events\n#!ifdef WITH_XHTTP\nevent_route[xhttp:request] {\n#!ifdef WITH_XHTTP_RPC\n\t$var(xhttp_rpc_root) = $(hu{s.substr,0,9});\n\tif ($var(xhttp_rpc_root) == \"/http_rpc\") {\n\t\tdispatch_xhttp_rpc();\n\t}\n#!endif\n#!ifdef WITH_XHTTP_PI\n\t$var(xhttp_rpc_root) = $(hu{s.substr,0,8});\n\tif ($var(xhttp_rpc_root) == \"/http_pi\") {\n\t\tdispatch_xhttp_pi();\n\t}\n#!endif\n\txhttp_reply(\"200\", \"OK\", \"text/html\",\n\t\t\"<html><body>Wrong URL $hu</body></html>\");\n}\n#!endif\n\n", "#!KAMAILIO\n#\n# Kamailio (OpenSER) SIP Server v4.3 - default configuration script\n#     - web: http://www.kamailio.org\n#     - git: http://sip-router.org\n#\n# Direct your questions about this file to: <sr-users@lists.sip-router.org>\n#\n# Refer to the Core CookBook at http://www.kamailio.org/wiki/\n# for an explanation of possible statements, functions and parameters.\n#\n# Several features can be enabled using '#!define WITH_FEATURE' directives:\n#\n# *** To run in debug mode: \n#     - define WITH_DEBUG\n#\n# *** To enable mysql: \n#     - define WITH_MYSQL\n#\n# *** To enable authentication execute:\n#     - enable mysql\n#     - define WITH_AUTH\n#     - add users using 'kamctl'\n#\n# *** To enable IP authentication execute:\n#     - enable mysql\n#     - enable authentication\n#     - define WITH_IPAUTH\n#     - add IP addresses with group id '1' to 'address' table\n#\n# *** To enable persistent user location execute:\n#     - enable mysql\n#     - define WITH_USRLOCDB\n#\n# *** To enable presence server execute:\n#     - enable mysql\n#     - define WITH_PRESENCE\n#\n# *** To enable nat traversal execute:\n#     - define WITH_NAT\n#     - install RTPProxy: http://www.rtpproxy.org\n#     - start RTPProxy:\n#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722\n#     - option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING\n#\n# *** To enable PSTN gateway routing execute:\n#     - define WITH_PSTN\n#     - set the value of pstn.gw_ip\n#     - check route[PSTN] for regexp routing condition\n#\n# *** To enable database aliases lookup execute:\n#     - enable mysql\n#     - define WITH_ALIASDB\n#\n# *** To enable speed dial lookup execute:\n#     - enable mysql\n#     - define WITH_SPEEDDIAL\n#\n# *** To enable multi-domain support execute:\n#     - enable mysql\n#     - define WITH_MULTIDOMAIN\n#\n# *** To enable TLS support execute:\n#     - adjust CFGDIR/tls.cfg as needed\n#     - define WITH_TLS\n#\n# *** To enable XMLRPC support execute:\n#     - define WITH_XMLRPC\n#     - adjust route[XMLRPC] for access policy\n#\n# *** To enable anti-flood detection execute:\n#     - adjust pike and htable=>ipban settings as needed (default is\n#       block if more than 16 requests in 2 seconds and ban for 300 seconds)\n#     - define WITH_ANTIFLOOD\n#\n# *** To block 3XX redirect replies execute:\n#     - define WITH_BLOCK3XX\n#\n# *** To enable VoiceMail routing execute:\n#     - define WITH_VOICEMAIL\n#     - set the value of voicemail.srv_ip\n#     - adjust the value of voicemail.srv_port\n#\n# *** To enhance accounting execute:\n#     - enable mysql\n#     - define WITH_ACCDB\n#     - add following columns to database\n#!ifdef ACCDB_COMMENT\n  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN src_ip varchar(64) NOT NULL default '';\n  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';\n  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';\n#!endif\n\n####### Include Local Config If Exists #########\nimport_file \"kamailio-local.cfg\"\n\n####### Defined Values #########\n\n# *** Value defines - IDs used later in config\n#!ifdef WITH_MYSQL\n# - database URL - used to connect to database server by modules such\n#       as: auth_db, acc, usrloc, a.s.o.\n#!ifndef DBURL\n#!define DBURL \"mysql://kamailio:kamailiorw@localhost/kamailio\"\n#!endif\n#!endif\n#!ifdef WITH_MULTIDOMAIN\n# - the value for 'use_domain' parameters\n#!define MULTIDOMAIN 1\n#!else\n#!define MULTIDOMAIN 0\n#!endif\n\n# - flags\n#   FLT_ - per transaction (message) flags\n#\tFLB_ - per branch flags\n#!define FLT_ACC 1\n#!define FLT_ACCMISSED 2\n#!define FLT_ACCFAILED 3\n#!define FLT_NATS 5\n\n#!define FLB_NATB 6\n#!define FLB_NATSIPPING 7\n\n####### Global Parameters #########\n\n### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR\n#!ifdef WITH_DEBUG\ndebug=4\nlog_stderror=yes\n#!else\ndebug=2\nlog_stderror=no\n#!endif\n\nmemdbg=5\nmemlog=5\n\nlog_facility=LOG_LOCAL0\n\nfork=yes\nchildren=4\n\n/* uncomment the next line to disable TCP (default on) */\n#disable_tcp=yes\n\n/* uncomment the next line to disable the auto discovery of local aliases\n   based on reverse DNS on IPs (default on) */\n#auto_aliases=no\n\n/* add local domain aliases */\n#alias=\"sip.mydomain.com\"\n\n/* uncomment and configure the following line if you want Kamailio to \n   bind on a specific interface/port/proto (default bind on all available) */\n#listen=udp:10.0.0.10:5060\n\n/* port to listen to\n * - can be specified more than once if needed to listen on many ports */\nport=5060\n\n#!ifdef WITH_TLS\nenable_tls=yes\n#!endif\n\n# life time of TCP connection when there is no traffic\n# - a bit higher than registration expires to cope with UA behind NAT\ntcp_connection_lifetime=3605\n\n####### Custom Parameters #########\n\n# These parameters can be modified runtime via RPC interface\n# - see the documentation of 'cfg_rpc' module.\n#\n# Format: group.id = value 'desc' description\n# Access: $sel(cfg_get.group.id) or @cfg_get.group.id\n#\n\n#!ifdef WITH_PSTN\n# PSTN GW Routing\n#\n# - pstn.gw_ip: valid IP or hostname as string value, example:\n# pstn.gw_ip = \"10.0.0.101\" desc \"My PSTN GW Address\"\n#\n# - by default is empty to avoid misrouting\npstn.gw_ip = \"\" desc \"PSTN GW Address\"\npstn.gw_port = \"\" desc \"PSTN GW Port\"\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n# VoiceMail Routing on offline, busy or no answer\n#\n# - by default Voicemail server IP is empty to avoid misrouting\nvoicemail.srv_ip = \"\" desc \"VoiceMail IP Address\"\nvoicemail.srv_port = \"5060\" desc \"VoiceMail Port\"\n#!endif\n\n####### Modules Section ########\n\n# set paths to location of modules (to sources or installation folders)\n#!ifdef WITH_SRCPATH\nmpath=\"modules/\"\n#!else\nmpath=\"/usr/local/lib/kamailio/modules/\"\n#!endif\n\n#!ifdef WITH_MYSQL\nloadmodule \"db_mysql.so\"\n#!endif\n\nloadmodule \"mi_fifo.so\"\nloadmodule \"kex.so\"\nloadmodule \"corex.so\"\nloadmodule \"tm.so\"\nloadmodule \"tmx.so\"\nloadmodule \"sl.so\"\nloadmodule \"rr.so\"\nloadmodule \"pv.so\"\nloadmodule \"maxfwd.so\"\nloadmodule \"usrloc.so\"\nloadmodule \"registrar.so\"\nloadmodule \"textops.so\"\nloadmodule \"siputils.so\"\nloadmodule \"xlog.so\"\nloadmodule \"sanity.so\"\nloadmodule \"ctl.so\"\nloadmodule \"cfg_rpc.so\"\nloadmodule \"mi_rpc.so\"\nloadmodule \"acc.so\"\n\n#!ifdef WITH_AUTH\nloadmodule \"auth.so\"\nloadmodule \"auth_db.so\"\n#!ifdef WITH_IPAUTH\nloadmodule \"permissions.so\"\n#!endif\n#!endif\n\n#!ifdef WITH_ALIASDB\nloadmodule \"alias_db.so\"\n#!endif\n\n#!ifdef WITH_SPEEDDIAL\nloadmodule \"speeddial.so\"\n#!endif\n\n#!ifdef WITH_MULTIDOMAIN\nloadmodule \"domain.so\"\n#!endif\n\n#!ifdef WITH_PRESENCE\nloadmodule \"presence.so\"\nloadmodule \"presence_xml.so\"\n#!endif\n\n#!ifdef WITH_NAT\nloadmodule \"nathelper.so\"\nloadmodule \"rtpproxy.so\"\n#!endif\n\n#!ifdef WITH_TLS\nloadmodule \"tls.so\"\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\nloadmodule \"htable.so\"\nloadmodule \"pike.so\"\n#!endif\n\n#!ifdef WITH_XMLRPC\nloadmodule \"xmlrpc.so\"\n#!endif\n\n#!ifdef WITH_DEBUG\nloadmodule \"debugger.so\"\n#!endif\n\n# ----------------- setting module-specific parameters ---------------\n\n\n# ----- mi_fifo params -----\nmodparam(\"mi_fifo\", \"fifo_name\", \"/var/run/kamailio/kamailio_fifo\")\n\n# ----- ctl params -----\nmodparam(\"ctl\", \"binrpc\", \"unix:/var/run/kamailio/kamailio_ctl\")\n\n# ----- tm params -----\n# auto-discard branches from previous serial forking leg\nmodparam(\"tm\", \"failure_reply_mode\", 3)\n# default retransmission timeout: 30sec\nmodparam(\"tm\", \"fr_timer\", 30000)\n# default invite retransmission timeout after 1xx: 120sec\nmodparam(\"tm\", \"fr_inv_timer\", 120000)\n\n\n# ----- rr params -----\n# set next param to 1 to add value to ;lr param (helps with some UAs)\nmodparam(\"rr\", \"enable_full_lr\", 0)\n# do not append from tag to the RR (no need for this script)\nmodparam(\"rr\", \"append_fromtag\", 0)\n\n\n# ----- registrar params -----\nmodparam(\"registrar\", \"method_filtering\", 1)\n/* uncomment the next line to disable parallel forking via location */\n# modparam(\"registrar\", \"append_branches\", 0)\n/* uncomment the next line not to allow more than 10 contacts per AOR */\n#modparam(\"registrar\", \"max_contacts\", 10)\n# max value for expires of registrations\nmodparam(\"registrar\", \"max_expires\", 3600)\n# set it to 1 to enable GRUU\nmodparam(\"registrar\", \"gruu_enabled\", 0)\n\n\n# ----- acc params -----\n/* what special events should be accounted ? */\nmodparam(\"acc\", \"early_media\", 0)\nmodparam(\"acc\", \"report_ack\", 0)\nmodparam(\"acc\", \"report_cancels\", 0)\n/* by default ww do not adjust the direct of the sequential requests.\n   if you enable this parameter, be sure the enable \"append_fromtag\"\n   in \"rr\" module */\nmodparam(\"acc\", \"detect_direction\", 0)\n/* account triggers (flags) */\nmodparam(\"acc\", \"log_flag\", FLT_ACC)\nmodparam(\"acc\", \"log_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"log_extra\", \n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\nmodparam(\"acc\", \"failed_transaction_flag\", FLT_ACCFAILED)\n/* enhanced DB accounting */\n#!ifdef WITH_ACCDB\nmodparam(\"acc\", \"db_flag\", FLT_ACC)\nmodparam(\"acc\", \"db_missed_flag\", FLT_ACCMISSED)\nmodparam(\"acc\", \"db_url\", DBURL)\nmodparam(\"acc\", \"db_extra\",\n\t\"src_user=$fU;src_domain=$fd;src_ip=$si;\"\n\t\"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd\")\n#!endif\n\n\n# ----- usrloc params -----\n/* enable DB persistency for location entries */\n#!ifdef WITH_USRLOCDB\nmodparam(\"usrloc\", \"db_url\", DBURL)\nmodparam(\"usrloc\", \"db_mode\", 2)\nmodparam(\"usrloc\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- auth_db params -----\n#!ifdef WITH_AUTH\nmodparam(\"auth_db\", \"db_url\", DBURL)\nmodparam(\"auth_db\", \"calculate_ha1\", yes)\nmodparam(\"auth_db\", \"password_column\", \"password\")\nmodparam(\"auth_db\", \"load_credentials\", \"\")\nmodparam(\"auth_db\", \"use_domain\", MULTIDOMAIN)\n\n# ----- permissions params -----\n#!ifdef WITH_IPAUTH\nmodparam(\"permissions\", \"db_url\", DBURL)\nmodparam(\"permissions\", \"db_mode\", 1)\n#!endif\n\n#!endif\n\n\n# ----- alias_db params -----\n#!ifdef WITH_ALIASDB\nmodparam(\"alias_db\", \"db_url\", DBURL)\nmodparam(\"alias_db\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- speeddial params -----\n#!ifdef WITH_SPEEDDIAL\nmodparam(\"speeddial\", \"db_url\", DBURL)\nmodparam(\"speeddial\", \"use_domain\", MULTIDOMAIN)\n#!endif\n\n\n# ----- domain params -----\n#!ifdef WITH_MULTIDOMAIN\nmodparam(\"domain\", \"db_url\", DBURL)\n# register callback to match myself condition with domains list\nmodparam(\"domain\", \"register_myself\", 1)\n#!endif\n\n\n#!ifdef WITH_PRESENCE\n# ----- presence params -----\nmodparam(\"presence\", \"db_url\", DBURL)\n\n# ----- presence_xml params -----\nmodparam(\"presence_xml\", \"db_url\", DBURL)\nmodparam(\"presence_xml\", \"force_active\", 1)\n#!endif\n\n\n#!ifdef WITH_NAT\n# ----- rtpproxy params -----\nmodparam(\"rtpproxy\", \"rtpproxy_sock\", \"udp:127.0.0.1:7722\")\n\n# ----- nathelper params -----\nmodparam(\"nathelper\", \"natping_interval\", 30)\nmodparam(\"nathelper\", \"ping_nated_only\", 1)\nmodparam(\"nathelper\", \"sipping_bflag\", FLB_NATSIPPING)\nmodparam(\"nathelper\", \"sipping_from\", \"sip:pinger@kamailio.org\")\n\n# params needed for NAT traversal in other modules\nmodparam(\"nathelper|registrar\", \"received_avp\", \"$avp(RECEIVED)\")\nmodparam(\"usrloc\", \"nat_bflag\", FLB_NATB)\n#!endif\n\n\n#!ifdef WITH_TLS\n# ----- tls params -----\nmodparam(\"tls\", \"config\", \"/usr/local/etc/kamailio/tls.cfg\")\n#!endif\n\n#!ifdef WITH_ANTIFLOOD\n# ----- pike params -----\nmodparam(\"pike\", \"sampling_time_unit\", 2)\nmodparam(\"pike\", \"reqs_density_per_unit\", 16)\nmodparam(\"pike\", \"remove_latency\", 4)\n\n# ----- htable params -----\n# ip ban htable with autoexpire after 5 minutes\nmodparam(\"htable\", \"htable\", \"ipban=>size=8;autoexpire=300;\")\n#!endif\n\n#!ifdef WITH_XMLRPC\n# ----- xmlrpc params -----\nmodparam(\"xmlrpc\", \"route\", \"XMLRPC\");\nmodparam(\"xmlrpc\", \"url_match\", \"^/RPC\")\n#!endif\n\n#!ifdef WITH_DEBUG\n# ----- debugger params -----\nmodparam(\"debugger\", \"cfgtrace\", 1)\nmodparam(\"debugger\", \"log_level_name\", \"exec\")\n#!endif\n\n####### Routing Logic ########\n\n\n# Main SIP request routing logic\n# - processing of any incoming SIP request starts with this route\n# - note: this is the same as route { ... }\nrequest_route {\n\n\t# per request initial checks\n\troute(REQINIT);\n\n\t# NAT detection\n\troute(NATDETECT);\n\n\t# CANCEL processing\n\tif (is_method(\"CANCEL\")) {\n\t\tif (t_check_trans()) {\n\t\t\troute(RELAY);\n\t\t}\n\t\texit;\n\t}\n\n\t# handle requests within SIP dialogs\n\troute(WITHINDLG);\n\n\t### only initial requests (no To tag)\n\n\t# handle retransmissions\n\tif(t_precheck_trans()) {\n\t\tt_check_trans();\n\t\texit;\n\t}\n\tt_check_trans();\n\n\t# authentication\n\troute(AUTH);\n\n\t# record routing for dialog forming requests (in case they are routed)\n\t# - remove preloaded route headers\n\tremove_hf(\"Route\");\n\tif (is_method(\"INVITE|SUBSCRIBE\"))\n\t\trecord_route();\n\n\t# account only INVITEs\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACC); # do accounting\n\t}\n\n\t# dispatch requests to foreign domains\n\troute(SIPOUT);\n\n\t### requests for my local domains\n\n\t# handle presence related requests\n\troute(PRESENCE);\n\n\t# handle registrations\n\troute(REGISTRAR);\n\n\tif ($rU==$null) {\n\t\t# request with no Username in RURI\n\t\tsl_send_reply(\"484\",\"Address Incomplete\");\n\t\texit;\n\t}\n\n\t# dispatch destinations to PSTN\n\troute(PSTN);\n\n\t# user location service\n\troute(LOCATION);\n}\n\n# Wrapper for relaying requests\nroute[RELAY] {\n\n\t# enable additional event routes for forwarded requests\n\t# - serial forking, RTP relaying handling, a.s.o.\n\tif (is_method(\"INVITE|BYE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"branch_route\")) t_on_branch(\"MANAGE_BRANCH\");\n\t}\n\tif (is_method(\"INVITE|SUBSCRIBE|UPDATE\")) {\n\t\tif(!t_is_set(\"onreply_route\")) t_on_reply(\"MANAGE_REPLY\");\n\t}\n\tif (is_method(\"INVITE\")) {\n\t\tif(!t_is_set(\"failure_route\")) t_on_failure(\"MANAGE_FAILURE\");\n\t}\n\n\tif (!t_relay()) {\n\t\tsl_reply_error();\n\t}\n\texit;\n}\n\n# Per SIP request initial checks\nroute[REQINIT] {\n#!ifdef WITH_ANTIFLOOD\n\t# flood dection from same IP and traffic ban for a while\n\t# be sure you exclude checking trusted peers, such as pstn gateways\n\t# - local host excluded (e.g., loop to self)\n\tif(src_ip!=myself) {\n\t\tif($sht(ipban=>$si)!=$null) {\n\t\t\t# ip is already blocked\n\t\t\txdbg(\"request from blocked IP - $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\texit;\n\t\t}\n\t\tif (!pike_check_req()) {\n\t\t\txlog(\"L_ALERT\",\"ALERT: pike blocking $rm from $fu (IP:$si:$sp)\\n\");\n\t\t\t$sht(ipban=>$si) = 1;\n\t\t\texit;\n\t\t}\n\t}\n\tif($ua =~ \"friendly-scanner\") {\n\t\tsl_send_reply(\"200\", \"OK\");\n\t\texit;\n\t}\n#!endif\n\n\tif (!mf_process_maxfwd_header(\"10\")) {\n\t\tsl_send_reply(\"483\",\"Too Many Hops\");\n\t\texit;\n\t}\n\n\tif(is_method(\"OPTIONS\") && uri==myself && $rU==$null) {\n\t\tsl_send_reply(\"200\",\"Keepalive\");\n\t\texit;\n\t}\n\n\tif(!sanity_check(\"1511\", \"7\")) {\n\t\txlog(\"Malformed SIP message from $si:$sp\\n\");\n\t\texit;\n\t}\n}\n\n# Handle requests within SIP dialogs\nroute[WITHINDLG] {\n\tif (!has_totag()) return;\n\n\t# sequential request withing a dialog should\n\t# take the path determined by record-routing\n\tif (loose_route()) {\n\t\troute(DLGURI);\n\t\tif (is_method(\"BYE\")) {\n\t\t\tsetflag(FLT_ACC); # do accounting ...\n\t\t\tsetflag(FLT_ACCFAILED); # ... even if the transaction fails\n\t\t}\n\t\telse if ( is_method(\"ACK\") ) {\n\t\t\t# ACK is forwarded statelessy\n\t\t\troute(NATMANAGE);\n\t\t}\n\t\telse if ( is_method(\"NOTIFY\") ) {\n\t\t\t# Add Record-Route for in-dialog NOTIFY as per RFC 6665.\n\t\t\trecord_route();\n\t\t}\n\t\troute(RELAY);\n\t\texit;\n\t}\n\n\tif (is_method(\"SUBSCRIBE\") && uri == myself) {\n\t\t# in-dialog subscribe requests\n\t\troute(PRESENCE);\n\t\texit;\n\t}\n\tif ( is_method(\"ACK\") ) {\n\t\tif ( t_check_trans() ) {\n\t\t\t# no loose-route, but stateful ACK;\n\t\t\t# must be an ACK after a 487\n\t\t\t# or e.g. 404 from upstream server\n\t\t\troute(RELAY);\n\t\t\texit;\n\t\t} else {\n\t\t\t# ACK without matching transaction ... ignore and discard\n\t\t\texit;\n\t\t}\n\t}\n\tsl_send_reply(\"404\",\"Not here\");\n\texit;\n}\n\n# Handle SIP registrations\nroute[REGISTRAR] {\n\tif (!is_method(\"REGISTER\")) return;\n\n\tif(isflagset(FLT_NATS)) {\n\t\tsetbflag(FLB_NATB);\n#!ifdef WITH_NATSIPPING\n\t\t# do SIP NAT pinging\n\t\tsetbflag(FLB_NATSIPPING);\n#!endif\n\t}\n\tif (!save(\"location\"))\n\t\tsl_reply_error();\n\texit;\n}\n\n# User location service\nroute[LOCATION] {\n\n#!ifdef WITH_SPEEDDIAL\n\t# search for short dialing - 2-digit extension\n\tif($rU=~\"^[0-9][0-9]$\")\n\t\tif(sd_lookup(\"speed_dial\"))\n\t\t\troute(SIPOUT);\n#!endif\n\n#!ifdef WITH_ALIASDB\n\t# search in DB-based aliases\n\tif(alias_db_lookup(\"dbaliases\"))\n\t\troute(SIPOUT);\n#!endif\n\n\t$avp(oexten) = $rU;\n\tif (!lookup(\"location\")) {\n\t\t$var(rc) = $rc;\n\t\troute(TOVOICEMAIL);\n\t\tt_newtran();\n\t\tswitch ($var(rc)) {\n\t\t\tcase -1:\n\t\t\tcase -3:\n\t\t\t\tsend_reply(\"404\", \"Not Found\");\n\t\t\t\texit;\n\t\t\tcase -2:\n\t\t\t\tsend_reply(\"405\", \"Method Not Allowed\");\n\t\t\t\texit;\n\t\t}\n\t}\n\n\t# when routing via usrloc, log the missed calls also\n\tif (is_method(\"INVITE\")) {\n\t\tsetflag(FLT_ACCMISSED);\n\t}\n\n\troute(RELAY);\n\texit;\n}\n\n# Presence server processing\nroute[PRESENCE] {\n\tif(!is_method(\"PUBLISH|SUBSCRIBE\"))\n\t\treturn;\n\n\tif(is_method(\"SUBSCRIBE\") && $hdr(Event)==\"message-summary\") {\n\t\troute(TOVOICEMAIL);\n\t\t# returns here if no voicemail server is configured\n\t\tsl_send_reply(\"404\", \"No voicemail service\");\n\t\texit;\n\t}\n\n#!ifdef WITH_PRESENCE\n\tif (!t_newtran()) {\n\t\tsl_reply_error();\n\t\texit;\n\t}\n\n\tif(is_method(\"PUBLISH\")) {\n\t\thandle_publish();\n\t\tt_release();\n\t} else if(is_method(\"SUBSCRIBE\")) {\n\t\thandle_subscribe();\n\t\tt_release();\n\t}\n\texit;\n#!endif\n\t\n\t# if presence enabled, this part will not be executed\n\tif (is_method(\"PUBLISH\") || $rU==$null) {\n\t\tsl_send_reply(\"404\", \"Not here\");\n\t\texit;\n\t}\n\treturn;\n}\n\n# IP authorization and user uthentication\nroute[AUTH] {\n#!ifdef WITH_AUTH\n\n#!ifdef WITH_IPAUTH\n\tif((!is_method(\"REGISTER\")) && allow_source_address()) {\n\t\t# source IP allowed\n\t\treturn;\n\t}\n#!endif\n\n\tif (is_method(\"REGISTER\") || from_uri==myself)\n\t{\n\t\t# authenticate requests\n\t\tif (!auth_check(\"$fd\", \"subscriber\", \"1\")) {\n\t\t\tauth_challenge(\"$fd\", \"0\");\n\t\t\texit;\n\t\t}\n\t\t# user authenticated - remove auth header\n\t\tif(!is_method(\"REGISTER|PUBLISH\"))\n\t\t\tconsume_credentials();\n\t}\n\t# if caller is not local subscriber, then check if it calls\n\t# a local destination, otherwise deny, not an open relay here\n\tif (from_uri!=myself && uri!=myself) {\n\t\tsl_send_reply(\"403\",\"Not relaying\");\n\t\texit;\n\t}\n\n#!endif\n\treturn;\n}\n\n# Caller NAT detection\nroute[NATDETECT] {\n#!ifdef WITH_NAT\n\tforce_rport();\n\tif (nat_uac_test(\"19\")) {\n\t\tif (is_method(\"REGISTER\")) {\n\t\t\tfix_nated_register();\n\t\t} else {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t\tsetflag(FLT_NATS);\n\t}\n#!endif\n\treturn;\n}\n\n# RTPProxy control and singaling updates for NAT traversal\nroute[NATMANAGE] {\n#!ifdef WITH_NAT\n\tif (is_request()) {\n\t\tif(has_totag()) {\n\t\t\tif(check_route_param(\"nat=yes\")) {\n\t\t\t\tsetbflag(FLB_NATB);\n\t\t\t}\n\t\t}\n\t}\n\tif (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))\n\t\treturn;\n\n\trtpproxy_manage(\"co\");\n\n\tif (is_request()) {\n\t\tif (!has_totag()) {\n\t\t\tif(t_is_branch_route()) {\n\t\t\t\tadd_rr_param(\";nat=yes\");\n\t\t\t}\n\t\t}\n\t}\n\tif (is_reply()) {\n\t\tif(isbflagset(FLB_NATB)) {\n\t\t\tif(is_first_hop())\n\t\t\t\tset_contact_alias();\n\t\t}\n\t}\n#!endif\n\treturn;\n}\n\n# URI update for dialog requests\nroute[DLGURI] {\n#!ifdef WITH_NAT\n\tif(!isdsturiset()) {\n\t\thandle_ruri_alias();\n\t}\n#!endif\n\treturn;\n}\n\n# Routing to foreign domains\nroute[SIPOUT] {\n\tif (uri==myself) return;\n\n\tappend_hf(\"P-hint: outbound\\r\\n\");\n\troute(RELAY);\n\texit;\n}\n\n# PSTN GW routing\nroute[PSTN] {\n#!ifdef WITH_PSTN\n\t# check if PSTN GW IP is defined\n\tif (strempty($sel(cfg_get.pstn.gw_ip))) {\n\t\txlog(\"SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\\n\");\n\t\treturn;\n\t}\n\n\t# route to PSTN dialed numbers starting with '+' or '00'\n\t#     (international format)\n\t# - update the condition to match your dialing rules for PSTN routing\n\tif(!($rU=~\"^(\\+|00)[1-9][0-9]{3,20}$\"))\n\t\treturn;\n\n\t# only local users allowed to call\n\tif(from_uri!=myself) {\n\t\tsl_send_reply(\"403\", \"Not Allowed\");\n\t\texit;\n\t}\n\n\tif (strempty($sel(cfg_get.pstn.gw_port))) {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip);\n\t} else {\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.pstn.gw_ip) + \":\"\n\t\t\t\t\t+ $sel(cfg_get.pstn.gw_port);\n\t}\n\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# XMLRPC routing\n#!ifdef WITH_XMLRPC\nroute[XMLRPC] {\n\t# allow XMLRPC from localhost\n\tif ((method==\"POST\" || method==\"GET\")\n\t\t\t&& (src_ip==127.0.0.1)) {\n\t\t# close connection only for xmlrpclib user agents (there is a bug in\n\t\t# xmlrpclib: it waits for EOF before interpreting the response).\n\t\tif ($hdr(User-Agent) =~ \"xmlrpclib\")\n\t\t\tset_reply_close();\n\t\tset_reply_no_connect();\n\t\tdispatch_rpc();\n\t\texit;\n\t}\n\tsend_reply(\"403\", \"Forbidden\");\n\texit;\n}\n#!endif\n\n# Routing to voicemail server\nroute[TOVOICEMAIL] {\n#!ifdef WITH_VOICEMAIL\n\tif(!is_method(\"INVITE|SUBSCRIBE\"))\n\t\treturn;\n\n\t# check if VoiceMail server IP is defined\n\tif (strempty($sel(cfg_get.voicemail.srv_ip))) {\n\t\txlog(\"SCRIPT: VoiceMail rotuing enabled but IP not defined\\n\");\n\t\treturn;\n\t}\n\tif(is_method(\"INVITE\")) {\n\t\tif($avp(oexten)==$null)\n\t\t\treturn;\n\t\t$ru = \"sip:\" + $avp(oexten) + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\t} else {\n\t\tif($rU==$null)\n\t\t\treturn;\n\t\t$ru = \"sip:\" + $rU + \"@\" + $sel(cfg_get.voicemail.srv_ip)\n\t\t\t\t+ \":\" + $sel(cfg_get.voicemail.srv_port);\n\t}\n\troute(RELAY);\n\texit;\n#!endif\n\n\treturn;\n}\n\n# Manage outgoing branches\nbranch_route[MANAGE_BRANCH] {\n\txdbg(\"new branch [$T_branch_idx] to $ru\\n\");\n\troute(NATMANAGE);\n}\n\n# Manage incoming replies\nonreply_route[MANAGE_REPLY] {\n\txdbg(\"incoming reply\\n\");\n\tif(status=~\"[12][0-9][0-9]\")\n\t\troute(NATMANAGE);\n}\n\n# Manage failure routing cases\nfailure_route[MANAGE_FAILURE] {\n\troute(NATMANAGE);\n\n\tif (t_is_canceled()) {\n\t\texit;\n\t}\n\n#!ifdef WITH_BLOCK3XX\n\t# block call redirect based on 3xx replies.\n\tif (t_check_status(\"3[0-9][0-9]\")) {\n\t\tt_reply(\"404\",\"Not found\");\n\t\texit;\n\t}\n#!endif\n\n#!ifdef WITH_VOICEMAIL\n\t# serial forking\n\t# - route to voicemail on busy or no answer (timeout)\n\tif (t_check_status(\"486|408\")) {\n\t\t$du = $null;\n\t\troute(TOVOICEMAIL);\n\t\texit;\n\t}\n#!endif\n}\n", "\n#ifndef __ctl_defaults_h\n#define __ctl_defaults_h\n/*listen by default on: */\n#ifdef SRNAME\n/* this is used when compiling sercmd tool */\n#define DEFAULT_CTL_SOCKET  \"unixs:\" RUN_DIR \"/\" SRNAME \"/\" SRNAME \"_ctl\"\n#else\n/* this is used when compiling sip server */\n#define DEFAULT_CTL_SOCKET  \"unixs:\" RUN_DIR \"/\" NAME \"_ctl\"\n#endif\n/* port used by default for tcp/udp if no port is explicitely specified */\n#define DEFAULT_CTL_PORT 2049\n\n#define PROC_CTL -32\n\n#endif\n", "#\n# $Id$\n#\n# control tool for maintaining Kamailio\n#\n#===================================================================\n\n##### ----------------------------------------------- #####\n### FIFO specific variables and functions\n#\n\n##### ----------------------------------------------- #####\n### load CTL base\n#\nif [ -f \"$MYLIBDIR/kamctl.ctlbase\" ]; then\n\t. \"$MYLIBDIR/kamctl.ctlbase\"\nelse\n\tmwarn \"Cannot load CTL core functions '$MYLIBDIR/kamctl.ctlbase' ...\"\n\t# exit -1\nfi\n\n#\n##### ----------------------------------------------- #####\n### parameters\n#\nif [ -z \"$FIFOPATH\" ]; then\n\tif [ -z \"$OSER_FIFO\" ]; then\n\t\tFIFOPATH=/var/run/kamailio/kamailio_fifo\n\telse\n\t\tFIFOPATH=$OSER_FIFO\n\tfi\nfi\n\n#\n##### ----------------------------------------------- #####\n### functions\n#\nusage_fifo() {\n\techo\n\tmecho \" -- command 'mi' - send raw MI commands\"\n\techo\ncat <<EOF\n mi ................................. send raw MI command\n fifo ............................... send raw FIFO (MI) command\nEOF\n}\nUSAGE_FUNCTIONS=\"$USAGE_FUNCTIONS usage_fifo\"\n\n\nfifo_cmd()\n{\n\tmdbg \"entering fifo_cmd $*\"\n\t\n\tif [ \"$#\" -lt 1 ]; then\n\t\tmerr \"fifo_cmd must take at least command name as parameter\"\n\t\texit 1\n\tfi\n\tname=kamailio_receiver_$$\n\tpath=$CHROOT_DIR/tmp/$name\n\t# delete existing fifo file with same name\n\tif test -p $path; then\n\t\trm -f $path\n\tfi\n\tif [ ! -w $FIFOPATH ]; then\n\t\tmerr \"Error opening Kamailio's FIFO $FIFOPATH\"\n\t\tmerr \"Make sure you have the line 'modparam(\\\"mi_fifo\\\", \\\"fifo_name\\\", \\\"$FIFOPATH\\\")' in your config\"\n\t\tmerr \"and also have loaded the mi_fifo module.\"\n\t\tif [ ! -z $CHROOT_DIR ]; then\n\t\t\tmerr \"[chrooted environment] Check that $FIFOPATH is symlinked to ${CHROOT_DIR}${FIFOPATH}\"\n\t\tfi\n\t\texit 2\n\tfi\n\tif ! test -p $path; then\n\t\tmkfifo $path\n\t\tif [ $? -ne 0 ] ; then\n\t\t\tmerr \"error opening read fifo $path\"\n\t\t\texit 3\n\t\tfi\n\t\tchmod a+w $path\n\tfi\n\n\t# construct the command now\n\tCMD=\":$1:$name\\n\";\n\tshift\n\twhile [ -n \"$1\" ] ; do\n\t\tCMD=\"${CMD}${1}\\n\"\n\t\tshift\n\tdone\n\tCMD=\"${CMD}\\n\"\n\n\ttrap \"rm -f $path; kill 0\" 2\n\n\t# start reader now so that it is ready for replies\n\t# immediately after a request was sent out\n\tcat < $path | filter_fl &\n\n\t# issue FIFO request (printf taken to deal with \\n)\n\tprintf \"$CMD\" > $FIFOPATH\n\n\t# wait for the reader to complete\n\twait\n\trm $path\n\n\tmdbg \"FIFO command was:\\n$CMD\"\n}\n\n\nCTLCMD=fifo_cmd\n\nfifo_kamailio_monitor() {\n\tname=kamailio_receiver_$$\n\tpath=$CHROOT_DIR/tmp/$name\n\t# delete existing fifo file with same name\n\tif test -p $path; then\n\t\trm -f $path\n\tfi\n\tif [ ! -w $FIFOPATH ]; then\n\t\tmerr \"Error opening Kamailio's FIFO $FIFOPATH\"\n\t\tmerr \"Make sure you have the line 'modparam(\\\"mi_fifo\\\", \\\"fifo_name\\\", \\\"$FIFOPATH\\\")' in your config\"\n\t\tmerr \"and also have loaded the mi_fifo module.\"\n\t\texit 1\n\tfi\n\tif ! test -p $path; then\n\t\tmkfifo $path\n\t\tif [ $? -ne 0 ] ; then\n\t\t\tmerr \"monitor - error opening read fifo $path\"\n\t\t\texit 1\n\t\tfi\n\t\tchmod a+w $path\n\tfi\n\ttrap \"rm $path;  clear; echo monitor ^C-ed; exit 1\" 2\n\tattempt=0\n\tif [ \"$2\" = \"\" ]; then\n\t    loops=-1;\n\telse\n\t    loops=$2;\n\tfi\n\tclear\n\twhile [ $loops -ne $attempt ] ; do\n\t\tattempt=`$EXPR $attempt + 1`\n\t\t#clear\n\t\ttput clear\n\t\t\n\t\t# print_stats $name $path $attempt\n\t\tmecho \"[cycle #: $attempt; if constant make sure server lives]\"\n\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:version:$name\n\nEOF\n\t\twait\n\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH << EOF\n:uptime:$name\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"Transaction Statistics: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nUAS_transactions\nUAC_transactions\ninuse_transactions\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"Stateless Server Statistics: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nsent_replies\nsent_err_replies\nreceived_ACKs\n\nEOF\n\t\twait\n\t\techo\n\n\t\tmecho \"UsrLoc Stats: \"\n\t\tcat < $path | filter_fl &\n\t\tcat > $FIFOPATH <<EOF\n:get_statistics:$name\nusrloc:\n\nEOF\n\t\twait\n\t\t\n\t\tif [ $loops -ne $attempt ] ; then\n\t\t\tsleep $WATCH_PERIOD\n\t\tfi\n\tdone\n\trm $path\n\texit 0\n}\n\nKAMAILIO_MONITOR=fifo_kamailio_monitor\n\n", "# $Id$\n#\n# The Kamailio configuration file for the control tools.\n#\n# Here you can set variables used in the kamctl and kamdbctl setup\n# scripts. Per default all variables here are commented out, the control tools\n# will use their internal default values.\n\n## your SIP domain\n# SIP_DOMAIN=kamailio.org\n\n## chrooted directory\n# $CHROOT_DIR=\"/path/to/chrooted/directory\"\n\n## database type: MYSQL, PGSQL, ORACLE, DB_BERKELEY, DBTEXT, or SQLITE\n# by default none is loaded\n#\n# If you want to setup a database with kamdbctl, you must at least specify\n# this parameter.\n# DBENGINE=MYSQL\n\n## database host\n# DBHOST=localhost\n\n## database name (for ORACLE this is TNS name)\n# DBNAME=kamailio\n\n# database path used by dbtext, db_berkeley or sqlite\n# DB_PATH=\"/usr/local/etc/kamailio/dbtext\"\n\n## database read/write user\n# DBRWUSER=\"kamailio\"\n\n## password for database read/write user\n# DBRWPW=\"kamailiorw\"\n\n## database read only user\n# DBROUSER=\"kamailioro\"\n\n## password for database read only user\n# DBROPW=\"kamailioro\"\n\n## database access host (from where is kamctl used)\n# DBACCESSHOST=192.168.0.1\n\n## database super user (for ORACLE this is 'scheme-creator' user)\n# DBROOTUSER=\"root\"\n\n# user name column\n# USERCOL=\"username\"\n\n\n# SQL definitions\n# If you change this definitions here, then you must change them \n# in db/schema/entities.xml too.\n# FIXME\n\n# FOREVER=\"2030-05-28 21:32:15\"\n# DEFAULT_Q=\"1.0\"\n\n\n# Program to calculate a message-digest fingerprint \n# MD5=\"md5sum\"\n\n# awk tool\n# AWK=\"awk\"\n\n# gdb tool\n# GDB=\"gdb\"\n\n# If you use a system with a grep and egrep that is not 100% gnu grep compatible,\n# e.g. solaris, install the gnu grep (ggrep) and specify this below.\n#\n# grep tool\n# GREP=\"grep\"\n\n# egrep tool\n# EGREP=\"egrep\"\n\n# sed tool\n# SED=\"sed\"\n\n# tail tool\n# LAST_LINE=\"tail -n 1\"\n\n# expr tool\n# EXPR=\"expr\"\n\n\n# Describe what additional tables to install. Valid values for the variables\n# below are yes/no/ask. With ask (default) it will interactively ask the user\n# for an answer, while yes/no allow for automated, unassisted installs.\n#\n\n# If to install tables for the modules in the EXTRA_MODULES variable.\n# INSTALL_EXTRA_TABLES=ask\n\n# If to install presence related tables.\n# INSTALL_PRESENCE_TABLES=ask\n\n# If to install uid modules related tables.\n# INSTALL_DBUID_TABLES=ask\n\n# Define what module tables should be installed.\n# If you use the postgres database and want to change the installed tables, then you\n# must also adjust the STANDARD_TABLES or EXTRA_TABLES variable accordingly in the\n# kamdbctl.base script.\n\n# Kamailio standard modules\n# STANDARD_MODULES=\"standard acc lcr domain group permissions registrar usrloc msilo\n#                   alias_db uri_db speeddial avpops auth_db pdt dialog dispatcher\n#                   dialplan\"\n\n# Kamailio extra modules\n# EXTRA_MODULES=\"imc cpl siptrace domainpolicy carrierroute userblacklist htable purple sca\"\n\n\n## type of aliases used: DB - database aliases; UL - usrloc aliases\n## - default: none\n# ALIASES_TYPE=\"DB\"\n\n## control engine: FIFO or UNIXSOCK\n## - default FIFO\n# CTLENGINE=\"FIFO\"\n\n## path to FIFO file\n# FIFOPATH=\"/var/run/kamailio/kamailio_fifo\"\n\n## check ACL names; default on (1); off (0)\n# VERIFY_ACL=1\n\n## ACL names - if VERIFY_ACL is set, only the ACL names from below list\n## are accepted\n# ACL_GROUPS=\"local ld int voicemail free-pstn\"\n\n## verbose - debug purposes - default '0'\n# VERBOSE=1\n\n## do (1) or don't (0) store plaintext passwords\n## in the subscriber table - default '1'\n# STORE_PLAINTEXT_PW=0\n\n## Kamailio START Options\n## PID file path - default is: /var/run/kamailio.pid\n# PID_FILE=/var/run/kamailio/kamailio.pid\n\n## Extra start options - default is: not set\n# example: start Kamailio with 64MB share memory: STARTOPTIONS=\"-m 64\"\n# STARTOPTIONS=\n"], "filenames": ["etc/kamailio-basic.cfg", "etc/kamailio-oob.cfg", "etc/kamailio.cfg", "modules/ctl/ctl_defaults.h", "utils/kamctl/kamctl.fifo", "utils/kamctl/kamctlrc"], "buggy_code_start_loc": [194, 318, 291, 7, 28, 127], "buggy_code_end_loc": [196, 320, 293, 11, 29, 146], "fixing_code_start_loc": [194, 318, 291, 7, 28, 127], "fixing_code_end_loc": [198, 322, 295, 11, 29, 146], "type": "CWE-264", "message": "The kamcmd administrative utility and default configuration in kamailio before 4.3.0 use /tmp/kamailio_ctl.", "other": {"cve": {"id": "CVE-2015-1590", "sourceIdentifier": "cve@mitre.org", "published": "2017-09-07T14:29:00.180", "lastModified": "2017-09-13T18:03:38.427", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The kamcmd administrative utility and default configuration in kamailio before 4.3.0 use /tmp/kamailio_ctl."}, {"lang": "es", "value": "La utilidad administrativa kamcmd y la configuraci\u00f3n por defecto en kamailio en versiones anteriores a la 4.3.0 utilizan /tmp/kamailio_ctl."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kamailio:kamailio:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.2.8", "matchCriteriaId": "4EB06F9C-DCA2-4AB8-AE69-77707892E847"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2015/02/12/7", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Patch", "Third Party Advisory"]}, {"url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=775681", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/kamailio/kamailio/blob/4.3.0/ChangeLog#L2038", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/kamailio/kamailio/commit/06177b12936146d48378cc5f6c6e1b157ebd519b", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/kamailio/kamailio/issues/48", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kamailio/kamailio/commit/06177b12936146d48378cc5f6c6e1b157ebd519b"}}