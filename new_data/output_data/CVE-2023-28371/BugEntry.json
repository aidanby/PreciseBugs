{"buggy_code": ["/*\n * Stellarium\n * Copyright (C) 2014 Alexander Wolf\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335, USA.\n */\n\n#include <QDir>\n#include <QDebug>\n#include <QSettings>\n#include \"StelScriptOutput.hpp\"\n#include \"StelApp.hpp\"\n\n// Init static variables.\nQFile StelScriptOutput::outputFile;\nQString StelScriptOutput::outputText;\n\nvoid StelScriptOutput::init(const QString& outputFilePath)\n{\n\toutputFile.setFileName(outputFilePath);\n\tif (!outputFile.open(QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text | QIODevice::Unbuffered))\n\t\tqDebug() << \"ERROR: Cannot open file\" << outputFilePath;\n}\n\nvoid StelScriptOutput::deinit()\n{\n\toutputFile.close();\n}\n\nvoid StelScriptOutput::writeLog(QString msg)\n{\n\tmsg += \"\\n\";\n\toutputFile.write(qPrintable(msg), msg.size());\n\toutputText += msg;\n}\n\nvoid StelScriptOutput::reset(void)\n{\n\toutputFile.resize(0);\n\toutputFile.reset();\n\toutputText.clear();\n}\n\nvoid StelScriptOutput::saveOutputAs(const QString &name)\n{\n\tQFile asFile;\n\tQFileInfo outputInfo(outputFile);\n\tQDir dir=outputInfo.dir(); // will hold complete dirname\n\tQFileInfo newFileNameInfo(name);\n\n\tbool okToSaveToAbsolutePath=StelApp::getInstance().getSettings()->value(\"scripts/flag_script_allow_write_absolute_path\", false).toBool();\n\n\tif (!okToSaveToAbsolutePath && (newFileNameInfo.isAbsolute()))\n\t{\n\t\tqWarning() << \"SCRIPTING CONFIGURATION ISSUE: You are trying to save to an absolute pathname.\";\n\t\tqWarning() << \"  To enable this, edit config.ini and set [scripts]/flag_script_allow_write_absolute_path=true\";\n\t\tasFile.setFileName(dir.absolutePath() + \"/\" + newFileNameInfo.fileName());\n\t\tqWarning() << \"  Storing to \" << asFile.fileName() << \" instead\";\n\t}\n\telse if (okToSaveToAbsolutePath && (newFileNameInfo.isAbsolute()))\n\t{\n\t\tasFile.setFileName(name);\n\t}\n\telse\n\t{\n\t\tasFile.setFileName(dir.absolutePath() + \"/\" + name);\n\t}\n\n\tif (!asFile.open(QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text | QIODevice::Unbuffered))\n\t{\n\t\tqDebug() << \"ERROR: Cannot open file\" << asFile.fileName();\n\t\treturn;\n\t}\n\tqDebug() << \"saving copy of output.txt to \" << asFile.fileName();\n\tasFile.write(qPrintable(outputText), outputText.size());\n\tasFile.close();\n}\n", "/*\n * Stellarium\n * Copyright (C) 2014 Alexander Wolf\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335, USA.\n */\n\n#ifndef STELSCRIPTOUTPUT_HPP\n#define STELSCRIPTOUTPUT_HPP\n\n#include <QString>\n#include <QFile>\n\n//! @class StelScriptOutput\n//! Class with only static members used to manage output for Stellarium scripts.\nclass StelScriptOutput\n{\npublic:\n\t//! Create and initialize the log file.\n\t//! Prepend system information before any output.\n\tstatic void init(const QString& outputFilePath);\n\n\t//! Deinitialize the output file.\n\t//! Must be called after init() was called.\n\tstatic void deinit();\n\n\t//! Write the message plus a newline to the output file at $USERDIR/output.txt.\n\t//! @param msg message to write.\n\tstatic void writeLog(QString msg);\n\n\t//! Reset file, i.e., empty it. This may be useful to have repetitive output which may be read by other programs.\n\tstatic void reset(void);\n\n\t//! Save to new file, re-create output file.\n\t//! This allows reading of results on Windows, where otherwise reading programs cannot access files opened for writing by Stellarium.\n\t//! @param name new filename. If this is not an absolute path, it will be created in the same directory as output.txt\n\t//! @note For storing to absolute path names, set [scripts]/flag_script_allow_write_absolute_path=true.\n\t//! Normally you would call saveOutputAs(...), then reset().\n\tstatic void saveOutputAs(const QString& name);\n\nprivate:\n\tstatic QFile outputFile;\n\tstatic QString outputText;\n};\n\n#endif // STELSCRIPTOUTPUT_HPP\n"], "fixing_code": ["/*\n * Stellarium\n * Copyright (C) 2014 Alexander Wolf\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335, USA.\n */\n\n#include <QDir>\n#include <QDebug>\n#include <QSettings>\n#include \"StelScriptOutput.hpp\"\n#include \"StelApp.hpp\"\n\n// Init static variables.\nQFile StelScriptOutput::outputFile;\nQString StelScriptOutput::outputText;\n\nvoid StelScriptOutput::init(const QString& outputFilePath)\n{\n\toutputFile.setFileName(outputFilePath);\n\tif (!outputFile.open(QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text | QIODevice::Unbuffered))\n\t\tqDebug() << \"ERROR: Cannot open file\" << outputFilePath;\n}\n\nvoid StelScriptOutput::deinit()\n{\n\toutputFile.close();\n}\n\nvoid StelScriptOutput::writeLog(QString msg)\n{\n\tmsg += \"\\n\";\n\toutputFile.write(qPrintable(msg), msg.size());\n\toutputText += msg;\n}\n\nvoid StelScriptOutput::reset(void)\n{\n\toutputFile.resize(0);\n\toutputFile.reset();\n\toutputText.clear();\n}\n\nvoid StelScriptOutput::saveOutputAs(const QString &name)\n{\n\tQFile asFile;\n\tconst QFileInfo outputInfo(outputFile);\n\tconst QDir dir=outputInfo.dir(); // will hold complete dirname\n\tconst QFileInfo newFileNameInfo(name);\n\n\tconst bool okToSaveToAbsolutePath=StelApp::getInstance().getSettings()->value(\"scripts/flag_script_allow_write_absolute_path\", false).toBool();\n\n\tif (!okToSaveToAbsolutePath && ((newFileNameInfo.isAbsolute() || (name.contains(\"..\"))))) // The last condition may include dangerous/malicious paths\n\t{\n\t\tqWarning() << \"SCRIPTING CONFIGURATION ISSUE: You are trying to save to an absolute pathname or move up in directories.\";\n\t\tqWarning() << \"  To enable this, edit config.ini and set [scripts]/flag_script_allow_write_absolute_path=true\";\n\t\tasFile.setFileName(dir.absolutePath() + \"/\" + newFileNameInfo.fileName());\n\t\tqWarning() << \"  Storing to \" << asFile.fileName() << \" instead\";\n\t}\n\telse if (okToSaveToAbsolutePath && (newFileNameInfo.isAbsolute()))\n\t{\n\t\tasFile.setFileName(name);\n\t}\n\telse\n\t{\n\t\tasFile.setFileName(dir.absolutePath() + \"/\" + name);\n\t}\n\n\tif (!asFile.open(QIODevice::WriteOnly | QIODevice::Truncate | QIODevice::Text | QIODevice::Unbuffered))\n\t{\n\t\tqDebug() << \"ERROR: Cannot open file\" << asFile.fileName();\n\t\treturn;\n\t}\n\tqDebug() << \"saving copy of output.txt to \" << asFile.fileName();\n\tasFile.write(qPrintable(outputText), outputText.size());\n\tasFile.close();\n}\n", "/*\n * Stellarium\n * Copyright (C) 2014 Alexander Wolf\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Suite 500, Boston, MA  02110-1335, USA.\n */\n\n#ifndef STELSCRIPTOUTPUT_HPP\n#define STELSCRIPTOUTPUT_HPP\n\n#include <QString>\n#include <QFile>\n\n//! @class StelScriptOutput\n//! Class with only static members used to manage output for Stellarium scripts.\nclass StelScriptOutput\n{\npublic:\n\t//! Create and initialize the log file.\n\t//! Prepend system information before any output.\n\tstatic void init(const QString& outputFilePath);\n\n\t//! Deinitialize the output file.\n\t//! Must be called after init() was called.\n\tstatic void deinit();\n\n\t//! Write the message plus a newline to the output file at $USERDIR/output.txt.\n\t//! @param msg message to write.\n\tstatic void writeLog(QString msg);\n\n\t//! Reset file, i.e., empty it. This may be useful to have repetitive output which may be read by other programs.\n\t//! Normally you would call saveOutputAs(...), then reset().\n\tstatic void reset(void);\n\n\t//! Save to new file, re-create output file.\n\t//! This allows reading of results on Windows, where otherwise reading programs cannot access files opened for writing by Stellarium.\n\t//! @param name new filename. If this is not an absolute path, it will be created in the same directory as output.txt\n\t//! @note For storing to absolute path names or paths containing directory navigation (\"..\"), set [scripts]/flag_script_allow_write_absolute_path=true.\n\t//! Normally you would call saveOutputAs(...), then reset().\n\tstatic void saveOutputAs(const QString& name);\n\nprivate:\n\tstatic QFile outputFile;\n\tstatic QString outputText;\n};\n\n#endif // STELSCRIPTOUTPUT_HPP\n"], "filenames": ["src/scripting/StelScriptOutput.cpp", "src/scripting/StelScriptOutput.hpp"], "buggy_code_start_loc": [59, 43], "buggy_code_end_loc": [68, 50], "fixing_code_start_loc": [59, 44], "fixing_code_end_loc": [68, 51], "type": "CWE-22", "message": "In Stellarium through 1.2, attackers can write to files that are typically unintended, such as ones with absolute pathnames or .. directory traversal.", "other": {"cve": {"id": "CVE-2023-28371", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-15T04:15:11.603", "lastModified": "2023-03-29T05:15:07.710", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "In Stellarium through 1.2, attackers can write to files that are typically unintended, such as ones with absolute pathnames or .. directory traversal."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:stellarium:stellarium:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2", "matchCriteriaId": "73EA0C2F-54BC-40D1-B0AA-4E0DA399B8A1"}]}]}], "references": [{"url": "https://github.com/Stellarium/stellarium/commit/1261f74dc4aa6bbd01ab514343424097f8cf46b7", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/Stellarium/stellarium/commit/787a894897b7872ae96e6f5804a182210edd5c78", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/Stellarium/stellarium/commit/eba61df3b38605befcb43687a4c0a159dbc0c5cb", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KG6UNRAOYZJSMIUELY3MMJ5J6LIUZXLT/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/REDZB5J7WDN2P3NYWFO2NNJXSTOFUUKM/", "source": "cve@mitre.org"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YQ4ZGY5MDDHBEOQTD4IIA2RFID3ATPXA/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/Stellarium/stellarium/commit/1261f74dc4aa6bbd01ab514343424097f8cf46b7"}}