{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// An account in Recurly.\n    ///\n    /// https://dev.recurly.com/docs/get-account\n    /// </summary>\n    public class Account : RecurlyEntity\n    {\n\n        // The currently valid account states\n        // Corrected to allow multiple states, per https://dev.recurly.com/docs/get-account\n        [Flags]\n        public enum AccountState : short\n        {\n            Closed = 1,\n            Active = 2,\n            PastDue = 4\n        }\n\n        /// <summary>\n        /// Account Code or unique ID for the account in Recurly\n        /// </summary>\n        public string AccountCode { get; private set; }\n        public AccountState State { get; private set; }\n        public string Username { get; set; }\n        public string Email { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string CompanyName { get; set; }\n        public string VatNumber { get; set; }\n        public bool? TaxExempt { get; set; }\n        public string EntityUseCode { get; set; }\n        public string AcceptLanguage { get; set; }\n        public string CcEmails { get; set; }\n        public string HostedLoginToken { get; private set; }\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n        public bool VatLocationValid { get; private set; }\n        public Address Address { get; set; }\n        public bool HasLiveSubscription { get; private set; }\n        public bool HasActiveSubscription { get; private set; }\n        public bool HasFutureSubscription { get; private set; }\n        public bool HasCanceledSubscription { get; private set; }\n        public bool HasPastDueInvoice { get; private set; }\n\n        private BillingInfo _billingInfo;\n\n        public BillingInfo BillingInfo\n        {\n            get\n            {\n                if (null != _billingInfo)\n                    return _billingInfo;\n\n                try\n                {\n                    _billingInfo = BillingInfo.Get(AccountCode);\n                }\n                catch (NotFoundException)\n                {\n                    _billingInfo = null;\n                }\n\n                return _billingInfo;\n            }\n            set\n            {\n                _billingInfo = value;\n            }\n        }\n\n        private AccountBalance _balance;\n\n        public AccountBalance Balance\n        {\n            get\n            {\n                if (_balance != null)\n                    return _balance;\n\n                try\n                {\n                    _balance = AccountBalance.Get(AccountCode);\n                }\n                catch (NotFoundException)\n                {\n                    _balance = null;\n                }\n\n                return _balance;\n            }\n            set { _balance = value; }\n        }\n\n        /// <summary>\n        /// List of shipping addresses\n        /// </summary>\n        public List<ShippingAddress> ShippingAddresses\n        {\n            get { return _shippingAddresses ?? (_shippingAddresses = new List<ShippingAddress>()); }\n            set { _shippingAddresses = value; }\n        }\n        private List<ShippingAddress> _shippingAddresses;\n\n        internal const string UrlPrefix = \"/accounts/\";\n\n        public Account(string accountCode)\n        {\n            AccountCode = accountCode;\n        }\n\n        /// <summary>\n        /// Creates a new account with required billing information\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"billingInfo\"></param>\n        public Account(string accountCode, BillingInfo billingInfo)\n        {\n            AccountCode = accountCode;\n            _billingInfo = billingInfo;\n        }\n\n        internal Account(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        internal Account(XmlTextReader xmlReader, string xmlName)\n        {\n            ReadXml(xmlReader, xmlName);\n        }\n\n        internal Account()\n        { }\n\n        /// <summary>\n        /// Delete an account's billing info.\n        /// </summary>\n        public void DeleteBillingInfo()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/billing_info\");\n            _billingInfo = null;\n        }\n\n        /// <summary>\n        /// Create a new account in Recurly\n        /// </summary>\n        public void Create()\n        {\n            // POST /accounts\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post, UrlPrefix, WriteXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing account in Recurly\n        /// </summary>\n        public void Update()\n        {\n            // PUT /accounts/<account code>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(AccountCode),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Close the account and cancel any active subscriptions (if there is one).\n        /// Note: This does not create a refund for any time remaining.\n        /// </summary>\n        public void Close()\n        {\n            Accounts.Close(AccountCode);\n            if (State.Is(AccountState.Active))\n                State ^= AccountState.Active;\n            State |= AccountState.Closed;\n        }\n\n        /// <summary>\n        /// Reopen an existing account in Recurly\n        /// </summary>\n        public void Reopen()\n        {\n            Accounts.Reopen(AccountCode);\n            if (State.Is(AccountState.Closed))\n                State ^= AccountState.Closed;\n            State |= AccountState.Active;\n        }\n\n        /// <summary>\n        /// Posts pending charges on an account\n        /// </summary>\n        public Invoice InvoicePendingCharges(Invoice invoice = null)\n        {\n            var i = invoice ?? new Invoice();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/invoices\",\n                i.WriteXml,\n                i.ReadXml);\n\n            return i;\n        }\n\n        /// <summary>\n        /// Previews a new invoice for the pending charges on an account\n        /// </summary>\n        public Invoice PreviewInvoicePendingCharges(Invoice invoice = null)\n        {\n            var i = invoice ?? new Invoice();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/invoices/preview\",\n                i.WriteXml,\n                i.ReadXml);\n\n            return i;\n        }\n\n        /// <summary>\n        /// Gets all adjustments for this account, by type\n        /// </summary>\n        /// <param name=\"type\">Adjustment type to retrieve. Optional, default: All.</param>\n        /// <param name=\"state\">State of the Adjustments to retrieve. Optional, default: Any.</param>\n        /// <returns></returns>\n        public RecurlyList<Adjustment> GetAdjustments(Adjustment.AdjustmentType type = Adjustment.AdjustmentType.All,\n            Adjustment.AdjustmentState state = Adjustment.AdjustmentState.Any)\n        {\n            var adjustments = new AdjustmentList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/adjustments/\"\n                + Build.QueryStringWith(Adjustment.AdjustmentState.Any == state ? \"\" : \"state=\" + state.ToString().EnumNameToTransportCase())\n                .AndWith(Adjustment.AdjustmentType.All == type ? \"\" : \"type=\" + type.ToString().EnumNameToTransportCase())\n                , adjustments.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : adjustments;\n        }\n\n        /// <summary>\n        /// Gets all shipping addresses\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<ShippingAddress> GetShippingAddresses()\n        {\n            var shippingAddresses = new ShippingAddressList(this);\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/shipping_addresses/\",\n                shippingAddresses.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : shippingAddresses;\n        }\n\n        /// <summary>\n        /// Returns a list of invoices for this account\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<Invoice> GetInvoices()\n        {\n            return Invoices.List(AccountCode);\n        }\n\n        /// <summary>\n        /// Returns a list of subscriptions for this account\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <returns></returns>\n        public RecurlyList<Subscription> GetSubscriptions(Subscription.SubscriptionState state = Subscription.SubscriptionState.All)\n        {\n            return new SubscriptionList(UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/subscriptions/\"\n                + Build.QueryStringWith(state.Equals(Subscription.SubscriptionState.All) ? \"\" : \"state=\" + state.ToString().EnumNameToTransportCase()));\n        }\n\n        /// <summary>\n        /// Returns a list of transactions for this account, by transaction type\n        /// </summary>\n        /// <param name=\"state\">Transactions of this state will be retrieved. Optional, default: All.</param>\n        /// <param name=\"type\">Transactions of this type will be retrieved. Optional, default: All.</param>\n        /// <returns></returns>\n        public RecurlyList<Transaction> GetTransactions(TransactionList.TransactionState state = TransactionList.TransactionState.All,\n            TransactionList.TransactionType type = TransactionList.TransactionType.All)\n        {\n            return new TransactionList(UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/transactions/\"\n                 + Build.QueryStringWith(state != TransactionList.TransactionState.All ? \"state=\" + state.ToString().EnumNameToTransportCase() : \"\")\n                   .AndWith(type != TransactionList.TransactionType.All ? \"type=\" + type.ToString().EnumNameToTransportCase() : \"\"));\n        }\n\n        public RecurlyList<Note> GetNotes()\n        {\n            return new NoteList(UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/notes/\");\n        }\n\n        /// <summary>\n        /// Returns a new adjustment (credit or charge) for this account\n        /// </summary>\n        /// <param name=\"currency\">Currency, 3-letter ISO code.</param>\n        /// <param name=\"unitAmountInCents\">Positive amount for a charge, negative amount for a credit. Max 10,000,000.</param>\n        /// <param name=\"description\">Description of the adjustment for the invoice.</param>\n        /// <param name=\"quantity\">Quantity, defaults to 1.</param>\n        /// <param name=\"accountingCode\">Accounting code. Max of 20 characters.</param>\n        /// <param name=\"taxExempt\"></param>\n        /// <returns></returns>\n        public Adjustment NewAdjustment(string currency, int unitAmountInCents, string description = \"\", int quantity = 1, string accountingCode = \"\", bool taxExempt = false)\n        {\n            // TODO All of the properties should be settable\n            return new Adjustment(AccountCode, description, currency, unitAmountInCents, quantity, accountingCode, taxExempt);\n        }\n\n        /// <summary>\n        /// Redeems a coupon on this account\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"currency\"></param>\n        /// <returns></returns>\n        public CouponRedemption RedeemCoupon(string couponCode, string currency, string subscriptionUuid = null)\n        {\n            return CouponRedemption.Redeem(AccountCode, couponCode, currency, subscriptionUuid);\n        }\n\n        /// <summary>\n        /// Returns all active coupon redemptions on this account\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<CouponRedemption> GetActiveRedemptions()\n        {\n            var redemptions = new CouponRedemptionList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + \"/redemptions\",\n                redemptions.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : redemptions;\n        }\n\n        /// <summary>\n        /// Returns the first active coupon redemptions on this account\n        /// </summary>\n        /// <returns></returns>\n        public CouponRedemption GetActiveRedemption()\n        {\n            var activeRedemptions = GetActiveRedemptions();\n\n            if (activeRedemptions == null || activeRedemptions.Count <= 0)\n            {\n                return null;\n            }\n\n            return activeRedemptions.ToArray()[0];\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            ReadXml(reader, \"account\");\n        }\n\n        internal void ReadXml(XmlTextReader reader, string xmlName)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == xmlName && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"account_code\":\n                        AccountCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        // TODO investigate in case of incoming data representing multiple states, as https://dev.recurly.com/docs/get-account says is possible\n                        State = reader.ReadElementContentAsString().ParseAsEnum<AccountState>();\n                        break;\n\n                    case \"username\":\n                        Username = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"email\":\n                        Email = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"first_name\":\n                        FirstName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"last_name\":\n                        LastName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"company_name\":\n                        CompanyName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_number\":\n                        VatNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"entity_use_code\":\n                        EntityUseCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accept_language\":\n                        AcceptLanguage = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"cc_emails\":\n                        CcEmails = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"hosted_login_token\":\n                        HostedLoginToken = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n\n                    case \"vat_location_valid\":\n                        if (reader.GetAttribute(\"nil\") == null)\n                        {\n                            VatLocationValid = reader.ReadElementContentAsBoolean();\n                        }\n                        break;\n\n                    case \"has_live_subscription\":\n                        bool a;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out a))\n                            HasLiveSubscription = a;\n                        break;\n\n                    case \"has_active_subscription\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            HasActiveSubscription = b;\n                        break;\n\n                    case \"has_future_subscription\":\n                        bool c;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out c))\n                            HasFutureSubscription = c;\n                        break;\n\n                    case \"has_canceled_subscription\":\n                        bool d;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out d))\n                            HasCanceledSubscription = d;\n                        break;\n\n                    case \"has_past_due_invoice\":\n                        bool e;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out e))\n                            HasPastDueInvoice = e;\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, \"account\");\n        }\n\n        internal void WriteXml(XmlTextWriter xmlWriter, string xmlName)\n        {\n            xmlWriter.WriteStartElement(xmlName); // Start: account\n\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteStringIfValid(\"username\", Username);\n            xmlWriter.WriteStringIfValid(\"email\", Email);\n            xmlWriter.WriteStringIfValid(\"first_name\", FirstName);\n            xmlWriter.WriteStringIfValid(\"last_name\", LastName);\n            xmlWriter.WriteStringIfValid(\"company_name\", CompanyName);\n            xmlWriter.WriteStringIfValid(\"accept_language\", AcceptLanguage);\n            xmlWriter.WriteStringIfValid(\"vat_number\", VatNumber);\n            xmlWriter.WriteStringIfValid(\"entity_use_code\", EntityUseCode);\n            xmlWriter.WriteStringIfValid(\"cc_emails\", CcEmails);\n\n            xmlWriter.WriteIfCollectionHasAny(\"shipping_addresses\", ShippingAddresses);\n\n            if (TaxExempt.HasValue)\n                xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.Value.AsString());\n\n            if (_billingInfo != null)\n                _billingInfo.WriteXml(xmlWriter);\n\n            if (Address != null)\n                Address.WriteXml(xmlWriter);\n\n            xmlWriter.WriteEndElement(); // End: account\n        }\n        /// <summary>\n        /// This serializer is used for redeeming a gift card on\n        /// this account.\n        /// </summary>\n        /// <param name=\"xmlWriter\"></param>\n        internal void WriteGiftCardRedeemXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"recipient_account\"); // Start: recipient_account\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteEndElement(); // End: recipient_account\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account: \" + AccountCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var a = obj as Account;\n            return a != null && Equals(a);\n        }\n\n        public bool Equals(Account account)\n        {\n            return account != null && AccountCode == account.AccountCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return AccountCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Accounts\n    {\n        internal const string UrlPrefix = \"/accounts/\";\n\n        /// <summary>\n        /// Lookup a Recurly account\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <returns></returns>\n        public static Account Get(string accountCode)\n        {\n            var account = new Account();\n            // GET /accounts/<account code>\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(accountCode),\n                account.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : account;\n        }\n\n        /// <summary>\n        /// Close the account and cancel any active subscriptions (if there is one).\n        /// Note: This does not create a refund for any time remaining.\n        /// </summary>\n        /// <param name=\"accountCode\">Account Code</param>\n        public static void Close(string accountCode)\n        {\n            // DELETE /accounts/<account code>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                Account.UrlPrefix + Uri.EscapeUriString(accountCode));\n        }\n\n        /// <summary>\n        /// Reopen an existing account in recurly.\n        /// </summary>\n        /// <param name=\"accountCode\">Account Code</param>\n        public static void Reopen(string accountCode)\n        {\n            // PUT /accounts/<account code>/reopen\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                Account.UrlPrefix + Uri.EscapeUriString(accountCode) + \"/reopen\");\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <returns></returns>\n        public static RecurlyList<Account> List(Account.AccountState state = Account.AccountState.Active)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Account> List(Account.AccountState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            return new AccountList(Account.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class AccountBalance : RecurlyEntity\n    {\n        public bool PastDue { get; internal set; }\n        public Dictionary<string, int> BalanceInCents = new Dictionary<string, int>();\n        private const string UrlPrefix = \"/accounts/\";\n\n        public static AccountBalance Get(string accountCode)\n        {\n            var accountBalance = new AccountBalance();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(accountCode) + \"/balance\", accountBalance.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : accountBalance;\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"account_balance\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"past_due\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            PastDue = b;\n\n                        break;\n                    case \"balance_in_cents\":\n                        while (reader.Read())\n                        {\n                            if (reader.Name == \"balance_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                                break;\n\n                            if (reader.NodeType == XmlNodeType.Element)\n                            {\n                                BalanceInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class AddOn : RecurlyEntity\n    {\n        public enum Type\n        {\n            Fixed,\n            Usage\n        }\n\n        public string PlanCode { get; set; }\n        public string AddOnCode { get; set; }\n        public string Name { get; set; }\n        public int DefaultQuantity { get; set; }\n        public bool? DisplayQuantityOnHostedPage { get; set; }\n        public string TaxCode { get; set; }\n        public bool? Optional { get; set; }\n        public string AccountingCode { get; set; }\n        public long? MeasuredUnitId { get; set; }\n        public Type? AddOnType { get; set; }\n        public Usage.Type? UsageType { get; set; }\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n\n        private Dictionary<string, int> _unitAmountInCents;\n        /// <summary>\n        /// A dictionary of currencies and values for the add-on amount\n        /// </summary>\n        public Dictionary<string, int> UnitAmountInCents\n        {\n            get { return _unitAmountInCents ?? (_unitAmountInCents = new Dictionary<string, int>()); }\n        }\n\n        private const string UrlPrefix = \"/plans/\";\n        private const string UrlPostfix = \"/add_ons/\";\n\n        #region Constructors\n        internal AddOn()\n        {\n        }\n\n        internal AddOn(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        internal AddOn(string planCode, string addOnCode, string name)\n        {\n            PlanCode = planCode;\n            AddOnCode = addOnCode;\n            Name = name;\n        }\n\n        #endregion\n\n        /// <summary>\n        /// Creates an addon\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeUriString(PlanCode) + UrlPostfix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing add on in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(PlanCode) + UrlPostfix + Uri.EscapeUriString(AddOnCode),\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Deletes this add on, making it inactive\n        /// </summary>\n        public void Delete()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeUriString(PlanCode) + UrlPostfix + Uri.EscapeUriString(AddOnCode));\n        }\n\n\n        #region Read and Write XML documents\n\n        internal void ReadXmlUnitAmount(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"unit_amount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    UnitAmountInCents.Remove(reader.Name);\n                    UnitAmountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"add_on\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"add_on_code\":\n                        AddOnCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"display_quantity_on_hosted_page\":\n                        DisplayQuantityOnHostedPage = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"default_quantity\":\n                        DefaultQuantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"optional\":\n                        Optional = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        ReadXmlUnitAmount(reader);\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"add_on_type\":\n                        AddOnType = reader.ReadElementContentAsString().ParseAsEnum<Type>();\n                        break;\n\n                    case \"usage_type\":\n                        UsageType = reader.ReadElementContentAsString().ParseAsEnum<Usage.Type>();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"add_on\");\n\n            xmlWriter.WriteElementString(\"add_on_code\", AddOnCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"default_quantity\", DefaultQuantity.AsString());\n            xmlWriter.WriteElementString(\"accounting_code\", AccountingCode);\n\n            if (AddOnType.HasValue)\n                xmlWriter.WriteElementString(\"add_on_type\", AddOnType.Value.ToString().EnumNameToTransportCase());\n\n            if (UsageType.HasValue)\n                xmlWriter.WriteElementString(\"usage_type\", UsageType.Value.ToString().EnumNameToTransportCase());\n\n            if (MeasuredUnitId.HasValue)\n                xmlWriter.WriteElementString(\"measured_unit_id\", MeasuredUnitId.ToString());\n\n            if (DisplayQuantityOnHostedPage.HasValue)\n                xmlWriter.WriteElementString(\"display_quantity_on_hosted_page\", DisplayQuantityOnHostedPage.Value.AsString());\n\n            if (Optional.HasValue)\n                xmlWriter.WriteElementString(\"optional\", Optional.Value.AsString());\n\n            xmlWriter.WriteIfCollectionHasAny(\"unit_amount_in_cents\", UnitAmountInCents, pair => pair.Key,\n                pair => pair.Value.AsString());\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Plan: \" + PlanCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var plan = obj as Plan;\n            return plan != null && Equals(plan);\n        }\n\n        public bool Equals(Plan plan)\n        {\n            return PlanCode == plan.PlanCode;\n        }\n        #endregion\n    }\n}\n", "using System;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// Represents adjustments - credits and charges - on accounts.\n    /// </summary>\n    public class Adjustment : RecurlyEntity\n    {\n        // The currently valid adjustment types\n        public enum AdjustmentType : short\n        {\n            All = 0,\n            Charge,\n            Credit\n        }\n\n        public enum AdjustmentState : short\n        {\n            Any = 0,\n            Pending,\n            Invoiced\n        }\n\n        public enum RevenueSchedule : short\n        {\n            Evenly = 0,\n            Never,\n            AtRangeStart,\n            AtRangeEnd\n        }\n\n        public string AccountCode { get; private set; }\n        public string Uuid { get; protected set; }\n        public string Description { get; set; }\n        public string AccountingCode { get; set; }\n        public string ProductCode { get; private set; }\n        public string Origin { get; protected set; }\n        public int UnitAmountInCents { get; set; }\n        public int Quantity { get; set; }\n        public int DiscountInCents { get; protected set; }\n        public int TaxInCents { get; protected set; }\n        public int TotalInCents { get; protected set; }\n        public string Currency { get; set; }\n        public bool TaxExempt { get; set; }\n        public string TaxCode { get; set; }\n        public RevenueSchedule? RevenueScheduleType { get; set; }\n\n        public string TaxType { get; private set; }\n        public decimal? TaxRate { get; private set; }\n        public string TaxRegion { get; private set; }\n\n        public AdjustmentState State { get; protected set; }\n\n        public DateTime StartDate { get; protected set; }\n        public DateTime? EndDate { get; protected set; }\n\n        public DateTime? CreatedAt { get ; protected set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private const string UrlPrefix = \"/accounts/\";\n        private const string UrlPostfix = \"/adjustments/\";\n\n        private const int AccountingCodeMaxLength = 20;\n        private const int UnitAmountMax = 10000000;\n\n        #region Constructors\n\n\n        public Adjustment(int unitAmountInCents, string description, int quantity = 1)\n        {\n            UnitAmountInCents = unitAmountInCents;\n            Description = description;\n            Quantity = quantity;\n        }\n\n        internal Adjustment()\n        {\n            \n        }\n\n        internal Adjustment(string accountCode, string description, string currency, int unitAmountInCents, int quantity, string accountingCode = \"\", bool taxExempt = false)\n        {\n            AccountCode = accountCode;\n            Description = description;\n            Currency = currency;\n            UnitAmountInCents = unitAmountInCents;\n            Quantity = quantity;\n            AccountingCode = accountingCode;\n            TaxExempt = taxExempt;\n            State = AdjustmentState.Pending;\n\n            if (!AccountingCode.IsNullOrEmpty() && AccountingCode.Length > AccountingCodeMaxLength)\n                throw new PropertyOutOfRangeException(\"AccountingCode\",\n                    string.Format(\"Adjustment's AccountingCode can be at most {0} characters in length.\", AccountingCodeMaxLength));\n\n            if(UnitAmountInCents > UnitAmountMax)\n                throw new PropertyOutOfRangeException(\"UnitAmountInCents\",\n                    string.Format(\"Adjustment's UnitAmountInCents may be at most {0}.\", UnitAmountMax));\n        }\n\n        internal Adjustment(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        #endregion\n\n\n        /// <summary>\n        /// Create a new adjustment in Recurly\n        /// </summary>\n        public void Create()\n        {\n            // POST /accounts/<account code>/adjustments\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeUriString(AccountCode) + UrlPostfix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Deletes an adjustment from an account.\n        /// \n        /// Adjustments can only be deleted when not invoiced\n        /// </summary>\n        public void Delete()\n        {\n            // DELETE /adjustments/<uuid>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPostfix + Uri.EscapeUriString(Uuid));\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"adjustment\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n                switch (reader.Name)\n                { \n                    case \"account\":\n                        var href = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"product_code\":\n                        ProductCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"origin\":\n                        Origin = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"discount_in_cents\":\n                        DiscountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"total_in_cents\":\n                        TotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"tax_region\":\n                        TaxRegion = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"start_date\":\n                        DateTime startDate;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out startDate))\n                            StartDate = startDate;                        \n                        break;\n\n                    case \"end_date\":\n                        DateTime endDate;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out endDate))\n                            EndDate = endDate;\n                        break;\n\n                    case \"created_at\":\n                        DateTime createdAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out createdAt))\n                            CreatedAt = createdAt;\n                        break;\n\n                    case \"updated_at\":\n                        DateTime updatedAt;\n                        if(DateTime.TryParse(reader.ReadElementContentAsString(), out updatedAt))\n                            UpdatedAt = updatedAt;\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<AdjustmentState>();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, false);\n        }\n\n        internal void WriteEmbeddedXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, true);\n        }\n\n        internal void WriteXml(XmlTextWriter xmlWriter, bool embedded = false)\n        {\n            xmlWriter.WriteStartElement(\"adjustment\"); // Start: adjustment\n            xmlWriter.WriteElementString(\"description\", Description);\n            xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.AsString());\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n            xmlWriter.WriteElementString(\"accounting_code\", AccountingCode);\n            xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.AsString());\n            if (!embedded)\n                xmlWriter.WriteElementString(\"currency\", Currency);\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n            xmlWriter.WriteEndElement(); // End: adjustment\n        }\n\n        #endregion\n    }\n\n    public class Adjustments\n    {\n        public static Adjustment Get(string uuid)\n        {\n            var adjustment = new Adjustment();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                \"/adjustments/\" + Uri.EscapeUriString(uuid),\n                adjustment.ReadXml);\n            return adjustment;\n        }\n    }\n}\n", "using System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Xml;\r\n\r\nnamespace Recurly\r\n{\r\n    public class BillingInfo : RecurlyEntity\r\n    {\r\n        public enum CreditCardType : short\r\n        {\r\n            Invalid,\r\n            Visa,\r\n            MasterCard,\r\n            AmericanExpress,\r\n            Discover,\r\n            JCB,\r\n            Danokrt,\r\n            Maestro,\r\n            Forbrugsforeningen,\r\n            Laser,\r\n            Unknown\r\n        }\r\n\r\n        public enum BankAccountType : short\r\n        {\r\n            Checking,\r\n            Savings\r\n        }\r\n\r\n        /// <summary>\r\n        /// Account Code or unique ID for the account in Recurly\r\n        /// </summary>\r\n        public string AccountCode { get; private set; }\r\n        public string FirstName { get; set; }\r\n        public string LastName { get; set; }\r\n        public string Address1 { get; set; }\r\n        public string Address2 { get; set; }\r\n        public string City { get; set; }\r\n        /// <summary>\r\n        /// 2-letter state or province preferred\r\n        /// </summary>\r\n        public string State { get; set; }\r\n        /// <summary>\r\n        /// 2-letter ISO country code\r\n        /// </summary>\r\n        public string Country { get; set; }\r\n        /// <summary>\r\n        /// Zip code or Postal code\r\n        /// </summary>\r\n        public string PostalCode { get; set; }\r\n        public string PhoneNumber { get; set; }\r\n        /// <summary>\r\n        /// VAT Numbers\r\n        /// </summary>\r\n        public string VatNumber { get; set; }\r\n        public string IpAddress { get; set; }\r\n        public string IpAddressCountry { get; private set; }\r\n\r\n\r\n        /// <summary>\r\n        /// Used to override default currency\r\n        /// setting this to a known value may save you a verification\r\n        /// </summary>\r\n        public string Currency { get; set; }\r\n\r\n        /// <summary>\r\n        /// Credit Card Number, first six digits\r\n        /// </summary>\r\n        public string FirstSix { get; set; }\r\n\r\n        /// <summary>\r\n        /// Credit Card Number, last four digits\r\n        /// </summary>\r\n        public string LastFour { get; set; }\r\n\r\n        public CreditCardType CardType { get; set; }\r\n        public int ExpirationMonth { get; set; }\r\n        public int ExpirationYear { get; set; }\r\n\r\n        public string NameOnAccount { get; set; }\r\n        public string RoutingNumber { get; set; }\r\n        public string AccountNumber { get; set; }\r\n        public BankAccountType AccountType { get; set; }\r\n\r\n        public string Company { get; set; }\r\n\r\n        /// <summary>\r\n        /// Paypal Billing Agreement ID\r\n        /// </summary>\r\n        public string PaypalBillingAgreementId { get; set; }\r\n\r\n        /// <summary>\r\n        /// Amazon Billing Agreement ID\r\n        /// </summary>\r\n        public string AmazonBillingAgreementId { get; set; }\r\n\r\n        private string _cardNumber;\r\n\r\n        /// <summary>\r\n        /// Credit card number\r\n        /// </summary>\r\n        public string CreditCardNumber\r\n        {\r\n            get { return _cardNumber; }\r\n            set\r\n            {\r\n                _cardNumber = value;\r\n                CreditCardType type;\r\n                if (value.IsValidCreditCardNumber(out type))\r\n                {\r\n                    var digits = value.Where(char.IsDigit).AsString();\r\n                    CardType = type;\r\n                    FirstSix = digits.Substring(0, 6);\r\n                    LastFour = digits.Last(4);\r\n                }\r\n                else\r\n                {\r\n                    CardType = CreditCardType.Invalid;\r\n                    FirstSix = LastFour = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        public string VerificationValue { get; set; }\r\n\r\n        public string TokenId { get; set; }\r\n\r\n        /// <summary>\r\n        /// Timestamp representing the last update of this billing info\r\n        /// </summary>\r\n        public DateTime UpdatedAt { get; set; }\r\n\r\n        private const string UrlPrefix = \"/accounts/\";\r\n        private const string UrlPostfix = \"/billing_info\";\r\n\r\n        internal BillingInfo(string accountCode) : this()\r\n        {\r\n            AccountCode = accountCode;\r\n        }\r\n\r\n        public BillingInfo(Account account) : this()\r\n        {\r\n            AccountCode = account.AccountCode;\r\n        }\r\n\r\n        private BillingInfo()\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Lookup a Recurly account's billing info\r\n        /// </summary>\r\n        /// <param name=\"accountCode\"></param>\r\n        /// <returns></returns>\r\n        public static BillingInfo Get(string accountCode)\r\n        {\r\n            var billingInfo = new BillingInfo();\r\n\r\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\r\n                BillingInfoUrl(accountCode),\r\n                billingInfo.ReadXml);\r\n\r\n            return statusCode == HttpStatusCode.NotFound ? null : billingInfo;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update an account's billing info in Recurly\r\n        /// </summary>\r\n        public void Create()\r\n        {\r\n            Update();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update an account's billing info in Recurly\r\n        /// </summary>\r\n        public void Update()\r\n        {\r\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\r\n                BillingInfoUrl(AccountCode),\r\n                WriteXml,\r\n                ReadXml);\r\n        }\r\n\r\n        private static string BillingInfoUrl(string accountCode)\r\n        {\r\n            return UrlPrefix + Uri.EscapeUriString(accountCode) + UrlPostfix;\r\n        }\r\n\r\n        internal override void ReadXml(XmlTextReader reader)\r\n        {\r\n            while (reader.Read())\r\n            {\r\n                // End of billing_info element, get out of here\r\n                if (reader.Name == \"billing_info\" && reader.NodeType == XmlNodeType.EndElement)\r\n                    break;\r\n\r\n                if (reader.NodeType != XmlNodeType.Element) continue;\r\n\r\n                switch (reader.Name)\r\n                {\r\n                    case \"account\":\r\n                        var href = reader.GetAttribute(\"href\");\r\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\r\n                        break;\r\n\r\n                    case \"first_name\":\r\n                        FirstName = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"last_name\":\r\n                        LastName = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"name_on_account\":\r\n                        NameOnAccount = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"company\":\r\n                        Company = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"address1\":\r\n                        Address1 = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"address2\":\r\n                        Address2 = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"city\":\r\n                        City = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"state\":\r\n                        State = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"zip\":\r\n                        PostalCode = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"country\":\r\n                        Country = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"phone\":\r\n                        PhoneNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"vat_number\":\r\n                        VatNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"ip_address\":\r\n                        IpAddress = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"ip_address_country\":\r\n                        IpAddressCountry = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"card_type\":\r\n                        CardType = reader.ReadElementContentAsString().ParseAsEnum<CreditCardType>();\r\n                        break;\r\n\r\n                    case \"year\":\r\n                        ExpirationYear = reader.ReadElementContentAsInt();\r\n                        break;\r\n\r\n                    case \"month\":\r\n                        ExpirationMonth = reader.ReadElementContentAsInt();\r\n                        break;\r\n\r\n                    case \"first_six\":\r\n                        FirstSix = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"last_four\":\r\n                        LastFour = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"paypal_billing_agreement_id\":\r\n                        PaypalBillingAgreementId = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"amazon_billing_agreement_id\":\r\n                        AmazonBillingAgreementId = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"routing_number\":\r\n                        RoutingNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"account_type\":\r\n                        AccountType = reader.ReadElementContentAsString().ParseAsEnum<BankAccountType>();\r\n                        break;\r\n                    case \"updated_at\":\r\n                        DateTime d;\r\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\r\n                        {\r\n                            UpdatedAt = d;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        internal override void WriteXml(XmlTextWriter xmlWriter)\r\n        {\r\n            xmlWriter.WriteStartElement(\"billing_info\"); // Start: billing_info\r\n\r\n            //if a recurly js token is supplied we don't want to send billing info here\r\n            if (string.IsNullOrEmpty(TokenId))\r\n            {\r\n                xmlWriter.WriteStringIfValid(\"first_name\", FirstName);\r\n                xmlWriter.WriteStringIfValid(\"last_name\", LastName);\r\n                xmlWriter.WriteStringIfValid(\"name_on_account\", NameOnAccount);\r\n                xmlWriter.WriteStringIfValid(\"address1\", Address1);\r\n                xmlWriter.WriteStringIfValid(\"address2\", Address2);\r\n                xmlWriter.WriteStringIfValid(\"city\", City);\r\n                xmlWriter.WriteStringIfValid(\"state\", State);\r\n                xmlWriter.WriteStringIfValid(\"zip\", PostalCode);\r\n                xmlWriter.WriteStringIfValid(\"country\", Country);\r\n                xmlWriter.WriteStringIfValid(\"phone\", PhoneNumber);\r\n                xmlWriter.WriteStringIfValid(\"vat_number\", VatNumber);\r\n                xmlWriter.WriteStringIfValid(\"currency\", Currency);\r\n\r\n                if (!IpAddress.IsNullOrEmpty())\r\n                    xmlWriter.WriteElementString(\"ip_address\", IpAddress);\r\n                else\r\n                    Debug.WriteLine(\"Recurly Client Library: Recording IP Address is strongly recommended.\");\r\n\r\n                if (!CreditCardNumber.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"number\", CreditCardNumber);\r\n                    xmlWriter.WriteElementString(\"month\", ExpirationMonth.AsString());\r\n                    xmlWriter.WriteElementString(\"year\", ExpirationYear.AsString());\r\n\r\n                    xmlWriter.WriteStringIfValid(\"verification_value\", VerificationValue);\r\n                }\r\n\r\n                if (!AccountNumber.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"routing_number\", RoutingNumber);\r\n                    xmlWriter.WriteElementString(\"account_number\", AccountNumber);\r\n                    xmlWriter.WriteElementString(\"account_type\", AccountType.ToString().EnumNameToTransportCase());\r\n                }\r\n\r\n                if (!PaypalBillingAgreementId.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"paypal_billing_agreement_id\", PaypalBillingAgreementId);\r\n                }\r\n\r\n                if (!AmazonBillingAgreementId.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"amazon_billing_agreement_id\", AmazonBillingAgreementId);\r\n                }\r\n            }\r\n\r\n            xmlWriter.WriteStringIfValid(\"token_id\", TokenId);\r\n\r\n            xmlWriter.WriteEndElement(); // End: billing_info\r\n        }\r\n\r\n        #region Object Overrides\r\n\r\n        public override string ToString()\r\n        {\r\n            return \"Recurly Billing Info : \" + AccountCode;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            var a = obj as BillingInfo;\r\n            return a != null && Equals(a);\r\n        }\r\n\r\n        public bool Equals(BillingInfo billingInfo)\r\n        {\r\n            return AccountCode == billingInfo.AccountCode;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return AccountCode?.GetHashCode() ?? 0;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class Coupon : RecurlyEntity\n    {\n        public enum CouponState : short\n        {\n            All = 0,\n            Redeemable,\n            Expired,\n            Inactive,\n            MaxedOut\n        }\n\n        public enum CouponDiscountType\n        {\n            Percent,\n            Dollars,\n            FreeTrial\n        }\n\n        public enum CouponDuration\n        {\n            Forever,\n            SingleUse,\n            Temporal\n        }\n\n        public enum CouponTemporalUnit\n        {\n            Day,\n            Week,\n            Month,\n            Year\n        }\n\n        public enum RedemptionResourceType\n        {\n            Account,\n            Subscription\n        }\n\n        public enum CouponType\n        {\n            Bulk,\n            SingleCode,\n            UniqueCode\n        }\n\n        public int Id { get; set; }\n\n        public RecurlyList<CouponRedemption> Redemptions { get; private set; }\n\n        public string CouponCode { get; set; }\n        public string Name { get; set; }\n        public string HostedDescription { get; set; }\n        public string InvoiceDescription { get; set; }\n        public DateTime? RedeemByDate { get; set; }\n        public bool? SingleUse { get; set; }\n        public int? AppliesForMonths { get; set; }\n        public CouponDuration? Duration { get; set; }\n        public CouponTemporalUnit? TemporalUnit { get; set; }\n        public int? TemporalAmount { get; set; }\n        public int? MaxRedemptions { get; set; }\n        public bool? AppliesToAllPlans { get; set; }\n        public bool? AppliesToNonPlanCharges { get; set; }\n        public int? MaxRedemptionsPerAccount { get; set; }\n        public string UniqueCodeTemplate { get; set; }\n        public int? FreeTrialAmount { get; set; }\n        public CouponTemporalUnit? FreeTrialUnit { get; set; }\n\n        public CouponDiscountType DiscountType { get; private set; }\n        public CouponState State { get; private set; }\n        public RedemptionResourceType RedemptionResource { get; set; }\n        public CouponType Type { get; set; } = CouponType.SingleCode;\n\n        /// <summary>\n        /// A dictionary of currencies and discounts\n        /// </summary>\n        public Dictionary<string, int> DiscountInCents { get; private set; }\n        public int? DiscountPercent { get; private set; }\n\n        private int? NumberOfUniqueCodes { get; set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + CouponCode;\n        }\n\n        /// <summary>\n        /// A list of plans to limit the coupon\n        /// </summary>\n\n        private List<string> _plans;\n\n        public List<string> Plans\n        {\n            get { return _plans ?? (_plans = new List<string>()); }\n        }\n\n        #region Constructors\n\n        internal Coupon()\n        {\n        }\n\n        internal Coupon(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        /// <summary>\n        /// Creates a coupon given a code, name, and discount type\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountType\"></param>\n        public Coupon(string couponCode, string name, CouponDiscountType discountType)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountType = discountType;\n        }\n\n        /// <summary>\n        /// Creates a coupon, discounted by a fixed amount\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountInCents\">dictionary of currencies and discounts</param>\n        public Coupon(string couponCode, string name, Dictionary<string, int> discountInCents)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountInCents = discountInCents;\n            DiscountType = CouponDiscountType.Dollars;\n        }\n\n        /// <summary>\n        /// Creates a coupon, discounted by percentage\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountPercent\"></param>\n        public Coupon(string couponCode, string name, int discountPercent)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountPercent = discountPercent;\n            DiscountType = CouponDiscountType.Percent;\n        }\n\n        #endregion\n\n        internal const string UrlPrefix = \"/coupons/\";\n\n        /// <summary>\n        /// Creates this coupon.\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(CouponCode),\n                WriteXmlUpdate);\n        }\n\n        public void Restore()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(CouponCode) + \"/restore\",\n                WriteXmlUpdate);\n        }\n\n        /// <summary>\n        /// Deactivates this coupon.\n        /// </summary>\n        public void Deactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeUriString(CouponCode));\n        }\n\n        public RecurlyList<Coupon> GetUniqueCouponCodes()\n        {\n            var coupons = new CouponList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                memberUrl() + \"/unique_coupon_codes/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        public RecurlyList<Coupon> Generate(int amount)\n        {\n            NumberOfUniqueCodes = amount;\n            var coupons = new CouponList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/generate/\",\n                this.WriteGenerateXml,\n                coupons.ReadFromLocation);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of coupon element, get out of here\n                if (reader.Name == \"coupon\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime date;\n                int m;\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        int id;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out id))\n                            Id = id;\n                        break;\n                    case \"coupon_code\":\n                        CouponCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<CouponState>();\n                        break;\n\n                    case \"discount_type\":\n                        DiscountType = reader.ReadElementContentAsString().ParseAsEnum<CouponDiscountType>();\n                        break;\n\n                    case \"redemption_resource\":\n                        RedemptionResource = reader.ReadElementContentAsString().ParseAsEnum<RedemptionResourceType>();\n                        break;\n\n                    case \"discount_percent\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            DiscountPercent = m;\n                        break;\n\n                    case \"redeem_by_date\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out date))\n                            RedeemByDate = date;\n                        break;\n\n                    case \"single_use\":\n                        SingleUse = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"applies_for_months\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            AppliesForMonths = m;\n                        break;\n\n                    case \"duration\":\n                        Duration = reader.ReadElementContentAsString().ParseAsEnum<CouponDuration>();\n                        break;\n\n                    case \"temporal_unit\":\n                        var element_content = reader.ReadElementContentAsString();\n                        if (element_content != \"\")\n                            TemporalUnit = element_content.ParseAsEnum<CouponTemporalUnit>();\n                        break;\n\n                    case \"temporal_amount\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            TemporalAmount = m;\n                        break;\n\n                    case \"max_redemptions\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            MaxRedemptions = m;\n                        break;\n\n                    case \"applies_to_all_plans\":\n                        AppliesToAllPlans = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"applies_to_non_plan_charges\":\n                        AppliesToNonPlanCharges = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"max_redemptions_per_account\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            MaxRedemptionsPerAccount = m;\n                        break;\n\n                    case \"description\":\n                        HostedDescription = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"invoice_description\":\n                        InvoiceDescription = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unique_code_template\":\n                        UniqueCodeTemplate = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"coupon_type\":\n                        var type_content = reader.ReadElementContentAsString();\n                        if (type_content != \"\")\n                            Type = type_content.ParseAsEnum<CouponType>();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"plan_codes\":\n                        ReadXmlPlanCodes(reader);\n                        break;\n\n                    case \"discount_in_cents\":\n                        ReadXmlDiscounts(reader);\n                        break;\n\n                    case \"free_trial_unit\":\n                        var trial_unit_content = reader.ReadElementContentAsString();\n                        if (trial_unit_content != \"\")\n                            FreeTrialUnit = trial_unit_content.ParseAsEnum<CouponTemporalUnit>();\n                        break;\n\n                    case \"free_trial_amount\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            FreeTrialAmount = m;\n                        break;\n                }\n            }\n        }\n\n        internal void ReadXmlPlanCodes(XmlTextReader reader)\n        {\n            Plans.Clear();\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"plan_codes\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        Plans.Add(reader.ReadElementContentAsString());\n                        break;\n\n                }\n            }\n        }\n\n        internal void ReadXmlDiscounts(XmlTextReader reader)\n        {\n            DiscountInCents = new Dictionary<string, int>();\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"discount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    DiscountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n\n            xmlWriter.WriteElementString(\"coupon_code\", CouponCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"hosted_description\", HostedDescription);\n            xmlWriter.WriteElementString(\"invoice_description\", InvoiceDescription);\n\n            if (RedeemByDate.HasValue)\n                xmlWriter.WriteElementString(\"redeem_by_date\", RedeemByDate.Value.ToString(\"s\"));\n\n            if (SingleUse.HasValue)\n                xmlWriter.WriteElementString(\"single_use\", SingleUse.Value.AsString());\n\n            if (AppliesForMonths.HasValue)\n                xmlWriter.WriteElementString(\"applies_for_months\", AppliesForMonths.Value.AsString());\n            if (Duration != null)\n                xmlWriter.WriteElementString(\"duration\", Duration.ToString().EnumNameToTransportCase());\n            if (TemporalUnit != null)\n                xmlWriter.WriteElementString(\"temporal_unit\", TemporalUnit.ToString().EnumNameToTransportCase());\n            if (TemporalAmount.HasValue)\n                xmlWriter.WriteElementString(\"temporal_amount\", TemporalAmount.Value.ToString());\n\n            if (AppliesToAllPlans.HasValue)\n                xmlWriter.WriteElementString(\"applies_to_all_plans\", AppliesToAllPlans.Value.AsString());\n\n            if (AppliesToNonPlanCharges.HasValue)\n                xmlWriter.WriteElementString(\"applies_to_non_plan_charges\", AppliesToNonPlanCharges.Value.AsString());\n\n            if (MaxRedemptions.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions\", MaxRedemptions.Value.AsString());\n\n            if (MaxRedemptionsPerAccount.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions_per_account\", MaxRedemptionsPerAccount.Value.AsString());\n\n            xmlWriter.WriteElementString(\"discount_type\", DiscountType.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteElementString(\"redemption_resource\", RedemptionResource.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteElementString(\"coupon_type\", Type.ToString().EnumNameToTransportCase());\n\n            if (Type == CouponType.Bulk)\n                xmlWriter.WriteElementString(\"unique_code_template\", UniqueCodeTemplate);\n\n            if (CouponDiscountType.Percent == DiscountType && DiscountPercent.HasValue)\n                xmlWriter.WriteElementString(\"discount_percent\", DiscountPercent.Value.AsString());\n\n            if (CouponDiscountType.Dollars == DiscountType)\n            {\n                xmlWriter.WriteIfCollectionHasAny(\"discount_in_cents\", DiscountInCents, pair => pair.Key,\n                    pair => pair.Value.AsString());\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"plan_codes\", Plans, s => \"plan_code\", s => s);\n\n            if (FreeTrialAmount.HasValue)\n                xmlWriter.WriteElementString(\"free_trial_amount\", FreeTrialAmount.Value.AsString());\n\n            if (FreeTrialUnit.HasValue)\n                xmlWriter.WriteElementString(\"free_trial_unit\", FreeTrialUnit.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n\n        public void WriteGenerateXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n            xmlWriter.WriteElementString(\"number_of_unique_codes\", NumberOfUniqueCodes.Value.AsString());\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        internal void WriteXmlUpdate(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n\n            if (!Name.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"name\", Name);\n\n            if (!HostedDescription.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"hosted_description\", HostedDescription);\n\n            if (!InvoiceDescription.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"invoice_description\", InvoiceDescription);\n\n            if (RedeemByDate.HasValue)\n                xmlWriter.WriteElementString(\"redeem_by_date\", RedeemByDate.Value.ToString(\"s\"));\n\n            if (MaxRedemptions.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions\", MaxRedemptions.Value.AsString());\n\n            if (MaxRedemptionsPerAccount.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions_per_account\", MaxRedemptionsPerAccount.Value.AsString());\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account Coupon: \" + CouponCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var coupon = obj as Coupon;\n            return coupon != null && Equals(coupon);\n        }\n\n        public bool Equals(Coupon coupon)\n        {\n            return CouponCode == coupon.CouponCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return CouponCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Coupons\n    {\n        /// <summary>\n        /// Look up a coupon\n        /// </summary>\n        /// <param name=\"couponCode\">Coupon code</param>\n        /// <returns></returns>\n        public static Coupon Get(string couponCode)\n        {\n            var coupon = new Coupon();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Coupon.UrlPrefix + Uri.EscapeUriString(couponCode),\n                coupon.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupon;\n        }\n\n        /// <summary>\n        /// Lists coupons, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <returns></returns>\n        public static RecurlyList<Coupon> List(Coupon.CouponState state = Coupon.CouponState.All)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Lists coupons, limited to state and filtered by given criteria\n        /// </summary>\n        /// <param name=\"state\">Coupon state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Coupon> List(Coupon.CouponState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            if (state != Coupon.CouponState.All)\n            {\n                parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            }\n            return new CouponList(Coupon.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// Represents an instance where a coupon has been redeemed for a subscription\n    /// </summary>\n    public class CouponRedemption : RecurlyEntity\n    {\n\n        public string Uuid { get; private set; }\n        public string AccountCode { get; set; }\n        public string CouponCode { get; private set; }\n        public string Currency { get; set; }\n\n        public bool SingleUse { get; private set; }\n        public int TotalDiscountedInCents { get; private set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        public string State { get; private set; }\n\n        public string SubscriptionUuid {get; set; }\n\n        internal CouponRedemption(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        internal CouponRedemption()\n        {\n\n        }\n\n\n        /// <summary>\n        /// Redeem an active coupon for an account\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"currency\"></param>\n        internal static CouponRedemption Redeem(string accountCode, string couponCode, string currency, string subscriptionUuid=null)\n        {\n            var cr = new CouponRedemption {AccountCode = accountCode, Currency = currency, SubscriptionUuid = subscriptionUuid};\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n               \"/coupons/\" + Uri.EscapeUriString(couponCode) + \"/redeem\",\n               cr.WriteXml,\n               cr.ReadXml);\n\n            return cr;\n\n        }\n\n        /// <summary>\n        /// Removes a coupon from an account\n        /// </summary>\n        public void Delete()\n        {\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                \"/accounts/\" + Uri.EscapeUriString(AccountCode) +\n                \"/redemptions/\" + Uri.EscapeUriString(Uuid));\n            AccountCode = null;\n            CouponCode = null;\n            Currency = null;\n        }\n\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of coupon element, get out of here\n                if ((reader.Name == \"coupon\" || reader.Name == \"redemption\") && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                string href;\n                switch (reader.Name)\n                {\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"coupon\":\n                        href = reader.GetAttribute(\"href\");\n                        CouponCode =Uri.UnescapeDataString( href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"single_use\":\n                        SingleUse = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"total_discounted_in_cents\":\n                        int discountInCents;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out discountInCents))\n                            TotalDiscountedInCents = discountInCents;\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"subscription_uuid\":\n                        SubscriptionUuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"redemption\"); // Start: coupon\n\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteElementString(\"currency\", Currency);\n\n            xmlWriter.WriteElementString(\"subscription_uuid\", SubscriptionUuid);\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account Coupon Redemption: \" + CouponCode + \" \" + AccountCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var redemption = obj as CouponRedemption;\n            return redemption != null && Equals(redemption);\n        }\n\n        public bool Equals(CouponRedemption coupon)\n        {\n            return AccountCode == coupon.AccountCode && CouponCode == coupon.CouponCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return (AccountCode + CouponCode).GetHashCode();\n        }\n\n        #endregion\n\n        \n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\nusing Recurly.List;\n\nnamespace Recurly\n{\n    public class ExportDate : RecurlyEntity\n    {\n        internal const string UrlPrefix = \"/export_dates\";\n        public DateTime Date { get; set; }\n\n        internal ExportDate(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"export_date\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"date\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            Date = d;\n\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public class ExportFile : RecurlyEntity\n    {\n        internal const string FilesUrlPrefix = \"/export_dates/{0}/export_files/\";\n        internal const string FileUrlPrefix = FilesUrlPrefix + \"{1}\";\n        public string DownloadUrl { get; set; }\n        public string Name { get; set; }\n        public string Md5Sum { get; set; }\n        public DateTime? ExpiresAt { get; set; }\n        public ExportFile() { }\n        internal ExportFile(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"export_file\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n                    case \"expires_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            ExpiresAt = d;\n                        break;\n                    case \"download_url\":\n                        DownloadUrl = reader.ReadElementContentAsString();\n                        break;\n                    case \"md5sum\":\n                        Md5Sum = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public sealed class Exports\n    {\n        public static RecurlyList<ExportDate> ListExportDates()\n        {\n            return new ExportDateList(ExportDate.UrlPrefix);\n        }\n\n        public static RecurlyList<ExportFile> ListExportFiles(DateTime date)\n        {\n            return new ExportFileList(string.Format(ExportFile.FilesUrlPrefix, date.ToString(\"yyyy-MM-dd\")));\n        }\n\n        public static ExportFile DownloadExportFile(DateTime date, string fileName)\n        {\n            var exportFile = new ExportFile();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                string.Format(ExportFile.FileUrlPrefix, date.ToString(\"yyyy-MM-dd\"), Uri.EscapeUriString(fileName)),\n                exportFile.ReadXml);\n\n            return statusCode != HttpStatusCode.NotFound ? exportFile : null;\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// An gift card in Recurly.\n    ///\n    /// https://dev.recurly.com/docs/gift-card-object\n    /// </summary>\n    public class GiftCard : RecurlyEntity\n    {\n        /// <summary>\n        /// Unique ID assigned to this gift card.\n        /// </summary>\n        public long Id { get; private set; }\n        \n        private string _accountCode;\n        private Account _account;\n\n        /// <summary>\n        /// Account details for the gifter.\n        /// This can reference an existing account_code or create\n        /// a new account using the Account objects params.\n        /// An account_code is required. If this object only has a\n        /// link to the account, it will fetch and cache it.\n        /// </summary>\n        public Account GifterAccount\n        {\n            get { return _account ?? (_account = Accounts.Get(_accountCode)); }\n            set { _account = value; }\n        }\n\n        /// <summary>\n        /// The product code of the gift card product.\n        /// </summary>\n        public string ProductCode { get; set; }\n\n        /// <summary>\n        /// The amount of the gift card.\n        /// Must match an amount on the gift card product.\n        /// </summary>\n        public int UnitAmountInCents { get; set; }\n\n        /// <summary>\n        /// The currency of the unit_amount_in_cents.\n        /// </summary>\n        public string Currency { get; set; }\n\n        /// <summary>\n        /// The unique redemption code for the gift card,\n        /// generated by Recurly.Will be 16 characters, alphanumeric,\n        /// displayed uppercase, but accepted in any case at redemption.\n        /// Used by the recipient_account to create a credit in the amount\n        /// of the unit_amount_in_cents on their account.\n        /// </summary>\n        public string RedemptionCode { get; private set; }\n\n        /// <summary>\n        /// The remaining credit on the recipient_account associated\n        /// with this gift card.Only shows once the gift card\n        /// has been redeemed. Can be used to create gift card balance\n        /// displays for your customers.\n        /// </summary>\n        public int BalanceInCents { get; set; }\n\n        /// <summary>\n        /// Block of delivery information.\n        /// </summary>\n        public Delivery Delivery { get; set; }\n\n        /// <summary>\n        /// When the gift card was purchased.\n        /// </summary>\n        public DateTime CreatedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card object was updated,\n        /// which happens upon purchase, delivery and redemption.\n        /// </summary>\n        public DateTime UpdatedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card was redeemed by the recipient.\n        /// </summary>\n        public DateTime RedeemedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card was sent to the recipient by Recurly via email,\n        /// if method was email and the \"Gift Card Delivery\" email template was enabled.\n        /// This will be empty for post delivery or email delivery \n        /// where the email template was disabled.\n        /// </summary>\n        public DateTime DeliveredAt { get; private set; }\n\n        internal const string UrlPrefix = \"/gift_cards/\";\n\n        public GiftCard(string accountCode, Delivery delivery, string productCode, int unitAmountInCents, string currency)\n        {\n            GifterAccount = new Account(accountCode);\n            ProductCode = productCode;\n            UnitAmountInCents = unitAmountInCents;\n            Currency = currency;\n            Delivery = delivery;\n        }\n\n        public GiftCard(Account gifterAccount, Delivery delivery, string productCode, int unitAmountInCents, string currency)\n        {\n            GifterAccount = gifterAccount;\n            ProductCode = productCode;\n            UnitAmountInCents = unitAmountInCents;\n            Currency = currency;\n            Delivery = delivery;\n        }\n\n        public GiftCard(string redemptionCode)\n        {\n            RedemptionCode = redemptionCode;\n        }\n\n        internal GiftCard() {}\n\n        internal GiftCard(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        /// <summary>\n        /// Create a new gift card in Recurly.\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix, WriteXml, ReadXml);\n\n            BustAttributeCache();\n        }\n\n        /// <summary>\n        /// Preview a new gift card in Recurly.\n        /// Runs validations and allows the gifter\n        /// to confirm that the delivery details provided are correct.\n        /// Does not run transactions.\n        /// </summary>\n        public void Preview()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"preview\", WriteXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Redeem this gift card on the account\n        /// with the given account code.\n        /// </summary>\n        /// <param name=\"accountCode\">The account code to redeem the card against</param>\n        public void Redeem(string accountCode)\n        {\n            var account = new Account(accountCode);\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"/\" + RedemptionCode + \"/redeem\", account.WriteGiftCardRedeemXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Nulls any cached attributes so we fetch fresh ones\n        /// from the server\n        /// </summary>\n        private void BustAttributeCache()\n        {\n            _account = null;\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"gift_card\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime dateVal;\n\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        long id;\n                        if (long.TryParse(reader.ReadElementContentAsString(), out id))\n                            Id = id;\n                        break;\n                        \n                    case \"product_code\":\n                        ProductCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"redemption_code\":\n                        RedemptionCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        int amount;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            UnitAmountInCents = amount;\n                        break;\n\n                    case \"balance_in_cents\":\n                        int balance;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out balance))\n                            BalanceInCents = balance;\n                        break;\n\n                    case \"gifter_account\":\n                        string href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                        {\n                            _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        }\n                        else\n                        {\n                            GifterAccount = new Account(reader, \"gifter_account\");\n                        }\n                        break;\n\n                    case \"delivery\":\n                        Delivery = new Delivery(reader);\n                        break;\n\n                    case \"created_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CreatedAt = dateVal;\n                        break;\n\n                    case \"updated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            UpdatedAt = dateVal;\n                        break;\n\n                    case \"redeemed_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            RedeemedAt = dateVal;\n                        break;\n\n                    case \"delivered_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            DeliveredAt = dateVal;\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"gift_card\"); // Start: gift_card\n\n            xmlWriter.WriteElementString(\"product_code\", ProductCode);\n            xmlWriter.WriteElementString(\"currency\", Currency);\n            xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.ToString());\n\n            if (GifterAccount != null)\n                GifterAccount.WriteXml(xmlWriter, \"gifter_account\");\n\n            if (Delivery != null)\n                Delivery.WriteXml(xmlWriter);\n\n            xmlWriter.WriteEndElement(); // End: gift_card\n        }\n\n        /// <summary>\n        /// Redemption serializer\n        /// </summary>\n        /// <param name=\"xmlWriter\"></param>\n        internal void WriteRedemptionXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"gift_card\"); // Start: gift_card\n            xmlWriter.WriteElementString(\"redemption_code\", RedemptionCode);\n            xmlWriter.WriteEndElement(); // End: gift_card\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly GiftCard: \" + Id;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var a = obj as GiftCard;\n            return a != null && Equals(a);\n        }\n\n        public bool Equals(GiftCard giftCard)\n        {\n            return giftCard != null && Id == giftCard.Id;\n        }\n\n        public override int GetHashCode()\n        {\n            return Id.GetHashCode();\n        }\n\n        #endregion\n    }\n\n    public sealed class GiftCards\n    {\n        internal const string UrlPrefix = \"/gift_cards/\";\n\n        /// <summary>\n        /// Lookup a Recurly gift card\n        /// </summary>\n        /// <param name=\"id\">The long id of the gift card</param>\n        /// <returns></returns>\n        public static GiftCard Get(long id)\n        {\n            var giftCard = new GiftCard();\n            // GET /gift_cards/<id>\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(id.ToString()),\n                giftCard.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : giftCard;\n        }\n\n        /// <summary>\n        /// Lists gift cards\n        /// </summary>\n        /// <param name=\"gifterAccountCode\">A gifter's account code to filter by (may be null)</param>\n        /// <param name=\"recipientAccountCode\">A recipients's account code to filter by (may be null)</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<GiftCard> List(string gifterAccountCode = null, string recipientAccountCode = null, FilterCriteria filter = null)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n\n            if (gifterAccountCode != null)\n                parameters[\"gifter_account_code\"] = gifterAccountCode;\n            if (recipientAccountCode != null)\n                parameters[\"recipient_account_code\"] = recipientAccountCode;\n\n            return new GiftCardList(GiftCard.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nnamespace Recurly\n{\n    public class Invoice : RecurlyEntity\n    {\n        // The currently valid Invoice States\n        public enum InvoiceState\n        {\n            Open,\n            Collected,\n            Failed,\n            PastDue,\n            Processing,\n            Pending\n        }\n\n        public enum RefundOrderPriority\n        {\n            Credit,\n            Transaction\n        }\n\n        public enum Collection\n        {\n            Automatic,\n            Manual\n        }\n\n        public string AccountCode { get; private set; }\n        public string SubscriptionUuid { get; private set; }\n        public int OriginalInvoiceNumber { get; private set; }\n        public string OriginalInvoiceNumberPrefix { get; private set; }\n        public string Uuid { get; protected set; }\n        public InvoiceState State { get; protected set; }\n        public int InvoiceNumber { get; private set; }\n        public string InvoiceNumberPrefix { get; private set; }\n        public string PoNumber { get; set; }\n        public string VatNumber { get; private set; }\n        public int SubtotalInCents { get; private set; }\n        public int TaxInCents { get; protected set; }\n        public int TotalInCents { get; protected set; }\n        public string Currency { get; protected set; }\n        public int? NetTerms { get; set; }\n        public Collection CollectionMethod { get; set; }\n        public DateTime? CreatedAt { get; private set; }\n        public DateTime? UpdatedAt { get; private set; }\n        public DateTime? ClosedAt { get; private set; }\n\n        public Address Address\n        {\n            get { return _address ?? (_address = new Address()); }\n            set { _address = value; }\n        }\n        private Address _address;\n\n        /// <summary>\n        /// Tax type as \"vat\" for VAT or \"usst\" for US Sales Tax.\n        /// </summary>\n        public string TaxType { get; private set; }\n        public string TaxRegion { get; private set; }\n        public decimal? TaxRate { get; private set; }\n\n        public RecurlyList<Adjustment> Adjustments { get; private set; }\n        public RecurlyList<Transaction> Transactions { get; private set; }\n\n        public string CustomerNotes { get; set; }\n        public string TermsAndConditions { get; set; }\n        public string VatReverseChargeNotes { get; set; }\n        public int SubtotalAfterDiscountInCents { get; set; }\n        public DateTime? AttemptNextCollectionAt { get; set; }\n        public string RecoveryReason { get; set; }\n        public string AllLineItemsLink { get; set; }\n\n        internal const string UrlPrefix = \"/invoices/\";\n\n        public Invoice()\n        {\n            Adjustments = new AdjustmentList();\n            Transactions = new TransactionList();\n        }\n\n        internal Invoice(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + InvoiceNumberWithPrefix();\n        }\n\n        public string InvoiceNumberWithPrefix()\n        {\n            return InvoiceNumberPrefix + Convert.ToString(InvoiceNumber);\n        }\n\n        public string OriginalInvoiceNumberWithPrefix()\n        {\n            return OriginalInvoiceNumberPrefix + Convert.ToString(OriginalInvoiceNumber);\n        }\n\n        /// <summary>\n        /// Returns a PDF representation of an invoice\n        /// </summary>\n        /// <param name=\"acceptLanguage\">Language for invoice, defaults to en-US.</param>\n        /// <returns></returns>\n        public byte[] GetPdf(string acceptLanguage = \"en-US\")\n        {\n            return Client.Instance.PerformDownloadRequest(memberUrl(), \"application/pdf\", acceptLanguage);\n        }\n\n        /// <summary>\n        /// Post an invoice on an account using it's pending charges\n        /// </summary>\n        public void Create(string accountCode)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeUriString(accountCode) + Invoice.UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Preview an invoice on an account using it's pending charges\n        /// </summary>\n        public void Preview(string accountCode)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeUriString(accountCode) + Invoice.UrlPrefix + \"preview\",\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Marks an invoice as paid successfully\n        /// </summary>\n        public void MarkSuccessful()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put, memberUrl() + \"/mark_successful\", ReadXml);\n        }\n\n        /// <summary>\n        /// Marks an invoice as failed collection\n        /// </summary>\n        public void MarkFailed()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put, memberUrl() + \"/mark_failed\", ReadXml);\n        }\n\n        /// <summary>\n        /// Returns the active coupon redemption on this invoice\n        /// </summary>\n        /// <returns></returns>\n        public CouponRedemption GetRedemption()\n        {\n            var redemptionList = GetRedemptions();\n            return redemptionList.HasAny() ? redemptionList[0] : null;\n        }\n\n        public RecurlyList<CouponRedemption> GetRedemptions()\n        {\n            var coupons = new CouponRedemptionList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                memberUrl() + \"/redemptions/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        public Invoice GetOriginalInvoice()\n        {\n            return Invoices.Get(OriginalInvoiceNumberWithPrefix());\n        }\n\n        /// <summary>\n        /// If enabled, allows specific line items and/or quantities to be refunded.\n        /// </summary>\n        /// <param name=\"adjustment\"></param>\n        /// <param name=\"prorate\"></param>\n        /// <param name=\"quantity\"></param>\n        /// <returns>new Invoice object</returns>\n        public Invoice Refund(Adjustment adjustment, bool prorate = false, int quantity = 0, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var adjustments = new List<Adjustment>();\n            adjustments.Add(adjustment);\n\n            return Refund(adjustments, prorate, quantity, refundPriority);\n        }\n\n        public Invoice Refund(IEnumerable<Adjustment> adjustments, bool prorate = false, int quantity = 0, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var refunds = new RefundList(adjustments, prorate, quantity, refundPriority);\n            var invoice = new Invoice();\n\n            var response = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/refund\",\n                refunds.WriteXml,\n                invoice.ReadXml);\n\n            if (HttpStatusCode.Created == response || HttpStatusCode.OK == response)\n                return invoice;\n            else\n                return null;\n        }\n\n        public Invoice RefundAmount(int amountInCents, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var refundInvoice = new Invoice();\n            var refund = new OpenAmountRefund(amountInCents, refundPriority);\n               \n            var response = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/refund\",\n                refund.WriteXml,\n                refundInvoice.ReadXml);\n\n            if (HttpStatusCode.Created == response || HttpStatusCode.OK == response)\n                return refundInvoice;\n            else\n                return null;\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of invoice element, get out of here\n                if (reader.Name == \"invoice\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        var accountHref = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(accountHref.Substring(accountHref.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"subscription\":\n                        var subHref = reader.GetAttribute(\"href\");\n                        SubscriptionUuid = Uri.UnescapeDataString(subHref.Substring(subHref.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"original_invoice\":\n                        var originalInvoiceHref = reader.GetAttribute(\"href\");\n                        var invoiceNumber = Uri.UnescapeDataString(originalInvoiceHref.Substring(originalInvoiceHref.LastIndexOf(\"/\") + 1));\n                        MatchCollection matches = Regex.Matches(invoiceNumber, \"([^\\\\d]{2})(\\\\d+)\");\n                        \n                        if (matches.Count == 1) \n                        {\n                            OriginalInvoiceNumberPrefix = matches[0].Groups[1].Value;\n                            OriginalInvoiceNumber = int.Parse(matches[0].Groups[2].Value);\n                        } \n                        else\n                        {\n                            OriginalInvoiceNumber = int.Parse(invoiceNumber);\n                        }\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<InvoiceState>();\n                        break;\n\n                    case \"invoice_number\":\n                        int invNumber;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out invNumber))\n                            InvoiceNumber = invNumber;\n                        break;\n\n                    case \"invoice_number_prefix\":\n                        InvoiceNumberPrefix = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"po_number\":\n                        PoNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_number\":\n                        VatNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"subtotal_in_cents\":\n                        SubtotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"total_in_cents\":\n                        TotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        DateTime createdAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out createdAt))\n                            CreatedAt = createdAt;\n                        break;\n\n                    case \"updated_at\":\n                        DateTime updatedAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out updatedAt))\n                            UpdatedAt = updatedAt;\n                        break;                    \n\n                    case \"closed_at\":\n                        DateTime closedAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out closedAt))\n                            ClosedAt = closedAt;\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"tax_region\":\n                        TaxRegion = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"net_terms\":\n                        NetTerms = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"collection_method\":\n                        CollectionMethod = reader.ReadElementContentAsString().ParseAsEnum<Collection>();\n                        break;\n\n                    case \"customer_notes\":\n                        CustomerNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"terms_and_conditions\":\n                        TermsAndConditions = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_reverse_charge_notes\":\n                        VatReverseChargeNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"line_items\":\n                        // overrite existing value with the Recurly API response\n                        Adjustments = new AdjustmentList();\n                        Adjustments.ReadXml(reader);\n                        break;\n\n                    case \"transactions\":\n                        // overrite existing value with the Recurly API response\n                        Transactions = new TransactionList();\n                        Transactions.ReadXml(reader);\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n\n                    case \"subtotal_after_discount_in_cents\":\n                        int s;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out s))\n                            SubtotalAfterDiscountInCents = s;\n                        break;\n\n                    case \"attempt_next_collection_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            AttemptNextCollectionAt = d;\n                        break;\n\n                    case \"recovery_reason\":\n                        RecoveryReason = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"all_line_items\":\n                        AllLineItemsLink = reader.ReadElementContentAsString();\n                        break;\n\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"invoice\"); // Start: invoice\n\n            xmlWriter.WriteElementString(\"customer_notes\", CustomerNotes);\n            xmlWriter.WriteElementString(\"terms_and_conditions\", TermsAndConditions);\n            xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", VatReverseChargeNotes);\n            xmlWriter.WriteElementString(\"po_number\", PoNumber);\n\n            if (CollectionMethod == Collection.Manual)\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n\n                if (NetTerms.HasValue)\n                    xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n            }\n            else if (CollectionMethod == Collection.Automatic)\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n            }\n           \n            xmlWriter.WriteEndElement(); // End: invoice\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Invoice: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var invoice = obj as Invoice;\n            return invoice != null && Equals(invoice);\n        }\n\n        public bool Equals(Invoice invoice)\n        {\n            return Uuid == invoice.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Invoices\n    {\n        public static RecurlyList<Invoice> List(string accountCode)\n        {\n            return new InvoiceList(\"/accounts/\" + Uri.EscapeUriString(accountCode) + \"/invoices\");\n        }\n\n        public static RecurlyList<Invoice> List()\n        {\n            return new InvoiceList(Invoice.UrlPrefix);\n        }\n\n        public static RecurlyList<Invoice> List(Invoice.InvoiceState state)\n        {\n            return new InvoiceList(Invoice.UrlPrefix + \"?state=\" + state.ToString().EnumNameToTransportCase());\n        }\n\n        /// <summary>\n        /// Look up an Invoice.\n        /// </summary>\n        /// <param name=\"invoiceNumber\">Invoice Number</param>\n        /// <returns></returns>\n        public static Invoice Get(int invoiceNumber)\n        {\n            return Get(Convert.ToString(invoiceNumber));\n        }\n\n        /// <summary>\n        /// Look up an Invoice.\n        /// </summary>\n        /// <param name=\"invoiceNumber\">Invoice Number</param>\n        /// <returns></returns>\n        public static Invoice Get(string invoiceNumberWithPrefix)\n        {\n            var invoice = new Invoice();\n            \n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Invoice.UrlPrefix + invoiceNumberWithPrefix,\n                invoice.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : invoice;\n        }\n\n        /// <summary>\n        /// Create an Invoice if there are outstanding charges on an account. If there are no outstanding\n        /// charges, null is returned.\n        /// </summary>\n        /// <param name=\"accountCode\">Account code</param>\n        /// <returns></returns>\n        [Obsolete(\"Deprecated, please use the Create instance method on the Invoice object\")] \n        public static Invoice Create(string accountCode)\n        {\n            var invoice = new Invoice();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeUriString(accountCode) + Invoice.UrlPrefix,\n                invoice.ReadXml);\n\n            return (int)statusCode == ValidationException.HttpStatusCode ? null : invoice;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class MeasuredUnit : RecurlyEntity {\n\n        public string DisplayName { get; set; }\n        public string Description { get; set; }\n        public string Name { get; set; } \n        public long Id { get; private set; }\n\n        internal const string UrlPrefix = \"/measured_units/\";\n\n        internal MeasuredUnit()\n        {\n        }\n\n        internal MeasuredUnit(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        public MeasuredUnit(String name, String displayName, String description)\n        {\n            Name = name;\n            DisplayName = displayName;\n            Description = description;\n        }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + Id;\n        }\n\n        /// <summary>\n        /// Create a new measured unit in Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing measured unit in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Id.ToString()),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Deletes this measured unit\n        /// </summary>\n        public void Delete()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeUriString(Id.ToString()));\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of invoice element, get out of here\n                if (reader.Name == \"measured_unit\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        Id = Convert.ToInt64(reader.ReadElementContentAsString());\n                        break;\n             \n                    case \"display_name\":\n                        DisplayName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"measured_unit\");\n\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"display_name\", DisplayName);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n  \n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Measured Unit: \" + Id;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var invoice = obj as Invoice;\n            return invoice != null && Equals(invoice);\n        }\n\n        public bool Equals(MeasuredUnit measuredUnit)\n        {\n            return Id == measuredUnit.Id;\n        }\n\n        public override int GetHashCode()\n        {\n            return Id.GetHashCode();\n        }\n\n        #endregion\n    }\n\n    public sealed class MeasuredUnits\n    {\n        /// <summary>\n        /// Lists measured units\n        /// </summary>\n        public static RecurlyList<MeasuredUnit> List()\n        {\n            return new MeasuredUnitList(\"/measured_units/\");\n        }\n\n        /// <summary>\n        /// Look up a Measured Unit.\n        /// </summary>\n        /// <param name=\"measuredUnitId\">MeasuredUnit id</param>\n        /// <returns></returns>\n        public static MeasuredUnit Get(long measuredUnitId)\n        {\n            var measuredUnit = new MeasuredUnit();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                MeasuredUnit.UrlPrefix + measuredUnitId,\n                measuredUnit.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : measuredUnit;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class Plan : RecurlyEntity\n    {\n        public enum IntervalUnit\n        {\n            Days,\n            Months\n        }\n\n        public string PlanCode { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string SuccessUrl { get; set; }\n        public string CancelUrl { get; set; }\n\n        public bool? DisplayDonationAmounts { get; set; }\n        public bool? DisplayQuantity { get; set; }\n        public bool? DisplayPhoneNumber { get; set; }\n        public bool? BypassHostedConfirmation { get; set; }\n\n        public string UnitName { get; set; }\n        public string PaymentPageTOSLink { get; set; }\n\n        public int PlanIntervalLength { get; set; }\n        public IntervalUnit PlanIntervalUnit { get; set; }\n\n        public int TrialIntervalLength { get; set; }\n        public IntervalUnit TrialIntervalUnit { get; set; }\n\n        public string AccountingCode { get; set; }\n        public string SetupFeeAccountingCode { get; set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        public int? TotalBillingCycles { get; set; }\n\n        public bool? TaxExempt { get; set; }\n\n        public string TaxCode { get; set; }\n\n        public bool? TrialRequiresBillingInfo { get; set; }\n\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n        public Adjustment.RevenueSchedule? SetupFeeRevenueScheduleType { get; set; }\n\n        private AddOnList _addOns;\n\n        public RecurlyList<AddOn> AddOns\n        {\n            get\n            {\n                if (_addOns == null)\n                {\n                    var url = UrlPrefix + Uri.EscapeUriString(PlanCode) + \"/add_ons/\";\n                    _addOns = new AddOnList(url);\n                }\n                return _addOns;\n            }\n        }\n\n        private Dictionary<string, int> _unitAmountInCents;\n        /// <summary>\n        /// A dictionary of currencies and values for the subscription amount\n        /// </summary>\n        public Dictionary<string, int> UnitAmountInCents\n        {\n            get { return _unitAmountInCents ?? (_unitAmountInCents = new Dictionary<string, int>()); }\n        }\n\n        private Dictionary<string, int> _setupFeeInCents;\n        /// <summary>\n        /// A dictionary of currency and values for the setup fee\n        /// </summary>\n        public Dictionary<string, int> SetupFeeInCents\n        {\n            get { return _setupFeeInCents ?? (_setupFeeInCents = new Dictionary<string, int>()); }\n        }\n\n        internal const string UrlPrefix = \"/plans/\";\n\n        #region Constructors\n        internal Plan()\n        {\n        }\n\n        internal Plan(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        public Plan(string planCode, string name)\n        {\n            PlanCode = planCode;\n            Name = name;\n        }\n\n        #endregion\n\n        /// <summary>\n        /// Create a new plan in Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing plan in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(PlanCode),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Deletes this plan, making it inactive\n        /// </summary>\n        public void Deactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete, UrlPrefix + Uri.EscapeUriString(PlanCode));\n        }\n\n        /// <summary>\n        /// Returns an new add on associated with this plan.\n        /// </summary>\n        /// <param name=\"addOnCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <returns></returns>\n        public AddOn NewAddOn(string addOnCode, string name)\n        {\n            var a = new AddOn(PlanCode, addOnCode, name);\n            return a;\n        }\n\n        public AddOn GetAddOn(string addOnCode)\n        {\n            var addOn = new AddOn();\n\n            var status = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(PlanCode) + \"/add_ons/\" + Uri.EscapeUriString(addOnCode),\n                addOn.ReadXml);\n\n            if (status != HttpStatusCode.OK) return null;\n\n            // PlanCode is needed to update the AddOn\n            // TODO: need a cleaner way of getting the plan code from xml\n            //       should be using the hrefs of the resources\n            addOn.PlanCode = PlanCode;\n\n            return addOn;\n        }\n\n        #region Read and Write XML documents\n\n        internal void ReadXmlSetupFee(XmlTextReader reader)\n        {\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"setup_fee_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    SetupFeeInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal void ReadXmlUnitAmount(XmlTextReader reader)\n        {\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"unit_amount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    UnitAmountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            UnitAmountInCents.Clear();\n            SetupFeeInCents.Clear();\n\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"plan\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        PlanCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"success_url\":\n                        SuccessUrl = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"cancel_url\":\n                        CancelUrl = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"display_donation_amounts\":\n                        DisplayDonationAmounts = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"display_quantity\":\n                        DisplayQuantity = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"display_phone_number\":\n                        DisplayPhoneNumber = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"bypass_hosted_confirmation\":\n                        BypassHostedConfirmation = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"unit_name\":\n                        UnitName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"payment_page_tos_link\":\n                        PaymentPageTOSLink = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"plan_interval_length\":\n                        PlanIntervalLength = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"plan_interval_unit\":\n                        PlanIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();\n                        break;\n\n                    case \"trial_interval_length\":\n                        TrialIntervalLength = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"trial_interval_unit\":\n                        TrialIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"setup_fee_accounting_code\":\n                        SetupFeeAccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        ReadXmlUnitAmount(reader);\n                        break;\n\n                    case \"setup_fee_in_cents\":\n                        ReadXmlSetupFee(reader);\n                        break;\n\n                    case \"total_billing_cycles\":\n                        int totalBillingCycles;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out totalBillingCycles))\n                            TotalBillingCycles = totalBillingCycles;\n                        break;\n\n                    case \"trial_requires_billing_info\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            TrialRequiresBillingInfo = b;\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n\n                    case \"setup_fee_revenue_schedule_tye\":\n                        SetupFeeRevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"plan\");\n\n            xmlWriter.WriteElementString(\"plan_code\", PlanCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n            xmlWriter.WriteStringIfValid(\"accounting_code\", AccountingCode);\n            xmlWriter.WriteStringIfValid(\"setup_fee_accounting_code\", SetupFeeAccountingCode);\n            if (PlanIntervalLength > 0)\n            {\n                xmlWriter.WriteElementString(\"plan_interval_unit\", PlanIntervalUnit.ToString().EnumNameToTransportCase());\n                xmlWriter.WriteElementString(\"plan_interval_length\", PlanIntervalLength.AsString());\n            }\n            if (TrialIntervalLength > 0)\n            {\n                xmlWriter.WriteElementString(\"trial_interval_unit\", TrialIntervalUnit.ToString().EnumNameToTransportCase());\n                xmlWriter.WriteElementString(\"trial_interval_length\", TrialIntervalLength.AsString());\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"setup_fee_in_cents\", SetupFeeInCents, pair => pair.Key, pair => pair.Value.AsString());\n\n            xmlWriter.WriteIfCollectionHasAny(\"unit_amount_in_cents\", UnitAmountInCents, pair => pair.Key, pair => pair.Value.AsString());\n\n            if (TotalBillingCycles.HasValue && TotalBillingCycles > 0)\n                xmlWriter.WriteElementString(\"total_billing_cycles\", TotalBillingCycles.Value.AsString());\n\n            xmlWriter.WriteStringIfValid(\"unit_name\", UnitName);\n\n            if (DisplayDonationAmounts.HasValue)\n                xmlWriter.WriteElementString(\"display_donation_amounts\", DisplayDonationAmounts.Value.AsString());\n\n            if (DisplayQuantity.HasValue)\n                xmlWriter.WriteElementString(\"display_quantity\", DisplayQuantity.Value.AsString());\n\n            if (DisplayPhoneNumber.HasValue)\n                xmlWriter.WriteElementString(\"display_phone_number\", DisplayPhoneNumber.Value.AsString());\n\n            if (BypassHostedConfirmation.HasValue)\n                xmlWriter.WriteElementString(\"bypass_hosted_confirmation\", BypassHostedConfirmation.Value.AsString());\n\n            if (TaxExempt.HasValue)\n                xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.Value.AsString());\n\n            if (TrialRequiresBillingInfo.HasValue)\n                xmlWriter.WriteElementString(\"trial_requires_billing_info\", TrialRequiresBillingInfo.Value.AsString());\n\n            xmlWriter.WriteStringIfValid(\"success_url\", SuccessUrl);\n            xmlWriter.WriteStringIfValid(\"cancel_url\", CancelUrl);\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            if (SetupFeeRevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"setup_fee_revenue_schedule_type\", SetupFeeRevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement();\n        }\n\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Plan: \" + PlanCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var plan = obj as Plan;\n            return plan != null && Equals(plan);\n        }\n\n        public bool Equals(Plan plan)\n        {\n            return PlanCode == plan.PlanCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return PlanCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Plans\n    {\n        /// <summary>\n        /// Retrieves a list of all active plans\n        /// </summary>\n        /// <returns></returns>\n        public static RecurlyList<Plan> List()\n        {\n            return List(null);\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Plan> List(FilterCriteria filter)\n        {\n            filter = filter == null ? FilterCriteria.Instance : filter;\n            return new PlanList(Plan.UrlPrefix + \"?\" + filter.ToNamedValueCollection().ToString());\n        }\n\n        /// <summary>\n        /// Retrieves a Plan\n        /// </summary>\n        /// <param name=\"planCode\"></param>\n        /// <returns></returns>\n        public static Plan Get(string planCode)\n        {\n            var plan = new Plan();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Plan.UrlPrefix + Uri.EscapeUriString(planCode),\n                plan.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : plan;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n\n    /// <summary>\n    /// Represents subscriptions for accounts\n    /// </summary>\n    public class Subscription : RecurlyEntity\n    {\n        // changed to flags based on https://dev.recurly.com/docs/list-subscriptions saying Subscriptions can be in multiple states\n        [Flags]\n        // The currently valid Subscription States\n        public enum SubscriptionState : short\n        {\n            All = 0,\n            Active = 1,\n            Canceled = 2,\n            Expired = 4,\n            Future = 8,\n            InTrial = 16,\n            Live = 32,\n            PastDue = 64,\n            Pending = 128,\n            Open    = 256,\n            Failed  = 512,\n        }\n\n        public enum ChangeTimeframe : short\n        {\n            Now,\n            Renewal\n        }\n\n        public enum RefundType : short\n        {\n            Full,\n            Partial,\n            None\n        }\n\n        public Address Address\n        {\n            get { return _address ?? (_address = new Address()); }\n            set { _address = value; }\n        }\n        private Address _address;\n\n        private string _accountCode;\n        private Account _account;\n        /// <summary>\n        /// Account in Recurly\n        /// </summary>\n        public Account Account\n        {\n            get { return _account ?? (_account = Accounts.Get(_accountCode)); }\n        }\n\n        private string _invoiceNumber;\n        private Invoice _invoice;\n        /// <summary>\n        /// </summary>\n        public Invoice Invoice\n        {\n            get { return _invoice ?? (_invoice = Invoices.Get(_invoiceNumber)); }\n        }\n\n        private Plan _plan;\n\n        public Plan Plan\n        {\n            get { return _plan ?? (_plan = Plans.Get(PlanCode)); }\n            set\n            {\n                _plan = value;\n                PlanCode = value.PlanCode;\n            }\n        }\n\n        public string PlanCode { get; private set; }\n\n        private ShippingAddress _shippingAddress;\n\n        public ShippingAddress ShippingAddress\n        {\n            get { return _shippingAddress; }\n            set\n            {\n                if (value.Id.HasValue)\n                {\n                    ShippingAddressId = value.Id.Value;\n                }\n                _shippingAddress = value;\n            }\n        }\n\n        public long? ShippingAddressId { get; set; }\n\n        public string Uuid { get; private set; }\n\n        public SubscriptionState State { get; private set; }\n\n        /// <summary>\n        /// Unit amount per quantity.  Leave null to keep as is. Set to override plan's default amount.\n        /// </summary>\n        public int? UnitAmountInCents { get; set; }\n\n        public string Currency { get; set; }\n        public int Quantity { get; set; }\n\n        public bool? Bulk { get; set; }\n\n        /// <summary>\n        /// Date the subscription was last updated.\n        /// </summary>\n        public DateTime? UpdatedAt { get; private set; }\n        /// <summary>\n        /// Date the subscription started.\n        /// </summary>\n        public DateTime? ActivatedAt { get; private set; }\n        /// <summary>\n        /// If set, the date the subscriber canceled their subscription.\n        /// </summary>\n        public DateTime? CanceledAt { get; private set; }\n        /// <summary>\n        /// If set, the subscription will expire/terminate on this date.\n        /// </summary>\n        public DateTime? ExpiresAt { get; private set; }\n        /// <summary>\n        /// Date the current invoice period started.\n        /// </summary>\n        public DateTime? CurrentPeriodStartedAt { get; private set; }\n        /// <summary>\n        /// The subscription is paid until this date. Next invoice date.\n        /// </summary>\n        public DateTime? CurrentPeriodEndsAt { get; private set; }\n        /// <summary>\n        /// Date the trial started, if the subscription has a trial.\n        /// </summary>\n        public DateTime? TrialPeriodStartedAt { get; private set; }\n        /// <summary>\n        /// Date the Bank Account has been authorized for this subscription\n        /// </summary>\n        public DateTime? BankAccountAuthorizedAt { get; set; }\n\n        /// <summary>\n        /// Date the trial ends, if the subscription has/had a trial.\n        ///\n        /// This may optionally be set on new subscriptions to specify an exact time for the\n        /// subscription to commence.  The subscription will be active and in \"trial\" until\n        /// this date.\n        /// </summary>\n        public DateTime? TrialPeriodEndsAt\n        {\n            get { return _trialPeriodEndsAt; }\n            set\n            {\n                if (ActivatedAt.HasValue)\n                    throw new InvalidOperationException(\"Cannot set TrialPeriodEndsAt on existing subscriptions.\");\n\n                _trialPeriodEndsAt = value;\n            }\n        }\n        private DateTime? _trialPeriodEndsAt;\n\n        /// <summary>\n        /// If set, the subscription will begin in the future on this date.\n        /// The subscription will apply the setup fee and trial period, unless the plan has no trial.\n        /// </summary>\n        public DateTime? StartsAt { get; set; }\n\n        /// <summary>\n        /// Represents pending changes to the subscription\n        /// </summary>\n        public Subscription PendingSubscription { get; private set; }\n        public string NoBillingInfoReason { get; private set; }\n\n        /// <summary>\n        /// If true, this is a \"pending subscription\" object and no changes are allowed\n        /// </summary>\n        private bool IsPendingSubscription { get; set; }\n\n        private Coupon _coupon;\n        private string _couponCode;\n\n        private Coupon[] _coupons;\n        private string[] _couponCodes;\n\n        /// <summary>\n        /// Optional coupon for the subscription\n        /// </summary>\n        public Coupon Coupon\n        {\n            get { return _coupon ?? (_coupon = Recurly.Coupons.Get(_couponCode)); }\n            set\n            {\n                _coupon = value;\n                _couponCode = value.CouponCode;\n            }\n        }\n\n        /// <summary>\n        /// Optional coupons for the subscription\n        /// </summary>\n        public Coupon[] Coupons\n        {\n            get {\n                if (_coupons == null)\n                {\n                    _coupons = new Coupon[_couponCodes.Length];\n                }\n\n                if ( _coupons.Length == 0)\n                {\n\n                    for (int i = 0; i<_couponCodes.Length; i++)\n                    {\n                        _coupons[i] = Recurly.Coupons.Get(_couponCodes[i]);\n                    }\n                }\n\n                return _coupons;\n            }\n            set {\n                _coupons = value;\n                _couponCodes = new string[_coupons.Length];\n                for (int i = 0; i<_coupons.Length; i++)\n                {\n                    _couponCodes[i] = _coupons[i].CouponCode;\n                }\n            }\n        }\n\n        /// <summary>\n        /// List of add ons for this subscription\n        /// </summary>\n        public SubscriptionAddOnList AddOns\n        {\n            get { return _addOns ?? (_addOns = new SubscriptionAddOnList(this)); }\n            set { _addOns = value; }\n        }\n        private SubscriptionAddOnList _addOns;\n\n        /// <summary>\n        /// The invoice generated when calling the Preview method\n        /// </summary>\n        public Invoice InvoicePreview { get; private set; }\n        public int? TotalBillingCycles { get; set; }\n        public int? RemainingBillingCycles { get; private set; }\n        public DateTime? FirstRenewalDate { get; set; }\n\n        internal const string UrlPrefix = \"/subscriptions/\";\n\n        public string CollectionMethod { get; set; }\n        public int? NetTerms { get; set; }\n        public string PoNumber { get; set; }\n\n        /// <summary>\n        /// Amount of tax or VAT within the transaction, in cents.\n        /// </summary>\n        public int? TaxInCents { get; private set; }\n\n        /// <summary>\n        /// Tax type as \"vat\" for VAT or \"usst\" for US Sales Tax.\n        /// </summary>\n        public string TaxType { get; private set; }\n\n        /// <summary>\n        /// Tax rate that will be applied to this subscription.\n        /// </summary>\n        public decimal? TaxRate { get; private set; }\n\n        /// <summary>\n        /// Determines if this object exists in the Recurly API\n        /// </summary>\n        internal bool _saved;\n\n        internal bool _preview;\n\n        public string CustomerNotes { get; set; }\n        public string TermsAndConditions { get; set; }\n        public string VatReverseChargeNotes { get; set; }\n        /// <summary>\n        /// True if the subscription started from a gift card.\n        /// </summary>\n        public bool StartedWithGiftCard { get; private set; }\n        /// <summary>\n        /// The timestamp representing when the subscription was converted from a gift card.\n        /// </summary>\n        public DateTime? ConvertedAt { get; private set; }\n\n        /// <summary>\n        /// Optionally set true to denote that this subscription was imported from a trial.\n        /// </summary>\n        public bool? ImportedTrial { get; set; }\n\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n\n        internal Subscription()\n        {\n            IsPendingSubscription = false;\n        }\n\n        internal Subscription(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        /// <summary>\n        /// Creates a new subscription object\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"plan\"></param>\n        /// <param name=\"currency\"></param>\n        public Subscription(Account account, Plan plan, string currency)\n        {\n            _accountCode = account.AccountCode;\n            _account = account;\n            Plan = plan;\n            Currency = currency;\n            Quantity = 1;\n        }\n\n        /// <summary>\n        /// Creates a new subscription object, with coupon\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"plan\"></param>\n        /// <param name=\"currency\"></param>\n        /// <param name=\"couponCode\"></param>\n        public Subscription(Account account, Plan plan, string currency, string couponCode)\n        {\n            _accountCode = account.AccountCode;\n            _account = account;\n            Plan = plan;\n            Currency = currency;\n            Quantity = 1;\n            _couponCode = couponCode;\n        }\n\n        public Subscription(string planCode)\n        {\n            PlanCode = planCode;\n            Quantity = 1;\n        }\n\n        /// <summary>\n        /// Creates a new subscription on Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteSubscriptionXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Request that an update to a subscription take place\n        /// </summary>\n        /// <param name=\"timeframe\">when the update should occur: now (default) or at renewal</param>\n        public void ChangeSubscription(ChangeTimeframe timeframe)\n        {\n            Client.WriteXmlDelegate writeXmlDelegate;\n\n            if (ChangeTimeframe.Renewal == timeframe)\n                writeXmlDelegate = WriteChangeSubscriptionAtRenewalXml;\n            else\n                writeXmlDelegate = WriteChangeSubscriptionNowXml;\n\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid),\n                writeXmlDelegate,\n                ReadXml);\n        }\n\n        public void ChangeSubscription()\n        {\n            ChangeSubscription(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// Cancel an active subscription.  The subscription will not renew, but will continue to be active\n        /// through the remainder of the current term.\n        /// </summary>\n        public void Cancel()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/cancel\",\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Reactivate a canceled subscription.  The subscription will renew at the end of its current term.\n        /// </summary>\n        public void Reactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/reactivate\",\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Terminates the subscription immediately.\n        /// </summary>\n        /// <param name=\"refund\"></param>\n        public void Terminate(RefundType refund)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/terminate?refund=\" + refund.ToString().EnumNameToTransportCase(),\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Transforms this object into a preview Subscription applied to the account.\n        /// </summary>\n        /// <param name=\"timeframe\">ChangeTimeframe.Now (default) or at Renewal</param>\n        public void Preview(ChangeTimeframe timeframe)\n        {\n            if (_saved)\n            {\n                throw new Recurly.RecurlyException(\"Cannot preview an existing subscription.\");\n            }\n\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"preview\",\n                WriteSubscriptionXml,\n                ReadXml);\n\n            // this method does not save the object\n            _saved = false;\n        }\n\n        public void Preview()\n        {\n            Preview(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// Preview the changes associated with the current subscription\n        /// </summary>\n        /// <param name=\"timeframe\">ChangeTimeframe.Now (default) or at Renewal</param>\n        public virtual Subscription PreviewChange(ChangeTimeframe timeframe)\n        {\n            if (!_saved)\n            {\n                throw new Recurly.RecurlyException(\"Must have an existing subscription to preview changes.\");\n            }\n\n            Client.WriteXmlDelegate writeXmlDelegate;\n\n            if (ChangeTimeframe.Renewal == timeframe)\n                writeXmlDelegate = WriteChangeSubscriptionAtRenewalXml;\n            else\n                writeXmlDelegate = WriteChangeSubscriptionNowXml;\n\n            var previewSubscription = new Subscription();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/preview\",\n                writeXmlDelegate,\n                previewSubscription.ReadPreviewXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : previewSubscription;\n        }\n\n        public virtual Subscription PreviewChange()\n        {\n            return PreviewChange(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// For an active subscription, this will pause the subscription until the specified date.\n        /// </summary>\n        /// <param name=\"nextRenewalDate\">The specified time the subscription will be postponed</param>\n        /// <param name=\"bulk\">bulk = false (default) or true to bypass the 60 second wait while postponing</param>\n        public void Postpone(DateTime nextRenewalDate, bool bulk = false)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/postpone?next_renewal_date=\" + nextRenewalDate.ToString(\"s\") + \"&bulk=\" + bulk.ToString().ToLower(),\n                ReadXml);\n        }\n\n        public bool UpdateNotes(Dictionary<string, string> notes)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/notes\",\n                WriteSubscriptionNotesXml(notes),\n                ReadXml);\n\n            CustomerNotes = notes[\"CustomerNotes\"];\n            TermsAndConditions = notes[\"TermsAndConditions\"];\n            VatReverseChargeNotes = notes[\"VatReverseChargeNotes\"];\n\n            return true;\n        }\n\n        public RecurlyList<CouponRedemption> GetRedemptions()\n        {\n            var coupons = new CouponRedemptionList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + \"/redemptions/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        #region Read and Write XML documents\n\n        internal void ReadPlanXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"plan\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        PlanCode = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal void ReadPreviewXml(XmlTextReader reader)\n        {\n            _preview = true;\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            _saved = true;\n\n            string href;\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"subscription\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime dateVal;\n                Int32 billingCycles;\n\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                            _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"plan\":\n                        ReadPlanXml(reader);\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<SubscriptionState>();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"activated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            ActivatedAt = dateVal;\n                        break;\n\n                    case \"canceled_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CanceledAt = dateVal;\n                        break;\n\n                    case \"expires_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            ExpiresAt = dateVal;\n                        break;\n\n                    case \"updated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            UpdatedAt = dateVal; ;\n                        break;\n\n                    case \"current_period_started_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CurrentPeriodStartedAt = dateVal;\n                        break;\n\n                    case \"current_period_ends_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CurrentPeriodEndsAt = dateVal;\n                        break;\n\n                    case \"trial_started_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            TrialPeriodStartedAt = dateVal;\n                        break;\n\n                    case \"trial_ends_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            _trialPeriodEndsAt = dateVal;\n                        break;\n\n                    case \"bank_account_authorized_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            BankAccountAuthorizedAt = dateVal;\n                        break;\n\n                    case \"subscription_add_ons\":\n                        // overwrite existing list with what came back from Recurly\n                        AddOns = new SubscriptionAddOnList(this);\n                        AddOns.ReadXml(reader);\n                        break;\n\n                    case \"invoice\":\n                        href = reader.GetAttribute(\"href\");\n                        if (!href.IsNullOrEmpty())\n                            _invoiceNumber = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        else\n                            InvoicePreview = new Invoice(reader);\n                        break;\n\n                    case \"pending_subscription\":\n                        PendingSubscription = new Subscription { IsPendingSubscription = true };\n                        PendingSubscription.ReadPendingSubscription(reader);\n                        // TODO test all returned properties are read\n                        break;\n\n                    case \"collection_method\":\n                        CollectionMethod = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"net_terms\":\n                        NetTerms = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"po_number\":\n                        PoNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"total_billing_cycles\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out billingCycles))\n                            TotalBillingCycles = billingCycles;\n                        break;\n\n                    case \"remaining_billing_cycles\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out billingCycles))\n                            RemainingBillingCycles = billingCycles;\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"customer_notes\":\n                        CustomerNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"terms_and_conditions\":\n                        TermsAndConditions = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_reverse_charge_notes\":\n                        VatReverseChargeNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n                    case \"started_with_gift\":\n                        StartedWithGiftCard = reader.ReadElementContentAsBoolean();\n                        break;\n                    case \"converted_at\":\n                        DateTime date;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out date))\n                        {\n                            ConvertedAt = date;\n                        }\n                        break;\n                    case \"no_billing_info_reason\":\n                        NoBillingInfoReason = reader.ReadElementContentAsString();\n                        break;\n                    case \"imported_trial\":\n                        ImportedTrial = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n\n        protected void ReadPendingSubscription(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"pending_subscription\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan\":\n                        ReadPlanXml(reader);\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"subscription_add_ons\":\n                        AddOns = new SubscriptionAddOnList(this);\n                        AddOns.ReadXml(reader);\n                        break;\n                }\n            }\n        }\n\n        internal void WriteSubscriptionXml(XmlTextWriter xmlWriter)\n        {\n            WriteSubscriptionXml(xmlWriter, false);\n        }\n\n        internal void WriteEmbeddedSubscriptionXml(XmlTextWriter xmlWriter)\n        {\n            WriteSubscriptionXml(xmlWriter, true);\n        }\n\n\n        internal void WriteSubscriptionXml(XmlTextWriter xmlWriter, bool embedded)\n        {\n            xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n            xmlWriter.WriteElementString(\"plan_code\", PlanCode);\n\n            if (!embedded)\n            {\n                // <account> and billing info\n                Account.WriteXml(xmlWriter);\n                xmlWriter.WriteElementString(\"currency\", Currency);\n                xmlWriter.WriteElementString(\"customer_notes\", CustomerNotes);\n                xmlWriter.WriteElementString(\"terms_and_conditions\", TermsAndConditions);\n                xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", VatReverseChargeNotes);\n                xmlWriter.WriteElementString(\"po_number\", PoNumber);\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"subscription_add_ons\", AddOns);\n\n            xmlWriter.WriteStringIfValid(\"coupon_code\", _couponCode);\n\n            if (_couponCodes != null && _couponCodes.Length != 0) {\n                xmlWriter.WriteStartElement(\"coupon_codes\");\n                foreach (var _coupon_code in _couponCodes)\n                {\n                    xmlWriter.WriteElementString(\"coupon_code\", _coupon_code);\n                }\n                xmlWriter.WriteEndElement();\n            }\n\n            if (UnitAmountInCents.HasValue)\n                xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.Value.AsString());\n\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n\n            if (TrialPeriodEndsAt.HasValue)\n                xmlWriter.WriteElementString(\"trial_ends_at\", TrialPeriodEndsAt.Value.ToString(\"s\"));\n\n            if (BankAccountAuthorizedAt.HasValue)\n                xmlWriter.WriteElementString(\"bank_account_authorized_at\", BankAccountAuthorizedAt.Value.ToString(\"s\"));\n\n            if (StartsAt.HasValue)\n                xmlWriter.WriteElementString(\"starts_at\", StartsAt.Value.ToString(\"s\"));\n\n            if (TotalBillingCycles.HasValue)\n                xmlWriter.WriteElementString(\"total_billing_cycles\", TotalBillingCycles.Value.AsString());\n\n            if (FirstRenewalDate.HasValue)\n                xmlWriter.WriteElementString(\"first_renewal_date\", FirstRenewalDate.Value.ToString(\"s\"));\n\n            if (Bulk.HasValue)\n                xmlWriter.WriteElementString(\"bulk\", Bulk.ToString().ToLower());\n\n            if (CollectionMethod.Like(\"manual\"))\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n\n                if (NetTerms.HasValue)\n                    xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n            }\n            else if (CollectionMethod.Like(\"automatic\"))\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n\n            if (ShippingAddressId.HasValue)\n            {\n                xmlWriter.WriteElementString(\"shipping_address_id\", ShippingAddressId.Value.ToString());\n            }\n\n            if (ImportedTrial.HasValue)\n            {\n                xmlWriter.WriteElementString(\"imported_trial\", ImportedTrial.Value.ToString().ToLower());\n            }\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement(); // End: subscription\n        }\n\n        protected void WriteChangeSubscriptionNowXml(XmlTextWriter xmlWriter)\n        {\n            WriteChangeSubscriptionXml(xmlWriter, ChangeTimeframe.Now);\n        }\n\n        protected void WriteChangeSubscriptionAtRenewalXml(XmlTextWriter xmlWriter)\n        {\n            WriteChangeSubscriptionXml(xmlWriter, ChangeTimeframe.Renewal);\n        }\n\n        protected void WriteChangeSubscriptionXml(XmlTextWriter xmlWriter, ChangeTimeframe timeframe)\n        {\n            xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n            xmlWriter.WriteElementString(\"timeframe\", timeframe.ToString().EnumNameToTransportCase());\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n            xmlWriter.WriteStringIfValid(\"plan_code\", PlanCode);\n            xmlWriter.WriteIfCollectionHasAny(\"subscription_add_ons\", AddOns);\n            xmlWriter.WriteStringIfValid(\"coupon_code\", _couponCode);\n\n            if (_couponCodes != null && _couponCodes.Length != 0) {\n                xmlWriter.WriteStartElement(\"coupon_codes\");\n                foreach (var _coupon_code in _couponCodes)\n                {\n                    xmlWriter.WriteElementString(\"coupon_code\", _coupon_code);\n                }\n                xmlWriter.WriteEndElement();\n            }\n\n\n            if (UnitAmountInCents.HasValue)\n                xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.Value.AsString());\n\n            if (CollectionMethod.Like(\"manual\"))\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n                xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n                xmlWriter.WriteElementString(\"po_number\", PoNumber);\n            }\n            else if (CollectionMethod.Like(\"automatic\"))\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n\n            xmlWriter.WriteEndElement(); // End: subscription\n        }\n\n        internal Client.WriteXmlDelegate WriteSubscriptionNotesXml(Dictionary<string, string> notes)\n        {\n            return delegate(XmlTextWriter xmlWriter)\n            {\n                xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n                xmlWriter.WriteElementString(\"customer_notes\", notes[\"CustomerNotes\"]);\n                xmlWriter.WriteElementString(\"terms_and_conditions\", notes[\"TermsAndConditions\"]);\n                xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", notes[\"VatReverseChargeNotes\"]);\n\n                xmlWriter.WriteEndElement(); // End: subscription\n            };\n        }\n\n        #endregion\n\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Subscription: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var sub = obj as Subscription;\n            return sub != null && Equals(sub);\n        }\n\n        public bool Equals(Subscription subscription)\n        {\n            return Uuid == subscription.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Subscriptions\n    {\n        /// <summary>\n        /// Returns a list of recurly subscriptions\n        ///\n        /// A subscription will belong to more than one state.\n        /// </summary>\n        /// <param name=\"state\">State of subscriptions to return, defaults to \"live\"</param>\n        /// <returns></returns>\n        public static RecurlyList<Subscription> List(Subscription.SubscriptionState state = Subscription.SubscriptionState.Live)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Returns a list of recurly subscriptions\n        ///\n        /// A subscription will belong to more than one state.\n        /// </summary>\n        /// <param name=\"state\">State of subscriptions to return, defaults to \"live\"</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Subscription> List(Subscription.SubscriptionState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            return new SubscriptionList(Subscription.UrlPrefix + \"?\" + parameters.ToString());\n        }\n\n        public static Subscription Get(string uuid)\n        {\n            var s = new Subscription();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Subscription.UrlPrefix + Uri.EscapeUriString(uuid),\n                s.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : s;\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\nusing System.Text.RegularExpressions;\n\nnamespace Recurly\n{\n    public class Transaction : RecurlyEntity\n    {\n        // The currently valid Transaction States\n        public enum TransactionState : short\n        {\n            All = 0,\n            Unknown,\n            Success,\n            Failed,\n            Voided,\n            Declined,\n            Scheduled,\n            Pending,\n            Processing,\n            Error,\n            Chargeback\n        }\n\n        public enum TransactionType : short\n        {\n            All = 0,\n            Unknown,\n            Authorization,\n            Purchase,\n            Refund,\n            Verify,\n            Capture\n        }\n\n        public string Uuid { get; private set; }\n        public TransactionType Action { get; set; }\n        public int AmountInCents { get; set; }\n        public int TaxInCents { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string PaymentMethod { get; set; }\n\n        public TransactionState Status { get; private set; }\n\n        public string Reference { get; set; }\n\n        public bool Test { get; private set; }\n        public bool Voidable { get; private set; }\n        public bool Refundable { get; private set; }\n\n        public string IpAddress { get; private set; }\n\n        public string CCVResult { get; private set; }\n        public string AvsResult { get; private set; }\n        public string AvsResultStreet { get; private set; }\n        public string AvsResultPostal { get; private set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private Account _account;\n\n        public string AccountCode { get; private set; }\n\n        public Boolean TaxExempt { get; set; }\n        public string TaxCode { get; set; }\n        public string AccountingCode { get; set; }\n        public string GatewayType { get; set; }\n        public string Origin { get; set; }\n        public string Message { get; set; }\n        public string ApprovalCode { get; set; }\n        public DateTime CollectedAt { get; set; }\n\n        public Account Account\n        {\n            get { return _account ?? (_account = Accounts.Get(AccountCode)); }\n            set\n            {\n                _account = value;\n                AccountCode = value.AccountCode;\n            }\n        }\n        public int? Invoice { get; private set; }\n        public string InvoicePrefix { get; private set; }\n\n\n        public string InvoiceNumberWithPrefix()\n        {\n            return InvoicePrefix + Convert.ToString(Invoice);\n        }\n\n        internal Transaction()\n        { }\n\n        internal Transaction(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        /// <summary>\n        /// Creates a new transaction\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"amountInCents\"></param>\n        /// <param name=\"currency\"></param>\n        public Transaction(Account account, int amountInCents, string currency)\n        {\n            Account = account;\n            AmountInCents = amountInCents;\n            Currency = currency;\n        }\n\n        /// <summary>\n        /// Creates a new transaction\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"amountInCents\"></param>\n        /// <param name=\"currency\"></param>\n        public Transaction(string accountCode, int amountInCents, string currency)\n        {\n            AccountCode = accountCode;\n            AmountInCents = amountInCents;\n            Currency = currency;\n        }\n\n        internal const string UrlPrefix = \"/transactions/\";\n\n        /// <summary>\n        /// Creates an invoice, charge, and optionally account\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n               UrlPrefix,\n               WriteXml,\n               ReadXml);\n        }\n\n        /// <summary>\n        /// Refunds a transaction\n        ///\n        /// </summary>\n        /// <param name=\"refund\">If present, the amount to refund. Otherwise it is a full refund.</param>\n        public void Refund(int? refund = null)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeUriString(Uuid) + (refund.HasValue ? \"?amount_in_cents=\" + refund.Value : \"\"),\n                ReadXml);\n        }\n\n        public Invoice GetInvoice()\n        {\n            return Invoices.Get(InvoiceNumberWithPrefix());\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if ((reader.Name == \"transaction\") &&\n                    reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                string href;\n                int amount;\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                            AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"invoice\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                        {\n                            string invoiceNumber = href.Substring(href.LastIndexOf(\"/\") + 1);\n                            MatchCollection matches = Regex.Matches(invoiceNumber, \"([^\\\\d]{2})(\\\\d+)\");\n\n                            if (matches.Count == 1)\n                            {\n                                InvoicePrefix = matches[0].Groups[1].Value;\n                                Invoice = int.Parse(matches[0].Groups[2].Value);\n                            }\n                            else\n                            {\n                                Invoice = int.Parse(invoiceNumber);\n                            }\n                        }\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"action\":\n                        Action = reader.ReadElementContentAsString().ParseAsEnum<TransactionType>();\n                        break;\n\n                    case \"amount_in_cents\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            AmountInCents = amount;\n                        break;\n\n                    case \"tax_in_cents\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            TaxInCents = amount;\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"payment_method\":\n                        PaymentMethod = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"status\":\n                        var state = reader.ReadElementContentAsString();\n                        Status = \"void\" == state ? TransactionState.Voided : state.ParseAsEnum<TransactionState>();\n                        break;\n\n                    case \"reference\":\n                        Reference = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"test\":\n                        Test = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"voidable\":\n                        Voidable = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"refundable\":\n                        Refundable = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"ip_address\":\n                        IpAddress = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"ccv_result\":\n                        CCVResult = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result\":\n                        AvsResult = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result_street\":\n                        AvsResultStreet = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result_postal\":\n                        AvsResultPostal = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"details\":\n                        // API docs say not to load details into objects\n                        break;\n\n                    case \"gateway_type\":\n                        GatewayType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"origin\":\n                        Origin = reader.ReadElementContentAsString();\n                        break;\n                    case \"message\":\n                        Message = reader.ReadElementContentAsString();\n                        break;\n                    case \"approval_code\":\n                        ApprovalCode = reader.ReadElementContentAsString();\n                        break;\n                    case \"collected_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                        {\n                            CollectedAt = d;\n                        }\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"transaction\");\n\n            xmlWriter.WriteElementString(\"amount_in_cents\", AmountInCents.AsString());\n            xmlWriter.WriteElementString(\"currency\", Currency);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n            xmlWriter.WriteStringIfValid(\"payment_method\", PaymentMethod);\n\n            xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.AsString().ToLower());\n            xmlWriter.WriteStringIfValid(\"tax_code\", TaxCode);\n            xmlWriter.WriteStringIfValid(\"accounting_code\", AccountingCode);\n\n            if (Account != null)\n            {\n                Account.WriteXml(xmlWriter);\n            }\n\n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Transaction: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var transaction = obj as Transaction;\n            return transaction != null && Equals(transaction);\n        }\n\n        public bool Equals(Transaction transaction)\n        {\n            return Uuid == transaction.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Transactions\n    {\n        private static readonly QueryStringBuilder Build = new QueryStringBuilder();\n        /// <summary>\n        /// Lists transactions by state and type. Defaults to all.\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <param name=\"type\"></param>\n        /// <returns></returns>\n        public static RecurlyList<Transaction> List(TransactionList.TransactionState state = TransactionList.TransactionState.All,\n            TransactionList.TransactionType type = TransactionList.TransactionType.All)\n        {\n            return List(state, type, null);\n        }\n\n        /// <summary>\n        /// Lists transactions by state and type. Defaults to all.\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <param name=\"type\"></param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Transaction> List(TransactionList.TransactionState state,\n            TransactionList.TransactionType type,\n            FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            if (state != TransactionList.TransactionState.All)\n            {\n                parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            }\n            if (type != TransactionList.TransactionType.All)\n            {\n                parameters[\"type\"] = type.ToString().EnumNameToTransportCase();\n            }\n\n            return new TransactionList(Transaction.UrlPrefix + \"?\" + parameters.ToString());\n        }\n\n        public static Transaction Get(string transactionId)\n        {\n            var transaction = new Transaction();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Transaction.UrlPrefix + Uri.EscapeUriString(transactionId),\n                transaction.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : transaction;\n        }\n    }\n}\n"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// An account in Recurly.\n    ///\n    /// https://dev.recurly.com/docs/get-account\n    /// </summary>\n    public class Account : RecurlyEntity\n    {\n\n        // The currently valid account states\n        // Corrected to allow multiple states, per https://dev.recurly.com/docs/get-account\n        [Flags]\n        public enum AccountState : short\n        {\n            Closed = 1,\n            Active = 2,\n            PastDue = 4\n        }\n\n        /// <summary>\n        /// Account Code or unique ID for the account in Recurly\n        /// </summary>\n        public string AccountCode { get; private set; }\n        public AccountState State { get; private set; }\n        public string Username { get; set; }\n        public string Email { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string CompanyName { get; set; }\n        public string VatNumber { get; set; }\n        public bool? TaxExempt { get; set; }\n        public string EntityUseCode { get; set; }\n        public string AcceptLanguage { get; set; }\n        public string CcEmails { get; set; }\n        public string HostedLoginToken { get; private set; }\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n        public bool VatLocationValid { get; private set; }\n        public Address Address { get; set; }\n        public bool HasLiveSubscription { get; private set; }\n        public bool HasActiveSubscription { get; private set; }\n        public bool HasFutureSubscription { get; private set; }\n        public bool HasCanceledSubscription { get; private set; }\n        public bool HasPastDueInvoice { get; private set; }\n\n        private BillingInfo _billingInfo;\n\n        public BillingInfo BillingInfo\n        {\n            get\n            {\n                if (null != _billingInfo)\n                    return _billingInfo;\n\n                try\n                {\n                    _billingInfo = BillingInfo.Get(AccountCode);\n                }\n                catch (NotFoundException)\n                {\n                    _billingInfo = null;\n                }\n\n                return _billingInfo;\n            }\n            set\n            {\n                _billingInfo = value;\n            }\n        }\n\n        private AccountBalance _balance;\n\n        public AccountBalance Balance\n        {\n            get\n            {\n                if (_balance != null)\n                    return _balance;\n\n                try\n                {\n                    _balance = AccountBalance.Get(AccountCode);\n                }\n                catch (NotFoundException)\n                {\n                    _balance = null;\n                }\n\n                return _balance;\n            }\n            set { _balance = value; }\n        }\n\n        /// <summary>\n        /// List of shipping addresses\n        /// </summary>\n        public List<ShippingAddress> ShippingAddresses\n        {\n            get { return _shippingAddresses ?? (_shippingAddresses = new List<ShippingAddress>()); }\n            set { _shippingAddresses = value; }\n        }\n        private List<ShippingAddress> _shippingAddresses;\n\n        internal const string UrlPrefix = \"/accounts/\";\n\n        public Account(string accountCode)\n        {\n            AccountCode = accountCode;\n        }\n\n        /// <summary>\n        /// Creates a new account with required billing information\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"billingInfo\"></param>\n        public Account(string accountCode, BillingInfo billingInfo)\n        {\n            AccountCode = accountCode;\n            _billingInfo = billingInfo;\n        }\n\n        internal Account(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        internal Account(XmlTextReader xmlReader, string xmlName)\n        {\n            ReadXml(xmlReader, xmlName);\n        }\n\n        internal Account()\n        { }\n\n        /// <summary>\n        /// Delete an account's billing info.\n        /// </summary>\n        public void DeleteBillingInfo()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/billing_info\");\n            _billingInfo = null;\n        }\n\n        /// <summary>\n        /// Create a new account in Recurly\n        /// </summary>\n        public void Create()\n        {\n            // POST /accounts\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post, UrlPrefix, WriteXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing account in Recurly\n        /// </summary>\n        public void Update()\n        {\n            // PUT /accounts/<account code>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(AccountCode),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Close the account and cancel any active subscriptions (if there is one).\n        /// Note: This does not create a refund for any time remaining.\n        /// </summary>\n        public void Close()\n        {\n            Accounts.Close(AccountCode);\n            if (State.Is(AccountState.Active))\n                State ^= AccountState.Active;\n            State |= AccountState.Closed;\n        }\n\n        /// <summary>\n        /// Reopen an existing account in Recurly\n        /// </summary>\n        public void Reopen()\n        {\n            Accounts.Reopen(AccountCode);\n            if (State.Is(AccountState.Closed))\n                State ^= AccountState.Closed;\n            State |= AccountState.Active;\n        }\n\n        /// <summary>\n        /// Posts pending charges on an account\n        /// </summary>\n        public Invoice InvoicePendingCharges(Invoice invoice = null)\n        {\n            var i = invoice ?? new Invoice();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/invoices\",\n                i.WriteXml,\n                i.ReadXml);\n\n            return i;\n        }\n\n        /// <summary>\n        /// Previews a new invoice for the pending charges on an account\n        /// </summary>\n        public Invoice PreviewInvoicePendingCharges(Invoice invoice = null)\n        {\n            var i = invoice ?? new Invoice();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/invoices/preview\",\n                i.WriteXml,\n                i.ReadXml);\n\n            return i;\n        }\n\n        /// <summary>\n        /// Gets all adjustments for this account, by type\n        /// </summary>\n        /// <param name=\"type\">Adjustment type to retrieve. Optional, default: All.</param>\n        /// <param name=\"state\">State of the Adjustments to retrieve. Optional, default: Any.</param>\n        /// <returns></returns>\n        public RecurlyList<Adjustment> GetAdjustments(Adjustment.AdjustmentType type = Adjustment.AdjustmentType.All,\n            Adjustment.AdjustmentState state = Adjustment.AdjustmentState.Any)\n        {\n            var adjustments = new AdjustmentList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/adjustments/\"\n                + Build.QueryStringWith(Adjustment.AdjustmentState.Any == state ? \"\" : \"state=\" + state.ToString().EnumNameToTransportCase())\n                .AndWith(Adjustment.AdjustmentType.All == type ? \"\" : \"type=\" + type.ToString().EnumNameToTransportCase())\n                , adjustments.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : adjustments;\n        }\n\n        /// <summary>\n        /// Gets all shipping addresses\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<ShippingAddress> GetShippingAddresses()\n        {\n            var shippingAddresses = new ShippingAddressList(this);\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/shipping_addresses/\",\n                shippingAddresses.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : shippingAddresses;\n        }\n\n        /// <summary>\n        /// Returns a list of invoices for this account\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<Invoice> GetInvoices()\n        {\n            return Invoices.List(AccountCode);\n        }\n\n        /// <summary>\n        /// Returns a list of subscriptions for this account\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <returns></returns>\n        public RecurlyList<Subscription> GetSubscriptions(Subscription.SubscriptionState state = Subscription.SubscriptionState.All)\n        {\n            return new SubscriptionList(UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/subscriptions/\"\n                + Build.QueryStringWith(state.Equals(Subscription.SubscriptionState.All) ? \"\" : \"state=\" + state.ToString().EnumNameToTransportCase()));\n        }\n\n        /// <summary>\n        /// Returns a list of transactions for this account, by transaction type\n        /// </summary>\n        /// <param name=\"state\">Transactions of this state will be retrieved. Optional, default: All.</param>\n        /// <param name=\"type\">Transactions of this type will be retrieved. Optional, default: All.</param>\n        /// <returns></returns>\n        public RecurlyList<Transaction> GetTransactions(TransactionList.TransactionState state = TransactionList.TransactionState.All,\n            TransactionList.TransactionType type = TransactionList.TransactionType.All)\n        {\n            return new TransactionList(UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/transactions/\"\n                 + Build.QueryStringWith(state != TransactionList.TransactionState.All ? \"state=\" + state.ToString().EnumNameToTransportCase() : \"\")\n                   .AndWith(type != TransactionList.TransactionType.All ? \"type=\" + type.ToString().EnumNameToTransportCase() : \"\"));\n        }\n\n        public RecurlyList<Note> GetNotes()\n        {\n            return new NoteList(UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/notes/\");\n        }\n\n        /// <summary>\n        /// Returns a new adjustment (credit or charge) for this account\n        /// </summary>\n        /// <param name=\"currency\">Currency, 3-letter ISO code.</param>\n        /// <param name=\"unitAmountInCents\">Positive amount for a charge, negative amount for a credit. Max 10,000,000.</param>\n        /// <param name=\"description\">Description of the adjustment for the invoice.</param>\n        /// <param name=\"quantity\">Quantity, defaults to 1.</param>\n        /// <param name=\"accountingCode\">Accounting code. Max of 20 characters.</param>\n        /// <param name=\"taxExempt\"></param>\n        /// <returns></returns>\n        public Adjustment NewAdjustment(string currency, int unitAmountInCents, string description = \"\", int quantity = 1, string accountingCode = \"\", bool taxExempt = false)\n        {\n            // TODO All of the properties should be settable\n            return new Adjustment(AccountCode, description, currency, unitAmountInCents, quantity, accountingCode, taxExempt);\n        }\n\n        /// <summary>\n        /// Redeems a coupon on this account\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"currency\"></param>\n        /// <returns></returns>\n        public CouponRedemption RedeemCoupon(string couponCode, string currency, string subscriptionUuid = null)\n        {\n            return CouponRedemption.Redeem(AccountCode, couponCode, currency, subscriptionUuid);\n        }\n\n        /// <summary>\n        /// Returns all active coupon redemptions on this account\n        /// </summary>\n        /// <returns></returns>\n        public RecurlyList<CouponRedemption> GetActiveRedemptions()\n        {\n            var redemptions = new CouponRedemptionList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + \"/redemptions\",\n                redemptions.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : redemptions;\n        }\n\n        /// <summary>\n        /// Returns the first active coupon redemptions on this account\n        /// </summary>\n        /// <returns></returns>\n        public CouponRedemption GetActiveRedemption()\n        {\n            var activeRedemptions = GetActiveRedemptions();\n\n            if (activeRedemptions == null || activeRedemptions.Count <= 0)\n            {\n                return null;\n            }\n\n            return activeRedemptions.ToArray()[0];\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            ReadXml(reader, \"account\");\n        }\n\n        internal void ReadXml(XmlTextReader reader, string xmlName)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == xmlName && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"account_code\":\n                        AccountCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        // TODO investigate in case of incoming data representing multiple states, as https://dev.recurly.com/docs/get-account says is possible\n                        State = reader.ReadElementContentAsString().ParseAsEnum<AccountState>();\n                        break;\n\n                    case \"username\":\n                        Username = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"email\":\n                        Email = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"first_name\":\n                        FirstName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"last_name\":\n                        LastName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"company_name\":\n                        CompanyName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_number\":\n                        VatNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"entity_use_code\":\n                        EntityUseCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accept_language\":\n                        AcceptLanguage = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"cc_emails\":\n                        CcEmails = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"hosted_login_token\":\n                        HostedLoginToken = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n\n                    case \"vat_location_valid\":\n                        if (reader.GetAttribute(\"nil\") == null)\n                        {\n                            VatLocationValid = reader.ReadElementContentAsBoolean();\n                        }\n                        break;\n\n                    case \"has_live_subscription\":\n                        bool a;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out a))\n                            HasLiveSubscription = a;\n                        break;\n\n                    case \"has_active_subscription\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            HasActiveSubscription = b;\n                        break;\n\n                    case \"has_future_subscription\":\n                        bool c;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out c))\n                            HasFutureSubscription = c;\n                        break;\n\n                    case \"has_canceled_subscription\":\n                        bool d;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out d))\n                            HasCanceledSubscription = d;\n                        break;\n\n                    case \"has_past_due_invoice\":\n                        bool e;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out e))\n                            HasPastDueInvoice = e;\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, \"account\");\n        }\n\n        internal void WriteXml(XmlTextWriter xmlWriter, string xmlName)\n        {\n            xmlWriter.WriteStartElement(xmlName); // Start: account\n\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteStringIfValid(\"username\", Username);\n            xmlWriter.WriteStringIfValid(\"email\", Email);\n            xmlWriter.WriteStringIfValid(\"first_name\", FirstName);\n            xmlWriter.WriteStringIfValid(\"last_name\", LastName);\n            xmlWriter.WriteStringIfValid(\"company_name\", CompanyName);\n            xmlWriter.WriteStringIfValid(\"accept_language\", AcceptLanguage);\n            xmlWriter.WriteStringIfValid(\"vat_number\", VatNumber);\n            xmlWriter.WriteStringIfValid(\"entity_use_code\", EntityUseCode);\n            xmlWriter.WriteStringIfValid(\"cc_emails\", CcEmails);\n\n            xmlWriter.WriteIfCollectionHasAny(\"shipping_addresses\", ShippingAddresses);\n\n            if (TaxExempt.HasValue)\n                xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.Value.AsString());\n\n            if (_billingInfo != null)\n                _billingInfo.WriteXml(xmlWriter);\n\n            if (Address != null)\n                Address.WriteXml(xmlWriter);\n\n            xmlWriter.WriteEndElement(); // End: account\n        }\n        /// <summary>\n        /// This serializer is used for redeeming a gift card on\n        /// this account.\n        /// </summary>\n        /// <param name=\"xmlWriter\"></param>\n        internal void WriteGiftCardRedeemXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"recipient_account\"); // Start: recipient_account\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteEndElement(); // End: recipient_account\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account: \" + AccountCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var a = obj as Account;\n            return a != null && Equals(a);\n        }\n\n        public bool Equals(Account account)\n        {\n            return account != null && AccountCode == account.AccountCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return AccountCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Accounts\n    {\n        internal const string UrlPrefix = \"/accounts/\";\n\n        /// <summary>\n        /// Lookup a Recurly account\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <returns></returns>\n        public static Account Get(string accountCode)\n        {\n            var account = new Account();\n            // GET /accounts/<account code>\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(accountCode),\n                account.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : account;\n        }\n\n        /// <summary>\n        /// Close the account and cancel any active subscriptions (if there is one).\n        /// Note: This does not create a refund for any time remaining.\n        /// </summary>\n        /// <param name=\"accountCode\">Account Code</param>\n        public static void Close(string accountCode)\n        {\n            // DELETE /accounts/<account code>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                Account.UrlPrefix + Uri.EscapeDataString(accountCode));\n        }\n\n        /// <summary>\n        /// Reopen an existing account in recurly.\n        /// </summary>\n        /// <param name=\"accountCode\">Account Code</param>\n        public static void Reopen(string accountCode)\n        {\n            // PUT /accounts/<account code>/reopen\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                Account.UrlPrefix + Uri.EscapeDataString(accountCode) + \"/reopen\");\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <returns></returns>\n        public static RecurlyList<Account> List(Account.AccountState state = Account.AccountState.Active)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Account> List(Account.AccountState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            return new AccountList(Account.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class AccountBalance : RecurlyEntity\n    {\n        public bool PastDue { get; internal set; }\n        public Dictionary<string, int> BalanceInCents = new Dictionary<string, int>();\n        private const string UrlPrefix = \"/accounts/\";\n\n        public static AccountBalance Get(string accountCode)\n        {\n            var accountBalance = new AccountBalance();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(accountCode) + \"/balance\", accountBalance.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : accountBalance;\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"account_balance\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"past_due\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            PastDue = b;\n\n                        break;\n                    case \"balance_in_cents\":\n                        while (reader.Read())\n                        {\n                            if (reader.Name == \"balance_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                                break;\n\n                            if (reader.NodeType == XmlNodeType.Element)\n                            {\n                                BalanceInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class AddOn : RecurlyEntity\n    {\n        public enum Type\n        {\n            Fixed,\n            Usage\n        }\n\n        public string PlanCode { get; set; }\n        public string AddOnCode { get; set; }\n        public string Name { get; set; }\n        public int DefaultQuantity { get; set; }\n        public bool? DisplayQuantityOnHostedPage { get; set; }\n        public string TaxCode { get; set; }\n        public bool? Optional { get; set; }\n        public string AccountingCode { get; set; }\n        public long? MeasuredUnitId { get; set; }\n        public Type? AddOnType { get; set; }\n        public Usage.Type? UsageType { get; set; }\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n\n        private Dictionary<string, int> _unitAmountInCents;\n        /// <summary>\n        /// A dictionary of currencies and values for the add-on amount\n        /// </summary>\n        public Dictionary<string, int> UnitAmountInCents\n        {\n            get { return _unitAmountInCents ?? (_unitAmountInCents = new Dictionary<string, int>()); }\n        }\n\n        private const string UrlPrefix = \"/plans/\";\n        private const string UrlPostfix = \"/add_ons/\";\n\n        #region Constructors\n        internal AddOn()\n        {\n        }\n\n        internal AddOn(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        internal AddOn(string planCode, string addOnCode, string name)\n        {\n            PlanCode = planCode;\n            AddOnCode = addOnCode;\n            Name = name;\n        }\n\n        #endregion\n\n        /// <summary>\n        /// Creates an addon\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeDataString(PlanCode) + UrlPostfix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing add on in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(PlanCode) + UrlPostfix + Uri.EscapeDataString(AddOnCode),\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Deletes this add on, making it inactive\n        /// </summary>\n        public void Delete()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeDataString(PlanCode) + UrlPostfix + Uri.EscapeDataString(AddOnCode));\n        }\n\n\n        #region Read and Write XML documents\n\n        internal void ReadXmlUnitAmount(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"unit_amount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    UnitAmountInCents.Remove(reader.Name);\n                    UnitAmountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"add_on\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"add_on_code\":\n                        AddOnCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"display_quantity_on_hosted_page\":\n                        DisplayQuantityOnHostedPage = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"default_quantity\":\n                        DefaultQuantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"optional\":\n                        Optional = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        ReadXmlUnitAmount(reader);\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"add_on_type\":\n                        AddOnType = reader.ReadElementContentAsString().ParseAsEnum<Type>();\n                        break;\n\n                    case \"usage_type\":\n                        UsageType = reader.ReadElementContentAsString().ParseAsEnum<Usage.Type>();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"add_on\");\n\n            xmlWriter.WriteElementString(\"add_on_code\", AddOnCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"default_quantity\", DefaultQuantity.AsString());\n            xmlWriter.WriteElementString(\"accounting_code\", AccountingCode);\n\n            if (AddOnType.HasValue)\n                xmlWriter.WriteElementString(\"add_on_type\", AddOnType.Value.ToString().EnumNameToTransportCase());\n\n            if (UsageType.HasValue)\n                xmlWriter.WriteElementString(\"usage_type\", UsageType.Value.ToString().EnumNameToTransportCase());\n\n            if (MeasuredUnitId.HasValue)\n                xmlWriter.WriteElementString(\"measured_unit_id\", MeasuredUnitId.ToString());\n\n            if (DisplayQuantityOnHostedPage.HasValue)\n                xmlWriter.WriteElementString(\"display_quantity_on_hosted_page\", DisplayQuantityOnHostedPage.Value.AsString());\n\n            if (Optional.HasValue)\n                xmlWriter.WriteElementString(\"optional\", Optional.Value.AsString());\n\n            xmlWriter.WriteIfCollectionHasAny(\"unit_amount_in_cents\", UnitAmountInCents, pair => pair.Key,\n                pair => pair.Value.AsString());\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Plan: \" + PlanCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var plan = obj as Plan;\n            return plan != null && Equals(plan);\n        }\n\n        public bool Equals(Plan plan)\n        {\n            return PlanCode == plan.PlanCode;\n        }\n        #endregion\n    }\n}\n", "using System;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// Represents adjustments - credits and charges - on accounts.\n    /// </summary>\n    public class Adjustment : RecurlyEntity\n    {\n        // The currently valid adjustment types\n        public enum AdjustmentType : short\n        {\n            All = 0,\n            Charge,\n            Credit\n        }\n\n        public enum AdjustmentState : short\n        {\n            Any = 0,\n            Pending,\n            Invoiced\n        }\n\n        public enum RevenueSchedule : short\n        {\n            Evenly = 0,\n            Never,\n            AtRangeStart,\n            AtRangeEnd\n        }\n\n        public string AccountCode { get; private set; }\n        public string Uuid { get; protected set; }\n        public string Description { get; set; }\n        public string AccountingCode { get; set; }\n        public string ProductCode { get; private set; }\n        public string Origin { get; protected set; }\n        public int UnitAmountInCents { get; set; }\n        public int Quantity { get; set; }\n        public int DiscountInCents { get; protected set; }\n        public int TaxInCents { get; protected set; }\n        public int TotalInCents { get; protected set; }\n        public string Currency { get; set; }\n        public bool TaxExempt { get; set; }\n        public string TaxCode { get; set; }\n        public RevenueSchedule? RevenueScheduleType { get; set; }\n\n        public string TaxType { get; private set; }\n        public decimal? TaxRate { get; private set; }\n        public string TaxRegion { get; private set; }\n\n        public AdjustmentState State { get; protected set; }\n\n        public DateTime StartDate { get; protected set; }\n        public DateTime? EndDate { get; protected set; }\n\n        public DateTime? CreatedAt { get ; protected set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private const string UrlPrefix = \"/accounts/\";\n        private const string UrlPostfix = \"/adjustments/\";\n\n        private const int AccountingCodeMaxLength = 20;\n        private const int UnitAmountMax = 10000000;\n\n        #region Constructors\n\n\n        public Adjustment(int unitAmountInCents, string description, int quantity = 1)\n        {\n            UnitAmountInCents = unitAmountInCents;\n            Description = description;\n            Quantity = quantity;\n        }\n\n        internal Adjustment()\n        {\n            \n        }\n\n        internal Adjustment(string accountCode, string description, string currency, int unitAmountInCents, int quantity, string accountingCode = \"\", bool taxExempt = false)\n        {\n            AccountCode = accountCode;\n            Description = description;\n            Currency = currency;\n            UnitAmountInCents = unitAmountInCents;\n            Quantity = quantity;\n            AccountingCode = accountingCode;\n            TaxExempt = taxExempt;\n            State = AdjustmentState.Pending;\n\n            if (!AccountingCode.IsNullOrEmpty() && AccountingCode.Length > AccountingCodeMaxLength)\n                throw new PropertyOutOfRangeException(\"AccountingCode\",\n                    string.Format(\"Adjustment's AccountingCode can be at most {0} characters in length.\", AccountingCodeMaxLength));\n\n            if(UnitAmountInCents > UnitAmountMax)\n                throw new PropertyOutOfRangeException(\"UnitAmountInCents\",\n                    string.Format(\"Adjustment's UnitAmountInCents may be at most {0}.\", UnitAmountMax));\n        }\n\n        internal Adjustment(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        #endregion\n\n\n        /// <summary>\n        /// Create a new adjustment in Recurly\n        /// </summary>\n        public void Create()\n        {\n            // POST /accounts/<account code>/adjustments\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeDataString(AccountCode) + UrlPostfix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Deletes an adjustment from an account.\n        /// \n        /// Adjustments can only be deleted when not invoiced\n        /// </summary>\n        public void Delete()\n        {\n            // DELETE /adjustments/<uuid>\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPostfix + Uri.EscapeDataString(Uuid));\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"adjustment\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n                switch (reader.Name)\n                { \n                    case \"account\":\n                        var href = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"product_code\":\n                        ProductCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"origin\":\n                        Origin = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"discount_in_cents\":\n                        DiscountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"total_in_cents\":\n                        TotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"tax_region\":\n                        TaxRegion = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"start_date\":\n                        DateTime startDate;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out startDate))\n                            StartDate = startDate;                        \n                        break;\n\n                    case \"end_date\":\n                        DateTime endDate;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out endDate))\n                            EndDate = endDate;\n                        break;\n\n                    case \"created_at\":\n                        DateTime createdAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out createdAt))\n                            CreatedAt = createdAt;\n                        break;\n\n                    case \"updated_at\":\n                        DateTime updatedAt;\n                        if(DateTime.TryParse(reader.ReadElementContentAsString(), out updatedAt))\n                            UpdatedAt = updatedAt;\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<AdjustmentState>();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, false);\n        }\n\n        internal void WriteEmbeddedXml(XmlTextWriter xmlWriter)\n        {\n            WriteXml(xmlWriter, true);\n        }\n\n        internal void WriteXml(XmlTextWriter xmlWriter, bool embedded = false)\n        {\n            xmlWriter.WriteStartElement(\"adjustment\"); // Start: adjustment\n            xmlWriter.WriteElementString(\"description\", Description);\n            xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.AsString());\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n            xmlWriter.WriteElementString(\"accounting_code\", AccountingCode);\n            xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.AsString());\n            if (!embedded)\n                xmlWriter.WriteElementString(\"currency\", Currency);\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n            xmlWriter.WriteEndElement(); // End: adjustment\n        }\n\n        #endregion\n    }\n\n    public class Adjustments\n    {\n        public static Adjustment Get(string uuid)\n        {\n            var adjustment = new Adjustment();\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                \"/adjustments/\" + Uri.EscapeDataString(uuid),\n                adjustment.ReadXml);\n            return adjustment;\n        }\n    }\n}\n", "using System;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Xml;\r\n\r\nnamespace Recurly\r\n{\r\n    public class BillingInfo : RecurlyEntity\r\n    {\r\n        public enum CreditCardType : short\r\n        {\r\n            Invalid,\r\n            Visa,\r\n            MasterCard,\r\n            AmericanExpress,\r\n            Discover,\r\n            JCB,\r\n            Danokrt,\r\n            Maestro,\r\n            Forbrugsforeningen,\r\n            Laser,\r\n            Unknown\r\n        }\r\n\r\n        public enum BankAccountType : short\r\n        {\r\n            Checking,\r\n            Savings\r\n        }\r\n\r\n        /// <summary>\r\n        /// Account Code or unique ID for the account in Recurly\r\n        /// </summary>\r\n        public string AccountCode { get; private set; }\r\n        public string FirstName { get; set; }\r\n        public string LastName { get; set; }\r\n        public string Address1 { get; set; }\r\n        public string Address2 { get; set; }\r\n        public string City { get; set; }\r\n        /// <summary>\r\n        /// 2-letter state or province preferred\r\n        /// </summary>\r\n        public string State { get; set; }\r\n        /// <summary>\r\n        /// 2-letter ISO country code\r\n        /// </summary>\r\n        public string Country { get; set; }\r\n        /// <summary>\r\n        /// Zip code or Postal code\r\n        /// </summary>\r\n        public string PostalCode { get; set; }\r\n        public string PhoneNumber { get; set; }\r\n        /// <summary>\r\n        /// VAT Numbers\r\n        /// </summary>\r\n        public string VatNumber { get; set; }\r\n        public string IpAddress { get; set; }\r\n        public string IpAddressCountry { get; private set; }\r\n\r\n\r\n        /// <summary>\r\n        /// Used to override default currency\r\n        /// setting this to a known value may save you a verification\r\n        /// </summary>\r\n        public string Currency { get; set; }\r\n\r\n        /// <summary>\r\n        /// Credit Card Number, first six digits\r\n        /// </summary>\r\n        public string FirstSix { get; set; }\r\n\r\n        /// <summary>\r\n        /// Credit Card Number, last four digits\r\n        /// </summary>\r\n        public string LastFour { get; set; }\r\n\r\n        public CreditCardType CardType { get; set; }\r\n        public int ExpirationMonth { get; set; }\r\n        public int ExpirationYear { get; set; }\r\n\r\n        public string NameOnAccount { get; set; }\r\n        public string RoutingNumber { get; set; }\r\n        public string AccountNumber { get; set; }\r\n        public BankAccountType AccountType { get; set; }\r\n\r\n        public string Company { get; set; }\r\n\r\n        /// <summary>\r\n        /// Paypal Billing Agreement ID\r\n        /// </summary>\r\n        public string PaypalBillingAgreementId { get; set; }\r\n\r\n        /// <summary>\r\n        /// Amazon Billing Agreement ID\r\n        /// </summary>\r\n        public string AmazonBillingAgreementId { get; set; }\r\n\r\n        private string _cardNumber;\r\n\r\n        /// <summary>\r\n        /// Credit card number\r\n        /// </summary>\r\n        public string CreditCardNumber\r\n        {\r\n            get { return _cardNumber; }\r\n            set\r\n            {\r\n                _cardNumber = value;\r\n                CreditCardType type;\r\n                if (value.IsValidCreditCardNumber(out type))\r\n                {\r\n                    var digits = value.Where(char.IsDigit).AsString();\r\n                    CardType = type;\r\n                    FirstSix = digits.Substring(0, 6);\r\n                    LastFour = digits.Last(4);\r\n                }\r\n                else\r\n                {\r\n                    CardType = CreditCardType.Invalid;\r\n                    FirstSix = LastFour = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        public string VerificationValue { get; set; }\r\n\r\n        public string TokenId { get; set; }\r\n\r\n        /// <summary>\r\n        /// Timestamp representing the last update of this billing info\r\n        /// </summary>\r\n        public DateTime UpdatedAt { get; set; }\r\n\r\n        private const string UrlPrefix = \"/accounts/\";\r\n        private const string UrlPostfix = \"/billing_info\";\r\n\r\n        internal BillingInfo(string accountCode) : this()\r\n        {\r\n            AccountCode = accountCode;\r\n        }\r\n\r\n        public BillingInfo(Account account) : this()\r\n        {\r\n            AccountCode = account.AccountCode;\r\n        }\r\n\r\n        private BillingInfo()\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Lookup a Recurly account's billing info\r\n        /// </summary>\r\n        /// <param name=\"accountCode\"></param>\r\n        /// <returns></returns>\r\n        public static BillingInfo Get(string accountCode)\r\n        {\r\n            var billingInfo = new BillingInfo();\r\n\r\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\r\n                BillingInfoUrl(accountCode),\r\n                billingInfo.ReadXml);\r\n\r\n            return statusCode == HttpStatusCode.NotFound ? null : billingInfo;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update an account's billing info in Recurly\r\n        /// </summary>\r\n        public void Create()\r\n        {\r\n            Update();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Update an account's billing info in Recurly\r\n        /// </summary>\r\n        public void Update()\r\n        {\r\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\r\n                BillingInfoUrl(AccountCode),\r\n                WriteXml,\r\n                ReadXml);\r\n        }\r\n\r\n        private static string BillingInfoUrl(string accountCode)\r\n        {\r\n            return UrlPrefix + Uri.EscapeDataString(accountCode) + UrlPostfix;\r\n        }\r\n\r\n        internal override void ReadXml(XmlTextReader reader)\r\n        {\r\n            while (reader.Read())\r\n            {\r\n                // End of billing_info element, get out of here\r\n                if (reader.Name == \"billing_info\" && reader.NodeType == XmlNodeType.EndElement)\r\n                    break;\r\n\r\n                if (reader.NodeType != XmlNodeType.Element) continue;\r\n\r\n                switch (reader.Name)\r\n                {\r\n                    case \"account\":\r\n                        var href = reader.GetAttribute(\"href\");\r\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\r\n                        break;\r\n\r\n                    case \"first_name\":\r\n                        FirstName = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"last_name\":\r\n                        LastName = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"name_on_account\":\r\n                        NameOnAccount = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"company\":\r\n                        Company = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"address1\":\r\n                        Address1 = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"address2\":\r\n                        Address2 = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"city\":\r\n                        City = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"state\":\r\n                        State = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"zip\":\r\n                        PostalCode = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"country\":\r\n                        Country = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"phone\":\r\n                        PhoneNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"vat_number\":\r\n                        VatNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"ip_address\":\r\n                        IpAddress = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"ip_address_country\":\r\n                        IpAddressCountry = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"card_type\":\r\n                        CardType = reader.ReadElementContentAsString().ParseAsEnum<CreditCardType>();\r\n                        break;\r\n\r\n                    case \"year\":\r\n                        ExpirationYear = reader.ReadElementContentAsInt();\r\n                        break;\r\n\r\n                    case \"month\":\r\n                        ExpirationMonth = reader.ReadElementContentAsInt();\r\n                        break;\r\n\r\n                    case \"first_six\":\r\n                        FirstSix = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"last_four\":\r\n                        LastFour = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"paypal_billing_agreement_id\":\r\n                        PaypalBillingAgreementId = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"amazon_billing_agreement_id\":\r\n                        AmazonBillingAgreementId = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"routing_number\":\r\n                        RoutingNumber = reader.ReadElementContentAsString();\r\n                        break;\r\n\r\n                    case \"account_type\":\r\n                        AccountType = reader.ReadElementContentAsString().ParseAsEnum<BankAccountType>();\r\n                        break;\r\n                    case \"updated_at\":\r\n                        DateTime d;\r\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\r\n                        {\r\n                            UpdatedAt = d;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        internal override void WriteXml(XmlTextWriter xmlWriter)\r\n        {\r\n            xmlWriter.WriteStartElement(\"billing_info\"); // Start: billing_info\r\n\r\n            //if a recurly js token is supplied we don't want to send billing info here\r\n            if (string.IsNullOrEmpty(TokenId))\r\n            {\r\n                xmlWriter.WriteStringIfValid(\"first_name\", FirstName);\r\n                xmlWriter.WriteStringIfValid(\"last_name\", LastName);\r\n                xmlWriter.WriteStringIfValid(\"name_on_account\", NameOnAccount);\r\n                xmlWriter.WriteStringIfValid(\"address1\", Address1);\r\n                xmlWriter.WriteStringIfValid(\"address2\", Address2);\r\n                xmlWriter.WriteStringIfValid(\"city\", City);\r\n                xmlWriter.WriteStringIfValid(\"state\", State);\r\n                xmlWriter.WriteStringIfValid(\"zip\", PostalCode);\r\n                xmlWriter.WriteStringIfValid(\"country\", Country);\r\n                xmlWriter.WriteStringIfValid(\"phone\", PhoneNumber);\r\n                xmlWriter.WriteStringIfValid(\"vat_number\", VatNumber);\r\n                xmlWriter.WriteStringIfValid(\"currency\", Currency);\r\n\r\n                if (!IpAddress.IsNullOrEmpty())\r\n                    xmlWriter.WriteElementString(\"ip_address\", IpAddress);\r\n                else\r\n                    Debug.WriteLine(\"Recurly Client Library: Recording IP Address is strongly recommended.\");\r\n\r\n                if (!CreditCardNumber.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"number\", CreditCardNumber);\r\n                    xmlWriter.WriteElementString(\"month\", ExpirationMonth.AsString());\r\n                    xmlWriter.WriteElementString(\"year\", ExpirationYear.AsString());\r\n\r\n                    xmlWriter.WriteStringIfValid(\"verification_value\", VerificationValue);\r\n                }\r\n\r\n                if (!AccountNumber.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"routing_number\", RoutingNumber);\r\n                    xmlWriter.WriteElementString(\"account_number\", AccountNumber);\r\n                    xmlWriter.WriteElementString(\"account_type\", AccountType.ToString().EnumNameToTransportCase());\r\n                }\r\n\r\n                if (!PaypalBillingAgreementId.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"paypal_billing_agreement_id\", PaypalBillingAgreementId);\r\n                }\r\n\r\n                if (!AmazonBillingAgreementId.IsNullOrEmpty())\r\n                {\r\n                    xmlWriter.WriteElementString(\"amazon_billing_agreement_id\", AmazonBillingAgreementId);\r\n                }\r\n            }\r\n\r\n            xmlWriter.WriteStringIfValid(\"token_id\", TokenId);\r\n\r\n            xmlWriter.WriteEndElement(); // End: billing_info\r\n        }\r\n\r\n        #region Object Overrides\r\n\r\n        public override string ToString()\r\n        {\r\n            return \"Recurly Billing Info : \" + AccountCode;\r\n        }\r\n\r\n        public override bool Equals(object obj)\r\n        {\r\n            var a = obj as BillingInfo;\r\n            return a != null && Equals(a);\r\n        }\r\n\r\n        public bool Equals(BillingInfo billingInfo)\r\n        {\r\n            return AccountCode == billingInfo.AccountCode;\r\n        }\r\n\r\n        public override int GetHashCode()\r\n        {\r\n            return AccountCode?.GetHashCode() ?? 0;\r\n        }\r\n\r\n        #endregion\r\n    }\r\n}\r\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class Coupon : RecurlyEntity\n    {\n        public enum CouponState : short\n        {\n            All = 0,\n            Redeemable,\n            Expired,\n            Inactive,\n            MaxedOut\n        }\n\n        public enum CouponDiscountType\n        {\n            Percent,\n            Dollars,\n            FreeTrial\n        }\n\n        public enum CouponDuration\n        {\n            Forever,\n            SingleUse,\n            Temporal\n        }\n\n        public enum CouponTemporalUnit\n        {\n            Day,\n            Week,\n            Month,\n            Year\n        }\n\n        public enum RedemptionResourceType\n        {\n            Account,\n            Subscription\n        }\n\n        public enum CouponType\n        {\n            Bulk,\n            SingleCode,\n            UniqueCode\n        }\n\n        public int Id { get; set; }\n\n        public RecurlyList<CouponRedemption> Redemptions { get; private set; }\n\n        public string CouponCode { get; set; }\n        public string Name { get; set; }\n        public string HostedDescription { get; set; }\n        public string InvoiceDescription { get; set; }\n        public DateTime? RedeemByDate { get; set; }\n        public bool? SingleUse { get; set; }\n        public int? AppliesForMonths { get; set; }\n        public CouponDuration? Duration { get; set; }\n        public CouponTemporalUnit? TemporalUnit { get; set; }\n        public int? TemporalAmount { get; set; }\n        public int? MaxRedemptions { get; set; }\n        public bool? AppliesToAllPlans { get; set; }\n        public bool? AppliesToNonPlanCharges { get; set; }\n        public int? MaxRedemptionsPerAccount { get; set; }\n        public string UniqueCodeTemplate { get; set; }\n        public int? FreeTrialAmount { get; set; }\n        public CouponTemporalUnit? FreeTrialUnit { get; set; }\n\n        public CouponDiscountType DiscountType { get; private set; }\n        public CouponState State { get; private set; }\n        public RedemptionResourceType RedemptionResource { get; set; }\n        public CouponType Type { get; set; } = CouponType.SingleCode;\n\n        /// <summary>\n        /// A dictionary of currencies and discounts\n        /// </summary>\n        public Dictionary<string, int> DiscountInCents { get; private set; }\n        public int? DiscountPercent { get; private set; }\n\n        private int? NumberOfUniqueCodes { get; set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + CouponCode;\n        }\n\n        /// <summary>\n        /// A list of plans to limit the coupon\n        /// </summary>\n\n        private List<string> _plans;\n\n        public List<string> Plans\n        {\n            get { return _plans ?? (_plans = new List<string>()); }\n        }\n\n        #region Constructors\n\n        internal Coupon()\n        {\n        }\n\n        internal Coupon(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        /// <summary>\n        /// Creates a coupon given a code, name, and discount type\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountType\"></param>\n        public Coupon(string couponCode, string name, CouponDiscountType discountType)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountType = discountType;\n        }\n\n        /// <summary>\n        /// Creates a coupon, discounted by a fixed amount\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountInCents\">dictionary of currencies and discounts</param>\n        public Coupon(string couponCode, string name, Dictionary<string, int> discountInCents)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountInCents = discountInCents;\n            DiscountType = CouponDiscountType.Dollars;\n        }\n\n        /// <summary>\n        /// Creates a coupon, discounted by percentage\n        /// </summary>\n        /// <param name=\"couponCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <param name=\"discountPercent\"></param>\n        public Coupon(string couponCode, string name, int discountPercent)\n        {\n            CouponCode = couponCode;\n            Name = name;\n            DiscountPercent = discountPercent;\n            DiscountType = CouponDiscountType.Percent;\n        }\n\n        #endregion\n\n        internal const string UrlPrefix = \"/coupons/\";\n\n        /// <summary>\n        /// Creates this coupon.\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(CouponCode),\n                WriteXmlUpdate);\n        }\n\n        public void Restore()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(CouponCode) + \"/restore\",\n                WriteXmlUpdate);\n        }\n\n        /// <summary>\n        /// Deactivates this coupon.\n        /// </summary>\n        public void Deactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeDataString(CouponCode));\n        }\n\n        public RecurlyList<Coupon> GetUniqueCouponCodes()\n        {\n            var coupons = new CouponList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                memberUrl() + \"/unique_coupon_codes/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        public RecurlyList<Coupon> Generate(int amount)\n        {\n            NumberOfUniqueCodes = amount;\n            var coupons = new CouponList();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/generate/\",\n                this.WriteGenerateXml,\n                coupons.ReadFromLocation);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of coupon element, get out of here\n                if (reader.Name == \"coupon\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime date;\n                int m;\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        int id;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out id))\n                            Id = id;\n                        break;\n                    case \"coupon_code\":\n                        CouponCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<CouponState>();\n                        break;\n\n                    case \"discount_type\":\n                        DiscountType = reader.ReadElementContentAsString().ParseAsEnum<CouponDiscountType>();\n                        break;\n\n                    case \"redemption_resource\":\n                        RedemptionResource = reader.ReadElementContentAsString().ParseAsEnum<RedemptionResourceType>();\n                        break;\n\n                    case \"discount_percent\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            DiscountPercent = m;\n                        break;\n\n                    case \"redeem_by_date\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out date))\n                            RedeemByDate = date;\n                        break;\n\n                    case \"single_use\":\n                        SingleUse = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"applies_for_months\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            AppliesForMonths = m;\n                        break;\n\n                    case \"duration\":\n                        Duration = reader.ReadElementContentAsString().ParseAsEnum<CouponDuration>();\n                        break;\n\n                    case \"temporal_unit\":\n                        var element_content = reader.ReadElementContentAsString();\n                        if (element_content != \"\")\n                            TemporalUnit = element_content.ParseAsEnum<CouponTemporalUnit>();\n                        break;\n\n                    case \"temporal_amount\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            TemporalAmount = m;\n                        break;\n\n                    case \"max_redemptions\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            MaxRedemptions = m;\n                        break;\n\n                    case \"applies_to_all_plans\":\n                        AppliesToAllPlans = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"applies_to_non_plan_charges\":\n                        AppliesToNonPlanCharges = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"max_redemptions_per_account\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            MaxRedemptionsPerAccount = m;\n                        break;\n\n                    case \"description\":\n                        HostedDescription = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"invoice_description\":\n                        InvoiceDescription = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unique_code_template\":\n                        UniqueCodeTemplate = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"coupon_type\":\n                        var type_content = reader.ReadElementContentAsString();\n                        if (type_content != \"\")\n                            Type = type_content.ParseAsEnum<CouponType>();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"plan_codes\":\n                        ReadXmlPlanCodes(reader);\n                        break;\n\n                    case \"discount_in_cents\":\n                        ReadXmlDiscounts(reader);\n                        break;\n\n                    case \"free_trial_unit\":\n                        var trial_unit_content = reader.ReadElementContentAsString();\n                        if (trial_unit_content != \"\")\n                            FreeTrialUnit = trial_unit_content.ParseAsEnum<CouponTemporalUnit>();\n                        break;\n\n                    case \"free_trial_amount\":\n                        if (int.TryParse(reader.ReadElementContentAsString(), out m))\n                            FreeTrialAmount = m;\n                        break;\n                }\n            }\n        }\n\n        internal void ReadXmlPlanCodes(XmlTextReader reader)\n        {\n            Plans.Clear();\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"plan_codes\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        Plans.Add(reader.ReadElementContentAsString());\n                        break;\n\n                }\n            }\n        }\n\n        internal void ReadXmlDiscounts(XmlTextReader reader)\n        {\n            DiscountInCents = new Dictionary<string, int>();\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"discount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    DiscountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n\n            xmlWriter.WriteElementString(\"coupon_code\", CouponCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"hosted_description\", HostedDescription);\n            xmlWriter.WriteElementString(\"invoice_description\", InvoiceDescription);\n\n            if (RedeemByDate.HasValue)\n                xmlWriter.WriteElementString(\"redeem_by_date\", RedeemByDate.Value.ToString(\"s\"));\n\n            if (SingleUse.HasValue)\n                xmlWriter.WriteElementString(\"single_use\", SingleUse.Value.AsString());\n\n            if (AppliesForMonths.HasValue)\n                xmlWriter.WriteElementString(\"applies_for_months\", AppliesForMonths.Value.AsString());\n            if (Duration != null)\n                xmlWriter.WriteElementString(\"duration\", Duration.ToString().EnumNameToTransportCase());\n            if (TemporalUnit != null)\n                xmlWriter.WriteElementString(\"temporal_unit\", TemporalUnit.ToString().EnumNameToTransportCase());\n            if (TemporalAmount.HasValue)\n                xmlWriter.WriteElementString(\"temporal_amount\", TemporalAmount.Value.ToString());\n\n            if (AppliesToAllPlans.HasValue)\n                xmlWriter.WriteElementString(\"applies_to_all_plans\", AppliesToAllPlans.Value.AsString());\n\n            if (AppliesToNonPlanCharges.HasValue)\n                xmlWriter.WriteElementString(\"applies_to_non_plan_charges\", AppliesToNonPlanCharges.Value.AsString());\n\n            if (MaxRedemptions.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions\", MaxRedemptions.Value.AsString());\n\n            if (MaxRedemptionsPerAccount.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions_per_account\", MaxRedemptionsPerAccount.Value.AsString());\n\n            xmlWriter.WriteElementString(\"discount_type\", DiscountType.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteElementString(\"redemption_resource\", RedemptionResource.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteElementString(\"coupon_type\", Type.ToString().EnumNameToTransportCase());\n\n            if (Type == CouponType.Bulk)\n                xmlWriter.WriteElementString(\"unique_code_template\", UniqueCodeTemplate);\n\n            if (CouponDiscountType.Percent == DiscountType && DiscountPercent.HasValue)\n                xmlWriter.WriteElementString(\"discount_percent\", DiscountPercent.Value.AsString());\n\n            if (CouponDiscountType.Dollars == DiscountType)\n            {\n                xmlWriter.WriteIfCollectionHasAny(\"discount_in_cents\", DiscountInCents, pair => pair.Key,\n                    pair => pair.Value.AsString());\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"plan_codes\", Plans, s => \"plan_code\", s => s);\n\n            if (FreeTrialAmount.HasValue)\n                xmlWriter.WriteElementString(\"free_trial_amount\", FreeTrialAmount.Value.AsString());\n\n            if (FreeTrialUnit.HasValue)\n                xmlWriter.WriteElementString(\"free_trial_unit\", FreeTrialUnit.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n\n        public void WriteGenerateXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n            xmlWriter.WriteElementString(\"number_of_unique_codes\", NumberOfUniqueCodes.Value.AsString());\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        internal void WriteXmlUpdate(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"coupon\"); // Start: coupon\n\n            if (!Name.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"name\", Name);\n\n            if (!HostedDescription.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"hosted_description\", HostedDescription);\n\n            if (!InvoiceDescription.IsNullOrEmpty())\n                xmlWriter.WriteElementString(\"invoice_description\", InvoiceDescription);\n\n            if (RedeemByDate.HasValue)\n                xmlWriter.WriteElementString(\"redeem_by_date\", RedeemByDate.Value.ToString(\"s\"));\n\n            if (MaxRedemptions.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions\", MaxRedemptions.Value.AsString());\n\n            if (MaxRedemptionsPerAccount.HasValue)\n                xmlWriter.WriteElementString(\"max_redemptions_per_account\", MaxRedemptionsPerAccount.Value.AsString());\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account Coupon: \" + CouponCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var coupon = obj as Coupon;\n            return coupon != null && Equals(coupon);\n        }\n\n        public bool Equals(Coupon coupon)\n        {\n            return CouponCode == coupon.CouponCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return CouponCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Coupons\n    {\n        /// <summary>\n        /// Look up a coupon\n        /// </summary>\n        /// <param name=\"couponCode\">Coupon code</param>\n        /// <returns></returns>\n        public static Coupon Get(string couponCode)\n        {\n            var coupon = new Coupon();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Coupon.UrlPrefix + Uri.EscapeDataString(couponCode),\n                coupon.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupon;\n        }\n\n        /// <summary>\n        /// Lists coupons, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <returns></returns>\n        public static RecurlyList<Coupon> List(Coupon.CouponState state = Coupon.CouponState.All)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Lists coupons, limited to state and filtered by given criteria\n        /// </summary>\n        /// <param name=\"state\">Coupon state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Coupon> List(Coupon.CouponState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            if (state != Coupon.CouponState.All)\n            {\n                parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            }\n            return new CouponList(Coupon.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// Represents an instance where a coupon has been redeemed for a subscription\n    /// </summary>\n    public class CouponRedemption : RecurlyEntity\n    {\n\n        public string Uuid { get; private set; }\n        public string AccountCode { get; set; }\n        public string CouponCode { get; private set; }\n        public string Currency { get; set; }\n\n        public bool SingleUse { get; private set; }\n        public int TotalDiscountedInCents { get; private set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        public string State { get; private set; }\n\n        public string SubscriptionUuid {get; set; }\n\n        internal CouponRedemption(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        internal CouponRedemption()\n        {\n\n        }\n\n\n        /// <summary>\n        /// Redeem an active coupon for an account\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"currency\"></param>\n        internal static CouponRedemption Redeem(string accountCode, string couponCode, string currency, string subscriptionUuid=null)\n        {\n            var cr = new CouponRedemption {AccountCode = accountCode, Currency = currency, SubscriptionUuid = subscriptionUuid};\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n               \"/coupons/\" + Uri.EscapeDataString(couponCode) + \"/redeem\",\n               cr.WriteXml,\n               cr.ReadXml);\n\n            return cr;\n\n        }\n\n        /// <summary>\n        /// Removes a coupon from an account\n        /// </summary>\n        public void Delete()\n        {\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                \"/accounts/\" + Uri.EscapeDataString(AccountCode) +\n                \"/redemptions/\" + Uri.EscapeDataString(Uuid));\n            AccountCode = null;\n            CouponCode = null;\n            Currency = null;\n        }\n\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of coupon element, get out of here\n                if ((reader.Name == \"coupon\" || reader.Name == \"redemption\") && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                string href;\n                switch (reader.Name)\n                {\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"coupon\":\n                        href = reader.GetAttribute(\"href\");\n                        CouponCode =Uri.UnescapeDataString( href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"single_use\":\n                        SingleUse = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"total_discounted_in_cents\":\n                        int discountInCents;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out discountInCents))\n                            TotalDiscountedInCents = discountInCents;\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"subscription_uuid\":\n                        SubscriptionUuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"redemption\"); // Start: coupon\n\n            xmlWriter.WriteElementString(\"account_code\", AccountCode);\n            xmlWriter.WriteElementString(\"currency\", Currency);\n\n            xmlWriter.WriteElementString(\"subscription_uuid\", SubscriptionUuid);\n\n            xmlWriter.WriteEndElement(); // End: coupon\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Account Coupon Redemption: \" + CouponCode + \" \" + AccountCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var redemption = obj as CouponRedemption;\n            return redemption != null && Equals(redemption);\n        }\n\n        public bool Equals(CouponRedemption coupon)\n        {\n            return AccountCode == coupon.AccountCode && CouponCode == coupon.CouponCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return (AccountCode + CouponCode).GetHashCode();\n        }\n\n        #endregion\n\n        \n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\nusing Recurly.List;\n\nnamespace Recurly\n{\n    public class ExportDate : RecurlyEntity\n    {\n        internal const string UrlPrefix = \"/export_dates\";\n        public DateTime Date { get; set; }\n\n        internal ExportDate(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"export_date\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"date\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            Date = d;\n\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public class ExportFile : RecurlyEntity\n    {\n        internal const string FilesUrlPrefix = \"/export_dates/{0}/export_files/\";\n        internal const string FileUrlPrefix = FilesUrlPrefix + \"{1}\";\n        public string DownloadUrl { get; set; }\n        public string Name { get; set; }\n        public string Md5Sum { get; set; }\n        public DateTime? ExpiresAt { get; set; }\n        public ExportFile() { }\n        internal ExportFile(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"export_file\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n                    case \"expires_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            ExpiresAt = d;\n                        break;\n                    case \"download_url\":\n                        DownloadUrl = reader.ReadElementContentAsString();\n                        break;\n                    case \"md5sum\":\n                        Md5Sum = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public sealed class Exports\n    {\n        public static RecurlyList<ExportDate> ListExportDates()\n        {\n            return new ExportDateList(ExportDate.UrlPrefix);\n        }\n\n        public static RecurlyList<ExportFile> ListExportFiles(DateTime date)\n        {\n            return new ExportFileList(string.Format(ExportFile.FilesUrlPrefix, date.ToString(\"yyyy-MM-dd\")));\n        }\n\n        public static ExportFile DownloadExportFile(DateTime date, string fileName)\n        {\n            var exportFile = new ExportFile();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                string.Format(ExportFile.FileUrlPrefix, date.ToString(\"yyyy-MM-dd\"), Uri.EscapeDataString(fileName)),\n                exportFile.ReadXml);\n\n            return statusCode != HttpStatusCode.NotFound ? exportFile : null;\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    /// <summary>\n    /// An gift card in Recurly.\n    ///\n    /// https://dev.recurly.com/docs/gift-card-object\n    /// </summary>\n    public class GiftCard : RecurlyEntity\n    {\n        /// <summary>\n        /// Unique ID assigned to this gift card.\n        /// </summary>\n        public long Id { get; private set; }\n        \n        private string _accountCode;\n        private Account _account;\n\n        /// <summary>\n        /// Account details for the gifter.\n        /// This can reference an existing account_code or create\n        /// a new account using the Account objects params.\n        /// An account_code is required. If this object only has a\n        /// link to the account, it will fetch and cache it.\n        /// </summary>\n        public Account GifterAccount\n        {\n            get { return _account ?? (_account = Accounts.Get(_accountCode)); }\n            set { _account = value; }\n        }\n\n        /// <summary>\n        /// The product code of the gift card product.\n        /// </summary>\n        public string ProductCode { get; set; }\n\n        /// <summary>\n        /// The amount of the gift card.\n        /// Must match an amount on the gift card product.\n        /// </summary>\n        public int UnitAmountInCents { get; set; }\n\n        /// <summary>\n        /// The currency of the unit_amount_in_cents.\n        /// </summary>\n        public string Currency { get; set; }\n\n        /// <summary>\n        /// The unique redemption code for the gift card,\n        /// generated by Recurly.Will be 16 characters, alphanumeric,\n        /// displayed uppercase, but accepted in any case at redemption.\n        /// Used by the recipient_account to create a credit in the amount\n        /// of the unit_amount_in_cents on their account.\n        /// </summary>\n        public string RedemptionCode { get; private set; }\n\n        /// <summary>\n        /// The remaining credit on the recipient_account associated\n        /// with this gift card.Only shows once the gift card\n        /// has been redeemed. Can be used to create gift card balance\n        /// displays for your customers.\n        /// </summary>\n        public int BalanceInCents { get; set; }\n\n        /// <summary>\n        /// Block of delivery information.\n        /// </summary>\n        public Delivery Delivery { get; set; }\n\n        /// <summary>\n        /// When the gift card was purchased.\n        /// </summary>\n        public DateTime CreatedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card object was updated,\n        /// which happens upon purchase, delivery and redemption.\n        /// </summary>\n        public DateTime UpdatedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card was redeemed by the recipient.\n        /// </summary>\n        public DateTime RedeemedAt { get; private set; }\n\n        /// <summary>\n        /// When the gift card was sent to the recipient by Recurly via email,\n        /// if method was email and the \"Gift Card Delivery\" email template was enabled.\n        /// This will be empty for post delivery or email delivery \n        /// where the email template was disabled.\n        /// </summary>\n        public DateTime DeliveredAt { get; private set; }\n\n        internal const string UrlPrefix = \"/gift_cards/\";\n\n        public GiftCard(string accountCode, Delivery delivery, string productCode, int unitAmountInCents, string currency)\n        {\n            GifterAccount = new Account(accountCode);\n            ProductCode = productCode;\n            UnitAmountInCents = unitAmountInCents;\n            Currency = currency;\n            Delivery = delivery;\n        }\n\n        public GiftCard(Account gifterAccount, Delivery delivery, string productCode, int unitAmountInCents, string currency)\n        {\n            GifterAccount = gifterAccount;\n            ProductCode = productCode;\n            UnitAmountInCents = unitAmountInCents;\n            Currency = currency;\n            Delivery = delivery;\n        }\n\n        public GiftCard(string redemptionCode)\n        {\n            RedemptionCode = redemptionCode;\n        }\n\n        internal GiftCard() {}\n\n        internal GiftCard(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        /// <summary>\n        /// Create a new gift card in Recurly.\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix, WriteXml, ReadXml);\n\n            BustAttributeCache();\n        }\n\n        /// <summary>\n        /// Preview a new gift card in Recurly.\n        /// Runs validations and allows the gifter\n        /// to confirm that the delivery details provided are correct.\n        /// Does not run transactions.\n        /// </summary>\n        public void Preview()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"preview\", WriteXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Redeem this gift card on the account\n        /// with the given account code.\n        /// </summary>\n        /// <param name=\"accountCode\">The account code to redeem the card against</param>\n        public void Redeem(string accountCode)\n        {\n            var account = new Account(accountCode);\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"/\" + RedemptionCode + \"/redeem\", account.WriteGiftCardRedeemXml, ReadXml);\n        }\n\n        /// <summary>\n        /// Nulls any cached attributes so we fetch fresh ones\n        /// from the server\n        /// </summary>\n        private void BustAttributeCache()\n        {\n            _account = null;\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"gift_card\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime dateVal;\n\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        long id;\n                        if (long.TryParse(reader.ReadElementContentAsString(), out id))\n                            Id = id;\n                        break;\n                        \n                    case \"product_code\":\n                        ProductCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"redemption_code\":\n                        RedemptionCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        int amount;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            UnitAmountInCents = amount;\n                        break;\n\n                    case \"balance_in_cents\":\n                        int balance;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out balance))\n                            BalanceInCents = balance;\n                        break;\n\n                    case \"gifter_account\":\n                        string href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                        {\n                            _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        }\n                        else\n                        {\n                            GifterAccount = new Account(reader, \"gifter_account\");\n                        }\n                        break;\n\n                    case \"delivery\":\n                        Delivery = new Delivery(reader);\n                        break;\n\n                    case \"created_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CreatedAt = dateVal;\n                        break;\n\n                    case \"updated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            UpdatedAt = dateVal;\n                        break;\n\n                    case \"redeemed_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            RedeemedAt = dateVal;\n                        break;\n\n                    case \"delivered_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            DeliveredAt = dateVal;\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"gift_card\"); // Start: gift_card\n\n            xmlWriter.WriteElementString(\"product_code\", ProductCode);\n            xmlWriter.WriteElementString(\"currency\", Currency);\n            xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.ToString());\n\n            if (GifterAccount != null)\n                GifterAccount.WriteXml(xmlWriter, \"gifter_account\");\n\n            if (Delivery != null)\n                Delivery.WriteXml(xmlWriter);\n\n            xmlWriter.WriteEndElement(); // End: gift_card\n        }\n\n        /// <summary>\n        /// Redemption serializer\n        /// </summary>\n        /// <param name=\"xmlWriter\"></param>\n        internal void WriteRedemptionXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"gift_card\"); // Start: gift_card\n            xmlWriter.WriteElementString(\"redemption_code\", RedemptionCode);\n            xmlWriter.WriteEndElement(); // End: gift_card\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly GiftCard: \" + Id;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var a = obj as GiftCard;\n            return a != null && Equals(a);\n        }\n\n        public bool Equals(GiftCard giftCard)\n        {\n            return giftCard != null && Id == giftCard.Id;\n        }\n\n        public override int GetHashCode()\n        {\n            return Id.GetHashCode();\n        }\n\n        #endregion\n    }\n\n    public sealed class GiftCards\n    {\n        internal const string UrlPrefix = \"/gift_cards/\";\n\n        /// <summary>\n        /// Lookup a Recurly gift card\n        /// </summary>\n        /// <param name=\"id\">The long id of the gift card</param>\n        /// <returns></returns>\n        public static GiftCard Get(long id)\n        {\n            var giftCard = new GiftCard();\n            // GET /gift_cards/<id>\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(id.ToString()),\n                giftCard.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : giftCard;\n        }\n\n        /// <summary>\n        /// Lists gift cards\n        /// </summary>\n        /// <param name=\"gifterAccountCode\">A gifter's account code to filter by (may be null)</param>\n        /// <param name=\"recipientAccountCode\">A recipients's account code to filter by (may be null)</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<GiftCard> List(string gifterAccountCode = null, string recipientAccountCode = null, FilterCriteria filter = null)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n\n            if (gifterAccountCode != null)\n                parameters[\"gifter_account_code\"] = gifterAccountCode;\n            if (recipientAccountCode != null)\n                parameters[\"recipient_account_code\"] = recipientAccountCode;\n\n            return new GiftCardList(GiftCard.UrlPrefix + \"?\" + parameters.ToString());\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\n\nnamespace Recurly\n{\n    public class Invoice : RecurlyEntity\n    {\n        // The currently valid Invoice States\n        public enum InvoiceState\n        {\n            Open,\n            Collected,\n            Failed,\n            PastDue,\n            Processing,\n            Pending\n        }\n\n        public enum RefundOrderPriority\n        {\n            Credit,\n            Transaction\n        }\n\n        public enum Collection\n        {\n            Automatic,\n            Manual\n        }\n\n        public string AccountCode { get; private set; }\n        public string SubscriptionUuid { get; private set; }\n        public int OriginalInvoiceNumber { get; private set; }\n        public string OriginalInvoiceNumberPrefix { get; private set; }\n        public string Uuid { get; protected set; }\n        public InvoiceState State { get; protected set; }\n        public int InvoiceNumber { get; private set; }\n        public string InvoiceNumberPrefix { get; private set; }\n        public string PoNumber { get; set; }\n        public string VatNumber { get; private set; }\n        public int SubtotalInCents { get; private set; }\n        public int TaxInCents { get; protected set; }\n        public int TotalInCents { get; protected set; }\n        public string Currency { get; protected set; }\n        public int? NetTerms { get; set; }\n        public Collection CollectionMethod { get; set; }\n        public DateTime? CreatedAt { get; private set; }\n        public DateTime? UpdatedAt { get; private set; }\n        public DateTime? ClosedAt { get; private set; }\n\n        public Address Address\n        {\n            get { return _address ?? (_address = new Address()); }\n            set { _address = value; }\n        }\n        private Address _address;\n\n        /// <summary>\n        /// Tax type as \"vat\" for VAT or \"usst\" for US Sales Tax.\n        /// </summary>\n        public string TaxType { get; private set; }\n        public string TaxRegion { get; private set; }\n        public decimal? TaxRate { get; private set; }\n\n        public RecurlyList<Adjustment> Adjustments { get; private set; }\n        public RecurlyList<Transaction> Transactions { get; private set; }\n\n        public string CustomerNotes { get; set; }\n        public string TermsAndConditions { get; set; }\n        public string VatReverseChargeNotes { get; set; }\n        public int SubtotalAfterDiscountInCents { get; set; }\n        public DateTime? AttemptNextCollectionAt { get; set; }\n        public string RecoveryReason { get; set; }\n        public string AllLineItemsLink { get; set; }\n\n        internal const string UrlPrefix = \"/invoices/\";\n\n        public Invoice()\n        {\n            Adjustments = new AdjustmentList();\n            Transactions = new TransactionList();\n        }\n\n        internal Invoice(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + InvoiceNumberWithPrefix();\n        }\n\n        public string InvoiceNumberWithPrefix()\n        {\n            return InvoiceNumberPrefix + Convert.ToString(InvoiceNumber);\n        }\n\n        public string OriginalInvoiceNumberWithPrefix()\n        {\n            return OriginalInvoiceNumberPrefix + Convert.ToString(OriginalInvoiceNumber);\n        }\n\n        /// <summary>\n        /// Returns a PDF representation of an invoice\n        /// </summary>\n        /// <param name=\"acceptLanguage\">Language for invoice, defaults to en-US.</param>\n        /// <returns></returns>\n        public byte[] GetPdf(string acceptLanguage = \"en-US\")\n        {\n            return Client.Instance.PerformDownloadRequest(memberUrl(), \"application/pdf\", acceptLanguage);\n        }\n\n        /// <summary>\n        /// Post an invoice on an account using it's pending charges\n        /// </summary>\n        public void Create(string accountCode)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeDataString(accountCode) + Invoice.UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Preview an invoice on an account using it's pending charges\n        /// </summary>\n        public void Preview(string accountCode)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeDataString(accountCode) + Invoice.UrlPrefix + \"preview\",\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Marks an invoice as paid successfully\n        /// </summary>\n        public void MarkSuccessful()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put, memberUrl() + \"/mark_successful\", ReadXml);\n        }\n\n        /// <summary>\n        /// Marks an invoice as failed collection\n        /// </summary>\n        public void MarkFailed()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put, memberUrl() + \"/mark_failed\", ReadXml);\n        }\n\n        /// <summary>\n        /// Returns the active coupon redemption on this invoice\n        /// </summary>\n        /// <returns></returns>\n        public CouponRedemption GetRedemption()\n        {\n            var redemptionList = GetRedemptions();\n            return redemptionList.HasAny() ? redemptionList[0] : null;\n        }\n\n        public RecurlyList<CouponRedemption> GetRedemptions()\n        {\n            var coupons = new CouponRedemptionList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                memberUrl() + \"/redemptions/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        public Invoice GetOriginalInvoice()\n        {\n            return Invoices.Get(OriginalInvoiceNumberWithPrefix());\n        }\n\n        /// <summary>\n        /// If enabled, allows specific line items and/or quantities to be refunded.\n        /// </summary>\n        /// <param name=\"adjustment\"></param>\n        /// <param name=\"prorate\"></param>\n        /// <param name=\"quantity\"></param>\n        /// <returns>new Invoice object</returns>\n        public Invoice Refund(Adjustment adjustment, bool prorate = false, int quantity = 0, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var adjustments = new List<Adjustment>();\n            adjustments.Add(adjustment);\n\n            return Refund(adjustments, prorate, quantity, refundPriority);\n        }\n\n        public Invoice Refund(IEnumerable<Adjustment> adjustments, bool prorate = false, int quantity = 0, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var refunds = new RefundList(adjustments, prorate, quantity, refundPriority);\n            var invoice = new Invoice();\n\n            var response = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/refund\",\n                refunds.WriteXml,\n                invoice.ReadXml);\n\n            if (HttpStatusCode.Created == response || HttpStatusCode.OK == response)\n                return invoice;\n            else\n                return null;\n        }\n\n        public Invoice RefundAmount(int amountInCents, RefundOrderPriority refundPriority = RefundOrderPriority.Credit)\n        {\n            var refundInvoice = new Invoice();\n            var refund = new OpenAmountRefund(amountInCents, refundPriority);\n               \n            var response = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                memberUrl() + \"/refund\",\n                refund.WriteXml,\n                refundInvoice.ReadXml);\n\n            if (HttpStatusCode.Created == response || HttpStatusCode.OK == response)\n                return refundInvoice;\n            else\n                return null;\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of invoice element, get out of here\n                if (reader.Name == \"invoice\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        var accountHref = reader.GetAttribute(\"href\");\n                        AccountCode = Uri.UnescapeDataString(accountHref.Substring(accountHref.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"subscription\":\n                        var subHref = reader.GetAttribute(\"href\");\n                        SubscriptionUuid = Uri.UnescapeDataString(subHref.Substring(subHref.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"original_invoice\":\n                        var originalInvoiceHref = reader.GetAttribute(\"href\");\n                        var invoiceNumber = Uri.UnescapeDataString(originalInvoiceHref.Substring(originalInvoiceHref.LastIndexOf(\"/\") + 1));\n                        MatchCollection matches = Regex.Matches(invoiceNumber, \"([^\\\\d]{2})(\\\\d+)\");\n                        \n                        if (matches.Count == 1) \n                        {\n                            OriginalInvoiceNumberPrefix = matches[0].Groups[1].Value;\n                            OriginalInvoiceNumber = int.Parse(matches[0].Groups[2].Value);\n                        } \n                        else\n                        {\n                            OriginalInvoiceNumber = int.Parse(invoiceNumber);\n                        }\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<InvoiceState>();\n                        break;\n\n                    case \"invoice_number\":\n                        int invNumber;\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out invNumber))\n                            InvoiceNumber = invNumber;\n                        break;\n\n                    case \"invoice_number_prefix\":\n                        InvoiceNumberPrefix = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"po_number\":\n                        PoNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_number\":\n                        VatNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"subtotal_in_cents\":\n                        SubtotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"total_in_cents\":\n                        TotalInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        DateTime createdAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out createdAt))\n                            CreatedAt = createdAt;\n                        break;\n\n                    case \"updated_at\":\n                        DateTime updatedAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out updatedAt))\n                            UpdatedAt = updatedAt;\n                        break;                    \n\n                    case \"closed_at\":\n                        DateTime closedAt;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out closedAt))\n                            ClosedAt = closedAt;\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"tax_region\":\n                        TaxRegion = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"net_terms\":\n                        NetTerms = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"collection_method\":\n                        CollectionMethod = reader.ReadElementContentAsString().ParseAsEnum<Collection>();\n                        break;\n\n                    case \"customer_notes\":\n                        CustomerNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"terms_and_conditions\":\n                        TermsAndConditions = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_reverse_charge_notes\":\n                        VatReverseChargeNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"line_items\":\n                        // overrite existing value with the Recurly API response\n                        Adjustments = new AdjustmentList();\n                        Adjustments.ReadXml(reader);\n                        break;\n\n                    case \"transactions\":\n                        // overrite existing value with the Recurly API response\n                        Transactions = new TransactionList();\n                        Transactions.ReadXml(reader);\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n\n                    case \"subtotal_after_discount_in_cents\":\n                        int s;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out s))\n                            SubtotalAfterDiscountInCents = s;\n                        break;\n\n                    case \"attempt_next_collection_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                            AttemptNextCollectionAt = d;\n                        break;\n\n                    case \"recovery_reason\":\n                        RecoveryReason = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"all_line_items\":\n                        AllLineItemsLink = reader.ReadElementContentAsString();\n                        break;\n\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"invoice\"); // Start: invoice\n\n            xmlWriter.WriteElementString(\"customer_notes\", CustomerNotes);\n            xmlWriter.WriteElementString(\"terms_and_conditions\", TermsAndConditions);\n            xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", VatReverseChargeNotes);\n            xmlWriter.WriteElementString(\"po_number\", PoNumber);\n\n            if (CollectionMethod == Collection.Manual)\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n\n                if (NetTerms.HasValue)\n                    xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n            }\n            else if (CollectionMethod == Collection.Automatic)\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n            }\n           \n            xmlWriter.WriteEndElement(); // End: invoice\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Invoice: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var invoice = obj as Invoice;\n            return invoice != null && Equals(invoice);\n        }\n\n        public bool Equals(Invoice invoice)\n        {\n            return Uuid == invoice.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Invoices\n    {\n        public static RecurlyList<Invoice> List(string accountCode)\n        {\n            return new InvoiceList(\"/accounts/\" + Uri.EscapeDataString(accountCode) + \"/invoices\");\n        }\n\n        public static RecurlyList<Invoice> List()\n        {\n            return new InvoiceList(Invoice.UrlPrefix);\n        }\n\n        public static RecurlyList<Invoice> List(Invoice.InvoiceState state)\n        {\n            return new InvoiceList(Invoice.UrlPrefix + \"?state=\" + state.ToString().EnumNameToTransportCase());\n        }\n\n        /// <summary>\n        /// Look up an Invoice.\n        /// </summary>\n        /// <param name=\"invoiceNumber\">Invoice Number</param>\n        /// <returns></returns>\n        public static Invoice Get(int invoiceNumber)\n        {\n            return Get(Convert.ToString(invoiceNumber));\n        }\n\n        /// <summary>\n        /// Look up an Invoice.\n        /// </summary>\n        /// <param name=\"invoiceNumber\">Invoice Number</param>\n        /// <returns></returns>\n        public static Invoice Get(string invoiceNumberWithPrefix)\n        {\n            var invoice = new Invoice();\n            \n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Invoice.UrlPrefix + invoiceNumberWithPrefix,\n                invoice.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : invoice;\n        }\n\n        /// <summary>\n        /// Create an Invoice if there are outstanding charges on an account. If there are no outstanding\n        /// charges, null is returned.\n        /// </summary>\n        /// <param name=\"accountCode\">Account code</param>\n        /// <returns></returns>\n        [Obsolete(\"Deprecated, please use the Create instance method on the Invoice object\")] \n        public static Invoice Create(string accountCode)\n        {\n            var invoice = new Invoice();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                \"/accounts/\" + Uri.EscapeDataString(accountCode) + Invoice.UrlPrefix,\n                invoice.ReadXml);\n\n            return (int)statusCode == ValidationException.HttpStatusCode ? null : invoice;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class MeasuredUnit : RecurlyEntity {\n\n        public string DisplayName { get; set; }\n        public string Description { get; set; }\n        public string Name { get; set; } \n        public long Id { get; private set; }\n\n        internal const string UrlPrefix = \"/measured_units/\";\n\n        internal MeasuredUnit()\n        {\n        }\n\n        internal MeasuredUnit(XmlTextReader reader)\n            : this()\n        {\n            ReadXml(reader);\n        }\n\n        public MeasuredUnit(String name, String displayName, String description)\n        {\n            Name = name;\n            DisplayName = displayName;\n            Description = description;\n        }\n\n        private string memberUrl()\n        {\n            return UrlPrefix + Id;\n        }\n\n        /// <summary>\n        /// Create a new measured unit in Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing measured unit in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Id.ToString()),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Deletes this measured unit\n        /// </summary>\n        public void Delete()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeDataString(Id.ToString()));\n        }\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of invoice element, get out of here\n                if (reader.Name == \"measured_unit\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"id\":\n                        Id = Convert.ToInt64(reader.ReadElementContentAsString());\n                        break;\n             \n                    case \"display_name\":\n                        DisplayName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"measured_unit\");\n\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteElementString(\"display_name\", DisplayName);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n  \n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Measured Unit: \" + Id;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var invoice = obj as Invoice;\n            return invoice != null && Equals(invoice);\n        }\n\n        public bool Equals(MeasuredUnit measuredUnit)\n        {\n            return Id == measuredUnit.Id;\n        }\n\n        public override int GetHashCode()\n        {\n            return Id.GetHashCode();\n        }\n\n        #endregion\n    }\n\n    public sealed class MeasuredUnits\n    {\n        /// <summary>\n        /// Lists measured units\n        /// </summary>\n        public static RecurlyList<MeasuredUnit> List()\n        {\n            return new MeasuredUnitList(\"/measured_units/\");\n        }\n\n        /// <summary>\n        /// Look up a Measured Unit.\n        /// </summary>\n        /// <param name=\"measuredUnitId\">MeasuredUnit id</param>\n        /// <returns></returns>\n        public static MeasuredUnit Get(long measuredUnitId)\n        {\n            var measuredUnit = new MeasuredUnit();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                MeasuredUnit.UrlPrefix + measuredUnitId,\n                measuredUnit.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : measuredUnit;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n    public class Plan : RecurlyEntity\n    {\n        public enum IntervalUnit\n        {\n            Days,\n            Months\n        }\n\n        public string PlanCode { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string SuccessUrl { get; set; }\n        public string CancelUrl { get; set; }\n\n        public bool? DisplayDonationAmounts { get; set; }\n        public bool? DisplayQuantity { get; set; }\n        public bool? DisplayPhoneNumber { get; set; }\n        public bool? BypassHostedConfirmation { get; set; }\n\n        public string UnitName { get; set; }\n        public string PaymentPageTOSLink { get; set; }\n\n        public int PlanIntervalLength { get; set; }\n        public IntervalUnit PlanIntervalUnit { get; set; }\n\n        public int TrialIntervalLength { get; set; }\n        public IntervalUnit TrialIntervalUnit { get; set; }\n\n        public string AccountingCode { get; set; }\n        public string SetupFeeAccountingCode { get; set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        public int? TotalBillingCycles { get; set; }\n\n        public bool? TaxExempt { get; set; }\n\n        public string TaxCode { get; set; }\n\n        public bool? TrialRequiresBillingInfo { get; set; }\n\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n        public Adjustment.RevenueSchedule? SetupFeeRevenueScheduleType { get; set; }\n\n        private AddOnList _addOns;\n\n        public RecurlyList<AddOn> AddOns\n        {\n            get\n            {\n                if (_addOns == null)\n                {\n                    var url = UrlPrefix + Uri.EscapeDataString(PlanCode) + \"/add_ons/\";\n                    _addOns = new AddOnList(url);\n                }\n                return _addOns;\n            }\n        }\n\n        private Dictionary<string, int> _unitAmountInCents;\n        /// <summary>\n        /// A dictionary of currencies and values for the subscription amount\n        /// </summary>\n        public Dictionary<string, int> UnitAmountInCents\n        {\n            get { return _unitAmountInCents ?? (_unitAmountInCents = new Dictionary<string, int>()); }\n        }\n\n        private Dictionary<string, int> _setupFeeInCents;\n        /// <summary>\n        /// A dictionary of currency and values for the setup fee\n        /// </summary>\n        public Dictionary<string, int> SetupFeeInCents\n        {\n            get { return _setupFeeInCents ?? (_setupFeeInCents = new Dictionary<string, int>()); }\n        }\n\n        internal const string UrlPrefix = \"/plans/\";\n\n        #region Constructors\n        internal Plan()\n        {\n        }\n\n        internal Plan(XmlTextReader xmlReader)\n        {\n            ReadXml(xmlReader);\n        }\n\n        public Plan(string planCode, string name)\n        {\n            PlanCode = planCode;\n            Name = name;\n        }\n\n        #endregion\n\n        /// <summary>\n        /// Create a new plan in Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Update an existing plan in Recurly\n        /// </summary>\n        public void Update()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(PlanCode),\n                WriteXml);\n        }\n\n        /// <summary>\n        /// Deletes this plan, making it inactive\n        /// </summary>\n        public void Deactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete, UrlPrefix + Uri.EscapeDataString(PlanCode));\n        }\n\n        /// <summary>\n        /// Returns an new add on associated with this plan.\n        /// </summary>\n        /// <param name=\"addOnCode\"></param>\n        /// <param name=\"name\"></param>\n        /// <returns></returns>\n        public AddOn NewAddOn(string addOnCode, string name)\n        {\n            var a = new AddOn(PlanCode, addOnCode, name);\n            return a;\n        }\n\n        public AddOn GetAddOn(string addOnCode)\n        {\n            var addOn = new AddOn();\n\n            var status = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(PlanCode) + \"/add_ons/\" + Uri.EscapeDataString(addOnCode),\n                addOn.ReadXml);\n\n            if (status != HttpStatusCode.OK) return null;\n\n            // PlanCode is needed to update the AddOn\n            // TODO: need a cleaner way of getting the plan code from xml\n            //       should be using the hrefs of the resources\n            addOn.PlanCode = PlanCode;\n\n            return addOn;\n        }\n\n        #region Read and Write XML documents\n\n        internal void ReadXmlSetupFee(XmlTextReader reader)\n        {\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"setup_fee_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    SetupFeeInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal void ReadXmlUnitAmount(XmlTextReader reader)\n        {\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"unit_amount_in_cents\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType == XmlNodeType.Element)\n                {\n                    UnitAmountInCents.Add(reader.Name, reader.ReadElementContentAsInt());\n                }\n            }\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            UnitAmountInCents.Clear();\n            SetupFeeInCents.Clear();\n\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if (reader.Name == \"plan\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        PlanCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"name\":\n                        Name = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"success_url\":\n                        SuccessUrl = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"cancel_url\":\n                        CancelUrl = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"display_donation_amounts\":\n                        DisplayDonationAmounts = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"display_quantity\":\n                        DisplayQuantity = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"display_phone_number\":\n                        DisplayPhoneNumber = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"bypass_hosted_confirmation\":\n                        BypassHostedConfirmation = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"unit_name\":\n                        UnitName = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"payment_page_tos_link\":\n                        PaymentPageTOSLink = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"plan_interval_length\":\n                        PlanIntervalLength = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"plan_interval_unit\":\n                        PlanIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();\n                        break;\n\n                    case \"trial_interval_length\":\n                        TrialIntervalLength = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"trial_interval_unit\":\n                        TrialIntervalUnit = reader.ReadElementContentAsString().ParseAsEnum<IntervalUnit>();\n                        break;\n\n                    case \"accounting_code\":\n                        AccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"setup_fee_accounting_code\":\n                        SetupFeeAccountingCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"tax_exempt\":\n                        TaxExempt = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"tax_code\":\n                        TaxCode = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        ReadXmlUnitAmount(reader);\n                        break;\n\n                    case \"setup_fee_in_cents\":\n                        ReadXmlSetupFee(reader);\n                        break;\n\n                    case \"total_billing_cycles\":\n                        int totalBillingCycles;\n                        if (int.TryParse(reader.ReadElementContentAsString(), out totalBillingCycles))\n                            TotalBillingCycles = totalBillingCycles;\n                        break;\n\n                    case \"trial_requires_billing_info\":\n                        bool b;\n                        if (bool.TryParse(reader.ReadElementContentAsString(), out b))\n                            TrialRequiresBillingInfo = b;\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n\n                    case \"setup_fee_revenue_schedule_tye\":\n                        SetupFeeRevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"plan\");\n\n            xmlWriter.WriteElementString(\"plan_code\", PlanCode);\n            xmlWriter.WriteElementString(\"name\", Name);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n            xmlWriter.WriteStringIfValid(\"accounting_code\", AccountingCode);\n            xmlWriter.WriteStringIfValid(\"setup_fee_accounting_code\", SetupFeeAccountingCode);\n            if (PlanIntervalLength > 0)\n            {\n                xmlWriter.WriteElementString(\"plan_interval_unit\", PlanIntervalUnit.ToString().EnumNameToTransportCase());\n                xmlWriter.WriteElementString(\"plan_interval_length\", PlanIntervalLength.AsString());\n            }\n            if (TrialIntervalLength > 0)\n            {\n                xmlWriter.WriteElementString(\"trial_interval_unit\", TrialIntervalUnit.ToString().EnumNameToTransportCase());\n                xmlWriter.WriteElementString(\"trial_interval_length\", TrialIntervalLength.AsString());\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"setup_fee_in_cents\", SetupFeeInCents, pair => pair.Key, pair => pair.Value.AsString());\n\n            xmlWriter.WriteIfCollectionHasAny(\"unit_amount_in_cents\", UnitAmountInCents, pair => pair.Key, pair => pair.Value.AsString());\n\n            if (TotalBillingCycles.HasValue && TotalBillingCycles > 0)\n                xmlWriter.WriteElementString(\"total_billing_cycles\", TotalBillingCycles.Value.AsString());\n\n            xmlWriter.WriteStringIfValid(\"unit_name\", UnitName);\n\n            if (DisplayDonationAmounts.HasValue)\n                xmlWriter.WriteElementString(\"display_donation_amounts\", DisplayDonationAmounts.Value.AsString());\n\n            if (DisplayQuantity.HasValue)\n                xmlWriter.WriteElementString(\"display_quantity\", DisplayQuantity.Value.AsString());\n\n            if (DisplayPhoneNumber.HasValue)\n                xmlWriter.WriteElementString(\"display_phone_number\", DisplayPhoneNumber.Value.AsString());\n\n            if (BypassHostedConfirmation.HasValue)\n                xmlWriter.WriteElementString(\"bypass_hosted_confirmation\", BypassHostedConfirmation.Value.AsString());\n\n            if (TaxExempt.HasValue)\n                xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.Value.AsString());\n\n            if (TrialRequiresBillingInfo.HasValue)\n                xmlWriter.WriteElementString(\"trial_requires_billing_info\", TrialRequiresBillingInfo.Value.AsString());\n\n            xmlWriter.WriteStringIfValid(\"success_url\", SuccessUrl);\n            xmlWriter.WriteStringIfValid(\"cancel_url\", CancelUrl);\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            if (SetupFeeRevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"setup_fee_revenue_schedule_type\", SetupFeeRevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement();\n        }\n\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Plan: \" + PlanCode;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var plan = obj as Plan;\n            return plan != null && Equals(plan);\n        }\n\n        public bool Equals(Plan plan)\n        {\n            return PlanCode == plan.PlanCode;\n        }\n\n        public override int GetHashCode()\n        {\n            return PlanCode?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Plans\n    {\n        /// <summary>\n        /// Retrieves a list of all active plans\n        /// </summary>\n        /// <returns></returns>\n        public static RecurlyList<Plan> List()\n        {\n            return List(null);\n        }\n\n        /// <summary>\n        /// Lists accounts, limited to state\n        /// </summary>\n        /// <param name=\"state\">Account state to retrieve</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Plan> List(FilterCriteria filter)\n        {\n            filter = filter == null ? FilterCriteria.Instance : filter;\n            return new PlanList(Plan.UrlPrefix + \"?\" + filter.ToNamedValueCollection().ToString());\n        }\n\n        /// <summary>\n        /// Retrieves a Plan\n        /// </summary>\n        /// <param name=\"planCode\"></param>\n        /// <returns></returns>\n        public static Plan Get(string planCode)\n        {\n            var plan = new Plan();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Plan.UrlPrefix + Uri.EscapeDataString(planCode),\n                plan.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : plan;\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Xml;\n\nnamespace Recurly\n{\n\n    /// <summary>\n    /// Represents subscriptions for accounts\n    /// </summary>\n    public class Subscription : RecurlyEntity\n    {\n        // changed to flags based on https://dev.recurly.com/docs/list-subscriptions saying Subscriptions can be in multiple states\n        [Flags]\n        // The currently valid Subscription States\n        public enum SubscriptionState : short\n        {\n            All = 0,\n            Active = 1,\n            Canceled = 2,\n            Expired = 4,\n            Future = 8,\n            InTrial = 16,\n            Live = 32,\n            PastDue = 64,\n            Pending = 128,\n            Open    = 256,\n            Failed  = 512,\n        }\n\n        public enum ChangeTimeframe : short\n        {\n            Now,\n            Renewal\n        }\n\n        public enum RefundType : short\n        {\n            Full,\n            Partial,\n            None\n        }\n\n        public Address Address\n        {\n            get { return _address ?? (_address = new Address()); }\n            set { _address = value; }\n        }\n        private Address _address;\n\n        private string _accountCode;\n        private Account _account;\n        /// <summary>\n        /// Account in Recurly\n        /// </summary>\n        public Account Account\n        {\n            get { return _account ?? (_account = Accounts.Get(_accountCode)); }\n        }\n\n        private string _invoiceNumber;\n        private Invoice _invoice;\n        /// <summary>\n        /// </summary>\n        public Invoice Invoice\n        {\n            get { return _invoice ?? (_invoice = Invoices.Get(_invoiceNumber)); }\n        }\n\n        private Plan _plan;\n\n        public Plan Plan\n        {\n            get { return _plan ?? (_plan = Plans.Get(PlanCode)); }\n            set\n            {\n                _plan = value;\n                PlanCode = value.PlanCode;\n            }\n        }\n\n        public string PlanCode { get; private set; }\n\n        private ShippingAddress _shippingAddress;\n\n        public ShippingAddress ShippingAddress\n        {\n            get { return _shippingAddress; }\n            set\n            {\n                if (value.Id.HasValue)\n                {\n                    ShippingAddressId = value.Id.Value;\n                }\n                _shippingAddress = value;\n            }\n        }\n\n        public long? ShippingAddressId { get; set; }\n\n        public string Uuid { get; private set; }\n\n        public SubscriptionState State { get; private set; }\n\n        /// <summary>\n        /// Unit amount per quantity.  Leave null to keep as is. Set to override plan's default amount.\n        /// </summary>\n        public int? UnitAmountInCents { get; set; }\n\n        public string Currency { get; set; }\n        public int Quantity { get; set; }\n\n        public bool? Bulk { get; set; }\n\n        /// <summary>\n        /// Date the subscription was last updated.\n        /// </summary>\n        public DateTime? UpdatedAt { get; private set; }\n        /// <summary>\n        /// Date the subscription started.\n        /// </summary>\n        public DateTime? ActivatedAt { get; private set; }\n        /// <summary>\n        /// If set, the date the subscriber canceled their subscription.\n        /// </summary>\n        public DateTime? CanceledAt { get; private set; }\n        /// <summary>\n        /// If set, the subscription will expire/terminate on this date.\n        /// </summary>\n        public DateTime? ExpiresAt { get; private set; }\n        /// <summary>\n        /// Date the current invoice period started.\n        /// </summary>\n        public DateTime? CurrentPeriodStartedAt { get; private set; }\n        /// <summary>\n        /// The subscription is paid until this date. Next invoice date.\n        /// </summary>\n        public DateTime? CurrentPeriodEndsAt { get; private set; }\n        /// <summary>\n        /// Date the trial started, if the subscription has a trial.\n        /// </summary>\n        public DateTime? TrialPeriodStartedAt { get; private set; }\n        /// <summary>\n        /// Date the Bank Account has been authorized for this subscription\n        /// </summary>\n        public DateTime? BankAccountAuthorizedAt { get; set; }\n\n        /// <summary>\n        /// Date the trial ends, if the subscription has/had a trial.\n        ///\n        /// This may optionally be set on new subscriptions to specify an exact time for the\n        /// subscription to commence.  The subscription will be active and in \"trial\" until\n        /// this date.\n        /// </summary>\n        public DateTime? TrialPeriodEndsAt\n        {\n            get { return _trialPeriodEndsAt; }\n            set\n            {\n                if (ActivatedAt.HasValue)\n                    throw new InvalidOperationException(\"Cannot set TrialPeriodEndsAt on existing subscriptions.\");\n\n                _trialPeriodEndsAt = value;\n            }\n        }\n        private DateTime? _trialPeriodEndsAt;\n\n        /// <summary>\n        /// If set, the subscription will begin in the future on this date.\n        /// The subscription will apply the setup fee and trial period, unless the plan has no trial.\n        /// </summary>\n        public DateTime? StartsAt { get; set; }\n\n        /// <summary>\n        /// Represents pending changes to the subscription\n        /// </summary>\n        public Subscription PendingSubscription { get; private set; }\n        public string NoBillingInfoReason { get; private set; }\n\n        /// <summary>\n        /// If true, this is a \"pending subscription\" object and no changes are allowed\n        /// </summary>\n        private bool IsPendingSubscription { get; set; }\n\n        private Coupon _coupon;\n        private string _couponCode;\n\n        private Coupon[] _coupons;\n        private string[] _couponCodes;\n\n        /// <summary>\n        /// Optional coupon for the subscription\n        /// </summary>\n        public Coupon Coupon\n        {\n            get { return _coupon ?? (_coupon = Recurly.Coupons.Get(_couponCode)); }\n            set\n            {\n                _coupon = value;\n                _couponCode = value.CouponCode;\n            }\n        }\n\n        /// <summary>\n        /// Optional coupons for the subscription\n        /// </summary>\n        public Coupon[] Coupons\n        {\n            get {\n                if (_coupons == null)\n                {\n                    _coupons = new Coupon[_couponCodes.Length];\n                }\n\n                if ( _coupons.Length == 0)\n                {\n\n                    for (int i = 0; i<_couponCodes.Length; i++)\n                    {\n                        _coupons[i] = Recurly.Coupons.Get(_couponCodes[i]);\n                    }\n                }\n\n                return _coupons;\n            }\n            set {\n                _coupons = value;\n                _couponCodes = new string[_coupons.Length];\n                for (int i = 0; i<_coupons.Length; i++)\n                {\n                    _couponCodes[i] = _coupons[i].CouponCode;\n                }\n            }\n        }\n\n        /// <summary>\n        /// List of add ons for this subscription\n        /// </summary>\n        public SubscriptionAddOnList AddOns\n        {\n            get { return _addOns ?? (_addOns = new SubscriptionAddOnList(this)); }\n            set { _addOns = value; }\n        }\n        private SubscriptionAddOnList _addOns;\n\n        /// <summary>\n        /// The invoice generated when calling the Preview method\n        /// </summary>\n        public Invoice InvoicePreview { get; private set; }\n        public int? TotalBillingCycles { get; set; }\n        public int? RemainingBillingCycles { get; private set; }\n        public DateTime? FirstRenewalDate { get; set; }\n\n        internal const string UrlPrefix = \"/subscriptions/\";\n\n        public string CollectionMethod { get; set; }\n        public int? NetTerms { get; set; }\n        public string PoNumber { get; set; }\n\n        /// <summary>\n        /// Amount of tax or VAT within the transaction, in cents.\n        /// </summary>\n        public int? TaxInCents { get; private set; }\n\n        /// <summary>\n        /// Tax type as \"vat\" for VAT or \"usst\" for US Sales Tax.\n        /// </summary>\n        public string TaxType { get; private set; }\n\n        /// <summary>\n        /// Tax rate that will be applied to this subscription.\n        /// </summary>\n        public decimal? TaxRate { get; private set; }\n\n        /// <summary>\n        /// Determines if this object exists in the Recurly API\n        /// </summary>\n        internal bool _saved;\n\n        internal bool _preview;\n\n        public string CustomerNotes { get; set; }\n        public string TermsAndConditions { get; set; }\n        public string VatReverseChargeNotes { get; set; }\n        /// <summary>\n        /// True if the subscription started from a gift card.\n        /// </summary>\n        public bool StartedWithGiftCard { get; private set; }\n        /// <summary>\n        /// The timestamp representing when the subscription was converted from a gift card.\n        /// </summary>\n        public DateTime? ConvertedAt { get; private set; }\n\n        /// <summary>\n        /// Optionally set true to denote that this subscription was imported from a trial.\n        /// </summary>\n        public bool? ImportedTrial { get; set; }\n\n        public Adjustment.RevenueSchedule? RevenueScheduleType { get; set; }\n\n        internal Subscription()\n        {\n            IsPendingSubscription = false;\n        }\n\n        internal Subscription(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        /// <summary>\n        /// Creates a new subscription object\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"plan\"></param>\n        /// <param name=\"currency\"></param>\n        public Subscription(Account account, Plan plan, string currency)\n        {\n            _accountCode = account.AccountCode;\n            _account = account;\n            Plan = plan;\n            Currency = currency;\n            Quantity = 1;\n        }\n\n        /// <summary>\n        /// Creates a new subscription object, with coupon\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"plan\"></param>\n        /// <param name=\"currency\"></param>\n        /// <param name=\"couponCode\"></param>\n        public Subscription(Account account, Plan plan, string currency, string couponCode)\n        {\n            _accountCode = account.AccountCode;\n            _account = account;\n            Plan = plan;\n            Currency = currency;\n            Quantity = 1;\n            _couponCode = couponCode;\n        }\n\n        public Subscription(string planCode)\n        {\n            PlanCode = planCode;\n            Quantity = 1;\n        }\n\n        /// <summary>\n        /// Creates a new subscription on Recurly\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix,\n                WriteSubscriptionXml,\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Request that an update to a subscription take place\n        /// </summary>\n        /// <param name=\"timeframe\">when the update should occur: now (default) or at renewal</param>\n        public void ChangeSubscription(ChangeTimeframe timeframe)\n        {\n            Client.WriteXmlDelegate writeXmlDelegate;\n\n            if (ChangeTimeframe.Renewal == timeframe)\n                writeXmlDelegate = WriteChangeSubscriptionAtRenewalXml;\n            else\n                writeXmlDelegate = WriteChangeSubscriptionNowXml;\n\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid),\n                writeXmlDelegate,\n                ReadXml);\n        }\n\n        public void ChangeSubscription()\n        {\n            ChangeSubscription(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// Cancel an active subscription.  The subscription will not renew, but will continue to be active\n        /// through the remainder of the current term.\n        /// </summary>\n        public void Cancel()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/cancel\",\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Reactivate a canceled subscription.  The subscription will renew at the end of its current term.\n        /// </summary>\n        public void Reactivate()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/reactivate\",\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Terminates the subscription immediately.\n        /// </summary>\n        /// <param name=\"refund\"></param>\n        public void Terminate(RefundType refund)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/terminate?refund=\" + refund.ToString().EnumNameToTransportCase(),\n                ReadXml);\n        }\n\n        /// <summary>\n        /// Transforms this object into a preview Subscription applied to the account.\n        /// </summary>\n        /// <param name=\"timeframe\">ChangeTimeframe.Now (default) or at Renewal</param>\n        public void Preview(ChangeTimeframe timeframe)\n        {\n            if (_saved)\n            {\n                throw new Recurly.RecurlyException(\"Cannot preview an existing subscription.\");\n            }\n\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + \"preview\",\n                WriteSubscriptionXml,\n                ReadXml);\n\n            // this method does not save the object\n            _saved = false;\n        }\n\n        public void Preview()\n        {\n            Preview(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// Preview the changes associated with the current subscription\n        /// </summary>\n        /// <param name=\"timeframe\">ChangeTimeframe.Now (default) or at Renewal</param>\n        public virtual Subscription PreviewChange(ChangeTimeframe timeframe)\n        {\n            if (!_saved)\n            {\n                throw new Recurly.RecurlyException(\"Must have an existing subscription to preview changes.\");\n            }\n\n            Client.WriteXmlDelegate writeXmlDelegate;\n\n            if (ChangeTimeframe.Renewal == timeframe)\n                writeXmlDelegate = WriteChangeSubscriptionAtRenewalXml;\n            else\n                writeXmlDelegate = WriteChangeSubscriptionNowXml;\n\n            var previewSubscription = new Subscription();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/preview\",\n                writeXmlDelegate,\n                previewSubscription.ReadPreviewXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : previewSubscription;\n        }\n\n        public virtual Subscription PreviewChange()\n        {\n            return PreviewChange(ChangeTimeframe.Now);\n        }\n\n        /// <summary>\n        /// For an active subscription, this will pause the subscription until the specified date.\n        /// </summary>\n        /// <param name=\"nextRenewalDate\">The specified time the subscription will be postponed</param>\n        /// <param name=\"bulk\">bulk = false (default) or true to bypass the 60 second wait while postponing</param>\n        public void Postpone(DateTime nextRenewalDate, bool bulk = false)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/postpone?next_renewal_date=\" + nextRenewalDate.ToString(\"s\") + \"&bulk=\" + bulk.ToString().ToLower(),\n                ReadXml);\n        }\n\n        public bool UpdateNotes(Dictionary<string, string> notes)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Put,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/notes\",\n                WriteSubscriptionNotesXml(notes),\n                ReadXml);\n\n            CustomerNotes = notes[\"CustomerNotes\"];\n            TermsAndConditions = notes[\"TermsAndConditions\"];\n            VatReverseChargeNotes = notes[\"VatReverseChargeNotes\"];\n\n            return true;\n        }\n\n        public RecurlyList<CouponRedemption> GetRedemptions()\n        {\n            var coupons = new CouponRedemptionList();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + \"/redemptions/\",\n                coupons.ReadXmlList);\n\n            return statusCode == HttpStatusCode.NotFound ? null : coupons;\n        }\n\n        #region Read and Write XML documents\n\n        internal void ReadPlanXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"plan\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan_code\":\n                        PlanCode = reader.ReadElementContentAsString();\n                        break;\n                }\n            }\n        }\n\n        internal void ReadPreviewXml(XmlTextReader reader)\n        {\n            _preview = true;\n            ReadXml(reader);\n        }\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            _saved = true;\n\n            string href;\n\n            while (reader.Read())\n            {\n                if (reader.Name == \"subscription\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                DateTime dateVal;\n                Int32 billingCycles;\n\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                            _accountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"plan\":\n                        ReadPlanXml(reader);\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"state\":\n                        State = reader.ReadElementContentAsString().ParseAsEnum<SubscriptionState>();\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"activated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            ActivatedAt = dateVal;\n                        break;\n\n                    case \"canceled_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CanceledAt = dateVal;\n                        break;\n\n                    case \"expires_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            ExpiresAt = dateVal;\n                        break;\n\n                    case \"updated_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            UpdatedAt = dateVal; ;\n                        break;\n\n                    case \"current_period_started_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CurrentPeriodStartedAt = dateVal;\n                        break;\n\n                    case \"current_period_ends_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            CurrentPeriodEndsAt = dateVal;\n                        break;\n\n                    case \"trial_started_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            TrialPeriodStartedAt = dateVal;\n                        break;\n\n                    case \"trial_ends_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            _trialPeriodEndsAt = dateVal;\n                        break;\n\n                    case \"bank_account_authorized_at\":\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out dateVal))\n                            BankAccountAuthorizedAt = dateVal;\n                        break;\n\n                    case \"subscription_add_ons\":\n                        // overwrite existing list with what came back from Recurly\n                        AddOns = new SubscriptionAddOnList(this);\n                        AddOns.ReadXml(reader);\n                        break;\n\n                    case \"invoice\":\n                        href = reader.GetAttribute(\"href\");\n                        if (!href.IsNullOrEmpty())\n                            _invoiceNumber = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        else\n                            InvoicePreview = new Invoice(reader);\n                        break;\n\n                    case \"pending_subscription\":\n                        PendingSubscription = new Subscription { IsPendingSubscription = true };\n                        PendingSubscription.ReadPendingSubscription(reader);\n                        // TODO test all returned properties are read\n                        break;\n\n                    case \"collection_method\":\n                        CollectionMethod = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"net_terms\":\n                        NetTerms = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"po_number\":\n                        PoNumber = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"total_billing_cycles\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out billingCycles))\n                            TotalBillingCycles = billingCycles;\n                        break;\n\n                    case \"remaining_billing_cycles\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out billingCycles))\n                            RemainingBillingCycles = billingCycles;\n                        break;\n\n                    case \"tax_in_cents\":\n                        TaxInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"tax_type\":\n                        TaxType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"tax_rate\":\n                        TaxRate = reader.ReadElementContentAsDecimal();\n                        break;\n\n                    case \"customer_notes\":\n                        CustomerNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"terms_and_conditions\":\n                        TermsAndConditions = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"vat_reverse_charge_notes\":\n                        VatReverseChargeNotes = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"address\":\n                        Address = new Address(reader);\n                        break;\n                    case \"started_with_gift\":\n                        StartedWithGiftCard = reader.ReadElementContentAsBoolean();\n                        break;\n                    case \"converted_at\":\n                        DateTime date;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out date))\n                        {\n                            ConvertedAt = date;\n                        }\n                        break;\n                    case \"no_billing_info_reason\":\n                        NoBillingInfoReason = reader.ReadElementContentAsString();\n                        break;\n                    case \"imported_trial\":\n                        ImportedTrial = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"revenue_schedule_tye\":\n                        RevenueScheduleType = reader.ReadElementContentAsString().ParseAsEnum<Adjustment.RevenueSchedule>();\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter writer)\n        {\n            throw new NotImplementedException();\n        }\n\n        protected void ReadPendingSubscription(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                if (reader.Name == \"pending_subscription\" && reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                switch (reader.Name)\n                {\n                    case \"plan\":\n                        ReadPlanXml(reader);\n                        break;\n\n                    case \"unit_amount_in_cents\":\n                        UnitAmountInCents = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"quantity\":\n                        Quantity = reader.ReadElementContentAsInt();\n                        break;\n\n                    case \"subscription_add_ons\":\n                        AddOns = new SubscriptionAddOnList(this);\n                        AddOns.ReadXml(reader);\n                        break;\n                }\n            }\n        }\n\n        internal void WriteSubscriptionXml(XmlTextWriter xmlWriter)\n        {\n            WriteSubscriptionXml(xmlWriter, false);\n        }\n\n        internal void WriteEmbeddedSubscriptionXml(XmlTextWriter xmlWriter)\n        {\n            WriteSubscriptionXml(xmlWriter, true);\n        }\n\n\n        internal void WriteSubscriptionXml(XmlTextWriter xmlWriter, bool embedded)\n        {\n            xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n            xmlWriter.WriteElementString(\"plan_code\", PlanCode);\n\n            if (!embedded)\n            {\n                // <account> and billing info\n                Account.WriteXml(xmlWriter);\n                xmlWriter.WriteElementString(\"currency\", Currency);\n                xmlWriter.WriteElementString(\"customer_notes\", CustomerNotes);\n                xmlWriter.WriteElementString(\"terms_and_conditions\", TermsAndConditions);\n                xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", VatReverseChargeNotes);\n                xmlWriter.WriteElementString(\"po_number\", PoNumber);\n            }\n\n            xmlWriter.WriteIfCollectionHasAny(\"subscription_add_ons\", AddOns);\n\n            xmlWriter.WriteStringIfValid(\"coupon_code\", _couponCode);\n\n            if (_couponCodes != null && _couponCodes.Length != 0) {\n                xmlWriter.WriteStartElement(\"coupon_codes\");\n                foreach (var _coupon_code in _couponCodes)\n                {\n                    xmlWriter.WriteElementString(\"coupon_code\", _coupon_code);\n                }\n                xmlWriter.WriteEndElement();\n            }\n\n            if (UnitAmountInCents.HasValue)\n                xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.Value.AsString());\n\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n\n            if (TrialPeriodEndsAt.HasValue)\n                xmlWriter.WriteElementString(\"trial_ends_at\", TrialPeriodEndsAt.Value.ToString(\"s\"));\n\n            if (BankAccountAuthorizedAt.HasValue)\n                xmlWriter.WriteElementString(\"bank_account_authorized_at\", BankAccountAuthorizedAt.Value.ToString(\"s\"));\n\n            if (StartsAt.HasValue)\n                xmlWriter.WriteElementString(\"starts_at\", StartsAt.Value.ToString(\"s\"));\n\n            if (TotalBillingCycles.HasValue)\n                xmlWriter.WriteElementString(\"total_billing_cycles\", TotalBillingCycles.Value.AsString());\n\n            if (FirstRenewalDate.HasValue)\n                xmlWriter.WriteElementString(\"first_renewal_date\", FirstRenewalDate.Value.ToString(\"s\"));\n\n            if (Bulk.HasValue)\n                xmlWriter.WriteElementString(\"bulk\", Bulk.ToString().ToLower());\n\n            if (CollectionMethod.Like(\"manual\"))\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n\n                if (NetTerms.HasValue)\n                    xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n            }\n            else if (CollectionMethod.Like(\"automatic\"))\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n\n            if (ShippingAddressId.HasValue)\n            {\n                xmlWriter.WriteElementString(\"shipping_address_id\", ShippingAddressId.Value.ToString());\n            }\n\n            if (ImportedTrial.HasValue)\n            {\n                xmlWriter.WriteElementString(\"imported_trial\", ImportedTrial.Value.ToString().ToLower());\n            }\n\n            if (RevenueScheduleType.HasValue)\n                xmlWriter.WriteElementString(\"revenue_schedule_type\", RevenueScheduleType.Value.ToString().EnumNameToTransportCase());\n\n            xmlWriter.WriteEndElement(); // End: subscription\n        }\n\n        protected void WriteChangeSubscriptionNowXml(XmlTextWriter xmlWriter)\n        {\n            WriteChangeSubscriptionXml(xmlWriter, ChangeTimeframe.Now);\n        }\n\n        protected void WriteChangeSubscriptionAtRenewalXml(XmlTextWriter xmlWriter)\n        {\n            WriteChangeSubscriptionXml(xmlWriter, ChangeTimeframe.Renewal);\n        }\n\n        protected void WriteChangeSubscriptionXml(XmlTextWriter xmlWriter, ChangeTimeframe timeframe)\n        {\n            xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n            xmlWriter.WriteElementString(\"timeframe\", timeframe.ToString().EnumNameToTransportCase());\n            xmlWriter.WriteElementString(\"quantity\", Quantity.AsString());\n            xmlWriter.WriteStringIfValid(\"plan_code\", PlanCode);\n            xmlWriter.WriteIfCollectionHasAny(\"subscription_add_ons\", AddOns);\n            xmlWriter.WriteStringIfValid(\"coupon_code\", _couponCode);\n\n            if (_couponCodes != null && _couponCodes.Length != 0) {\n                xmlWriter.WriteStartElement(\"coupon_codes\");\n                foreach (var _coupon_code in _couponCodes)\n                {\n                    xmlWriter.WriteElementString(\"coupon_code\", _coupon_code);\n                }\n                xmlWriter.WriteEndElement();\n            }\n\n\n            if (UnitAmountInCents.HasValue)\n                xmlWriter.WriteElementString(\"unit_amount_in_cents\", UnitAmountInCents.Value.AsString());\n\n            if (CollectionMethod.Like(\"manual\"))\n            {\n                xmlWriter.WriteElementString(\"collection_method\", \"manual\");\n                xmlWriter.WriteElementString(\"net_terms\", NetTerms.Value.AsString());\n                xmlWriter.WriteElementString(\"po_number\", PoNumber);\n            }\n            else if (CollectionMethod.Like(\"automatic\"))\n                xmlWriter.WriteElementString(\"collection_method\", \"automatic\");\n\n            xmlWriter.WriteEndElement(); // End: subscription\n        }\n\n        internal Client.WriteXmlDelegate WriteSubscriptionNotesXml(Dictionary<string, string> notes)\n        {\n            return delegate(XmlTextWriter xmlWriter)\n            {\n                xmlWriter.WriteStartElement(\"subscription\"); // Start: subscription\n\n                xmlWriter.WriteElementString(\"customer_notes\", notes[\"CustomerNotes\"]);\n                xmlWriter.WriteElementString(\"terms_and_conditions\", notes[\"TermsAndConditions\"]);\n                xmlWriter.WriteElementString(\"vat_reverse_charge_notes\", notes[\"VatReverseChargeNotes\"]);\n\n                xmlWriter.WriteEndElement(); // End: subscription\n            };\n        }\n\n        #endregion\n\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Subscription: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var sub = obj as Subscription;\n            return sub != null && Equals(sub);\n        }\n\n        public bool Equals(Subscription subscription)\n        {\n            return Uuid == subscription.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Subscriptions\n    {\n        /// <summary>\n        /// Returns a list of recurly subscriptions\n        ///\n        /// A subscription will belong to more than one state.\n        /// </summary>\n        /// <param name=\"state\">State of subscriptions to return, defaults to \"live\"</param>\n        /// <returns></returns>\n        public static RecurlyList<Subscription> List(Subscription.SubscriptionState state = Subscription.SubscriptionState.Live)\n        {\n            return List(state, null);\n        }\n\n        /// <summary>\n        /// Returns a list of recurly subscriptions\n        ///\n        /// A subscription will belong to more than one state.\n        /// </summary>\n        /// <param name=\"state\">State of subscriptions to return, defaults to \"live\"</param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Subscription> List(Subscription.SubscriptionState state, FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            return new SubscriptionList(Subscription.UrlPrefix + \"?\" + parameters.ToString());\n        }\n\n        public static Subscription Get(string uuid)\n        {\n            var s = new Subscription();\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Subscription.UrlPrefix + Uri.EscapeDataString(uuid),\n                s.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : s;\n        }\n    }\n}\n", "using System;\nusing System.Net;\nusing System.Xml;\nusing System.Text.RegularExpressions;\n\nnamespace Recurly\n{\n    public class Transaction : RecurlyEntity\n    {\n        // The currently valid Transaction States\n        public enum TransactionState : short\n        {\n            All = 0,\n            Unknown,\n            Success,\n            Failed,\n            Voided,\n            Declined,\n            Scheduled,\n            Pending,\n            Processing,\n            Error,\n            Chargeback\n        }\n\n        public enum TransactionType : short\n        {\n            All = 0,\n            Unknown,\n            Authorization,\n            Purchase,\n            Refund,\n            Verify,\n            Capture\n        }\n\n        public string Uuid { get; private set; }\n        public TransactionType Action { get; set; }\n        public int AmountInCents { get; set; }\n        public int TaxInCents { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string PaymentMethod { get; set; }\n\n        public TransactionState Status { get; private set; }\n\n        public string Reference { get; set; }\n\n        public bool Test { get; private set; }\n        public bool Voidable { get; private set; }\n        public bool Refundable { get; private set; }\n\n        public string IpAddress { get; private set; }\n\n        public string CCVResult { get; private set; }\n        public string AvsResult { get; private set; }\n        public string AvsResultStreet { get; private set; }\n        public string AvsResultPostal { get; private set; }\n\n        public DateTime CreatedAt { get; private set; }\n        public DateTime UpdatedAt { get; private set; }\n\n        private Account _account;\n\n        public string AccountCode { get; private set; }\n\n        public Boolean TaxExempt { get; set; }\n        public string TaxCode { get; set; }\n        public string AccountingCode { get; set; }\n        public string GatewayType { get; set; }\n        public string Origin { get; set; }\n        public string Message { get; set; }\n        public string ApprovalCode { get; set; }\n        public DateTime CollectedAt { get; set; }\n\n        public Account Account\n        {\n            get { return _account ?? (_account = Accounts.Get(AccountCode)); }\n            set\n            {\n                _account = value;\n                AccountCode = value.AccountCode;\n            }\n        }\n        public int? Invoice { get; private set; }\n        public string InvoicePrefix { get; private set; }\n\n\n        public string InvoiceNumberWithPrefix()\n        {\n            return InvoicePrefix + Convert.ToString(Invoice);\n        }\n\n        internal Transaction()\n        { }\n\n        internal Transaction(XmlTextReader reader)\n        {\n            ReadXml(reader);\n        }\n\n        /// <summary>\n        /// Creates a new transaction\n        /// </summary>\n        /// <param name=\"account\"></param>\n        /// <param name=\"amountInCents\"></param>\n        /// <param name=\"currency\"></param>\n        public Transaction(Account account, int amountInCents, string currency)\n        {\n            Account = account;\n            AmountInCents = amountInCents;\n            Currency = currency;\n        }\n\n        /// <summary>\n        /// Creates a new transaction\n        /// </summary>\n        /// <param name=\"accountCode\"></param>\n        /// <param name=\"amountInCents\"></param>\n        /// <param name=\"currency\"></param>\n        public Transaction(string accountCode, int amountInCents, string currency)\n        {\n            AccountCode = accountCode;\n            AmountInCents = amountInCents;\n            Currency = currency;\n        }\n\n        internal const string UrlPrefix = \"/transactions/\";\n\n        /// <summary>\n        /// Creates an invoice, charge, and optionally account\n        /// </summary>\n        public void Create()\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Post,\n               UrlPrefix,\n               WriteXml,\n               ReadXml);\n        }\n\n        /// <summary>\n        /// Refunds a transaction\n        ///\n        /// </summary>\n        /// <param name=\"refund\">If present, the amount to refund. Otherwise it is a full refund.</param>\n        public void Refund(int? refund = null)\n        {\n            Client.Instance.PerformRequest(Client.HttpRequestMethod.Delete,\n                UrlPrefix + Uri.EscapeDataString(Uuid) + (refund.HasValue ? \"?amount_in_cents=\" + refund.Value : \"\"),\n                ReadXml);\n        }\n\n        public Invoice GetInvoice()\n        {\n            return Invoices.Get(InvoiceNumberWithPrefix());\n        }\n\n\n        #region Read and Write XML documents\n\n        internal override void ReadXml(XmlTextReader reader)\n        {\n            while (reader.Read())\n            {\n                // End of account element, get out of here\n                if ((reader.Name == \"transaction\") &&\n                    reader.NodeType == XmlNodeType.EndElement)\n                    break;\n\n                if (reader.NodeType != XmlNodeType.Element) continue;\n\n                string href;\n                int amount;\n                switch (reader.Name)\n                {\n                    case \"account\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                            AccountCode = Uri.UnescapeDataString(href.Substring(href.LastIndexOf(\"/\") + 1));\n                        break;\n\n                    case \"invoice\":\n                        href = reader.GetAttribute(\"href\");\n                        if (null != href)\n                        {\n                            string invoiceNumber = href.Substring(href.LastIndexOf(\"/\") + 1);\n                            MatchCollection matches = Regex.Matches(invoiceNumber, \"([^\\\\d]{2})(\\\\d+)\");\n\n                            if (matches.Count == 1)\n                            {\n                                InvoicePrefix = matches[0].Groups[1].Value;\n                                Invoice = int.Parse(matches[0].Groups[2].Value);\n                            }\n                            else\n                            {\n                                Invoice = int.Parse(invoiceNumber);\n                            }\n                        }\n                        break;\n\n                    case \"uuid\":\n                        Uuid = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"action\":\n                        Action = reader.ReadElementContentAsString().ParseAsEnum<TransactionType>();\n                        break;\n\n                    case \"amount_in_cents\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            AmountInCents = amount;\n                        break;\n\n                    case \"tax_in_cents\":\n                        if (Int32.TryParse(reader.ReadElementContentAsString(), out amount))\n                            TaxInCents = amount;\n                        break;\n\n                    case \"currency\":\n                        Currency = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"description\":\n                        Description = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"payment_method\":\n                        PaymentMethod = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"status\":\n                        var state = reader.ReadElementContentAsString();\n                        Status = \"void\" == state ? TransactionState.Voided : state.ParseAsEnum<TransactionState>();\n                        break;\n\n                    case \"reference\":\n                        Reference = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"test\":\n                        Test = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"voidable\":\n                        Voidable = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"refundable\":\n                        Refundable = reader.ReadElementContentAsBoolean();\n                        break;\n\n                    case \"ip_address\":\n                        IpAddress = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"ccv_result\":\n                        CCVResult = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result\":\n                        AvsResult = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result_street\":\n                        AvsResultStreet = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"avs_result_postal\":\n                        AvsResultPostal = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"created_at\":\n                        CreatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"updated_at\":\n                        UpdatedAt = reader.ReadElementContentAsDateTime();\n                        break;\n\n                    case \"details\":\n                        // API docs say not to load details into objects\n                        break;\n\n                    case \"gateway_type\":\n                        GatewayType = reader.ReadElementContentAsString();\n                        break;\n\n                    case \"origin\":\n                        Origin = reader.ReadElementContentAsString();\n                        break;\n                    case \"message\":\n                        Message = reader.ReadElementContentAsString();\n                        break;\n                    case \"approval_code\":\n                        ApprovalCode = reader.ReadElementContentAsString();\n                        break;\n                    case \"collected_at\":\n                        DateTime d;\n                        if (DateTime.TryParse(reader.ReadElementContentAsString(), out d))\n                        {\n                            CollectedAt = d;\n                        }\n                        break;\n                }\n            }\n        }\n\n        internal override void WriteXml(XmlTextWriter xmlWriter)\n        {\n            xmlWriter.WriteStartElement(\"transaction\");\n\n            xmlWriter.WriteElementString(\"amount_in_cents\", AmountInCents.AsString());\n            xmlWriter.WriteElementString(\"currency\", Currency);\n            xmlWriter.WriteStringIfValid(\"description\", Description);\n            xmlWriter.WriteStringIfValid(\"payment_method\", PaymentMethod);\n\n            xmlWriter.WriteElementString(\"tax_exempt\", TaxExempt.AsString().ToLower());\n            xmlWriter.WriteStringIfValid(\"tax_code\", TaxCode);\n            xmlWriter.WriteStringIfValid(\"accounting_code\", AccountingCode);\n\n            if (Account != null)\n            {\n                Account.WriteXml(xmlWriter);\n            }\n\n            xmlWriter.WriteEndElement();\n        }\n\n        #endregion\n\n        #region Object Overrides\n\n        public override string ToString()\n        {\n            return \"Recurly Transaction: \" + Uuid;\n        }\n\n        public override bool Equals(object obj)\n        {\n            var transaction = obj as Transaction;\n            return transaction != null && Equals(transaction);\n        }\n\n        public bool Equals(Transaction transaction)\n        {\n            return Uuid == transaction.Uuid;\n        }\n\n        public override int GetHashCode()\n        {\n            return Uuid?.GetHashCode() ?? 0;\n        }\n\n        #endregion\n    }\n\n    public sealed class Transactions\n    {\n        private static readonly QueryStringBuilder Build = new QueryStringBuilder();\n        /// <summary>\n        /// Lists transactions by state and type. Defaults to all.\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <param name=\"type\"></param>\n        /// <returns></returns>\n        public static RecurlyList<Transaction> List(TransactionList.TransactionState state = TransactionList.TransactionState.All,\n            TransactionList.TransactionType type = TransactionList.TransactionType.All)\n        {\n            return List(state, type, null);\n        }\n\n        /// <summary>\n        /// Lists transactions by state and type. Defaults to all.\n        /// </summary>\n        /// <param name=\"state\"></param>\n        /// <param name=\"type\"></param>\n        /// <param name=\"filter\">FilterCriteria used to apply server side sorting and filtering</param>\n        /// <returns></returns>\n        public static RecurlyList<Transaction> List(TransactionList.TransactionState state,\n            TransactionList.TransactionType type,\n            FilterCriteria filter)\n        {\n            filter = filter ?? FilterCriteria.Instance;\n            var parameters = filter.ToNamedValueCollection();\n            if (state != TransactionList.TransactionState.All)\n            {\n                parameters[\"state\"] = state.ToString().EnumNameToTransportCase();\n            }\n            if (type != TransactionList.TransactionType.All)\n            {\n                parameters[\"type\"] = type.ToString().EnumNameToTransportCase();\n            }\n\n            return new TransactionList(Transaction.UrlPrefix + \"?\" + parameters.ToString());\n        }\n\n        public static Transaction Get(string transactionId)\n        {\n            var transaction = new Transaction();\n\n            var statusCode = Client.Instance.PerformRequest(Client.HttpRequestMethod.Get,\n                Transaction.UrlPrefix + Uri.EscapeDataString(transactionId),\n                transaction.ReadXml);\n\n            return statusCode == HttpStatusCode.NotFound ? null : transaction;\n        }\n    }\n}\n"], "filenames": ["Library/Account.cs", "Library/AccountBalance.cs", "Library/AddOn.cs", "Library/Adjustment.cs", "Library/BillingInfo.cs", "Library/Coupon.cs", "Library/CouponRedemption.cs", "Library/Export.cs", "Library/GiftCard.cs", "Library/Invoice.cs", "Library/MeasuredUnit.cs", "Library/Plan.cs", "Library/Subscription.cs", "Library/Transaction.cs"], "buggy_code_start_loc": [148, 22, 67, 118, 189, 178, 49, 114, 327, 124, 59, 61, 375, 149], "buggy_code_end_loc": [590, 23, 90, 288, 190, 539, 65, 115, 328, 508, 70, 449, 972, 403], "fixing_code_start_loc": [148, 22, 67, 118, 189, 178, 49, 114, 327, 124, 59, 61, 375, 149], "fixing_code_end_loc": [590, 23, 90, 288, 190, 539, 65, 115, 328, 508, 70, 449, 972, 403], "type": "CWE-918", "message": "The Recurly Client .NET Library before 1.0.1, 1.1.10, 1.2.8, 1.3.2, 1.4.14, 1.5.3, 1.6.2, 1.7.1, 1.8.1 is vulnerable to a Server-Side Request Forgery vulnerability due to incorrect use of \"Uri.EscapeUriString\" that could result in compromise of API keys or other critical resources.", "other": {"cve": {"id": "CVE-2017-0907", "sourceIdentifier": "support@hackerone.com", "published": "2017-11-13T17:29:00.490", "lastModified": "2019-10-09T23:21:11.447", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Recurly Client .NET Library before 1.0.1, 1.1.10, 1.2.8, 1.3.2, 1.4.14, 1.5.3, 1.6.2, 1.7.1, 1.8.1 is vulnerable to a Server-Side Request Forgery vulnerability due to incorrect use of \"Uri.EscapeUriString\" that could result in compromise of API keys or other critical resources."}, {"lang": "es", "value": "La biblioteca de .NET Recurly Client en versiones anteriores a la 1.0.1, 1.1.10, 1.2.8, 1.3.2, 1.4.14, 1.5.3, 1.6.2, 1.7.1 y 1.8.1 es vulnerable a Server-Side Request Forgery en el m\u00e9todo \"Uri.EscapeUriString\" que podr\u00eda conllevar el compromiso de las claves API o de otros recursos cr\u00edticos."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "22F2D2A1-3C64-4CAA-B2A2-C254C95A49C1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "E3DDFA06-B2FD-4AB9-8423-4C76BC9FAE8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "5EA7A613-E55F-49EB-87E8-9CB83EF3DDA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "4765C91E-5DCB-4B54-AD73-907CC374C7A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "95C307C3-F550-49A3-9FD5-2418AB484C4A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2FA86E3D-2D2C-4750-8BBC-0EAE302DF47B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "C3802F42-F46A-4BB6-B8C7-7625E2846488"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "66235403-14C1-4AF5-AB74-748B95E85CD7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.0.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "2D8A19AA-7D3C-416F-BBFC-5A91DAB6583D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "15DDF496-99E4-4330-B064-5FBB58E36D64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "46A04580-65DE-4D17-9195-E5B83C9F498C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "48E14FE3-8E6A-4F4F-83FB-792BCBA320C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "C4082835-F0C2-4580-ACBE-80E0F7CB0E0E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "AC035AE8-1922-406B-86C2-25FE8C132A45"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "E9F7A853-7A45-4B0A-A800-716065682ECC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "9A9989A7-8F01-43DE-8811-2B132829AE9F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "5E128EAA-909C-41C2-A4B1-517A7BE79881"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "4E9608C6-524B-4511-91CD-4B30E482B1AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "58CF4244-145B-4C16-AC5E-9C2286E10E2C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "C63D2400-E9D2-4FA2-AB6F-ECA8809CF4B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "930D66DD-FD21-4E5E-8502-21489B74E32E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "FC8642A6-8181-4B76-8E1F-2FF0420B2AD9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "3B780FA8-EA5E-4D4E-A9D7-40963AB676F7"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F76037C8-C915-491E-BDDE-E69C7720C898"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "1604EB87-941B-490E-B7CD-0827D7DB0382"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "4AAD3042-2278-4B7F-B1F3-FFEEB8406C29"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "BFFB2017-5596-41BD-A6B1-2C947CF6269C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "8C7ABDA3-A5F5-4830-A245-1AF2923D81B2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "E4B36C09-CA2A-4F2E-A3CA-7E5A1D2ECB8C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "9E8DB124-C085-4C82-9B0C-9B50180FE1D6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "4B638025-55AF-4E10-8689-1934F393EACD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "F7C753D4-1973-4A6B-BDCF-859A265E2693"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "6F8D5C9E-97DD-43BE-BEF3-389EF3A26684"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1F875658-9A48-4E5B-9B02-8481A0F6DA98"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "B73B2B38-8C74-47B7-93FF-5C165776A9B2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "9E021CE8-FCA0-48F5-B8A1-B0B1F2F82A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "77E1780C-E158-494F-B13A-283CA1AEDEC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "C3873854-6D94-4864-8334-1546D9222638"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "FF70745E-F60D-4187-B88F-42F85A910AC4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "AC33AF32-C64D-49EE-82FA-DB8F84581DD8"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "A25ED87A-E450-453E-A9A9-F11C36665BA8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "C0BB8A73-CA7E-482E-B30C-E6E40DC2D864"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "79B6C617-FED1-4303-A38A-6FD791DA059C"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:recurly:recurly_client_.net:1.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "97CE0391-24BA-4AAF-B600-2B153D95F272"}]}]}], "references": [{"url": "https://dev.recurly.com/page/net-updates", "source": "support@hackerone.com", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/recurly/recurly-client-net/commit/9eef460c0084afd5c24d66220c8b7a381cf9a1f1", "source": "support@hackerone.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/288635", "source": "support@hackerone.com", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/recurly/recurly-client-net/commit/9eef460c0084afd5c24d66220c8b7a381cf9a1f1"}}