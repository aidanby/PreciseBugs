{"buggy_code": ["embed-host-controller --domain-config=domain.xml\n\n# Early versions of keycloak used \"ha\" for the clustered profile name.\n# Yours maybe be something completely different.\nset clusteredProfile=auth-server-clustered\n\n# keycloak-server.json is not normally on this path.\nset pathToJson=../domain/configuration/keycloak-server.json\n\n\necho\necho *** Begin Migration of /profile=$clusteredProfile ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:read-resource\n  echo Adding replicated-cache=work to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:add(mode=SYNC)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 2.0.0\n# NO CHANGES\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /profile=$clusteredProfile/subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to keycloak-server subsystem...\n  /profile=$clusteredProfile/subsystem=keycloak-server/:migrate-json(file=$pathToJson)\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /profile=$clusteredProfile/subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /profile=$clusteredProfile/subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n    # In migration from 3.0.0 to 3.2.0 there is authorization distributed-cache replaced with local-cache\n    try\n        echo \n        /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:add(mode=SYNC,owners=1)\n        echo Added distributed-cache=authorization\n    catch\n    end-try\nend-if\n\nif (result == update) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/:read-resource\n  echo Adding spi=publicKeyStorage...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:read-resource\n  echo Replacing invalidation-cache=users with local-cache=users\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/:add\n  echo\nend-if\nif (result == undefined) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction in local-cache=users\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:read-resource\n  echo Replacing invalidation-cache=realms with local-cache=realms\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/:add\n  echo\nend-if\n\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/:add\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/:add\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:read-resource\n  echo Adding distributed-cache=authenticationSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:read-resource\n  echo Adding distributed-cache=actionTokens to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:add(indexing=NONE,mode=SYNC,owners=2)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n  echo Replacing distributed-cache=authorization with local-cache=authorization\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=core-management/:read-resource\n    try\n        echo Trying to add core-management extension\n        /extension=org.wildfly.extension.core-management/:add\n        echo\n    catch\n        echo Wasn't able to add core-management extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem core-management\n    /profile=$clusteredProfile/subsystem=core-management/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=elytron/:read-resource\n    try\n        echo Trying to add elytron extension\n        /extension=org.wildfly.extension.elytron/:add\n        echo\n    catch\n        echo Wasn't able to add elytron extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem elytron\n    /profile=$clusteredProfile/subsystem=elytron/:add\n    /profile=$clusteredProfile/subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /profile=$clusteredProfile/subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /profile=$clusteredProfile/subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /profile=$clusteredProfile/subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /profile=$clusteredProfile/subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /profile=$clusteredProfile/subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.domain.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.domain.config.dir})\n    /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /profile=$clusteredProfile/subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /profile=$clusteredProfile/subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /profile=$clusteredProfile/subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /profile=$clusteredProfile/subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /profile=$clusteredProfile/subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /profile=$clusteredProfile/subsystem=elytron/provider-sasl-server-factory=global/:add\n    /profile=$clusteredProfile/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /profile=$clusteredProfile/subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /profile=$clusteredProfile/subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /profile=$clusteredProfile/subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /profile=$clusteredProfile/subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for web cache-container\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for ejb cache-container\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/channel=ee/:read-attribute(name=cluster)\n    echo Setting cluster attribute to ejb in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/channel=ee/:write-attribute(name=cluster,value=ejb)\n    echo\nend-if\n\nif (result != undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from udp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:add\n    echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD/:read-resource\n    echo Replacing tcp FD protocol with FD_ALL\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_ALL/:add\n    echo\nend-if   \n\nif (result != undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from tcp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:add\n    echo\nend-if \n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=ha-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=ha-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/configuration=filter/response-header=server-header/:remove\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /profile=$clusteredProfile/subsystem=jdr/:remove\n    echo\n    try\n        echo Trying to remove jdr extension\n        /extension=org.jboss.as.jdr/:remove\n        echo\n    catch\n        echo Wasn't able to remove jdr extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n    \nif (outcome == success) of /profile=$clusteredProfile/subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /profile=$clusteredProfile/subsystem=jsf/:remove\n    echo\n    try\n        echo Trying to remove jsf extension\n        /extension=org.jboss.as.jsf/:remove\n        echo\n    catch\n        echo Wasn't able to remove jsf extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:read-resource\n  echo Adding distributed-cache=offlineClientSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:read-resource\n  echo Adding distributed-cache=clientSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /profile=$clusteredProfile/subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /profile=$clusteredProfile/subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=default-cache)\n  echo Remove default cache from hibernate cache\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:undefine-attribute(name=default-cache)\n  echo\nend-if\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:read-attribute(name=mode)\n  echo Switching mode for timestamps cache from ASYNC to SYNC\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:write-attribute(name=mode, value=SYNC)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/distributed-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for tcp stack\n  /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG2:remove\n  /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for udp stack\n  /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG2:remove\n  /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=remoting/configuration=endpoint:read-resource\n  echo Remove endpoint from remoting configuration\n  /profile=$clusteredProfile/subsystem=remoting/configuration=endpoint:remove\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=jgroups-mping:read-attribute(name=port)\n  /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=jgroups-mping:undefine-attribute(name=port)\nend-if\nif (outcome == success) of /socket-binding-group=$clusteredProfile-sockets/socket-binding=modcluster:read-attribute(name=port)\n  /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=modcluster:undefine-attribute(name=port)\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /profile=$clusteredProfile/subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$clusteredProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /profile=$clusteredProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /profile=$clusteredProfile/subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /profile=$clusteredProfile/subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /profile=$clusteredProfile/subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /profile=$clusteredProfile/subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=routing:read-resource\n    echo Adding distributed cache routing to web cache container to infinispan subsystem\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso:read-resource\n    echo Adding replicated cache sso to web cache container to infinispan subsystem\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/:add\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=ha-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Adding jgroups-tcp-fd socket binding to ha-sockets binding group\n    /socket-binding-group=ha-sockets/socket-binding=jgroups-tcp-fd/:add(interface=private,port=57600)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=ha-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Adding jgroups-udp-fd socket binding to ha-sockets binding group\n    /socket-binding-group=ha-sockets/socket-binding=jgroups-udp-fd/:add(interface=private,port=54200)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for tcp stack in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-tcp-fd)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for udp stack in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-udp-fd)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container in auth-server-clustered profile so JBoss Marshalling works properly with Infinispan 10.x\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration of /profile=$clusteredProfile ***\n", "embed-host-controller --domain-config=domain.xml\n\n# Early versions of keycloak used \"default\" for the standalone profile name.\n# Yours maybe be something completely different.\nset standaloneProfile=auth-server-standalone\n\n# keycloak-server.json is not normally on this path.\nset pathToJson=../domain/configuration/keycloak-server.json\n\n\necho *** Begin Migration of /profile=$standaloneProfile ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=work/:read-resource\n  echo Adding local-cache=work to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=work/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 1.9.8\n# NO CHANGES\n\n# Migrate from 1.9.8 to 2.0.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:read-resource\n  echo Adding local-cache=authorization to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating authorization cache container..\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=100)\n  echo\nend-if\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /profile=$standaloneProfile/subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to keycloak-server subsystem...\n  /profile=$standaloneProfile/subsystem=keycloak-server/:migrate-json(file=$pathToJson)\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /profile=$standaloneProfile/subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /profile=$standaloneProfile/subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (result == update) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\n# NO CHANGES\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/:add\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/:add\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:read-resource\n  echo Adding local-cache=authenticationSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:read-resource\n  echo Adding local-cache=actionTokens to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:add(indexing=NONE,start=LAZY)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (result == 100L) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=max-entries)\n    echo Updating eviction in local-cache=authorization...\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n    echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=core-management/:read-resource\n    try\n        echo Trying to add core-management extension\n        /extension=org.wildfly.extension.core-management/:add\n        echo\n    catch\n        echo Wasn't able to add core-management extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem core-management\n    /profile=$standaloneProfile/subsystem=core-management/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=elytron/:read-resource\n    try\n        echo Trying to add elytron extension\n        /extension=org.wildfly.extension.elytron/:add\n        echo\n    catch\n        echo Wasn't able to add elytron extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem elytron\n    /profile=$standaloneProfile/subsystem=elytron/:add\n    /profile=$standaloneProfile/subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /profile=$standaloneProfile/subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /profile=$standaloneProfile/subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /profile=$standaloneProfile/subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /profile=$standaloneProfile/subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /profile=$standaloneProfile/subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.domain.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.domain.config.dir})\n    /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /profile=$standaloneProfile/subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /profile=$standaloneProfile/subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /profile=$standaloneProfile/subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /profile=$standaloneProfile/subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /profile=$standaloneProfile/subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /profile=$standaloneProfile/subsystem=elytron/provider-sasl-server-factory=global/:add\n    /profile=$standaloneProfile/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /profile=$standaloneProfile/subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /profile=$standaloneProfile/subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /profile=$standaloneProfile/subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /profile=$standaloneProfile/subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from web cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=persistent:remove\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from ejb cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent:remove\n    echo\nend-if\n\nif (result == local-query) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/:read-attribute(name=default-cache)\n    echo Removing default-cache from hibernate cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/:undefine-attribute(name=default-cache)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=ha-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=ha-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /profile=$standaloneProfile/subsystem=jdr/:remove\n    echo\n    try\n        echo Trying to remove jdr extension\n        /extension=org.jboss.as.jdr/:remove\n        echo\n    catch\n        echo Wasn't able to remove jdr extension, it should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n    \nif (outcome == success) of /profile=$standaloneProfile/subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /profile=$standaloneProfile/subsystem=jsf/:remove\n    echo\n    try\n        echo Trying to remove jsf extension\n        /extension=org.jboss.as.jsf/:remove\n        echo\n    catch\n        echo Wasn't able to remove jsf extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:read-resource\n  echo Adding local-cache=clientSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:read-resource\n  echo Adding local-cache=offlineClientSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /profile=$standaloneProfile/subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /profile=$standaloneProfile/subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /profile=$standaloneProfile/subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /profile=$standaloneProfile/subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$standaloneProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$standaloneProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /profile=$standaloneProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /profile=$standaloneProfile/subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /profile=$standaloneProfile/subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /profile=$standaloneProfile/subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /profile=$standaloneProfile/subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=routing:read-resource\n    echo Adding local cache routing to web cache container to infinispan subsystem\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso:read-resource\n    echo Adding local cache sso to web cache container to infinispan subsystem\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/:add\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration of /profile=$standaloneProfile ***\n", "embed-server --server-config=standalone-ha.xml\n\necho *** Begin Migration ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:read-resource\n  echo Adding replicated-cache=work to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:add(mode=SYNC)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 2.0.0\n# NO CHANGES\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to server cofig xml...\n  /subsystem=keycloak-server/:migrate-json\n  echo\nend-if\n\nset persistenceProvider=jpa\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /extension=org.jboss.as.deployment-scanner/:read-resource\n  echo Adding deployment-scanner extension...\n  /extension=org.jboss.as.deployment-scanner/:add(module=org.jboss.as.deployment-scanner)\n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/:read-resource\n  echo Adding deployment-scanner...\n  /subsystem=deployment-scanner/:add  \n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/scanner=default/:read-resource\n  echo Adding scanner=default\n  /subsystem=deployment-scanner/scanner=default/:add(path=deployments,relative-to=jboss.server.base.dir,runtime-failure-causes-rollback=${jboss.deployment.scanner.rollback.on.failure:false},scan-interval=5000)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n    # In migration from 3.0.0 to 3.2.0 there is authorization distributed-cache replaced with local-cache\n    try\n        echo \n        /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:add(mode=SYNC,owners=1)\n        echo Added distributed-cache=authorization\n    catch\n    end-try\nend-if\n\nif (result == update) of /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:read-resource\n  echo Replacing invalidation-cache=users with local-cache=users\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/:add\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction in local-cache=users\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:read-resource\n  echo Replacing invalidation-cache=realms with local-cache=realms\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/:add\n  echo\nend-if\n\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /subsystem=keycloak-server/spi=userCache/:add\n   /subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /subsystem=keycloak-server/spi=realmCache/:add\n   /subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.2.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:read-resource\n  echo Adding distributed-cache=authenticationSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:read-resource\n  echo Adding distributed-cache=actionTokens to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:add(indexing=NONE,mode=SYNC,owners=2)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n  echo Replacing distributed-cache=authorization with local-cache=authorization\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:read-resource\n    echo Adding keystore to ApplicationRealm...\n    /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:add(keystore-path=application.keystore,keystore-relative-to=jboss.server.config.dir,keystore-password=password,alias=server,key-password=password,generate-self-signed-certificate-host=localhost)\n    echo\nend-if \n\nif (outcome == failed) of /extension=org.wildfly.extension.elytron/:read-resource\n    echo Adding elytron extension...\n    /extension=org.wildfly.extension.elytron/:add(module=org.wildfly.extension.elytron)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=elytron/:read-resource\n    echo Adding elytron subsystem\n    /subsystem=elytron:add\n    /subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/properties-realm=ManagementRealm/:add(users-properties={path=mgmt-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ManagementRealm},groups-properties={path=mgmt-groups.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /subsystem=elytron/security-domain=ManagementDomain/:add(default-realm=ManagementRealm,permission-mapper=default-permission-mapper,realms=[{realm=ManagementRealm,role-decoder=groups-to-roles},{realm=local,role-mapper=super-user-mapper}])\n    /subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /subsystem=elytron/http-authentication-factory=management-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /subsystem=elytron/provider-sasl-server-factory=global/:add\n    /subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /subsystem=elytron/sasl-authentication-factory=management-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (result == ASYNC) of /subsystem=infinispan/cache-container=web/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for web cache-container\n    /subsystem=infinispan/cache-container=web/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == ASYNC) of /subsystem=infinispan/cache-container=ejb/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for ejb cache-container\n    /subsystem=infinispan/cache-container=ejb/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/channel=ee/:read-attribute(name=cluster)\n    echo Setting cluster attribute to ejb in jgroups subsystem\n    /subsystem=jgroups/channel=ee/:write-attribute(name=cluster,value=ejb)\n    echo\nend-if\n\nif (result != undefined) of /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from udp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:remove\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:add\n    echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/protocol=FD/:read-resource\n    echo Replacing tcp FD protocol with FD_ALL\n    /subsystem=jgroups/stack=tcp/protocol=FD/:remove\n    /subsystem=jgroups/stack=tcp/protocol=FD_ALL/:add\n    echo\nend-if   \n\nif (result != undefined) of /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from tcp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:remove\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:add\n    echo\nend-if \n\nif (outcome == failed) of /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Removing socket-binding jgroups-tcp-fd\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:remove\n    echo\nend-if\n\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Removing socket-binding jgroups-udp-fd\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:remove\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=standard-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=standard-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /subsystem=jdr/:remove\n    /extension=org.jboss.as.jdr/:remove\n    echo\nend-if\n    \nif (outcome == success) of /subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /subsystem=jsf/:remove\n    /extension=org.jboss.as.jsf/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:read-resource\n  echo Adding distributed-cache=clientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:read-resource\n  echo Adding distributed-cache=offlineClientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\n\nif (result == org.hibernate.infinispan) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=default-cache)\n  echo Remove default cache from hibernate cache\n  /subsystem=infinispan/cache-container=hibernate:undefine-attribute(name=default-cache)\n  echo\nend-if\nif (result == ASYNC) of /subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:read-attribute(name=mode)\n  echo Switching mode for timestamps cache from ASYNC to SYNC\n  /subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:write-attribute(name=mode, value=SYNC)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/distributed-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for tcp stack\n  /subsystem=jgroups/stack=tcp/protocol=FRAG2:remove\n  /subsystem=jgroups/stack=tcp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /subsystem=jgroups/stack=udp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for udp stack\n  /subsystem=jgroups/stack=udp/protocol=FRAG2:remove\n  /subsystem=jgroups/stack=udp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /subsystem=remoting/configuration=endpoint:read-resource\n  echo Remove endpoint from remoting configuration\n  /subsystem=remoting/configuration=endpoint:remove\n  echo\nend-if\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:read-attribute(name=port)\n  /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:undefine-attribute(name=port)\nend-if\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=modcluster:read-attribute(name=port)\n  /socket-binding-group=standard-sockets/socket-binding=modcluster:undefine-attribute(name=port)\nend-if\n\nif (outcome == success) of /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.4.0 to 4.5.0\nif (outcome == failed) of /subsystem=core-management/:read-resource\n    echo Adding core-management extension\n    /extension=org.wildfly.extension.core-management/:add\n    echo Adding subsystem core-management\n    /subsystem=core-management/:add\n    echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.jboss.as.weld/:read-resource\n    echo Adding weld extension\n    /extension=org.jboss.as.weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=weld/:read-resource\n    echo Adding weld subsystem\n    /subsystem=weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.config-smallrye/:read-resource\n    echo Adding microprofile.config-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.config-smallrye/:add(module=org.wildfly.extension.microprofile.config-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-config-smallrye/:read-resource\n    echo Adding microprofile-config-smallrye subsystem\n    /subsystem=microprofile-config-smallrye/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.health-smallrye/:read-resource\n    echo Adding microprofile.health-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.health-smallrye/:add(module=org.wildfly.extension.microprofile.health-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-health-smallrye/:read-resource\n    echo Adding microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye/:add\n    /subsystem=microprofile-health-smallrye/:write-attribute(name=security-enabled,value=false)\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.metrics-smallrye/:read-resource\n    echo Adding microprofile.metrics-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.metrics-smallrye/:add(module=org.wildfly.extension.microprofile.metrics-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-metrics-smallrye/:read-resource\n    echo Adding microprofile-metrics-smallrye subsystem\n    /subsystem=microprofile-metrics-smallrye/:add\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=security-enabled,value=false)\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=exposed-subsystems,value=[*])\n    echo\nend-if\n\nif (result == \"Keycloak\") of :read-attribute(name=product-name)\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to Keycloak\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:wildfly})\nelse\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to RH-SSO\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:jboss})\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/distributed-cache=routing:read-resource\n    echo Adding distributed cache routing to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/distributed-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/replicated-cache=sso:read-resource\n    echo Adding replicated cache sso to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/:add\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Adding jgroups-tcp-fd socket binding to socket binding group\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:add(interface=private,port=57600)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Adding jgroups-udp-fd socket binding to socket binding group\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:add(interface=private,port=54200)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for tcp stack in jgroups subsystem\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-tcp-fd)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for udp stack in jgroups subsystem\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-udp-fd)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)\n    echo Adding empty-liveness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-liveness-checks-status, value=${env.MP_HEALTH_EMPTY_LIVENESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)\n    echo Adding empty-readiness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-readiness-checks-status, value=${env.MP_HEALTH_EMPTY_READINESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration ***\n", "embed-server --server-config=standalone.xml\n\necho *** Begin Migration ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=work/:read-resource\n  echo Adding local-cache=work to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=work/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 1.9.8\n# NO CHANGES\n\n# Migrate from 1.9.8 to 2.0.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:read-resource\n  echo Adding local-cache=authorization to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating authorization cache container..\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=100)\n  echo\nend-if\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to server cofig xml...\n  /subsystem=keycloak-server/:migrate-json\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /extension=org.jboss.as.deployment-scanner/:read-resource\n  echo Adding deployment-scanner extension...\n  /extension=org.jboss.as.deployment-scanner/:add(module=org.jboss.as.deployment-scanner)\n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/:read-resource\n  echo Adding deployment-scanner...\n  /subsystem=deployment-scanner/:add  \n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/scanner=default/:read-resource\n  echo Adding scanner=default\n  /subsystem=deployment-scanner/scanner=default/:add(path=deployments,relative-to=jboss.server.base.dir,runtime-failure-causes-rollback=${jboss.deployment.scanner.rollback.on.failure:false},scan-interval=5000)\n  echo\nend-if\nif (result == update) of /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\n# NO CHANGES\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /subsystem=keycloak-server/spi=userCache/:add\n   /subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /subsystem=keycloak-server/spi=realmCache/:add\n   /subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:read-resource\n  echo Adding local-cache=authenticationSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:read-resource\n  echo Adding local-cache=actionTokens to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:add(indexing=NONE,start=LAZY)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (result == 100L) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=max-entries)\n    echo Updating eviction in local-cache=authorization...\n    /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n    echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:read-resource\n    echo Adding keystore to ApplicationRealm...\n    /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:add(keystore-path=application.keystore,keystore-relative-to=jboss.server.config.dir,keystore-password=password,alias=server,key-password=password,generate-self-signed-certificate-host=localhost)\n    echo\nend-if    \n\nif (outcome == failed) of /extension=org.wildfly.extension.elytron/:read-resource\n    echo Adding elytron extension...\n    /extension=org.wildfly.extension.elytron/:add(module=org.wildfly.extension.elytron)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=elytron/:read-resource\n    echo Adding elytron subsystem\n    /subsystem=elytron:add\n    /subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/properties-realm=ManagementRealm/:add(users-properties={path=mgmt-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ManagementRealm},groups-properties={path=mgmt-groups.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /subsystem=elytron/security-domain=ManagementDomain/:add(default-realm=ManagementRealm,permission-mapper=default-permission-mapper,realms=[{realm=ManagementRealm,role-decoder=groups-to-roles},{realm=local,role-mapper=super-user-mapper}])\n    /subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /subsystem=elytron/http-authentication-factory=management-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /subsystem=elytron/provider-sasl-server-factory=global/:add\n    /subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /subsystem=elytron/sasl-authentication-factory=management-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=web/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from web cache-container\n    /subsystem=infinispan/cache-container=web/local-cache=persistent:remove\n    echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from ejb cache-container\n    /subsystem=infinispan/cache-container=ejb/local-cache=persistent:remove\n    echo\nend-if\n\nif (result == local-query) of /subsystem=infinispan/cache-container=hibernate/:read-attribute(name=default-cache)\n    echo Removing default-cache from hibernate cache-container\n    /subsystem=infinispan/cache-container=hibernate/:undefine-attribute(name=default-cache)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /subsystem=jdr/:remove\n    /extension=org.jboss.as.jdr/:remove\n    echo\nend-if\n    \nif (outcome == success) of /subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /subsystem=jsf/:remove\n    /extension=org.jboss.as.jsf/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:read-resource\n  echo Adding local-cache=offlineClientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:read-resource\n  echo Adding local-cache=clientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.4.0 to 4.5.0\nif (outcome == failed) of /subsystem=core-management/:read-resource\n    echo Adding core-management extension\n    /extension=org.wildfly.extension.core-management/:add\n    echo Adding subsystem core-management\n    /subsystem=core-management/:add\n    echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource\n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.jboss.as.weld/:read-resource\n    echo Adding weld extension\n    /extension=org.jboss.as.weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=weld/:read-resource\n    echo Adding weld subsystem\n    /subsystem=weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.health-smallrye/:read-resource\n    echo Adding microprofile.health-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.health-smallrye/:add(module=org.wildfly.extension.microprofile.health-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-health-smallrye/:read-resource\n    echo Adding microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye/:add\n    /subsystem=microprofile-health-smallrye/:write-attribute(name=security-enabled,value=false)\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.config-smallrye/:read-resource\n    echo Adding microprofile.config-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.config-smallrye/:add(module=org.wildfly.extension.microprofile.config-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-config-smallrye/:read-resource\n    echo Adding microprofile-config-smallrye subsystem\n    /subsystem=microprofile-config-smallrye/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.metrics-smallrye/:read-resource\n    echo Adding microprofile.metrics-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.metrics-smallrye/:add(module=org.wildfly.extension.microprofile.metrics-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-metrics-smallrye/:read-resource\n    echo Adding microprofile-metrics-smallrye subsystem\n    /subsystem=microprofile-metrics-smallrye/:add\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=security-enabled,value=false)\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=exposed-subsystems,value=[*])\n    echo\nend-if\n\nif (result == \"Keycloak\") of :read-attribute(name=product-name)\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to Keycloak\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:wildfly})\nelse\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to RH-SSO\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:jboss})\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/local-cache=routing:read-resource\n    echo Adding local cache routing to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/local-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/local-cache=sso:read-resource\n    echo Adding local cache sso to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/local-cache=sso/:add\n    /subsystem=infinispan/cache-container=web/local-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /subsystem=infinispan/cache-container=web/local-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)\n    echo Adding empty-liveness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-liveness-checks-status, value=${env.MP_HEALTH_EMPTY_LIVENESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)\n    echo Adding empty-readiness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-readiness-checks-status, value=${env.MP_HEALTH_EMPTY_READINESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration ***\n", "<?xml version='1.0' encoding='UTF-8'?>\n<!--\n  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates\n  ~ and other contributors as indicated by the @author tags.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<!--  See src/resources/configuration/ReadMe.txt for how the configuration assembly works -->\n<config>\n    <extension-module>org.jboss.as.connector</extension-module>\n    <subsystem xmlns=\"urn:jboss:domain:datasources:5.0\">\n        <datasources>\n            <datasource jndi-name=\"java:jboss/datasources/ExampleDS\" pool-name=\"ExampleDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>\n                <driver>h2</driver>\n                <security>\n                    <user-name>sa</user-name>\n                    <password>sa</password>\n                </security>\n            </datasource>\n            <datasource jndi-name=\"java:jboss/datasources/KeycloakDS\" pool-name=\"KeycloakDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                <connection-url><?KEYCLOAK_DS_CONNECTION_URL?></connection-url>\n                <driver>h2</driver>\n                <security>\n                    <user-name>sa</user-name>\n                    <password>sa</password>\n                </security>\n            </datasource>\n            <drivers>\n                <driver name=\"h2\" module=\"com.h2database.h2\">\n                    <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n                </driver>\n            </drivers>\n        </datasources>\n    </subsystem>\n    <supplement name=\"default\">\n        <replacement placeholder=\"KEYCLOAK_DS_CONNECTION_URL\">\n            jdbc:h2:${jboss.server.data.dir}/keycloak;AUTO_SERVER=TRUE\n        </replacement>\n    </supplement>\n    <supplement name=\"domain\">\n        <replacement placeholder=\"KEYCLOAK_DS_CONNECTION_URL\">\n            jdbc:h2:${jboss.server.data.dir}/../../shared-database/keycloak;AUTO_SERVER=TRUE\n        </replacement>\n    </supplement>\n</config>\n", "<?xml version='1.0' encoding='UTF-8'?>\n<!--\n  ~ JBoss, Home of Professional Open Source.\n  ~ Copyright 2017, Red Hat, Inc., and individual contributors\n  ~ as indicated by the @author tags. See the copyright.txt file in the\n  ~ distribution for a full listing of individual contributors.\n  ~\n  ~ This is free software; you can redistribute it and/or modify it\n  ~ under the terms of the GNU Lesser General Public License as\n  ~ published by the Free Software Foundation; either version 2.1 of\n  ~ the License, or (at your option) any later version.\n  ~\n  ~ This software is distributed in the hope that it will be useful,\n  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  ~ Lesser General Public License for more details.\n  ~\n  ~ You should have received a copy of the GNU Lesser General Public\n  ~ License along with this software; if not, write to the Free\n  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  -->\n\n<!--  See src/resources/configuration/ReadMe.txt for how the configuration assembly works -->\n<config>\n    <extension-module>org.wildfly.extension.undertow</extension-module>\n    <subsystem xmlns=\"urn:jboss:domain:undertow:10.0\" default-server=\"default-server\" default-virtual-host=\"default-host\" default-servlet-container=\"default\" default-security-domain=\"other\" statistics-enabled=\"${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n        <buffer-cache name=\"default\"/>\n        <server name=\"default-server\">\n            <?AJP?>\n            <http-listener name=\"default\" socket-binding=\"http\" redirect-socket=\"https\" enable-http2=\"true\"/>\n            <https-listener name=\"https\" socket-binding=\"https\" security-realm=\"ApplicationRealm\" enable-http2=\"true\"/>\n            <host name=\"default-host\" alias=\"localhost\">\n                <location name=\"/\" handler=\"welcome-content\"/>\n                <http-invoker security-realm=\"ApplicationRealm\"/>\n            </host>\n        </server>\n        <servlet-container name=\"default\">\n            <jsp-config/>\n            <websockets/>\n        </servlet-container>\n        <handlers>\n            <file name=\"welcome-content\" path=\"${jboss.home.dir}/welcome-content\"/>\n        </handlers>\n    </subsystem>\n    <supplement name=\"ha\">\n        <replacement placeholder=\"AJP\">\n            <ajp-listener name=\"ajp\" socket-binding=\"ajp\" />\n        </replacement>\n    </supplement>\n    <socket-binding name=\"http\" port=\"${jboss.http.port:8080}\"/>\n    <socket-binding name=\"https\" port=\"${jboss.https.port:8443}\"/>\n    <socket-binding name=\"ajp\" port=\"${jboss.ajp.port:8009}\"/>\n</config>\n\n"], "fixing_code": ["embed-host-controller --domain-config=domain.xml\n\n# Early versions of keycloak used \"ha\" for the clustered profile name.\n# Yours maybe be something completely different.\nset clusteredProfile=auth-server-clustered\n\n# keycloak-server.json is not normally on this path.\nset pathToJson=../domain/configuration/keycloak-server.json\n\n\necho\necho *** Begin Migration of /profile=$clusteredProfile ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:read-resource\n  echo Adding replicated-cache=work to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:add(mode=SYNC)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 2.0.0\n# NO CHANGES\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /profile=$clusteredProfile/subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to keycloak-server subsystem...\n  /profile=$clusteredProfile/subsystem=keycloak-server/:migrate-json(file=$pathToJson)\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /profile=$clusteredProfile/subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /profile=$clusteredProfile/subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /profile=$clusteredProfile/subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n    # In migration from 3.0.0 to 3.2.0 there is authorization distributed-cache replaced with local-cache\n    try\n        echo \n        /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:add(mode=SYNC,owners=1)\n        echo Added distributed-cache=authorization\n    catch\n    end-try\nend-if\n\nif (result == update) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/:read-resource\n  echo Adding spi=publicKeyStorage...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:read-resource\n  echo Replacing invalidation-cache=users with local-cache=users\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/:add\n  echo\nend-if\nif (result == undefined) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction in local-cache=users\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:read-resource\n  echo Replacing invalidation-cache=realms with local-cache=realms\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/:add\n  echo\nend-if\n\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/:add\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/:add\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:read-resource\n  echo Adding distributed-cache=authenticationSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:read-resource\n  echo Adding distributed-cache=actionTokens to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:add(indexing=NONE,mode=SYNC,owners=2)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n  echo Replacing distributed-cache=authorization with local-cache=authorization\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=core-management/:read-resource\n    try\n        echo Trying to add core-management extension\n        /extension=org.wildfly.extension.core-management/:add\n        echo\n    catch\n        echo Wasn't able to add core-management extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem core-management\n    /profile=$clusteredProfile/subsystem=core-management/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=elytron/:read-resource\n    try\n        echo Trying to add elytron extension\n        /extension=org.wildfly.extension.elytron/:add\n        echo\n    catch\n        echo Wasn't able to add elytron extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem elytron\n    /profile=$clusteredProfile/subsystem=elytron/:add\n    /profile=$clusteredProfile/subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /profile=$clusteredProfile/subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /profile=$clusteredProfile/subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /profile=$clusteredProfile/subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /profile=$clusteredProfile/subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /profile=$clusteredProfile/subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.domain.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.domain.config.dir})\n    /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /profile=$clusteredProfile/subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /profile=$clusteredProfile/subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /profile=$clusteredProfile/subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /profile=$clusteredProfile/subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /profile=$clusteredProfile/subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /profile=$clusteredProfile/subsystem=elytron/provider-sasl-server-factory=global/:add\n    /profile=$clusteredProfile/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /profile=$clusteredProfile/subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /profile=$clusteredProfile/subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /profile=$clusteredProfile/subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /profile=$clusteredProfile/subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for web cache-container\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for ejb cache-container\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=ejb/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/channel=ee/:read-attribute(name=cluster)\n    echo Setting cluster attribute to ejb in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/channel=ee/:write-attribute(name=cluster,value=ejb)\n    echo\nend-if\n\nif (result != undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from udp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:add\n    echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD/:read-resource\n    echo Replacing tcp FD protocol with FD_ALL\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_ALL/:add\n    echo\nend-if   \n\nif (result != undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from tcp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:remove\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:add\n    echo\nend-if \n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=ha-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=ha-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /profile=$clusteredProfile/subsystem=undertow/configuration=filter/response-header=server-header/:remove\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /profile=$clusteredProfile/subsystem=jdr/:remove\n    echo\n    try\n        echo Trying to remove jdr extension\n        /extension=org.jboss.as.jdr/:remove\n        echo\n    catch\n        echo Wasn't able to remove jdr extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n    \nif (outcome == success) of /profile=$clusteredProfile/subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /profile=$clusteredProfile/subsystem=jsf/:remove\n    echo\n    try\n        echo Trying to remove jsf extension\n        /extension=org.jboss.as.jsf/:remove\n        echo\n    catch\n        echo Wasn't able to remove jsf extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:read-resource\n  echo Adding distributed-cache=offlineClientSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:read-resource\n  echo Adding distributed-cache=clientSessions to keycloak cache container...\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /profile=$clusteredProfile/subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /profile=$clusteredProfile/subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /profile=$clusteredProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=default-cache)\n  echo Remove default cache from hibernate cache\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate:undefine-attribute(name=default-cache)\n  echo\nend-if\nif (result == ASYNC) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:read-attribute(name=mode)\n  echo Switching mode for timestamps cache from ASYNC to SYNC\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:write-attribute(name=mode, value=SYNC)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/distributed-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /profile=$clusteredProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for tcp stack\n  /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG2:remove\n  /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for udp stack\n  /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG2:remove\n  /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/subsystem=remoting/configuration=endpoint:read-resource\n  echo Remove endpoint from remoting configuration\n  /profile=$clusteredProfile/subsystem=remoting/configuration=endpoint:remove\n  echo\nend-if\nif (outcome == success) of /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=jgroups-mping:read-attribute(name=port)\n  /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=jgroups-mping:undefine-attribute(name=port)\nend-if\nif (outcome == success) of /socket-binding-group=$clusteredProfile-sockets/socket-binding=modcluster:read-attribute(name=port)\n  /profile=$clusteredProfile/socket-binding-group=$clusteredProfile-sockets/socket-binding=modcluster:undefine-attribute(name=port)\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /profile=$clusteredProfile/subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /profile=$clusteredProfile/subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$clusteredProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /profile=$clusteredProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /profile=$clusteredProfile/subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /profile=$clusteredProfile/subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /profile=$clusteredProfile/subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$clusteredProfile/subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /profile=$clusteredProfile/subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=routing:read-resource\n    echo Adding distributed cache routing to web cache container to infinispan subsystem\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/distributed-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso:read-resource\n    echo Adding replicated cache sso to web cache container to infinispan subsystem\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/:add\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=web/replicated-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=ha-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Adding jgroups-tcp-fd socket binding to ha-sockets binding group\n    /socket-binding-group=ha-sockets/socket-binding=jgroups-tcp-fd/:add(interface=private,port=57600)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=ha-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Adding jgroups-udp-fd socket binding to ha-sockets binding group\n    /socket-binding-group=ha-sockets/socket-binding=jgroups-udp-fd/:add(interface=private,port=54200)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for tcp stack in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-tcp-fd)\n    echo\nend-if\n\nif (result == undefined) of /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for udp stack in jgroups subsystem\n    /profile=$clusteredProfile/subsystem=jgroups/stack=udp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-udp-fd)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /profile=$clusteredProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /profile=$clusteredProfile/subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 8.0.0 to 9.0.5\n\nif (result == 120000 || result == undefined) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=read-timeout)\n    echo Updating value of http listener read-timeout.\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 120000 || result == undefined) of /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:read-attribute(name=read-timeout)\n    echo Updating value of https listener read-timeout.\n    /profile=$clusteredProfile/subsystem=undertow/server=default-server/https-listener=https/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 20 || result == undefined) of /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=max-pool-size)\n    echo Updating value of datasource max-pool-size.\n    /profile=$clusteredProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=max-pool-size,value=100)\n    echo\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container in auth-server-clustered profile so JBoss Marshalling works properly with Infinispan 10.x\n    /profile=$clusteredProfile/subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration of /profile=$clusteredProfile ***\n", "embed-host-controller --domain-config=domain.xml\n\n# Early versions of keycloak used \"default\" for the standalone profile name.\n# Yours maybe be something completely different.\nset standaloneProfile=auth-server-standalone\n\n# keycloak-server.json is not normally on this path.\nset pathToJson=../domain/configuration/keycloak-server.json\n\n\necho *** Begin Migration of /profile=$standaloneProfile ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=work/:read-resource\n  echo Adding local-cache=work to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=work/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 1.9.8\n# NO CHANGES\n\n# Migrate from 1.9.8 to 2.0.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:read-resource\n  echo Adding local-cache=authorization to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating authorization cache container..\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=100)\n  echo\nend-if\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /profile=$standaloneProfile/subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to keycloak-server subsystem...\n  /profile=$standaloneProfile/subsystem=keycloak-server/:migrate-json(file=$pathToJson)\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /profile=$standaloneProfile/subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /profile=$standaloneProfile/subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /profile=$standaloneProfile/subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (result == update) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\n# NO CHANGES\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/:add\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/:add\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:read-resource\n  echo Adding local-cache=authenticationSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:read-resource\n  echo Adding local-cache=actionTokens to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:add(indexing=NONE,start=LAZY)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (result == 100L) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=max-entries)\n    echo Updating eviction in local-cache=authorization...\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n    echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=core-management/:read-resource\n    try\n        echo Trying to add core-management extension\n        /extension=org.wildfly.extension.core-management/:add\n        echo\n    catch\n        echo Wasn't able to add core-management extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem core-management\n    /profile=$standaloneProfile/subsystem=core-management/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=elytron/:read-resource\n    try\n        echo Trying to add elytron extension\n        /extension=org.wildfly.extension.elytron/:add\n        echo\n    catch\n        echo Wasn't able to add elytron extension, it should be already added by migrate-domain-standalone.cli\n        echo\n    end-try\n    echo Adding subsystem elytron\n    /profile=$standaloneProfile/subsystem=elytron/:add\n    /profile=$standaloneProfile/subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /profile=$standaloneProfile/subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /profile=$standaloneProfile/subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /profile=$standaloneProfile/subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /profile=$standaloneProfile/subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /profile=$standaloneProfile/subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.domain.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.domain.config.dir})\n    /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /profile=$standaloneProfile/subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /profile=$standaloneProfile/subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /profile=$standaloneProfile/subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /profile=$standaloneProfile/subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /profile=$standaloneProfile/subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /profile=$standaloneProfile/subsystem=elytron/provider-sasl-server-factory=global/:add\n    /profile=$standaloneProfile/subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /profile=$standaloneProfile/subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /profile=$standaloneProfile/subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /profile=$standaloneProfile/subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /profile=$standaloneProfile/subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from web cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=persistent:remove\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from ejb cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=ejb/local-cache=persistent:remove\n    echo\nend-if\n\nif (result == local-query) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/:read-attribute(name=default-cache)\n    echo Removing default-cache from hibernate cache-container\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/:undefine-attribute(name=default-cache)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=ha-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=ha-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /profile=$standaloneProfile/subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /profile=$standaloneProfile/subsystem=jdr/:remove\n    echo\n    try\n        echo Trying to remove jdr extension\n        /extension=org.jboss.as.jdr/:remove\n        echo\n    catch\n        echo Wasn't able to remove jdr extension, it should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n    \nif (outcome == success) of /profile=$standaloneProfile/subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /profile=$standaloneProfile/subsystem=jsf/:remove\n    echo\n    try\n        echo Trying to remove jsf extension\n        /extension=org.jboss.as.jsf/:remove\n        echo\n    catch\n        echo Wasn't able to remove jsf extension, Should be removed by migrate-domain-standalone.cli\n        echo\n    end-try\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:read-resource\n  echo Adding local-cache=clientSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:read-resource\n  echo Adding local-cache=offlineClientSessions to keycloak cache container...\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /profile=$standaloneProfile/subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /profile=$standaloneProfile/subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /profile=$standaloneProfile/subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /profile=$standaloneProfile/subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /profile=$standaloneProfile/subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /profile=$standaloneProfile/subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /profile=$standaloneProfile/subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$standaloneProfile/subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /profile=$standaloneProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /profile=$standaloneProfile/subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /profile=$standaloneProfile/subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /profile=$standaloneProfile/subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /profile=$standaloneProfile/subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /profile=$standaloneProfile/subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /profile=$standaloneProfile/subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /profile=$standaloneProfile/subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=routing:read-resource\n    echo Adding local cache routing to web cache container to infinispan subsystem\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso:read-resource\n    echo Adding local cache sso to web cache container to infinispan subsystem\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/:add\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=web/local-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /profile=$standaloneProfile/subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (outcome == failed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /profile=$standaloneProfile/subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 8.0.0 to 9.0.5\n\nif (result == 120000 || result == undefined) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=read-timeout)\n    echo Updating value of http listener read-timeout.\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 120000 || result == undefined) of /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:read-attribute(name=read-timeout)\n    echo Updating value of https listener read-timeout.\n    /profile=$standaloneProfile/subsystem=undertow/server=default-server/https-listener=https/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 20 || result == undefined) of /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=max-pool-size)\n    echo Updating value of datasource max-pool-size.\n    /profile=$standaloneProfile/subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=max-pool-size,value=100)\n    echo\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /profile=$standaloneProfile/subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration of /profile=$standaloneProfile ***\n", "embed-server --server-config=standalone-ha.xml\n\necho *** Begin Migration ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:read-resource\n  echo Adding replicated-cache=work to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/replicated-cache=work/:add(mode=SYNC)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 2.0.0\n# NO CHANGES\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to server cofig xml...\n  /subsystem=keycloak-server/:migrate-json\n  echo\nend-if\n\nset persistenceProvider=jpa\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /extension=org.jboss.as.deployment-scanner/:read-resource\n  echo Adding deployment-scanner extension...\n  /extension=org.jboss.as.deployment-scanner/:add(module=org.jboss.as.deployment-scanner)\n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/:read-resource\n  echo Adding deployment-scanner...\n  /subsystem=deployment-scanner/:add  \n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/scanner=default/:read-resource\n  echo Adding scanner=default\n  /subsystem=deployment-scanner/scanner=default/:add(path=deployments,relative-to=jboss.server.base.dir,runtime-failure-causes-rollback=${jboss.deployment.scanner.rollback.on.failure:false},scan-interval=5000)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n    # In migration from 3.0.0 to 3.2.0 there is authorization distributed-cache replaced with local-cache\n    try\n        echo \n        /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:add(mode=SYNC,owners=1)\n        echo Added distributed-cache=authorization\n    catch\n    end-try\nend-if\n\nif (result == update) of /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:read-resource\n  echo Replacing invalidation-cache=users with local-cache=users\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=users/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/:add\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction in local-cache=users\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:read-resource\n  echo Replacing invalidation-cache=realms with local-cache=realms\n  /subsystem=infinispan/cache-container=keycloak/invalidation-cache=realms/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/:add\n  echo\nend-if\n\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /subsystem=keycloak-server/spi=userCache/:add\n   /subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /subsystem=keycloak-server/spi=realmCache/:add\n   /subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.2.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:read-resource\n  echo Adding distributed-cache=authenticationSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=authenticationSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:read-resource\n  echo Adding distributed-cache=actionTokens to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/:add(indexing=NONE,mode=SYNC,owners=2)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:read-resource\n  echo Replacing distributed-cache=authorization with local-cache=authorization\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=authorization/:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:read-resource\n    echo Adding keystore to ApplicationRealm...\n    /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:add(keystore-path=application.keystore,keystore-relative-to=jboss.server.config.dir,keystore-password=password,alias=server,key-password=password,generate-self-signed-certificate-host=localhost)\n    echo\nend-if \n\nif (outcome == failed) of /extension=org.wildfly.extension.elytron/:read-resource\n    echo Adding elytron extension...\n    /extension=org.wildfly.extension.elytron/:add(module=org.wildfly.extension.elytron)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=elytron/:read-resource\n    echo Adding elytron subsystem\n    /subsystem=elytron:add\n    /subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/properties-realm=ManagementRealm/:add(users-properties={path=mgmt-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ManagementRealm},groups-properties={path=mgmt-groups.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /subsystem=elytron/security-domain=ManagementDomain/:add(default-realm=ManagementRealm,permission-mapper=default-permission-mapper,realms=[{realm=ManagementRealm,role-decoder=groups-to-roles},{realm=local,role-mapper=super-user-mapper}])\n    /subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /subsystem=elytron/http-authentication-factory=management-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /subsystem=elytron/provider-sasl-server-factory=global/:add\n    /subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /subsystem=elytron/sasl-authentication-factory=management-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (result == ASYNC) of /subsystem=infinispan/cache-container=web/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for web cache-container\n    /subsystem=infinispan/cache-container=web/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == ASYNC) of /subsystem=infinispan/cache-container=ejb/distributed-cache=dist:read-attribute(name=mode)\n    echo Setting SYNC mode for ejb cache-container\n    /subsystem=infinispan/cache-container=ejb/distributed-cache=dist:write-attribute(name=mode,value=SYNC)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/channel=ee/:read-attribute(name=cluster)\n    echo Setting cluster attribute to ejb in jgroups subsystem\n    /subsystem=jgroups/channel=ee/:write-attribute(name=cluster,value=ejb)\n    echo\nend-if\n\nif (result != undefined) of /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from udp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:remove\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:add\n    echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/protocol=FD/:read-resource\n    echo Replacing tcp FD protocol with FD_ALL\n    /subsystem=jgroups/stack=tcp/protocol=FD/:remove\n    /subsystem=jgroups/stack=tcp/protocol=FD_ALL/:add\n    echo\nend-if   \n\nif (result != undefined) of /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Unsetting socket-binding from tcp FD_SOCK protocol\n    # it has to be done via remove and add, because socket-binding is not writable attribute\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:remove\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:add\n    echo\nend-if \n\nif (outcome == failed) of /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Removing socket-binding jgroups-tcp-fd\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:remove\n    echo\nend-if\n\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Removing socket-binding jgroups-udp-fd\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:remove\n    echo\nend-if\n\nif (result == 224.0.1.105) of /socket-binding-group=standard-sockets/socket-binding=modcluster/:read-attribute(name=multicast-address)\n    echo Adding jboss.modcluster.multicast.address property to modcluster multicast-address\n    /socket-binding-group=standard-sockets/socket-binding=modcluster/:write-attribute(name=multicast-address,value=${jboss.modcluster.multicast.address:224.0.1.105})\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /subsystem=jdr/:remove\n    /extension=org.jboss.as.jdr/:remove\n    echo\nend-if\n    \nif (outcome == success) of /subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /subsystem=jsf/:remove\n    /extension=org.jboss.as.jsf/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:read-resource\n  echo Adding distributed-cache=clientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=clientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:read-resource\n  echo Adding distributed-cache=offlineClientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/distributed-cache=offlineClientSessions/:add(mode=SYNC,owners=1)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\n\nif (result == org.hibernate.infinispan) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=default-cache)\n  echo Remove default cache from hibernate cache\n  /subsystem=infinispan/cache-container=hibernate:undefine-attribute(name=default-cache)\n  echo\nend-if\nif (result == ASYNC) of /subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:read-attribute(name=mode)\n  echo Switching mode for timestamps cache from ASYNC to SYNC\n  /subsystem=infinispan/cache-container=hibernate/replicated-cache=timestamps:write-attribute(name=mode, value=SYNC)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/distributed-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for tcp stack\n  /subsystem=jgroups/stack=tcp/protocol=FRAG2:remove\n  /subsystem=jgroups/stack=tcp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /subsystem=jgroups/stack=udp/protocol=FRAG2:read-resource\n  echo Upgrade jgroups protocol from FRAG2 to FRAG3 for udp stack\n  /subsystem=jgroups/stack=udp/protocol=FRAG2:remove\n  /subsystem=jgroups/stack=udp/protocol=FRAG3:add()\n  echo\nend-if\nif (outcome == success) of /subsystem=remoting/configuration=endpoint:read-resource\n  echo Remove endpoint from remoting configuration\n  /subsystem=remoting/configuration=endpoint:remove\n  echo\nend-if\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:read-attribute(name=port)\n  /socket-binding-group=standard-sockets/socket-binding=jgroups-mping:undefine-attribute(name=port)\nend-if\nif (outcome == success) of /socket-binding-group=standard-sockets/socket-binding=modcluster:read-attribute(name=port)\n  /socket-binding-group=standard-sockets/socket-binding=modcluster:undefine-attribute(name=port)\nend-if\n\nif (outcome == success) of /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.4.0 to 4.5.0\nif (outcome == failed) of /subsystem=core-management/:read-resource\n    echo Adding core-management extension\n    /extension=org.wildfly.extension.core-management/:add\n    echo Adding subsystem core-management\n    /subsystem=core-management/:add\n    echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=udp/transport=UDP/property=port_range:read-attribute(name=value)\n    try\n        /subsystem=jgroups/stack=udp/transport=UDP/property=port_range:remove\n        echo Remove port_range property from UDP transport type of udp stack\n    catch\n        echo\n    end-try\nend-if\n\nif (outcome == success) of /subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:read-attribute(name=value)\n    try\n        /subsystem=jgroups/stack=tcp/transport=TCP/property=port_range:remove\n        echo Remove port_range property from TCP transport type of tcp stack\n    catch\n        echo\n    end-try\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource \n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.jboss.as.weld/:read-resource\n    echo Adding weld extension\n    /extension=org.jboss.as.weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=weld/:read-resource\n    echo Adding weld subsystem\n    /subsystem=weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.config-smallrye/:read-resource\n    echo Adding microprofile.config-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.config-smallrye/:add(module=org.wildfly.extension.microprofile.config-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-config-smallrye/:read-resource\n    echo Adding microprofile-config-smallrye subsystem\n    /subsystem=microprofile-config-smallrye/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.health-smallrye/:read-resource\n    echo Adding microprofile.health-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.health-smallrye/:add(module=org.wildfly.extension.microprofile.health-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-health-smallrye/:read-resource\n    echo Adding microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye/:add\n    /subsystem=microprofile-health-smallrye/:write-attribute(name=security-enabled,value=false)\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.metrics-smallrye/:read-resource\n    echo Adding microprofile.metrics-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.metrics-smallrye/:add(module=org.wildfly.extension.microprofile.metrics-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-metrics-smallrye/:read-resource\n    echo Adding microprofile-metrics-smallrye subsystem\n    /subsystem=microprofile-metrics-smallrye/:add\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=security-enabled,value=false)\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=exposed-subsystems,value=[*])\n    echo\nend-if\n\nif (result == \"Keycloak\") of :read-attribute(name=product-name)\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to Keycloak\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:wildfly})\nelse\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to RH-SSO\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:jboss})\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/distributed-cache=routing:read-resource\n    echo Adding distributed cache routing to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/distributed-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/replicated-cache=sso:read-resource\n    echo Adding replicated cache sso to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/:add\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /subsystem=infinispan/cache-container=web/replicated-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:read-resource\n    echo Adding jgroups-tcp-fd socket binding to socket binding group\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-tcp-fd/:add(interface=private,port=57600)\n    echo\nend-if\n\nif (outcome == failed) of /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:read-resource\n    echo Adding jgroups-udp-fd socket binding to socket binding group\n    /socket-binding-group=standard-sockets/socket-binding=jgroups-udp-fd/:add(interface=private,port=54200)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for tcp stack in jgroups subsystem\n    /subsystem=jgroups/stack=tcp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-tcp-fd)\n    echo\nend-if\n\nif (result == undefined) of /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:read-attribute(name=socket-binding)\n    echo Adding socket-binding for FD_SOCK protocol for udp stack in jgroups subsystem\n    /subsystem=jgroups/stack=udp/protocol=FD_SOCK/:write-attribute(name=socket-binding,value=jgroups-udp-fd)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)\n    echo Adding empty-liveness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-liveness-checks-status, value=${env.MP_HEALTH_EMPTY_LIVENESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)\n    echo Adding empty-readiness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-readiness-checks-status, value=${env.MP_HEALTH_EMPTY_READINESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 8.0.0 to 9.0.5\n\nif (result == 120000 || result == undefined) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=read-timeout)\n    echo Updating value of http listener read-timeout.\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 120000 || result == undefined) of /subsystem=undertow/server=default-server/https-listener=https/:read-attribute(name=read-timeout)\n    echo Updating value of https listener read-timeout.\n    /subsystem=undertow/server=default-server/https-listener=https/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 20 || result == undefined) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=max-pool-size)\n    echo Updating value of datasource max-pool-size.\n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=max-pool-size,value=100)\n    echo\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration ***\n", "embed-server --server-config=standalone.xml\n\necho *** Begin Migration ***\necho\n\n# Migrate from 1.8.1 to 1.9.1\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=work/:read-resource\n  echo Adding local-cache=work to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=work/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n# realmVersions cache deprecated in 2.1.0\n#if (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n#  echo Adding local-cache=realmVersions to keycloak cache container...\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:add(indexing=NONE,start=LAZY)\n#  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/component=transaction/:write-attribute(name=mode,value=BATCH)\n#  echo\n#end-if\n\n\n# Migrate from 1.9.1 to 1.9.2\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:read-attribute(name=strategy)\n  echo Adding eviction strategy to keycloak users cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 1.9.2 to 1.9.8\n# NO CHANGES\n\n# Migrate from 1.9.8 to 2.0.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:read-resource\n  echo Adding local-cache=authorization to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating authorization cache container..\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=100)\n  echo\nend-if\n\n# Migrate from 2.0.0 to 2.1.0\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:read-resource\n  echo Removing deprecated cache 'realmVersions'\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realmVersions/:remove\n  echo\nend-if\n\n# Migrate kecloak-server.json (deprecated in 2.2.0)\nif (result == []) of /subsystem=keycloak-server/:read-children-names(child-type=spi)\n  echo Migrating keycloak-server.json to server cofig xml...\n  /subsystem=keycloak-server/:migrate-json\n  echo\nend-if\nif (result == [expression \"classpath:${jboss.server.config.dir}/providers/*\"]) of /subsystem=keycloak-server/:read-attribute(name=providers)\n    echo Updating provider to default value\n    /subsystem=keycloak-server/:write-attribute(name=providers,value=[classpath:${jboss.home.dir}/providers/*])\n    echo\nend-if\nif (result == keycloak) of /subsystem=keycloak-server/theme=defaults:read-attribute(name=default)\n    echo Undefining default theme...\n    /subsystem=keycloak-server/theme=defaults:undefine-attribute(name=default)\n    echo\nend-if\nif (result == expression \"${jboss.server.config.dir}/themes\") of /subsystem=keycloak-server/theme=defaults:read-attribute(name=dir)\n    echo Updating theme dir to default value\n    /subsystem=keycloak-server/theme=defaults/:write-attribute(name=dir,value=${jboss.home.dir}/themes)\n    echo\nend-if\n\nset persistenceProvider=jpa\n\n# Migrate from 2.1.0 to 2.2.0\nif (outcome == failed) of /extension=org.jboss.as.deployment-scanner/:read-resource\n  echo Adding deployment-scanner extension...\n  /extension=org.jboss.as.deployment-scanner/:add(module=org.jboss.as.deployment-scanner)\n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/:read-resource\n  echo Adding deployment-scanner...\n  /subsystem=deployment-scanner/:add  \n  echo\nend-if\nif (outcome == failed) of /subsystem=deployment-scanner/scanner=default/:read-resource\n  echo Adding scanner=default\n  /subsystem=deployment-scanner/scanner=default/:add(path=deployments,relative-to=jboss.server.base.dir,runtime-failure-causes-rollback=${jboss.deployment.scanner.rollback.on.failure:false},scan-interval=5000)\n  echo\nend-if\nif (result == update) of /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-get(name=properties,key=databaseSchema)\n  echo Updating connectionsJpa default properties...\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-remove(name=properties,key=databaseSchema)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=initializeEmpty,value=true)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationStrategy,value=update)\n  /subsystem=keycloak-server/spi=connectionsJpa/provider=default/:map-put(name=properties,key=migrationExport,value=${jboss.home.dir}/keycloak-database-update.sql)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource\n  echo Adding spi=userFederatedStorage...\n  /subsystem=keycloak-server/spi=userFederatedStorage/:add(default-provider=$persistenceProvider)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=jta-lookup/:read-resource\n  echo Adding spi=jta-lookup...\n  /subsystem=keycloak-server/spi=jta-lookup/:add(default-provider=${keycloak.jta.lookup.provider:jboss})\n  /subsystem=keycloak-server/spi=jta-lookup/provider=jboss/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 2.2.0 to 2.2.1\n# NO CHANGES\n\n# Migrate from 2.2.1 to 2.3.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:read-resource\n  echo Adding local-cache=keys to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\nif (result == undefined) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:read-attribute(name=strategy,include-defaults=false)\n  echo Updating eviction and expiration in local-cache=keys...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=eviction/:write-attribute(name=max-entries,value=1000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/component=expiration/:write-attribute(name=max-idle,value=3600000)\n  echo\nend-if\nif (outcome == failed) of /subsystem=keycloak-server/spi=publicKeyStorage/:read-resource  \n  echo Adding spi=publicKeyStorage...\n  /subsystem=keycloak-server/spi=publicKeyStorage/:add\n  /subsystem=keycloak-server/spi=publicKeyStorage/provider=infinispan/:add(properties={minTimeBetweenRequests => \"10\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 2.3.0 to 2.4.0\n# NO CHANGES\n\n# Migrate from 2.4.0 to 2.5.0\nif (result == NONE) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:read-attribute(name=strategy)  \n  echo Adding eviction strategy to keycloak realms cache...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=strategy,value=LRU)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/component=eviction/:write-attribute(name=max-entries,value=10000)\n  echo\nend-if\n\n# Migrate from 2.5.0 to 2.5.1\n# NO CHANGES\n\n# Migrate 2.5.1 to 2.5.4\nif (result != REPEATABLE_READ) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:read-attribute(name=isolation)\n  echo Changing ejb cache locking to REPEATABLE_READ\n  /subsystem=infinispan/cache-container=ejb/local-cache=persistent/component=locking/:write-attribute(name=isolation,value=REPEATABLE_READ)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:read-resource\n   echo Removing Hibernate immutable-entity cache\n   /subsystem=infinispan/cache-container=hibernate/local-cache=immutable-entity/:remove\nend-if\n\n\n# Migrate from 2.5.4 to 3.0.0 \nif (result == jpa) of /subsystem=keycloak-server/spi=eventsStore/:read-attribute(name=default-provider,include-defaults=false)\n   echo Removing default provider for eventsStore\n   /subsystem=keycloak-server/spi=eventsStore/:undefine-attribute(name=default-provider)\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=realm/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=realm/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=user/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for user SPI\n   /subsystem=keycloak-server/spi=user/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=userFederatedStorage/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for userFederatedStorage SPI\n   /subsystem=keycloak-server/spi=userFederatedStorage/:remove\n   echo\nend-if\n\nif ((outcome == success) && (result.default-provider == jpa) && (result.provider == undefined)) of /subsystem=keycloak-server/spi=authorizationPersister/:read-resource(recursive=false,include-defaults=false)\n   echo Removing declaration for authorizationPersister SPI\n   /subsystem=keycloak-server/spi=authorizationPersister/:remove\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=userCache/:read-resource\n   echo Adding userCache SPI\n   /subsystem=keycloak-server/spi=userCache/:add\n   /subsystem=keycloak-server/spi=userCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=realmCache/:read-resource\n   echo Adding realmCache SPI\n   /subsystem=keycloak-server/spi=realmCache/:add\n   /subsystem=keycloak-server/spi=realmCache/provider=default/:add(enabled=true)\n   echo\nend-if\n\nif ((result.default-provider == undefined) && (result.provider.default.enabled == true)) of /subsystem=keycloak-server/spi=connectionsInfinispan/:read-resource(recursive=true,include-defaults=false)\n   echo Adding 'default' as default provider for connectionsInfinispan\n   /subsystem=keycloak-server/spi=connectionsInfinispan/:write-attribute(name=default-provider,value=default)\n   echo\nend-if\n\n# Migrate from 3.0.0 to 3.1.0\n# NO CHANGES\n\n# Migrate from 3.1.0 to 3.2.0\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:read-resource\n  echo Adding local-cache=authenticationSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authenticationSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:read-resource\n  echo Adding local-cache=actionTokens to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/:add(indexing=NONE,start=LAZY)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=strategy,value=NONE)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=eviction/:write-attribute(name=max-entries,value=-1)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=interval,value=300000)\n  /subsystem=infinispan/cache-container=keycloak/local-cache=actionTokens/component=expiration/:write-attribute(name=max-idle,value=-1)\n  echo\nend-if\n\nif (result == 100L) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:read-attribute(name=max-entries)\n    echo Updating eviction in local-cache=authorization...\n    /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/component=eviction/:write-attribute(name=max-entries,value=10000)\n    echo\nend-if\n\n# Migrate from 3.2.0 to 3.2.1\n# NO CHANGES\n\n# Migrate from 3.2.1 to 3.3.0\nif (outcome == failed) of /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:read-resource\n    echo Adding keystore to ApplicationRealm...\n    /core-service=management/security-realm=ApplicationRealm/server-identity=ssl:add(keystore-path=application.keystore,keystore-relative-to=jboss.server.config.dir,keystore-password=password,alias=server,key-password=password,generate-self-signed-certificate-host=localhost)\n    echo\nend-if    \n\nif (outcome == failed) of /extension=org.wildfly.extension.elytron/:read-resource\n    echo Adding elytron extension...\n    /extension=org.wildfly.extension.elytron/:add(module=org.wildfly.extension.elytron)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=elytron/:read-resource\n    echo Adding elytron subsystem\n    /subsystem=elytron:add\n    /subsystem=elytron/provider-loader=elytron/:add(module=org.wildfly.security.elytron)\n    /subsystem=elytron/provider-loader=openssl/:add(module=org.wildfly.openssl)\n    /subsystem=elytron/aggregate-providers=combined-providers/:add(providers=[elytron,openssl])\n    /subsystem=elytron/file-audit-log=local-audit/:add(path=audit.log,relative-to=jboss.server.log.dir,format=JSON)\n    /subsystem=elytron/identity-realm=local/:add(identity=\"$local\")\n    /subsystem=elytron/properties-realm=ApplicationRealm/:add(users-properties={path=application-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ApplicationRealm},groups-properties={path=application-roles.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/properties-realm=ManagementRealm/:add(users-properties={path=mgmt-users.properties,relative-to=jboss.server.config.dir,digest-realm-name=ManagementRealm},groups-properties={path=mgmt-groups.properties,relative-to=jboss.server.config.dir})\n    /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:add(mapping-mode=first,permission-mappings=[{principals=[anonymous],permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]},{match-all=true,permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission},{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}]}])\n    /subsystem=elytron/constant-realm-mapper=local/:add(realm-name=local)\n    /subsystem=elytron/simple-role-decoder=groups-to-roles/:add(attribute=groups)\n    /subsystem=elytron/constant-role-mapper=super-user-mapper/:add(roles=[SuperUser])\n    /subsystem=elytron/security-domain=ApplicationDomain/:add(default-realm=ApplicationRealm,permission-mapper=default-permission-mapper,realms=[{realm=ApplicationRealm,role-decoder=groups-to-roles},{realm=local}])\n    /subsystem=elytron/security-domain=ManagementDomain/:add(default-realm=ManagementRealm,permission-mapper=default-permission-mapper,realms=[{realm=ManagementRealm,role-decoder=groups-to-roles},{realm=local,role-mapper=super-user-mapper}])\n    /subsystem=elytron/provider-http-server-mechanism-factory=global/:add\n    /subsystem=elytron/http-authentication-factory=management-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=DIGEST,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/http-authentication-factory=application-http-authentication/:add(http-server-mechanism-factory=global,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=Application Realm}]},{mechanism-name=FORM}])\n    /subsystem=elytron/provider-sasl-server-factory=global/:add\n    /subsystem=elytron/mechanism-provider-filtering-sasl-server-factory=elytron/:add(sasl-server-factory=global,filters=[{provider-name=WildFlyElytron}])\n    /subsystem=elytron/configurable-sasl-server-factory=configured/:add(sasl-server-factory=elytron,properties={wildfly.sasl.local-user.default-user => \"$local\"})\n    /subsystem=elytron/sasl-authentication-factory=management-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ManagementDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ManagementRealm}]}])\n    /subsystem=elytron/sasl-authentication-factory=application-sasl-authentication/:add(sasl-server-factory=configured,security-domain=ApplicationDomain,mechanism-configurations=[{mechanism-name=JBOSS-LOCAL-USER,realm-mapper=local},{mechanism-name=DIGEST-MD5,mechanism-realm-configurations=[{realm-name=ApplicationRealm}]}])\n    /subsystem=elytron/:write-attribute(name=final-providers,value=combined-providers)\n    /subsystem=elytron/:write-attribute(name=disallowed-providers,value=[OracleUcrypto])\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Adding channel-creation-options READ_TIMEOUT to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:add(value=\"${prop.remoting-connector.read.timeout:20}\",type=xnio)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:read-resource\n    echo Adding channel-creation-options MAX_OUTBOUND_MESSAGES to ejb3 remote\n    /subsystem=ejb3/service=remote/channel-creation-options=MAX_OUTBOUND_MESSAGES/:add(value=1234,type=remoting)\n    echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=web/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from web cache-container\n    /subsystem=infinispan/cache-container=web/local-cache=persistent:remove\n    echo\nend-if\n\nif (outcome == success) of /subsystem=infinispan/cache-container=ejb/local-cache=persistent:read-resource\n    echo Removing local-cache persistent from ejb cache-container\n    /subsystem=infinispan/cache-container=ejb/local-cache=persistent:remove\n    echo\nend-if\n\nif (result == local-query) of /subsystem=infinispan/cache-container=hibernate/:read-attribute(name=default-cache)\n    echo Removing default-cache from hibernate cache-container\n    /subsystem=infinispan/cache-container=hibernate/:undefine-attribute(name=default-cache)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:read-resource\n    echo Adding http-invoker to default-host\n    /subsystem=undertow/server=default-server/host=default-host/setting=http-invoker/:add(security-realm=ApplicationRealm)\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=enable-http2)\n    echo Enabling http2 for default http-listener\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=enable-http2,value=true)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=undertow/server=default-server/https-listener=https/:read-resource\n    echo Adding https-listener\n    /subsystem=undertow/server=default-server/https-listener=https/:add(socket-binding=https,security-realm=ApplicationRealm,enable-http2=true)\n    echo\nend-if\n\n# Migrate from 3.3.0 to 3.4.0\nif (outcome == success) of /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:read-resource\n  echo Removing X-Powered-By and Server headers from Keycloak responses...\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=server-header/:remove\n  /subsystem=undertow/server=default-server/host=default-host/filter-ref=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=x-powered-by-header/:remove\n  /subsystem=undertow/configuration=filter/response-header=server-header/:remove\n  echo\nend-if\n\nif (outcome == success) of /subsystem=jdr/:read-resource\n    echo Removing jdr subsystem and extension\n    /subsystem=jdr/:remove\n    /extension=org.jboss.as.jdr/:remove\n    echo\nend-if\n    \nif (outcome == success) of /subsystem=jsf/:read-resource\n    echo Removing jsf subsystem and extension\n    /subsystem=jsf/:remove\n    /extension=org.jboss.as.jsf/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:read-resource\n  echo Adding local-cache=offlineClientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=offlineClientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:read-resource\n  echo Adding local-cache=clientSessions to keycloak cache container...\n  /subsystem=infinispan/cache-container=keycloak/local-cache=clientSessions/:add(indexing=NONE,start=LAZY)\n  echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=x509cert-lookup/:read-resource\n  echo Adding spi=x509cert-lookup...\n  /subsystem=keycloak-server/spi=x509cert-lookup/:add(default-provider=${keycloak.x509cert.lookup.provider:default})\n  /subsystem=keycloak-server/spi=x509cert-lookup/provider=default/:add(enabled=true)\n  echo\nend-if\n\n# Migrate from 4.2.0 to 4.3.0\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/:read-resource\n  echo Adding spi=hostname...\n  /subsystem=keycloak-server/spi=hostname/:add(default-provider=request)\n  /subsystem=keycloak-server/spi=hostname/provider=fixed/:add(properties={hostname => \"localhost\",httpPort => \"-1\",httpsPort => \"-1\"},enabled=true)\n  echo\nend-if\n\n# Migrate from 4.3.0 to 4.4.0\nif (outcome == failed) of /subsystem=elytron/permission-set=login-permission/:read-resource\n  echo Adding permission-set=login-permission to elytron\n  /subsystem=elytron/permission-set=login-permission:add(permissions=[{class-name=org.wildfly.security.auth.permission.LoginPermission}])\n  /subsystem=elytron/permission-set=default-permissions/:add(permissions=[{class-name=org.wildfly.extension.batch.jberet.deployment.BatchPermission,module=org.wildfly.extension.batch.jberet,target-name=*},{class-name=org.wildfly.transaction.client.RemoteTransactionPermission,module=org.wildfly.transaction.client},{class-name=org.jboss.ejb.client.RemoteEJBPermission,module=org.jboss.ejb-client}])\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper/:undefine-attribute(name=permission-mappings)\n  /subsystem=elytron/simple-permission-mapper=default-permission-mapper:write-attribute(name=permission-mappings,value=[{permission-sets=[{permission-set=login-permission},{permission-set=default-permissions}],match-all=true},{permission-sets=[{permission-set=default-permissions}],principals=[anonymous]}])\n  echo\nend-if\n\nif (result == org.hibernate.infinispan) of /subsystem=infinispan/cache-container=hibernate:read-attribute(name=module)\n  echo Update hibernate cache module\n  /subsystem=infinispan/cache-container=hibernate:write-attribute(name=module, value=org.infinispan.hibernate-cache)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate entity cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=entity/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:read-resource\n  echo Removing eviction from hibernate local-query cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=hibernate/local-cache=local-query/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak realms cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=realms/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak users cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=users/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak authorization cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=authorization/memory=object:add(size=10000)\n  echo\nend-if\nif (outcome == success) of /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:read-resource\n  echo Removing eviction from keycloak keys cache and replacing with object-memory\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/eviction=EVICTION:remove\n  /subsystem=infinispan/cache-container=keycloak/local-cache=keys/memory=object:add(size=1000)\n  echo\nend-if\n\nif (outcome == success) of /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:read-resource\n  echo Changing JNDI reference in connectionsInfinispan SPI\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:undefine-attribute(name=properties)\n  /subsystem=keycloak-server/spi=connectionsInfinispan/provider=default:write-attribute(name=properties,value={cacheContainer=java:jboss/infinispan/container/keycloak})\n  echo\nend-if\n\n# Migrate from 4.4.0 to 4.5.0\nif (outcome == failed) of /subsystem=core-management/:read-resource\n    echo Adding core-management extension\n    /extension=org.wildfly.extension.core-management/:add\n    echo Adding subsystem core-management\n    /subsystem=core-management/:add\n    echo\nend-if\n\n# Migrate from 4.5.0 to 4.6.0\nif (outcome == success) of /subsystem=elytron/http-authentication-factory=application-http-authentication/:read-resource\n    echo Removing application-http-authentication from elytron subsystem\n    /subsystem=elytron/http-authentication-factory=application-http-authentication:remove\n    echo\nend-if\n\nif (result == undefined) of /subsystem=transactions/:read-attribute(name=node-identifier,include-defaults=false)\n    echo Setting node-identifier attribute of core-environment element in transactions subsystem\n    /subsystem=transactions/:write-attribute(name=node-identifier,value=expression \"${jboss.tx.node.id:1}\")\n    echo\nend-if\n\n# Migrate from 4.8.3 to 5.0.0\nif (outcome == failed) of /subsystem=logging/logger=io.jaegertracing.Configuration/:read-resource\n    echo Adding io.jaegertracing.Configuration logger\n    /subsystem=logging/logger=io.jaegertracing.Configuration/:add(category=io.jaegertracing.Configuration,level=WARN)\n    echo\nend-if\n\n# Migrate from 5.0.0 to 6.0.0\nif (result == NON_XA) of /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:read-attribute(name=mode)\n    echo Removing NON_XA transaction mode from infinispan/hibernate/entity\n    /subsystem=infinispan/cache-container=hibernate/local-cache=entity/component=transaction/:undefine-attribute(name=mode)\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=ExampleDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ExampleDS datasource \n    /subsystem=datasources/data-source=ExampleDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to KeycloakDS datasource\n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=statistics-enabled,value=${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=ejb3/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to ejb3 subsystem\n    /subsystem=ejb3/:write-attribute(name=statistics-enabled,value=${wildfly.ejb3.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=transactions/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to transactions subsystem\n    /subsystem=transactions/:write-attribute(name=statistics-enabled,value=${wildfly.transactions.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=undertow/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to undertow subsystem\n    /subsystem=undertow/:write-attribute(name=statistics-enabled,value=${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (result == false) of /subsystem=webservices/:read-attribute(name=statistics-enabled)\n    echo Adding statistics-enabled expression to webservices subsystem\n    /subsystem=webservices/:write-attribute(name=statistics-enabled,value=${wildfly.webservices.statistics-enabled:${wildfly.statistics-enabled:false}})\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.jboss.as.weld/:read-resource\n    echo Adding weld extension\n    /extension=org.jboss.as.weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=weld/:read-resource\n    echo Adding weld subsystem\n    /subsystem=weld/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.health-smallrye/:read-resource\n    echo Adding microprofile.health-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.health-smallrye/:add(module=org.wildfly.extension.microprofile.health-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-health-smallrye/:read-resource\n    echo Adding microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye/:add\n    /subsystem=microprofile-health-smallrye/:write-attribute(name=security-enabled,value=false)\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.config-smallrye/:read-resource\n    echo Adding microprofile.config-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.config-smallrye/:add(module=org.wildfly.extension.microprofile.config-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-config-smallrye/:read-resource\n    echo Adding microprofile-config-smallrye subsystem\n    /subsystem=microprofile-config-smallrye/:add\n    echo\nend-if\n\nif (outcome == failed) of /extension=org.wildfly.extension.microprofile.metrics-smallrye/:read-resource\n    echo Adding microprofile.metrics-smallrye extension...\n    /extension=org.wildfly.extension.microprofile.metrics-smallrye/:add(module=org.wildfly.extension.microprofile.metrics-smallrye)\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=microprofile-metrics-smallrye/:read-resource\n    echo Adding microprofile-metrics-smallrye subsystem\n    /subsystem=microprofile-metrics-smallrye/:add\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=security-enabled,value=false)\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=exposed-subsystems,value=[*])\n    echo\nend-if\n\nif (result == \"Keycloak\") of :read-attribute(name=product-name)\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to Keycloak\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:wildfly})\nelse\n    echo Adding microprofile-metrics-smallrye subsystem prefix attribute to RH-SSO\n    /subsystem=microprofile-metrics-smallrye/:write-attribute(name=prefix,value=${wildfly.metrics.prefix:jboss})\nend-if\n\n# Migrate from 6.0.1 to 7.0.0\nif (outcome == success) of /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:read-resource\n    echo Removing READ_TIMEOUT option from remote service from ejb3 subsystem\n    /subsystem=ejb3/service=remote/channel-creation-options=READ_TIMEOUT/:remove\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/local-cache=routing:read-resource\n    echo Adding local cache routing to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/local-cache=routing/:add\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=infinispan/cache-container=web/local-cache=sso:read-resource\n    echo Adding local cache sso to web cache container to infinispan subsystem\n    /subsystem=infinispan/cache-container=web/local-cache=sso/:add\n    /subsystem=infinispan/cache-container=web/local-cache=sso/component=locking/:add(isolation=REPEATABLE_READ)\n    /subsystem=infinispan/cache-container=web/local-cache=sso/component=transaction/:add(mode=BATCH)\n    echo\nend-if\n\nif (result == \"true\") of /subsystem=keycloak-server/spi=truststore/provider=file:map-get(name=properties, key=disabled)\n    echo Disabling Truststore Provider\n    /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=enabled, value=false)\n    echo Removing deprecated option\n    /subsystem=keycloak-server/spi=truststore/provider=file:map-remove(name=properties, key=disabled)\n    echo\nend-if\n\n# Migrate from 7.0.0 to 8.0.0\n\nif ((result.time == 100L) && (result.unit == MILLISECONDS)) of /subsystem=ejb3/thread-pool=default:read-attribute(name=keepalive-time)\n    echo Changing thread pool keepalive of ejb3 subsystem\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.time, value=60)\n    /subsystem=ejb3/thread-pool=default:write-attribute(name=keepalive-time.unit,value=SECONDS)\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-liveness-checks-status)\n    echo Adding empty-liveness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-liveness-checks-status, value=${env.MP_HEALTH_EMPTY_LIVENESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (result == UP) of /subsystem=microprofile-health-smallrye:read-attribute(name=empty-readiness-checks-status)\n    echo Adding empty-readiness-checks-status attribute to microprofile-health-smallrye subsystem\n    /subsystem=microprofile-health-smallrye:write-attribute(name=empty-readiness-checks-status, value=${env.MP_HEALTH_EMPTY_READINESS_CHECKS_STATUS:UP})\n    echo\nend-if\n\nif (outcome == failed) of /subsystem=keycloak-server/spi=hostname/provider=default/:read-resource\n    echo Adding default hostname provider\n    /subsystem=keycloak-server/spi=hostname/provider=default/:add(properties={frontendUrl => \"${keycloak.frontendUrl:}\",forceBackendUrlToFrontendUrl => \"false\"},enabled=true)\nend-if\n\nif (result == request) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    echo Switching from request to default hostname provider\n\n    /subsystem=keycloak-server/spi=hostname/:write-attribute(name=default-provider,value=default)\nend-if\n\nif (result != fixed) of /subsystem=keycloak-server/spi=hostname/:read-attribute(name=default-provider)\n    try\n        /subsystem=keycloak-server/spi=hostname/provider=fixed:remove\n        echo Removed config for unused fixed hostname provider\n    catch\n    end-try\nend-if\n\n# Migrate from 8.0.0 to 9.0.5\n\nif (result == 120000 || result == undefined) of /subsystem=undertow/server=default-server/http-listener=default/:read-attribute(name=read-timeout)\n    echo Updating value of http listener read-timeout.\n    /subsystem=undertow/server=default-server/http-listener=default/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 120000 || result == undefined) of /subsystem=undertow/server=default-server/https-listener=https/:read-attribute(name=read-timeout)\n    echo Updating value of https listener read-timeout.\n    /subsystem=undertow/server=default-server/https-listener=https/:write-attribute(name=read-timeout,value=30000)\n    echo\nend-if\n\nif (result == 20 || result == undefined) of /subsystem=datasources/data-source=KeycloakDS/:read-attribute(name=max-pool-size)\n    echo Updating value of datasource max-pool-size.\n    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=max-pool-size,value=100)\n    echo\nend-if\n\n# Migrate from 10.0.2 to 11.0.0 (migration changes for infinispan update from 9.4.18.Final to 10.1.8.Final)\n\nif (result != org.keycloak.keycloak-model-infinispan) of /subsystem=infinispan/cache-container=keycloak:read-attribute(name=module)\n    echo Setting class loader for keycloak cache-container so JBoss Marshalling works properly with Infinispan 10.x\n    /subsystem=infinispan/cache-container=keycloak:write-attribute(name=module,value=org.keycloak.keycloak-model-infinispan)\n    echo\nend-if\n\necho *** End Migration ***\n", "<?xml version='1.0' encoding='UTF-8'?>\n<!--\n  ~ Copyright 2016 Red Hat, Inc. and/or its affiliates\n  ~ and other contributors as indicated by the @author tags.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ you may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~ http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n<!--  See src/resources/configuration/ReadMe.txt for how the configuration assembly works -->\n<config>\n    <extension-module>org.jboss.as.connector</extension-module>\n    <subsystem xmlns=\"urn:jboss:domain:datasources:5.0\">\n        <datasources>\n            <datasource jndi-name=\"java:jboss/datasources/ExampleDS\" pool-name=\"ExampleDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                <connection-url>jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</connection-url>\n                <driver>h2</driver>\n                <security>\n                    <user-name>sa</user-name>\n                    <password>sa</password>\n                </security>\n            </datasource>\n            <datasource jndi-name=\"java:jboss/datasources/KeycloakDS\" pool-name=\"KeycloakDS\" enabled=\"true\" use-java-context=\"true\" statistics-enabled=\"${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n                <connection-url><?KEYCLOAK_DS_CONNECTION_URL?></connection-url>\n                <driver>h2</driver>\n                <security>\n                    <user-name>sa</user-name>\n                    <password>sa</password>\n                </security>\n                <pool>\n                    <max-pool-size>100</max-pool-size>\n                </pool>\n            </datasource>\n            <drivers>\n                <driver name=\"h2\" module=\"com.h2database.h2\">\n                    <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n                </driver>\n            </drivers>\n        </datasources>\n    </subsystem>\n    <supplement name=\"default\">\n        <replacement placeholder=\"KEYCLOAK_DS_CONNECTION_URL\">\n            jdbc:h2:${jboss.server.data.dir}/keycloak;AUTO_SERVER=TRUE\n        </replacement>\n    </supplement>\n    <supplement name=\"domain\">\n        <replacement placeholder=\"KEYCLOAK_DS_CONNECTION_URL\">\n            jdbc:h2:${jboss.server.data.dir}/../../shared-database/keycloak;AUTO_SERVER=TRUE\n        </replacement>\n    </supplement>\n</config>\n", "<?xml version='1.0' encoding='UTF-8'?>\n<!--\n  ~ JBoss, Home of Professional Open Source.\n  ~ Copyright 2017, Red Hat, Inc., and individual contributors\n  ~ as indicated by the @author tags. See the copyright.txt file in the\n  ~ distribution for a full listing of individual contributors.\n  ~\n  ~ This is free software; you can redistribute it and/or modify it\n  ~ under the terms of the GNU Lesser General Public License as\n  ~ published by the Free Software Foundation; either version 2.1 of\n  ~ the License, or (at your option) any later version.\n  ~\n  ~ This software is distributed in the hope that it will be useful,\n  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n  ~ Lesser General Public License for more details.\n  ~\n  ~ You should have received a copy of the GNU Lesser General Public\n  ~ License along with this software; if not, write to the Free\n  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  -->\n\n<!--  See src/resources/configuration/ReadMe.txt for how the configuration assembly works -->\n<config>\n    <extension-module>org.wildfly.extension.undertow</extension-module>\n    <subsystem xmlns=\"urn:jboss:domain:undertow:10.0\" default-server=\"default-server\" default-virtual-host=\"default-host\" default-servlet-container=\"default\" default-security-domain=\"other\" statistics-enabled=\"${wildfly.undertow.statistics-enabled:${wildfly.statistics-enabled:false}}\">\n        <buffer-cache name=\"default\"/>\n        <server name=\"default-server\">\n            <?AJP?>\n            <http-listener name=\"default\" socket-binding=\"http\" redirect-socket=\"https\" enable-http2=\"true\" read-timeout=\"30000\"/>\n            <https-listener name=\"https\" socket-binding=\"https\" security-realm=\"ApplicationRealm\" enable-http2=\"true\" read-timeout=\"30000\"/>\n            <host name=\"default-host\" alias=\"localhost\">\n                <location name=\"/\" handler=\"welcome-content\"/>\n                <http-invoker security-realm=\"ApplicationRealm\"/>\n            </host>\n        </server>\n        <servlet-container name=\"default\">\n            <jsp-config/>\n            <websockets/>\n        </servlet-container>\n        <handlers>\n            <file name=\"welcome-content\" path=\"${jboss.home.dir}/welcome-content\"/>\n        </handlers>\n    </subsystem>\n    <supplement name=\"ha\">\n        <replacement placeholder=\"AJP\">\n            <ajp-listener name=\"ajp\" socket-binding=\"ajp\" />\n        </replacement>\n    </supplement>\n    <socket-binding name=\"http\" port=\"${jboss.http.port:8080}\"/>\n    <socket-binding name=\"https\" port=\"${jboss.https.port:8443}\"/>\n    <socket-binding name=\"ajp\" port=\"${jboss.ajp.port:8009}\"/>\n</config>\n\n"], "filenames": ["distribution/feature-packs/server-feature-pack/src/main/resources/content/bin/migrate-domain-clustered.cli", "distribution/feature-packs/server-feature-pack/src/main/resources/content/bin/migrate-domain-standalone.cli", "distribution/feature-packs/server-feature-pack/src/main/resources/content/bin/migrate-standalone-ha.cli", "distribution/feature-packs/server-feature-pack/src/main/resources/content/bin/migrate-standalone.cli", "wildfly/server-subsystem/src/main/resources/subsystem-templates/keycloak-datasources.xml", "wildfly/server-subsystem/src/main/resources/subsystem-templates/keycloak-undertow.xml"], "buggy_code_start_loc": [697, 598, 776, 641, 38, 31], "buggy_code_end_loc": [697, 598, 776, 641, 38, 33], "fixing_code_start_loc": [698, 599, 777, 642, 39, 31], "fixing_code_end_loc": [718, 619, 797, 662, 42, 33], "type": "CWE-770", "message": "A vulnerability was found in Keycloak before 11.0.1 where DoS attack is possible by sending twenty requests simultaneously to the specified keycloak server, all with a Content-Length header value that exceeds the actual byte count of the request body.", "other": {"cve": {"id": "CVE-2020-10758", "sourceIdentifier": "secalert@redhat.com", "published": "2020-09-16T16:15:14.797", "lastModified": "2021-02-03T14:04:29.073", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Keycloak before 11.0.1 where DoS attack is possible by sending twenty requests simultaneously to the specified keycloak server, all with a Content-Length header value that exceeds the actual byte count of the request body."}, {"lang": "es", "value": "Se encontr\u00f3 una vulnerabilidad en Keycloak versiones anteriores a 11.0.1, donde el ataque de DoS es posible mediante el env\u00edo de veinte peticiones simult\u00e1neamente hacia el servidor de keycloak especificado, todas con un valor de encabezado Content-Length que excede el conteo de bytes real del cuerpo de la petici\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:keycloak:*:*:*:*:*:*:*:*", "versionEndExcluding": "11.0.1", "matchCriteriaId": "523EF2BD-1C36-4166-B099-D1593691BDAA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openshift_application_runtimes:-:*:*:*:text-only:*:*:*", "matchCriteriaId": "ADB40F59-CAAE-47D6-850C-12619D8D5B34"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openshift_application_runtimes:1.0:*:*:*:*:*:*:*", "matchCriteriaId": "183C1FAB-3101-4155-BAA4-819EE997E436"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:single_sign-on:-:*:*:*:text-only:*:*:*", "matchCriteriaId": "341E6313-20D5-44CB-9719-B20585DC5AD6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:single_sign-on:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "9EFEC7CA-8DDA-48A6-A7B6-1F1D14792890"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:single_sign-on:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "F62A7110-16D5-4633-A521-9CECD267773B"}]}]}], "references": [{"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1843849", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Mitigation", "Vendor Advisory"]}, {"url": "https://github.com/keycloak/keycloak/commit/bee4ca89897766c4b68856eafe14f1a3dad34251", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/keycloak/keycloak/commit/bee4ca89897766c4b68856eafe14f1a3dad34251"}}