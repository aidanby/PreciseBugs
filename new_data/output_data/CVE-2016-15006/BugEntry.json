{"buggy_code": ["// Copyright <Pierre-Fran\u00e7ois Monville>\n// ===========================================================================\n// \t\t\t\t\t\t\t\t\tenigmaX\n// permet de chiffrer et de d\u00e9chiffrer tout fichier donn\u00e9 en param\u00e8tre\n// le mot de passe demand\u00e9 au d\u00e9but est hash\u00e9 puis sert de graine pour le PRNG\n// le PRNG permet de fournir une cl\u00e9 unique \u00e9gale \u00e0 la longueur du fichier \u00e0 coder\n// La cl\u00e9 unique subit un xor avec le mot de passe (le mot de passe est r\u00e9p\u00e9t\u00e9 \n// autant de fois que n\u00e9c\u00e9ssaire). Le fichier subit un xor avec cette cl\u00e9 Puis\n// un brouilleur est utilis\u00e9, il m\u00e9lange la table des caract\u00e8res (ascii)\n// en utilisant le PRNG ou en utilisant le keyFile fourni.\n//\n// Can crypt and decrypt any file given in argument. The password asked is hashed\n// to be used as a seed for the PRNG. The PRNG gives a unique key\n// which has the same length as the source file. The key is xored with the password \n// (rthe password is repeated as long as necessary). The file is then xored with this\n// new key, then a scrambler is used.\n// it scrambles the ascii table using the PRNG or the keyFile given.\n//\n// USAGE : \n//\t\tenigmax [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\n//\n// \t\tcode or decode the given file\n//\n// \t\tKEYFILE: \n// \t\t\tpath to a keyfile that is used to generate the scrambler instead of the password\n//\n// \t\t-s --standard : \n// \t \t\tput the scrambler off\n//\n//\t\t-i --inverted :\n//\t\t\tinverts the coding/decoding process, first it xors then it scrambles\n//\n// \t\t-h --help : \n// \t\t\tfurther help\n//\n// ===========================================================================\n\n/*\nTODO:\ncrypted folders explorer\ngraphical interface\nspecial option (multi layer's password, hide extension, randomize the name)\n */\n\n\n/*\nInstallation\n\nMAC:\nclang -Ofast -fno-unroll-loops main.c -o enigmax\n\nLINUX:\ngcc -fno-move-loop-invariants -fno-unroll-loops main.c -o enigmax\n\nyou can put the compiled file \"enigmax\" in your path to use it everywhere\nexport PATH=$PATH:/PATH/TO/enigmax\nwrite in your ~/.bashrc if you want it to stay after a reboot\n*/\n\n/*\n\tincludes\n */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <ctype.h>\n#include <time.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n\n\n/*\n\tconstants\n */\n#define BUFFER_SIZE 16384  //16384 //8192\n\n\n/*\n\tglobal variables\n */\nstatic const char *progName;\nstatic const char *fileName;\nstatic char pathToMainFile[1000] = \"./\";\nstatic char _isADirectory;\nstatic uint64_t seed[2];\nstatic unsigned char scrambleAsciiTables[16][256];\nstatic unsigned char unscrambleAsciiTables[16][256];\nstatic char isCrypting = 1;\nstatic char scrambling = 1;\nstatic char isCodingInverted = 0;\nstatic long numberOfBuffer;\n\nchar passPhrase[16384];\nuint64_t passIndex = 0;\n\n/*\n\t-static void usage(int status)\n\tstatus : expect EXIT_FAILURE or EXIT_SUCCESS code to choose the output stream\n\n\twhen the program is typed without arguments in terminal it shows the usage\n */\nstatic void usage(int status)\n{\n\tFILE *dest = (status == 0) ? stdout : stderr;\n\n\tif(status == 0){\n\t\tfprintf(dest,\n\t\t\t\"%s(1)\\t\\t\\tcopyright <Pierre-Fran\u00e7ois Monville>\\t\\t\\t%s(1)\\n\\nNAME\\n\\t%s -- crypt or decrypt any data\\n\\nSYNOPSIS\\n\\t%s [-h | --help] FILE [-s | --standard | KEYFILE]\\n\\nDESCRIPTION\\n\\t(FR) permet de chiffrer et de d\u00e9chiffrer toutes les donn\u00e9es entr\u00e9es en param\u00e8tre le mot de passe demand\u00e9 au d\u00e9but est hash\u00e9 puis sert de graine pour le PRNG le PRNG permet de fournir une cl\u00e9 unique \u00e9gale \u00e0 la longueur du fichier \u00e0 coder. La cl\u00e9 unique subit un xor avec le mot de passe (le mot de passe est r\u00e9p\u00e9t\u00e9 autant de fois que n\u00e9c\u00e9ssaire). Le fichier subit un xor avec cette cl\u00e9 Puis un brouilleur est utilis\u00e9, il m\u00e9lange la table des caract\u00e8res (ascii) en utilisant le PRNG ou en utilisant le keyFile fourni.\\n\\t(EN) Can crypt and decrypt any data given in argument. The password asked is hashed to be used as a seed for the PRNG. The PRNG gives a unique key which has the same length as the source file. The key is xored with the password (the password is repeated as long as necessary). The file is then xored with this new key, then a scrambler is used. It scrambles the ascii table using the PRNG or the keyFile given\\n\\nOPTIONS\\n\\tthe options are as follows:\\n\\n\\t-h | --help\\tfurther help.\\n\\n\\t-s | --standard\\tput the scrambler on off.\\n\\n\\t-i | --inverted\\tinverts the coding/decoding process, first it xors then it scrambles.\\n\\nEXIT STATUS\\n\\tthe %s program exits 0 on success, and anything else if an error occurs.\\n\\nEXAMPLES\\n\\tthe command:\\t%s file1\\n\\n\\tlets you choose between crypting or decrypting then it will prompt for a password that crypt/decrypt file1 as xfile1 in the same folder, file1 is not modified.\\n\\n\\tthe command:\\t%s file2 keyfile1\\n\\n\\tlets you choose between crypting or decrypting, will prompt for the password that crypt/decrypt file2, uses keyfile1 to generate the scrambler then crypt/decrypt file2 as file2x in the same folder, file2 is not modified.\\n\\n\\tthe command:\\t%s file3 -s\\n\\n\\tlets you choose between crypting or decrypting, will prompt for a password that crypt/decrypt the file without using the scrambler, resulting in using the unique key only.\\n\", progName, progName, progName, progName, progName, progName, progName, progName);\n\t} else{\n\t\tfprintf(dest,\n\t\t\t\"Usage : %s [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\\nOptions :\\n  -h --help :\\t\\tfurther help\\n  -s --standard :\\tput the scrambler off\\n  -i --inverted :\\tinverts the coding/decoding process\\n  KEYFILE :\\t\\tpath to a keyfile that generates the scrambler instead of the password\\n\", progName);\n\t}\n\texit(status);\n}\n\n\n/*\n\t-long ceilRound(float numberToBeRounded)\n\treturned value : the number rounded (ceil form)\n\n\tto prevent from importing all math.h for just one function \n\tI had to add it myself\n*/\nlong ceilRound(float numberToBeRounded){\n\tif (numberToBeRounded - (long) numberToBeRounded > 0)\n\t{\n\t\treturn (long) numberToBeRounded + 1;\n\t}\n\treturn (long) numberToBeRounded;\n}\n\n\n/*\n\tvoid clearBuffer()\n\n\tempty the buffer\t\n*/\nvoid clearBuffer()\t\n{\n    int charInBuffer = 0;\n    while (charInBuffer != '\\n' && charInBuffer != EOF)\n    {\n        charInBuffer = getchar();\n    }\n}\n\n/*\n\t-int readStr(char *str, unsigned long size)\n\treturned value : the string 'str' of size 'size'\n\n\tbasicaly, it's doing a fgets but take care of the buffer\n*/\nint readString(char *string, unsigned long size)\n{\n    char *EOFPos = NULL;\n    \n    if(fgets(string, size, stdin) != NULL)\t\n    {\n        EOFPos = strchr(string, '\\n'); \n        if(EOFPos != NULL)\t\n        {\n            *EOFPos = '\\0';\t\n        }\n        else\t\n        {\n            clearBuffer();\t\n        }\n        return 1;\n    }\n    else\n    {\n        clearBuffer();  \n        return 0;\n    }\n}\n\n\n/*\n\t-void processTarString(char* string)\n\n\tchange string placing '\\' just before every spaces in order to \n\tthe tar command to work with files/directories with spaces in their names\n*/\nchar* processTarString(char* string){\n\tint numberOfSpace = 0;\n\tchar* resultString;\n\n\tfor (int i = 0; i < strlen(string); ++i)\n\t{\n\t\tif (string[i] == ' ')\t\n\t\t{\n\t\t\tnumberOfSpace++;\n\t\t}\n\t}\n\n\tif (numberOfSpace == 0) //just returns the same string basicaly\n\t{\n\t\tresultString = (char*) calloc(1, sizeof(char)* (strlen(string)));\n\t\tstrcat(resultString, string);\n\t\treturn resultString;\n\t}\n\n\tresultString = (char*) calloc(1, sizeof(char)* (strlen(string) + numberOfSpace + 1));\n\tfor (int i = 0, j = 0; i < strlen(string); ++i, ++j)\n\t{\n\t\tif (string[i] == ' ')\n\t\t{\n\t\t\tresultString[j] = '\\\\';\n\t\t\tj++;\n\t\t}\n\t\tresultString[j] = string[i];\n\t}\n\n\treturn resultString;\n}\n\n\n/*\n\t-static inline uint64_t rotationLinearTransformation(const uint64_t seed, int constant)\n\tseed : the seed which will have the rotation\n\tconstant : number which has to be between 1 and 63\n\treturned value :  uint64_t number (equivalent to long long but on all OS)\n\n\trotation function for generateNumber\n\tpart of the xoroshiro128+ algorythm :\n\thttp://xoroshiro.di.unimi.it/xoroshiro128plus.c\n */\nstatic inline uint64_t rotationLinearTransformation(const uint64_t seed, int constant) {\n\treturn (seed << constant) | (seed >> (64 - constant));\n}\n\n/*\n\t-uint64_t generateNumber(void)\n\treturned value :  uint64_t number (equivalent to long long but on all OS)\n\n\trandom number generator\n\twith the xoroshiro128+ algorythm which is one of the quickiest PRNG\n\tit passes the BigCrush test :\n\thttp://xoroshiro.di.unimi.it/xoroshiro128plus.c\n */\nuint64_t generateNumber(void) {\n\tconst uint64_t seed0 = seed[0];\n\tuint64_t seed1 = seed[1];\n\tconst uint64_t result = seed0 + seed1;\n\n\tseed1 ^= seed0;\n\tseed[0] = rotationLinearTransformation(seed0, 55) ^ seed1 ^ (seed1 << 14); // a, b\n\tseed[1] = rotationLinearTransformation(seed1, 36); // c\n\n\treturn result;\n}\n\n/*\n\t-uint64_t splitmix64(uint64_t* seed)\n\tseed : the seed which is modified after each call\n\treturned value :  uint64_t randomNumber, a random number generated from the seed\n\n\tIt is a very fast generator passing BigCrush, http://xoroshiro.di.unimi.it/splitmix64.c\n\tIt's here only to populate the seed array \"s[2]\" for xoroshiro\n */\nuint64_t splitmix64(uint64_t* seed) {\n\tuint64_t randomNumber = (*seed += UINT64_C(0x9E3779B97F4A7C15));\n\trandomNumber = (randomNumber ^ (randomNumber >> 30)) * UINT64_C(0xBF58476D1CE4E5B9);\n\trandomNumber = (randomNumber ^ (randomNumber >> 27)) * UINT64_C(0x94D049BB133111EB);\n\treturn randomNumber ^ (randomNumber >> 31);\n}\n\n\n/*\n\t-uint64_t getHash(char* password)\n\tpassword : a string which is the password typed by the user\n\treturned value :  uint64_t number representing the hash of the string\n\n\tsimple function that hashes a string into numbers (djb2)\n */\nuint64_t getHash(char* password)\n{\n\tuint64_t hash = 5381;\n\tchar c;\n\n\twhile((c = *password++))\n\t{\n\t\thash = ((hash << 5) + hash) + c; // hash * 33 + password[i]\n\t}\n\n\treturn hash;\n}\n\n\n/*\n\t-void getSeed(char* password)\n\tpassword: the string corresponding to the password given by the user\n\n\tthis function is here to populate the seed for the PRNG, \n\tit hashes the password first then get two 64 bit number from it thanks to splitmix64\n\tand put the first two outputs into seed[0] and seed[1]\n*/\nvoid getSeed(char* password){\n\tuint64_t hash = getHash(password);\n\n\tseed[0] = splitmix64(&hash);\n\tseed[1] = splitmix64(&hash);\n}\n\n/*\n\t-void scramble(FILE* keyFile)\n\tkeyFile : can be null, if present it passes through all the keyfile to scramble the ascii table\n\n\tscramble the ascii table assuring that there is no duplicate\n\tinspired by the Enigma machine; switching letters but without its weekness,\n\there a letter can be switched by itself and it is not possible to know how many letters\n\thave been switched\n */\nvoid scramble(FILE* keyFile){\n\tfor (int j = 0; j < 16; ++j)\n\t{\n\t\tchar temp = 0;\n\n\t\tfor (int i = 0; i < 256; ++i)\n\t\t{\n\t\t\tscrambleAsciiTables[j][i] = i;\n\t\t}\n\n\t\tif (keyFile != NULL){\n\t\t\tint size;\n\t\t\tchar extractedString[BUFFER_SIZE] = \"\";\n\t\t\twhile((size = fread(extractedString, 1, BUFFER_SIZE, keyFile)) > 0){\n\t\t\t\tfor (int i = 0; i < size; ++i)\n\t\t\t\t{\n\t\t\t\t\ttemp = scrambleAsciiTables[j][i%256];\n\t\t\t\t\tscrambleAsciiTables[j][i%256] = scrambleAsciiTables[j][(unsigned char)(extractedString[i])];\n\t\t\t\t\tscrambleAsciiTables[j][(unsigned char)(extractedString[i])] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t\trewind(keyFile);\n\t\t} else {\n\t\t\tunsigned char random256;\n\t\t\tfor (int i = 0; i < 10 * 256; ++i)\n\t\t\t{\n\t\t\t\trandom256 = generateNumber() ^ passPhrase[passIndex];\n\t\t\t\tpassIndex++;\n\t\t\t\tpassIndex %= 16384;\n\t\t\t\ttemp = scrambleAsciiTables[j][i%256];\n\t\t\t\tscrambleAsciiTables[j][i%256] = scrambleAsciiTables[j][random256];\n\t\t\t\tscrambleAsciiTables[j][random256] = temp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/*\n\t-void unscramble(void)\n\n\tthis function is here only for optimization\n\tit inverses the key/value in the scramble ascii table making the backward process instantaneous\n */\nvoid unscramble(){\n\tfor (int j = 0; j < 16; ++j)\n\t{\n\t\tfor (int i = 0; i < 256; ++i)\n\t\t{\n\t\t\tunsigned char c = scrambleAsciiTables[j][i];\n\t\t\tunscrambleAsciiTables[j][c] = i;\n\t\t}\n\t}\n}\n\n\n/*\n\t-void codingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\tThe scramble table is chosed thanks to the key: We apply a mask to the unique key to catch the last 4 bytes. \n\tit gives a number from 0 to 15 that is used to chose the scrambled table. \n\tIt prevents a frequence analysis of the scrambled file in the event where the unique key has been found. \n\tThus even if you find the seed and by extension, the unique key, you can't apply headers and try to match \n\tthem to the scrambled file in order to deduce the scramble table. You absolutely need the password.\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal:a -> scramble:x -> xored:?\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n */\nvoid codingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\n\tif(isCodingInverted){\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = scrambleAsciiTables[keyString[i] & (1+2+4+8)][(unsigned char)(extractedString[i] ^ keyString[i])];\n\t\t}\n\t}else{\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = scrambleAsciiTables[keyString[i] & (1+2+4+8)][(unsigned char)extractedString[i]] ^ keyString[i];\n\t\t}\n\t}\n}\n\n\n/*\n\t-void decodingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tHere only for optimization purpose to limit the amount of conditions\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal(a) -> scramble(x) -> xored(?)\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n */\nvoid decodingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\n\tif(isCodingInverted){\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = unscrambleAsciiTables[keyString[i] & (1+2+4+8)][(unsigned char)extractedString[i]] ^ keyString[i];\n\t\t}\n\t}else{\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = unscrambleAsciiTables[keyString[i] & (1+2+4+8)][(unsigned char)(extractedString[i] ^ keyString[i])];\n\t\t}\n\t}\n}\n\n\n/*\n\t-void standardXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tHere only for optimization purpose so that there is the small amount\n\tof condition possible when encrypt or decrypt\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal(a) -> scramble(x) -> xored(?)\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n\tbut here we don't scramble so it is:\n\tcoding : original(a) -> xored(?)\n\tdecoding: xored(?) -> unxored(a)\n */\nvoid standardXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\tfor (i = 0; i < bufferLength; ++i)\n\t{\n\t\txoredString[i] = extractedString[i] ^ keyString[i];\n\t}\n}\n\n\n/*\n\t-int fillbuffer(FILE* mainFile, char* extractedString, char* keyString)\n\tmainFile : pointer to the file given by the user\n\textractedString : will contains the data extracted from the source file in a string format\n\tkeyString : will contains a part of the unique key in a string format\n\treturned value : the size of the data reed\n\n\tread a packet of data from the source file\n\treturn the length of the packet which is the buffer size (BUFFER_SIZE)\n\tit can be less at the final packet (if the file isn't a multiple of the buffer size)\n\n\tthe keyString is get by generating a random number with the seed and then xoring it \n\twith the password itself allowing the key to be really unique and not only one of the \n\t2^64 possibilities offered by the seed (uint64_t)\n\tthe password is xoring this way : generateNumber1 ^ passPhrase[0]\n\t\t\t\t\t\t\t\t\t  generateNumber2 ^ passPhrase[1]\n\t\t\t\t\t\t\t\t\t  ...\n\t\t\t\t\t\t\t\t\t  then the index overflows and it returns to 0 again\n\t\t\t\t\t\t\t\t\t  generataNumberX ^ passPhrase[0]\n\t\t\t\t\t\t\t\t\t  ...\n\n\tformer version (multiply execution time by 5) :\n\tint fillBuffer(FILE* mainFile, char* extractedString, char* keyString)\n\t{\n\t\tint i = 0;\n\n\t\twhile(!feof(mainFile) && i < BUFFER_SIZE)\n\t\t{\n\t\t\tchar charBuffer = fgetc(mainFile);\n\t\t\tif (feof(mainFile)) break; //special debug for the last character in text files\n\t\t\textractedString[i] = charBuffer;\n\t\t\ti++;\n\t\t}\n\n\t\treturn i;\n\t}\n */\nint fillBuffer(FILE* mainFile, char* extractedString, char* keyString)\n{\n\tint charactersRead = fread(extractedString, 1, BUFFER_SIZE, mainFile);\n\n\tfor (int i = 0; i < charactersRead; ++i)\n\t{\n\t\tkeyString[i] = (char)generateNumber() ^ passPhrase[passIndex];\n\t\tpassIndex++;\n\t\tpassIndex %= 16384;\n\t}\n\n\treturn charactersRead;\n}\n\n\n/*\n\t-static inline void loadBar(int x, int n, int r, int w)\n\tcurrentIteration : the current iteration of the thing that is proccessed\n\tmaximalIteration : the number which represents 100% of the process\n\tnumberOfSteps : number defining how many times the bar updates\n\tnumberOfSegments : diplayed on w segment\n\n\tdisplay a loading bar with current percentage, graphic representation, and time remaining\n\twhich update on every new percent by deleting itself to display the updating bar on top\n\tinspired by Ross Hemsley's code : https://www.ross.click/2011/02/creating-a-progress-bar-in-c-or-any-other-console-app/\n\n */\nstatic inline void loadBar(int currentIteration, int maximalIteration, int numberOfSteps, int numberOfSegments)\n{\n\tstatic char firstCall = 1;\n\tstatic double elapsedTime;\n\tdouble timeTillEnd;\n\tstatic time_t startingTime;\n\ttime_t currentTime;\n\n\tif(firstCall){\n\t\tstartingTime = time(NULL);\n\t\tfirstCall = 0;\n\t}\n\n    // numberOfSteps defines the number of times the bar updates.\n    if ( currentIteration % (maximalIteration/numberOfSteps + 1) != 0 ) return;\n\n    // Calculate the ratio of complete-to-incomplete.\n    float ratio = (float) currentIteration / (float) maximalIteration;\n    int loadBarCursorPosition = ratio * numberOfSegments;\n\n    // get the clock now\n\tcurrentTime = time(NULL);\n\t// calculate the remaining time\n\telapsedTime = difftime(currentTime, startingTime);\n\ttimeTillEnd = elapsedTime * (1.0/ratio - 1.0);\n\n    // Show the percentage.\n    printf(\" %3d%% [\", (int)(ratio*100));\n\n    // Show the loading bar.\n    for (int i = 0; i < loadBarCursorPosition; i++)\n       printf(\"=\");\n\n    for (int i = loadBarCursorPosition; i < numberOfSegments; i++)\n       printf(\" \");\n\n    // go back to the beginning of the line.\n    // other way (with ANSI CODE) go to previous line then erase it : printf(\"] %.0f\\n\\033[F\\033[J\", timeTillEnd);\n    printf(\"] %.0f        \\r\", timeTillEnd);\n    fflush(stdout);\n}\n\n\n/*\n\t-void code(FILE* mainFile)\n\tmainFile : pointer to the file given by the user\n\n\tController for coding the source file\n */\nvoid code (FILE* mainFile)\n{\n\tint mainFileSize = strlen(fileName);\n\tchar codedFileName[mainFileSize+1];\n\tchar extractedString[BUFFER_SIZE] = \"\";\n\tchar keyString[BUFFER_SIZE] = \"\";\n\tchar xoredString[BUFFER_SIZE] = \"\";\n\tFILE* codedFile;\n\n\tsprintf(codedFileName, \"%sx%s\", pathToMainFile, fileName);\n\t// opening the output file\n\tif ((codedFile = fopen(codedFileName, \"w+\")) == NULL) {\n\t\tperror(codedFileName);\n\t\tprintf(\"exiting\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t// starting encryption\n\tlong bufferCount = 0; //keep trace of the task's completion\n\tprintf(\"starting encryption...\\n\");\n\tif (scrambling){\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tcodingXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, codedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t} else {\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tstandardXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, codedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t}\n\t// closing the output file\n\tfclose(codedFile);\n\t//if the first file was a directory then delete the archive made before crypting\n\tif (_isADirectory)\n\t{\n\t\tchar* tarFile = (char*) calloc (1, sizeof(char) * (strlen(pathToMainFile) + strlen(fileName) + 1));\n\t\tstrcpy(tarFile, pathToMainFile);\n\t\tstrcat(tarFile, fileName);\n\t\tremove(tarFile);\n\t\tfree(tarFile);\n\t}\n}\n\n\n/*\n\t-void decode(FILE* mainFile)\n\tmainFile : pointer to the file given by the user\n\n\tcontroller for decoding the source file\n */\nvoid decode(FILE* mainFile)\n{\n\tint mainFileSize = strlen(fileName);\n\tchar decodedFileName[mainFileSize+1];\n\tchar extractedString[BUFFER_SIZE] = \"\";\n\tchar keyString[BUFFER_SIZE] = \"\";\n\tchar xoredString[BUFFER_SIZE] = \"\";\n\tFILE* decodedFile;\n\n\t// Return the file to a unscramble ascii table\n\tunscramble();\n\n\t// naming the file which will be decrypted\n\tsprintf(decodedFileName, \"x%s\", fileName);\n\n\n\t// opening the output file\n\tstrcat(pathToMainFile, decodedFileName);\n\tif ((decodedFile = fopen(pathToMainFile, \"w+\")) == NULL) {\n\t\tperror(decodedFileName);\n\t\tprintf(\"exiting\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t// starting decryption\n\tlong bufferCount = 0; //keep trace of the task's completion\n\tprintf(\"starting decryption...\\n\");\n\tif(scrambling){\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tdecodingXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, decodedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t} else {\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tstandardXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, decodedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t}\n\t// closing the output file\n\tfclose(decodedFile);\n}\n\n\n\n/*\n\t-int isADirectory(char* path)\n\tpath : string indicated the path of the file/directory\n\treturned value : 0 or 1\n\n\tindicates if the object with this path is a directory or not\n\n*/\nint isADirectory(char* path){\n\tstruct stat statStruct;\n    int statStatus = stat(path, &statStruct);\n    if(-1 == statStatus) {\n        if(ENOENT == errno) {\n            printf(\"error: file's path is not correct, one or several directories and or file are missing\\n\");\n        } else {\n            perror(\"stat\");\n            printf(\"exiting\\n\");\n            exit(1);\n        }\n    } else {\n        if(S_ISDIR(statStruct.st_mode)) {\n        \t_isADirectory = 1;\n            return 1; //it's a directory\n        } else {\n        \t_isADirectory = 0;\n            return 0; //it's not a directory\n        }\n    }\n    printf(\"exiting\\n\");\n    exit(1);\n}\n\n\n\n/*\n\t-int main(int argc, char const* argv[])\n\targc : number of arguments passed in the terminal\n\targv : pointer to the arguments passed in the terminal\n\treturned value : 0\n\n */\nint main(int argc, char const *argv[])\n{\n\tFILE* mainFile;\n\tFILE* keyFile = NULL;\n\n\tif ((progName = strrchr(argv[0], '/')) != NULL) {\n\t\t++progName;\n\t} else {\n\t\tprogName = argv[0];\n\t}\n\tif (argc < 2) {\n\t\tusage(1);\n\t} else if(argc >= 5 ) { \n\t\tprintf(\"Error: Too many arguments\\n\");\n\t\tusage(1);\n\t} else if (strcmp(argv[1], \"-h\") == 0 || strcmp(argv[1], \"--help\") == 0) {\n\t\tusage(0);\n\t}\n\n\tif (argc >= 3)\n\t{\n\t\t//test if the option -s is present\n\t\tif (strcmp(argv[2], \"-s\") == 0 || strcmp(argv[2], \"--standard\") == 0){\n\t\t\tscrambling = 0;\n\t\t\t//if there is a keyfile, warns that it will not be used \n\t\t\tif(argc >= 4){\n\t\t\t\tif((keyFile = fopen(argv[3], \"r\")) == NULL){\n\t\t\t\t\tperror(argv[3]);\n\t\t\t\t\tusage(1);\n\t\t\t\t}\n\t\t\t\tprintf(\"Warning: with the -s|--standard option, the keyfile will not bu used\\n\");\n\t\t\t\tkeyFile = NULL;\n\t\t\t}\n\t\t//else the option -i\n\t\t} else if (strcmp(argv[2], \"-i\") == 0 || strcmp(argv[2], \"--inverted\") == 0){\n\t\t\tisCodingInverted = 1;\n\t\t\t//if i is present, checks if there is a keyfile in the third argument\n\t\t\tif(argc >= 4){\n\t\t\t\tif((keyFile = fopen(argv[3], \"r\")) == NULL){\n\t\t\t\t\tperror(argv[3]);\n\t\t\t\t\tusage(1);\n\t\t\t\t}\n\t\t\t}\n\t\t//if no option is present test if the second argument is a keyfile\n\t\t} else if ((keyFile = fopen(argv[2], \"r\")) == NULL) {\n\t\t\tperror(argv[2]);\n\t\t\tusage(1);\n\t\t} else if(keyFile != NULL && argc >= 4){\n\t\t\tprintf(\"Error: Too many arguments\\n\");\n\t\t\tusage(1);\n\t\t}\n\t\t\n\t}\n\n\tif (argv[1][strlen(argv[1])-1] == '/' && argv[1][strlen(argv[1])-2] == '/')\n\t{\n\t\tprintf(\"error: several trailing '/' in the path of your file\\n\");\n\t\tprintf(\"exiting\\n\");\n\t\texit(1);\n\t}\n\n\t//outside their scope because we need to free them at the end\n\tchar* tarName = NULL;\n\tchar* dirName = NULL;\n\tchar *copyOfArgv1 = (char*) calloc(1, sizeof(char) * strlen(argv[1]));\n\tstrcpy(copyOfArgv1, argv[1]);\n\tif (isADirectory(copyOfArgv1)){\n\t\tchar command[1008] = {'\\0'};\n\t\t//we don't need that anymore\n\t\tprintf(\"regrouping the folder in one file using tar, may be long...\");\n\t\tfflush(stdout);\n\t\t// get the name of the folder in a string and get the path\n\t\tif ((fileName = strrchr(argv[1], '/')) != NULL) {\n\t\t\t//if the '/' is the last character in the string, delete it and get the fileName again\n\t\t\tif (strlen(fileName) == 1){\n\t\t\t\tdirName = (char*) calloc(1, sizeof(char) * (strlen(argv[1]) + 5));\n\t\t\t\tstrcpy(dirName, argv[1]);\n\t\t\t\t*(dirName+(fileName-argv[1])) = '\\0';\n\t\t\t\tif ((fileName = strrchr(dirName, '/')) != NULL){\n\t\t\t\t\t++fileName;\n\t\t\t\t\tstrncpy(pathToMainFile, dirName, fileName - dirName);\n\t\t\t\t\tpathToMainFile[fileName - dirName] = '\\0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfileName = dirName;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t++fileName;\n\t\t\t\tstrncpy(pathToMainFile, argv[1], fileName - argv[1]);\n\t\t\t\tpathToMainFile[fileName - argv[1]] = '\\0';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfileName = argv[1];\n\t\t}\n\t\t// get the full path of the tarFile in a dynamic variable tarName\n\t\ttarName = (char*) calloc(1, sizeof(char) * (strlen(fileName) + 5));\n\t\tsprintf (tarName, \"%s.tar\", fileName);\n\n\t\t//all of the following is to make a clean string for the tar commands (taking care of spaces)\n\t\tchar* cleanFileName       = processTarString((char*)fileName);\n\t\tchar* cleanPathToMainFile = processTarString(pathToMainFile);\n\t\tchar* cleanTarName        = processTarString(tarName);\n\t\t\n\t\t// use of cd to prevent tar to archive all the path architecture \n\t\t// (ex: /usr/myname/my/path/theFolderWeWant/)\n\t\tsprintf (command, \"cd %s && tar -cf %s %s &>/dev/null\", cleanPathToMainFile, cleanTarName, cleanFileName); //&>/dev/null\n\n\t\t//free the temporary strings\n\t\tfree(cleanPathToMainFile);\n\t\tfree(cleanTarName);\n\t\tfree(cleanFileName);\n\n\t\t// make the archive of the folder with tar\n\t\tint status;\n\t\tif((status = system(command)) != 0){ //if problems when taring\n\t\t\tprintf(\"\\nerror: unable to tar your file\\n\");\n\t\t\tprintf(\"exiting\\n\");\n\t\t\texit(1);\n\t\t}else{\n\t\t\tprintf(\"\\rregrouping the folder in one file using tar... Done          \\n\");\t\t\t\n\t\t}\n\n\t\tfileName = tarName;\n\n\t\t// trying to open the new archive\n\t\tchar pathPlusName[strlen(pathToMainFile)+strlen(fileName)];\n\t\tsprintf(pathPlusName, \"%s%s\", pathToMainFile, fileName);\n\t\tif ((mainFile = fopen(pathPlusName, \"r\")) == NULL) {\n\t\t\tperror(pathPlusName);\n\t\t\tprintf(\"exiting\\n\");\n\t\t\treturn EXIT_FAILURE;\n\t\t}\n\t}\n\telse{\n\t\tif ((fileName = strrchr(argv[1], '/')) != NULL) {\n\t\t\t++fileName;\n\t\t\tstrncpy(pathToMainFile, argv[1], fileName - argv[1]);\t\t\n\t\t} else {\n\t\t\tfileName = argv[1];\n\t\t}\n\t\tif ((mainFile = fopen(argv[1], \"r\")) == NULL) {\n\t\t\tperror(argv[1]);\n\t\t\tprintf(\"exiting\\n\");\n\t\t\treturn EXIT_FAILURE;\n\t\t}\n\t}\n\tfree(copyOfArgv1);\n\n\tfseek(mainFile, 0, SEEK_END);\n\tlong mainFileSize = ftell(mainFile);\n\trewind(mainFile);\n\tnumberOfBuffer = ceilRound((float)mainFileSize / (float)(BUFFER_SIZE));\n\tif (numberOfBuffer < 1)\n\t{\n\t\tnumberOfBuffer = 1;\n\t}\n\n\tchar procedureResponse[2]; \n\tisCrypting = -1;\n\tdo{\n\t\tprintf(\"Crypt(C) or Decrypt(d):\");\n\t\treadString(procedureResponse, 2);\n\t\tprintf(\"\\033[F\\033[J\");\n\t\tif (procedureResponse[0] == 'C' || procedureResponse[0] == 'c') {\n\t\t\tisCrypting = 1;\n\t\t}\n\t\telse if(procedureResponse[0] == 'D' || procedureResponse[0] == 'd'){\n\t\t\tisCrypting = 0;\n\t\t}\n\t}while(isCrypting == -1);\n\t\n\tprintf(\"Password:\");\n\treadString(passPhrase, 16383);\n\tprintf(\"\\033[F\\033[J\");\n\tgetSeed(passPhrase);\n\tscramble(keyFile);\n\n\tif (isCrypting){\n\t\tcode(mainFile);\n\t}\n\telse{\n\t\tdecode(mainFile);\n\t}\n\tprintf(\"Done                                                                  \\n\");\n\tfclose(mainFile);\n\n\t//we can free (last use in code/decode)\n\tif(tarName != NULL){\n\t\tfree(tarName);\n\t}\n\tif(dirName != NULL){\n\t\tfree(dirName);\n\t}\n\n\treturn 0;\n}\n", "\t.section\t__TEXT,__text,regular,pure_instructions\n\t.macosx_version_min 10, 12\n\t.globl\t_ceilRound\n\t.align\t4, 0x90\n_ceilRound:                             ## @ceilRound\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp0:\n\t.cfi_def_cfa_offset 16\nLtmp1:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp2:\n\t.cfi_def_cfa_register %rbp\n\tcvttss2si\t%xmm0, %rcx\n\tcvtsi2ssq\t%rcx, %xmm1\n\tsubss\t%xmm1, %xmm0\n\txorps\t%xmm1, %xmm1\n\tucomiss\t%xmm1, %xmm0\n\tseta\t%al\n\tmovzbl\t%al, %eax\n\taddq\t%rcx, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_clearBuffer\n\t.align\t4, 0x90\n_clearBuffer:                           ## @clearBuffer\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp3:\n\t.cfi_def_cfa_offset 16\nLtmp4:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp5:\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax\n\tjmp\tLBB1_1\n\t.align\t4, 0x90\nLBB1_3:                                 ##   in Loop: Header=BB1_1 Depth=1\n\tcallq\t_getchar\nLBB1_1:                                 ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %eax\n\tje\tLBB1_4\n## BB#2:                                ##   in Loop: Header=BB1_1 Depth=1\n\tcmpl\t$10, %eax\n\tjne\tLBB1_3\nLBB1_4:\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_readString\n\t.align\t4, 0x90\n_readString:                            ## @readString\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp6:\n\t.cfi_def_cfa_offset 16\nLtmp7:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp8:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%rbx\n\tpushq\t%rax\nLtmp9:\n\t.cfi_offset %rbx, -24\n\tmovq\t%rdi, %rbx\n\tmovq\t___stdinp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdx\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tje\tLBB2_1\n## BB#5:\n\tmovl\t$10, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strchr\n\ttestq\t%rax, %rax\n\tje\tLBB2_6\n## BB#10:\n\tmovb\t$0, (%rax)\n\tmovl\t$1, %eax\n\tjmp\tLBB2_11\nLBB2_1:\n\txorl\t%ecx, %ecx\n\tjmp\tLBB2_2\n\t.align\t4, 0x90\nLBB2_4:                                 ##   in Loop: Header=BB2_2 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ecx\nLBB2_2:                                 ## %.preheader\n                                        ## =>This Inner Loop Header: Depth=1\n\txorl\t%eax, %eax\n\tcmpl\t$-1, %ecx\n\tje\tLBB2_11\n## BB#3:                                ## %.preheader\n                                        ##   in Loop: Header=BB2_2 Depth=1\n\tcmpl\t$10, %ecx\n\tjne\tLBB2_4\n\tjmp\tLBB2_11\nLBB2_6:\n\txorl\t%ecx, %ecx\n\tjmp\tLBB2_7\n\t.align\t4, 0x90\nLBB2_9:                                 ##   in Loop: Header=BB2_7 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ecx\nLBB2_7:                                 ## %.preheader3\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovl\t$1, %eax\n\tcmpl\t$-1, %ecx\n\tje\tLBB2_11\n## BB#8:                                ## %.preheader3\n                                        ##   in Loop: Header=BB2_7 Depth=1\n\tcmpl\t$10, %ecx\n\tjne\tLBB2_9\nLBB2_11:                                ## %clearBuffer.exit\n\taddq\t$8, %rsp\n\tpopq\t%rbx\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal16,16byte_literals\n\t.align\t4\nLCPI3_0:\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\nLCPI3_1:\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_processTarString\n\t.align\t4, 0x90\n_processTarString:                      ## @processTarString\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp10:\n\t.cfi_def_cfa_offset 16\nLtmp11:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp12:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r12\n\tpushq\t%rbx\nLtmp13:\n\t.cfi_offset %rbx, -48\nLtmp14:\n\t.cfi_offset %r12, -40\nLtmp15:\n\t.cfi_offset %r14, -32\nLtmp16:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r15\n\tcallq\t_strlen\n\txorl\t%edx, %edx\n\ttestq\t%rax, %rax\n\tmovl\t$0, %esi\n\tje\tLBB3_7\n## BB#1:                                ## %.lr.ph6.preheader\n\tcmpq\t$4, %rax\n\tmovl\t$0, %esi\n\tjb\tLBB3_15\n## BB#2:                                ## %min.iters.checked\n\txorl\t%esi, %esi\n\tmovq\t%rax, %rcx\n\tandq\t$-4, %rcx\n\tmovl\t$0, %edx\n\tje\tLBB3_15\n## BB#3:                                ## %vector.body.preheader\n\tmovq\t%rax, %rdx\n\tandq\t$-4, %rdx\n\tpxor\t%xmm0, %xmm0\n\tmovdqa\tLCPI3_0(%rip), %xmm1    ## xmm1 = [32,32,32,32]\n\tmovdqa\tLCPI3_1(%rip), %xmm3    ## xmm3 = [1,1,1,1]\n\tmovq\t%r15, %rsi\n\tpxor\t%xmm2, %xmm2\n\t.align\t4, 0x90\nLBB3_4:                                 ## %vector.body\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovd\t(%rsi), %xmm4           ## xmm4 = mem[0],zero,zero,zero\n\tpunpcklbw\t%xmm0, %xmm4    ## xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3],xmm4[4],xmm0[4],xmm4[5],xmm0[5],xmm4[6],xmm0[6],xmm4[7],xmm0[7]\n\tpunpcklwd\t%xmm0, %xmm4    ## xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3]\n\tpcmpeqd\t%xmm1, %xmm4\n\tpand\t%xmm3, %xmm4\n\tpaddd\t%xmm4, %xmm2\n\taddq\t$4, %rsi\n\taddq\t$-4, %rdx\n\tjne\tLBB3_4\n## BB#5:                                ## %middle.block\n\tpshufd\t$78, %xmm2, %xmm0       ## xmm0 = xmm2[2,3,0,1]\n\tpaddd\t%xmm2, %xmm0\n\tphaddd\t%xmm0, %xmm0\n\tmovd\t%xmm0, %edx\n\tcmpq\t%rcx, %rax\n\tmovq\t%rcx, %rsi\n\tje\tLBB3_6\n\t.align\t4, 0x90\nLBB3_15:                                ## %.lr.ph6\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%r15,%rsi), %ecx\n\tcmpl\t$32, %ecx\n\tsete\t%cl\n\tmovzbl\t%cl, %ecx\n\taddl\t%ecx, %edx\n\tincq\t%rsi\n\tcmpq\t%rax, %rsi\n\tjb\tLBB3_15\nLBB3_6:                                 ## %._crit_edge\n\ttestl\t%edx, %edx\n\tmovq\t%rax, %rsi\n\tje\tLBB3_7\n## BB#9:\n\tmovslq\t%edx, %rcx\n\tleaq\t1(%rcx,%rax), %rsi\n\tmovl\t$1, %r12d\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r14\n\tmovb\t(%r15), %al\n\ttestb\t%al, %al\n\tje\tLBB3_8\n## BB#10:\n\txorl\t%ebx, %ebx\n\tjmp\tLBB3_11\n\t.align\t4, 0x90\nLBB3_14:                                ## %..lr.ph_crit_edge\n                                        ##   in Loop: Header=BB3_11 Depth=1\n\tincl\t%ebx\n\tmovb\t(%r15,%r12), %al\n\tincq\t%r12\nLBB3_11:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t%al, %ecx\n\tcmpl\t$32, %ecx\n\tjne\tLBB3_13\n## BB#12:                               ##   in Loop: Header=BB3_11 Depth=1\n\tmovslq\t%ebx, %rbx\n\tmovb\t$92, (%r14,%rbx)\n\tincl\t%ebx\nLBB3_13:                                ##   in Loop: Header=BB3_11 Depth=1\n\tmovslq\t%ebx, %rcx\n\tmovb\t%al, (%r14,%rcx)\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tcmpq\t%rax, %r12\n\tjb\tLBB3_14\n\tjmp\tLBB3_8\nLBB3_7:                                 ## %._crit_edge.thread\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r14\n\tmovq\t$-1, %rdx\n\tmovq\t%r14, %rdi\n\tmovq\t%r15, %rsi\n\tcallq\t___strcat_chk\nLBB3_8:                                 ## %.loopexit\n\tmovq\t%r14, %rax\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_generateNumber\n\t.align\t4, 0x90\n_generateNumber:                        ## @generateNumber\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp17:\n\t.cfi_def_cfa_offset 16\nLtmp18:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp19:\n\t.cfi_def_cfa_register %rbp\n\tmovq\t_seed.0(%rip), %rcx\n\tmovq\t_seed.1(%rip), %rdx\n\tleaq\t(%rdx,%rcx), %rax\n\txorq\t%rcx, %rdx\n\trolq\t$55, %rcx\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rsi\n\tshlq\t$14, %rsi\n\txorq\t%rcx, %rsi\n\tmovq\t%rsi, _seed.0(%rip)\n\trolq\t$36, %rdx\n\tmovq\t%rdx, _seed.1(%rip)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_splitmix64\n\t.align\t4, 0x90\n_splitmix64:                            ## @splitmix64\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp20:\n\t.cfi_def_cfa_offset 16\nLtmp21:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp22:\n\t.cfi_def_cfa_register %rbp\n\tmovabsq\t$-7046029254386353131, %rax ## imm = 0x9E3779B97F4A7C15\n\taddq\t(%rdi), %rax\n\tmovq\t%rax, (%rdi)\n\tmovq\t%rax, %rcx\n\tshrq\t$30, %rcx\n\txorq\t%rax, %rcx\n\tmovabsq\t$-4658895280553007687, %rax ## imm = 0xBF58476D1CE4E5B9\n\timulq\t%rcx, %rax\n\tmovq\t%rax, %rcx\n\tshrq\t$27, %rcx\n\txorq\t%rax, %rcx\n\tmovabsq\t$-7723592293110705685, %rdx ## imm = 0x94D049BB133111EB\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rax\n\tshrq\t$31, %rax\n\txorq\t%rdx, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_getHash\n\t.align\t4, 0x90\n_getHash:                               ## @getHash\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp23:\n\t.cfi_def_cfa_offset 16\nLtmp24:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp25:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t(%rdi), %cl\n\tmovl\t$5381, %eax             ## imm = 0x1505\n\ttestb\t%cl, %cl\n\tje\tLBB6_3\n## BB#1:                                ## %.lr.ph.preheader\n\tincq\t%rdi\n\tmovl\t$5381, %eax             ## imm = 0x1505\n\t.align\t4, 0x90\nLBB6_2:                                 ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rax, %rdx\n\tmovsbq\t%cl, %rax\n\taddq\t%rdx, %rax\n\tmovb\t(%rdi), %cl\n\tincq\t%rdi\n\ttestb\t%cl, %cl\n\tjne\tLBB6_2\nLBB6_3:                                 ## %._crit_edge\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_getSeed\n\t.align\t4, 0x90\n_getSeed:                               ## @getSeed\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp26:\n\t.cfi_def_cfa_offset 16\nLtmp27:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp28:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t(%rdi), %al\n\ttestb\t%al, %al\n\tmovabsq\t$-7723592293110705685, %r8 ## imm = 0x94D049BB133111EB\n\tmovabsq\t$-4658895280553007687, %rcx ## imm = 0xBF58476D1CE4E5B9\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\tje\tLBB7_3\n## BB#1:                                ## %.lr.ph.i.preheader\n\tincq\t%rdi\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\t.align\t4, 0x90\nLBB7_2:                                 ## %.lr.ph.i\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rdx, %rsi\n\tmovsbq\t%al, %rdx\n\taddq\t%rsi, %rdx\n\tmovb\t(%rdi), %al\n\tincq\t%rdi\n\ttestb\t%al, %al\n\tjne\tLBB7_2\nLBB7_3:                                 ## %getHash.exit\n\tmovabsq\t$-7046029254386353131, %rax ## imm = 0x9E3779B97F4A7C15\n\taddq\t%rdx, %rax\n\tmovq\t%rax, %rsi\n\tshrq\t$30, %rsi\n\txorq\t%rax, %rsi\n\timulq\t%rcx, %rsi\n\tmovq\t%rsi, %rax\n\tshrq\t$27, %rax\n\txorq\t%rsi, %rax\n\timulq\t%r8, %rax\n\tmovq\t%rax, %rsi\n\tshrq\t$31, %rsi\n\txorq\t%rax, %rsi\n\tmovq\t%rsi, _seed.0(%rip)\n\tmovabsq\t$4354685564936845354, %rax ## imm = 0x3C6EF372FE94F82A\n\taddq\t%rdx, %rax\n\tmovq\t%rax, %rdx\n\tshrq\t$30, %rdx\n\txorq\t%rax, %rdx\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rax\n\tshrq\t$27, %rax\n\txorq\t%rdx, %rax\n\timulq\t%r8, %rax\n\tmovq\t%rax, %rcx\n\tshrq\t$31, %rcx\n\txorq\t%rax, %rcx\n\tmovq\t%rcx, _seed.1(%rip)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal16,16byte_literals\n\t.align\t4\nLCPI8_0:\n\t.byte\t0                       ## 0x0\n\t.byte\t1                       ## 0x1\n\t.byte\t2                       ## 0x2\n\t.byte\t3                       ## 0x3\n\t.byte\t4                       ## 0x4\n\t.byte\t5                       ## 0x5\n\t.byte\t6                       ## 0x6\n\t.byte\t7                       ## 0x7\n\t.byte\t8                       ## 0x8\n\t.byte\t9                       ## 0x9\n\t.byte\t10                      ## 0xa\n\t.byte\t11                      ## 0xb\n\t.byte\t12                      ## 0xc\n\t.byte\t13                      ## 0xd\n\t.byte\t14                      ## 0xe\n\t.byte\t15                      ## 0xf\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_scramble\n\t.align\t4, 0x90\n_scramble:                              ## @scramble\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp29:\n\t.cfi_def_cfa_offset 16\nLtmp30:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp31:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$16408, %rsp            ## imm = 0x4018\nLtmp32:\n\t.cfi_offset %rbx, -56\nLtmp33:\n\t.cfi_offset %r12, -48\nLtmp34:\n\t.cfi_offset %r13, -40\nLtmp35:\n\t.cfi_offset %r14, -32\nLtmp36:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r12\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\txorl\t%r13d, %r13d\n\ttestq\t%r12, %r12\n\tje\tLBB8_8\n## BB#1:\n\tleaq\t_scrambleAsciiTables(%rip), %rax\n\tpxor\t%xmm1, %xmm1\n\tmovdqa\tLCPI8_0(%rip), %xmm2    ## xmm2 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\tleaq\t-16432(%rbp), %r14\n\tleaq\t_scrambleAsciiTables(%rip), %r15\n\t.align\t4, 0x90\nLBB8_2:                                 ## %vector.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB8_3 Depth 2\n                                        ##     Child Loop BB8_5 Depth 2\n                                        ##       Child Loop BB8_7 Depth 3\n\tmovq\t%rax, -16440(%rbp)      ## 8-byte Spill\n\txorl\t%ecx, %ecx\n\t.align\t4, 0x90\nLBB8_3:                                 ## %vector.body\n                                        ##   Parent Loop BB8_2 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovd\t%ecx, %xmm0\n\tpshufb\t%xmm1, %xmm0\n\tpaddb\t%xmm2, %xmm0\n\tmovdqa\t%xmm0, (%rax)\n\taddq\t$16, %rcx\n\taddq\t$16, %rax\n\tcmpq\t$256, %rcx              ## imm = 0x100\n\tjne\tLBB8_3\n## BB#4:                                ## %middle.block\n                                        ##   in Loop: Header=BB8_2 Depth=1\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tcallq\t___bzero\n\tjmp\tLBB8_5\n\t.align\t4, 0x90\nLBB8_6:                                 ## %.lr.ph.preheader\n                                        ##   in Loop: Header=BB8_5 Depth=2\n\tmovl\t%eax, %r8d\n\txorl\t%ecx, %ecx\n\t.align\t4, 0x90\nLBB8_7:                                 ## %.lr.ph\n                                        ##   Parent Loop BB8_2 Depth=1\n                                        ##     Parent Loop BB8_5 Depth=2\n                                        ## =>    This Inner Loop Header: Depth=3\n\tmovl\t%ecx, %edx\n\tsarl\t$31, %edx\n\tshrl\t$24, %edx\n\taddl\t%ecx, %edx\n\tandl\t$-256, %edx\n\tmovl\t%ecx, %esi\n\tsubl\t%edx, %esi\n\tmovslq\t%esi, %rdx\n\tmovq\t%r13, %rsi\n\tshlq\t$8, %rsi\n\taddq\t%r15, %rsi\n\tmovb\t(%rdx,%rsi), %bl\n\tmovzbl\t-16432(%rbp,%rcx), %edi\n\tmovb\t(%rdi,%rsi), %al\n\tmovb\t%al, (%rdx,%rsi)\n\tmovb\t%bl, (%rdi,%rsi)\n\tincq\t%rcx\n\tcmpl\t%ecx, %r8d\n\tjne\tLBB8_7\nLBB8_5:                                 ## %.loopexit\n                                        ##   Parent Loop BB8_2 Depth=1\n                                        ## =>  This Loop Header: Depth=2\n                                        ##       Child Loop BB8_7 Depth 3\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%r12, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjg\tLBB8_6\n## BB#16:                               ## %._crit_edge\n                                        ##   in Loop: Header=BB8_2 Depth=1\n\tmovq\t%r12, %rdi\n\tcallq\t_rewind\n\tincq\t%r13\n\tmovq\t-16440(%rbp), %rax      ## 8-byte Reload\n\taddq\t$256, %rax              ## imm = 0x100\n\tcmpq\t$16, %r13\n\tpxor\t%xmm1, %xmm1\n\tmovdqa\tLCPI8_0(%rip), %xmm2    ## xmm2 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\tjne\tLBB8_2\n\tjmp\tLBB8_14\nLBB8_8:                                 ## %.preheader5.us.preheader\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %r15\n\tleaq\t_scrambleAsciiTables(%rip), %r9\n\tmovq\t_passIndex(%rip), %r14\n\txorl\t%r11d, %r11d\n\tpxor\t%xmm0, %xmm0\n\tmovdqa\tLCPI8_0(%rip), %xmm1    ## xmm1 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r10\n\tmovq\t%r9, %rax\n\t.align\t4, 0x90\nLBB8_9:                                 ## %vector.ph45\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB8_10 Depth 2\n                                        ##     Child Loop BB8_11 Depth 2\n\tmovq\t%rax, -16440(%rbp)      ## 8-byte Spill\n\tmovq\t%rax, %rbx\n\txorl\t%edi, %edi\n\t.align\t4, 0x90\nLBB8_10:                                ## %vector.body41\n                                        ##   Parent Loop BB8_9 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovd\t%edi, %xmm2\n\tpshufb\t%xmm0, %xmm2\n\tpaddb\t%xmm1, %xmm2\n\tmovdqa\t%xmm2, (%rbx)\n\taddq\t$16, %rdi\n\taddq\t$16, %rbx\n\txorl\t%eax, %eax\n\tcmpq\t$256, %rdi              ## imm = 0x100\n\tjne\tLBB8_10\n\t.align\t4, 0x90\nLBB8_11:                                ## %.preheader3.us\n                                        ##   Parent Loop BB8_9 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%r15,%rdx), %r12d\n\txorq\t%rdx, %r15\n\tmovq\t%rdx, %rdi\n\trolq\t$55, %rdi\n\tmovq\t%r15, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%r15, %rdx\n\txorq\t%rdi, %rdx\n\trolq\t$36, %r15\n\tmovzbl\t(%r10,%r14), %r13d\n\tincl\t%r14d\n\tandl\t$16383, %r14d           ## imm = 0x3FFF\n\tmovl\t%eax, %esi\n\tsarl\t$31, %esi\n\tshrl\t$24, %esi\n\taddl\t%eax, %esi\n\tandl\t$-256, %esi\n\tmovl\t%eax, %ecx\n\tsubl\t%esi, %ecx\n\tmovslq\t%ecx, %rcx\n\tmovq\t%r11, %rsi\n\tshlq\t$8, %rsi\n\taddq\t%r9, %rsi\n\tmovb\t(%rcx,%rsi), %r8b\n\tmovzbl\t%r12b, %edi\n\txorq\t%r13, %rdi\n\tmovb\t(%rdi,%rsi), %bl\n\tmovb\t%bl, (%rcx,%rsi)\n\tmovb\t%r8b, (%rdi,%rsi)\n\tincl\t%eax\n\tcmpl\t$2560, %eax             ## imm = 0xA00\n\tjne\tLBB8_11\n## BB#12:                               ## %.loopexit4.us\n                                        ##   in Loop: Header=BB8_9 Depth=1\n\tincq\t%r11\n\tmovq\t-16440(%rbp), %rax      ## 8-byte Reload\n\taddq\t$256, %rax              ## imm = 0x100\n\tcmpq\t$16, %r11\n\tjne\tLBB8_9\n## BB#13:                               ## %.us-lcssa.us.loopexit\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%r15, _seed.1(%rip)\n\tmovq\t%r14, _passIndex(%rip)\nLBB8_14:                                ## %.us-lcssa.us\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB8_17\n## BB#15:                               ## %.us-lcssa.us\n\taddq\t$16408, %rsp            ## imm = 0x4018\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB8_17:                                ## %.us-lcssa.us\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.globl\t_unscramble\n\t.align\t4, 0x90\n_unscramble:                            ## @unscramble\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp37:\n\t.cfi_def_cfa_offset 16\nLtmp38:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp39:\n\t.cfi_def_cfa_register %rbp\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\txorl\t%edx, %edx\n\tleaq\t_unscrambleAsciiTables(%rip), %r9\n\t.align\t4, 0x90\nLBB9_1:                                 ## %.preheader\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB9_2 Depth 2\n\tmovq\t%r8, %rsi\n\txorl\t%edi, %edi\n\t.align\t4, 0x90\nLBB9_2:                                 ##   Parent Loop BB9_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rsi), %eax\n\tmovq\t%rdx, %rcx\n\tshlq\t$8, %rcx\n\taddq\t%r9, %rcx\n\tmovb\t%dil, (%rax,%rcx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tcmpq\t$256, %rdi              ## imm = 0x100\n\tjne\tLBB9_2\n## BB#3:                                ##   in Loop: Header=BB9_1 Depth=1\n\tincq\t%rdx\n\taddq\t$256, %r8               ## imm = 0x100\n\tcmpq\t$16, %rdx\n\tjne\tLBB9_1\n## BB#4:\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_codingXOR\n\t.align\t4, 0x90\n_codingXOR:                             ## @codingXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp40:\n\t.cfi_def_cfa_offset 16\nLtmp41:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp42:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t_isCodingInverted(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB10_1\n## BB#4:                                ## %.preheader\n\ttestl\t%ecx, %ecx\n\tjle\tLBB10_7\n## BB#5:\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB10_6:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rsi), %r9d\n\tmovb\t(%rdi), %al\n\txorb\t%r9b, %al\n\tmovzbl\t%al, %eax\n\tandl\t$15, %r9d\n\tshlq\t$8, %r9\n\taddq\t%r8, %r9\n\tmovb\t(%rax,%r9), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB10_6\n\tjmp\tLBB10_7\nLBB10_1:                                ## %.preheader1\n\ttestl\t%ecx, %ecx\n\tjle\tLBB10_7\n## BB#2:\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB10_3:                                ## %.lr.ph5\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rdi), %r9d\n\tmovzbl\t(%rsi), %r10d\n\tmovl\t%r10d, %eax\n\tandl\t$15, %eax\n\tshlq\t$8, %rax\n\taddq\t%r8, %rax\n\tmovb\t(%r9,%rax), %al\n\txorb\t%r10b, %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB10_3\nLBB10_7:                                ## %.loopexit\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_decodingXOR\n\t.align\t4, 0x90\n_decodingXOR:                           ## @decodingXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp43:\n\t.cfi_def_cfa_offset 16\nLtmp44:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp45:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t_isCodingInverted(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB11_1\n## BB#4:                                ## %.preheader\n\ttestl\t%ecx, %ecx\n\tjle\tLBB11_7\n## BB#5:\n\tleaq\t_unscrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB11_6:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rdi), %r9d\n\tmovzbl\t(%rsi), %r10d\n\tmovl\t%r10d, %eax\n\tandl\t$15, %eax\n\tshlq\t$8, %rax\n\taddq\t%r8, %rax\n\tmovb\t(%r9,%rax), %al\n\txorb\t%r10b, %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB11_6\n\tjmp\tLBB11_7\nLBB11_1:                                ## %.preheader1\n\ttestl\t%ecx, %ecx\n\tjle\tLBB11_7\n## BB#2:\n\tleaq\t_unscrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB11_3:                                ## %.lr.ph5\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rsi), %r9d\n\tmovb\t(%rdi), %al\n\txorb\t%r9b, %al\n\tmovzbl\t%al, %eax\n\tandl\t$15, %r9d\n\tshlq\t$8, %r9\n\taddq\t%r8, %r9\n\tmovb\t(%rax,%r9), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB11_3\nLBB11_7:                                ## %.loopexit\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_standardXOR\n\t.align\t4, 0x90\n_standardXOR:                           ## @standardXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp46:\n\t.cfi_def_cfa_offset 16\nLtmp47:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp48:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r12\n\tpushq\t%rbx\nLtmp49:\n\t.cfi_offset %rbx, -48\nLtmp50:\n\t.cfi_offset %r12, -40\nLtmp51:\n\t.cfi_offset %r14, -32\nLtmp52:\n\t.cfi_offset %r15, -24\n\ttestl\t%ecx, %ecx\n\tjle\tLBB12_10\n## BB#1:                                ## %.lr.ph.preheader\n\tleal\t-1(%rcx), %r14d\n\tleaq\t1(%r14), %r8\n\txorl\t%r10d, %r10d\n\tcmpq\t$16, %r8\n\tjb\tLBB12_8\n## BB#2:                                ## %min.iters.checked\n\txorl\t%r10d, %r10d\n\tmovabsq\t$8589934576, %r11       ## imm = 0x1FFFFFFF0\n\tmovq\t%r8, %r9\n\tandq\t%r11, %r9\n\tje\tLBB12_8\n## BB#3:                                ## %vector.memcheck\n\tleaq\t(%rdx,%r14), %rbx\n\tleaq\t(%rdi,%r14), %rax\n\tleaq\t(%rsi,%r14), %r10\n\tcmpq\t%rdx, %rax\n\tsetae\t%r15b\n\tcmpq\t%rdi, %rbx\n\tsetae\t%r12b\n\tcmpq\t%rdx, %r10\n\tsetae\t%al\n\tcmpq\t%rsi, %rbx\n\tsetae\t%bl\n\txorl\t%r10d, %r10d\n\ttestb\t%r12b, %r15b\n\tjne\tLBB12_8\n## BB#4:                                ## %vector.memcheck\n\tandb\t%bl, %al\n\tjne\tLBB12_8\n## BB#5:                                ## %vector.body.preheader\n\tincq\t%r14\n\tandq\t%r11, %r14\n\tmovq\t%rdx, %r10\n\tmovq\t%rsi, %rbx\n\tmovq\t%rdi, %rax\n\t.align\t4, 0x90\nLBB12_6:                                ## %vector.body\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovups\t(%rax), %xmm0\n\tmovups\t(%rbx), %xmm1\n\txorps\t%xmm0, %xmm1\n\tmovups\t%xmm1, (%r10)\n\taddq\t$16, %rax\n\taddq\t$16, %rbx\n\taddq\t$16, %r10\n\taddq\t$-16, %r14\n\tjne\tLBB12_6\n## BB#7:                                ## %middle.block\n\tcmpq\t%r9, %r8\n\tmovq\t%r9, %r10\n\tje\tLBB12_10\nLBB12_8:                                ## %.lr.ph.preheader10\n\taddq\t%r10, %rdi\n\taddq\t%r10, %rsi\n\taddq\t%r10, %rdx\n\tsubl\t%r10d, %ecx\n\t.align\t4, 0x90\nLBB12_9:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovb\t(%rsi), %al\n\txorb\t(%rdi), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB12_9\nLBB12_10:                               ## %._crit_edge\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_fillBuffer\n\t.align\t4, 0x90\n_fillBuffer:                            ## @fillBuffer\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp53:\n\t.cfi_def_cfa_offset 16\nLtmp54:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp55:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r14\n\tpushq\t%rbx\nLtmp56:\n\t.cfi_offset %rbx, -32\nLtmp57:\n\t.cfi_offset %r14, -24\n\tmovq\t%rdx, %r14\n\tmovq\t%rsi, %rax\n\tmovq\t%rdi, %rcx\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%rax, %rdi\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB13_4\n## BB#1:                                ## %.lr.ph\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rdi\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r8\n\tmovl\t%eax, %r9d\n\t.align\t4, 0x90\nLBB13_2:                                ## =>This Inner Loop Header: Depth=1\n\tleal\t(%rcx,%rdx), %ebx\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rsi\n\trolq\t$55, %rsi\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rsi, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r8,%rdi), %bl\n\tmovb\t%bl, (%r14)\n\tmovl\t_passIndex(%rip), %edi\n\tincl\t%edi\n\tandl\t$16383, %edi            ## imm = 0x3FFF\n\tmovq\t%rdi, _passIndex(%rip)\n\tincq\t%r14\n\tdecl\t%r9d\n\tjne\tLBB13_2\n## BB#3:                                ## %._crit_edge\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB13_4:\n\tpopq\t%rbx\n\tpopq\t%r14\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI14_0:\n\t.long\t1112014848              ## float 50\nLCPI14_3:\n\t.long\t1120403456              ## float 100\n\t.section\t__TEXT,__literal8,8byte_literals\n\t.align\t3\nLCPI14_1:\n\t.quad\t4607182418800017408     ## double 1\nLCPI14_2:\n\t.quad\t-4616189618054758400    ## double -1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_code\n\t.align\t4, 0x90\n_code:                                  ## @code\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp58:\n\t.cfi_def_cfa_offset 16\nLtmp59:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp60:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$49192, %rsp            ## imm = 0xC028\nLtmp61:\n\t.cfi_offset %rbx, -56\nLtmp62:\n\t.cfi_offset %r12, -48\nLtmp63:\n\t.cfi_offset %r13, -40\nLtmp64:\n\t.cfi_offset %r14, -32\nLtmp65:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r14\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t_fileName(%rip), %rbx\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tincl\t%eax\n\taddq\t$15, %rax\n\tmovabsq\t$8589934576, %rcx       ## imm = 0x1FFFFFFF0\n\tandq\t%rax, %rcx\n\tmovq\t%rsp, %r15\n\tsubq\t%rcx, %r15\n\tmovq\t%r15, %rsp\n\tleaq\t-16432(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tmovq\t%rdi, %r13\n\tcallq\t___bzero\n\tleaq\t-32816(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-49200(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\tL_.str(%rip), %rcx\n\tleaq\t_pathToMainFile(%rip), %r8\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r15, %rdi\n\tmovq\t%rbx, %r9\n\tcallq\t___sprintf_chk\n\tleaq\tL_.str.1(%rip), %rsi\n\tmovq\t%r15, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, -49208(%rbp)      ## 8-byte Spill\n\ttestq\t%rax, %rax\n\tje\tLBB14_52\n## BB#1:\n\tleaq\tL_str(%rip), %rdi\n\tcallq\t_puts\n\tmovb\t_scrambling(%rip), %bl\n\tandb\t$1, %bl\n\tmovq\t%r14, %rdi\n\tmovq\t%r14, %r12\n\tcallq\t_feof\n\ttestb\t%bl, %bl\n\tje\tLBB14_2\n## BB#12:                               ## %loadBar.exit.preheader\n\txorl\t%r14d, %r14d\n\ttestl\t%eax, %eax\n\tmovq\t%r12, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB14_35\n## BB#13:\n\tleaq\t-16432(%rbp), %r12\n\tleaq\t-32816(%rbp), %r13\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r15\n\t.align\t4, 0x90\nLBB14_14:                               ## %.lr.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB14_16 Depth 2\n                                        ##     Child Loop BB14_20 Depth 2\n                                        ##     Child Loop BB14_23 Depth 2\n                                        ##     Child Loop BB14_50 Depth 2\n                                        ##     Child Loop BB14_47 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r12, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB14_24\n## BB#15:                               ## %.lr.ph.i.30\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r13, %r9\n\t.align\t4, 0x90\nLBB14_16:                               ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r15,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB14_16\n## BB#17:                               ## %.lr.ph.i.41.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\n\tleal\t-1(%rax), %ecx\n\tincq\t%rcx\n\tcmpq\t$16, %rcx\n\tmovl\t$0, %ebx\n\tjb\tLBB14_22\n## BB#18:                               ## %min.iters.checked\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t%eax, %r8d\n\tandl\t$15, %r8d\n\tsubq\t%r8, %rcx\n\tmovl\t$0, %ebx\n\tje\tLBB14_22\n## BB#19:                               ## %vector.body.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t$4294967295, %edx       ## imm = 0xFFFFFFFF\n\tleal\t(%rax,%rdx), %esi\n\tincq\t%rsi\n\tmovl\t%eax, %edx\n\tandl\t$15, %edx\n\tsubq\t%rdx, %rsi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t%r13, %rbx\n\tmovq\t%r12, %rdx\n\t.align\t4, 0x90\nLBB14_20:                               ## %vector.body\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovapd\t(%rbx), %xmm0\n\txorpd\t(%rdx), %xmm0\n\tmovapd\t%xmm0, (%rdi)\n\taddq\t$16, %rdx\n\taddq\t$16, %rbx\n\taddq\t$16, %rdi\n\taddq\t$-16, %rsi\n\tjne\tLBB14_20\n## BB#21:                               ## %middle.block\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\ttestq\t%r8, %r8\n\tmovq\t%rcx, %rbx\n\tje\tLBB14_24\n\t.align\t4, 0x90\nLBB14_22:                               ## %.lr.ph.i.41.preheader87\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tleaq\t-49200(%rbp,%rbx), %rcx\n\tleaq\t-32816(%rbp,%rbx), %rdx\n\tleaq\t-16432(%rbp,%rbx), %rsi\n\tmovl\t%eax, %edi\n\tsubl\t%ebx, %edi\n\t.align\t4, 0x90\nLBB14_23:                               ## %.lr.ph.i.41\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdx), %bl\n\txorb\t(%rsi), %bl\n\tmovb\t%bl, (%rcx)\n\tincq\t%rcx\n\tincq\t%rdx\n\tincq\t%rsi\n\tdecl\t%edi\n\tjne\tLBB14_23\nLBB14_24:                               ## %standardXOR.exit\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r14\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB14_26\n## BB#25:                               ##   in Loop: Header=BB14_14 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB14_26:                               ##   in Loop: Header=BB14_14 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r14d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB14_27\n## BB#49:                               ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t%r12, %r13\n\tcvtsi2ssl\t%r14d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI14_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r12d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI14_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI14_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI14_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.28(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r12d, %r12d\n\tmovl\t%r12d, %ebx\n\tjle\tLBB14_46\n\t.align\t4, 0x90\nLBB14_50:                               ## %.lr.ph5.i.11\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_50\n## BB#45:                               ## %.preheader.i.10\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tcmpl\t$49, %r12d\n\tjg\tLBB14_48\nLBB14_46:                               ## %.lr.ph.i.14.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r12d, %ebx\n\t.align\t4, 0x90\nLBB14_47:                               ## %.lr.ph.i.14\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_47\nLBB14_48:                               ## %._crit_edge.i.12\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.31(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t%r13, %r12\n\tleaq\t-32816(%rbp), %r13\nLBB14_27:                               ## %loadBar.exit.backedge\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB14_14\n\tjmp\tLBB14_35\nLBB14_2:                                ## %loadBar.exit26.preheader\n\txorl\t%r15d, %r15d\n\ttestl\t%eax, %eax\n\tmovq\t%r12, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tmovq\t%r13, %r14\n\tjne\tLBB14_35\n## BB#3:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r12\n\tleaq\t_scrambleAsciiTables(%rip), %r13\n\t.align\t4, 0x90\nLBB14_4:                                ## %.lr.ph51\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB14_6 Depth 2\n                                        ##     Child Loop BB14_11 Depth 2\n                                        ##     Child Loop BB14_30 Depth 2\n                                        ##     Child Loop BB14_44 Depth 2\n                                        ##     Child Loop BB14_41 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB14_8\n## BB#5:                                ## %.lr.ph.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tleaq\t-32816(%rbp), %r9\n\t.align\t4, 0x90\nLBB14_6:                                ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r12,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB14_6\n## BB#7:                                ## %._crit_edge.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB14_8:                                ## %fillBuffer.exit\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovb\t_isCodingInverted(%rip), %cl\n\tandb\t$1, %cl\n\tje\tLBB14_9\n## BB#28:                               ## %.preheader.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB14_31\n## BB#29:                               ## %.lr.ph.i.8.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t%eax, %r8d\n\tmovq\t%r14, %rdx\n\tleaq\t-32816(%rbp), %rsi\n\tleaq\t-49200(%rbp), %rdi\n\t.align\t4, 0x90\nLBB14_30:                               ## %.lr.ph.i.8\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rsi), %ebx\n\tmovb\t(%rdx), %cl\n\txorb\t%bl, %cl\n\tmovzbl\t%cl, %ecx\n\tandl\t$15, %ebx\n\tshlq\t$8, %rbx\n\taddq\t%r13, %rbx\n\tmovb\t(%rcx,%rbx), %cl\n\tmovb\t%cl, (%rdi)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%r8d\n\tjne\tLBB14_30\n\tjmp\tLBB14_31\n\t.align\t4, 0x90\nLBB14_9:                                ## %.preheader1.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB14_31\n## BB#10:                               ## %.lr.ph5.i.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t%eax, %ecx\n\tmovq\t%r14, %rdx\n\tleaq\t-32816(%rbp), %rsi\n\tleaq\t-49200(%rbp), %rdi\n\t.align\t4, 0x90\nLBB14_11:                               ## %.lr.ph5.i\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rdx), %r8d\n\tmovzbl\t(%rsi), %r9d\n\tmovl\t%r9d, %ebx\n\tandl\t$15, %ebx\n\tshlq\t$8, %rbx\n\taddq\t%r13, %rbx\n\tmovb\t(%r8,%rbx), %bl\n\txorb\t%r9b, %bl\n\tmovb\t%bl, (%rdi)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB14_11\nLBB14_31:                               ## %codingXOR.exit\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r15\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB14_33\n## BB#32:                               ##   in Loop: Header=BB14_4 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB14_33:                               ##   in Loop: Header=BB14_4 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r15d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB14_34\n## BB#43:                               ##   in Loop: Header=BB14_4 Depth=1\n\tcvtsi2ssl\t%r15d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI14_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r14d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI14_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI14_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI14_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.28(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r14d, %r14d\n\tmovl\t%r14d, %ebx\n\tjle\tLBB14_40\n\t.align\t4, 0x90\nLBB14_44:                               ## %.lr.ph5.i.20\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_44\n## BB#39:                               ## %.preheader.i.16\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tcmpl\t$49, %r14d\n\tjg\tLBB14_42\nLBB14_40:                               ## %.lr.ph.i.25.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r14d, %ebx\n\t.align\t4, 0x90\nLBB14_41:                               ## %.lr.ph.i.25\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_41\nLBB14_42:                               ## %._crit_edge.i.21\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.31(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tleaq\t-16432(%rbp), %r14\nLBB14_34:                               ## %loadBar.exit26.backedge\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB14_4\nLBB14_35:                               ## %.loopexit\n\tmovq\t-49208(%rbp), %rdi      ## 8-byte Reload\n\tcallq\t_fclose\n\tmovzbl\t__isADirectory(%rip), %eax\n\tandl\t$1, %eax\n\tcmpl\t$1, %eax\n\tjne\tLBB14_37\n## BB#36:\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tmovq\t%rax, %rbx\n\tmovq\t_fileName(%rip), %rdi\n\tcallq\t_strlen\n\tleaq\t1(%rbx,%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, %rdi\n\tmovq\t%r14, %rsi\n\tcallq\t_strcpy\n\tmovq\t_fileName(%rip), %rsi\n\tmovq\t$-1, %rdx\n\tmovq\t%rbx, %rdi\n\tcallq\t___strcat_chk\n\tmovq\t%rbx, %rdi\n\tcallq\t_remove\n\tmovq\t%rbx, %rdi\n\tcallq\t_free\nLBB14_37:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB14_38\n## BB#51:\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB14_52:\n\tmovq\t%r15, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB14_38:\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI15_0:\n\t.long\t1112014848              ## float 50\nLCPI15_3:\n\t.long\t1120403456              ## float 100\n\t.section\t__TEXT,__literal8,8byte_literals\n\t.align\t3\nLCPI15_1:\n\t.quad\t4607182418800017408     ## double 1\nLCPI15_2:\n\t.quad\t-4616189618054758400    ## double -1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_decode\n\t.align\t4, 0x90\n_decode:                                ## @decode\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp66:\n\t.cfi_def_cfa_offset 16\nLtmp67:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp68:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$49192, %rsp            ## imm = 0xC028\nLtmp69:\n\t.cfi_offset %rbx, -56\nLtmp70:\n\t.cfi_offset %r12, -48\nLtmp71:\n\t.cfi_offset %r13, -40\nLtmp72:\n\t.cfi_offset %r14, -32\nLtmp73:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r13\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t_fileName(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tincl\t%eax\n\taddq\t$15, %rax\n\tmovabsq\t$8589934576, %rcx       ## imm = 0x1FFFFFFF0\n\tandq\t%rax, %rcx\n\tmovq\t%rsp, %r12\n\tsubq\t%rcx, %r12\n\tmovq\t%r12, %rsp\n\tleaq\t-16432(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-32816(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-49200(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t_scrambleAsciiTables(%rip), %rax\n\txorl\t%ebx, %ebx\n\tleaq\t_unscrambleAsciiTables(%rip), %r15\n\t.align\t4, 0x90\nLBB15_1:                                ## %.preheader.i\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_2 Depth 2\n\tmovq\t%rax, %rdx\n\txorl\t%esi, %esi\n\t.align\t4, 0x90\nLBB15_2:                                ##   Parent Loop BB15_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rdx), %edi\n\tmovq\t%rbx, %rcx\n\tshlq\t$8, %rcx\n\taddq\t%r15, %rcx\n\tmovb\t%sil, (%rdi,%rcx)\n\tincq\t%rsi\n\tincq\t%rdx\n\tcmpq\t$256, %rsi              ## imm = 0x100\n\tjne\tLBB15_2\n## BB#3:                                ##   in Loop: Header=BB15_1 Depth=1\n\tincq\t%rbx\n\taddq\t$256, %rax              ## imm = 0x100\n\tcmpq\t$16, %rbx\n\tjne\tLBB15_1\n## BB#4:                                ## %unscramble.exit\n\tleaq\tL_.str.4(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r12, %rdi\n\tmovq\t%r14, %r8\n\tcallq\t___sprintf_chk\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovl\t$1000, %edx             ## imm = 0x3E8\n\tmovq\t%r14, %rdi\n\tmovq\t%r12, %rsi\n\tcallq\t___strcat_chk\n\tleaq\tL_.str.1(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, -49208(%rbp)      ## 8-byte Spill\n\ttestq\t%rax, %rax\n\tje\tLBB15_54\n## BB#5:\n\tleaq\tL_str.35(%rip), %rdi\n\tcallq\t_puts\n\tmovb\t_scrambling(%rip), %bl\n\tandb\t$1, %bl\n\tmovq\t%r13, %rdi\n\tcallq\t_feof\n\ttestb\t%bl, %bl\n\tleaq\t-16432(%rbp), %r14\n\tje\tLBB15_6\n## BB#16:                               ## %loadBar.exit.preheader\n\txorl\t%r14d, %r14d\n\ttestl\t%eax, %eax\n\tmovq\t%r13, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB15_39\n## BB#17:\n\tleaq\t-16432(%rbp), %r12\n\tleaq\t-32816(%rbp), %r13\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r15\n\t.align\t4, 0x90\nLBB15_18:                               ## %.lr.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_20 Depth 2\n                                        ##     Child Loop BB15_24 Depth 2\n                                        ##     Child Loop BB15_27 Depth 2\n                                        ##     Child Loop BB15_52 Depth 2\n                                        ##     Child Loop BB15_49 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r12, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB15_28\n## BB#19:                               ## %.lr.ph.i.33\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r13, %r9\n\t.align\t4, 0x90\nLBB15_20:                               ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r15,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB15_20\n## BB#21:                               ## %.lr.ph.i.44.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\n\tleal\t-1(%rax), %ecx\n\tincq\t%rcx\n\tcmpq\t$16, %rcx\n\tmovl\t$0, %ebx\n\tjb\tLBB15_26\n## BB#22:                               ## %min.iters.checked\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t%eax, %r8d\n\tandl\t$15, %r8d\n\tsubq\t%r8, %rcx\n\tmovl\t$0, %ebx\n\tje\tLBB15_26\n## BB#23:                               ## %vector.body.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t$4294967295, %edx       ## imm = 0xFFFFFFFF\n\tleal\t(%rax,%rdx), %esi\n\tincq\t%rsi\n\tmovl\t%eax, %edx\n\tandl\t$15, %edx\n\tsubq\t%rdx, %rsi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t%r13, %rbx\n\tmovq\t%r12, %rdx\n\t.align\t4, 0x90\nLBB15_24:                               ## %vector.body\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovapd\t(%rbx), %xmm0\n\txorpd\t(%rdx), %xmm0\n\tmovapd\t%xmm0, (%rdi)\n\taddq\t$16, %rdx\n\taddq\t$16, %rbx\n\taddq\t$16, %rdi\n\taddq\t$-16, %rsi\n\tjne\tLBB15_24\n## BB#25:                               ## %middle.block\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\ttestq\t%r8, %r8\n\tmovq\t%rcx, %rbx\n\tje\tLBB15_28\n\t.align\t4, 0x90\nLBB15_26:                               ## %.lr.ph.i.44.preheader90\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tleaq\t-49200(%rbp,%rbx), %rcx\n\tleaq\t-32816(%rbp,%rbx), %rdx\n\tleaq\t-16432(%rbp,%rbx), %rsi\n\tmovl\t%eax, %edi\n\tsubl\t%ebx, %edi\n\t.align\t4, 0x90\nLBB15_27:                               ## %.lr.ph.i.44\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdx), %bl\n\txorb\t(%rsi), %bl\n\tmovb\t%bl, (%rcx)\n\tincq\t%rcx\n\tincq\t%rdx\n\tincq\t%rsi\n\tdecl\t%edi\n\tjne\tLBB15_27\nLBB15_28:                               ## %standardXOR.exit\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r14\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB15_30\n## BB#29:                               ##   in Loop: Header=BB15_18 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB15_30:                               ##   in Loop: Header=BB15_18 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r14d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB15_31\n## BB#51:                               ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t%r12, %r13\n\tcvtsi2ssl\t%r14d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI15_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r12d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI15_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI15_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI15_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.28(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r12d, %r12d\n\tmovl\t%r12d, %ebx\n\tjle\tLBB15_48\n\t.align\t4, 0x90\nLBB15_52:                               ## %.lr.ph5.i\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_52\n## BB#47:                               ## %.preheader.i.3\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tcmpl\t$49, %r12d\n\tjg\tLBB15_50\nLBB15_48:                               ## %.lr.ph.i.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r12d, %ebx\n\t.align\t4, 0x90\nLBB15_49:                               ## %.lr.ph.i\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_49\nLBB15_50:                               ## %._crit_edge.i\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.31(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t%r13, %r12\n\tleaq\t-32816(%rbp), %r13\nLBB15_31:                               ## %loadBar.exit.backedge\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB15_18\n\tjmp\tLBB15_39\nLBB15_6:                                ## %loadBar.exit29.preheader\n\txorl\t%r12d, %r12d\n\ttestl\t%eax, %eax\n\tmovq\t%r13, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB15_39\n## BB#7:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r13\n\t.align\t4, 0x90\nLBB15_8:                                ## %.lr.ph54\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_10 Depth 2\n                                        ##     Child Loop BB15_15 Depth 2\n                                        ##     Child Loop BB15_34 Depth 2\n                                        ##     Child Loop BB15_46 Depth 2\n                                        ##     Child Loop BB15_43 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB15_12\n## BB#9:                                ## %.lr.ph.i.5\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tleaq\t-32816(%rbp), %r9\n\t.align\t4, 0x90\nLBB15_10:                               ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r13,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB15_10\n## BB#11:                               ## %._crit_edge.i.6\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB15_12:                               ## %fillBuffer.exit\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovb\t_isCodingInverted(%rip), %cl\n\tandb\t$1, %cl\n\tje\tLBB15_13\n## BB#32:                               ## %.preheader.i.11\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB15_35\n## BB#33:                               ## %.lr.ph.i.16.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t%eax, %ecx\n\tmovq\t%r14, %rdx\n\tleaq\t-32816(%rbp), %rsi\n\tleaq\t-49200(%rbp), %rdi\n\t.align\t4, 0x90\nLBB15_34:                               ## %.lr.ph.i.16\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rdx), %r8d\n\tmovzbl\t(%rsi), %r9d\n\tmovl\t%r9d, %ebx\n\tandl\t$15, %ebx\n\tshlq\t$8, %rbx\n\taddq\t%r15, %rbx\n\tmovb\t(%r8,%rbx), %bl\n\txorb\t%r9b, %bl\n\tmovb\t%bl, (%rdi)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB15_34\n\tjmp\tLBB15_35\n\t.align\t4, 0x90\nLBB15_13:                               ## %.preheader1.i\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB15_35\n## BB#14:                               ## %.lr.ph5.i.17.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t%eax, %r8d\n\tmovq\t%r14, %rdx\n\tleaq\t-32816(%rbp), %rsi\n\tleaq\t-49200(%rbp), %rdi\n\t.align\t4, 0x90\nLBB15_15:                               ## %.lr.ph5.i.17\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rsi), %ebx\n\tmovb\t(%rdx), %cl\n\txorb\t%bl, %cl\n\tmovzbl\t%cl, %ecx\n\tandl\t$15, %ebx\n\tshlq\t$8, %rbx\n\taddq\t%r15, %rbx\n\tmovb\t(%rcx,%rbx), %cl\n\tmovb\t%cl, (%rdi)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%r8d\n\tjne\tLBB15_15\nLBB15_35:                               ## %decodingXOR.exit\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r12\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB15_37\n## BB#36:                               ##   in Loop: Header=BB15_8 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB15_37:                               ##   in Loop: Header=BB15_8 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r12d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB15_38\n## BB#45:                               ##   in Loop: Header=BB15_8 Depth=1\n\tcvtsi2ssl\t%r12d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI15_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r14d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI15_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI15_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI15_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.28(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r14d, %r14d\n\tmovl\t%r14d, %ebx\n\tjle\tLBB15_42\n\t.align\t4, 0x90\nLBB15_46:                               ## %.lr.ph5.i.23\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_46\n## BB#41:                               ## %.preheader.i.19\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tcmpl\t$49, %r14d\n\tjg\tLBB15_44\nLBB15_42:                               ## %.lr.ph.i.28.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r14d, %ebx\n\t.align\t4, 0x90\nLBB15_43:                               ## %.lr.ph.i.28\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_43\nLBB15_44:                               ## %._crit_edge.i.24\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.31(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tleaq\t-16432(%rbp), %r14\nLBB15_38:                               ## %loadBar.exit29.backedge\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB15_8\nLBB15_39:                               ## %.loopexit\n\tmovq\t-49208(%rbp), %rdi      ## 8-byte Reload\n\tcallq\t_fclose\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB15_40\n## BB#53:                               ## %.loopexit\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB15_54:\n\tmovq\t%r12, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB15_40:                               ## %.loopexit\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.globl\t_isADirectory\n\t.align\t4, 0x90\n_isADirectory:                          ## @isADirectory\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp74:\n\t.cfi_def_cfa_offset 16\nLtmp75:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp76:\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$144, %rsp\n\tleaq\t-144(%rbp), %rsi\n\tcallq\t_stat$INODE64\n\tcmpl\t$-1, %eax\n\tje\tLBB16_1\n## BB#5:\n\tmovzwl\t-140(%rbp), %eax\n\tandl\t$61440, %eax            ## imm = 0xF000\n\tcmpl\t$16384, %eax            ## imm = 0x4000\n\tsete\t%al\n\tmovzbl\t%al, %eax\n\tsete\t__isADirectory(%rip)\n\taddq\t$144, %rsp\n\tpopq\t%rbp\n\tretq\nLBB16_1:\n\tcallq\t___error\n\tcmpl\t$2, (%rax)\n\tjne\tLBB16_4\n## BB#2:\n\tleaq\tL_str.38(%rip), %rdi\n\tcallq\t_puts\n\tjmp\tLBB16_3\nLBB16_4:\n\tleaq\tL_.str.7(%rip), %rdi\n\tcallq\t_perror\nLBB16_3:\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI17_0:\n\t.long\t947912704               ## float 6.10351563E-5\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_main\n\t.align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp77:\n\t.cfi_def_cfa_offset 16\nLtmp78:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp79:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$1048, %rsp             ## imm = 0x418\nLtmp80:\n\t.cfi_offset %rbx, -56\nLtmp81:\n\t.cfi_offset %r12, -48\nLtmp82:\n\t.cfi_offset %r13, -40\nLtmp83:\n\t.cfi_offset %r14, -32\nLtmp84:\n\t.cfi_offset %r15, -24\n\tmovq\t%rsi, %r13\n\tmovl\t%edi, %r15d\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t(%r13), %rbx\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _progName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_2\n## BB#1:\n\tincq\t%rax\n\tmovq\t%rax, _progName(%rip)\n\tjmp\tLBB17_3\nLBB17_2:\n\tmovq\t%rbx, _progName(%rip)\nLBB17_3:\n\tcmpl\t$1, %r15d\n\tjle\tLBB17_87\n## BB#4:\n\tcmpl\t$5, %r15d\n\tjge\tLBB17_21\n## BB#5:\n\tmovq\t8(%r13), %rbx\n\tleaq\tL_.str.9(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_88\n## BB#6:\n\tleaq\tL_.str.10(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_88\n## BB#7:\n\txorl\t%r14d, %r14d\n\tcmpl\t$3, %r15d\n\tjl\tLBB17_23\n## BB#8:\n\tmovq\t16(%r13), %r14\n\tleaq\tL_.str.11(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_10\n## BB#9:\n\tleaq\tL_.str.12(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_10\n## BB#14:\n\tleaq\tL_.str.15(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_16\n## BB#15:\n\tleaq\tL_.str.16(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_16\n## BB#18:\n\tleaq\tL_.str.13(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %r14\n\ttestq\t%r14, %r14\n\tje\tLBB17_19\n## BB#20:\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_23\nLBB17_21:\n\tleaq\tL_str.50(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_usage\nLBB17_10:\n\tmovb\t$1, _scrambling(%rip)\n\txorl\t%r14d, %r14d\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_23\n## BB#11:\n\tmovq\t24(%r13), %rdi\n\tleaq\tL_.str.13(%rip), %rsi\n\tcallq\t_fopen\n\ttestq\t%rax, %rax\n\tje\tLBB17_12\n## BB#22:\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\txorl\t%r14d, %r14d\n\tjmp\tLBB17_23\nLBB17_16:\n\tmovb\t$1, _isCodingInverted(%rip)\n\txorl\t%r14d, %r14d\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_23\n## BB#17:\n\tmovq\t24(%r13), %rdi\n\tleaq\tL_.str.13(%rip), %rsi\n\tcallq\t_fopen\n\tmovq\t%rax, %r14\n\ttestq\t%r14, %r14\n\tje\tLBB17_12\nLBB17_23:\n\tmovq\t8(%r13), %rbx\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tmovzbl\t-1(%rax,%rbx), %ecx\n\tcmpl\t$47, %ecx\n\tjne\tLBB17_27\n## BB#24:\n\tmovzbl\t-2(%rax,%rbx), %eax\n\tcmpl\t$47, %eax\n\tje\tLBB17_25\nLBB17_27:\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tmovl\t$1, %edi\n\tmovq\t%rax, %rsi\n\tcallq\t_calloc\n\tmovq\t%rax, %r12\n\tmovq\t%r12, %rdi\n\tmovq\t%rbx, %rsi\n\tcallq\t_strcpy\n\tmovq\t%r12, %rdi\n\tcallq\t_isADirectory\n\ttestl\t%eax, %eax\n\tje\tLBB17_48\n## BB#28:\n\tleaq\t-1056(%rbp), %rdi\n\tmovl\t$1008, %esi             ## imm = 0x3F0\n\tcallq\t___bzero\n\tleaq\tL_.str.18(%rip), %rdi\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t8(%r13), %r15\n\tmovl\t$47, %esi\n\tmovq\t%r15, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, _fileName(%rip)\n\ttestq\t%rbx, %rbx\n\tje\tLBB17_34\n## BB#29:\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tcmpq\t$1, %rax\n\tjne\tLBB17_33\n## BB#30:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tleaq\t5(%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, %rdi\n\tmovq\t%r15, %rsi\n\tcallq\t_strcpy\n\tmovq\t_fileName(%rip), %rax\n\tsubq\t8(%r13), %rax\n\tmovb\t$0, (%rbx,%rax)\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _fileName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_32\n## BB#31:\n\tincq\t%rax\n\tmovq\t%rax, _fileName(%rip)\n\tsubq\t%rbx, %rax\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rsi\n\tmovq\t%rax, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t_fileName(%rip), %r15\n\tmovq\t%r15, %rax\n\tsubq\t%rbx, %rax\n\tmovq\t%rbx, -1064(%rbp)       ## 8-byte Spill\n\tmovb\t$0, (%rax,%r14)\n\tjmp\tLBB17_36\nLBB17_48:\n\tmovq\t8(%r13), %rbx\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _fileName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_50\n## BB#49:\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tincq\t%rax\n\tmovq\t%rax, _fileName(%rip)\n\tsubq\t%rbx, %rax\n\tleaq\t_pathToMainFile(%rip), %rdi\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%rbx, %rsi\n\tmovq\t%rax, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t8(%r13), %rbx\n\tjmp\tLBB17_51\nLBB17_34:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, _fileName(%rip)\n\tjmp\tLBB17_35\nLBB17_33:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tincq\t%rbx\n\tmovq\t%rbx, _fileName(%rip)\n\tsubq\t%r15, %rbx\n\tleaq\t_pathToMainFile(%rip), %r12\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%r12, %rdi\n\tmovq\t%r15, %rsi\n\tmovq\t%rbx, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t_fileName(%rip), %r15\n\tmovq\t%r15, %rax\n\tsubq\t8(%r13), %rax\n\tmovb\t$0, (%rax,%r12)\nLBB17_35:\n\txorl\t%eax, %eax\n\tmovq\t%rax, -1064(%rbp)       ## 8-byte Spill\nLBB17_36:\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tleaq\t5(%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r12\n\tleaq\tL_.str.19(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r12, %rdi\n\tmovq\t%r15, %r8\n\tcallq\t___sprintf_chk\n\tmovq\t_fileName(%rip), %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %r15\n\tleaq\t_pathToMainFile(%rip), %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %r13\n\tmovq\t%r12, %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %rbx\n\tsubq\t$16, %rsp\n\tmovq\t%r15, (%rsp)\n\tleaq\tL_.str.20(%rip), %rcx\n\tleaq\t-1056(%rbp), %r14\n\tmovl\t$0, %esi\n\tmovl\t$1008, %edx             ## imm = 0x3F0\n\txorl\t%eax, %eax\n\tmovq\t%r14, %rdi\n\tmovq\t%r13, %r8\n\tmovq\t%rbx, %r9\n\tcallq\t___sprintf_chk\n\taddq\t$16, %rsp\n\tmovq\t%r13, %rdi\n\tcallq\t_free\n\tmovq\t%rbx, %rdi\n\tcallq\t_free\n\tmovq\t%r15, %rdi\n\tcallq\t_free\n\tmovq\t%r14, %rdi\n\tcallq\t_system\n\ttestl\t%eax, %eax\n\tjne\tLBB17_37\n## BB#38:\n\tleaq\tL_str.42(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%r12, _fileName(%rip)\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tmovq\t%rax, %rbx\n\tmovq\t%r12, %rdi\n\tcallq\t_strlen\n\tmovq\t%rsp, %r15\n\tleaq\t15(%rax,%rbx), %rax\n\tandq\t$-16, %rax\n\tmovq\t%rsp, %r13\n\tsubq\t%rax, %r13\n\tmovq\t%r13, %rsp\n\tleaq\tL_.str.23(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r13, %rdi\n\tmovq\t%r14, %r8\n\tmovq\t%r12, %r9\n\tcallq\t___sprintf_chk\n\tleaq\tL_.str.13(%rip), %rsi\n\tmovq\t%r13, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %rbx\n\ttestq\t%rbx, %rbx\n\tje\tLBB17_47\n## BB#39:                               ## %.thread\n\tmovq\t%r12, -1080(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, %rsp\n\tmovq\t-1088(%rbp), %r12       ## 8-byte Reload\n\tmovq\t-1064(%rbp), %rcx       ## 8-byte Reload\n\tjmp\tLBB17_40\nLBB17_50:\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%rbx, _fileName(%rip)\nLBB17_51:\n\tleaq\tL_.str.13(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %rbx\n\txorl\t%ecx, %ecx\n\ttestq\t%rbx, %rbx\n\tmovl\t$0, %eax\n\tmovq\t%rax, -1080(%rbp)       ## 8-byte Spill\n\tje\tLBB17_52\nLBB17_40:\n\tmovq\t%rbx, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%rcx, -1064(%rbp)       ## 8-byte Spill\n\tmovq\t%r12, %rdi\n\tcallq\t_free\n\txorl\t%esi, %esi\n\tmovl\t$2, %edx\n\tmovq\t%rbx, %rdi\n\tcallq\t_fseek\n\tmovq\t%rbx, %rdi\n\tcallq\t_ftell\n\tmovq\t%rax, %r14\n\tmovq\t%rbx, %rdi\n\tcallq\t_rewind\n\tcvtsi2ssq\t%r14, %xmm0\n\tmulss\tLCPI17_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %rax\n\tcvtsi2ssq\t%rax, %xmm1\n\tsubss\t%xmm1, %xmm0\n\txorps\t%xmm1, %xmm1\n\tucomiss\t%xmm1, %xmm0\n\tseta\t%cl\n\tmovzbl\t%cl, %ecx\n\taddq\t%rax, %rcx\n\ttestq\t%rcx, %rcx\n\tmovl\t$1, %eax\n\tcmovgq\t%rcx, %rax\n\tmovq\t%rax, _numberOfBuffer(%rip)\n\tleaq\tL_.str.24(%rip), %r14\n\tmovq\t___stdinp@GOTPCREL(%rip), %r15\n\tleaq\t-1056(%rbp), %rbx\n\tleaq\tL_.str.25(%rip), %r13\n\txorl\t%r12d, %r12d\n\t.align\t4, 0x90\nLBB17_41:                               ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB17_53 Depth 2\n                                        ##     Child Loop BB17_56 Depth 2\n\txorl\t%eax, %eax\n\tmovq\t%r14, %rdi\n\tcallq\t_printf\n\tmovq\t(%r15), %rdx\n\tmovl\t$2, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tmovl\t$0, %eax\n\tje\tLBB17_56\n## BB#42:                               ##   in Loop: Header=BB17_41 Depth=1\n\tmovl\t$10, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strchr\n\tmovq\t%rax, %rcx\n\txorl\t%eax, %eax\n\ttestq\t%rcx, %rcx\n\tje\tLBB17_53\n## BB#43:                               ##   in Loop: Header=BB17_41 Depth=1\n\tmovb\t$0, (%rcx)\n\tjmp\tLBB17_44\n\t.align\t4, 0x90\nLBB17_58:                               ##   in Loop: Header=BB17_56 Depth=2\n\tcallq\t_getchar\nLBB17_56:                               ## %.preheader.i\n                                        ##   Parent Loop BB17_41 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tcmpl\t$-1, %eax\n\tje\tLBB17_44\n## BB#57:                               ## %.preheader.i\n                                        ##   in Loop: Header=BB17_56 Depth=2\n\tcmpl\t$10, %eax\n\tjne\tLBB17_58\n\tjmp\tLBB17_44\n\t.align\t4, 0x90\nLBB17_55:                               ##   in Loop: Header=BB17_53 Depth=2\n\tcallq\t_getchar\nLBB17_53:                               ## %.preheader3.i\n                                        ##   Parent Loop BB17_41 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tcmpl\t$-1, %eax\n\tje\tLBB17_44\n## BB#54:                               ## %.preheader3.i\n                                        ##   in Loop: Header=BB17_53 Depth=2\n\tcmpl\t$10, %eax\n\tjne\tLBB17_55\n\t.align\t4, 0x90\nLBB17_44:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\txorl\t%eax, %eax\n\tmovq\t%r13, %rdi\n\tcallq\t_printf\n\tmovsbl\t-1056(%rbp), %eax\n\tcmpl\t$98, %eax\n\tjg\tLBB17_59\n## BB#45:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tmovzbl\t%al, %eax\n\tcmpl\t$67, %eax\n\tje\tLBB17_61\n## BB#46:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tcmpl\t$68, %eax\n\tjne\tLBB17_41\n\tjmp\tLBB17_62\n\t.align\t4, 0x90\nLBB17_59:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tmovzbl\t%al, %eax\n\tcmpl\t$100, %eax\n\tje\tLBB17_62\n## BB#60:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tcmpl\t$99, %eax\n\tjne\tLBB17_41\nLBB17_61:                               ## %.thread20.loopexit\n\tmovb\t$1, %r12b\nLBB17_62:                               ## %.thread20\n\tleaq\tL_.str.26(%rip), %rdi\n\txorl\t%ebx, %ebx\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovq\t(%r15), %rdx\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r14\n\tmovl\t$16383, %esi            ## imm = 0x3FFF\n\tmovq\t%r14, %rdi\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tje\tLBB17_63\n## BB#67:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %rdi\n\tmovl\t$10, %esi\n\tcallq\t_strchr\n\ttestq\t%rax, %rax\n\tmovq\t-1080(%rbp), %r15       ## 8-byte Reload\n\tje\tLBB17_68\n## BB#72:\n\tmovb\t$0, (%rax)\n\tjmp\tLBB17_73\nLBB17_63:\n\tmovq\t-1080(%rbp), %r15       ## 8-byte Reload\n\tjmp\tLBB17_64\n\t.align\t4, 0x90\nLBB17_66:                               ##   in Loop: Header=BB17_64 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ebx\nLBB17_64:                               ## %.preheader.i.17\n                                        ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %ebx\n\tje\tLBB17_73\n## BB#65:                               ## %.preheader.i.17\n                                        ##   in Loop: Header=BB17_64 Depth=1\n\tcmpl\t$10, %ebx\n\tjne\tLBB17_66\n\tjmp\tLBB17_73\nLBB17_68:\n\txorl\t%eax, %eax\n\tjmp\tLBB17_69\n\t.align\t4, 0x90\nLBB17_71:                               ##   in Loop: Header=BB17_69 Depth=1\n\tcallq\t_getchar\nLBB17_69:                               ## %.preheader3.i.15\n                                        ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %eax\n\tje\tLBB17_73\n## BB#70:                               ## %.preheader3.i.15\n                                        ##   in Loop: Header=BB17_69 Depth=1\n\tcmpl\t$10, %eax\n\tjne\tLBB17_71\nLBB17_73:                               ## %readString.exit19\n\tleaq\tL_.str.25(%rip), %rdi\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovw\t(%r14), %di\n\ttestb\t%dil, %dil\n\tmovabsq\t$-7723592293110705685, %rax ## imm = 0x94D049BB133111EB\n\tmovabsq\t$-4658895280553007687, %rcx ## imm = 0xBF58476D1CE4E5B9\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\tje\tLBB17_77\n## BB#74:                               ## %.lr.ph.i.i.preheader\n\tmovl\t%edi, %esi\n\tshrl\t$8, %esi\n\tmovsbq\t%dil, %rdx\n\taddq\t$177573, %rdx           ## imm = 0x2B5A5\n\ttestb\t%sil, %sil\n\tje\tLBB17_77\n## BB#75:\n\taddq\t$2, %r14\n\t.align\t4, 0x90\nLBB17_76:                               ## %.lr.ph.i.i..lr.ph.i.i_crit_edge\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rdx, %rdi\n\tmovsbq\t%sil, %rdx\n\tmovb\t(%r14), %bl\n\taddq\t%rdi, %rdx\n\tincq\t%r14\n\ttestb\t%bl, %bl\n\tmovb\t%bl, %sil\n\tjne\tLBB17_76\nLBB17_77:                               ## %getSeed.exit\n\tmovabsq\t$-7046029254386353131, %rsi ## imm = 0x9E3779B97F4A7C15\n\taddq\t%rdx, %rsi\n\tmovq\t%rsi, %rdi\n\tshrq\t$30, %rdi\n\txorq\t%rsi, %rdi\n\timulq\t%rcx, %rdi\n\tmovq\t%rdi, %rsi\n\tshrq\t$27, %rsi\n\txorq\t%rdi, %rsi\n\timulq\t%rax, %rsi\n\tmovq\t%rsi, %rdi\n\tshrq\t$31, %rdi\n\txorq\t%rsi, %rdi\n\tmovq\t%rdi, _seed.0(%rip)\n\tmovabsq\t$4354685564936845354, %rsi ## imm = 0x3C6EF372FE94F82A\n\taddq\t%rdx, %rsi\n\tmovq\t%rsi, %rdx\n\tshrq\t$30, %rdx\n\txorq\t%rsi, %rdx\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rcx\n\tshrq\t$27, %rcx\n\txorq\t%rdx, %rcx\n\timulq\t%rax, %rcx\n\tmovq\t%rcx, %rax\n\tshrq\t$31, %rax\n\txorq\t%rcx, %rax\n\tmovq\t%rax, _seed.1(%rip)\n\tmovq\t-1072(%rbp), %rdi       ## 8-byte Reload\n\tcallq\t_scramble\n\ttestb\t%r12b, %r12b\n\tje\tLBB17_79\n## BB#78:\n\tmovq\t-1088(%rbp), %rbx       ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_code\n\tjmp\tLBB17_80\nLBB17_79:\n\tmovq\t-1088(%rbp), %rbx       ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_decode\nLBB17_80:\n\tmovq\t-1064(%rbp), %r14       ## 8-byte Reload\n\tleaq\tL_str.40(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%rbx, %rdi\n\tcallq\t_fclose\n\ttestq\t%r15, %r15\n\tje\tLBB17_82\n## BB#81:\n\tmovq\t%r15, %rdi\n\tcallq\t_free\nLBB17_82:\n\ttestq\t%r14, %r14\n\tje\tLBB17_84\n## BB#83:\n\tmovq\t%r14, %rdi\n\tcallq\t_free\nLBB17_84:\n\txorl\t%eax, %eax\nLBB17_85:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rcx\n\tmovq\t(%rcx), %rcx\n\tcmpq\t-48(%rbp), %rcx\n\tjne\tLBB17_89\n## BB#86:\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB17_32:\n\tmovq\t%rbx, _fileName(%rip)\n\tmovq\t%rbx, %r15\n\tmovq\t%rbx, -1064(%rbp)       ## 8-byte Spill\n\tjmp\tLBB17_36\nLBB17_47:\n\tmovq\t%r13, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%r15, %rsp\n\tmovl\t$1, %eax\n\tjmp\tLBB17_85\nLBB17_52:\n\tmovq\t8(%r13), %rdi\n\tcallq\t_perror\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %eax\n\tjmp\tLBB17_85\nLBB17_88:\n\txorl\t%edi, %edi\n\tcallq\t_usage\nLBB17_87:\n\tmovl\t$1, %edi\n\tcallq\t_usage\nLBB17_89:\n\tcallq\t___stack_chk_fail\nLBB17_37:\n\tleaq\tL_str.44(%rip), %rdi\n\tjmp\tLBB17_26\nLBB17_25:\n\tleaq\tL_str.46(%rip), %rdi\nLBB17_26:\n\tcallq\t_puts\n\tleaq\tL_str.47(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB17_12:\n\tmovq\t24(%r13), %rdi\n\tjmp\tLBB17_13\nLBB17_19:\n\tmovq\t16(%r13), %rdi\nLBB17_13:\n\tcallq\t_perror\n\tmovl\t$1, %edi\n\tcallq\t_usage\n\t.cfi_endproc\n\n\t.align\t4, 0x90\n_usage:                                 ## @usage\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp85:\n\t.cfi_def_cfa_offset 16\nLtmp86:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp87:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%rbx\n\tsubq\t$40, %rsp\nLtmp88:\n\t.cfi_offset %rbx, -24\n\tmovl\t%edi, %ebx\n\tmovq\t___stderrp@GOTPCREL(%rip), %rax\n\ttestl\t%ebx, %ebx\n\tcmoveq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tmovq\t_progName(%rip), %rdx\n\tjne\tLBB18_2\n## BB#1:\n\tmovq\t%rdx, 24(%rsp)\n\tmovq\t%rdx, 16(%rsp)\n\tmovq\t%rdx, 8(%rsp)\n\tmovq\t%rdx, (%rsp)\n\tleaq\tL_.str.32(%rip), %rsi\n\txorl\t%eax, %eax\n\tmovq\t%rdx, %r8\n\tmovq\t%rdx, %r9\n\tmovq\t%rdx, %rcx\n\tcallq\t_fprintf\n\tmovl\t%ebx, %edi\n\tcallq\t_exit\nLBB18_2:\n\tleaq\tL_.str.33(%rip), %rsi\n\txorl\t%eax, %eax\n\tcallq\t_fprintf\n\tmovl\t%ebx, %edi\n\tcallq\t_exit\n\t.cfi_endproc\n\n\t.globl\t_passIndex              ## @passIndex\n.zerofill __DATA,__common,_passIndex,8,3\n.zerofill __DATA,__bss,_seed.0,8,4      ## @seed.0\n.zerofill __DATA,__bss,_seed.1,8,3      ## @seed.1\n.zerofill __DATA,__bss,_scrambleAsciiTables,4096,4 ## @scrambleAsciiTables\n\t.comm\t_passPhrase,16384,4     ## @passPhrase\n.zerofill __DATA,__bss,_unscrambleAsciiTables,4096,4 ## @unscrambleAsciiTables\n.zerofill __DATA,__bss,_isCodingInverted,1,0 ## @isCodingInverted\n.zerofill __DATA,__bss,_fileName,8,3    ## @fileName\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n\t.asciz\t\"%sx%s\"\n\n\t.section\t__DATA,__data\n\t.align\t4                       ## @pathToMainFile\n_pathToMainFile:\n\t.asciz\tn\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str.1:                               ## @.str.1\n\t.asciz\t\"w+\"\n\n.zerofill __DATA,__bss,_scrambling,1,0  ## @scrambling\n.zerofill __DATA,__bss,_numberOfBuffer,8,3 ## @numberOfBuffer\n.zerofill __DATA,__bss,__isADirectory,1,0 ## @_isADirectory\nL_.str.4:                               ## @.str.4\n\t.asciz\t\"x%s\"\n\nL_.str.7:                               ## @.str.7\n\t.asciz\t\"stat\"\n\n.zerofill __DATA,__bss,_progName,8,3    ## @progName\nL_.str.9:                               ## @.str.9\n\t.asciz\t\"-h\"\n\nL_.str.10:                              ## @.str.10\n\t.asciz\t\"--help\"\n\nL_.str.11:                              ## @.str.11\n\t.asciz\t\"-s\"\n\nL_.str.12:                              ## @.str.12\n\t.asciz\t\"--standard\"\n\nL_.str.13:                              ## @.str.13\n\t.asciz\t\"r\"\n\nL_.str.15:                              ## @.str.15\n\t.asciz\t\"-i\"\n\nL_.str.16:                              ## @.str.16\n\t.asciz\t\"--inverted\"\n\nL_.str.18:                              ## @.str.18\n\t.asciz\t\"regrouping the folder in one file using tar, may be long...\"\n\nL_.str.19:                              ## @.str.19\n\t.asciz\t\"%s.tar\"\n\nL_.str.20:                              ## @.str.20\n\t.asciz\t\"cd %s && tar -cf %s %s &>/dev/null\"\n\nL_.str.23:                              ## @.str.23\n\t.asciz\t\"%s%s\"\n\nL_.str.24:                              ## @.str.24\n\t.asciz\t\"Crypt(C) or Decrypt(d):\"\n\nL_.str.25:                              ## @.str.25\n\t.asciz\t\"\\033[F\\033[J\"\n\nL_.str.26:                              ## @.str.26\n\t.asciz\t\"Password:\"\n\n.zerofill __DATA,__bss,_loadBar.firstCall,1,0 ## @loadBar.firstCall\n.zerofill __DATA,__bss,_loadBar.startingTime,8,3 ## @loadBar.startingTime\nL_.str.28:                              ## @.str.28\n\t.asciz\t\" %3d%% [\"\n\nL_.str.31:                              ## @.str.31\n\t.asciz\t\"] %.0f        \\r\"\n\nL_.str.32:                              ## @.str.32\n\t.asciz\t\"%s(1)\\t\\t\\tcopyright <Pierre-Fran\\303\\247ois Monville>\\t\\t\\t%s(1)\\n\\nNAME\\n\\t%s -- crypt or decrypt any data\\n\\nSYNOPSIS\\n\\t%s [-h | --help] FILE [-s | --standard | KEYFILE]\\n\\nDESCRIPTION\\n\\t(FR) permet de chiffrer et de d\\303\\251chiffrer toutes les donn\\303\\251es entr\\303\\251es en param\\303\\250tre le mot de passe demand\\303\\251 au d\\303\\251but est hash\\303\\251 puis sert de graine pour le PRNG le PRNG permet de fournir une cl\\303\\251 unique \\303\\251gale \\303\\240 la longueur du fichier \\303\\240 coder. La cl\\303\\251 unique subit un xor avec le mot de passe (le mot de passe est r\\303\\251p\\303\\251t\\303\\251 autant de fois que n\\303\\251c\\303\\251ssaire). Le fichier subit un xor avec cette cl\\303\\251 Puis un brouilleur est utilis\\303\\251, il m\\303\\251lange la table des caract\\303\\250res (ascii) en utilisant le PRNG ou en utilisant le keyFile fourni.\\n\\t(EN) Can crypt and decrypt any data given in argument. The password asked is hashed to be used as a seed for the PRNG. The PRNG gives a unique key which has the same length as the source file. The key is xored with the password (the password is repeated as long as necessary). The file is then xored with this new key, then a scrambler is used. It scrambles the ascii table using the PRNG or the keyFile given\\n\\nOPTIONS\\n\\tthe options are as follows:\\n\\n\\t-h | --help\\tfurther help.\\n\\n\\t-s | --standard\\tput the scrambler on off.\\n\\n\\t-i | --inverted\\tinverts the coding/decoding process, first it xors then it scrambles.\\n\\nEXIT STATUS\\n\\tthe %s program exits 0 on success, and anything else if an error occurs.\\n\\nEXAMPLES\\n\\tthe command:\\t%s file1\\n\\n\\tlets you choose between crypting or decrypting then it will prompt for a password that crypt/decrypt file1 as xfile1 in the same folder, file1 is not modified.\\n\\n\\tthe command:\\t%s file2 keyfile1\\n\\n\\tlets you choose between crypting or decrypting, will prompt for the password that crypt/decrypt file2, uses keyfile1 to generate the scrambler then crypt/decrypt file2 as file2x in the same folder, file2 is not modified.\\n\\n\\tthe command:\\t%s file3 -s\\n\\n\\tlets you choose between crypting or decrypting, will prompt for a password that crypt/decrypt the file without using the scrambler, resulting in using the unique key only.\\n\"\n\nL_.str.33:                              ## @.str.33\n\t.asciz\t\"Usage : %s [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\\nOptions :\\n  -h --help :\\t\\tfurther help\\n  -s --standard :\\tput the scrambler off\\n  -i --inverted :\\tinverts the coding/decoding process\\n  KEYFILE :\\t\\tpath to a keyfile that generates the scrambler instead of the password\\n\"\n\n\t.align\t4                       ## @str\nL_str:\n\t.asciz\t\"starting encryption...\"\n\n\t.align\t4                       ## @str.35\nL_str.35:\n\t.asciz\t\"starting decryption...\"\n\n\t.align\t4                       ## @str.38\nL_str.38:\n\t.asciz\t\"error: file's path is not correct, one or several directories and or file are missing\"\n\n\t.align\t4                       ## @str.40\nL_str.40:\n\t.asciz\t\"Done                                                                  \"\n\n\t.align\t4                       ## @str.42\nL_str.42:\n\t.asciz\t\"\\rregrouping the folder in one file using tar... Done          \"\n\n\t.align\t4                       ## @str.44\nL_str.44:\n\t.asciz\t\"\\nerror: unable to tar your file\"\n\n\t.align\t4                       ## @str.46\nL_str.46:\n\t.asciz\t\"error: several trailing '/' in the path of your file\"\n\nL_str.47:                               ## @str.47\n\t.asciz\t\"exiting\"\n\n\t.align\t4                       ## @str.49\nL_str.49:\n\t.asciz\t\"Warning: with the -s|--standard option, the keyfile will not bu used\"\n\n\t.align\t4                       ## @str.50\nL_str.50:\n\t.asciz\t\"Error: Too many arguments\"\n\n\n.subsections_via_symbols\n"], "fixing_code": ["// Copyright <Pierre-Fran\u00e7ois Monville>\n// ===========================================================================\n// \t\t\t\t\t\t\t\t\tenigmaX\n// permet de chiffrer et de d\u00e9chiffrer tout fichier donn\u00e9 en param\u00e8tre\n// le mot de passe demand\u00e9 au d\u00e9but est hash\u00e9 puis sert de graine pour le PRNG\n// le PRNG permet de fournir une cl\u00e9 unique \u00e9gale \u00e0 la longueur du fichier \u00e0 coder\n// La cl\u00e9 unique subit un xor avec le mot de passe (le mot de passe est r\u00e9p\u00e9t\u00e9 \n// autant de fois que n\u00e9c\u00e9ssaire). Le fichier subit un xor avec cette cl\u00e9 Puis\n// un brouilleur est utilis\u00e9, il m\u00e9lange la table des caract\u00e8res (ascii)\n// en utilisant le PRNG ou en utilisant le keyFile fourni.\n//\n// Can crypt and decrypt any file given in argument. The password asked is hashed\n// to be used as a seed for the PRNG. The PRNG gives a unique key\n// which has the same length as the source file. The key is xored with the password \n// (rthe password is repeated as long as necessary). The file is then xored with this\n// new key, then a scrambler is used.\n// it scrambles the ascii table using the PRNG or the keyFile given.\n//\n// USAGE : \n//\t\tenigmax [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\n//\n// \t\tcode or decode the given file\n//\n// \t\tKEYFILE: \n// \t\t\tpath to a keyfile that is used to generate the scrambler instead of the password\n//\n// \t\t-s --standard : \n// \t \t\tput the scrambler off\n//\n//\t\t-i --inverted :\n//\t\t\tinverts the coding/decoding process, first it xors then it scrambles\n//\n// \t\t-h --help : \n// \t\t\tfurther help\n//\n// ===========================================================================\n\n/*\nTODO:\ncrypted folders explorer\ngraphical interface\nspecial option (multi layer's password, hide extension, randomize the name)\n */\n\n\n/*\nInstallation\n\nMAC:\nclang -Ofast -fno-unroll-loops main.c -o enigmax\n\nLINUX:\ngcc -fno-move-loop-invariants -fno-unroll-loops main.c -o enigmax\n\nyou can put the compiled file \"enigmax\" in your path to use it everywhere\nexport PATH=$PATH:/PATH/TO/enigmax\nwrite in your ~/.bashrc if you want it to stay after a reboot\n*/\n\n/*\n\tincludes\n */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <ctype.h>\n#include <time.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n\n\n/*\n\tconstants\n */\n#define BUFFER_SIZE 16384  //16384 //8192\n\n\n/*\n\tglobal variables\n */\nstatic const char *progName;\nstatic const char *fileName;\nstatic char pathToMainFile[1000] = \"./\";\nstatic char _isADirectory;\nstatic uint64_t seed[2];\nstatic unsigned char scrambleAsciiTables[16][256];\nstatic unsigned char unscrambleAsciiTables[16][256];\nstatic char isCrypting = 1;\nstatic char scrambling = 1;\nstatic char usingKeyFile = 0;\nstatic char isCodingInverted = 0;\nstatic long numberOfBuffer;\nstatic char scramblingTablesOrder[BUFFER_SIZE];\n\nchar passPhrase[16384];\nuint64_t passIndex = 0;\n\n/*\n\t-static void usage(int status)\n\tstatus : expect EXIT_FAILURE or EXIT_SUCCESS code to choose the output stream\n\n\twhen the program is typed without arguments in terminal it shows the usage\n */\nstatic void usage(int status)\n{\n\tFILE *dest = (status == 0) ? stdout : stderr;\n\n\tif(status == 0){\n\t\tfprintf(dest,\n\t\t\t\"%s(1)\\t\\t\\tcopyright <Pierre-Fran\u00e7ois Monville>\\t\\t\\t%s(1)\\n\\nNAME\\n\\t%s -- crypt or decrypt any data\\n\\nSYNOPSIS\\n\\t%s [-h | --help] FILE [-s | --standard | KEYFILE]\\n\\nDESCRIPTION\\n\\t(FR) permet de chiffrer et de d\u00e9chiffrer toutes les donn\u00e9es entr\u00e9es en param\u00e8tre le mot de passe demand\u00e9 au d\u00e9but est hash\u00e9 puis sert de graine pour le PRNG le PRNG permet de fournir une cl\u00e9 unique \u00e9gale \u00e0 la longueur du fichier \u00e0 coder. La cl\u00e9 unique subit un xor avec le mot de passe (le mot de passe est r\u00e9p\u00e9t\u00e9 autant de fois que n\u00e9c\u00e9ssaire). Le fichier subit un xor avec cette cl\u00e9 Puis un brouilleur est utilis\u00e9, il m\u00e9lange la table des caract\u00e8res (ascii) en utilisant le PRNG ou en utilisant le keyFile fourni.\\n\\t(EN) Can crypt and decrypt any data given in argument. The password asked is hashed to be used as a seed for the PRNG. The PRNG gives a unique key which has the same length as the source file. The key is xored with the password (the password is repeated as long as necessary). The file is then xored with this new key, then a scrambler is used. It scrambles the ascii table using the PRNG or the keyFile given\\n\\nOPTIONS\\n\\tthe options are as follows:\\n\\n\\t-h | --help\\tfurther help.\\n\\n\\t-s | --standard\\tput the scrambler on off.\\n\\n\\t-i | --inverted\\tinverts the coding/decoding process, first it xors then it scrambles.\\n\\n\\tKEYFILE    \\tthe path to a file which will be used to scramble the substitution's tables and choose in which order they will be used instead of the PRNG only (starting at 2.5 ko for the keyfile is great, however not interesting to be too heavy) \\n\\nEXIT STATUS\\n\\tthe %s program exits 0 on success, and anything else if an error occurs.\\n\\nEXAMPLES\\n\\tthe command:\\t%s file1\\n\\n\\tlets you choose between crypting or decrypting then it will prompt for a password that crypt/decrypt file1 as xfile1 in the same folder, file1 is not modified.\\n\\n\\tthe command:\\t%s file2 keyfile1\\n\\n\\tlets you choose between crypting or decrypting, will prompt for the password that crypt/decrypt file2, uses keyfile1 to generate the scrambler then crypt/decrypt file2 as file2x in the same folder, file2 is not modified.\\n\\n\\tthe command:\\t%s file3 -s\\n\\n\\tlets you choose between crypting or decrypting, will prompt for a password that crypt/decrypt the file without using the scrambler, resulting in using the unique key only.\\n\", progName, progName, progName, progName, progName, progName, progName, progName);\n\t} else{\n\t\tfprintf(dest,\n\t\t\t\"Version : 2.3\\nUsage : %s [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\\nOptions :\\n  -h --help :\\t\\tfurther help\\n  -s --standard :\\tput the scrambler off\\n  -i --inverted :\\tinverts the coding/decoding process\\n  KEYFILE :\\t\\tpath to a keyfile that scrambles the substitution's tables and choose they order instead of the PRNG only\\n\", progName);\n\t}\n\texit(status);\n}\n\n\n/*\n\t-long ceilRound(float numberToBeRounded)\n\treturned value : the number rounded (ceil form)\n\n\tto prevent from importing all math.h for just one function \n\tI had to add it myself\n*/\nlong ceilRound(float numberToBeRounded){\n\tif (numberToBeRounded - (long) numberToBeRounded > 0)\n\t{\n\t\treturn (long) numberToBeRounded + 1;\n\t}\n\treturn (long) numberToBeRounded;\n}\n\n\n/*\n\tvoid clearBuffer()\n\n\tempty the buffer\t\n*/\nvoid clearBuffer()\t\n{\n    int charInBuffer = 0;\n    while (charInBuffer != '\\n' && charInBuffer != EOF)\n    {\n        charInBuffer = getchar();\n    }\n}\n\n/*\n\t-int readStr(char *str, unsigned long size)\n\treturned value : the string 'str' of size 'size'\n\n\tbasicaly, it's doing a fgets but take care of the buffer\n*/\nint readString(char *string, unsigned long size)\n{\n    char *EOFPos = NULL;\n    \n    if(fgets(string, size, stdin) != NULL)\t\n    {\n        EOFPos = strchr(string, '\\n'); \n        if(EOFPos != NULL)\t\n        {\n            *EOFPos = '\\0';\t\n        }\n        else\t\n        {\n            clearBuffer();\t\n        }\n        return 1;\n    }\n    else\n    {\n        clearBuffer();  \n        return 0;\n    }\n}\n\n\n/*\n\t-void processTarString(char* string)\n\n\tchange string placing '\\' just before every spaces in order to \n\tthe tar command to work with files/directories with spaces in their names\n*/\nchar* processTarString(char* string){\n\tint numberOfSpace = 0;\n\tchar* resultString;\n\n\tfor (int i = 0; i < strlen(string); ++i)\n\t{\n\t\tif (string[i] == ' ')\t\n\t\t{\n\t\t\tnumberOfSpace++;\n\t\t}\n\t}\n\n\tif (numberOfSpace == 0) //just returns the same string basicaly\n\t{\n\t\tresultString = (char*) calloc(1, sizeof(char)* (strlen(string)));\n\t\tstrcat(resultString, string);\n\t\treturn resultString;\n\t}\n\n\tresultString = (char*) calloc(1, sizeof(char)* (strlen(string) + numberOfSpace + 1));\n\tfor (int i = 0, j = 0; i < strlen(string); ++i, ++j)\n\t{\n\t\tif (string[i] == ' ')\n\t\t{\n\t\t\tresultString[j] = '\\\\';\n\t\t\tj++;\n\t\t}\n\t\tresultString[j] = string[i];\n\t}\n\n\treturn resultString;\n}\n\n\n/*\n\t-static inline uint64_t rotationLinearTransformation(const uint64_t seed, int constant)\n\tseed : the seed which will have the rotation\n\tconstant : number which has to be between 1 and 63\n\treturned value :  uint64_t number (equivalent to long long but on all OS)\n\n\trotation function for generateNumber\n\tpart of the xoroshiro128+ algorythm :\n\thttp://xoroshiro.di.unimi.it/xoroshiro128plus.c\n */\nstatic inline uint64_t rotationLinearTransformation(const uint64_t seed, int constant) {\n\treturn (seed << constant) | (seed >> (64 - constant));\n}\n\n/*\n\t-uint64_t generateNumber(void)\n\treturned value :  uint64_t number (equivalent to long long but on all OS)\n\n\trandom number generator\n\twith the xoroshiro128+ algorythm which is one of the quickiest PRNG\n\tit passes the BigCrush test :\n\thttp://xoroshiro.di.unimi.it/xoroshiro128plus.c\n */\nuint64_t generateNumber(void) {\n\tconst uint64_t seed0 = seed[0];\n\tuint64_t seed1 = seed[1];\n\tconst uint64_t result = seed0 + seed1;\n\n\tseed1 ^= seed0;\n\tseed[0] = rotationLinearTransformation(seed0, 55) ^ seed1 ^ (seed1 << 14); // a, b\n\tseed[1] = rotationLinearTransformation(seed1, 36); // c\n\n\treturn result;\n}\n\n/*\n\t-uint64_t splitmix64(uint64_t* seed)\n\tseed : the seed which is modified after each call\n\treturned value :  uint64_t randomNumber, a random number generated from the seed\n\n\tIt is a very fast generator passing BigCrush, http://xoroshiro.di.unimi.it/splitmix64.c\n\tIt's here only to populate the seed array \"s[2]\" for xoroshiro\n */\nuint64_t splitmix64(uint64_t* seed) {\n\tuint64_t randomNumber = (*seed += UINT64_C(0x9E3779B97F4A7C15));\n\trandomNumber = (randomNumber ^ (randomNumber >> 30)) * UINT64_C(0xBF58476D1CE4E5B9);\n\trandomNumber = (randomNumber ^ (randomNumber >> 27)) * UINT64_C(0x94D049BB133111EB);\n\treturn randomNumber ^ (randomNumber >> 31);\n}\n\n\n/*\n\t-uint64_t getHash(char* password)\n\tpassword : a string which is the password typed by the user\n\treturned value :  uint64_t number representing the hash of the string\n\n\tsimple function that hashes a string into numbers (djb2)\n */\nuint64_t getHash(char* password)\n{\n\tuint64_t hash = 5381;\n\tchar c;\n\n\twhile((c = *password++))\n\t{\n\t\thash = ((hash << 5) + hash) + c; // hash * 33 + password[i]\n\t}\n\n\treturn hash;\n}\n\n\n/*\n\t-void getSeed(char* password)\n\tpassword: the string corresponding to the password given by the user\n\n\tthis function is here to populate the seed for the PRNG, \n\tit hashes the password first then get two 64 bit number from it thanks to splitmix64\n\tand put the first two outputs into seed[0] and seed[1]\n*/\nvoid getSeed(char* password){\n\tuint64_t hash = getHash(password);\n\n\tseed[0] = splitmix64(&hash);\n\tseed[1] = splitmix64(&hash);\n}\n\n/*\n\t-void scramble(FILE* keyFile)\n\tkeyFile : can be null, if present it passes through all the keyfile to scramble the ascii table\n\n\tscramble the ascii table assuring that there is no duplicate\n\tinspired by the Enigma machine; switching letters but without its weekness,\n\there a letter can be switched by itself and it is not possible to know how many letters\n\thave been switched\n */\nvoid scramble(FILE* keyFile){\n\tprintf(\"scrambling substitution's tables...\\n\");\n\tfor (int j = 0; j < 16; ++j)\n\t{\n\t\tchar temp = 0;\n\n\t\tfor (int i = 0; i < 256; ++i)\n\t\t{\n\t\t\tscrambleAsciiTables[j][i] = i;\n\t\t}\n\n\t\tif (usingKeyFile){\n\t\t\tint size;\n\t\t\tchar extractedString[BUFFER_SIZE] = \"\";\n\t\t\tunsigned char random256;\n\t\t\twhile((size = fread(extractedString, 1, BUFFER_SIZE, keyFile)) > 0){\n\t\t\t\tfor (int i = 0; i < size; ++i)\n\t\t\t\t{\n\t\t\t\t\trandom256 = generateNumber() ^ extractedString[i];\n\t\t\t\t\ttemp = scrambleAsciiTables[j][i%256];\n\t\t\t\t\tscrambleAsciiTables[j][i%256] = scrambleAsciiTables[j][random256];\n\t\t\t\t\tscrambleAsciiTables[j][random256] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t\trewind(keyFile);\n\t\t} else {\n\t\t\tunsigned char random256;\n\t\t\tfor (int i = 0; i < 10 * 256; ++i)\n\t\t\t{\n\t\t\t\trandom256 = generateNumber() ^ passPhrase[passIndex];\n\t\t\t\tpassIndex++;\n\t\t\t\tpassIndex %= 16384;\n\t\t\t\ttemp = scrambleAsciiTables[j][i%256];\n\t\t\t\tscrambleAsciiTables[j][i%256] = scrambleAsciiTables[j][random256];\n\t\t\t\tscrambleAsciiTables[j][random256] = temp;\n\t\t\t}\n\t\t}\n\t}\n\tif(usingKeyFile){\n\t\tint j = 0;\n\t\tchar temp[BUFFER_SIZE];\n\t\twhile(j < BUFFER_SIZE){\n\t\t\tint charactersRead = fread(temp, 1, BUFFER_SIZE, keyFile);\n\t\t\tif(charactersRead == 0){\n\t\t\t\trewind(keyFile);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (int i = 0; i < charactersRead; ++i)\n\t\t\t{\n\t\t\t\tscramblingTablesOrder[j] = temp[i] & (1+2+4+8);\n\t\t\t\tj++;\n\t\t\t\tif(j == BUFFER_SIZE){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/*\n\t-void unscramble(void)\n\n\tthis function is here only for optimization\n\tit inverses the key/value in the scramble ascii table making the backward process instantaneous\n */\nvoid unscramble(){\n\tfor (int j = 0; j < 16; ++j)\n\t{\n\t\tfor (int i = 0; i < 256; ++i)\n\t\t{\n\t\t\tunsigned char c = scrambleAsciiTables[j][i];\n\t\t\tunscrambleAsciiTables[j][c] = i;\n\t\t}\n\t}\n}\n\n\n/*\n\t-void codingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\tThe scramble table is chosed thanks to the key: We apply a mask to the unique key to catch the last 4 bytes. \n\tit gives a number from 0 to 15 that is used to chose the scrambled table. \n\tIt prevents a frequence analysis of the scrambled file in the event where the unique key has been found. \n\tThus even if you find the seed and by extension, the unique key, you can't apply headers and try to match \n\tthem to the scrambled file in order to deduce the scramble table. You absolutely need the password.\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal:a -> scramble:x -> xored:?\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n */\nvoid codingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\tchar* tablenumber;\n\n\tif(usingKeyFile){\n\t\ttablenumber = scramblingTablesOrder;\n\t}else{\n\t\ttablenumber = keyString;\n\t}\n\n\tif(isCodingInverted){\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = scrambleAsciiTables[tablenumber[i] & (1+2+4+8)][(unsigned char)(extractedString[i] ^ keyString[i])];\n\t\t}\n\t}else{\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = scrambleAsciiTables[tablenumber[i] & (1+2+4+8)][(unsigned char)extractedString[i]] ^ keyString[i];\n\t\t}\n\t}\n}\n\n\n/*\n\t-void decodingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tHere only for optimization purpose to limit the amount of conditions\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal(a) -> scramble(x) -> xored(?)\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n */\nvoid decodingXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\tchar* tablenumber;\n\n\tif(usingKeyFile){\n\t\ttablenumber = scramblingTablesOrder;\n\t}else{\n\t\ttablenumber = keyString;\n\t}\n\n\tif(isCodingInverted){\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = unscrambleAsciiTables[tablenumber[i] & (1+2+4+8)][(unsigned char)extractedString[i]] ^ keyString[i];\n\t\t}\n\t}else{\n\t\tfor (i = 0; i < bufferLength; ++i)\n\t\t{\n\t\t\txoredString[i] = unscrambleAsciiTables[tablenumber[i] & (1+2+4+8)][(unsigned char)(extractedString[i] ^ keyString[i])];\n\t\t}\n\t}\n}\n\n\n/*\n\t-void standardXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n\textractedString : data taken from the source file in a string format\n\tkeyString : a part of the unique key generated by the PRNG in a string format\n\txoredString : the result of the xor operation between extractedString and keyString\n\tbufferLength : the length of the data on which this function is working on\n\n\tHere only for optimization purpose so that there is the small amount\n\tof condition possible when encrypt or decrypt\n\tApply the mathematical xor function to extractedString and keyString\n\tif we are coding (isCrypting == 1) then we switche the character from the source file then xor it\n\tif we are decoding (isCrypting == 0) then we xor the character from the source file then unscramble it\n\twe can schemate all the coding/decoding xoring process like this :\n\tcoding : \toriginal(a) -> scramble(x) -> xored(?)\n\tdecoding : \txored(?) -> unxored(x) -> unscrambled(a)\n\tbut here we don't scramble so it is:\n\tcoding : original(a) -> xored(?)\n\tdecoding: xored(?) -> unxored(a)\n */\nvoid standardXOR(char* extractedString, char* keyString, char* xoredString, int bufferLength)\n{\n\tint i;\n\tfor (i = 0; i < bufferLength; ++i)\n\t{\n\t\txoredString[i] = extractedString[i] ^ keyString[i];\n\t}\n}\n\n\n/*\n\t-int fillbuffer(FILE* mainFile, char* extractedString, char* keyString)\n\tmainFile : pointer to the file given by the user\n\textractedString : will contains the data extracted from the source file in a string format\n\tkeyString : will contains a part of the unique key in a string format\n\treturned value : the size of the data read\n\n\tread a packet of data from the source file\n\treturn the length of the packet which is the buffer size (BUFFER_SIZE)\n\tit can be less at the final packet (if the file isn't a multiple of the buffer size)\n\n\tthe keyString is get by generating a random number with the seed and then xoring it \n\twith the password itself allowing the key to be really unique and not only one of the \n\t2^64 possibilities offered by the seed (uint64_t)\n\tthe password is xoring this way : generateNumber1 ^ passPhrase[0]\n\t\t\t\t\t\t\t\t\t  generateNumber2 ^ passPhrase[1]\n\t\t\t\t\t\t\t\t\t  ...\n\t\t\t\t\t\t\t\t\t  then the index overflows and it returns to 0 again\n\t\t\t\t\t\t\t\t\t  generataNumberX ^ passPhrase[0]\n\t\t\t\t\t\t\t\t\t  ...\n\n\tformer version (multiply execution time by 5) :\n\tint fillBuffer(FILE* mainFile, char* extractedString, char* keyString)\n\t{\n\t\tint i = 0;\n\n\t\twhile(!feof(mainFile) && i < BUFFER_SIZE)\n\t\t{\n\t\t\tchar charBuffer = fgetc(mainFile);\n\t\t\tif (feof(mainFile)) break; //special debug for the last character in text files\n\t\t\textractedString[i] = charBuffer;\n\t\t\ti++;\n\t\t}\n\n\t\treturn i;\n\t}\n */\nint fillBuffer(FILE* mainFile, char* extractedString, char* keyString)\n{\n\tint charactersRead = fread(extractedString, 1, BUFFER_SIZE, mainFile);\n\n\tfor (int i = 0; i < charactersRead; ++i)\n\t{\n\t\tkeyString[i] = (char)generateNumber() ^ passPhrase[passIndex];\n\t\tpassIndex++;\n\t\tpassIndex %= 16384;\n\t}\n\n\treturn charactersRead;\n}\n\n\n/*\n\t-static inline void loadBar(int x, int n, int r, int w)\n\tcurrentIteration : the current iteration of the thing that is proccessed\n\tmaximalIteration : the number which represents 100% of the process\n\tnumberOfSteps : number defining how many times the bar updates\n\tnumberOfSegments : diplayed on w segment\n\n\tdisplay a loading bar with current percentage, graphic representation, and time remaining\n\twhich update on every new percent by deleting itself to display the updating bar on top\n\tinspired by Ross Hemsley's code : https://www.ross.click/2011/02/creating-a-progress-bar-in-c-or-any-other-console-app/\n\n */\nstatic inline void loadBar(int currentIteration, int maximalIteration, int numberOfSteps, int numberOfSegments)\n{\n\tstatic char firstCall = 1;\n\tstatic double elapsedTime;\n\tdouble timeTillEnd;\n\tstatic time_t startingTime;\n\ttime_t currentTime;\n\n\tif(firstCall){\n\t\tstartingTime = time(NULL);\n\t\tfirstCall = 0;\n\t}\n\n    // numberOfSteps defines the number of times the bar updates.\n    if ( currentIteration % (maximalIteration/numberOfSteps + 1) != 0 ) return;\n\n    // Calculate the ratio of complete-to-incomplete.\n    float ratio = (float) currentIteration / (float) maximalIteration;\n    int loadBarCursorPosition = ratio * numberOfSegments;\n\n    // get the clock now\n\tcurrentTime = time(NULL);\n\t// calculate the remaining time\n\telapsedTime = difftime(currentTime, startingTime);\n\ttimeTillEnd = elapsedTime * (1.0/ratio - 1.0);\n\n    // Show the percentage.\n    printf(\" %3d%% [\", (int)(ratio*100));\n\n    // Show the loading bar.\n    for (int i = 0; i < loadBarCursorPosition; i++)\n       printf(\"=\");\n\n    for (int i = loadBarCursorPosition; i < numberOfSegments; i++)\n       printf(\" \");\n\n    // go back to the beginning of the line.\n    // other way (with ANSI CODE) go to previous line then erase it : printf(\"] %.0f\\n\\033[F\\033[J\", timeTillEnd);\n    printf(\"] %.0f        \\r\", timeTillEnd);\n    fflush(stdout);\n}\n\n\n/*\n\t-void code(FILE* mainFile)\n\tmainFile : pointer to the file given by the user\n\n\tController for coding the source file\n */\nvoid code (FILE* mainFile)\n{\n\tint mainFileSize = strlen(fileName);\n\tchar codedFileName[mainFileSize+1];\n\tchar extractedString[BUFFER_SIZE] = \"\";\n\tchar keyString[BUFFER_SIZE] = \"\";\n\tchar xoredString[BUFFER_SIZE] = \"\";\n\tFILE* codedFile;\n\n\tsprintf(codedFileName, \"%sx%s\", pathToMainFile, fileName);\n\t// opening the output file\n\tif ((codedFile = fopen(codedFileName, \"w+\")) == NULL) {\n\t\tperror(codedFileName);\n\t\tprintf(\"exiting\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t// starting encryption\n\tlong bufferCount = 0; //keep trace of the task's completion\n\tprintf(\"starting encryption...\\n\");\n\tif (scrambling){\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tcodingXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, codedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t} else {\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tstandardXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, codedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t}\n\t// closing the output file\n\tfclose(codedFile);\n\t//if the first file was a directory then delete the archive made before crypting\n\tif (_isADirectory)\n\t{\n\t\tchar* tarFile = (char*) calloc (1, sizeof(char) * (strlen(pathToMainFile) + strlen(fileName) + 1));\n\t\tstrcpy(tarFile, pathToMainFile);\n\t\tstrcat(tarFile, fileName);\n\t\tremove(tarFile);\n\t\tfree(tarFile);\n\t}\n}\n\n\n/*\n\t-void decode(FILE* mainFile)\n\tmainFile : pointer to the file given by the user\n\n\tcontroller for decoding the source file\n */\nvoid decode(FILE* mainFile)\n{\n\tint mainFileSize = strlen(fileName);\n\tchar decodedFileName[mainFileSize+1];\n\tchar extractedString[BUFFER_SIZE] = \"\";\n\tchar keyString[BUFFER_SIZE] = \"\";\n\tchar xoredString[BUFFER_SIZE] = \"\";\n\tFILE* decodedFile;\n\n\t// Return the file to a unscramble ascii table\n\tunscramble();\n\n\t// naming the file which will be decrypted\n\tsprintf(decodedFileName, \"x%s\", fileName);\n\n\n\t// opening the output file\n\tstrcat(pathToMainFile, decodedFileName);\n\tif ((decodedFile = fopen(pathToMainFile, \"w+\")) == NULL) {\n\t\tperror(decodedFileName);\n\t\tprintf(\"exiting\\n\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\t// starting decryption\n\tlong bufferCount = 0; //keep trace of the task's completion\n\tprintf(\"starting decryption...\\n\");\n\tif(scrambling){\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tdecodingXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, decodedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t} else {\n\t\twhile(!feof(mainFile))\n\t\t{\n\t\t\tint bufferLength = fillBuffer(mainFile, extractedString, keyString);\n\t\t\tstandardXOR(extractedString, keyString, xoredString, bufferLength);\n\t\t\tfwrite(xoredString, sizeof(char), bufferLength, decodedFile);\n\t\t\tloadBar(++bufferCount, numberOfBuffer, 100, 50);\n\t\t}\n\t}\n\t// closing the output file\n\tfclose(decodedFile);\n}\n\n\n\n/*\n\t-int isADirectory(char* path)\n\tpath : string indicated the path of the file/directory\n\treturned value : 0 or 1\n\n\tindicates if the object with this path is a directory or not\n\n*/\nint isADirectory(char* path){\n\tstruct stat statStruct;\n    int statStatus = stat(path, &statStruct);\n    if(-1 == statStatus) {\n        if(ENOENT == errno) {\n            printf(\"error: file's path is not correct, one or several directories and or file are missing\\n\");\n        } else {\n            perror(\"stat\");\n            printf(\"exiting\\n\");\n            exit(1);\n        }\n    } else {\n        if(S_ISDIR(statStruct.st_mode)) {\n        \t_isADirectory = 1;\n            return 1; //it's a directory\n        } else {\n        \t_isADirectory = 0;\n            return 0; //it's not a directory\n        }\n    }\n    printf(\"exiting\\n\");\n    exit(1);\n}\n\n\n\n/*\n\t-int main(int argc, char const* argv[])\n\targc : number of arguments passed in the terminal\n\targv : pointer to the arguments passed in the terminal\n\treturned value : 0\n\n */\nint main(int argc, char const *argv[])\n{\n\tFILE* mainFile;\n\tFILE* keyFile = NULL;\n\n\tif ((progName = strrchr(argv[0], '/')) != NULL) {\n\t\t++progName;\n\t} else {\n\t\tprogName = argv[0];\n\t}\n\tif (argc < 2) {\n\t\tusage(1);\n\t} else if(argc >= 5 ) { \n\t\tprintf(\"Error: Too many arguments\\n\");\n\t\tusage(1);\n\t} else if (strcmp(argv[1], \"-h\") == 0 || strcmp(argv[1], \"--help\") == 0) {\n\t\tusage(0);\n\t}\n\n\tif (argc >= 3)\n\t{\n\t\t//test if the option -s is present\n\t\tif (strcmp(argv[2], \"-s\") == 0 || strcmp(argv[2], \"--standard\") == 0){\n\t\t\tscrambling = 0;\n\t\t\t//if there is a keyfile, warns that it will not be used \n\t\t\tif(argc >= 4){\n\t\t\t\tif((keyFile = fopen(argv[3], \"r\")) == NULL){\n\t\t\t\t\tperror(argv[3]);\n\t\t\t\t\tusage(1);\n\t\t\t\t}\n\t\t\t\tprintf(\"Warning: with the -s|--standard option, the keyfile will not bu used\\n\");\n\t\t\t\tkeyFile = NULL;\n\t\t\t}\n\t\t//else the option -i\n\t\t} else if (strcmp(argv[2], \"-i\") == 0 || strcmp(argv[2], \"--inverted\") == 0){\n\t\t\tisCodingInverted = 1;\n\t\t\t//if i is present, checks if there is a keyfile in the third argument\n\t\t\tif(argc >= 4){\n\t\t\t\tif((keyFile = fopen(argv[3], \"r\")) == NULL){\n\t\t\t\t\tperror(argv[3]);\n\t\t\t\t\tusage(1);\n\t\t\t\t}\n\t\t\t}\n\t\t//if no option is present test if the second argument is a keyfile\n\t\t} else if ((keyFile = fopen(argv[2], \"r\")) == NULL) {\n\t\t\tperror(argv[2]);\n\t\t\tusage(1);\n\t\t} else if(keyFile != NULL && argc >= 4){\n\t\t\tprintf(\"Error: Too many arguments\\n\");\n\t\t\tusage(1);\n\t\t}\n\n\t\tif(keyFile != NULL){\n\t\t\tusingKeyFile = 1;\n\t\t}\n\t\t\n\t}\n\n\tif (argv[1][strlen(argv[1])-1] == '/' && argv[1][strlen(argv[1])-2] == '/')\n\t{\n\t\tprintf(\"error: several trailing '/' in the path of your file\\n\");\n\t\tprintf(\"exiting\\n\");\n\t\texit(1);\n\t}\n\n\t//outside their scope because we need to free them at the end\n\tchar* tarName = NULL;\n\tchar* dirName = NULL;\n\tchar *copyOfArgv1 = (char*) calloc(1, sizeof(char) * strlen(argv[1]));\n\tstrcpy(copyOfArgv1, argv[1]);\n\tif (isADirectory(copyOfArgv1)){\n\t\tchar command[1008] = {'\\0'};\n\t\t//we don't need that anymore\n\t\tprintf(\"regrouping the folder in one file using tar, may be long...\");\n\t\tfflush(stdout);\n\t\t// get the name of the folder in a string and get the path\n\t\tif ((fileName = strrchr(argv[1], '/')) != NULL) {\n\t\t\t//if the '/' is the last character in the string, delete it and get the fileName again\n\t\t\tif (strlen(fileName) == 1){\n\t\t\t\tdirName = (char*) calloc(1, sizeof(char) * (strlen(argv[1]) + 5));\n\t\t\t\tstrcpy(dirName, argv[1]);\n\t\t\t\t*(dirName+(fileName-argv[1])) = '\\0';\n\t\t\t\tif ((fileName = strrchr(dirName, '/')) != NULL){\n\t\t\t\t\t++fileName;\n\t\t\t\t\tstrncpy(pathToMainFile, dirName, fileName - dirName);\n\t\t\t\t\tpathToMainFile[fileName - dirName] = '\\0';\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfileName = dirName;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t++fileName;\n\t\t\t\tstrncpy(pathToMainFile, argv[1], fileName - argv[1]);\n\t\t\t\tpathToMainFile[fileName - argv[1]] = '\\0';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfileName = argv[1];\n\t\t}\n\t\t// get the full path of the tarFile in a dynamic variable tarName\n\t\ttarName = (char*) calloc(1, sizeof(char) * (strlen(fileName) + 5));\n\t\tsprintf (tarName, \"%s.tar\", fileName);\n\n\t\t//all of the following is to make a clean string for the tar commands (taking care of spaces)\n\t\tchar* cleanFileName       = processTarString((char*)fileName);\n\t\tchar* cleanPathToMainFile = processTarString(pathToMainFile);\n\t\tchar* cleanTarName        = processTarString(tarName);\n\t\t\n\t\t// use of cd to prevent tar to archive all the path architecture \n\t\t// (ex: /usr/myname/my/path/theFolderWeWant/)\n\t\tsprintf (command, \"cd %s && tar -cf %s %s &>/dev/null\", cleanPathToMainFile, cleanTarName, cleanFileName); //&>/dev/null\n\n\t\t//free the temporary strings\n\t\tfree(cleanPathToMainFile);\n\t\tfree(cleanTarName);\n\t\tfree(cleanFileName);\n\n\t\t// make the archive of the folder with tar\n\t\tint status;\n\t\tif((status = system(command)) != 0){ //if problems when taring\n\t\t\tprintf(\"\\nerror: unable to tar your file\\n\");\n\t\t\tprintf(\"exiting\\n\");\n\t\t\texit(1);\n\t\t}else{\n\t\t\tprintf(\"\\rregrouping the folder in one file using tar... Done          \\n\");\t\t\t\n\t\t}\n\n\t\tfileName = tarName;\n\n\t\t// trying to open the new archive\n\t\tchar pathPlusName[strlen(pathToMainFile)+strlen(fileName)];\n\t\tsprintf(pathPlusName, \"%s%s\", pathToMainFile, fileName);\n\t\tif ((mainFile = fopen(pathPlusName, \"r\")) == NULL) {\n\t\t\tperror(pathPlusName);\n\t\t\tprintf(\"exiting\\n\");\n\t\t\treturn EXIT_FAILURE;\n\t\t}\n\t}\n\telse{\n\t\tif ((fileName = strrchr(argv[1], '/')) != NULL) {\n\t\t\t++fileName;\n\t\t\tstrncpy(pathToMainFile, argv[1], fileName - argv[1]);\t\t\n\t\t} else {\n\t\t\tfileName = argv[1];\n\t\t}\n\t\tif ((mainFile = fopen(argv[1], \"r\")) == NULL) {\n\t\t\tperror(argv[1]);\n\t\t\tprintf(\"exiting\\n\");\n\t\t\treturn EXIT_FAILURE;\n\t\t}\n\t}\n\tfree(copyOfArgv1);\n\n\tfseek(mainFile, 0, SEEK_END);\n\tlong mainFileSize = ftell(mainFile);\n\trewind(mainFile);\n\tnumberOfBuffer = ceilRound((float)mainFileSize / (float)(BUFFER_SIZE));\n\tif (numberOfBuffer < 1)\n\t{\n\t\tnumberOfBuffer = 1;\n\t}\n\n\tchar procedureResponse[2]; \n\tisCrypting = -1;\n\tdo{\n\t\tprintf(\"Crypt(C) or Decrypt(d):\");\n\t\treadString(procedureResponse, 2);\n\t\tprintf(\"\\033[F\\033[J\");\n\t\tif (procedureResponse[0] == 'C' || procedureResponse[0] == 'c') {\n\t\t\tisCrypting = 1;\n\t\t}\n\t\telse if(procedureResponse[0] == 'D' || procedureResponse[0] == 'd'){\n\t\t\tisCrypting = 0;\n\t\t}\n\t}while(isCrypting == -1);\n\t\n\tprintf(\"Password:\");\n\treadString(passPhrase, 16383);\n\tprintf(\"\\033[F\\033[J\");\n\tgetSeed(passPhrase);\n\tscramble(keyFile);\n\n\tif (isCrypting){\n\t\tcode(mainFile);\n\t}\n\telse{\n\t\tdecode(mainFile);\n\t}\n\tprintf(\"Done                                                                  \\n\");\n\tfclose(mainFile);\n\n\t//we can free (last use in code/decode)\n\tif(tarName != NULL){\n\t\tfree(tarName);\n\t}\n\tif(dirName != NULL){\n\t\tfree(dirName);\n\t}\n\n\treturn 0;\n}\n", "\t.section\t__TEXT,__text,regular,pure_instructions\n\t.macosx_version_min 10, 12\n\t.globl\t_ceilRound\n\t.align\t4, 0x90\n_ceilRound:                             ## @ceilRound\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp0:\n\t.cfi_def_cfa_offset 16\nLtmp1:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp2:\n\t.cfi_def_cfa_register %rbp\n\tcvttss2si\t%xmm0, %rcx\n\tcvtsi2ssq\t%rcx, %xmm1\n\tsubss\t%xmm1, %xmm0\n\txorps\t%xmm1, %xmm1\n\tucomiss\t%xmm1, %xmm0\n\tseta\t%al\n\tmovzbl\t%al, %eax\n\taddq\t%rcx, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_clearBuffer\n\t.align\t4, 0x90\n_clearBuffer:                           ## @clearBuffer\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp3:\n\t.cfi_def_cfa_offset 16\nLtmp4:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp5:\n\t.cfi_def_cfa_register %rbp\n\txorl\t%eax, %eax\n\tjmp\tLBB1_1\n\t.align\t4, 0x90\nLBB1_3:                                 ##   in Loop: Header=BB1_1 Depth=1\n\tcallq\t_getchar\nLBB1_1:                                 ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %eax\n\tje\tLBB1_4\n## BB#2:                                ##   in Loop: Header=BB1_1 Depth=1\n\tcmpl\t$10, %eax\n\tjne\tLBB1_3\nLBB1_4:\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_readString\n\t.align\t4, 0x90\n_readString:                            ## @readString\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp6:\n\t.cfi_def_cfa_offset 16\nLtmp7:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp8:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%rbx\n\tpushq\t%rax\nLtmp9:\n\t.cfi_offset %rbx, -24\n\tmovq\t%rdi, %rbx\n\tmovq\t___stdinp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdx\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tje\tLBB2_1\n## BB#5:\n\tmovl\t$10, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strchr\n\ttestq\t%rax, %rax\n\tje\tLBB2_6\n## BB#10:\n\tmovb\t$0, (%rax)\n\tmovl\t$1, %eax\n\tjmp\tLBB2_11\nLBB2_1:\n\txorl\t%ecx, %ecx\n\tjmp\tLBB2_2\n\t.align\t4, 0x90\nLBB2_4:                                 ##   in Loop: Header=BB2_2 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ecx\nLBB2_2:                                 ## %.preheader\n                                        ## =>This Inner Loop Header: Depth=1\n\txorl\t%eax, %eax\n\tcmpl\t$-1, %ecx\n\tje\tLBB2_11\n## BB#3:                                ## %.preheader\n                                        ##   in Loop: Header=BB2_2 Depth=1\n\tcmpl\t$10, %ecx\n\tjne\tLBB2_4\n\tjmp\tLBB2_11\nLBB2_6:\n\txorl\t%ecx, %ecx\n\tjmp\tLBB2_7\n\t.align\t4, 0x90\nLBB2_9:                                 ##   in Loop: Header=BB2_7 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ecx\nLBB2_7:                                 ## %.preheader3\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovl\t$1, %eax\n\tcmpl\t$-1, %ecx\n\tje\tLBB2_11\n## BB#8:                                ## %.preheader3\n                                        ##   in Loop: Header=BB2_7 Depth=1\n\tcmpl\t$10, %ecx\n\tjne\tLBB2_9\nLBB2_11:                                ## %clearBuffer.exit\n\taddq\t$8, %rsp\n\tpopq\t%rbx\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal16,16byte_literals\n\t.align\t4\nLCPI3_0:\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\n\t.long\t32                      ## 0x20\nLCPI3_1:\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.long\t1                       ## 0x1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_processTarString\n\t.align\t4, 0x90\n_processTarString:                      ## @processTarString\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp10:\n\t.cfi_def_cfa_offset 16\nLtmp11:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp12:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r12\n\tpushq\t%rbx\nLtmp13:\n\t.cfi_offset %rbx, -48\nLtmp14:\n\t.cfi_offset %r12, -40\nLtmp15:\n\t.cfi_offset %r14, -32\nLtmp16:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r15\n\tcallq\t_strlen\n\txorl\t%edx, %edx\n\ttestq\t%rax, %rax\n\tmovl\t$0, %esi\n\tje\tLBB3_7\n## BB#1:                                ## %.lr.ph6.preheader\n\tcmpq\t$4, %rax\n\tmovl\t$0, %esi\n\tjb\tLBB3_15\n## BB#2:                                ## %min.iters.checked\n\txorl\t%esi, %esi\n\tmovq\t%rax, %rcx\n\tandq\t$-4, %rcx\n\tmovl\t$0, %edx\n\tje\tLBB3_15\n## BB#3:                                ## %vector.body.preheader\n\tmovq\t%rax, %rdx\n\tandq\t$-4, %rdx\n\tpxor\t%xmm0, %xmm0\n\tmovdqa\tLCPI3_0(%rip), %xmm1    ## xmm1 = [32,32,32,32]\n\tmovdqa\tLCPI3_1(%rip), %xmm3    ## xmm3 = [1,1,1,1]\n\tmovq\t%r15, %rsi\n\tpxor\t%xmm2, %xmm2\n\t.align\t4, 0x90\nLBB3_4:                                 ## %vector.body\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovd\t(%rsi), %xmm4           ## xmm4 = mem[0],zero,zero,zero\n\tpunpcklbw\t%xmm0, %xmm4    ## xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3],xmm4[4],xmm0[4],xmm4[5],xmm0[5],xmm4[6],xmm0[6],xmm4[7],xmm0[7]\n\tpunpcklwd\t%xmm0, %xmm4    ## xmm4 = xmm4[0],xmm0[0],xmm4[1],xmm0[1],xmm4[2],xmm0[2],xmm4[3],xmm0[3]\n\tpcmpeqd\t%xmm1, %xmm4\n\tpand\t%xmm3, %xmm4\n\tpaddd\t%xmm4, %xmm2\n\taddq\t$4, %rsi\n\taddq\t$-4, %rdx\n\tjne\tLBB3_4\n## BB#5:                                ## %middle.block\n\tpshufd\t$78, %xmm2, %xmm0       ## xmm0 = xmm2[2,3,0,1]\n\tpaddd\t%xmm2, %xmm0\n\tphaddd\t%xmm0, %xmm0\n\tmovd\t%xmm0, %edx\n\tcmpq\t%rcx, %rax\n\tmovq\t%rcx, %rsi\n\tje\tLBB3_6\n\t.align\t4, 0x90\nLBB3_15:                                ## %.lr.ph6\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%r15,%rsi), %ecx\n\tcmpl\t$32, %ecx\n\tsete\t%cl\n\tmovzbl\t%cl, %ecx\n\taddl\t%ecx, %edx\n\tincq\t%rsi\n\tcmpq\t%rax, %rsi\n\tjb\tLBB3_15\nLBB3_6:                                 ## %._crit_edge\n\ttestl\t%edx, %edx\n\tmovq\t%rax, %rsi\n\tje\tLBB3_7\n## BB#9:\n\tmovslq\t%edx, %rcx\n\tleaq\t1(%rcx,%rax), %rsi\n\tmovl\t$1, %r12d\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r14\n\tmovb\t(%r15), %al\n\ttestb\t%al, %al\n\tje\tLBB3_8\n## BB#10:\n\txorl\t%ebx, %ebx\n\tjmp\tLBB3_11\n\t.align\t4, 0x90\nLBB3_14:                                ## %..lr.ph_crit_edge\n                                        ##   in Loop: Header=BB3_11 Depth=1\n\tincl\t%ebx\n\tmovb\t(%r15,%r12), %al\n\tincq\t%r12\nLBB3_11:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t%al, %ecx\n\tcmpl\t$32, %ecx\n\tjne\tLBB3_13\n## BB#12:                               ##   in Loop: Header=BB3_11 Depth=1\n\tmovslq\t%ebx, %rbx\n\tmovb\t$92, (%r14,%rbx)\n\tincl\t%ebx\nLBB3_13:                                ##   in Loop: Header=BB3_11 Depth=1\n\tmovslq\t%ebx, %rcx\n\tmovb\t%al, (%r14,%rcx)\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tcmpq\t%rax, %r12\n\tjb\tLBB3_14\n\tjmp\tLBB3_8\nLBB3_7:                                 ## %._crit_edge.thread\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r14\n\tmovq\t$-1, %rdx\n\tmovq\t%r14, %rdi\n\tmovq\t%r15, %rsi\n\tcallq\t___strcat_chk\nLBB3_8:                                 ## %.loopexit\n\tmovq\t%r14, %rax\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_generateNumber\n\t.align\t4, 0x90\n_generateNumber:                        ## @generateNumber\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp17:\n\t.cfi_def_cfa_offset 16\nLtmp18:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp19:\n\t.cfi_def_cfa_register %rbp\n\tmovq\t_seed.0(%rip), %rcx\n\tmovq\t_seed.1(%rip), %rdx\n\tleaq\t(%rdx,%rcx), %rax\n\txorq\t%rcx, %rdx\n\trolq\t$55, %rcx\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rsi\n\tshlq\t$14, %rsi\n\txorq\t%rcx, %rsi\n\tmovq\t%rsi, _seed.0(%rip)\n\trolq\t$36, %rdx\n\tmovq\t%rdx, _seed.1(%rip)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_splitmix64\n\t.align\t4, 0x90\n_splitmix64:                            ## @splitmix64\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp20:\n\t.cfi_def_cfa_offset 16\nLtmp21:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp22:\n\t.cfi_def_cfa_register %rbp\n\tmovabsq\t$-7046029254386353131, %rax ## imm = 0x9E3779B97F4A7C15\n\taddq\t(%rdi), %rax\n\tmovq\t%rax, (%rdi)\n\tmovq\t%rax, %rcx\n\tshrq\t$30, %rcx\n\txorq\t%rax, %rcx\n\tmovabsq\t$-4658895280553007687, %rax ## imm = 0xBF58476D1CE4E5B9\n\timulq\t%rcx, %rax\n\tmovq\t%rax, %rcx\n\tshrq\t$27, %rcx\n\txorq\t%rax, %rcx\n\tmovabsq\t$-7723592293110705685, %rdx ## imm = 0x94D049BB133111EB\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rax\n\tshrq\t$31, %rax\n\txorq\t%rdx, %rax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_getHash\n\t.align\t4, 0x90\n_getHash:                               ## @getHash\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp23:\n\t.cfi_def_cfa_offset 16\nLtmp24:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp25:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t(%rdi), %cl\n\tmovl\t$5381, %eax             ## imm = 0x1505\n\ttestb\t%cl, %cl\n\tje\tLBB6_3\n## BB#1:                                ## %.lr.ph.preheader\n\tincq\t%rdi\n\tmovl\t$5381, %eax             ## imm = 0x1505\n\t.align\t4, 0x90\nLBB6_2:                                 ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rax, %rdx\n\tmovsbq\t%cl, %rax\n\taddq\t%rdx, %rax\n\tmovb\t(%rdi), %cl\n\tincq\t%rdi\n\ttestb\t%cl, %cl\n\tjne\tLBB6_2\nLBB6_3:                                 ## %._crit_edge\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_getSeed\n\t.align\t4, 0x90\n_getSeed:                               ## @getSeed\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp26:\n\t.cfi_def_cfa_offset 16\nLtmp27:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp28:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t(%rdi), %al\n\ttestb\t%al, %al\n\tmovabsq\t$-7723592293110705685, %r8 ## imm = 0x94D049BB133111EB\n\tmovabsq\t$-4658895280553007687, %rcx ## imm = 0xBF58476D1CE4E5B9\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\tje\tLBB7_3\n## BB#1:                                ## %.lr.ph.i.preheader\n\tincq\t%rdi\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\t.align\t4, 0x90\nLBB7_2:                                 ## %.lr.ph.i\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rdx, %rsi\n\tmovsbq\t%al, %rdx\n\taddq\t%rsi, %rdx\n\tmovb\t(%rdi), %al\n\tincq\t%rdi\n\ttestb\t%al, %al\n\tjne\tLBB7_2\nLBB7_3:                                 ## %getHash.exit\n\tmovabsq\t$-7046029254386353131, %rax ## imm = 0x9E3779B97F4A7C15\n\taddq\t%rdx, %rax\n\tmovq\t%rax, %rsi\n\tshrq\t$30, %rsi\n\txorq\t%rax, %rsi\n\timulq\t%rcx, %rsi\n\tmovq\t%rsi, %rax\n\tshrq\t$27, %rax\n\txorq\t%rsi, %rax\n\timulq\t%r8, %rax\n\tmovq\t%rax, %rsi\n\tshrq\t$31, %rsi\n\txorq\t%rax, %rsi\n\tmovq\t%rsi, _seed.0(%rip)\n\tmovabsq\t$4354685564936845354, %rax ## imm = 0x3C6EF372FE94F82A\n\taddq\t%rdx, %rax\n\tmovq\t%rax, %rdx\n\tshrq\t$30, %rdx\n\txorq\t%rax, %rdx\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rax\n\tshrq\t$27, %rax\n\txorq\t%rdx, %rax\n\timulq\t%r8, %rax\n\tmovq\t%rax, %rcx\n\tshrq\t$31, %rcx\n\txorq\t%rax, %rcx\n\tmovq\t%rcx, _seed.1(%rip)\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal16,16byte_literals\n\t.align\t4\nLCPI8_0:\n\t.byte\t0                       ## 0x0\n\t.byte\t1                       ## 0x1\n\t.byte\t2                       ## 0x2\n\t.byte\t3                       ## 0x3\n\t.byte\t4                       ## 0x4\n\t.byte\t5                       ## 0x5\n\t.byte\t6                       ## 0x6\n\t.byte\t7                       ## 0x7\n\t.byte\t8                       ## 0x8\n\t.byte\t9                       ## 0x9\n\t.byte\t10                      ## 0xa\n\t.byte\t11                      ## 0xb\n\t.byte\t12                      ## 0xc\n\t.byte\t13                      ## 0xd\n\t.byte\t14                      ## 0xe\n\t.byte\t15                      ## 0xf\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_scramble\n\t.align\t4, 0x90\n_scramble:                              ## @scramble\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp29:\n\t.cfi_def_cfa_offset 16\nLtmp30:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp31:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$16424, %rsp            ## imm = 0x4028\nLtmp32:\n\t.cfi_offset %rbx, -56\nLtmp33:\n\t.cfi_offset %r12, -48\nLtmp34:\n\t.cfi_offset %r13, -40\nLtmp35:\n\t.cfi_offset %r14, -32\nLtmp36:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, -16440(%rbp)      ## 8-byte Spill\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tleaq\tL_str(%rip), %rdi\n\tcallq\t_puts\n\tleaq\t_scrambleAsciiTables(%rip), %r13\n\txorl\t%r14d, %r14d\n\tpxor\t%xmm1, %xmm1\n\tmovdqa\tLCPI8_0(%rip), %xmm2    ## xmm2 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\tmovq\t_passPhrase@GOTPCREL(%rip), %rsi\n\tmovq\t%r13, %r12\n\t.align\t4, 0x90\nLBB8_1:                                 ## %vector.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB8_2 Depth 2\n                                        ##     Child Loop BB8_5 Depth 2\n                                        ##     Child Loop BB8_9 Depth 2\n                                        ##       Child Loop BB8_11 Depth 3\n\tmovq\t%r12, %rax\n\txorl\t%ecx, %ecx\n\t.align\t4, 0x90\nLBB8_2:                                 ## %vector.body\n                                        ##   Parent Loop BB8_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovd\t%ecx, %xmm0\n\tpshufb\t%xmm1, %xmm0\n\tpaddb\t%xmm2, %xmm0\n\tmovdqa\t%xmm0, (%rax)\n\taddq\t$16, %rcx\n\taddq\t$16, %rax\n\tcmpq\t$256, %rcx              ## imm = 0x100\n\tjne\tLBB8_2\n## BB#3:                                ## %middle.block\n                                        ##   in Loop: Header=BB8_1 Depth=1\n\tmovb\t_usingKeyFile(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB8_4\n## BB#7:                                ##   in Loop: Header=BB8_1 Depth=1\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tleaq\t-16432(%rbp), %rbx\n\tmovq\t%rbx, %rdi\n\tcallq\t___bzero\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%rbx, %rdi\n\tjmp\tLBB8_9\n\t.align\t4, 0x90\nLBB8_8:                                 ## %.loopexit11\n                                        ##   in Loop: Header=BB8_9 Depth=2\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tleaq\t-16432(%rbp), %rdi\nLBB8_9:                                 ## %.loopexit11\n                                        ##   Parent Loop BB8_1 Depth=1\n                                        ## =>  This Loop Header: Depth=2\n                                        ##       Child Loop BB8_11 Depth 3\n\tmovq\t-16440(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB8_12\n## BB#10:                               ## %.lr.ph24\n                                        ##   in Loop: Header=BB8_9 Depth=2\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovl\t%eax, %r8d\n\txorl\t%esi, %esi\n\t.align\t4, 0x90\nLBB8_11:                                ##   Parent Loop BB8_1 Depth=1\n                                        ##     Parent Loop BB8_9 Depth=2\n                                        ## =>    This Inner Loop Header: Depth=3\n\tleal\t(%rcx,%rdx), %r9d\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\tmovzbl\t-16432(%rbp,%rsi), %r10d\n\tmovl\t%esi, %eax\n\tsarl\t$31, %eax\n\tshrl\t$24, %eax\n\taddl\t%esi, %eax\n\tandl\t$-256, %eax\n\tmovl\t%esi, %edi\n\tsubl\t%eax, %edi\n\tmovslq\t%edi, %r15\n\tmovq\t%r14, %rdi\n\tshlq\t$8, %rdi\n\taddq\t%r13, %rdi\n\tmovb\t(%r15,%rdi), %r11b\n\tmovzbl\t%r9b, %ebx\n\txorq\t%r10, %rbx\n\tmovb\t(%rbx,%rdi), %al\n\tmovb\t%al, (%r15,%rdi)\n\tmovb\t%r11b, (%rbx,%rdi)\n\tincq\t%rsi\n\tcmpl\t%esi, %r8d\n\tjne\tLBB8_11\n\tjmp\tLBB8_8\n\t.align\t4, 0x90\nLBB8_4:                                 ## %.preheader12\n                                        ##   in Loop: Header=BB8_1 Depth=1\n\tmovq\t%r12, -16448(%rbp)      ## 8-byte Spill\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rax\n\txorl\t%r9d, %r9d\n\tmovq\t_passIndex(%rip), %r15\n\t.align\t4, 0x90\nLBB8_5:                                 ##   Parent Loop BB8_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rax,%rdx), %r8d\n\txorq\t%rdx, %rax\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rax, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rax, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rax\n\tmovzbl\t(%rsi,%r15), %r10d\n\tincl\t%r15d\n\tandl\t$16383, %r15d           ## imm = 0x3FFF\n\tmovq\t%rsi, %r12\n\tmovl\t%r9d, %esi\n\tsarl\t$31, %esi\n\tshrl\t$24, %esi\n\taddl\t%r9d, %esi\n\tandl\t$-256, %esi\n\tmovl\t%r9d, %edi\n\tsubl\t%esi, %edi\n\tmovslq\t%edi, %rsi\n\tmovq\t%r14, %rdi\n\tshlq\t$8, %rdi\n\taddq\t%r13, %rdi\n\tmovb\t(%rsi,%rdi), %r11b\n\tmovzbl\t%r8b, %ebx\n\txorq\t%r10, %rbx\n\tmovb\t(%rbx,%rdi), %cl\n\tmovb\t%cl, (%rsi,%rdi)\n\tmovq\t%r12, %rsi\n\tmovb\t%r11b, (%rbx,%rdi)\n\tincl\t%r9d\n\tcmpl\t$2560, %r9d             ## imm = 0xA00\n\tjne\tLBB8_5\n## BB#6:                                ## %.loopexit13\n                                        ##   in Loop: Header=BB8_1 Depth=1\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rax, _seed.1(%rip)\n\tmovq\t%r15, _passIndex(%rip)\n\tmovq\t-16448(%rbp), %r12      ## 8-byte Reload\n\tjmp\tLBB8_13\n\t.align\t4, 0x90\nLBB8_12:                                ## %._crit_edge.25\n                                        ##   in Loop: Header=BB8_1 Depth=1\n\tmovq\t-16440(%rbp), %rdi      ## 8-byte Reload\n\tcallq\t_rewind\n\tpxor\t%xmm1, %xmm1\n\tmovdqa\tLCPI8_0(%rip), %xmm2    ## xmm2 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\tmovq\t_passPhrase@GOTPCREL(%rip), %rsi\nLBB8_13:                                ##   in Loop: Header=BB8_1 Depth=1\n\tincq\t%r14\n\taddq\t$256, %r12              ## imm = 0x100\n\tcmpq\t$16, %r14\n\tjne\tLBB8_1\n## BB#14:\n\tmovb\t_usingKeyFile(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB8_23\n## BB#15:\n\txorl\t%ebx, %ebx\n\tleaq\t-16432(%rbp), %r14\n\tleaq\t_scramblingTablesOrder(%rip), %r15\n\tmovq\t-16440(%rbp), %r12      ## 8-byte Reload\n\tjmp\tLBB8_18\n\t.align\t4, 0x90\nLBB8_17:                                ## %.lr.ph.split.us\n                                        ##   in Loop: Header=BB8_18 Depth=1\n\tmovq\t%r12, %rdi\n\tcallq\t_rewind\nLBB8_18:                                ## %.lr.ph.split.us\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB8_22 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%r12, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tje\tLBB8_17\n## BB#19:                               ## %.preheader\n                                        ##   in Loop: Header=BB8_18 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB8_16\n## BB#20:                               ## %.lr.ph17.preheader\n                                        ##   in Loop: Header=BB8_18 Depth=1\n\tcltq\n\tmovslq\t%ebx, %rbx\n\txorl\t%ecx, %ecx\n\t.align\t4, 0x90\nLBB8_22:                                ## %.lr.ph17\n                                        ##   Parent Loop BB8_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t-16432(%rbp,%rcx), %dl\n\tandb\t$15, %dl\n\tmovb\t%dl, (%rbx,%r15)\n\tcmpl\t$16383, %ebx            ## imm = 0x3FFF\n\tje\tLBB8_23\n## BB#21:                               ##   in Loop: Header=BB8_22 Depth=2\n\tincq\t%rcx\n\tincq\t%rbx\n\tcmpq\t%rax, %rcx\n\tjl\tLBB8_22\nLBB8_16:                                ## %.loopexit\n                                        ##   in Loop: Header=BB8_18 Depth=1\n\tcmpl\t$16383, %ebx            ## imm = 0x3FFF\n\tjle\tLBB8_18\nLBB8_23:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB8_25\n## BB#24:\n\taddq\t$16424, %rsp            ## imm = 0x4028\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB8_25:\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.globl\t_unscramble\n\t.align\t4, 0x90\n_unscramble:                            ## @unscramble\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp37:\n\t.cfi_def_cfa_offset 16\nLtmp38:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp39:\n\t.cfi_def_cfa_register %rbp\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\txorl\t%edx, %edx\n\tleaq\t_unscrambleAsciiTables(%rip), %r9\n\t.align\t4, 0x90\nLBB9_1:                                 ## %.preheader\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB9_2 Depth 2\n\tmovq\t%r8, %rsi\n\txorl\t%edi, %edi\n\t.align\t4, 0x90\nLBB9_2:                                 ##   Parent Loop BB9_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rsi), %eax\n\tmovq\t%rdx, %rcx\n\tshlq\t$8, %rcx\n\taddq\t%r9, %rcx\n\tmovb\t%dil, (%rax,%rcx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tcmpq\t$256, %rdi              ## imm = 0x100\n\tjne\tLBB9_2\n## BB#3:                                ##   in Loop: Header=BB9_1 Depth=1\n\tincq\t%rdx\n\taddq\t$256, %r8               ## imm = 0x100\n\tcmpq\t$16, %rdx\n\tjne\tLBB9_1\n## BB#4:\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_codingXOR\n\t.align\t4, 0x90\n_codingXOR:                             ## @codingXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp40:\n\t.cfi_def_cfa_offset 16\nLtmp41:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp42:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t_usingKeyFile(%rip), %al\n\tandb\t$1, %al\n\tleaq\t_scramblingTablesOrder(%rip), %r9\n\tcmoveq\t%rsi, %r9\n\tmovb\t_isCodingInverted(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB10_1\n## BB#4:                                ## %.preheader\n\ttestl\t%ecx, %ecx\n\tjle\tLBB10_7\n## BB#5:\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB10_6:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovb\t(%rsi), %al\n\txorb\t(%rdi), %al\n\tmovzbl\t%al, %r10d\n\tmovzbl\t(%r9), %eax\n\tandl\t$15, %eax\n\tshlq\t$8, %rax\n\taddq\t%r8, %rax\n\tmovb\t(%r10,%rax), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%r9\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB10_6\n\tjmp\tLBB10_7\nLBB10_1:                                ## %.preheader2\n\ttestl\t%ecx, %ecx\n\tjle\tLBB10_7\n## BB#2:\n\tleaq\t_scrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB10_3:                                ## %.lr.ph6\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rdi), %r10d\n\tmovzbl\t(%r9), %r11d\n\tandl\t$15, %r11d\n\tshlq\t$8, %r11\n\taddq\t%r8, %r11\n\tmovb\t(%rsi), %al\n\txorb\t(%r10,%r11), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%r9\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB10_3\nLBB10_7:                                ## %.loopexit\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_decodingXOR\n\t.align\t4, 0x90\n_decodingXOR:                           ## @decodingXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp43:\n\t.cfi_def_cfa_offset 16\nLtmp44:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp45:\n\t.cfi_def_cfa_register %rbp\n\tmovb\t_usingKeyFile(%rip), %al\n\tandb\t$1, %al\n\tleaq\t_scramblingTablesOrder(%rip), %r9\n\tcmoveq\t%rsi, %r9\n\tmovb\t_isCodingInverted(%rip), %al\n\tandb\t$1, %al\n\tje\tLBB11_1\n## BB#4:                                ## %.preheader\n\ttestl\t%ecx, %ecx\n\tjle\tLBB11_7\n## BB#5:\n\tleaq\t_unscrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB11_6:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovzbl\t(%rdi), %r10d\n\tmovzbl\t(%r9), %r11d\n\tandl\t$15, %r11d\n\tshlq\t$8, %r11\n\taddq\t%r8, %r11\n\tmovb\t(%rsi), %al\n\txorb\t(%r10,%r11), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%r9\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB11_6\n\tjmp\tLBB11_7\nLBB11_1:                                ## %.preheader2\n\ttestl\t%ecx, %ecx\n\tjle\tLBB11_7\n## BB#2:\n\tleaq\t_unscrambleAsciiTables(%rip), %r8\n\t.align\t4, 0x90\nLBB11_3:                                ## %.lr.ph6\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovb\t(%rsi), %al\n\txorb\t(%rdi), %al\n\tmovzbl\t%al, %r10d\n\tmovzbl\t(%r9), %eax\n\tandl\t$15, %eax\n\tshlq\t$8, %rax\n\taddq\t%r8, %rax\n\tmovb\t(%r10,%rax), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%r9\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB11_3\nLBB11_7:                                ## %.loopexit\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_standardXOR\n\t.align\t4, 0x90\n_standardXOR:                           ## @standardXOR\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp46:\n\t.cfi_def_cfa_offset 16\nLtmp47:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp48:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r12\n\tpushq\t%rbx\nLtmp49:\n\t.cfi_offset %rbx, -48\nLtmp50:\n\t.cfi_offset %r12, -40\nLtmp51:\n\t.cfi_offset %r14, -32\nLtmp52:\n\t.cfi_offset %r15, -24\n\ttestl\t%ecx, %ecx\n\tjle\tLBB12_10\n## BB#1:                                ## %.lr.ph.preheader\n\tleal\t-1(%rcx), %r14d\n\tleaq\t1(%r14), %r8\n\txorl\t%r10d, %r10d\n\tcmpq\t$16, %r8\n\tjb\tLBB12_8\n## BB#2:                                ## %min.iters.checked\n\txorl\t%r10d, %r10d\n\tmovabsq\t$8589934576, %r11       ## imm = 0x1FFFFFFF0\n\tmovq\t%r8, %r9\n\tandq\t%r11, %r9\n\tje\tLBB12_8\n## BB#3:                                ## %vector.memcheck\n\tleaq\t(%rdx,%r14), %rbx\n\tleaq\t(%rdi,%r14), %rax\n\tleaq\t(%rsi,%r14), %r10\n\tcmpq\t%rdx, %rax\n\tsetae\t%r15b\n\tcmpq\t%rdi, %rbx\n\tsetae\t%r12b\n\tcmpq\t%rdx, %r10\n\tsetae\t%al\n\tcmpq\t%rsi, %rbx\n\tsetae\t%bl\n\txorl\t%r10d, %r10d\n\ttestb\t%r12b, %r15b\n\tjne\tLBB12_8\n## BB#4:                                ## %vector.memcheck\n\tandb\t%bl, %al\n\tjne\tLBB12_8\n## BB#5:                                ## %vector.body.preheader\n\tincq\t%r14\n\tandq\t%r11, %r14\n\tmovq\t%rdx, %r10\n\tmovq\t%rsi, %rbx\n\tmovq\t%rdi, %rax\n\t.align\t4, 0x90\nLBB12_6:                                ## %vector.body\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovups\t(%rax), %xmm0\n\tmovups\t(%rbx), %xmm1\n\txorps\t%xmm0, %xmm1\n\tmovups\t%xmm1, (%r10)\n\taddq\t$16, %rax\n\taddq\t$16, %rbx\n\taddq\t$16, %r10\n\taddq\t$-16, %r14\n\tjne\tLBB12_6\n## BB#7:                                ## %middle.block\n\tcmpq\t%r9, %r8\n\tmovq\t%r9, %r10\n\tje\tLBB12_10\nLBB12_8:                                ## %.lr.ph.preheader10\n\taddq\t%r10, %rdi\n\taddq\t%r10, %rsi\n\taddq\t%r10, %rdx\n\tsubl\t%r10d, %ecx\n\t.align\t4, 0x90\nLBB12_9:                                ## %.lr.ph\n                                        ## =>This Inner Loop Header: Depth=1\n\tmovb\t(%rsi), %al\n\txorb\t(%rdi), %al\n\tmovb\t%al, (%rdx)\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rdx\n\tdecl\t%ecx\n\tjne\tLBB12_9\nLBB12_10:                               ## %._crit_edge\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.globl\t_fillBuffer\n\t.align\t4, 0x90\n_fillBuffer:                            ## @fillBuffer\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp53:\n\t.cfi_def_cfa_offset 16\nLtmp54:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp55:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r14\n\tpushq\t%rbx\nLtmp56:\n\t.cfi_offset %rbx, -32\nLtmp57:\n\t.cfi_offset %r14, -24\n\tmovq\t%rdx, %r14\n\tmovq\t%rsi, %rax\n\tmovq\t%rdi, %rcx\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%rax, %rdi\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB13_4\n## BB#1:                                ## %.lr.ph\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rdi\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r8\n\tmovl\t%eax, %r9d\n\t.align\t4, 0x90\nLBB13_2:                                ## =>This Inner Loop Header: Depth=1\n\tleal\t(%rcx,%rdx), %ebx\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rsi\n\trolq\t$55, %rsi\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rsi, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r8,%rdi), %bl\n\tmovb\t%bl, (%r14)\n\tmovl\t_passIndex(%rip), %edi\n\tincl\t%edi\n\tandl\t$16383, %edi            ## imm = 0x3FFF\n\tmovq\t%rdi, _passIndex(%rip)\n\tincq\t%r14\n\tdecl\t%r9d\n\tjne\tLBB13_2\n## BB#3:                                ## %._crit_edge\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB13_4:\n\tpopq\t%rbx\n\tpopq\t%r14\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI14_0:\n\t.long\t1112014848              ## float 50\nLCPI14_3:\n\t.long\t1120403456              ## float 100\n\t.section\t__TEXT,__literal8,8byte_literals\n\t.align\t3\nLCPI14_1:\n\t.quad\t4607182418800017408     ## double 1\nLCPI14_2:\n\t.quad\t-4616189618054758400    ## double -1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_code\n\t.align\t4, 0x90\n_code:                                  ## @code\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp58:\n\t.cfi_def_cfa_offset 16\nLtmp59:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp60:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$49192, %rsp            ## imm = 0xC028\nLtmp61:\n\t.cfi_offset %rbx, -56\nLtmp62:\n\t.cfi_offset %r12, -48\nLtmp63:\n\t.cfi_offset %r13, -40\nLtmp64:\n\t.cfi_offset %r14, -32\nLtmp65:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r15\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t_fileName(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tincl\t%eax\n\taddq\t$15, %rax\n\tmovabsq\t$8589934576, %rcx       ## imm = 0x1FFFFFFF0\n\tandq\t%rax, %rcx\n\tmovq\t%rsp, %rbx\n\tsubq\t%rcx, %rbx\n\tmovq\t%rbx, %rsp\n\tleaq\t-16432(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tmovq\t%rdi, %r13\n\tcallq\t___bzero\n\tleaq\t-32816(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-49200(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\tL_.str.1(%rip), %rcx\n\tleaq\t_pathToMainFile(%rip), %r8\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%rbx, %rdi\n\tmovq\t%r14, %r9\n\tcallq\t___sprintf_chk\n\tleaq\tL_.str.2(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, -49208(%rbp)      ## 8-byte Spill\n\ttestq\t%rax, %rax\n\tje\tLBB14_52\n## BB#1:\n\tleaq\tL_str.35(%rip), %rdi\n\tcallq\t_puts\n\tmovb\t_scrambling(%rip), %bl\n\tandb\t$1, %bl\n\tmovq\t%r15, %rdi\n\tmovq\t%r15, %r12\n\tcallq\t_feof\n\ttestb\t%bl, %bl\n\tje\tLBB14_2\n## BB#12:                               ## %loadBar.exit.preheader\n\txorl\t%r14d, %r14d\n\ttestl\t%eax, %eax\n\tmovq\t%r12, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB14_35\n## BB#13:\n\tleaq\t-16432(%rbp), %r13\n\tleaq\t-32816(%rbp), %r12\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r15\n\t.align\t4, 0x90\nLBB14_14:                               ## %.lr.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB14_16 Depth 2\n                                        ##     Child Loop BB14_20 Depth 2\n                                        ##     Child Loop BB14_23 Depth 2\n                                        ##     Child Loop BB14_50 Depth 2\n                                        ##     Child Loop BB14_47 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r13, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB14_24\n## BB#15:                               ## %.lr.ph.i.29\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r12, %r9\n\t.align\t4, 0x90\nLBB14_16:                               ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r15,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB14_16\n## BB#17:                               ## %.lr.ph.i.40.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\n\tleal\t-1(%rax), %ecx\n\tincq\t%rcx\n\tcmpq\t$16, %rcx\n\tmovl\t$0, %ebx\n\tjb\tLBB14_22\n## BB#18:                               ## %min.iters.checked\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t%eax, %r8d\n\tandl\t$15, %r8d\n\tsubq\t%r8, %rcx\n\tmovl\t$0, %ebx\n\tje\tLBB14_22\n## BB#19:                               ## %vector.body.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t$4294967295, %edx       ## imm = 0xFFFFFFFF\n\tleal\t(%rax,%rdx), %esi\n\tincq\t%rsi\n\tmovl\t%eax, %edx\n\tandl\t$15, %edx\n\tsubq\t%rdx, %rsi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t%r12, %rbx\n\tmovq\t%r13, %rdx\n\t.align\t4, 0x90\nLBB14_20:                               ## %vector.body\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovapd\t(%rbx), %xmm0\n\txorpd\t(%rdx), %xmm0\n\tmovapd\t%xmm0, (%rdi)\n\taddq\t$16, %rdx\n\taddq\t$16, %rbx\n\taddq\t$16, %rdi\n\taddq\t$-16, %rsi\n\tjne\tLBB14_20\n## BB#21:                               ## %middle.block\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\ttestq\t%r8, %r8\n\tmovq\t%rcx, %rbx\n\tje\tLBB14_24\n\t.align\t4, 0x90\nLBB14_22:                               ## %.lr.ph.i.40.preheader86\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tleaq\t-49200(%rbp,%rbx), %rcx\n\tleaq\t-32816(%rbp,%rbx), %rdx\n\tleaq\t-16432(%rbp,%rbx), %rsi\n\tmovl\t%eax, %edi\n\tsubl\t%ebx, %edi\n\t.align\t4, 0x90\nLBB14_23:                               ## %.lr.ph.i.40\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdx), %bl\n\txorb\t(%rsi), %bl\n\tmovb\t%bl, (%rcx)\n\tincq\t%rcx\n\tincq\t%rdx\n\tincq\t%rsi\n\tdecl\t%edi\n\tjne\tLBB14_23\nLBB14_24:                               ## %standardXOR.exit\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r14\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB14_26\n## BB#25:                               ##   in Loop: Header=BB14_14 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB14_26:                               ##   in Loop: Header=BB14_14 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r14d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB14_27\n## BB#49:                               ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t%r13, %r12\n\tcvtsi2ssl\t%r14d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI14_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r13d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI14_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI14_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI14_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.29(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r13d, %r13d\n\tmovl\t%r13d, %ebx\n\tjle\tLBB14_46\n\t.align\t4, 0x90\nLBB14_50:                               ## %.lr.ph5.i\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_50\n## BB#45:                               ## %.preheader.i.10\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tcmpl\t$49, %r13d\n\tjg\tLBB14_48\nLBB14_46:                               ## %.lr.ph.i.13.preheader\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r13d, %ebx\n\t.align\t4, 0x90\nLBB14_47:                               ## %.lr.ph.i.13\n                                        ##   Parent Loop BB14_14 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_47\nLBB14_48:                               ## %._crit_edge.i.11\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.32(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t%r12, %r13\n\tleaq\t-32816(%rbp), %r12\nLBB14_27:                               ## %loadBar.exit.backedge\n                                        ##   in Loop: Header=BB14_14 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB14_14\n\tjmp\tLBB14_35\nLBB14_2:                                ## %loadBar.exit25.preheader\n\txorl\t%r15d, %r15d\n\ttestl\t%eax, %eax\n\tmovq\t%r12, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tmovq\t%r13, %r14\n\tjne\tLBB14_35\n## BB#3:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r13\n\tleaq\t_scrambleAsciiTables(%rip), %r12\n\t.align\t4, 0x90\nLBB14_4:                                ## %.lr.ph50\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB14_6 Depth 2\n                                        ##     Child Loop BB14_11 Depth 2\n                                        ##     Child Loop BB14_30 Depth 2\n                                        ##     Child Loop BB14_44 Depth 2\n                                        ##     Child Loop BB14_41 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tleaq\t-32816(%rbp), %r11\n\tjle\tLBB14_8\n## BB#5:                                ## %.lr.ph.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r11, %r9\n\t.align\t4, 0x90\nLBB14_6:                                ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r13,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB14_6\n## BB#7:                                ## %._crit_edge.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB14_8:                                ## %fillBuffer.exit\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovb\t_usingKeyFile(%rip), %cl\n\tandb\t$1, %cl\n\tmovq\t%r11, %rcx\n\tleaq\t_scramblingTablesOrder(%rip), %rdx\n\tcmovneq\t%rdx, %rcx\n\tmovb\t_isCodingInverted(%rip), %dl\n\tandb\t$1, %dl\n\tje\tLBB14_9\n## BB#28:                               ## %.preheader.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB14_31\n## BB#29:                               ## %.lr.ph.i.8.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t%eax, %r8d\n\tmovq\t%r14, %rsi\n\tmovq\t%r11, %rdi\n\tleaq\t-49200(%rbp), %rbx\n\t.align\t4, 0x90\nLBB14_30:                               ## %.lr.ph.i.8\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdi), %dl\n\txorb\t(%rsi), %dl\n\tmovzbl\t%dl, %r9d\n\tmovzbl\t(%rcx), %edx\n\tandl\t$15, %edx\n\tshlq\t$8, %rdx\n\taddq\t%r12, %rdx\n\tmovb\t(%r9,%rdx), %dl\n\tmovb\t%dl, (%rbx)\n\tincq\t%rbx\n\tincq\t%rdi\n\tincq\t%rsi\n\tincq\t%rcx\n\tdecl\t%r8d\n\tjne\tLBB14_30\n\tjmp\tLBB14_31\n\t.align\t4, 0x90\nLBB14_9:                                ## %.preheader2.i\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB14_31\n## BB#10:                               ## %.lr.ph6.i.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t%eax, %r9d\n\tmovq\t%r14, %r10\n\tmovq\t%r11, %rdi\n\tleaq\t-49200(%rbp), %rsi\n\t.align\t4, 0x90\nLBB14_11:                               ## %.lr.ph6.i\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%r10), %r8d\n\tmovzbl\t(%rcx), %edx\n\tandl\t$15, %edx\n\tshlq\t$8, %rdx\n\taddq\t%r12, %rdx\n\tmovb\t(%rdi), %bl\n\txorb\t(%r8,%rdx), %bl\n\tmovb\t%bl, (%rsi)\n\tincq\t%rsi\n\tincq\t%rdi\n\tincq\t%r10\n\tincq\t%rcx\n\tdecl\t%r9d\n\tjne\tLBB14_11\nLBB14_31:                               ## %codingXOR.exit\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r15\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB14_33\n## BB#32:                               ##   in Loop: Header=BB14_4 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB14_33:                               ##   in Loop: Header=BB14_4 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r15d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB14_34\n## BB#43:                               ##   in Loop: Header=BB14_4 Depth=1\n\tcvtsi2ssl\t%r15d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI14_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r14d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI14_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI14_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI14_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.29(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r14d, %r14d\n\tmovl\t%r14d, %ebx\n\tjle\tLBB14_40\n\t.align\t4, 0x90\nLBB14_44:                               ## %.lr.ph5.i.19\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_44\n## BB#39:                               ## %.preheader.i.15\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tcmpl\t$49, %r14d\n\tjg\tLBB14_42\nLBB14_40:                               ## %.lr.ph.i.24.preheader\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r14d, %ebx\n\t.align\t4, 0x90\nLBB14_41:                               ## %.lr.ph.i.24\n                                        ##   Parent Loop BB14_4 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB14_41\nLBB14_42:                               ## %._crit_edge.i.20\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.32(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tleaq\t-16432(%rbp), %r14\nLBB14_34:                               ## %loadBar.exit25.backedge\n                                        ##   in Loop: Header=BB14_4 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB14_4\nLBB14_35:                               ## %.loopexit\n\tmovq\t-49208(%rbp), %rdi      ## 8-byte Reload\n\tcallq\t_fclose\n\tmovzbl\t__isADirectory(%rip), %eax\n\tandl\t$1, %eax\n\tcmpl\t$1, %eax\n\tjne\tLBB14_37\n## BB#36:\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tmovq\t%rax, %rbx\n\tmovq\t_fileName(%rip), %rdi\n\tcallq\t_strlen\n\tleaq\t1(%rbx,%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, %rdi\n\tmovq\t%r14, %rsi\n\tcallq\t_strcpy\n\tmovq\t_fileName(%rip), %rsi\n\tmovq\t$-1, %rdx\n\tmovq\t%rbx, %rdi\n\tcallq\t___strcat_chk\n\tmovq\t%rbx, %rdi\n\tcallq\t_remove\n\tmovq\t%rbx, %rdi\n\tcallq\t_free\nLBB14_37:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB14_38\n## BB#51:\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB14_52:\n\tmovq\t%rbx, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB14_38:\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI15_0:\n\t.long\t1112014848              ## float 50\nLCPI15_3:\n\t.long\t1120403456              ## float 100\n\t.section\t__TEXT,__literal8,8byte_literals\n\t.align\t3\nLCPI15_1:\n\t.quad\t4607182418800017408     ## double 1\nLCPI15_2:\n\t.quad\t-4616189618054758400    ## double -1\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_decode\n\t.align\t4, 0x90\n_decode:                                ## @decode\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp66:\n\t.cfi_def_cfa_offset 16\nLtmp67:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp68:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$49192, %rsp            ## imm = 0xC028\nLtmp69:\n\t.cfi_offset %rbx, -56\nLtmp70:\n\t.cfi_offset %r12, -48\nLtmp71:\n\t.cfi_offset %r13, -40\nLtmp72:\n\t.cfi_offset %r14, -32\nLtmp73:\n\t.cfi_offset %r15, -24\n\tmovq\t%rdi, %r13\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t_fileName(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tincl\t%eax\n\taddq\t$15, %rax\n\tmovabsq\t$8589934576, %rcx       ## imm = 0x1FFFFFFF0\n\tandq\t%rax, %rcx\n\tmovq\t%rsp, %r15\n\tsubq\t%rcx, %r15\n\tmovq\t%r15, %rsp\n\tleaq\t-16432(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-32816(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t-49200(%rbp), %rdi\n\tmovl\t$16384, %esi            ## imm = 0x4000\n\tcallq\t___bzero\n\tleaq\t_scrambleAsciiTables(%rip), %rax\n\txorl\t%ebx, %ebx\n\tleaq\t_unscrambleAsciiTables(%rip), %r12\n\t.align\t4, 0x90\nLBB15_1:                                ## %.preheader.i\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_2 Depth 2\n\tmovq\t%rax, %rdx\n\txorl\t%esi, %esi\n\t.align\t4, 0x90\nLBB15_2:                                ##   Parent Loop BB15_1 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%rdx), %edi\n\tmovq\t%rbx, %rcx\n\tshlq\t$8, %rcx\n\taddq\t%r12, %rcx\n\tmovb\t%sil, (%rdi,%rcx)\n\tincq\t%rsi\n\tincq\t%rdx\n\tcmpq\t$256, %rsi              ## imm = 0x100\n\tjne\tLBB15_2\n## BB#3:                                ##   in Loop: Header=BB15_1 Depth=1\n\tincq\t%rbx\n\taddq\t$256, %rax              ## imm = 0x100\n\tcmpq\t$16, %rbx\n\tjne\tLBB15_1\n## BB#4:                                ## %unscramble.exit\n\tleaq\tL_.str.5(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r15, %rdi\n\tmovq\t%r14, %r8\n\tcallq\t___sprintf_chk\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovl\t$1000, %edx             ## imm = 0x3E8\n\tmovq\t%r14, %rdi\n\tmovq\t%r15, %rsi\n\tcallq\t___strcat_chk\n\tleaq\tL_.str.2(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, -49208(%rbp)      ## 8-byte Spill\n\ttestq\t%rax, %rax\n\tje\tLBB15_54\n## BB#5:\n\tleaq\tL_str.37(%rip), %rdi\n\tcallq\t_puts\n\tmovb\t_scrambling(%rip), %bl\n\tandb\t$1, %bl\n\tmovq\t%r13, %rdi\n\tcallq\t_feof\n\ttestb\t%bl, %bl\n\tleaq\t-16432(%rbp), %r14\n\tje\tLBB15_6\n## BB#16:                               ## %loadBar.exit.preheader\n\txorl\t%r14d, %r14d\n\ttestl\t%eax, %eax\n\tmovq\t%r13, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB15_39\n## BB#17:\n\tleaq\t-16432(%rbp), %r13\n\tleaq\t-32816(%rbp), %r12\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r15\n\t.align\t4, 0x90\nLBB15_18:                               ## %.lr.ph\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_20 Depth 2\n                                        ##     Child Loop BB15_24 Depth 2\n                                        ##     Child Loop BB15_27 Depth 2\n                                        ##     Child Loop BB15_52 Depth 2\n                                        ##     Child Loop BB15_49 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r13, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tjle\tLBB15_28\n## BB#19:                               ## %.lr.ph.i.32\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r12, %r9\n\t.align\t4, 0x90\nLBB15_20:                               ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r15,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB15_20\n## BB#21:                               ## %.lr.ph.i.43.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\n\tleal\t-1(%rax), %ecx\n\tincq\t%rcx\n\tcmpq\t$16, %rcx\n\tmovl\t$0, %ebx\n\tjb\tLBB15_26\n## BB#22:                               ## %min.iters.checked\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t%eax, %r8d\n\tandl\t$15, %r8d\n\tsubq\t%r8, %rcx\n\tmovl\t$0, %ebx\n\tje\tLBB15_26\n## BB#23:                               ## %vector.body.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t$4294967295, %edx       ## imm = 0xFFFFFFFF\n\tleal\t(%rax,%rdx), %esi\n\tincq\t%rsi\n\tmovl\t%eax, %edx\n\tandl\t$15, %edx\n\tsubq\t%rdx, %rsi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t%r12, %rbx\n\tmovq\t%r13, %rdx\n\t.align\t4, 0x90\nLBB15_24:                               ## %vector.body\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovapd\t(%rbx), %xmm0\n\txorpd\t(%rdx), %xmm0\n\tmovapd\t%xmm0, (%rdi)\n\taddq\t$16, %rdx\n\taddq\t$16, %rbx\n\taddq\t$16, %rdi\n\taddq\t$-16, %rsi\n\tjne\tLBB15_24\n## BB#25:                               ## %middle.block\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\ttestq\t%r8, %r8\n\tmovq\t%rcx, %rbx\n\tje\tLBB15_28\n\t.align\t4, 0x90\nLBB15_26:                               ## %.lr.ph.i.43.preheader89\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tleaq\t-49200(%rbp,%rbx), %rcx\n\tleaq\t-32816(%rbp,%rbx), %rdx\n\tleaq\t-16432(%rbp,%rbx), %rsi\n\tmovl\t%eax, %edi\n\tsubl\t%ebx, %edi\n\t.align\t4, 0x90\nLBB15_27:                               ## %.lr.ph.i.43\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdx), %bl\n\txorb\t(%rsi), %bl\n\tmovb\t%bl, (%rcx)\n\tincq\t%rcx\n\tincq\t%rdx\n\tincq\t%rsi\n\tdecl\t%edi\n\tjne\tLBB15_27\nLBB15_28:                               ## %standardXOR.exit\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r14\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB15_30\n## BB#29:                               ##   in Loop: Header=BB15_18 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB15_30:                               ##   in Loop: Header=BB15_18 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r14d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB15_31\n## BB#51:                               ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t%r13, %r12\n\tcvtsi2ssl\t%r14d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI15_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r13d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI15_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI15_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI15_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.29(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r13d, %r13d\n\tmovl\t%r13d, %ebx\n\tjle\tLBB15_48\n\t.align\t4, 0x90\nLBB15_52:                               ## %.lr.ph5.i\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_52\n## BB#47:                               ## %.preheader.i.3\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tcmpl\t$49, %r13d\n\tjg\tLBB15_50\nLBB15_48:                               ## %.lr.ph.i.preheader\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r13d, %ebx\n\t.align\t4, 0x90\nLBB15_49:                               ## %.lr.ph.i\n                                        ##   Parent Loop BB15_18 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_49\nLBB15_50:                               ## %._crit_edge.i\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.32(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t%r12, %r13\n\tleaq\t-32816(%rbp), %r12\nLBB15_31:                               ## %loadBar.exit.backedge\n                                        ##   in Loop: Header=BB15_18 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB15_18\n\tjmp\tLBB15_39\nLBB15_6:                                ## %loadBar.exit28.preheader\n\txorl\t%r15d, %r15d\n\ttestl\t%eax, %eax\n\tmovq\t%r13, %rbx\n\tmovq\t%rbx, -49216(%rbp)      ## 8-byte Spill\n\tjne\tLBB15_39\n## BB#7:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r13\n\t.align\t4, 0x90\nLBB15_8:                                ## %.lr.ph53\n                                        ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB15_10 Depth 2\n                                        ##     Child Loop BB15_15 Depth 2\n                                        ##     Child Loop BB15_34 Depth 2\n                                        ##     Child Loop BB15_46 Depth 2\n                                        ##     Child Loop BB15_43 Depth 2\n\tmovl\t$1, %esi\n\tmovl\t$16384, %edx            ## imm = 0x4000\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rcx\n\tcallq\t_fread\n\ttestl\t%eax, %eax\n\tleaq\t-32816(%rbp), %r11\n\tjle\tLBB15_12\n## BB#9:                                ## %.lr.ph.i.5\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t_seed.0(%rip), %rdx\n\tmovq\t_seed.1(%rip), %rcx\n\tmovq\t_passIndex(%rip), %rsi\n\tmovl\t%eax, %r8d\n\tmovq\t%r11, %r9\n\t.align\t4, 0x90\nLBB15_10:                               ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tleal\t(%rdx,%rcx), %edi\n\txorq\t%rdx, %rcx\n\tmovq\t%rdx, %rbx\n\trolq\t$55, %rbx\n\tmovq\t%rcx, %rdx\n\tshlq\t$14, %rdx\n\txorq\t%rcx, %rdx\n\txorq\t%rbx, %rdx\n\trolq\t$36, %rcx\n\txorb\t(%r13,%rsi), %dil\n\tmovb\t%dil, (%r9)\n\tincl\t%esi\n\tandl\t$16383, %esi            ## imm = 0x3FFF\n\tincq\t%r9\n\tdecl\t%r8d\n\tjne\tLBB15_10\n## BB#11:                               ## %._crit_edge.i.6\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t%rsi, _passIndex(%rip)\n\tmovq\t%rdx, _seed.0(%rip)\n\tmovq\t%rcx, _seed.1(%rip)\nLBB15_12:                               ## %fillBuffer.exit\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovb\t_usingKeyFile(%rip), %cl\n\tandb\t$1, %cl\n\tmovq\t%r11, %rsi\n\tleaq\t_scramblingTablesOrder(%rip), %rcx\n\tcmovneq\t%rcx, %rsi\n\tmovb\t_isCodingInverted(%rip), %dl\n\tandb\t$1, %dl\n\tje\tLBB15_13\n## BB#32:                               ## %.preheader.i.11\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB15_35\n## BB#33:                               ## %.lr.ph.i.16.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t%eax, %r9d\n\tmovq\t%r14, %r10\n\tmovq\t%r11, %rdi\n\tleaq\t-49200(%rbp), %rbx\n\t.align\t4, 0x90\nLBB15_34:                               ## %.lr.ph.i.16\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovzbl\t(%r10), %r8d\n\tmovzbl\t(%rsi), %edx\n\tandl\t$15, %edx\n\tshlq\t$8, %rdx\n\taddq\t%r12, %rdx\n\tmovb\t(%rdi), %cl\n\txorb\t(%r8,%rdx), %cl\n\tmovb\t%cl, (%rbx)\n\tincq\t%rbx\n\tincq\t%rdi\n\tincq\t%r10\n\tincq\t%rsi\n\tdecl\t%r9d\n\tjne\tLBB15_34\n\tjmp\tLBB15_35\n\t.align\t4, 0x90\nLBB15_13:                               ## %.preheader2.i\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\ttestl\t%eax, %eax\n\tjle\tLBB15_35\n## BB#14:                               ## %.lr.ph6.i.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t%eax, %r8d\n\tmovq\t%r14, %rcx\n\tmovq\t%r11, %rdi\n\tleaq\t-49200(%rbp), %rbx\n\t.align\t4, 0x90\nLBB15_15:                               ## %.lr.ph6.i\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovb\t(%rdi), %dl\n\txorb\t(%rcx), %dl\n\tmovzbl\t%dl, %r9d\n\tmovzbl\t(%rsi), %edx\n\tandl\t$15, %edx\n\tshlq\t$8, %rdx\n\taddq\t%r12, %rdx\n\tmovb\t(%r9,%rdx), %dl\n\tmovb\t%dl, (%rbx)\n\tincq\t%rbx\n\tincq\t%rdi\n\tincq\t%rcx\n\tincq\t%rsi\n\tdecl\t%r8d\n\tjne\tLBB15_15\nLBB15_35:                               ## %decodingXOR.exit\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovslq\t%eax, %rdx\n\tmovl\t$1, %esi\n\tleaq\t-49200(%rbp), %rdi\n\tmovq\t-49208(%rbp), %rcx      ## 8-byte Reload\n\tcallq\t_fwrite\n\tincq\t%r15\n\tmovl\t_numberOfBuffer(%rip), %ebx\n\tmovb\t_loadBar.firstCall(%rip), %al\n\tandb\t$1, %al\n\tjne\tLBB15_37\n## BB#36:                               ##   in Loop: Header=BB15_8 Depth=1\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t%rax, _loadBar.startingTime(%rip)\n\tmovb\t$1, _loadBar.firstCall(%rip)\nLBB15_37:                               ##   in Loop: Header=BB15_8 Depth=1\n\tmovslq\t%ebx, %rax\n\timulq\t$1374389535, %rax, %rax ## imm = 0x51EB851F\n\tmovq\t%rax, %rcx\n\tsarq\t$37, %rcx\n\tshrq\t$63, %rax\n\tleal\t1(%rcx,%rax), %ecx\n\tmovl\t%r15d, %eax\n\tcltd\n\tidivl\t%ecx\n\ttestl\t%edx, %edx\n\tjne\tLBB15_38\n## BB#45:                               ##   in Loop: Header=BB15_8 Depth=1\n\tcvtsi2ssl\t%r15d, %xmm1\n\tcvtsi2ssl\t%ebx, %xmm0\n\tdivss\t%xmm0, %xmm1\n\tmovss\t%xmm1, -49228(%rbp)     ## 4-byte Spill\n\tmovaps\t%xmm1, %xmm0\n\tmulss\tLCPI15_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %r14d\n\txorl\t%edi, %edi\n\tcallq\t_time\n\tmovq\t_loadBar.startingTime(%rip), %rsi\n\tmovq\t%rax, %rdi\n\tcallq\t_difftime\n\tmovss\t-49228(%rbp), %xmm3     ## 4-byte Reload\n                                        ## xmm3 = mem[0],zero,zero,zero\n\txorps\t%xmm1, %xmm1\n\tcvtss2sd\t%xmm3, %xmm1\n\tmovsd\tLCPI15_1(%rip), %xmm2   ## xmm2 = mem[0],zero\n\tdivsd\t%xmm1, %xmm2\n\taddsd\tLCPI15_2(%rip), %xmm2\n\tmulsd\t%xmm0, %xmm2\n\tmovsd\t%xmm2, -49224(%rbp)     ## 8-byte Spill\n\tmulss\tLCPI15_3(%rip), %xmm3\n\tcvttss2si\t%xmm3, %esi\n\txorl\t%eax, %eax\n\tleaq\tL_.str.29(%rip), %rdi\n\tcallq\t_printf\n\ttestl\t%r14d, %r14d\n\tmovl\t%r14d, %ebx\n\tjle\tLBB15_42\n\t.align\t4, 0x90\nLBB15_46:                               ## %.lr.ph5.i.22\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$61, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_46\n## BB#41:                               ## %.preheader.i.18\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tcmpl\t$49, %r14d\n\tjg\tLBB15_44\nLBB15_42:                               ## %.lr.ph.i.27.preheader\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovl\t$50, %ebx\n\tsubl\t%r14d, %ebx\n\t.align\t4, 0x90\nLBB15_43:                               ## %.lr.ph.i.27\n                                        ##   Parent Loop BB15_8 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tmovl\t$32, %edi\n\tcallq\t_putchar\n\tdecl\t%ebx\n\tjne\tLBB15_43\nLBB15_44:                               ## %._crit_edge.i.23\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovb\t$1, %al\n\tleaq\tL_.str.32(%rip), %rdi\n\tmovsd\t-49224(%rbp), %xmm0     ## 8-byte Reload\n                                        ## xmm0 = mem[0],zero\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tleaq\t-16432(%rbp), %r14\nLBB15_38:                               ## %loadBar.exit28.backedge\n                                        ##   in Loop: Header=BB15_8 Depth=1\n\tmovq\t-49216(%rbp), %rbx      ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_feof\n\ttestl\t%eax, %eax\n\tje\tLBB15_8\nLBB15_39:                               ## %.loopexit\n\tmovq\t-49208(%rbp), %rdi      ## 8-byte Reload\n\tcallq\t_fclose\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tcmpq\t-48(%rbp), %rax\n\tjne\tLBB15_40\n## BB#53:                               ## %.loopexit\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB15_54:\n\tmovq\t%r15, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB15_40:                               ## %.loopexit\n\tcallq\t___stack_chk_fail\n\t.cfi_endproc\n\n\t.globl\t_isADirectory\n\t.align\t4, 0x90\n_isADirectory:                          ## @isADirectory\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp74:\n\t.cfi_def_cfa_offset 16\nLtmp75:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp76:\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$144, %rsp\n\tleaq\t-144(%rbp), %rsi\n\tcallq\t_stat$INODE64\n\tcmpl\t$-1, %eax\n\tje\tLBB16_1\n## BB#5:\n\tmovzwl\t-140(%rbp), %eax\n\tandl\t$61440, %eax            ## imm = 0xF000\n\tcmpl\t$16384, %eax            ## imm = 0x4000\n\tsete\t%al\n\tmovzbl\t%al, %eax\n\tsete\t__isADirectory(%rip)\n\taddq\t$144, %rsp\n\tpopq\t%rbp\n\tretq\nLBB16_1:\n\tcallq\t___error\n\tcmpl\t$2, (%rax)\n\tjne\tLBB16_4\n## BB#2:\n\tleaq\tL_str.40(%rip), %rdi\n\tcallq\t_puts\n\tjmp\tLBB16_3\nLBB16_4:\n\tleaq\tL_.str.8(%rip), %rdi\n\tcallq\t_perror\nLBB16_3:\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\n\t.cfi_endproc\n\n\t.section\t__TEXT,__literal4,4byte_literals\n\t.align\t2\nLCPI17_0:\n\t.long\t947912704               ## float 6.10351563E-5\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.globl\t_main\n\t.align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp77:\n\t.cfi_def_cfa_offset 16\nLtmp78:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp79:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%r15\n\tpushq\t%r14\n\tpushq\t%r13\n\tpushq\t%r12\n\tpushq\t%rbx\n\tsubq\t$1048, %rsp             ## imm = 0x418\nLtmp80:\n\t.cfi_offset %rbx, -56\nLtmp81:\n\t.cfi_offset %r12, -48\nLtmp82:\n\t.cfi_offset %r13, -40\nLtmp83:\n\t.cfi_offset %r14, -32\nLtmp84:\n\t.cfi_offset %r15, -24\n\tmovq\t%rsi, %r13\n\tmovl\t%edi, %r15d\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\t(%r13), %rbx\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _progName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_2\n## BB#1:\n\tincq\t%rax\n\tmovq\t%rax, _progName(%rip)\n\tjmp\tLBB17_3\nLBB17_2:\n\tmovq\t%rbx, _progName(%rip)\nLBB17_3:\n\tcmpl\t$1, %r15d\n\tjle\tLBB17_87\n## BB#4:\n\tcmpl\t$5, %r15d\n\tjge\tLBB17_88\n## BB#5:\n\tmovq\t8(%r13), %rbx\n\tleaq\tL_.str.10(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_89\n## BB#6:\n\tleaq\tL_.str.11(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_89\n## BB#7:\n\txorl\t%r14d, %r14d\n\tcmpl\t$3, %r15d\n\tjl\tLBB17_23\n## BB#8:\n\tmovq\t16(%r13), %r14\n\tleaq\tL_.str.12(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_10\n## BB#9:\n\tleaq\tL_.str.13(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_10\n## BB#15:\n\tleaq\tL_.str.16(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_17\n## BB#16:\n\tleaq\tL_.str.17(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_strcmp\n\ttestl\t%eax, %eax\n\tje\tLBB17_17\n## BB#19:\n\tleaq\tL_.str.14(%rip), %rsi\n\tmovq\t%r14, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %r14\n\ttestq\t%r14, %r14\n\tje\tLBB17_20\n## BB#21:\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_22\nLBB17_88:\n\tleaq\tL_str.52(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_usage\nLBB17_10:\n\tmovb\t$1, _scrambling(%rip)\n\txorl\t%r14d, %r14d\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_23\n## BB#11:\n\tmovq\t24(%r13), %rdi\n\tleaq\tL_.str.14(%rip), %rsi\n\tcallq\t_fopen\n\ttestq\t%rax, %rax\n\tje\tLBB17_12\n## BB#14:\n\tleaq\tL_str.51(%rip), %rdi\n\tcallq\t_puts\n\txorl\t%r14d, %r14d\n\tjmp\tLBB17_23\nLBB17_17:\n\tmovb\t$1, _isCodingInverted(%rip)\n\txorl\t%r14d, %r14d\n\tcmpl\t$4, %r15d\n\tjl\tLBB17_23\n## BB#18:\n\tmovq\t24(%r13), %rdi\n\tleaq\tL_.str.14(%rip), %rsi\n\tcallq\t_fopen\n\tmovq\t%rax, %r14\n\ttestq\t%r14, %r14\n\tje\tLBB17_12\nLBB17_22:\n\tmovb\t$1, _usingKeyFile(%rip)\nLBB17_23:                               ## %.thread\n\tmovq\t8(%r13), %rbx\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tmovzbl\t-1(%rax,%rbx), %ecx\n\tcmpl\t$47, %ecx\n\tjne\tLBB17_27\n## BB#24:\n\tmovzbl\t-2(%rax,%rbx), %eax\n\tcmpl\t$47, %eax\n\tje\tLBB17_25\nLBB17_27:\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tmovl\t$1, %edi\n\tmovq\t%rax, %rsi\n\tcallq\t_calloc\n\tmovq\t%rax, %r12\n\tmovq\t%r12, %rdi\n\tmovq\t%rbx, %rsi\n\tcallq\t_strcpy\n\tmovq\t%r12, %rdi\n\tcallq\t_isADirectory\n\ttestl\t%eax, %eax\n\tje\tLBB17_48\n## BB#28:\n\tleaq\t-1056(%rbp), %rdi\n\tmovl\t$1008, %esi             ## imm = 0x3F0\n\tcallq\t___bzero\n\tleaq\tL_.str.19(%rip), %rdi\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tcallq\t_fflush\n\tmovq\t8(%r13), %r15\n\tmovl\t$47, %esi\n\tmovq\t%r15, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, _fileName(%rip)\n\ttestq\t%rbx, %rbx\n\tje\tLBB17_34\n## BB#29:\n\tmovq\t%rbx, %rdi\n\tcallq\t_strlen\n\tcmpq\t$1, %rax\n\tjne\tLBB17_33\n## BB#30:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tleaq\t5(%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %rbx\n\tmovq\t%rbx, %rdi\n\tmovq\t%r15, %rsi\n\tcallq\t_strcpy\n\tmovq\t_fileName(%rip), %rax\n\tsubq\t8(%r13), %rax\n\tmovb\t$0, (%rbx,%rax)\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _fileName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_32\n## BB#31:\n\tincq\t%rax\n\tmovq\t%rax, _fileName(%rip)\n\tsubq\t%rbx, %rax\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%r14, %rdi\n\tmovq\t%rbx, %rsi\n\tmovq\t%rax, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t_fileName(%rip), %r15\n\tmovq\t%r15, %rax\n\tsubq\t%rbx, %rax\n\tmovq\t%rbx, -1064(%rbp)       ## 8-byte Spill\n\tmovb\t$0, (%rax,%r14)\n\tjmp\tLBB17_36\nLBB17_48:\n\tmovq\t8(%r13), %rbx\n\tmovl\t$47, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strrchr\n\tmovq\t%rax, _fileName(%rip)\n\ttestq\t%rax, %rax\n\tje\tLBB17_50\n## BB#49:\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tincq\t%rax\n\tmovq\t%rax, _fileName(%rip)\n\tsubq\t%rbx, %rax\n\tleaq\t_pathToMainFile(%rip), %rdi\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%rbx, %rsi\n\tmovq\t%rax, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t8(%r13), %rbx\n\tjmp\tLBB17_51\nLBB17_34:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, _fileName(%rip)\n\tjmp\tLBB17_35\nLBB17_33:\n\tmovq\t%r12, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tincq\t%rbx\n\tmovq\t%rbx, _fileName(%rip)\n\tsubq\t%r15, %rbx\n\tleaq\t_pathToMainFile(%rip), %r12\n\tmovl\t$1000, %ecx             ## imm = 0x3E8\n\tmovq\t%r12, %rdi\n\tmovq\t%r15, %rsi\n\tmovq\t%rbx, %rdx\n\tcallq\t___strncpy_chk\n\tmovq\t_fileName(%rip), %r15\n\tmovq\t%r15, %rax\n\tsubq\t8(%r13), %rax\n\tmovb\t$0, (%rax,%r12)\nLBB17_35:\n\txorl\t%eax, %eax\n\tmovq\t%rax, -1064(%rbp)       ## 8-byte Spill\nLBB17_36:\n\tmovq\t%r15, %rdi\n\tcallq\t_strlen\n\tleaq\t5(%rax), %rsi\n\tmovl\t$1, %edi\n\tcallq\t_calloc\n\tmovq\t%rax, %r12\n\tleaq\tL_.str.20(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r12, %rdi\n\tmovq\t%r15, %r8\n\tcallq\t___sprintf_chk\n\tmovq\t_fileName(%rip), %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %r15\n\tleaq\t_pathToMainFile(%rip), %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %r13\n\tmovq\t%r12, %rdi\n\tcallq\t_processTarString\n\tmovq\t%rax, %rbx\n\tsubq\t$16, %rsp\n\tmovq\t%r15, (%rsp)\n\tleaq\tL_.str.21(%rip), %rcx\n\tleaq\t-1056(%rbp), %r14\n\tmovl\t$0, %esi\n\tmovl\t$1008, %edx             ## imm = 0x3F0\n\txorl\t%eax, %eax\n\tmovq\t%r14, %rdi\n\tmovq\t%r13, %r8\n\tmovq\t%rbx, %r9\n\tcallq\t___sprintf_chk\n\taddq\t$16, %rsp\n\tmovq\t%r13, %rdi\n\tcallq\t_free\n\tmovq\t%rbx, %rdi\n\tcallq\t_free\n\tmovq\t%r15, %rdi\n\tcallq\t_free\n\tmovq\t%r14, %rdi\n\tcallq\t_system\n\ttestl\t%eax, %eax\n\tjne\tLBB17_37\n## BB#38:\n\tleaq\tL_str.44(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%r12, _fileName(%rip)\n\tleaq\t_pathToMainFile(%rip), %r14\n\tmovq\t%r14, %rdi\n\tcallq\t_strlen\n\tmovq\t%rax, %rbx\n\tmovq\t%r12, %rdi\n\tcallq\t_strlen\n\tmovq\t%rsp, %r15\n\tleaq\t15(%rax,%rbx), %rax\n\tandq\t$-16, %rax\n\tmovq\t%rsp, %r13\n\tsubq\t%rax, %r13\n\tmovq\t%r13, %rsp\n\tleaq\tL_.str.24(%rip), %rcx\n\tmovl\t$0, %esi\n\tmovq\t$-1, %rdx\n\txorl\t%eax, %eax\n\tmovq\t%r13, %rdi\n\tmovq\t%r14, %r8\n\tmovq\t%r12, %r9\n\tcallq\t___sprintf_chk\n\tleaq\tL_.str.14(%rip), %rsi\n\tmovq\t%r13, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %rbx\n\ttestq\t%rbx, %rbx\n\tje\tLBB17_47\n## BB#39:                               ## %.thread20\n\tmovq\t%r12, -1080(%rbp)       ## 8-byte Spill\n\tmovq\t%r15, %rsp\n\tmovq\t-1088(%rbp), %r12       ## 8-byte Reload\n\tmovq\t-1064(%rbp), %rcx       ## 8-byte Reload\n\tjmp\tLBB17_40\nLBB17_50:\n\tmovq\t%r14, -1072(%rbp)       ## 8-byte Spill\n\tmovq\t%rbx, _fileName(%rip)\nLBB17_51:\n\tleaq\tL_.str.14(%rip), %rsi\n\tmovq\t%rbx, %rdi\n\tcallq\t_fopen\n\tmovq\t%rax, %rbx\n\txorl\t%ecx, %ecx\n\ttestq\t%rbx, %rbx\n\tmovl\t$0, %eax\n\tmovq\t%rax, -1080(%rbp)       ## 8-byte Spill\n\tje\tLBB17_52\nLBB17_40:\n\tmovq\t%rbx, -1088(%rbp)       ## 8-byte Spill\n\tmovq\t%rcx, -1064(%rbp)       ## 8-byte Spill\n\tmovq\t%r12, %rdi\n\tcallq\t_free\n\txorl\t%esi, %esi\n\tmovl\t$2, %edx\n\tmovq\t%rbx, %rdi\n\tcallq\t_fseek\n\tmovq\t%rbx, %rdi\n\tcallq\t_ftell\n\tmovq\t%rax, %r14\n\tmovq\t%rbx, %rdi\n\tcallq\t_rewind\n\tcvtsi2ssq\t%r14, %xmm0\n\tmulss\tLCPI17_0(%rip), %xmm0\n\tcvttss2si\t%xmm0, %rax\n\tcvtsi2ssq\t%rax, %xmm1\n\tsubss\t%xmm1, %xmm0\n\txorps\t%xmm1, %xmm1\n\tucomiss\t%xmm1, %xmm0\n\tseta\t%cl\n\tmovzbl\t%cl, %ecx\n\taddq\t%rax, %rcx\n\ttestq\t%rcx, %rcx\n\tmovl\t$1, %eax\n\tcmovgq\t%rcx, %rax\n\tmovq\t%rax, _numberOfBuffer(%rip)\n\tleaq\tL_.str.25(%rip), %r14\n\tmovq\t___stdinp@GOTPCREL(%rip), %r15\n\tleaq\t-1056(%rbp), %rbx\n\tleaq\tL_.str.26(%rip), %r13\n\txorl\t%r12d, %r12d\n\t.align\t4, 0x90\nLBB17_41:                               ## =>This Loop Header: Depth=1\n                                        ##     Child Loop BB17_53 Depth 2\n                                        ##     Child Loop BB17_56 Depth 2\n\txorl\t%eax, %eax\n\tmovq\t%r14, %rdi\n\tcallq\t_printf\n\tmovq\t(%r15), %rdx\n\tmovl\t$2, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tmovl\t$0, %eax\n\tje\tLBB17_56\n## BB#42:                               ##   in Loop: Header=BB17_41 Depth=1\n\tmovl\t$10, %esi\n\tmovq\t%rbx, %rdi\n\tcallq\t_strchr\n\tmovq\t%rax, %rcx\n\txorl\t%eax, %eax\n\ttestq\t%rcx, %rcx\n\tje\tLBB17_53\n## BB#43:                               ##   in Loop: Header=BB17_41 Depth=1\n\tmovb\t$0, (%rcx)\n\tjmp\tLBB17_44\n\t.align\t4, 0x90\nLBB17_58:                               ##   in Loop: Header=BB17_56 Depth=2\n\tcallq\t_getchar\nLBB17_56:                               ## %.preheader.i\n                                        ##   Parent Loop BB17_41 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tcmpl\t$-1, %eax\n\tje\tLBB17_44\n## BB#57:                               ## %.preheader.i\n                                        ##   in Loop: Header=BB17_56 Depth=2\n\tcmpl\t$10, %eax\n\tjne\tLBB17_58\n\tjmp\tLBB17_44\n\t.align\t4, 0x90\nLBB17_55:                               ##   in Loop: Header=BB17_53 Depth=2\n\tcallq\t_getchar\nLBB17_53:                               ## %.preheader3.i\n                                        ##   Parent Loop BB17_41 Depth=1\n                                        ## =>  This Inner Loop Header: Depth=2\n\tcmpl\t$-1, %eax\n\tje\tLBB17_44\n## BB#54:                               ## %.preheader3.i\n                                        ##   in Loop: Header=BB17_53 Depth=2\n\tcmpl\t$10, %eax\n\tjne\tLBB17_55\n\t.align\t4, 0x90\nLBB17_44:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\txorl\t%eax, %eax\n\tmovq\t%r13, %rdi\n\tcallq\t_printf\n\tmovsbl\t-1056(%rbp), %eax\n\tcmpl\t$98, %eax\n\tjg\tLBB17_59\n## BB#45:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tmovzbl\t%al, %eax\n\tcmpl\t$67, %eax\n\tje\tLBB17_61\n## BB#46:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tcmpl\t$68, %eax\n\tjne\tLBB17_41\n\tjmp\tLBB17_62\n\t.align\t4, 0x90\nLBB17_59:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tmovzbl\t%al, %eax\n\tcmpl\t$100, %eax\n\tje\tLBB17_62\n## BB#60:                               ## %readString.exit\n                                        ##   in Loop: Header=BB17_41 Depth=1\n\tcmpl\t$99, %eax\n\tjne\tLBB17_41\nLBB17_61:                               ## %.thread22.loopexit\n\tmovb\t$1, %r12b\nLBB17_62:                               ## %.thread22\n\tleaq\tL_.str.27(%rip), %rdi\n\txorl\t%ebx, %ebx\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovq\t(%r15), %rdx\n\tmovq\t_passPhrase@GOTPCREL(%rip), %r14\n\tmovl\t$16383, %esi            ## imm = 0x3FFF\n\tmovq\t%r14, %rdi\n\tcallq\t_fgets\n\ttestq\t%rax, %rax\n\tje\tLBB17_63\n## BB#67:\n\tmovq\t_passPhrase@GOTPCREL(%rip), %rdi\n\tmovl\t$10, %esi\n\tcallq\t_strchr\n\ttestq\t%rax, %rax\n\tmovq\t-1080(%rbp), %r15       ## 8-byte Reload\n\tje\tLBB17_68\n## BB#72:\n\tmovb\t$0, (%rax)\n\tjmp\tLBB17_73\nLBB17_63:\n\tmovq\t-1080(%rbp), %r15       ## 8-byte Reload\n\tjmp\tLBB17_64\n\t.align\t4, 0x90\nLBB17_66:                               ##   in Loop: Header=BB17_64 Depth=1\n\tcallq\t_getchar\n\tmovl\t%eax, %ebx\nLBB17_64:                               ## %.preheader.i.17\n                                        ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %ebx\n\tje\tLBB17_73\n## BB#65:                               ## %.preheader.i.17\n                                        ##   in Loop: Header=BB17_64 Depth=1\n\tcmpl\t$10, %ebx\n\tjne\tLBB17_66\n\tjmp\tLBB17_73\nLBB17_68:\n\txorl\t%eax, %eax\n\tjmp\tLBB17_69\n\t.align\t4, 0x90\nLBB17_71:                               ##   in Loop: Header=BB17_69 Depth=1\n\tcallq\t_getchar\nLBB17_69:                               ## %.preheader3.i.15\n                                        ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$-1, %eax\n\tje\tLBB17_73\n## BB#70:                               ## %.preheader3.i.15\n                                        ##   in Loop: Header=BB17_69 Depth=1\n\tcmpl\t$10, %eax\n\tjne\tLBB17_71\nLBB17_73:                               ## %readString.exit19\n\tleaq\tL_.str.26(%rip), %rdi\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\tmovw\t(%r14), %di\n\ttestb\t%dil, %dil\n\tmovabsq\t$-7723592293110705685, %rax ## imm = 0x94D049BB133111EB\n\tmovabsq\t$-4658895280553007687, %rcx ## imm = 0xBF58476D1CE4E5B9\n\tmovl\t$5381, %edx             ## imm = 0x1505\n\tje\tLBB17_77\n## BB#74:                               ## %.lr.ph.i.i.preheader\n\tmovl\t%edi, %esi\n\tshrl\t$8, %esi\n\tmovsbq\t%dil, %rdx\n\taddq\t$177573, %rdx           ## imm = 0x2B5A5\n\ttestb\t%sil, %sil\n\tje\tLBB17_77\n## BB#75:\n\taddq\t$2, %r14\n\t.align\t4, 0x90\nLBB17_76:                               ## %.lr.ph.i.i..lr.ph.i.i_crit_edge\n                                        ## =>This Inner Loop Header: Depth=1\n\timulq\t$33, %rdx, %rdi\n\tmovsbq\t%sil, %rdx\n\tmovb\t(%r14), %bl\n\taddq\t%rdi, %rdx\n\tincq\t%r14\n\ttestb\t%bl, %bl\n\tmovb\t%bl, %sil\n\tjne\tLBB17_76\nLBB17_77:                               ## %getSeed.exit\n\tmovabsq\t$-7046029254386353131, %rsi ## imm = 0x9E3779B97F4A7C15\n\taddq\t%rdx, %rsi\n\tmovq\t%rsi, %rdi\n\tshrq\t$30, %rdi\n\txorq\t%rsi, %rdi\n\timulq\t%rcx, %rdi\n\tmovq\t%rdi, %rsi\n\tshrq\t$27, %rsi\n\txorq\t%rdi, %rsi\n\timulq\t%rax, %rsi\n\tmovq\t%rsi, %rdi\n\tshrq\t$31, %rdi\n\txorq\t%rsi, %rdi\n\tmovq\t%rdi, _seed.0(%rip)\n\tmovabsq\t$4354685564936845354, %rsi ## imm = 0x3C6EF372FE94F82A\n\taddq\t%rdx, %rsi\n\tmovq\t%rsi, %rdx\n\tshrq\t$30, %rdx\n\txorq\t%rsi, %rdx\n\timulq\t%rcx, %rdx\n\tmovq\t%rdx, %rcx\n\tshrq\t$27, %rcx\n\txorq\t%rdx, %rcx\n\timulq\t%rax, %rcx\n\tmovq\t%rcx, %rax\n\tshrq\t$31, %rax\n\txorq\t%rcx, %rax\n\tmovq\t%rax, _seed.1(%rip)\n\tmovq\t-1072(%rbp), %rdi       ## 8-byte Reload\n\tcallq\t_scramble\n\ttestb\t%r12b, %r12b\n\tje\tLBB17_79\n## BB#78:\n\tmovq\t-1088(%rbp), %rbx       ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_code\n\tjmp\tLBB17_80\nLBB17_79:\n\tmovq\t-1088(%rbp), %rbx       ## 8-byte Reload\n\tmovq\t%rbx, %rdi\n\tcallq\t_decode\nLBB17_80:\n\tmovq\t-1064(%rbp), %r14       ## 8-byte Reload\n\tleaq\tL_str.42(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%rbx, %rdi\n\tcallq\t_fclose\n\ttestq\t%r15, %r15\n\tje\tLBB17_82\n## BB#81:\n\tmovq\t%r15, %rdi\n\tcallq\t_free\nLBB17_82:\n\ttestq\t%r14, %r14\n\tje\tLBB17_84\n## BB#83:\n\tmovq\t%r14, %rdi\n\tcallq\t_free\nLBB17_84:\n\txorl\t%eax, %eax\nLBB17_85:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rcx\n\tmovq\t(%rcx), %rcx\n\tcmpq\t-48(%rbp), %rcx\n\tjne\tLBB17_90\n## BB#86:\n\tleaq\t-40(%rbp), %rsp\n\tpopq\t%rbx\n\tpopq\t%r12\n\tpopq\t%r13\n\tpopq\t%r14\n\tpopq\t%r15\n\tpopq\t%rbp\n\tretq\nLBB17_32:\n\tmovq\t%rbx, _fileName(%rip)\n\tmovq\t%rbx, %r15\n\tmovq\t%rbx, -1064(%rbp)       ## 8-byte Spill\n\tjmp\tLBB17_36\nLBB17_47:\n\tmovq\t%r13, %rdi\n\tcallq\t_perror\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovq\t%r15, %rsp\n\tmovl\t$1, %eax\n\tjmp\tLBB17_85\nLBB17_52:\n\tmovq\t8(%r13), %rdi\n\tcallq\t_perror\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %eax\n\tjmp\tLBB17_85\nLBB17_89:\n\txorl\t%edi, %edi\n\tcallq\t_usage\nLBB17_87:\n\tmovl\t$1, %edi\n\tcallq\t_usage\nLBB17_90:\n\tcallq\t___stack_chk_fail\nLBB17_37:\n\tleaq\tL_str.46(%rip), %rdi\n\tjmp\tLBB17_26\nLBB17_25:\n\tleaq\tL_str.48(%rip), %rdi\nLBB17_26:\n\tcallq\t_puts\n\tleaq\tL_str.49(%rip), %rdi\n\tcallq\t_puts\n\tmovl\t$1, %edi\n\tcallq\t_exit\nLBB17_12:\n\tmovq\t24(%r13), %rdi\n\tjmp\tLBB17_13\nLBB17_20:\n\tmovq\t16(%r13), %rdi\nLBB17_13:\n\tcallq\t_perror\n\tmovl\t$1, %edi\n\tcallq\t_usage\n\t.cfi_endproc\n\n\t.align\t4, 0x90\n_usage:                                 ## @usage\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp85:\n\t.cfi_def_cfa_offset 16\nLtmp86:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp87:\n\t.cfi_def_cfa_register %rbp\n\tpushq\t%rbx\n\tsubq\t$40, %rsp\nLtmp88:\n\t.cfi_offset %rbx, -24\n\tmovl\t%edi, %ebx\n\tmovq\t___stderrp@GOTPCREL(%rip), %rax\n\ttestl\t%ebx, %ebx\n\tcmoveq\t___stdoutp@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rdi\n\tmovq\t_progName(%rip), %rdx\n\tjne\tLBB18_2\n## BB#1:\n\tmovq\t%rdx, 24(%rsp)\n\tmovq\t%rdx, 16(%rsp)\n\tmovq\t%rdx, 8(%rsp)\n\tmovq\t%rdx, (%rsp)\n\tleaq\tL_.str.33(%rip), %rsi\n\txorl\t%eax, %eax\n\tmovq\t%rdx, %r8\n\tmovq\t%rdx, %r9\n\tmovq\t%rdx, %rcx\n\tcallq\t_fprintf\n\tmovl\t%ebx, %edi\n\tcallq\t_exit\nLBB18_2:\n\tleaq\tL_.str.34(%rip), %rsi\n\txorl\t%eax, %eax\n\tcallq\t_fprintf\n\tmovl\t%ebx, %edi\n\tcallq\t_exit\n\t.cfi_endproc\n\n\t.globl\t_passIndex              ## @passIndex\n.zerofill __DATA,__common,_passIndex,8,3\n.zerofill __DATA,__bss,_seed.0,8,4      ## @seed.0\n.zerofill __DATA,__bss,_seed.1,8,3      ## @seed.1\n.zerofill __DATA,__bss,_scrambleAsciiTables,4096,4 ## @scrambleAsciiTables\n.zerofill __DATA,__bss,_usingKeyFile,1,0 ## @usingKeyFile\n\t.comm\t_passPhrase,16384,4     ## @passPhrase\n.zerofill __DATA,__bss,_scramblingTablesOrder,16384,4 ## @scramblingTablesOrder\n.zerofill __DATA,__bss,_unscrambleAsciiTables,4096,4 ## @unscrambleAsciiTables\n.zerofill __DATA,__bss,_isCodingInverted,1,0 ## @isCodingInverted\n.zerofill __DATA,__bss,_fileName,8,3    ## @fileName\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str.1:                               ## @.str.1\n\t.asciz\t\"%sx%s\"\n\n\t.section\t__DATA,__data\n\t.align\t4                       ## @pathToMainFile\n_pathToMainFile:\n\t.asciz\t\"./\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"\n\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str.2:                               ## @.str.2\n\t.asciz\t\"w+\"\n\n.zerofill __DATA,__bss,_scrambling,1,0  ## @scrambling\n.zerofill __DATA,__bss,_numberOfBuffer,8,3 ## @numberOfBuffer\n.zerofill __DATA,__bss,__isADirectory,1,0 ## @_isADirectory\nL_.str.5:                               ## @.str.5\n\t.asciz\t\"x%s\"\n\nL_.str.8:                               ## @.str.8\n\t.asciz\t\"stat\"\n\n.zerofill __DATA,__bss,_progName,8,3    ## @progName\nL_.str.10:                              ## @.str.10\n\t.asciz\t\"-h\"\n\nL_.str.11:                              ## @.str.11\n\t.asciz\t\"--help\"\n\nL_.str.12:                              ## @.str.12\n\t.asciz\t\"-s\"\n\nL_.str.13:                              ## @.str.13\n\t.asciz\t\"--standard\"\n\nL_.str.14:                              ## @.str.14\n\t.asciz\t\"r\"\n\nL_.str.16:                              ## @.str.16\n\t.asciz\t\"-i\"\n\nL_.str.17:                              ## @.str.17\n\t.asciz\t\"--inverted\"\n\nL_.str.19:                              ## @.str.19\n\t.asciz\t\"regrouping the folder in one file using tar, may be long...\"\n\nL_.str.20:                              ## @.str.20\n\t.asciz\t\"%s.tar\"\n\nL_.str.21:                              ## @.str.21\n\t.asciz\t\"cd %s && tar -cf %s %s &>/dev/null\"\n\nL_.str.24:                              ## @.str.24\n\t.asciz\t\"%s%s\"\n\nL_.str.25:                              ## @.str.25\n\t.asciz\t\"Crypt(C) or Decrypt(d):\"\n\nL_.str.26:                              ## @.str.26\n\t.asciz\t\"\\033[F\\033[J\"\n\nL_.str.27:                              ## @.str.27\n\t.asciz\t\"Password:\"\n\n.zerofill __DATA,__bss,_loadBar.firstCall,1,0 ## @loadBar.firstCall\n.zerofill __DATA,__bss,_loadBar.startingTime,8,3 ## @loadBar.startingTime\nL_.str.29:                              ## @.str.29\n\t.asciz\t\" %3d%% [\"\n\nL_.str.32:                              ## @.str.32\n\t.asciz\t\"] %.0f        \\r\"\n\nL_.str.33:                              ## @.str.33\n\t.asciz\t\"%s(1)\\t\\t\\tcopyright <Pierre-Fran\\303\\247ois Monville>\\t\\t\\t%s(1)\\n\\nNAME\\n\\t%s -- crypt or decrypt any data\\n\\nSYNOPSIS\\n\\t%s [-h | --help] FILE [-s | --standard | KEYFILE]\\n\\nDESCRIPTION\\n\\t(FR) permet de chiffrer et de d\\303\\251chiffrer toutes les donn\\303\\251es entr\\303\\251es en param\\303\\250tre le mot de passe demand\\303\\251 au d\\303\\251but est hash\\303\\251 puis sert de graine pour le PRNG le PRNG permet de fournir une cl\\303\\251 unique \\303\\251gale \\303\\240 la longueur du fichier \\303\\240 coder. La cl\\303\\251 unique subit un xor avec le mot de passe (le mot de passe est r\\303\\251p\\303\\251t\\303\\251 autant de fois que n\\303\\251c\\303\\251ssaire). Le fichier subit un xor avec cette cl\\303\\251 Puis un brouilleur est utilis\\303\\251, il m\\303\\251lange la table des caract\\303\\250res (ascii) en utilisant le PRNG ou en utilisant le keyFile fourni.\\n\\t(EN) Can crypt and decrypt any data given in argument. The password asked is hashed to be used as a seed for the PRNG. The PRNG gives a unique key which has the same length as the source file. The key is xored with the password (the password is repeated as long as necessary). The file is then xored with this new key, then a scrambler is used. It scrambles the ascii table using the PRNG or the keyFile given\\n\\nOPTIONS\\n\\tthe options are as follows:\\n\\n\\t-h | --help\\tfurther help.\\n\\n\\t-s | --standard\\tput the scrambler on off.\\n\\n\\t-i | --inverted\\tinverts the coding/decoding process, first it xors then it scrambles.\\n\\n\\tKEYFILE    \\tthe path to a file which will be used to scramble the substitution's tables and choose in which order they will be used instead of the PRNG only (starting at 2.5 ko for the keyfile is great, however not interesting to be too heavy) \\n\\nEXIT STATUS\\n\\tthe %s program exits 0 on success, and anything else if an error occurs.\\n\\nEXAMPLES\\n\\tthe command:\\t%s file1\\n\\n\\tlets you choose between crypting or decrypting then it will prompt for a password that crypt/decrypt file1 as xfile1 in the same folder, file1 is not modified.\\n\\n\\tthe command:\\t%s file2 keyfile1\\n\\n\\tlets you choose between crypting or decrypting, will prompt for the password that crypt/decrypt file2, uses keyfile1 to generate the scrambler then crypt/decrypt file2 as file2x in the same folder, file2 is not modified.\\n\\n\\tthe command:\\t%s file3 -s\\n\\n\\tlets you choose between crypting or decrypting, will prompt for a password that crypt/decrypt the file without using the scrambler, resulting in using the unique key only.\\n\"\n\nL_.str.34:                              ## @.str.34\n\t.asciz\t\"Version : 2.3\\nUsage : %s [-h | --help] FILE [-s | --standard | -i | --inverted] [KEYFILE]\\nOptions :\\n  -h --help :\\t\\tfurther help\\n  -s --standard :\\tput the scrambler off\\n  -i --inverted :\\tinverts the coding/decoding process\\n  KEYFILE :\\t\\tpath to a keyfile that scrambles the substitution's tables and choose they order instead of the PRNG only\\n\"\n\n\t.align\t4                       ## @str\nL_str:\n\t.asciz\t\"scrambling substitution's tables...\"\n\n\t.align\t4                       ## @str.35\nL_str.35:\n\t.asciz\t\"starting encryption...\"\n\n\t.align\t4                       ## @str.37\nL_str.37:\n\t.asciz\t\"starting decryption...\"\n\n\t.align\t4                       ## @str.40\nL_str.40:\n\t.asciz\t\"error: file's path is not correct, one or several directories and or file are missing\"\n\n\t.align\t4                       ## @str.42\nL_str.42:\n\t.asciz\t\"Done                                                                  \"\n\n\t.align\t4                       ## @str.44\nL_str.44:\n\t.asciz\t\"\\rregrouping the folder in one file using tar... Done          \"\n\n\t.align\t4                       ## @str.46\nL_str.46:\n\t.asciz\t\"\\nerror: unable to tar your file\"\n\n\t.align\t4                       ## @str.48\nL_str.48:\n\t.asciz\t\"error: several trailing '/' in the path of your file\"\n\nL_str.49:                               ## @str.49\n\t.asciz\t\"exiting\"\n\n\t.align\t4                       ## @str.51\nL_str.51:\n\t.asciz\t\"Warning: with the -s|--standard option, the keyfile will not bu used\"\n\n\t.align\t4                       ## @str.52\nL_str.52:\n\t.asciz\t\"Error: Too many arguments\"\n\n\n.subsections_via_symbols\n"], "filenames": ["main.c", "main.s"], "buggy_code_start_loc": [93, 481], "buggy_code_end_loc": [783, 3094], "fixing_code_start_loc": [94, 481], "fixing_code_end_loc": [826, 3178], "type": "CWE-337", "message": "A vulnerability, which was classified as problematic, has been found in enigmaX up to 2.2. This issue affects the function getSeed of the file main.c of the component Scrambling Table Handler. The manipulation leads to predictable seed in pseudo-random number generator (prng). The attack may be initiated remotely. Upgrading to version 2.3 is able to address this issue. The name of the patch is 922bf90ca14a681629ba0b807a997a81d70225b5. It is recommended to upgrade the affected component. The identifier VDB-217181 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2016-15006", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-02T08:15:10.033", "lastModified": "2023-01-09T17:55:11.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in enigmaX up to 2.2. This issue affects the function getSeed of the file main.c of the component Scrambling Table Handler. The manipulation leads to predictable seed in pseudo-random number generator (prng). The attack may be initiated remotely. Upgrading to version 2.3 is able to address this issue. The name of the patch is 922bf90ca14a681629ba0b807a997a81d70225b5. It is recommended to upgrade the affected component. The identifier VDB-217181 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.7, "baseSeverity": "LOW"}, "exploitabilityScore": 2.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 2.6}, "baseSeverity": "LOW", "exploitabilityScore": 4.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-337"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enigmax_project:enigmax:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.3", "matchCriteriaId": "00A852DA-164A-4E3B-A5B6-40FF1DAE5FA3"}]}]}], "references": [{"url": "https://github.com/pfmonville/enigmaX/commit/922bf90ca14a681629ba0b807a997a81d70225b5", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pfmonville/enigmaX/releases/tag/2.3", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217181", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217181", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pfmonville/enigmaX/commit/922bf90ca14a681629ba0b807a997a81d70225b5"}}