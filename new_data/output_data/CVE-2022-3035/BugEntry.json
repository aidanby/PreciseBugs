{"buggy_code": ["<?php\n\nnamespace App\\Helpers;\nuse App\\Models\\Accessory;\nuse App\\Models\\Component;\nuse App\\Models\\Consumable;\nuse App\\Models\\CustomField;\nuse App\\Models\\CustomFieldset;\nuse App\\Models\\Depreciation;\nuse App\\Models\\Setting;\nuse App\\Models\\Statuslabel;\nuse Crypt;\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\nuse Image;\n\nclass Helper\n{\n    /**\n     * Simple helper to invoke the markdown parser\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string\n     */\n    public static function parseEscapedMarkedown($str)\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($str) {\n            return $Parsedown->text(e($str));\n        }\n    }\n\n    /**\n     * The importer has formatted number strings since v3,\n     * so the value might be a string, or an integer.\n     * If it's a number, format it as a string.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string\n     */\n    public static function formatCurrencyOutput($cost)\n    {\n        if (is_numeric($cost)) {\n\n            if (Setting::getSettings()->digit_separator=='1.234,56') {\n                return number_format($cost, 2, ',', '.');\n            }\n            return number_format($cost, 2, '.', ',');\n        }\n        // It's already been parsed.\n        return $cost;\n    }\n\n\n    /**\n     * Static colors for pie charts.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.3]\n     * @return array\n     */\n    public static function defaultChartColors($index = 0)\n    {\n        $colors = [\n            '#008941',\n            '#FF4A46',\n            '#006FA6',\n            '#A30059',\n            '#1CE6FF',\n            '#FFDBE5',\n            '#7A4900',\n            '#0000A6',\n            '#63FFAC',\n            '#B79762',\n            '#004D43',\n            '#8FB0FF',\n            '#997D87',\n            '#5A0007',\n            '#809693',\n            '#FEFFE6',\n            '#1B4400',\n            '#4FC601',\n            '#3B5DFF',\n            '#4A3B53',\n            '#FF2F80',\n            '#61615A',\n            '#BA0900',\n            '#6B7900',\n            '#00C2A0',\n            '#FFAA92',\n            '#FF90C9',\n            '#B903AA',\n            '#D16100',\n            '#DDEFFF',\n            '#000035',\n            '#7B4F4B',\n            '#A1C299',\n            '#300018',\n            '#0AA6D8',\n            '#013349',\n            '#00846F',\n            '#372101',\n            '#FFB500',\n            '#C2FFED',\n            '#A079BF',\n            '#CC0744',\n            '#C0B9B2',\n            '#C2FF99',\n            '#001E09',\n            '#00489C',\n            '#6F0062',\n            '#0CBD66',\n            '#EEC3FF',\n            '#456D75',\n            '#B77B68',\n            '#7A87A1',\n            '#788D66',\n            '#885578',\n            '#FAD09F',\n            '#FF8A9A',\n            '#D157A0',\n            '#BEC459',\n            '#456648',\n            '#0086ED',\n            '#886F4C',\n            '#34362D',\n            '#B4A8BD',\n            '#00A6AA',\n            '#452C2C',\n            '#636375',\n            '#A3C8C9',\n            '#FF913F',\n            '#938A81',\n            '#575329',\n            '#00FECF',\n            '#B05B6F',\n            '#8CD0FF',\n            '#3B9700',\n            '#04F757',\n            '#C8A1A1',\n            '#1E6E00',\n            '#7900D7',\n            '#A77500',\n            '#6367A9',\n            '#A05837',\n            '#6B002C',\n            '#772600',\n            '#D790FF',\n            '#9B9700',\n            '#549E79',\n            '#FFF69F',\n            '#201625',\n            '#72418F',\n            '#BC23FF',\n            '#99ADC0',\n            '#3A2465',\n            '#922329',\n            '#5B4534',\n            '#FDE8DC',\n            '#404E55',\n            '#0089A3',\n            '#CB7E98',\n            '#A4E804',\n            '#324E72',\n            '#6A3A4C',\n            '#83AB58',\n            '#001C1E',\n            '#D1F7CE',\n            '#004B28',\n            '#C8D0F6',\n            '#A3A489',\n            '#806C66',\n            '#222800',\n            '#BF5650',\n            '#E83000',\n            '#66796D',\n            '#DA007C',\n            '#FF1A59',\n            '#8ADBB4',\n            '#1E0200',\n            '#5B4E51',\n            '#C895C5',\n            '#320033',\n            '#FF6832',\n            '#66E1D3',\n            '#CFCDAC',\n            '#D0AC94',\n            '#7ED379',\n            '#012C58',\n            '#7A7BFF',\n            '#D68E01',\n            '#353339',\n            '#78AFA1',\n            '#FEB2C6',\n            '#75797C',\n            '#837393',\n            '#943A4D',\n            '#B5F4FF',\n            '#D2DCD5',\n            '#9556BD',\n            '#6A714A',\n            '#001325',\n            '#02525F',\n            '#0AA3F7',\n            '#E98176',\n            '#DBD5DD',\n            '#5EBCD1',\n            '#3D4F44',\n            '#7E6405',\n            '#02684E',\n            '#962B75',\n            '#8D8546',\n            '#9695C5',\n            '#E773CE',\n            '#D86A78',\n            '#3E89BE',\n            '#CA834E',\n            '#518A87',\n            '#5B113C',\n            '#55813B',\n            '#E704C4',\n            '#00005F',\n            '#A97399',\n            '#4B8160',\n            '#59738A',\n            '#FF5DA7',\n            '#F7C9BF',\n            '#643127',\n            '#513A01',\n            '#6B94AA',\n            '#51A058',\n            '#A45B02',\n            '#1D1702',\n            '#E20027',\n            '#E7AB63',\n            '#4C6001',\n            '#9C6966',\n            '#64547B',\n            '#97979E',\n            '#006A66',\n            '#391406',\n            '#F4D749',\n            '#0045D2',\n            '#006C31',\n            '#DDB6D0',\n            '#7C6571',\n            '#9FB2A4',\n            '#00D891',\n            '#15A08A',\n            '#BC65E9',\n            '#FFFFFE',\n            '#C6DC99',\n            '#203B3C',\n            '#671190',\n            '#6B3A64',\n            '#F5E1FF',\n            '#FFA0F2',\n            '#CCAA35',\n            '#374527',\n            '#8BB400',\n            '#797868',\n            '#C6005A',\n            '#3B000A',\n            '#C86240',\n            '#29607C',\n            '#402334',\n            '#7D5A44',\n            '#CCB87C',\n            '#B88183',\n            '#AA5199',\n            '#B5D6C3',\n            '#A38469',\n            '#9F94F0',\n            '#A74571',\n            '#B894A6',\n            '#71BB8C',\n            '#00B433',\n            '#789EC9',\n            '#6D80BA',\n            '#953F00',\n            '#5EFF03',\n            '#E4FFFC',\n            '#1BE177',\n            '#BCB1E5',\n            '#76912F',\n            '#003109',\n            '#0060CD',\n            '#D20096',\n            '#895563',\n            '#29201D',\n            '#5B3213',\n            '#A76F42',\n            '#89412E',\n            '#1A3A2A',\n            '#494B5A',\n            '#A88C85',\n            '#F4ABAA',\n            '#A3F3AB',\n            '#00C6C8',\n            '#EA8B66',\n            '#958A9F',\n            '#BDC9D2',\n            '#9FA064',\n            '#BE4700',\n            '#658188',\n            '#83A485',\n            '#453C23',\n            '#47675D',\n            '#3A3F00',\n            '#061203',\n            '#DFFB71',\n            '#868E7E',\n            '#98D058',\n            '#6C8F7D',\n            '#D7BFC2',\n            '#3C3E6E',\n            '#D83D66',\n            '#2F5D9B',\n            '#6C5E46',\n            '#D25B88',\n            '#5B656C',\n            '#00B57F',\n            '#545C46',\n            '#866097',\n            '#365D25',\n            '#252F99',\n            '#00CCFF',\n            '#674E60',\n            '#FC009C',\n            '#92896B',\n        ];\n\n\n\n        return $colors[$index];\n    }\n\n    /**\n     * Increases or decreases the brightness of a color by a percentage of the current brightness.\n     *\n     * @param   string  $hexCode        Supported formats: `#FFF`, `#FFFFFF`, `FFF`, `FFFFFF`\n     * @param   float   $adjustPercent  A number between -1 and 1. E.g. 0.3 = 30% lighter; -0.4 = 40% darker.\n     *\n     * @return  string\n     */\n    public static function adjustBrightness($hexCode, $adjustPercent)\n    {\n        $hexCode = ltrim($hexCode, '#');\n\n        if (strlen($hexCode) == 3) {\n            $hexCode = $hexCode[0].$hexCode[0].$hexCode[1].$hexCode[1].$hexCode[2].$hexCode[2];\n        }\n\n        $hexCode = array_map('hexdec', str_split($hexCode, 2));\n\n        foreach ($hexCode as &$color) {\n            $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;\n            $adjustAmount = ceil($adjustableLimit * $adjustPercent);\n\n            $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);\n        }\n\n        return '#'.implode($hexCode);\n    }\n\n    /**\n     * Static background (highlight) colors for pie charts\n     * This is inelegant, and could be refactored later.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.2]\n     * @return array\n     */\n    public static function chartBackgroundColors()\n    {\n        $colors = [\n            '#f56954',\n            '#00a65a',\n            '#f39c12',\n            '#00c0ef',\n            '#3c8dbc',\n            '#d2d6de',\n            '#3c8dbc',\n            '#3c8dbc',\n            '#3c8dbc',\n\n        ];\n\n        return $colors;\n    }\n\n\n    /**\n     * Format currency using comma for thousands until local info is property used.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.7]\n     * @return string\n     */\n    public static function ParseFloat($floatString)\n    {\n        /*******\n         * \n         * WARNING: This does conversions based on *locale* - a Unix-ey-like thing.\n         * \n         * Everything else in the system tends to convert based on the Snipe-IT settings\n         * \n         * So it's very likely this is *not* what you want - instead look for the new\n         * \n         * ParseCurrency($currencyString)\n         * \n         * Which should be directly below here\n         * \n         */\n        $LocaleInfo = localeconv();\n        $floatString = str_replace(',', '', $floatString);\n        $floatString = str_replace($LocaleInfo['decimal_point'], '.', $floatString);\n        // Strip Currency symbol\n        // If no currency symbol is set, default to $ because Murica\n        $currencySymbol = $LocaleInfo['currency_symbol'];\n        if (empty($currencySymbol)) {\n            $currencySymbol = '$';\n        }\n\n        $floatString = str_replace($currencySymbol, '', $floatString);\n\n        return floatval($floatString);\n    }\n    \n    /**\n     * Format currency using comma or period for thousands, and period or comma for decimal, based on settings.\n     * \n     * @author [B. Wetherington] [<bwetherington@grokability.com>]\n     * @since [v5.2]\n     * @return Float\n     */\n    public static function ParseCurrency($currencyString) {\n        $without_currency = str_replace(Setting::getSettings()->default_currency, '', $currencyString); //generally shouldn't come up, since we don't do this in fields, but just in case it does...\n        if(Setting::getSettings()->digit_separator=='1.234,56') {\n            //EU format\n            $without_thousands = str_replace('.', '', $without_currency);\n            $corrected_decimal = str_replace(',', '.', $without_thousands);\n        } else {\n            $without_thousands = str_replace(',', '', $without_currency);\n            $corrected_decimal = $without_thousands;  // decimal is already OK\n        }\n        return floatval($corrected_decimal);\n    }\n\n    /**\n     * Get the list of status labels in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function statusLabelList()\n    {\n        $statuslabel_list = ['' => trans('general.select_statuslabel')] + Statuslabel::orderBy('default_label', 'desc')->orderBy('name', 'asc')->orderBy('deployable', 'desc')\n                ->pluck('name', 'id')->toArray();\n\n        return $statuslabel_list;\n    }\n\n    /**\n     * Get the list of deployable status labels in an array to make a dropdown menu\n     *\n     * @todo This should probably be a selectlist, same as the other endpoints\n     * and we should probably add to the API controllers to make sure that\n     * the status_id submitted is actually really deployable.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.1.0]\n     * @return array\n     */\n    public static function deployableStatusLabelList()\n    {\n        $statuslabel_list = Statuslabel::where('deployable', '=', '1')->orderBy('default_label', 'desc')\n                ->orderBy('name', 'asc')\n                ->orderBy('deployable', 'desc')\n                ->pluck('name', 'id')->toArray();\n\n        return $statuslabel_list;\n    }\n\n    /**\n     * Get the list of status label types in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function statusTypeList()\n    {\n        $statuslabel_types =\n              ['' => trans('admin/hardware/form.select_statustype')]\n            + ['deployable' => trans('admin/hardware/general.deployable')]\n            + ['pending' => trans('admin/hardware/general.pending')]\n            + ['undeployable' => trans('admin/hardware/general.undeployable')]\n            + ['archived' => trans('admin/hardware/general.archived')];\n\n        return $statuslabel_types;\n    }\n\n    /**\n     * Get the list of depreciations in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function depreciationList()\n    {\n        $depreciation_list = ['' => 'Do Not Depreciate'] + Depreciation::orderBy('name', 'asc')\n                ->pluck('name', 'id')->toArray();\n\n        return $depreciation_list;\n    }\n\n    /**\n     * Get the list of category types in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function categoryTypeList()\n    {\n        $category_types = [\n            '' => '',\n            'accessory' => 'Accessory',\n            'asset' => 'Asset',\n            'consumable' => 'Consumable',\n            'component' => 'Component',\n            'license' => 'License',\n        ];\n\n        return $category_types;\n    }\n\n    /**\n     * Get the list of custom fields in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function customFieldsetList()\n    {\n        $customfields = ['' => trans('admin/models/general.no_custom_field')] + CustomFieldset::pluck('name', 'id')->toArray();\n\n        return  $customfields;\n    }\n\n    /**\n     * Get the list of custom field formats in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.4]\n     * @return array\n     */\n    public static function predefined_formats()\n    {\n        $keys = array_keys(CustomField::PREDEFINED_FORMATS);\n        $stuff = array_combine($keys, $keys);\n\n        return $stuff;\n    }\n\n    /**\n     * Get the list of barcode dimensions\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.3]\n     * @return array\n     */\n    public static function barcodeDimensions($barcode_type = 'QRCODE')\n    {\n        if ($barcode_type == 'C128') {\n            $size['height'] = '-1';\n            $size['width'] = '-10';\n        } elseif ($barcode_type == 'PDF417') {\n            $size['height'] = '-3';\n            $size['width'] = '-10';\n        } else {\n            $size['height'] = '-3';\n            $size['width'] = '-3';\n        }\n\n        return $size;\n    }\n\n    /**\n     * Generates a random string\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public static function generateRandomString($length = 10)\n    {\n        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $charactersLength = strlen($characters);\n        $randomString = '';\n        for ($i = 0; $i < $length; $i++) {\n            $randomString .= $characters[rand(0, $charactersLength - 1)];\n        }\n\n        return $randomString;\n    }\n\n    /**\n     * This nasty little method gets the low inventory info for the\n     * alert dropdown\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public static function checkLowInventory()\n    {\n        $consumables = Consumable::withCount('consumableAssignments as consumable_assignments_count')->whereNotNull('min_amt')->get();\n        $accessories = Accessory::withCount('users as users_count')->whereNotNull('min_amt')->get();\n        $components = Component::whereNotNull('min_amt')->get();\n\n        $avail_consumables = 0;\n        $items_array = [];\n        $all_count = 0;\n\n        foreach ($consumables as $consumable) {\n            $avail = $consumable->numRemaining();\n            if ($avail < ($consumable->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($consumable->qty > 0) {\n                    $percent = number_format((($avail / $consumable->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $consumable->id;\n                $items_array[$all_count]['name'] = $consumable->name;\n                $items_array[$all_count]['type'] = 'consumables';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $consumable->min_amt;\n                $all_count++;\n            }\n        }\n\n        foreach ($accessories as $accessory) {\n            $avail = $accessory->qty - $accessory->users_count;\n            if ($avail < ($accessory->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($accessory->qty > 0) {\n                    $percent = number_format((($avail / $accessory->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $accessory->id;\n                $items_array[$all_count]['name'] = $accessory->name;\n                $items_array[$all_count]['type'] = 'accessories';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $accessory->min_amt;\n                $all_count++;\n            }\n        }\n\n        foreach ($components as $component) {\n            $avail = $component->numRemaining();\n            if ($avail < ($component->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($component->qty > 0) {\n                    $percent = number_format((($avail / $component->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $component->id;\n                $items_array[$all_count]['name'] = $component->name;\n                $items_array[$all_count]['type'] = 'components';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $component->min_amt;\n                $all_count++;\n            }\n        }\n\n        return $items_array;\n    }\n\n    /**\n     * Check if the file is an image, so we can show a preview\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @param File $file\n     * @return string | Boolean\n     */\n    public static function checkUploadIsImage($file)\n    {\n        $finfo = @finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n        $filetype = @finfo_file($finfo, $file);\n        finfo_close($finfo);\n\n        if (($filetype == 'image/jpeg') || ($filetype == 'image/jpg') || ($filetype == 'image/png') || ($filetype == 'image/bmp') || ($filetype == 'image/gif')) {\n            return $filetype;\n        }\n\n        return false;\n    }\n\n    /**\n     * Walks through the permissions in the permissions config file and determines if\n     * permissions are granted based on a $selected_arr array.\n     *\n     * The $permissions array is a multidimensional array broke down by section.\n     * (Licenses, Assets, etc)\n     *\n     * The $selected_arr should be a flattened array that contains just the\n     * corresponding permission name and a true or false boolean to determine\n     * if that group/user has been granted that permission.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net]\n     * @param array $permissions\n     * @param array $selected_arr\n     * @since [v1.0]\n     * @return array\n     */\n    public static function selectedPermissionsArray($permissions, $selected_arr = [])\n    {\n        $permissions_arr = [];\n\n        foreach ($permissions as $permission) {\n            for ($x = 0; $x < count($permission); $x++) {\n                $permission_name = $permission[$x]['permission'];\n\n                if ($permission[$x]['display'] === true) {\n                    if ($selected_arr) {\n                        if (array_key_exists($permission_name, $selected_arr)) {\n                            $permissions_arr[$permission_name] = $selected_arr[$permission_name];\n                        } else {\n                            $permissions_arr[$permission_name] = '0';\n                        }\n                    } else {\n                        $permissions_arr[$permission_name] = '0';\n                    }\n                }\n            }\n        }\n\n        return $permissions_arr;\n    }\n\n    /**\n     * Introspects into the model validation to see if the field passed is required.\n     * This is used by the blades to add a required class onto the HTML element.\n     * This isn't critical, but is helpful to keep form fields in sync with the actual\n     * model level validation.\n     *\n     * This does not currently handle form request validation requiredness :(\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public static function checkIfRequired($class, $field)\n    {\n        $rules = $class::rules();\n        foreach ($rules as $rule_name => $rule) {\n            if ($rule_name == $field) {\n                if (strpos($rule, 'required') === false) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Check to see if the given key exists in the array, and trim excess white space before returning it\n     *\n     * @author Daniel Melzter\n     * @since 3.0\n     * @param $array array\n     * @param $key string\n     * @param $default string\n     * @return string\n     */\n    public static function array_smart_fetch(array $array, $key, $default = '')\n    {\n        array_change_key_case($array, CASE_LOWER);\n\n        return array_key_exists(strtolower($key), array_change_key_case($array)) ? e(trim($array[$key])) : $default;\n    }\n\n    /**\n     * Gracefully handle decrypting encrypted fields (custom fields, etc).\n     *\n     * @todo allow this to handle more than just strings (arrays, etc)\n     *\n     * @author A. Gianotto\n     * @since 3.6\n     * @param CustomField $field\n     * @param string $string\n     * @return string\n     */\n    public static function gracefulDecrypt(CustomField $field, $string)\n    {\n        if ($field->isFieldDecryptable($string)) {\n            try {\n                Crypt::decrypt($string);\n\n                return Crypt::decrypt($string);\n            } catch (DecryptException $e) {\n                return 'Error Decrypting: '.$e->getMessage();\n            }\n            }\n\n        return $string;\n    }\n    public static function formatStandardApiResponse($status, $payload = null, $messages = null)\n\n    {\n        $array['status'] = $status;\n        $array['messages'] = $messages;\n        if (($messages) && (is_array($messages)) && (count($messages) > 0)) {\n            $array['messages'] = $messages;\n        }\n        ($payload) ? $array['payload'] = $payload : $array['payload'] = null;\n\n        return $array;\n    }\n\n    /*\n    Possible solution for unicode fieldnames\n    */\n    public static function make_slug($string)\n    {\n        return preg_replace('/\\s+/u', '_', trim($string));\n    }\n\n    /**\n     * Return an array (or null) of the the raw and formatted date object for easy use in\n     * the API and the bootstrap table listings.\n     *\n     * @param $date\n     * @param $type\n     * @param $array\n     * @return array|string|null\n     */\n\n    public static function getFormattedDateObject($date, $type = 'datetime', $array = true)\n    {\n        if ($date == '') {\n            return null;\n        }\n\n        $settings = Setting::getSettings();\n\n        /**\n         * Wrap this in a try/catch so that if Carbon crashes, for example if the $date value\n         * isn't actually valid, we don't crash out completely.\n         *\n         * While this *shouldn't* typically happen since we validate dates before entering them\n         * into the database (and we use date/datetime fields for native fields in the system),\n         * it is a possible scenario that a custom field could be created as an \"ANY\" field, data gets\n         * added, and then the custom field format gets edited later. If someone put bad data in the\n         * database before then - or if they manually edited the field's value - it will crash.\n         *\n         */\n\n\n        try {\n            $tmp_date = new \\Carbon($date);\n\n            if ($type == 'datetime') {\n                $dt['datetime'] = $tmp_date->format('Y-m-d H:i:s');\n                $dt['formatted'] = $tmp_date->format($settings->date_display_format.' '.$settings->time_display_format);\n            } else {\n                $dt['date'] = $tmp_date->format('Y-m-d');\n                $dt['formatted'] = $tmp_date->format($settings->date_display_format);\n            }\n\n            if ($array == 'true') {\n                return $dt;\n            }\n\n            return $dt['formatted'];\n\n        } catch (\\Exception $e) {\n            \\Log::warning($e);\n            return $date.' (Invalid '.$type.' value.)';\n        }\n\n    }\n\n    // Nicked from Drupal :)\n    // Returns a file size limit in bytes based on the PHP upload_max_filesize\n    // and post_max_size\n    public static function file_upload_max_size()\n    {\n        static $max_size = -1;\n\n        if ($max_size < 0) {\n\n            // Start with post_max_size.\n            $post_max_size = self::parse_size(ini_get('post_max_size'));\n            if ($post_max_size > 0) {\n                $max_size = $post_max_size;\n            }\n\n            // If upload_max_size is less, then reduce. Except if upload_max_size is\n            // zero, which indicates no limit.\n            $upload_max = self::parse_size(ini_get('upload_max_filesize'));\n            if ($upload_max > 0 && $upload_max < $max_size) {\n                $max_size = $upload_max;\n            }\n        }\n\n        return $max_size;\n    }\n\n    public static function file_upload_max_size_readable()\n    {\n        static $max_size = -1;\n\n        if ($max_size < 0) {\n            // Start with post_max_size.\n            $post_max_size = self::parse_size(ini_get('post_max_size'));\n            if ($post_max_size > 0) {\n                $max_size = ini_get('post_max_size');\n            }\n\n            // If upload_max_size is less, then reduce. Except if upload_max_size is\n            // zero, which indicates no limit.\n            $upload_max = self::parse_size(ini_get('upload_max_filesize'));\n\n            if ($upload_max > 0 && $upload_max < $post_max_size) {\n                $max_size = ini_get('upload_max_filesize');\n            }\n        }\n\n        return $max_size;\n    }\n\n    public static function parse_size($size)\n    {\n        $unit = preg_replace('/[^bkmgtpezy]/i', '', $size); // Remove the non-unit characters from the size.\n        $size = preg_replace('/[^0-9\\.]/', '', $size); // Remove the non-numeric characters from the size.\n        if ($unit) {\n            // Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.\n            return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));\n        } else {\n            return round($size);\n        }\n    }\n\n    public static function filetype_icon($filename)\n    {\n        $extension = substr(strrchr($filename, '.'), 1);\n\n        $allowedExtensionMap = [\n            // Images\n            'jpg'   => 'far fa-image',\n            'jpeg'   => 'far fa-image',\n            'gif'   => 'far fa-image',\n            'png'   => 'far fa-image',\n            // word\n            'doc'   => 'far fa-file-word',\n            'docx'   => 'far fa-file-word',\n            // Excel\n            'xls'   => 'far fa-file-excel',\n            'xlsx'   => 'far fa-file-excel',\n            // archive\n            'zip'   => 'fas fa-file-archive',\n            'rar'   => 'fas fa-file-archive',\n            //Text\n            'txt'   => 'far fa-file-alt',\n            'rtf'   => 'far fa-file-alt',\n            'xml'   => 'far fa-file-alt',\n            // Misc\n            'pdf'   => 'far fa-file-pdf',\n            'lic'   => 'far fa-save',\n        ];\n\n        if ($extension && array_key_exists($extension, $allowedExtensionMap)) {\n            return $allowedExtensionMap[$extension];\n        }\n\n        return 'far fa-file';\n    }\n\n    public static function show_file_inline($filename)\n    {\n        $extension = substr(strrchr($filename, '.'), 1);\n\n        if ($extension) {\n            switch ($extension) {\n                case 'jpg':\n                case 'jpeg':\n                case 'gif':\n                case 'png':\n                    return true;\n                    break;\n                default:\n                    return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generate a random encrypted password.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return string\n     */\n    public static function generateEncyrptedPassword(): string\n    {\n        return bcrypt(self::generateUnencryptedPassword());\n    }\n\n    /**\n     * Get a random unencrypted password.\n     *\n     * @author Steffen Buehl <sb@sbuehl.com>\n     *\n     * @since 5.0.0\n     *\n     * @return string\n     */\n    public static function generateUnencryptedPassword(): string\n    {\n        $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n        $password = '';\n        for ($i = 0; $i < 20; $i++) {\n            $password .= substr($chars, random_int(0, strlen($chars) - 1), 1);\n        }\n\n        return $password;\n    }\n\n    /**\n     * Process base64 encoded image data and save it on supplied path\n     *\n     * @param string $image_data base64 encoded image data with mime type\n     * @param string $save_path path to a folder where the image should be saved\n     * @return string path to uploaded image or false if something went wrong\n     */\n    public static function processUploadedImage(String $image_data, String $save_path)\n    {\n        if ($image_data == null || $save_path == null) {\n            return false;\n        }\n\n        // After modification, the image is prefixed by mime info like the following:\n        // data:image/jpeg;base64,; This causes the image library to be unhappy, so we need to remove it.\n        $header = explode(';', $image_data, 2)[0];\n        // Grab the image type from the header while we're at it.\n        $extension = substr($header, strpos($header, '/') + 1);\n        // Start reading the image after the first comma, postceding the base64.\n        $image = substr($image_data, strpos($image_data, ',') + 1);\n\n        $file_name = str_random(25).'.'.$extension;\n\n        $directory = public_path($save_path);\n        // Check if the uploads directory exists.  If not, try to create it.\n        if (! file_exists($directory)) {\n            mkdir($directory, 0755, true);\n        }\n\n        $path = public_path($save_path.$file_name);\n\n        try {\n            Image::make($image)->resize(500, 500, function ($constraint) {\n                $constraint->aspectRatio();\n                $constraint->upsize();\n            })->save($path);\n        } catch (\\Exception $e) {\n            return false;\n        }\n\n        return $file_name;\n    }\n\n    public static function formatFilesizeUnits($bytes)\n    {\n        if ($bytes >= 1073741824)\n        {\n            $bytes = number_format($bytes / 1073741824, 2) . ' GB';\n        }\n        elseif ($bytes >= 1048576)\n        {\n            $bytes = number_format($bytes / 1048576, 2) . ' MB';\n        }\n        elseif ($bytes >= 1024)\n        {\n            $bytes = number_format($bytes / 1024, 2) . ' KB';\n        }\n        elseif ($bytes > 1)\n        {\n            $bytes = $bytes . ' bytes';\n        }\n        elseif ($bytes == 1)\n        {\n            $bytes = $bytes . ' byte';\n        }\n        else\n        {\n            $bytes = '0 bytes';\n        }\n\n        return $bytes;\n    }\n    public static function SettingUrls(){\n        $settings=['#','fields.index', 'statuslabels.index', 'models.index', 'categories.index', 'manufacturers.index', 'suppliers.index', 'departments.index', 'locations.index', 'companies.index', 'depreciations.index'];\n\n        return $settings;\n        }\n\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Model for Accessories.\n *\n * @version    v1.0\n */\nclass Accessory extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\AccessoryPresenter::class;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    use SoftDeletes;\n\n    protected $table = 'accessories';\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'requestable' => 'boolean',    ];\n\n    use Searchable;\n    use Acceptable;\n    \n    /**\n     * The attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'model_number', 'order_number', 'purchase_date', 'notes'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableRelations = [\n        'category'     => ['name'],\n        'company'      => ['name'],\n        'manufacturer' => ['name'],\n        'supplier'     => ['name'],\n        'location'     => ['name'],\n    ];\n\n    /**\n    * Accessory validation rules\n    */\n    public $rules = [\n        'name'              => 'required|min:3|max:255',\n        'qty'               => 'required|integer|min:1',\n        'category_id'       => 'required|integer|exists:categories,id',\n        'company_id'        => 'integer|nullable',\n        'min_amt'           => 'integer|min:0|nullable',\n        'purchase_cost'     => 'numeric|nullable|gte:0',\n    ];\n\n\n    /**\n    * Whether the model should inject it's identifier to the unique\n    * validation rules before attempting validation. If this property\n    * is not set in the model it will default to true.\n    *\n     * @var bool\n    */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_id',\n        'company_id',\n        'location_id',\n        'name',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'model_number',\n        'manufacturer_id',\n        'supplier_id',\n        'image',\n        'qty',\n        'min_amt',\n        'requestable',\n        'notes',\n    ];\n\n\n\n    /**\n     * Establishes the accessory -> supplier relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n\n    /**\n     * Sets the requestable attribute on the accessory\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return void\n     */\n    public function setRequestableAttribute($value)\n    {\n        if ($value == '') {\n            $value = null;\n        }\n        $this->attributes['requestable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Establishes the accessory -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the accessory -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n    /**\n     * Establishes the accessory -> category relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id')->where('category_type', '=', 'accessory');\n    }\n\n    /**\n     * Returns the action logs associated with the accessory\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')->where('item_type', self::class)->orderBy('created_at', 'desc')->withTrashed();\n    }\n\n    /**\n     * Get the LAST checkout for this accessory.\n     * \n     * This is kinda gross, but is necessary for how the accessory\n     * pivot stuff works for now.\n     *\n     * It looks like we should be able to use ->first() here and\n     * return an object instead of a collection, but we actually\n     * cannot.\n     *\n     * In short, you cannot execute the query defined when you're eager loading.\n     * and in order to avoid 1001 query problems when displaying the most\n     * recent checkout note, we have to eager load this.\n     *\n     * This means we technically return a collection of one here, and then\n     * in the controller, we convert that collection to an array, so we can\n     * use it in the transformer to display only the notes of the LAST\n     * checkout.\n     *\n     * It's super-mega-assy, but it's the best I could do for now.\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @since v5.0.0\n     *\n     * @see \\App\\Http\\Controllers\\Api\\AccessoriesController\\checkedout()\n     */\n    public function lastCheckout()\n    {\n        return $this->assetlog()->where('action_type', '=', 'checkout')->take(1);\n    }\n\n\n    /**\n     * Sets the full image url\n     *\n     * @todo this should probably be moved out of the model and into a\n     * presenter or service provider\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getImageUrl()\n    {\n        if ($this->image) {\n            return Storage::disk('public')->url(app('accessories_upload_path').$this->image);\n        }\n        return false;\n\n    }\n\n    /**\n     * Establishes the accessory -> users relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function users()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'accessories_users', 'accessory_id', 'assigned_to')->withPivot('id', 'created_at', 'note')->withTrashed();\n    }\n\n    /**\n     * Checks whether or not the accessory has users\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return int\n     */\n    public function hasUsers()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'accessories_users', 'accessory_id', 'assigned_to')->count();\n    }\n\n    /**\n     * Establishes the accessory -> manufacturer relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Determins whether or not an email should be sent for checkin/checkout of this\n     * accessory based on the category it belongs to.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determines whether or not the accessory should require the user to\n     * accept it via email.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getEula()\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($this->category->eula_text) {\n            return $Parsedown->text(e($this->category->eula_text));\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->category->use_default_eula == '1')) {\n            return $Parsedown->text(e(Setting::getSettings()->default_eula_text));\n        }\n\n            return null;\n    }\n\n     /**\n     * Check how many items within an accessory are checked out\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return int\n     */\n    public function numCheckedOut()\n    {\n        $checkedout = 0;\n        $checkedout = $this->users->count();\n\n        return $checkedout;\n    }\n\n    /**\n     * Check how many items of an accessory remain\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return int\n     */\n    public function numRemaining()\n    {\n        $checkedout = $this->users->count();\n        $total = $this->qty;\n        $remaining = $total - $checkedout;\n\n        return $remaining;\n    }\n\n    /**\n    * Query builder scope to order on company\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies', 'accessories.company_id', '=', 'companies.id')\n        ->orderBy('companies.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on category\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->leftJoin('categories', 'accessories.category_id', '=', 'categories.id')\n        ->orderBy('categories.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations', 'accessories.location_id', '=', 'locations.id')\n        ->orderBy('locations.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on manufacturer\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'accessories.manufacturer_id', '=', 'manufacturers.id')->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on supplier\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers', 'accessories.supplier_id', '=', 'suppliers.id')->orderBy('suppliers.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Events\\AssetCheckedOut;\nuse App\\Events\\CheckoutableCheckedOut;\nuse App\\Exceptions\\CheckoutNotAllowed;\nuse App\\Http\\Traits\\UniqueSerialTrait;\nuse App\\Http\\Traits\\UniqueUndeletedTrait;\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse AssetPresenter;\nuse Auth;\nuse Carbon\\Carbon;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Model for Assets.\n *\n * @version    v1.0\n */\nclass Asset extends Depreciable\n{\n\n    protected $presenter = \\App\\Presenters\\AssetPresenter::class;\n\n    use CompanyableTrait;\n    use HasFactory, Loggable, Requestable, Presentable, SoftDeletes, ValidatingTrait, UniqueUndeletedTrait, UniqueSerialTrait;\n\n    const LOCATION = 'location';\n    const ASSET = 'asset';\n    const USER = 'user';\n\n    use Acceptable;\n\n    /**\n     * Run after the checkout acceptance was declined by the user\n     * \n     * @param  User   $acceptedBy\n     * @param  string $signature\n     */ \n    public function declinedCheckout(User $declinedBy, $signature)\n    {\n      $this->assigned_to = null;\n      $this->assigned_type = null;\n      $this->accepted = null;      \n      $this->save();        \n    }\n\n    /**\n    * The database table used by the model.\n    *\n    * @var string\n    */\n    protected $table = 'assets';\n\n    /**\n    * Whether the model should inject it's identifier to the unique\n    * validation rules before attempting validation. If this property\n    * is not set in the model it will default to true.\n    *\n     * @var bool\n    */\n    protected $injectUniqueIdentifier = true;\n\n    // We set these as protected dates so that they will be easily accessible via Carbon\n    protected $dates = [\n        'created_at',\n        'updated_at',\n        'deleted_at',\n        'purchase_date',\n        'last_checkout',\n        'expected_checkin',\n        'last_audit_date',\n        'next_audit_date'\n    ];\n\n\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'last_checkout' => 'datetime',\n        'expected_checkin' => 'datetime',\n        'last_audit_date' => 'datetime',\n        'next_audit_date' => 'datetime',\n        'model_id'       => 'integer',\n        'status_id'      => 'integer',\n        'company_id'     => 'integer',\n        'location_id'    => 'integer',\n        'rtd_company_id' => 'integer',\n        'supplier_id'    => 'integer',\n    ];\n\n    protected $rules = [\n        'name'            => 'max:255|nullable',\n        'model_id'        => 'required|integer|exists:models,id',\n        'status_id'       => 'required|integer|exists:status_labels,id',\n        'company_id'      => 'integer|nullable',\n        'warranty_months' => 'numeric|nullable|digits_between:0,240',\n        'physical'        => 'numeric|max:1|nullable',\n        'checkout_date'   => 'date|max:10|min:10|nullable',\n        'checkin_date'    => 'date|max:10|min:10|nullable',\n        'supplier_id'     => 'exists:suppliers,id|numeric|nullable',\n        'location_id'     => 'exists:locations,id|nullable',\n        'rtd_location_id' => 'exists:locations,id|nullable',\n        'asset_tag'       => 'required|min:1|max:255|unique_undeleted',\n        'status'          => 'integer',\n        'serial'          => 'unique_serial|nullable',\n        'purchase_cost'   => 'numeric|nullable|gte:0',\n        'next_audit_date' => 'date|nullable',\n        'last_audit_date' => 'date|nullable',\n        'supplier_id'     => 'exists:suppliers,id|nullable',\n    ];\n\n  /**\n   * The attributes that are mass assignable.\n   *\n   * @var array\n   */\n    protected $fillable = [\n        'asset_tag',\n        'assigned_to',\n        'assigned_type',\n        'company_id',\n        'image',\n        'location_id',\n        'model_id',\n        'name',\n        'notes',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'rtd_location_id',\n        'serial',\n        'status_id',\n        'supplier_id',\n        'warranty_months',\n        'requestable',\n        'last_checkout',\n        'expected_checkin',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableAttributes = [\n      'name', \n      'asset_tag', \n      'serial', \n      'order_number', \n      'purchase_cost', \n      'notes', \n      'created_at',\n      'updated_at',      \n      'purchase_date', \n      'expected_checkin', \n      'next_audit_date', \n      'last_audit_date',\n    ];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableRelations = [\n        'assetstatus'        => ['name'],\n        'supplier'           => ['name'],\n        'company'            => ['name'],\n        'defaultLoc'         => ['name'],\n        'location'           => ['name'],\n        'model'              => ['name', 'model_number'],\n        'model.category'     => ['name'],\n        'model.manufacturer' => ['name'],\n    ];\n\n\n    /**\n     * This handles the custom field validation for assets\n     *\n     * @var array\n     */\n    public function save(array $params = [])\n    {\n        if ($this->model_id != '') {\n            $model = AssetModel::find($this->model_id);\n\n            if (($model) && ($model->fieldset)) {\n\n                foreach ($model->fieldset->fields as $field){\n                    if($field->format == 'BOOLEAN'){\n                        $this->{$field->db_column} = filter_var($this->{$field->db_column}, FILTER_VALIDATE_BOOLEAN);\n                    }\n                }\n\n                $this->rules += $model->fieldset->validation_rules();\n\n                foreach ($this->model->fieldset->fields as $field){\n                    if($field->format == 'BOOLEAN'){\n                        $this->{$field->db_column} = filter_var($this->{$field->db_column}, FILTER_VALIDATE_BOOLEAN);\n                    }\n                }\n            }\n        }\n\n\n\n        return parent::save($params);\n    }\n\n\n    public function getDisplayNameAttribute()\n    {\n        return $this->present()->name();\n    }\n\n    /**\n     * Returns the warranty expiration date as Carbon object\n     * @return \\Carbon|null\n     */\n    public function getWarrantyExpiresAttribute()\n    {\n        if (isset($this->attributes['warranty_months']) && isset($this->attributes['purchase_date'])) {\n            if (is_string($this->attributes['purchase_date']) || is_string($this->attributes['purchase_date'])) {\n                $purchase_date = \\Carbon\\Carbon::parse($this->attributes['purchase_date']);\n            } else {\n                $purchase_date = \\Carbon\\Carbon::instance($this->attributes['purchase_date']);\n            }\n            $purchase_date->setTime(0, 0, 0);\n\n            return $purchase_date->addMonths((int) $this->attributes['warranty_months']);\n        }\n\n        return null;\n    }\n\n\n    /**\n     * Establishes the asset -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Determines if an asset is available for checkout.\n     * This checks to see if the it's checked out to an invalid (deleted) user\n     * OR if the assigned_to and deleted_at fields on the asset are empty AND\n     * that the status is deployable\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function availableForCheckout()\n    {\n\n        // This asset is not currently assigned to anyone and is not deleted...\n        if ((! $this->assigned_to) && (! $this->deleted_at)) {\n\n            // The asset status is not archived and is deployable\n            if (($this->assetstatus) && ($this->assetstatus->archived == '0')\n                && ($this->assetstatus->deployable == '1')) \n            {\n                return true;\n\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Checks the asset out to the target\n     *\n     * @todo The admin parameter is never used. Can probably be removed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @param User $user\n     * @param User $admin\n     * @param Carbon $checkout_at\n     * @param Carbon $expected_checkin\n     * @param string $note\n     * @param null $name\n     * @return bool\n     * @since [v3.0]\n     * @return bool\n     */\n    public function checkOut($target, $admin = null, $checkout_at = null, $expected_checkin = null, $note = null, $name = null, $location = null)\n    {\n        if (! $target) {\n            return false;\n        }\n        if ($this->is($target)) {\n            throw new CheckoutNotAllowed('You cannot check an asset out to itself.');\n        }\n\n        if ($expected_checkin) {\n            $this->expected_checkin = $expected_checkin;\n        }\n\n        $this->last_checkout = $checkout_at;\n\n        $this->assignedTo()->associate($target);\n\n\n        if ($name != null) {\n            $this->name = $name;\n        }\n\n        if ($location != null) {\n            $this->location_id = $location;\n        } else {\n            if (isset($target->location)) {\n                $this->location_id = $target->location->id;\n            }\n            if ($target instanceof Location) {\n                $this->location_id = $target->id;\n            }\n        }\n\n        if ($this->save()) {\n            if (is_int($admin)) {\n                $checkedOutBy = User::findOrFail($admin);\n            } elseif (get_class($admin) === \\App\\Models\\User::class) {\n                $checkedOutBy = $admin;\n            } else {\n                $checkedOutBy = Auth::user();\n            }\n            event(new CheckoutableCheckedOut($this, $target, $checkedOutBy, $note));\n\n            $this->increment('checkout_counter', 1);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the detailedNameAttribute\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getDetailedNameAttribute()\n    {\n        if ($this->assignedto) {\n            $user_name = $this->assignedto->present()->name();\n        } else {\n            $user_name = 'Unassigned';\n        }\n\n        return $this->asset_tag.' - '.$this->name.' ('.$user_name.') '.($this->model) ? $this->model->name : '';\n    }\n\n    /**\n     * Pulls in the validation rules\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public function validationRules()\n    {\n        return $this->rules;\n    }\n\n\n    /**\n     * Establishes the asset -> depreciation relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function depreciation()\n    {\n        return $this->model->belongsTo(\\App\\Models\\Depreciation::class, 'depreciation_id');\n    }\n\n\n    /**\n     * Get components assigned to this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function components()\n    {\n        return $this->belongsToMany('\\App\\Models\\Component', 'components_assets', 'asset_id', 'component_id')->withPivot('id', 'assigned_qty', 'created_at')->withTrashed();\n    }\n\n\n    /**\n     * Get depreciation attribute from associated asset model\n     *\n     * @todo Is this still needed?\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function get_depreciation()\n    {\n        if (($this->model) && ($this->model->depreciation)) {\n            return $this->model->depreciation;\n        }\n    }\n\n\n    /**\n     * Get uploads for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function uploads()\n    {\n        return $this->hasMany('\\App\\Models\\Actionlog', 'item_id')\n                  ->where('item_type', '=', Asset::class)\n                  ->where('action_type', '=', 'uploaded')\n                  ->whereNotNull('filename')\n                  ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Determines whether the asset is checked out to a user\n     *\n     * Even though we allow allow for checkout to things beyond users\n     * this method is an easy way of seeing if we are checked out to a user.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkedOutToUser()\n    {\n      return $this->assignedType() === self::USER;\n    }\n\n    /**\n     * Get the target this asset is checked out to\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedTo()\n    {\n        return $this->morphTo('assigned', 'assigned_type', 'assigned_to')->withTrashed();\n    }\n\n    /**\n     * Gets assets assigned to this asset\n     *\n     * Sigh.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedAssets()\n    {\n        return $this->morphMany(self::class, 'assigned', 'assigned_type', 'assigned_to')->withTrashed();\n    }\n\n\n    /**\n     * Get the asset's location based on the assigned user\n     *\n     * @todo Refactor this if possible. It's awful.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\ArrayObject\n     */\n    public function assetLoc($iterations = 1, $first_asset = null)\n    {\n        if (! empty($this->assignedType())) {\n            if ($this->assignedType() == self::ASSET) {\n                if (! $first_asset) {\n                    $first_asset = $this;\n                }\n                if ($iterations > 10) {\n                    throw new \\Exception('Asset assignment Loop for Asset ID: '.$first_asset->id);\n                }\n                $assigned_to = self::find($this->assigned_to); //have to do this this way because otherwise it errors\n                if ($assigned_to) {\n                    return $assigned_to->assetLoc($iterations + 1, $first_asset);\n                } // Recurse until we have a final location\n            }\n            if ($this->assignedType() == self::LOCATION) {\n                if ($this->assignedTo) {\n                    return $this->assignedTo;\n                }\n\n            }\n            if ($this->assignedType() == self::USER) {\n                if (($this->assignedTo) && $this->assignedTo->userLoc) {\n                    return $this->assignedTo->userLoc;\n                }\n                //this makes no sense\n                return $this->defaultLoc;\n\n            }\n\n        }\n        return $this->defaultLoc;\n    }\n\n    /**\n     * Gets the lowercased name of the type of target the asset is assigned to\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string\n     */\n    public function assignedType()\n    {\n        return strtolower(class_basename($this->assigned_type));\n    }\n\n    /**\n     * Get the asset's location based on default RTD location\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function defaultLoc()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'rtd_location_id');\n    }\n\n    /**\n     * Get the image URL of the asset.\n     *\n     * Check first to see if there is a specific image uploaded to the asset,\n     * and if not, check for an image uploaded to the asset model.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string | false\n     */\n    public function getImageUrl()\n    {\n        if ($this->image && ! empty($this->image)) {\n            return Storage::disk('public')->url(app('assets_upload_path').e($this->image));\n        } elseif ($this->model && ! empty($this->model->image)) {\n            return Storage::disk('public')->url(app('models_upload_path').e($this->model->image));\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get the asset's logs\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n                  ->where('item_type', '=', self::class)\n                  ->orderBy('created_at', 'desc')\n                  ->withTrashed();\n    }\n\n    /**\n     * Get the list of checkouts for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function checkouts()\n    {\n        return $this->assetlog()->where('action_type', '=', 'checkout')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n    /**\n     * Get the list of checkins for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function checkins()\n    {\n        return $this->assetlog()\n            ->where('action_type', '=', 'checkin from')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n    /**\n     * Get the asset's user requests\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function userRequests()\n    {\n        return $this->assetlog()\n            ->where('action_type', '=', 'requested')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n\n    /**\n     * Get maintenances for this asset\n     *\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @since 1.0\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetmaintenances()\n    {\n        return $this->hasMany(\\App\\Models\\AssetMaintenance::class, 'asset_id')\n                  ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Get action logs history for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function adminuser()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n\n\n    /**\n     * Establishes the asset -> status relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetstatus()\n    {\n        return $this->belongsTo(\\App\\Models\\Statuslabel::class, 'status_id');\n    }\n\n    /**\n     * Establishes the asset -> model relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function model()\n    {\n        return $this->belongsTo(\\App\\Models\\AssetModel::class, 'model_id')->withTrashed();\n    }\n\n    /**\n     * Return the assets with a warranty expiring within x days\n     *\n     * @param $days\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return mixed\n     */\n    public static function getExpiringWarrantee($days = 30)\n    {\n        $days = (is_null($days)) ? 30 : $days;\n        \n        return self::where('archived', '=', '0')\n            ->whereNotNull('warranty_months')\n            ->whereNotNull('purchase_date')\n            ->whereNull('deleted_at')\n            ->whereRaw(\\DB::raw('DATE_ADD(`purchase_date`,INTERVAL `warranty_months` MONTH) <= DATE(NOW() + INTERVAL '\n                                 . $days\n                                 . ' DAY) AND DATE_ADD(`purchase_date`, INTERVAL `warranty_months` MONTH) > NOW()'))\n            ->orderBy('purchase_date', 'ASC')\n            ->get();\n    }\n\n\n    /**\n     * Establishes the asset -> assigned licenses relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenses()\n    {\n        return $this->belongsToMany(\\App\\Models\\License::class, 'license_seats', 'asset_id', 'license_id');\n    }\n\n    /**\n     * Establishes the asset -> status relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseseats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class, 'asset_id');\n    }\n\n    /**\n     * Establishes the asset -> aupplier relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n    /**\n     * Establishes the asset -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n\n\n    /**\n     * Get the next autoincremented asset tag\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public static function autoincrement_asset()\n    {\n        $settings = \\App\\Models\\Setting::getSettings();\n\n\n        if ($settings->auto_increment_assets == '1') {\n            $temp_asset_tag = \\DB::table('assets')\n                ->where('physical', '=', '1')\n                ->max('asset_tag');\n\n            $asset_tag_digits = preg_replace('/\\D/', '', $temp_asset_tag);\n            $asset_tag = preg_replace('/^0*/', '', $asset_tag_digits);\n\n            if ($settings->zerofill_count > 0) {\n                return $settings->auto_increment_prefix.self::zerofill($settings->next_auto_tag_base, $settings->zerofill_count);\n            }\n\n            return $settings->auto_increment_prefix.$settings->next_auto_tag_base;\n        } else {\n            return false;\n        }\n    }\n\n\n    /**\n     * Get the next base number for the auto-incrementer.\n     *\n     * We'll add the zerofill and prefixes on the fly as we generate the number.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return int\n     */\n    public static function nextAutoIncrement($assets)\n    {\n\n        $max = 1;\n\n        foreach ($assets as $asset) {\n            $results = preg_match(\"/\\d+$/\", $asset['asset_tag'], $matches);\n\n            if ($results) \n            {\n                $number = $matches[0];\n\n                if ($number > $max) \n                {\n                    $max = $number;\n                }\n            }\n        }\n\n\n    }\n\n\n\n    /**\n     * Add zerofilling based on Settings\n     *\n     * We'll add the zerofill and prefixes on the fly as we generate the number.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string\n     */\n    public static function zerofill($num, $zerofill = 3)\n    {\n        return str_pad($num, $zerofill, '0', STR_PAD_LEFT);\n    }\n\n    /**\n     * Determine whether to send a checkin/checkout email based on\n     * asset model category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        if (($this->model) && ($this->model->category)) {\n            return $this->model->category->checkin_email;\n        }\n    }\n\n    /**\n     * Determine whether this asset requires acceptance by the assigned user\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        if (($this->model) && ($this->model->category)) {\n            return $this->model->category->require_acceptance;\n        }\n\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n        $Parsedown = new \\Parsedown();\n        \n        if (($this->model) && ($this->model->category)) {\n            if ($this->model->category->eula_text) {\n                return $Parsedown->text(e($this->model->category->eula_text));\n            } elseif ($this->model->category->use_default_eula == '1') {\n                return $Parsedown->text(e(Setting::getSettings()->default_eula_text));\n            } else {\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n    * -----------------------------------------------\n    * BEGIN QUERY SCOPES\n    * -----------------------------------------------\n    **/\n\n    /**\n     * Run additional, advanced searches.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param  array  $terms The search terms\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function advancedTextSearch(Builder $query, array $terms)\n    {\n\n        /**\n         * Assigned user\n         */\n        $query = $query->leftJoin('users as assets_users', function ($leftJoin) {\n            $leftJoin->on('assets_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        });\n\n        foreach ($terms as $term) {\n\n            $query = $query\n                ->orWhere('assets_users.first_name', 'LIKE', '%'.$term.'%')\n                ->orWhere('assets_users.last_name', 'LIKE', '%'.$term.'%')\n                ->orWhere('assets_users.username', 'LIKE', '%'.$term.'%')\n                ->orWhereRaw('CONCAT('.DB::getTablePrefix().'assets_users.first_name,\" \",'.DB::getTablePrefix().'assets_users.last_name) LIKE ?', [\"%$term%\"]);\n\n        }\n\n        /**\n         * Assigned location\n         */\n        $query = $query->leftJoin('locations as assets_locations', function ($leftJoin) {\n            $leftJoin->on('assets_locations.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', Location::class);\n        });\n\n        foreach ($terms as $term) {\n\n            $query = $query->orWhere('assets_locations.name', 'LIKE', '%'.$term.'%');\n        }\n\n        /**\n         * Assigned assets\n         */\n        $query = $query->leftJoin('assets as assigned_assets', function ($leftJoin) {\n            $leftJoin->on('assigned_assets.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', self::class);\n        });\n\n        foreach ($terms as $term) {\n            $query = $query->orWhere('assigned_assets.name', 'LIKE', '%'.$term.'%');\n\n        }\n\n        return $query;\n    }\n\n\n    /**\n    * Query builder scope for hardware\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeHardware($query)\n    {\n        return $query->where('physical', '=', '1');\n    }\n\n    /**\n    * Query builder scope for pending assets\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopePending($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 1)\n                ->where('archived', '=', 0);\n        });\n    }\n\n\n    /**\n    * Query builder scope for searching location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeAssetsByLocation($query, $location)\n    {\n        return $query->where(function ($query) use ($location) {\n            $query->whereHas('assignedTo', function ($query) use ($location) {\n                $query->where([\n                    ['users.location_id', '=', $location->id],\n                    ['assets.assigned_type', '=', User::class],\n                ])->orWhere([\n                    ['locations.id', '=', $location->id],\n                    ['assets.assigned_type', '=', Location::class],\n                ])->orWhere([\n                    ['assets.rtd_location_id', '=', $location->id],\n                    ['assets.assigned_type', '=', self::class],\n                ]);\n            })->orWhere(function ($query) use ($location) {\n                $query->where('assets.rtd_location_id', '=', $location->id);\n                $query->whereNull('assets.assigned_to');\n            });\n        });\n    }\n\n\n    /**\n    * Query builder scope for RTD assets\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeRTD($query)\n    {\n        return $query->whereNull('assets.assigned_to')\n                   ->whereHas('assetstatus', function ($query) {\n                       $query->where('deployable', '=', 1)\n                             ->where('pending', '=', 0)\n                             ->where('archived', '=', 0);\n                   });\n    }\n\n  /**\n   * Query builder scope for Undeployable assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeUndeployable($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 0)\n                ->where('archived', '=', 0);\n        });\n    }\n\n    /**\n     * Query builder scope for non-Archived assets\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeNotArchived($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('archived', '=', 0);\n        });\n    }\n\n    /**\n     * Query builder scope for Assets that are due for auditing, based on the assets.next_audit_date\n     * and settings.audit_warning_days.\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on assets that will need to be audited.\n     *\n     * Due for audit soon:\n     * next_audit_date greater than or equal to now (must be in the future)\n     * and (next_audit_date - threshold days) <= now ()\n     *\n     * Example:\n     * next_audit_date = May 4, 2025\n     * threshold for alerts = 30 days\n     * now = May 4, 2019\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeDueForAudit($query, $settings)\n    {\n        $interval = $settings->audit_warning_days ?? 0;\n\n        return $query->whereNotNull('assets.next_audit_date')\n            ->where('assets.next_audit_date', '>=', Carbon::now())\n            ->whereRaw(\"DATE_SUB(assets.next_audit_date, INTERVAL $interval DAY) <= '\".Carbon::now().\"'\")\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n    /**\n     * Query builder scope for Assets that are OVERDUE for auditing, based on the assets.next_audit_date\n     * and settings.audit_warning_days. It checks to see if assets.next audit_date is before now\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on overdue assets.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeOverdueForAudit($query)\n    {\n        return $query->whereNotNull('assets.next_audit_date')\n            ->where('assets.next_audit_date', '<', Carbon::now())\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n    /**\n     * Query builder scope for Assets that are due for auditing OR overdue, based on the assets.next_audit_date\n     * and settings.audit_warning_days.\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on assets that will need to be audited.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeDueOrOverdueForAudit($query, $settings)\n    {\n        $interval = $settings->audit_warning_days ?? 0;\n\n        return $query->whereNotNull('assets.next_audit_date')\n            ->whereRaw('DATE_SUB('.DB::getTablePrefix().\"assets.next_audit_date, INTERVAL $interval DAY) <= '\".Carbon::now().\"'\")\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n\n    /**\n     * Query builder scope for Archived assets counting\n     *\n     * This is primarily used for the tab counters so that IF the admin\n     * has chosen to not display archived assets in their regular lists\n     * and views, it will return the correct number.\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeAssetsForShow($query)\n    {\n\n        if (Setting::getSettings()->show_archived_in_list!=1) {\n            return $query->whereHas('assetstatus', function ($query) {\n                $query->where('archived', '=', 0);\n            });\n        } else {\n            return $query;\n        }\n\n    }\n\n  /**\n   * Query builder scope for Archived assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeArchived($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 0)\n                ->where('archived', '=', 1);\n        });\n    }\n\n  /**\n   * Query builder scope for Deployed assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeDeployed($query)\n    {\n        return $query->where('assigned_to', '>', '0');\n    }\n\n  /**\n   * Query builder scope for Requestable assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeRequestableAssets($query)\n    {\n        $table = $query->getModel()->getTable();\n\n        return Company::scopeCompanyables($query->where($table.'.requestable', '=', 1))\n        ->whereHas('assetstatus', function ($query) {\n            $query->where(function ($query) {\n                $query->where('deployable', '=', 1)\n                      ->where('archived', '=', 0); // you definitely can't request something that's archived\n            })->orWhere('pending', '=', 1); // we've decided that even though an asset may be 'pending', you can still request it\n        });\n    }\n\n\n    /**\n   * scopeInModelList\n   * Get all assets in the provided listing of model ids\n   *\n   * @param       $query\n   * @param array $modelIdListing\n   *\n   * @return mixed\n   * @author  Vincent Sposato <vincent.sposato@gmail.com>\n   * @version v1.0\n   */\n    public function scopeInModelList($query, array $modelIdListing)\n    {\n        return $query->whereIn('assets.model_id', $modelIdListing);\n    }\n\n  /**\n  * Query builder scope to get not-yet-accepted assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeNotYetAccepted($query)\n    {\n        return $query->where('accepted', '=', 'pending');\n    }\n\n  /**\n  * Query builder scope to get rejected assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeRejected($query)\n    {\n        return $query->where('accepted', '=', 'rejected');\n    }\n\n\n  /**\n  * Query builder scope to get accepted assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeAccepted($query)\n    {\n        return $query->where('accepted', '=', 'accepted');\n    }\n\n    /**\n     * Query builder scope to search on text for complex Bootstrap Tables API.\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeAssignedSearch($query, $search)\n    {\n        $search = explode(' OR ', $search);\n\n        return $query->leftJoin('users as assets_users', function ($leftJoin) {\n            $leftJoin->on('assets_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        })->leftJoin('locations as assets_locations', function ($leftJoin) {\n            $leftJoin->on('assets_locations.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', Location::class);\n        })->leftJoin('assets as assigned_assets', function ($leftJoin) {\n            $leftJoin->on('assigned_assets.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', self::class);\n        })->where(function ($query) use ($search) {\n            foreach ($search as $search) {\n                $query->whereHas('model', function ($query) use ($search) {\n                    $query->whereHas('category', function ($query) use ($search) {\n                        $query->where(function ($query) use ($search) {\n                            $query->where('categories.name', 'LIKE', '%'.$search.'%')\n                                ->orWhere('models.name', 'LIKE', '%'.$search.'%')\n                                ->orWhere('models.model_number', 'LIKE', '%'.$search.'%');\n                        });\n                    });\n                })->orWhereHas('model', function ($query) use ($search) {\n                    $query->whereHas('manufacturer', function ($query) use ($search) {\n                        $query->where(function ($query) use ($search) {\n                            $query->where('manufacturers.name', 'LIKE', '%'.$search.'%');\n                        });\n                    });\n                })->orWhere(function ($query) use ($search) {\n                    $query->where('assets_users.first_name', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assets_users.last_name', 'LIKE', '%'.$search.'%')\n                        ->orWhereRaw('CONCAT('.DB::getTablePrefix().'assets_users.first_name,\" \",'.DB::getTablePrefix().'assets_users.last_name) LIKE ?', [\"%$search%\"])\n                        ->orWhere('assets_users.username', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assets_locations.name', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assigned_assets.name', 'LIKE', '%'.$search.'%');\n                })->orWhere('assets.name', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.asset_tag', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.serial', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.order_number', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.notes', 'LIKE', '%'.$search.'%');\n            }\n\n        })->withTrashed()->whereNull('assets.deleted_at'); //workaround for laravel bug\n    }\n\n    /**\n     * Query builder scope to search the department ID of users assigned to assets\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return string | false\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder Modified query builder\n     */\n    public function scopeCheckedOutToTargetInDepartment($query, $search)\n    {\n        return $query->leftJoin('users as assets_dept_users', function ($leftJoin) {\n            $leftJoin->on('assets_dept_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        })->where(function ($query) use ($search) {\n                    $query->where('assets_dept_users.department_id', '=', $search);\n\n        })->withTrashed()->whereNull('assets.deleted_at'); //workaround for laravel bug\n    }\n\n\n\n    /**\n     * Query builder scope to search on text filters for complex Bootstrap Tables API\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text   $filter   JSON array of search keys and terms\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByFilter($query, $filter)\n    {\n        return $query->where(function ($query) use ($filter) {\n            foreach ($filter as $key => $search_val) {\n\n                $fieldname = str_replace('custom_fields.', '', $key);\n\n                if ($fieldname == 'asset_tag') {\n                    $query->where('assets.asset_tag', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'name') {\n                    $query->where('assets.name', 'LIKE', '%'.$search_val.'%');\n                }\n\n\n                if ($fieldname =='serial') {\n                    $query->where('assets.serial', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'purchase_date') {\n                    $query->where('assets.purchase_date', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'purchase_cost') {\n                    $query->where('assets.purchase_cost', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'notes') {\n                    $query->where('assets.notes', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'order_number') {\n                    $query->where('assets.order_number', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'status_label') {\n                    $query->whereHas('assetstatus', function ($query) use ($search_val) {\n                        $query->where('status_labels.name', 'LIKE', '%'.$search_val.'%');\n                    });\n                }\n\n                if ($fieldname == 'location') {\n                    $query->whereHas('location', function ($query) use ($search_val) {\n                        $query->where('locations.name', 'LIKE', '%'.$search_val.'%');\n                    });\n                }\n\n                if ($fieldname =='assigned_to') {\n                    $query->whereHasMorph('assignedTo', [User::class], function ($query) use ($search_val) {\n                        $query->where(function ($query) use ($search_val) {\n                            $query->where('users.first_name', 'LIKE', '%'.$search_val.'%')\n                                ->orWhere('users.last_name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n\n                if ($fieldname == 'manufacturer') {\n                    $query->whereHas('model', function ($query) use ($search_val) {\n                        $query->whereHas('manufacturer', function ($query) use ($search_val) {\n                            $query->where(function ($query) use ($search_val) {\n                                $query->where('manufacturers.name', 'LIKE', '%'.$search_val.'%');\n                            });\n                        });\n                    });\n                }\n\n                if ($fieldname == 'category') {\n                    $query->whereHas('model', function ($query) use ($search_val) {\n                        $query->whereHas('category', function ($query) use ($search_val) {\n                            $query->where(function ($query) use ($search_val) {\n                                $query->where('categories.name', 'LIKE', '%'.$search_val.'%')\n                                    ->orWhere('models.name', 'LIKE', '%'.$search_val.'%')\n                                    ->orWhere('models.model_number', 'LIKE', '%'.$search_val.'%');\n                            });\n                        });\n                    });\n                }\n\n                if ($fieldname == 'model') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('model', function ($query) use ($search_val) {\n                            $query->where('models.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n                if ($fieldname == 'model_number') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('model', function ($query) use ($search_val) {\n                            $query->where('models.model_number', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n\n                if ($fieldname == 'company') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('company', function ($query) use ($search_val) {\n                            $query->where('companies.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n                if ($fieldname == 'supplier') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('supplier', function ($query) use ($search_val) {\n                            $query->where('suppliers.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n            \n\n            /**\n             * THIS CLUNKY BIT IS VERY IMPORTANT\n             *\n             * Although inelegant, this section matters a lot when querying against fields that do not\n             * exist on the asset table. There's probably a better way to do this moving forward, for\n             * example using the Schema:: methods to determine whether or not a column actually exists,\n             * or even just using the $searchableRelations variable earlier in this file.\n             *\n             * In short, this set of statements tells the query builder to ONLY query against an\n             * actual field that's being passed if it doesn't meet known relational fields. This\n             * allows us to query custom fields directly in the assetsv table\n             * (regardless of their name) and *skip* any fields that we already know can only be\n             * searched through relational searches that we do earlier in this method.\n             *\n             * For example, we do not store \"location\" as a field on the assets table, we store\n             * that relationship through location_id on the assets table, therefore querying\n             * assets.location would fail, as that field doesn't exist -- plus we're already searching\n             * against those relationships earlier in this method.\n             *\n             * - snipe \n             *\n             */\n\n            if (($fieldname!='category') && ($fieldname!='model_number') && ($fieldname!='rtd_location') && ($fieldname!='location') && ($fieldname!='supplier')\n                && ($fieldname!='status_label') && ($fieldname!='assigned_to') && ($fieldname!='model') && ($fieldname!='company') && ($fieldname!='manufacturer')) {\n                    $query->where('assets.'.$fieldname, 'LIKE', '%' . $search_val . '%');\n            }\n\n\n            }\n\n\n        });\n\n    }\n\n\n    /**\n    * Query builder scope to order on model\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderModels($query, $order)\n    {\n        return $query->join('models as asset_models', 'assets.model_id', '=', 'asset_models.id')->orderBy('asset_models.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on model number\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderModelNumber($query, $order)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')->orderBy('models.model_number', $order);\n    }\n\n\n    /**\n    * Query builder scope to order on assigned user\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderAssigned($query, $order)\n    {\n        return $query->leftJoin('users as users_sort', 'assets.assigned_to', '=', 'users_sort.id')->select('assets.*')->orderBy('users_sort.first_name', $order)->orderBy('users_sort.last_name', $order);\n    }\n\n    /**\n    * Query builder scope to order on status\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderStatus($query, $order)\n    {\n        return $query->join('status_labels as status_sort', 'assets.status_id', '=', 'status_sort.id')->orderBy('status_sort.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on company\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies as company_sort', 'assets.company_id', '=', 'company_sort.id')->orderBy('company_sort.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to return results of a category\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text $order Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeInCategory($query, $category_id)\n    {\n        return $query->join('models as category_models', 'assets.model_id', '=', 'category_models.id')\n            ->join('categories', 'category_models.category_id', '=', 'categories.id')->where('category_models.category_id', '=', $category_id);\n    }\n\n    /**\n     * Query builder scope to return results of a manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text $order Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByManufacturer($query, $manufacturer_id)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('manufacturers', 'models.manufacturer_id', '=', 'manufacturers.id')->where('models.manufacturer_id', '=', $manufacturer_id);\n    }\n\n\n\n    /**\n    * Query builder scope to order on category\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order         Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->join('models as order_model_category', 'assets.model_id', '=', 'order_model_category.id')\n            ->join('categories as category_order', 'order_model_category.category_id', '=', 'category_order.id')\n            ->orderBy('category_order.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('manufacturers', 'models.manufacturer_id', '=', 'manufacturers.id')\n            ->orderBy('manufacturers.name', $order);\n    }\n\n   /**\n    * Query builder scope to order on location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations as asset_locations', 'asset_locations.id', '=', 'assets.location_id')->orderBy('asset_locations.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on default\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderRtdLocation($query, $order)\n    {\n        return $query->leftJoin('locations as rtd_asset_locations', 'rtd_asset_locations.id', '=', 'assets.rtd_location_id')->orderBy('rtd_asset_locations.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to order on supplier name\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers as suppliers_assets', 'assets.supplier_id', '=', 'suppliers_assets.id')->orderBy('suppliers_assets.name', $order);\n    }\n\n    /**\n     * Query builder scope to search on location ID\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByLocationId($query, $search)\n    {\n        return $query->where(function ($query) use ($search) {\n            $query->whereHas('location', function ($query) use ($search) {\n                $query->where('locations.id', '=', $search);\n            });\n        });\n\n    }\n\n\n    /**\n     * Query builder scope to search on depreciation name\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByDepreciationId($query, $search)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('depreciations', 'models.depreciation_id', '=', 'depreciations.id')->where('models.depreciation_id', '=', $search);\n\n    }\n\n\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Http\\Traits\\TwoColumnUniqueUndeletedTrait;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Model for Categories. Categories are a higher-level group\n * than Asset Models, and handle things like whether or not\n * to require acceptance from the user, whether or not to\n * send a EULA to the user, etc.\n *\n * @version    v1.0\n */\nclass Category extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\CategoryPresenter::class;\n    use Presentable;\n    use SoftDeletes;\n\n    protected $table = 'categories';\n    protected $hidden = ['user_id', 'deleted_at'];\n\n    protected $casts = [\n        'user_id'      => 'integer',\n    ];\n\n    /**\n     * Category validation rules\n     */\n    public $rules = [\n        'user_id' => 'numeric|nullable',\n        'name'   => 'required|min:1|max:255|two_column_unique_undeleted:category_type',\n        'require_acceptance'   => 'boolean',\n        'use_default_eula'   => 'boolean',\n        'category_type'   => 'required|in:asset,accessory,consumable,component,license',\n    ];\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n    use TwoColumnUniqueUndeletedTrait;\n\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_type',\n        'checkin_email',\n        'eula_text',\n        'name',\n        'require_acceptance',\n        'use_default_eula',\n        'user_id',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'category_type'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [];\n\n    /**\n     * Checks if category can be deleted\n     *\n     * @author [Dan Meltzer] [<dmeltzer.devel@gmail.com>]\n     * @since [v5.0]\n     * @return bool\n     */\n    public function isDeletable()\n    {\n        return Gate::allows('delete', $this)\n                && ($this->itemCount() == 0);\n    }\n\n    /**\n     * Establishes the category -> accessories relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function accessories()\n    {\n        return $this->hasMany(\\App\\Models\\Accessory::class);\n    }\n\n    /**\n     * Establishes the category -> licenses relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.3]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenses()\n    {\n        return $this->hasMany(\\App\\Models\\License::class);\n    }\n\n    /**\n     * Establishes the category -> consumables relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function consumables()\n    {\n        return $this->hasMany(\\App\\Models\\Consumable::class);\n    }\n\n    /**\n     * Establishes the category -> consumables relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function components()\n    {\n        return $this->hasMany(\\App\\Models\\Component::class);\n    }\n\n    /**\n     * Get the number of items in the category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return int\n     */\n    public function itemCount()\n    {\n        switch ($this->category_type) {\n            case 'asset':\n                return $this->assets()->count();\n            case 'accessory':\n                return $this->accessories()->count();\n            case 'component':\n                return $this->components()->count();\n            case 'consumable':\n                return $this->consumables()->count();\n            case 'license':\n                return $this->licenses()->count();\n        }\n\n        return '0';\n    }\n\n    /**\n     * Establishes the category -> assets relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assets()\n    {\n        return $this->hasManyThrough(\\App\\Models\\Asset::class, \\App\\Models\\AssetModel::class, 'category_id', 'model_id');\n    }\n\n    /**\n     * Establishes the category -> models relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function models()\n    {\n        return $this->hasMany(\\App\\Models\\AssetModel::class, 'category_id');\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string | null\n     */\n    public function getEula()\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($this->eula_text) {\n            return $Parsedown->text(e($this->eula_text));\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->use_default_eula == '1')) {\n            return $Parsedown->text(e(Setting::getSettings()->default_eula_text));\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * -----------------------------------------------\n     * BEGIN QUERY SCOPES\n     * -----------------------------------------------\n     **/\n\n    /**\n     * Query builder scope for whether or not the category requires acceptance\n     *\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeRequiresAcceptance($query)\n    {\n        return $query->where('require_acceptance', '=', true);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass Consumable extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\ConsumablePresenter::class;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    use SoftDeletes;\n    use Acceptable;\n\n    protected $table = 'consumables';\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'requestable'    => 'boolean',\n        'category_id'    => 'integer',\n        'company_id'     => 'integer',\n        'qty'            => 'integer',\n        'min_amt'        => 'integer',    \n     ];\n\n    /**\n     * Category validation rules\n     */\n    public $rules = [\n        'name'        => 'required|min:3|max:255',\n        'qty'         => 'required|integer|min:0',\n        'category_id' => 'required|integer',\n        'company_id'  => 'integer|nullable',\n        'min_amt'     => 'integer|min:0|nullable',\n        'purchase_cost'   => 'numeric|nullable|gte:0',\n    ];\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_id',\n        'company_id',\n        'item_no',\n        'location_id',\n        'manufacturer_id',\n        'name',\n        'order_number',\n        'model_number',\n        'purchase_cost',\n        'purchase_date',\n        'qty',\n        'min_amt',\n        'requestable',\n        'notes',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'order_number', 'purchase_cost', 'purchase_date', 'item_no', 'model_number', 'notes'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [\n        'category'     => ['name'],\n        'company'      => ['name'],\n        'location'     => ['name'],\n        'manufacturer' => ['name'],\n    ];\n\n    /**\n     * Sets the attribute of whether or not the consumable is requestable\n     *\n     * This isn't really implemented yet, as you can't currently request a consumable\n     * however it will be implemented in the future, and we needed to include\n     * this method here so all of our polymorphic methods don't break.\n     *\n     * @todo Update this comment once it's been implemented\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function setRequestableAttribute($value)\n    {\n        if ($value == '') {\n            $value = null;\n        }\n        $this->attributes['requestable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Establishes the consumable -> admin user relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function admin()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n    /**\n     * Establishes the component -> assignments relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function consumableAssignments()\n    {\n        return $this->hasMany(\\App\\Models\\ConsumableAssignment::class);\n    }\n\n    /**\n     * Establishes the component -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the component -> manufacturer relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Establishes the component -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n    /**\n     * Establishes the component -> category relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id');\n    }\n\n\n    /**\n     * Establishes the component -> action logs relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')->where('item_type', self::class)->orderBy('created_at', 'desc')->withTrashed();\n    }\n\n    /**\n     * Gets the full image url for the consumable\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string | false\n     */\n    public function getImageUrl()\n    {\n        if ($this->image) {\n            return Storage::disk('public')->url(app('consumables_upload_path').$this->image);\n        }\n        return false;\n\n    }\n\n    /**\n     * Establishes the component -> users relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function users()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'consumables_users', 'consumable_id', 'assigned_to')->withPivot('user_id')->withTrashed()->withTimestamps();\n    }\n\n\n    /**\n     * Determine whether to send a checkin/checkout email based on\n     * asset model category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determine whether this asset requires acceptance by the assigned user\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($this->category->eula_text) {\n            return $Parsedown->text(e($this->category->eula_text));\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->category->use_default_eula == '1')) {\n            return $Parsedown->text(e(Setting::getSettings()->default_eula_text));\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Check how many items within a consumable are checked out\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return int\n     */\n    public function numCheckedOut()\n    {\n        $checkedout = 0;\n        $checkedout = $this->users->count();\n\n        return $checkedout;\n    }\n\n    /**\n     * Checks the number of available consumables\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return int\n     */\n    public function numRemaining()\n    {\n        $checkedout = $this->users->count();\n        $total = $this->qty;\n        $remaining = $total - $checkedout;\n\n        return $remaining;\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->join('categories', 'consumables.category_id', '=', 'categories.id')->orderBy('categories.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on location\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations', 'consumables.location_id', '=', 'locations.id')->orderBy('locations.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string   $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'consumables.manufacturer_id', '=', 'manufacturers.id')->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies', 'consumables.company_id', '=', 'companies.id')->orderBy('companies.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Carbon\\Carbon;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Session;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass License extends Depreciable\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\LicensePresenter::class;\n\n    use SoftDeletes;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    // We set these as protected dates so that they will be easily accessible via Carbon\n\n    public $timestamps = true;\n\n    protected $guarded = 'id';\n    protected $table = 'licenses';\n\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'expiration_date' => 'datetime',\n        'termination_date' => 'datetime',\n        'seats'   => 'integer',\n        'category_id'  => 'integer',\n        'company_id'   => 'integer',\n    ];\n\n    protected $rules = [\n        'name'   => 'required|string|min:3|max:255',\n        'seats'   => 'required|min:1|integer',\n        'license_email'   => 'email|nullable|max:120',\n        'license_name'   => 'string|nullable|max:100',\n        'notes'   => 'string|nullable',\n        'category_id' => 'required|exists:categories,id',\n        'company_id' => 'integer|nullable',\n        'purchase_cost'=> 'numeric|nullable|gte:0',\n    ];\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'company_id',\n        'depreciation_id',\n        'expiration_date',\n        'license_email',\n        'license_name', //actually licensed_to\n        'maintained',\n        'manufacturer_id',\n        'category_id',\n        'name',\n        'notes',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'purchase_order',\n        'reassignable',\n        'seats',\n        'serial',\n        'supplier_id',\n        'termination_date',\n        'user_id',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = [\n        'name',\n        'serial',\n        'notes',\n        'order_number',\n        'purchase_order',\n        'purchase_cost',\n        'purchase_date',\n        'expiration_date',\n    ];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [\n      'manufacturer' => ['name'],\n      'company'      => ['name'],\n      'category'     => ['name'],\n      'depreciation' => ['name'],\n    ];\n\n    /**\n     * Update seat counts when the license is updated\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     */\n    public static function boot()\n    {\n        parent::boot();\n        // We need to listen for created for the initial setup so that we have a license ID.\n        static::created(function ($license) {\n            $newSeatCount = $license->getAttributes()['seats'];\n\n            return static::adjustSeatCount($license, $oldSeatCount = 0, $newSeatCount);\n        });\n        // However, we listen for updating to be able to prevent the edit if we cannot delete enough seats.\n        static::updating(function ($license) {\n            $newSeatCount = $license->getAttributes()['seats'];\n            $oldSeatCount = isset($license->getOriginal()['seats']) ? $license->getOriginal()['seats'] : 0;\n\n            return static::adjustSeatCount($license, $oldSeatCount, $newSeatCount);\n        });\n    }\n\n    /**\n     * Balance seat counts\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public static function adjustSeatCount($license, $oldSeats, $newSeats)\n    {\n        // If the seats haven't changed, continue on happily.\n        if ($oldSeats == $newSeats) {\n            return true;\n        }\n        // On Create, we just make one for each of the seats.\n        $change = abs($oldSeats - $newSeats);\n        if ($oldSeats > $newSeats) {\n            $license->load('licenseseats.user');\n\n            // Need to delete seats... lets see if if we have enough.\n            $seatsAvailableForDelete = $license->licenseseats->reject(function ($seat) {\n                return ((bool) $seat->assigned_to) || ((bool) $seat->asset_id);\n            });\n\n            if ($change > $seatsAvailableForDelete->count()) {\n                Session::flash('error', trans('admin/licenses/message.assoc_users'));\n\n                return false;\n            }\n            for ($i = 1; $i <= $change; $i++) {\n                $seatsAvailableForDelete->pop()->delete();\n            }\n            // Log Deletion of seats.\n            $logAction = new Actionlog;\n            $logAction->item_type = self::class;\n            $logAction->item_id = $license->id;\n            $logAction->user_id = Auth::id() ?: 1; // We don't have an id while running the importer from CLI.\n            $logAction->note = \"deleted ${change} seats\";\n            $logAction->target_id = null;\n            $logAction->logaction('delete seats');\n\n            return true;\n        }\n        // Else we're adding seats.\n        //Create enough seats for the change.\n        $licenseInsert = [];\n        for ($i = $oldSeats; $i < $newSeats; $i++) {\n            $licenseInsert[] = [\n                'user_id' => Auth::id(),\n                'license_id' => $license->id,\n                'created_at' => now(),\n                'updated_at' => now()\n            ];\n        }\n        //Chunk and use DB transactions to prevent timeouts.\n\n        collect($licenseInsert)->chunk(1000)->each(function ($chunk) {\n            DB::transaction(function () use ($chunk) {\n                LicenseSeat::insert($chunk->toArray());\n            });\n        });\n\n        // On initial create, we shouldn't log the addition of seats.\n        if ($license->id) {\n            //Log the addition of license to the log.\n            $logAction = new Actionlog();\n            $logAction->item_type = self::class;\n            $logAction->item_id = $license->id;\n            $logAction->user_id = Auth::id() ?: 1; // Importer.\n            $logAction->note = \"added ${change} seats\";\n            $logAction->target_id = null;\n            $logAction->logaction('add seats');\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the attribute for whether or not the license is maintained\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setMaintainedAttribute($value)\n    {\n        $this->attributes['maintained'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Sets the reassignable attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setReassignableAttribute($value)\n    {\n        $this->attributes['reassignable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Sets expiration date attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setExpirationDateAttribute($value)\n    {\n        if ($value == '' || $value == '0000-00-00') {\n            $value = null;\n        } else {\n            $value = (new Carbon($value))->toDateString();\n        }\n        $this->attributes['expiration_date'] = $value;\n    }\n\n    /**\n     * Sets termination date attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return mixed\n     */\n    public function setTerminationDateAttribute($value)\n    {\n        if ($value == '' || $value == '0000-00-00') {\n            $value = null;\n        } else {\n            $value = (new Carbon($value))->toDateString();\n        }\n        $this->attributes['termination_date'] = $value;\n    }\n\n    /**\n     * Establishes the license -> company relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the license -> category relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v4.4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id');\n    }\n\n    /**\n     * Establishes the license -> manufacturer relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Determine whether the user should be emailed on checkin/checkout\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determine whether the user should be required to accept the license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($this->category->eula_text) {\n            return $Parsedown->text(e($this->category->eula_text));\n        } elseif ($this->category->use_default_eula == '1') {\n            return $Parsedown->text(e(Setting::getSettings()->default_eula_text));\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Establishes the license -> assigned user relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedusers()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'license_seats', 'assigned_to', 'license_id');\n    }\n\n    /**\n     * Establishes the license -> action logs relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n            ->where('item_type', '=', self::class)\n            ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Establishes the license -> action logs -> uploads relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function uploads()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n            ->where('item_type', '=', self::class)\n            ->where('action_type', '=', 'uploaded')\n            ->whereNotNull('filename')\n            ->orderBy('created_at', 'desc');\n    }\n\n\n    /**\n     * Establishes the license -> admin user relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function adminuser()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n    /**\n     * Returns the total number of all license seats\n     *\n     * @todo this can probably be refactored at some point. We don't need counting methods.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public static function assetcount()\n    {\n        return LicenseSeat::whereNull('deleted_at')\n                   ->count();\n    }\n\n\n    /**\n     * Return the number of seats for this asset\n     *\n     * @todo this can also probably be refactored at some point.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function totalSeatsByLicenseID()\n    {\n        return LicenseSeat::where('license_id', '=', $this->id)\n                   ->whereNull('deleted_at')\n                   ->count();\n    }\n\n    /**\n     * Establishes the license -> seat relationship\n     *\n     * We do this to eager load the \"count\" of seats from the controller.\n     * Otherwise calling \"count()\" on each model results in n+1 sadness.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseSeatsRelation()\n    {\n        return $this->hasMany(LicenseSeat::class)->whereNull('deleted_at')->selectRaw('license_id, count(*) as count')->groupBy('license_id');\n    }\n\n    /**\n     * Sets the license seat count attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public function getLicenseSeatsCountAttribute()\n    {\n        if ($this->licenseSeatsRelation->first()) {\n            return $this->licenseSeatsRelation->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the number of total available seats across all licenses\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public static function availassetcount()\n    {\n        return LicenseSeat::whereNull('assigned_to')\n                   ->whereNull('asset_id')\n                   ->whereNull('deleted_at')\n                   ->count();\n    }\n\n    /**\n     * Returns the number of total available seats for this license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function availCount()\n    {\n        return $this->licenseSeatsRelation()\n            ->whereNull('asset_id')\n            ->whereNull('assigned_to')\n            ->whereNull('deleted_at');\n    }\n\n    /**\n     * Sets the available seats attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return mixed\n     */\n    public function getAvailSeatsCountAttribute()\n    {\n        if ($this->availCount->first()) {\n            return $this->availCount->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Retuns the number of assigned seats for this asset\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedCount()\n    {\n        return $this->licenseSeatsRelation()->where(function ($query) {\n            $query->whereNotNull('assigned_to')\n            ->orWhereNotNull('asset_id');\n        });\n    }\n\n    /**\n     * Sets the assigned seats attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function getAssignedSeatsCountAttribute()\n    {\n        if ($this->assignedCount->first()) {\n            return $this->assignedCount->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Calculates the number of remaining seats\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function remaincount()\n    {\n        $total = $this->licenseSeatsCount;\n        $taken = $this->assigned_seats_count;\n        $diff = ($total - $taken);\n\n        return $diff;\n    }\n\n    /**\n     * Returns the total number of seats for this license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function totalcount()\n    {\n        $avail = $this->availSeatsCount;\n        $taken = $this->assignedcount();\n        $diff = ($avail + $taken);\n\n        return $diff;\n    }\n\n    /**\n     * Establishes the license -> seats relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseseats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class);\n    }\n\n    /**\n     * Establishes the license -> supplier relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n\n    /**\n     * Gets the next available free seat - used by\n     * the API to populate next_seat\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return mixed\n     */\n    public function freeSeat()\n    {\n        return  $this->licenseseats()\n                    ->whereNull('deleted_at')\n                    ->where(function ($query) {\n                        $query->whereNull('assigned_to')\n                            ->whereNull('asset_id');\n                    })\n                    ->orderBy('id', 'asc')\n                    ->first();\n    }\n\n\n    /**\n     * Establishes the license -> free seats relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function freeSeats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class)->whereNull('assigned_to')->whereNull('deleted_at')->whereNull('asset_id');\n    }\n\n    /**\n     * Returns expiring licenses\n     *\n     * @todo should refactor. I don't like get() in model methods\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public static function getExpiringLicenses($days = 60)\n    {\n        $days = (is_null($days)) ? 60 : $days;\n\n        return self::whereNotNull('expiration_date')\n        ->whereNull('deleted_at')\n        ->whereRaw(DB::raw('DATE_SUB(`expiration_date`,INTERVAL '.$days.' DAY) <= DATE(NOW()) '))\n        ->where('expiration_date', '>', date('Y-m-d'))\n        ->orderBy('expiration_date', 'ASC')\n        ->get();\n    }\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'licenses.manufacturer_id', '=', 'manufacturers.id')->select('licenses.*')\n            ->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on supplier\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers', 'licenses.supplier_id', '=', 'suppliers.id')->select('licenses.*')\n            ->orderBy('suppliers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies as companies', 'licenses.company_id', '=', 'companies.id')->select('licenses.*')\n            ->orderBy('companies.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Parsedown;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Settings model.\n */\nclass Setting extends Model\n{\n    use HasFactory;\n    use Notifiable, ValidatingTrait;\n\n    /**\n     * The app settings cache key name.\n     *\n     * @var string\n     */\n    const APP_SETTINGS_KEY = 'snipeit_app_settings';\n\n    /**\n     * The setup check cache key name.\n     *\n     * @var string\n     */\n    const SETUP_CHECK_KEY = 'snipeit_setup_check';\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n\n    /**\n     * Model rules.\n     *\n     * @var array\n     */\n    protected $rules = [\n          'brand'                               => 'required|min:1|numeric',\n          'qr_text'                             => 'max:31|nullable',\n          'alert_email'                         => 'email_array|nullable',\n          'admin_cc_email'                      => 'email|nullable',\n          'default_currency'                    => 'required',\n          'locale'                              => 'required',\n          'labels_per_page'                     => 'numeric',\n          'labels_width'                        => 'numeric',\n          'labels_height'                       => 'numeric',\n          'labels_pmargin_left'                 => 'numeric|nullable',\n          'labels_pmargin_right'                => 'numeric|nullable',\n          'labels_pmargin_top'                  => 'numeric|nullable',\n          'labels_pmargin_bottom'               => 'numeric|nullable',\n          'labels_display_bgutter'              => 'numeric|nullable',\n          'labels_display_sgutter'              => 'numeric|nullable',\n          'labels_fontsize'                     => 'numeric|min:5',\n          'labels_pagewidth'                    => 'numeric|nullable',\n          'labels_pageheight'                   => 'numeric|nullable',\n          'login_remote_user_enabled'           => 'numeric|nullable',\n          'login_common_disabled'               => 'numeric|nullable',\n          'login_remote_user_custom_logout_url' => 'string|nullable',\n          'login_remote_user_header_name'       => 'string|nullable',\n          'thumbnail_max_h'                     => 'numeric|max:500|min:25',\n          'pwd_secure_min'                      => 'numeric|required|min:8',\n          'audit_warning_days'                  => 'numeric|nullable',\n          'audit_interval'                      => 'numeric|nullable',\n          'custom_forgot_pass_url'              => 'url|nullable',\n          'privacy_policy_link'                 => 'nullable|url',\n    ];\n\n    protected $fillable = [\n        'site_name',\n        'email_domain',\n        'email_format',\n        'username_format',\n    ];\n\n    /**\n     * Get the app settings.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return \\App\\Models\\Setting|null\n     */\n    public static function getSettings(): ?self\n    {\n        return Cache::rememberForever(self::APP_SETTINGS_KEY, function () {\n            // Need for setup as no tables exist\n            try {\n                return self::first();\n            } catch (\\Throwable $th) {\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Check to see if setup process is complete.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @return bool\n     */\n    public static function setupCompleted(): bool\n    {\n        try {\n            $usercount = User::withTrashed()->count();\n            $settingsCount = self::count();\n\n            return $usercount > 0 && $settingsCount > 0;\n        } catch (\\Throwable $th) {\n            \\Log::debug('User table and settings table DO NOT exist or DO NOT have records');\n            // Catch the error if the tables dont exit\n            return false;\n        }\n    }\n\n    /**\n     * Get the current Laravel version.\n     *\n     * @return string\n     */\n    public function lar_ver(): string\n    {\n        $app = App::getFacadeApplication();\n\n        return $app::VERSION;\n    }\n\n    /**\n     * Get the default EULA text.\n     *\n     * @return string|null\n     */\n    public static function getDefaultEula(): ?string\n    {\n        if (self::getSettings()->default_eula_text) {\n            $parsedown = new Parsedown();\n\n            return $parsedown->text(e(self::getSettings()->default_eula_text));\n        }\n\n        return null;\n    }\n\n    /**\n     * Check wether to show in model dropdowns.\n     *\n     * @param string $element\n     *\n     * @return bool\n     */\n    public function modellistCheckedValue($element): bool\n    {\n        $settings = self::getSettings();\n        // If the value is blank for some reason\n        if ($settings->modellist_displays == '') {\n            return false;\n        }\n\n        $values = explode(',', $settings->modellist_displays);\n\n        foreach ($values as $value) {\n            if ($value == $element) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Escapes the custom CSS, and then un-escapes the greater-than symbol\n     * so it can work with direct descendant characters for bootstrap\n     * menu overrides like:.\n     *\n     * .skin-blue .sidebar-menu>li.active>a, .skin-blue .sidebar-menu>li:hover>a\n     *\n     * Important: Do not remove the e() escaping here, as we output raw in the blade.\n     *\n     * @return string escaped CSS\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     */\n    public function show_custom_css(): string\n    {\n        $custom_css = self::getSettings()->custom_css;\n        $custom_css = e($custom_css);\n        // Needed for modifying the bootstrap nav :(\n        $custom_css = str_ireplace('script', 'SCRIPTS-NOT-ALLOWED-HERE', $custom_css);\n        $custom_css = str_replace('&gt;', '>', $custom_css);\n        // Allow String output (needs quotes)\n        $custom_css = str_replace('&quot;', '\"', $custom_css);\n\n        return $custom_css;\n    }\n\n    /**\n     * Converts bytes into human readable file size.\n     *\n     * @param string $bytes\n     *\n     * @return string human readable file size (2,87 \u041c\u0431)\n     *\n     * @author Mogilev Arseny\n     */\n    public static function fileSizeConvert($bytes): string\n    {\n        $result = 0;\n        $bytes = floatval($bytes);\n        $arBytes = [\n                0 => [\n                    'UNIT'  => 'TB',\n                    'VALUE' => pow(1024, 4),\n                ],\n                1 => [\n                    'UNIT'  => 'GB',\n                    'VALUE' => pow(1024, 3),\n                ],\n                2 => [\n                    'UNIT'  => 'MB',\n                    'VALUE' => pow(1024, 2),\n                ],\n                3 => [\n                    'UNIT'  => 'KB',\n                    'VALUE' => 1024,\n                ],\n                4 => [\n                    'UNIT'  => 'B',\n                    'VALUE' => 1,\n                ],\n            ];\n\n        foreach ($arBytes as $arItem) {\n            if ($bytes >= $arItem['VALUE']) {\n                $result = $bytes / $arItem['VALUE'];\n                $result = round($result, 2).$arItem['UNIT'];\n                break;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * The url for slack notifications.\n     *  Used by Notifiable trait.\n     *\n     * @return string\n     */\n    public function routeNotificationForSlack(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return self::getSettings()->slack_endpoint;\n    }\n\n    /**\n     * Get the mail reply to address from configuration.\n     *\n     * @return string\n     */\n    public function routeNotificationForMail(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return config('mail.reply_to.address');\n    }\n\n    /**\n     * Get the password complexity rule.\n     *\n     * @return string\n     */\n    public static function passwordComplexityRulesSaving($action = 'update'): string\n    {\n        $security_rules = '';\n        $settings = self::getSettings();\n\n        // Check if they have uncommon password enforcement selected in settings\n        if ($settings->pwd_secure_uncommon == 1) {\n            $security_rules .= '|dumbpwd';\n        }\n\n        // Check for any secure password complexity rules that may have been selected\n        if ($settings->pwd_secure_complexity != '') {\n            $security_rules .= '|'.$settings->pwd_secure_complexity;\n        }\n\n        if ($action == 'update') {\n            return 'nullable|min:'.$settings->pwd_secure_min.$security_rules;\n        }\n\n        return 'required|min:'.$settings->pwd_secure_min.$security_rules;\n    }\n\n    /**\n     * Get the specific LDAP settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return Collection\n     */\n    public static function getLdapSettings(): Collection\n    {\n        $ldapSettings = self::select([\n            'ldap_enabled',\n            'ldap_server',\n            'ldap_uname',\n            'ldap_pword',\n            'ldap_basedn',\n            'ldap_filter',\n            'ldap_username_field',\n            'ldap_lname_field',\n            'ldap_fname_field',\n            'ldap_auth_filter_query',\n            'ldap_version',\n            'ldap_active_flag',\n            'ldap_emp_num',\n            'ldap_email',\n            'ldap_server_cert_ignore',\n            'ldap_port',\n            'ldap_tls',\n            'ldap_pw_sync',\n            'is_ad',\n            'ad_domain',\n            'ad_append_domain',\n            'ldap_client_tls_key',\n            'ldap_client_tls_cert'\n            ])->first()->getAttributes();\n\n        return collect($ldapSettings);\n    }\n\n    /**\n     * Return the filename for the client-side SSL cert\n     *\n     * @var string\n     */\n    public static function get_client_side_cert_path()\n    {\n        return storage_path().'/ldap_client_tls.cert';\n    }\n\n    /**\n     * Return the filename for the client-side SSL key\n     *\n     * @var string\n     */\n    public static function get_client_side_key_path()\n    {\n        return storage_path().'/ldap_client_tls.key';\n    }\n\n    public function update_client_side_cert_files()\n    {\n        /**\n         * I'm not sure if it makes sense to have a cert but no key\n         * nor vice versa, but for now I'm just leaving it like this.\n         *\n         * Also, we could easily set this up with an event handler and\n         * self::saved() or something like that but there's literally only\n         * one place where we will do that, so I'll just explicitly call\n         * this method at that spot instead. It'll be easier to debug and understand.\n         */\n        if ($this->ldap_client_tls_cert) {\n            file_put_contents(self::get_client_side_cert_path(), $this->ldap_client_tls_cert);\n        } else {\n            if (file_exists(self::get_client_side_cert_path())) {\n                unlink(self::get_client_side_cert_path());\n            }\n        }\n\n        if ($this->ldap_client_tls_key) {\n            file_put_contents(self::get_client_side_key_path(), $this->ldap_client_tls_key);\n        } else {\n            if (file_exists(self::get_client_side_key_path())) {\n                unlink(self::get_client_side_key_path());\n            }\n        }\n    }\n\n\n}\n", "<?php\n\nnamespace App\\Presenters;\n\n/**\n * Class AssetModelPresenter\n */\nclass AssetModelPresenter extends Presenter\n{\n    public static function dataTableLayout()\n    {\n        $layout = [\n            [\n                'field' => 'checkbox',\n                'checkbox' => true,\n            ],\n            [\n                'field' => 'id',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.id'),\n                'visible' => false,\n            ], [\n                'field' => 'company',\n                'searchable' => true,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/companies/table.title'),\n                'visible' => false,\n                'formatter' => 'companiesLinkObjFormatter',\n            ], [\n                'field' => 'name',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => true,\n                'title' => trans('general.name'),\n                'formatter' => 'modelsLinkFormatter',\n            ],\n            [\n                'field' => 'image',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.image'),\n                'visible' => true,\n                'formatter' => 'imageFormatter',\n            ],\n            [\n                'field' => 'manufacturer',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.manufacturer'),\n                'visible' => false,\n                'formatter' => 'manufacturersLinkObjFormatter',\n            ],\n            [\n                'field' => 'model_number',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/table.modelnumber'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'assets_count',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/table.numassets'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'depreciation',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.depreciation'),\n                'visible' => false,\n                'formatter' => 'depreciationsLinkObjFormatter',\n            ],\n            [\n                'field' => 'category',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.category'),\n                'visible' => false,\n                'formatter' => 'categoriesLinkObjFormatter',\n            ],\n            [\n                'field' => 'eol',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.eol'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'fieldset',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/general.fieldset'),\n                'visible' => true,\n                'formatter' => 'fieldsetsLinkObjFormatter',\n            ],\n            [\n                'field' => 'requestable',\n                'searchable' => false,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('admin/hardware/general.requestable'),\n                'formatter' => 'trueFalseFormatter',\n            ],\n            [\n                'field' => 'notes',\n                'searchable' => true,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.notes'),\n                'visible' => false,\n            ],\n            [\n                'field' => 'created_at',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('general.created_at'),\n                'formatter' => 'dateDisplayFormatter',\n            ],\n            [\n                'field' => 'updated_at',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('general.updated_at'),\n                'formatter' => 'dateDisplayFormatter',\n            ],\n\n        ];\n\n        $layout[] = [\n            'field' => 'actions',\n            'searchable' => false,\n            'sortable' => false,\n            'switchable' => false,\n            'title' => trans('table.actions'),\n            'formatter' => 'modelsActionsFormatter',\n        ];\n\n        return json_encode($layout);\n    }\n\n    /**\n     * Formatted note for this model\n     * @return string\n     */\n    public function note()\n    {\n        $Parsedown = new \\Parsedown();\n\n        if ($this->model->note) {\n            return $Parsedown->text($this->model->note);\n        }\n    }\n\n    public function eolText()\n    {\n        if ($this->eol) {\n            return $this->eol.' '.trans('general.months');\n        }\n\n        return '';\n    }\n\n    /**\n     * Pretty name for this model\n     * @return string\n     */\n    public function modelName()\n    {\n        $name = '';\n        if ($this->model->manufacturer) {\n            $name .= $this->model->manufacturer->name.' ';\n        }\n        $name .= $this->name;\n\n        if ($this->model_number) {\n            $name .= ' (#'.$this->model_number.')';\n        }\n\n        return $name;\n    }\n\n    /**\n     * Standard url for use to view page.\n     * @return string\n     */\n    public function nameUrl()\n    {\n        return  (string) link_to_route('models.show', $this->name, $this->id);\n    }\n\n    /**\n     * Generate img tag to this models image.\n     * @return string\n     */\n    public function imageUrl()\n    {\n        if (! empty($this->image)) {\n            return '<img src=\"'.url('/').'/uploads/models/'.$this->image.'\" alt=\"'.$this->name.'\" height=\"50\" width=\"50\">';\n        }\n\n        return '';\n    }\n\n    /**\n     * Generate img tag to this models image.\n     * @return string\n     */\n    public function imageSrc()\n    {\n        if (! empty($this->image)) {\n            return url('/').'/uploads/models/'.$this->image;\n        }\n\n        return '';\n    }\n\n    /**\n     * Url to view this item.\n     * @return string\n     */\n    public function viewUrl()\n    {\n        return route('models.show', $this->id);\n    }\n}\n", "@extends('layouts/basic')\n\n\n{{-- Page content --}}\n@section('content')\n\n    <form role=\"form\" action=\"{{ url('/login') }}\" method=\"POST\" autocomplete=\"false\">\n        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n\n        <!-- this is a hack to prevent Chrome from trying to autocomplete fields -->\n        <input type=\"text\" name=\"prevent_autofill\" id=\"prevent_autofill\" value=\"\" style=\"display:none;\" aria-hidden=\"true\">\n        <input type=\"password\" name=\"password_fake\" id=\"password_fake\" value=\"\" style=\"display:none;\" aria-hidden=\"true\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-md-4 col-md-offset-4\">\n\n                    <div class=\"box login-box\">\n                        <div class=\"box-header with-border\">\n                            <h1 class=\"box-title\"> {{ trans('auth/general.login_prompt')  }}</h1>\n                        </div>\n\n\n                        <div class=\"login-box-body\">\n                            <div class=\"row\">\n\n                                @if ($snipeSettings->login_note)\n                                    <div class=\"col-md-12\">\n                                        <div class=\"alert alert-info\">\n                                            {!!  Parsedown::instance()->text(e($snipeSettings->login_note))  !!}\n                                        </div>\n                                    </div>\n                                @endif\n\n                                <!-- Notifications -->\n                                @include('notifications')\n\n                                @if (!config('app.require_saml'))\n                                <div class=\"col-md-12\">\n                                    <!-- CSRF Token -->\n\n\n                                    <fieldset>\n\n                                        <div class=\"form-group{{ $errors->has('username') ? ' has-error' : '' }}\">\n                                            <label for=\"username\"><i class=\"fas fa-user\" aria-hidden=\"true\"></i> {{ trans('admin/users/table.username')  }}</label>\n                                            <input class=\"form-control\" placeholder=\"{{ trans('admin/users/table.username')  }}\" name=\"username\" type=\"text\" id=\"username\" autocomplete=\"off\" autofocus>\n                                            {!! $errors->first('username', '<span class=\"alert-msg\" aria-hidden=\"true\"><i class=\"fas fa-times\" aria-hidden=\"true\"></i> :message</span>') !!}\n                                        </div>\n                                        <div class=\"form-group{{ $errors->has('password') ? ' has-error' : '' }}\">\n                                            <label for=\"password\"><i class=\"fa fa-key\" aria-hidden=\"true\"></i> {{ trans('admin/users/table.password')  }}</label>\n                                            <input class=\"form-control\" placeholder=\"{{ trans('admin/users/table.password')  }}\" name=\"password\" type=\"password\" id=\"password\" autocomplete=\"off\">\n                                            {!! $errors->first('password', '<span class=\"alert-msg\" aria-hidden=\"true\"><i class=\"fas fa-times\" aria-hidden=\"true\"></i> :message</span>') !!}\n                                        </div>\n                                        <div class=\"checkbox\">\n                                            <label style=\"margin-left: -20px;\">\n                                                <input name=\"remember\" type=\"checkbox\" value=\"1\" class=\"minimal\"> {{ trans('auth/general.remember_me')  }}\n                                            </label>\n                                        </div>\n                                    </fieldset>\n                                </div> <!-- end col-md-12 -->\n                                @endif\n                            </div> <!-- end row -->\n\n                            @if (!config('app.require_saml') && $snipeSettings->saml_enabled)\n                            <div class=\"row \">\n                                <div class=\"text-right col-md-12\">\n                                    <a href=\"{{ route('saml.login')  }}\">{{ trans('auth/general.saml_login')  }}</a>\n                                </div>\n                            </div>\n                            @endif\n                        </div>\n                        <div class=\"box-footer\">\n                            @if (config('app.require_saml'))\n                            <a class=\"btn btn-lg btn-primary btn-block\" href=\"{{ route('saml.login')  }}\">{{ trans('auth/general.saml_login')  }}</a>\n                            @else\n                            <button class=\"btn btn-lg btn-primary btn-block\">{{ trans('auth/general.login')  }}</button>\n                            @endif\n                        </div>\n                        <div class=\"text-right col-md-12 col-sm-12 col-xs-12\" style=\"padding-top: 10px;\">\n                            @if ($snipeSettings->custom_forgot_pass_url)\n                                <a href=\"{{ $snipeSettings->custom_forgot_pass_url  }}\" rel=\"noopener\">{{ trans('auth/general.forgot_password')  }}</a>\n                            @elseif (!config('app.require_saml'))\n                                <a href=\"{{ route('password.request')  }}\">{{ trans('auth/general.forgot_password')  }}</a>\n                            @endif\n\n\n                        </div>\n                    </div> <!-- end login box -->\n\n                </div> <!-- col-md-4 -->\n\n            </div> <!-- end row -->\n        </div> <!-- end container -->\n    </form>\n\n@stop", "@extends('layouts/default')\n{{-- Page title --}}\n@section('title')\n{{ trans('general.dashboard') }}\n@parent\n@stop\n\n\n{{-- Page content --}}\n@section('content')\n\n@if ($snipeSettings->dashboard_message!='')\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <div class=\"box\">\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        {!!  Parsedown::instance()->text(e($snipeSettings->dashboard_message))  !!}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endif\n\n<div class=\"row\">\n  <!-- panel -->\n  <div class=\"col-lg-2 col-xs-6\">\n      <a href=\"{{ route('hardware.index') }}\">\n    <!-- small box -->\n    <div class=\"small-box bg-teal\">\n      <div class=\"inner\">\n        <h3>{{ number_format(\\App\\Models\\Asset::AssetsForShow()->count()) }}</h3>\n        <p>{{ strtolower(trans('general.assets')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n      </div>\n      @can('index', \\App\\Models\\Asset::class)\n        <a href=\"{{ route('hardware.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n      </a>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n     <a href=\"{{ route('licenses.index') }}\">\n    <!-- small box -->\n    <div class=\"small-box bg-maroon\">\n      <div class=\"inner\">\n        <h3>{{ number_format($counts['license']) }}</h3>\n        <p>{{ strtolower(trans('general.licenses')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"far fa-save\"></i>\n      </div>\n        @can('view', \\App\\Models\\License::class)\n          <a href=\"{{ route('licenses.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n        @endcan\n    </div>\n     </a>\n  </div><!-- ./col -->\n\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <!-- small box -->\n      <a href=\"{{ route('accessories.index') }}\">\n    <div class=\"small-box bg-orange\">\n      <div class=\"inner\">\n        <h3> {{ number_format($counts['accessory']) }}</h3>\n        <p>{{ strtolower(trans('general.accessories')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"far fa-keyboard\"></i>\n      </div>\n      @can('index', \\App\\Models\\Accessory::class)\n          <a href=\"{{ route('accessories.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n      </a>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <!-- small box -->\n\n      <a href=\"{{ route('consumables.index') }}\">\n    <div class=\"small-box bg-purple\">\n      <div class=\"inner\">\n        <h3> {{ number_format($counts['consumable']) }}</h3>\n        <p>{{ strtolower(trans('general.consumables')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"fas fa-tint\"></i>\n      </div>\n      @can('index', \\App\\Models\\Consumable::class)\n        <a href=\"{{ route('consumables.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <a href=\"{{ route('components.index') }}\">\n   <!-- small box -->\n   <div class=\"small-box bg-yellow\">\n     <div class=\"inner\">\n       <h3>{{ number_format($counts['component']) }}</h3>\n       <p>{{ strtolower(trans('general.components')) }}</p>\n     </div>\n     <div class=\"icon\" aria-hidden=\"true\">\n       <i class=\"far fa-hdd\"></i>\n     </div>\n       @can('view', \\App\\Models\\License::class)\n         <a href=\"{{ route('components.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n       @endcan\n   </div>\n    </a>\n </div><!-- ./col -->\n\n <div class=\"col-lg-2 col-xs-6\">\n    <a href=\"{{ route('users.index') }}\">\n   <!-- small box -->\n   <div class=\"small-box bg-light-blue\">\n     <div class=\"inner\">\n       <h3>{{ number_format($counts['user']) }}</h3>\n       <p>{{ strtolower(trans('general.people')) }}</p>\n     </div>\n     <div class=\"icon\" aria-hidden=\"true\">\n       <i class=\"fas fa-users\"></i>\n     </div>\n       @can('view', \\App\\Models\\License::class)\n         <a href=\"{{ route('users.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n       @endcan\n   </div>\n    </a>\n </div><!-- ./col -->\n\n</div>\n</div>\n\n@if ($counts['grand_total'] == 0)\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h2 class=\"box-title\">{{ trans('general.dashboard_info') }}</h2>\n                </div>\n                <!-- /.box-header -->\n                <div class=\"box-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n\n                            <div class=\"progress\">\n                                <div class=\"progress-bar progress-bar-yellow\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%\">\n                                    <span class=\"sr-only\">{{ trans('general.60_percent_warning') }}</span>\n                                </div>\n                            </div>\n\n\n                            <p><strong>{{ trans('general.dashboard_empty') }}</strong></p>\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Asset::class)\n                            <a class=\"btn bg-teal\" style=\"width: 100%\" href=\"{{ route('hardware.create') }}\">{{ trans('general.new_asset') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\License::class)\n                                <a class=\"btn bg-maroon\" style=\"width: 100%\" href=\"{{ route('licenses.create') }}\">{{ trans('general.new_license') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Accessory::class)\n                                <a class=\"btn bg-orange\" style=\"width: 100%\" href=\"{{ route('accessories.create') }}\">{{ trans('general.new_accessory') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Consumable::class)\n                                <a class=\"btn bg-purple\" style=\"width: 100%\" href=\"{{ route('consumables.create') }}\">{{ trans('general.new_consumable') }}</a>\n                            @endcan\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n@else\n\n<!-- recent activity -->\n<div class=\"row\">\n  <div class=\"col-md-8\">\n    <div class=\"box\">\n      <div class=\"box-header with-border\">\n        <h2 class=\"box-title\">{{ trans('general.recent_activity') }}</h2>\n        <div class=\"box-tools pull-right\">\n            <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\" aria-hidden=\"true\">\n                <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n            </button>\n        </div>\n      </div><!-- /.box-header -->\n      <div class=\"box-body\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"table-responsive\">\n\n                <table\n                    data-cookie-id-table=\"dashActivityReport\"\n                    data-height=\"350\"\n                    data-pagination=\"false\"\n                    data-id-table=\"dashActivityReport\"\n                    data-side-pagination=\"server\"\n                    data-sort-order=\"desc\"\n                    data-sort-name=\"created_at\"\n                    id=\"dashActivityReport\"\n                    class=\"table table-striped snipe-table\"\n                    data-url=\"{{ route('api.activity.index', ['limit' => 25]) }}\">\n                    <thead>\n                    <tr>\n                        <th data-field=\"icon\" data-visible=\"true\" style=\"width: 40px;\" class=\"hidden-xs\" data-formatter=\"iconFormatter\"><span  class=\"sr-only\">{{ trans('admin/hardware/table.icon') }}</span></th>\n                        <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"created_at\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.date') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"admin\" data-formatter=\"usersLinkObjFormatter\">{{ trans('general.admin') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"action_type\">{{ trans('general.action') }}</th>\n                        <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"item\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.item') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"target\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.target') }}</th>\n                    </tr>\n                    </thead>\n                </table>\n\n\n\n            </div><!-- /.responsive -->\n          </div><!-- /.col -->\n          <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n            <a href=\"{{ route('reports.activity') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n          </div>\n        </div><!-- /.row -->\n      </div><!-- ./box-body -->\n    </div><!-- /.box -->\n  </div>\n  <div class=\"col-md-4\">\n        <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.assets') }} {{ trans('general.bystatus') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\" aria-hidden=\"true\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"chart-responsive\">\n                            <canvas id=\"statusPieChart\" height=\"290\"></canvas>\n                        </div> <!-- ./chart-responsive -->\n                    </div> <!-- /.col -->\n                </div> <!-- /.row -->\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n  </div>\n\n</div> <!--/row-->\n<div class=\"row\">\n    <div class=\"col-md-6\">\n         <!-- Categories -->\n         <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.asset') }} {{ trans('general.locations') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"table-responsive\">\n                        <table\n                                data-cookie-id-table=\"dashLocationSummary\"\n                                data-height=\"400\"\n                                data-pagination=\"true\"\n                                data-side-pagination=\"server\"\n                                data-sort-order=\"desc\"\n                                data-sort-field=\"assets_count\"\n                                id=\"dashLocationSummary\"\n                                class=\"table table-striped snipe-table\"\n                                data-url=\"{{ route('api.locations.index', ['sort' => 'assets_count', 'order' => 'asc']) }}\">\n\n                            <thead>\n                            <tr>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"name\" data-formatter=\"locationsLinkFormatter\" data-sortable=\"true\">{{ trans('general.name') }}</th>\n                                \n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assets_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.asset_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assigned_assets_count\" data-sortable=\"true\">\n                                    \n                                    {{ trans('general.assigned') }}\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"users_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-users\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.people') }}</span>\n                                    \n                                </th>\n                                \n                            </tr>\n                            </thead>\n                        </table>\n                        </div>\n                    </div> <!-- /.col -->\n                    <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n                        <a href=\"{{ route('locations.index') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n                    </div>\n                </div> <!-- /.row -->\n\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n    </div>\n    <div class=\"col-md-6\">\n\n        <!-- Categories -->\n        <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.asset') }} {{ trans('general.categories') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"table-responsive\">\n                        <table\n                                data-cookie-id-table=\"dashCategorySummary\"\n                                data-height=\"400\"\n                                data-pagination=\"true\"\n                                data-side-pagination=\"server\"\n                                data-sort-order=\"desc\"\n                                data-sort-field=\"assets_count\"\n                                id=\"dashCategorySummary\"\n                                class=\"table table-striped snipe-table\"\n                                data-url=\"{{ route('api.categories.index', ['sort' => 'assets_count', 'order' => 'asc']) }}\">\n\n                            <thead>\n                            <tr>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"name\" data-formatter=\"categoriesLinkFormatter\" data-sortable=\"true\">{{ trans('general.name') }}</th>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"category_type\" data-sortable=\"true\">\n                                    {{ trans('general.type') }}\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assets_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.asset_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"accessories_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-keyboard\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.accessories_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"consumables_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-tint\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.consumables_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"components_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-hdd\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.components_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"licenses_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-save\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.licenses_count') }}</span>\n                                </th>\n                            </tr>\n                            </thead>\n                        </table>\n                        </div>\n                    </div> <!-- /.col -->\n                    <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n                        <a href=\"{{ route('categories.index') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n                    </div>\n                </div> <!-- /.row -->\n\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n    </div>\n</div>\n\n@endif\n\n\n@stop\n\n@section('moar_scripts')\n@include ('partials.bootstrap-table', ['simple_view' => true, 'nopages' => true])\n@stop\n\n@push('js')\n\n\n\n<script nonce=\"{{ csrf_token() }}\">\n    // ---------------------------\n    // - ASSET STATUS CHART -\n    // ---------------------------\n      var pieChartCanvas = $(\"#statusPieChart\").get(0).getContext(\"2d\");\n      var pieChart = new Chart(pieChartCanvas);\n      var ctx = document.getElementById(\"statusPieChart\");\n      var pieOptions = {\n              legend: {\n                  position: 'top',\n                  responsive: true,\n                  maintainAspectRatio: true,\n              }\n          };\n\n      $.ajax({\n          type: 'GET',\n          url: '{{  route('api.statuslabels.assets.bytype') }}',\n          headers: {\n              \"X-Requested-With\": 'XMLHttpRequest',\n              \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n          },\n          dataType: 'json',\n          success: function (data) {\n              var myPieChart = new Chart(ctx,{\n                  type   : 'doughnut',\n                  data   : data,\n                  options: pieOptions\n              });\n          },\n          error: function (data) {\n              // window.location.reload(true);\n          },\n      });\n        var last = document.getElementById('statusPieChart').clientWidth;\n        addEventListener('resize', function() {\n        var current = document.getElementById('statusPieChart').clientWidth;\n        if (current != last) location.reload();\n        last = current;\n    });\n</script>\n@endpush\n", "<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>\n      @section('title')\n      @show\n      :: {{ $snipeSettings->site_name }}\n    </title>\n    <!-- Tell the browser to be responsive to screen width -->\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n\n      <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n\n\n      <link rel=\"apple-touch-icon\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->logo)) :  config('app.url').'/img/logo.png' }}\">\n      <link rel=\"apple-touch-startup-image\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->logo)) :  config('app.url').'/img/logo.png' }}\">\n      <link rel=\"shortcut icon\" type=\"image/ico\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->favicon)) : config('app.url').'/favicon.ico' }} \">\n\n\n      <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n      <meta name=\"baseUrl\" content=\"{{ url('/') }}/\">\n\n    <script nonce=\"{{ csrf_token() }}\">\n      window.Laravel = { csrfToken: '{{ csrf_token() }}' };\n    </script>\n\n    {{-- stylesheets --}}\n    <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/all.css')) }}\">\n    @if (($snipeSettings) && ($snipeSettings->allow_user_skin==1) && Auth::check() && Auth::user()->present()->skin != '')\n        <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/skins/skin-'.Auth::user()->present()->skin.'.min.css')) }}\">\n    @else\n    <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/skins/skin-'.($snipeSettings->skin!='' ? $snipeSettings->skin : 'blue').'.css')) }}\">\n    @endif\n    {{-- page level css --}}\n    @stack('css')\n\n\n\n    @if (($snipeSettings) && ($snipeSettings->header_color!=''))\n    <style nonce=\"{{ csrf_token() }}\">\n        .main-header .navbar, .main-header .logo {\n            background-color: {{ $snipeSettings->header_color }};\n            background: -webkit-linear-gradient(top,  {{ $snipeSettings->header_color }} 0%,{{ $snipeSettings->header_color }} 100%);\n            background: linear-gradient(to bottom, {{ $snipeSettings->header_color }} 0%,{{ $snipeSettings->header_color }} 100%);\n            border-color: {{ $snipeSettings->header_color }};\n        }\n        .skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} .sidebar-menu > li:hover > a, .skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} .sidebar-menu > li.active > a {\n          border-left-color: {{ $snipeSettings->header_color }};\n        }\n\n        .btn-primary {\n          background-color: {{ $snipeSettings->header_color }};\n          border-color: {{ $snipeSettings->header_color }};\n        }\n    </style>\n    @endif\n\n    {{-- Custom CSS --}}\n    @if (($snipeSettings) && ($snipeSettings->custom_css))\n    <style>\n        {!! $snipeSettings->show_custom_css() !!}\n    </style>\n    @endif\n\n\n    <script nonce=\"{{ csrf_token() }}\">\n          window.snipeit = {\n              settings: {\n                  \"per_page\": {{ $snipeSettings->per_page }}\n              }\n          };\n    </script>\n\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n        <script src=\"{{ url(asset('js/html5shiv.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n        <script src=\"{{ url(asset('js/respond.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n\n    @livewireStyles\n\n  </head>\n\n  @if (($snipeSettings) && ($snipeSettings->allow_user_skin==1) && Auth::check() && Auth::user()->present()->skin != '')\n      <body class=\"sidebar-mini skin-{{ $snipeSettings->skin!='' ? Auth::user()->present()->skin : 'blue' }} {{ (session('menu_state')!='open') ? 'sidebar-mini sidebar-collapse' : ''  }}\">\n  @else\n      <body class=\"sidebar-mini skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} {{ (session('menu_state')!='open') ? 'sidebar-mini sidebar-collapse' : ''  }}\">\n  @endif\n\n  <a class=\"skip-main\" href=\"#main\">Skip to main content</a>\n    <div class=\"wrapper\">\n\n      <header class=\"main-header\">\n\n        <!-- Logo -->\n\n\n        <!-- Header Navbar: style can be found in header.less -->\n        <nav class=\"navbar navbar-static-top\" role=\"navigation\">\n          <!-- Sidebar toggle button above the compact sidenav -->\n          <a href=\"#\" style=\"color: white\" class=\"sidebar-toggle btn btn-white\" data-toggle=\"push-menu\" role=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n          </a>\n          <div class=\"nav navbar-nav navbar-left\">\n              <div class=\"left-navblock\">\n                 @if ($snipeSettings->brand == '3')\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          @if ($snipeSettings->logo!='')\n                          <img class=\"navbar-brand-img\" src=\"{{ Storage::disk('public')->url($snipeSettings->logo) }}\" alt=\"{{ $snipeSettings->site_name }} logo\">\n                          @endif\n                          {{ $snipeSettings->site_name }}\n                      </a>\n                  @elseif ($snipeSettings->brand == '2')\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          @if ($snipeSettings->logo!='')\n                            <img class=\"navbar-brand-img\" src=\"{{ Storage::disk('public')->url($snipeSettings->logo) }}\" alt=\"{{ $snipeSettings->site_name }} logo\">\n                          @endif\n                          <span class=\"sr-only\">{{ $snipeSettings->site_name }}</span>\n                      </a>\n                  @else\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          {{ $snipeSettings->site_name }}\n                      </a>\n                  @endif\n              </div>\n            </div>\n\n          <!-- Navbar Right Menu -->\n            <div class=\"navbar-custom-menu\">\n              <ul class=\"nav navbar-nav\">\n                  @can('index', \\App\\Models\\Asset::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('hardware*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ url('hardware') }}\" tabindex=\"-1\">\n                          <i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                          <span class=\"sr-only\">{{ trans('general.assets') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('view', \\App\\Models\\License::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('licenses*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ route('licenses.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-save fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.licenses') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('index', \\App\\Models\\Accessory::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('accessories*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ route('accessories.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-keyboard fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.accessories') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('index', \\App\\Models\\Consumable::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('consumables*') ? ' class=\"active\"' : '') !!}>\n                      <a href=\"{{ url('consumables') }}\" tabindex=\"-1\">\n                          <i class=\"fas fa-tint fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.consumables') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('view', \\App\\Models\\Component::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('components*') ? ' class=\"active\"' : '') !!}>\n                      <a href=\"{{ route('components.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-hdd fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.components') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n\n                  @can('index', \\App\\Models\\Asset::class)\n                  <li>\n                  <form class=\"navbar-form navbar-left form-horizontal\" role=\"search\" action=\"{{ route('findbytag/hardware') }}\" method=\"get\">\n                      <div class=\"col-xs-12 col-md-12\">\n                          <div class=\"col-xs-12 form-group\">\n                              <label class=\"sr-only\" for=\"tagSearch\">{{ trans('general.lookup_by_tag') }}</label>\n                              <input type=\"text\" class=\"form-control\" id=\"tagSearch\" name=\"assetTag\" placeholder=\"{{ trans('general.lookup_by_tag') }}\">\n                              <input type=\"hidden\" name=\"topsearch\" value=\"true\" id=\"search\">\n                          </div>\n                          <div class=\"col-xs-1\">\n                              <button type=\"submit\" class=\"btn btn-primary pull-right\">\n                                  <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n                                  <span class=\"sr-only\">{{ trans('general.search') }}</span>\n                              </button>\n                          </div>\n                      </div>\n                  </form>\n                  </li>\n                  @endcan\n\n                  @can('admin')\n                  <li class=\"dropdown\" aria-hidden=\"true\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" tabindex=\"-1\">\n                      {{ trans('general.create') }}\n                      <strong class=\"caret\"></strong>\n                    </a>\n                   <ul class=\"dropdown-menu\">\n                     @can('create', \\App\\Models\\Asset::class)\n                      <li {!! (Request::is('hardware/create') ? 'class=\"active>\"' : '') !!}>\n                              <a href=\"{{ route('hardware.create') }}\" tabindex=\"-1\">\n                                  <i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                                  {{ trans('general.asset') }}\n                              </a>\n                      </li>\n                       @endcan\n                       @can('create', \\App\\Models\\License::class)\n                       <li {!! (Request::is('licenses/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('licenses.create') }}\" tabindex=\"-1\">\n                               <i class=\"far fa-save fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.license') }}\n                           </a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Accessory::class)\n                       <li {!! (Request::is('accessories/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('accessories.create') }}\" tabindex=\"-1\">\n                               <i class=\"far fa-keyboard fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.accessory') }}</a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Consumable::class)\n                       <li {!! (Request::is('consunmables/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('consumables.create') }}\" tabindex=\"-1\">\n                               <i class=\"fas fa-tint fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.consumable') }}\n                           </a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Component::class)\n                       <li {!! (Request::is('components/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('components.create') }}\" tabindex=\"-1\">\n                           <i class=\"far fa-hdd fa-fw\" aria-hidden=\"true\"></i>\n                           {{ trans('general.component') }}\n                           </a>\n                       </li>\n                       @endcan\n                         @can('create', \\App\\Models\\User::class)\n                             <li {!! (Request::is('users/create') ? 'class=\"active\"' : '') !!}>\n                                 <a href=\"{{ route('users.create') }}\" tabindex=\"-1\">\n                                     <i class=\"fas fa-user fa-fw\" aria-hidden=\"true\"></i>\n                                     {{ trans('general.user') }}\n                                 </a>\n                             </li>\n                         @endcan\n                   </ul>\n                </li>\n               @endcan\n\n               @can('admin')\n               @if ($snipeSettings->show_alerts_in_menu=='1')\n               <!-- Tasks: style can be found in dropdown.less -->\n               <?php $alert_items = Helper::checkLowInventory(); ?>\n\n               <li class=\"dropdown tasks-menu\">\n                 <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                   <i class=\"far fa-flag\" aria-hidden=\"true\"></i>\n                     <span class=\"sr-only\">Alerts</span>\n                   @if (count($alert_items))\n                    <span class=\"label label-danger\">{{ count($alert_items) }}</span>\n                   @endif\n                 </a>\n                 <ul class=\"dropdown-menu\">\n                   <li class=\"header\">{{ trans('general.quantity_minimum', array('count' => count($alert_items))) }}</li>\n                   <li>\n                     <!-- inner menu: contains the actual data -->\n                     <ul class=\"menu\">\n\n                      @for($i = 0; count($alert_items) > $i; $i++)\n\n                        <li><!-- Task item -->\n                          <a href=\"{{route($alert_items[$i]['type'].'.show', $alert_items[$i]['id'])}}\">\n                            <h2 class=\"task_menu\">{{ $alert_items[$i]['name'] }}\n                              <small class=\"pull-right\">\n                                {{ $alert_items[$i]['remaining'] }} {{ trans('general.remaining') }}\n                              </small>\n                            </h2>\n                            <div class=\"progress xs\">\n                              <div class=\"progress-bar progress-bar-yellow\" style=\"width: {{ $alert_items[$i]['percent'] }}%\" role=\"progressbar\" aria-valuenow=\"{{ $alert_items[$i]['percent'] }}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                                <span class=\"sr-only\">{{ $alert_items[$i]['percent'] }}% Complete</span>\n                              </div>\n                            </div>\n                          </a>\n                        </li>\n                        <!-- end task item -->\n                      @endfor\n                     </ul>\n                   </li>\n                   {{-- <li class=\"footer\">\n                     <a href=\"#\">View all tasks</a>\n                   </li> --}}\n                 </ul>\n               </li>\n               @endcan\n               @endif\n\n\n               <!-- User Account: style can be found in dropdown.less -->\n               @if (Auth::check())\n               <li class=\"dropdown user user-menu\">\n                 <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                   @if (Auth::user()->present()->gravatar())\n                       <img src=\"{{ Auth::user()->present()->gravatar() }}\" class=\"user-image\" alt=\"\">\n                   @else\n                      <i class=\"fas fa-users\" aria-hidden=\"true\"></i>\n                   @endif\n\n                   <span class=\"hidden-xs\">{{ Auth::user()->first_name }} <strong class=\"caret\"></strong></span>\n                 </a>\n                 <ul class=\"dropdown-menu\">\n                   <!-- User image -->\n                     <li {!! (Request::is('account/profile') ? ' class=\"active\"' : '') !!}>\n                       <a href=\"{{ route('view-assets') }}\">\n                             <i class=\"fas fa-check fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.viewassets') }}\n                       </a></li>\n\n                     @can('viewRequestable', \\App\\Models\\Asset::class)\n                     <li {!! (Request::is('account/requested') ? ' class=\"active\"' : '') !!}>\n                         <a href=\"{{ route('account.requested') }}\">\n                             <i class=\"fas fa-check fa-disk fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.requested_assets_menu') }}\n                         </a></li>\n                     @endcan\n                     \n                     <li {!! (Request::is('account/accept') ? ' class=\"active\"' : '') !!}>\n                         <a href=\"{{ route('account.accept') }}\">\n                             <i class=\"fas fa-check fa-disk fa-fw\"></i>\n                             {{ trans('general.accept_assets_menu') }}\n                         </a></li>\n\n\n\n                     <li>\n                          <a href=\"{{ route('profile') }}\">\n                             <i class=\"fas fa-user fa-fw\" aria-hidden=\"true\"></i>\n                              {{ trans('general.editprofile') }}\n                         </a>\n                     </li>\n                     <li>\n                         <a href=\"{{ route('account.password.index') }}\">\n                             <i class=\"fa-solid fa-asterisk fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.changepassword') }}\n                         </a>\n                     </li>\n\n\n\n                     @can('self.api')\n                     <li>\n                         <a href=\"{{ route('user.api') }}\">\n                             <i class=\"fa-solid fa-user-secret fa-fw\" aria-hidden=\"true\"></i></i> {{ trans('general.manage_api_keys') }}\n                         </a>\n                     </li>\n                     @endcan\n                     <li class=\"divider\"></li>\n                     <li>\n\n                        <a href=\"{{ route('logout.get') }}\" onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\">\n                            <i class=\"fa fa-sign-out fa-fw\"></i> {{ trans('general.logout') }}\n                        </a>\n                        \n                        <form id=\"logout-form\" action=\"{{ route('logout.post') }}\" method=\"POST\" style=\"display: none;\">\n                            {{ csrf_field() }}\n                        </form>\n\n                     </li>\n                 </ul>\n               </li>\n               @endif\n\n\n               @can('superadmin')\n               <li>\n                   <a href=\"{{ route('settings.index') }}\">\n                       <i class=\"fa fa-cogs fa-fw\" aria-hidden=\"true\"></i>\n                       <span class=\"sr-only\">{{ trans('general.admin') }}</span>\n                   </a>\n               </li>\n               @endcan\n            </ul>\n          </div>\n      </nav>\n       <a href=\"#\" style=\"float:left\" class=\"sidebar-toggle-mobile visible-xs btn\" data-toggle=\"push-menu\" role=\"button\">\n        <span class=\"sr-only\">{{ trans('general.toggle_navigation') }}</span>\n        <i class=\"fas fa-bars\"></i>\n      </a>\n       <!-- Sidebar toggle button-->\n      </header>\n\n        <!-- Left side column. contains the logo and sidebar -->\n      <aside class=\"main-sidebar\">\n        <!-- sidebar: style can be found in sidebar.less -->\n        <section class=\"sidebar\">\n          <!-- sidebar menu: : style can be found in sidebar.less -->\n          <ul class=\"sidebar-menu\" data-widget=\"tree\">\n            @can('admin')\n            <li {!! (\\Request::route()->getName()=='home' ? ' class=\"active\"' : '') !!} class=\"firstnav\">\n              <a href=\"{{ route('home') }}\">\n                <i class=\"fas fa-tachometer-alt fa-fw\" aria-hidden=\"true\"></i> <span>{{ trans('general.dashboard') }}</span>\n              </a>\n            </li>\n            @endcan\n            @can('index', \\App\\Models\\Asset::class)\n            <li class=\"treeview{{ (Request::is('hardware*') ? ' active' : '') }}\">\n                <a href=\"#\"><i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                  <span>{{ trans('general.assets') }}</span>\n                  <i class=\"fa fa-angle-left pull-right\"></i>\n                </a>\n                <ul class=\"treeview-menu\">\n                  <li>\n                      <a href=\"{{ url('hardware') }}\">\n                          <i class=\"far fa-circle text-grey fa-fw\" aria-hidden=\"true\"></i>\n                        {{ trans('general.list_all') }}\n                    </a>\n                  </li>\n\n                    <?php $status_navs = \\App\\Models\\Statuslabel::where('show_in_nav', '=', 1)->withCount('assets as asset_count')->get(); ?>\n                    @if (count($status_navs) > 0)\n                        @foreach ($status_navs as $status_nav)\n                            <li><a href=\"{{ route('statuslabels.show', ['statuslabel' => $status_nav->id]) }}\">\n                                <i class=\"fas fa-circle text-grey fa-fw\" aria-hidden=\"true\"></i>\n                                 {{ $status_nav->name }} ({{ $status_nav->asset_count }})</a></li>\n                        @endforeach\n                    @endif\n\n\n                  <li{!! (Request::query('status') == 'Deployed' ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ url('hardware?status=Deployed') }}\">\n                        <i class=\"far fa-circle text-blue fa-fw\"></i>\n                        {{ trans('general.all') }}\n                        {{ trans('general.deployed') }}\n                        ({{ (isset($total_deployed_sidebar)) ? $total_deployed_sidebar : '' }})\n                    </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'RTD' ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ url('hardware?status=RTD') }}\">\n                        <i class=\"far fa-circle text-green fa-fw\"></i>\n                        {{ trans('general.all') }}\n                        {{ trans('general.ready_to_deploy') }}\n                        ({{ (isset($total_rtd_sidebar)) ? $total_rtd_sidebar : '' }})\n                    </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Pending' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Pending') }}\"><i class=\"far fa-circle text-orange fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('general.pending') }}\n                          ({{ (isset($total_pending_sidebar)) ? $total_pending_sidebar : '' }})\n                      </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Undeployable' ? ' class=\"active\"' : '') !!} ><a href=\"{{ url('hardware?status=Undeployable') }}\"><i class=\"fas fa-times text-red fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('general.undeployable') }}\n                          ({{ (isset($total_undeployable_sidebar)) ? $total_undeployable_sidebar : '' }})\n                      </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Archived' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Archived') }}\"><i class=\"fas fa-times text-red fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('admin/hardware/general.archived') }}\n                          ({{ (isset($total_archived_sidebar)) ? $total_archived_sidebar : '' }})\n                          </a>\n                  </li>\n                    <li{!! (Request::query('status') == 'Requestable' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Requestable') }}\"><i class=\"fas fa-check text-blue fa-fw\"></i>\n                        {{ trans('admin/hardware/general.requestable') }}\n                        </a>\n                    </li>\n\n                    @can('audit', \\App\\Models\\Asset::class)\n                        <li{!! (Request::is('hardware/audit/due') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('assets.audit.due') }}\">\n                                <i class=\"fas fa-history text-yellow fa-fw\"></i> {{ trans('general.audit_due') }}\n                            </a>\n                        </li>\n                        <li{!! (Request::is('hardware/audit/overdue') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('assets.audit.overdue') }}\">\n                                <i class=\"fas fa-exclamation-triangle text-red fa-fw\"></i> {{ trans('general.audit_overdue') }}\n                            </a>\n                        </li>\n                    @endcan\n\n                  <li class=\"divider\">&nbsp;</li>\n                    @can('checkin', \\App\\Models\\Asset::class)\n                        <li{!! (Request::is('hardware/quickscancheckin') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('hardware/quickscancheckin') }}\">\n                                {{ trans('general.quickscan_checkin') }}\n                            </a>\n                        </li>\n                    @endcan\n\n                    @can('checkout', \\App\\Models\\Asset::class)\n                    <li{!! (Request::is('hardware/bulkcheckout') ? ' class=\"active\"' : '') !!}>\n                        <a href=\"{{ route('hardware.bulkcheckout.show') }}\">\n                            {{ trans('general.bulk_checkout') }}\n                        </a>\n                    </li>\n                    <li{!! (Request::is('hardware/requested') ? ' class=\"active\"' : '') !!}>\n                        <a href=\"{{ route('assets.requested') }}\">\n                            {{ trans('general.requested') }}</a>\n                    </li>\n                    @endcan\n\n                    @can('create', \\App\\Models\\Asset::class)\n                      <li{!! (Request::query('Deleted') ? ' class=\"active\"' : '') !!}>\n                          <a href=\"{{ url('hardware?status=Deleted') }}\">\n                              {{ trans('general.deleted') }}\n                          </a>\n                      </li>\n                      <li>\n                          <a href=\"{{ route('maintenances.index') }}\">\n                            {{ trans('general.asset_maintenances') }}\n                          </a>\n                      </li>\n                    @endcan\n                    @can('admin')\n                      <li>\n                          <a href=\"{{ url('hardware/history') }}\">\n                            {{ trans('general.import-history') }}\n                          </a>\n                      </li>\n                    @endcan\n                    @can('audit', \\App\\Models\\Asset::class)\n                        <li>\n                            <a href=\"{{ route('assets.bulkaudit') }}\">\n                                {{ trans('general.bulkaudit') }}\n                            </a>\n                        </li>\n                    @endcan\n                </ul>\n              </li>\n              @endcan\n              @can('view', \\App\\Models\\License::class)\n              <li{!! (Request::is('licenses*') ? ' class=\"active\"' : '') !!}>\n                  <a href=\"{{ route('licenses.index') }}\">\n                    <i class=\"far fa-save fa-fw\"></i>\n                    <span>{{ trans('general.licenses') }}</span>\n                  </a>\n              </li>\n              @endcan\n              @can('index', \\App\\Models\\Accessory::class)\n              <li{!! (Request::is('accessories*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ route('accessories.index') }}\">\n                  <i class=\"far fa-keyboard fa-fw\"></i>\n                  <span>{{ trans('general.accessories') }}</span>\n                </a>\n              </li>\n              @endcan\n              @can('view', \\App\\Models\\Consumable::class)\n            <li{!! (Request::is('consumables*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ url('consumables') }}\">\n                  <i class=\"fas fa-tint fa-fw\"></i>\n                  <span>{{ trans('general.consumables') }}</span>\n                </a>\n            </li>\n             @endcan\n             @can('view', \\App\\Models\\Component::class)\n            <li{!! (Request::is('components*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ route('components.index') }}\">\n                  <i class=\"far fa-hdd fa-fw\"></i>\n                  <span>{{ trans('general.components') }}</span>\n                </a>\n            </li>\n            @endcan\n            @can('view', \\App\\Models\\PredefinedKit::class)\n                <li{!! (Request::is('kits') ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ route('kits.index') }}\">\n                        <i class=\"fa fa-object-group fa-fw\"></i>\n                        <span>{{ trans('general.kits') }}</span>\n                    </a>\n                </li>\n            @endcan\n\n            @can('view', \\App\\Models\\User::class)\n            <li{!! (Request::is('users*') ? ' class=\"active\"' : '') !!}>\n                  <a href=\"{{ route('users.index') }}\">\n                      <i class=\"fas fa-users fa-fw\"></i>\n                      <span>{{ trans('general.people') }}</span>\n                  </a>\n            </li>\n            @endcan\n            @can('import')\n                <li{!! (Request::is('import/*') ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ route('imports.index') }}\">\n                        <i class=\"fas fa-cloud-download-alt fa-fw\"></i>\n                        <span>{{ trans('general.import') }}</span>\n                    </a>\n                </li>\n            @endcan\n\n            @can('backend.interact')\n                <li class=\"treeview {!! in_array(Request::route()->getName(),App\\Helpers\\Helper::SettingUrls()) ? ' active': '' !!}\">\n                    <a href=\"#\" id=\"settings\">\n                        <i class=\"fas fa-cog\" aria-hidden=\"true\"></i>\n                        <span>{{ trans('general.settings') }}</span>\n                        <i class=\"fa fa-angle-left pull-right\"></i>\n                    </a>\n\n                    <ul class=\"treeview-menu\">\n                        @if(Gate::allows('view', App\\Models\\CustomField::class) || Gate::allows('view', App\\Models\\CustomFieldset::class))\n                            <li {!! (Request::is('fields*') ? ' class=\"active\"' : '') !!}>\n                                <a href=\"{{ route('fields.index') }}\">\n                                    {{ trans('admin/custom_fields/general.custom_fields') }}\n                                </a>\n                            </li>\n                        @endif\n\n                        @can('view', \\App\\Models\\Statuslabel::class)\n                            <li {!! (Request::is('statuslabels*') ? ' class=\"active\"' : '') !!}>\n                                <a href=\"{{ route('statuslabels.index') }}\">\n                                    {{ trans('general.status_labels') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\AssetModel::class)\n                            <li>\n                                <a href=\"{{ route('models.index') }}\" {{ (Request::is('/assetmodels') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.asset_models') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Category::class)\n                            <li>\n                                <a href=\"{{ route('categories.index') }}\" {{ (Request::is('/categories') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.categories') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Manufacturer::class)\n                            <li>\n                                <a href=\"{{ route('manufacturers.index') }}\" {{ (Request::is('/manufacturers') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.manufacturers') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Supplier::class)\n                            <li>\n                                <a href=\"{{ route('suppliers.index') }}\" {{ (Request::is('/suppliers') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.suppliers') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Department::class)\n                            <li>\n                                <a href=\"{{ route('departments.index') }}\" {{ (Request::is('/departments') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.departments') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Location::class)\n                            <li>\n                                <a href=\"{{ route('locations.index') }}\" {{ (Request::is('/locations') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.locations') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Company::class)\n                            <li>\n                                <a href=\"{{ route('companies.index') }}\" {{ (Request::is('/companies') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.companies') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Depreciation::class)\n                            <li>\n                                <a href=\"{{ route('depreciations.index') }}\" {{ (Request::is('/depreciations') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.depreciation') }}\n                                </a>\n                            </li>\n                        @endcan\n                    </ul>\n                </li>\n            @endcan\n\n            @can('reports.view')\n            <li class=\"treeview{{ (Request::is('reports*') ? ' active' : '') }}\">\n                <a href=\"#\"  class=\"dropdown-toggle\">\n                    <i class=\"fas fa-chart-bar fa-fw\"></i>\n                    <span>{{ trans('general.reports') }}</span>\n                    <i class=\"fa fa-angle-left pull-right\"></i>\n                </a>\n\n                <ul class=\"treeview-menu\">\n                    <li>\n                        <a href=\"{{ route('reports.activity') }}\" {{ (Request::is('reports/activity') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.activity_report') }}\n                        </a>\n                    </li>\n\n                    <li><a href=\"{{ route('reports.audit') }}\" {{ (Request::is('reports.audit') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.audit_report') }}</a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/depreciation') }}\" {{ (Request::is('reports/depreciation') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.depreciation_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/licenses') }}\" {{ (Request::is('reports/licenses') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.license_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/asset_maintenances') }}\" {{ (Request::is('reports/asset_maintenances') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.asset_maintenance_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/unaccepted_assets') }}\" {{ (Request::is('reports/unaccepted_assets') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.unaccepted_asset_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/accessories') }}\" {{ (Request::is('reports/accessories') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.accessory_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/custom') }}\" {{ (Request::is('reports/custom') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.custom_report') }}\n                        </a>\n                    </li>\n                </ul>\n            </li>\n            @endcan\n\n            @can('viewRequestable', \\App\\Models\\Asset::class)\n            <li{!! (Request::is('account/requestable-assets') ? ' class=\"active\"' : '') !!}>\n            <a href=\"{{ route('requestable-assets') }}\">\n            <i class=\"fa fa-laptop fa-fw\"></i>\n            <span>{{ trans('admin/hardware/general.requestable') }}</span>\n            </a>\n            </li>\n            @endcan\n\n\n          </ul>\n        </section>\n        <!-- /.sidebar -->\n      </aside>\n\n      <!-- Content Wrapper. Contains page content -->\n\n      <div class=\"content-wrapper\" role=\"main\" id=\"setting-list\">\n\n          @if ($debug_in_production)\n              <div class=\"row\" style=\"margin-bottom: 0px; background-color: red; color: white; font-size: 15px;\">\n                  <div class=\"col-md-12\" style=\"margin-bottom: 0px; background-color: #b50408 ; color: white; padding: 10px 20px 10px 30px; font-size: 16px;\">\n                      <i class=\"fas fa-exclamation-triangle fa-3x pull-left\"></i> <strong>{{ strtoupper(trans('general.debug_warning')) }}:</strong>\n                      {!! trans('general.debug_warning_text') !!}\n                  </div>\n              </div>\n      @endif\n\n        <!-- Content Header (Page header) -->\n        <section class=\"content-header\" style=\"padding-bottom: 30px;\">\n          <h1 class=\"pull-left pagetitle\">@yield('title') </h1>\n\n            @if (isset($helpText))\n            @include ('partials.more-info',\n                                   [\n                                       'helpText' => $helpText,\n                                       'helpPosition' => (isset($helpPosition)) ? $helpPosition : 'left'\n                                   ])\n            @endif\n          <div class=\"pull-right\">\n            @yield('header_right')\n          </div>\n\n\n\n        </section>\n\n\n        <section class=\"content\" id=\"main\" tabindex=\"-1\">\n\n          <!-- Notifications -->\n          <div class=\"row\">\n              @if (config('app.lock_passwords'))\n                  <div class=\"col-md-12\">\n                      <div class=\"callout callout-info\">\n                          {{ trans('general.some_features_disabled') }}\n                      </div>\n                  </div>\n              @endif\n\n          @include('notifications')\n          </div>\n\n\n          <!-- Content -->\n            <div id=\"{!! (Request::is('*api*') ? 'app' : 'webui') !!}\">\n          @yield('content')\n            </div>\n\n        </section>\n\n      </div><!-- /.content-wrapper -->\n\n      <footer class=\"main-footer hidden-print\">\n\n        <div class=\"pull-right hidden-xs\">\n          @if ($snipeSettings->version_footer!='off')\n              @if (($snipeSettings->version_footer=='on') || (($snipeSettings->version_footer=='admin') && (Auth::user()->isSuperUser()=='1')))\n                &nbsp; <strong>Version</strong> {{ config('version.app_version') }} - build {{ config('version.build_version') }} ({{ config('version.branch') }})\n              @endif\n          @endif\n\n          @if ($snipeSettings->support_footer!='off')\n              @if (($snipeSettings->support_footer=='on') || (($snipeSettings->support_footer=='admin') && (Auth::user()->isSuperUser()=='1')))\n                <a target=\"_blank\" class=\"btn btn-default btn-xs\" href=\"https://snipe-it.readme.io/docs/overview\" rel=\"noopener\">{{ trans('general.user_manual') }}</a>\n                <a target=\"_blank\" class=\"btn btn-default btn-xs\" href=\"https://snipeitapp.com/support/\" rel=\"noopener\">{{ trans('general.bug_report') }}</a>\n                 @endif\n          @endif\n\n        @if ($snipeSettings->privacy_policy_link!='')\n            <a target=\"_blank\" class=\"btn btn-default btn-xs\" rel=\"noopener\" href=\"{{  $snipeSettings->privacy_policy_link }}\" target=\"_new\">{{ trans('admin/settings/general.privacy_policy') }}</a>\n        @endif\n\n\n        </div>\n          @if ($snipeSettings->footer_text!='')\n              <div class=\"pull-right\">\n                  {!!  Parsedown::instance()->text(e($snipeSettings->footer_text))  !!}\n              </div>\n          @endif\n          \n\n          <a target=\"_blank\" href=\"https://snipeitapp.com\" rel=\"noopener\">Snipe-IT</a> is open source software, made with <i class=\"fas fa-heart\" style=\"color: #a94442; font-size: 10px\" aria-hidden=\"true\"></i><span class=\"sr-only\">love</span> by <a href=\"https://twitter.com/snipeitapp\" rel=\"noopener\">@snipeitapp</a>.\n      </footer>\n\n\n\n    </div><!-- ./wrapper -->\n\n\n    <!-- end main container -->\n\n    <div class=\"modal modal-danger fade\" id=\"dataConfirmModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                    <h2 class=\"modal-title\" id=\"myModalLabel\">&nbsp;</h2>\n                </div>\n                <div class=\"modal-body\"></div>\n                <div class=\"modal-footer\">\n                <form method=\"post\" id=\"deleteForm\" role=\"form\">\n                    {{ csrf_field() }}\n                    {{ method_field('DELETE') }}\n\n                    <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">{{ trans('general.cancel') }}</button>\n                    <button type=\"submit\" class=\"btn btn-outline\" id=\"dataConfirmOK\">{{ trans('general.yes') }}</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <div class=\"modal modal-warning fade\" id=\"restoreConfirmModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"confirmModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                    <h4 class=\"modal-title\" id=\"confirmModalLabel\">&nbsp;</h4>\n                </div>\n                <div class=\"modal-body\"></div>\n                <div class=\"modal-footer\">\n                <form method=\"post\" id=\"restoreForm\" role=\"form\">\n                    {{ csrf_field() }}\n                    {{ method_field('POST') }}\n\n                    <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">{{ trans('general.cancel') }}</button>\n                    <button type=\"submit\" class=\"btn btn-outline\" id=\"dataConfirmOK\">{{ trans('general.yes') }}</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    {{-- Javascript files --}}\n    <script src=\"{{ url(mix('js/dist/all.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n\n    <!-- v5-beta: This pGenerator call must remain here for v5 - until fixed - so that the JS password generator works for the user create modal. -->\n    <script src=\"{{ url('js/pGenerator.jquery.js') }}\"></script>\n\n    {{-- Page level javascript --}}\n    @stack('js')\n\n    @section('moar_scripts')\n    @show\n\n\n    <script nonce=\"{{ csrf_token() }}\">\n\n\n        // ignore: 'input[type=hidden]' is required here to validate the select2 lists\n        $.validate({\n            form : '#create-form',\n            modules : 'date, toggleDisabled',\n            disabledFormFilter : '#create-form',\n            showErrorDialogs : true,\n            ignore: 'input[type=hidden]'\n        });\n\n\n\n\n\n        $(function () {\n  \n            $('[data-toggle=\"tooltip\"]').tooltip();\n            $('[data-toggle=\"popover\"]').popover();\n            $('.select2 span').addClass('needsclick');\n            $('.select2 span').removeAttr('title');\n\n            // This javascript handles saving the state of the menu (expanded or not)\n            $('body').bind('expanded.pushMenu', function() {\n                $.ajax({\n                    type: 'GET',\n                    url: \"{{ route('account.menuprefs', ['state'=>'open']) }}\",\n                    _token: \"{{ csrf_token() }}\"\n                });\n\n            });\n\n            $('body').bind('collapsed.pushMenu', function() {\n                $.ajax({\n                    type: 'GET',\n                    url: \"{{ route('account.menuprefs', ['state'=>'close']) }}\",\n                    _token: \"{{ csrf_token() }}\"\n                });\n            });\n\n        });\n\n        // Initiate the ekko lightbox\n        $(document).on('click', '[data-toggle=\"lightbox\"]', function(event) {\n            event.preventDefault();\n            $(this).ekkoLightbox();\n        });\n\n\n\n    </script>\n\n    @if ((Session::get('topsearch')=='true') || (Request::is('/')))\n    <script nonce=\"{{ csrf_token() }}\">\n         $(\"#tagSearch\").focus();\n    </script>\n    @endif\n\n\n\n    @livewireScripts\n  </body>\n</html>\n"], "fixing_code": ["<?php\n\nnamespace App\\Helpers;\nuse App\\Models\\Accessory;\nuse App\\Models\\Component;\nuse App\\Models\\Consumable;\nuse App\\Models\\CustomField;\nuse App\\Models\\CustomFieldset;\nuse App\\Models\\Depreciation;\nuse App\\Models\\Setting;\nuse App\\Models\\Statuslabel;\nuse Crypt;\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\nuse Image;\n\nclass Helper\n{\n    /**\n     * Simple helper to invoke the markdown parser\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string\n     */\n    public static function parseEscapedMarkedown($str = null)\n    {\n        $Parsedown = new \\Parsedown();\n        $Parsedown->setSafeMode(true);\n\n        if ($str) {\n            return $Parsedown->text($str);\n        }\n    }\n\n    /**\n     * The importer has formatted number strings since v3,\n     * so the value might be a string, or an integer.\n     * If it's a number, format it as a string.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string\n     */\n    public static function formatCurrencyOutput($cost)\n    {\n        if (is_numeric($cost)) {\n\n            if (Setting::getSettings()->digit_separator=='1.234,56') {\n                return number_format($cost, 2, ',', '.');\n            }\n            return number_format($cost, 2, '.', ',');\n        }\n        // It's already been parsed.\n        return $cost;\n    }\n\n\n    /**\n     * Static colors for pie charts.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.3]\n     * @return array\n     */\n    public static function defaultChartColors($index = 0)\n    {\n        $colors = [\n            '#008941',\n            '#FF4A46',\n            '#006FA6',\n            '#A30059',\n            '#1CE6FF',\n            '#FFDBE5',\n            '#7A4900',\n            '#0000A6',\n            '#63FFAC',\n            '#B79762',\n            '#004D43',\n            '#8FB0FF',\n            '#997D87',\n            '#5A0007',\n            '#809693',\n            '#FEFFE6',\n            '#1B4400',\n            '#4FC601',\n            '#3B5DFF',\n            '#4A3B53',\n            '#FF2F80',\n            '#61615A',\n            '#BA0900',\n            '#6B7900',\n            '#00C2A0',\n            '#FFAA92',\n            '#FF90C9',\n            '#B903AA',\n            '#D16100',\n            '#DDEFFF',\n            '#000035',\n            '#7B4F4B',\n            '#A1C299',\n            '#300018',\n            '#0AA6D8',\n            '#013349',\n            '#00846F',\n            '#372101',\n            '#FFB500',\n            '#C2FFED',\n            '#A079BF',\n            '#CC0744',\n            '#C0B9B2',\n            '#C2FF99',\n            '#001E09',\n            '#00489C',\n            '#6F0062',\n            '#0CBD66',\n            '#EEC3FF',\n            '#456D75',\n            '#B77B68',\n            '#7A87A1',\n            '#788D66',\n            '#885578',\n            '#FAD09F',\n            '#FF8A9A',\n            '#D157A0',\n            '#BEC459',\n            '#456648',\n            '#0086ED',\n            '#886F4C',\n            '#34362D',\n            '#B4A8BD',\n            '#00A6AA',\n            '#452C2C',\n            '#636375',\n            '#A3C8C9',\n            '#FF913F',\n            '#938A81',\n            '#575329',\n            '#00FECF',\n            '#B05B6F',\n            '#8CD0FF',\n            '#3B9700',\n            '#04F757',\n            '#C8A1A1',\n            '#1E6E00',\n            '#7900D7',\n            '#A77500',\n            '#6367A9',\n            '#A05837',\n            '#6B002C',\n            '#772600',\n            '#D790FF',\n            '#9B9700',\n            '#549E79',\n            '#FFF69F',\n            '#201625',\n            '#72418F',\n            '#BC23FF',\n            '#99ADC0',\n            '#3A2465',\n            '#922329',\n            '#5B4534',\n            '#FDE8DC',\n            '#404E55',\n            '#0089A3',\n            '#CB7E98',\n            '#A4E804',\n            '#324E72',\n            '#6A3A4C',\n            '#83AB58',\n            '#001C1E',\n            '#D1F7CE',\n            '#004B28',\n            '#C8D0F6',\n            '#A3A489',\n            '#806C66',\n            '#222800',\n            '#BF5650',\n            '#E83000',\n            '#66796D',\n            '#DA007C',\n            '#FF1A59',\n            '#8ADBB4',\n            '#1E0200',\n            '#5B4E51',\n            '#C895C5',\n            '#320033',\n            '#FF6832',\n            '#66E1D3',\n            '#CFCDAC',\n            '#D0AC94',\n            '#7ED379',\n            '#012C58',\n            '#7A7BFF',\n            '#D68E01',\n            '#353339',\n            '#78AFA1',\n            '#FEB2C6',\n            '#75797C',\n            '#837393',\n            '#943A4D',\n            '#B5F4FF',\n            '#D2DCD5',\n            '#9556BD',\n            '#6A714A',\n            '#001325',\n            '#02525F',\n            '#0AA3F7',\n            '#E98176',\n            '#DBD5DD',\n            '#5EBCD1',\n            '#3D4F44',\n            '#7E6405',\n            '#02684E',\n            '#962B75',\n            '#8D8546',\n            '#9695C5',\n            '#E773CE',\n            '#D86A78',\n            '#3E89BE',\n            '#CA834E',\n            '#518A87',\n            '#5B113C',\n            '#55813B',\n            '#E704C4',\n            '#00005F',\n            '#A97399',\n            '#4B8160',\n            '#59738A',\n            '#FF5DA7',\n            '#F7C9BF',\n            '#643127',\n            '#513A01',\n            '#6B94AA',\n            '#51A058',\n            '#A45B02',\n            '#1D1702',\n            '#E20027',\n            '#E7AB63',\n            '#4C6001',\n            '#9C6966',\n            '#64547B',\n            '#97979E',\n            '#006A66',\n            '#391406',\n            '#F4D749',\n            '#0045D2',\n            '#006C31',\n            '#DDB6D0',\n            '#7C6571',\n            '#9FB2A4',\n            '#00D891',\n            '#15A08A',\n            '#BC65E9',\n            '#FFFFFE',\n            '#C6DC99',\n            '#203B3C',\n            '#671190',\n            '#6B3A64',\n            '#F5E1FF',\n            '#FFA0F2',\n            '#CCAA35',\n            '#374527',\n            '#8BB400',\n            '#797868',\n            '#C6005A',\n            '#3B000A',\n            '#C86240',\n            '#29607C',\n            '#402334',\n            '#7D5A44',\n            '#CCB87C',\n            '#B88183',\n            '#AA5199',\n            '#B5D6C3',\n            '#A38469',\n            '#9F94F0',\n            '#A74571',\n            '#B894A6',\n            '#71BB8C',\n            '#00B433',\n            '#789EC9',\n            '#6D80BA',\n            '#953F00',\n            '#5EFF03',\n            '#E4FFFC',\n            '#1BE177',\n            '#BCB1E5',\n            '#76912F',\n            '#003109',\n            '#0060CD',\n            '#D20096',\n            '#895563',\n            '#29201D',\n            '#5B3213',\n            '#A76F42',\n            '#89412E',\n            '#1A3A2A',\n            '#494B5A',\n            '#A88C85',\n            '#F4ABAA',\n            '#A3F3AB',\n            '#00C6C8',\n            '#EA8B66',\n            '#958A9F',\n            '#BDC9D2',\n            '#9FA064',\n            '#BE4700',\n            '#658188',\n            '#83A485',\n            '#453C23',\n            '#47675D',\n            '#3A3F00',\n            '#061203',\n            '#DFFB71',\n            '#868E7E',\n            '#98D058',\n            '#6C8F7D',\n            '#D7BFC2',\n            '#3C3E6E',\n            '#D83D66',\n            '#2F5D9B',\n            '#6C5E46',\n            '#D25B88',\n            '#5B656C',\n            '#00B57F',\n            '#545C46',\n            '#866097',\n            '#365D25',\n            '#252F99',\n            '#00CCFF',\n            '#674E60',\n            '#FC009C',\n            '#92896B',\n        ];\n\n\n\n        return $colors[$index];\n    }\n\n    /**\n     * Increases or decreases the brightness of a color by a percentage of the current brightness.\n     *\n     * @param   string  $hexCode        Supported formats: `#FFF`, `#FFFFFF`, `FFF`, `FFFFFF`\n     * @param   float   $adjustPercent  A number between -1 and 1. E.g. 0.3 = 30% lighter; -0.4 = 40% darker.\n     *\n     * @return  string\n     */\n    public static function adjustBrightness($hexCode, $adjustPercent)\n    {\n        $hexCode = ltrim($hexCode, '#');\n\n        if (strlen($hexCode) == 3) {\n            $hexCode = $hexCode[0].$hexCode[0].$hexCode[1].$hexCode[1].$hexCode[2].$hexCode[2];\n        }\n\n        $hexCode = array_map('hexdec', str_split($hexCode, 2));\n\n        foreach ($hexCode as &$color) {\n            $adjustableLimit = $adjustPercent < 0 ? $color : 255 - $color;\n            $adjustAmount = ceil($adjustableLimit * $adjustPercent);\n\n            $color = str_pad(dechex($color + $adjustAmount), 2, '0', STR_PAD_LEFT);\n        }\n\n        return '#'.implode($hexCode);\n    }\n\n    /**\n     * Static background (highlight) colors for pie charts\n     * This is inelegant, and could be refactored later.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.2]\n     * @return array\n     */\n    public static function chartBackgroundColors()\n    {\n        $colors = [\n            '#f56954',\n            '#00a65a',\n            '#f39c12',\n            '#00c0ef',\n            '#3c8dbc',\n            '#d2d6de',\n            '#3c8dbc',\n            '#3c8dbc',\n            '#3c8dbc',\n\n        ];\n\n        return $colors;\n    }\n\n\n    /**\n     * Format currency using comma for thousands until local info is property used.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.7]\n     * @return string\n     */\n    public static function ParseFloat($floatString)\n    {\n        /*******\n         * \n         * WARNING: This does conversions based on *locale* - a Unix-ey-like thing.\n         * \n         * Everything else in the system tends to convert based on the Snipe-IT settings\n         * \n         * So it's very likely this is *not* what you want - instead look for the new\n         * \n         * ParseCurrency($currencyString)\n         * \n         * Which should be directly below here\n         * \n         */\n        $LocaleInfo = localeconv();\n        $floatString = str_replace(',', '', $floatString);\n        $floatString = str_replace($LocaleInfo['decimal_point'], '.', $floatString);\n        // Strip Currency symbol\n        // If no currency symbol is set, default to $ because Murica\n        $currencySymbol = $LocaleInfo['currency_symbol'];\n        if (empty($currencySymbol)) {\n            $currencySymbol = '$';\n        }\n\n        $floatString = str_replace($currencySymbol, '', $floatString);\n\n        return floatval($floatString);\n    }\n    \n    /**\n     * Format currency using comma or period for thousands, and period or comma for decimal, based on settings.\n     * \n     * @author [B. Wetherington] [<bwetherington@grokability.com>]\n     * @since [v5.2]\n     * @return Float\n     */\n    public static function ParseCurrency($currencyString) {\n        $without_currency = str_replace(Setting::getSettings()->default_currency, '', $currencyString); //generally shouldn't come up, since we don't do this in fields, but just in case it does...\n        if(Setting::getSettings()->digit_separator=='1.234,56') {\n            //EU format\n            $without_thousands = str_replace('.', '', $without_currency);\n            $corrected_decimal = str_replace(',', '.', $without_thousands);\n        } else {\n            $without_thousands = str_replace(',', '', $without_currency);\n            $corrected_decimal = $without_thousands;  // decimal is already OK\n        }\n        return floatval($corrected_decimal);\n    }\n\n    /**\n     * Get the list of status labels in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function statusLabelList()\n    {\n        $statuslabel_list = ['' => trans('general.select_statuslabel')] + Statuslabel::orderBy('default_label', 'desc')->orderBy('name', 'asc')->orderBy('deployable', 'desc')\n                ->pluck('name', 'id')->toArray();\n\n        return $statuslabel_list;\n    }\n\n    /**\n     * Get the list of deployable status labels in an array to make a dropdown menu\n     *\n     * @todo This should probably be a selectlist, same as the other endpoints\n     * and we should probably add to the API controllers to make sure that\n     * the status_id submitted is actually really deployable.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.1.0]\n     * @return array\n     */\n    public static function deployableStatusLabelList()\n    {\n        $statuslabel_list = Statuslabel::where('deployable', '=', '1')->orderBy('default_label', 'desc')\n                ->orderBy('name', 'asc')\n                ->orderBy('deployable', 'desc')\n                ->pluck('name', 'id')->toArray();\n\n        return $statuslabel_list;\n    }\n\n    /**\n     * Get the list of status label types in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function statusTypeList()\n    {\n        $statuslabel_types =\n              ['' => trans('admin/hardware/form.select_statustype')]\n            + ['deployable' => trans('admin/hardware/general.deployable')]\n            + ['pending' => trans('admin/hardware/general.pending')]\n            + ['undeployable' => trans('admin/hardware/general.undeployable')]\n            + ['archived' => trans('admin/hardware/general.archived')];\n\n        return $statuslabel_types;\n    }\n\n    /**\n     * Get the list of depreciations in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function depreciationList()\n    {\n        $depreciation_list = ['' => 'Do Not Depreciate'] + Depreciation::orderBy('name', 'asc')\n                ->pluck('name', 'id')->toArray();\n\n        return $depreciation_list;\n    }\n\n    /**\n     * Get the list of category types in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function categoryTypeList()\n    {\n        $category_types = [\n            '' => '',\n            'accessory' => 'Accessory',\n            'asset' => 'Asset',\n            'consumable' => 'Consumable',\n            'component' => 'Component',\n            'license' => 'License',\n        ];\n\n        return $category_types;\n    }\n\n    /**\n     * Get the list of custom fields in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.5]\n     * @return array\n     */\n    public static function customFieldsetList()\n    {\n        $customfields = ['' => trans('admin/models/general.no_custom_field')] + CustomFieldset::pluck('name', 'id')->toArray();\n\n        return  $customfields;\n    }\n\n    /**\n     * Get the list of custom field formats in an array to make a dropdown menu\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.4]\n     * @return array\n     */\n    public static function predefined_formats()\n    {\n        $keys = array_keys(CustomField::PREDEFINED_FORMATS);\n        $stuff = array_combine($keys, $keys);\n\n        return $stuff;\n    }\n\n    /**\n     * Get the list of barcode dimensions\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.3]\n     * @return array\n     */\n    public static function barcodeDimensions($barcode_type = 'QRCODE')\n    {\n        if ($barcode_type == 'C128') {\n            $size['height'] = '-1';\n            $size['width'] = '-10';\n        } elseif ($barcode_type == 'PDF417') {\n            $size['height'] = '-3';\n            $size['width'] = '-10';\n        } else {\n            $size['height'] = '-3';\n            $size['width'] = '-3';\n        }\n\n        return $size;\n    }\n\n    /**\n     * Generates a random string\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public static function generateRandomString($length = 10)\n    {\n        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        $charactersLength = strlen($characters);\n        $randomString = '';\n        for ($i = 0; $i < $length; $i++) {\n            $randomString .= $characters[rand(0, $charactersLength - 1)];\n        }\n\n        return $randomString;\n    }\n\n    /**\n     * This nasty little method gets the low inventory info for the\n     * alert dropdown\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public static function checkLowInventory()\n    {\n        $consumables = Consumable::withCount('consumableAssignments as consumable_assignments_count')->whereNotNull('min_amt')->get();\n        $accessories = Accessory::withCount('users as users_count')->whereNotNull('min_amt')->get();\n        $components = Component::whereNotNull('min_amt')->get();\n\n        $avail_consumables = 0;\n        $items_array = [];\n        $all_count = 0;\n\n        foreach ($consumables as $consumable) {\n            $avail = $consumable->numRemaining();\n            if ($avail < ($consumable->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($consumable->qty > 0) {\n                    $percent = number_format((($avail / $consumable->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $consumable->id;\n                $items_array[$all_count]['name'] = $consumable->name;\n                $items_array[$all_count]['type'] = 'consumables';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $consumable->min_amt;\n                $all_count++;\n            }\n        }\n\n        foreach ($accessories as $accessory) {\n            $avail = $accessory->qty - $accessory->users_count;\n            if ($avail < ($accessory->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($accessory->qty > 0) {\n                    $percent = number_format((($avail / $accessory->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $accessory->id;\n                $items_array[$all_count]['name'] = $accessory->name;\n                $items_array[$all_count]['type'] = 'accessories';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $accessory->min_amt;\n                $all_count++;\n            }\n        }\n\n        foreach ($components as $component) {\n            $avail = $component->numRemaining();\n            if ($avail < ($component->min_amt) + \\App\\Models\\Setting::getSettings()->alert_threshold) {\n                if ($component->qty > 0) {\n                    $percent = number_format((($avail / $component->qty) * 100), 0);\n                } else {\n                    $percent = 100;\n                }\n\n                $items_array[$all_count]['id'] = $component->id;\n                $items_array[$all_count]['name'] = $component->name;\n                $items_array[$all_count]['type'] = 'components';\n                $items_array[$all_count]['percent'] = $percent;\n                $items_array[$all_count]['remaining'] = $avail;\n                $items_array[$all_count]['min_amt'] = $component->min_amt;\n                $all_count++;\n            }\n        }\n\n        return $items_array;\n    }\n\n    /**\n     * Check if the file is an image, so we can show a preview\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @param File $file\n     * @return string | Boolean\n     */\n    public static function checkUploadIsImage($file)\n    {\n        $finfo = @finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n        $filetype = @finfo_file($finfo, $file);\n        finfo_close($finfo);\n\n        if (($filetype == 'image/jpeg') || ($filetype == 'image/jpg') || ($filetype == 'image/png') || ($filetype == 'image/bmp') || ($filetype == 'image/gif')) {\n            return $filetype;\n        }\n\n        return false;\n    }\n\n    /**\n     * Walks through the permissions in the permissions config file and determines if\n     * permissions are granted based on a $selected_arr array.\n     *\n     * The $permissions array is a multidimensional array broke down by section.\n     * (Licenses, Assets, etc)\n     *\n     * The $selected_arr should be a flattened array that contains just the\n     * corresponding permission name and a true or false boolean to determine\n     * if that group/user has been granted that permission.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net]\n     * @param array $permissions\n     * @param array $selected_arr\n     * @since [v1.0]\n     * @return array\n     */\n    public static function selectedPermissionsArray($permissions, $selected_arr = [])\n    {\n        $permissions_arr = [];\n\n        foreach ($permissions as $permission) {\n            for ($x = 0; $x < count($permission); $x++) {\n                $permission_name = $permission[$x]['permission'];\n\n                if ($permission[$x]['display'] === true) {\n                    if ($selected_arr) {\n                        if (array_key_exists($permission_name, $selected_arr)) {\n                            $permissions_arr[$permission_name] = $selected_arr[$permission_name];\n                        } else {\n                            $permissions_arr[$permission_name] = '0';\n                        }\n                    } else {\n                        $permissions_arr[$permission_name] = '0';\n                    }\n                }\n            }\n        }\n\n        return $permissions_arr;\n    }\n\n    /**\n     * Introspects into the model validation to see if the field passed is required.\n     * This is used by the blades to add a required class onto the HTML element.\n     * This isn't critical, but is helpful to keep form fields in sync with the actual\n     * model level validation.\n     *\n     * This does not currently handle form request validation requiredness :(\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public static function checkIfRequired($class, $field)\n    {\n        $rules = $class::rules();\n        foreach ($rules as $rule_name => $rule) {\n            if ($rule_name == $field) {\n                if (strpos($rule, 'required') === false) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Check to see if the given key exists in the array, and trim excess white space before returning it\n     *\n     * @author Daniel Melzter\n     * @since 3.0\n     * @param $array array\n     * @param $key string\n     * @param $default string\n     * @return string\n     */\n    public static function array_smart_fetch(array $array, $key, $default = '')\n    {\n        array_change_key_case($array, CASE_LOWER);\n\n        return array_key_exists(strtolower($key), array_change_key_case($array)) ? e(trim($array[$key])) : $default;\n    }\n\n    /**\n     * Gracefully handle decrypting encrypted fields (custom fields, etc).\n     *\n     * @todo allow this to handle more than just strings (arrays, etc)\n     *\n     * @author A. Gianotto\n     * @since 3.6\n     * @param CustomField $field\n     * @param string $string\n     * @return string\n     */\n    public static function gracefulDecrypt(CustomField $field, $string)\n    {\n        if ($field->isFieldDecryptable($string)) {\n            try {\n                Crypt::decrypt($string);\n\n                return Crypt::decrypt($string);\n            } catch (DecryptException $e) {\n                return 'Error Decrypting: '.$e->getMessage();\n            }\n            }\n\n        return $string;\n    }\n    public static function formatStandardApiResponse($status, $payload = null, $messages = null)\n\n    {\n        $array['status'] = $status;\n        $array['messages'] = $messages;\n        if (($messages) && (is_array($messages)) && (count($messages) > 0)) {\n            $array['messages'] = $messages;\n        }\n        ($payload) ? $array['payload'] = $payload : $array['payload'] = null;\n\n        return $array;\n    }\n\n    /*\n    Possible solution for unicode fieldnames\n    */\n    public static function make_slug($string)\n    {\n        return preg_replace('/\\s+/u', '_', trim($string));\n    }\n\n    /**\n     * Return an array (or null) of the the raw and formatted date object for easy use in\n     * the API and the bootstrap table listings.\n     *\n     * @param $date\n     * @param $type\n     * @param $array\n     * @return array|string|null\n     */\n\n    public static function getFormattedDateObject($date, $type = 'datetime', $array = true)\n    {\n        if ($date == '') {\n            return null;\n        }\n\n        $settings = Setting::getSettings();\n\n        /**\n         * Wrap this in a try/catch so that if Carbon crashes, for example if the $date value\n         * isn't actually valid, we don't crash out completely.\n         *\n         * While this *shouldn't* typically happen since we validate dates before entering them\n         * into the database (and we use date/datetime fields for native fields in the system),\n         * it is a possible scenario that a custom field could be created as an \"ANY\" field, data gets\n         * added, and then the custom field format gets edited later. If someone put bad data in the\n         * database before then - or if they manually edited the field's value - it will crash.\n         *\n         */\n\n\n        try {\n            $tmp_date = new \\Carbon($date);\n\n            if ($type == 'datetime') {\n                $dt['datetime'] = $tmp_date->format('Y-m-d H:i:s');\n                $dt['formatted'] = $tmp_date->format($settings->date_display_format.' '.$settings->time_display_format);\n            } else {\n                $dt['date'] = $tmp_date->format('Y-m-d');\n                $dt['formatted'] = $tmp_date->format($settings->date_display_format);\n            }\n\n            if ($array == 'true') {\n                return $dt;\n            }\n\n            return $dt['formatted'];\n\n        } catch (\\Exception $e) {\n            \\Log::warning($e);\n            return $date.' (Invalid '.$type.' value.)';\n        }\n\n    }\n\n    // Nicked from Drupal :)\n    // Returns a file size limit in bytes based on the PHP upload_max_filesize\n    // and post_max_size\n    public static function file_upload_max_size()\n    {\n        static $max_size = -1;\n\n        if ($max_size < 0) {\n\n            // Start with post_max_size.\n            $post_max_size = self::parse_size(ini_get('post_max_size'));\n            if ($post_max_size > 0) {\n                $max_size = $post_max_size;\n            }\n\n            // If upload_max_size is less, then reduce. Except if upload_max_size is\n            // zero, which indicates no limit.\n            $upload_max = self::parse_size(ini_get('upload_max_filesize'));\n            if ($upload_max > 0 && $upload_max < $max_size) {\n                $max_size = $upload_max;\n            }\n        }\n\n        return $max_size;\n    }\n\n    public static function file_upload_max_size_readable()\n    {\n        static $max_size = -1;\n\n        if ($max_size < 0) {\n            // Start with post_max_size.\n            $post_max_size = self::parse_size(ini_get('post_max_size'));\n            if ($post_max_size > 0) {\n                $max_size = ini_get('post_max_size');\n            }\n\n            // If upload_max_size is less, then reduce. Except if upload_max_size is\n            // zero, which indicates no limit.\n            $upload_max = self::parse_size(ini_get('upload_max_filesize'));\n\n            if ($upload_max > 0 && $upload_max < $post_max_size) {\n                $max_size = ini_get('upload_max_filesize');\n            }\n        }\n\n        return $max_size;\n    }\n\n    public static function parse_size($size)\n    {\n        $unit = preg_replace('/[^bkmgtpezy]/i', '', $size); // Remove the non-unit characters from the size.\n        $size = preg_replace('/[^0-9\\.]/', '', $size); // Remove the non-numeric characters from the size.\n        if ($unit) {\n            // Find the position of the unit in the ordered string which is the power of magnitude to multiply a kilobyte by.\n            return round($size * pow(1024, stripos('bkmgtpezy', $unit[0])));\n        } else {\n            return round($size);\n        }\n    }\n\n    public static function filetype_icon($filename)\n    {\n        $extension = substr(strrchr($filename, '.'), 1);\n\n        $allowedExtensionMap = [\n            // Images\n            'jpg'   => 'far fa-image',\n            'jpeg'   => 'far fa-image',\n            'gif'   => 'far fa-image',\n            'png'   => 'far fa-image',\n            // word\n            'doc'   => 'far fa-file-word',\n            'docx'   => 'far fa-file-word',\n            // Excel\n            'xls'   => 'far fa-file-excel',\n            'xlsx'   => 'far fa-file-excel',\n            // archive\n            'zip'   => 'fas fa-file-archive',\n            'rar'   => 'fas fa-file-archive',\n            //Text\n            'txt'   => 'far fa-file-alt',\n            'rtf'   => 'far fa-file-alt',\n            'xml'   => 'far fa-file-alt',\n            // Misc\n            'pdf'   => 'far fa-file-pdf',\n            'lic'   => 'far fa-save',\n        ];\n\n        if ($extension && array_key_exists($extension, $allowedExtensionMap)) {\n            return $allowedExtensionMap[$extension];\n        }\n\n        return 'far fa-file';\n    }\n\n    public static function show_file_inline($filename)\n    {\n        $extension = substr(strrchr($filename, '.'), 1);\n\n        if ($extension) {\n            switch ($extension) {\n                case 'jpg':\n                case 'jpeg':\n                case 'gif':\n                case 'png':\n                    return true;\n                    break;\n                default:\n                    return false;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generate a random encrypted password.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return string\n     */\n    public static function generateEncyrptedPassword(): string\n    {\n        return bcrypt(self::generateUnencryptedPassword());\n    }\n\n    /**\n     * Get a random unencrypted password.\n     *\n     * @author Steffen Buehl <sb@sbuehl.com>\n     *\n     * @since 5.0.0\n     *\n     * @return string\n     */\n    public static function generateUnencryptedPassword(): string\n    {\n        $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n        $password = '';\n        for ($i = 0; $i < 20; $i++) {\n            $password .= substr($chars, random_int(0, strlen($chars) - 1), 1);\n        }\n\n        return $password;\n    }\n\n    /**\n     * Process base64 encoded image data and save it on supplied path\n     *\n     * @param string $image_data base64 encoded image data with mime type\n     * @param string $save_path path to a folder where the image should be saved\n     * @return string path to uploaded image or false if something went wrong\n     */\n    public static function processUploadedImage(String $image_data, String $save_path)\n    {\n        if ($image_data == null || $save_path == null) {\n            return false;\n        }\n\n        // After modification, the image is prefixed by mime info like the following:\n        // data:image/jpeg;base64,; This causes the image library to be unhappy, so we need to remove it.\n        $header = explode(';', $image_data, 2)[0];\n        // Grab the image type from the header while we're at it.\n        $extension = substr($header, strpos($header, '/') + 1);\n        // Start reading the image after the first comma, postceding the base64.\n        $image = substr($image_data, strpos($image_data, ',') + 1);\n\n        $file_name = str_random(25).'.'.$extension;\n\n        $directory = public_path($save_path);\n        // Check if the uploads directory exists.  If not, try to create it.\n        if (! file_exists($directory)) {\n            mkdir($directory, 0755, true);\n        }\n\n        $path = public_path($save_path.$file_name);\n\n        try {\n            Image::make($image)->resize(500, 500, function ($constraint) {\n                $constraint->aspectRatio();\n                $constraint->upsize();\n            })->save($path);\n        } catch (\\Exception $e) {\n            return false;\n        }\n\n        return $file_name;\n    }\n\n    public static function formatFilesizeUnits($bytes)\n    {\n        if ($bytes >= 1073741824)\n        {\n            $bytes = number_format($bytes / 1073741824, 2) . ' GB';\n        }\n        elseif ($bytes >= 1048576)\n        {\n            $bytes = number_format($bytes / 1048576, 2) . ' MB';\n        }\n        elseif ($bytes >= 1024)\n        {\n            $bytes = number_format($bytes / 1024, 2) . ' KB';\n        }\n        elseif ($bytes > 1)\n        {\n            $bytes = $bytes . ' bytes';\n        }\n        elseif ($bytes == 1)\n        {\n            $bytes = $bytes . ' byte';\n        }\n        else\n        {\n            $bytes = '0 bytes';\n        }\n\n        return $bytes;\n    }\n    public static function SettingUrls(){\n        $settings=['#','fields.index', 'statuslabels.index', 'models.index', 'categories.index', 'manufacturers.index', 'suppliers.index', 'departments.index', 'locations.index', 'companies.index', 'depreciations.index'];\n\n        return $settings;\n        }\n\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Model for Accessories.\n *\n * @version    v1.0\n */\nclass Accessory extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\AccessoryPresenter::class;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    use SoftDeletes;\n\n    protected $table = 'accessories';\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'requestable' => 'boolean',    ];\n\n    use Searchable;\n    use Acceptable;\n    \n    /**\n     * The attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'model_number', 'order_number', 'purchase_date', 'notes'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableRelations = [\n        'category'     => ['name'],\n        'company'      => ['name'],\n        'manufacturer' => ['name'],\n        'supplier'     => ['name'],\n        'location'     => ['name'],\n    ];\n\n    /**\n    * Accessory validation rules\n    */\n    public $rules = [\n        'name'              => 'required|min:3|max:255',\n        'qty'               => 'required|integer|min:1',\n        'category_id'       => 'required|integer|exists:categories,id',\n        'company_id'        => 'integer|nullable',\n        'min_amt'           => 'integer|min:0|nullable',\n        'purchase_cost'     => 'numeric|nullable|gte:0',\n    ];\n\n\n    /**\n    * Whether the model should inject it's identifier to the unique\n    * validation rules before attempting validation. If this property\n    * is not set in the model it will default to true.\n    *\n     * @var bool\n    */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_id',\n        'company_id',\n        'location_id',\n        'name',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'model_number',\n        'manufacturer_id',\n        'supplier_id',\n        'image',\n        'qty',\n        'min_amt',\n        'requestable',\n        'notes',\n    ];\n\n\n\n    /**\n     * Establishes the accessory -> supplier relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n\n    /**\n     * Sets the requestable attribute on the accessory\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return void\n     */\n    public function setRequestableAttribute($value)\n    {\n        if ($value == '') {\n            $value = null;\n        }\n        $this->attributes['requestable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Establishes the accessory -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the accessory -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n    /**\n     * Establishes the accessory -> category relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id')->where('category_type', '=', 'accessory');\n    }\n\n    /**\n     * Returns the action logs associated with the accessory\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')->where('item_type', self::class)->orderBy('created_at', 'desc')->withTrashed();\n    }\n\n    /**\n     * Get the LAST checkout for this accessory.\n     * \n     * This is kinda gross, but is necessary for how the accessory\n     * pivot stuff works for now.\n     *\n     * It looks like we should be able to use ->first() here and\n     * return an object instead of a collection, but we actually\n     * cannot.\n     *\n     * In short, you cannot execute the query defined when you're eager loading.\n     * and in order to avoid 1001 query problems when displaying the most\n     * recent checkout note, we have to eager load this.\n     *\n     * This means we technically return a collection of one here, and then\n     * in the controller, we convert that collection to an array, so we can\n     * use it in the transformer to display only the notes of the LAST\n     * checkout.\n     *\n     * It's super-mega-assy, but it's the best I could do for now.\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @since v5.0.0\n     *\n     * @see \\App\\Http\\Controllers\\Api\\AccessoriesController\\checkedout()\n     */\n    public function lastCheckout()\n    {\n        return $this->assetlog()->where('action_type', '=', 'checkout')->take(1);\n    }\n\n\n    /**\n     * Sets the full image url\n     *\n     * @todo this should probably be moved out of the model and into a\n     * presenter or service provider\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getImageUrl()\n    {\n        if ($this->image) {\n            return Storage::disk('public')->url(app('accessories_upload_path').$this->image);\n        }\n        return false;\n\n    }\n\n    /**\n     * Establishes the accessory -> users relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function users()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'accessories_users', 'accessory_id', 'assigned_to')->withPivot('id', 'created_at', 'note')->withTrashed();\n    }\n\n    /**\n     * Checks whether or not the accessory has users\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return int\n     */\n    public function hasUsers()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'accessories_users', 'accessory_id', 'assigned_to')->count();\n    }\n\n    /**\n     * Establishes the accessory -> manufacturer relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Determins whether or not an email should be sent for checkin/checkout of this\n     * accessory based on the category it belongs to.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determines whether or not the accessory should require the user to\n     * accept it via email.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getEula()\n    {\n\n        if ($this->category->eula_text) {\n            return Helper::parseEscapedMarkedown($this->category->eula_text);\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->category->use_default_eula == '1')) {\n            return Helper::parseEscapedMarkedown(Setting::getSettings()->default_eula_text);\n        }\n\n        return null;\n    }\n\n     /**\n     * Check how many items within an accessory are checked out\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return int\n     */\n    public function numCheckedOut()\n    {\n        $checkedout = 0;\n        $checkedout = $this->users->count();\n\n        return $checkedout;\n    }\n\n    /**\n     * Check how many items of an accessory remain\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return int\n     */\n    public function numRemaining()\n    {\n        $checkedout = $this->users->count();\n        $total = $this->qty;\n        $remaining = $total - $checkedout;\n\n        return $remaining;\n    }\n\n    /**\n    * Query builder scope to order on company\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies', 'accessories.company_id', '=', 'companies.id')\n        ->orderBy('companies.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on category\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->leftJoin('categories', 'accessories.category_id', '=', 'categories.id')\n        ->orderBy('categories.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations', 'accessories.location_id', '=', 'locations.id')\n        ->orderBy('locations.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on manufacturer\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'accessories.manufacturer_id', '=', 'manufacturers.id')->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on supplier\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers', 'accessories.supplier_id', '=', 'suppliers.id')->orderBy('suppliers.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Events\\AssetCheckedOut;\nuse App\\Events\\CheckoutableCheckedOut;\nuse App\\Exceptions\\CheckoutNotAllowed;\nuse App\\Helpers\\Helper;\nuse App\\Http\\Traits\\UniqueSerialTrait;\nuse App\\Http\\Traits\\UniqueUndeletedTrait;\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse AssetPresenter;\nuse Auth;\nuse Carbon\\Carbon;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Model for Assets.\n *\n * @version    v1.0\n */\nclass Asset extends Depreciable\n{\n\n    protected $presenter = \\App\\Presenters\\AssetPresenter::class;\n\n    use CompanyableTrait;\n    use HasFactory, Loggable, Requestable, Presentable, SoftDeletes, ValidatingTrait, UniqueUndeletedTrait, UniqueSerialTrait;\n\n    const LOCATION = 'location';\n    const ASSET = 'asset';\n    const USER = 'user';\n\n    use Acceptable;\n\n    /**\n     * Run after the checkout acceptance was declined by the user\n     * \n     * @param  User   $acceptedBy\n     * @param  string $signature\n     */ \n    public function declinedCheckout(User $declinedBy, $signature)\n    {\n      $this->assigned_to = null;\n      $this->assigned_type = null;\n      $this->accepted = null;      \n      $this->save();        \n    }\n\n    /**\n    * The database table used by the model.\n    *\n    * @var string\n    */\n    protected $table = 'assets';\n\n    /**\n    * Whether the model should inject it's identifier to the unique\n    * validation rules before attempting validation. If this property\n    * is not set in the model it will default to true.\n    *\n     * @var bool\n    */\n    protected $injectUniqueIdentifier = true;\n\n    // We set these as protected dates so that they will be easily accessible via Carbon\n    protected $dates = [\n        'created_at',\n        'updated_at',\n        'deleted_at',\n        'purchase_date',\n        'last_checkout',\n        'expected_checkin',\n        'last_audit_date',\n        'next_audit_date'\n    ];\n\n\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'last_checkout' => 'datetime',\n        'expected_checkin' => 'datetime',\n        'last_audit_date' => 'datetime',\n        'next_audit_date' => 'datetime',\n        'model_id'       => 'integer',\n        'status_id'      => 'integer',\n        'company_id'     => 'integer',\n        'location_id'    => 'integer',\n        'rtd_company_id' => 'integer',\n        'supplier_id'    => 'integer',\n    ];\n\n    protected $rules = [\n        'name'            => 'max:255|nullable',\n        'model_id'        => 'required|integer|exists:models,id',\n        'status_id'       => 'required|integer|exists:status_labels,id',\n        'company_id'      => 'integer|nullable',\n        'warranty_months' => 'numeric|nullable|digits_between:0,240',\n        'physical'        => 'numeric|max:1|nullable',\n        'checkout_date'   => 'date|max:10|min:10|nullable',\n        'checkin_date'    => 'date|max:10|min:10|nullable',\n        'supplier_id'     => 'exists:suppliers,id|numeric|nullable',\n        'location_id'     => 'exists:locations,id|nullable',\n        'rtd_location_id' => 'exists:locations,id|nullable',\n        'asset_tag'       => 'required|min:1|max:255|unique_undeleted',\n        'status'          => 'integer',\n        'serial'          => 'unique_serial|nullable',\n        'purchase_cost'   => 'numeric|nullable|gte:0',\n        'next_audit_date' => 'date|nullable',\n        'last_audit_date' => 'date|nullable',\n        'supplier_id'     => 'exists:suppliers,id|nullable',\n    ];\n\n  /**\n   * The attributes that are mass assignable.\n   *\n   * @var array\n   */\n    protected $fillable = [\n        'asset_tag',\n        'assigned_to',\n        'assigned_type',\n        'company_id',\n        'image',\n        'location_id',\n        'model_id',\n        'name',\n        'notes',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'rtd_location_id',\n        'serial',\n        'status_id',\n        'supplier_id',\n        'warranty_months',\n        'requestable',\n        'last_checkout',\n        'expected_checkin',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableAttributes = [\n      'name', \n      'asset_tag', \n      'serial', \n      'order_number', \n      'purchase_cost', \n      'notes', \n      'created_at',\n      'updated_at',      \n      'purchase_date', \n      'expected_checkin', \n      'next_audit_date', \n      'last_audit_date',\n    ];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     * \n     * @var array\n     */\n    protected $searchableRelations = [\n        'assetstatus'        => ['name'],\n        'supplier'           => ['name'],\n        'company'            => ['name'],\n        'defaultLoc'         => ['name'],\n        'location'           => ['name'],\n        'model'              => ['name', 'model_number'],\n        'model.category'     => ['name'],\n        'model.manufacturer' => ['name'],\n    ];\n\n\n    /**\n     * This handles the custom field validation for assets\n     *\n     * @var array\n     */\n    public function save(array $params = [])\n    {\n        if ($this->model_id != '') {\n            $model = AssetModel::find($this->model_id);\n\n            if (($model) && ($model->fieldset)) {\n\n                foreach ($model->fieldset->fields as $field){\n                    if($field->format == 'BOOLEAN'){\n                        $this->{$field->db_column} = filter_var($this->{$field->db_column}, FILTER_VALIDATE_BOOLEAN);\n                    }\n                }\n\n                $this->rules += $model->fieldset->validation_rules();\n\n                foreach ($this->model->fieldset->fields as $field){\n                    if($field->format == 'BOOLEAN'){\n                        $this->{$field->db_column} = filter_var($this->{$field->db_column}, FILTER_VALIDATE_BOOLEAN);\n                    }\n                }\n            }\n        }\n\n\n\n        return parent::save($params);\n    }\n\n\n    public function getDisplayNameAttribute()\n    {\n        return $this->present()->name();\n    }\n\n    /**\n     * Returns the warranty expiration date as Carbon object\n     * @return \\Carbon|null\n     */\n    public function getWarrantyExpiresAttribute()\n    {\n        if (isset($this->attributes['warranty_months']) && isset($this->attributes['purchase_date'])) {\n            if (is_string($this->attributes['purchase_date']) || is_string($this->attributes['purchase_date'])) {\n                $purchase_date = \\Carbon\\Carbon::parse($this->attributes['purchase_date']);\n            } else {\n                $purchase_date = \\Carbon\\Carbon::instance($this->attributes['purchase_date']);\n            }\n            $purchase_date->setTime(0, 0, 0);\n\n            return $purchase_date->addMonths((int) $this->attributes['warranty_months']);\n        }\n\n        return null;\n    }\n\n\n    /**\n     * Establishes the asset -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Determines if an asset is available for checkout.\n     * This checks to see if the it's checked out to an invalid (deleted) user\n     * OR if the assigned_to and deleted_at fields on the asset are empty AND\n     * that the status is deployable\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return bool\n     */\n    public function availableForCheckout()\n    {\n\n        // This asset is not currently assigned to anyone and is not deleted...\n        if ((! $this->assigned_to) && (! $this->deleted_at)) {\n\n            // The asset status is not archived and is deployable\n            if (($this->assetstatus) && ($this->assetstatus->archived == '0')\n                && ($this->assetstatus->deployable == '1')) \n            {\n                return true;\n\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Checks the asset out to the target\n     *\n     * @todo The admin parameter is never used. Can probably be removed.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @param User $user\n     * @param User $admin\n     * @param Carbon $checkout_at\n     * @param Carbon $expected_checkin\n     * @param string $note\n     * @param null $name\n     * @return bool\n     * @since [v3.0]\n     * @return bool\n     */\n    public function checkOut($target, $admin = null, $checkout_at = null, $expected_checkin = null, $note = null, $name = null, $location = null)\n    {\n        if (! $target) {\n            return false;\n        }\n        if ($this->is($target)) {\n            throw new CheckoutNotAllowed('You cannot check an asset out to itself.');\n        }\n\n        if ($expected_checkin) {\n            $this->expected_checkin = $expected_checkin;\n        }\n\n        $this->last_checkout = $checkout_at;\n\n        $this->assignedTo()->associate($target);\n\n\n        if ($name != null) {\n            $this->name = $name;\n        }\n\n        if ($location != null) {\n            $this->location_id = $location;\n        } else {\n            if (isset($target->location)) {\n                $this->location_id = $target->location->id;\n            }\n            if ($target instanceof Location) {\n                $this->location_id = $target->id;\n            }\n        }\n\n        if ($this->save()) {\n            if (is_int($admin)) {\n                $checkedOutBy = User::findOrFail($admin);\n            } elseif (get_class($admin) === \\App\\Models\\User::class) {\n                $checkedOutBy = $admin;\n            } else {\n                $checkedOutBy = Auth::user();\n            }\n            event(new CheckoutableCheckedOut($this, $target, $checkedOutBy, $note));\n\n            $this->increment('checkout_counter', 1);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the detailedNameAttribute\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string\n     */\n    public function getDetailedNameAttribute()\n    {\n        if ($this->assignedto) {\n            $user_name = $this->assignedto->present()->name();\n        } else {\n            $user_name = 'Unassigned';\n        }\n\n        return $this->asset_tag.' - '.$this->name.' ('.$user_name.') '.($this->model) ? $this->model->name : '';\n    }\n\n    /**\n     * Pulls in the validation rules\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return array\n     */\n    public function validationRules()\n    {\n        return $this->rules;\n    }\n\n\n    /**\n     * Establishes the asset -> depreciation relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function depreciation()\n    {\n        return $this->model->belongsTo(\\App\\Models\\Depreciation::class, 'depreciation_id');\n    }\n\n\n    /**\n     * Get components assigned to this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function components()\n    {\n        return $this->belongsToMany('\\App\\Models\\Component', 'components_assets', 'asset_id', 'component_id')->withPivot('id', 'assigned_qty', 'created_at')->withTrashed();\n    }\n\n\n    /**\n     * Get depreciation attribute from associated asset model\n     *\n     * @todo Is this still needed?\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function get_depreciation()\n    {\n        if (($this->model) && ($this->model->depreciation)) {\n            return $this->model->depreciation;\n        }\n    }\n\n\n    /**\n     * Get uploads for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function uploads()\n    {\n        return $this->hasMany('\\App\\Models\\Actionlog', 'item_id')\n                  ->where('item_type', '=', Asset::class)\n                  ->where('action_type', '=', 'uploaded')\n                  ->whereNotNull('filename')\n                  ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Determines whether the asset is checked out to a user\n     *\n     * Even though we allow allow for checkout to things beyond users\n     * this method is an easy way of seeing if we are checked out to a user.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkedOutToUser()\n    {\n      return $this->assignedType() === self::USER;\n    }\n\n    /**\n     * Get the target this asset is checked out to\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedTo()\n    {\n        return $this->morphTo('assigned', 'assigned_type', 'assigned_to')->withTrashed();\n    }\n\n    /**\n     * Gets assets assigned to this asset\n     *\n     * Sigh.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedAssets()\n    {\n        return $this->morphMany(self::class, 'assigned', 'assigned_type', 'assigned_to')->withTrashed();\n    }\n\n\n    /**\n     * Get the asset's location based on the assigned user\n     *\n     * @todo Refactor this if possible. It's awful.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\ArrayObject\n     */\n    public function assetLoc($iterations = 1, $first_asset = null)\n    {\n        if (! empty($this->assignedType())) {\n            if ($this->assignedType() == self::ASSET) {\n                if (! $first_asset) {\n                    $first_asset = $this;\n                }\n                if ($iterations > 10) {\n                    throw new \\Exception('Asset assignment Loop for Asset ID: '.$first_asset->id);\n                }\n                $assigned_to = self::find($this->assigned_to); //have to do this this way because otherwise it errors\n                if ($assigned_to) {\n                    return $assigned_to->assetLoc($iterations + 1, $first_asset);\n                } // Recurse until we have a final location\n            }\n            if ($this->assignedType() == self::LOCATION) {\n                if ($this->assignedTo) {\n                    return $this->assignedTo;\n                }\n\n            }\n            if ($this->assignedType() == self::USER) {\n                if (($this->assignedTo) && $this->assignedTo->userLoc) {\n                    return $this->assignedTo->userLoc;\n                }\n                //this makes no sense\n                return $this->defaultLoc;\n\n            }\n\n        }\n        return $this->defaultLoc;\n    }\n\n    /**\n     * Gets the lowercased name of the type of target the asset is assigned to\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string\n     */\n    public function assignedType()\n    {\n        return strtolower(class_basename($this->assigned_type));\n    }\n\n    /**\n     * Get the asset's location based on default RTD location\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function defaultLoc()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'rtd_location_id');\n    }\n\n    /**\n     * Get the image URL of the asset.\n     *\n     * Check first to see if there is a specific image uploaded to the asset,\n     * and if not, check for an image uploaded to the asset model.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string | false\n     */\n    public function getImageUrl()\n    {\n        if ($this->image && ! empty($this->image)) {\n            return Storage::disk('public')->url(app('assets_upload_path').e($this->image));\n        } elseif ($this->model && ! empty($this->model->image)) {\n            return Storage::disk('public')->url(app('models_upload_path').e($this->model->image));\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get the asset's logs\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n                  ->where('item_type', '=', self::class)\n                  ->orderBy('created_at', 'desc')\n                  ->withTrashed();\n    }\n\n    /**\n     * Get the list of checkouts for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function checkouts()\n    {\n        return $this->assetlog()->where('action_type', '=', 'checkout')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n    /**\n     * Get the list of checkins for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function checkins()\n    {\n        return $this->assetlog()\n            ->where('action_type', '=', 'checkin from')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n    /**\n     * Get the asset's user requests\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function userRequests()\n    {\n        return $this->assetlog()\n            ->where('action_type', '=', 'requested')\n            ->orderBy('created_at', 'desc')\n            ->withTrashed();\n    }\n\n\n    /**\n     * Get maintenances for this asset\n     *\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @since 1.0\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetmaintenances()\n    {\n        return $this->hasMany(\\App\\Models\\AssetMaintenance::class, 'asset_id')\n                  ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Get action logs history for this asset\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function adminuser()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n\n\n    /**\n     * Establishes the asset -> status relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetstatus()\n    {\n        return $this->belongsTo(\\App\\Models\\Statuslabel::class, 'status_id');\n    }\n\n    /**\n     * Establishes the asset -> model relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function model()\n    {\n        return $this->belongsTo(\\App\\Models\\AssetModel::class, 'model_id')->withTrashed();\n    }\n\n    /**\n     * Return the assets with a warranty expiring within x days\n     *\n     * @param $days\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return mixed\n     */\n    public static function getExpiringWarrantee($days = 30)\n    {\n        $days = (is_null($days)) ? 30 : $days;\n        \n        return self::where('archived', '=', '0')\n            ->whereNotNull('warranty_months')\n            ->whereNotNull('purchase_date')\n            ->whereNull('deleted_at')\n            ->whereRaw(\\DB::raw('DATE_ADD(`purchase_date`,INTERVAL `warranty_months` MONTH) <= DATE(NOW() + INTERVAL '\n                                 . $days\n                                 . ' DAY) AND DATE_ADD(`purchase_date`, INTERVAL `warranty_months` MONTH) > NOW()'))\n            ->orderBy('purchase_date', 'ASC')\n            ->get();\n    }\n\n\n    /**\n     * Establishes the asset -> assigned licenses relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenses()\n    {\n        return $this->belongsToMany(\\App\\Models\\License::class, 'license_seats', 'asset_id', 'license_id');\n    }\n\n    /**\n     * Establishes the asset -> status relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseseats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class, 'asset_id');\n    }\n\n    /**\n     * Establishes the asset -> aupplier relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n    /**\n     * Establishes the asset -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n\n\n    /**\n     * Get the next autoincremented asset tag\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public static function autoincrement_asset()\n    {\n        $settings = \\App\\Models\\Setting::getSettings();\n\n\n        if ($settings->auto_increment_assets == '1') {\n            $temp_asset_tag = \\DB::table('assets')\n                ->where('physical', '=', '1')\n                ->max('asset_tag');\n\n            $asset_tag_digits = preg_replace('/\\D/', '', $temp_asset_tag);\n            $asset_tag = preg_replace('/^0*/', '', $asset_tag_digits);\n\n            if ($settings->zerofill_count > 0) {\n                return $settings->auto_increment_prefix.self::zerofill($settings->next_auto_tag_base, $settings->zerofill_count);\n            }\n\n            return $settings->auto_increment_prefix.$settings->next_auto_tag_base;\n        } else {\n            return false;\n        }\n    }\n\n\n    /**\n     * Get the next base number for the auto-incrementer.\n     *\n     * We'll add the zerofill and prefixes on the fly as we generate the number.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return int\n     */\n    public static function nextAutoIncrement($assets)\n    {\n\n        $max = 1;\n\n        foreach ($assets as $asset) {\n            $results = preg_match(\"/\\d+$/\", $asset['asset_tag'], $matches);\n\n            if ($results) \n            {\n                $number = $matches[0];\n\n                if ($number > $max) \n                {\n                    $max = $number;\n                }\n            }\n        }\n\n\n    }\n\n\n\n    /**\n     * Add zerofilling based on Settings\n     *\n     * We'll add the zerofill and prefixes on the fly as we generate the number.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string\n     */\n    public static function zerofill($num, $zerofill = 3)\n    {\n        return str_pad($num, $zerofill, '0', STR_PAD_LEFT);\n    }\n\n    /**\n     * Determine whether to send a checkin/checkout email based on\n     * asset model category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        if (($this->model) && ($this->model->category)) {\n            return $this->model->category->checkin_email;\n        }\n    }\n\n    /**\n     * Determine whether this asset requires acceptance by the assigned user\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        if (($this->model) && ($this->model->category)) {\n            return $this->model->category->require_acceptance;\n        }\n\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n\n        if (($this->model) && ($this->model->category)) {\n            if ($this->model->category->eula_text) {\n                return Helper::parseEscapedMarkedown($this->model->category->eula_text);\n            } elseif ($this->model->category->use_default_eula == '1') {\n                return Helper::parseEscapedMarkedown(Setting::getSettings()->default_eula_text);\n            } else {\n                return false;\n            }\n        }\n\n        return false;\n    }\n\n\n    /**\n    * -----------------------------------------------\n    * BEGIN QUERY SCOPES\n    * -----------------------------------------------\n    **/\n\n    /**\n     * Run additional, advanced searches.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder $query\n     * @param  array  $terms The search terms\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */\n    public function advancedTextSearch(Builder $query, array $terms)\n    {\n\n        /**\n         * Assigned user\n         */\n        $query = $query->leftJoin('users as assets_users', function ($leftJoin) {\n            $leftJoin->on('assets_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        });\n\n        foreach ($terms as $term) {\n\n            $query = $query\n                ->orWhere('assets_users.first_name', 'LIKE', '%'.$term.'%')\n                ->orWhere('assets_users.last_name', 'LIKE', '%'.$term.'%')\n                ->orWhere('assets_users.username', 'LIKE', '%'.$term.'%')\n                ->orWhereRaw('CONCAT('.DB::getTablePrefix().'assets_users.first_name,\" \",'.DB::getTablePrefix().'assets_users.last_name) LIKE ?', [\"%$term%\"]);\n\n        }\n\n        /**\n         * Assigned location\n         */\n        $query = $query->leftJoin('locations as assets_locations', function ($leftJoin) {\n            $leftJoin->on('assets_locations.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', Location::class);\n        });\n\n        foreach ($terms as $term) {\n\n            $query = $query->orWhere('assets_locations.name', 'LIKE', '%'.$term.'%');\n        }\n\n        /**\n         * Assigned assets\n         */\n        $query = $query->leftJoin('assets as assigned_assets', function ($leftJoin) {\n            $leftJoin->on('assigned_assets.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', self::class);\n        });\n\n        foreach ($terms as $term) {\n            $query = $query->orWhere('assigned_assets.name', 'LIKE', '%'.$term.'%');\n\n        }\n\n        return $query;\n    }\n\n\n    /**\n    * Query builder scope for hardware\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeHardware($query)\n    {\n        return $query->where('physical', '=', '1');\n    }\n\n    /**\n    * Query builder scope for pending assets\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopePending($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 1)\n                ->where('archived', '=', 0);\n        });\n    }\n\n\n    /**\n    * Query builder scope for searching location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeAssetsByLocation($query, $location)\n    {\n        return $query->where(function ($query) use ($location) {\n            $query->whereHas('assignedTo', function ($query) use ($location) {\n                $query->where([\n                    ['users.location_id', '=', $location->id],\n                    ['assets.assigned_type', '=', User::class],\n                ])->orWhere([\n                    ['locations.id', '=', $location->id],\n                    ['assets.assigned_type', '=', Location::class],\n                ])->orWhere([\n                    ['assets.rtd_location_id', '=', $location->id],\n                    ['assets.assigned_type', '=', self::class],\n                ]);\n            })->orWhere(function ($query) use ($location) {\n                $query->where('assets.rtd_location_id', '=', $location->id);\n                $query->whereNull('assets.assigned_to');\n            });\n        });\n    }\n\n\n    /**\n    * Query builder scope for RTD assets\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n\n    public function scopeRTD($query)\n    {\n        return $query->whereNull('assets.assigned_to')\n                   ->whereHas('assetstatus', function ($query) {\n                       $query->where('deployable', '=', 1)\n                             ->where('pending', '=', 0)\n                             ->where('archived', '=', 0);\n                   });\n    }\n\n  /**\n   * Query builder scope for Undeployable assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeUndeployable($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 0)\n                ->where('archived', '=', 0);\n        });\n    }\n\n    /**\n     * Query builder scope for non-Archived assets\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeNotArchived($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('archived', '=', 0);\n        });\n    }\n\n    /**\n     * Query builder scope for Assets that are due for auditing, based on the assets.next_audit_date\n     * and settings.audit_warning_days.\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on assets that will need to be audited.\n     *\n     * Due for audit soon:\n     * next_audit_date greater than or equal to now (must be in the future)\n     * and (next_audit_date - threshold days) <= now ()\n     *\n     * Example:\n     * next_audit_date = May 4, 2025\n     * threshold for alerts = 30 days\n     * now = May 4, 2019\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeDueForAudit($query, $settings)\n    {\n        $interval = $settings->audit_warning_days ?? 0;\n\n        return $query->whereNotNull('assets.next_audit_date')\n            ->where('assets.next_audit_date', '>=', Carbon::now())\n            ->whereRaw(\"DATE_SUB(assets.next_audit_date, INTERVAL $interval DAY) <= '\".Carbon::now().\"'\")\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n    /**\n     * Query builder scope for Assets that are OVERDUE for auditing, based on the assets.next_audit_date\n     * and settings.audit_warning_days. It checks to see if assets.next audit_date is before now\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on overdue assets.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeOverdueForAudit($query)\n    {\n        return $query->whereNotNull('assets.next_audit_date')\n            ->where('assets.next_audit_date', '<', Carbon::now())\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n    /**\n     * Query builder scope for Assets that are due for auditing OR overdue, based on the assets.next_audit_date\n     * and settings.audit_warning_days.\n     *\n     * This is/will be used in the artisan command snipeit:upcoming-audits and also\n     * for an upcoming API call for retrieving a report on assets that will need to be audited.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since v4.6.16\n     * @param Setting $settings\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeDueOrOverdueForAudit($query, $settings)\n    {\n        $interval = $settings->audit_warning_days ?? 0;\n\n        return $query->whereNotNull('assets.next_audit_date')\n            ->whereRaw('DATE_SUB('.DB::getTablePrefix().\"assets.next_audit_date, INTERVAL $interval DAY) <= '\".Carbon::now().\"'\")\n            ->where('assets.archived', '=', 0)\n            ->NotArchived();\n    }\n\n\n    /**\n     * Query builder scope for Archived assets counting\n     *\n     * This is primarily used for the tab counters so that IF the admin\n     * has chosen to not display archived assets in their regular lists\n     * and views, it will return the correct number.\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n\n    public function scopeAssetsForShow($query)\n    {\n\n        if (Setting::getSettings()->show_archived_in_list!=1) {\n            return $query->whereHas('assetstatus', function ($query) {\n                $query->where('archived', '=', 0);\n            });\n        } else {\n            return $query;\n        }\n\n    }\n\n  /**\n   * Query builder scope for Archived assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeArchived($query)\n    {\n        return $query->whereHas('assetstatus', function ($query) {\n            $query->where('deployable', '=', 0)\n                ->where('pending', '=', 0)\n                ->where('archived', '=', 1);\n        });\n    }\n\n  /**\n   * Query builder scope for Deployed assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeDeployed($query)\n    {\n        return $query->where('assigned_to', '>', '0');\n    }\n\n  /**\n   * Query builder scope for Requestable assets\n   *\n   * @param  \\Illuminate\\Database\\Query\\Builder $query Query builder instance\n   *\n   * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n   */\n\n    public function scopeRequestableAssets($query)\n    {\n        $table = $query->getModel()->getTable();\n\n        return Company::scopeCompanyables($query->where($table.'.requestable', '=', 1))\n        ->whereHas('assetstatus', function ($query) {\n            $query->where(function ($query) {\n                $query->where('deployable', '=', 1)\n                      ->where('archived', '=', 0); // you definitely can't request something that's archived\n            })->orWhere('pending', '=', 1); // we've decided that even though an asset may be 'pending', you can still request it\n        });\n    }\n\n\n    /**\n   * scopeInModelList\n   * Get all assets in the provided listing of model ids\n   *\n   * @param       $query\n   * @param array $modelIdListing\n   *\n   * @return mixed\n   * @author  Vincent Sposato <vincent.sposato@gmail.com>\n   * @version v1.0\n   */\n    public function scopeInModelList($query, array $modelIdListing)\n    {\n        return $query->whereIn('assets.model_id', $modelIdListing);\n    }\n\n  /**\n  * Query builder scope to get not-yet-accepted assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeNotYetAccepted($query)\n    {\n        return $query->where('accepted', '=', 'pending');\n    }\n\n  /**\n  * Query builder scope to get rejected assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeRejected($query)\n    {\n        return $query->where('accepted', '=', 'rejected');\n    }\n\n\n  /**\n  * Query builder scope to get accepted assets\n  *\n  * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n  *\n  * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n  */\n    public function scopeAccepted($query)\n    {\n        return $query->where('accepted', '=', 'accepted');\n    }\n\n    /**\n     * Query builder scope to search on text for complex Bootstrap Tables API.\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeAssignedSearch($query, $search)\n    {\n        $search = explode(' OR ', $search);\n\n        return $query->leftJoin('users as assets_users', function ($leftJoin) {\n            $leftJoin->on('assets_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        })->leftJoin('locations as assets_locations', function ($leftJoin) {\n            $leftJoin->on('assets_locations.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', Location::class);\n        })->leftJoin('assets as assigned_assets', function ($leftJoin) {\n            $leftJoin->on('assigned_assets.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', self::class);\n        })->where(function ($query) use ($search) {\n            foreach ($search as $search) {\n                $query->whereHas('model', function ($query) use ($search) {\n                    $query->whereHas('category', function ($query) use ($search) {\n                        $query->where(function ($query) use ($search) {\n                            $query->where('categories.name', 'LIKE', '%'.$search.'%')\n                                ->orWhere('models.name', 'LIKE', '%'.$search.'%')\n                                ->orWhere('models.model_number', 'LIKE', '%'.$search.'%');\n                        });\n                    });\n                })->orWhereHas('model', function ($query) use ($search) {\n                    $query->whereHas('manufacturer', function ($query) use ($search) {\n                        $query->where(function ($query) use ($search) {\n                            $query->where('manufacturers.name', 'LIKE', '%'.$search.'%');\n                        });\n                    });\n                })->orWhere(function ($query) use ($search) {\n                    $query->where('assets_users.first_name', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assets_users.last_name', 'LIKE', '%'.$search.'%')\n                        ->orWhereRaw('CONCAT('.DB::getTablePrefix().'assets_users.first_name,\" \",'.DB::getTablePrefix().'assets_users.last_name) LIKE ?', [\"%$search%\"])\n                        ->orWhere('assets_users.username', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assets_locations.name', 'LIKE', '%'.$search.'%')\n                        ->orWhere('assigned_assets.name', 'LIKE', '%'.$search.'%');\n                })->orWhere('assets.name', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.asset_tag', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.serial', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.order_number', 'LIKE', '%'.$search.'%')\n                    ->orWhere('assets.notes', 'LIKE', '%'.$search.'%');\n            }\n\n        })->withTrashed()->whereNull('assets.deleted_at'); //workaround for laravel bug\n    }\n\n    /**\n     * Query builder scope to search the department ID of users assigned to assets\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return string | false\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder Modified query builder\n     */\n    public function scopeCheckedOutToTargetInDepartment($query, $search)\n    {\n        return $query->leftJoin('users as assets_dept_users', function ($leftJoin) {\n            $leftJoin->on('assets_dept_users.id', '=', 'assets.assigned_to')\n                ->where('assets.assigned_type', '=', User::class);\n        })->where(function ($query) use ($search) {\n                    $query->where('assets_dept_users.department_id', '=', $search);\n\n        })->withTrashed()->whereNull('assets.deleted_at'); //workaround for laravel bug\n    }\n\n\n\n    /**\n     * Query builder scope to search on text filters for complex Bootstrap Tables API\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text   $filter   JSON array of search keys and terms\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByFilter($query, $filter)\n    {\n        return $query->where(function ($query) use ($filter) {\n            foreach ($filter as $key => $search_val) {\n\n                $fieldname = str_replace('custom_fields.', '', $key);\n\n                if ($fieldname == 'asset_tag') {\n                    $query->where('assets.asset_tag', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'name') {\n                    $query->where('assets.name', 'LIKE', '%'.$search_val.'%');\n                }\n\n\n                if ($fieldname =='serial') {\n                    $query->where('assets.serial', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'purchase_date') {\n                    $query->where('assets.purchase_date', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'purchase_cost') {\n                    $query->where('assets.purchase_cost', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'notes') {\n                    $query->where('assets.notes', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'order_number') {\n                    $query->where('assets.order_number', 'LIKE', '%'.$search_val.'%');\n                }\n\n                if ($fieldname == 'status_label') {\n                    $query->whereHas('assetstatus', function ($query) use ($search_val) {\n                        $query->where('status_labels.name', 'LIKE', '%'.$search_val.'%');\n                    });\n                }\n\n                if ($fieldname == 'location') {\n                    $query->whereHas('location', function ($query) use ($search_val) {\n                        $query->where('locations.name', 'LIKE', '%'.$search_val.'%');\n                    });\n                }\n\n                if ($fieldname =='assigned_to') {\n                    $query->whereHasMorph('assignedTo', [User::class], function ($query) use ($search_val) {\n                        $query->where(function ($query) use ($search_val) {\n                            $query->where('users.first_name', 'LIKE', '%'.$search_val.'%')\n                                ->orWhere('users.last_name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n\n                if ($fieldname == 'manufacturer') {\n                    $query->whereHas('model', function ($query) use ($search_val) {\n                        $query->whereHas('manufacturer', function ($query) use ($search_val) {\n                            $query->where(function ($query) use ($search_val) {\n                                $query->where('manufacturers.name', 'LIKE', '%'.$search_val.'%');\n                            });\n                        });\n                    });\n                }\n\n                if ($fieldname == 'category') {\n                    $query->whereHas('model', function ($query) use ($search_val) {\n                        $query->whereHas('category', function ($query) use ($search_val) {\n                            $query->where(function ($query) use ($search_val) {\n                                $query->where('categories.name', 'LIKE', '%'.$search_val.'%')\n                                    ->orWhere('models.name', 'LIKE', '%'.$search_val.'%')\n                                    ->orWhere('models.model_number', 'LIKE', '%'.$search_val.'%');\n                            });\n                        });\n                    });\n                }\n\n                if ($fieldname == 'model') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('model', function ($query) use ($search_val) {\n                            $query->where('models.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n                if ($fieldname == 'model_number') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('model', function ($query) use ($search_val) {\n                            $query->where('models.model_number', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n\n                if ($fieldname == 'company') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('company', function ($query) use ($search_val) {\n                            $query->where('companies.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n\n                if ($fieldname == 'supplier') {\n                    $query->where(function ($query) use ($search_val) {\n                        $query->whereHas('supplier', function ($query) use ($search_val) {\n                            $query->where('suppliers.name', 'LIKE', '%'.$search_val.'%');\n                        });\n                    });\n                }\n            \n\n            /**\n             * THIS CLUNKY BIT IS VERY IMPORTANT\n             *\n             * Although inelegant, this section matters a lot when querying against fields that do not\n             * exist on the asset table. There's probably a better way to do this moving forward, for\n             * example using the Schema:: methods to determine whether or not a column actually exists,\n             * or even just using the $searchableRelations variable earlier in this file.\n             *\n             * In short, this set of statements tells the query builder to ONLY query against an\n             * actual field that's being passed if it doesn't meet known relational fields. This\n             * allows us to query custom fields directly in the assetsv table\n             * (regardless of their name) and *skip* any fields that we already know can only be\n             * searched through relational searches that we do earlier in this method.\n             *\n             * For example, we do not store \"location\" as a field on the assets table, we store\n             * that relationship through location_id on the assets table, therefore querying\n             * assets.location would fail, as that field doesn't exist -- plus we're already searching\n             * against those relationships earlier in this method.\n             *\n             * - snipe \n             *\n             */\n\n            if (($fieldname!='category') && ($fieldname!='model_number') && ($fieldname!='rtd_location') && ($fieldname!='location') && ($fieldname!='supplier')\n                && ($fieldname!='status_label') && ($fieldname!='assigned_to') && ($fieldname!='model') && ($fieldname!='company') && ($fieldname!='manufacturer')) {\n                    $query->where('assets.'.$fieldname, 'LIKE', '%' . $search_val . '%');\n            }\n\n\n            }\n\n\n        });\n\n    }\n\n\n    /**\n    * Query builder scope to order on model\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderModels($query, $order)\n    {\n        return $query->join('models as asset_models', 'assets.model_id', '=', 'asset_models.id')->orderBy('asset_models.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on model number\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderModelNumber($query, $order)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')->orderBy('models.model_number', $order);\n    }\n\n\n    /**\n    * Query builder scope to order on assigned user\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderAssigned($query, $order)\n    {\n        return $query->leftJoin('users as users_sort', 'assets.assigned_to', '=', 'users_sort.id')->select('assets.*')->orderBy('users_sort.first_name', $order)->orderBy('users_sort.last_name', $order);\n    }\n\n    /**\n    * Query builder scope to order on status\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderStatus($query, $order)\n    {\n        return $query->join('status_labels as status_sort', 'assets.status_id', '=', 'status_sort.id')->orderBy('status_sort.name', $order);\n    }\n\n    /**\n    * Query builder scope to order on company\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies as company_sort', 'assets.company_id', '=', 'company_sort.id')->orderBy('company_sort.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to return results of a category\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text $order Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeInCategory($query, $category_id)\n    {\n        return $query->join('models as category_models', 'assets.model_id', '=', 'category_models.id')\n            ->join('categories', 'category_models.category_id', '=', 'categories.id')->where('category_models.category_id', '=', $category_id);\n    }\n\n    /**\n     * Query builder scope to return results of a manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text $order Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByManufacturer($query, $manufacturer_id)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('manufacturers', 'models.manufacturer_id', '=', 'manufacturers.id')->where('models.manufacturer_id', '=', $manufacturer_id);\n    }\n\n\n\n    /**\n    * Query builder scope to order on category\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order         Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->join('models as order_model_category', 'assets.model_id', '=', 'order_model_category.id')\n            ->join('categories as category_order', 'order_model_category.category_id', '=', 'category_order.id')\n            ->orderBy('category_order.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('manufacturers', 'models.manufacturer_id', '=', 'manufacturers.id')\n            ->orderBy('manufacturers.name', $order);\n    }\n\n   /**\n    * Query builder scope to order on location\n    *\n    * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n    * @param  text                              $order       Order\n    *\n    * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n    */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations as asset_locations', 'asset_locations.id', '=', 'assets.location_id')->orderBy('asset_locations.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on default\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderRtdLocation($query, $order)\n    {\n        return $query->leftJoin('locations as rtd_asset_locations', 'rtd_asset_locations.id', '=', 'assets.rtd_location_id')->orderBy('rtd_asset_locations.name', $order);\n    }\n\n\n    /**\n     * Query builder scope to order on supplier name\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers as suppliers_assets', 'assets.supplier_id', '=', 'suppliers_assets.id')->orderBy('suppliers_assets.name', $order);\n    }\n\n    /**\n     * Query builder scope to search on location ID\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByLocationId($query, $search)\n    {\n        return $query->where(function ($query) use ($search) {\n            $query->whereHas('location', function ($query) use ($search) {\n                $query->where('locations.id', '=', $search);\n            });\n        });\n\n    }\n\n\n    /**\n     * Query builder scope to search on depreciation name\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $search      Search term\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeByDepreciationId($query, $search)\n    {\n        return $query->join('models', 'assets.model_id', '=', 'models.id')\n            ->join('depreciations', 'models.depreciation_id', '=', 'depreciations.id')->where('models.depreciation_id', '=', $search);\n\n    }\n\n\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Http\\Traits\\TwoColumnUniqueUndeletedTrait;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Gate;\nuse Watson\\Validating\\ValidatingTrait;\nuse App\\Helpers\\Helper;\n\n/**\n * Model for Categories. Categories are a higher-level group\n * than Asset Models, and handle things like whether or not\n * to require acceptance from the user, whether or not to\n * send a EULA to the user, etc.\n *\n * @version    v1.0\n */\nclass Category extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\CategoryPresenter::class;\n    use Presentable;\n    use SoftDeletes;\n\n    protected $table = 'categories';\n    protected $hidden = ['user_id', 'deleted_at'];\n\n    protected $casts = [\n        'user_id'      => 'integer',\n    ];\n\n    /**\n     * Category validation rules\n     */\n    public $rules = [\n        'user_id' => 'numeric|nullable',\n        'name'   => 'required|min:1|max:255|two_column_unique_undeleted:category_type',\n        'require_acceptance'   => 'boolean',\n        'use_default_eula'   => 'boolean',\n        'category_type'   => 'required|in:asset,accessory,consumable,component,license',\n    ];\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n    use TwoColumnUniqueUndeletedTrait;\n\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_type',\n        'checkin_email',\n        'eula_text',\n        'name',\n        'require_acceptance',\n        'use_default_eula',\n        'user_id',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'category_type'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [];\n\n    /**\n     * Checks if category can be deleted\n     *\n     * @author [Dan Meltzer] [<dmeltzer.devel@gmail.com>]\n     * @since [v5.0]\n     * @return bool\n     */\n    public function isDeletable()\n    {\n        return Gate::allows('delete', $this)\n                && ($this->itemCount() == 0);\n    }\n\n    /**\n     * Establishes the category -> accessories relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function accessories()\n    {\n        return $this->hasMany(\\App\\Models\\Accessory::class);\n    }\n\n    /**\n     * Establishes the category -> licenses relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.3]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenses()\n    {\n        return $this->hasMany(\\App\\Models\\License::class);\n    }\n\n    /**\n     * Establishes the category -> consumables relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function consumables()\n    {\n        return $this->hasMany(\\App\\Models\\Consumable::class);\n    }\n\n    /**\n     * Establishes the category -> consumables relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function components()\n    {\n        return $this->hasMany(\\App\\Models\\Component::class);\n    }\n\n    /**\n     * Get the number of items in the category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return int\n     */\n    public function itemCount()\n    {\n        switch ($this->category_type) {\n            case 'asset':\n                return $this->assets()->count();\n            case 'accessory':\n                return $this->accessories()->count();\n            case 'component':\n                return $this->components()->count();\n            case 'consumable':\n                return $this->consumables()->count();\n            case 'license':\n                return $this->licenses()->count();\n        }\n\n        return '0';\n    }\n\n    /**\n     * Establishes the category -> assets relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assets()\n    {\n        return $this->hasManyThrough(\\App\\Models\\Asset::class, \\App\\Models\\AssetModel::class, 'category_id', 'model_id');\n    }\n\n    /**\n     * Establishes the category -> models relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function models()\n    {\n        return $this->hasMany(\\App\\Models\\AssetModel::class, 'category_id');\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v2.0]\n     * @return string | null\n     */\n    public function getEula()\n    {\n\n        if ($this->eula_text) {\n            return Helper::parseEscapedMarkedown($this->eula_text);\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->use_default_eula == '1')) {\n            return Helper::parseEscapedMarkedown(Setting::getSettings()->default_eula_text);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * -----------------------------------------------\n     * BEGIN QUERY SCOPES\n     * -----------------------------------------------\n     **/\n\n    /**\n     * Query builder scope for whether or not the category requires acceptance\n     *\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeRequiresAcceptance($query)\n    {\n        return $query->where('require_acceptance', '=', true);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Traits\\Acceptable;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass Consumable extends SnipeModel\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\ConsumablePresenter::class;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    use SoftDeletes;\n    use Acceptable;\n\n    protected $table = 'consumables';\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'requestable'    => 'boolean',\n        'category_id'    => 'integer',\n        'company_id'     => 'integer',\n        'qty'            => 'integer',\n        'min_amt'        => 'integer',    \n     ];\n\n    /**\n     * Category validation rules\n     */\n    public $rules = [\n        'name'        => 'required|min:3|max:255',\n        'qty'         => 'required|integer|min:0',\n        'category_id' => 'required|integer',\n        'company_id'  => 'integer|nullable',\n        'min_amt'     => 'integer|min:0|nullable',\n        'purchase_cost'   => 'numeric|nullable|gte:0',\n    ];\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'category_id',\n        'company_id',\n        'item_no',\n        'location_id',\n        'manufacturer_id',\n        'name',\n        'order_number',\n        'model_number',\n        'purchase_cost',\n        'purchase_date',\n        'qty',\n        'min_amt',\n        'requestable',\n        'notes',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = ['name', 'order_number', 'purchase_cost', 'purchase_date', 'item_no', 'model_number', 'notes'];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [\n        'category'     => ['name'],\n        'company'      => ['name'],\n        'location'     => ['name'],\n        'manufacturer' => ['name'],\n    ];\n\n    /**\n     * Sets the attribute of whether or not the consumable is requestable\n     *\n     * This isn't really implemented yet, as you can't currently request a consumable\n     * however it will be implemented in the future, and we needed to include\n     * this method here so all of our polymorphic methods don't break.\n     *\n     * @todo Update this comment once it's been implemented\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function setRequestableAttribute($value)\n    {\n        if ($value == '') {\n            $value = null;\n        }\n        $this->attributes['requestable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Establishes the consumable -> admin user relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function admin()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n    /**\n     * Establishes the component -> assignments relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function consumableAssignments()\n    {\n        return $this->hasMany(\\App\\Models\\ConsumableAssignment::class);\n    }\n\n    /**\n     * Establishes the component -> company relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the component -> manufacturer relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Establishes the component -> location relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function location()\n    {\n        return $this->belongsTo(\\App\\Models\\Location::class, 'location_id');\n    }\n\n    /**\n     * Establishes the component -> category relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id');\n    }\n\n\n    /**\n     * Establishes the component -> action logs relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')->where('item_type', self::class)->orderBy('created_at', 'desc')->withTrashed();\n    }\n\n    /**\n     * Gets the full image url for the consumable\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return string | false\n     */\n    public function getImageUrl()\n    {\n        if ($this->image) {\n            return Storage::disk('public')->url(app('consumables_upload_path').$this->image);\n        }\n        return false;\n\n    }\n\n    /**\n     * Establishes the component -> users relationship\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function users()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'consumables_users', 'consumable_id', 'assigned_to')->withPivot('user_id')->withTrashed()->withTimestamps();\n    }\n\n\n    /**\n     * Determine whether to send a checkin/checkout email based on\n     * asset model category\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determine whether this asset requires acceptance by the assigned user\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n        if ($this->category->eula_text) {\n            return  Helper::parseEscapedMarkedown($this->category->eula_text);\n        } elseif ((Setting::getSettings()->default_eula_text) && ($this->category->use_default_eula == '1')) {\n            return  Helper::parseEscapedMarkedown(Setting::getSettings()->default_eula_text);\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Check how many items within a consumable are checked out\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0]\n     * @return int\n     */\n    public function numCheckedOut()\n    {\n        $checkedout = 0;\n        $checkedout = $this->users->count();\n\n        return $checkedout;\n    }\n\n    /**\n     * Checks the number of available consumables\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return int\n     */\n    public function numRemaining()\n    {\n        $checkedout = $this->users->count();\n        $total = $this->qty;\n        $remaining = $total - $checkedout;\n\n        return $remaining;\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCategory($query, $order)\n    {\n        return $query->join('categories', 'consumables.category_id', '=', 'categories.id')->orderBy('categories.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on location\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderLocation($query, $order)\n    {\n        return $query->leftJoin('locations', 'consumables.location_id', '=', 'locations.id')->orderBy('locations.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string   $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'consumables.manufacturer_id', '=', 'manufacturers.id')->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order       Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies', 'consumables.company_id', '=', 'companies.id')->orderBy('companies.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Traits\\Searchable;\nuse App\\Presenters\\Presentable;\nuse Carbon\\Carbon;\nuse DB;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Session;\nuse Watson\\Validating\\ValidatingTrait;\n\nclass License extends Depreciable\n{\n    use HasFactory;\n\n    protected $presenter = \\App\\Presenters\\LicensePresenter::class;\n\n    use SoftDeletes;\n    use CompanyableTrait;\n    use Loggable, Presentable;\n    protected $injectUniqueIdentifier = true;\n    use ValidatingTrait;\n\n    // We set these as protected dates so that they will be easily accessible via Carbon\n\n    public $timestamps = true;\n\n    protected $guarded = 'id';\n    protected $table = 'licenses';\n\n    protected $casts = [\n        'purchase_date' => 'datetime',\n        'expiration_date' => 'datetime',\n        'termination_date' => 'datetime',\n        'seats'   => 'integer',\n        'category_id'  => 'integer',\n        'company_id'   => 'integer',\n    ];\n\n    protected $rules = [\n        'name'   => 'required|string|min:3|max:255',\n        'seats'   => 'required|min:1|integer',\n        'license_email'   => 'email|nullable|max:120',\n        'license_name'   => 'string|nullable|max:100',\n        'notes'   => 'string|nullable',\n        'category_id' => 'required|exists:categories,id',\n        'company_id' => 'integer|nullable',\n        'purchase_cost'=> 'numeric|nullable|gte:0',\n    ];\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [\n        'company_id',\n        'depreciation_id',\n        'expiration_date',\n        'license_email',\n        'license_name', //actually licensed_to\n        'maintained',\n        'manufacturer_id',\n        'category_id',\n        'name',\n        'notes',\n        'order_number',\n        'purchase_cost',\n        'purchase_date',\n        'purchase_order',\n        'reassignable',\n        'seats',\n        'serial',\n        'supplier_id',\n        'termination_date',\n        'user_id',\n    ];\n\n    use Searchable;\n\n    /**\n     * The attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableAttributes = [\n        'name',\n        'serial',\n        'notes',\n        'order_number',\n        'purchase_order',\n        'purchase_cost',\n        'purchase_date',\n        'expiration_date',\n    ];\n\n    /**\n     * The relations and their attributes that should be included when searching the model.\n     *\n     * @var array\n     */\n    protected $searchableRelations = [\n      'manufacturer' => ['name'],\n      'company'      => ['name'],\n      'category'     => ['name'],\n      'depreciation' => ['name'],\n    ];\n\n    /**\n     * Update seat counts when the license is updated\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     */\n    public static function boot()\n    {\n        parent::boot();\n        // We need to listen for created for the initial setup so that we have a license ID.\n        static::created(function ($license) {\n            $newSeatCount = $license->getAttributes()['seats'];\n\n            return static::adjustSeatCount($license, $oldSeatCount = 0, $newSeatCount);\n        });\n        // However, we listen for updating to be able to prevent the edit if we cannot delete enough seats.\n        static::updating(function ($license) {\n            $newSeatCount = $license->getAttributes()['seats'];\n            $oldSeatCount = isset($license->getOriginal()['seats']) ? $license->getOriginal()['seats'] : 0;\n\n            return static::adjustSeatCount($license, $oldSeatCount, $newSeatCount);\n        });\n    }\n\n    /**\n     * Balance seat counts\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public static function adjustSeatCount($license, $oldSeats, $newSeats)\n    {\n        // If the seats haven't changed, continue on happily.\n        if ($oldSeats == $newSeats) {\n            return true;\n        }\n        // On Create, we just make one for each of the seats.\n        $change = abs($oldSeats - $newSeats);\n        if ($oldSeats > $newSeats) {\n            $license->load('licenseseats.user');\n\n            // Need to delete seats... lets see if if we have enough.\n            $seatsAvailableForDelete = $license->licenseseats->reject(function ($seat) {\n                return ((bool) $seat->assigned_to) || ((bool) $seat->asset_id);\n            });\n\n            if ($change > $seatsAvailableForDelete->count()) {\n                Session::flash('error', trans('admin/licenses/message.assoc_users'));\n\n                return false;\n            }\n            for ($i = 1; $i <= $change; $i++) {\n                $seatsAvailableForDelete->pop()->delete();\n            }\n            // Log Deletion of seats.\n            $logAction = new Actionlog;\n            $logAction->item_type = self::class;\n            $logAction->item_id = $license->id;\n            $logAction->user_id = Auth::id() ?: 1; // We don't have an id while running the importer from CLI.\n            $logAction->note = \"deleted ${change} seats\";\n            $logAction->target_id = null;\n            $logAction->logaction('delete seats');\n\n            return true;\n        }\n        // Else we're adding seats.\n        //Create enough seats for the change.\n        $licenseInsert = [];\n        for ($i = $oldSeats; $i < $newSeats; $i++) {\n            $licenseInsert[] = [\n                'user_id' => Auth::id(),\n                'license_id' => $license->id,\n                'created_at' => now(),\n                'updated_at' => now()\n            ];\n        }\n        //Chunk and use DB transactions to prevent timeouts.\n\n        collect($licenseInsert)->chunk(1000)->each(function ($chunk) {\n            DB::transaction(function () use ($chunk) {\n                LicenseSeat::insert($chunk->toArray());\n            });\n        });\n\n        // On initial create, we shouldn't log the addition of seats.\n        if ($license->id) {\n            //Log the addition of license to the log.\n            $logAction = new Actionlog();\n            $logAction->item_type = self::class;\n            $logAction->item_id = $license->id;\n            $logAction->user_id = Auth::id() ?: 1; // Importer.\n            $logAction->note = \"added ${change} seats\";\n            $logAction->target_id = null;\n            $logAction->logaction('add seats');\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the attribute for whether or not the license is maintained\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setMaintainedAttribute($value)\n    {\n        $this->attributes['maintained'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Sets the reassignable attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setReassignableAttribute($value)\n    {\n        $this->attributes['reassignable'] = filter_var($value, FILTER_VALIDATE_BOOLEAN);\n    }\n\n    /**\n     * Sets expiration date attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return mixed\n     */\n    public function setExpirationDateAttribute($value)\n    {\n        if ($value == '' || $value == '0000-00-00') {\n            $value = null;\n        } else {\n            $value = (new Carbon($value))->toDateString();\n        }\n        $this->attributes['expiration_date'] = $value;\n    }\n\n    /**\n     * Sets termination date attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return mixed\n     */\n    public function setTerminationDateAttribute($value)\n    {\n        if ($value == '' || $value == '0000-00-00') {\n            $value = null;\n        } else {\n            $value = (new Carbon($value))->toDateString();\n        }\n        $this->attributes['termination_date'] = $value;\n    }\n\n    /**\n     * Establishes the license -> company relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function company()\n    {\n        return $this->belongsTo(\\App\\Models\\Company::class, 'company_id');\n    }\n\n    /**\n     * Establishes the license -> category relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v4.4.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function category()\n    {\n        return $this->belongsTo(\\App\\Models\\Category::class, 'category_id');\n    }\n\n    /**\n     * Establishes the license -> manufacturer relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function manufacturer()\n    {\n        return $this->belongsTo(\\App\\Models\\Manufacturer::class, 'manufacturer_id');\n    }\n\n    /**\n     * Determine whether the user should be emailed on checkin/checkout\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return bool\n     */\n    public function checkin_email()\n    {\n        return $this->category->checkin_email;\n    }\n\n    /**\n     * Determine whether the user should be required to accept the license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v4.0]\n     * @return bool\n     */\n    public function requireAcceptance()\n    {\n        return $this->category->require_acceptance;\n    }\n\n    /**\n     * Checks for a category-specific EULA, and if that doesn't exist,\n     * checks for a settings level EULA\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v4.0]\n     * @return string | false\n     */\n    public function getEula()\n    {\n\n        if ($this->category->eula_text) {\n            return Helper::parseEscapedMarkedown($this->category->eula_text);\n        } elseif ($this->category->use_default_eula == '1') {\n            return Helper::parseEscapedMarkedown(Setting::getSettings()->default_eula_text);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Establishes the license -> assigned user relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedusers()\n    {\n        return $this->belongsToMany(\\App\\Models\\User::class, 'license_seats', 'assigned_to', 'license_id');\n    }\n\n    /**\n     * Establishes the license -> action logs relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assetlog()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n            ->where('item_type', '=', self::class)\n            ->orderBy('created_at', 'desc');\n    }\n\n    /**\n     * Establishes the license -> action logs -> uploads relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function uploads()\n    {\n        return $this->hasMany(\\App\\Models\\Actionlog::class, 'item_id')\n            ->where('item_type', '=', self::class)\n            ->where('action_type', '=', 'uploaded')\n            ->whereNotNull('filename')\n            ->orderBy('created_at', 'desc');\n    }\n\n\n    /**\n     * Establishes the license -> admin user relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function adminuser()\n    {\n        return $this->belongsTo(\\App\\Models\\User::class, 'user_id');\n    }\n\n    /**\n     * Returns the total number of all license seats\n     *\n     * @todo this can probably be refactored at some point. We don't need counting methods.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public static function assetcount()\n    {\n        return LicenseSeat::whereNull('deleted_at')\n                   ->count();\n    }\n\n\n    /**\n     * Return the number of seats for this asset\n     *\n     * @todo this can also probably be refactored at some point.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function totalSeatsByLicenseID()\n    {\n        return LicenseSeat::where('license_id', '=', $this->id)\n                   ->whereNull('deleted_at')\n                   ->count();\n    }\n\n    /**\n     * Establishes the license -> seat relationship\n     *\n     * We do this to eager load the \"count\" of seats from the controller.\n     * Otherwise calling \"count()\" on each model results in n+1 sadness.\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseSeatsRelation()\n    {\n        return $this->hasMany(LicenseSeat::class)->whereNull('deleted_at')->selectRaw('license_id, count(*) as count')->groupBy('license_id');\n    }\n\n    /**\n     * Sets the license seat count attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public function getLicenseSeatsCountAttribute()\n    {\n        if ($this->licenseSeatsRelation->first()) {\n            return $this->licenseSeatsRelation->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Returns the number of total available seats across all licenses\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return int\n     */\n    public static function availassetcount()\n    {\n        return LicenseSeat::whereNull('assigned_to')\n                   ->whereNull('asset_id')\n                   ->whereNull('deleted_at')\n                   ->count();\n    }\n\n    /**\n     * Returns the number of total available seats for this license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v2.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function availCount()\n    {\n        return $this->licenseSeatsRelation()\n            ->whereNull('asset_id')\n            ->whereNull('assigned_to')\n            ->whereNull('deleted_at');\n    }\n\n    /**\n     * Sets the available seats attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return mixed\n     */\n    public function getAvailSeatsCountAttribute()\n    {\n        if ($this->availCount->first()) {\n            return $this->availCount->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Retuns the number of assigned seats for this asset\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function assignedCount()\n    {\n        return $this->licenseSeatsRelation()->where(function ($query) {\n            $query->whereNotNull('assigned_to')\n            ->orWhereNotNull('asset_id');\n        });\n    }\n\n    /**\n     * Sets the assigned seats attribute\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function getAssignedSeatsCountAttribute()\n    {\n        if ($this->assignedCount->first()) {\n            return $this->assignedCount->first()->count;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Calculates the number of remaining seats\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function remaincount()\n    {\n        $total = $this->licenseSeatsCount;\n        $taken = $this->assigned_seats_count;\n        $diff = ($total - $taken);\n\n        return $diff;\n    }\n\n    /**\n     * Returns the total number of seats for this license\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return int\n     */\n    public function totalcount()\n    {\n        $avail = $this->availSeatsCount;\n        $taken = $this->assignedcount();\n        $diff = ($avail + $taken);\n\n        return $diff;\n    }\n\n    /**\n     * Establishes the license -> seats relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function licenseseats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class);\n    }\n\n    /**\n     * Establishes the license -> supplier relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function supplier()\n    {\n        return $this->belongsTo(\\App\\Models\\Supplier::class, 'supplier_id');\n    }\n\n\n    /**\n     * Gets the next available free seat - used by\n     * the API to populate next_seat\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v3.0]\n     * @return mixed\n     */\n    public function freeSeat()\n    {\n        return  $this->licenseseats()\n                    ->whereNull('deleted_at')\n                    ->where(function ($query) {\n                        $query->whereNull('assigned_to')\n                            ->whereNull('asset_id');\n                    })\n                    ->orderBy('id', 'asc')\n                    ->first();\n    }\n\n\n    /**\n     * Establishes the license -> free seats relationship\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public function freeSeats()\n    {\n        return $this->hasMany(\\App\\Models\\LicenseSeat::class)->whereNull('assigned_to')->whereNull('deleted_at')->whereNull('asset_id');\n    }\n\n    /**\n     * Returns expiring licenses\n     *\n     * @todo should refactor. I don't like get() in model methods\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     * @since [v1.0]\n     * @return \\Illuminate\\Database\\Eloquent\\Relations\\Relation\n     */\n    public static function getExpiringLicenses($days = 60)\n    {\n        $days = (is_null($days)) ? 60 : $days;\n\n        return self::whereNotNull('expiration_date')\n        ->whereNull('deleted_at')\n        ->whereRaw(DB::raw('DATE_SUB(`expiration_date`,INTERVAL '.$days.' DAY) <= DATE(NOW()) '))\n        ->where('expiration_date', '>', date('Y-m-d'))\n        ->orderBy('expiration_date', 'ASC')\n        ->get();\n    }\n\n    /**\n     * Query builder scope to order on manufacturer\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderManufacturer($query, $order)\n    {\n        return $query->leftJoin('manufacturers', 'licenses.manufacturer_id', '=', 'manufacturers.id')->select('licenses.*')\n            ->orderBy('manufacturers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on supplier\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  string                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderSupplier($query, $order)\n    {\n        return $query->leftJoin('suppliers', 'licenses.supplier_id', '=', 'suppliers.id')->select('licenses.*')\n            ->orderBy('suppliers.name', $order);\n    }\n\n    /**\n     * Query builder scope to order on company\n     *\n     * @param  \\Illuminate\\Database\\Query\\Builder  $query  Query builder instance\n     * @param  text                              $order         Order\n     *\n     * @return \\Illuminate\\Database\\Query\\Builder          Modified query builder\n     */\n    public function scopeOrderCompany($query, $order)\n    {\n        return $query->leftJoin('companies as companies', 'licenses.company_id', '=', 'companies.id')->select('licenses.*')\n            ->orderBy('companies.name', $order);\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Cache;\nuse App\\Helpers\\Helper;\nuse Watson\\Validating\\ValidatingTrait;\n\n\n/**\n * Settings model.\n */\nclass Setting extends Model\n{\n    use HasFactory;\n    use Notifiable, ValidatingTrait;\n\n    /**\n     * The app settings cache key name.\n     *\n     * @var string\n     */\n    const APP_SETTINGS_KEY = 'snipeit_app_settings';\n\n    /**\n     * The setup check cache key name.\n     *\n     * @var string\n     */\n    const SETUP_CHECK_KEY = 'snipeit_setup_check';\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n\n    /**\n     * Model rules.\n     *\n     * @var array\n     */\n    protected $rules = [\n          'brand'                               => 'required|min:1|numeric',\n          'qr_text'                             => 'max:31|nullable',\n          'alert_email'                         => 'email_array|nullable',\n          'admin_cc_email'                      => 'email|nullable',\n          'default_currency'                    => 'required',\n          'locale'                              => 'required',\n          'labels_per_page'                     => 'numeric',\n          'labels_width'                        => 'numeric',\n          'labels_height'                       => 'numeric',\n          'labels_pmargin_left'                 => 'numeric|nullable',\n          'labels_pmargin_right'                => 'numeric|nullable',\n          'labels_pmargin_top'                  => 'numeric|nullable',\n          'labels_pmargin_bottom'               => 'numeric|nullable',\n          'labels_display_bgutter'              => 'numeric|nullable',\n          'labels_display_sgutter'              => 'numeric|nullable',\n          'labels_fontsize'                     => 'numeric|min:5',\n          'labels_pagewidth'                    => 'numeric|nullable',\n          'labels_pageheight'                   => 'numeric|nullable',\n          'login_remote_user_enabled'           => 'numeric|nullable',\n          'login_common_disabled'               => 'numeric|nullable',\n          'login_remote_user_custom_logout_url' => 'string|nullable',\n          'login_remote_user_header_name'       => 'string|nullable',\n          'thumbnail_max_h'                     => 'numeric|max:500|min:25',\n          'pwd_secure_min'                      => 'numeric|required|min:8',\n          'audit_warning_days'                  => 'numeric|nullable',\n          'audit_interval'                      => 'numeric|nullable',\n          'custom_forgot_pass_url'              => 'url|nullable',\n          'privacy_policy_link'                 => 'nullable|url',\n    ];\n\n    protected $fillable = [\n        'site_name',\n        'email_domain',\n        'email_format',\n        'username_format',\n    ];\n\n    /**\n     * Get the app settings.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return \\App\\Models\\Setting|null\n     */\n    public static function getSettings(): ?self\n    {\n        return Cache::rememberForever(self::APP_SETTINGS_KEY, function () {\n            // Need for setup as no tables exist\n            try {\n                return self::first();\n            } catch (\\Throwable $th) {\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Check to see if setup process is complete.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @return bool\n     */\n    public static function setupCompleted(): bool\n    {\n        try {\n            $usercount = User::withTrashed()->count();\n            $settingsCount = self::count();\n\n            return $usercount > 0 && $settingsCount > 0;\n        } catch (\\Throwable $th) {\n            \\Log::debug('User table and settings table DO NOT exist or DO NOT have records');\n            // Catch the error if the tables dont exit\n            return false;\n        }\n    }\n\n    /**\n     * Get the current Laravel version.\n     *\n     * @return string\n     */\n    public function lar_ver(): string\n    {\n        $app = App::getFacadeApplication();\n        return $app::VERSION;\n    }\n\n    /**\n     * Get the default EULA text.\n     *\n     * @return string|null\n     */\n    public static function getDefaultEula(): ?string\n    {\n        if (self::getSettings()->default_eula_text) {\n            return Helper::parseEscapedMarkedown(self::getSettings()->default_eula_text);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check wether to show in model dropdowns.\n     *\n     * @param string $element\n     *\n     * @return bool\n     */\n    public function modellistCheckedValue($element): bool\n    {\n        $settings = self::getSettings();\n        // If the value is blank for some reason\n        if ($settings->modellist_displays == '') {\n            return false;\n        }\n\n        $values = explode(',', $settings->modellist_displays);\n\n        foreach ($values as $value) {\n            if ($value == $element) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Escapes the custom CSS, and then un-escapes the greater-than symbol\n     * so it can work with direct descendant characters for bootstrap\n     * menu overrides like:.\n     *\n     * .skin-blue .sidebar-menu>li.active>a, .skin-blue .sidebar-menu>li:hover>a\n     *\n     * Important: Do not remove the e() escaping here, as we output raw in the blade.\n     *\n     * @return string escaped CSS\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     */\n    public function show_custom_css(): string\n    {\n        $custom_css = self::getSettings()->custom_css;\n        $custom_css = e($custom_css);\n        // Needed for modifying the bootstrap nav :(\n        $custom_css = str_ireplace('script', 'SCRIPTS-NOT-ALLOWED-HERE', $custom_css);\n        $custom_css = str_replace('&gt;', '>', $custom_css);\n        // Allow String output (needs quotes)\n        $custom_css = str_replace('&quot;', '\"', $custom_css);\n\n        return $custom_css;\n    }\n\n    /**\n     * Converts bytes into human readable file size.\n     *\n     * @param string $bytes\n     *\n     * @return string human readable file size (2,87 \u041c\u0431)\n     *\n     * @author Mogilev Arseny\n     */\n    public static function fileSizeConvert($bytes): string\n    {\n        $result = 0;\n        $bytes = floatval($bytes);\n        $arBytes = [\n                0 => [\n                    'UNIT'  => 'TB',\n                    'VALUE' => pow(1024, 4),\n                ],\n                1 => [\n                    'UNIT'  => 'GB',\n                    'VALUE' => pow(1024, 3),\n                ],\n                2 => [\n                    'UNIT'  => 'MB',\n                    'VALUE' => pow(1024, 2),\n                ],\n                3 => [\n                    'UNIT'  => 'KB',\n                    'VALUE' => 1024,\n                ],\n                4 => [\n                    'UNIT'  => 'B',\n                    'VALUE' => 1,\n                ],\n            ];\n\n        foreach ($arBytes as $arItem) {\n            if ($bytes >= $arItem['VALUE']) {\n                $result = $bytes / $arItem['VALUE'];\n                $result = round($result, 2).$arItem['UNIT'];\n                break;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * The url for slack notifications.\n     *  Used by Notifiable trait.\n     *\n     * @return string\n     */\n    public function routeNotificationForSlack(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return self::getSettings()->slack_endpoint;\n    }\n\n    /**\n     * Get the mail reply to address from configuration.\n     *\n     * @return string\n     */\n    public function routeNotificationForMail(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return config('mail.reply_to.address');\n    }\n\n    /**\n     * Get the password complexity rule.\n     *\n     * @return string\n     */\n    public static function passwordComplexityRulesSaving($action = 'update'): string\n    {\n        $security_rules = '';\n        $settings = self::getSettings();\n\n        // Check if they have uncommon password enforcement selected in settings\n        if ($settings->pwd_secure_uncommon == 1) {\n            $security_rules .= '|dumbpwd';\n        }\n\n        // Check for any secure password complexity rules that may have been selected\n        if ($settings->pwd_secure_complexity != '') {\n            $security_rules .= '|'.$settings->pwd_secure_complexity;\n        }\n\n        if ($action == 'update') {\n            return 'nullable|min:'.$settings->pwd_secure_min.$security_rules;\n        }\n\n        return 'required|min:'.$settings->pwd_secure_min.$security_rules;\n    }\n\n    /**\n     * Get the specific LDAP settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return Collection\n     */\n    public static function getLdapSettings(): Collection\n    {\n        $ldapSettings = self::select([\n            'ldap_enabled',\n            'ldap_server',\n            'ldap_uname',\n            'ldap_pword',\n            'ldap_basedn',\n            'ldap_filter',\n            'ldap_username_field',\n            'ldap_lname_field',\n            'ldap_fname_field',\n            'ldap_auth_filter_query',\n            'ldap_version',\n            'ldap_active_flag',\n            'ldap_emp_num',\n            'ldap_email',\n            'ldap_server_cert_ignore',\n            'ldap_port',\n            'ldap_tls',\n            'ldap_pw_sync',\n            'is_ad',\n            'ad_domain',\n            'ad_append_domain',\n            'ldap_client_tls_key',\n            'ldap_client_tls_cert'\n            ])->first()->getAttributes();\n\n        return collect($ldapSettings);\n    }\n\n    /**\n     * Return the filename for the client-side SSL cert\n     *\n     * @var string\n     */\n    public static function get_client_side_cert_path()\n    {\n        return storage_path().'/ldap_client_tls.cert';\n    }\n\n    /**\n     * Return the filename for the client-side SSL key\n     *\n     * @var string\n     */\n    public static function get_client_side_key_path()\n    {\n        return storage_path().'/ldap_client_tls.key';\n    }\n\n    public function update_client_side_cert_files()\n    {\n        /**\n         * I'm not sure if it makes sense to have a cert but no key\n         * nor vice versa, but for now I'm just leaving it like this.\n         *\n         * Also, we could easily set this up with an event handler and\n         * self::saved() or something like that but there's literally only\n         * one place where we will do that, so I'll just explicitly call\n         * this method at that spot instead. It'll be easier to debug and understand.\n         */\n        if ($this->ldap_client_tls_cert) {\n            file_put_contents(self::get_client_side_cert_path(), $this->ldap_client_tls_cert);\n        } else {\n            if (file_exists(self::get_client_side_cert_path())) {\n                unlink(self::get_client_side_cert_path());\n            }\n        }\n\n        if ($this->ldap_client_tls_key) {\n            file_put_contents(self::get_client_side_key_path(), $this->ldap_client_tls_key);\n        } else {\n            if (file_exists(self::get_client_side_key_path())) {\n                unlink(self::get_client_side_key_path());\n            }\n        }\n    }\n\n\n}\n", "<?php\n\nnamespace App\\Presenters;\n\nuse App\\Helpers\\Helper;\n\n/**\n * Class AssetModelPresenter\n */\nclass AssetModelPresenter extends Presenter\n{\n    public static function dataTableLayout()\n    {\n        $layout = [\n            [\n                'field' => 'checkbox',\n                'checkbox' => true,\n            ],\n            [\n                'field' => 'id',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.id'),\n                'visible' => false,\n            ], [\n                'field' => 'company',\n                'searchable' => true,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/companies/table.title'),\n                'visible' => false,\n                'formatter' => 'companiesLinkObjFormatter',\n            ], [\n                'field' => 'name',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => true,\n                'title' => trans('general.name'),\n                'formatter' => 'modelsLinkFormatter',\n            ],\n            [\n                'field' => 'image',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.image'),\n                'visible' => true,\n                'formatter' => 'imageFormatter',\n            ],\n            [\n                'field' => 'manufacturer',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.manufacturer'),\n                'visible' => false,\n                'formatter' => 'manufacturersLinkObjFormatter',\n            ],\n            [\n                'field' => 'model_number',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/table.modelnumber'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'assets_count',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/table.numassets'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'depreciation',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.depreciation'),\n                'visible' => false,\n                'formatter' => 'depreciationsLinkObjFormatter',\n            ],\n            [\n                'field' => 'category',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.category'),\n                'visible' => false,\n                'formatter' => 'categoriesLinkObjFormatter',\n            ],\n            [\n                'field' => 'eol',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.eol'),\n                'visible' => true,\n            ],\n            [\n                'field' => 'fieldset',\n                'searchable' => false,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('admin/models/general.fieldset'),\n                'visible' => true,\n                'formatter' => 'fieldsetsLinkObjFormatter',\n            ],\n            [\n                'field' => 'requestable',\n                'searchable' => false,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('admin/hardware/general.requestable'),\n                'formatter' => 'trueFalseFormatter',\n            ],\n            [\n                'field' => 'notes',\n                'searchable' => true,\n                'sortable' => true,\n                'switchable' => true,\n                'title' => trans('general.notes'),\n                'visible' => false,\n            ],\n            [\n                'field' => 'created_at',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('general.created_at'),\n                'formatter' => 'dateDisplayFormatter',\n            ],\n            [\n                'field' => 'updated_at',\n                'searchable' => true,\n                'sortable' => true,\n                'visible' => false,\n                'title' => trans('general.updated_at'),\n                'formatter' => 'dateDisplayFormatter',\n            ],\n\n        ];\n\n        $layout[] = [\n            'field' => 'actions',\n            'searchable' => false,\n            'sortable' => false,\n            'switchable' => false,\n            'title' => trans('table.actions'),\n            'formatter' => 'modelsActionsFormatter',\n        ];\n\n        return json_encode($layout);\n    }\n\n    /**\n     * Formatted note for this model\n     * @return string\n     */\n    public function note()\n    {\n        if ($this->model->note) {\n            return Helper::parseEscapedMarkedown($this->model->note);\n        }\n    }\n\n    public function eolText()\n    {\n        if ($this->eol) {\n            return $this->eol.' '.trans('general.months');\n        }\n\n        return '';\n    }\n\n    /**\n     * Pretty name for this model\n     * @return string\n     */\n    public function modelName()\n    {\n        $name = '';\n        if ($this->model->manufacturer) {\n            $name .= $this->model->manufacturer->name.' ';\n        }\n        $name .= $this->name;\n\n        if ($this->model_number) {\n            $name .= ' (#'.$this->model_number.')';\n        }\n\n        return $name;\n    }\n\n    /**\n     * Standard url for use to view page.\n     * @return string\n     */\n    public function nameUrl()\n    {\n        return  (string) link_to_route('models.show', $this->name, $this->id);\n    }\n\n    /**\n     * Generate img tag to this models image.\n     * @return string\n     */\n    public function imageUrl()\n    {\n        if (! empty($this->image)) {\n            return '<img src=\"'.url('/').'/uploads/models/'.$this->image.'\" alt=\"'.$this->name.'\" height=\"50\" width=\"50\">';\n        }\n\n        return '';\n    }\n\n    /**\n     * Generate img tag to this models image.\n     * @return string\n     */\n    public function imageSrc()\n    {\n        if (! empty($this->image)) {\n            return url('/').'/uploads/models/'.$this->image;\n        }\n\n        return '';\n    }\n\n    /**\n     * Url to view this item.\n     * @return string\n     */\n    public function viewUrl()\n    {\n        return route('models.show', $this->id);\n    }\n}\n", "@extends('layouts/basic')\n\n\n{{-- Page content --}}\n@section('content')\n\n    <form role=\"form\" action=\"{{ url('/login') }}\" method=\"POST\" autocomplete=\"false\">\n        <input type=\"hidden\" name=\"_token\" value=\"{{ csrf_token() }}\" />\n\n        <!-- this is a hack to prevent Chrome from trying to autocomplete fields -->\n        <input type=\"text\" name=\"prevent_autofill\" id=\"prevent_autofill\" value=\"\" style=\"display:none;\" aria-hidden=\"true\">\n        <input type=\"password\" name=\"password_fake\" id=\"password_fake\" value=\"\" style=\"display:none;\" aria-hidden=\"true\">\n\n        <div class=\"container\">\n            <div class=\"row\">\n\n                <div class=\"col-md-4 col-md-offset-4\">\n\n                    <div class=\"box login-box\">\n                        <div class=\"box-header with-border\">\n                            <h1 class=\"box-title\"> {{ trans('auth/general.login_prompt')  }}</h1>\n                        </div>\n\n\n                        <div class=\"login-box-body\">\n                            <div class=\"row\">\n\n                                @if ($snipeSettings->login_note)\n                                    <div class=\"col-md-12\">\n                                        <div class=\"alert alert-info\">\n                                            {!!  Helper::parseEscapedMarkedown($snipeSettings->login_note)  !!}\n                                        </div>\n                                    </div>\n                                @endif\n\n                                <!-- Notifications -->\n                                @include('notifications')\n\n                                @if (!config('app.require_saml'))\n                                <div class=\"col-md-12\">\n                                    <!-- CSRF Token -->\n\n\n                                    <fieldset>\n\n                                        <div class=\"form-group{{ $errors->has('username') ? ' has-error' : '' }}\">\n                                            <label for=\"username\"><i class=\"fas fa-user\" aria-hidden=\"true\"></i> {{ trans('admin/users/table.username')  }}</label>\n                                            <input class=\"form-control\" placeholder=\"{{ trans('admin/users/table.username')  }}\" name=\"username\" type=\"text\" id=\"username\" autocomplete=\"off\" autofocus>\n                                            {!! $errors->first('username', '<span class=\"alert-msg\" aria-hidden=\"true\"><i class=\"fas fa-times\" aria-hidden=\"true\"></i> :message</span>') !!}\n                                        </div>\n                                        <div class=\"form-group{{ $errors->has('password') ? ' has-error' : '' }}\">\n                                            <label for=\"password\"><i class=\"fa fa-key\" aria-hidden=\"true\"></i> {{ trans('admin/users/table.password')  }}</label>\n                                            <input class=\"form-control\" placeholder=\"{{ trans('admin/users/table.password')  }}\" name=\"password\" type=\"password\" id=\"password\" autocomplete=\"off\">\n                                            {!! $errors->first('password', '<span class=\"alert-msg\" aria-hidden=\"true\"><i class=\"fas fa-times\" aria-hidden=\"true\"></i> :message</span>') !!}\n                                        </div>\n                                        <div class=\"checkbox\">\n                                            <label style=\"margin-left: -20px;\">\n                                                <input name=\"remember\" type=\"checkbox\" value=\"1\" class=\"minimal\"> {{ trans('auth/general.remember_me')  }}\n                                            </label>\n                                        </div>\n                                    </fieldset>\n                                </div> <!-- end col-md-12 -->\n                                @endif\n                            </div> <!-- end row -->\n\n                            @if (!config('app.require_saml') && $snipeSettings->saml_enabled)\n                            <div class=\"row \">\n                                <div class=\"text-right col-md-12\">\n                                    <a href=\"{{ route('saml.login')  }}\">{{ trans('auth/general.saml_login')  }}</a>\n                                </div>\n                            </div>\n                            @endif\n                        </div>\n                        <div class=\"box-footer\">\n                            @if (config('app.require_saml'))\n                            <a class=\"btn btn-lg btn-primary btn-block\" href=\"{{ route('saml.login')  }}\">{{ trans('auth/general.saml_login')  }}</a>\n                            @else\n                            <button class=\"btn btn-lg btn-primary btn-block\">{{ trans('auth/general.login')  }}</button>\n                            @endif\n                        </div>\n                        <div class=\"text-right col-md-12 col-sm-12 col-xs-12\" style=\"padding-top: 10px;\">\n                            @if ($snipeSettings->custom_forgot_pass_url)\n                                <a href=\"{{ $snipeSettings->custom_forgot_pass_url  }}\" rel=\"noopener\">{{ trans('auth/general.forgot_password')  }}</a>\n                            @elseif (!config('app.require_saml'))\n                                <a href=\"{{ route('password.request')  }}\">{{ trans('auth/general.forgot_password')  }}</a>\n                            @endif\n\n\n                        </div>\n                    </div> <!-- end login box -->\n\n                </div> <!-- col-md-4 -->\n\n            </div> <!-- end row -->\n        </div> <!-- end container -->\n    </form>\n\n@stop", "@extends('layouts/default')\n{{-- Page title --}}\n@section('title')\n{{ trans('general.dashboard') }}\n@parent\n@stop\n\n\n{{-- Page content --}}\n@section('content')\n\n@if ($snipeSettings->dashboard_message!='')\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <div class=\"box\">\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        {!!  Helper::parseEscapedMarkedown($snipeSettings->dashboard_message)  !!}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n@endif\n\n<div class=\"row\">\n  <!-- panel -->\n  <div class=\"col-lg-2 col-xs-6\">\n      <a href=\"{{ route('hardware.index') }}\">\n    <!-- small box -->\n    <div class=\"small-box bg-teal\">\n      <div class=\"inner\">\n        <h3>{{ number_format(\\App\\Models\\Asset::AssetsForShow()->count()) }}</h3>\n        <p>{{ strtolower(trans('general.assets')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n      </div>\n      @can('index', \\App\\Models\\Asset::class)\n        <a href=\"{{ route('hardware.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n      </a>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n     <a href=\"{{ route('licenses.index') }}\">\n    <!-- small box -->\n    <div class=\"small-box bg-maroon\">\n      <div class=\"inner\">\n        <h3>{{ number_format($counts['license']) }}</h3>\n        <p>{{ strtolower(trans('general.licenses')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"far fa-save\"></i>\n      </div>\n        @can('view', \\App\\Models\\License::class)\n          <a href=\"{{ route('licenses.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n        @endcan\n    </div>\n     </a>\n  </div><!-- ./col -->\n\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <!-- small box -->\n      <a href=\"{{ route('accessories.index') }}\">\n    <div class=\"small-box bg-orange\">\n      <div class=\"inner\">\n        <h3> {{ number_format($counts['accessory']) }}</h3>\n        <p>{{ strtolower(trans('general.accessories')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"far fa-keyboard\"></i>\n      </div>\n      @can('index', \\App\\Models\\Accessory::class)\n          <a href=\"{{ route('accessories.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n      </a>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <!-- small box -->\n\n      <a href=\"{{ route('consumables.index') }}\">\n    <div class=\"small-box bg-purple\">\n      <div class=\"inner\">\n        <h3> {{ number_format($counts['consumable']) }}</h3>\n        <p>{{ strtolower(trans('general.consumables')) }}</p>\n      </div>\n      <div class=\"icon\" aria-hidden=\"true\">\n        <i class=\"fas fa-tint\"></i>\n      </div>\n      @can('index', \\App\\Models\\Consumable::class)\n        <a href=\"{{ route('consumables.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n      @endcan\n    </div>\n  </div><!-- ./col -->\n\n  <div class=\"col-lg-2 col-xs-6\">\n    <a href=\"{{ route('components.index') }}\">\n   <!-- small box -->\n   <div class=\"small-box bg-yellow\">\n     <div class=\"inner\">\n       <h3>{{ number_format($counts['component']) }}</h3>\n       <p>{{ strtolower(trans('general.components')) }}</p>\n     </div>\n     <div class=\"icon\" aria-hidden=\"true\">\n       <i class=\"far fa-hdd\"></i>\n     </div>\n       @can('view', \\App\\Models\\License::class)\n         <a href=\"{{ route('components.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n       @endcan\n   </div>\n    </a>\n </div><!-- ./col -->\n\n <div class=\"col-lg-2 col-xs-6\">\n    <a href=\"{{ route('users.index') }}\">\n   <!-- small box -->\n   <div class=\"small-box bg-light-blue\">\n     <div class=\"inner\">\n       <h3>{{ number_format($counts['user']) }}</h3>\n       <p>{{ strtolower(trans('general.people')) }}</p>\n     </div>\n     <div class=\"icon\" aria-hidden=\"true\">\n       <i class=\"fas fa-users\"></i>\n     </div>\n       @can('view', \\App\\Models\\License::class)\n         <a href=\"{{ route('users.index') }}\" class=\"small-box-footer\">{{ trans('general.view_all') }} <i class=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i></a>\n       @endcan\n   </div>\n    </a>\n </div><!-- ./col -->\n\n</div>\n</div>\n\n@if ($counts['grand_total'] == 0)\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h2 class=\"box-title\">{{ trans('general.dashboard_info') }}</h2>\n                </div>\n                <!-- /.box-header -->\n                <div class=\"box-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n\n                            <div class=\"progress\">\n                                <div class=\"progress-bar progress-bar-yellow\" role=\"progressbar\" aria-valuenow=\"60\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 60%\">\n                                    <span class=\"sr-only\">{{ trans('general.60_percent_warning') }}</span>\n                                </div>\n                            </div>\n\n\n                            <p><strong>{{ trans('general.dashboard_empty') }}</strong></p>\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Asset::class)\n                            <a class=\"btn bg-teal\" style=\"width: 100%\" href=\"{{ route('hardware.create') }}\">{{ trans('general.new_asset') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\License::class)\n                                <a class=\"btn bg-maroon\" style=\"width: 100%\" href=\"{{ route('licenses.create') }}\">{{ trans('general.new_license') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Accessory::class)\n                                <a class=\"btn bg-orange\" style=\"width: 100%\" href=\"{{ route('accessories.create') }}\">{{ trans('general.new_accessory') }}</a>\n                            @endcan\n                        </div>\n                        <div class=\"col-md-3\">\n                            @can('create', \\App\\Models\\Consumable::class)\n                                <a class=\"btn bg-purple\" style=\"width: 100%\" href=\"{{ route('consumables.create') }}\">{{ trans('general.new_consumable') }}</a>\n                            @endcan\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n@else\n\n<!-- recent activity -->\n<div class=\"row\">\n  <div class=\"col-md-8\">\n    <div class=\"box\">\n      <div class=\"box-header with-border\">\n        <h2 class=\"box-title\">{{ trans('general.recent_activity') }}</h2>\n        <div class=\"box-tools pull-right\">\n            <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\" aria-hidden=\"true\">\n                <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n            </button>\n        </div>\n      </div><!-- /.box-header -->\n      <div class=\"box-body\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div class=\"table-responsive\">\n\n                <table\n                    data-cookie-id-table=\"dashActivityReport\"\n                    data-height=\"350\"\n                    data-pagination=\"false\"\n                    data-id-table=\"dashActivityReport\"\n                    data-side-pagination=\"server\"\n                    data-sort-order=\"desc\"\n                    data-sort-name=\"created_at\"\n                    id=\"dashActivityReport\"\n                    class=\"table table-striped snipe-table\"\n                    data-url=\"{{ route('api.activity.index', ['limit' => 25]) }}\">\n                    <thead>\n                    <tr>\n                        <th data-field=\"icon\" data-visible=\"true\" style=\"width: 40px;\" class=\"hidden-xs\" data-formatter=\"iconFormatter\"><span  class=\"sr-only\">{{ trans('admin/hardware/table.icon') }}</span></th>\n                        <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"created_at\" data-formatter=\"dateDisplayFormatter\">{{ trans('general.date') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"admin\" data-formatter=\"usersLinkObjFormatter\">{{ trans('general.admin') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"action_type\">{{ trans('general.action') }}</th>\n                        <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"item\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.item') }}</th>\n                        <th class=\"col-sm-2\" data-visible=\"true\" data-field=\"target\" data-formatter=\"polymorphicItemFormatter\">{{ trans('general.target') }}</th>\n                    </tr>\n                    </thead>\n                </table>\n\n\n\n            </div><!-- /.responsive -->\n          </div><!-- /.col -->\n          <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n            <a href=\"{{ route('reports.activity') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n          </div>\n        </div><!-- /.row -->\n      </div><!-- ./box-body -->\n    </div><!-- /.box -->\n  </div>\n  <div class=\"col-md-4\">\n        <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.assets') }} {{ trans('general.bystatus') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\" aria-hidden=\"true\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"chart-responsive\">\n                            <canvas id=\"statusPieChart\" height=\"290\"></canvas>\n                        </div> <!-- ./chart-responsive -->\n                    </div> <!-- /.col -->\n                </div> <!-- /.row -->\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n  </div>\n\n</div> <!--/row-->\n<div class=\"row\">\n    <div class=\"col-md-6\">\n         <!-- Categories -->\n         <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.asset') }} {{ trans('general.locations') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"table-responsive\">\n                        <table\n                                data-cookie-id-table=\"dashLocationSummary\"\n                                data-height=\"400\"\n                                data-pagination=\"true\"\n                                data-side-pagination=\"server\"\n                                data-sort-order=\"desc\"\n                                data-sort-field=\"assets_count\"\n                                id=\"dashLocationSummary\"\n                                class=\"table table-striped snipe-table\"\n                                data-url=\"{{ route('api.locations.index', ['sort' => 'assets_count', 'order' => 'asc']) }}\">\n\n                            <thead>\n                            <tr>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"name\" data-formatter=\"locationsLinkFormatter\" data-sortable=\"true\">{{ trans('general.name') }}</th>\n                                \n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assets_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.asset_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assigned_assets_count\" data-sortable=\"true\">\n                                    \n                                    {{ trans('general.assigned') }}\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"users_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-users\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.people') }}</span>\n                                    \n                                </th>\n                                \n                            </tr>\n                            </thead>\n                        </table>\n                        </div>\n                    </div> <!-- /.col -->\n                    <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n                        <a href=\"{{ route('locations.index') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n                    </div>\n                </div> <!-- /.row -->\n\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n    </div>\n    <div class=\"col-md-6\">\n\n        <!-- Categories -->\n        <div class=\"box box-default\">\n            <div class=\"box-header with-border\">\n                <h2 class=\"box-title\">{{ trans('general.asset') }} {{ trans('general.categories') }}</h2>\n                <div class=\"box-tools pull-right\">\n                    <button type=\"button\" class=\"btn btn-box-tool\" data-widget=\"collapse\">\n                        <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n                        <span class=\"sr-only\">{{ trans('general.collapse') }}</span>\n                    </button>\n                </div>\n            </div>\n            <!-- /.box-header -->\n            <div class=\"box-body\">\n                <div class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"table-responsive\">\n                        <table\n                                data-cookie-id-table=\"dashCategorySummary\"\n                                data-height=\"400\"\n                                data-pagination=\"true\"\n                                data-side-pagination=\"server\"\n                                data-sort-order=\"desc\"\n                                data-sort-field=\"assets_count\"\n                                id=\"dashCategorySummary\"\n                                class=\"table table-striped snipe-table\"\n                                data-url=\"{{ route('api.categories.index', ['sort' => 'assets_count', 'order' => 'asc']) }}\">\n\n                            <thead>\n                            <tr>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"name\" data-formatter=\"categoriesLinkFormatter\" data-sortable=\"true\">{{ trans('general.name') }}</th>\n                                <th class=\"col-sm-3\" data-visible=\"true\" data-field=\"category_type\" data-sortable=\"true\">\n                                    {{ trans('general.type') }}\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"assets_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-barcode\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.asset_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"accessories_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-keyboard\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.accessories_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"consumables_count\" data-sortable=\"true\">\n                                    <i class=\"fas fa-tint\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.consumables_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"components_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-hdd\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.components_count') }}</span>\n                                </th>\n                                <th class=\"col-sm-1\" data-visible=\"true\" data-field=\"licenses_count\" data-sortable=\"true\">\n                                    <i class=\"far fa-save\" aria-hidden=\"true\"></i>\n                                    <span class=\"sr-only\">{{ trans('general.licenses_count') }}</span>\n                                </th>\n                            </tr>\n                            </thead>\n                        </table>\n                        </div>\n                    </div> <!-- /.col -->\n                    <div class=\"text-center col-md-12\" style=\"padding-top: 10px;\">\n                        <a href=\"{{ route('categories.index') }}\" class=\"btn btn-primary btn-sm\" style=\"width: 100%\">{{ trans('general.viewall') }}</a>\n                    </div>\n                </div> <!-- /.row -->\n\n            </div><!-- /.box-body -->\n        </div> <!-- /.box -->\n    </div>\n</div>\n\n@endif\n\n\n@stop\n\n@section('moar_scripts')\n@include ('partials.bootstrap-table', ['simple_view' => true, 'nopages' => true])\n@stop\n\n@push('js')\n\n\n\n<script nonce=\"{{ csrf_token() }}\">\n    // ---------------------------\n    // - ASSET STATUS CHART -\n    // ---------------------------\n      var pieChartCanvas = $(\"#statusPieChart\").get(0).getContext(\"2d\");\n      var pieChart = new Chart(pieChartCanvas);\n      var ctx = document.getElementById(\"statusPieChart\");\n      var pieOptions = {\n              legend: {\n                  position: 'top',\n                  responsive: true,\n                  maintainAspectRatio: true,\n              }\n          };\n\n      $.ajax({\n          type: 'GET',\n          url: '{{  route('api.statuslabels.assets.bytype') }}',\n          headers: {\n              \"X-Requested-With\": 'XMLHttpRequest',\n              \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n          },\n          dataType: 'json',\n          success: function (data) {\n              var myPieChart = new Chart(ctx,{\n                  type   : 'doughnut',\n                  data   : data,\n                  options: pieOptions\n              });\n          },\n          error: function (data) {\n              // window.location.reload(true);\n          },\n      });\n        var last = document.getElementById('statusPieChart').clientWidth;\n        addEventListener('resize', function() {\n        var current = document.getElementById('statusPieChart').clientWidth;\n        if (current != last) location.reload();\n        last = current;\n    });\n</script>\n@endpush\n", "<!DOCTYPE html>\n<html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title>\n      @section('title')\n      @show\n      :: {{ $snipeSettings->site_name }}\n    </title>\n    <!-- Tell the browser to be responsive to screen width -->\n    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n\n      <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n\n\n\n      <link rel=\"apple-touch-icon\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->logo)) :  config('app.url').'/img/logo.png' }}\">\n      <link rel=\"apple-touch-startup-image\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->logo)) :  config('app.url').'/img/logo.png' }}\">\n      <link rel=\"shortcut icon\" type=\"image/ico\" href=\"{{ ($snipeSettings) && ($snipeSettings->favicon!='') ?  Storage::disk('public')->url(e($snipeSettings->favicon)) : config('app.url').'/favicon.ico' }} \">\n\n\n      <meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n      <meta name=\"baseUrl\" content=\"{{ url('/') }}/\">\n\n    <script nonce=\"{{ csrf_token() }}\">\n      window.Laravel = { csrfToken: '{{ csrf_token() }}' };\n    </script>\n\n    {{-- stylesheets --}}\n    <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/all.css')) }}\">\n    @if (($snipeSettings) && ($snipeSettings->allow_user_skin==1) && Auth::check() && Auth::user()->present()->skin != '')\n        <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/skins/skin-'.Auth::user()->present()->skin.'.min.css')) }}\">\n    @else\n    <link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/skins/skin-'.($snipeSettings->skin!='' ? $snipeSettings->skin : 'blue').'.css')) }}\">\n    @endif\n    {{-- page level css --}}\n    @stack('css')\n\n\n\n    @if (($snipeSettings) && ($snipeSettings->header_color!=''))\n    <style nonce=\"{{ csrf_token() }}\">\n        .main-header .navbar, .main-header .logo {\n            background-color: {{ $snipeSettings->header_color }};\n            background: -webkit-linear-gradient(top,  {{ $snipeSettings->header_color }} 0%,{{ $snipeSettings->header_color }} 100%);\n            background: linear-gradient(to bottom, {{ $snipeSettings->header_color }} 0%,{{ $snipeSettings->header_color }} 100%);\n            border-color: {{ $snipeSettings->header_color }};\n        }\n        .skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} .sidebar-menu > li:hover > a, .skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} .sidebar-menu > li.active > a {\n          border-left-color: {{ $snipeSettings->header_color }};\n        }\n\n        .btn-primary {\n          background-color: {{ $snipeSettings->header_color }};\n          border-color: {{ $snipeSettings->header_color }};\n        }\n    </style>\n    @endif\n\n    {{-- Custom CSS --}}\n    @if (($snipeSettings) && ($snipeSettings->custom_css))\n    <style>\n        {!! $snipeSettings->show_custom_css() !!}\n    </style>\n    @endif\n\n\n    <script nonce=\"{{ csrf_token() }}\">\n          window.snipeit = {\n              settings: {\n                  \"per_page\": {{ $snipeSettings->per_page }}\n              }\n          };\n    </script>\n\n    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n        <script src=\"{{ url(asset('js/html5shiv.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n        <script src=\"{{ url(asset('js/respond.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n\n    @livewireStyles\n\n  </head>\n\n  @if (($snipeSettings) && ($snipeSettings->allow_user_skin==1) && Auth::check() && Auth::user()->present()->skin != '')\n      <body class=\"sidebar-mini skin-{{ $snipeSettings->skin!='' ? Auth::user()->present()->skin : 'blue' }} {{ (session('menu_state')!='open') ? 'sidebar-mini sidebar-collapse' : ''  }}\">\n  @else\n      <body class=\"sidebar-mini skin-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} {{ (session('menu_state')!='open') ? 'sidebar-mini sidebar-collapse' : ''  }}\">\n  @endif\n\n  <a class=\"skip-main\" href=\"#main\">Skip to main content</a>\n    <div class=\"wrapper\">\n\n      <header class=\"main-header\">\n\n        <!-- Logo -->\n\n\n        <!-- Header Navbar: style can be found in header.less -->\n        <nav class=\"navbar navbar-static-top\" role=\"navigation\">\n          <!-- Sidebar toggle button above the compact sidenav -->\n          <a href=\"#\" style=\"color: white\" class=\"sidebar-toggle btn btn-white\" data-toggle=\"push-menu\" role=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n          </a>\n          <div class=\"nav navbar-nav navbar-left\">\n              <div class=\"left-navblock\">\n                 @if ($snipeSettings->brand == '3')\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          @if ($snipeSettings->logo!='')\n                          <img class=\"navbar-brand-img\" src=\"{{ Storage::disk('public')->url($snipeSettings->logo) }}\" alt=\"{{ $snipeSettings->site_name }} logo\">\n                          @endif\n                          {{ $snipeSettings->site_name }}\n                      </a>\n                  @elseif ($snipeSettings->brand == '2')\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          @if ($snipeSettings->logo!='')\n                            <img class=\"navbar-brand-img\" src=\"{{ Storage::disk('public')->url($snipeSettings->logo) }}\" alt=\"{{ $snipeSettings->site_name }} logo\">\n                          @endif\n                          <span class=\"sr-only\">{{ $snipeSettings->site_name }}</span>\n                      </a>\n                  @else\n                      <a class=\"logo navbar-brand no-hover\" href=\"{{ url('/') }}\">\n                          {{ $snipeSettings->site_name }}\n                      </a>\n                  @endif\n              </div>\n            </div>\n\n          <!-- Navbar Right Menu -->\n            <div class=\"navbar-custom-menu\">\n              <ul class=\"nav navbar-nav\">\n                  @can('index', \\App\\Models\\Asset::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('hardware*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ url('hardware') }}\" tabindex=\"-1\">\n                          <i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                          <span class=\"sr-only\">{{ trans('general.assets') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('view', \\App\\Models\\License::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('licenses*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ route('licenses.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-save fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.licenses') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('index', \\App\\Models\\Accessory::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('accessories*') ? ' class=\"active\"' : '') !!} tabindex=\"-1\">\n                      <a href=\"{{ route('accessories.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-keyboard fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.accessories') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('index', \\App\\Models\\Consumable::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('consumables*') ? ' class=\"active\"' : '') !!}>\n                      <a href=\"{{ url('consumables') }}\" tabindex=\"-1\">\n                          <i class=\"fas fa-tint fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.consumables') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n                  @can('view', \\App\\Models\\Component::class)\n                  <li aria-hidden=\"true\"{!! (Request::is('components*') ? ' class=\"active\"' : '') !!}>\n                      <a href=\"{{ route('components.index') }}\" tabindex=\"-1\">\n                          <i class=\"far fa-hdd fa-fw\"></i>\n                          <span class=\"sr-only\">{{ trans('general.components') }}</span>\n                      </a>\n                  </li>\n                  @endcan\n\n                  @can('index', \\App\\Models\\Asset::class)\n                  <li>\n                  <form class=\"navbar-form navbar-left form-horizontal\" role=\"search\" action=\"{{ route('findbytag/hardware') }}\" method=\"get\">\n                      <div class=\"col-xs-12 col-md-12\">\n                          <div class=\"col-xs-12 form-group\">\n                              <label class=\"sr-only\" for=\"tagSearch\">{{ trans('general.lookup_by_tag') }}</label>\n                              <input type=\"text\" class=\"form-control\" id=\"tagSearch\" name=\"assetTag\" placeholder=\"{{ trans('general.lookup_by_tag') }}\">\n                              <input type=\"hidden\" name=\"topsearch\" value=\"true\" id=\"search\">\n                          </div>\n                          <div class=\"col-xs-1\">\n                              <button type=\"submit\" class=\"btn btn-primary pull-right\">\n                                  <i class=\"fas fa-search\" aria-hidden=\"true\"></i>\n                                  <span class=\"sr-only\">{{ trans('general.search') }}</span>\n                              </button>\n                          </div>\n                      </div>\n                  </form>\n                  </li>\n                  @endcan\n\n                  @can('admin')\n                  <li class=\"dropdown\" aria-hidden=\"true\">\n                    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" tabindex=\"-1\">\n                      {{ trans('general.create') }}\n                      <strong class=\"caret\"></strong>\n                    </a>\n                   <ul class=\"dropdown-menu\">\n                     @can('create', \\App\\Models\\Asset::class)\n                      <li {!! (Request::is('hardware/create') ? 'class=\"active>\"' : '') !!}>\n                              <a href=\"{{ route('hardware.create') }}\" tabindex=\"-1\">\n                                  <i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                                  {{ trans('general.asset') }}\n                              </a>\n                      </li>\n                       @endcan\n                       @can('create', \\App\\Models\\License::class)\n                       <li {!! (Request::is('licenses/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('licenses.create') }}\" tabindex=\"-1\">\n                               <i class=\"far fa-save fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.license') }}\n                           </a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Accessory::class)\n                       <li {!! (Request::is('accessories/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('accessories.create') }}\" tabindex=\"-1\">\n                               <i class=\"far fa-keyboard fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.accessory') }}</a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Consumable::class)\n                       <li {!! (Request::is('consunmables/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('consumables.create') }}\" tabindex=\"-1\">\n                               <i class=\"fas fa-tint fa-fw\" aria-hidden=\"true\"></i>\n                               {{ trans('general.consumable') }}\n                           </a>\n                       </li>\n                       @endcan\n                       @can('create', \\App\\Models\\Component::class)\n                       <li {!! (Request::is('components/create') ? 'class=\"active\"' : '') !!}>\n                           <a href=\"{{ route('components.create') }}\" tabindex=\"-1\">\n                           <i class=\"far fa-hdd fa-fw\" aria-hidden=\"true\"></i>\n                           {{ trans('general.component') }}\n                           </a>\n                       </li>\n                       @endcan\n                         @can('create', \\App\\Models\\User::class)\n                             <li {!! (Request::is('users/create') ? 'class=\"active\"' : '') !!}>\n                                 <a href=\"{{ route('users.create') }}\" tabindex=\"-1\">\n                                     <i class=\"fas fa-user fa-fw\" aria-hidden=\"true\"></i>\n                                     {{ trans('general.user') }}\n                                 </a>\n                             </li>\n                         @endcan\n                   </ul>\n                </li>\n               @endcan\n\n               @can('admin')\n               @if ($snipeSettings->show_alerts_in_menu=='1')\n               <!-- Tasks: style can be found in dropdown.less -->\n               <?php $alert_items = Helper::checkLowInventory(); ?>\n\n               <li class=\"dropdown tasks-menu\">\n                 <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                   <i class=\"far fa-flag\" aria-hidden=\"true\"></i>\n                     <span class=\"sr-only\">Alerts</span>\n                   @if (count($alert_items))\n                    <span class=\"label label-danger\">{{ count($alert_items) }}</span>\n                   @endif\n                 </a>\n                 <ul class=\"dropdown-menu\">\n                   <li class=\"header\">{{ trans('general.quantity_minimum', array('count' => count($alert_items))) }}</li>\n                   <li>\n                     <!-- inner menu: contains the actual data -->\n                     <ul class=\"menu\">\n\n                      @for($i = 0; count($alert_items) > $i; $i++)\n\n                        <li><!-- Task item -->\n                          <a href=\"{{route($alert_items[$i]['type'].'.show', $alert_items[$i]['id'])}}\">\n                            <h2 class=\"task_menu\">{{ $alert_items[$i]['name'] }}\n                              <small class=\"pull-right\">\n                                {{ $alert_items[$i]['remaining'] }} {{ trans('general.remaining') }}\n                              </small>\n                            </h2>\n                            <div class=\"progress xs\">\n                              <div class=\"progress-bar progress-bar-yellow\" style=\"width: {{ $alert_items[$i]['percent'] }}%\" role=\"progressbar\" aria-valuenow=\"{{ $alert_items[$i]['percent'] }}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n                                <span class=\"sr-only\">{{ $alert_items[$i]['percent'] }}% Complete</span>\n                              </div>\n                            </div>\n                          </a>\n                        </li>\n                        <!-- end task item -->\n                      @endfor\n                     </ul>\n                   </li>\n                   {{-- <li class=\"footer\">\n                     <a href=\"#\">View all tasks</a>\n                   </li> --}}\n                 </ul>\n               </li>\n               @endcan\n               @endif\n\n\n               <!-- User Account: style can be found in dropdown.less -->\n               @if (Auth::check())\n               <li class=\"dropdown user user-menu\">\n                 <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\n                   @if (Auth::user()->present()->gravatar())\n                       <img src=\"{{ Auth::user()->present()->gravatar() }}\" class=\"user-image\" alt=\"\">\n                   @else\n                      <i class=\"fas fa-users\" aria-hidden=\"true\"></i>\n                   @endif\n\n                   <span class=\"hidden-xs\">{{ Auth::user()->first_name }} <strong class=\"caret\"></strong></span>\n                 </a>\n                 <ul class=\"dropdown-menu\">\n                   <!-- User image -->\n                     <li {!! (Request::is('account/profile') ? ' class=\"active\"' : '') !!}>\n                       <a href=\"{{ route('view-assets') }}\">\n                             <i class=\"fas fa-check fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.viewassets') }}\n                       </a></li>\n\n                     @can('viewRequestable', \\App\\Models\\Asset::class)\n                     <li {!! (Request::is('account/requested') ? ' class=\"active\"' : '') !!}>\n                         <a href=\"{{ route('account.requested') }}\">\n                             <i class=\"fas fa-check fa-disk fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.requested_assets_menu') }}\n                         </a></li>\n                     @endcan\n                     \n                     <li {!! (Request::is('account/accept') ? ' class=\"active\"' : '') !!}>\n                         <a href=\"{{ route('account.accept') }}\">\n                             <i class=\"fas fa-check fa-disk fa-fw\"></i>\n                             {{ trans('general.accept_assets_menu') }}\n                         </a></li>\n\n\n\n                     <li>\n                          <a href=\"{{ route('profile') }}\">\n                             <i class=\"fas fa-user fa-fw\" aria-hidden=\"true\"></i>\n                              {{ trans('general.editprofile') }}\n                         </a>\n                     </li>\n                     <li>\n                         <a href=\"{{ route('account.password.index') }}\">\n                             <i class=\"fa-solid fa-asterisk fa-fw\" aria-hidden=\"true\"></i>\n                             {{ trans('general.changepassword') }}\n                         </a>\n                     </li>\n\n\n\n                     @can('self.api')\n                     <li>\n                         <a href=\"{{ route('user.api') }}\">\n                             <i class=\"fa-solid fa-user-secret fa-fw\" aria-hidden=\"true\"></i></i> {{ trans('general.manage_api_keys') }}\n                         </a>\n                     </li>\n                     @endcan\n                     <li class=\"divider\"></li>\n                     <li>\n\n                        <a href=\"{{ route('logout.get') }}\" onclick=\"event.preventDefault(); document.getElementById('logout-form').submit();\">\n                            <i class=\"fa fa-sign-out fa-fw\"></i> {{ trans('general.logout') }}\n                        </a>\n                        \n                        <form id=\"logout-form\" action=\"{{ route('logout.post') }}\" method=\"POST\" style=\"display: none;\">\n                            {{ csrf_field() }}\n                        </form>\n\n                     </li>\n                 </ul>\n               </li>\n               @endif\n\n\n               @can('superadmin')\n               <li>\n                   <a href=\"{{ route('settings.index') }}\">\n                       <i class=\"fa fa-cogs fa-fw\" aria-hidden=\"true\"></i>\n                       <span class=\"sr-only\">{{ trans('general.admin') }}</span>\n                   </a>\n               </li>\n               @endcan\n            </ul>\n          </div>\n      </nav>\n       <a href=\"#\" style=\"float:left\" class=\"sidebar-toggle-mobile visible-xs btn\" data-toggle=\"push-menu\" role=\"button\">\n        <span class=\"sr-only\">{{ trans('general.toggle_navigation') }}</span>\n        <i class=\"fas fa-bars\"></i>\n      </a>\n       <!-- Sidebar toggle button-->\n      </header>\n\n        <!-- Left side column. contains the logo and sidebar -->\n      <aside class=\"main-sidebar\">\n        <!-- sidebar: style can be found in sidebar.less -->\n        <section class=\"sidebar\">\n          <!-- sidebar menu: : style can be found in sidebar.less -->\n          <ul class=\"sidebar-menu\" data-widget=\"tree\">\n            @can('admin')\n            <li {!! (\\Request::route()->getName()=='home' ? ' class=\"active\"' : '') !!} class=\"firstnav\">\n              <a href=\"{{ route('home') }}\">\n                <i class=\"fas fa-tachometer-alt fa-fw\" aria-hidden=\"true\"></i> <span>{{ trans('general.dashboard') }}</span>\n              </a>\n            </li>\n            @endcan\n            @can('index', \\App\\Models\\Asset::class)\n            <li class=\"treeview{{ (Request::is('hardware*') ? ' active' : '') }}\">\n                <a href=\"#\"><i class=\"fas fa-barcode fa-fw\" aria-hidden=\"true\"></i>\n                  <span>{{ trans('general.assets') }}</span>\n                  <i class=\"fa fa-angle-left pull-right\"></i>\n                </a>\n                <ul class=\"treeview-menu\">\n                  <li>\n                      <a href=\"{{ url('hardware') }}\">\n                          <i class=\"far fa-circle text-grey fa-fw\" aria-hidden=\"true\"></i>\n                        {{ trans('general.list_all') }}\n                    </a>\n                  </li>\n\n                    <?php $status_navs = \\App\\Models\\Statuslabel::where('show_in_nav', '=', 1)->withCount('assets as asset_count')->get(); ?>\n                    @if (count($status_navs) > 0)\n                        @foreach ($status_navs as $status_nav)\n                            <li><a href=\"{{ route('statuslabels.show', ['statuslabel' => $status_nav->id]) }}\">\n                                <i class=\"fas fa-circle text-grey fa-fw\" aria-hidden=\"true\"></i>\n                                 {{ $status_nav->name }} ({{ $status_nav->asset_count }})</a></li>\n                        @endforeach\n                    @endif\n\n\n                  <li{!! (Request::query('status') == 'Deployed' ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ url('hardware?status=Deployed') }}\">\n                        <i class=\"far fa-circle text-blue fa-fw\"></i>\n                        {{ trans('general.all') }}\n                        {{ trans('general.deployed') }}\n                        ({{ (isset($total_deployed_sidebar)) ? $total_deployed_sidebar : '' }})\n                    </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'RTD' ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ url('hardware?status=RTD') }}\">\n                        <i class=\"far fa-circle text-green fa-fw\"></i>\n                        {{ trans('general.all') }}\n                        {{ trans('general.ready_to_deploy') }}\n                        ({{ (isset($total_rtd_sidebar)) ? $total_rtd_sidebar : '' }})\n                    </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Pending' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Pending') }}\"><i class=\"far fa-circle text-orange fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('general.pending') }}\n                          ({{ (isset($total_pending_sidebar)) ? $total_pending_sidebar : '' }})\n                      </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Undeployable' ? ' class=\"active\"' : '') !!} ><a href=\"{{ url('hardware?status=Undeployable') }}\"><i class=\"fas fa-times text-red fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('general.undeployable') }}\n                          ({{ (isset($total_undeployable_sidebar)) ? $total_undeployable_sidebar : '' }})\n                      </a>\n                  </li>\n                  <li{!! (Request::query('status') == 'Archived' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Archived') }}\"><i class=\"fas fa-times text-red fa-fw\"></i>\n                          {{ trans('general.all') }}\n                          {{ trans('admin/hardware/general.archived') }}\n                          ({{ (isset($total_archived_sidebar)) ? $total_archived_sidebar : '' }})\n                          </a>\n                  </li>\n                    <li{!! (Request::query('status') == 'Requestable' ? ' class=\"active\"' : '') !!}><a href=\"{{ url('hardware?status=Requestable') }}\"><i class=\"fas fa-check text-blue fa-fw\"></i>\n                        {{ trans('admin/hardware/general.requestable') }}\n                        </a>\n                    </li>\n\n                    @can('audit', \\App\\Models\\Asset::class)\n                        <li{!! (Request::is('hardware/audit/due') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('assets.audit.due') }}\">\n                                <i class=\"fas fa-history text-yellow fa-fw\"></i> {{ trans('general.audit_due') }}\n                            </a>\n                        </li>\n                        <li{!! (Request::is('hardware/audit/overdue') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('assets.audit.overdue') }}\">\n                                <i class=\"fas fa-exclamation-triangle text-red fa-fw\"></i> {{ trans('general.audit_overdue') }}\n                            </a>\n                        </li>\n                    @endcan\n\n                  <li class=\"divider\">&nbsp;</li>\n                    @can('checkin', \\App\\Models\\Asset::class)\n                        <li{!! (Request::is('hardware/quickscancheckin') ? ' class=\"active\"' : '') !!}>\n                            <a href=\"{{ route('hardware/quickscancheckin') }}\">\n                                {{ trans('general.quickscan_checkin') }}\n                            </a>\n                        </li>\n                    @endcan\n\n                    @can('checkout', \\App\\Models\\Asset::class)\n                    <li{!! (Request::is('hardware/bulkcheckout') ? ' class=\"active\"' : '') !!}>\n                        <a href=\"{{ route('hardware.bulkcheckout.show') }}\">\n                            {{ trans('general.bulk_checkout') }}\n                        </a>\n                    </li>\n                    <li{!! (Request::is('hardware/requested') ? ' class=\"active\"' : '') !!}>\n                        <a href=\"{{ route('assets.requested') }}\">\n                            {{ trans('general.requested') }}</a>\n                    </li>\n                    @endcan\n\n                    @can('create', \\App\\Models\\Asset::class)\n                      <li{!! (Request::query('Deleted') ? ' class=\"active\"' : '') !!}>\n                          <a href=\"{{ url('hardware?status=Deleted') }}\">\n                              {{ trans('general.deleted') }}\n                          </a>\n                      </li>\n                      <li>\n                          <a href=\"{{ route('maintenances.index') }}\">\n                            {{ trans('general.asset_maintenances') }}\n                          </a>\n                      </li>\n                    @endcan\n                    @can('admin')\n                      <li>\n                          <a href=\"{{ url('hardware/history') }}\">\n                            {{ trans('general.import-history') }}\n                          </a>\n                      </li>\n                    @endcan\n                    @can('audit', \\App\\Models\\Asset::class)\n                        <li>\n                            <a href=\"{{ route('assets.bulkaudit') }}\">\n                                {{ trans('general.bulkaudit') }}\n                            </a>\n                        </li>\n                    @endcan\n                </ul>\n              </li>\n              @endcan\n              @can('view', \\App\\Models\\License::class)\n              <li{!! (Request::is('licenses*') ? ' class=\"active\"' : '') !!}>\n                  <a href=\"{{ route('licenses.index') }}\">\n                    <i class=\"far fa-save fa-fw\"></i>\n                    <span>{{ trans('general.licenses') }}</span>\n                  </a>\n              </li>\n              @endcan\n              @can('index', \\App\\Models\\Accessory::class)\n              <li{!! (Request::is('accessories*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ route('accessories.index') }}\">\n                  <i class=\"far fa-keyboard fa-fw\"></i>\n                  <span>{{ trans('general.accessories') }}</span>\n                </a>\n              </li>\n              @endcan\n              @can('view', \\App\\Models\\Consumable::class)\n            <li{!! (Request::is('consumables*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ url('consumables') }}\">\n                  <i class=\"fas fa-tint fa-fw\"></i>\n                  <span>{{ trans('general.consumables') }}</span>\n                </a>\n            </li>\n             @endcan\n             @can('view', \\App\\Models\\Component::class)\n            <li{!! (Request::is('components*') ? ' class=\"active\"' : '') !!}>\n                <a href=\"{{ route('components.index') }}\">\n                  <i class=\"far fa-hdd fa-fw\"></i>\n                  <span>{{ trans('general.components') }}</span>\n                </a>\n            </li>\n            @endcan\n            @can('view', \\App\\Models\\PredefinedKit::class)\n                <li{!! (Request::is('kits') ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ route('kits.index') }}\">\n                        <i class=\"fa fa-object-group fa-fw\"></i>\n                        <span>{{ trans('general.kits') }}</span>\n                    </a>\n                </li>\n            @endcan\n\n            @can('view', \\App\\Models\\User::class)\n            <li{!! (Request::is('users*') ? ' class=\"active\"' : '') !!}>\n                  <a href=\"{{ route('users.index') }}\">\n                      <i class=\"fas fa-users fa-fw\"></i>\n                      <span>{{ trans('general.people') }}</span>\n                  </a>\n            </li>\n            @endcan\n            @can('import')\n                <li{!! (Request::is('import/*') ? ' class=\"active\"' : '') !!}>\n                    <a href=\"{{ route('imports.index') }}\">\n                        <i class=\"fas fa-cloud-download-alt fa-fw\"></i>\n                        <span>{{ trans('general.import') }}</span>\n                    </a>\n                </li>\n            @endcan\n\n            @can('backend.interact')\n                <li class=\"treeview {!! in_array(Request::route()->getName(),App\\Helpers\\Helper::SettingUrls()) ? ' active': '' !!}\">\n                    <a href=\"#\" id=\"settings\">\n                        <i class=\"fas fa-cog\" aria-hidden=\"true\"></i>\n                        <span>{{ trans('general.settings') }}</span>\n                        <i class=\"fa fa-angle-left pull-right\"></i>\n                    </a>\n\n                    <ul class=\"treeview-menu\">\n                        @if(Gate::allows('view', App\\Models\\CustomField::class) || Gate::allows('view', App\\Models\\CustomFieldset::class))\n                            <li {!! (Request::is('fields*') ? ' class=\"active\"' : '') !!}>\n                                <a href=\"{{ route('fields.index') }}\">\n                                    {{ trans('admin/custom_fields/general.custom_fields') }}\n                                </a>\n                            </li>\n                        @endif\n\n                        @can('view', \\App\\Models\\Statuslabel::class)\n                            <li {!! (Request::is('statuslabels*') ? ' class=\"active\"' : '') !!}>\n                                <a href=\"{{ route('statuslabels.index') }}\">\n                                    {{ trans('general.status_labels') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\AssetModel::class)\n                            <li>\n                                <a href=\"{{ route('models.index') }}\" {{ (Request::is('/assetmodels') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.asset_models') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Category::class)\n                            <li>\n                                <a href=\"{{ route('categories.index') }}\" {{ (Request::is('/categories') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.categories') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Manufacturer::class)\n                            <li>\n                                <a href=\"{{ route('manufacturers.index') }}\" {{ (Request::is('/manufacturers') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.manufacturers') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Supplier::class)\n                            <li>\n                                <a href=\"{{ route('suppliers.index') }}\" {{ (Request::is('/suppliers') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.suppliers') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Department::class)\n                            <li>\n                                <a href=\"{{ route('departments.index') }}\" {{ (Request::is('/departments') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.departments') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Location::class)\n                            <li>\n                                <a href=\"{{ route('locations.index') }}\" {{ (Request::is('/locations') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.locations') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Company::class)\n                            <li>\n                                <a href=\"{{ route('companies.index') }}\" {{ (Request::is('/companies') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.companies') }}\n                                </a>\n                            </li>\n                        @endcan\n\n                        @can('view', \\App\\Models\\Depreciation::class)\n                            <li>\n                                <a href=\"{{ route('depreciations.index') }}\" {{ (Request::is('/depreciations') ? ' class=\"active\"' : '') }}>\n                                    {{ trans('general.depreciation') }}\n                                </a>\n                            </li>\n                        @endcan\n                    </ul>\n                </li>\n            @endcan\n\n            @can('reports.view')\n            <li class=\"treeview{{ (Request::is('reports*') ? ' active' : '') }}\">\n                <a href=\"#\"  class=\"dropdown-toggle\">\n                    <i class=\"fas fa-chart-bar fa-fw\"></i>\n                    <span>{{ trans('general.reports') }}</span>\n                    <i class=\"fa fa-angle-left pull-right\"></i>\n                </a>\n\n                <ul class=\"treeview-menu\">\n                    <li>\n                        <a href=\"{{ route('reports.activity') }}\" {{ (Request::is('reports/activity') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.activity_report') }}\n                        </a>\n                    </li>\n\n                    <li><a href=\"{{ route('reports.audit') }}\" {{ (Request::is('reports.audit') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.audit_report') }}</a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/depreciation') }}\" {{ (Request::is('reports/depreciation') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.depreciation_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/licenses') }}\" {{ (Request::is('reports/licenses') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.license_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/asset_maintenances') }}\" {{ (Request::is('reports/asset_maintenances') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.asset_maintenance_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/unaccepted_assets') }}\" {{ (Request::is('reports/unaccepted_assets') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.unaccepted_asset_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/accessories') }}\" {{ (Request::is('reports/accessories') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.accessory_report') }}\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"{{ url('reports/custom') }}\" {{ (Request::is('reports/custom') ? ' class=\"active\"' : '') }}>\n                            {{ trans('general.custom_report') }}\n                        </a>\n                    </li>\n                </ul>\n            </li>\n            @endcan\n\n            @can('viewRequestable', \\App\\Models\\Asset::class)\n            <li{!! (Request::is('account/requestable-assets') ? ' class=\"active\"' : '') !!}>\n            <a href=\"{{ route('requestable-assets') }}\">\n            <i class=\"fa fa-laptop fa-fw\"></i>\n            <span>{{ trans('admin/hardware/general.requestable') }}</span>\n            </a>\n            </li>\n            @endcan\n\n\n          </ul>\n        </section>\n        <!-- /.sidebar -->\n      </aside>\n\n      <!-- Content Wrapper. Contains page content -->\n\n      <div class=\"content-wrapper\" role=\"main\" id=\"setting-list\">\n\n          @if ($debug_in_production)\n              <div class=\"row\" style=\"margin-bottom: 0px; background-color: red; color: white; font-size: 15px;\">\n                  <div class=\"col-md-12\" style=\"margin-bottom: 0px; background-color: #b50408 ; color: white; padding: 10px 20px 10px 30px; font-size: 16px;\">\n                      <i class=\"fas fa-exclamation-triangle fa-3x pull-left\"></i> <strong>{{ strtoupper(trans('general.debug_warning')) }}:</strong>\n                      {!! trans('general.debug_warning_text') !!}\n                  </div>\n              </div>\n      @endif\n\n        <!-- Content Header (Page header) -->\n        <section class=\"content-header\" style=\"padding-bottom: 30px;\">\n          <h1 class=\"pull-left pagetitle\">@yield('title') </h1>\n\n            @if (isset($helpText))\n            @include ('partials.more-info',\n                                   [\n                                       'helpText' => $helpText,\n                                       'helpPosition' => (isset($helpPosition)) ? $helpPosition : 'left'\n                                   ])\n            @endif\n          <div class=\"pull-right\">\n            @yield('header_right')\n          </div>\n\n\n\n        </section>\n\n\n        <section class=\"content\" id=\"main\" tabindex=\"-1\">\n\n          <!-- Notifications -->\n          <div class=\"row\">\n              @if (config('app.lock_passwords'))\n                  <div class=\"col-md-12\">\n                      <div class=\"callout callout-info\">\n                          {{ trans('general.some_features_disabled') }}\n                      </div>\n                  </div>\n              @endif\n\n          @include('notifications')\n          </div>\n\n\n          <!-- Content -->\n            <div id=\"{!! (Request::is('*api*') ? 'app' : 'webui') !!}\">\n          @yield('content')\n            </div>\n\n        </section>\n\n      </div><!-- /.content-wrapper -->\n\n      <footer class=\"main-footer hidden-print\">\n\n        <div class=\"pull-right hidden-xs\">\n          @if ($snipeSettings->version_footer!='off')\n              @if (($snipeSettings->version_footer=='on') || (($snipeSettings->version_footer=='admin') && (Auth::user()->isSuperUser()=='1')))\n                &nbsp; <strong>Version</strong> {{ config('version.app_version') }} - build {{ config('version.build_version') }} ({{ config('version.branch') }})\n              @endif\n          @endif\n\n          @if ($snipeSettings->support_footer!='off')\n              @if (($snipeSettings->support_footer=='on') || (($snipeSettings->support_footer=='admin') && (Auth::user()->isSuperUser()=='1')))\n                <a target=\"_blank\" class=\"btn btn-default btn-xs\" href=\"https://snipe-it.readme.io/docs/overview\" rel=\"noopener\">{{ trans('general.user_manual') }}</a>\n                <a target=\"_blank\" class=\"btn btn-default btn-xs\" href=\"https://snipeitapp.com/support/\" rel=\"noopener\">{{ trans('general.bug_report') }}</a>\n                 @endif\n          @endif\n\n        @if ($snipeSettings->privacy_policy_link!='')\n            <a target=\"_blank\" class=\"btn btn-default btn-xs\" rel=\"noopener\" href=\"{{  $snipeSettings->privacy_policy_link }}\" target=\"_new\">{{ trans('admin/settings/general.privacy_policy') }}</a>\n        @endif\n\n\n        </div>\n          @if ($snipeSettings->footer_text!='')\n              <div class=\"pull-right\">\n                  {!!  Helper::parseEscapedMarkedown($snipeSettings->footer_text)  !!}\n              </div>\n          @endif\n          \n\n          <a target=\"_blank\" href=\"https://snipeitapp.com\" rel=\"noopener\">Snipe-IT</a> is open source software, made with <i class=\"fas fa-heart\" style=\"color: #a94442; font-size: 10px\" aria-hidden=\"true\"></i><span class=\"sr-only\">love</span> by <a href=\"https://twitter.com/snipeitapp\" rel=\"noopener\">@snipeitapp</a>.\n      </footer>\n\n\n\n    </div><!-- ./wrapper -->\n\n\n    <!-- end main container -->\n\n    <div class=\"modal modal-danger fade\" id=\"dataConfirmModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                    <h2 class=\"modal-title\" id=\"myModalLabel\">&nbsp;</h2>\n                </div>\n                <div class=\"modal-body\"></div>\n                <div class=\"modal-footer\">\n                <form method=\"post\" id=\"deleteForm\" role=\"form\">\n                    {{ csrf_field() }}\n                    {{ method_field('DELETE') }}\n\n                    <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">{{ trans('general.cancel') }}</button>\n                    <button type=\"submit\" class=\"btn btn-outline\" id=\"dataConfirmOK\">{{ trans('general.yes') }}</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n    <div class=\"modal modal-warning fade\" id=\"restoreConfirmModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"confirmModalLabel\" aria-hidden=\"true\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                    <h4 class=\"modal-title\" id=\"confirmModalLabel\">&nbsp;</h4>\n                </div>\n                <div class=\"modal-body\"></div>\n                <div class=\"modal-footer\">\n                <form method=\"post\" id=\"restoreForm\" role=\"form\">\n                    {{ csrf_field() }}\n                    {{ method_field('POST') }}\n\n                    <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">{{ trans('general.cancel') }}</button>\n                    <button type=\"submit\" class=\"btn btn-outline\" id=\"dataConfirmOK\">{{ trans('general.yes') }}</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    {{-- Javascript files --}}\n    <script src=\"{{ url(mix('js/dist/all.js')) }}\" nonce=\"{{ csrf_token() }}\"></script>\n\n    <!-- v5-beta: This pGenerator call must remain here for v5 - until fixed - so that the JS password generator works for the user create modal. -->\n    <script src=\"{{ url('js/pGenerator.jquery.js') }}\"></script>\n\n    {{-- Page level javascript --}}\n    @stack('js')\n\n    @section('moar_scripts')\n    @show\n\n\n    <script nonce=\"{{ csrf_token() }}\">\n\n\n        // ignore: 'input[type=hidden]' is required here to validate the select2 lists\n        $.validate({\n            form : '#create-form',\n            modules : 'date, toggleDisabled',\n            disabledFormFilter : '#create-form',\n            showErrorDialogs : true,\n            ignore: 'input[type=hidden]'\n        });\n\n\n\n\n\n        $(function () {\n  \n            $('[data-toggle=\"tooltip\"]').tooltip();\n            $('[data-toggle=\"popover\"]').popover();\n            $('.select2 span').addClass('needsclick');\n            $('.select2 span').removeAttr('title');\n\n            // This javascript handles saving the state of the menu (expanded or not)\n            $('body').bind('expanded.pushMenu', function() {\n                $.ajax({\n                    type: 'GET',\n                    url: \"{{ route('account.menuprefs', ['state'=>'open']) }}\",\n                    _token: \"{{ csrf_token() }}\"\n                });\n\n            });\n\n            $('body').bind('collapsed.pushMenu', function() {\n                $.ajax({\n                    type: 'GET',\n                    url: \"{{ route('account.menuprefs', ['state'=>'close']) }}\",\n                    _token: \"{{ csrf_token() }}\"\n                });\n            });\n\n        });\n\n        // Initiate the ekko lightbox\n        $(document).on('click', '[data-toggle=\"lightbox\"]', function(event) {\n            event.preventDefault();\n            $(this).ekkoLightbox();\n        });\n\n\n\n    </script>\n\n    @if ((Session::get('topsearch')=='true') || (Request::is('/')))\n    <script nonce=\"{{ csrf_token() }}\">\n         $(\"#tagSearch\").focus();\n    </script>\n    @endif\n\n\n\n    @livewireScripts\n  </body>\n</html>\n"], "filenames": ["app/Helpers/Helper.php", "app/Models/Accessory.php", "app/Models/Asset.php", "app/Models/Category.php", "app/Models/Consumable.php", "app/Models/License.php", "app/Models/Setting.php", "app/Presenters/AssetModelPresenter.php", "resources/views/auth/login.blade.php", "resources/views/dashboard.blade.php", "resources/views/layouts/default.blade.php"], "buggy_code_start_loc": [25, 4, 7, 11, 4, 4, 11, 3, 31, 20, 830], "buggy_code_end_loc": [31, 311, 885, 216, 274, 346, 153, 166, 32, 21, 831], "fixing_code_start_loc": [25, 5, 8, 12, 5, 5, 11, 4, 31, 20, 830], "fixing_code_end_loc": [32, 311, 885, 216, 273, 346, 151, 166, 32, 21, 831], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository snipe/snipe-it prior to v6.0.11.", "other": {"cve": {"id": "CVE-2022-3035", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-29T20:15:09.527", "lastModified": "2022-09-01T06:47:49.803", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository snipe/snipe-it prior to v6.0.11."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio GitHub snipe/snipe-it versiones anteriores a v6.0.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.11", "matchCriteriaId": "F2154AB4-D364-4C7B-8E2C-94080B10FEE0"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/9cf5f30c77df6ab60baab1c0e6bb0b4e773f0eae", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0bbb1046-ea9e-4cb9-bc91-b294a72d1902", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/9cf5f30c77df6ab60baab1c0e6bb0b4e773f0eae"}}