{"buggy_code": ["/* (C) 1999-2001 Paul `Rusty' Russell\n * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n\n#include <linux/types.h>\n#include <linux/jiffies.h>\n#include <linux/timer.h>\n#include <linux/netfilter.h>\n#include <net/netfilter/nf_conntrack_l4proto.h>\n\nstatic unsigned int nf_ct_generic_timeout __read_mostly = 600*HZ;\n\nstatic inline struct nf_generic_net *generic_pernet(struct net *net)\n{\n\treturn &net->ct.nf_ct_proto.generic;\n}\n\nstatic bool generic_pkt_to_tuple(const struct sk_buff *skb,\n\t\t\t\t unsigned int dataoff,\n\t\t\t\t struct nf_conntrack_tuple *tuple)\n{\n\ttuple->src.u.all = 0;\n\ttuple->dst.u.all = 0;\n\n\treturn true;\n}\n\nstatic bool generic_invert_tuple(struct nf_conntrack_tuple *tuple,\n\t\t\t\t const struct nf_conntrack_tuple *orig)\n{\n\ttuple->src.u.all = 0;\n\ttuple->dst.u.all = 0;\n\n\treturn true;\n}\n\n/* Print out the per-protocol part of the tuple. */\nstatic int generic_print_tuple(struct seq_file *s,\n\t\t\t       const struct nf_conntrack_tuple *tuple)\n{\n\treturn 0;\n}\n\nstatic unsigned int *generic_get_timeouts(struct net *net)\n{\n\treturn &(generic_pernet(net)->timeout);\n}\n\n/* Returns verdict for packet, or -1 for invalid. */\nstatic int generic_packet(struct nf_conn *ct,\n\t\t\t  const struct sk_buff *skb,\n\t\t\t  unsigned int dataoff,\n\t\t\t  enum ip_conntrack_info ctinfo,\n\t\t\t  u_int8_t pf,\n\t\t\t  unsigned int hooknum,\n\t\t\t  unsigned int *timeout)\n{\n\tnf_ct_refresh_acct(ct, ctinfo, skb, *timeout);\n\treturn NF_ACCEPT;\n}\n\n/* Called when a new connection for this protocol found. */\nstatic bool generic_new(struct nf_conn *ct, const struct sk_buff *skb,\n\t\t\tunsigned int dataoff, unsigned int *timeouts)\n{\n\treturn true;\n}\n\n#if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)\n\n#include <linux/netfilter/nfnetlink.h>\n#include <linux/netfilter/nfnetlink_cttimeout.h>\n\nstatic int generic_timeout_nlattr_to_obj(struct nlattr *tb[],\n\t\t\t\t\t struct net *net, void *data)\n{\n\tunsigned int *timeout = data;\n\tstruct nf_generic_net *gn = generic_pernet(net);\n\n\tif (tb[CTA_TIMEOUT_GENERIC_TIMEOUT])\n\t\t*timeout =\n\t\t    ntohl(nla_get_be32(tb[CTA_TIMEOUT_GENERIC_TIMEOUT])) * HZ;\n\telse {\n\t\t/* Set default generic timeout. */\n\t\t*timeout = gn->timeout;\n\t}\n\n\treturn 0;\n}\n\nstatic int\ngeneric_timeout_obj_to_nlattr(struct sk_buff *skb, const void *data)\n{\n\tconst unsigned int *timeout = data;\n\n\tif (nla_put_be32(skb, CTA_TIMEOUT_GENERIC_TIMEOUT, htonl(*timeout / HZ)))\n\t\tgoto nla_put_failure;\n\n\treturn 0;\n\nnla_put_failure:\n        return -ENOSPC;\n}\n\nstatic const struct nla_policy\ngeneric_timeout_nla_policy[CTA_TIMEOUT_GENERIC_MAX+1] = {\n\t[CTA_TIMEOUT_GENERIC_TIMEOUT]\t= { .type = NLA_U32 },\n};\n#endif /* CONFIG_NF_CT_NETLINK_TIMEOUT */\n\n#ifdef CONFIG_SYSCTL\nstatic struct ctl_table generic_sysctl_table[] = {\n\t{\n\t\t.procname\t= \"nf_conntrack_generic_timeout\",\n\t\t.maxlen\t\t= sizeof(unsigned int),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dointvec_jiffies,\n\t},\n\t{ }\n};\n#ifdef CONFIG_NF_CONNTRACK_PROC_COMPAT\nstatic struct ctl_table generic_compat_sysctl_table[] = {\n\t{\n\t\t.procname\t= \"ip_conntrack_generic_timeout\",\n\t\t.maxlen\t\t= sizeof(unsigned int),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dointvec_jiffies,\n\t},\n\t{ }\n};\n#endif /* CONFIG_NF_CONNTRACK_PROC_COMPAT */\n#endif /* CONFIG_SYSCTL */\n\nstatic int generic_kmemdup_sysctl_table(struct nf_proto_net *pn,\n\t\t\t\t\tstruct nf_generic_net *gn)\n{\n#ifdef CONFIG_SYSCTL\n\tpn->ctl_table = kmemdup(generic_sysctl_table,\n\t\t\t\tsizeof(generic_sysctl_table),\n\t\t\t\tGFP_KERNEL);\n\tif (!pn->ctl_table)\n\t\treturn -ENOMEM;\n\n\tpn->ctl_table[0].data = &gn->timeout;\n#endif\n\treturn 0;\n}\n\nstatic int generic_kmemdup_compat_sysctl_table(struct nf_proto_net *pn,\n\t\t\t\t\t       struct nf_generic_net *gn)\n{\n#ifdef CONFIG_SYSCTL\n#ifdef CONFIG_NF_CONNTRACK_PROC_COMPAT\n\tpn->ctl_compat_table = kmemdup(generic_compat_sysctl_table,\n\t\t\t\t       sizeof(generic_compat_sysctl_table),\n\t\t\t\t       GFP_KERNEL);\n\tif (!pn->ctl_compat_table)\n\t\treturn -ENOMEM;\n\n\tpn->ctl_compat_table[0].data = &gn->timeout;\n#endif\n#endif\n\treturn 0;\n}\n\nstatic int generic_init_net(struct net *net, u_int16_t proto)\n{\n\tint ret;\n\tstruct nf_generic_net *gn = generic_pernet(net);\n\tstruct nf_proto_net *pn = &gn->pn;\n\n\tgn->timeout = nf_ct_generic_timeout;\n\n\tret = generic_kmemdup_compat_sysctl_table(pn, gn);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tret = generic_kmemdup_sysctl_table(pn, gn);\n\tif (ret < 0)\n\t\tnf_ct_kfree_compat_sysctl_table(pn);\n\n\treturn ret;\n}\n\nstatic struct nf_proto_net *generic_get_net_proto(struct net *net)\n{\n\treturn &net->ct.nf_ct_proto.generic.pn;\n}\n\nstruct nf_conntrack_l4proto nf_conntrack_l4proto_generic __read_mostly =\n{\n\t.l3proto\t\t= PF_UNSPEC,\n\t.l4proto\t\t= 255,\n\t.name\t\t\t= \"unknown\",\n\t.pkt_to_tuple\t\t= generic_pkt_to_tuple,\n\t.invert_tuple\t\t= generic_invert_tuple,\n\t.print_tuple\t\t= generic_print_tuple,\n\t.packet\t\t\t= generic_packet,\n\t.get_timeouts\t\t= generic_get_timeouts,\n\t.new\t\t\t= generic_new,\n#if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)\n\t.ctnl_timeout\t\t= {\n\t\t.nlattr_to_obj\t= generic_timeout_nlattr_to_obj,\n\t\t.obj_to_nlattr\t= generic_timeout_obj_to_nlattr,\n\t\t.nlattr_max\t= CTA_TIMEOUT_GENERIC_MAX,\n\t\t.obj_size\t= sizeof(unsigned int),\n\t\t.nla_policy\t= generic_timeout_nla_policy,\n\t},\n#endif /* CONFIG_NF_CT_NETLINK_TIMEOUT */\n\t.init_net\t\t= generic_init_net,\n\t.get_net_proto\t\t= generic_get_net_proto,\n};\n"], "fixing_code": ["/* (C) 1999-2001 Paul `Rusty' Russell\n * (C) 2002-2004 Netfilter Core Team <coreteam@netfilter.org>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation.\n */\n\n#include <linux/types.h>\n#include <linux/jiffies.h>\n#include <linux/timer.h>\n#include <linux/netfilter.h>\n#include <net/netfilter/nf_conntrack_l4proto.h>\n\nstatic unsigned int nf_ct_generic_timeout __read_mostly = 600*HZ;\n\nstatic bool nf_generic_should_process(u8 proto)\n{\n\tswitch (proto) {\n#ifdef CONFIG_NF_CT_PROTO_SCTP_MODULE\n\tcase IPPROTO_SCTP:\n\t\treturn false;\n#endif\n#ifdef CONFIG_NF_CT_PROTO_DCCP_MODULE\n\tcase IPPROTO_DCCP:\n\t\treturn false;\n#endif\n#ifdef CONFIG_NF_CT_PROTO_GRE_MODULE\n\tcase IPPROTO_GRE:\n\t\treturn false;\n#endif\n#ifdef CONFIG_NF_CT_PROTO_UDPLITE_MODULE\n\tcase IPPROTO_UDPLITE:\n\t\treturn false;\n#endif\n\tdefault:\n\t\treturn true;\n\t}\n}\n\nstatic inline struct nf_generic_net *generic_pernet(struct net *net)\n{\n\treturn &net->ct.nf_ct_proto.generic;\n}\n\nstatic bool generic_pkt_to_tuple(const struct sk_buff *skb,\n\t\t\t\t unsigned int dataoff,\n\t\t\t\t struct nf_conntrack_tuple *tuple)\n{\n\ttuple->src.u.all = 0;\n\ttuple->dst.u.all = 0;\n\n\treturn true;\n}\n\nstatic bool generic_invert_tuple(struct nf_conntrack_tuple *tuple,\n\t\t\t\t const struct nf_conntrack_tuple *orig)\n{\n\ttuple->src.u.all = 0;\n\ttuple->dst.u.all = 0;\n\n\treturn true;\n}\n\n/* Print out the per-protocol part of the tuple. */\nstatic int generic_print_tuple(struct seq_file *s,\n\t\t\t       const struct nf_conntrack_tuple *tuple)\n{\n\treturn 0;\n}\n\nstatic unsigned int *generic_get_timeouts(struct net *net)\n{\n\treturn &(generic_pernet(net)->timeout);\n}\n\n/* Returns verdict for packet, or -1 for invalid. */\nstatic int generic_packet(struct nf_conn *ct,\n\t\t\t  const struct sk_buff *skb,\n\t\t\t  unsigned int dataoff,\n\t\t\t  enum ip_conntrack_info ctinfo,\n\t\t\t  u_int8_t pf,\n\t\t\t  unsigned int hooknum,\n\t\t\t  unsigned int *timeout)\n{\n\tnf_ct_refresh_acct(ct, ctinfo, skb, *timeout);\n\treturn NF_ACCEPT;\n}\n\n/* Called when a new connection for this protocol found. */\nstatic bool generic_new(struct nf_conn *ct, const struct sk_buff *skb,\n\t\t\tunsigned int dataoff, unsigned int *timeouts)\n{\n\treturn nf_generic_should_process(nf_ct_protonum(ct));\n}\n\n#if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)\n\n#include <linux/netfilter/nfnetlink.h>\n#include <linux/netfilter/nfnetlink_cttimeout.h>\n\nstatic int generic_timeout_nlattr_to_obj(struct nlattr *tb[],\n\t\t\t\t\t struct net *net, void *data)\n{\n\tunsigned int *timeout = data;\n\tstruct nf_generic_net *gn = generic_pernet(net);\n\n\tif (tb[CTA_TIMEOUT_GENERIC_TIMEOUT])\n\t\t*timeout =\n\t\t    ntohl(nla_get_be32(tb[CTA_TIMEOUT_GENERIC_TIMEOUT])) * HZ;\n\telse {\n\t\t/* Set default generic timeout. */\n\t\t*timeout = gn->timeout;\n\t}\n\n\treturn 0;\n}\n\nstatic int\ngeneric_timeout_obj_to_nlattr(struct sk_buff *skb, const void *data)\n{\n\tconst unsigned int *timeout = data;\n\n\tif (nla_put_be32(skb, CTA_TIMEOUT_GENERIC_TIMEOUT, htonl(*timeout / HZ)))\n\t\tgoto nla_put_failure;\n\n\treturn 0;\n\nnla_put_failure:\n        return -ENOSPC;\n}\n\nstatic const struct nla_policy\ngeneric_timeout_nla_policy[CTA_TIMEOUT_GENERIC_MAX+1] = {\n\t[CTA_TIMEOUT_GENERIC_TIMEOUT]\t= { .type = NLA_U32 },\n};\n#endif /* CONFIG_NF_CT_NETLINK_TIMEOUT */\n\n#ifdef CONFIG_SYSCTL\nstatic struct ctl_table generic_sysctl_table[] = {\n\t{\n\t\t.procname\t= \"nf_conntrack_generic_timeout\",\n\t\t.maxlen\t\t= sizeof(unsigned int),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dointvec_jiffies,\n\t},\n\t{ }\n};\n#ifdef CONFIG_NF_CONNTRACK_PROC_COMPAT\nstatic struct ctl_table generic_compat_sysctl_table[] = {\n\t{\n\t\t.procname\t= \"ip_conntrack_generic_timeout\",\n\t\t.maxlen\t\t= sizeof(unsigned int),\n\t\t.mode\t\t= 0644,\n\t\t.proc_handler\t= proc_dointvec_jiffies,\n\t},\n\t{ }\n};\n#endif /* CONFIG_NF_CONNTRACK_PROC_COMPAT */\n#endif /* CONFIG_SYSCTL */\n\nstatic int generic_kmemdup_sysctl_table(struct nf_proto_net *pn,\n\t\t\t\t\tstruct nf_generic_net *gn)\n{\n#ifdef CONFIG_SYSCTL\n\tpn->ctl_table = kmemdup(generic_sysctl_table,\n\t\t\t\tsizeof(generic_sysctl_table),\n\t\t\t\tGFP_KERNEL);\n\tif (!pn->ctl_table)\n\t\treturn -ENOMEM;\n\n\tpn->ctl_table[0].data = &gn->timeout;\n#endif\n\treturn 0;\n}\n\nstatic int generic_kmemdup_compat_sysctl_table(struct nf_proto_net *pn,\n\t\t\t\t\t       struct nf_generic_net *gn)\n{\n#ifdef CONFIG_SYSCTL\n#ifdef CONFIG_NF_CONNTRACK_PROC_COMPAT\n\tpn->ctl_compat_table = kmemdup(generic_compat_sysctl_table,\n\t\t\t\t       sizeof(generic_compat_sysctl_table),\n\t\t\t\t       GFP_KERNEL);\n\tif (!pn->ctl_compat_table)\n\t\treturn -ENOMEM;\n\n\tpn->ctl_compat_table[0].data = &gn->timeout;\n#endif\n#endif\n\treturn 0;\n}\n\nstatic int generic_init_net(struct net *net, u_int16_t proto)\n{\n\tint ret;\n\tstruct nf_generic_net *gn = generic_pernet(net);\n\tstruct nf_proto_net *pn = &gn->pn;\n\n\tgn->timeout = nf_ct_generic_timeout;\n\n\tret = generic_kmemdup_compat_sysctl_table(pn, gn);\n\tif (ret < 0)\n\t\treturn ret;\n\n\tret = generic_kmemdup_sysctl_table(pn, gn);\n\tif (ret < 0)\n\t\tnf_ct_kfree_compat_sysctl_table(pn);\n\n\treturn ret;\n}\n\nstatic struct nf_proto_net *generic_get_net_proto(struct net *net)\n{\n\treturn &net->ct.nf_ct_proto.generic.pn;\n}\n\nstruct nf_conntrack_l4proto nf_conntrack_l4proto_generic __read_mostly =\n{\n\t.l3proto\t\t= PF_UNSPEC,\n\t.l4proto\t\t= 255,\n\t.name\t\t\t= \"unknown\",\n\t.pkt_to_tuple\t\t= generic_pkt_to_tuple,\n\t.invert_tuple\t\t= generic_invert_tuple,\n\t.print_tuple\t\t= generic_print_tuple,\n\t.packet\t\t\t= generic_packet,\n\t.get_timeouts\t\t= generic_get_timeouts,\n\t.new\t\t\t= generic_new,\n#if IS_ENABLED(CONFIG_NF_CT_NETLINK_TIMEOUT)\n\t.ctnl_timeout\t\t= {\n\t\t.nlattr_to_obj\t= generic_timeout_nlattr_to_obj,\n\t\t.obj_to_nlattr\t= generic_timeout_obj_to_nlattr,\n\t\t.nlattr_max\t= CTA_TIMEOUT_GENERIC_MAX,\n\t\t.obj_size\t= sizeof(unsigned int),\n\t\t.nla_policy\t= generic_timeout_nla_policy,\n\t},\n#endif /* CONFIG_NF_CT_NETLINK_TIMEOUT */\n\t.init_net\t\t= generic_init_net,\n\t.get_net_proto\t\t= generic_get_net_proto,\n};\n"], "filenames": ["net/netfilter/nf_conntrack_proto_generic.c"], "buggy_code_start_loc": [15], "buggy_code_end_loc": [71], "fixing_code_start_loc": [16], "fixing_code_end_loc": [95], "type": "CWE-20", "message": "net/netfilter/nf_conntrack_proto_generic.c in the Linux kernel before 3.18 generates incorrect conntrack entries during handling of certain iptables rule sets for the SCTP, DCCP, GRE, and UDP-Lite protocols, which allows remote attackers to bypass intended access restrictions via packets with disallowed port numbers.", "other": {"cve": {"id": "CVE-2014-8160", "sourceIdentifier": "secalert@redhat.com", "published": "2015-03-02T11:59:02.660", "lastModified": "2023-02-13T00:43:57.847", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "net/netfilter/nf_conntrack_proto_generic.c in the Linux kernel before 3.18 generates incorrect conntrack entries during handling of certain iptables rule sets for the SCTP, DCCP, GRE, and UDP-Lite protocols, which allows remote attackers to bypass intended access restrictions via packets with disallowed port numbers."}, {"lang": "es", "value": "net/netfilter/nf_conntrack_proto_generic.c en el kernel de Linux anterior a 3.18 genera entradas conntrack incorrectas durante el manejo de ciertos juegos de reglas iptables para los protocolos SCTP, DCCP, GRE, y UDP-Lite, lo que permite a atacantes remotos evadir las restricciones de acceso a trav\u00e9s de paquetes con n\u00fameros de puertos rechazados."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.18", "matchCriteriaId": "F4DB0238-477A-4506-B270-8B9527722A59"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_desktop:12:*:*:*:*:*:*:*", "matchCriteriaId": "F1EB0F28-F23A-4969-8A3E-66DA2EFA40C3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_real_time_extension:11:sp3:*:*:*:*:*:*", "matchCriteriaId": "3DB41B45-D94D-4A58-88B0-B3EC3EC350E2"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:11:sp1:*:*:ltss:*:*:*", "matchCriteriaId": "67960FB9-13D1-4DEE-8158-31BF31BCBE6F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_server:12:-:*:*:*:*:*:*", "matchCriteriaId": "15FC9014-BD85-4382-9D04-C0703E901D7A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_software_development_kit:12:-:*:*:*:*:*:*", "matchCriteriaId": "1831D45A-EE6E-4220-8F8C-248B69520948"}, {"vulnerable": true, "criteria": "cpe:2.3:o:suse:linux_enterprise_workstation_extension:12:*:*:*:*:*:*:*", "matchCriteriaId": "9DFA18B6-2642-470A-A350-68947529EE5D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "EE249E1B-A1FD-4E08-AA71-A0E1F10FFE97"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_desktop:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "33C068A4-3780-4EAB-A937-6082DF847564"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "9BBCD86A-E6C7-4444-9D74-F861084090F0"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "51EF4996-72F4-4FA4-814F-F5991E7A8318"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "1F3BEFDB-5156-4E1C-80BB-8BE9FEAA7623"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:6.6:*:*:*:*:*:*:*", "matchCriteriaId": "16E6D998-B41D-4B49-9E00-8336D2E40A4A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "98381E61-F082-4302-B51F-5648884F998B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_aus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B353CE99-D57C-465B-AAB0-73EF581127D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "45010D45-2FF2-4B04-B115-6B6FE606D598"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:6.6:*:*:*:*:*:*:*", "matchCriteriaId": "C18E3368-8980-45D2-AD3F-5BF385ABA693"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:7.3:*:*:*:*:*:*:*", "matchCriteriaId": "A8442C20-41F9-47FD-9A12-E724D3A31FD7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:7.4:*:*:*:*:*:*:*", "matchCriteriaId": "9EC0D196-F7B8-4BDD-9050-779F7A7FBEE4"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:7.5:*:*:*:*:*:*:*", "matchCriteriaId": "A4E9DD8A-A68B-4A69-8B01-BFF92A2020A8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "BF77CDCF-B9C9-427D-B2BF-36650FB2148C"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_eus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "21690BAC-2129-4A33-9B48-1F3BF30072A9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:6.5:*:*:*:*:*:*:*", "matchCriteriaId": "835AE071-CEAE-49E5-8F0C-E5F50FB85EFC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:6.6:*:*:*:*:*:*:*", "matchCriteriaId": "13E02156-E748-4820-B76F-7074793837E1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.6:*:*:*:*:*:*:*", "matchCriteriaId": "B76AA310-FEC7-497F-AF04-C3EC1E76C4CC"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_server_tus:7.7:*:*:*:*:*:*:*", "matchCriteriaId": "17F256A9-D3B9-4C72-B013-4EFD878BFEA8"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "E5ED5807-55B7-47C5-97A6-03233F4FBC3A"}, {"vulnerable": true, "criteria": "cpe:2.3:o:redhat:enterprise_linux_workstation:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "825ECE2D-E232-46E0-A047-074B34DB1E97"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:12.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B6B7CAD7-9D4E-4FDB-88E3-1E583210A01F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B5A6F2F3-4894-4392-8296-3B8DD2679084"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.10:*:*:*:*:*:*:*", "matchCriteriaId": "49A63F39-30BE-443F-AF10-6245587D3359"}]}]}], "references": [{"url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=db29a9508a9246e77087c5531e45b2c88ec6988b", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-03/msg00020.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00000.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00009.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00015.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2015-0284.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2015-0290.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://rhn.redhat.com/errata/RHSA-2015-0674.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2015/dsa-3170", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:057", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:058", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2015/01/14/3", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/72061", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.spinics.net/lists/netfilter-devel/msg33430.html", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2513-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2514-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2515-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2516-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2517-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "http://www.ubuntu.com/usn/USN-2518-1", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1182059", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/torvalds/linux/commit/db29a9508a9246e77087c5531e45b2c88ec6988b", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/torvalds/linux/commit/db29a9508a9246e77087c5531e45b2c88ec6988b"}}