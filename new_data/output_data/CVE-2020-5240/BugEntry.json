{"buggy_code": ["import qrcode\nimport qrcode.image.svg\nfrom django.conf import settings\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.contrib.auth.views import SuccessURLAllowedHostsMixin\nfrom django.http import HttpResponse\nfrom django.shortcuts import resolve_url\nfrom django.urls import reverse\nfrom django.utils.decorators import method_decorator\nfrom django.utils.functional import cached_property\nfrom django.utils.http import is_safe_url\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.debug import sensitive_post_parameters\nfrom django.views.generic import (\n    DeleteView, FormView, ListView, UpdateView, View)\nfrom django_otp import login as otp_login\nfrom django_otp.plugins.otp_totp.models import TOTPDevice\n\nfrom wagtail_2fa import forms, utils\nfrom wagtail_2fa.mixins import OtpRequiredMixin\n\n\nclass LoginView(SuccessURLAllowedHostsMixin, FormView):\n    template_name = \"wagtail_2fa/otp_form.html\"\n    form_class = forms.TokenForm\n    redirect_field_name = REDIRECT_FIELD_NAME\n\n    @method_decorator(sensitive_post_parameters())\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"user\"] = self.request.user\n        return kwargs\n\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context[self.redirect_field_name] = self.get_redirect_url()\n        return context\n\n    def form_valid(self, form):\n        otp_login(self.request, self.request.user.otp_device)\n        return super().form_valid(form)\n\n    def get_redirect_url(self):\n        \"\"\"Return the user-originating redirect URL if it's safe.\"\"\"\n        redirect_to = self.request.POST.get(\n            self.redirect_field_name, self.request.GET.get(self.redirect_field_name, \"\")\n        )\n        url_is_safe = is_safe_url(\n            url=redirect_to,\n            allowed_hosts=self.get_success_url_allowed_hosts(),\n            require_https=self.request.is_secure(),\n        )\n        return redirect_to if url_is_safe else \"\"\n\n    def get_success_url(self):\n        url = self.get_redirect_url()\n        return url or resolve_url(settings.LOGIN_REDIRECT_URL)\n\n\nclass DeviceListView(OtpRequiredMixin, ListView):\n    template_name = \"wagtail_2fa/device_list.html\"\n\n    # require OTP if configured\n    if_configured = True\n\n    def get_queryset(self):\n        return TOTPDevice.objects.devices_for_user(self.kwargs['user_id'], confirmed=True)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['user_id'] = int(self.kwargs['user_id'])\n        return context\n\n\nclass DeviceCreateView(OtpRequiredMixin, FormView):\n    form_class = forms.DeviceForm\n    template_name = \"wagtail_2fa/device_form.html\"\n\n    # require OTP if configured\n    if_configured = True\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"request\"] = self.request\n        kwargs[\"instance\"] = self.device\n        return kwargs\n\n    def form_valid(self, form):\n        form.save()\n        utils.delete_unconfirmed_devices(self.request.user)\n\n        if not self.request.user.is_verified():\n            otp_login(self.request, form.instance)\n        return super().form_valid(form)\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.user.id})\n\n    @cached_property\n    def device(self):\n        if self.request.method.lower() == \"get\":\n            return utils.new_unconfirmed_device(self.request.user)\n        else:\n            return utils.get_unconfirmed_device(self.request.user)\n\n\nclass DeviceUpdateView(OtpRequiredMixin, UpdateView):\n    form_class = forms.DeviceForm\n    template_name = \"wagtail_2fa/device_form.html\"\n\n    def get_queryset(self):\n        return TOTPDevice.objects.devices_for_user(self.request.user, confirmed=True)\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"request\"] = self.request\n        return kwargs\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.user.id})\n\n\nclass DeviceDeleteView(OtpRequiredMixin, DeleteView):\n    template_name = \"wagtail_2fa/device_confirm_delete.html\"\n\n    def get_queryset(self):\n        device = TOTPDevice.objects.get(**self.kwargs)\n        return TOTPDevice.objects.devices_for_user(device.user, confirmed=True)\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.POST.get('user_id')})\n\n\nclass DeviceQRCodeView(OtpRequiredMixin, View):\n    # require OTP if configured\n    if_configured = True\n\n    def get(self, request):\n        device = utils.get_unconfirmed_device(self.request.user)\n        img = qrcode.make(device.config_url, image_factory=qrcode.image.svg.SvgImage)\n        response = HttpResponse(content_type=\"image/svg+xml\")\n        img.save(response)\n\n        return response\n", "from django.test import override_settings\nfrom unittest.mock import patch\n\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom django_otp import DEVICE_ID_SESSION_KEY\nfrom django_otp.plugins.otp_totp.models import TOTPDevice\nfrom wagtail_2fa.views import DeviceListView\n\n\ndef test_device_list_view(admin_client, admin_user, django_assert_num_queries):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        admin_device = TOTPDevice.objects.create(name='Initial', user=admin_user, confirmed=True)\n\n        session = admin_client.session\n        session[DEVICE_ID_SESSION_KEY] = admin_device.persistent_id\n        session.save()\n\n\n        with django_assert_num_queries(10):\n            response = admin_client.get(reverse('wagtail_2fa_device_list',\n                                        kwargs={'user_id': admin_user.id}))\n            assert response.status_code == 200\n\n\ndef test_device_list_create(admin_client, monkeypatch, django_assert_num_queries):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        with django_assert_num_queries(9):\n            response = admin_client.get(reverse('wagtail_2fa_device_new'))\n            assert response.status_code == 200\n\n        with patch(\"django_otp.plugins.otp_totp.models.TOTPDevice.verify_token\") as fn:\n            fn.return_value = True\n            response = admin_client.post(\n                reverse('wagtail_2fa_device_new'), {\n                    'name': 'Test device',\n                    'otp_token': '123456',\n                    'password': 'password',\n                })\n\n        assert response.status_code == 302, response.context['form'].errors\n        assert TOTPDevice.objects.filter(confirmed=True).count() == 1\n\n\ndef test_device_list_update(admin_client, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=True).first()\n        instance = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        monkeypatch.setattr(TOTPDevice, 'verify_token', lambda self, value: True)\n\n        # Login with 2fa\n        endpoint = reverse('wagtail_2fa_auth')\n        response = admin_client.post(endpoint, {'otp_token': '123456', 'next': '/cms/'})\n        assert response.status_code == 302,  response.context['form'].errors\n\n        # Get update view\n        endpoint = reverse('wagtail_2fa_device_update', kwargs={'pk': instance.pk})\n        response = admin_client.get(endpoint)\n        assert response.status_code == 200\n\n        # Post new name\n        response = admin_client.post(endpoint, {\n            'name': 'Test device',\n            'password': 'password',\n        })\n        assert response.status_code == 302, response.context['form'].errors\n        assert TOTPDevice.objects.filter(name='Test device').count() == 1\n\n\ndef test_device_qr(admin_client, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=True).first()\n        TOTPDevice.objects.create(name='Initial', user=user, confirmed=False)\n\n        # Get update view\n        endpoint = reverse('wagtail_2fa_device_qrcode')\n        response = admin_client.get(endpoint)\n        assert response.status_code == 200\n\n\ndef test_delete_user_device_as_admin(client, admin_user, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        # verify admin\n        admin_device = TOTPDevice.objects.create(name='Initial', user=admin_user, confirmed=True)\n\n        client.login(username=\"admin\", password=\"password\")\n\n        session = client.session\n        session[DEVICE_ID_SESSION_KEY] = admin_device.persistent_id\n        session.save()\n\n        assert TOTPDevice.objects.all().count() == 2\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n        print(response)\n        assert TOTPDevice.objects.all().count() == 1\n\ndef test_delete_user_device_as_admin_unverified(admin_client, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=False).first()\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = admin_client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n\n        new_device_url = reverse('wagtail_2fa_device_new')\n        assert response.url == f\"{new_device_url}?next={endpoint}\"\n        assert TOTPDevice.objects.all().count() == 1\n\n\ndef test_delete_user_device_unauthorized(client, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=False).first()\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n        assert TOTPDevice.objects.all().count() == 1\n"], "fixing_code": ["from django.core.exceptions import PermissionDenied\nimport qrcode\nimport qrcode.image.svg\nfrom django.conf import settings\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.contrib.auth.views import SuccessURLAllowedHostsMixin\nfrom django.http import HttpResponse\nfrom django.shortcuts import resolve_url\nfrom django.urls import reverse\nfrom django.utils.decorators import method_decorator\nfrom django.utils.functional import cached_property\nfrom django.utils.http import is_safe_url\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.debug import sensitive_post_parameters\nfrom django.views.generic import (\n    DeleteView, FormView, ListView, UpdateView, View)\nfrom django_otp import login as otp_login\nfrom django_otp.plugins.otp_totp.models import TOTPDevice\n\nfrom wagtail_2fa import forms, utils\nfrom wagtail_2fa.mixins import OtpRequiredMixin\n\n\nclass LoginView(SuccessURLAllowedHostsMixin, FormView):\n    template_name = \"wagtail_2fa/otp_form.html\"\n    form_class = forms.TokenForm\n    redirect_field_name = REDIRECT_FIELD_NAME\n\n    @method_decorator(sensitive_post_parameters())\n    @method_decorator(never_cache)\n    def dispatch(self, *args, **kwargs):\n        return super().dispatch(*args, **kwargs)\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"user\"] = self.request.user\n        return kwargs\n\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context[self.redirect_field_name] = self.get_redirect_url()\n        return context\n\n    def form_valid(self, form):\n        otp_login(self.request, self.request.user.otp_device)\n        return super().form_valid(form)\n\n    def get_redirect_url(self):\n        \"\"\"Return the user-originating redirect URL if it's safe.\"\"\"\n        redirect_to = self.request.POST.get(\n            self.redirect_field_name, self.request.GET.get(self.redirect_field_name, \"\")\n        )\n        url_is_safe = is_safe_url(\n            url=redirect_to,\n            allowed_hosts=self.get_success_url_allowed_hosts(),\n            require_https=self.request.is_secure(),\n        )\n        return redirect_to if url_is_safe else \"\"\n\n    def get_success_url(self):\n        url = self.get_redirect_url()\n        return url or resolve_url(settings.LOGIN_REDIRECT_URL)\n\n\nclass DeviceListView(OtpRequiredMixin, ListView):\n    template_name = \"wagtail_2fa/device_list.html\"\n\n    # require OTP if configured\n    if_configured = True\n\n    def get_queryset(self):\n        return TOTPDevice.objects.devices_for_user(self.kwargs['user_id'], confirmed=True)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['user_id'] = int(self.kwargs['user_id'])\n        return context\n\n    def dispatch(self, request, *args, **kwargs):\n        if (int(self.kwargs[\"user_id\"]) == request.user.pk or\n                request.user.has_perm(\"user.change_user\")):\n            if not self.user_allowed(request.user):\n                return self.handle_no_permission(request)\n\n            return super(OtpRequiredMixin, self).dispatch(request, *args, **kwargs)\n        raise PermissionDenied\n\n\nclass DeviceCreateView(OtpRequiredMixin, FormView):\n    form_class = forms.DeviceForm\n    template_name = \"wagtail_2fa/device_form.html\"\n\n    # require OTP if configured\n    if_configured = True\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"request\"] = self.request\n        kwargs[\"instance\"] = self.device\n        return kwargs\n\n    def form_valid(self, form):\n        form.save()\n        utils.delete_unconfirmed_devices(self.request.user)\n\n        if not self.request.user.is_verified():\n            otp_login(self.request, form.instance)\n        return super().form_valid(form)\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.user.id})\n\n    @cached_property\n    def device(self):\n        if self.request.method.lower() == \"get\":\n            return utils.new_unconfirmed_device(self.request.user)\n        else:\n            return utils.get_unconfirmed_device(self.request.user)\n\n\nclass DeviceUpdateView(OtpRequiredMixin, UpdateView):\n    form_class = forms.DeviceForm\n    template_name = \"wagtail_2fa/device_form.html\"\n\n    def get_queryset(self):\n        return TOTPDevice.objects.devices_for_user(self.request.user, confirmed=True)\n\n    def get_form_kwargs(self):\n        kwargs = super().get_form_kwargs()\n        kwargs[\"request\"] = self.request\n        return kwargs\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.user.id})\n\n\nclass DeviceDeleteView(OtpRequiredMixin, DeleteView):\n    template_name = \"wagtail_2fa/device_confirm_delete.html\"\n\n    def get_queryset(self):\n        device = TOTPDevice.objects.get(**self.kwargs)\n        return TOTPDevice.objects.devices_for_user(device.user, confirmed=True)\n\n    def get_success_url(self):\n        return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.POST.get('user_id')})\n\n    def dispatch(self, request, *args, **kwargs):\n        device = TOTPDevice.objects.get(**self.kwargs)\n\n        if device.user.pk == request.user.pk or request.user.has_perm(\"user.change_user\"):\n            if not self.user_allowed(request.user):\n                return self.handle_no_permission(request)\n\n            return super(OtpRequiredMixin, self).dispatch(request, *args, **kwargs)\n\n        raise PermissionDenied\n\n\nclass DeviceQRCodeView(OtpRequiredMixin, View):\n    # require OTP if configured\n    if_configured = True\n\n    def get(self, request):\n        device = utils.get_unconfirmed_device(self.request.user)\n        img = qrcode.make(device.config_url, image_factory=qrcode.image.svg.SvgImage)\n        response = HttpResponse(content_type=\"image/svg+xml\")\n        img.save(response)\n\n        return response\n", "import pytest\nfrom django.core.exceptions import PermissionDenied\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.test import override_settings\nfrom unittest.mock import patch\nfrom django.http.response import Http404\n\nfrom django.contrib.auth import get_user_model\nfrom django.urls import reverse\nfrom django_otp import DEVICE_ID_SESSION_KEY\nfrom django_otp.plugins.otp_totp.models import TOTPDevice\nfrom wagtail_2fa.views import DeviceListView, DeviceDeleteView, DeviceUpdateView\n\ndef test_device_list_view(admin_client, admin_user, django_assert_num_queries):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        admin_device = TOTPDevice.objects.create(name='Initial', user=admin_user, confirmed=True)\n\n        session = admin_client.session\n        session[DEVICE_ID_SESSION_KEY] = admin_device.persistent_id\n        session.save()\n\n\n        with django_assert_num_queries(10):\n            response = admin_client.get(reverse('wagtail_2fa_device_list',\n                                        kwargs={'user_id': admin_user.id}))\n            assert response.status_code == 200\n\n\ndef test_device_list_create(admin_client, monkeypatch, django_assert_num_queries):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        with django_assert_num_queries(9):\n            response = admin_client.get(reverse('wagtail_2fa_device_new'))\n            assert response.status_code == 200\n\n        with patch(\"django_otp.plugins.otp_totp.models.TOTPDevice.verify_token\") as fn:\n            fn.return_value = True\n            response = admin_client.post(\n                reverse('wagtail_2fa_device_new'), {\n                    'name': 'Test device',\n                    'otp_token': '123456',\n                    'password': 'password',\n                })\n\n        assert response.status_code == 302, response.context['form'].errors\n        assert TOTPDevice.objects.filter(confirmed=True).count() == 1\n\n\ndef test_device_list_update(admin_client, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=True).first()\n        instance = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        monkeypatch.setattr(TOTPDevice, 'verify_token', lambda self, value: True)\n\n        # Login with 2fa\n        endpoint = reverse('wagtail_2fa_auth')\n        response = admin_client.post(endpoint, {'otp_token': '123456', 'next': '/cms/'})\n        assert response.status_code == 302,  response.context['form'].errors\n\n        # Get update view\n        endpoint = reverse('wagtail_2fa_device_update', kwargs={'pk': instance.pk})\n        response = admin_client.get(endpoint)\n        assert response.status_code == 200\n\n        # Post new name\n        response = admin_client.post(endpoint, {\n            'name': 'Test device',\n            'password': 'password',\n        })\n        assert response.status_code == 302, response.context['form'].errors\n        assert TOTPDevice.objects.filter(name='Test device').count() == 1\n\n\ndef test_device_qr(admin_client, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=True).first()\n        TOTPDevice.objects.create(name='Initial', user=user, confirmed=False)\n\n        # Get update view\n        endpoint = reverse('wagtail_2fa_device_qrcode')\n        response = admin_client.get(endpoint)\n        assert response.status_code == 200\n\n\ndef test_delete_user_device_as_admin(client, admin_user, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        # verify admin\n        admin_device = TOTPDevice.objects.create(name='Initial', user=admin_user, confirmed=True)\n\n        client.login(username=\"admin\", password=\"password\")\n\n        session = client.session\n        session[DEVICE_ID_SESSION_KEY] = admin_device.persistent_id\n        session.save()\n\n        assert TOTPDevice.objects.all().count() == 2\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n        print(response)\n        assert TOTPDevice.objects.all().count() == 1\n\ndef test_delete_user_device_as_admin_unverified(admin_client, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=False).first()\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = admin_client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n\n        new_device_url = reverse('wagtail_2fa_device_new')\n        assert response.url == f\"{new_device_url}?next={endpoint}\"\n        assert TOTPDevice.objects.all().count() == 1\n\n\ndef test_delete_user_device_unauthorized(client, user, monkeypatch):\n    with override_settings(WAGTAIL_2FA_REQUIRED=True):\n        user = get_user_model().objects.filter(is_staff=False).first()\n        device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n        endpoint = reverse('wagtail_2fa_device_remove', kwargs={'pk': device.id})\n        response = client.post(endpoint, {\n            'user_id': user.id\n        })\n        assert response.status_code == 302\n        assert TOTPDevice.objects.all().count() == 1\n\n\nclass TestViewsChangeUserPermission:\n    \"\"\"Test suite which ensures that:\n        - users without the change_user permission cannot manage other users' 2FA devices\n        - users can manage their own devices\n    \"\"\"\n\n    def test_verified_user_has_no_change_user_perm(self, verified_user):\n        \"\"\"Sanity check.\"\"\"\n        assert not verified_user.has_perm(\"user.change_user\")\n\n    def test_device_list_view_for_own_user_returns_200(self, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            request = rf.get('foo')\n            request.user = verified_user\n\n            response = DeviceListView.as_view()(request, user_id=verified_user.id)\n            assert response.status_code == 200\n\n    def test_device_list_view_for_other_user_raises_error(self, user, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            request = rf.get('foo')\n            request.user = verified_user\n\n            with pytest.raises(PermissionDenied):\n                response = DeviceListView.as_view()(request, user_id=user.id)\n\n    def test_device_delete_view_for_own_user_returns_200(self, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n            request = rf.get('foo')\n            request.user = verified_user\n\n            response = DeviceDeleteView.as_view()(request, pk=device.id)\n            assert response.status_code == 200\n\n    def test_device_delete_view_for_other_user_raises_error(self, user, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n            request = rf.get('foo')\n            request.user = verified_user\n\n            with pytest.raises(PermissionDenied):\n                response = DeviceDeleteView.as_view()(request, pk=other_device.id)\n\n    def test_device_update_view_for_own_user_returns_200(self, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n            request = rf.get('foo')\n            request.user = verified_user\n\n            response = DeviceUpdateView.as_view()(request, pk=device.id)\n            assert response.status_code == 200\n\n    def test_device_update_view_for_other_user_raises_error(self, user, verified_user, rf):\n        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n            other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n\n            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n            request = rf.get('foo')\n            request.user = verified_user\n\n            with pytest.raises(Http404):\n                response = DeviceUpdateView.as_view()(request, pk=other_device.id)\n"], "filenames": ["src/wagtail_2fa/views.py", "tests/test_views.py"], "buggy_code_start_loc": [0, 0], "buggy_code_end_loc": [136, 131], "fixing_code_start_loc": [1, 1], "fixing_code_end_loc": [158, 203], "type": "CWE-863", "message": "In wagtail-2fa before 1.4.1, any user with access to the CMS can view and delete other users 2FA devices by going to the correct path. The user does not require special permissions in order to do so. By deleting the other users device they can disable the target users 2FA devices and potentially compromise the account if they figure out their password. The problem has been patched in version 1.4.1.", "other": {"cve": {"id": "CVE-2020-5240", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-13T22:15:11.217", "lastModified": "2020-03-18T19:25:13.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In wagtail-2fa before 1.4.1, any user with access to the CMS can view and delete other users 2FA devices by going to the correct path. The user does not require special permissions in order to do so. By deleting the other users device they can disable the target users 2FA devices and potentially compromise the account if they figure out their password. The problem has been patched in version 1.4.1."}, {"lang": "es", "value": "En wagtail-2fa versiones anteriores a 1.4.1, cualquier usuario con acceso al CMS puede visualizar y borrar los dispositivos 2FA de otros usuarios al ir hacia la ruta correcta. El usuario no requiere permisos especiales para hacerlo. Al eliminar el dispositivo de los dem\u00e1s usuarios, pueden deshabilitar los dispositivos 2FA de los usuarios de destino y comprometer potencialmente la cuenta si adivinan su contrase\u00f1a. El problema ha sido parcheado en la versi\u00f3n 1.4.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:labdigital:wagtail-2fa:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.1", "matchCriteriaId": "191715D1-9797-4239-B5EF-C9BFBBD31905"}]}]}], "references": [{"url": "https://github.com/labd/wagtail-2fa/commit/ac23550d33b7436e90e3beea904647907eba5b74", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/labd/wagtail-2fa/security/advisories/GHSA-9gjv-6qq6-v7qm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/labd/wagtail-2fa/commit/ac23550d33b7436e90e3beea904647907eba5b74"}}