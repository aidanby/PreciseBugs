{"buggy_code": ["/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License. */\r\n\r\npackage com.predic8.schema\r\n\r\nimport com.predic8.util.*\r\nimport com.predic8.xml.util.*\r\nimport javax.xml.stream.*\r\nimport com.predic8.soamodel.*\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\nimport javax.xml.namespace.QName as JQName\r\nimport static com.predic8.soamodel.Consts.SCHEMA_NS\r\n\r\nclass Include extends SchemaComponent {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(Include.class)\r\n  \r\n  String schemaLocation\r\n\r\n   protected parseAttributes(token, ctx){\r\n    schemaLocation = token.getAttributeValue( null , 'schemaLocation')\r\n\t\tif(schema.includedPaths.contains(HTTPUtil.getLocation(schema.baseDir,schemaLocation))) return\r\n\t\tschema.includedPaths << HTTPUtil.getLocation(schema.baseDir,schemaLocation)\r\n    parseIncludedSchema(ctx)\r\n  }\r\n\r\n  private parseIncludedSchema(ctx){\r\n    def resource = schema.resourceResolver.resolve(this, schema.baseDir)\r\n  \t\r\n    def incToken = XMLInputFactory.newInstance().createXMLStreamReader(resource)\r\n    while(incToken.hasNext()) {\r\n      if(incToken.startElement) {\r\n        if(incToken.name.getLocalPart() =='schema'){\r\n          break\r\n        }\r\n      }\r\n      if(incToken.hasNext()) incToken.next()\r\n    }\r\n    def origBaseDir = schema.baseDir\r\n    schema.baseDir = HTTPUtil.updateBaseDir(schemaLocation , schema.baseDir)\r\n    log.debug(\"includedSchema.baseDir ${schema.baseDir}\")\r\n    schema.parse(incToken, ctx.createNewSubContext([targetNamespace: schema.targetNamespace]))\r\n    schema.baseDir = origBaseDir\r\n  }\r\n\r\n  protected getElementName(){\r\n    new JQName(SCHEMA_NS, 'include')\r\n  }\r\n\r\n  String toString(){\r\n    \"schemaLocation=$schemaLocation\"\r\n  }\r\n  \r\n}\r\n", "/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License. */\r\n\r\npackage com.predic8.soamodel\r\n\r\nimport javax.xml.stream.*\r\n\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\n\r\nimport com.predic8.io.*\r\nimport com.predic8.schema.*\r\nimport com.predic8.util.*\r\nimport com.predic8.xml.util.*\r\n\r\nabstract class AbstractParser{\r\n\r\n\tprivate static final Logger log = LoggerFactory.getLogger(AbstractParser.class)\r\n\r\n\tdef resourceResolver = new ExternalResolver()\r\n\r\n\t\r\n\t\tprotected parse(AbstractParserContext ctx) {\r\n\t\tupdatectx(ctx)\r\n\t\tlog.debug(\"AbstractParser: ctx.newBaseDir: ${ctx.newBaseDir} , ctx.input: \" + ctx.input)\r\n\t\tlog.debug(\"parsing \" + ctx.input + \" input from baseDir: ${ctx.baseDir}\")\r\n\t\tparseLocal(getResourceToken(ctx), ctx)\r\n\t}\r\n\r\n\tprivate updatectx(ctx) {\r\n\t\tctx.baseDir = ctx.baseDir ?: ''\r\n\t\tctx.newBaseDir = HTTPUtil.updateBaseDir(ctx.input, ctx.baseDir)\r\n\t\tctx.resourceResolver = ctx.resourceResolver ?: resourceResolver\r\n\t\tctx.wsiResults = ctx.wsiResults ?: []\r\n\t\tctx.errors = ctx.errors ?: []\r\n\t}\r\n\r\n\tprivate getResourceToken(ctx) {\r\n\t\tgetToken(resourceResolver.resolve(ctx.input, ctx.baseDir))\r\n\t}\r\n\r\n\tprivate getToken(res) {\r\n\t\tXMLInputFactory.newInstance().createXMLStreamReader(res)\r\n\t}\r\n}\r\n"], "fixing_code": ["/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License. */\r\n\r\npackage com.predic8.schema\r\n\r\nimport com.predic8.util.*\r\nimport com.predic8.xml.util.*\r\nimport javax.xml.stream.*\r\nimport com.predic8.soamodel.*\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\nimport javax.xml.namespace.QName as JQName\r\nimport static com.predic8.soamodel.Consts.SCHEMA_NS\r\n\r\nclass Include extends SchemaComponent {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(Include.class)\r\n  \r\n  String schemaLocation\r\n\r\n   protected parseAttributes(token, ctx){\r\n    schemaLocation = token.getAttributeValue( null , 'schemaLocation')\r\n\t\tif(schema.includedPaths.contains(HTTPUtil.getLocation(schema.baseDir,schemaLocation))) return\r\n\t\tschema.includedPaths << HTTPUtil.getLocation(schema.baseDir,schemaLocation)\r\n    parseIncludedSchema(ctx)\r\n  }\r\n\r\n  private parseIncludedSchema(ctx){\r\n    def resource = schema.resourceResolver.resolve(this, schema.baseDir)\r\n\r\n    def inputFactory = XMLInputFactory.newInstance()\r\n    inputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false)\r\n    inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false)\r\n    def incToken = inputFactory.createXMLStreamReader(resource)\r\n    while(incToken.hasNext()) {\r\n      if(incToken.startElement) {\r\n        if(incToken.name.getLocalPart() =='schema'){\r\n          break\r\n        }\r\n      }\r\n      if(incToken.hasNext()) incToken.next()\r\n    }\r\n    def origBaseDir = schema.baseDir\r\n    schema.baseDir = HTTPUtil.updateBaseDir(schemaLocation , schema.baseDir)\r\n    log.debug(\"includedSchema.baseDir ${schema.baseDir}\")\r\n    schema.parse(incToken, ctx.createNewSubContext([targetNamespace: schema.targetNamespace]))\r\n    schema.baseDir = origBaseDir\r\n  }\r\n\r\n  protected getElementName(){\r\n    new JQName(SCHEMA_NS, 'include')\r\n  }\r\n\r\n  String toString(){\r\n    \"schemaLocation=$schemaLocation\"\r\n  }\r\n  \r\n}\r\n", "/* Copyright 2012 predic8 GmbH, www.predic8.com\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License. */\r\n\r\npackage com.predic8.soamodel\r\n\r\nimport javax.xml.stream.*\r\n\r\nimport org.slf4j.Logger\r\nimport org.slf4j.LoggerFactory\r\n\r\nimport com.predic8.io.*\r\nimport com.predic8.schema.*\r\nimport com.predic8.util.*\r\nimport com.predic8.xml.util.*\r\n\r\nabstract class AbstractParser{\r\n\r\n\tprivate static final Logger log = LoggerFactory.getLogger(AbstractParser.class)\r\n\r\n\tdef resourceResolver = new ExternalResolver()\r\n\r\n\t\r\n\t\tprotected parse(AbstractParserContext ctx) {\r\n\t\tupdatectx(ctx)\r\n\t\tlog.debug(\"AbstractParser: ctx.newBaseDir: ${ctx.newBaseDir} , ctx.input: \" + ctx.input)\r\n\t\tlog.debug(\"parsing \" + ctx.input + \" input from baseDir: ${ctx.baseDir}\")\r\n\t\tparseLocal(getResourceToken(ctx), ctx)\r\n\t}\r\n\r\n\tprivate updatectx(ctx) {\r\n\t\tctx.baseDir = ctx.baseDir ?: ''\r\n\t\tctx.newBaseDir = HTTPUtil.updateBaseDir(ctx.input, ctx.baseDir)\r\n\t\tctx.resourceResolver = ctx.resourceResolver ?: resourceResolver\r\n\t\tctx.wsiResults = ctx.wsiResults ?: []\r\n\t\tctx.errors = ctx.errors ?: []\r\n\t}\r\n\r\n\tprivate getResourceToken(ctx) {\r\n\t\tgetToken(resourceResolver.resolve(ctx.input, ctx.baseDir))\r\n\t}\r\n\r\n\tprivate getToken(res) {\r\n\t\tdef inputFactory = XMLInputFactory.newInstance()\r\n\t\tinputFactory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, false)\r\n\t\tinputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false)\r\n\t\tinputFactory.createXMLStreamReader(res)\r\n\t}\r\n}\r\n"], "filenames": ["core/src/main/groovy/com/predic8/schema/Include.groovy", "core/src/main/groovy/com/predic8/soamodel/AbstractParser.groovy"], "buggy_code_start_loc": [41, 51], "buggy_code_end_loc": [43, 52], "fixing_code_start_loc": [41, 51], "fixing_code_end_loc": [46, 55], "type": "CWE-611", "message": "An XML External Entity (XXE) vulnerability exists in soa-model before 1.6.4 in the WSDLParser function.", "other": {"cve": {"id": "CVE-2021-43090", "sourceIdentifier": "cve@mitre.org", "published": "2022-03-25T16:15:09.313", "lastModified": "2022-07-28T17:56:47.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An XML External Entity (XXE) vulnerability exists in soa-model before 1.6.4 in the WSDLParser function."}, {"lang": "es", "value": "Existe una vulnerabilidad de entidad externa XML (XXE) en soa-model antes de 1.6.4 en la funci\u00f3n WSDLParser"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:predic8:soa_model:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.4", "matchCriteriaId": "87137DB4-70D5-4E57-BE99-D6D836DAAE9C"}]}]}], "references": [{"url": "https://github.com/membrane/soa-model/commit/19de16902468e7963cc4dc6b544574bc1ea3f251", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/membrane/soa-model/commit/3aa295f155f621d5ea661cb9a0604013fc8fd8ff", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/membrane/soa-model/issues/281", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/membrane/soa-model/releases/tag/v1.6.4", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/membrane/soa-model/commit/19de16902468e7963cc4dc6b544574bc1ea3f251"}}