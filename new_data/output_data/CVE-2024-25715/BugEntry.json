{"buggy_code": ["/**\n *\n * Glewlwyd SSO Server\n *\n * Authentiation server\n * Users are authenticated via various backend available: database, ldap\n * Using various authentication methods available: password, OTP, send code, etc.\n *\n * Legacy (Glewlwyd 1.x) OAuth2 plugin\n *\n * Copyright 2016-2020 Nicolas Mora <mail@babelouest.org>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation;\n * version 3 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU General Public\n * License along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n#include <string.h>\n#include <ctype.h>\n#include <pthread.h>\n#include <jansson.h>\n#include <yder.h>\n#include <orcania.h>\n#include <ulfius.h>\n#include <rhonabwy.h>\n#include \"glewlwyd-common.h\"\n#include \"glewlwyd_resource.h\"\n\n#define OAUTH2_SALT_LENGTH 16\n\n#define GLEWLWYD_ACCESS_TOKEN_EXP_DEFAULT 3600\n#define GLEWLWYD_REFRESH_TOKEN_EXP_DEFAULT 1209600\n#define GLEWLWYD_CODE_EXP_DEFAULT 600\n#define GLEWLWYD_CODE_CHALLENGE_MAX_LENGTH 128\n#define GLEWLWYD_CODE_CHALLENGE_S256_PREFIX \"{SHA256}\"\n\n#define GLEWLWYD_CHECK_JWT_USERNAME \"myrddin\"\n#define GLEWLWYD_CHECK_JWT_SCOPE    \"caledonia\"\n\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE                       \"gpg_code\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE                 \"gpg_code_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN              \"gpg_refresh_token\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE        \"gpg_refresh_token_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN               \"gpg_access_token\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE         \"gpg_access_token_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION       \"gpg_device_authorization\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE \"gpg_device_authorization_scope\"\n\n#define GLWD_METRICS_OAUTH2_CODE                        \"glewlwyd_oauth2_code\"\n#define GLWD_METRICS_OAUTH2_DEVICE_CODE                 \"glewlwyd_oauth2_device_code\"\n#define GLWD_METRICS_OAUTH2_REFRESH_TOKEN               \"glewlwyd_oauth2_refresh_token\"\n#define GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN           \"glewlwyd_oauth2_access_token\"\n#define GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN         \"glewlwyd_oauth2_client_token\"\n#define GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT         \"glewlwyd_oauth2_unauthorized_client\"\n#define GLWD_METRICS_OAUTH2_INVALID_CODE                \"glewlwyd_oauth2_invalid_code\"\n#define GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE         \"glewlwyd_oauth2_invalid_device_code\"\n#define GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN       \"glewlwyd_oauth2_invalid_refresh_token\"\n#define GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN        \"glewlwyd_oauth2_invalid_acccess_token\"\n\n// Authorization types available\n#define GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE                  0\n#define GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT                            1\n#define GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS 2\n#define GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS                  3\n#define GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN                       4\n#define GLEWLWYD_AUTHORIZATION_TYPE_DELETE_TOKEN                        5\n#define GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION                6\n\n#define GLEWLWYD_DEVICE_AUTH_DEFAUT_EXPIRATION  600\n#define GLEWLWYD_DEVICE_AUTH_DEFAUT_INTERVAL    5\n#define GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH 32\n#define GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH   8\n\nstruct _oauth2_config {\n  struct config_plugin             * glewlwyd_config;\n  jwt_t                            * jwt_key;\n  const char                       * name;\n  json_t                           * j_params;\n  json_int_t                         access_token_duration;\n  json_int_t                         refresh_token_duration;\n  json_int_t                         code_duration;\n  unsigned short int                 refresh_token_rolling;\n  unsigned short int                 auth_type_enabled[5];\n  pthread_mutex_t                    insert_lock;\n  struct _glewlwyd_resource_config * glewlwyd_resource_config;\n  struct _glewlwyd_resource_config * introspect_revoke_resource_config;\n};\n\nstatic json_t * check_parameters (json_t * j_params) {\n  json_t * j_element = NULL, * j_return, * j_error = json_array();\n  size_t index = 0;\n  int ret = G_OK;\n\n  if (j_error != NULL) {\n    if (j_params == NULL) {\n      json_array_append_new(j_error, json_string(\"parameters invalid\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"jwt-type\") == NULL || !json_is_string(json_object_get(j_params, \"jwt-type\"))) {\n      json_array_append_new(j_error, json_string(\"jwt-type must be a string and have one of the following values: 'rsa', 'ecdsa', 'sha', 'rsa-pss', 'eddsa'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 != o_strcmp(\"rsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"ecdsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"sha\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"rsa-pss\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"eddsa\", json_string_value(json_object_get(j_params, \"jwt-type\")))) {\n      json_array_append_new(j_error, json_string(\"jwt-type must be a string and have one of the following values: 'rsa', 'ecdsa', 'sha', 'rsa-pss', 'eddsa'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"jwt-key-size\") == NULL || !json_is_string(json_object_get(j_params, \"jwt-key-size\"))) {\n      json_array_append_new(j_error, json_string(\"jwt-key-size must be a string and have one of the following values: '256', '384', '512'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 != o_strcmp(\"256\", json_string_value(json_object_get(j_params, \"jwt-key-size\"))) &&\n               0 != o_strcmp(\"384\", json_string_value(json_object_get(j_params, \"jwt-key-size\"))) &&\n               0 != o_strcmp(\"512\", json_string_value(json_object_get(j_params, \"jwt-key-size\")))) {\n      json_array_append_new(j_error, json_string(\"jwt-key-size must be a string and have one of the following values: '256', '384', '512'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if ((0 == o_strcmp(\"rsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) ||\n                0 == o_strcmp(\"ecdsa\", json_string_value(json_object_get(j_params, \"jwt-type\")))) &&\n               (json_object_get(j_params, \"key\") == NULL || json_object_get(j_params, \"cert\") == NULL ||\n               !json_is_string(json_object_get(j_params, \"key\")) || !json_is_string(json_object_get(j_params, \"cert\")) || json_string_null_or_empty(json_object_get(j_params, \"key\")) || json_string_null_or_empty(json_object_get(j_params, \"cert\")))) {\n      json_array_append_new(j_error, json_string(\"Properties 'cert' and 'key' are mandatory and must be strings\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n              (json_object_get(j_params, \"key\") == NULL || !json_is_string(json_object_get(j_params, \"key\")) || json_string_null_or_empty(json_object_get(j_params, \"key\")))) {\n      json_array_append_new(j_error, json_string(\"Property 'key' is mandatory and must be a string\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"access-token-duration\") == NULL || !json_is_integer(json_object_get(j_params, \"access-token-duration\")) || json_integer_value(json_object_get(j_params, \"access-token-duration\")) <= 0) {\n      json_array_append_new(j_error, json_string(\"Property 'access-token-duration' is mandatory and must be a non null positive integer\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"refresh-token-duration\") == NULL || !json_is_integer(json_object_get(j_params, \"refresh-token-duration\")) || json_integer_value(json_object_get(j_params, \"refresh-token-duration\")) <= 0) {\n      json_array_append_new(j_error, json_string(\"Property 'refresh-token-duration' is mandatory and must be a non null positive integer\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"refresh-token-rolling\") != NULL && !json_is_boolean(json_object_get(j_params, \"refresh-token-rolling\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'refresh-token-rolling' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-code-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-code-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-code-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-implicit-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-implicit-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-implicit-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-password-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-password-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-password-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-client-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-client-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-client-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-device-enabled\") != NULL && !json_is_boolean(json_object_get(j_params, \"auth-type-device-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-device-enabled' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-refresh-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-refresh-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-refresh-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"scope\") != NULL) {\n      if (!json_is_array(json_object_get(j_params, \"scope\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'scope' is optional and must be an array\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"scope\"), index, j_element) {\n          if (!json_is_object(j_element)) {\n            json_array_append_new(j_error, json_string(\"'scope' element must be a JSON object\"));\n            ret = G_ERROR_PARAM;\n          } else {\n            if (json_object_get(j_element, \"name\") == NULL || !json_is_string(json_object_get(j_element, \"name\")) || json_string_null_or_empty(json_object_get(j_element, \"name\"))) {\n              json_array_append_new(j_error, json_string(\"'scope' element must have a property 'name' of type string and non empty\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && !json_is_boolean(json_object_get(j_element, \"refresh-token-rolling\"))) {\n              json_array_append_new(j_error, json_string(\"'scope' element can have a property 'refresh-token-rolling' of type boolean\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"refresh-token-duration\") != NULL && (!json_is_integer(json_object_get(j_element, \"refresh-token-duration\")) || json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < 0)) {\n              json_array_append_new(j_error, json_string(\"'scope' element can have a property 'refresh-token-duration' of type integer and non null positive value\"));\n              ret = G_ERROR_PARAM;\n            }\n          }\n        }\n      }\n    } else if (json_object_get(j_params, \"additional-parameters\") != NULL) {\n      if (!json_is_array(json_object_get(j_params, \"additional-parameters\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'additional-parameters' is optional and must be an array\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"additional-parameters\"), index, j_element) {\n          if (!json_is_object(j_element)) {\n            json_array_append_new(j_error, json_string(\"'additional-parameters' element must be a JSON object\"));\n            ret = G_ERROR_PARAM;\n          } else {\n            if ((json_object_get(j_element, \"user-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"user-parameter\"))) &&\n                (json_object_get(j_element, \"client-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"client-parameter\")))) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'user-parameter' or 'client-parameter' of type string\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"token-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"token-parameter\")) || json_string_null_or_empty(json_object_get(j_element, \"token-parameter\"))) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'token-parameter' of type string and non empty, forbidden values are: 'username', 'salt', 'type', 'iat', 'expires_in', 'scope'\"));\n              ret = G_ERROR_PARAM;\n            } else if (0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"username\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"salt\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"type\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"iat\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"expires_in\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"scope\")) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'token-parameter' of type string and non empty, forbidden values are: 'username', 'salt', 'type', 'iat', 'expires_in', 'scope'\"));\n              ret = G_ERROR_PARAM;\n            }\n          }\n        }\n      }\n    }\n    if (json_object_get(j_params, \"pkce-allowed\") != NULL && !json_is_boolean(json_object_get(j_params, \"pkce-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'pkce-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"pkce-method-plain-allowed\") != NULL && json_object_get(j_params, \"pkce-allowed\") == json_true() && !json_is_boolean(json_object_get(j_params, \"pkce-method-plain-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'pkce-method-plain-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"introspection-revocation-allowed\") != NULL && !json_is_boolean(json_object_get(j_params, \"introspection-revocation-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"introspection-revocation-allowed\") == json_true()) {\n      if (json_object_get(j_params, \"introspection-revocation-auth-scope\") != NULL && !json_is_array(json_object_get(j_params, \"introspection-revocation-auth-scope\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-auth-scope' is optional and must be a JSON array of strings, maximum 128 characters\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"introspection-revocation-auth-scope\"), index, j_element) {\n          if (!json_is_string(j_element) || json_string_length(j_element) > 128) {\n            json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-auth-scope' is optional and must be a JSON array of strings, maximum 128 characters\"));\n            ret = G_ERROR_PARAM;\n          }\n        }\n      }\n      if (json_object_get(j_params, \"introspection-revocation-allow-target-client\") != NULL && !json_is_boolean(json_object_get(j_params, \"introspection-revocation-allow-target-client\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-allow-target-client' is optional and must be a boolean\"));\n        ret = G_ERROR_PARAM;\n      }\n    }\n    if (json_object_get(j_params, \"auth-type-device-enabled\") == json_true()) {\n      if (json_object_get(j_params, \"device-authorization-expiration\") != NULL && json_integer_value(json_object_get(j_params, \"device-authorization-expiration\")) <= 0) {\n        json_array_append_new(j_error, json_string(\"Property 'device-authorization-expiration' is optional and must be a non null positive integer\"));\n        ret = G_ERROR_PARAM;\n      }\n      if (json_object_get(j_params, \"device-authorization-interval\") != NULL && json_integer_value(json_object_get(j_params, \"device-authorization-interval\")) <= 0) {\n        json_array_append_new(j_error, json_string(\"Property 'device-authorization-interval' is optional and must be a non null positive integer\"));\n        ret = G_ERROR_PARAM;\n      }\n    }\n    if (json_array_size(j_error) && ret == G_ERROR_PARAM) {\n      j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", j_error);\n    } else {\n      j_return = json_pack(\"{si}\", \"result\", ret);\n    }\n    json_decref(j_error);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"check_parameters oauth2 - Error allocating resources for j_error\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n  }\n  return j_return;\n}\n\n/**\n *\n * Generates a query string based on url and post parameters of a request\n * Returned value must be o_free'd after use\n *\n */\nstatic char * generate_query_parameters(struct _u_map * map_url, struct _u_map * map_post_body) {\n  char * query = NULL, * param, * tmp, * value;\n  const char ** keys;\n  int i;\n\n  if (map_url == NULL && map_post_body == NULL) {\n    return NULL;\n  } else {\n    if (map_url != NULL) {\n      keys = u_map_enum_keys(map_url);\n      for (i=0; keys[i] != NULL; i++) {\n        value = ulfius_url_encode((char *)u_map_get(map_url, keys[i]));\n        param = msprintf(\"%s=%s\", keys[i], value);\n        o_free(value);\n        if (query == NULL) {\n          query = o_strdup(param);\n        } else {\n          tmp = msprintf(\"%s&%s\", query, param);\n          o_free(query);\n          query = tmp;\n        }\n        o_free(param);\n      }\n    }\n\n    if (map_post_body != NULL) {\n      keys = u_map_enum_keys(map_post_body);\n      for (i=0; keys[i] != NULL; i++) {\n        value = ulfius_url_encode((char *)u_map_get(map_post_body, keys[i]));\n        param = msprintf(\"%s=%s\", keys[i], value);\n        o_free(value);\n        if (query == NULL) {\n          query = o_strdup(param);\n        } else {\n          tmp = msprintf(\"%s&%s\", query, param);\n          o_free(query);\n          query = tmp;\n        }\n        o_free(param);\n      }\n    }\n  }\n\n  return query;\n}\n\nstatic int serialize_access_token(struct _oauth2_config * config, uint auth_type, json_int_t gpgr_id, const char * username, const char * client_id, const char * scope_list, time_t now, const char * issued_for, const char * user_agent, const char * access_token) {\n  json_t * j_query, * j_last_id;\n  int res, ret, i;\n  char * issued_at_clause, ** scope_array = NULL, * access_token_hash = NULL;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error pthread_mutex_lock\");\n    ret = G_ERROR;\n  } else {\n    if ((access_token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, access_token)) != NULL) {\n      if (issued_for != NULL && now > 0) {\n        if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n          issued_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n        } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n          issued_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n        } else { // HOEL_DB_TYPE_SQLITE\n          issued_at_clause = msprintf(\"%u\", (now));\n        }\n        j_query = json_pack(\"{sss{sssisososos{ss}ssssss}}\",\n                            \"table\",\n                            GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                            \"values\",\n                              \"gpga_plugin_name\",\n                              config->name,\n                              \"gpga_authorization_type\",\n                              auth_type,\n                              \"gpgr_id\",\n                              gpgr_id?json_integer(gpgr_id):json_null(),\n                              \"gpga_username\",\n                              username!=NULL?json_string(username):json_null(),\n                              \"gpga_client_id\",\n                              client_id!=NULL?json_string(client_id):json_null(),\n                              \"gpga_issued_at\",\n                                \"raw\",\n                                issued_at_clause,\n                              \"gpga_issued_for\",\n                              issued_for,\n                              \"gpga_user_agent\",\n                              user_agent!=NULL?user_agent:\"\",\n                              \"gpga_token_hash\",\n                              access_token_hash);\n        o_free(issued_at_clause);\n        res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n        json_decref(j_query);\n        if (res == H_OK) {\n          j_last_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n          if (j_last_id != NULL) {\n            if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n              j_query = json_pack(\"{sss[]}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE,\n                                  \"values\");\n              if (j_query != NULL) {\n                for (i=0; scope_array[i] != NULL; i++) {\n                  json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpga_id\", j_last_id, \"gpgas_scope\", scope_array[i]));\n                }\n                res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                json_decref(j_query);\n                if (res == H_OK) {\n                  ret = G_OK;\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error executing j_query (2)\");\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n                  ret = G_ERROR_DB;\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error json_pack\");\n                ret = G_ERROR;\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error split_string_remove_duplicates\");\n              ret = G_ERROR;\n            }\n            free_string_array(scope_array);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error h_last_insert_id\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            ret = G_ERROR_DB;\n          }\n          json_decref(j_last_id);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error executing j_query (1)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          ret = G_ERROR_DB;\n        }\n      } else {\n        ret = G_ERROR_PARAM;\n      }\n      o_free(access_token_hash);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error glewlwyd_callback_generate_hash\");\n      ret = G_ERROR;\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return ret;\n}\n\n/**\n * Generates a client_access_token from the specified parameters that are considered valid\n */\nstatic char * generate_client_access_token(struct _oauth2_config * config, const char * client_id, const char * scope_list, json_t * j_client, time_t now, const char * ip_source) {\n  jwt_t * jwt;\n  char * token = NULL, * property = NULL;\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n  json_t * j_element = NULL, * j_value;\n  size_t index = 0, index_p = 0;\n\n  jwt = r_jwt_copy(config->jwt_key);\n  if (jwt != NULL) {\n    // Build jwt payload\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    if (json_object_get(config->j_params, \"additional-parameters\") != NULL && j_client != NULL) {\n      json_array_foreach(json_object_get(config->j_params, \"additional-parameters\"), index, j_element) {\n        if (!json_string_null_or_empty(json_object_get(j_element, \"client-parameter\"))) {\n          if (json_is_string(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\")))) && !json_string_null_or_empty(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))))) {\n            r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), json_string_value(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\")))));\n          } else if (json_is_array(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))))) {\n            json_array_foreach(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))), index_p, j_value) {\n              property = mstrcatf(property, \",%s\", json_string_value(j_value));\n            }\n            if (!o_strnullempty(property)) {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), property+1); // Skip first ','\n            } else {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), \"\");\n            }\n            o_free(property);\n            property = NULL;\n          }\n        }\n      }\n    }\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"client_id\", client_id);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"client_token\");\n    r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    r_jwt_set_claim_int_value(jwt, \"expires_in\", config->access_token_duration);\n    r_jwt_set_claim_int_value(jwt, \"exp\", (((json_int_t)now)+config->access_token_duration));\n    r_jwt_set_claim_int_value(jwt, \"nbf\", now);\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_client_access_token - oauth2 - Error generating token\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' with scope list '%s', origin: %s\", config->name, client_id, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_client_access_token - oauth2 - Error cloning jwt\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic char * generate_access_token(struct _oauth2_config * config, const char * username, const char * client_id, json_t * j_user, const char * scope_list, time_t now, const char * ip_source) {\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n  jwt_t * jwt = NULL;\n  char * token = NULL, * property = NULL;\n  json_t * j_element = NULL, * j_value;\n  size_t index = 0, index_p = 0;\n\n  if ((jwt = r_jwt_copy(config->jwt_key)) != NULL) {\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    if (json_object_get(config->j_params, \"additional-parameters\") != NULL && j_user != NULL) {\n      json_array_foreach(json_object_get(config->j_params, \"additional-parameters\"), index, j_element) {\n        if (!json_string_null_or_empty(json_object_get(j_element, \"user-parameter\"))) {\n          if (json_is_string(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\")))) && !json_string_null_or_empty(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))))) {\n            r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), json_string_value(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\")))));\n          } else if (json_is_array(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))))) {\n            json_array_foreach(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))), index_p, j_value) {\n              property = mstrcatf(property, \",%s\", json_string_value(j_value));\n            }\n            if (!o_strnullempty(property)) {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), property+1); // Skip first ','\n            } else {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), \"\");\n            }\n            o_free(property);\n            property = NULL;\n          }\n        }\n      }\n    }\n    r_jwt_set_claim_str_value(jwt, \"username\", username);\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"access_token\");\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    r_jwt_set_claim_int_value(jwt, \"expires_in\", config->access_token_duration);\n    r_jwt_set_claim_int_value(jwt, \"exp\", (((json_int_t)now)+config->access_token_duration));\n    r_jwt_set_claim_int_value(jwt, \"nbf\", now);\n    if (scope_list != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    }\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_access_token - oauth2 - oauth2 - Error jwt_encode_str\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' granted by user '%s' with scope list '%s', origin: %s\", config->name, client_id, username, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_access_token - oauth2 - Error jwt_dup\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic json_t * serialize_refresh_token(struct _oauth2_config * config, uint auth_type, json_int_t gpgc_id, const char * username, const char * client_id, const char * scope_list, time_t now, json_int_t duration, uint rolling, const char * token, const char * issued_for, const char * user_agent) {\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n  json_t * j_query, * j_return, * j_last_id;\n  int res, i;\n  char * issued_at_clause, * expires_at_clause, * last_seen_clause, ** scope_array = NULL;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error pthread_mutex_lock\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  } else {\n    if (token_hash != NULL && username != NULL && issued_for != NULL && now > 0 && duration > 0) {\n      json_error_t error;\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        issued_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        issued_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n      } else { // HOEL_DB_TYPE_SQLITE\n        issued_at_clause = msprintf(\"%u\", (now));\n      }\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        last_seen_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        last_seen_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n      } else { // HOEL_DB_TYPE_SQLITE\n        last_seen_clause = msprintf(\"%u\", (now));\n      }\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)duration));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)duration ));\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"%u\", (now + (time_t)duration));\n      }\n      j_query = json_pack_ex(&error, 0, \"{sss{ss si so ss so s{ss} s{ss} s{ss} sI si ss ss ss}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"values\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_authorization_type\",\n                            auth_type,\n                            \"gpgc_id\",\n                            gpgc_id?json_integer(gpgc_id):json_null(),\n                            \"gpgr_username\",\n                            username,\n                            \"gpgr_client_id\",\n                            client_id!=NULL?json_string(client_id):json_null(),\n                            \"gpgr_issued_at\",\n                              \"raw\",\n                              issued_at_clause,\n                            \"gpgr_last_seen\",\n                              \"raw\",\n                              last_seen_clause,\n                            \"gpgr_expires_at\",\n                              \"raw\",\n                              expires_at_clause,\n                            \"gpgr_duration\",\n                            duration,\n                            \"gpgr_rolling_expiration\",\n                            rolling,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_issued_for\",\n                            issued_for,\n                            \"gpgr_user_agent\",\n                            user_agent!=NULL?user_agent:\"\");\n      o_free(issued_at_clause);\n      o_free(expires_at_clause);\n      o_free(last_seen_clause);\n      res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        j_last_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n        if (j_last_id != NULL) {\n          if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n            j_query = json_pack(\"{sss[]}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                                \"values\");\n            if (j_query != NULL) {\n              for (i=0; scope_array[i] != NULL; i++) {\n                json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgr_id\", j_last_id, \"gpgrs_scope\", scope_array[i]));\n              }\n              res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"gpgr_id\", j_last_id);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error executing j_query (2)\");\n                config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n                j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error json_pack\");\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error split_string_remove_duplicates\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n          free_string_array(scope_array);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error h_last_insert_id\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n        json_decref(j_last_id);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n    }\n    o_free(token_hash);\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return j_return;\n}\n\nstatic char * generate_refresh_token(struct _oauth2_config * config, const char * client_id, const char * username, const char * scope_list, time_t now, const char * ip_source) {\n  jwt_t * jwt;\n  char * token = NULL;\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n\n  if ((jwt = r_jwt_copy(config->jwt_key)) != NULL) {\n    // Build jwt payload\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"username\", username);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"refresh_token\");\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    if (scope_list != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    }\n    if (client_id != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"client_id\", client_id);\n    }\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_refresh_token - oauth2 - generating token\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' granted by user '%s' with scope list '%s', origin: %s\", config->name, client_id, username, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"oauth2 generate_refresh_token - Error cloning jwt\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic int is_authorization_type_enabled(struct _oauth2_config * config, uint authorization_type) {\n  return (authorization_type <= 4)?config->auth_type_enabled[authorization_type]:0;\n}\n\nstatic json_t * check_client_valid(struct _oauth2_config * config, const char * client_id, const char * client_header_login, const char * client_header_password, const char * redirect_uri, unsigned short authorization_type, int implicit_flow, const char * ip_source) {\n  json_t * j_client, * j_element = NULL, * j_return;\n  int uri_found, authorization_type_enabled;\n  size_t index = 0;\n\n  if (client_id == NULL) {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error client_id is NULL, origin: %s\", ip_source);\n    return json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  } else if (client_header_login != NULL && 0 != o_strcmp(client_header_login, client_id)) {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, client_id specified is different from client_id in the basic auth header, origin: %s\", ip_source);\n    return json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, client_id, client_header_password);\n  if (check_result_value(j_client, G_OK)) {\n    if (!implicit_flow && client_header_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, confidential client must be authentified with its password, origin: %s\", ip_source);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n    } else {\n      if (redirect_uri != NULL) {\n        uri_found = 0;\n        json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), index, j_element) {\n          if (0 == o_strcmp(json_string_value(j_element), redirect_uri)) {\n            uri_found = 1;\n          }\n        }\n      } else {\n        uri_found = 1;\n      }\n\n      authorization_type_enabled = 0;\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE && 0 == o_strcmp(json_string_value(j_element), \"code\")) {\n          authorization_type_enabled = 1;\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT && 0 == o_strcmp(json_string_value(j_element), \"token\")) {\n          authorization_type_enabled = 1;\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS && 0 == o_strcmp(json_string_value(j_element), \"password\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN && 0 == o_strcmp(json_string_value(j_element), \"refresh_token\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_DELETE_TOKEN && 0 == o_strcmp(json_string_value(j_element), \"delete_token\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION && 0 == o_strcmp(json_string_value(j_element), \"device_authorization\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        }\n      }\n      if (!uri_found) {\n        y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, redirect_uri '%s' is invalid for the client '%s', origin: %s\", redirect_uri, client_id, ip_source);\n      }\n      if (!authorization_type_enabled) {\n        y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, authorization type is not enabled for the client '%s', origin: %s\", client_id, ip_source);\n      }\n      if (uri_found && authorization_type_enabled) {\n        j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"client\", json_object_get(j_client, \"client\"));\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n      }\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, client '%s' is invalid, origin: %s\", client_id, ip_source);\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n  }\n  json_decref(j_client);\n  return j_return;\n}\n\nstatic char * generate_authorization_code(struct _oauth2_config * config, const char * username, const char * client_id, const char * scope_list, const char * redirect_uri, const char * issued_for, const char * user_agent, const char * code_challenge) {\n  char * code = NULL, * code_hash = NULL, * expiration_clause, ** scope_array = NULL;\n  json_t * j_query, * j_code_id;\n  int res, i;\n  time_t now;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error pthread_mutex_lock\");\n  } else {\n    code = o_malloc(33);\n    if (code != NULL) {\n      if (rand_string_nonce(code, 32) != NULL) {\n        code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code);\n        if (code_hash != NULL) {\n          time(&now);\n          if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n            expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->code_duration ));\n          } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n            expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->code_duration ));\n          } else { // HOEL_DB_TYPE_SQLITE\n            expiration_clause = msprintf(\"%u\", (now + (time_t)config->code_duration ));\n          }\n          j_query = json_pack(\"{sss{sssssssssssssss{ss}ss}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                              \"values\",\n                                \"gpgc_plugin_name\",\n                                config->name,\n                                \"gpgc_username\",\n                                username,\n                                \"gpgc_client_id\",\n                                client_id,\n                                \"gpgc_redirect_uri\",\n                                redirect_uri,\n                                \"gpgc_code_hash\",\n                                code_hash,\n                                \"gpgc_issued_for\",\n                                issued_for,\n                                \"gpgc_user_agent\",\n                                user_agent!=NULL?user_agent:\"\",\n                                \"gpgc_expires_at\",\n                                  \"raw\",\n                                  expiration_clause,\n                                \"gpgc_code_challenge\",\n                                code_challenge);\n          o_free(expiration_clause);\n          res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n          json_decref(j_query);\n          if (res != H_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error executing j_query (1)\");\n            o_free(code);\n            code = NULL;\n          } else {\n            if (scope_list != NULL) {\n              j_code_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n              if (j_code_id != NULL) {\n                j_query = json_pack(\"{sss[]}\",\n                                    \"table\",\n                                    GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE,\n                                    \"values\");\n                if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n                  for (i=0; scope_array[i] != NULL; i++) {\n                    json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgc_id\", j_code_id, \"gpgcs_scope\", scope_array[i]));\n                  }\n                  res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                  json_decref(j_query);\n                  if (res != H_OK) {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error executing j_query (2)\");\n                    o_free(code);\n                    code = NULL;\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error split_string_remove_duplicates\");\n                  o_free(code);\n                  code = NULL;\n                }\n                free_string_array(scope_array);\n                json_decref(j_code_id);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error h_last_insert_id\");\n                o_free(code);\n                code = NULL;\n              }\n            }\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error glewlwyd_callback_generate_hash\");\n          o_free(code);\n          code = NULL;\n        }\n        o_free(code_hash);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error rand_string\");\n        o_free(code);\n        code = NULL;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error allocating resources for code\");\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n\n  return code;\n}\n\nstatic char * get_login_url(struct _oauth2_config * config, const struct _u_request * request, const char * url, const char * client_id, const char * scope_list, struct _u_map * additional_parameters) {\n  char * plugin_url = config->glewlwyd_config->glewlwyd_callback_get_plugin_external_url(config->glewlwyd_config, json_string_value(json_object_get(config->j_params, \"name\"))),\n       * url_params = generate_query_parameters(request->map_url, NULL),\n       * url_callback = msprintf(\"%s/%s%s%s\", plugin_url, url, o_strlen(url_params)?\"?\":\"\", url_params),\n       * login_url = config->glewlwyd_config->glewlwyd_callback_get_login_url(config->glewlwyd_config, client_id, scope_list, url_callback, additional_parameters);\n  o_free(plugin_url);\n  o_free(url_params);\n  o_free(url_callback);\n  return login_url;\n}\n\nstatic json_t * get_scope_parameters(struct _oauth2_config * config, const char * scope) {\n  json_t * j_element = NULL, * j_return = NULL;\n  size_t index = 0;\n\n  json_array_foreach(json_object_get(config->j_params, \"scope\"), index, j_element) {\n    if (0 == o_strcmp(scope, json_string_value(json_object_get(j_element, \"name\")))) {\n      j_return = json_incref(j_element);\n    }\n  }\n  return j_return;\n}\n\nstatic int disable_authorization_code(struct _oauth2_config * config, json_int_t gpgc_id) {\n  json_t * j_query;\n  int res;\n\n  j_query = json_pack(\"{sss{si}s{sssI}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                      \"set\",\n                        \"gpgc_enabled\",\n                        0,\n                      \"where\",\n                        \"gpgc_plugin_name\",\n                        config->name,\n                        \"gpgc_id\",\n                        gpgc_id);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    return G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"disable_authorization_code - oauth2 - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    return G_ERROR_DB;\n  }\n}\n\n/**\n * Characters allowed according to RFC 7636\n * [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\"\n */\nstatic int is_pkce_char_valid(const char * code_challenge) {\n  size_t i;\n\n  if (o_strlen(code_challenge) >= 43 && o_strlen(code_challenge) <= 128) {\n    for (i=0; code_challenge[i] != '\\0'; i++) {\n      if (code_challenge[i] == 0x2d || code_challenge[i] == 0x2e || code_challenge[i] == 0x5f || code_challenge[i] == 0x7e || (code_challenge[i] >= 0x30 && code_challenge[i] <= 0x39) || (code_challenge[i] >= 0x41 && code_challenge[i] <= 0x5a) || (code_challenge[i] >= 0x61 && code_challenge[i] <= 0x7a)) {\n        continue;\n      } else {\n        return 0;\n      }\n    }\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nstatic int validate_code_challenge(json_t * j_result_code, const char * code_verifier) {\n  int ret;\n  unsigned char code_verifier_hash[32] = {0}, code_verifier_hash_b64[64] = {0};\n  size_t code_verifier_hash_len = 32, code_verifier_hash_b64_len = 0;\n  gnutls_datum_t key_data;\n\n  if (!json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\"))) {\n    if (is_pkce_char_valid(code_verifier)) {\n      if (0 == o_strncmp(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX, json_string_value(json_object_get(j_result_code, \"code_challenge\")), o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX))) {\n        key_data.data = (unsigned char *)code_verifier;\n        key_data.size = (unsigned int)o_strlen(code_verifier);\n        if (gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, code_verifier_hash, &code_verifier_hash_len) == GNUTLS_E_SUCCESS) {\n          if (o_base64url_encode(code_verifier_hash, code_verifier_hash_len, code_verifier_hash_b64, &code_verifier_hash_b64_len)) {\n            code_verifier_hash_b64[code_verifier_hash_b64_len] = '\\0';\n            if (0 == o_strcmp(json_string_value(json_object_get(j_result_code, \"code_challenge\"))+o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX), (const char *)code_verifier_hash_b64)) {\n              ret = G_OK;\n            } else {\n              ret = G_ERROR_UNAUTHORIZED;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"validate_code_challenge - Error o_base64url_encode\");\n            ret = G_ERROR;\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"validate_code_challenge - Error gnutls_fingerprint\");\n          ret = G_ERROR;\n        }\n      } else {\n        if (0 == o_strcmp(json_string_value(json_object_get(j_result_code, \"code_challenge\")), code_verifier)) {\n          ret = G_OK;\n        } else {\n          ret = G_ERROR_PARAM;\n        }\n      }\n    } else {\n      ret = G_ERROR_PARAM;\n    }\n  } else {\n    ret = G_OK;\n  }\n  return ret;\n}\n\nstatic int revoke_tokens_from_code(struct _oauth2_config * config, json_int_t gpgc_id, const char * ip_source) {\n  int ret, res;\n  char * query;\n  json_t * j_result, * j_result_r, * j_element = NULL;\n  size_t index = 0;\n\n  query = msprintf(\"SELECT gpga_client_id AS client_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN \" WHERE gpgr_id IN (SELECT gpgr_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \") AND gpga_enabled=1\", gpgc_id);\n  res = h_execute_query_json(config->glewlwyd_config->glewlwyd_config->conn, query, &j_result);\n  o_free(query);\n  if (res == H_OK) {\n    json_array_foreach(j_result, index, j_element) {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(j_element, \"client_id\")), ip_source);\n    }\n    json_decref(j_result);\n    query = msprintf(\"SELECT gpgr_client_id AS client_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \" AND gpgr_enabled=1\", gpgc_id);\n    res = h_execute_query_json(config->glewlwyd_config->glewlwyd_config->conn, query, &j_result_r);\n    o_free(query);\n    if (res == H_OK) {\n      if (json_array_size(j_result_r)) {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_array_get(j_result_r, 0), \"client_id\")), ip_source);\n      }\n      json_decref(j_result_r);\n      query = msprintf(\"UPDATE \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN \" SET gpga_enabled='0' WHERE gpgr_id IN (SELECT gpgr_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \")\", gpgc_id);\n      res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n      o_free(query);\n      if (res == H_OK) {\n        query = msprintf(\"UPDATE \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" SET gpgr_enabled='0' WHERE gpgc_id=%\" JSON_INTEGER_FORMAT, gpgc_id);\n        res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n        o_free(query);\n        if (res == H_OK) {\n          ret = G_OK;\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_tokens_from_code - oauth2 - Error executing query (4)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          ret = G_ERROR_DB;\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_tokens_from_code - oauth2 - Error executing query (3)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        ret = G_ERROR_DB;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"oidc revoke_tokens_from_code - Error executing query (2)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      ret = G_ERROR_DB;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"oidc revoke_tokens_from_code - Error executing query (1)\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * validate_authorization_code(struct _oauth2_config * config, const char * code, const char * client_id, const char * redirect_uri, const char * code_verifier, const char * ip_source) {\n  char * code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code), * expiration_clause = NULL, * scope_list = NULL, * tmp;\n  json_t * j_query, * j_result = NULL, * j_result_scope = NULL, * j_return, * j_element = NULL, * j_scope_param;\n  int res;\n  size_t index = 0;\n  json_int_t maximum_duration = config->refresh_token_duration, maximum_duration_override = -1;\n  int rolling_refresh = config->refresh_token_rolling, rolling_refresh_override = -1;\n\n  if (code_hash != NULL) {\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expiration_clause = o_strdup(\"> NOW()\");\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expiration_clause = o_strdup(\"> NOW()\");\n    } else { // HOEL_DB_TYPE_SQLITE\n      expiration_clause = o_strdup(\"> (strftime('%s','now'))\");\n    }\n    j_query = json_pack(\"{sss[ssss]s{sssssssss{ssss}}}\",\n                        \"table\",\n                        GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                        \"columns\",\n                          \"gpgc_username AS username\",\n                          \"gpgc_id\",\n                          \"gpgc_code_challenge AS code_challenge\",\n                          \"gpgc_enabled AS enabled\",\n                        \"where\",\n                          \"gpgc_plugin_name\",\n                          config->name,\n                          \"gpgc_client_id\",\n                          client_id,\n                          \"gpgc_redirect_uri\",\n                          redirect_uri,\n                          \"gpgc_code_hash\",\n                          code_hash,\n                          \"gpgc_expires_at\",\n                            \"operator\",\n                            \"raw\",\n                            \"value\",\n                            expiration_clause);\n    o_free(expiration_clause);\n    res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n    json_decref(j_query);\n    if (res == H_OK) {\n      if (json_array_size(j_result)) {\n        if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"enabled\"))) {\n          if ((res = validate_code_challenge(json_array_get(j_result, 0), code_verifier)) == G_OK) {\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE,\n                                \"columns\",\n                                  \"gpgcs_scope AS name\",\n                                \"where\",\n                                  \"gpgc_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpgc_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK && json_array_size(j_result_scope) > 0) {\n              if (!json_object_set_new(json_array_get(j_result, 0), \"scope\", json_array())) {\n                json_array_foreach(j_result_scope, index, j_element) {\n                  if (scope_list == NULL) {\n                    scope_list = o_strdup(json_string_value(json_object_get(j_element, \"name\")));\n                  } else {\n                    tmp = msprintf(\"%s %s\", scope_list, json_string_value(json_object_get(j_element, \"name\")));\n                    o_free(scope_list);\n                    scope_list = tmp;\n                  }\n                  if ((j_scope_param = get_scope_parameters(config, json_string_value(json_object_get(j_element, \"name\")))) != NULL) {\n                    json_object_update(j_element, j_scope_param);\n                    json_decref(j_scope_param);\n                  }\n                  if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && rolling_refresh_override != 0) {\n                    rolling_refresh_override = json_object_get(j_element, \"refresh-token-rolling\")==json_true();\n                  }\n                  if (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) && (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < maximum_duration_override || maximum_duration_override == -1)) {\n                    maximum_duration_override = json_integer_value(json_object_get(j_element, \"refresh-token-duration\"));\n                  }\n                  json_array_append(json_object_get(json_array_get(j_result, 0), \"scope\"), j_element);\n                }\n                if (rolling_refresh_override > -1) {\n                  rolling_refresh = rolling_refresh_override;\n                }\n                if (maximum_duration_override > -1) {\n                  maximum_duration = maximum_duration_override;\n                }\n                json_object_set_new(json_array_get(j_result, 0), \"scope_list\", json_string(scope_list));\n                json_object_set_new(json_array_get(j_result, 0), \"refresh-token-rolling\", rolling_refresh?json_true():json_false());\n                json_object_set_new(json_array_get(j_result, 0), \"refresh-token-duration\", json_integer(maximum_duration));\n                j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"code\", json_array_get(j_result, 0));\n                o_free(scope_list);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error allocating resources for json_array()\");\n                j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error executing j_query (2)\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n            json_decref(j_result_scope);\n          } else if (res == G_ERROR_UNAUTHORIZED) {\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n          } else if (res == G_ERROR_PARAM) {\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error validate_code_challenge\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n        } else {\n          if (json_true() == json_object_get(config->j_params, \"auth-type-code-revoke-replayed\")) {\n            if (revoke_tokens_from_code(config, json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgc_id\")), ip_source) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error revoke_tokens_from_code\");\n            }\n          }\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error executing j_query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n    }\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error glewlwyd_callback_generate_hash\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  o_free(code_hash);\n  return j_return;\n}\n\nstatic json_t * validate_session_client_scope(struct _oauth2_config * config, const struct _u_request * request, const char * client_id, const char * scope) {\n  json_t * j_session, * j_grant, * j_return, * j_scope_session, * j_scope_grant = NULL, * j_group = NULL, * j_scheme;\n  const char * scope_session, * group = NULL;\n  char * scope_filtered = NULL, * tmp;\n  size_t index = 0;\n  json_int_t scopes_authorized = 0, scopes_granted = 0, group_allowed;\n\n  j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, scope);\n  if (check_result_value(j_session, G_OK)) {\n    j_grant = config->glewlwyd_config->glewlwyd_callback_get_client_granted_scopes(config->glewlwyd_config, client_id, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), scope);\n    if (check_result_value(j_grant, G_OK)) {\n      if (json_array_size(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"))) {\n        // Count and store the number of granted scopes\n        json_array_foreach(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"), index, j_scope_grant) {\n          scopes_granted += json_object_get(j_scope_grant, \"granted\")==json_true();\n        }\n        json_object_set_new(json_object_get(j_session, \"session\"), \"scopes_granted\", json_integer(scopes_granted));\n\n        json_object_foreach(json_object_get(json_object_get(j_session, \"session\"), \"scope\"), scope_session, j_scope_session) {\n          // Evaluate if the scope is granted for the client\n          json_array_foreach(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"), index, j_scope_grant) {\n            if (0 == o_strcmp(scope_session, json_string_value(json_object_get(j_scope_grant, \"name\")))) {\n              json_object_set(j_scope_session, \"granted\", json_object_get(j_scope_grant, \"granted\"));\n            }\n          }\n\n          // Evaluate if the scope is authorized\n          if (json_object_get(j_scope_session, \"available\") == json_true()) {\n            if (json_object_get(j_scope_session, \"password_required\") == json_true() && json_object_get(j_scope_session, \"password_authenticated\") == json_false()) {\n              json_object_set_new(j_scope_session, \"authorized\", json_false());\n            } else if ((json_object_get(j_scope_session, \"password_required\") == json_true() && json_object_get(j_scope_session, \"password_authenticated\") == json_true()) || json_object_get(j_scope_session, \"password_required\") == json_false()) {\n              json_object_foreach(json_object_get(j_scope_session, \"schemes\"), group, j_group) {\n                group_allowed = 0;\n                json_array_foreach(j_group, index, j_scheme) {\n                  if (json_object_get(j_scheme, \"scheme_authenticated\") == json_true()) {\n                    group_allowed++;\n                  }\n                }\n                if (group_allowed < json_integer_value(json_object_get(json_object_get(j_scope_session, \"scheme_required\"), group))) {\n                  json_object_set_new(j_scope_session, \"authorized\", json_false());\n                }\n              }\n              if (json_object_get(j_scope_session, \"authorized\") == NULL) {\n                json_object_set_new(j_scope_session, \"authorized\", json_true());\n                scopes_authorized++;\n                if (json_object_get(j_scope_session, \"granted\") == json_true()) {\n                  if (scope_filtered == NULL) {\n                    scope_filtered = o_strdup(scope_session);\n                  } else {\n                    tmp = msprintf(\"%s %s\", scope_filtered, scope_session);\n                    o_free(scope_filtered);\n                    scope_filtered = tmp;\n                  }\n                }\n              } else if (json_object_get(j_scope_session, \"granted\") == json_true()) {\n                json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_true());\n              }\n            } else {\n              json_object_set_new(j_scope_session, \"authorized\", json_false());\n            }\n          } else {\n            json_object_set_new(j_scope_session, \"authorized\", json_false());\n          }\n        }\n        json_object_set_new(json_object_get(j_session, \"session\"), \"scopes_authorized\", json_integer(scopes_authorized));\n        if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == NULL) {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_false());\n        }\n        if (scope_filtered != NULL) {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"scope_filtered\", json_string(scope_filtered));\n          o_free(scope_filtered);\n        } else {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"scope_filtered\", json_string(\"\"));\n          json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_true());\n        }\n        if (scopes_authorized && scopes_granted) {\n          j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"session\", json_object_get(j_session, \"session\"));\n        } else {\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_session_client_scope - oauth2 - Error glewlwyd_callback_get_client_granted_scopes\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    json_decref(j_grant);\n  } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n  } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_session_client_scope - oauth2 - Error glewlwyd_callback_check_session_valid\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  json_decref(j_session);\n  return j_return;\n}\n\nstatic json_t * validate_refresh_token(struct _oauth2_config * config, const char * refresh_token) {\n  json_t * j_return, * j_query, * j_result, * j_result_scope, * j_element = NULL;\n  char * token_hash, * expires_at_clause;\n  int res;\n  size_t index = 0;\n  time_t now;\n\n  if (refresh_token != NULL) {\n    token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, refresh_token);\n    if (token_hash != NULL) {\n      time(&now);\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"> %u\", (now));\n      }\n      j_query = json_pack(\"{sss[sssssssss]s{sssssis{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"columns\",\n                            \"gpgr_id\",\n                            \"gpgc_id\",\n                            \"gpgr_username AS username\",\n                            \"gpgr_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS issued_at\", \"gpgr_issued_at AS issued_at\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS issued_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS expired_at\", \"gpgr_expires_at AS expired_at\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS expired_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_last_seen) AS last_seen\", \"gpgr_last_seen AS last_seen\", \"EXTRACT(EPOCH FROM gpgr_last_seen)::integer AS last_seen\"),\n                            \"gpgr_duration AS duration\",\n                            \"gpgr_rolling_expiration\",\n                          \"where\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_enabled\",\n                            1,\n                            \"gpgr_expires_at\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              expires_at_clause);\n      o_free(expires_at_clause);\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result) > 0) {\n          json_object_set(json_array_get(j_result, 0), \"rolling_expiration\", json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgr_rolling_expiration\"))?json_true():json_false());\n          json_object_del(json_array_get(j_result, 0), \"gpgr_rolling_expiration\");\n          j_query = json_pack(\"{sss[s]s{sO}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                              \"columns\",\n                                \"gpgrs_scope AS scope\",\n                              \"where\",\n                                \"gpgr_id\",\n                                json_object_get(json_array_get(j_result, 0), \"gpgr_id\"));\n          res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n          json_decref(j_query);\n          if (res == H_OK) {\n            if (!json_object_set_new(json_array_get(j_result, 0), \"scope\", json_array())) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                json_array_append(json_object_get(json_array_get(j_result, 0), \"scope\"), json_object_get(j_element, \"scope\"));\n              }\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error json_object_set_new\");\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n            }\n            json_decref(j_result_scope);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query (2)\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n          }\n        } else {\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error glewlwyd_callback_generate_hash\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    o_free(token_hash);\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  return j_return;\n}\n\nstatic json_t * refresh_token_list_get(struct _oauth2_config * config, const char * username, const char * pattern, size_t offset, size_t limit, const char * sort) {\n  json_t * j_query, * j_result, * j_return, * j_element = NULL;\n  int res;\n  size_t index = 0, token_hash_dec_len = 0;\n  char * pattern_escaped, * pattern_clause, * name_escaped;\n  unsigned char token_hash_dec[128];\n\n  j_query = json_pack(\"{sss[ssssssssss]s{ssss}sisiss}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"columns\",\n                        \"gpgr_token_hash\",\n                        \"gpgr_authorization_type\",\n                        \"gpgr_client_id AS client_id\",\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS issued_at\", \"gpgr_issued_at AS issued_at\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS issued_at\"),\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS expires_at\", \"gpgr_expires_at AS expires_at\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS expires_at\"),\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_last_seen) AS last_seen\", \"gpgr_last_seen AS last_seen\", \"EXTRACT(EPOCH FROM gpgr_last_seen)::integer AS last_seen\"),\n                        \"gpgr_rolling_expiration\",\n                        \"gpgr_issued_for AS issued_for\",\n                        \"gpgr_user_agent AS user_agent\",\n                        \"gpgr_enabled\",\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_username\",\n                        username,\n                      \"offset\",\n                      offset,\n                      \"limit\",\n                      limit,\n                      \"order_by\",\n                      \"gpgr_last_seen DESC\");\n  if (sort != NULL) {\n    json_object_set_new(j_query, \"order_by\", json_string(sort));\n  }\n  if (pattern != NULL) {\n    pattern_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, pattern);\n    name_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, config->name);\n    pattern_clause = msprintf(\"IN (SELECT gpgr_id FROM \"GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN\" WHERE (gpgr_user_agent LIKE '%%'||%s||'%%' OR gpgr_issued_for LIKE '%%'||%s||'%%') AND gpgr_plugin_name=%s)\", pattern_escaped, pattern_escaped, name_escaped);\n    json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_id\", json_pack(\"{ssss}\", \"operator\", \"raw\", \"value\", pattern_clause));\n    o_free(pattern_clause);\n    o_free(pattern_escaped);\n    o_free(name_escaped);\n  }\n  res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    json_array_foreach(j_result, index, j_element) {\n      json_object_set(j_element, \"rolling_expiration\", (json_integer_value(json_object_get(j_element, \"gpgr_rolling_expiration\"))?json_true():json_false()));\n      json_object_set(j_element, \"enabled\", (json_integer_value(json_object_get(j_element, \"gpgr_enabled\"))?json_true():json_false()));\n      json_object_del(j_element, \"gpgr_rolling_expiration\");\n      json_object_del(j_element, \"gpgr_enabled\");\n      if (o_base64_2_base64url((unsigned char *)json_string_value(json_object_get(j_element, \"gpgr_token_hash\")), json_string_length(json_object_get(j_element, \"gpgr_token_hash\")), token_hash_dec, &token_hash_dec_len)) {\n        json_object_set_new(j_element, \"token_hash\", json_stringn((char *)token_hash_dec, token_hash_dec_len));\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"refresh_token_list_get - Error o_base64_2_base64url\");\n        json_object_set_new(j_element, \"token_hash\", json_string(\"error\"));\n      }\n      json_object_del(j_element, \"gpgr_token_hash\");\n      switch(json_integer_value(json_object_get(j_element, \"gpgr_authorization_type\"))) {\n        case GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"code\"));\n          break;\n        case GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"password\"));\n          break;\n        default:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"unknown\"));\n          break;\n      }\n      json_object_del(j_element, \"gpgr_authorization_type\");\n    }\n    j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"refresh_token\", j_result);\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"refresh_token_list_get - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n  }\n  return j_return;\n}\n\nstatic int refresh_token_disable(struct _oauth2_config * config, const char * username, const char * token_hash, const char * ip_source) {\n  json_t * j_query, * j_result, * j_element = NULL;\n  int res, ret = G_OK;\n  unsigned char token_hash_dec[128];\n  size_t token_hash_dec_len = 0, index = 0;\n\n  j_query = json_pack(\"{sss[ss]s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"columns\",\n                        \"gpgr_id\",\n                        \"gpgr_enabled\",\n                      \"where\",\n                        \"gpgr_plugin_name\", config->name,\n                        \"gpgr_username\", username);\n  if (token_hash != NULL) {\n    if (o_base64url_2_base64((unsigned char *)token_hash, o_strlen(token_hash), token_hash_dec, &token_hash_dec_len)) {\n      json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_token_hash\", json_stringn((const char *)token_hash_dec, token_hash_dec_len));\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error o_base64url_2_base64\");\n      ret = G_ERROR_PARAM;\n    }\n  }\n  res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n  json_decref(j_query);\n  if (res == H_OK && ret == G_OK) {\n    if (json_array_size(j_result)) {\n      json_array_foreach(j_result, index, j_element) {\n        if (json_integer_value(json_object_get(j_element, \"gpgr_enabled\"))) {\n          j_query = json_pack(\"{sss{si}s{sssO}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                              \"set\",\n                                \"gpgr_enabled\", 0,\n                              \"where\",\n                                \"gpgr_plugin_name\", config->name,\n                                \"gpgr_id\", json_object_get(j_element, \"gpgr_id\"));\n          res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n          json_decref(j_query);\n          if (res == H_OK) {\n            if (token_hash != NULL) {\n              y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - token '[...%s]' disabled, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query (2)\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            ret = G_ERROR_DB;\n          }\n        } else if (token_hash != NULL) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - Error token '[...%s]' already disabled, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n          ret = G_ERROR_PARAM;\n        }\n      }\n    } else if (token_hash != NULL) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - Error token '[...%s]' not found, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n      ret = G_ERROR_NOT_FOUND;\n    }\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query (1)\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic int update_refresh_token(struct _oauth2_config * config, json_int_t gpgr_id, json_int_t refresh_token_duration, int disable, time_t now) {\n  json_t * j_query;\n  int res, ret;\n  char * expires_at_clause, * last_seen_clause;\n\n  if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n    last_seen_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n  } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n    last_seen_clause = msprintf(\"TO_TIMESTAMP(%u)\", now);\n  } else { // HOEL_DB_TYPE_SQLITE\n    last_seen_clause = msprintf(\"%u\", (now));\n  }\n  j_query = json_pack(\"{sss{s{ss}}s{sssI}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"set\",\n                        \"gpgr_last_seen\",\n                          \"raw\",\n                          last_seen_clause,\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_id\",\n                        gpgr_id);\n  o_free(last_seen_clause);\n  if (refresh_token_duration) {\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)refresh_token_duration));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)refresh_token_duration));\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"%u\", (now + (time_t)refresh_token_duration));\n    }\n    json_object_set_new(json_object_get(j_query, \"set\"), \"gpgr_expires_at\", json_pack(\"{ss}\", \"raw\", expires_at_clause));\n    o_free(expires_at_clause);\n  }\n  if (disable) {\n    json_object_set_new(json_object_get(j_query, \"set\"), \"gpgr_enabled\", json_integer(0));\n  }\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * get_refresh_token_duration_rolling(struct _oauth2_config * config, const char * scope_list) {\n  json_t * j_return, * j_element = NULL;\n  char ** scope_array = NULL;\n  size_t i, index = 0;\n  json_int_t maximum_duration = config->refresh_token_duration, maximum_duration_override = -1;\n  int rolling_refresh = config->refresh_token_rolling, rolling_refresh_override = -1;\n\n  if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n    json_array_foreach(json_object_get(config->j_params, \"scope\"), index, j_element) {\n      for (i=0; scope_array[i]!=NULL; i++) {\n        if (0 == o_strcmp(json_string_value(json_object_get(j_element, \"name\")), scope_array[i])) {\n          if (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) && (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < maximum_duration_override || maximum_duration_override == -1)) {\n            maximum_duration_override = json_integer_value(json_object_get(j_element, \"refresh-token-duration\"));\n          }\n          if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && rolling_refresh_override != 0) {\n            rolling_refresh_override = json_object_get(j_element, \"refresh-token-rolling\")==json_true();\n          }\n        }\n      }\n    }\n    free_string_array(scope_array);\n    if (maximum_duration_override != -1) {\n      maximum_duration = maximum_duration_override;\n    }\n    if (rolling_refresh_override != -1) {\n      rolling_refresh = rolling_refresh_override;\n    }\n    j_return = json_pack(\"{sis{sosI}}\", \"result\", G_OK, \"refresh-token\", \"refresh-token-rolling\", rolling_refresh?json_true():json_false(), \"refresh-token-duration\", maximum_duration);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"get_refresh_token_duration_rolling - Error split_string_remove_duplicates\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  return j_return;\n}\n\nstatic int is_code_challenge_valid(struct _oauth2_config * config, const char * code_challenge, const char * code_challenge_method, char * code_challenge_stored) {\n  int ret;\n  if (!o_strnullempty(code_challenge)) {\n    if (json_object_get(config->j_params, \"pkce-allowed\") == json_true()) {\n      if (o_strnullempty(code_challenge_method) || 0 == o_strcmp(\"plain\", code_challenge_method)) {\n        if (json_object_get(config->j_params, \"pkce-method-plain-allowed\") == json_true()) {\n          if (is_pkce_char_valid(code_challenge)) {\n            o_strcpy(code_challenge_stored, code_challenge);\n            ret = G_OK;\n          } else {\n            ret = G_ERROR_PARAM;\n          }\n        } else {\n          ret = G_ERROR_PARAM;\n        }\n      } else if (0 == o_strcmp(\"S256\", code_challenge_method)) {\n        if (o_strlen(code_challenge) == 43) {\n          o_strcpy(code_challenge_stored, GLEWLWYD_CODE_CHALLENGE_S256_PREFIX);\n          o_strcpy(code_challenge_stored + o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX), code_challenge);\n          ret = G_OK;\n        } else {\n          ret = G_ERROR_PARAM;\n        }\n      } else {\n        ret = G_ERROR_PARAM;\n      }\n    } else {\n      ret = G_ERROR_PARAM;\n    }\n  } else {\n    // No pkce\n    ret = G_OK;\n  }\n  return ret;\n}\n\nstatic int revoke_refresh_token(struct _oauth2_config * config, const char * token) {\n  json_t * j_query;\n  int res, ret;\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n\n  j_query = json_pack(\"{sss{si}s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"set\",\n                        \"gpgr_enabled\",\n                        0,\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_token_hash\",\n                        token_hash);\n  o_free(token_hash);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_refresh_token - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic int revoke_access_token(struct _oauth2_config * config, const char * token) {\n  json_t * j_query;\n  int res, ret;\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n\n  j_query = json_pack(\"{sss{si}s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                      \"set\",\n                        \"gpga_enabled\",\n                        0,\n                      \"where\",\n                        \"gpga_plugin_name\",\n                        config->name,\n                        \"gpga_token_hash\",\n                        token_hash);\n  o_free(token_hash);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_access_token - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * get_token_metadata(struct _oauth2_config * config, const char * token, const char * token_type_hint, const char * client_id) {\n  json_t * j_query, * j_result, * j_result_scope, * j_return = NULL, * j_element = NULL;\n  int res, found_refresh = 0, found_access = 0;\n  size_t index = 0;\n  char * token_hash = NULL, * scope_list = NULL, * expires_at_clause;\n  time_t now;\n\n  if (!o_strnullempty(token)) {\n    token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n    time(&now);\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"> %u\", (now));\n    }\n    if (token_type_hint == NULL || 0 == o_strcmp(\"refresh_token\", token_type_hint)) {\n      j_query = json_pack(\"{sss[sssssss]s{sssss{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"columns\",\n                            \"gpgr_id\",\n                            \"gpgr_username AS username\",\n                            \"gpgr_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS iat\", \"gpgr_issued_at AS iat\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS iat\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS nbf\", \"gpgr_issued_at AS nbf\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS nbf\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS exp\", \"gpgr_expires_at AS exp\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS exp\"),\n                            \"gpgr_enabled\",\n                          \"where\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_expires_at\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              expires_at_clause);\n      if (client_id != NULL) {\n        json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_client_id\", json_string(client_id));\n      }\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          found_refresh = 1;\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgr_enabled\"))) {\n            json_object_set_new(json_array_get(j_result, 0), \"active\", json_true());\n            json_object_set_new(json_array_get(j_result, 0), \"token_type\", json_string(\"refresh_token\"));\n            json_object_del(json_array_get(j_result, 0), \"gpgr_enabled\");\n            if (json_object_get(json_array_get(j_result, 0), \"client_id\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"client_id\");\n            }\n            if (json_object_get(json_array_get(j_result, 0), \"username\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"username\");\n            }\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                                \"columns\",\n                                  \"gpgrs_scope AS scope\",\n                                \"where\",\n                                  \"gpgr_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpgr_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                if (scope_list == NULL) {\n                  scope_list = o_strdup(json_string_value(json_object_get(j_element, \"scope\")));\n                } else {\n                  scope_list = mstrcatf(scope_list, \" %s\", json_string_value(json_object_get(j_element, \"scope\")));\n                }\n              }\n              json_object_set_new(json_array_get(j_result, 0), \"scope\", json_string(scope_list));\n              o_free(scope_list);\n              json_decref(j_result_scope);\n              json_object_del(json_array_get(j_result, 0), \"gpgr_id\");\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query scope refresh_token\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n          }\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_token_metadata - Error executing j_query refresh_token\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    }\n    if ((token_type_hint == NULL && !found_refresh) || 0 == o_strcmp(\"access_token\", token_type_hint)) {\n      j_query = json_pack(\"{sss[ssssss]s{ssss}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                          \"columns\",\n                            \"gpga_id\",\n                            \"gpga_username AS username\",\n                            \"gpga_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpga_issued_at) AS iat\", \"gpga_issued_at AS iat\", \"EXTRACT(EPOCH FROM gpga_issued_at)::integer AS iat\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpga_issued_at) AS nbf\", \"gpga_issued_at AS nbf\", \"EXTRACT(EPOCH FROM gpga_issued_at)::integer AS nbf\"),\n                            \"gpga_enabled\",\n                          \"where\",\n                            \"gpga_plugin_name\",\n                            config->name,\n                            \"gpga_token_hash\",\n                            token_hash);\n      if (client_id != NULL) {\n        json_object_set_new(json_object_get(j_query, \"where\"), \"gpga_client_id\", json_string(client_id));\n      }\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          found_access = 1;\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpga_enabled\")) && json_integer_value(json_object_get(json_array_get(j_result, 0), \"iat\")) + json_integer_value(json_object_get(config->j_params, \"access-token-duration\")) > (json_int_t)now) {\n            json_object_set_new(json_array_get(j_result, 0), \"active\", json_true());\n            json_object_set_new(json_array_get(j_result, 0), \"token_type\", json_string(\"access_token\"));\n            json_object_set_new(json_array_get(j_result, 0), \"exp\", json_integer(json_integer_value(json_object_get(json_array_get(j_result, 0), \"iat\")) + json_integer_value(json_object_get(config->j_params, \"access-token-duration\"))));\n            json_object_del(json_array_get(j_result, 0), \"gpga_enabled\");\n            if (json_object_get(json_array_get(j_result, 0), \"client_id\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"client_id\");\n            }\n            if (json_object_get(json_array_get(j_result, 0), \"username\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"username\");\n            }\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE,\n                                \"columns\",\n                                  \"gpgas_scope AS scope\",\n                                \"where\",\n                                  \"gpga_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpga_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                if (scope_list == NULL) {\n                  scope_list = o_strdup(json_string_value(json_object_get(j_element, \"scope\")));\n                } else {\n                  scope_list = mstrcatf(scope_list, \" %s\", json_string_value(json_object_get(j_element, \"scope\")));\n                }\n              }\n              json_object_set_new(json_array_get(j_result, 0), \"scope\", json_string(scope_list));\n              o_free(scope_list);\n              json_decref(j_result_scope);\n              json_object_del(json_array_get(j_result, 0), \"gpga_id\");\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"oauth2 validate_refresh_token - Error executing j_query scope access_token\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n          }\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_token_metadata - Error executing j_query access_token\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    }\n    if (!found_refresh && !found_access && j_return == NULL) {\n      j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n    }\n    o_free(token_hash);\n    o_free(expires_at_clause);\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  return j_return;\n}\n\nstatic const char * get_client_id_for_introspection(struct _oauth2_config * config, const struct _u_request * request) {\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && config->introspect_revoke_resource_config->oauth_scope != NULL) {\n    return NULL;\n  } else if (json_object_get(config->j_params, \"introspection-revocation-allow-target-client\") == json_true()) {\n    return request->auth_basic_user;\n  } else {\n    return NULL;\n  }\n}\n\nstatic json_t * generate_device_authorization(struct _oauth2_config * config, const char * client_id, const char * scope_list, const char * ip_source) {\n  char device_code[GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH+1] = {0}, user_code[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+2] = {0}, * device_code_hash = NULL, * user_code_hash = NULL;\n  json_t * j_return, * j_query, * j_device_auth_id;\n  int res;\n  time_t now, expiration = (time_t)json_integer_value(json_object_get(config->j_params, \"device-authorization-expiration\"));\n  char * expires_at_clause = NULL, * last_check_clause = NULL, ** scope_array = NULL;\n  size_t i;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization oauth2 - Error pthread_mutex_lock\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  } else {\n    if (rand_string(device_code, 32) != NULL && rand_string_from_charset(user_code, GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1, \"ABCDEFGHJKLMNOPQRSTUVWXYZ0123456789\") != NULL) {\n      user_code[4] = '-';\n      device_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, device_code);\n      user_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, user_code);\n      time(&now);\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + expiration));\n        last_check_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now - (2*expiration)));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + expiration));\n        last_check_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now - (2*expiration)));\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"%u\", (now + expiration));\n        last_check_clause = msprintf(\"%u\", (now - (2*expiration)));\n      }\n      j_query = json_pack(\"{sss{sssss{ss}sssssss{ss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                          \"values\",\n                            \"gpgda_plugin_name\",\n                            config->name,\n                            \"gpgda_client_id\",\n                            client_id,\n                            \"gpgda_expires_at\",\n                              \"raw\",\n                              expires_at_clause,\n                            \"gpgda_issued_for\",\n                            ip_source,\n                            \"gpgda_device_code_hash\",\n                            device_code_hash,\n                            \"gpgda_user_code_hash\",\n                            user_code_hash,\n                            \"gpgda_last_check\",\n                              \"raw\",\n                              last_check_clause);\n      o_free(expires_at_clause);\n      o_free(last_check_clause);\n      o_free(device_code_hash);\n      o_free(user_code_hash);\n      res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        j_device_auth_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n        if (j_device_auth_id != NULL) {\n          if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n            j_query = json_pack(\"{sss[]}\", \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE, \"values\");\n            for (i=0; scope_array[i]!=NULL; i++) {\n              json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgda_id\", j_device_auth_id, \"gpgdas_scope\", scope_array[i]));\n            }\n            res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              j_return = json_pack(\"{sis{ssss}}\", \"result\", G_OK, \"authorization\", \"device_code\", device_code, \"user_code\", user_code);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error executing j_query (2)\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error split_string_remove_duplicates scope\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n          free_string_array(scope_array);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error h_last_insert_id\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n        json_decref(j_device_auth_id);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error generating random code\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return j_return;\n}\n\nstatic int validate_device_authorization_scope(struct _oauth2_config * config, json_int_t gpgda_id, const char * username, const char * scope_list) {\n  char * query, * scope_clause = NULL, * scope_escaped, ** scope_array = NULL, * username_escaped;\n  int res, i, ret;\n\n  if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n    for (i=0; scope_array[i]!=NULL; i++) {\n      scope_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, scope_array[i]);\n      if (scope_clause == NULL) {\n        scope_clause = o_strdup(scope_escaped);\n      } else {\n        scope_clause = mstrcatf(scope_clause, \",%s\", scope_escaped);\n      }\n      o_free(scope_escaped);\n    }\n    free_string_array(scope_array);\n  }\n  if (!o_strnullempty(scope_clause)) {\n    query = msprintf(\"UPDATE %s set gpgdas_allowed=1 WHERE gpgdas_scope IN (%s) AND gpgda_id=%\"JSON_INTEGER_FORMAT, GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE, scope_clause, gpgda_id);\n    res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n    o_free(query);\n    if (res == H_OK) {\n      username_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, username);\n      query = msprintf(\"UPDATE %s set gpgda_status=1, gpgda_username=%s WHERE gpgda_id=%\"JSON_INTEGER_FORMAT, GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION, username_escaped, gpgda_id);\n      res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n      o_free(username_escaped);\n      o_free(query);\n      if (res == H_OK) {\n        ret = G_OK;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error executing query (2)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        ret = G_ERROR_DB;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error executing query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      ret = G_ERROR_DB;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error scope invalid\");\n    ret = G_ERROR_PARAM;\n  }\n  o_free(scope_clause);\n  return ret;\n}\n\nstatic json_t * validate_device_auth_user_code(struct _oauth2_config * config, const char * user_code) {\n  json_t * j_query = NULL, * j_result = NULL, * j_result_scope = NULL, * j_return, * j_element = NULL;\n  int res;\n  char * scope = NULL, * expires_at_clause, * user_code_hash, user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+2] = {0};\n  time_t now;\n  size_t index = 0;\n\n  if (o_strlen(user_code) == GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1 && user_code[4] == '-') {\n    for (index=0; index<(GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1); index++) {\n      user_code_ucase[index] = (char)toupper(user_code[index]);\n    }\n    user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1] = '\\0';\n    time(&now);\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"> %u\", (now));\n    }\n    user_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, user_code_ucase);\n    j_query = json_pack(\"{sss[ss]s{sss{ssss}sssi}}\",\n                        \"table\",\n                        GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                        \"columns\",\n                          \"gpgda_id\",\n                          \"gpgda_client_id\",\n                        \"where\",\n                          \"gpgda_plugin_name\",\n                          config->name,\n                          \"gpgda_expires_at\",\n                            \"operator\",\n                            \"raw\",\n                            \"value\",\n                            expires_at_clause,\n                          \"gpgda_user_code_hash\",\n                          user_code_hash,\n                          \"gpgda_status\",\n                          0);\n    o_free(expires_at_clause);\n    o_free(user_code_hash);\n    res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n    json_decref(j_query);\n    if (res == H_OK) {\n      if (json_array_size(j_result)) {\n        j_query = json_pack(\"{sss[s]s{sO}}\",\n                            \"table\",\n                            GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE,\n                            \"columns\",\n                              \"gpgdas_scope\",\n                            \"where\",\n                              \"gpgda_id\",\n                              json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n        res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n        json_decref(j_query);\n        if (res == H_OK) {\n          json_array_foreach(j_result_scope, index, j_element) {\n            if (scope == NULL) {\n              scope = o_strdup(json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n            } else {\n              scope = mstrcatf(scope, \" %s\", json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n            }\n          }\n          j_return = json_pack(\"{sis{sOsssO}}\", \"result\", G_OK, \"device_auth\", \"client_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_client_id\"), \"scope\", scope, \"gpgda_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n          o_free(scope);\n          json_decref(j_result_scope);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_auth_user_code - Error executing j_query (2)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n      }\n      json_decref(j_result);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_auth_user_code - Error executing j_query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n    }\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n  }\n  return j_return;\n}\n\nstatic int check_auth_type_device_code(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_body, * j_client, * j_query, * j_result = NULL, * j_result_scope = NULL, * j_element = NULL, * j_user = NULL, * j_refresh_token = NULL, * j_user_only = NULL;\n  const char * device_code = u_map_get(request->map_post_body, \"device_code\"),\n             * client_id = request->auth_basic_user,\n             * client_secret = request->auth_basic_password,\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header),\n             * username = NULL;\n  int res;\n  char * device_code_hash, * refresh_token, * access_token, * scope = NULL, * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  time_t now;\n  size_t index = 0;\n\n  if (client_id == NULL && u_map_get(request->map_post_body, \"client_id\") != NULL) {\n    client_id = u_map_get(request->map_post_body, \"client_id\");\n  }\n  if (client_secret == NULL && u_map_get(request->map_post_body, \"client_secret\") != NULL) {\n    client_secret = u_map_get(request->map_post_body, \"client_secret\");\n  }\n  if (o_strlen(device_code) == GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH) {\n    j_client = check_client_valid(config, client_id, client_id, client_secret, NULL, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, 0, ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      device_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, device_code);\n      j_query = json_pack(\"{sss[sssss]s{sssOs{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                          \"columns\",\n                            \"gpgda_id\",\n                            \"gpgda_username AS username\",\n                            \"gpgda_status\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgda_expires_at) AS expires_at\", \"gpgda_expires_at AS expires_at\", \"EXTRACT(EPOCH FROM gpgda_expires_at)::integer AS expires_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgda_last_check) AS last_check\", \"gpgda_last_check AS last_check\", \"EXTRACT(EPOCH FROM gpgda_last_check)::integer AS last_check\"),\n                          \"where\",\n                            \"gpgda_device_code_hash\",\n                            device_code_hash,\n                            \"gpgda_client_id\",\n                            json_object_get(json_object_get(j_client, \"client\"), \"client_id\"),\n                            \"gpgda_status\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              \"<= 1\");\n      o_free(device_code_hash);\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          time(&now);\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"expires_at\")) >= (json_int_t)now) {\n            if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgda_status\")) == 1) {\n              j_query = json_pack(\"{sss[s]s{sOsi}}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE,\n                                  \"columns\",\n                                    \"gpgdas_scope\",\n                                  \"where\",\n                                    \"gpgda_id\",\n                                    json_object_get(json_array_get(j_result, 0), \"gpgda_id\"),\n                                    \"gpgdas_allowed\",\n                                    1);\n              res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                json_array_foreach(j_result_scope, index, j_element) {\n                  if (scope == NULL) {\n                    scope = o_strdup(json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n                  } else {\n                    scope = mstrcatf(scope, \" %s\", json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n                  }\n                }\n                // All clear, please send back tokens\n                username = json_string_value(json_object_get(json_array_get(j_result, 0), \"username\"));\n                j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n                if (check_result_value(j_user, G_OK)) {\n                  time(&now);\n                  if ((refresh_token = generate_refresh_token(config, client_id, username, json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")), now, ip_source)) != NULL) {\n                    j_refresh_token = serialize_refresh_token(config, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, 0, username, client_id, scope, now, config->refresh_token_duration, config->refresh_token_rolling, refresh_token, issued_for, u_map_get_case(request->map_header, \"user-agent\"));\n                    if (check_result_value(j_refresh_token, G_OK)) {\n                      j_user_only = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n                      if (check_result_value(j_user_only, G_OK)) {\n                        if ((access_token = generate_access_token(config,\n                                                                  username,\n                                                                  client_id,\n                                                                  json_object_get(j_user_only, \"user\"),\n                                                                  json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                                  now,\n                                                                  ip_source)) != NULL) {\n                          if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")), username, client_id, scope, now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                            j_query = json_pack(\"{sss{si}s{sO}}\",\n                                                \"table\",\n                                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                                                \"set\",\n                                                  \"gpgda_status\", 2,\n                                                \"where\",\n                                                  \"gpgda_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n                            res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                            json_decref(j_query);\n                            if (res == H_OK) {\n                              j_body = json_pack(\"{sssssssisIss}\",\n                                                 \"token_type\",\n                                                 \"bearer\",\n                                                 \"access_token\",\n                                                 access_token,\n                                                 \"refresh_token\",\n                                                 refresh_token,\n                                                 \"iat\",\n                                                 now,\n                                                 \"expires_in\",\n                                                 config->access_token_duration,\n                                                 \"scope\",\n                                                 scope);\n                              ulfius_set_json_body_response(response, 200, j_body);\n                              json_decref(j_body);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                            } else {\n                              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error executing j_query (4)\");\n                              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                              ulfius_set_json_body_response(response, 500, j_body);\n                              json_decref(j_body);\n                            }\n                          } else {\n                            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error serialize_access_token\");\n                            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                            ulfius_set_json_body_response(response, 500, j_body);\n                            json_decref(j_body);\n                          }\n                        } else {\n                          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error generate_access_token\");\n                          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                          ulfius_set_json_body_response(response, 500, j_body);\n                          json_decref(j_body);\n                        }\n                        o_free(access_token);\n                      } else {\n                        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n                        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                        ulfius_set_json_body_response(response, 500, j_body);\n                        json_decref(j_body);\n                      }\n                      json_decref(j_user_only);\n                    } else {\n                      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error serialize_refresh_token\");\n                      j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                      ulfius_set_json_body_response(response, 500, j_body);\n                      json_decref(j_body);\n                    }\n                    json_decref(j_refresh_token);\n                    o_free(refresh_token);\n                  } else {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error generate_refresh_token\");\n                    j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                    ulfius_set_json_body_response(response, 500, j_body);\n                    json_decref(j_body);\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error getting user %s\", username);\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n                json_decref(j_user);\n                o_free(scope);\n                json_decref(j_result_scope);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (2)\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n            } else {\n              j_query = json_pack(\"{sss{s{ss}}s{sO}}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                                  \"set\",\n                                    \"gpgda_last_check\",\n                                      \"raw\",\n                                      SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"CURRENT_TIMESTAMP\", \"strftime('%s','now')\", \"NOW()\"),\n                                  \"where\",\n                                    \"gpgda_id\",\n                                    json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n              res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                if (((json_int_t)now - json_integer_value(json_object_get(json_array_get(j_result, 0), \"last_check\"))) >= json_integer_value(json_object_get(config->j_params, \"device-authorization-interval\"))) {\n                  // Wait for it!\n                  j_body = json_pack(\"{ss}\", \"error\", \"authorization_pending\");\n                  ulfius_set_json_body_response(response, 400, j_body);\n                  json_decref(j_body);\n                } else {\n                  // Slow down dammit!\n                  j_body = json_pack(\"{ss}\", \"error\", \"slow_down\");\n                  ulfius_set_json_body_response(response, 400, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (3)\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n            }\n          } else {\n            // Code expired\n            j_body = json_pack(\"{ss}\", \"error\", \"expired_token\");\n            ulfius_set_json_body_response(response, 400, j_body);\n            json_decref(j_body);\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_device_code - Invalid code\");\n          j_body = json_pack(\"{ss}\", \"error\", \"access_denied\");\n          ulfius_set_json_body_response(response, 400, j_body);\n          json_decref(j_body);\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (1)\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_device_code - Missing code\");\n    j_body = json_pack(\"{ss}\", \"error\", \"access_denied\");\n    ulfius_set_json_body_response(response, 400, j_body);\n    json_decref(j_body);\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_revocation(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_result = get_token_metadata(config, u_map_get(request->map_post_body, \"token\"), u_map_get(request->map_post_body, \"token_type_hint\"), get_client_id_for_introspection(config, request));\n\n  if (check_result_value(j_result, G_OK)) {\n    if (json_object_get(json_object_get(j_result, \"token\"), \"active\") == json_true()) {\n      if (0 == o_strcmp(\"refresh_token\", json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"token_type\")))) {\n        if (revoke_refresh_token(config, u_map_get(request->map_post_body, \"token\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_revocation  - Error revoke_refresh_token\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"client_id\")), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        }\n      } else {\n        if (revoke_access_token(config, u_map_get(request->map_post_body, \"token\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_revocation  - Error revoke_access_token\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"client_id\")), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        }\n      }\n    }\n  } else if (check_result_value(j_result, G_ERROR_PARAM)) {\n    response->status = 400;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_introspection - Error get_token_metadata\");\n    response->status = 500;\n  }\n  json_decref(j_result);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_introspection(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_result = get_token_metadata(config, u_map_get(request->map_post_body, \"token\"), u_map_get(request->map_post_body, \"token_type_hint\"), get_client_id_for_introspection(config, request));\n\n  if (check_result_value(j_result, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"token\"));\n  } else if (check_result_value(j_result, G_ERROR_PARAM)) {\n    response->status = 400;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_introspection - Error get_token_metadata\");\n    response->status = 500;\n  }\n  json_decref(j_result);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_check_intropect_revoke(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_client, * j_element = NULL, * j_introspect;\n  size_t index = 0;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && config->introspect_revoke_resource_config->oauth_scope != NULL) {\n    j_introspect = get_token_metadata(config, (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) + o_strlen(HEADER_PREFIX_BEARER)), \"access_token\", NULL);\n    if (check_result_value(j_introspect, G_OK) && json_object_get(json_object_get(j_introspect, \"token\"), \"active\") == json_true()) {\n      ret = callback_check_glewlwyd_access_token(request, response, (void*)config->introspect_revoke_resource_config);\n    }\n    json_decref(j_introspect);\n  } else if (json_object_get(config->j_params, \"introspection-revocation-allow-target-client\") == json_true()) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"client_credentials\")) {\n          ret = U_CALLBACK_CONTINUE;\n        }\n      }\n    }\n    json_decref(j_client);\n  }\n  return ret;\n}\n\n/**\n * The most used authorization type: if client is authorized and has been granted access to scope,\n * glewlwyd redirects to redirect_uri with a code in the uri\n * If necessary, an intermediate step can be used: login page\n */\nstatic int check_auth_type_auth_code_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  char * authorization_code = NULL, * redirect_url, * issued_for, * state_param = NULL, * state_encoded, code_challenge_stored[GLEWLWYD_CODE_CHALLENGE_MAX_LENGTH + 1] = {0};\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_session, * j_client = check_client_valid(config, u_map_get(request->map_url, \"client_id\"), request->auth_basic_user, request->auth_basic_password, u_map_get(request->map_url, \"redirect_uri\"), GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, 1, ip_source);\n  int res;\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n  // Check if client is allowed to perform this request\n  if (check_result_value(j_client, G_OK)) {\n    // Client is allowed to use auth_code grant with this redirection_uri\n    if (u_map_has_key(request->map_url, \"g_continue\")) {\n      if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {\n        j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));\n        if (check_result_value(j_session, G_OK)) {\n          if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {\n            // User has granted access to the cleaned scope list for this client\n            // Generate code, generate the url and redirect to it\n            issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n            if (issued_for != NULL) {\n              if (config->glewlwyd_config->glewlwyd_callback_trigger_session_used(config->glewlwyd_config, request, json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n                if ((res = is_code_challenge_valid(config, u_map_get(request->map_url, \"code_challenge\"), u_map_get(request->map_url, \"code_challenge_method\"), code_challenge_stored)) == G_OK) {\n                  if ((authorization_code = generate_authorization_code(config, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")), u_map_get(request->map_url, \"redirect_uri\"), issued_for, u_map_get_case(request->map_header, \"user-agent\"), code_challenge_stored)) != NULL) {\n                    redirect_url = msprintf(\"%s%scode=%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), authorization_code, state_param);\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    response->status = 302;\n                    o_free(redirect_url);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CODE, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error generate_authorization_code\");\n                    response->status = 302;\n                  }\n                  o_free(authorization_code);\n                } else if (res == G_ERROR_PARAM) {\n                  redirect_url = msprintf(\"%s%serror=invalid_request\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - Invalid code_challenge or code_challenge_method, origin: %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n                  response->status = 302;\n                } else {\n                  redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error is_code_challenge_valid\");\n                  response->status = 302;\n                }\n              } else {\n                redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                o_free(redirect_url);\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error glewlwyd_callback_trigger_session_used\");\n                response->status = 302;\n              }\n            } else {\n              redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error get_client_hostname\");\n              response->status = 302;\n            }\n            o_free(issued_for);\n          } else {\n            // Redirect to login page\n            redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n            response->status = 302;\n          }\n        } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n          // Redirect to login page\n          redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          response->status = 302;\n        } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n          // Scope is not allowed for this user\n          response->status = 302;\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list '%s' is invalid for user '%s', origin: %s\", u_map_get(request->map_url, \"scope\"), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), ip_source);\n          redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        } else {\n          redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error validate_session_client_scope\");\n          response->status = 302;\n        }\n        json_decref(j_session);\n      } else {\n        // Scope is not allowed for this user\n        y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list is missing or empty, origin: %s\", ip_source);\n        response->status = 302;\n        redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      }\n    } else {\n      // Redirect to login page\n      redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      response->status = 302;\n    }\n  } else {\n    // client is not authorized\n    response->status = 302;\n    redirect_url = msprintf(\"%s%serror=unauthorized_client%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), (u_map_get(request->map_url, \"state\")!=NULL?\"&state=\":\"\"), (u_map_get(request->map_url, \"state\")!=NULL?u_map_get(request->map_url, \"state\"):\"\"));\n    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n    o_free(redirect_url);\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n  }\n  o_free(state_param);\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The second step of authentiation code\n * Validates if code, client_id and redirect_uri sent are valid, then returns a token set\n */\nstatic int check_auth_type_access_token_request (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * code = u_map_get(request->map_post_body, \"code\"),\n             * client_id = u_map_get(request->map_post_body, \"client_id\"),\n             * redirect_uri = u_map_get(request->map_post_body, \"redirect_uri\"),\n             * code_verifier = u_map_get(request->map_post_body, \"code_verifier\"),\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_code, * j_body, * j_refresh_token, * j_client, * j_user;\n  time_t now;\n  char * refresh_token = NULL, * access_token = NULL;\n\n  if (client_id == NULL && request->auth_basic_user != NULL) {\n    client_id = request->auth_basic_user;\n  }\n  if (code == NULL || client_id == NULL || redirect_uri == NULL) {\n    response->status = 400;\n  } else {\n    j_client = check_client_valid(config, client_id, request->auth_basic_user, request->auth_basic_password, redirect_uri, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, 0, ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      j_code = validate_authorization_code(config, code, client_id, redirect_uri, code_verifier, ip_source);\n      if (check_result_value(j_code, G_OK)) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")));\n        if (check_result_value(j_user, G_OK)) {\n          time(&now);\n          if ((refresh_token = generate_refresh_token(config, client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, ip_source)) != NULL) {\n            j_refresh_token = serialize_refresh_token(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"gpgc_id\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"refresh-token-duration\")), json_object_get(json_object_get(j_code, \"code\"), \"refresh-token-rolling\")==json_true(), refresh_token, issued_for, u_map_get_case(request->map_header, \"user-agent\"));\n            if (check_result_value(j_refresh_token, G_OK)) {\n              if ((access_token = generate_access_token(config,\n                                                        json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")),\n                                                        client_id,\n                                                        json_object_get(j_user, \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                  if (disable_authorization_code(config, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"gpgc_id\"))) == G_OK) {\n                    j_body = json_pack(\"{sssssssisIss}\",\n                                          \"token_type\",\n                                          \"bearer\",\n                                          \"access_token\",\n                                          access_token,\n                                          \"refresh_token\",\n                                          refresh_token,\n                                          \"iat\",\n                                          now,\n                                          \"expires_in\",\n                                          config->access_token_duration,\n                                          \"scope\",\n                                          json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")));\n                    ulfius_set_json_body_response(response, 200, j_body);\n                    json_decref(j_body);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error disable_authorization_code\");\n                    j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                    ulfius_set_json_body_response(response, 500, j_body);\n                    json_decref(j_body);\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error serialize_access_token\");\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error generate_access_token\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n              o_free(access_token);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error serialize_refresh_token\");\n              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n              ulfius_set_json_body_response(response, 500, j_body);\n              json_decref(j_body);\n            }\n            json_decref(j_refresh_token);\n            o_free(refresh_token);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error generate_refresh_token\");\n            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n            ulfius_set_json_body_response(response, 500, j_body);\n            json_decref(j_body);\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n          ulfius_set_json_body_response(response, 500, j_body);\n          json_decref(j_body);\n        }\n        json_decref(j_user);\n      } else if (check_result_value(j_code, G_ERROR_UNAUTHORIZED)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        j_body = json_pack(\"{ss}\", \"error\", \"invalid_code\");\n        ulfius_set_json_body_response(response, 403, j_body);\n        json_decref(j_body);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);\n      } else if (check_result_value(j_code, G_ERROR_PARAM)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        j_body = json_pack(\"{ss}\", \"error\", \"invalid_request\");\n        ulfius_set_json_body_response(response, 403, j_body);\n        json_decref(j_body);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_code);\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The second more simple authorization type: client redirects user to login page,\n * Then if authorized, glewlwyd redirects to redirect_uri with the access_token in the uri\n * If necessary, an intermediate step can be used: login page\n */\nstatic int check_auth_type_implicit_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * redirect_url, * issued_for, * state_encoded = NULL, * state_param = NULL;\n  json_t * j_session,\n         * j_client = check_client_valid(config, u_map_get(request->map_url, \"client_id\"), request->auth_basic_user, request->auth_basic_password, u_map_get(request->map_url, \"redirect_uri\"), GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT, 1, ip_source);\n  char * access_token;\n  time_t now;\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n  // Check if client is allowed to perform this request\n  if (check_result_value(j_client, G_OK)) {\n    // Client is allowed to use auth_code grant with this redirection_uri\n    if (u_map_has_key(request->map_url, \"g_continue\")) {\n      if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {\n        j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));\n        if (check_result_value(j_session, G_OK)) {\n          if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {\n            // User has granted access to the cleaned scope list for this client\n            // Generate access token\n            issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n            if (issued_for != NULL) {\n              time(&now);\n              if ((access_token = generate_access_token(config,\n                                                        json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")),\n                                                        u_map_get(request->map_url, \"client_id\"),\n                                                        json_object_get(json_object_get(j_session, \"session\"), \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT, 0, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")), now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                  if (config->glewlwyd_config->glewlwyd_callback_trigger_session_used(config->glewlwyd_config, request, json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n                    redirect_url = msprintf(\"%s%saccess_token=%s&token_type=bearer&expires_in=%\" JSON_INTEGER_FORMAT \"&scope=%s%s\",\n                                            u_map_get(request->map_url, \"redirect_uri\"),\n                                            (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '#')!=NULL?\"&\":\"#\"),\n                                            access_token,\n                                            config->access_token_duration,\n                                            json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")),\n                                            state_param);\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    response->status = 302;\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error glewlwyd_callback_trigger_session_used\");\n                    response->status = 302;\n                  }\n                } else {\n                  redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error serialize_access_token\");\n                  response->status = 302;\n                }\n              } else {\n                redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                o_free(redirect_url);\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error generate_access_token\");\n                response->status = 302;\n              }\n              o_free(access_token);\n            } else {\n              redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error get_client_hostname\");\n              response->status = 302;\n            }\n            o_free(issued_for);\n          } else {\n            // Redirect to login page\n            redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n            response->status = 302;\n          }\n        } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n          // Scope is not allowed for this user\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_implicit_grant - oauth2 - Scope list '%s' is not allowed for user '%s', origin: %s\", u_map_get(request->map_url, \"scope\"), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), ip_source);\n          response->status = 302;\n          redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        } else {\n          redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error validate_session_client_scope\");\n          response->status = 302;\n        }\n        json_decref(j_session);\n      } else {\n        // Empty scope is not allowed\n        response->status = 302;\n        redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      }\n    } else {\n      // Redirect to login page\n      redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      response->status = 302;\n    }\n  } else {\n    // client is not authorized\n    response->status = 302;\n    redirect_url = msprintf(\"%s%serror=unauthorized_client%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), (u_map_get(request->map_url, \"state\")!=NULL?\"&state=\":\"\"), (u_map_get(request->map_url, \"state\")!=NULL?u_map_get(request->map_url, \"state\"):\"\"));\n    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n    o_free(redirect_url);\n  }\n  o_free(state_param);\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The more simple authorization type\n * username and password are given in the POST parameters,\n * the access_token and refresh_token in a json object are returned\n */\nstatic int check_auth_type_resource_owner_pwd_cred (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_user, * j_client, * j_refresh_token, * j_body, * j_user_only, * j_element = NULL, * j_refresh = NULL;\n  int ret = G_OK, auth_type_allowed = 0;\n  const char * username = u_map_get(request->map_post_body, \"username\"),\n             * password = u_map_get(request->map_post_body, \"password\"),\n             * scope = u_map_get(request->map_post_body, \"scope\"),\n             * client_id = NULL,\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header),\n       * refresh_token,\n       * access_token;\n  time_t now;\n  size_t index = 0;\n\n  if (scope == NULL || username == NULL || password == NULL || issued_for == NULL) {\n    ret = G_ERROR_PARAM;\n  } else if (request->auth_basic_user != NULL && request->auth_basic_password != NULL) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") != json_true()) {\n      ret = G_ERROR_PARAM;\n    } else if (check_result_value(j_client, G_OK)) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"password\")) {\n          auth_type_allowed = 1;\n        }\n      }\n      if (!auth_type_allowed) {\n        ret = G_ERROR_PARAM;\n      } else {\n        client_id = request->auth_basic_user;\n      }\n    } else if (check_result_value(j_client, G_ERROR_NOT_FOUND) || check_result_value(j_client, G_ERROR_UNAUTHORIZED)) {\n      ret = G_ERROR_PARAM;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error glewlwyd_callback_check_client_valid\");\n      ret = G_ERROR;\n    }\n    json_decref(j_client);\n  }\n  if (ret == G_OK) {\n    j_user = config->glewlwyd_config->glewlwyd_callback_check_user_valid(config->glewlwyd_config, username, password, scope);\n    if (check_result_value(j_user, G_OK)) {\n      j_refresh = get_refresh_token_duration_rolling(config, json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));\n      if (check_result_value(j_refresh, G_OK)) {\n        time(&now);\n        if ((refresh_token = generate_refresh_token(config,\n                                                    client_id,\n                                                    username,\n                                                    json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                    now,\n                                                    ip_source)) != NULL) {\n          j_refresh_token = serialize_refresh_token(config,\n                                                    GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS,\n                                                    0,\n                                                    username,\n                                                    client_id,\n                                                    json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                    now,\n                                                    json_integer_value(json_object_get(json_object_get(j_refresh, \"refresh-token\"), \"refresh-token-duration\")),\n                                                    json_object_get(json_object_get(j_refresh, \"refresh-token\"), \"refresh-token-rolling\")==json_true(),\n                                                    refresh_token,\n                                                    issued_for,\n                                                    u_map_get_case(request->map_header, \"user-agent\"));\n          if (check_result_value(j_refresh_token, G_OK)) {\n            j_user_only = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n            if (check_result_value(j_user_only, G_OK)) {\n              if ((access_token = generate_access_token(config,\n                                                        username,\n                                                        client_id,\n                                                        json_object_get(j_user_only, \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config,\n                                           GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS,\n                                           json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")),\n                                           username,\n                                           client_id,\n                                           json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                           now,\n                                           issued_for,\n                                           u_map_get_case(request->map_header, \"user-agent\"),\n                                           access_token) == G_OK) {\n                  j_body = json_pack(\"{sssssssisIss}\",\n                                     \"token_type\",\n                                     \"bearer\",\n                                     \"access_token\",\n                                     access_token,\n                                     \"refresh_token\",\n                                     refresh_token,\n                                     \"iat\",\n                                     now,\n                                     \"expires_in\",\n                                     config->access_token_duration,\n                                     \"scope\",\n                                     json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));\n                  ulfius_set_json_body_response(response, 200, j_body);\n                  json_decref(j_body);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error serialize_access_token\");\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error generate_access_token\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n              o_free(access_token);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n              ulfius_set_json_body_response(response, 500, j_body);\n              json_decref(j_body);\n            }\n            json_decref(j_user_only);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error serialize_refresh_token\");\n            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n            ulfius_set_json_body_response(response, 500, j_body);\n            json_decref(j_body);\n          }\n          json_decref(j_refresh_token);\n          o_free(refresh_token);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error generate_refresh_token\");\n          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n          ulfius_set_json_body_response(response, 500, j_body);\n          json_decref(j_body);\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error get_refresh_token_duration_rolling\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_refresh);\n    } else if (check_result_value(j_user, G_ERROR_NOT_FOUND) || check_result_value(j_user, G_ERROR_UNAUTHORIZED)) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error user '%s'\", username);\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", username, ip_source);\n      response->status = 403;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - glewlwyd_callback_check_user_valid\");\n      response->status = 403;\n    }\n    json_decref(j_user);\n  } else if (ret == G_ERROR_PARAM) {\n    response->status = 400;\n  } else {\n    response->status = 500;\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Send an access_token to a confidential client\n */\nstatic int check_auth_type_client_credentials_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_client, * j_element = NULL, * json_body;\n  char ** scope_array, ** scope_allowed = NULL, * scope_joined, * access_token, * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  size_t index = 0;\n  int i, i_scope_allowed = 0, auth_type_allowed = 0;\n  time_t now;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n\n  if (issued_for == NULL) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2  - Error get_client_hostname\");\n    response->status = 500;\n  } else if (request->auth_basic_user != NULL && request->auth_basic_password != NULL && !o_strnullempty(u_map_get(request->map_post_body, \"scope\"))) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"client_credentials\")) {\n          auth_type_allowed = 1;\n        }\n      }\n      if (split_string_remove_duplicates(u_map_get(request->map_post_body, \"scope\"), \" \", &scope_array) > 0) {\n        for (i=0; scope_array[i]!=NULL; i++) {\n          json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"scope\"), index, j_element) {\n            if (0 == o_strcmp(json_string_value(j_element), scope_array[i])) {\n              if (scope_allowed == NULL) {\n                scope_allowed = o_malloc(2 * sizeof(char*));\n              } else {\n                scope_allowed = o_realloc(scope_allowed, (2 + (size_t)i_scope_allowed) * sizeof(char*));\n              }\n              scope_allowed[i_scope_allowed] = scope_array[i];\n              scope_allowed[i_scope_allowed+1] = NULL;\n              i_scope_allowed++;\n            }\n          }\n        }\n        if (!i_scope_allowed) {\n          json_body = json_pack(\"{ss}\", \"error\", \"scope_invalid\");\n          ulfius_set_json_body_response(response, 400, json_body);\n          json_decref(json_body);\n        } else if (!auth_type_allowed) {\n          json_body = json_pack(\"{ss}\", \"error\", \"authorization_type_invalid\");\n          ulfius_set_json_body_response(response, 400, json_body);\n          json_decref(json_body);\n        } else {\n          scope_joined = string_array_join((const char **)scope_allowed, \" \");\n          time(&now);\n          if ((access_token = generate_client_access_token(config, request->auth_basic_user, scope_joined, json_object_get(j_client, \"client\"), now, ip_source)) != NULL) {\n            if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS, 0, NULL, request->auth_basic_user, scope_joined, now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n              json_body = json_pack(\"{sssssIss}\",\n                                    \"access_token\", access_token,\n                                    \"token_type\", \"bearer\",\n                                    \"expires_in\", config->access_token_duration,\n                                    \"scope\", scope_joined);\n              ulfius_set_json_body_response(response, 200, json_body);\n              json_decref(json_body);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error serialize_access_token\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error generate_client_access_token\");\n            response->status = 500;\n          }\n          o_free(access_token);\n          o_free(scope_joined);\n          o_free(scope_allowed);\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error split_string_remove_duplicates\");\n        response->status = 500;\n      }\n      free_string_array(scope_array);\n    } else {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc check_auth_type_client_credentials_grant - Error client_id '%s' invalid\", request->auth_basic_user);\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", request->auth_basic_user, ip_source);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n      response->status = 403;\n    }\n    json_decref(j_client);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"oauth2 check_auth_type_client_credentials_grant - Error invalid input parameters. client_id: '%s', scope: '%s', origin: %s\", request->auth_basic_user, u_map_get(request->map_post_body, \"scope\"), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 403;\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Get a new access_token from a valid refresh_token\n */\nstatic int get_access_token_from_refresh (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * refresh_token = u_map_get(request->map_post_body, \"refresh_token\"), * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_refresh, * json_body, * j_client, * j_user;\n  time_t now;\n  char * access_token, * scope_joined = NULL, * issued_for;\n  int has_error = 0, has_issues = 0;\n\n  if (refresh_token != NULL && !o_strnullempty(refresh_token)) {\n    j_refresh = validate_refresh_token(config, refresh_token);\n    if (check_result_value(j_refresh, G_OK)) {\n      if (json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\") != json_null()) {\n        j_client = check_client_valid(config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")), request->auth_basic_user, request->auth_basic_password, NULL, GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN, 0, ip_source);\n        if (!check_result_value(j_client, G_OK)) {\n          has_issues = 1;\n        } else if (request->auth_basic_user == NULL && request->auth_basic_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - client '%s' is invalid or is not confidential, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        }\n        json_decref(j_client);\n      }\n      time(&now);\n      issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n      scope_joined = join_json_string_array(json_object_get(json_object_get(j_refresh, \"token\"), \"scope\"), \" \");\n      if (scope_joined == NULL) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error join_json_string_array\");\n        has_error = 1;\n      }\n      if (update_refresh_token(config,\n                               json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")),\n                               (json_object_get(json_object_get(j_refresh, \"token\"), \"rolling_expiration\") == json_true())?json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"duration\")):0,\n                               0,\n                               now) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error update_refresh_token\");\n        has_error = 1;\n      }\n      if (!has_error && !has_issues) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")));\n        if (check_result_value(j_user, G_OK)) {\n          if ((access_token = generate_access_token(config,\n                                                    json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")),\n                                                    json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")),\n                                                    json_object_get(j_user, \"user\"),\n                                                    scope_joined,\n                                                    now,\n                                                    ip_source)) != NULL) {\n            if (serialize_access_token(config,\n                                       GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN,\n                                       json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")),\n                                       json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")),\n                                       json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")),\n                                       scope_joined,\n                                       now,\n                                       issued_for,\n                                       u_map_get_case(request->map_header, \"user-agent\"),\n                                       access_token) == G_OK) {\n              json_body = json_pack(\"{sssssIsssi}\",\n                                    \"access_token\", access_token,\n                                    \"token_type\", \"bearer\",\n                                    \"expires_in\", config->access_token_duration,\n                                    \"scope\", scope_joined,\n                                    \"iat\", now);\n              ulfius_set_json_body_response(response, 200, json_body);\n              json_decref(json_body);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"refresh_token\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error serialize_access_token\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error generate_client_access_token\");\n            response->status = 500;\n          }\n          o_free(access_token);\n        } else {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - Error glewlwyd_plugin_callback_get_user, origin: %s\", ip_source);\n          response->status = 500;\n        }\n        json_decref(j_user);\n      } else if (has_issues) {\n        response->status = 400;\n      } else {\n        response->status = 500;\n      }\n      o_free(issued_for);\n    } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      response->status = 400;\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error validate_refresh_token\");\n      response->status = 500;\n    }\n    json_decref(j_refresh);\n    o_free(scope_joined);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - Error token empty or missing, origin: %s\", ip_source);\n    response->status = 400;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Invalidate a refresh token\n */\nstatic int delete_refresh_token (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * refresh_token = u_map_get(request->map_post_body, \"refresh_token\"), * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_refresh, * j_client;\n  time_t now;\n  char * issued_for;\n  int has_issues = 0;\n\n  if (refresh_token != NULL && !o_strnullempty(refresh_token)) {\n    j_refresh = validate_refresh_token(config, refresh_token);\n    if (check_result_value(j_refresh, G_OK)) {\n      if (json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\") != json_null()) {\n        j_client = check_client_valid(config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")), request->auth_basic_user, request->auth_basic_password, NULL, GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN, 0, ip_source);\n        if (!check_result_value(j_client, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - client '%s' is invalid, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        } else if (request->auth_basic_user == NULL && request->auth_basic_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - client '%s' is invalid or is not confidential, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        }\n        json_decref(j_client);\n      }\n      if (!has_issues) {\n        time(&now);\n        issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n        if (update_refresh_token(config, json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")), 0, 1, now) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"delete_refresh_token - oauth2 - Error update_refresh_token\");\n          response->status = 500;\n        }\n        o_free(issued_for);\n      } else {\n        response->status = 400;\n      }\n    } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      response->status = 400;\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"delete_refresh_token - oauth2 - Error validate_refresh_token\");\n      response->status = 500;\n    }\n    json_decref(j_refresh);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - token missing or empty, origin: %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 400;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_check_glewlwyd_session(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_session, * j_user;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (!o_strnullempty(u_map_get(request->map_url, \"impersonate\"))) {\n    if (config->glewlwyd_config->glewlwyd_config->admin_session_authentication & GLEWLWYD_SESSION_AUTH_COOKIE) {\n      j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, config->glewlwyd_config->glewlwyd_config->admin_scope);\n      if (check_result_value(j_session, G_OK)) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, u_map_get(request->map_url, \"impersonate\"));\n        if (check_result_value(j_user, G_OK)) {\n          if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", u_map_get(request->map_url, \"impersonate\")), (void (*)(void *))&json_decref) != U_OK) {\n            ret = U_CALLBACK_ERROR;\n          } else {\n            ret = U_CALLBACK_CONTINUE;\n          }\n        }\n        json_decref(j_user);\n      }\n      json_decref(j_session);\n    }\n  } else {\n    j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, NULL);\n    if (check_result_value(j_session, G_OK)) {\n      if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\"))), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_CONTINUE;\n      }\n    }\n    json_decref(j_session);\n  }\n  return ret;\n}\n\nstatic int callback_check_glewlwyd_session_or_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_session, * j_user, * j_introspect;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && o_strlen(u_map_get_case(request->map_header, HEADER_AUTHORIZATION)) >= o_strlen(HEADER_PREFIX_BEARER)) {\n    j_introspect = get_token_metadata(config, (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) + o_strlen(HEADER_PREFIX_BEARER)), \"access_token\", NULL);\n    if (check_result_value(j_introspect, G_OK) && json_object_get(json_object_get(j_introspect, \"token\"), \"active\") == json_true()) {\n      ret = callback_check_glewlwyd_access_token(request, response, (void*)config->glewlwyd_resource_config);\n    }\n    json_decref(j_introspect);\n  } else {\n    if (!o_strnullempty(u_map_get(request->map_url, \"impersonate\"))) {\n      if (config->glewlwyd_config->glewlwyd_config->admin_session_authentication & GLEWLWYD_SESSION_AUTH_COOKIE) {\n        j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, config->glewlwyd_config->glewlwyd_config->admin_scope);\n        if (check_result_value(j_session, G_OK)) {\n          j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, u_map_get(request->map_url, \"impersonate\"));\n          if (check_result_value(j_user, G_OK)) {\n            if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", u_map_get(request->map_url, \"impersonate\")), (void (*)(void *))&json_decref) != U_OK) {\n              ret = U_CALLBACK_ERROR;\n            } else {\n              ret = U_CALLBACK_CONTINUE;\n            }\n          }\n          json_decref(j_user);\n        }\n        json_decref(j_session);\n      }\n    } else {\n      j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, NULL);\n      if (check_result_value(j_session, G_OK)) {\n        if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\"))), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_CONTINUE;\n        }\n      }\n      json_decref(j_session);\n    }\n  }\n  return ret;\n}\n\nstatic int callback_oauth2_authorization(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  const char * response_type = u_map_get(request->map_url, \"response_type\");\n  int result = U_CALLBACK_CONTINUE;\n  char * redirect_url, * state_encoded = NULL, * state_param = NULL;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n  if (0 == o_strcmp(\"code\", response_type)) {\n    if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n      result = check_auth_type_auth_code_grant(request, response, user_data);\n    } else {\n      if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n        response->status = 302;\n        redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      } else {\n        response->status = 403;\n      }\n    }\n  } else if (0 == o_strcmp(\"token\", response_type)) {\n    if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n      result = check_auth_type_implicit_grant(request, response, user_data);\n    } else {\n      if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n        response->status = 302;\n        redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      } else {\n        response->status = 403;\n      }\n    }\n  } else {\n    if (u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n      response->status = 302;\n      redirect_url = msprintf(\"%s#error=unsupported_response_type%s\", u_map_get(request->map_url, \"redirect_uri\"), state_param);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n    } else {\n      response->status = 403;\n    }\n  }\n  o_free(state_param);\n\n  return result;\n}\n\nstatic int callback_oauth2_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * grant_type = u_map_get(request->map_post_body, \"grant_type\");\n  int result = U_CALLBACK_CONTINUE;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (0 == o_strcmp(\"authorization_code\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE)) {\n      result = check_auth_type_access_token_request(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"password\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS)) {\n      result = check_auth_type_resource_owner_pwd_cred(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"client_credentials\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS)) {\n      result = check_auth_type_client_credentials_grant(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"refresh_token\", grant_type)) {\n    result = get_access_token_from_refresh(request, response, user_data);\n  } else if (0 == o_strcmp(\"delete_token\", grant_type)) {\n    result = delete_refresh_token(request, response, user_data);\n  } else if (0 == o_strcmp(\"urn:ietf:params:oauth:grant-type:device_code\", grant_type)) {\n    result = check_auth_type_device_code(request, response, user_data);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oauth2_token - oauth2 - Unknown grant_type '%s', origin: %s\", grant_type, get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 400;\n  }\n  return result;\n}\n\nstatic int callback_oauth2_get_profile(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_profile = config->glewlwyd_config->glewlwyd_plugin_callback_get_user_profile(config->glewlwyd_config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (check_result_value(j_profile, G_OK)) {\n    json_object_del(json_object_get(j_profile, \"user\"), \"scope\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"enabled\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"source\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"last_login\");\n    ulfius_set_json_body_response(response, 200, json_object_get(j_profile, \"user\"));\n  } else {\n    response->status = 404;\n  }\n  json_decref(j_profile);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_oauth2_refresh_token_list_get(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL, * sort = NULL;\n  json_t * j_refresh_list;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  if (0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"authorization_type\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"client_id\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_at\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"last_seen\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"expires_at\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_for\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"user_agent\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"enabled\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"rolling_expiration\")) {\n    sort = msprintf(\"gpgr_%s%s\", u_map_get(request->map_url, \"sort\"), (u_map_get_case(request->map_url, \"desc\")!=NULL?\" DESC\":\" ASC\"));\n  }\n  j_refresh_list = refresh_token_list_get(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"pattern\"), offset, limit, sort);\n  if (check_result_value(j_refresh_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_refresh_list, \"refresh_token\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_refresh_token_list_get - Error refresh_token_list_get\");\n    response->status = 500;\n  }\n  o_free(sort);\n  json_decref(j_refresh_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_oauth2_disable_refresh_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  int res;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if ((res = refresh_token_disable(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"token_hash\"), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header))) == G_ERROR_NOT_FOUND) {\n    response->status = 404;\n  } else if (res == G_ERROR_PARAM) {\n    response->status = 400;\n  } else if (res != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_disable_refresh_token - Error refresh_token_disable\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Generates a new device_authorization if the client is allowed\n */\nstatic int callback_oauth2_device_authorization(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header), * client_id = request->auth_basic_user, * client_secret = request->auth_basic_password;\n  char * verification_uri, * verification_uri_complete, * plugin_url = config->glewlwyd_config->glewlwyd_callback_get_plugin_external_url(config->glewlwyd_config, json_string_value(json_object_get(config->j_params, \"name\")));\n  json_t * j_client, * j_body, * j_result;\n\n  if (client_id == NULL && u_map_get(request->map_post_body, \"client_id\") != NULL) {\n    client_id = u_map_get(request->map_post_body, \"client_id\");\n  }\n  if (client_secret == NULL && u_map_get(request->map_post_body, \"client_secret\") != NULL) {\n    client_secret = u_map_get(request->map_post_body, \"client_secret\");\n  }\n  if (!o_strnullempty(u_map_get(request->map_post_body, \"scope\"))) {\n    j_client = check_client_valid(config,\n                                 client_id,\n                                 client_id,\n                                 client_secret,\n                                 NULL,\n                                 GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION,\n                                 0,\n                                 ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      client_id = json_string_value(json_object_get(json_object_get(j_client, \"client\"), \"client_id\"));\n      j_result = generate_device_authorization(config, client_id, u_map_get(request->map_post_body, \"scope\"), ip_source);\n      if (check_result_value(j_result, G_OK)) {\n          verification_uri = msprintf(\"%s/device\", plugin_url);\n          verification_uri_complete = msprintf(\"%s/device?code=%s\", plugin_url, json_string_value(json_object_get(json_object_get(j_result, \"authorization\"), \"user_code\")));\n          j_body = json_pack(\"{sOsOsssssOsO}\",\n                             \"device_code\", json_object_get(json_object_get(j_result, \"authorization\"), \"device_code\"),\n                             \"user_code\", json_object_get(json_object_get(j_result, \"authorization\"), \"user_code\"),\n                             \"verification_uri\", verification_uri,\n                             \"verification_uri_complete\", verification_uri_complete,\n                             \"expires_in\", json_object_get(config->j_params, \"device-authorization-expiration\"),\n                             \"interval\", json_object_get(config->j_params, \"device-authorization-interval\"));\n          ulfius_set_json_body_response(response, 200, j_body);\n          json_decref(j_body);\n          o_free(verification_uri);\n          o_free(verification_uri_complete);\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_authorization oauth2 - Error generate_device_authorization\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_result);\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  } else {\n    j_body = json_pack(\"{ss}\", \"error\", \"invalid_scope\");\n    ulfius_set_json_body_response(response, 400, j_body);\n    json_decref(j_body);\n  }\n  o_free(plugin_url);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Verifies the device code by the user\n */\nstatic int callback_oauth2_device_verification(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  char * redirect_url = NULL;\n  struct _u_map param;\n  json_t * j_result, * j_session;\n\n  if (!!o_strnullempty(u_map_get(request->map_url, \"code\"))) {\n    if (u_map_init(&param) == U_OK) {\n      u_map_put(&param, \"prompt\", \"device\");\n      response->status = 302;\n      redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      u_map_clean(&param);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  } else if (o_strlen(u_map_get(request->map_url, \"code\")) != (GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1)) {\n    if (u_map_init(&param) == U_OK) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      u_map_put(&param, \"prompt\", \"deviceCodeError\");\n      response->status = 302;\n      redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      u_map_clean(&param);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  } else {\n    if (u_map_init(&param) == U_OK) {\n      j_result = validate_device_auth_user_code(config, u_map_get(request->map_url, \"code\"));\n      if (check_result_value(j_result, G_OK)) {\n        if (u_map_has_key(request->map_url, \"g_continue\")) {\n          j_session = validate_session_client_scope(config, request, json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")));\n          if (check_result_value(j_session, G_OK)) {\n            if (validate_device_authorization_scope(config, json_integer_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"gpgda_id\")), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n              response->status = 302;\n              u_map_put(&param, \"prompt\", \"deviceComplete\");\n              redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_authorization_scope\");\n              response->status = 302;\n              u_map_put(&param, \"prompt\", \"deviceServerError\");\n              redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n            }\n          } else if (check_result_value(j_session, G_ERROR_NOT_FOUND) || check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n            // Redirect to login page\n            response->status = 302;\n            redirect_url = get_login_url(config, request, \"device\", json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_session_client_scope\");\n            response->status = 302;\n            u_map_put(&param, \"prompt\", \"deviceServerError\");\n            redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n          }\n          json_decref(j_session);\n        } else {\n          // Redirect to login page\n          response->status = 302;\n          redirect_url = get_login_url(config, request, \"device\", json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")), NULL);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        }\n      } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        response->status = 302;\n        u_map_put(&param, \"prompt\", \"deviceCodeError\");\n        redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_auth_user_code\");\n        response->status = 302;\n        u_map_put(&param, \"prompt\", \"deviceServerError\");\n        redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      }\n      json_decref(j_result);\n      u_map_clean(&param);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int jwt_autocheck(struct _oauth2_config * config) {\n  time_t now;\n  char * token;\n  jwt_t * jwt = NULL;\n  int ret;\n\n  time(&now);\n  token = generate_access_token(config, GLEWLWYD_CHECK_JWT_USERNAME, NULL, NULL, GLEWLWYD_CHECK_JWT_SCOPE, now, NULL);\n  if (token != NULL) {\n    jwt = r_jwt_copy(config->glewlwyd_resource_config->jwt);\n    if (r_jwt_advanced_parse(jwt, token, R_PARSE_NONE, 0) == RHN_OK && r_jwt_verify_signature(jwt, NULL, 0) == RHN_OK) {\n      ret = RHN_OK;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"jwt_autocheck - oauth2 - Error verifying signature\");\n      ret = G_ERROR_PARAM;\n    }\n    r_jwt_free(jwt);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"jwt_autocheck - oauth2 - Error generate_access_token\");\n    ret = G_ERROR;\n  }\n  o_free(token);\n  return ret;\n}\n\nstatic int disable_user_data(struct _oauth2_config * config, const char * username) {\n  json_t * j_query;\n  int res, ret = G_OK;\n\n  do {\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                        \"set\",\n                          \"gpgc_enabled\", 0,\n                        \"where\",\n                          \"gpgc_plugin_name\", config->name,\n                          \"gpgc_username\", username,\n                          \"gpgc_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable codes\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                        \"set\",\n                          \"gpgr_enabled\", 0,\n                        \"where\",\n                          \"gpgr_plugin_name\", config->name,\n                          \"gpgr_username\", username,\n                          \"gpgr_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable refresh tokens\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                        \"set\",\n                          \"gpga_enabled\", 0,\n                        \"where\",\n                          \"gpga_plugin_name\", config->name,\n                          \"gpga_username\", username,\n                          \"gpga_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable access tokens\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssss{ssss}}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                        \"set\",\n                          \"gpgda_status\", 3,\n                        \"where\",\n                          \"gpgda_plugin_name\", config->name,\n                          \"gpgda_username\", username,\n                          \"gpgda_status\",\n                            \"operator\", \"raw\",\n                            \"value\", \"in (0, 1)\");\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable device auth tokens\");\n      ret = G_ERROR;\n      break;\n    }\n  } while (0);\n  return ret;\n}\n\njson_t * plugin_module_load(struct config_plugin * config) {\n  UNUSED(config);\n  return json_pack(\"{si ss ss ss}\",\n                   \"result\", G_OK,\n                   \"name\", \"oauth2-glewlwyd\",\n                   \"display_name\", \"OAuth2 plugin\",\n                   \"description\", \"Plugin for legacy OAuth2 workflow\");\n}\n\nint plugin_module_unload(struct config_plugin * config) {\n  UNUSED(config);\n  return G_OK;\n}\n\njson_t * plugin_module_init(struct config_plugin * config, const char * name, json_t * j_parameters, void ** cls) {\n  const unsigned char * key;\n  jwa_alg alg = R_JWA_ALG_UNKNOWN;\n  pthread_mutexattr_t mutexattr;\n  json_t * j_return = NULL, * j_result = NULL, * j_element = NULL;\n  size_t index = 0;\n  struct _oauth2_config * p_config = NULL;\n  jwk_t * key_priv = NULL, * key_pub = NULL;\n\n  y_log_message(Y_LOG_LEVEL_INFO, \"Init plugin Glewlwyd Oauth2 '%s'\", name);\n  *cls = o_malloc(sizeof(struct _oauth2_config));\n  if (*cls != NULL) {\n    p_config = (struct _oauth2_config *)*cls;\n    p_config->glewlwyd_resource_config = NULL;\n\n    do {\n      pthread_mutexattr_init ( &mutexattr );\n      pthread_mutexattr_settype( &mutexattr, PTHREAD_MUTEX_RECURSIVE );\n      if (pthread_mutex_init(&p_config->insert_lock, &mutexattr) != 0) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error initializing insert_lock\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n      pthread_mutexattr_destroy(&mutexattr);\n\n      p_config->name = name;\n      p_config->jwt_key = NULL;\n      p_config->j_params = json_incref(j_parameters);\n      json_object_set_new(p_config->j_params, \"name\", json_string(name));\n      p_config->glewlwyd_config = config;\n      p_config->introspect_revoke_resource_config = NULL;\n      if ((p_config->glewlwyd_resource_config = o_malloc(sizeof(struct _glewlwyd_resource_config))) == NULL) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error initializing glewlwyd_resource_config\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n        break;\n      }\n\n      p_config->glewlwyd_resource_config->method = G_METHOD_HEADER;\n      p_config->glewlwyd_resource_config->oauth_scope = NULL;\n      p_config->glewlwyd_resource_config->realm = NULL;\n      p_config->glewlwyd_resource_config->accept_access_token = 1;\n      p_config->glewlwyd_resource_config->accept_client_token = 0;\n      j_result = check_parameters(p_config->j_params);\n\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", json_object_get(j_result, \"error\"));\n        break;\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error check_parameters\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      p_config->access_token_duration = json_integer_value(json_object_get(p_config->j_params, \"access-token-duration\"));\n      if (!p_config->access_token_duration) {\n        p_config->access_token_duration = GLEWLWYD_ACCESS_TOKEN_EXP_DEFAULT;\n      }\n      p_config->refresh_token_duration = json_integer_value(json_object_get(p_config->j_params, \"refresh-token-duration\"));\n      if (!p_config->refresh_token_duration) {\n        p_config->refresh_token_duration = GLEWLWYD_REFRESH_TOKEN_EXP_DEFAULT;\n      }\n      p_config->code_duration = json_integer_value(json_object_get(p_config->j_params, \"code-duration\"));\n      if (!p_config->code_duration) {\n        p_config->code_duration = GLEWLWYD_CODE_EXP_DEFAULT;\n      }\n      if (json_object_get(p_config->j_params, \"refresh-token-rolling\") != NULL) {\n        p_config->refresh_token_rolling = json_object_get(p_config->j_params, \"refresh-token-rolling\")==json_true()?1:0;\n      } else {\n        p_config->refresh_token_rolling = 0;\n      }\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE] = json_object_get(p_config->j_params, \"auth-type-code-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT] = json_object_get(p_config->j_params, \"auth-type-implicit-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS] = json_object_get(p_config->j_params, \"auth-type-password-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS] = json_object_get(p_config->j_params, \"auth-type-client-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN] = json_object_get(p_config->j_params, \"auth-type-refresh-enabled\")==json_true()?1:0;\n\n      if (r_jwt_init(&p_config->jwt_key) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for jwt_key\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (r_jwt_init(&p_config->glewlwyd_resource_config->jwt) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for jwt\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      key = (const unsigned char *)json_string_value(json_object_get(p_config->j_params, \"key\"));\n      if (0 == o_strcmp(\"rsa\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_RS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_RS384;\n        } else { // 512\n          alg = R_JWA_ALG_RS512;\n        }\n      } else if (0 == o_strcmp(\"ecdsa\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_ES256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_ES384;\n        } else { // 512\n          alg = R_JWA_ALG_ES512;\n        }\n      } else if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_HS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_HS384;\n        } else { // 512\n          alg = R_JWA_ALG_HS512;\n        }\n      } else if (0 == o_strcmp(\"rsa-pss\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) { // SHA\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_PS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_PS384;\n        } else { // 512\n          alg = R_JWA_ALG_PS512;\n        }\n      } else {\n        alg = R_JWA_ALG_EDDSA;\n      }\n\n      if (r_jwt_set_sign_alg(p_config->jwt_key, alg) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_set_sign_alg\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (r_jwt_set_sign_alg(p_config->glewlwyd_resource_config->jwt, alg) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_set_sign_alg (2)\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (r_jwt_add_sign_key_symmetric(p_config->jwt_key, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_key_symmetric\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwt_add_sign_key_symmetric(p_config->glewlwyd_resource_config->jwt, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_key_symmetric (2)\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      } else {\n        if (r_jwk_init(&key_priv) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_init key_priv\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_init(&key_pub) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_init key_pub\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_import_from_pem_der(key_priv, R_X509_TYPE_PRIVKEY, R_FORMAT_PEM, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_import_from_pem_der key_priv\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_import_from_pem_der(key_pub, R_X509_TYPE_PUBKEY, R_FORMAT_PEM, (const unsigned char *)json_string_value(json_object_get(p_config->j_params, \"cert\")), json_string_length(json_object_get(p_config->j_params, \"cert\"))) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_import_from_pem_der key_pub\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        r_jwk_delete_property_str(key_priv, \"kid\");\n        r_jwk_delete_property_str(key_pub, \"kid\");\n        if (r_jwt_add_sign_keys(p_config->jwt_key, key_priv, NULL)  != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_keys\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwt_add_sign_keys(p_config->glewlwyd_resource_config->jwt, NULL, key_pub) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_keys_pem_der (2)\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      }\n\n      if (jwt_autocheck(p_config) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error jwt_autocheck\");\n        j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"Error jwt_autocheck\");\n        break;\n      }\n\n      p_config->glewlwyd_resource_config->alg = alg;\n\n      // Add endpoints\n      y_log_message(Y_LOG_LEVEL_INFO, \"Add endpoints with plugin prefix %s\", name);\n      if (config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"auth/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_authorization, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"*\", name, \"profile/*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session_or_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"*\", name, \"profile/token/*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"profile/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_get_profile, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"profile/token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_refresh_token_list_get, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"DELETE\", name, \"profile/token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_disable_refresh_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"DELETE\", name, \"profile/token/:token_hash\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_disable_refresh_token, (void*)*cls) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error adding endpoints\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {\n        if ((p_config->introspect_revoke_resource_config = o_malloc(sizeof(struct _glewlwyd_resource_config))) == NULL) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocatig resources for introspect_revoke_resource_config\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n          break;\n        }\n        p_config->introspect_revoke_resource_config->method = G_METHOD_HEADER;\n        p_config->introspect_revoke_resource_config->oauth_scope = NULL;\n        json_array_foreach(json_object_get(p_config->j_params, \"introspection-revocation-auth-scope\"), index, j_element) {\n          if (p_config->introspect_revoke_resource_config->oauth_scope == NULL) {\n            p_config->introspect_revoke_resource_config->oauth_scope = o_strdup(json_string_value(j_element));\n          } else {\n            p_config->introspect_revoke_resource_config->oauth_scope = mstrcatf(p_config->introspect_revoke_resource_config->oauth_scope, \" %s\", json_string_value(j_element));\n          }\n        }\n        p_config->introspect_revoke_resource_config->realm = NULL;\n        p_config->introspect_revoke_resource_config->accept_access_token = 1;\n        p_config->introspect_revoke_resource_config->accept_client_token = 1;\n        p_config->introspect_revoke_resource_config->jwt = r_jwt_copy(p_config->glewlwyd_resource_config->jwt);\n        p_config->introspect_revoke_resource_config->alg = alg;\n        if (\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"introspect/\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_intropect_revoke, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"introspect/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_introspection, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"revoke/\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_intropect_revoke, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"revoke/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_revocation, (void*)*cls) != G_OK\n          ) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - oauth2 - Error adding introspect/revoke endpoints\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      }\n\n      if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {\n        if (\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"device_authorization/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_device_authorization, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"device/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_device_verification, (void*)*cls) != G_OK\n        ) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - oauth2 - Error adding device-authorization endpoints\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (json_object_get(p_config->j_params, \"device-authorization-expiration\") == NULL) {\n          json_object_set_new(p_config->j_params, \"device-authorization-expiration\", json_integer(GLEWLWYD_DEVICE_AUTH_DEFAUT_EXPIRATION));\n        }\n        if (json_object_get(p_config->j_params, \"device-authorization-interval\") == NULL) {\n          json_object_set_new(p_config->j_params, \"device-authorization-interval\", json_integer(GLEWLWYD_DEVICE_AUTH_DEFAUT_INTERVAL));\n        }\n      }\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CODE, \"Total number of code provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, \"Total number of device code provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, \"Total number of refresh tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, \"Total number of access tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, \"Total number of client tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, \"Total number of unauthorized client attempt\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_CODE, \"Total number of invalid code\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, \"Total number of invalid device code\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, \"Total number of invalid refresh token\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, \"Total number of invalid access token\");\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CODE, 0, \"plugin\", name, NULL);\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, NULL);\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n      if (json_object_get(p_config->j_params, \"auth-type-code-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_CODE, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-password-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-client-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-implicit-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"token\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-refresh-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"refresh_token\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n      }\n\n    } while (0);\n    json_decref(j_result);\n    r_jwk_free(key_priv);\n    r_jwk_free(key_pub);\n    if (j_return == NULL) {\n      j_return = json_pack(\"{si}\", \"result\", G_OK);\n    } else {\n      if (p_config != NULL) {\n        if (p_config->introspect_revoke_resource_config != NULL) {\n          o_free(p_config->introspect_revoke_resource_config->oauth_scope);\n          o_free(p_config->introspect_revoke_resource_config->realm);\n          r_jwt_free(p_config->introspect_revoke_resource_config->jwt);\n          o_free(p_config->introspect_revoke_resource_config);\n        }\n        if (p_config->glewlwyd_resource_config != NULL) {\n          o_free(p_config->glewlwyd_resource_config->oauth_scope);\n          o_free(p_config->glewlwyd_resource_config->realm);\n          r_jwt_free(p_config->glewlwyd_resource_config->jwt);\n          o_free(p_config->glewlwyd_resource_config);\n        }\n        r_jwt_free(p_config->jwt_key);\n        json_decref(p_config->j_params);\n        pthread_mutex_destroy(&p_config->insert_lock);\n        o_free(p_config);\n      }\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for cls\");\n    o_free(*cls);\n    *cls = NULL;\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n  }\n  return j_return;\n}\n\nint plugin_module_close(struct config_plugin * config, const char * name, void * cls) {\n  UNUSED(name);\n  if (cls != NULL) {\n    y_log_message(Y_LOG_LEVEL_INFO, \"Close plugin Glewlwyd Oauth2 '%s'\", name);\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"auth/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"profile/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"profile/token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"DELETE\", name, \"profile/token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"DELETE\", name, \"profile/token/:token_hash\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"*\", name, \"profile/*\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"*\", name, \"profile/token/*\");\n\n    if (((struct _oauth2_config *)cls)->introspect_revoke_resource_config != NULL) {\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"introspect/\");\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"revoke/\");\n      o_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config->oauth_scope);\n      r_jwt_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config->jwt);\n      o_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config);\n    }\n    if (((struct _oauth2_config *)cls)->glewlwyd_resource_config != NULL) {\n      o_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config->oauth_scope);\n      r_jwt_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config->jwt);\n      o_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config);\n    }\n    if (json_object_get(((struct _oauth2_config *)cls)->j_params, \"auth-type-device-enabled\") == json_true()) {\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"device_authorization/\");\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"device/\");\n    }\n    r_jwt_free(((struct _oauth2_config *)cls)->jwt_key);\n    json_decref(((struct _oauth2_config *)cls)->j_params);\n    pthread_mutex_destroy(&((struct _oauth2_config *)cls)->insert_lock);\n    o_free(cls);\n  }\n  return G_OK;\n}\n\nint plugin_user_revoke(struct config_plugin * config, const char * username, void * cls) {\n  UNUSED(config);\n  // Disable all data for user 'username', then remove entry in subject identifier table\n  if (disable_user_data((struct _oauth2_config *)cls, username) == G_OK) {\n    return G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_user_revoke - oauth2 - Error disable_user_data\");\n    return G_ERROR;\n  }\n}\n"], "fixing_code": ["/**\n *\n * Glewlwyd SSO Server\n *\n * Authentiation server\n * Users are authenticated via various backend available: database, ldap\n * Using various authentication methods available: password, OTP, send code, etc.\n *\n * Legacy (Glewlwyd 1.x) OAuth2 plugin\n *\n * Copyright 2016-2020 Nicolas Mora <mail@babelouest.org>\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU GENERAL PUBLIC LICENSE\n * License as published by the Free Software Foundation;\n * version 3 of the License.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU GENERAL PUBLIC LICENSE for more details.\n *\n * You should have received a copy of the GNU General Public\n * License along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n#include <string.h>\n#include <ctype.h>\n#include <pthread.h>\n#include <jansson.h>\n#include <yder.h>\n#include <orcania.h>\n#include <ulfius.h>\n#include <rhonabwy.h>\n#include \"glewlwyd-common.h\"\n#include \"glewlwyd_resource.h\"\n\n#define OAUTH2_SALT_LENGTH 16\n\n#define GLEWLWYD_ACCESS_TOKEN_EXP_DEFAULT 3600\n#define GLEWLWYD_REFRESH_TOKEN_EXP_DEFAULT 1209600\n#define GLEWLWYD_CODE_EXP_DEFAULT 600\n#define GLEWLWYD_CODE_CHALLENGE_MAX_LENGTH 128\n#define GLEWLWYD_CODE_CHALLENGE_S256_PREFIX \"{SHA256}\"\n\n#define GLEWLWYD_CHECK_JWT_USERNAME \"myrddin\"\n#define GLEWLWYD_CHECK_JWT_SCOPE    \"caledonia\"\n\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE                       \"gpg_code\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE                 \"gpg_code_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN              \"gpg_refresh_token\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE        \"gpg_refresh_token_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN               \"gpg_access_token\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE         \"gpg_access_token_scope\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION       \"gpg_device_authorization\"\n#define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE \"gpg_device_authorization_scope\"\n\n#define GLWD_METRICS_OAUTH2_CODE                        \"glewlwyd_oauth2_code\"\n#define GLWD_METRICS_OAUTH2_DEVICE_CODE                 \"glewlwyd_oauth2_device_code\"\n#define GLWD_METRICS_OAUTH2_REFRESH_TOKEN               \"glewlwyd_oauth2_refresh_token\"\n#define GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN           \"glewlwyd_oauth2_access_token\"\n#define GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN         \"glewlwyd_oauth2_client_token\"\n#define GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT         \"glewlwyd_oauth2_unauthorized_client\"\n#define GLWD_METRICS_OAUTH2_INVALID_CODE                \"glewlwyd_oauth2_invalid_code\"\n#define GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE         \"glewlwyd_oauth2_invalid_device_code\"\n#define GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN       \"glewlwyd_oauth2_invalid_refresh_token\"\n#define GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN        \"glewlwyd_oauth2_invalid_acccess_token\"\n\n// Authorization types available\n#define GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE                  0\n#define GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT                            1\n#define GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS 2\n#define GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS                  3\n#define GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN                       4\n#define GLEWLWYD_AUTHORIZATION_TYPE_DELETE_TOKEN                        5\n#define GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION                6\n\n#define GLEWLWYD_DEVICE_AUTH_DEFAUT_EXPIRATION  600\n#define GLEWLWYD_DEVICE_AUTH_DEFAUT_INTERVAL    5\n#define GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH 32\n#define GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH   8\n\nstruct _oauth2_config {\n  struct config_plugin             * glewlwyd_config;\n  jwt_t                            * jwt_key;\n  const char                       * name;\n  json_t                           * j_params;\n  json_int_t                         access_token_duration;\n  json_int_t                         refresh_token_duration;\n  json_int_t                         code_duration;\n  unsigned short int                 refresh_token_rolling;\n  unsigned short int                 auth_type_enabled[5];\n  pthread_mutex_t                    insert_lock;\n  struct _glewlwyd_resource_config * glewlwyd_resource_config;\n  struct _glewlwyd_resource_config * introspect_revoke_resource_config;\n};\n\nstatic json_t * check_parameters (json_t * j_params) {\n  json_t * j_element = NULL, * j_return, * j_error = json_array();\n  size_t index = 0;\n  int ret = G_OK;\n\n  if (j_error != NULL) {\n    if (j_params == NULL) {\n      json_array_append_new(j_error, json_string(\"parameters invalid\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"jwt-type\") == NULL || !json_is_string(json_object_get(j_params, \"jwt-type\"))) {\n      json_array_append_new(j_error, json_string(\"jwt-type must be a string and have one of the following values: 'rsa', 'ecdsa', 'sha', 'rsa-pss', 'eddsa'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 != o_strcmp(\"rsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"ecdsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"sha\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"rsa-pss\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n        0 != o_strcmp(\"eddsa\", json_string_value(json_object_get(j_params, \"jwt-type\")))) {\n      json_array_append_new(j_error, json_string(\"jwt-type must be a string and have one of the following values: 'rsa', 'ecdsa', 'sha', 'rsa-pss', 'eddsa'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"jwt-key-size\") == NULL || !json_is_string(json_object_get(j_params, \"jwt-key-size\"))) {\n      json_array_append_new(j_error, json_string(\"jwt-key-size must be a string and have one of the following values: '256', '384', '512'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 != o_strcmp(\"256\", json_string_value(json_object_get(j_params, \"jwt-key-size\"))) &&\n               0 != o_strcmp(\"384\", json_string_value(json_object_get(j_params, \"jwt-key-size\"))) &&\n               0 != o_strcmp(\"512\", json_string_value(json_object_get(j_params, \"jwt-key-size\")))) {\n      json_array_append_new(j_error, json_string(\"jwt-key-size must be a string and have one of the following values: '256', '384', '512'\"));\n      ret = G_ERROR_PARAM;\n    }\n    if ((0 == o_strcmp(\"rsa\", json_string_value(json_object_get(j_params, \"jwt-type\"))) ||\n                0 == o_strcmp(\"ecdsa\", json_string_value(json_object_get(j_params, \"jwt-type\")))) &&\n               (json_object_get(j_params, \"key\") == NULL || json_object_get(j_params, \"cert\") == NULL ||\n               !json_is_string(json_object_get(j_params, \"key\")) || !json_is_string(json_object_get(j_params, \"cert\")) || json_string_null_or_empty(json_object_get(j_params, \"key\")) || json_string_null_or_empty(json_object_get(j_params, \"cert\")))) {\n      json_array_append_new(j_error, json_string(\"Properties 'cert' and 'key' are mandatory and must be strings\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(j_params, \"jwt-type\"))) &&\n              (json_object_get(j_params, \"key\") == NULL || !json_is_string(json_object_get(j_params, \"key\")) || json_string_null_or_empty(json_object_get(j_params, \"key\")))) {\n      json_array_append_new(j_error, json_string(\"Property 'key' is mandatory and must be a string\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"access-token-duration\") == NULL || !json_is_integer(json_object_get(j_params, \"access-token-duration\")) || json_integer_value(json_object_get(j_params, \"access-token-duration\")) <= 0) {\n      json_array_append_new(j_error, json_string(\"Property 'access-token-duration' is mandatory and must be a non null positive integer\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"refresh-token-duration\") == NULL || !json_is_integer(json_object_get(j_params, \"refresh-token-duration\")) || json_integer_value(json_object_get(j_params, \"refresh-token-duration\")) <= 0) {\n      json_array_append_new(j_error, json_string(\"Property 'refresh-token-duration' is mandatory and must be a non null positive integer\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"refresh-token-rolling\") != NULL && !json_is_boolean(json_object_get(j_params, \"refresh-token-rolling\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'refresh-token-rolling' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-code-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-code-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-code-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-implicit-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-implicit-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-implicit-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-password-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-password-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-password-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-client-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-client-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-client-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-device-enabled\") != NULL && !json_is_boolean(json_object_get(j_params, \"auth-type-device-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-device-enabled' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"auth-type-refresh-enabled\") == NULL || !json_is_boolean(json_object_get(j_params, \"auth-type-refresh-enabled\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'auth-type-refresh-enabled' is mandatory and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"scope\") != NULL) {\n      if (!json_is_array(json_object_get(j_params, \"scope\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'scope' is optional and must be an array\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"scope\"), index, j_element) {\n          if (!json_is_object(j_element)) {\n            json_array_append_new(j_error, json_string(\"'scope' element must be a JSON object\"));\n            ret = G_ERROR_PARAM;\n          } else {\n            if (json_object_get(j_element, \"name\") == NULL || !json_is_string(json_object_get(j_element, \"name\")) || json_string_null_or_empty(json_object_get(j_element, \"name\"))) {\n              json_array_append_new(j_error, json_string(\"'scope' element must have a property 'name' of type string and non empty\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && !json_is_boolean(json_object_get(j_element, \"refresh-token-rolling\"))) {\n              json_array_append_new(j_error, json_string(\"'scope' element can have a property 'refresh-token-rolling' of type boolean\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"refresh-token-duration\") != NULL && (!json_is_integer(json_object_get(j_element, \"refresh-token-duration\")) || json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < 0)) {\n              json_array_append_new(j_error, json_string(\"'scope' element can have a property 'refresh-token-duration' of type integer and non null positive value\"));\n              ret = G_ERROR_PARAM;\n            }\n          }\n        }\n      }\n    } else if (json_object_get(j_params, \"additional-parameters\") != NULL) {\n      if (!json_is_array(json_object_get(j_params, \"additional-parameters\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'additional-parameters' is optional and must be an array\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"additional-parameters\"), index, j_element) {\n          if (!json_is_object(j_element)) {\n            json_array_append_new(j_error, json_string(\"'additional-parameters' element must be a JSON object\"));\n            ret = G_ERROR_PARAM;\n          } else {\n            if ((json_object_get(j_element, \"user-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"user-parameter\"))) &&\n                (json_object_get(j_element, \"client-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"client-parameter\")))) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'user-parameter' or 'client-parameter' of type string\"));\n              ret = G_ERROR_PARAM;\n            } else if (json_object_get(j_element, \"token-parameter\") == NULL || !json_is_string(json_object_get(j_element, \"token-parameter\")) || json_string_null_or_empty(json_object_get(j_element, \"token-parameter\"))) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'token-parameter' of type string and non empty, forbidden values are: 'username', 'salt', 'type', 'iat', 'expires_in', 'scope'\"));\n              ret = G_ERROR_PARAM;\n            } else if (0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"username\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"salt\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"type\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"iat\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"expires_in\") ||\n                       0 == o_strcmp(json_string_value(json_object_get(j_element, \"token-parameter\")), \"scope\")) {\n              json_array_append_new(j_error, json_string(\"'additional-parameters' element must have a property 'token-parameter' of type string and non empty, forbidden values are: 'username', 'salt', 'type', 'iat', 'expires_in', 'scope'\"));\n              ret = G_ERROR_PARAM;\n            }\n          }\n        }\n      }\n    }\n    if (json_object_get(j_params, \"pkce-allowed\") != NULL && !json_is_boolean(json_object_get(j_params, \"pkce-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'pkce-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"pkce-method-plain-allowed\") != NULL && json_object_get(j_params, \"pkce-allowed\") == json_true() && !json_is_boolean(json_object_get(j_params, \"pkce-method-plain-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'pkce-method-plain-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"introspection-revocation-allowed\") != NULL && !json_is_boolean(json_object_get(j_params, \"introspection-revocation-allowed\"))) {\n      json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-allowed' is optional and must be a boolean\"));\n      ret = G_ERROR_PARAM;\n    }\n    if (json_object_get(j_params, \"introspection-revocation-allowed\") == json_true()) {\n      if (json_object_get(j_params, \"introspection-revocation-auth-scope\") != NULL && !json_is_array(json_object_get(j_params, \"introspection-revocation-auth-scope\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-auth-scope' is optional and must be a JSON array of strings, maximum 128 characters\"));\n        ret = G_ERROR_PARAM;\n      } else {\n        json_array_foreach(json_object_get(j_params, \"introspection-revocation-auth-scope\"), index, j_element) {\n          if (!json_is_string(j_element) || json_string_length(j_element) > 128) {\n            json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-auth-scope' is optional and must be a JSON array of strings, maximum 128 characters\"));\n            ret = G_ERROR_PARAM;\n          }\n        }\n      }\n      if (json_object_get(j_params, \"introspection-revocation-allow-target-client\") != NULL && !json_is_boolean(json_object_get(j_params, \"introspection-revocation-allow-target-client\"))) {\n        json_array_append_new(j_error, json_string(\"Property 'introspection-revocation-allow-target-client' is optional and must be a boolean\"));\n        ret = G_ERROR_PARAM;\n      }\n    }\n    if (json_object_get(j_params, \"auth-type-device-enabled\") == json_true()) {\n      if (json_object_get(j_params, \"device-authorization-expiration\") != NULL && json_integer_value(json_object_get(j_params, \"device-authorization-expiration\")) <= 0) {\n        json_array_append_new(j_error, json_string(\"Property 'device-authorization-expiration' is optional and must be a non null positive integer\"));\n        ret = G_ERROR_PARAM;\n      }\n      if (json_object_get(j_params, \"device-authorization-interval\") != NULL && json_integer_value(json_object_get(j_params, \"device-authorization-interval\")) <= 0) {\n        json_array_append_new(j_error, json_string(\"Property 'device-authorization-interval' is optional and must be a non null positive integer\"));\n        ret = G_ERROR_PARAM;\n      }\n    }\n    if (json_array_size(j_error) && ret == G_ERROR_PARAM) {\n      j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", j_error);\n    } else {\n      j_return = json_pack(\"{si}\", \"result\", ret);\n    }\n    json_decref(j_error);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"check_parameters oauth2 - Error allocating resources for j_error\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n  }\n  return j_return;\n}\n\n/**\n *\n * Generates a query string based on url and post parameters of a request\n * Returned value must be o_free'd after use\n *\n */\nstatic char * generate_query_parameters(struct _u_map * map_url, struct _u_map * map_post_body) {\n  char * query = NULL, * param, * tmp, * value;\n  const char ** keys;\n  int i;\n\n  if (map_url == NULL && map_post_body == NULL) {\n    return NULL;\n  } else {\n    if (map_url != NULL) {\n      keys = u_map_enum_keys(map_url);\n      for (i=0; keys[i] != NULL; i++) {\n        value = ulfius_url_encode((char *)u_map_get(map_url, keys[i]));\n        param = msprintf(\"%s=%s\", keys[i], value);\n        o_free(value);\n        if (query == NULL) {\n          query = o_strdup(param);\n        } else {\n          tmp = msprintf(\"%s&%s\", query, param);\n          o_free(query);\n          query = tmp;\n        }\n        o_free(param);\n      }\n    }\n\n    if (map_post_body != NULL) {\n      keys = u_map_enum_keys(map_post_body);\n      for (i=0; keys[i] != NULL; i++) {\n        value = ulfius_url_encode((char *)u_map_get(map_post_body, keys[i]));\n        param = msprintf(\"%s=%s\", keys[i], value);\n        o_free(value);\n        if (query == NULL) {\n          query = o_strdup(param);\n        } else {\n          tmp = msprintf(\"%s&%s\", query, param);\n          o_free(query);\n          query = tmp;\n        }\n        o_free(param);\n      }\n    }\n  }\n\n  return query;\n}\n\nstatic int serialize_access_token(struct _oauth2_config * config, uint auth_type, json_int_t gpgr_id, const char * username, const char * client_id, const char * scope_list, time_t now, const char * issued_for, const char * user_agent, const char * access_token) {\n  json_t * j_query, * j_last_id;\n  int res, ret, i;\n  char * issued_at_clause, ** scope_array = NULL, * access_token_hash = NULL;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error pthread_mutex_lock\");\n    ret = G_ERROR;\n  } else {\n    if ((access_token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, access_token)) != NULL) {\n      if (issued_for != NULL && now > 0) {\n        if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n          issued_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n        } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n          issued_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n        } else { // HOEL_DB_TYPE_SQLITE\n          issued_at_clause = msprintf(\"%u\", (now));\n        }\n        j_query = json_pack(\"{sss{sssisososos{ss}ssssss}}\",\n                            \"table\",\n                            GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                            \"values\",\n                              \"gpga_plugin_name\",\n                              config->name,\n                              \"gpga_authorization_type\",\n                              auth_type,\n                              \"gpgr_id\",\n                              gpgr_id?json_integer(gpgr_id):json_null(),\n                              \"gpga_username\",\n                              username!=NULL?json_string(username):json_null(),\n                              \"gpga_client_id\",\n                              client_id!=NULL?json_string(client_id):json_null(),\n                              \"gpga_issued_at\",\n                                \"raw\",\n                                issued_at_clause,\n                              \"gpga_issued_for\",\n                              issued_for,\n                              \"gpga_user_agent\",\n                              user_agent!=NULL?user_agent:\"\",\n                              \"gpga_token_hash\",\n                              access_token_hash);\n        o_free(issued_at_clause);\n        res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n        json_decref(j_query);\n        if (res == H_OK) {\n          j_last_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n          if (j_last_id != NULL) {\n            if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n              j_query = json_pack(\"{sss[]}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE,\n                                  \"values\");\n              if (j_query != NULL) {\n                for (i=0; scope_array[i] != NULL; i++) {\n                  json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpga_id\", j_last_id, \"gpgas_scope\", scope_array[i]));\n                }\n                res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                json_decref(j_query);\n                if (res == H_OK) {\n                  ret = G_OK;\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error executing j_query (2)\");\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n                  ret = G_ERROR_DB;\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error json_pack\");\n                ret = G_ERROR;\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error split_string_remove_duplicates\");\n              ret = G_ERROR;\n            }\n            free_string_array(scope_array);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error h_last_insert_id\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            ret = G_ERROR_DB;\n          }\n          json_decref(j_last_id);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error executing j_query (1)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          ret = G_ERROR_DB;\n        }\n      } else {\n        ret = G_ERROR_PARAM;\n      }\n      o_free(access_token_hash);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_access_token - oauth2 - Error glewlwyd_callback_generate_hash\");\n      ret = G_ERROR;\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return ret;\n}\n\n/**\n * Generates a client_access_token from the specified parameters that are considered valid\n */\nstatic char * generate_client_access_token(struct _oauth2_config * config, const char * client_id, const char * scope_list, json_t * j_client, time_t now, const char * ip_source) {\n  jwt_t * jwt;\n  char * token = NULL, * property = NULL;\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n  json_t * j_element = NULL, * j_value;\n  size_t index = 0, index_p = 0;\n\n  jwt = r_jwt_copy(config->jwt_key);\n  if (jwt != NULL) {\n    // Build jwt payload\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    if (json_object_get(config->j_params, \"additional-parameters\") != NULL && j_client != NULL) {\n      json_array_foreach(json_object_get(config->j_params, \"additional-parameters\"), index, j_element) {\n        if (!json_string_null_or_empty(json_object_get(j_element, \"client-parameter\"))) {\n          if (json_is_string(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\")))) && !json_string_null_or_empty(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))))) {\n            r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), json_string_value(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\")))));\n          } else if (json_is_array(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))))) {\n            json_array_foreach(json_object_get(j_client, json_string_value(json_object_get(j_element, \"client-parameter\"))), index_p, j_value) {\n              property = mstrcatf(property, \",%s\", json_string_value(j_value));\n            }\n            if (!o_strnullempty(property)) {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), property+1); // Skip first ','\n            } else {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), \"\");\n            }\n            o_free(property);\n            property = NULL;\n          }\n        }\n      }\n    }\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"client_id\", client_id);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"client_token\");\n    r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    r_jwt_set_claim_int_value(jwt, \"expires_in\", config->access_token_duration);\n    r_jwt_set_claim_int_value(jwt, \"exp\", (((json_int_t)now)+config->access_token_duration));\n    r_jwt_set_claim_int_value(jwt, \"nbf\", now);\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_client_access_token - oauth2 - Error generating token\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' with scope list '%s', origin: %s\", config->name, client_id, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_client_access_token - oauth2 - Error cloning jwt\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic char * generate_access_token(struct _oauth2_config * config, const char * username, const char * client_id, json_t * j_user, const char * scope_list, time_t now, const char * ip_source) {\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n  jwt_t * jwt = NULL;\n  char * token = NULL, * property = NULL;\n  json_t * j_element = NULL, * j_value;\n  size_t index = 0, index_p = 0;\n\n  if ((jwt = r_jwt_copy(config->jwt_key)) != NULL) {\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    if (json_object_get(config->j_params, \"additional-parameters\") != NULL && j_user != NULL) {\n      json_array_foreach(json_object_get(config->j_params, \"additional-parameters\"), index, j_element) {\n        if (!json_string_null_or_empty(json_object_get(j_element, \"user-parameter\"))) {\n          if (json_is_string(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\")))) && !json_string_null_or_empty(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))))) {\n            r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), json_string_value(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\")))));\n          } else if (json_is_array(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))))) {\n            json_array_foreach(json_object_get(j_user, json_string_value(json_object_get(j_element, \"user-parameter\"))), index_p, j_value) {\n              property = mstrcatf(property, \",%s\", json_string_value(j_value));\n            }\n            if (!o_strnullempty(property)) {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), property+1); // Skip first ','\n            } else {\n              r_jwt_set_claim_str_value(jwt, json_string_value(json_object_get(j_element, \"token-parameter\")), \"\");\n            }\n            o_free(property);\n            property = NULL;\n          }\n        }\n      }\n    }\n    r_jwt_set_claim_str_value(jwt, \"username\", username);\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"access_token\");\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    r_jwt_set_claim_int_value(jwt, \"expires_in\", config->access_token_duration);\n    r_jwt_set_claim_int_value(jwt, \"exp\", (((json_int_t)now)+config->access_token_duration));\n    r_jwt_set_claim_int_value(jwt, \"nbf\", now);\n    if (scope_list != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    }\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_access_token - oauth2 - oauth2 - Error jwt_encode_str\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' granted by user '%s' with scope list '%s', origin: %s\", config->name, client_id, username, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_access_token - oauth2 - Error jwt_dup\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic json_t * serialize_refresh_token(struct _oauth2_config * config, uint auth_type, json_int_t gpgc_id, const char * username, const char * client_id, const char * scope_list, time_t now, json_int_t duration, uint rolling, const char * token, const char * issued_for, const char * user_agent) {\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n  json_t * j_query, * j_return, * j_last_id;\n  int res, i;\n  char * issued_at_clause, * expires_at_clause, * last_seen_clause, ** scope_array = NULL;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error pthread_mutex_lock\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  } else {\n    if (token_hash != NULL && username != NULL && issued_for != NULL && now > 0 && duration > 0) {\n      json_error_t error;\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        issued_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        issued_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n      } else { // HOEL_DB_TYPE_SQLITE\n        issued_at_clause = msprintf(\"%u\", (now));\n      }\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        last_seen_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        last_seen_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now));\n      } else { // HOEL_DB_TYPE_SQLITE\n        last_seen_clause = msprintf(\"%u\", (now));\n      }\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)duration));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)duration ));\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"%u\", (now + (time_t)duration));\n      }\n      j_query = json_pack_ex(&error, 0, \"{sss{ss si so ss so s{ss} s{ss} s{ss} sI si ss ss ss}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"values\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_authorization_type\",\n                            auth_type,\n                            \"gpgc_id\",\n                            gpgc_id?json_integer(gpgc_id):json_null(),\n                            \"gpgr_username\",\n                            username,\n                            \"gpgr_client_id\",\n                            client_id!=NULL?json_string(client_id):json_null(),\n                            \"gpgr_issued_at\",\n                              \"raw\",\n                              issued_at_clause,\n                            \"gpgr_last_seen\",\n                              \"raw\",\n                              last_seen_clause,\n                            \"gpgr_expires_at\",\n                              \"raw\",\n                              expires_at_clause,\n                            \"gpgr_duration\",\n                            duration,\n                            \"gpgr_rolling_expiration\",\n                            rolling,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_issued_for\",\n                            issued_for,\n                            \"gpgr_user_agent\",\n                            user_agent!=NULL?user_agent:\"\");\n      o_free(issued_at_clause);\n      o_free(expires_at_clause);\n      o_free(last_seen_clause);\n      res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        j_last_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n        if (j_last_id != NULL) {\n          if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n            j_query = json_pack(\"{sss[]}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                                \"values\");\n            if (j_query != NULL) {\n              for (i=0; scope_array[i] != NULL; i++) {\n                json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgr_id\", j_last_id, \"gpgrs_scope\", scope_array[i]));\n              }\n              res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"gpgr_id\", j_last_id);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error executing j_query (2)\");\n                config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n                j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error json_pack\");\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error split_string_remove_duplicates\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n          free_string_array(scope_array);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error h_last_insert_id\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n        json_decref(j_last_id);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"serialize_refresh_token - oauth2 - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n    }\n    o_free(token_hash);\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return j_return;\n}\n\nstatic char * generate_refresh_token(struct _oauth2_config * config, const char * client_id, const char * username, const char * scope_list, time_t now, const char * ip_source) {\n  jwt_t * jwt;\n  char * token = NULL;\n  char salt[OAUTH2_SALT_LENGTH + 1] = {0};\n\n  if ((jwt = r_jwt_copy(config->jwt_key)) != NULL) {\n    // Build jwt payload\n    rand_string_nonce(salt, OAUTH2_SALT_LENGTH);\n    r_jwt_set_claim_str_value(jwt, \"salt\", salt);\n    r_jwt_set_claim_str_value(jwt, \"username\", username);\n    r_jwt_set_claim_str_value(jwt, \"type\", \"refresh_token\");\n    r_jwt_set_claim_int_value(jwt, \"iat\", now);\n    if (scope_list != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"scope\", scope_list);\n    }\n    if (client_id != NULL) {\n      r_jwt_set_claim_str_value(jwt, \"client_id\", client_id);\n    }\n    token = r_jwt_serialize_signed(jwt, NULL, 0);\n    if (token == NULL) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_refresh_token - oauth2 - generating token\");\n    } else {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' granted by user '%s' with scope list '%s', origin: %s\", config->name, client_id, username, scope_list, ip_source);\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"oauth2 generate_refresh_token - Error cloning jwt\");\n  }\n  r_jwt_free(jwt);\n  return token;\n}\n\nstatic int is_authorization_type_enabled(struct _oauth2_config * config, uint authorization_type) {\n  return (authorization_type <= 4)?config->auth_type_enabled[authorization_type]:0;\n}\n\nstatic json_t * check_client_valid(struct _oauth2_config * config, const char * client_id, const char * client_header_login, const char * client_header_password, const char * redirect_uri, unsigned short authorization_type, int implicit_flow, const char * ip_source) {\n  json_t * j_client, * j_element = NULL, * j_return;\n  int uri_found = 0, authorization_type_enabled;\n  size_t index = 0;\n\n  if (client_id == NULL) {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error client_id is NULL, origin: %s\", ip_source);\n    return json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  } else if (client_header_login != NULL && 0 != o_strcmp(client_header_login, client_id)) {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, client_id specified is different from client_id in the basic auth header, origin: %s\", ip_source);\n    return json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, client_id, client_header_password);\n  if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"enabled\") == json_true()) {\n    if (!implicit_flow && client_header_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, confidential client must be authentified with its password, origin: %s\", ip_source);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n    } else {\n      if (redirect_uri != NULL) {\n        json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"redirect_uri\"), index, j_element) {\n          if (0 == o_strcmp(json_string_value(j_element), redirect_uri)) {\n            uri_found = 1;\n          }\n        }\n      }\n\n      authorization_type_enabled = 0;\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE && 0 == o_strcmp(json_string_value(j_element), \"code\")) {\n          authorization_type_enabled = 1;\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT && 0 == o_strcmp(json_string_value(j_element), \"token\")) {\n          authorization_type_enabled = 1;\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS && 0 == o_strcmp(json_string_value(j_element), \"password\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN && 0 == o_strcmp(json_string_value(j_element), \"refresh_token\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_DELETE_TOKEN && 0 == o_strcmp(json_string_value(j_element), \"delete_token\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        } else if (authorization_type == GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION && 0 == o_strcmp(json_string_value(j_element), \"device_authorization\")) {\n          authorization_type_enabled = 1;\n          uri_found = 1; // bypass redirect_uri check for client credentials since it's not needed\n        }\n      }\n      if (!uri_found) {\n        y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, redirect_uri '%s' is invalid for the client '%s', origin: %s\", redirect_uri, client_id, ip_source);\n      }\n      if (!authorization_type_enabled) {\n        y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, authorization type is not enabled for the client '%s', origin: %s\", client_id, ip_source);\n      }\n      if (uri_found && authorization_type_enabled) {\n        j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"client\", json_object_get(j_client, \"client\"));\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n      }\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_client_valid - oauth2 - Error, client '%s' is invalid, origin: %s\", client_id, ip_source);\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n  }\n  json_decref(j_client);\n  return j_return;\n}\n\nstatic char * generate_authorization_code(struct _oauth2_config * config, const char * username, const char * client_id, const char * scope_list, const char * redirect_uri, const char * issued_for, const char * user_agent, const char * code_challenge) {\n  char * code = NULL, * code_hash = NULL, * expiration_clause, ** scope_array = NULL;\n  json_t * j_query, * j_code_id;\n  int res, i;\n  time_t now;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error pthread_mutex_lock\");\n  } else {\n    code = o_malloc(33);\n    if (code != NULL) {\n      if (rand_string_nonce(code, 32) != NULL) {\n        code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code);\n        if (code_hash != NULL) {\n          time(&now);\n          if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n            expiration_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)config->code_duration ));\n          } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n            expiration_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)config->code_duration ));\n          } else { // HOEL_DB_TYPE_SQLITE\n            expiration_clause = msprintf(\"%u\", (now + (time_t)config->code_duration ));\n          }\n          j_query = json_pack(\"{sss{sssssssssssssss{ss}ss}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                              \"values\",\n                                \"gpgc_plugin_name\",\n                                config->name,\n                                \"gpgc_username\",\n                                username,\n                                \"gpgc_client_id\",\n                                client_id,\n                                \"gpgc_redirect_uri\",\n                                redirect_uri,\n                                \"gpgc_code_hash\",\n                                code_hash,\n                                \"gpgc_issued_for\",\n                                issued_for,\n                                \"gpgc_user_agent\",\n                                user_agent!=NULL?user_agent:\"\",\n                                \"gpgc_expires_at\",\n                                  \"raw\",\n                                  expiration_clause,\n                                \"gpgc_code_challenge\",\n                                code_challenge);\n          o_free(expiration_clause);\n          res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n          json_decref(j_query);\n          if (res != H_OK) {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error executing j_query (1)\");\n            o_free(code);\n            code = NULL;\n          } else {\n            if (scope_list != NULL) {\n              j_code_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n              if (j_code_id != NULL) {\n                j_query = json_pack(\"{sss[]}\",\n                                    \"table\",\n                                    GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE,\n                                    \"values\");\n                if (split_string_remove_duplicates(scope_list, \" \", &scope_array) > 0) {\n                  for (i=0; scope_array[i] != NULL; i++) {\n                    json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgc_id\", j_code_id, \"gpgcs_scope\", scope_array[i]));\n                  }\n                  res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                  json_decref(j_query);\n                  if (res != H_OK) {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error executing j_query (2)\");\n                    o_free(code);\n                    code = NULL;\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error split_string_remove_duplicates\");\n                  o_free(code);\n                  code = NULL;\n                }\n                free_string_array(scope_array);\n                json_decref(j_code_id);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error h_last_insert_id\");\n                o_free(code);\n                code = NULL;\n              }\n            }\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error glewlwyd_callback_generate_hash\");\n          o_free(code);\n          code = NULL;\n        }\n        o_free(code_hash);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error rand_string\");\n        o_free(code);\n        code = NULL;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_authorization_code - oauth2 - Error allocating resources for code\");\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n\n  return code;\n}\n\nstatic char * get_login_url(struct _oauth2_config * config, const struct _u_request * request, const char * url, const char * client_id, const char * scope_list, struct _u_map * additional_parameters) {\n  char * plugin_url = config->glewlwyd_config->glewlwyd_callback_get_plugin_external_url(config->glewlwyd_config, json_string_value(json_object_get(config->j_params, \"name\"))),\n       * url_params = generate_query_parameters(request->map_url, NULL),\n       * url_callback = msprintf(\"%s/%s%s%s\", plugin_url, url, o_strlen(url_params)?\"?\":\"\", url_params),\n       * login_url = config->glewlwyd_config->glewlwyd_callback_get_login_url(config->glewlwyd_config, client_id, scope_list, url_callback, additional_parameters);\n  o_free(plugin_url);\n  o_free(url_params);\n  o_free(url_callback);\n  return login_url;\n}\n\nstatic json_t * get_scope_parameters(struct _oauth2_config * config, const char * scope) {\n  json_t * j_element = NULL, * j_return = NULL;\n  size_t index = 0;\n\n  json_array_foreach(json_object_get(config->j_params, \"scope\"), index, j_element) {\n    if (0 == o_strcmp(scope, json_string_value(json_object_get(j_element, \"name\")))) {\n      j_return = json_incref(j_element);\n    }\n  }\n  return j_return;\n}\n\nstatic int disable_authorization_code(struct _oauth2_config * config, json_int_t gpgc_id) {\n  json_t * j_query;\n  int res;\n\n  j_query = json_pack(\"{sss{si}s{sssI}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                      \"set\",\n                        \"gpgc_enabled\",\n                        0,\n                      \"where\",\n                        \"gpgc_plugin_name\",\n                        config->name,\n                        \"gpgc_id\",\n                        gpgc_id);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    return G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"disable_authorization_code - oauth2 - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    return G_ERROR_DB;\n  }\n}\n\n/**\n * Characters allowed according to RFC 7636\n * [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\"\n */\nstatic int is_pkce_char_valid(const char * code_challenge) {\n  size_t i;\n\n  if (o_strlen(code_challenge) >= 43 && o_strlen(code_challenge) <= 128) {\n    for (i=0; code_challenge[i] != '\\0'; i++) {\n      if (code_challenge[i] == 0x2d || code_challenge[i] == 0x2e || code_challenge[i] == 0x5f || code_challenge[i] == 0x7e || (code_challenge[i] >= 0x30 && code_challenge[i] <= 0x39) || (code_challenge[i] >= 0x41 && code_challenge[i] <= 0x5a) || (code_challenge[i] >= 0x61 && code_challenge[i] <= 0x7a)) {\n        continue;\n      } else {\n        return 0;\n      }\n    }\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nstatic int validate_code_challenge(struct _oauth2_config * config, json_t * j_result_code, const char * code_verifier) {\n  int ret;\n  unsigned char code_verifier_hash[32] = {0}, code_verifier_hash_b64[64] = {0};\n  size_t code_verifier_hash_len = 32, code_verifier_hash_b64_len = 0;\n  gnutls_datum_t key_data;\n\n  if (json_object_get(config->j_params, \"pkce-allowed\") != json_true()) {\n    if (o_strnullempty(code_verifier)) {\n      ret = G_OK;\n    } else {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - code_verifier unauthorized\");\n      ret = G_ERROR_UNAUTHORIZED;\n    }\n  } else if ((!o_strnullempty(code_verifier) && json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\"))) || (o_strnullempty(code_verifier) && !json_string_null_or_empty(json_object_get(j_result_code, \"code_challenge\")))) {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge or code_verifier\");\n    ret = G_ERROR_UNAUTHORIZED;\n  } else {\n    if (is_pkce_char_valid(code_verifier)) {\n      if (0 == o_strncmp(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX, json_string_value(json_object_get(j_result_code, \"code_challenge\")), o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX))) {\n        key_data.data = (unsigned char *)code_verifier;\n        key_data.size = (unsigned int)o_strlen(code_verifier);\n        if (gnutls_fingerprint(GNUTLS_DIG_SHA256, &key_data, code_verifier_hash, &code_verifier_hash_len) == GNUTLS_E_SUCCESS) {\n          if (o_base64url_encode(code_verifier_hash, code_verifier_hash_len, code_verifier_hash_b64, &code_verifier_hash_b64_len)) {\n            code_verifier_hash_b64[code_verifier_hash_b64_len] = '\\0';\n            if (0 == o_strcmp(json_string_value(json_object_get(j_result_code, \"code_challenge\"))+o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX), (const char *)code_verifier_hash_b64)) {\n              ret = G_OK;\n            } else {\n              y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge value\");\n              ret = G_ERROR_UNAUTHORIZED;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"oidc validate_code_challenge - Error o_base64url_encode\");\n            ret = G_ERROR;\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"oidc validate_code_challenge - Error gnutls_fingerprint\");\n          ret = G_ERROR;\n        }\n      } else {\n        if (0 == o_strcmp(json_string_value(json_object_get(j_result_code, \"code_challenge\")), code_verifier)) {\n          ret = G_OK;\n        } else {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge value\");\n          ret = G_ERROR_UNAUTHORIZED;\n        }\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_code_challenge - Invalid code_challenge character set\");\n      ret = G_ERROR_UNAUTHORIZED;\n    }\n  }\n  return ret;\n}\n\nstatic int revoke_tokens_from_code(struct _oauth2_config * config, json_int_t gpgc_id, const char * ip_source) {\n  int ret, res;\n  char * query;\n  json_t * j_result, * j_result_r, * j_element = NULL;\n  size_t index = 0;\n\n  query = msprintf(\"SELECT gpga_client_id AS client_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN \" WHERE gpgr_id IN (SELECT gpgr_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \") AND gpga_enabled=1\", gpgc_id);\n  res = h_execute_query_json(config->glewlwyd_config->glewlwyd_config->conn, query, &j_result);\n  o_free(query);\n  if (res == H_OK) {\n    json_array_foreach(j_result, index, j_element) {\n      y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(j_element, \"client_id\")), ip_source);\n    }\n    json_decref(j_result);\n    query = msprintf(\"SELECT gpgr_client_id AS client_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \" AND gpgr_enabled=1\", gpgc_id);\n    res = h_execute_query_json(config->glewlwyd_config->glewlwyd_config->conn, query, &j_result_r);\n    o_free(query);\n    if (res == H_OK) {\n      if (json_array_size(j_result_r)) {\n        y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_array_get(j_result_r, 0), \"client_id\")), ip_source);\n      }\n      json_decref(j_result_r);\n      query = msprintf(\"UPDATE \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN \" SET gpga_enabled='0' WHERE gpgr_id IN (SELECT gpgr_id FROM \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" WHERE gpgc_id=%\" JSON_INTEGER_FORMAT \")\", gpgc_id);\n      res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n      o_free(query);\n      if (res == H_OK) {\n        query = msprintf(\"UPDATE \" GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN \" SET gpgr_enabled='0' WHERE gpgc_id=%\" JSON_INTEGER_FORMAT, gpgc_id);\n        res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n        o_free(query);\n        if (res == H_OK) {\n          ret = G_OK;\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_tokens_from_code - oauth2 - Error executing query (4)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          ret = G_ERROR_DB;\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_tokens_from_code - oauth2 - Error executing query (3)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        ret = G_ERROR_DB;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"oidc revoke_tokens_from_code - Error executing query (2)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      ret = G_ERROR_DB;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"oidc revoke_tokens_from_code - Error executing query (1)\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * validate_authorization_code(struct _oauth2_config * config, const char * code, const char * client_id, const char * redirect_uri, const char * code_verifier, const char * ip_source) {\n  char * code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, code), * expiration_clause = NULL, * scope_list = NULL, * tmp;\n  json_t * j_query, * j_result = NULL, * j_result_scope = NULL, * j_return, * j_element = NULL, * j_scope_param;\n  int res;\n  size_t index = 0;\n  json_int_t maximum_duration = config->refresh_token_duration, maximum_duration_override = -1;\n  int rolling_refresh = config->refresh_token_rolling, rolling_refresh_override = -1;\n\n  if (code_hash != NULL) {\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expiration_clause = o_strdup(\"> NOW()\");\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expiration_clause = o_strdup(\"> NOW()\");\n    } else { // HOEL_DB_TYPE_SQLITE\n      expiration_clause = o_strdup(\"> (strftime('%s','now'))\");\n    }\n    j_query = json_pack(\"{sss[ssss]s{sssssssss{ssss}}}\",\n                        \"table\",\n                        GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                        \"columns\",\n                          \"gpgc_username AS username\",\n                          \"gpgc_id\",\n                          \"gpgc_code_challenge AS code_challenge\",\n                          \"gpgc_enabled AS enabled\",\n                        \"where\",\n                          \"gpgc_plugin_name\",\n                          config->name,\n                          \"gpgc_client_id\",\n                          client_id,\n                          \"gpgc_redirect_uri\",\n                          redirect_uri,\n                          \"gpgc_code_hash\",\n                          code_hash,\n                          \"gpgc_expires_at\",\n                            \"operator\",\n                            \"raw\",\n                            \"value\",\n                            expiration_clause);\n    o_free(expiration_clause);\n    res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n    json_decref(j_query);\n    if (res == H_OK) {\n      if (json_array_size(j_result)) {\n        if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"enabled\"))) {\n          if ((res = validate_code_challenge(config, json_array_get(j_result, 0), code_verifier)) == G_OK) {\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE_SCOPE,\n                                \"columns\",\n                                  \"gpgcs_scope AS name\",\n                                \"where\",\n                                  \"gpgc_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpgc_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK && json_array_size(j_result_scope) > 0) {\n              if (!json_object_set_new(json_array_get(j_result, 0), \"scope\", json_array())) {\n                json_array_foreach(j_result_scope, index, j_element) {\n                  if (scope_list == NULL) {\n                    scope_list = o_strdup(json_string_value(json_object_get(j_element, \"name\")));\n                  } else {\n                    tmp = msprintf(\"%s %s\", scope_list, json_string_value(json_object_get(j_element, \"name\")));\n                    o_free(scope_list);\n                    scope_list = tmp;\n                  }\n                  if ((j_scope_param = get_scope_parameters(config, json_string_value(json_object_get(j_element, \"name\")))) != NULL) {\n                    json_object_update(j_element, j_scope_param);\n                    json_decref(j_scope_param);\n                  }\n                  if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && rolling_refresh_override != 0) {\n                    rolling_refresh_override = json_object_get(j_element, \"refresh-token-rolling\")==json_true();\n                  }\n                  if (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) && (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < maximum_duration_override || maximum_duration_override == -1)) {\n                    maximum_duration_override = json_integer_value(json_object_get(j_element, \"refresh-token-duration\"));\n                  }\n                  json_array_append(json_object_get(json_array_get(j_result, 0), \"scope\"), j_element);\n                }\n                if (rolling_refresh_override > -1) {\n                  rolling_refresh = rolling_refresh_override;\n                }\n                if (maximum_duration_override > -1) {\n                  maximum_duration = maximum_duration_override;\n                }\n                json_object_set_new(json_array_get(j_result, 0), \"scope_list\", json_string(scope_list));\n                json_object_set_new(json_array_get(j_result, 0), \"refresh-token-rolling\", rolling_refresh?json_true():json_false());\n                json_object_set_new(json_array_get(j_result, 0), \"refresh-token-duration\", json_integer(maximum_duration));\n                j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"code\", json_array_get(j_result, 0));\n                o_free(scope_list);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error allocating resources for json_array()\");\n                j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n              }\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error executing j_query (2)\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n            json_decref(j_result_scope);\n          } else if (res == G_ERROR_UNAUTHORIZED) {\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n          } else if (res == G_ERROR_PARAM) {\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error validate_code_challenge\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n        } else {\n          if (json_true() == json_object_get(config->j_params, \"auth-type-code-revoke-replayed\")) {\n            if (revoke_tokens_from_code(config, json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgc_id\")), ip_source) != G_OK) {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error revoke_tokens_from_code\");\n            }\n          }\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error executing j_query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n    }\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_authorization_code - oauth2 - Error glewlwyd_callback_generate_hash\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  o_free(code_hash);\n  return j_return;\n}\n\nstatic json_t * validate_session_client_scope(struct _oauth2_config * config, const struct _u_request * request, const char * client_id, const char * scope) {\n  json_t * j_session, * j_grant, * j_return, * j_scope_session, * j_scope_grant = NULL, * j_group = NULL, * j_scheme;\n  const char * scope_session, * group = NULL;\n  char * scope_filtered = NULL, * tmp;\n  size_t index = 0;\n  json_int_t scopes_authorized = 0, scopes_granted = 0, group_allowed;\n\n  j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, scope);\n  if (check_result_value(j_session, G_OK)) {\n    j_grant = config->glewlwyd_config->glewlwyd_callback_get_client_granted_scopes(config->glewlwyd_config, client_id, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), scope);\n    if (check_result_value(j_grant, G_OK)) {\n      if (json_array_size(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"))) {\n        // Count and store the number of granted scopes\n        json_array_foreach(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"), index, j_scope_grant) {\n          scopes_granted += json_object_get(j_scope_grant, \"granted\")==json_true();\n        }\n        json_object_set_new(json_object_get(j_session, \"session\"), \"scopes_granted\", json_integer(scopes_granted));\n\n        json_object_foreach(json_object_get(json_object_get(j_session, \"session\"), \"scope\"), scope_session, j_scope_session) {\n          // Evaluate if the scope is granted for the client\n          json_array_foreach(json_object_get(json_object_get(j_grant, \"grant\"), \"scope\"), index, j_scope_grant) {\n            if (0 == o_strcmp(scope_session, json_string_value(json_object_get(j_scope_grant, \"name\")))) {\n              json_object_set(j_scope_session, \"granted\", json_object_get(j_scope_grant, \"granted\"));\n            }\n          }\n\n          // Evaluate if the scope is authorized\n          if (json_object_get(j_scope_session, \"available\") == json_true()) {\n            if (json_object_get(j_scope_session, \"password_required\") == json_true() && json_object_get(j_scope_session, \"password_authenticated\") == json_false()) {\n              json_object_set_new(j_scope_session, \"authorized\", json_false());\n            } else if ((json_object_get(j_scope_session, \"password_required\") == json_true() && json_object_get(j_scope_session, \"password_authenticated\") == json_true()) || json_object_get(j_scope_session, \"password_required\") == json_false()) {\n              json_object_foreach(json_object_get(j_scope_session, \"schemes\"), group, j_group) {\n                group_allowed = 0;\n                json_array_foreach(j_group, index, j_scheme) {\n                  if (json_object_get(j_scheme, \"scheme_authenticated\") == json_true()) {\n                    group_allowed++;\n                  }\n                }\n                if (group_allowed < json_integer_value(json_object_get(json_object_get(j_scope_session, \"scheme_required\"), group))) {\n                  json_object_set_new(j_scope_session, \"authorized\", json_false());\n                }\n              }\n              if (json_object_get(j_scope_session, \"authorized\") == NULL) {\n                json_object_set_new(j_scope_session, \"authorized\", json_true());\n                scopes_authorized++;\n                if (json_object_get(j_scope_session, \"granted\") == json_true()) {\n                  if (scope_filtered == NULL) {\n                    scope_filtered = o_strdup(scope_session);\n                  } else {\n                    tmp = msprintf(\"%s %s\", scope_filtered, scope_session);\n                    o_free(scope_filtered);\n                    scope_filtered = tmp;\n                  }\n                }\n              } else if (json_object_get(j_scope_session, \"granted\") == json_true()) {\n                json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_true());\n              }\n            } else {\n              json_object_set_new(j_scope_session, \"authorized\", json_false());\n            }\n          } else {\n            json_object_set_new(j_scope_session, \"authorized\", json_false());\n          }\n        }\n        json_object_set_new(json_object_get(j_session, \"session\"), \"scopes_authorized\", json_integer(scopes_authorized));\n        if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == NULL) {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_false());\n        }\n        if (scope_filtered != NULL) {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"scope_filtered\", json_string(scope_filtered));\n          o_free(scope_filtered);\n        } else {\n          json_object_set_new(json_object_get(j_session, \"session\"), \"scope_filtered\", json_string(\"\"));\n          json_object_set_new(json_object_get(j_session, \"session\"), \"authorization_required\", json_true());\n        }\n        if (scopes_authorized && scopes_granted) {\n          j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"session\", json_object_get(j_session, \"session\"));\n        } else {\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_session_client_scope - oauth2 - Error glewlwyd_callback_get_client_granted_scopes\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    json_decref(j_grant);\n  } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n  } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_session_client_scope - oauth2 - Error glewlwyd_callback_check_session_valid\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  json_decref(j_session);\n  return j_return;\n}\n\nstatic json_t * validate_refresh_token(struct _oauth2_config * config, const char * refresh_token) {\n  json_t * j_return, * j_query, * j_result, * j_result_scope, * j_element = NULL;\n  char * token_hash, * expires_at_clause;\n  int res;\n  size_t index = 0;\n  time_t now;\n\n  if (refresh_token != NULL) {\n    token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, refresh_token);\n    if (token_hash != NULL) {\n      time(&now);\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"> %u\", (now));\n      }\n      j_query = json_pack(\"{sss[sssssssss]s{sssssis{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"columns\",\n                            \"gpgr_id\",\n                            \"gpgc_id\",\n                            \"gpgr_username AS username\",\n                            \"gpgr_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS issued_at\", \"gpgr_issued_at AS issued_at\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS issued_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS expired_at\", \"gpgr_expires_at AS expired_at\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS expired_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_last_seen) AS last_seen\", \"gpgr_last_seen AS last_seen\", \"EXTRACT(EPOCH FROM gpgr_last_seen)::integer AS last_seen\"),\n                            \"gpgr_duration AS duration\",\n                            \"gpgr_rolling_expiration\",\n                          \"where\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_enabled\",\n                            1,\n                            \"gpgr_expires_at\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              expires_at_clause);\n      o_free(expires_at_clause);\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result) > 0) {\n          json_object_set(json_array_get(j_result, 0), \"rolling_expiration\", json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgr_rolling_expiration\"))?json_true():json_false());\n          json_object_del(json_array_get(j_result, 0), \"gpgr_rolling_expiration\");\n          j_query = json_pack(\"{sss[s]s{sO}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                              \"columns\",\n                                \"gpgrs_scope AS scope\",\n                              \"where\",\n                                \"gpgr_id\",\n                                json_object_get(json_array_get(j_result, 0), \"gpgr_id\"));\n          res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n          json_decref(j_query);\n          if (res == H_OK) {\n            if (!json_object_set_new(json_array_get(j_result, 0), \"scope\", json_array())) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                json_array_append(json_object_get(json_array_get(j_result, 0), \"scope\"), json_object_get(j_element, \"scope\"));\n              }\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error json_object_set_new\");\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n            }\n            json_decref(j_result_scope);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query (2)\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n          }\n        } else {\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error glewlwyd_callback_generate_hash\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    o_free(token_hash);\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  return j_return;\n}\n\nstatic json_t * refresh_token_list_get(struct _oauth2_config * config, const char * username, const char * pattern, size_t offset, size_t limit, const char * sort) {\n  json_t * j_query, * j_result, * j_return, * j_element = NULL;\n  int res;\n  size_t index = 0, token_hash_dec_len = 0;\n  char * pattern_escaped, * pattern_clause, * name_escaped;\n  unsigned char token_hash_dec[128];\n\n  j_query = json_pack(\"{sss[ssssssssss]s{ssss}sisiss}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"columns\",\n                        \"gpgr_token_hash\",\n                        \"gpgr_authorization_type\",\n                        \"gpgr_client_id AS client_id\",\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS issued_at\", \"gpgr_issued_at AS issued_at\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS issued_at\"),\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS expires_at\", \"gpgr_expires_at AS expires_at\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS expires_at\"),\n                        SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_last_seen) AS last_seen\", \"gpgr_last_seen AS last_seen\", \"EXTRACT(EPOCH FROM gpgr_last_seen)::integer AS last_seen\"),\n                        \"gpgr_rolling_expiration\",\n                        \"gpgr_issued_for AS issued_for\",\n                        \"gpgr_user_agent AS user_agent\",\n                        \"gpgr_enabled\",\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_username\",\n                        username,\n                      \"offset\",\n                      offset,\n                      \"limit\",\n                      limit,\n                      \"order_by\",\n                      \"gpgr_last_seen DESC\");\n  if (sort != NULL) {\n    json_object_set_new(j_query, \"order_by\", json_string(sort));\n  }\n  if (pattern != NULL) {\n    pattern_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, pattern);\n    name_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, config->name);\n    pattern_clause = msprintf(\"IN (SELECT gpgr_id FROM \"GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN\" WHERE (gpgr_user_agent LIKE '%%'||%s||'%%' OR gpgr_issued_for LIKE '%%'||%s||'%%') AND gpgr_plugin_name=%s)\", pattern_escaped, pattern_escaped, name_escaped);\n    json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_id\", json_pack(\"{ssss}\", \"operator\", \"raw\", \"value\", pattern_clause));\n    o_free(pattern_clause);\n    o_free(pattern_escaped);\n    o_free(name_escaped);\n  }\n  res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    json_array_foreach(j_result, index, j_element) {\n      json_object_set(j_element, \"rolling_expiration\", (json_integer_value(json_object_get(j_element, \"gpgr_rolling_expiration\"))?json_true():json_false()));\n      json_object_set(j_element, \"enabled\", (json_integer_value(json_object_get(j_element, \"gpgr_enabled\"))?json_true():json_false()));\n      json_object_del(j_element, \"gpgr_rolling_expiration\");\n      json_object_del(j_element, \"gpgr_enabled\");\n      if (o_base64_2_base64url((unsigned char *)json_string_value(json_object_get(j_element, \"gpgr_token_hash\")), json_string_length(json_object_get(j_element, \"gpgr_token_hash\")), token_hash_dec, &token_hash_dec_len)) {\n        json_object_set_new(j_element, \"token_hash\", json_stringn((char *)token_hash_dec, token_hash_dec_len));\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"refresh_token_list_get - Error o_base64_2_base64url\");\n        json_object_set_new(j_element, \"token_hash\", json_string(\"error\"));\n      }\n      json_object_del(j_element, \"gpgr_token_hash\");\n      switch(json_integer_value(json_object_get(j_element, \"gpgr_authorization_type\"))) {\n        case GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"code\"));\n          break;\n        case GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"password\"));\n          break;\n        default:\n          json_object_set_new(j_element, \"authorization_type\", json_string(\"unknown\"));\n          break;\n      }\n      json_object_del(j_element, \"gpgr_authorization_type\");\n    }\n    j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"refresh_token\", j_result);\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"refresh_token_list_get - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n  }\n  return j_return;\n}\n\nstatic int refresh_token_disable(struct _oauth2_config * config, const char * username, const char * token_hash, const char * ip_source) {\n  json_t * j_query, * j_result, * j_element = NULL;\n  int res, ret = G_OK;\n  unsigned char token_hash_dec[128];\n  size_t token_hash_dec_len = 0, index = 0;\n\n  j_query = json_pack(\"{sss[ss]s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"columns\",\n                        \"gpgr_id\",\n                        \"gpgr_enabled\",\n                      \"where\",\n                        \"gpgr_plugin_name\", config->name,\n                        \"gpgr_username\", username);\n  if (token_hash != NULL) {\n    if (o_base64url_2_base64((unsigned char *)token_hash, o_strlen(token_hash), token_hash_dec, &token_hash_dec_len)) {\n      json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_token_hash\", json_stringn((const char *)token_hash_dec, token_hash_dec_len));\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error o_base64url_2_base64\");\n      ret = G_ERROR_PARAM;\n    }\n  }\n  res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n  json_decref(j_query);\n  if (res == H_OK && ret == G_OK) {\n    if (json_array_size(j_result)) {\n      json_array_foreach(j_result, index, j_element) {\n        if (json_integer_value(json_object_get(j_element, \"gpgr_enabled\"))) {\n          j_query = json_pack(\"{sss{si}s{sssO}}\",\n                              \"table\",\n                              GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                              \"set\",\n                                \"gpgr_enabled\", 0,\n                              \"where\",\n                                \"gpgr_plugin_name\", config->name,\n                                \"gpgr_id\", json_object_get(j_element, \"gpgr_id\"));\n          res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n          json_decref(j_query);\n          if (res == H_OK) {\n            if (token_hash != NULL) {\n              y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - token '[...%s]' disabled, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query (2)\");\n            config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n            ret = G_ERROR_DB;\n          }\n        } else if (token_hash != NULL) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - Error token '[...%s]' already disabled, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n          ret = G_ERROR_PARAM;\n        }\n      }\n    } else if (token_hash != NULL) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"update_refresh_token - oauth2 - Error token '[...%s]' not found, origin: %s\", token_hash + (o_strlen(token_hash) - (o_strlen(token_hash)>=8?8:o_strlen(token_hash))), ip_source);\n      ret = G_ERROR_NOT_FOUND;\n    }\n    json_decref(j_result);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query (1)\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic int update_refresh_token(struct _oauth2_config * config, json_int_t gpgr_id, json_int_t refresh_token_duration, int disable, time_t now) {\n  json_t * j_query;\n  int res, ret;\n  char * expires_at_clause, * last_seen_clause;\n\n  if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n    last_seen_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now));\n  } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n    last_seen_clause = msprintf(\"TO_TIMESTAMP(%u)\", now);\n  } else { // HOEL_DB_TYPE_SQLITE\n    last_seen_clause = msprintf(\"%u\", (now));\n  }\n  j_query = json_pack(\"{sss{s{ss}}s{sssI}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"set\",\n                        \"gpgr_last_seen\",\n                          \"raw\",\n                          last_seen_clause,\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_id\",\n                        gpgr_id);\n  o_free(last_seen_clause);\n  if (refresh_token_duration) {\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + (time_t)refresh_token_duration));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + (time_t)refresh_token_duration));\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"%u\", (now + (time_t)refresh_token_duration));\n    }\n    json_object_set_new(json_object_get(j_query, \"set\"), \"gpgr_expires_at\", json_pack(\"{ss}\", \"raw\", expires_at_clause));\n    o_free(expires_at_clause);\n  }\n  if (disable) {\n    json_object_set_new(json_object_get(j_query, \"set\"), \"gpgr_enabled\", json_integer(0));\n  }\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"update_refresh_token - oauth2 - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * get_refresh_token_duration_rolling(struct _oauth2_config * config, const char * scope_list) {\n  json_t * j_return, * j_element = NULL;\n  char ** scope_array = NULL;\n  size_t i, index = 0;\n  json_int_t maximum_duration = config->refresh_token_duration, maximum_duration_override = -1;\n  int rolling_refresh = config->refresh_token_rolling, rolling_refresh_override = -1;\n\n  if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n    json_array_foreach(json_object_get(config->j_params, \"scope\"), index, j_element) {\n      for (i=0; scope_array[i]!=NULL; i++) {\n        if (0 == o_strcmp(json_string_value(json_object_get(j_element, \"name\")), scope_array[i])) {\n          if (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) && (json_integer_value(json_object_get(j_element, \"refresh-token-duration\")) < maximum_duration_override || maximum_duration_override == -1)) {\n            maximum_duration_override = json_integer_value(json_object_get(j_element, \"refresh-token-duration\"));\n          }\n          if (json_object_get(j_element, \"refresh-token-rolling\") != NULL && rolling_refresh_override != 0) {\n            rolling_refresh_override = json_object_get(j_element, \"refresh-token-rolling\")==json_true();\n          }\n        }\n      }\n    }\n    free_string_array(scope_array);\n    if (maximum_duration_override != -1) {\n      maximum_duration = maximum_duration_override;\n    }\n    if (rolling_refresh_override != -1) {\n      rolling_refresh = rolling_refresh_override;\n    }\n    j_return = json_pack(\"{sis{sosI}}\", \"result\", G_OK, \"refresh-token\", \"refresh-token-rolling\", rolling_refresh?json_true():json_false(), \"refresh-token-duration\", maximum_duration);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"get_refresh_token_duration_rolling - Error split_string_remove_duplicates\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  }\n  return j_return;\n}\n\nstatic int is_code_challenge_valid(struct _oauth2_config * config, const char * code_challenge, const char * code_challenge_method, char * code_challenge_stored) {\n  int ret;\n  if (!o_strnullempty(code_challenge)) {\n    if (json_object_get(config->j_params, \"pkce-allowed\") == json_true()) {\n      if (o_strnullempty(code_challenge_method) || 0 == o_strcmp(\"plain\", code_challenge_method)) {\n        if (json_object_get(config->j_params, \"pkce-method-plain-allowed\") == json_true()) {\n          if (is_pkce_char_valid(code_challenge)) {\n            o_strcpy(code_challenge_stored, code_challenge);\n            ret = G_OK;\n          } else {\n            ret = G_ERROR_PARAM;\n          }\n        } else {\n          ret = G_ERROR_PARAM;\n        }\n      } else if (0 == o_strcmp(\"S256\", code_challenge_method)) {\n        if (o_strlen(code_challenge) == 43) {\n          o_strcpy(code_challenge_stored, GLEWLWYD_CODE_CHALLENGE_S256_PREFIX);\n          o_strcpy(code_challenge_stored + o_strlen(GLEWLWYD_CODE_CHALLENGE_S256_PREFIX), code_challenge);\n          ret = G_OK;\n        } else {\n          ret = G_ERROR_PARAM;\n        }\n      } else {\n        ret = G_ERROR_PARAM;\n      }\n    } else {\n      ret = G_ERROR_PARAM;\n    }\n  } else {\n    // No pkce\n    ret = G_OK;\n  }\n  return ret;\n}\n\nstatic int revoke_refresh_token(struct _oauth2_config * config, const char * token) {\n  json_t * j_query;\n  int res, ret;\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n\n  j_query = json_pack(\"{sss{si}s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                      \"set\",\n                        \"gpgr_enabled\",\n                        0,\n                      \"where\",\n                        \"gpgr_plugin_name\",\n                        config->name,\n                        \"gpgr_token_hash\",\n                        token_hash);\n  o_free(token_hash);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_refresh_token - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic int revoke_access_token(struct _oauth2_config * config, const char * token) {\n  json_t * j_query;\n  int res, ret;\n  char * token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n\n  j_query = json_pack(\"{sss{si}s{ssss}}\",\n                      \"table\",\n                      GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                      \"set\",\n                        \"gpga_enabled\",\n                        0,\n                      \"where\",\n                        \"gpga_plugin_name\",\n                        config->name,\n                        \"gpga_token_hash\",\n                        token_hash);\n  o_free(token_hash);\n  res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n  json_decref(j_query);\n  if (res == H_OK) {\n    ret = G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"revoke_access_token - Error executing j_query\");\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n    ret = G_ERROR_DB;\n  }\n  return ret;\n}\n\nstatic json_t * get_token_metadata(struct _oauth2_config * config, const char * token, const char * token_type_hint, const char * client_id) {\n  json_t * j_query, * j_result, * j_result_scope, * j_return = NULL, * j_element = NULL;\n  int res, found_refresh = 0, found_access = 0;\n  size_t index = 0;\n  char * token_hash = NULL, * scope_list = NULL, * expires_at_clause;\n  time_t now;\n\n  if (!o_strnullempty(token)) {\n    token_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, token);\n    time(&now);\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"> %u\", (now));\n    }\n    if (token_type_hint == NULL || 0 == o_strcmp(\"refresh_token\", token_type_hint)) {\n      j_query = json_pack(\"{sss[sssssss]s{sssss{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                          \"columns\",\n                            \"gpgr_id\",\n                            \"gpgr_username AS username\",\n                            \"gpgr_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS iat\", \"gpgr_issued_at AS iat\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS iat\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_issued_at) AS nbf\", \"gpgr_issued_at AS nbf\", \"EXTRACT(EPOCH FROM gpgr_issued_at)::integer AS nbf\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgr_expires_at) AS exp\", \"gpgr_expires_at AS exp\", \"EXTRACT(EPOCH FROM gpgr_expires_at)::integer AS exp\"),\n                            \"gpgr_enabled\",\n                          \"where\",\n                            \"gpgr_plugin_name\",\n                            config->name,\n                            \"gpgr_token_hash\",\n                            token_hash,\n                            \"gpgr_expires_at\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              expires_at_clause);\n      if (client_id != NULL) {\n        json_object_set_new(json_object_get(j_query, \"where\"), \"gpgr_client_id\", json_string(client_id));\n      }\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          found_refresh = 1;\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgr_enabled\"))) {\n            json_object_set_new(json_array_get(j_result, 0), \"active\", json_true());\n            json_object_set_new(json_array_get(j_result, 0), \"token_type\", json_string(\"refresh_token\"));\n            json_object_del(json_array_get(j_result, 0), \"gpgr_enabled\");\n            if (json_object_get(json_array_get(j_result, 0), \"client_id\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"client_id\");\n            }\n            if (json_object_get(json_array_get(j_result, 0), \"username\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"username\");\n            }\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN_SCOPE,\n                                \"columns\",\n                                  \"gpgrs_scope AS scope\",\n                                \"where\",\n                                  \"gpgr_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpgr_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                if (scope_list == NULL) {\n                  scope_list = o_strdup(json_string_value(json_object_get(j_element, \"scope\")));\n                } else {\n                  scope_list = mstrcatf(scope_list, \" %s\", json_string_value(json_object_get(j_element, \"scope\")));\n                }\n              }\n              json_object_set_new(json_array_get(j_result, 0), \"scope\", json_string(scope_list));\n              o_free(scope_list);\n              json_decref(j_result_scope);\n              json_object_del(json_array_get(j_result, 0), \"gpgr_id\");\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"validate_refresh_token - oauth2 - Error executing j_query scope refresh_token\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n          }\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_token_metadata - Error executing j_query refresh_token\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    }\n    if ((token_type_hint == NULL && !found_refresh) || 0 == o_strcmp(\"access_token\", token_type_hint)) {\n      j_query = json_pack(\"{sss[ssssss]s{ssss}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                          \"columns\",\n                            \"gpga_id\",\n                            \"gpga_username AS username\",\n                            \"gpga_client_id AS client_id\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpga_issued_at) AS iat\", \"gpga_issued_at AS iat\", \"EXTRACT(EPOCH FROM gpga_issued_at)::integer AS iat\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpga_issued_at) AS nbf\", \"gpga_issued_at AS nbf\", \"EXTRACT(EPOCH FROM gpga_issued_at)::integer AS nbf\"),\n                            \"gpga_enabled\",\n                          \"where\",\n                            \"gpga_plugin_name\",\n                            config->name,\n                            \"gpga_token_hash\",\n                            token_hash);\n      if (client_id != NULL) {\n        json_object_set_new(json_object_get(j_query, \"where\"), \"gpga_client_id\", json_string(client_id));\n      }\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          found_access = 1;\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpga_enabled\")) && json_integer_value(json_object_get(json_array_get(j_result, 0), \"iat\")) + json_integer_value(json_object_get(config->j_params, \"access-token-duration\")) > (json_int_t)now) {\n            json_object_set_new(json_array_get(j_result, 0), \"active\", json_true());\n            json_object_set_new(json_array_get(j_result, 0), \"token_type\", json_string(\"access_token\"));\n            json_object_set_new(json_array_get(j_result, 0), \"exp\", json_integer(json_integer_value(json_object_get(json_array_get(j_result, 0), \"iat\")) + json_integer_value(json_object_get(config->j_params, \"access-token-duration\"))));\n            json_object_del(json_array_get(j_result, 0), \"gpga_enabled\");\n            if (json_object_get(json_array_get(j_result, 0), \"client_id\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"client_id\");\n            }\n            if (json_object_get(json_array_get(j_result, 0), \"username\") == json_null()) {\n              json_object_del(json_array_get(j_result, 0), \"username\");\n            }\n            j_query = json_pack(\"{sss[s]s{sO}}\",\n                                \"table\",\n                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN_SCOPE,\n                                \"columns\",\n                                  \"gpgas_scope AS scope\",\n                                \"where\",\n                                  \"gpga_id\",\n                                  json_object_get(json_array_get(j_result, 0), \"gpga_id\"));\n            res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              json_array_foreach(j_result_scope, index, j_element) {\n                if (scope_list == NULL) {\n                  scope_list = o_strdup(json_string_value(json_object_get(j_element, \"scope\")));\n                } else {\n                  scope_list = mstrcatf(scope_list, \" %s\", json_string_value(json_object_get(j_element, \"scope\")));\n                }\n              }\n              json_object_set_new(json_array_get(j_result, 0), \"scope\", json_string(scope_list));\n              o_free(scope_list);\n              json_decref(j_result_scope);\n              json_object_del(json_array_get(j_result, 0), \"gpga_id\");\n              j_return = json_pack(\"{sisO}\", \"result\", G_OK, \"token\", json_array_get(j_result, 0));\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"oauth2 validate_refresh_token - Error executing j_query scope access_token\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n          }\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_token_metadata - Error executing j_query access_token\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    }\n    if (!found_refresh && !found_access && j_return == NULL) {\n      j_return = json_pack(\"{sis{so}}\", \"result\", G_OK, \"token\", \"active\", json_false());\n    }\n    o_free(token_hash);\n    o_free(expires_at_clause);\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_PARAM);\n  }\n  return j_return;\n}\n\nstatic const char * get_client_id_for_introspection(struct _oauth2_config * config, const struct _u_request * request) {\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && config->introspect_revoke_resource_config->oauth_scope != NULL) {\n    return NULL;\n  } else if (json_object_get(config->j_params, \"introspection-revocation-allow-target-client\") == json_true()) {\n    return request->auth_basic_user;\n  } else {\n    return NULL;\n  }\n}\n\nstatic json_t * generate_device_authorization(struct _oauth2_config * config, const char * client_id, const char * scope_list, const char * ip_source) {\n  char device_code[GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH+1] = {0}, user_code[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+2] = {0}, * device_code_hash = NULL, * user_code_hash = NULL;\n  json_t * j_return, * j_query, * j_device_auth_id;\n  int res;\n  time_t now, expiration = (time_t)json_integer_value(json_object_get(config->j_params, \"device-authorization-expiration\"));\n  char * expires_at_clause = NULL, * last_check_clause = NULL, ** scope_array = NULL;\n  size_t i;\n\n  if (pthread_mutex_lock(&config->insert_lock)) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization oauth2 - Error pthread_mutex_lock\");\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n  } else {\n    if (rand_string(device_code, 32) != NULL && rand_string_from_charset(user_code, GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1, \"ABCDEFGHJKLMNOPQRSTUVWXYZ0123456789\") != NULL) {\n      user_code[4] = '-';\n      device_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, device_code);\n      user_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, user_code);\n      time(&now);\n      if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n        expires_at_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now + expiration));\n        last_check_clause = msprintf(\"FROM_UNIXTIME(%u)\", (now - (2*expiration)));\n      } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n        expires_at_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now + expiration));\n        last_check_clause = msprintf(\"TO_TIMESTAMP(%u)\", (now - (2*expiration)));\n      } else { // HOEL_DB_TYPE_SQLITE\n        expires_at_clause = msprintf(\"%u\", (now + expiration));\n        last_check_clause = msprintf(\"%u\", (now - (2*expiration)));\n      }\n      j_query = json_pack(\"{sss{sssss{ss}sssssss{ss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                          \"values\",\n                            \"gpgda_plugin_name\",\n                            config->name,\n                            \"gpgda_client_id\",\n                            client_id,\n                            \"gpgda_expires_at\",\n                              \"raw\",\n                              expires_at_clause,\n                            \"gpgda_issued_for\",\n                            ip_source,\n                            \"gpgda_device_code_hash\",\n                            device_code_hash,\n                            \"gpgda_user_code_hash\",\n                            user_code_hash,\n                            \"gpgda_last_check\",\n                              \"raw\",\n                              last_check_clause);\n      o_free(expires_at_clause);\n      o_free(last_check_clause);\n      o_free(device_code_hash);\n      o_free(user_code_hash);\n      res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        j_device_auth_id = h_last_insert_id(config->glewlwyd_config->glewlwyd_config->conn);\n        if (j_device_auth_id != NULL) {\n          if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n            j_query = json_pack(\"{sss[]}\", \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE, \"values\");\n            for (i=0; scope_array[i]!=NULL; i++) {\n              json_array_append_new(json_object_get(j_query, \"values\"), json_pack(\"{sOss}\", \"gpgda_id\", j_device_auth_id, \"gpgdas_scope\", scope_array[i]));\n            }\n            res = h_insert(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n            json_decref(j_query);\n            if (res == H_OK) {\n              j_return = json_pack(\"{sis{ssss}}\", \"result\", G_OK, \"authorization\", \"device_code\", device_code, \"user_code\", user_code);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error executing j_query (2)\");\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n              j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error split_string_remove_duplicates scope\");\n            j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          }\n          free_string_array(scope_array);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error h_last_insert_id\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n        json_decref(j_device_auth_id);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error executing j_query (1)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"generate_device_authorization - Error generating random code\");\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n    }\n    pthread_mutex_unlock(&config->insert_lock);\n  }\n  return j_return;\n}\n\nstatic int validate_device_authorization_scope(struct _oauth2_config * config, json_int_t gpgda_id, const char * username, const char * scope_list) {\n  char * query, * scope_clause = NULL, * scope_escaped, ** scope_array = NULL, * username_escaped;\n  int res, i, ret;\n\n  if (split_string_remove_duplicates(scope_list, \" \", &scope_array)) {\n    for (i=0; scope_array[i]!=NULL; i++) {\n      scope_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, scope_array[i]);\n      if (scope_clause == NULL) {\n        scope_clause = o_strdup(scope_escaped);\n      } else {\n        scope_clause = mstrcatf(scope_clause, \",%s\", scope_escaped);\n      }\n      o_free(scope_escaped);\n    }\n    free_string_array(scope_array);\n  }\n  if (!o_strnullempty(scope_clause)) {\n    query = msprintf(\"UPDATE %s set gpgdas_allowed=1 WHERE gpgdas_scope IN (%s) AND gpgda_id=%\"JSON_INTEGER_FORMAT, GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE, scope_clause, gpgda_id);\n    res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n    o_free(query);\n    if (res == H_OK) {\n      username_escaped = h_escape_string_with_quotes(config->glewlwyd_config->glewlwyd_config->conn, username);\n      query = msprintf(\"UPDATE %s set gpgda_status=1, gpgda_username=%s WHERE gpgda_id=%\"JSON_INTEGER_FORMAT, GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION, username_escaped, gpgda_id);\n      res = h_execute_query(config->glewlwyd_config->glewlwyd_config->conn, query, NULL, H_OPTION_EXEC);\n      o_free(username_escaped);\n      o_free(query);\n      if (res == H_OK) {\n        ret = G_OK;\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error executing query (2)\");\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n        ret = G_ERROR_DB;\n      }\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error executing query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      ret = G_ERROR_DB;\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_authorization_scope - Error scope invalid\");\n    ret = G_ERROR_PARAM;\n  }\n  o_free(scope_clause);\n  return ret;\n}\n\nstatic json_t * validate_device_auth_user_code(struct _oauth2_config * config, const char * user_code) {\n  json_t * j_query = NULL, * j_result = NULL, * j_result_scope = NULL, * j_return, * j_element = NULL;\n  int res;\n  char * scope = NULL, * expires_at_clause, * user_code_hash, user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+2] = {0};\n  time_t now;\n  size_t index = 0;\n\n  if (o_strlen(user_code) == GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1 && user_code[4] == '-') {\n    for (index=0; index<(GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1); index++) {\n      user_code_ucase[index] = (char)toupper(user_code[index]);\n    }\n    user_code_ucase[GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1] = '\\0';\n    time(&now);\n    if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_MARIADB) {\n      expires_at_clause = msprintf(\"> FROM_UNIXTIME(%u)\", (now));\n    } else if (config->glewlwyd_config->glewlwyd_config->conn->type==HOEL_DB_TYPE_PGSQL) {\n      expires_at_clause = msprintf(\"> TO_TIMESTAMP(%u)\", now);\n    } else { // HOEL_DB_TYPE_SQLITE\n      expires_at_clause = msprintf(\"> %u\", (now));\n    }\n    user_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, user_code_ucase);\n    j_query = json_pack(\"{sss[ss]s{sss{ssss}sssi}}\",\n                        \"table\",\n                        GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                        \"columns\",\n                          \"gpgda_id\",\n                          \"gpgda_client_id\",\n                        \"where\",\n                          \"gpgda_plugin_name\",\n                          config->name,\n                          \"gpgda_expires_at\",\n                            \"operator\",\n                            \"raw\",\n                            \"value\",\n                            expires_at_clause,\n                          \"gpgda_user_code_hash\",\n                          user_code_hash,\n                          \"gpgda_status\",\n                          0);\n    o_free(expires_at_clause);\n    o_free(user_code_hash);\n    res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n    json_decref(j_query);\n    if (res == H_OK) {\n      if (json_array_size(j_result)) {\n        j_query = json_pack(\"{sss[s]s{sO}}\",\n                            \"table\",\n                            GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE,\n                            \"columns\",\n                              \"gpgdas_scope\",\n                            \"where\",\n                              \"gpgda_id\",\n                              json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n        res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n        json_decref(j_query);\n        if (res == H_OK) {\n          json_array_foreach(j_result_scope, index, j_element) {\n            if (scope == NULL) {\n              scope = o_strdup(json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n            } else {\n              scope = mstrcatf(scope, \" %s\", json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n            }\n          }\n          j_return = json_pack(\"{sis{sOsssO}}\", \"result\", G_OK, \"device_auth\", \"client_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_client_id\"), \"scope\", scope, \"gpgda_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n          o_free(scope);\n          json_decref(j_result_scope);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_auth_user_code - Error executing j_query (2)\");\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n        }\n      } else {\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n      }\n      json_decref(j_result);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"validate_device_auth_user_code - Error executing j_query (1)\");\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);\n      j_return = json_pack(\"{si}\", \"result\", G_ERROR_DB);\n    }\n  } else {\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_NOT_FOUND);\n  }\n  return j_return;\n}\n\nstatic int check_auth_type_device_code(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_body, * j_client, * j_query, * j_result = NULL, * j_result_scope = NULL, * j_element = NULL, * j_user = NULL, * j_refresh_token = NULL, * j_user_only = NULL;\n  const char * device_code = u_map_get(request->map_post_body, \"device_code\"),\n             * client_id = request->auth_basic_user,\n             * client_secret = request->auth_basic_password,\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header),\n             * username = NULL;\n  int res;\n  char * device_code_hash, * refresh_token, * access_token, * scope = NULL, * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  time_t now;\n  size_t index = 0;\n\n  if (client_id == NULL && u_map_get(request->map_post_body, \"client_id\") != NULL) {\n    client_id = u_map_get(request->map_post_body, \"client_id\");\n  }\n  if (client_secret == NULL && u_map_get(request->map_post_body, \"client_secret\") != NULL) {\n    client_secret = u_map_get(request->map_post_body, \"client_secret\");\n  }\n  if (o_strlen(device_code) == GLEWLWYD_DEVICE_AUTH_DEVICE_CODE_LENGTH) {\n    j_client = check_client_valid(config, client_id, client_id, client_secret, NULL, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, 0, ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      device_code_hash = config->glewlwyd_config->glewlwyd_callback_generate_hash(config->glewlwyd_config, device_code);\n      j_query = json_pack(\"{sss[sssss]s{sssOs{ssss}}}\",\n                          \"table\",\n                          GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                          \"columns\",\n                            \"gpgda_id\",\n                            \"gpgda_username AS username\",\n                            \"gpgda_status\",\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgda_expires_at) AS expires_at\", \"gpgda_expires_at AS expires_at\", \"EXTRACT(EPOCH FROM gpgda_expires_at)::integer AS expires_at\"),\n                            SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"UNIX_TIMESTAMP(gpgda_last_check) AS last_check\", \"gpgda_last_check AS last_check\", \"EXTRACT(EPOCH FROM gpgda_last_check)::integer AS last_check\"),\n                          \"where\",\n                            \"gpgda_device_code_hash\",\n                            device_code_hash,\n                            \"gpgda_client_id\",\n                            json_object_get(json_object_get(j_client, \"client\"), \"client_id\"),\n                            \"gpgda_status\",\n                              \"operator\",\n                              \"raw\",\n                              \"value\",\n                              \"<= 1\");\n      o_free(device_code_hash);\n      res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result, NULL);\n      json_decref(j_query);\n      if (res == H_OK) {\n        if (json_array_size(j_result)) {\n          time(&now);\n          if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"expires_at\")) >= (json_int_t)now) {\n            if (json_integer_value(json_object_get(json_array_get(j_result, 0), \"gpgda_status\")) == 1) {\n              j_query = json_pack(\"{sss[s]s{sOsi}}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE,\n                                  \"columns\",\n                                    \"gpgdas_scope\",\n                                  \"where\",\n                                    \"gpgda_id\",\n                                    json_object_get(json_array_get(j_result, 0), \"gpgda_id\"),\n                                    \"gpgdas_allowed\",\n                                    1);\n              res = h_select(config->glewlwyd_config->glewlwyd_config->conn, j_query, &j_result_scope, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                json_array_foreach(j_result_scope, index, j_element) {\n                  if (scope == NULL) {\n                    scope = o_strdup(json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n                  } else {\n                    scope = mstrcatf(scope, \" %s\", json_string_value(json_object_get(j_element, \"gpgdas_scope\")));\n                  }\n                }\n                // All clear, please send back tokens\n                username = json_string_value(json_object_get(json_array_get(j_result, 0), \"username\"));\n                j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n                if (check_result_value(j_user, G_OK)) {\n                  time(&now);\n                  if ((refresh_token = generate_refresh_token(config, client_id, username, json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")), now, ip_source)) != NULL) {\n                    j_refresh_token = serialize_refresh_token(config, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, 0, username, client_id, scope, now, config->refresh_token_duration, config->refresh_token_rolling, refresh_token, issued_for, u_map_get_case(request->map_header, \"user-agent\"));\n                    if (check_result_value(j_refresh_token, G_OK)) {\n                      j_user_only = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n                      if (check_result_value(j_user_only, G_OK)) {\n                        if ((access_token = generate_access_token(config,\n                                                                  username,\n                                                                  client_id,\n                                                                  json_object_get(j_user_only, \"user\"),\n                                                                  json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                                  now,\n                                                                  ip_source)) != NULL) {\n                          if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION, json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")), username, client_id, scope, now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                            j_query = json_pack(\"{sss{si}s{sO}}\",\n                                                \"table\",\n                                                GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                                                \"set\",\n                                                  \"gpgda_status\", 2,\n                                                \"where\",\n                                                  \"gpgda_id\", json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n                            res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n                            json_decref(j_query);\n                            if (res == H_OK) {\n                              j_body = json_pack(\"{sssssssisIss}\",\n                                                 \"token_type\",\n                                                 \"bearer\",\n                                                 \"access_token\",\n                                                 access_token,\n                                                 \"refresh_token\",\n                                                 refresh_token,\n                                                 \"iat\",\n                                                 now,\n                                                 \"expires_in\",\n                                                 config->access_token_duration,\n                                                 \"scope\",\n                                                 scope);\n                              ulfius_set_json_body_response(response, 200, j_body);\n                              json_decref(j_body);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n                              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                            } else {\n                              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error executing j_query (4)\");\n                              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                              ulfius_set_json_body_response(response, 500, j_body);\n                              json_decref(j_body);\n                            }\n                          } else {\n                            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error serialize_access_token\");\n                            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                            ulfius_set_json_body_response(response, 500, j_body);\n                            json_decref(j_body);\n                          }\n                        } else {\n                          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error generate_access_token\");\n                          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                          ulfius_set_json_body_response(response, 500, j_body);\n                          json_decref(j_body);\n                        }\n                        o_free(access_token);\n                      } else {\n                        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n                        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                        ulfius_set_json_body_response(response, 500, j_body);\n                        json_decref(j_body);\n                      }\n                      json_decref(j_user_only);\n                    } else {\n                      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error serialize_refresh_token\");\n                      j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                      ulfius_set_json_body_response(response, 500, j_body);\n                      json_decref(j_body);\n                    }\n                    json_decref(j_refresh_token);\n                    o_free(refresh_token);\n                  } else {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error generate_refresh_token\");\n                    j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                    ulfius_set_json_body_response(response, 500, j_body);\n                    json_decref(j_body);\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error getting user %s\", username);\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n                json_decref(j_user);\n                o_free(scope);\n                json_decref(j_result_scope);\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (2)\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n            } else {\n              j_query = json_pack(\"{sss{s{ss}}s{sO}}\",\n                                  \"table\",\n                                  GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                                  \"set\",\n                                    \"gpgda_last_check\",\n                                      \"raw\",\n                                      SWITCH_DB_TYPE(config->glewlwyd_config->glewlwyd_config->conn->type, \"CURRENT_TIMESTAMP\", \"strftime('%s','now')\", \"NOW()\"),\n                                  \"where\",\n                                    \"gpgda_id\",\n                                    json_object_get(json_array_get(j_result, 0), \"gpgda_id\"));\n              res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n              json_decref(j_query);\n              if (res == H_OK) {\n                if (((json_int_t)now - json_integer_value(json_object_get(json_array_get(j_result, 0), \"last_check\"))) >= json_integer_value(json_object_get(config->j_params, \"device-authorization-interval\"))) {\n                  // Wait for it!\n                  j_body = json_pack(\"{ss}\", \"error\", \"authorization_pending\");\n                  ulfius_set_json_body_response(response, 400, j_body);\n                  json_decref(j_body);\n                } else {\n                  // Slow down dammit!\n                  j_body = json_pack(\"{ss}\", \"error\", \"slow_down\");\n                  ulfius_set_json_body_response(response, 400, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (3)\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n            }\n          } else {\n            // Code expired\n            j_body = json_pack(\"{ss}\", \"error\", \"expired_token\");\n            ulfius_set_json_body_response(response, 400, j_body);\n            json_decref(j_body);\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_device_code - Invalid code\");\n          j_body = json_pack(\"{ss}\", \"error\", \"access_denied\");\n          ulfius_set_json_body_response(response, 400, j_body);\n          json_decref(j_body);\n        }\n        json_decref(j_result);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - Error executing j_query (1)\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_device_code - Missing code\");\n    j_body = json_pack(\"{ss}\", \"error\", \"access_denied\");\n    ulfius_set_json_body_response(response, 400, j_body);\n    json_decref(j_body);\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_revocation(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_result = get_token_metadata(config, u_map_get(request->map_post_body, \"token\"), u_map_get(request->map_post_body, \"token_type_hint\"), get_client_id_for_introspection(config, request));\n\n  if (check_result_value(j_result, G_OK)) {\n    if (json_object_get(json_object_get(j_result, \"token\"), \"active\") == json_true()) {\n      if (0 == o_strcmp(\"refresh_token\", json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"token_type\")))) {\n        if (revoke_refresh_token(config, u_map_get(request->map_post_body, \"token\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_revocation  - Error revoke_refresh_token\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Refresh token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"client_id\")), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        }\n      } else {\n        if (revoke_access_token(config, u_map_get(request->map_post_body, \"token\")) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"callback_revocation  - Error revoke_access_token\");\n          response->status = 500;\n        } else {\n          y_log_message(Y_LOG_LEVEL_INFO, \"Event oauth2 - Plugin '%s' - Access token generated for client '%s' revoked, origin: %s\", config->name, json_string_value(json_object_get(json_object_get(j_result, \"token\"), \"client_id\")), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        }\n      }\n    }\n  } else if (check_result_value(j_result, G_ERROR_PARAM)) {\n    response->status = 400;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_introspection - Error get_token_metadata\");\n    response->status = 500;\n  }\n  json_decref(j_result);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_introspection(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_result = get_token_metadata(config, u_map_get(request->map_post_body, \"token\"), u_map_get(request->map_post_body, \"token_type_hint\"), get_client_id_for_introspection(config, request));\n\n  if (check_result_value(j_result, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_result, \"token\"));\n  } else if (check_result_value(j_result, G_ERROR_PARAM)) {\n    response->status = 400;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_introspection - Error get_token_metadata\");\n    response->status = 500;\n  }\n  json_decref(j_result);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_check_intropect_revoke(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_client, * j_element = NULL, * j_introspect;\n  size_t index = 0;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && config->introspect_revoke_resource_config->oauth_scope != NULL) {\n    j_introspect = get_token_metadata(config, (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) + o_strlen(HEADER_PREFIX_BEARER)), \"access_token\", NULL);\n    if (check_result_value(j_introspect, G_OK) && json_object_get(json_object_get(j_introspect, \"token\"), \"active\") == json_true()) {\n      ret = callback_check_glewlwyd_access_token(request, response, (void*)config->introspect_revoke_resource_config);\n    }\n    json_decref(j_introspect);\n  } else if (json_object_get(config->j_params, \"introspection-revocation-allow-target-client\") == json_true()) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"client_credentials\")) {\n          ret = U_CALLBACK_CONTINUE;\n        }\n      }\n    }\n    json_decref(j_client);\n  }\n  return ret;\n}\n\n/**\n * The most used authorization type: if client is authorized and has been granted access to scope,\n * glewlwyd redirects to redirect_uri with a code in the uri\n * If necessary, an intermediate step can be used: login page\n */\nstatic int check_auth_type_auth_code_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  char * authorization_code = NULL, * redirect_url, * issued_for, * state_param = NULL, * state_encoded, code_challenge_stored[GLEWLWYD_CODE_CHALLENGE_MAX_LENGTH + 1] = {0};\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_session, * j_client = check_client_valid(config, u_map_get(request->map_url, \"client_id\"), request->auth_basic_user, request->auth_basic_password, u_map_get(request->map_url, \"redirect_uri\"), GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, 1, ip_source);\n  int res;\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n  // Check if client is allowed to perform this request\n  if (check_result_value(j_client, G_OK)) {\n    // Client is allowed to use auth_code grant with this redirection_uri\n    if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {\n      if (u_map_has_key(request->map_url, \"g_continue\")) {\n        j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));\n        if (check_result_value(j_session, G_OK)) {\n          if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {\n            // User has granted access to the cleaned scope list for this client\n            // Generate code, generate the url and redirect to it\n            issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n            if (issued_for != NULL) {\n              if (config->glewlwyd_config->glewlwyd_callback_trigger_session_used(config->glewlwyd_config, request, json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n                if ((res = is_code_challenge_valid(config, u_map_get(request->map_url, \"code_challenge\"), u_map_get(request->map_url, \"code_challenge_method\"), code_challenge_stored)) == G_OK) {\n                  if ((authorization_code = generate_authorization_code(config, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")), u_map_get(request->map_url, \"redirect_uri\"), issued_for, u_map_get_case(request->map_header, \"user-agent\"), code_challenge_stored)) != NULL) {\n                    redirect_url = msprintf(\"%s%scode=%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), authorization_code, state_param);\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    response->status = 302;\n                    o_free(redirect_url);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CODE, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error generate_authorization_code\");\n                    response->status = 302;\n                  }\n                  o_free(authorization_code);\n                } else if (res == G_ERROR_PARAM) {\n                  redirect_url = msprintf(\"%s%serror=invalid_request\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - Invalid code_challenge or code_challenge_method, origin: %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n                  response->status = 302;\n                } else {\n                  redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error is_code_challenge_valid\");\n                  response->status = 302;\n                }\n              } else {\n                redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                o_free(redirect_url);\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error glewlwyd_callback_trigger_session_used\");\n                response->status = 302;\n              }\n            } else {\n              redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error get_client_hostname\");\n              response->status = 302;\n            }\n            o_free(issued_for);\n          } else {\n            // Redirect to login page\n            redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n            response->status = 302;\n          }\n        } else if (check_result_value(j_session, G_ERROR_NOT_FOUND)) {\n          // Redirect to login page\n          redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          response->status = 302;\n        } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n          // Scope is not allowed for this user\n          response->status = 302;\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list '%s' is invalid for user '%s', origin: %s\", u_map_get(request->map_url, \"scope\"), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), ip_source);\n          redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        } else {\n          redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_auth_code_grant - oauth2 - Error validate_session_client_scope\");\n          response->status = 302;\n        }\n        json_decref(j_session);\n      } else {\n        // Redirect to login page\n        redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n        response->status = 302;\n      }\n    } else {\n      // Scope is not allowed for this user\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_auth_code_grant - oauth2 - scope list is missing or empty, origin: %s\", ip_source);\n      response->status = 403;\n    }\n  } else {\n    // client is not authorized\n    response->status = 403;\n    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n  }\n  o_free(state_param);\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The second step of authentiation code\n * Validates if code, client_id and redirect_uri sent are valid, then returns a token set\n */\nstatic int check_auth_type_access_token_request (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * code = u_map_get(request->map_post_body, \"code\"),\n             * client_id = u_map_get(request->map_post_body, \"client_id\"),\n             * redirect_uri = u_map_get(request->map_post_body, \"redirect_uri\"),\n             * code_verifier = u_map_get(request->map_post_body, \"code_verifier\"),\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_code, * j_body, * j_refresh_token, * j_client, * j_user;\n  time_t now;\n  char * refresh_token = NULL, * access_token = NULL;\n\n  if (client_id == NULL && request->auth_basic_user != NULL) {\n    client_id = request->auth_basic_user;\n  }\n  if (code == NULL || client_id == NULL || redirect_uri == NULL) {\n    response->status = 400;\n  } else {\n    j_client = check_client_valid(config, client_id, request->auth_basic_user, request->auth_basic_password, redirect_uri, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, 0, ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      j_code = validate_authorization_code(config, code, client_id, redirect_uri, code_verifier, ip_source);\n      if (check_result_value(j_code, G_OK)) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")));\n        if (check_result_value(j_user, G_OK)) {\n          time(&now);\n          if ((refresh_token = generate_refresh_token(config, client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, ip_source)) != NULL) {\n            j_refresh_token = serialize_refresh_token(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"gpgc_id\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"refresh-token-duration\")), json_object_get(json_object_get(j_code, \"code\"), \"refresh-token-rolling\")==json_true(), refresh_token, issued_for, u_map_get_case(request->map_header, \"user-agent\"));\n            if (check_result_value(j_refresh_token, G_OK)) {\n              if ((access_token = generate_access_token(config,\n                                                        json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")),\n                                                        client_id,\n                                                        json_object_get(j_user, \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE, json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")), json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"username\")), client_id, json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")), now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                  if (disable_authorization_code(config, json_integer_value(json_object_get(json_object_get(j_code, \"code\"), \"gpgc_id\"))) == G_OK) {\n                    j_body = json_pack(\"{sssssssisIss}\",\n                                          \"token_type\",\n                                          \"bearer\",\n                                          \"access_token\",\n                                          access_token,\n                                          \"refresh_token\",\n                                          refresh_token,\n                                          \"iat\",\n                                          now,\n                                          \"expires_in\",\n                                          config->access_token_duration,\n                                          \"scope\",\n                                          json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")));\n                    ulfius_set_json_body_response(response, 200, j_body);\n                    json_decref(j_body);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error disable_authorization_code\");\n                    j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                    ulfius_set_json_body_response(response, 500, j_body);\n                    json_decref(j_body);\n                  }\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error serialize_access_token\");\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error generate_access_token\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n              o_free(access_token);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error serialize_refresh_token\");\n              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n              ulfius_set_json_body_response(response, 500, j_body);\n              json_decref(j_body);\n            }\n            json_decref(j_refresh_token);\n            o_free(refresh_token);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error generate_refresh_token\");\n            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n            ulfius_set_json_body_response(response, 500, j_body);\n            json_decref(j_body);\n          }\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n          ulfius_set_json_body_response(response, 500, j_body);\n          json_decref(j_body);\n        }\n        json_decref(j_user);\n      } else if (check_result_value(j_code, G_ERROR_UNAUTHORIZED)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        j_body = json_pack(\"{ss}\", \"error\", \"invalid_code\");\n        ulfius_set_json_body_response(response, 403, j_body);\n        json_decref(j_body);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);\n      } else if (check_result_value(j_code, G_ERROR_PARAM)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        j_body = json_pack(\"{ss}\", \"error\", \"invalid_request\");\n        ulfius_set_json_body_response(response, 403, j_body);\n        json_decref(j_body);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_code);\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The second more simple authorization type: client redirects user to login page,\n * Then if authorized, glewlwyd redirects to redirect_uri with the access_token in the uri\n * If necessary, an intermediate step can be used: login page\n */\nstatic int check_auth_type_implicit_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * redirect_url, * issued_for, * state_encoded = NULL, * state_param = NULL;\n  json_t * j_session,\n         * j_client = check_client_valid(config, u_map_get(request->map_url, \"client_id\"), request->auth_basic_user, request->auth_basic_password, u_map_get(request->map_url, \"redirect_uri\"), GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT, 1, ip_source);\n  char * access_token;\n  time_t now;\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n  // Check if client is allowed to perform this request\n  if (check_result_value(j_client, G_OK)) {\n    // Client is allowed to use auth_code grant with this redirection_uri\n    if (!o_strnullempty(u_map_get(request->map_url, \"scope\"))) {\n      if (u_map_has_key(request->map_url, \"g_continue\")) {\n        j_session = validate_session_client_scope(config, request, u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"));\n        if (check_result_value(j_session, G_OK)) {\n          if (json_object_get(json_object_get(j_session, \"session\"), \"authorization_required\") == json_false()) {\n            // User has granted access to the cleaned scope list for this client\n            // Generate access token\n            issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n            if (issued_for != NULL) {\n              time(&now);\n              if ((access_token = generate_access_token(config,\n                                                        json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")),\n                                                        u_map_get(request->map_url, \"client_id\"),\n                                                        json_object_get(json_object_get(j_session, \"session\"), \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT, 0, json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), u_map_get(request->map_url, \"client_id\"), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")), now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n                  if (config->glewlwyd_config->glewlwyd_callback_trigger_session_used(config->glewlwyd_config, request, json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n                    redirect_url = msprintf(\"%s%saccess_token=%s&token_type=bearer&expires_in=%\" JSON_INTEGER_FORMAT \"&scope=%s%s\",\n                                            u_map_get(request->map_url, \"redirect_uri\"),\n                                            (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '#')!=NULL?\"&\":\"#\"),\n                                            access_token,\n                                            config->access_token_duration,\n                                            json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\")),\n                                            state_param);\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    response->status = 302;\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);\n                    config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                  } else {\n                    redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                    ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                    o_free(redirect_url);\n                    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error glewlwyd_callback_trigger_session_used\");\n                    response->status = 302;\n                  }\n                } else {\n                  redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                  ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                  o_free(redirect_url);\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error serialize_access_token\");\n                  response->status = 302;\n                }\n              } else {\n                redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n                ulfius_add_header_to_response(response, \"Location\", redirect_url);\n                o_free(redirect_url);\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error generate_access_token\");\n                response->status = 302;\n              }\n              o_free(access_token);\n            } else {\n              redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error get_client_hostname\");\n              response->status = 302;\n            }\n            o_free(issued_for);\n          } else {\n            // Redirect to login page\n            redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n            response->status = 302;\n          }\n        } else if (check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n          // Scope is not allowed for this user\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_implicit_grant - oauth2 - Scope list '%s' is not allowed for user '%s', origin: %s\", u_map_get(request->map_url, \"scope\"), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), ip_source);\n          response->status = 302;\n          redirect_url = msprintf(\"%s%serror=invalid_scope%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), state_param);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        } else {\n          redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_implicit_grant - oauth2 - Error validate_session_client_scope\");\n          response->status = 302;\n        }\n        json_decref(j_session);\n      } else {\n        // Redirect to login page\n        redirect_url = get_login_url(config, request, \"auth\", u_map_get(request->map_url, \"client_id\"), u_map_get(request->map_url, \"scope\"), NULL);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n        response->status = 302;\n      }\n    } else {\n      // Empty scope is not allowed\n      response->status = 403;\n    }\n  } else {\n    // client is not authorized\n    response->status = 403;\n  }\n  o_free(state_param);\n  json_decref(j_client);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * The more simple authorization type\n * username and password are given in the POST parameters,\n * the access_token and refresh_token in a json object are returned\n */\nstatic int check_auth_type_resource_owner_pwd_cred (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_user, * j_client, * j_refresh_token, * j_body, * j_user_only, * j_element = NULL, * j_refresh = NULL;\n  int ret = G_OK, auth_type_allowed = 0;\n  const char * username = u_map_get(request->map_post_body, \"username\"),\n             * password = u_map_get(request->map_post_body, \"password\"),\n             * scope = u_map_get(request->map_post_body, \"scope\"),\n             * client_id = NULL,\n             * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  char * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header),\n       * refresh_token,\n       * access_token;\n  time_t now;\n  size_t index = 0;\n\n  if (scope == NULL || username == NULL || password == NULL || issued_for == NULL) {\n    ret = G_ERROR_PARAM;\n  } else if (request->auth_basic_user != NULL && request->auth_basic_password != NULL) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") != json_true()) {\n      ret = G_ERROR_PARAM;\n    } else if (check_result_value(j_client, G_OK)) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"password\")) {\n          auth_type_allowed = 1;\n        }\n      }\n      if (!auth_type_allowed) {\n        ret = G_ERROR_PARAM;\n      } else {\n        client_id = request->auth_basic_user;\n      }\n    } else if (check_result_value(j_client, G_ERROR_NOT_FOUND) || check_result_value(j_client, G_ERROR_UNAUTHORIZED)) {\n      ret = G_ERROR_PARAM;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error glewlwyd_callback_check_client_valid\");\n      ret = G_ERROR;\n    }\n    json_decref(j_client);\n  }\n  if (ret == G_OK) {\n    j_user = config->glewlwyd_config->glewlwyd_callback_check_user_valid(config->glewlwyd_config, username, password, scope);\n    if (check_result_value(j_user, G_OK)) {\n      j_refresh = get_refresh_token_duration_rolling(config, json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));\n      if (check_result_value(j_refresh, G_OK)) {\n        time(&now);\n        if ((refresh_token = generate_refresh_token(config,\n                                                    client_id,\n                                                    username,\n                                                    json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                    now,\n                                                    ip_source)) != NULL) {\n          j_refresh_token = serialize_refresh_token(config,\n                                                    GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS,\n                                                    0,\n                                                    username,\n                                                    client_id,\n                                                    json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                    now,\n                                                    json_integer_value(json_object_get(json_object_get(j_refresh, \"refresh-token\"), \"refresh-token-duration\")),\n                                                    json_object_get(json_object_get(j_refresh, \"refresh-token\"), \"refresh-token-rolling\")==json_true(),\n                                                    refresh_token,\n                                                    issued_for,\n                                                    u_map_get_case(request->map_header, \"user-agent\"));\n          if (check_result_value(j_refresh_token, G_OK)) {\n            j_user_only = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, username);\n            if (check_result_value(j_user_only, G_OK)) {\n              if ((access_token = generate_access_token(config,\n                                                        username,\n                                                        client_id,\n                                                        json_object_get(j_user_only, \"user\"),\n                                                        json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                                        now,\n                                                        ip_source)) != NULL) {\n                if (serialize_access_token(config,\n                                           GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS,\n                                           json_integer_value(json_object_get(j_refresh_token, \"gpgr_id\")),\n                                           username,\n                                           client_id,\n                                           json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")),\n                                           now,\n                                           issued_for,\n                                           u_map_get_case(request->map_header, \"user-agent\"),\n                                           access_token) == G_OK) {\n                  j_body = json_pack(\"{sssssssisIss}\",\n                                     \"token_type\",\n                                     \"bearer\",\n                                     \"access_token\",\n                                     access_token,\n                                     \"refresh_token\",\n                                     refresh_token,\n                                     \"iat\",\n                                     now,\n                                     \"expires_in\",\n                                     config->access_token_duration,\n                                     \"scope\",\n                                     json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));\n                  ulfius_set_json_body_response(response, 200, j_body);\n                  json_decref(j_body);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);\n                  config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n                } else {\n                  y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error serialize_access_token\");\n                  j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                  ulfius_set_json_body_response(response, 500, j_body);\n                  json_decref(j_body);\n                }\n              } else {\n                y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error generate_access_token\");\n                j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n                ulfius_set_json_body_response(response, 500, j_body);\n                json_decref(j_body);\n              }\n              o_free(access_token);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error glewlwyd_plugin_callback_get_user\");\n              j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n              ulfius_set_json_body_response(response, 500, j_body);\n              json_decref(j_body);\n            }\n            json_decref(j_user_only);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error serialize_refresh_token\");\n            j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n            ulfius_set_json_body_response(response, 500, j_body);\n            json_decref(j_body);\n          }\n          json_decref(j_refresh_token);\n          o_free(refresh_token);\n        } else {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error generate_refresh_token\");\n          j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n          ulfius_set_json_body_response(response, 500, j_body);\n          json_decref(j_body);\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error get_refresh_token_duration_rolling\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_refresh);\n    } else if (check_result_value(j_user, G_ERROR_NOT_FOUND) || check_result_value(j_user, G_ERROR_UNAUTHORIZED)) {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error user '%s'\", username);\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", username, ip_source);\n      response->status = 403;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - glewlwyd_callback_check_user_valid\");\n      response->status = 403;\n    }\n    json_decref(j_user);\n  } else if (ret == G_ERROR_PARAM) {\n    response->status = 400;\n  } else {\n    response->status = 500;\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Send an access_token to a confidential client\n */\nstatic int check_auth_type_client_credentials_grant (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_client, * j_element = NULL, * json_body;\n  char ** scope_array, ** scope_allowed = NULL, * scope_joined, * access_token, * issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  size_t index = 0;\n  int i, i_scope_allowed = 0, auth_type_allowed = 0;\n  time_t now;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n\n  if (issued_for == NULL) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2  - Error get_client_hostname\");\n    response->status = 500;\n  } else if (request->auth_basic_user != NULL && request->auth_basic_password != NULL && !o_strnullempty(u_map_get(request->map_post_body, \"scope\"))) {\n    j_client = config->glewlwyd_config->glewlwyd_callback_check_client_valid(config->glewlwyd_config, request->auth_basic_user, request->auth_basic_password);\n    if (check_result_value(j_client, G_OK) && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n      json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"authorization_type\"), index, j_element) {\n        if (0 == o_strcmp(json_string_value(j_element), \"client_credentials\")) {\n          auth_type_allowed = 1;\n        }\n      }\n      if (split_string_remove_duplicates(u_map_get(request->map_post_body, \"scope\"), \" \", &scope_array) > 0) {\n        for (i=0; scope_array[i]!=NULL; i++) {\n          json_array_foreach(json_object_get(json_object_get(j_client, \"client\"), \"scope\"), index, j_element) {\n            if (0 == o_strcmp(json_string_value(j_element), scope_array[i])) {\n              if (scope_allowed == NULL) {\n                scope_allowed = o_malloc(2 * sizeof(char*));\n              } else {\n                scope_allowed = o_realloc(scope_allowed, (2 + (size_t)i_scope_allowed) * sizeof(char*));\n              }\n              scope_allowed[i_scope_allowed] = scope_array[i];\n              scope_allowed[i_scope_allowed+1] = NULL;\n              i_scope_allowed++;\n            }\n          }\n        }\n        if (!i_scope_allowed) {\n          json_body = json_pack(\"{ss}\", \"error\", \"scope_invalid\");\n          ulfius_set_json_body_response(response, 400, json_body);\n          json_decref(json_body);\n        } else if (!auth_type_allowed) {\n          json_body = json_pack(\"{ss}\", \"error\", \"authorization_type_invalid\");\n          ulfius_set_json_body_response(response, 400, json_body);\n          json_decref(json_body);\n        } else {\n          scope_joined = string_array_join((const char **)scope_allowed, \" \");\n          time(&now);\n          if ((access_token = generate_client_access_token(config, request->auth_basic_user, scope_joined, json_object_get(j_client, \"client\"), now, ip_source)) != NULL) {\n            if (serialize_access_token(config, GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS, 0, NULL, request->auth_basic_user, scope_joined, now, issued_for, u_map_get_case(request->map_header, \"user-agent\"), access_token) == G_OK) {\n              json_body = json_pack(\"{sssssIss}\",\n                                    \"access_token\", access_token,\n                                    \"token_type\", \"bearer\",\n                                    \"expires_in\", config->access_token_duration,\n                                    \"scope\", scope_joined);\n              ulfius_set_json_body_response(response, 200, json_body);\n              json_decref(json_body);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error serialize_access_token\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error generate_client_access_token\");\n            response->status = 500;\n          }\n          o_free(access_token);\n          o_free(scope_joined);\n          o_free(scope_allowed);\n        }\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error split_string_remove_duplicates\");\n        response->status = 500;\n      }\n      free_string_array(scope_array);\n    } else {\n      y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc check_auth_type_client_credentials_grant - Error client_id '%s' invalid\", request->auth_basic_user);\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", request->auth_basic_user, ip_source);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n      response->status = 403;\n    }\n    json_decref(j_client);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"oauth2 check_auth_type_client_credentials_grant - Error invalid input parameters. client_id: '%s', scope: '%s', origin: %s\", request->auth_basic_user, u_map_get(request->map_post_body, \"scope\"), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 403;\n  }\n  o_free(issued_for);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Get a new access_token from a valid refresh_token\n */\nstatic int get_access_token_from_refresh (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * refresh_token = u_map_get(request->map_post_body, \"refresh_token\"), * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_refresh, * json_body, * j_client, * j_user;\n  time_t now;\n  char * access_token, * scope_joined = NULL, * issued_for;\n  int has_error = 0, has_issues = 0;\n\n  if (refresh_token != NULL && !o_strnullempty(refresh_token)) {\n    j_refresh = validate_refresh_token(config, refresh_token);\n    if (check_result_value(j_refresh, G_OK)) {\n      if (json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\") != json_null()) {\n        j_client = check_client_valid(config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")), request->auth_basic_user, request->auth_basic_password, NULL, GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN, 0, ip_source);\n        if (!check_result_value(j_client, G_OK)) {\n          has_issues = 1;\n        } else if (request->auth_basic_user == NULL && request->auth_basic_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - client '%s' is invalid or is not confidential, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        }\n        json_decref(j_client);\n      }\n      time(&now);\n      issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n      scope_joined = join_json_string_array(json_object_get(json_object_get(j_refresh, \"token\"), \"scope\"), \" \");\n      if (scope_joined == NULL) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error join_json_string_array\");\n        has_error = 1;\n      }\n      if (update_refresh_token(config,\n                               json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")),\n                               (json_object_get(json_object_get(j_refresh, \"token\"), \"rolling_expiration\") == json_true())?json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"duration\")):0,\n                               0,\n                               now) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error update_refresh_token\");\n        has_error = 1;\n      }\n      if (!has_error && !has_issues) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")));\n        if (check_result_value(j_user, G_OK)) {\n          if ((access_token = generate_access_token(config,\n                                                    json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")),\n                                                    json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")),\n                                                    json_object_get(j_user, \"user\"),\n                                                    scope_joined,\n                                                    now,\n                                                    ip_source)) != NULL) {\n            if (serialize_access_token(config,\n                                       GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN,\n                                       json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")),\n                                       json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"username\")),\n                                       json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")),\n                                       scope_joined,\n                                       now,\n                                       issued_for,\n                                       u_map_get_case(request->map_header, \"user-agent\"),\n                                       access_token) == G_OK) {\n              json_body = json_pack(\"{sssssIsssi}\",\n                                    \"access_token\", access_token,\n                                    \"token_type\", \"bearer\",\n                                    \"expires_in\", config->access_token_duration,\n                                    \"scope\", scope_joined,\n                                    \"iat\", now);\n              ulfius_set_json_body_response(response, 200, json_body);\n              json_decref(json_body);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"refresh_token\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error serialize_access_token\");\n              response->status = 500;\n            }\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error generate_client_access_token\");\n            response->status = 500;\n          }\n          o_free(access_token);\n        } else {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - Error glewlwyd_plugin_callback_get_user, origin: %s\", ip_source);\n          response->status = 500;\n        }\n        json_decref(j_user);\n      } else if (has_issues) {\n        response->status = 400;\n      } else {\n        response->status = 500;\n      }\n      o_free(issued_for);\n    } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      response->status = 400;\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error validate_refresh_token\");\n      response->status = 500;\n    }\n    json_decref(j_refresh);\n    o_free(scope_joined);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"get_access_token_from_refresh - oauth2 - Error token empty or missing, origin: %s\", ip_source);\n    response->status = 400;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Invalidate a refresh token\n */\nstatic int delete_refresh_token (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * refresh_token = u_map_get(request->map_post_body, \"refresh_token\"), * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n  json_t * j_refresh, * j_client;\n  time_t now;\n  char * issued_for;\n  int has_issues = 0;\n\n  if (refresh_token != NULL && !o_strnullempty(refresh_token)) {\n    j_refresh = validate_refresh_token(config, refresh_token);\n    if (check_result_value(j_refresh, G_OK)) {\n      if (json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\") != json_null()) {\n        j_client = check_client_valid(config, json_string_value(json_object_get(json_object_get(j_refresh, \"token\"), \"client_id\")), request->auth_basic_user, request->auth_basic_password, NULL, GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN, 0, ip_source);\n        if (!check_result_value(j_client, G_OK)) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - client '%s' is invalid, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        } else if (request->auth_basic_user == NULL && request->auth_basic_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {\n          y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - client '%s' is invalid or is not confidential, origin: %s\", request->auth_basic_user, ip_source);\n          has_issues = 1;\n        }\n        json_decref(j_client);\n      }\n      if (!has_issues) {\n        time(&now);\n        issued_for = get_client_hostname(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header);\n        if (update_refresh_token(config, json_integer_value(json_object_get(json_object_get(j_refresh, \"token\"), \"gpgr_id\")), 0, 1, now) != G_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"delete_refresh_token - oauth2 - Error update_refresh_token\");\n          response->status = 500;\n        }\n        o_free(issued_for);\n      } else {\n        response->status = 400;\n      }\n    } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      response->status = 400;\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"delete_refresh_token - oauth2 - Error validate_refresh_token\");\n      response->status = 500;\n    }\n    json_decref(j_refresh);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"delete_refresh_token - oauth2 - token missing or empty, origin: %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 400;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_check_glewlwyd_session(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_session, * j_user;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (!o_strnullempty(u_map_get(request->map_url, \"impersonate\"))) {\n    if (config->glewlwyd_config->glewlwyd_config->admin_session_authentication & GLEWLWYD_SESSION_AUTH_COOKIE) {\n      j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, config->glewlwyd_config->glewlwyd_config->admin_scope);\n      if (check_result_value(j_session, G_OK)) {\n        j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, u_map_get(request->map_url, \"impersonate\"));\n        if (check_result_value(j_user, G_OK)) {\n          if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", u_map_get(request->map_url, \"impersonate\")), (void (*)(void *))&json_decref) != U_OK) {\n            ret = U_CALLBACK_ERROR;\n          } else {\n            ret = U_CALLBACK_CONTINUE;\n          }\n        }\n        json_decref(j_user);\n      }\n      json_decref(j_session);\n    }\n  } else {\n    j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, NULL);\n    if (check_result_value(j_session, G_OK)) {\n      if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\"))), (void (*)(void *))&json_decref) != U_OK) {\n        ret = U_CALLBACK_ERROR;\n      } else {\n        ret = U_CALLBACK_CONTINUE;\n      }\n    }\n    json_decref(j_session);\n  }\n  return ret;\n}\n\nstatic int callback_check_glewlwyd_session_or_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_session, * j_user, * j_introspect;\n  int ret = U_CALLBACK_UNAUTHORIZED;\n\n  if (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) != NULL && o_strlen(u_map_get_case(request->map_header, HEADER_AUTHORIZATION)) >= o_strlen(HEADER_PREFIX_BEARER)) {\n    j_introspect = get_token_metadata(config, (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) + o_strlen(HEADER_PREFIX_BEARER)), \"access_token\", NULL);\n    if (check_result_value(j_introspect, G_OK) && json_object_get(json_object_get(j_introspect, \"token\"), \"active\") == json_true()) {\n      ret = callback_check_glewlwyd_access_token(request, response, (void*)config->glewlwyd_resource_config);\n    }\n    json_decref(j_introspect);\n  } else {\n    if (!o_strnullempty(u_map_get(request->map_url, \"impersonate\"))) {\n      if (config->glewlwyd_config->glewlwyd_config->admin_session_authentication & GLEWLWYD_SESSION_AUTH_COOKIE) {\n        j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, config->glewlwyd_config->glewlwyd_config->admin_scope);\n        if (check_result_value(j_session, G_OK)) {\n          j_user = config->glewlwyd_config->glewlwyd_plugin_callback_get_user(config->glewlwyd_config, u_map_get(request->map_url, \"impersonate\"));\n          if (check_result_value(j_user, G_OK)) {\n            if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", u_map_get(request->map_url, \"impersonate\")), (void (*)(void *))&json_decref) != U_OK) {\n              ret = U_CALLBACK_ERROR;\n            } else {\n              ret = U_CALLBACK_CONTINUE;\n            }\n          }\n          json_decref(j_user);\n        }\n        json_decref(j_session);\n      }\n    } else {\n      j_session = config->glewlwyd_config->glewlwyd_callback_check_session_valid(config->glewlwyd_config, request, NULL);\n      if (check_result_value(j_session, G_OK)) {\n        if (ulfius_set_response_shared_data(response, json_pack(\"{ss}\", \"username\", json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\"))), (void (*)(void *))&json_decref) != U_OK) {\n          ret = U_CALLBACK_ERROR;\n        } else {\n          ret = U_CALLBACK_CONTINUE;\n        }\n      }\n      json_decref(j_session);\n    }\n  }\n  return ret;\n}\n\nstatic int callback_oauth2_authorization(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  const char * response_type = u_map_get(request->map_url, \"response_type\");\n  int result = U_CALLBACK_CONTINUE;\n  char * state_encoded = NULL, * state_param = NULL;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (u_map_get(request->map_url, \"state\") != NULL) {\n    state_encoded = ulfius_url_encode(u_map_get(request->map_url, \"state\"));\n    state_param = msprintf(\"&state=%s\", state_encoded);\n    o_free(state_encoded);\n  } else {\n    state_param = o_strdup(\"\");\n  }\n\n  if (0 == o_strcmp(\"code\", response_type)) {\n    if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n      result = check_auth_type_auth_code_grant(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"token\", response_type)) {\n    if (is_authorization_type_enabled((struct _oauth2_config *)user_data, GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT) && u_map_get(request->map_url, \"redirect_uri\") != NULL) {\n      result = check_auth_type_implicit_grant(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else {\n    response->status = 403;\n  }\n  o_free(state_param);\n\n  return result;\n}\n\nstatic int callback_oauth2_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * grant_type = u_map_get(request->map_post_body, \"grant_type\");\n  int result = U_CALLBACK_CONTINUE;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (0 == o_strcmp(\"authorization_code\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE)) {\n      result = check_auth_type_access_token_request(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"password\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS)) {\n      result = check_auth_type_resource_owner_pwd_cred(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"client_credentials\", grant_type)) {\n    if (is_authorization_type_enabled(config, GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS)) {\n      result = check_auth_type_client_credentials_grant(request, response, user_data);\n    } else {\n      response->status = 403;\n    }\n  } else if (0 == o_strcmp(\"refresh_token\", grant_type)) {\n    result = get_access_token_from_refresh(request, response, user_data);\n  } else if (0 == o_strcmp(\"delete_token\", grant_type)) {\n    result = delete_refresh_token(request, response, user_data);\n  } else if (0 == o_strcmp(\"urn:ietf:params:oauth:grant-type:device_code\", grant_type)) {\n    result = check_auth_type_device_code(request, response, user_data);\n  } else {\n    y_log_message(Y_LOG_LEVEL_DEBUG, \"callback_oauth2_token - oauth2 - Unknown grant_type '%s', origin: %s\", grant_type, get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n    response->status = 400;\n  }\n  return result;\n}\n\nstatic int callback_oauth2_get_profile(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  UNUSED(request);\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  json_t * j_profile = config->glewlwyd_config->glewlwyd_plugin_callback_get_user_profile(config->glewlwyd_config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")));\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (check_result_value(j_profile, G_OK)) {\n    json_object_del(json_object_get(j_profile, \"user\"), \"scope\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"enabled\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"source\");\n    json_object_del(json_object_get(j_profile, \"user\"), \"last_login\");\n    ulfius_set_json_body_response(response, 200, json_object_get(j_profile, \"user\"));\n  } else {\n    response->status = 404;\n  }\n  json_decref(j_profile);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_oauth2_refresh_token_list_get(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  size_t offset = 0, limit = GLEWLWYD_DEFAULT_LIMIT_SIZE;\n  long int l_converted = 0;\n  char * endptr = NULL, * sort = NULL;\n  json_t * j_refresh_list;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if (u_map_get(request->map_url, \"offset\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"offset\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      offset = (size_t)l_converted;\n    }\n  }\n  if (u_map_get(request->map_url, \"limit\") != NULL) {\n    l_converted = strtol(u_map_get(request->map_url, \"limit\"), &endptr, 10);\n    if (!(*endptr) && l_converted > 0) {\n      limit = (size_t)l_converted;\n    }\n  }\n  if (0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"authorization_type\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"client_id\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_at\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"last_seen\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"expires_at\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"issued_for\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"user_agent\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"enabled\") || 0 == o_strcmp(u_map_get(request->map_url, \"sort\"), \"rolling_expiration\")) {\n    sort = msprintf(\"gpgr_%s%s\", u_map_get(request->map_url, \"sort\"), (u_map_get_case(request->map_url, \"desc\")!=NULL?\" DESC\":\" ASC\"));\n  }\n  j_refresh_list = refresh_token_list_get(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"pattern\"), offset, limit, sort);\n  if (check_result_value(j_refresh_list, G_OK)) {\n    ulfius_set_json_body_response(response, 200, json_object_get(j_refresh_list, \"refresh_token\"));\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_refresh_token_list_get - Error refresh_token_list_get\");\n    response->status = 500;\n  }\n  o_free(sort);\n  json_decref(j_refresh_list);\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int callback_oauth2_disable_refresh_token(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  int res;\n\n  u_map_put(response->map_header, \"Cache-Control\", \"no-store\");\n  u_map_put(response->map_header, \"Pragma\", \"no-cache\");\n  u_map_put(response->map_header, \"Referrer-Policy\", \"no-referrer\");\n\n  if ((res = refresh_token_disable(config, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), u_map_get(request->map_url, \"token_hash\"), get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header))) == G_ERROR_NOT_FOUND) {\n    response->status = 404;\n  } else if (res == G_ERROR_PARAM) {\n    response->status = 400;\n  } else if (res != G_OK) {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_disable_refresh_token - Error refresh_token_disable\");\n    response->status = 500;\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Generates a new device_authorization if the client is allowed\n */\nstatic int callback_oauth2_device_authorization(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  const char * ip_source = get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header), * client_id = request->auth_basic_user, * client_secret = request->auth_basic_password;\n  char * verification_uri, * verification_uri_complete, * plugin_url = config->glewlwyd_config->glewlwyd_callback_get_plugin_external_url(config->glewlwyd_config, json_string_value(json_object_get(config->j_params, \"name\")));\n  json_t * j_client, * j_body, * j_result;\n\n  if (client_id == NULL && u_map_get(request->map_post_body, \"client_id\") != NULL) {\n    client_id = u_map_get(request->map_post_body, \"client_id\");\n  }\n  if (client_secret == NULL && u_map_get(request->map_post_body, \"client_secret\") != NULL) {\n    client_secret = u_map_get(request->map_post_body, \"client_secret\");\n  }\n  if (!o_strnullempty(u_map_get(request->map_post_body, \"scope\"))) {\n    j_client = check_client_valid(config,\n                                 client_id,\n                                 client_id,\n                                 client_secret,\n                                 NULL,\n                                 GLEWLWYD_AUTHORIZATION_TYPE_DEVICE_AUTHORIZATION,\n                                 0,\n                                 ip_source);\n    if (check_result_value(j_client, G_OK)) {\n      client_id = json_string_value(json_object_get(json_object_get(j_client, \"client\"), \"client_id\"));\n      j_result = generate_device_authorization(config, client_id, u_map_get(request->map_post_body, \"scope\"), ip_source);\n      if (check_result_value(j_result, G_OK)) {\n          verification_uri = msprintf(\"%s/device\", plugin_url);\n          verification_uri_complete = msprintf(\"%s/device?code=%s\", plugin_url, json_string_value(json_object_get(json_object_get(j_result, \"authorization\"), \"user_code\")));\n          j_body = json_pack(\"{sOsOsssssOsO}\",\n                             \"device_code\", json_object_get(json_object_get(j_result, \"authorization\"), \"device_code\"),\n                             \"user_code\", json_object_get(json_object_get(j_result, \"authorization\"), \"user_code\"),\n                             \"verification_uri\", verification_uri,\n                             \"verification_uri_complete\", verification_uri_complete,\n                             \"expires_in\", json_object_get(config->j_params, \"device-authorization-expiration\"),\n                             \"interval\", json_object_get(config->j_params, \"device-authorization-interval\"));\n          ulfius_set_json_body_response(response, 200, j_body);\n          json_decref(j_body);\n          o_free(verification_uri);\n          o_free(verification_uri_complete);\n          config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_authorization oauth2 - Error generate_device_authorization\");\n        j_body = json_pack(\"{ss}\", \"error\", \"server_error\");\n        ulfius_set_json_body_response(response, 500, j_body);\n        json_decref(j_body);\n      }\n      json_decref(j_result);\n    } else {\n      j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");\n      ulfius_set_json_body_response(response, 403, j_body);\n      json_decref(j_body);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);\n    }\n    json_decref(j_client);\n  } else {\n    j_body = json_pack(\"{ss}\", \"error\", \"invalid_scope\");\n    ulfius_set_json_body_response(response, 400, j_body);\n    json_decref(j_body);\n  }\n  o_free(plugin_url);\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * Verifies the device code by the user\n */\nstatic int callback_oauth2_device_verification(const struct _u_request * request, struct _u_response * response, void * user_data) {\n  struct _oauth2_config * config = (struct _oauth2_config *)user_data;\n  char * redirect_url = NULL;\n  struct _u_map param;\n  json_t * j_result, * j_session;\n\n  if (!!o_strnullempty(u_map_get(request->map_url, \"code\"))) {\n    if (u_map_init(&param) == U_OK) {\n      u_map_put(&param, \"prompt\", \"device\");\n      response->status = 302;\n      redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      u_map_clean(&param);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  } else if (o_strlen(u_map_get(request->map_url, \"code\")) != (GLEWLWYD_DEVICE_AUTH_USER_CODE_LENGTH+1)) {\n    if (u_map_init(&param) == U_OK) {\n      y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n      u_map_put(&param, \"prompt\", \"deviceCodeError\");\n      response->status = 302;\n      redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n      ulfius_add_header_to_response(response, \"Location\", redirect_url);\n      o_free(redirect_url);\n      u_map_clean(&param);\n      config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  } else {\n    if (u_map_init(&param) == U_OK) {\n      j_result = validate_device_auth_user_code(config, u_map_get(request->map_url, \"code\"));\n      if (check_result_value(j_result, G_OK)) {\n        if (u_map_has_key(request->map_url, \"g_continue\")) {\n          j_session = validate_session_client_scope(config, request, json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")));\n          if (check_result_value(j_session, G_OK)) {\n            if (validate_device_authorization_scope(config, json_integer_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"gpgda_id\")), json_string_value(json_object_get(json_object_get(json_object_get(j_session, \"session\"), \"user\"), \"username\")), json_string_value(json_object_get(json_object_get(j_session, \"session\"), \"scope_filtered\"))) == G_OK) {\n              response->status = 302;\n              u_map_put(&param, \"prompt\", \"deviceComplete\");\n              redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);\n              config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);\n            } else {\n              y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_authorization_scope\");\n              response->status = 302;\n              u_map_put(&param, \"prompt\", \"deviceServerError\");\n              redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n              ulfius_add_header_to_response(response, \"Location\", redirect_url);\n              o_free(redirect_url);\n            }\n          } else if (check_result_value(j_session, G_ERROR_NOT_FOUND) || check_result_value(j_session, G_ERROR_UNAUTHORIZED)) {\n            // Redirect to login page\n            response->status = 302;\n            redirect_url = get_login_url(config, request, \"device\", json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")), NULL);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n          } else {\n            y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_session_client_scope\");\n            response->status = 302;\n            u_map_put(&param, \"prompt\", \"deviceServerError\");\n            redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n            ulfius_add_header_to_response(response, \"Location\", redirect_url);\n            o_free(redirect_url);\n          }\n          json_decref(j_session);\n        } else {\n          // Redirect to login page\n          response->status = 302;\n          redirect_url = get_login_url(config, request, \"device\", json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"client_id\")), json_string_value(json_object_get(json_object_get(j_result, \"device_auth\"), \"scope\")), NULL);\n          ulfius_add_header_to_response(response, \"Location\", redirect_url);\n          o_free(redirect_url);\n        }\n      } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {\n        y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request, config->glewlwyd_config->glewlwyd_config->originating_ip_header));\n        response->status = 302;\n        u_map_put(&param, \"prompt\", \"deviceCodeError\");\n        redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n        config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);\n      } else {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_auth_user_code\");\n        response->status = 302;\n        u_map_put(&param, \"prompt\", \"deviceServerError\");\n        redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);\n        ulfius_add_header_to_response(response, \"Location\", redirect_url);\n        o_free(redirect_url);\n      }\n      json_decref(j_result);\n      u_map_clean(&param);\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");\n      response->status = 500;\n    }\n  }\n  return U_CALLBACK_CONTINUE;\n}\n\nstatic int jwt_autocheck(struct _oauth2_config * config) {\n  time_t now;\n  char * token;\n  jwt_t * jwt = NULL;\n  int ret;\n\n  time(&now);\n  token = generate_access_token(config, GLEWLWYD_CHECK_JWT_USERNAME, NULL, NULL, GLEWLWYD_CHECK_JWT_SCOPE, now, NULL);\n  if (token != NULL) {\n    jwt = r_jwt_copy(config->glewlwyd_resource_config->jwt);\n    if (r_jwt_advanced_parse(jwt, token, R_PARSE_NONE, 0) == RHN_OK && r_jwt_verify_signature(jwt, NULL, 0) == RHN_OK) {\n      ret = RHN_OK;\n    } else {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"jwt_autocheck - oauth2 - Error verifying signature\");\n      ret = G_ERROR_PARAM;\n    }\n    r_jwt_free(jwt);\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"jwt_autocheck - oauth2 - Error generate_access_token\");\n    ret = G_ERROR;\n  }\n  o_free(token);\n  return ret;\n}\n\nstatic int disable_user_data(struct _oauth2_config * config, const char * username) {\n  json_t * j_query;\n  int res, ret = G_OK;\n\n  do {\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_CODE,\n                        \"set\",\n                          \"gpgc_enabled\", 0,\n                        \"where\",\n                          \"gpgc_plugin_name\", config->name,\n                          \"gpgc_username\", username,\n                          \"gpgc_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable codes\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_REFRESH_TOKEN,\n                        \"set\",\n                          \"gpgr_enabled\", 0,\n                        \"where\",\n                          \"gpgr_plugin_name\", config->name,\n                          \"gpgr_username\", username,\n                          \"gpgr_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable refresh tokens\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssssi}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_ACCESS_TOKEN,\n                        \"set\",\n                          \"gpga_enabled\", 0,\n                        \"where\",\n                          \"gpga_plugin_name\", config->name,\n                          \"gpga_username\", username,\n                          \"gpga_enabled\", 1);\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable access tokens\");\n      ret = G_ERROR;\n      break;\n    }\n\n    j_query = json_pack(\"{sss{si}s{sssss{ssss}}}\",\n                        \"table\", GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION,\n                        \"set\",\n                          \"gpgda_status\", 3,\n                        \"where\",\n                          \"gpgda_plugin_name\", config->name,\n                          \"gpgda_username\", username,\n                          \"gpgda_status\",\n                            \"operator\", \"raw\",\n                            \"value\", \"in (0, 1)\");\n    res = h_update(config->glewlwyd_config->glewlwyd_config->conn, j_query, NULL);\n    json_decref(j_query);\n    if (res != H_OK) {\n      y_log_message(Y_LOG_LEVEL_ERROR, \"disable_user_data - Error disable device auth tokens\");\n      ret = G_ERROR;\n      break;\n    }\n  } while (0);\n  return ret;\n}\n\njson_t * plugin_module_load(struct config_plugin * config) {\n  UNUSED(config);\n  return json_pack(\"{si ss ss ss}\",\n                   \"result\", G_OK,\n                   \"name\", \"oauth2-glewlwyd\",\n                   \"display_name\", \"OAuth2 plugin\",\n                   \"description\", \"Plugin for legacy OAuth2 workflow\");\n}\n\nint plugin_module_unload(struct config_plugin * config) {\n  UNUSED(config);\n  return G_OK;\n}\n\njson_t * plugin_module_init(struct config_plugin * config, const char * name, json_t * j_parameters, void ** cls) {\n  const unsigned char * key;\n  jwa_alg alg = R_JWA_ALG_UNKNOWN;\n  pthread_mutexattr_t mutexattr;\n  json_t * j_return = NULL, * j_result = NULL, * j_element = NULL;\n  size_t index = 0;\n  struct _oauth2_config * p_config = NULL;\n  jwk_t * key_priv = NULL, * key_pub = NULL;\n\n  y_log_message(Y_LOG_LEVEL_INFO, \"Init plugin Glewlwyd Oauth2 '%s'\", name);\n  *cls = o_malloc(sizeof(struct _oauth2_config));\n  if (*cls != NULL) {\n    p_config = (struct _oauth2_config *)*cls;\n    p_config->glewlwyd_resource_config = NULL;\n\n    do {\n      pthread_mutexattr_init ( &mutexattr );\n      pthread_mutexattr_settype( &mutexattr, PTHREAD_MUTEX_RECURSIVE );\n      if (pthread_mutex_init(&p_config->insert_lock, &mutexattr) != 0) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error initializing insert_lock\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n      pthread_mutexattr_destroy(&mutexattr);\n\n      p_config->name = name;\n      p_config->jwt_key = NULL;\n      p_config->j_params = json_incref(j_parameters);\n      json_object_set_new(p_config->j_params, \"name\", json_string(name));\n      p_config->glewlwyd_config = config;\n      p_config->introspect_revoke_resource_config = NULL;\n      if ((p_config->glewlwyd_resource_config = o_malloc(sizeof(struct _glewlwyd_resource_config))) == NULL) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error initializing glewlwyd_resource_config\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n        break;\n      }\n\n      p_config->glewlwyd_resource_config->method = G_METHOD_HEADER;\n      p_config->glewlwyd_resource_config->oauth_scope = NULL;\n      p_config->glewlwyd_resource_config->realm = NULL;\n      p_config->glewlwyd_resource_config->accept_access_token = 1;\n      p_config->glewlwyd_resource_config->accept_client_token = 0;\n      j_result = check_parameters(p_config->j_params);\n\n      if (check_result_value(j_result, G_ERROR_PARAM)) {\n        j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", json_object_get(j_result, \"error\"));\n        break;\n      } else if (!check_result_value(j_result, G_OK)) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error check_parameters\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      p_config->access_token_duration = json_integer_value(json_object_get(p_config->j_params, \"access-token-duration\"));\n      if (!p_config->access_token_duration) {\n        p_config->access_token_duration = GLEWLWYD_ACCESS_TOKEN_EXP_DEFAULT;\n      }\n      p_config->refresh_token_duration = json_integer_value(json_object_get(p_config->j_params, \"refresh-token-duration\"));\n      if (!p_config->refresh_token_duration) {\n        p_config->refresh_token_duration = GLEWLWYD_REFRESH_TOKEN_EXP_DEFAULT;\n      }\n      p_config->code_duration = json_integer_value(json_object_get(p_config->j_params, \"code-duration\"));\n      if (!p_config->code_duration) {\n        p_config->code_duration = GLEWLWYD_CODE_EXP_DEFAULT;\n      }\n      if (json_object_get(p_config->j_params, \"refresh-token-rolling\") != NULL) {\n        p_config->refresh_token_rolling = json_object_get(p_config->j_params, \"refresh-token-rolling\")==json_true()?1:0;\n      } else {\n        p_config->refresh_token_rolling = 0;\n      }\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE] = json_object_get(p_config->j_params, \"auth-type-code-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT] = json_object_get(p_config->j_params, \"auth-type-implicit-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_RESOURCE_OWNER_PASSWORD_CREDENTIALS] = json_object_get(p_config->j_params, \"auth-type-password-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_CLIENT_CREDENTIALS] = json_object_get(p_config->j_params, \"auth-type-client-enabled\")==json_true()?1:0;\n      p_config->auth_type_enabled[GLEWLWYD_AUTHORIZATION_TYPE_REFRESH_TOKEN] = json_object_get(p_config->j_params, \"auth-type-refresh-enabled\")==json_true()?1:0;\n\n      if (r_jwt_init(&p_config->jwt_key) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for jwt_key\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (r_jwt_init(&p_config->glewlwyd_resource_config->jwt) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for jwt\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      key = (const unsigned char *)json_string_value(json_object_get(p_config->j_params, \"key\"));\n      if (0 == o_strcmp(\"rsa\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_RS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_RS384;\n        } else { // 512\n          alg = R_JWA_ALG_RS512;\n        }\n      } else if (0 == o_strcmp(\"ecdsa\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_ES256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_ES384;\n        } else { // 512\n          alg = R_JWA_ALG_ES512;\n        }\n      } else if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_HS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_HS384;\n        } else { // 512\n          alg = R_JWA_ALG_HS512;\n        }\n      } else if (0 == o_strcmp(\"rsa-pss\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) { // SHA\n        if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_PS256;\n        } else if (0 == o_strcmp(\"256\", json_string_value(json_object_get(p_config->j_params, \"jwt-key-size\")))) {\n          alg = R_JWA_ALG_PS384;\n        } else { // 512\n          alg = R_JWA_ALG_PS512;\n        }\n      } else {\n        alg = R_JWA_ALG_EDDSA;\n      }\n\n      if (r_jwt_set_sign_alg(p_config->jwt_key, alg) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_set_sign_alg\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (r_jwt_set_sign_alg(p_config->glewlwyd_resource_config->jwt, alg) != RHN_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_set_sign_alg (2)\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (0 == o_strcmp(\"sha\", json_string_value(json_object_get(p_config->j_params, \"jwt-type\")))) {\n        if (r_jwt_add_sign_key_symmetric(p_config->jwt_key, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_key_symmetric\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwt_add_sign_key_symmetric(p_config->glewlwyd_resource_config->jwt, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_key_symmetric (2)\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      } else {\n        if (r_jwk_init(&key_priv) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_init key_priv\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_init(&key_pub) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_init key_pub\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_import_from_pem_der(key_priv, R_X509_TYPE_PRIVKEY, R_FORMAT_PEM, key, o_strlen((const char *)key)) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_import_from_pem_der key_priv\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwk_import_from_pem_der(key_pub, R_X509_TYPE_PUBKEY, R_FORMAT_PEM, (const unsigned char *)json_string_value(json_object_get(p_config->j_params, \"cert\")), json_string_length(json_object_get(p_config->j_params, \"cert\"))) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwk_import_from_pem_der key_pub\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        r_jwk_delete_property_str(key_priv, \"kid\");\n        r_jwk_delete_property_str(key_pub, \"kid\");\n        if (r_jwt_add_sign_keys(p_config->jwt_key, key_priv, NULL)  != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_keys\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (r_jwt_add_sign_keys(p_config->glewlwyd_resource_config->jwt, NULL, key_pub) != RHN_OK) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error r_jwt_add_sign_keys_pem_der (2)\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      }\n\n      if (jwt_autocheck(p_config) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error jwt_autocheck\");\n        j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"Error jwt_autocheck\");\n        break;\n      }\n\n      p_config->glewlwyd_resource_config->alg = alg;\n\n      // Add endpoints\n      y_log_message(Y_LOG_LEVEL_INFO, \"Add endpoints with plugin prefix %s\", name);\n      if (config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"auth/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_authorization, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"*\", name, \"profile/*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session_or_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"*\", name, \"profile/token/*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"profile/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_get_profile, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"profile/token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_refresh_token_list_get, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"DELETE\", name, \"profile/token/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_disable_refresh_token, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"DELETE\", name, \"profile/token/:token_hash\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_disable_refresh_token, (void*)*cls) != G_OK) {\n        y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error adding endpoints\");\n        j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n        break;\n      }\n\n      if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {\n        if ((p_config->introspect_revoke_resource_config = o_malloc(sizeof(struct _glewlwyd_resource_config))) == NULL) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocatig resources for introspect_revoke_resource_config\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n          break;\n        }\n        p_config->introspect_revoke_resource_config->method = G_METHOD_HEADER;\n        p_config->introspect_revoke_resource_config->oauth_scope = NULL;\n        json_array_foreach(json_object_get(p_config->j_params, \"introspection-revocation-auth-scope\"), index, j_element) {\n          if (p_config->introspect_revoke_resource_config->oauth_scope == NULL) {\n            p_config->introspect_revoke_resource_config->oauth_scope = o_strdup(json_string_value(j_element));\n          } else {\n            p_config->introspect_revoke_resource_config->oauth_scope = mstrcatf(p_config->introspect_revoke_resource_config->oauth_scope, \" %s\", json_string_value(j_element));\n          }\n        }\n        p_config->introspect_revoke_resource_config->realm = NULL;\n        p_config->introspect_revoke_resource_config->accept_access_token = 1;\n        p_config->introspect_revoke_resource_config->accept_client_token = 1;\n        p_config->introspect_revoke_resource_config->jwt = r_jwt_copy(p_config->glewlwyd_resource_config->jwt);\n        p_config->introspect_revoke_resource_config->alg = alg;\n        if (\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"introspect/\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_intropect_revoke, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"introspect/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_introspection, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"revoke/\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_intropect_revoke, (void*)*cls) != G_OK ||\n          config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"revoke/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_revocation, (void*)*cls) != G_OK\n          ) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - oauth2 - Error adding introspect/revoke endpoints\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n      }\n\n      if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {\n        if (\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"device_authorization/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_device_authorization, (void*)*cls) != G_OK ||\n         config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"device/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_oauth2_device_verification, (void*)*cls) != G_OK\n        ) {\n          y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - oauth2 - Error adding device-authorization endpoints\");\n          j_return = json_pack(\"{si}\", \"result\", G_ERROR);\n          break;\n        }\n        if (json_object_get(p_config->j_params, \"device-authorization-expiration\") == NULL) {\n          json_object_set_new(p_config->j_params, \"device-authorization-expiration\", json_integer(GLEWLWYD_DEVICE_AUTH_DEFAUT_EXPIRATION));\n        }\n        if (json_object_get(p_config->j_params, \"device-authorization-interval\") == NULL) {\n          json_object_set_new(p_config->j_params, \"device-authorization-interval\", json_integer(GLEWLWYD_DEVICE_AUTH_DEFAUT_INTERVAL));\n        }\n      }\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CODE, \"Total number of code provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, \"Total number of device code provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, \"Total number of refresh tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, \"Total number of access tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, \"Total number of client tokens provided\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, \"Total number of unauthorized client attempt\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_CODE, \"Total number of invalid code\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, \"Total number of invalid device code\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, \"Total number of invalid refresh token\");\n      config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, \"Total number of invalid access token\");\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CODE, 0, \"plugin\", name, NULL);\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, NULL);\n      config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n      if (json_object_get(p_config->j_params, \"auth-type-code-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_CODE, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-password-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-client-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-implicit-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"token\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 0, \"plugin\", name, NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);\n      }\n      if (json_object_get(p_config->j_params, \"auth-type-refresh-enabled\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"refresh_token\", NULL);\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 0, \"plugin\", name, NULL);\n      }\n      if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {\n        config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, 0, \"plugin\", name, NULL);\n      }\n\n    } while (0);\n    json_decref(j_result);\n    r_jwk_free(key_priv);\n    r_jwk_free(key_pub);\n    if (j_return == NULL) {\n      j_return = json_pack(\"{si}\", \"result\", G_OK);\n    } else {\n      if (p_config != NULL) {\n        if (p_config->introspect_revoke_resource_config != NULL) {\n          o_free(p_config->introspect_revoke_resource_config->oauth_scope);\n          o_free(p_config->introspect_revoke_resource_config->realm);\n          r_jwt_free(p_config->introspect_revoke_resource_config->jwt);\n          o_free(p_config->introspect_revoke_resource_config);\n        }\n        if (p_config->glewlwyd_resource_config != NULL) {\n          o_free(p_config->glewlwyd_resource_config->oauth_scope);\n          o_free(p_config->glewlwyd_resource_config->realm);\n          r_jwt_free(p_config->glewlwyd_resource_config->jwt);\n          o_free(p_config->glewlwyd_resource_config);\n        }\n        r_jwt_free(p_config->jwt_key);\n        json_decref(p_config->j_params);\n        pthread_mutex_destroy(&p_config->insert_lock);\n        o_free(p_config);\n      }\n    }\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init - oauth2 - Error allocating resources for cls\");\n    o_free(*cls);\n    *cls = NULL;\n    j_return = json_pack(\"{si}\", \"result\", G_ERROR_MEMORY);\n  }\n  return j_return;\n}\n\nint plugin_module_close(struct config_plugin * config, const char * name, void * cls) {\n  UNUSED(name);\n  if (cls != NULL) {\n    y_log_message(Y_LOG_LEVEL_INFO, \"Close plugin Glewlwyd Oauth2 '%s'\", name);\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"auth/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"profile/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"profile/token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"DELETE\", name, \"profile/token/\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"DELETE\", name, \"profile/token/:token_hash\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"*\", name, \"profile/*\");\n    config->glewlwyd_callback_remove_plugin_endpoint(config, \"*\", name, \"profile/token/*\");\n\n    if (((struct _oauth2_config *)cls)->introspect_revoke_resource_config != NULL) {\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"introspect/\");\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"revoke/\");\n      o_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config->oauth_scope);\n      r_jwt_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config->jwt);\n      o_free(((struct _oauth2_config *)cls)->introspect_revoke_resource_config);\n    }\n    if (((struct _oauth2_config *)cls)->glewlwyd_resource_config != NULL) {\n      o_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config->oauth_scope);\n      r_jwt_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config->jwt);\n      o_free(((struct _oauth2_config *)cls)->glewlwyd_resource_config);\n    }\n    if (json_object_get(((struct _oauth2_config *)cls)->j_params, \"auth-type-device-enabled\") == json_true()) {\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"POST\", name, \"device_authorization/\");\n      config->glewlwyd_callback_remove_plugin_endpoint(config, \"GET\", name, \"device/\");\n    }\n    r_jwt_free(((struct _oauth2_config *)cls)->jwt_key);\n    json_decref(((struct _oauth2_config *)cls)->j_params);\n    pthread_mutex_destroy(&((struct _oauth2_config *)cls)->insert_lock);\n    o_free(cls);\n  }\n  return G_OK;\n}\n\nint plugin_user_revoke(struct config_plugin * config, const char * username, void * cls) {\n  UNUSED(config);\n  // Disable all data for user 'username', then remove entry in subject identifier table\n  if (disable_user_data((struct _oauth2_config *)cls, username) == G_OK) {\n    return G_OK;\n  } else {\n    y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_user_revoke - oauth2 - Error disable_user_data\");\n    return G_ERROR;\n  }\n}\n"], "filenames": ["src/plugin/protocol_oauth2.c"], "buggy_code_start_loc": [699], "buggy_code_end_loc": [3363], "fixing_code_start_loc": [699], "fixing_code_end_loc": [3340], "type": "CWE-601", "message": "Glewlwyd SSO server 2.x through 2.7.6 allows open redirection via redirect_uri.", "other": {"cve": {"id": "CVE-2024-25715", "sourceIdentifier": "cve@mitre.org", "published": "2024-02-11T03:15:09.453", "lastModified": "2024-02-16T21:35:54.270", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Glewlwyd SSO server 2.x through 2.7.6 allows open redirection via redirect_uri."}, {"lang": "es", "value": "El servidor SSO de Glewlwyd 2.x a 2.7.6 permite la redirecci\u00f3n abierta a trav\u00e9s de redirecci\u00f3n_uri."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glewlwyd_sso_server_project:glewlwyd_sso_server:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndIncluding": "2.7.6", "matchCriteriaId": "167E0A8B-45F7-48EB-A1C9-69C983411BBC"}]}]}], "references": [{"url": "https://github.com/babelouest/glewlwyd/commit/59239381a88c505ab38fe64fdd92f846defa5754", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/babelouest/glewlwyd/commit/c91c0155f2393274cc18efe77e06c6846e404c75", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/babelouest/glewlwyd/commit/59239381a88c505ab38fe64fdd92f846defa5754"}}