{"buggy_code": ["<?php\n\nfunction print_solved_graph($user_id) {\n    validate_id($user_id);\n\n    $challenges = db_query_fetch_all('\n        SELECT\n           ca.title,\n           (SELECT SUM(ch.points) FROM challenges AS ch JOIN submissions AS s ON s.challenge = ch.id AND s.user_id = :user_id AND s.correct = 1 WHERE ch.category = ca.id GROUP BY ch.category) AS points,\n           (SELECT SUM(ch.points) FROM challenges AS ch WHERE ch.category = ca.id GROUP BY ch.category) AS category_total\n        FROM categories AS ca\n        WHERE\n          ca.available_from < UNIX_TIMESTAMP() AND\n          ca.exposed = 1\n        ORDER BY ca.title ASC',\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (empty($challenges)) {\n        return;\n    }\n\n    $user_total = 0;\n    $ctf_total = 0;\n    foreach($challenges as $challenge) {\n        echo '<strong>',htmlspecialchars($challenge['title']), '</strong>, ', number_format($challenge['points']) ,' / ', number_format($challenge['category_total']), ' (', round(($challenge['points']/max(1, $challenge['category_total']))*100), '%)';\n\n        progress_bar(($challenge['points']/max(1, $challenge['category_total'])) * 100);\n\n        $user_total += $challenge['points'];\n        $ctf_total += $challenge['category_total'];\n    }\n\n    echo lang_get('total_solves'), ' ', number_format($user_total), ' / ', number_format($ctf_total), ' (', round(($user_total/$ctf_total)*100, 1), '%)';\n}\n\nfunction print_solved_challenges($user_id) {\n    validate_id($user_id);\n\n    section_head(lang_get('solved_challenges'));\n\n    $submissions = db_query_fetch_all('\n        SELECT\n           s.added,\n           ((SELECT COUNT(*) FROM submissions AS ss WHERE ss.correct = 1 AND ss.added < s.added AND ss.challenge=s.challenge)+1) AS pos,\n           ch.id AS challenge_id,\n           ch.available_from,\n           ch.title,\n           ch.points,\n           ca.title AS category_title\n        FROM submissions AS s\n        LEFT JOIN challenges AS ch ON ch.id = s.challenge\n        LEFT JOIN categories AS ca ON ca.id = ch.category\n        WHERE\n           s.correct = 1 AND\n           s.user_id = :user_id AND\n           ch.exposed = 1 AND\n           ca.exposed = 1\n        ORDER BY s.added DESC',\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (count($submissions)) {\n        echo '\n      <table class=\"table table-striped table-hover\">\n        <thead>\n          <tr>\n            <th>', lang_get('challenge'), '</th>\n            <th>', lang_get('solved'), '</th>\n            <th>', lang_get('points'), '</th>\n          </tr>\n        </thead>\n        <tbody>\n       ';\n\n        foreach ($submissions as $submission) {\n\n            echo '\n              <tr>\n                <td>\n                    <a href=\"',Config::get('MELLIVORA_CONFIG_SITE_URL'),'challenge?id=', htmlspecialchars($submission['challenge_id']), '\">\n                    ', htmlspecialchars($submission['title']), '\n                    </a> (', htmlspecialchars($submission['category_title']), ')\n                </td>\n\n                <td>\n                    ', get_position_medal($submission['pos'], true), '\n                    ', time_elapsed($submission['added'], $submission['available_from']), ' ', lang_get('after_release'), ' (', date_time($submission['added']), ')\n                </td>\n\n                <td>', number_format($submission['points']), '</td>\n              </tr>\n              ';\n        }\n\n        echo '\n        </tbody>\n      </table>\n          ';\n    }\n\n    else {\n        message_inline_blue(lang_get('no_challenges_solved'));\n    }\n}\n\nfunction print_user_submissions($user_id, $limit = false) {\n    validate_id($user_id);\n\n    section_subhead(\n        'Submissions',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_submissions?user_id=' . $user_id),\n        false\n    );\n\n    echo '\n    <table id=\"files\" class=\"table table-striped table-hover\">\n      <thead>\n        <tr>\n          <th>Challenge</th>\n          <th>Added</th>\n          <th>Flag</th>\n          <th>Correct</th>\n          <th>Manage</th>\n        </tr>\n      </thead>\n      <tbody>\n    ';\n\n    $submissions = db_query_fetch_all('\n        SELECT\n           s.id,\n           u.id AS user_id,\n           u.team_name,\n           s.added,\n           s.correct,\n           s.flag,\n           c.id AS challenge_id,\n           c.title AS challenge_title\n        FROM submissions AS s\n        LEFT JOIN users AS u on s.user_id = u.id\n        LEFT JOIN challenges AS c ON c.id = s.challenge\n        WHERE user_id = :user_id\n        ORDER BY s.added DESC\n        LIMIT '.$limit,\n        array(\n            'user_id' => $user_id\n        )\n    );\n\n    foreach($submissions as $submission) {\n        echo '\n    <tr>\n        <td><a href=\"',Config::get('MELLIVORA_CONFIG_SITE_URL'),'challenge.php?id=',htmlspecialchars($submission['challenge_id']),'\">',htmlspecialchars($submission['challenge_title']),'</a></td>\n        <td>',time_elapsed($submission['added']),' ago</td>\n        <td>',htmlspecialchars($submission['flag']),'</td>\n        <td>\n            ',($submission['correct'] ?\n            '<img src=\"'.Config::get('MELLIVORA_CONFIG_SITE_URL_STATIC_RESOURCES').'img/accept.png\" alt=\"Correct!\" title=\"Correct!\" />' :\n            '<img src=\"'.Config::get('MELLIVORA_CONFIG_SITE_URL_STATIC_RESOURCES').'img/stop.png\" alt=\"Wrong!\" title=\"Wrong!\" />'),'\n        </td>\n        <td>\n            <form method=\"post\" action=\"actions/list_submissions\" class=\"discreet-inline\">';\n        form_xsrf_token();\n        echo '\n                <input type=\"hidden\" name=\"action\" value=\"',($submission['correct'] ? 'mark_incorrect' : 'mark_correct'),'\" />\n                <input type=\"hidden\" name=\"id\" value=\"',htmlspecialchars($submission['id']),'\" />\n                <button type=\"submit\" class=\"btn btn-sm btn-',($submission['correct'] ? 'warning' : 'success'),'\">Mark ',($submission['correct'] ? 'incorrect' : 'correct'),'</button>\n            </form>\n\n            <form method=\"post\" action=\"actions/list_submissions\" class=\"discreet-inline\">';\n        form_xsrf_token();\n        echo '\n                <input type=\"hidden\" name=\"action\" value=\"delete\" />\n                <input type=\"hidden\" name=\"id\" value=\"',htmlspecialchars($submission['id']),'\" />\n                <button type=\"submit\" class=\"btn btn-sm btn-danger\">Delete</button>\n            </form>\n        </td>\n    </tr>\n    ';\n    }\n\n    echo '\n      </tbody>\n    </table>\n     ';\n}\n\nfunction print_user_exception_log($user_id, $limit = false) {\n    validate_id($user_id);\n\n    section_subhead(\n        'Exception log',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_exceptions?user_id=' . $user_id),\n        false\n    );\n\n    $exceptions = db_query_fetch_all('\n        SELECT\n           e.id,\n           e.message,\n           e.added,\n           e.added_by,\n           e.trace,\n           INET_NTOA(e.user_ip) AS user_ip,\n           u.team_name\n        FROM exceptions AS e\n        LEFT JOIN users AS u ON u.id = e.added_by\n        WHERE e.added_by = :user_id\n        ORDER BY e.id DESC\n        '.($limit ? 'LIMIT '.$limit : ''),\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (count($exceptions)) {\n\n        echo '\n    <table id=\"hints\" class=\"table table-striped table-hover\">\n      <thead>\n        <tr>\n          <th>Message</th>\n          <th>Added</th>\n          <th>IP</th>\n          <th>Trace</th>\n        </tr>\n      </thead>\n      <tbody>\n    ';\n\n        foreach ($exceptions as $exception) {\n            echo '\n    <tr>\n        <td>', htmlspecialchars($exception['message']), '</td>\n        <td>', date_time($exception['added']), '</td>\n        <td><a href=\"', Config::get('MELLIVORA_CONFIG_SITE_ADMIN_URL'), 'list_ip_log.php?ip=', htmlspecialchars($exception['user_ip']), '\">', htmlspecialchars($exception['user_ip']), '</a></td>\n        <td>', htmlspecialchars($exception['trace']), '</td>\n    </tr>\n    ';\n        }\n\n        echo '\n      </tbody>\n    </table>\n     ';\n    }\n\n    else {\n        message_inline_blue(lang_get('no_exceptions'));\n    }\n}\n\nfunction print_user_ip_log($user_id, $limit = 0) {\n\n    validate_id($user_id);\n\n    section_subhead(\n        'IP address usage',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_ip_log?user_id=' . htmlspecialchars($user_id)),\n        false\n    );\n\n    echo '\n        <table id=\"files\" class=\"table table-striped table-hover\">\n          <thead>\n            <tr>\n              <th>IP</th>\n              <th>Hostname</th>\n              <th>First used</th>\n              <th>Last used</th>\n              <th>Times used</th>\n            </tr>\n          </thead>\n          <tbody>\n        ';\n\n\n\n    $entries = db_query_fetch_all('\n        SELECT\n            INET_NTOA(ip) AS ip,\n            added,\n            last_used,\n            times_used\n        FROM ip_log\n        WHERE user_id = :user_id\n        ORDER BY last_used DESC\n        '.($limit ? 'LIMIT '.$limit : ''),\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    foreach($entries as $entry) {\n        echo '\n        <tr>\n            <td><a href=\"',Config::get('MELLIVORA_CONFIG_SITE_ADMIN_URL'),'list_ip_log.php?ip=',htmlspecialchars($entry['ip']),'\">',htmlspecialchars($entry['ip']),'</a></td>\n            <td>',(Config::get('MELLIVORA_CONFIG_GET_IP_HOST_BY_ADDRESS') ? gethostbyaddr($entry['ip']) : '<i>Lookup disabled in config</i>'),'</td>\n            <td>',date_time($entry['added']),'</td>\n            <td>',date_time($entry['last_used']),'</td>\n            <td>',number_format($entry['times_used']),'</td>\n        </tr>\n        ';\n    }\n\n    echo '\n          </tbody>\n        </table>\n         ';\n}"], "fixing_code": ["<?php\n\nfunction print_solved_graph($user_id) {\n    validate_id($user_id);\n\n    $challenges = db_query_fetch_all('\n        SELECT\n           ca.title,\n           (SELECT SUM(ch.points) FROM challenges AS ch JOIN submissions AS s ON s.challenge = ch.id AND s.user_id = :user_id AND s.correct = 1 WHERE ch.category = ca.id GROUP BY ch.category) AS points,\n           (SELECT SUM(ch.points) FROM challenges AS ch WHERE ch.category = ca.id GROUP BY ch.category) AS category_total\n        FROM categories AS ca\n        WHERE\n          ca.available_from < UNIX_TIMESTAMP() AND\n          ca.exposed = 1\n        ORDER BY ca.title ASC',\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (empty($challenges)) {\n        return;\n    }\n\n    $user_total = 0;\n    $ctf_total = 0;\n    foreach($challenges as $challenge) {\n        echo '<strong>',htmlspecialchars($challenge['title']), '</strong>, ', number_format($challenge['points']) ,' / ', number_format($challenge['category_total']), ' (', round(($challenge['points']/max(1, $challenge['category_total']))*100), '%)';\n\n        progress_bar(($challenge['points']/max(1, $challenge['category_total'])) * 100);\n\n        $user_total += $challenge['points'];\n        $ctf_total += $challenge['category_total'];\n    }\n\n    echo lang_get('total_solves'), ' ', number_format($user_total), ' / ', number_format($ctf_total), ' (', round(($user_total/$ctf_total)*100, 1), '%)';\n}\n\nfunction print_solved_challenges($user_id) {\n    validate_id($user_id);\n\n    section_head(lang_get('solved_challenges'));\n\n    $submissions = db_query_fetch_all('\n        SELECT\n           s.added,\n           ((SELECT COUNT(*) FROM submissions AS ss WHERE ss.correct = 1 AND ss.added < s.added AND ss.challenge=s.challenge)+1) AS pos,\n           ch.id AS challenge_id,\n           ch.available_from,\n           ch.title,\n           ch.points,\n           ca.title AS category_title\n        FROM submissions AS s\n        LEFT JOIN challenges AS ch ON ch.id = s.challenge\n        LEFT JOIN categories AS ca ON ca.id = ch.category\n        WHERE\n           s.correct = 1 AND\n           s.user_id = :user_id AND\n           ch.exposed = 1 AND\n           ca.exposed = 1\n        ORDER BY s.added DESC',\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (count($submissions)) {\n        echo '\n      <table class=\"table table-striped table-hover\">\n        <thead>\n          <tr>\n            <th>', lang_get('challenge'), '</th>\n            <th>', lang_get('solved'), '</th>\n            <th>', lang_get('points'), '</th>\n          </tr>\n        </thead>\n        <tbody>\n       ';\n\n        foreach ($submissions as $submission) {\n\n            echo '\n              <tr>\n                <td>\n                    <a href=\"',Config::get('MELLIVORA_CONFIG_SITE_URL'),'challenge?id=', htmlspecialchars($submission['challenge_id']), '\">\n                    ', htmlspecialchars($submission['title']), '\n                    </a> (', htmlspecialchars($submission['category_title']), ')\n                </td>\n\n                <td>\n                    ', get_position_medal($submission['pos'], true), '\n                    ', time_elapsed($submission['added'], $submission['available_from']), ' ', lang_get('after_release'), ' (', date_time($submission['added']), ')\n                </td>\n\n                <td>', number_format($submission['points']), '</td>\n              </tr>\n              ';\n        }\n\n        echo '\n        </tbody>\n      </table>\n          ';\n    }\n\n    else {\n        message_inline_blue(lang_get('no_challenges_solved'));\n    }\n}\n\nfunction print_user_submissions($user_id, $limit = false) {\n    validate_id($user_id);\n\n    section_subhead(\n        'Submissions',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_submissions?user_id=' . $user_id),\n        false\n    );\n\n    echo '\n    <table id=\"files\" class=\"table table-striped table-hover\">\n      <thead>\n        <tr>\n          <th>Challenge</th>\n          <th>Added</th>\n          <th>Flag</th>\n          <th>Correct</th>\n          <th>Manage</th>\n        </tr>\n      </thead>\n      <tbody>\n    ';\n\n    $submissions = db_query_fetch_all('\n        SELECT\n           s.id,\n           u.id AS user_id,\n           u.team_name,\n           s.added,\n           s.correct,\n           s.flag,\n           c.id AS challenge_id,\n           c.title AS challenge_title\n        FROM submissions AS s\n        LEFT JOIN users AS u on s.user_id = u.id\n        LEFT JOIN challenges AS c ON c.id = s.challenge\n        WHERE user_id = :user_id\n        ORDER BY s.added DESC\n        LIMIT '.$limit,\n        array(\n            'user_id' => $user_id\n        )\n    );\n\n    foreach($submissions as $submission) {\n        echo '\n    <tr>\n        <td><a href=\"',Config::get('MELLIVORA_CONFIG_SITE_URL'),'challenge.php?id=',htmlspecialchars($submission['challenge_id']),'\">',htmlspecialchars($submission['challenge_title']),'</a></td>\n        <td>',time_elapsed($submission['added']),' ago</td>\n        <td>',htmlspecialchars($submission['flag']),'</td>\n        <td>\n            ',($submission['correct'] ?\n            '<img src=\"'.Config::get('MELLIVORA_CONFIG_SITE_URL_STATIC_RESOURCES').'img/accept.png\" alt=\"Correct!\" title=\"Correct!\" />' :\n            '<img src=\"'.Config::get('MELLIVORA_CONFIG_SITE_URL_STATIC_RESOURCES').'img/stop.png\" alt=\"Wrong!\" title=\"Wrong!\" />'),'\n        </td>\n        <td>\n            <form method=\"post\" action=\"actions/list_submissions\" class=\"discreet-inline\">';\n        form_xsrf_token();\n        echo '\n                <input type=\"hidden\" name=\"action\" value=\"',($submission['correct'] ? 'mark_incorrect' : 'mark_correct'),'\" />\n                <input type=\"hidden\" name=\"id\" value=\"',htmlspecialchars($submission['id']),'\" />\n                <button type=\"submit\" class=\"btn btn-sm btn-',($submission['correct'] ? 'warning' : 'success'),'\">Mark ',($submission['correct'] ? 'incorrect' : 'correct'),'</button>\n            </form>\n\n            <form method=\"post\" action=\"actions/list_submissions\" class=\"discreet-inline\">';\n        form_xsrf_token();\n        echo '\n                <input type=\"hidden\" name=\"action\" value=\"delete\" />\n                <input type=\"hidden\" name=\"id\" value=\"',htmlspecialchars($submission['id']),'\" />\n                <button type=\"submit\" class=\"btn btn-sm btn-danger\">Delete</button>\n            </form>\n        </td>\n    </tr>\n    ';\n    }\n\n    echo '\n      </tbody>\n    </table>\n     ';\n}\n\nfunction print_user_exception_log($user_id, $limit = false) {\n    validate_id($user_id);\n\n    section_subhead(\n        'Exception log',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_exceptions?user_id=' . $user_id),\n        false\n    );\n\n    $exceptions = db_query_fetch_all('\n        SELECT\n           e.id,\n           e.message,\n           e.added,\n           e.added_by,\n           e.trace,\n           INET_NTOA(e.user_ip) AS user_ip,\n           u.team_name\n        FROM exceptions AS e\n        LEFT JOIN users AS u ON u.id = e.added_by\n        WHERE e.added_by = :user_id\n        ORDER BY e.id DESC\n        '.($limit ? 'LIMIT '.$limit : ''),\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    if (count($exceptions)) {\n\n        echo '\n    <table id=\"hints\" class=\"table table-striped table-hover\">\n      <thead>\n        <tr>\n          <th>Message</th>\n          <th>Added</th>\n          <th>IP</th>\n          <th>Trace</th>\n        </tr>\n      </thead>\n      <tbody>\n    ';\n\n        foreach ($exceptions as $exception) {\n            echo '\n    <tr>\n        <td>', htmlspecialchars($exception['message']), '</td>\n        <td>', date_time($exception['added']), '</td>\n        <td><a href=\"', Config::get('MELLIVORA_CONFIG_SITE_ADMIN_URL'), 'list_ip_log.php?ip=', htmlspecialchars($exception['user_ip']), '\">', htmlspecialchars($exception['user_ip']), '</a></td>\n        <td>', htmlspecialchars($exception['trace']), '</td>\n    </tr>\n    ';\n        }\n\n        echo '\n      </tbody>\n    </table>\n     ';\n    }\n\n    else {\n        message_inline_blue(lang_get('no_exceptions'));\n    }\n}\n\nfunction print_user_ip_log($user_id, $limit = 0) {\n\n    validate_id($user_id);\n\n    section_subhead(\n        'IP address usage',\n        ($limit ? 'Limited to ' . $limit . ' results ': '') . button_link('Show all for user', 'list_ip_log?user_id=' . htmlspecialchars($user_id)),\n        false\n    );\n\n    echo '\n        <table id=\"files\" class=\"table table-striped table-hover\">\n          <thead>\n            <tr>\n              <th>IP</th>\n              <th>Hostname</th>\n              <th>First used</th>\n              <th>Last used</th>\n              <th>Times used</th>\n            </tr>\n          </thead>\n          <tbody>\n        ';\n\n\n\n    $entries = db_query_fetch_all('\n        SELECT\n            INET_NTOA(ip) AS ip,\n            added,\n            last_used,\n            times_used\n        FROM ip_log\n        WHERE user_id = :user_id\n        ORDER BY last_used DESC\n        '.($limit ? 'LIMIT '.$limit : ''),\n        array(\n            'user_id'=>$user_id\n        )\n    );\n\n    foreach($entries as $entry) {\n        echo '\n        <tr>\n            <td><a href=\"',Config::get('MELLIVORA_CONFIG_SITE_ADMIN_URL'),'list_ip_log.php?ip=',htmlspecialchars($entry['ip']),'\">',htmlspecialchars($entry['ip']),'</a></td>\n            <td>',(Config::get('MELLIVORA_CONFIG_GET_IP_HOST_BY_ADDRESS') ? htmlspecialchars(gethostbyaddr($entry['ip'])) : '<i>Lookup disabled in config</i>'),'</td>\n            <td>',date_time($entry['added']),'</td>\n            <td>',date_time($entry['last_used']),'</td>\n            <td>',number_format($entry['times_used']),'</td>\n        </tr>\n        ';\n    }\n\n    echo '\n          </tbody>\n        </table>\n         ';\n}"], "filenames": ["include/layout/user.inc.php"], "buggy_code_start_loc": [303], "buggy_code_end_loc": [304], "fixing_code_start_loc": [303], "fixing_code_end_loc": [304], "type": "CWE-79", "message": "A vulnerability classified as problematic was found in Nakiami Mellivora up to 2.1.x. Affected by this vulnerability is the function print_user_ip_log of the file include/layout/user.inc.php of the component Admin Panel. The manipulation of the argument $entry['ip'] leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.2.0 is able to address this issue. The name of the patch is e0b6965f8dde608a3d2621617c05695eb406cbb9. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216955.", "other": {"cve": {"id": "CVE-2019-25092", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-28T09:15:07.910", "lastModified": "2023-01-06T18:35:59.690", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in Nakiami Mellivora up to 2.1.x. Affected by this vulnerability is the function print_user_ip_log of the file include/layout/user.inc.php of the component Admin Panel. The manipulation of the argument $entry['ip'] leads to cross site scripting. The attack can be launched remotely. Upgrading to version 2.2.0 is able to address this issue. The name of the patch is e0b6965f8dde608a3d2621617c05695eb406cbb9. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216955."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.4, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mellivora_project:mellivora:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.0", "matchCriteriaId": "78B0C491-17AD-47E1-94A0-F3207F746649"}]}]}], "references": [{"url": "https://github.com/Nakiami/mellivora/commit/e0b6965f8dde608a3d2621617c05695eb406cbb9", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Nakiami/mellivora/releases/tag/v2.2.0", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216955", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216955", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Nakiami/mellivora/commit/e0b6965f8dde608a3d2621617c05695eb406cbb9"}}