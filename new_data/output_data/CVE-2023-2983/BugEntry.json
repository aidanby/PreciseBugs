{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * @internal\n */\nclass UserController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", name=\"pimcore_admin_user_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param User|User\\Folder $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", name=\"pimcore_admin_user_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => (int)$request->get('parentId'),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active'),\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                /** @var User\\Workspace\\AbstractWorkspace $workspace */\n                                foreach ($workspaces as $workspace) {\n                                    $vars = $workspace->getObjectVars();\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->setObjectVar($varKey, $varValue);\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPerspectives($rObject->getPerspectives());\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->setWebsiteTranslationLanguagesView($rObject->getWebsiteTranslationLanguagesView());\n                        $user->setWebsiteTranslationLanguagesEdit($rObject->getWebsiteTranslationLanguagesEdit());\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId(),\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param User\\AbstractUser $node\n     * @param array $currentList\n     * @param bool $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", name=\"pimcore_admin_user_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById((int)$request->get('id'));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", name=\"pimcore_admin_user_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\UserRole::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n\n                    break;\n                }\n            }\n\n            if ($user instanceof User && isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if ($user instanceof User && !$this->getAdminUser()->isAdmin()) {\n                $user->setAdmin(false);\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans((string)$type) . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($user instanceof User && $request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = User::strictKeybinds($tmpArray);\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", name=\"pimcore_admin_user_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        $userId = (int)$request->get('id');\n        if ($userId < 1) {\n            throw $this->createNotFoundException();\n        }\n\n        $user = User::getById($userId);\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $user->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n        $hasHidden = false;\n\n        foreach ($userObjects as $o) {\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName(),\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availableUserPermissionsData = [];\n        if (is_array($availableUserPermissions)) {\n            foreach ($availableUserPermissions as $availableUserPermission) {\n                $availableUserPermissionsData[] = $availableUserPermission->getObjectVars();\n            }\n        }\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $userData['roles'] =  array_map('intval', $user->getRoles());\n        $userData['docTypes'] =  $user->getDocTypes();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['hasImage'] = $user->hasImage();\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissionsData,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData,\n            ],\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", name=\"pimcore_admin_user_getminimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", name=\"pimcore_admin_user_uploadcurrentuserimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", name=\"pimcore_admin_user_updatecurrentuser\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", name=\"pimcore_admin_user_getcurrentuser\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n        $userData['hasImage'] = $user->hasImage();\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    // ROLES\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", name=\"pimcore_admin_user_roletreegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param User\\Role|User\\Role\\Folder $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", name=\"pimcore_admin_user_roleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById((int)$request->get('id'));\n\n        if (!$role) {\n            throw $this->createNotFoundException();\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $role->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        $replaceFn = function ($value) {\n            return $value->getObjectVars();\n        };\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n        $availableUserPermissions = array_map($replaceFn, $availableUserPermissions);\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role->getObjectVars(),\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", name=\"pimcore_admin_user_uploadimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        //Check if uploaded file is an image\n        $avatarFile = $request->files->get('Filedata');\n\n        $assetType = Asset::getTypeFromMimeMapping($avatarFile->getMimeType(), $avatarFile);\n\n        if (!$avatarFile instanceof UploadedFile || $assetType !== 'image') {\n            throw new \\Exception('Unsupported file format.');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/delete-image\", name=\"pimcore_admin_user_deleteimage\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage(null);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", name=\"pimcore_admin_user_renew2fasecret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param GoogleAuthenticatorInterface $twoFactor\n     *\n     * @return BinaryFileResponse\n     */\n    public function renew2FaSecretAction(Request $request, GoogleAuthenticatorInterface $twoFactor)\n    {\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $newSecret = $twoFactor->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $qrCodeFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/qr-code-' . uniqid() . '.png';\n        $result->saveToFile($qrCodeFile);\n\n        return new BinaryFileResponse($qrCodeFile);\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", name=\"pimcore_admin_user_disable2fasecret\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", name=\"pimcore_admin_user_reset2fasecret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", name=\"pimcore_admin_user_getimage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n        $stream = $userObj->getImage();\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/png',\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", name=\"pimcore_admin_user_gettokenloginlink\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        $user = User::getById((int) $request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName());\n        $link = $this->generateCustomUrl([\n            'token' => $token,\n        ]);\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", name=\"pimcore_admin_user_search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, (int)$request->get('query')]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users,\n        ]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction',\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-users-for-sharing\", name=\"pimcore_admin_user_getusersforsharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-roles-for-sharing\", name=\"pimcore_admin_user_getrolesforsharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @Route(\"/user/get-users\", name=\"pimcore_admin_user_getusers\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @Route(\"/user/get-roles\", name=\"pimcore_admin_user_getroles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @Route(\"/user/get-default-key-bindings\", name=\"pimcore_admin_user_getdefaultkeybindings\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", name=\"pimcore_admin_user_invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(bin2hex(random_bytes(16)));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($user->getName());\n                $loginUrl = $this->generateCustomUrl([\n                    'token' => $token,\n                    'reset' => true,\n                ]);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    protected function getUserId(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n\n            return (int) $request->get('id');\n        }\n\n        return $this->getAdminUser()->getId();\n    }\n\n    /**\n     *\n     * @param array $params\n     * @param string $fallbackUrl\n     * @param int $referenceType //UrlGeneratorInterface::ABSOLUTE_URL, ABSOLUTE_PATH, RELATIVE_PATH, NETWORK_PATH\n     *\n     * @return string The generated URL\n     */\n    private function generateCustomUrl(array $params, $fallbackUrl = 'pimcore_admin_login_check', $referenceType = UrlGeneratorInterface::ABSOLUTE_URL): string\n    {\n        try {\n            $adminEntryPointRoute = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n            //try to generate invitation link for custom admin point\n            $loginUrl = $this->generateUrl($adminEntryPointRoute, $params, $referenceType);\n        } catch (\\Exception $e) {\n            //use default login check for invitation link\n            $loginUrl = $this->generateUrl($fallbackUrl, $params, $referenceType);\n        }\n\n        return $loginUrl;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * @internal\n */\nclass UserController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/user/tree-get-childs-by-id\", name=\"pimcore_admin_user_treegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user->getId() && $user->getName() != 'system') {\n                    $users[] = $this->getTreeNodeConfig($user);\n                }\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n\n    /**\n     * @param User|User\\Folder $user\n     *\n     * @return array\n     */\n    protected function getTreeNodeConfig($user)\n    {\n        $tmpUser = [\n            'id' => $user->getId(),\n            'text' => $user->getName(),\n            'elementType' => 'user',\n            'type' => $user->getType(),\n            'qtipCfg' => [\n                'title' => 'ID: ' . $user->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($user instanceof User\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($user->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_user';\n            if (!$user->getActive()) {\n                $tmpUser['cls'] = ' pimcore_unpublished';\n            }\n            $tmpUser['allowChildren'] = false;\n            $tmpUser['admin'] = $user->isAdmin();\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/add\", name=\"pimcore_admin_user_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $type = $request->get('type');\n\n            $className = User\\Service::getClassNameForType($type);\n            $user = $className::create([\n                'parentId' => (int)$request->get('parentId'),\n                'name' => trim($request->get('name')),\n                'password' => '',\n                'active' => $request->get('active'),\n            ]);\n\n            if ($request->get('rid')) {\n                $rid = $request->get('rid');\n                $rObject = $className::getById($rid);\n                if ($rObject) {\n                    if ($type == 'user' || $type == 'role') {\n                        $user->setParentId($rObject->getParentId());\n                        if ($rObject->getClasses()) {\n                            $user->setClasses(implode(',', $rObject->getClasses()));\n                        }\n                        if ($rObject->getDocTypes()) {\n                            $user->setDocTypes(implode(',', $rObject->getDocTypes()));\n                        }\n\n                        $keys = ['asset', 'document', 'object'];\n                        foreach ($keys as $key) {\n                            $getter = 'getWorkspaces' . ucfirst($key);\n                            $setter = 'setWorkspaces' . ucfirst($key);\n                            $workspaces = $rObject->$getter();\n                            $clonedWorkspaces = [];\n                            if (is_array($workspaces)) {\n                                /** @var User\\Workspace\\AbstractWorkspace $workspace */\n                                foreach ($workspaces as $workspace) {\n                                    $vars = $workspace->getObjectVars();\n                                    if ($key == 'object') {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\DataObject';\n                                    } else {\n                                        $workspaceClass = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . ucfirst($key);\n                                    }\n                                    $newWorkspace = new $workspaceClass();\n                                    foreach ($vars as $varKey => $varValue) {\n                                        $newWorkspace->setObjectVar($varKey, $varValue);\n                                    }\n                                    $newWorkspace->setUserId($user->getId());\n                                    $clonedWorkspaces[] = $newWorkspace;\n                                }\n                            }\n\n                            $user->$setter($clonedWorkspaces);\n                        }\n\n                        $user->setPerspectives($rObject->getPerspectives());\n                        $user->setPermissions($rObject->getPermissions());\n\n                        if ($type == 'user') {\n                            $user->setAdmin(false);\n                            if ($this->getAdminUser()->isAdmin()) {\n                                $user->setAdmin($rObject->getAdmin());\n                            }\n                            $user->setActive($rObject->getActive());\n                            $user->setRoles($rObject->getRoles());\n                            $user->setWelcomeScreen($rObject->getWelcomescreen());\n                            $user->setMemorizeTabs($rObject->getMemorizeTabs());\n                            $user->setCloseWarning($rObject->getCloseWarning());\n                        }\n\n                        $user->setWebsiteTranslationLanguagesView($rObject->getWebsiteTranslationLanguagesView());\n                        $user->setWebsiteTranslationLanguagesEdit($rObject->getWebsiteTranslationLanguagesEdit());\n\n                        $user->save();\n                    }\n                }\n            }\n\n            return $this->adminJson([\n                'success' => true,\n                'id' => $user->getId(),\n            ]);\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param User\\AbstractUser $node\n     * @param array $currentList\n     * @param bool $roleMode\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function populateChildNodes($node, &$currentList, $roleMode)\n    {\n        $currentUser = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $list = $roleMode ? new User\\Role\\Listing() : new User\\Listing();\n        $list->setCondition('parentId = ?', $node->getId());\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $childList = $roleMode ? $list->getRoles() : $list->getUsers();\n        if (is_array($childList)) {\n            foreach ($childList as $user) {\n                if ($user->getId() == $currentUser->getId()) {\n                    throw new \\Exception('Cannot delete current user');\n                }\n                if ($user->getId() && $currentUser->getId() && $user->getName() != 'system') {\n                    $currentList[] = $user;\n                    $this->populateChildNodes($user, $currentList, $roleMode);\n                }\n            }\n        }\n\n        return $currentList;\n    }\n\n    /**\n     * @Route(\"/user/delete\", name=\"pimcore_admin_user_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request)\n    {\n        $user = User\\AbstractUser::getById((int)$request->get('id'));\n\n        // only admins are allowed to delete admins and folders\n        // because a folder might contain an admin user, so it is simply not allowed for users with the \"users\" permission\n        if (($user instanceof User\\Folder && !$this->getAdminUser()->isAdmin()) || ($user instanceof User && $user->isAdmin() && !$this->getAdminUser()->isAdmin())) {\n            throw new \\Exception('You are not allowed to delete this user');\n        } else {\n            if ($user instanceof User\\Role\\Folder) {\n                $list = [$user];\n                $this->populateChildNodes($user, $list, $user instanceof User\\Role\\Folder);\n                $listCount = count($list);\n                for ($i = $listCount - 1; $i >= 0; $i--) {\n                    // iterate over the list from the so that nothing can get \"lost\"\n                    $user = $list[$i];\n                    $user->delete();\n                }\n            } else {\n                if ($user->getId()) {\n                    $user->delete();\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/update\", name=\"pimcore_admin_user_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function updateAction(Request $request)\n    {\n        $user = User\\UserRole::getById((int)$request->get('id'));\n        $currentUserIsAdmin = $this->getAdminUser()->isAdmin();\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user instanceof User && $user->isAdmin() && !$currentUserIsAdmin) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        if ($request->get('data')) {\n            $values = $this->decodeJson($request->get('data'), true);\n\n            if (!empty($values['password'])) {\n                if (strlen($values['password']) < 10) {\n                    throw new \\Exception('Passwords have to be at least 10 characters long');\n                }\n                $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['password']);\n            }\n\n            // check if there are permissions transmitted, if so reset them all to false (they will be set later)\n            foreach ($values as $key => $value) {\n                if (strpos($key, 'permission_') === 0) {\n                    if (method_exists($user, 'setAllAclToFalse')) {\n                        $user->setAllAclToFalse();\n                    }\n\n                    break;\n                }\n            }\n\n            if ($user instanceof User && isset($values['2fa_required'])) {\n                $user->setTwoFactorAuthentication('required', (bool) $values['2fa_required']);\n            }\n\n            $user->setValues($values);\n\n            // only admins are allowed to create admin users\n            // if the logged in user isn't an admin, set admin always to false\n            if ($user instanceof User && !$currentUserIsAdmin) {\n                $user->setAdmin(false);\n            }\n\n            // check for permissions\n            $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n            $availableUserPermissions = $availableUserPermissionsList->load();\n\n            foreach ($availableUserPermissions as $permission) {\n                if (isset($values['permission_' . $permission->getKey()])) {\n                    $user->setPermission($permission->getKey(), (bool) $values['permission_' . $permission->getKey()]);\n                }\n            }\n\n            // check for workspaces\n            if ($request->get('workspaces')) {\n                $processedPaths = ['object' => [], 'asset' => [], 'document' => []]; //array to find if there are multiple entries for a path\n                $workspaces = $this->decodeJson($request->get('workspaces'), true);\n                foreach ($workspaces as $type => $spaces) {\n                    $newWorkspaces = [];\n                    foreach ($spaces as $space) {\n                        if (in_array($space['path'], $processedPaths[$type])) {\n                            throw new \\Exception('Error saving workspaces as multiple entries found for path \"' . $space['path'] .'\" in '.$this->trans((string)$type) . 's');\n                        }\n\n                        $element = Element\\Service::getElementByPath($type, $space['path']);\n                        if ($element) {\n                            $className = '\\\\Pimcore\\\\Model\\\\User\\\\Workspace\\\\' . Element\\Service::getBaseClassNameForElement($type);\n                            $workspace = new $className();\n                            $workspace->setValues($space);\n\n                            $workspace->setCid($element->getId());\n                            $workspace->setCpath($element->getRealFullPath());\n                            $workspace->setUserId($user->getId());\n\n                            $newWorkspaces[] = $workspace;\n                            $processedPaths[$type][] = $space['path'];\n                        }\n                    }\n                    $user->{'setWorkspaces' . ucfirst($type)}($newWorkspaces);\n                }\n            }\n        }\n\n        if ($user instanceof User && $request->get('keyBindings')) {\n            $keyBindings = json_decode($request->get('keyBindings'), true);\n            $tmpArray = [];\n            foreach ($keyBindings as $action => $item) {\n                $tmpArray[] = json_decode($item, true);\n            }\n            $tmpArray = array_values(array_filter($tmpArray));\n            $tmpArray = User::strictKeybinds($tmpArray);\n            $tmpArray = json_encode($tmpArray);\n\n            $user->setKeyBindings($tmpArray);\n        }\n\n        $user->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/get\", name=\"pimcore_admin_user_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getAction(Request $request)\n    {\n        $userId = (int)$request->get('id');\n        if ($userId < 1) {\n            throw $this->createNotFoundException();\n        }\n\n        $user = User::getById($userId);\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $user->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $user->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        // object <=> user dependencies\n        $userObjects = DataObject\\Service::getObjectsReferencingUser($user->getId());\n        $userObjectData = [];\n        $hasHidden = false;\n\n        foreach ($userObjects as $o) {\n            if ($o->isAllowed('list')) {\n                $userObjectData[] = [\n                    'path' => $o->getRealFullPath(),\n                    'id' => $o->getId(),\n                    'subtype' => $o->getClass()->getName(),\n                ];\n            } else {\n                $hasHidden = true;\n            }\n        }\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n\n        $availableUserPermissionsData = [];\n        if (is_array($availableUserPermissions)) {\n            foreach ($availableUserPermissions as $availableUserPermission) {\n                $availableUserPermissionsData[] = $availableUserPermission->getObjectVars();\n            }\n        }\n\n        // get available roles\n        $list = new User\\Role\\Listing();\n        $list->setCondition('`type` = ?', ['role']);\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = [$role->getId(), $role->getName()];\n            }\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $userData['roles'] =  array_map('intval', $user->getRoles());\n        $userData['docTypes'] =  $user->getDocTypes();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['twoFactorAuthentication']['isActive'] = ($user->getTwoFactorAuthentication('enabled') || $user->getTwoFactorAuthentication('secret'));\n        unset($userData['password']);\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['hasImage'] = $user->hasImage();\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'user' => $userData,\n            'roles' => $roles,\n            'permissions' => $user->generatePermissionList(),\n            'availablePermissions' => $availableUserPermissionsData,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n            'objectDependencies' => [\n                'hasHidden' => $hasHidden,\n                'dependencies' => $userObjectData,\n            ],\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-minimal\", name=\"pimcore_admin_user_getminimal\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getMinimalAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n\n        $minimalUserData['id'] = $user->getId();\n        $minimalUserData['admin'] = $user->isAdmin();\n        $minimalUserData['active'] = $user->isActive();\n        $minimalUserData['permissionInfo']['assets'] = $user->isAllowed('assets');\n        $minimalUserData['permissionInfo']['documents'] = $user->isAllowed('documents');\n        $minimalUserData['permissionInfo']['objects'] = $user->isAllowed('objects');\n\n        return $this->adminJson($minimalUserData);\n    }\n\n    /**\n     * @Route(\"/user/upload-current-user-image\", name=\"pimcore_admin_user_uploadcurrentuserimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function uploadCurrentUserImageAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                return $this->uploadImageAction($request);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/update-current-user\", name=\"pimcore_admin_user_updatecurrentuser\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        if ($user != null) {\n            if ($user->getId() == $request->get('id')) {\n                $values = $this->decodeJson($request->get('data'), true);\n\n                unset($values['name']);\n                unset($values['id']);\n                unset($values['admin']);\n                unset($values['permissions']);\n                unset($values['roles']);\n                unset($values['active']);\n\n                if (!empty($values['new_password'])) {\n                    $oldPasswordCheck = false;\n\n                    if (empty($values['old_password'])) {\n                        // if the user want to reset the password, the old password isn't required\n                        $oldPasswordCheck = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                            if ($adminSession->get('password_reset')) {\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    } else {\n                        // the password has to match\n                        $checkUser = Tool\\Authentication::authenticatePlaintext($user->getName(), $values['old_password']);\n                        if ($checkUser) {\n                            $oldPasswordCheck = true;\n                        }\n                    }\n\n                    if (strlen($values['new_password']) < 10) {\n                        throw new \\Exception('Passwords have to be at least 10 characters long');\n                    }\n\n                    if ($oldPasswordCheck && $values['new_password'] == $values['retype_password']) {\n                        $values['password'] = Tool\\Authentication::getPasswordHash($user->getName(), $values['new_password']);\n                    } else {\n                        return $this->adminJson(['success' => false, 'message' => 'password_cannot_be_changed']);\n                    }\n                }\n\n                $user->setValues($values);\n\n                if ($request->get('keyBindings')) {\n                    $keyBindings = json_decode($request->get('keyBindings'), true);\n                    $tmpArray = [];\n                    foreach ($keyBindings as $action => $item) {\n                        $tmpArray[] = json_decode($item, true);\n                    }\n                    $tmpArray = array_values(array_filter($tmpArray));\n                    $tmpArray = json_encode($tmpArray);\n\n                    $user->setKeyBindings($tmpArray);\n                }\n\n                $user->save();\n\n                return $this->adminJson(['success' => true]);\n            } else {\n                Logger::warn('prevented save current user, because ids do not match. ');\n\n                return $this->adminJson(false);\n            }\n        } else {\n            return $this->adminJson(false);\n        }\n    }\n\n    /**\n     * @Route(\"/user/get-current-user\", name=\"pimcore_admin_user_getcurrentuser\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getCurrentUserAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n\n        $list = new User\\Permission\\Definition\\Listing();\n        $definitions = $list->load();\n\n        foreach ($definitions as $definition) {\n            $user->setPermission($definition->getKey(), $user->isAllowed($definition->getKey()));\n        }\n\n        // unset confidential informations\n        $userData = $user->getObjectVars();\n        $contentLanguages = Tool\\Admin::reorderWebsiteLanguages($user, Tool::getValidLanguages());\n        $userData['contentLanguages'] = $contentLanguages;\n        $userData['keyBindings'] = $user->getKeyBindings();\n\n        unset($userData['password']);\n        $userData['twoFactorAuthentication'] = $user->getTwoFactorAuthentication();\n        unset($userData['twoFactorAuthentication']['secret']);\n        $userData['twoFactorAuthentication']['isActive'] = $user->getTwoFactorAuthentication('enabled') && $user->getTwoFactorAuthentication('secret');\n        $userData['hasImage'] = $user->hasImage();\n\n        $userData['isPasswordReset'] = Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            return $adminSession->get('password_reset');\n        });\n\n        $response = new Response('pimcore.currentuser = ' . $this->encodeJson($userData));\n        $response->headers->set('Content-Type', 'text/javascript');\n\n        return $response;\n    }\n\n    // ROLES\n\n    /**\n     * @Route(\"/user/role-tree-get-childs-by-id\", name=\"pimcore_admin_user_roletreegetchildsbyid\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleTreeGetChildsByIdAction(Request $request)\n    {\n        $list = new User\\Role\\Listing();\n        $list->setCondition('parentId = ?', (int)$request->get('node'));\n        $list->load();\n\n        $roles = [];\n        if (is_array($list->getItems())) {\n            foreach ($list->getItems() as $role) {\n                $roles[] = $this->getRoleTreeNodeConfig($role);\n            }\n        }\n\n        return $this->adminJson($roles);\n    }\n\n    /**\n     * @param User\\Role|User\\Role\\Folder $role\n     *\n     * @return array\n     */\n    protected function getRoleTreeNodeConfig($role)\n    {\n        $tmpUser = [\n            'id' => $role->getId(),\n            'text' => $role->getName(),\n            'elementType' => 'role',\n            'qtipCfg' => [\n                'title' => 'ID: ' . $role->getId(),\n            ],\n        ];\n\n        // set type specific settings\n        if ($role instanceof User\\Role\\Folder) {\n            $tmpUser['leaf'] = false;\n            $tmpUser['iconCls'] = 'pimcore_icon_folder';\n            $tmpUser['expanded'] = true;\n            $tmpUser['allowChildren'] = true;\n\n            if ($role->hasChildren()) {\n                $tmpUser['expanded'] = false;\n            } else {\n                $tmpUser['loaded'] = true;\n            }\n        } else {\n            $tmpUser['leaf'] = true;\n            $tmpUser['iconCls'] = 'pimcore_icon_roles';\n            $tmpUser['allowChildren'] = false;\n        }\n\n        return $tmpUser;\n    }\n\n    /**\n     * @Route(\"/user/role-get\", name=\"pimcore_admin_user_roleget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function roleGetAction(Request $request)\n    {\n        $role = User\\Role::getById((int)$request->get('id'));\n\n        if (!$role) {\n            throw $this->createNotFoundException();\n        }\n\n        // workspaces\n        $types = ['asset', 'document', 'object'];\n        foreach ($types as $type) {\n            $workspaces = $role->{'getWorkspaces' . ucfirst($type)}();\n            foreach ($workspaces as $wKey => $workspace) {\n                $el = Element\\Service::getElementById($type, $workspace->getCid());\n                if ($el) {\n                    // direct injection => not nice but in this case ok ;-)\n                    $workspace->path = $el->getRealFullPath();\n                    $workspaces[$wKey] = $workspace->getObjectVars();\n                }\n            }\n            $role->{'setWorkspaces' . ucfirst($type)}($workspaces);\n        }\n\n        $replaceFn = function ($value) {\n            return $value->getObjectVars();\n        };\n\n        // get available permissions\n        $availableUserPermissionsList = new User\\Permission\\Definition\\Listing();\n        $availableUserPermissions = $availableUserPermissionsList->load();\n        $availableUserPermissions = array_map($replaceFn, $availableUserPermissions);\n\n        $availablePerspectives = \\Pimcore\\Perspective\\Config::getAvailablePerspectives(null);\n\n        return $this->adminJson([\n            'success' => true,\n            'role' => $role->getObjectVars(),\n            'permissions' => $role->generatePermissionList(),\n            'classes' => $role->getClasses(),\n            'docTypes' => $role->getDocTypes(),\n            'availablePermissions' => $availableUserPermissions,\n            'availablePerspectives' => $availablePerspectives,\n            'validLanguages' => Tool::getValidLanguages(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/upload-image\", name=\"pimcore_admin_user_uploadimage\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function uploadImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        //Check if uploaded file is an image\n        $avatarFile = $request->files->get('Filedata');\n\n        $assetType = Asset::getTypeFromMimeMapping($avatarFile->getMimeType(), $avatarFile);\n\n        if (!$avatarFile instanceof UploadedFile || $assetType !== 'image') {\n            throw new \\Exception('Unsupported file format.');\n        }\n\n        $userObj->setImage($_FILES['Filedata']['tmp_name']);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/user/delete-image\", name=\"pimcore_admin_user_deleteimage\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function deleteImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n\n        if ($userObj->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            throw $this->createAccessDeniedHttpException('Only admin users are allowed to modify admin users');\n        }\n\n        $userObj->setImage(null);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/user/renew-2fa-qr-secret\", name=\"pimcore_admin_user_renew2fasecret\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param GoogleAuthenticatorInterface $twoFactor\n     *\n     * @return BinaryFileResponse\n     */\n    public function renew2FaSecretAction(Request $request, GoogleAuthenticatorInterface $twoFactor)\n    {\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        $newSecret = $twoFactor->generateSecret();\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n        $user->save();\n\n        Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n            Tool\\Session::regenerateId();\n            $adminSession->set('2fa_required', true);\n        });\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $qrCodeFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/qr-code-' . uniqid() . '.png';\n        $result->saveToFile($qrCodeFile);\n\n        return new BinaryFileResponse($qrCodeFile);\n    }\n\n    /**\n     * @Route(\"/user/disable-2fa\", name=\"pimcore_admin_user_disable2fasecret\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function disable2FaSecretAction(Request $request)\n    {\n        $user = $this->getAdminUser();\n        $success = false;\n\n        if (!$user->getTwoFactorAuthentication('required')) {\n            $user->setTwoFactorAuthentication([]);\n            $user->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/reset-2fa-secret\", name=\"pimcore_admin_user_reset2fasecret\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function reset2FaSecretAction(Request $request)\n    {\n        $user = User::getById((int)$request->get('id'));\n        if (!$user) {\n            throw $this->createNotFoundException();\n        }\n        $user->setTwoFactorAuthentication('enabled', false);\n        $user->setTwoFactorAuthentication('secret', '');\n        $user->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-image\", name=\"pimcore_admin_user_getimage\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function getImageAction(Request $request)\n    {\n        $userObj = User::getById($this->getUserId($request));\n        if (!$userObj) {\n            throw $this->createNotFoundException();\n        }\n        $stream = $userObj->getImage();\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => 'image/png',\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/get-token-login-link\", name=\"pimcore_admin_user_gettokenloginlink\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getTokenLoginLinkAction(Request $request)\n    {\n        $user = User::getById((int) $request->get('id'));\n\n        if (!$user) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_invalid_user_error'),\n            ], Response::HTTP_NOT_FOUND);\n        }\n\n        if ($user->isAdmin() && !$this->getAdminUser()->isAdmin()) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_as_admin_non_admin_user_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        if (empty($user->getPassword())) {\n            return $this->adminJson([\n                'success' => false,\n                'message' => $this->trans('login_token_no_password_error'),\n            ], Response::HTTP_FORBIDDEN);\n        }\n\n        $token = Tool\\Authentication::generateToken($user->getName());\n        $link = $this->generateCustomUrl([\n            'token' => $token,\n        ]);\n\n        return $this->adminJson([\n            'success' => true,\n            'link' => $link,\n        ]);\n    }\n\n    /**\n     * @Route(\"/user/search\", name=\"pimcore_admin_user_search\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function searchAction(Request $request)\n    {\n        $q = '%' . $request->get('query') . '%';\n\n        $list = new User\\Listing();\n        $list->setCondition('name LIKE ? OR firstname LIKE ? OR lastname LIKE ? OR email LIKE ? OR id = ?', [$q, $q, $q, $q, (int)$request->get('query')]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n        $list->load();\n\n        $users = [];\n        if (is_array($list->getUsers())) {\n            foreach ($list->getUsers() as $user) {\n                if ($user instanceof User && $user->getId() && $user->getName() != 'system') {\n                    $users[] = [\n                        'id' => $user->getId(),\n                        'name' => $user->getName(),\n                        'email' => $user->getEmail(),\n                        'firstname' => $user->getFirstname(),\n                        'lastname' => $user->getLastname(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'users' => $users,\n        ]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getCurrentUserAction', 'updateCurrentUserAction', 'getAvailablePermissionsAction', 'getMinimalAction',\n            'getImageAction', 'uploadCurrentUserImageAction', 'disable2FaSecretAction', 'renew2FaSecretAction',\n            'getUsersForSharingAction', 'getRolesForSharingAction',\n        ];\n\n        $this->checkActionPermission($event, 'users', $unrestrictedActions);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-users-for-sharing\", name=\"pimcore_admin_user_getusersforsharing\", methods={\"GET\"})\n     */\n    public function getUsersForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getUsersAction($request);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @Route(\"/user/get-roles-for-sharing\", name=\"pimcore_admin_user_getrolesforsharing\", methods={\"GET\"}))\n     */\n    public function getRolesForSharingAction(Request $request)\n    {\n        $this->checkPermission('share_configurations');\n\n        return $this->getRolesAction($request);\n    }\n\n    /**\n     * @Route(\"/user/get-users\", name=\"pimcore_admin_user_getusers\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getUsersAction(Request $request)\n    {\n        $users = [];\n\n        // get available user\n        $list = new \\Pimcore\\Model\\User\\Listing();\n\n        $conditions = [ 'type = \"user\"' ];\n\n        if (!$request->get('include_current_user')) {\n            $conditions[] = 'id != ' . $this->getAdminUser()->getId();\n        }\n\n        $list->setCondition(implode(' AND ', $conditions));\n\n        $list->load();\n        $userList = $list->getUsers();\n\n        foreach ($userList as $user) {\n            if (!$request->get('permission') || $user->isAllowed($request->get('permission'))) {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'label' => $user->getUsername(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($users), 'data' => $users]);\n    }\n\n    /**\n     * @Route(\"/user/get-roles\", name=\"pimcore_admin_user_getroles\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRolesAction(Request $request)\n    {\n        $roles = [];\n        $list = new \\Pimcore\\Model\\User\\Role\\Listing();\n\n        $list->setCondition('type = \"role\"');\n        $list->load();\n        $roleList = $list->getRoles();\n\n        foreach ($roleList as $role) {\n            if (!$request->get('permission') || in_array($request->get('permission'), $role->getPermissions())) {\n                $roles[] = [\n                    'id' => $role->getId(),\n                    'label' => $role->getName(),\n                ];\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'total' => count($roles), 'data' => $roles]);\n    }\n\n    /**\n     * @Route(\"/user/get-default-key-bindings\", name=\"pimcore_admin_user_getdefaultkeybindings\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDefaultKeyBindingsAction(Request $request)\n    {\n        $data = User::getDefaultKeyBindings();\n\n        return $this->adminJson(['success' => true, 'data' => $data]);\n    }\n\n    /**\n     * @Route(\"/user/invitationlink\", name=\"pimcore_admin_user_invitationlink\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function invitationLinkAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n\n        if ($username = $request->get('username')) {\n            $user = User::getByName($username);\n            if ($user instanceof User) {\n                if (!$user->isActive()) {\n                    $message .= 'User inactive  <br />';\n                }\n\n                if (!$user->getEmail()) {\n                    $message .= 'User has no email address <br />';\n                }\n            } else {\n                $message .= 'User unknown <br />';\n            }\n\n            if (empty($message)) {\n                //generate random password if user has no password\n                if (!$user->getPassword()) {\n                    $user->setPassword(bin2hex(random_bytes(16)));\n                    $user->save();\n                }\n\n                $token = Tool\\Authentication::generateToken($user->getName());\n                $loginUrl = $this->generateCustomUrl([\n                    'token' => $token,\n                    'reset' => true,\n                ]);\n\n                try {\n                    $mail = Tool::getMail([$user->getEmail()], 'Pimcore login invitation for ' . Tool::getHostname());\n                    $mail->setIgnoreDebugMode(true);\n                    $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in  24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                    $mail->send();\n\n                    $success = true;\n                    $message = sprintf($this->trans('invitation_link_sent'), $user->getEmail());\n                } catch (\\Exception $e) {\n                    $message .= 'could not send email';\n                }\n            }\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return int\n     */\n    protected function getUserId(Request $request)\n    {\n        if ($request->get('id')) {\n            if ($this->getAdminUser()->getId() != $request->get('id')) {\n                $this->checkPermission('users');\n            }\n\n            return (int) $request->get('id');\n        }\n\n        return $this->getAdminUser()->getId();\n    }\n\n    /**\n     *\n     * @param array $params\n     * @param string $fallbackUrl\n     * @param int $referenceType //UrlGeneratorInterface::ABSOLUTE_URL, ABSOLUTE_PATH, RELATIVE_PATH, NETWORK_PATH\n     *\n     * @return string The generated URL\n     */\n    private function generateCustomUrl(array $params, $fallbackUrl = 'pimcore_admin_login_check', $referenceType = UrlGeneratorInterface::ABSOLUTE_URL): string\n    {\n        try {\n            $adminEntryPointRoute = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n            //try to generate invitation link for custom admin point\n            $loginUrl = $this->generateUrl($adminEntryPointRoute, $params, $referenceType);\n        } catch (\\Exception $e) {\n            //use default login check for invitation link\n            $loginUrl = $this->generateUrl($fallbackUrl, $params, $referenceType);\n        }\n\n        return $loginUrl;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/UserController.php"], "buggy_code_start_loc": [289], "buggy_code_end_loc": [329], "fixing_code_start_loc": [290], "fixing_code_end_loc": [330], "type": "CWE-267", "message": "Privilege Defined With Unsafe Actions in GitHub repository pimcore/pimcore prior to 10.5.23.", "other": {"cve": {"id": "CVE-2023-2983", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-30T15:15:09.630", "lastModified": "2023-06-05T18:04:44.993", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Privilege Defined With Unsafe Actions in GitHub repository pimcore/pimcore prior to 10.5.23."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-267"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.23", "matchCriteriaId": "A626732C-272A-4FD3-9078-5D4FBFB910F5"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/c8f37b19c99cd82e4e558857d3e4d5476ea7228a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/6b2f33d3-2fd0-4d2d-ad7b-2c1e2417eeb1", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/c8f37b19c99cd82e4e558857d3e4d5476ea7228a"}}