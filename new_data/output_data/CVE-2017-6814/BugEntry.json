{"buggy_code": ["<?php\n/**\n * WordPress Administration Media API.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/**\n * Defines the default media upload tabs\n *\n * @since 2.5.0\n *\n * @return array default tabs\n */\nfunction media_upload_tabs() {\n\t$_default_tabs = array(\n\t\t'type' => __('From Computer'), // handler action suffix => tab text\n\t\t'type_url' => __('From URL'),\n\t\t'gallery' => __('Gallery'),\n\t\t'library' => __('Media Library')\n\t);\n\n\t/**\n\t * Filters the available tabs in the legacy (pre-3.5.0) media popup.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $_default_tabs An array of media tabs.\n\t */\n\treturn apply_filters( 'media_upload_tabs', $_default_tabs );\n}\n\n/**\n * Adds the gallery tab back to the tabs array if post has image attachments\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $tabs\n * @return array $tabs with gallery if post has image attachment\n */\nfunction update_gallery_tab($tabs) {\n\tglobal $wpdb;\n\n\tif ( !isset($_REQUEST['post_id']) ) {\n\t\tunset($tabs['gallery']);\n\t\treturn $tabs;\n\t}\n\n\t$post_id = intval($_REQUEST['post_id']);\n\n\tif ( $post_id )\n\t\t$attachments = intval( $wpdb->get_var( $wpdb->prepare( \"SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d\", $post_id ) ) );\n\n\tif ( empty($attachments) ) {\n\t\tunset($tabs['gallery']);\n\t\treturn $tabs;\n\t}\n\n\t$tabs['gallery'] = sprintf(__('Gallery (%s)'), \"<span id='attachments-count'>$attachments</span>\");\n\n\treturn $tabs;\n}\n\n/**\n * Outputs the legacy media upload tabs UI.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n */\nfunction the_media_upload_tabs() {\n\tglobal $redir_tab;\n\t$tabs = media_upload_tabs();\n\t$default = 'type';\n\n\tif ( !empty($tabs) ) {\n\t\techo \"<ul id='sidemenu'>\\n\";\n\t\tif ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) ) {\n\t\t\t$current = $redir_tab;\n\t\t} elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) ) {\n\t\t\t$current = $_GET['tab'];\n\t\t} else {\n\t\t\t/** This filter is documented in wp-admin/media-upload.php */\n\t\t\t$current = apply_filters( 'media_upload_default_tab', $default );\n\t\t}\n\n\t\tforeach ( $tabs as $callback => $text ) {\n\t\t\t$class = '';\n\n\t\t\tif ( $current == $callback )\n\t\t\t\t$class = \" class='current'\";\n\n\t\t\t$href = add_query_arg(array('tab' => $callback, 's' => false, 'paged' => false, 'post_mime_type' => false, 'm' => false));\n\t\t\t$link = \"<a href='\" . esc_url($href) . \"'$class>$text</a>\";\n\t\t\techo \"\\t<li id='\" . esc_attr(\"tab-$callback\") . \"'>$link</li>\\n\";\n\t\t}\n\t\techo \"</ul>\\n\";\n\t}\n}\n\n/**\n * Retrieves the image HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param int          $id      Image attachment id.\n * @param string       $caption Image caption.\n * @param string       $title   Image title attribute.\n * @param string       $align   Image CSS alignment property.\n * @param string       $url     Optional. Image src URL. Default empty.\n * @param bool|string  $rel     Optional. Value for rel attribute or whether to add a default value. Default false.\n * @param string|array $size    Optional. Image size. Accepts any valid image size, or an array of width\n *                              and height values in pixels (in that order). Default 'medium'.\n * @param string       $alt     Optional. Image alt attribute. Default empty.\n * @return string The HTML output to insert into the editor.\n */\nfunction get_image_send_to_editor( $id, $caption, $title, $align, $url = '', $rel = false, $size = 'medium', $alt = '' ) {\n\n\t$html = get_image_tag( $id, $alt, '', $align, $size );\n\n\tif ( $rel ) {\n\t\tif ( is_string( $rel ) ) {\n\t\t\t$rel = ' rel=\"' . esc_attr( $rel ) . '\"';\n\t\t} else {\n\t\t\t$rel = ' rel=\"attachment wp-att-' . intval( $id ) . '\"';\n\t\t}\n\t} else {\n\t\t$rel = '';\n\t}\n\n\tif ( $url )\n\t\t$html = '<a href=\"' . esc_attr( $url ) . '\"' . $rel . '>' . $html . '</a>';\n\n\t/**\n\t * Filters the image HTML markup to send to the editor when inserting an image.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string       $html    The image HTML markup to send.\n\t * @param int          $id      The attachment id.\n\t * @param string       $caption The image caption.\n\t * @param string       $title   The image title.\n\t * @param string       $align   The image alignment.\n\t * @param string       $url     The image source URL.\n\t * @param string|array $size    Size of image. Image size or array of width and height values\n\t *                              (in that order). Default 'medium'.\n\t * @param string       $alt     The image alternative, or alt, text.\n\t */\n\t$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );\n\n\treturn $html;\n}\n\n/**\n * Adds image shortcode with caption to editor\n *\n * @since 2.6.0\n *\n * @param string $html\n * @param integer $id\n * @param string $caption image caption\n * @param string $title image title attribute\n * @param string $align image css alignment property\n * @param string $url image src url\n * @param string $size image size (thumbnail, medium, large, full or added with add_image_size() )\n * @param string $alt image alt attribute\n * @return string\n */\nfunction image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {\n\n\t/**\n\t * Filters the caption text.\n\t *\n\t * Note: If the caption text is empty, the caption shortcode will not be appended\n\t * to the image HTML when inserted into the editor.\n\t *\n\t * Passing an empty value also prevents the {@see 'image_add_caption_shortcode'}\n\t * Filters from being evaluated at the end of image_add_caption().\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $caption The original caption text.\n\t * @param int    $id      The attachment ID.\n\t */\n\t$caption = apply_filters( 'image_add_caption_text', $caption, $id );\n\n\t/**\n\t * Filters whether to disable captions.\n\t *\n\t * Prevents image captions from being appended to image HTML when inserted into the editor.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param bool $bool Whether to disable appending captions. Returning true to the filter\n\t *                   will disable captions. Default empty string.\n\t */\n\tif ( empty($caption) || apply_filters( 'disable_captions', '' ) )\n\t\treturn $html;\n\n\t$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';\n\n\tif ( ! preg_match( '/width=[\"\\']([0-9]+)/', $html, $matches ) )\n\t\treturn $html;\n\n\t$width = $matches[1];\n\n\t$caption = str_replace( array(\"\\r\\n\", \"\\r\"), \"\\n\", $caption);\n\t$caption = preg_replace_callback( '/<[a-zA-Z0-9]+(?: [^<>]+>)*/', '_cleanup_image_add_caption', $caption );\n\n\t// Convert any remaining line breaks to <br>.\n\t$caption = preg_replace( '/[ \\n\\t]*\\n[ \\t]*/', '<br />', $caption );\n\n\t$html = preg_replace( '/(class=[\"\\'][^\\'\"]*)align(none|left|right|center)\\s?/', '$1', $html );\n\tif ( empty($align) )\n\t\t$align = 'none';\n\n\t$shcode = '[caption id=\"' . $id . '\" align=\"align' . $align\t. '\" width=\"' . $width . '\"]' . $html . ' ' . $caption . '[/caption]';\n\n\t/**\n\t * Filters the image HTML markup including the caption shortcode.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $shcode The image HTML markup with caption shortcode.\n\t * @param string $html   The image HTML markup.\n\t */\n\treturn apply_filters( 'image_add_caption_shortcode', $shcode, $html );\n}\n\n/**\n * Private preg_replace callback used in image_add_caption()\n *\n * @access private\n * @since 3.4.0\n */\nfunction _cleanup_image_add_caption( $matches ) {\n\t// Remove any line breaks from inside the tags.\n\treturn preg_replace( '/[\\r\\n\\t]+/', ' ', $matches[0] );\n}\n\n/**\n * Adds image html to editor\n *\n * @since 2.5.0\n *\n * @param string $html\n */\nfunction media_send_to_editor($html) {\n?>\n<script type=\"text/javascript\">\nvar win = window.dialogArguments || opener || parent || top;\nwin.send_to_editor( <?php echo wp_json_encode( $html ); ?> );\n</script>\n<?php\n\texit;\n}\n\n/**\n * Save a file submitted from a POST request and create an attachment post for it.\n *\n * @since 2.5.0\n *\n * @param string $file_id   Index of the `$_FILES` array that the file was sent. Required.\n * @param int    $post_id   The post ID of a post to attach the media item to. Required, but can\n *                          be set to 0, creating a media item that has no relationship to a post.\n * @param array  $post_data Overwrite some of the attachment. Optional.\n * @param array  $overrides Override the wp_handle_upload() behavior. Optional.\n * @return int|WP_Error ID of the attachment or a WP_Error object on failure.\n */\nfunction media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {\n\n\t$time = current_time('mysql');\n\tif ( $post = get_post($post_id) ) {\n\t\tif ( substr( $post->post_date, 0, 4 ) > 0 )\n\t\t\t$time = $post->post_date;\n\t}\n\n\t$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);\n\n\tif ( isset($file['error']) )\n\t\treturn new WP_Error( 'upload_error', $file['error'] );\n\n\t$name = $_FILES[$file_id]['name'];\n\t$ext  = pathinfo( $name, PATHINFO_EXTENSION );\n\t$name = wp_basename( $name, \".$ext\" );\n\n\t$url = $file['url'];\n\t$type = $file['type'];\n\t$file = $file['file'];\n\t$title = sanitize_text_field( $name );\n\t$content = '';\n\t$excerpt = '';\n\n\tif ( preg_match( '#^audio#', $type ) ) {\n\t\t$meta = wp_read_audio_metadata( $file );\n\n\t\tif ( ! empty( $meta['title'] ) ) {\n\t\t\t$title = $meta['title'];\n\t\t}\n\n\t\tif ( ! empty( $title ) ) {\n\n\t\t\tif ( ! empty( $meta['album'] ) && ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: album title, 3: artist name */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" from %2$s by %3$s.' ), $title, $meta['album'], $meta['artist'] );\n\t\t\t} elseif ( ! empty( $meta['album'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: album title */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" from %2$s.' ), $title, $meta['album'] );\n\t\t\t} elseif ( ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: artist name */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" by %2$s.' ), $title, $meta['artist'] );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: audio track title */\n\t\t\t\t$content .= sprintf( __( '\"%s\".' ), $title );\n\t\t\t}\n\n\t\t} elseif ( ! empty( $meta['album'] ) ) {\n\n\t\t\tif ( ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio album title, 2: artist name */\n\t\t\t\t$content .= sprintf( __( '%1$s by %2$s.' ), $meta['album'], $meta['artist'] );\n\t\t\t} else {\n\t\t\t\t$content .= $meta['album'] . '.';\n\t\t\t}\n\n\t\t} elseif ( ! empty( $meta['artist'] ) ) {\n\n\t\t\t$content .= $meta['artist'] . '.';\n\n\t\t}\n\n\t\tif ( ! empty( $meta['year'] ) ) {\n\t\t\t/* translators: Audio file track information. 1: Year of audio track release */\n\t\t\t$content .= ' ' . sprintf( __( 'Released: %d.' ), $meta['year'] );\n\t\t}\n\n\t\tif ( ! empty( $meta['track_number'] ) ) {\n\t\t\t$track_number = explode( '/', $meta['track_number'] );\n\t\t\tif ( isset( $track_number[1] ) ) {\n\t\t\t\t/* translators: Audio file track information. 1: Audio track number, 2: Total audio tracks */\n\t\t\t\t$content .= ' ' . sprintf( __( 'Track %1$s of %2$s.' ), number_format_i18n( $track_number[0] ), number_format_i18n( $track_number[1] ) );\n\t\t\t} else {\n\t\t\t\t/* translators: Audio file track information. 1: Audio track number */\n\t\t\t\t$content .= ' ' . sprintf( __( 'Track %1$s.' ), number_format_i18n( $track_number[0] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $meta['genre'] ) ) {\n\t\t\t/* translators: Audio file genre information. 1: Audio genre name */\n\t\t\t$content .= ' ' . sprintf( __( 'Genre: %s.' ), $meta['genre'] );\n\t\t}\n\n\t// Use image exif/iptc data for title and caption defaults if possible.\n\t} elseif ( 0 === strpos( $type, 'image/' ) && $image_meta = @wp_read_image_metadata( $file ) ) {\n\t\tif ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) ) {\n\t\t\t$title = $image_meta['title'];\n\t\t}\n\n\t\tif ( trim( $image_meta['caption'] ) ) {\n\t\t\t$excerpt = $image_meta['caption'];\n\t\t}\n\t}\n\n\t// Construct the attachment array\n\t$attachment = array_merge( array(\n\t\t'post_mime_type' => $type,\n\t\t'guid' => $url,\n\t\t'post_parent' => $post_id,\n\t\t'post_title' => $title,\n\t\t'post_content' => $content,\n\t\t'post_excerpt' => $excerpt,\n\t), $post_data );\n\n\t// This should never be set as it would then overwrite an existing attachment.\n\tunset( $attachment['ID'] );\n\n\t// Save the data\n\t$id = wp_insert_attachment($attachment, $file, $post_id);\n\tif ( !is_wp_error($id) ) {\n\t\twp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );\n\t}\n\n\treturn $id;\n\n}\n\n/**\n * Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().\n *\n * @since 2.6.0\n *\n * @param array  $file_array Array similar to a `$_FILES` upload array.\n * @param int    $post_id    The post ID the media is associated with.\n * @param string $desc       Optional. Description of the side-loaded file. Default null.\n * @param array  $post_data  Optional. Post data to override. Default empty array.\n * @return int|object The ID of the attachment or a WP_Error on failure.\n */\nfunction media_handle_sideload( $file_array, $post_id, $desc = null, $post_data = array() ) {\n\t$overrides = array('test_form'=>false);\n\n\t$time = current_time( 'mysql' );\n\tif ( $post = get_post( $post_id ) ) {\n\t\tif ( substr( $post->post_date, 0, 4 ) > 0 )\n\t\t\t$time = $post->post_date;\n\t}\n\n\t$file = wp_handle_sideload( $file_array, $overrides, $time );\n\tif ( isset($file['error']) )\n\t\treturn new WP_Error( 'upload_error', $file['error'] );\n\n\t$url = $file['url'];\n\t$type = $file['type'];\n\t$file = $file['file'];\n\t$title = preg_replace('/\\.[^.]+$/', '', basename($file));\n\t$content = '';\n\n\t// Use image exif/iptc data for title and caption defaults if possible.\n\tif ( $image_meta = @wp_read_image_metadata($file) ) {\n\t\tif ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )\n\t\t\t$title = $image_meta['title'];\n\t\tif ( trim( $image_meta['caption'] ) )\n\t\t\t$content = $image_meta['caption'];\n\t}\n\n\tif ( isset( $desc ) )\n\t\t$title = $desc;\n\n\t// Construct the attachment array.\n\t$attachment = array_merge( array(\n\t\t'post_mime_type' => $type,\n\t\t'guid' => $url,\n\t\t'post_parent' => $post_id,\n\t\t'post_title' => $title,\n\t\t'post_content' => $content,\n\t), $post_data );\n\n\t// This should never be set as it would then overwrite an existing attachment.\n\tunset( $attachment['ID'] );\n\n\t// Save the attachment metadata\n\t$id = wp_insert_attachment($attachment, $file, $post_id);\n\tif ( !is_wp_error($id) )\n\t\twp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );\n\n\treturn $id;\n}\n\n/**\n * Adds the iframe to display content for the media upload page\n *\n * @since 2.5.0\n *\n * @global int $body_id\n *\n * @param string|callable $content_func\n */\nfunction wp_iframe($content_func /* ... */) {\n\t_wp_admin_html_begin();\n?>\n<title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title>\n<?php\n\nwp_enqueue_style( 'colors' );\n// Check callback name for 'media'\nif ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) )\n\t|| ( ! is_array( $content_func ) && 0 === strpos( $content_func, 'media' ) ) )\n\twp_enqueue_style( 'deprecated-media' );\nwp_enqueue_style( 'ie' );\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nvar ajaxurl = '<?php echo admin_url( 'admin-ajax.php', 'relative' ); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup',\nisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n<?php\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_enqueue_scripts', 'media-upload-popup' );\n\n\t/**\n\t * Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_print_styles-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_styles' );\n\n\t/**\n\t * Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_print_scripts-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_scripts' );\n\n\t/**\n\t * Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0)\n\t * media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_head-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_head' );\n\nif ( is_string( $content_func ) ) {\n\t/**\n\t * Fires in the admin header for each specific form tab in the legacy\n\t * (pre-3.5.0) media upload popup.\n\t *\n\t * The dynamic portion of the hook, `$content_func`, refers to the form\n\t * callback for the media upload type. Possible values include\n\t * 'media_upload_type_form', 'media_upload_type_url_form', and\n\t * 'media_upload_library_form'.\n\t *\n\t * @since 2.5.0\n\t */\n\tdo_action( \"admin_head_{$content_func}\" );\n}\n?>\n</head>\n<body<?php if ( isset($GLOBALS['body_id']) ) echo ' id=\"' . $GLOBALS['body_id'] . '\"'; ?> class=\"wp-core-ui no-js\">\n<script type=\"text/javascript\">\ndocument.body.className = document.body.className.replace('no-js', 'js');\n</script>\n<?php\n\t$args = func_get_args();\n\t$args = array_slice($args, 1);\n\tcall_user_func_array($content_func, $args);\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n?>\n<script type=\"text/javascript\">if(typeof wpOnload=='function')wpOnload();</script>\n</body>\n</html>\n<?php\n}\n\n/**\n * Adds the media button to the editor\n *\n * @since 2.5.0\n *\n * @global int $post_ID\n *\n * @staticvar int $instance\n *\n * @param string $editor_id\n */\nfunction media_buttons($editor_id = 'content') {\n\tstatic $instance = 0;\n\t$instance++;\n\n\t$post = get_post();\n\tif ( ! $post && ! empty( $GLOBALS['post_ID'] ) )\n\t\t$post = $GLOBALS['post_ID'];\n\n\twp_enqueue_media( array(\n\t\t'post' => $post\n\t) );\n\n\t$img = '<span class=\"wp-media-buttons-icon\"></span> ';\n\n\t$id_attribute = $instance === 1 ? ' id=\"insert-media-button\"' : '';\n\tprintf( '<button type=\"button\"%s class=\"button insert-media add_media\" data-editor=\"%s\">%s</button>',\n\t\t$id_attribute,\n\t\tesc_attr( $editor_id ),\n\t\t$img . __( 'Add Media' )\n\t);\n\t/**\n\t * Filters the legacy (pre-3.5.0) media buttons.\n\t *\n\t * Use {@see 'media_buttons'} action instead.\n\t *\n\t * @since 2.5.0\n\t * @deprecated 3.5.0 Use {@see 'media_buttons'} action instead.\n\t *\n\t * @param string $string Media buttons context. Default empty.\n\t */\n\t$legacy_filter = apply_filters( 'media_buttons_context', '' );\n\n\tif ( $legacy_filter ) {\n\t\t// #WP22559. Close <a> if a plugin started by closing <a> to open their own <a> tag.\n\t\tif ( 0 === stripos( trim( $legacy_filter ), '</a>' ) )\n\t\t\t$legacy_filter .= '</a>';\n\t\techo $legacy_filter;\n\t}\n}\n\n/**\n *\n * @global int $post_ID\n * @param string $type\n * @param int $post_id\n * @param string $tab\n * @return string\n */\nfunction get_upload_iframe_src( $type = null, $post_id = null, $tab = null ) {\n\tglobal $post_ID;\n\n\tif ( empty( $post_id ) )\n\t\t$post_id = $post_ID;\n\n\t$upload_iframe_src = add_query_arg( 'post_id', (int) $post_id, admin_url('media-upload.php') );\n\n\tif ( $type && 'media' != $type )\n\t\t$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);\n\n\tif ( ! empty( $tab ) )\n\t\t$upload_iframe_src = add_query_arg('tab', $tab, $upload_iframe_src);\n\n\t/**\n\t * Filters the upload iframe source URL for a specific media type.\n\t *\n\t * The dynamic portion of the hook name, `$type`, refers to the type\n\t * of media uploaded.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $upload_iframe_src The upload iframe source URL by type.\n\t */\n\t$upload_iframe_src = apply_filters( \"{$type}_upload_iframe_src\", $upload_iframe_src );\n\n\treturn add_query_arg('TB_iframe', true, $upload_iframe_src);\n}\n\n/**\n * Handles form submissions for the legacy media uploader.\n *\n * @since 2.5.0\n *\n * @return mixed void|object WP_Error on failure\n */\nfunction media_upload_form_handler() {\n\tcheck_admin_referer('media-form');\n\n\t$errors = null;\n\n\tif ( isset($_POST['send']) ) {\n\t\t$keys = array_keys( $_POST['send'] );\n\t\t$send_id = (int) reset( $keys );\n\t}\n\n\tif ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {\n\t\t$post = $_post = get_post($attachment_id, ARRAY_A);\n\n\t\tif ( !current_user_can( 'edit_post', $attachment_id ) )\n\t\t\tcontinue;\n\n\t\tif ( isset($attachment['post_content']) )\n\t\t\t$post['post_content'] = $attachment['post_content'];\n\t\tif ( isset($attachment['post_title']) )\n\t\t\t$post['post_title'] = $attachment['post_title'];\n\t\tif ( isset($attachment['post_excerpt']) )\n\t\t\t$post['post_excerpt'] = $attachment['post_excerpt'];\n\t\tif ( isset($attachment['menu_order']) )\n\t\t\t$post['menu_order'] = $attachment['menu_order'];\n\n\t\tif ( isset($send_id) && $attachment_id == $send_id ) {\n\t\t\tif ( isset($attachment['post_parent']) )\n\t\t\t\t$post['post_parent'] = $attachment['post_parent'];\n\t\t}\n\n\t\t/**\n\t\t * Filters the attachment fields to be saved.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @see wp_get_attachment_metadata()\n\t\t *\n\t\t * @param array $post       An array of post data.\n\t\t * @param array $attachment An array of attachment metadata.\n\t\t */\n\t\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment );\n\n\t\tif ( isset($attachment['image_alt']) ) {\n\t\t\t$image_alt = wp_unslash( $attachment['image_alt'] );\n\t\t\tif ( $image_alt != get_post_meta($attachment_id, '_wp_attachment_image_alt', true) ) {\n\t\t\t\t$image_alt = wp_strip_all_tags( $image_alt, true );\n\n\t\t\t\t// Update_meta expects slashed.\n\t\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_image_alt', wp_slash( $image_alt ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( isset($post['errors']) ) {\n\t\t\t$errors[$attachment_id] = $post['errors'];\n\t\t\tunset($post['errors']);\n\t\t}\n\n\t\tif ( $post != $_post )\n\t\t\twp_update_post($post);\n\n\t\tforeach ( get_attachment_taxonomies($post) as $t ) {\n\t\t\tif ( isset($attachment[$t]) )\n\t\t\t\twp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);\n\t\t}\n\t}\n\n\tif ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>\n\t\t<script type=\"text/javascript\">\n\t\tvar win = window.dialogArguments || opener || parent || top;\n\t\twin.tb_remove();\n\t\t</script>\n\t\t<?php\n\t\texit;\n\t}\n\n\tif ( isset($send_id) ) {\n\t\t$attachment = wp_unslash( $_POST['attachments'][$send_id] );\n\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\tif ( !empty($attachment['url']) ) {\n\t\t\t$rel = '';\n\t\t\tif ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )\n\t\t\t\t$rel = \" rel='attachment wp-att-\" . esc_attr($send_id) . \"'\";\n\t\t\t$html = \"<a href='{$attachment['url']}'$rel>$html</a>\";\n\t\t}\n\n\t\t/**\n\t\t * Filters the HTML markup for a media item sent to the editor.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @see wp_get_attachment_metadata()\n\t\t *\n\t\t * @param string $html       HTML markup for a media item sent to the editor.\n\t\t * @param int    $send_id    The first key from the $_POST['send'] data.\n\t\t * @param array  $attachment Array of attachment metadata.\n\t\t */\n\t\t$html = apply_filters( 'media_send_to_editor', $html, $send_id, $attachment );\n\t\treturn media_send_to_editor($html);\n\t}\n\n\treturn $errors;\n}\n\n/**\n * Handles the process of uploading media.\n *\n * @since 2.5.0\n *\n * @return null|string\n */\nfunction wp_media_upload_handler() {\n\t$errors = array();\n\t$id = 0;\n\n\tif ( isset($_POST['html-upload']) && !empty($_FILES) ) {\n\t\tcheck_admin_referer('media-form');\n\t\t// Upload File button was clicked\n\t\t$id = media_handle_upload('async-upload', $_REQUEST['post_id']);\n\t\tunset($_FILES);\n\t\tif ( is_wp_error($id) ) {\n\t\t\t$errors['upload_error'] = $id;\n\t\t\t$id = false;\n\t\t}\n\t}\n\n\tif ( !empty($_POST['insertonlybutton']) ) {\n\t\t$src = $_POST['src'];\n\t\tif ( !empty($src) && !strpos($src, '://') )\n\t\t\t$src = \"http://$src\";\n\n\t\tif ( isset( $_POST['media_type'] ) && 'image' != $_POST['media_type'] ) {\n\t\t\t$title = esc_html( wp_unslash( $_POST['title'] ) );\n\t\t\tif ( empty( $title ) )\n\t\t\t\t$title = esc_html( basename( $src ) );\n\n\t\t\tif ( $title && $src )\n\t\t\t\t$html = \"<a href='\" . esc_url($src) . \"'>$title</a>\";\n\n\t\t\t$type = 'file';\n\t\t\tif ( ( $ext = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src ) ) && ( $ext_type = wp_ext2type( $ext ) )\n\t\t\t\t&& ( 'audio' == $ext_type || 'video' == $ext_type ) )\n\t\t\t\t\t$type = $ext_type;\n\n\t\t\t/**\n\t\t\t * Filters the URL sent to the editor for a specific media type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$type`, refers to the type\n\t\t\t * of media being sent.\n\t\t\t *\n\t\t\t * @since 3.3.0\n\t\t\t *\n\t\t\t * @param string $html  HTML markup sent to the editor.\n\t\t\t * @param string $src   Media source URL.\n\t\t\t * @param string $title Media title.\n\t\t\t */\n\t\t\t$html = apply_filters( \"{$type}_send_to_editor_url\", $html, esc_url_raw( $src ), $title );\n\t\t} else {\n\t\t\t$align = '';\n\t\t\t$alt = esc_attr( wp_unslash( $_POST['alt'] ) );\n\t\t\tif ( isset($_POST['align']) ) {\n\t\t\t\t$align = esc_attr( wp_unslash( $_POST['align'] ) );\n\t\t\t\t$class = \" class='align$align'\";\n\t\t\t}\n\t\t\tif ( !empty($src) )\n\t\t\t\t$html = \"<img src='\" . esc_url($src) . \"' alt='$alt'$class />\";\n\n\t\t\t/**\n\t\t\t * Filters the image URL sent to the editor.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string $html  HTML markup sent to the editor for an image.\n\t\t\t * @param string $src   Image source URL.\n\t\t\t * @param string $alt   Image alternate, or alt, text.\n\t\t\t * @param string $align The image alignment. Default 'alignnone'. Possible values include\n\t\t\t *                      'alignleft', 'aligncenter', 'alignright', 'alignnone'.\n\t\t\t */\n\t\t\t$html = apply_filters( 'image_send_to_editor_url', $html, esc_url_raw( $src ), $alt, $align );\n\t\t}\n\n\t\treturn media_send_to_editor($html);\n\t}\n\n\tif ( isset( $_POST['save'] ) ) {\n\t\t$errors['upload_notice'] = __('Saved.');\n\t\twp_enqueue_script( 'admin-gallery' );\n \t\treturn wp_iframe( 'media_upload_gallery_form', $errors );\n\n\t} elseif ( ! empty( $_POST ) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\tif ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' ) {\n\t\t$type = 'image';\n\t\tif ( isset( $_GET['type'] ) && in_array( $_GET['type'], array( 'video', 'audio', 'file' ) ) )\n\t\t\t$type = $_GET['type'];\n\t\treturn wp_iframe( 'media_upload_type_url_form', $type, $errors, $id );\n\t}\n\n\treturn wp_iframe( 'media_upload_type_form', 'image', $errors, $id );\n}\n\n/**\n * Downloads an image from the specified URL and attaches it to a post.\n *\n * @since 2.6.0\n * @since 4.2.0 Introduced the `$return` parameter.\n *\n * @param string $file    The URL of the image to download.\n * @param int    $post_id The post ID the media is to be associated with.\n * @param string $desc    Optional. Description of the image.\n * @param string $return  Optional. Accepts 'html' (image tag html) or 'src' (URL). Default 'html'.\n * @return string|WP_Error Populated HTML img tag on success, WP_Error object otherwise.\n */\nfunction media_sideload_image( $file, $post_id, $desc = null, $return = 'html' ) {\n\tif ( ! empty( $file ) ) {\n\n\t\t// Set variables for storage, fix file filename for query strings.\n\t\tpreg_match( '/[^\\?]+\\.(jpe?g|jpe|gif|png)\\b/i', $file, $matches );\n\t\tif ( ! $matches ) {\n\t\t\treturn new WP_Error( 'image_sideload_failed', __( 'Invalid image URL' ) );\n\t\t}\n\n\t\t$file_array = array();\n\t\t$file_array['name'] = basename( $matches[0] );\n\n\t\t// Download file to temp location.\n\t\t$file_array['tmp_name'] = download_url( $file );\n\n\t\t// If error storing temporarily, return the error.\n\t\tif ( is_wp_error( $file_array['tmp_name'] ) ) {\n\t\t\treturn $file_array['tmp_name'];\n\t\t}\n\n\t\t// Do the validation and storage stuff.\n\t\t$id = media_handle_sideload( $file_array, $post_id, $desc );\n\n\t\t// If error storing permanently, unlink.\n\t\tif ( is_wp_error( $id ) ) {\n\t\t\t@unlink( $file_array['tmp_name'] );\n\t\t\treturn $id;\n\t\t}\n\n\t\t$src = wp_get_attachment_url( $id );\n\t}\n\n\t// Finally, check to make sure the file has been saved, then return the HTML.\n\tif ( ! empty( $src ) ) {\n\t\tif ( $return === 'src' ) {\n\t\t\treturn $src;\n\t\t}\n\n\t\t$alt = isset( $desc ) ? esc_attr( $desc ) : '';\n\t\t$html = \"<img src='$src' alt='$alt' />\";\n\t\treturn $html;\n\t} else {\n\t\treturn new WP_Error( 'image_sideload_failed' );\n\t}\n}\n\n/**\n * Retrieves the legacy media uploader form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n */\nfunction media_upload_gallery() {\n\t$errors = array();\n\n\tif ( !empty($_POST) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\twp_enqueue_script('admin-gallery');\n\treturn wp_iframe( 'media_upload_gallery_form', $errors );\n}\n\n/**\n * Retrieves the legacy media library form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n */\nfunction media_upload_library() {\n\t$errors = array();\n\tif ( !empty($_POST) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\treturn wp_iframe( 'media_upload_library_form', $errors );\n}\n\n/**\n * Retrieve HTML for the image alignment radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $checked\n * @return string\n */\nfunction image_align_input_fields( $post, $checked = '' ) {\n\n\tif ( empty($checked) )\n\t\t$checked = get_user_setting('align', 'none');\n\n\t$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));\n\tif ( !array_key_exists( (string) $checked, $alignments ) )\n\t\t$checked = 'none';\n\n\t$out = array();\n\tforeach ( $alignments as $name => $label ) {\n\t\t$name = esc_attr($name);\n\t\t$out[] = \"<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'\".\n\t\t\t( $checked == $name ? \" checked='checked'\" : \"\" ) .\n\t\t\t\" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>\";\n\t}\n\treturn join(\"\\n\", $out);\n}\n\n/**\n * Retrieve HTML for the size radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param bool|string $check\n * @return array\n */\nfunction image_size_input_fields( $post, $check = '' ) {\n\t/**\n\t * Filters the names and labels of the default image sizes.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param array $size_names Array of image sizes and their names. Default values\n\t *                          include 'Thumbnail', 'Medium', 'Large', 'Full Size'.\n\t */\n\t$size_names = apply_filters( 'image_size_names_choose', array(\n\t\t'thumbnail' => __( 'Thumbnail' ),\n\t\t'medium'    => __( 'Medium' ),\n\t\t'large'     => __( 'Large' ),\n\t\t'full'      => __( 'Full Size' )\n\t) );\n\n\tif ( empty( $check ) ) {\n\t\t$check = get_user_setting('imgsize', 'medium');\n\t}\n\t$out = array();\n\n\tforeach ( $size_names as $size => $label ) {\n\t\t$downsize = image_downsize( $post->ID, $size );\n\t\t$checked = '';\n\n\t\t// Is this size selectable?\n\t\t$enabled = ( $downsize[3] || 'full' == $size );\n\t\t$css_id = \"image-size-{$size}-{$post->ID}\";\n\n\t\t// If this size is the default but that's not available, don't select it.\n\t\tif ( $size == $check ) {\n\t\t\tif ( $enabled ) {\n\t\t\t\t$checked = \" checked='checked'\";\n\t\t\t} else {\n\t\t\t\t$check = '';\n\t\t\t}\n\t\t} elseif ( ! $check && $enabled && 'thumbnail' != $size ) {\n\t\t\t/*\n\t\t\t * If $check is not enabled, default to the first available size\n\t\t\t * that's bigger than a thumbnail.\n\t\t\t */\n\t\t\t$check = $size;\n\t\t\t$checked = \" checked='checked'\";\n\t\t}\n\n\t\t$html = \"<div class='image-size-item'><input type='radio' \" . disabled( $enabled, false, false ) . \"name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />\";\n\n\t\t$html .= \"<label for='{$css_id}'>$label</label>\";\n\n\t\t// Only show the dimensions if that choice is available.\n\t\tif ( $enabled ) {\n\t\t\t$html .= \" <label for='{$css_id}' class='help'>\" . sprintf( \"(%d&nbsp;&times;&nbsp;%d)\", $downsize[1], $downsize[2] ). \"</label>\";\n\t\t}\n\t\t$html .= '</div>';\n\n\t\t$out[] = $html;\n\t}\n\n\treturn array(\n\t\t'label' => __( 'Size' ),\n\t\t'input' => 'html',\n\t\t'html'  => join( \"\\n\", $out ),\n\t);\n}\n\n/**\n * Retrieve HTML for the Link URL buttons with the default link type as specified.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $url_type\n * @return string\n */\nfunction image_link_input_fields($post, $url_type = '') {\n\n\t$file = wp_get_attachment_url($post->ID);\n\t$link = get_attachment_link($post->ID);\n\n\tif ( empty($url_type) )\n\t\t$url_type = get_user_setting('urlbutton', 'post');\n\n\t$url = '';\n\tif ( $url_type == 'file' )\n\t\t$url = $file;\n\telseif ( $url_type == 'post' )\n\t\t$url = $link;\n\n\treturn \"\n\t<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='\" . esc_attr($url) . \"' /><br />\n\t<button type='button' class='button urlnone' data-link-url=''>\" . __('None') . \"</button>\n\t<button type='button' class='button urlfile' data-link-url='\" . esc_attr($file) . \"'>\" . __('File URL') . \"</button>\n\t<button type='button' class='button urlpost' data-link-url='\" . esc_attr($link) . \"'>\" . __('Attachment Post URL') . \"</button>\n\";\n}\n\n/**\n * Output a textarea element for inputting an attachment caption.\n *\n * @since 3.4.0\n *\n * @param WP_Post $edit_post Attachment WP_Post object.\n * @return string HTML markup for the textarea element.\n */\nfunction wp_caption_input_textarea($edit_post) {\n\t// Post data is already escaped.\n\t$name = \"attachments[{$edit_post->ID}][post_excerpt]\";\n\n\treturn '<textarea name=\"' . $name . '\" id=\"' . $name . '\">' . $edit_post->post_excerpt . '</textarea>';\n}\n\n/**\n * Retrieves the image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array $form_fields\n * @param object $post\n * @return array\n */\nfunction image_attachment_fields_to_edit($form_fields, $post) {\n\treturn $form_fields;\n}\n\n/**\n * Retrieves the single non-image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n */\nfunction media_single_attachment_fields_to_edit( $form_fields, $post ) {\n\tunset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);\n\treturn $form_fields;\n}\n\n/**\n * Retrieves the post non-image attachment fields to edito form fields.\n *\n * @since 2.8.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n */\nfunction media_post_single_attachment_fields_to_edit( $form_fields, $post ) {\n\tunset($form_fields['image_url']);\n\treturn $form_fields;\n}\n\n/**\n * Filters input from media_upload_form_handler() and assigns a default\n * post_title from the file name if none supplied.\n *\n * Illustrates the use of the {@see 'attachment_fields_to_save'} filter\n * which can be used to add default values to any field before saving to DB.\n *\n * @since 2.5.0\n *\n * @param array $post       The WP_Post attachment object converted to an array.\n * @param array $attachment An array of attachment metadata.\n * @return array Filtered attachment post object.\n */\nfunction image_attachment_fields_to_save( $post, $attachment ) {\n\tif ( substr( $post['post_mime_type'], 0, 5 ) == 'image' ) {\n\t\tif ( strlen( trim( $post['post_title'] ) ) == 0 ) {\n\t\t\t$attachment_url = ( isset( $post['attachment_url'] ) ) ? $post['attachment_url'] : $post['guid'];\n\t\t\t$post['post_title'] = preg_replace( '/\\.\\w+$/', '', wp_basename( $attachment_url ) );\n\t\t\t$post['errors']['post_title']['errors'][] = __( 'Empty Title filled from filename.' );\n\t\t}\n\t}\n\n\treturn $post;\n}\n\n/**\n * Retrieves the media element HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param string $html\n * @param integer $attachment_id\n * @param array $attachment\n * @return string\n */\nfunction image_media_send_to_editor($html, $attachment_id, $attachment) {\n\t$post = get_post($attachment_id);\n\tif ( substr($post->post_mime_type, 0, 5) == 'image' ) {\n\t\t$url = $attachment['url'];\n\t\t$align = !empty($attachment['align']) ? $attachment['align'] : 'none';\n\t\t$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';\n\t\t$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';\n\t\t$rel = ( strpos( $url, 'attachment_id') || $url === get_attachment_link( $attachment_id ) );\n\n\t\treturn get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);\n\t}\n\n\treturn $html;\n}\n\n/**\n * Retrieves the attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param WP_Post $post\n * @param array $errors\n * @return array\n */\nfunction get_attachment_fields_to_edit($post, $errors = null) {\n\tif ( is_int($post) )\n\t\t$post = get_post($post);\n\tif ( is_array($post) )\n\t\t$post = new WP_Post( (object) $post );\n\n\t$image_url = wp_get_attachment_url($post->ID);\n\n\t$edit_post = sanitize_post($post, 'edit');\n\n\t$form_fields = array(\n\t\t'post_title'   => array(\n\t\t\t'label'      => __('Title'),\n\t\t\t'value'      => $edit_post->post_title\n\t\t),\n\t\t'image_alt'   => array(),\n\t\t'post_excerpt' => array(\n\t\t\t'label'      => __('Caption'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => wp_caption_input_textarea($edit_post)\n\t\t),\n\t\t'post_content' => array(\n\t\t\t'label'      => __('Description'),\n\t\t\t'value'      => $edit_post->post_content,\n\t\t\t'input'      => 'textarea'\n\t\t),\n\t\t'url'          => array(\n\t\t\t'label'      => __('Link URL'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => image_link_input_fields($post, get_option('image_default_link_type')),\n\t\t\t'helps'      => __('Enter a link URL or click above for presets.')\n\t\t),\n\t\t'menu_order'   => array(\n\t\t\t'label'      => __('Order'),\n\t\t\t'value'      => $edit_post->menu_order\n\t\t),\n\t\t'image_url'\t=> array(\n\t\t\t'label'      => __('File URL'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => \"<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='\" . esc_attr($image_url) . \"' /><br />\",\n\t\t\t'value'      => wp_get_attachment_url($post->ID),\n\t\t\t'helps'      => __('Location of the uploaded file.')\n\t\t)\n\t);\n\n\tforeach ( get_attachment_taxonomies($post) as $taxonomy ) {\n\t\t$t = (array) get_taxonomy($taxonomy);\n\t\tif ( ! $t['public'] || ! $t['show_ui'] )\n\t\t\tcontinue;\n\t\tif ( empty($t['label']) )\n\t\t\t$t['label'] = $taxonomy;\n\t\tif ( empty($t['args']) )\n\t\t\t$t['args'] = array();\n\n\t\t$terms = get_object_term_cache($post->ID, $taxonomy);\n\t\tif ( false === $terms )\n\t\t\t$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);\n\n\t\t$values = array();\n\n\t\tforeach ( $terms as $term )\n\t\t\t$values[] = $term->slug;\n\t\t$t['value'] = join(', ', $values);\n\n\t\t$form_fields[$taxonomy] = $t;\n\t}\n\n\t// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default\n\t// The recursive merge is easily traversed with array casting: foreach ( (array) $things as $thing )\n\t$form_fields = array_merge_recursive($form_fields, (array) $errors);\n\n\t// This was formerly in image_attachment_fields_to_edit().\n\tif ( substr($post->post_mime_type, 0, 5) == 'image' ) {\n\t\t$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);\n\t\tif ( empty($alt) )\n\t\t\t$alt = '';\n\n\t\t$form_fields['post_title']['required'] = true;\n\n\t\t$form_fields['image_alt'] = array(\n\t\t\t'value' => $alt,\n\t\t\t'label' => __('Alternative Text'),\n\t\t\t'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')\n\t\t);\n\n\t\t$form_fields['align'] = array(\n\t\t\t'label' => __('Alignment'),\n\t\t\t'input' => 'html',\n\t\t\t'html'  => image_align_input_fields($post, get_option('image_default_align')),\n\t\t);\n\n\t\t$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );\n\n\t} else {\n\t\tunset( $form_fields['image_alt'] );\n\t}\n\n\t/**\n\t * Filters the attachment fields to edit.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array   $form_fields An array of attachment form fields.\n\t * @param WP_Post $post        The WP_Post attachment object.\n\t */\n\t$form_fields = apply_filters( 'attachment_fields_to_edit', $form_fields, $post );\n\n\treturn $form_fields;\n}\n\n/**\n * Retrieve HTML for media items of post gallery.\n *\n * The HTML markup retrieved will be created for the progress of SWF Upload\n * component. Will also create link for showing and hiding the form to modify\n * the image attachment.\n *\n * @since 2.5.0\n *\n * @global WP_Query $wp_the_query\n *\n * @param int $post_id Optional. Post ID.\n * @param array $errors Errors for attachment, if any.\n * @return string\n */\nfunction get_media_items( $post_id, $errors ) {\n\t$attachments = array();\n\tif ( $post_id ) {\n\t\t$post = get_post($post_id);\n\t\tif ( $post && $post->post_type == 'attachment' )\n\t\t\t$attachments = array($post->ID => $post);\n\t\telse\n\t\t\t$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );\n\t} else {\n\t\tif ( is_array($GLOBALS['wp_the_query']->posts) )\n\t\t\tforeach ( $GLOBALS['wp_the_query']->posts as $attachment )\n\t\t\t\t$attachments[$attachment->ID] = $attachment;\n\t}\n\n\t$output = '';\n\tforeach ( (array) $attachments as $id => $attachment ) {\n\t\tif ( $attachment->post_status == 'trash' )\n\t\t\tcontinue;\n\t\tif ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )\n\t\t\t$output .= \"\\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress hidden'><div class='bar'></div></div><div id='media-upload-error-$id' class='hidden'></div><div class='filename hidden'></div>$item\\n</div>\";\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieve HTML form for modifying the image attachment.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n *\n * @param int $attachment_id Attachment ID for modification.\n * @param string|array $args Optional. Override defaults.\n * @return string HTML form for attachment.\n */\nfunction get_media_item( $attachment_id, $args = null ) {\n\tglobal $redir_tab;\n\n\tif ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )\n\t\t$thumb_url = $thumb_url[0];\n\telse\n\t\t$thumb_url = false;\n\n\t$post = get_post( $attachment_id );\n\t$current_post_id = !empty( $_GET['post_id'] ) ? (int) $_GET['post_id'] : 0;\n\n\t$default_args = array(\n\t\t'errors' => null,\n\t\t'send' => $current_post_id ? post_type_supports( get_post_type( $current_post_id ), 'editor' ) : true,\n\t\t'delete' => true,\n\t\t'toggle' => true,\n\t\t'show_title' => true\n\t);\n\t$args = wp_parse_args( $args, $default_args );\n\n\t/**\n\t * Filters the arguments used to retrieve an image for the edit image form.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @see get_media_item\n\t *\n\t * @param array $args An array of arguments.\n\t */\n\t$r = apply_filters( 'get_media_item_args', $args );\n\n\t$toggle_on  = __( 'Show' );\n\t$toggle_off = __( 'Hide' );\n\n\t$file = get_attached_file( $post->ID );\n\t$filename = esc_html( wp_basename( $file ) );\n\t$title = esc_attr( $post->post_title );\n\n\t$post_mime_types = get_post_mime_types();\n\t$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );\n\t$type = reset( $keys );\n\t$type_html = \"<input type='hidden' id='type-of-$attachment_id' value='\" . esc_attr( $type ) . \"' />\";\n\n\t$form_fields = get_attachment_fields_to_edit( $post, $r['errors'] );\n\n\tif ( $r['toggle'] ) {\n\t\t$class = empty( $r['errors'] ) ? 'startclosed' : 'startopen';\n\t\t$toggle_links = \"\n\t<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>\n\t<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>\";\n\t} else {\n\t\t$class = '';\n\t\t$toggle_links = '';\n\t}\n\n\t$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case\n\t$display_title = $r['show_title'] ? \"<div class='filename new'><span class='title'>\" . wp_html_excerpt( $display_title, 60, '&hellip;' ) . \"</span></div>\" : '';\n\n\t$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );\n\t$order = '';\n\n\tforeach ( $form_fields as $key => $val ) {\n\t\tif ( 'menu_order' == $key ) {\n\t\t\tif ( $gallery )\n\t\t\t\t$order = \"<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='\" . esc_attr( $val['value'] ). \"' /></div>\";\n\t\t\telse\n\t\t\t\t$order = \"<input type='hidden' name='attachments[$attachment_id][menu_order]' value='\" . esc_attr( $val['value'] ) . \"' />\";\n\n\t\t\tunset( $form_fields['menu_order'] );\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t$media_dims = '';\n\t$meta = wp_get_attachment_metadata( $post->ID );\n\tif ( isset( $meta['width'], $meta['height'] ) )\n\t\t$media_dims .= \"<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> \";\n\n\t/**\n\t * Filters the media metadata.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string  $media_dims The HTML markup containing the media dimensions.\n\t * @param WP_Post $post       The WP_Post attachment object.\n\t */\n\t$media_dims = apply_filters( 'media_meta', $media_dims, $post );\n\n\t$image_edit_button = '';\n\tif ( wp_attachment_is_image( $post->ID ) && wp_image_editor_supports( array( 'mime_type' => $post->post_mime_type ) ) ) {\n\t\t$nonce = wp_create_nonce( \"image_editor-$post->ID\" );\n\t\t$image_edit_button = \"<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \\\"$nonce\\\" )' class='button' value='\" . esc_attr__( 'Edit Image' ) . \"' /> <span class='spinner'></span>\";\n\t}\n\n\t$attachment_url = get_permalink( $attachment_id );\n\n\t$item = \"\n\t$type_html\n\t$toggle_links\n\t$order\n\t$display_title\n\t<table class='slidetoggle describe $class'>\n\t\t<thead class='media-item-info' id='media-head-$post->ID'>\n\t\t<tr>\n\t\t\t<td class='A1B1' id='thumbnail-head-$post->ID'>\n\t\t\t<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' /></a></p>\n\t\t\t<p>$image_edit_button</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><strong>\" . __('File name:') . \"</strong> $filename</p>\n\t\t\t<p><strong>\" . __('File type:') . \"</strong> $post->post_mime_type</p>\n\t\t\t<p><strong>\" . __('Upload date:') . \"</strong> \" . mysql2date( __( 'F j, Y' ), $post->post_date ). '</p>';\n\t\t\tif ( !empty( $media_dims ) )\n\t\t\t\t$item .= \"<p><strong>\" . __('Dimensions:') . \"</strong> $media_dims</p>\\n\";\n\n\t\t\t$item .= \"</td></tr>\\n\";\n\n\t$item .= \"\n\t\t</thead>\n\t\t<tbody>\n\t\t<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>\\n\n\t\t<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\\n\n\t\t<tr><td colspan='2'><p class='media-types media-types-required-info'>\" . sprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . \"</p></td></tr>\\n\";\n\n\t$defaults = array(\n\t\t'input'      => 'text',\n\t\t'required'   => false,\n\t\t'value'      => '',\n\t\t'extra_rows' => array(),\n\t);\n\n\tif ( $r['send'] ) {\n\t\t$r['send'] = get_submit_button( __( 'Insert into Post' ), '', \"send[$attachment_id]\", false );\n\t}\n\n\t$delete = empty( $r['delete'] ) ? '' : $r['delete'];\n\tif ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {\n\t\tif ( !EMPTY_TRASH_DAYS ) {\n\t\t\t$delete = \"<a href='\" . wp_nonce_url( \"post.php?action=delete&amp;post=$attachment_id\", 'delete-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='delete-permanently'>\" . __( 'Delete Permanently' ) . '</a>';\n\t\t} elseif ( !MEDIA_TRASH ) {\n\t\t\t$delete = \"<a href='#' class='del-link' onclick=\\\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\\\">\" . __( 'Delete' ) . \"</a>\n\t\t\t <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>\" .\n\t\t\t /* translators: %s: file name */\n\t\t\t'<p>' . sprintf( __( 'You are about to delete %s.' ), '<strong>' . $filename . '</strong>' ) . \"</p>\n\t\t\t <a href='\" . wp_nonce_url( \"post.php?action=delete&amp;post=$attachment_id\", 'delete-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='button'>\" . __( 'Continue' ) . \"</a>\n\t\t\t <a href='#' class='button' onclick=\\\"this.parentNode.style.display='none';return false;\\\">\" . __( 'Cancel' ) . \"</a>\n\t\t\t </div>\";\n\t\t} else {\n\t\t\t$delete = \"<a href='\" . wp_nonce_url( \"post.php?action=trash&amp;post=$attachment_id\", 'trash-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='delete'>\" . __( 'Move to Trash' ) . \"</a>\n\t\t\t<a href='\" . wp_nonce_url( \"post.php?action=untrash&amp;post=$attachment_id\", 'untrash-post_' . $attachment_id ) . \"' id='undo[$attachment_id]' class='undo hidden'>\" . __( 'Undo' ) . \"</a>\";\n\t\t}\n\t} else {\n\t\t$delete = '';\n\t}\n\n\t$thumbnail = '';\n\t$calling_post_id = 0;\n\tif ( isset( $_GET['post_id'] ) ) {\n\t\t$calling_post_id = absint( $_GET['post_id'] );\n\t} elseif ( isset( $_POST ) && count( $_POST ) ) {// Like for async-upload where $_GET['post_id'] isn't set\n\t\t$calling_post_id = $post->post_parent;\n\t}\n\tif ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) )\n\t\t&& post_type_supports( get_post_type( $calling_post_id ), 'thumbnail' ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {\n\n\t\t$calling_post = get_post( $calling_post_id );\n\t\t$calling_post_type_object = get_post_type_object( $calling_post->post_type );\n\n\t\t$ajax_nonce = wp_create_nonce( \"set_post_thumbnail-$calling_post_id\" );\n\t\t$thumbnail = \"<a class='wp-post-thumbnail' id='wp-post-thumbnail-\" . $attachment_id . \"' href='#' onclick='WPSetAsThumbnail(\\\"$attachment_id\\\", \\\"$ajax_nonce\\\");return false;'>\" . esc_html( $calling_post_type_object->labels->use_featured_image ) . \"</a>\";\n\t}\n\n\tif ( ( $r['send'] || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) ) {\n\t\t$form_fields['buttons'] = array( 'tr' => \"\\t\\t<tr class='submit'><td></td><td class='savesend'>\" . $r['send'] . \" $thumbnail $delete</td></tr>\\n\" );\n\t}\n\t$hidden_fields = array();\n\n\tforeach ( $form_fields as $id => $field ) {\n\t\tif ( $id[0] == '_' )\n\t\t\tcontinue;\n\n\t\tif ( !empty( $field['tr'] ) ) {\n\t\t\t$item .= $field['tr'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$field = array_merge( $defaults, $field );\n\t\t$name = \"attachments[$attachment_id][$id]\";\n\n\t\tif ( $field['input'] == 'hidden' ) {\n\t\t\t$hidden_fields[$name] = $field['value'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$required      = $field['required'] ? '<span class=\"required\">*</span>' : '';\n\t\t$required_attr = $field['required'] ? ' required' : '';\n\t\t$aria_required = $field['required'] ? \" aria-required='true'\" : '';\n\t\t$class  = $id;\n\t\t$class .= $field['required'] ? ' form-required' : '';\n\n\t\t$item .= \"\\t\\t<tr class='$class'>\\n\\t\\t\\t<th scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}{$required}</span><br class='clear' /></label></th>\\n\\t\\t\\t<td class='field'>\";\n\t\tif ( !empty( $field[ $field['input'] ] ) )\n\t\t\t$item .= $field[ $field['input'] ];\n\t\telseif ( $field['input'] == 'textarea' ) {\n\t\t\tif ( 'post_content' == $id && user_can_richedit() ) {\n\t\t\t\t// Sanitize_post() skips the post_content when user_can_richedit.\n\t\t\t\t$field['value'] = htmlspecialchars( $field['value'], ENT_QUOTES );\n\t\t\t}\n\t\t\t// Post_excerpt is already escaped by sanitize_post() in get_attachment_fields_to_edit().\n\t\t\t$item .= \"<textarea id='$name' name='$name'{$required_attr}{$aria_required}>\" . $field['value'] . '</textarea>';\n\t\t} else {\n\t\t\t$item .= \"<input type='text' class='text' id='$name' name='$name' value='\" . esc_attr( $field['value'] ) . \"'{$required_attr}{$aria_required} />\";\n\t\t}\n\t\tif ( !empty( $field['helps'] ) )\n\t\t\t$item .= \"<p class='help'>\" . join( \"</p>\\n<p class='help'>\", array_unique( (array) $field['helps'] ) ) . '</p>';\n\t\t$item .= \"</td>\\n\\t\\t</tr>\\n\";\n\n\t\t$extra_rows = array();\n\n\t\tif ( !empty( $field['errors'] ) )\n\t\t\tforeach ( array_unique( (array) $field['errors'] ) as $error )\n\t\t\t\t$extra_rows['error'][] = $error;\n\n\t\tif ( !empty( $field['extra_rows'] ) )\n\t\t\tforeach ( $field['extra_rows'] as $class => $rows )\n\t\t\t\tforeach ( (array) $rows as $html )\n\t\t\t\t\t$extra_rows[$class][] = $html;\n\n\t\tforeach ( $extra_rows as $class => $rows )\n\t\t\tforeach ( $rows as $html )\n\t\t\t\t$item .= \"\\t\\t<tr><td></td><td class='$class'>$html</td></tr>\\n\";\n\t}\n\n\tif ( !empty( $form_fields['_final'] ) )\n\t\t$item .= \"\\t\\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\\n\";\n\t$item .= \"\\t</tbody>\\n\";\n\t$item .= \"\\t</table>\\n\";\n\n\tforeach ( $hidden_fields as $name => $value )\n\t\t$item .= \"\\t<input type='hidden' name='$name' id='$name' value='\" . esc_attr( $value ) . \"' />\\n\";\n\n\tif ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {\n\t\t$parent = (int) $_REQUEST['post_id'];\n\t\t$parent_name = \"attachments[$attachment_id][post_parent]\";\n\t\t$item .= \"\\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\\n\";\n\t}\n\n\treturn $item;\n}\n\n/**\n * @since 3.5.0\n *\n * @param int   $attachment_id\n * @param array $args\n * @return array\n */\nfunction get_compat_media_markup( $attachment_id, $args = null ) {\n\t$post = get_post( $attachment_id );\n\n\t$default_args = array(\n\t\t'errors' => null,\n\t\t'in_modal' => false,\n\t);\n\n\t$user_can_edit = current_user_can( 'edit_post', $attachment_id );\n\n\t$args = wp_parse_args( $args, $default_args );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$args = apply_filters( 'get_media_item_args', $args );\n\n\t$form_fields = array();\n\n\tif ( $args['in_modal'] ) {\n\t\tforeach ( get_attachment_taxonomies($post) as $taxonomy ) {\n\t\t\t$t = (array) get_taxonomy($taxonomy);\n\t\t\tif ( ! $t['public'] || ! $t['show_ui'] )\n\t\t\t\tcontinue;\n\t\t\tif ( empty($t['label']) )\n\t\t\t\t$t['label'] = $taxonomy;\n\t\t\tif ( empty($t['args']) )\n\t\t\t\t$t['args'] = array();\n\n\t\t\t$terms = get_object_term_cache($post->ID, $taxonomy);\n\t\t\tif ( false === $terms )\n\t\t\t\t$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);\n\n\t\t\t$values = array();\n\n\t\t\tforeach ( $terms as $term )\n\t\t\t\t$values[] = $term->slug;\n\t\t\t$t['value'] = join(', ', $values);\n\t\t\t$t['taxonomy'] = true;\n\n\t\t\t$form_fields[$taxonomy] = $t;\n\t\t}\n\t}\n\n\t// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default\n\t// The recursive merge is easily traversed with array casting: foreach ( (array) $things as $thing )\n\t$form_fields = array_merge_recursive($form_fields, (array) $args['errors'] );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_fields = apply_filters( 'attachment_fields_to_edit', $form_fields, $post );\n\n\tunset( $form_fields['image-size'], $form_fields['align'], $form_fields['image_alt'],\n\t\t$form_fields['post_title'], $form_fields['post_excerpt'], $form_fields['post_content'],\n\t\t$form_fields['url'], $form_fields['menu_order'], $form_fields['image_url'] );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$media_meta = apply_filters( 'media_meta', '', $post );\n\n\t$defaults = array(\n\t\t'input'         => 'text',\n\t\t'required'      => false,\n\t\t'value'         => '',\n\t\t'extra_rows'    => array(),\n\t\t'show_in_edit'  => true,\n\t\t'show_in_modal' => true,\n\t);\n\n\t$hidden_fields = array();\n\n\t$item = '';\n\tforeach ( $form_fields as $id => $field ) {\n\t\tif ( $id[0] == '_' )\n\t\t\tcontinue;\n\n\t\t$name = \"attachments[$attachment_id][$id]\";\n\t\t$id_attr = \"attachments-$attachment_id-$id\";\n\n\t\tif ( !empty( $field['tr'] ) ) {\n\t\t\t$item .= $field['tr'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$field = array_merge( $defaults, $field );\n\n\t\tif ( ( ! $field['show_in_edit'] && ! $args['in_modal'] ) || ( ! $field['show_in_modal'] && $args['in_modal'] ) )\n\t\t\tcontinue;\n\n\t\tif ( $field['input'] == 'hidden' ) {\n\t\t\t$hidden_fields[$name] = $field['value'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$readonly      = ! $user_can_edit && ! empty( $field['taxonomy'] ) ? \" readonly='readonly' \" : '';\n\t\t$required      = $field['required'] ? '<span class=\"required\">*</span>' : '';\n\t\t$required_attr = $field['required'] ? ' required' : '';\n\t\t$aria_required = $field['required'] ? \" aria-required='true'\" : '';\n\t\t$class  = 'compat-field-' . $id;\n\t\t$class .= $field['required'] ? ' form-required' : '';\n\n\t\t$item .= \"\\t\\t<tr class='$class'>\";\n\t\t$item .= \"\\t\\t\\t<th scope='row' class='label'><label for='$id_attr'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label>\";\n\t\t$item .= \"</th>\\n\\t\\t\\t<td class='field'>\";\n\n\t\tif ( !empty( $field[ $field['input'] ] ) )\n\t\t\t$item .= $field[ $field['input'] ];\n\t\telseif ( $field['input'] == 'textarea' ) {\n\t\t\tif ( 'post_content' == $id && user_can_richedit() ) {\n\t\t\t\t// sanitize_post() skips the post_content when user_can_richedit.\n\t\t\t\t$field['value'] = htmlspecialchars( $field['value'], ENT_QUOTES );\n\t\t\t}\n\t\t\t$item .= \"<textarea id='$id_attr' name='$name'{$required_attr}{$aria_required}>\" . $field['value'] . '</textarea>';\n\t\t} else {\n\t\t\t$item .= \"<input type='text' class='text' id='$id_attr' name='$name' value='\" . esc_attr( $field['value'] ) . \"' $readonly{$required_attr}{$aria_required} />\";\n\t\t}\n\t\tif ( !empty( $field['helps'] ) )\n\t\t\t$item .= \"<p class='help'>\" . join( \"</p>\\n<p class='help'>\", array_unique( (array) $field['helps'] ) ) . '</p>';\n\t\t$item .= \"</td>\\n\\t\\t</tr>\\n\";\n\n\t\t$extra_rows = array();\n\n\t\tif ( !empty( $field['errors'] ) )\n\t\t\tforeach ( array_unique( (array) $field['errors'] ) as $error )\n\t\t\t\t$extra_rows['error'][] = $error;\n\n\t\tif ( !empty( $field['extra_rows'] ) )\n\t\t\tforeach ( $field['extra_rows'] as $class => $rows )\n\t\t\t\tforeach ( (array) $rows as $html )\n\t\t\t\t\t$extra_rows[$class][] = $html;\n\n\t\tforeach ( $extra_rows as $class => $rows )\n\t\t\tforeach ( $rows as $html )\n\t\t\t\t$item .= \"\\t\\t<tr><td></td><td class='$class'>$html</td></tr>\\n\";\n\t}\n\n\tif ( !empty( $form_fields['_final'] ) )\n\t\t$item .= \"\\t\\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\\n\";\n\n\tif ( $item ) {\n\t\t$item = '<p class=\"media-types media-types-required-info\">' .\n\t\t\tsprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . '</p>\n\t\t\t<table class=\"compat-attachment-fields\">' . $item . '</table>';\n\t}\n\n\tforeach ( $hidden_fields as $hidden_field => $value ) {\n\t\t$item .= '<input type=\"hidden\" name=\"' . esc_attr( $hidden_field ) . '\" value=\"' . esc_attr( $value ) . '\" />' . \"\\n\";\n\t}\n\n\tif ( $item )\n\t\t$item = '<input type=\"hidden\" name=\"attachments[' . $attachment_id . '][menu_order]\" value=\"' . esc_attr( $post->menu_order ) . '\" />' . $item;\n\n\treturn array(\n\t\t'item'   => $item,\n\t\t'meta'   => $media_meta,\n\t);\n}\n\n/**\n * Outputs the legacy media upload header.\n *\n * @since 2.5.0\n */\nfunction media_upload_header() {\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\techo '<script type=\"text/javascript\">post_id = ' . $post_id . ';</script>';\n\tif ( empty( $_GET['chromeless'] ) ) {\n\t\techo '<div id=\"media-upload-header\">';\n\t\tthe_media_upload_tabs();\n\t\techo '</div>';\n\t}\n}\n\n/**\n * Outputs the legacy media upload form.\n *\n * @since 2.5.0\n *\n * @global string $type\n * @global string $tab\n * @global bool   $is_IE\n * @global bool   $is_opera\n *\n * @param array $errors\n */\nfunction media_upload_form( $errors = null ) {\n\tglobal $type, $tab, $is_IE, $is_opera;\n\n\tif ( ! _device_can_upload() ) {\n\t\techo '<p>' . sprintf( __('The web browser on your device cannot be used to upload files. You may be able to use the <a href=\"%s\">native app for your device</a> instead.'), 'https://apps.wordpress.org/' ) . '</p>';\n\t\treturn;\n\t}\n\n\t$upload_action_url = admin_url('async-upload.php');\n\t$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;\n\t$_type = isset($type) ? $type : '';\n\t$_tab = isset($tab) ? $tab : '';\n\n\t$max_upload_size = wp_max_upload_size();\n\tif ( ! $max_upload_size ) {\n\t\t$max_upload_size = 0;\n\t}\n?>\n\n<div id=\"media-upload-notice\"><?php\n\n\tif (isset($errors['upload_notice']) )\n\t\techo $errors['upload_notice'];\n\n?></div>\n<div id=\"media-upload-error\"><?php\n\n\tif (isset($errors['upload_error']) && is_wp_error($errors['upload_error']))\n\t\techo $errors['upload_error']->get_error_message();\n\n?></div>\n<?php\nif ( is_multisite() && !is_upload_space_available() ) {\n\t/**\n\t * Fires when an upload will exceed the defined upload space quota for a network site.\n\t *\n\t * @since 3.5.0\n\t */\n\tdo_action( 'upload_ui_over_quota' );\n\treturn;\n}\n\n/**\n * Fires just before the legacy (pre-3.5.0) upload interface is loaded.\n *\n * @since 2.6.0\n */\ndo_action( 'pre-upload-ui' );\n\n$post_params = array(\n\t\"post_id\" => $post_id,\n\t\"_wpnonce\" => wp_create_nonce('media-form'),\n\t\"type\" => $_type,\n\t\"tab\" => $_tab,\n\t\"short\" => \"1\",\n);\n\n/**\n * Filters the media upload post parameters.\n *\n * @since 3.1.0 As 'swfupload_post_params'\n * @since 3.3.0\n *\n * @param array $post_params An array of media upload parameters used by Plupload.\n */\n$post_params = apply_filters( 'upload_post_params', $post_params );\n\n$plupload_init = array(\n\t'runtimes'            => 'html5,flash,silverlight,html4',\n\t'browse_button'       => 'plupload-browse-button',\n\t'container'           => 'plupload-upload-ui',\n\t'drop_element'        => 'drag-drop-area',\n\t'file_data_name'      => 'async-upload',\n\t'url'                 => $upload_action_url,\n\t'flash_swf_url'       => includes_url( 'js/plupload/plupload.flash.swf' ),\n\t'silverlight_xap_url' => includes_url( 'js/plupload/plupload.silverlight.xap' ),\n\t'filters' => array(\n\t\t'max_file_size'   => $max_upload_size . 'b',\n\t),\n\t'multipart_params'    => $post_params,\n);\n\n// Currently only iOS Safari supports multiple files uploading but iOS 7.x has a bug that prevents uploading of videos\n// when enabled. See #29602.\nif ( wp_is_mobile() && strpos( $_SERVER['HTTP_USER_AGENT'], 'OS 7_' ) !== false &&\n\tstrpos( $_SERVER['HTTP_USER_AGENT'], 'like Mac OS X' ) !== false ) {\n\n\t$plupload_init['multi_selection'] = false;\n}\n\n/**\n * Filters the default Plupload settings.\n *\n * @since 3.3.0\n *\n * @param array $plupload_init An array of default settings used by Plupload.\n */\n$plupload_init = apply_filters( 'plupload_init', $plupload_init );\n\n?>\n\n<script type=\"text/javascript\">\n<?php\n// Verify size is an int. If not return default value.\n$large_size_h = absint( get_option('large_size_h') );\nif( !$large_size_h )\n\t$large_size_h = 1024;\n$large_size_w = absint( get_option('large_size_w') );\nif( !$large_size_w )\n\t$large_size_w = 1024;\n?>\nvar resize_height = <?php echo $large_size_h; ?>, resize_width = <?php echo $large_size_w; ?>,\nwpUploaderInit = <?php echo wp_json_encode( $plupload_init ); ?>;\n</script>\n\n<div id=\"plupload-upload-ui\" class=\"hide-if-no-js\">\n<?php\n/**\n * Fires before the upload interface loads.\n *\n * @since 2.6.0 As 'pre-flash-upload-ui'\n * @since 3.3.0\n */\ndo_action( 'pre-plupload-upload-ui' ); ?>\n<div id=\"drag-drop-area\">\n\t<div class=\"drag-drop-inside\">\n\t<p class=\"drag-drop-info\"><?php _e('Drop files here'); ?></p>\n\t<p><?php _ex('or', 'Uploader: Drop files here - or - Select Files'); ?></p>\n\t<p class=\"drag-drop-buttons\"><input id=\"plupload-browse-button\" type=\"button\" value=\"<?php esc_attr_e('Select Files'); ?>\" class=\"button\" /></p>\n\t</div>\n</div>\n<?php\n/**\n * Fires after the upload interface loads.\n *\n * @since 2.6.0 As 'post-flash-upload-ui'\n * @since 3.3.0\n */\ndo_action( 'post-plupload-upload-ui' ); ?>\n</div>\n\n<div id=\"html-upload-ui\" class=\"hide-if-js\">\n\t<?php\n\t/**\n\t * Fires before the upload button in the media upload interface.\n\t *\n\t * @since 2.6.0\n\t */\n\tdo_action( 'pre-html-upload-ui' );\n\t?>\n\t<p id=\"async-upload-wrap\">\n\t\t<label class=\"screen-reader-text\" for=\"async-upload\"><?php _e('Upload'); ?></label>\n\t\t<input type=\"file\" name=\"async-upload\" id=\"async-upload\" />\n\t\t<?php submit_button( __( 'Upload' ), 'primary', 'html-upload', false ); ?>\n\t\t<a href=\"#\" onclick=\"try{top.tb_remove();}catch(e){}; return false;\"><?php _e('Cancel'); ?></a>\n\t</p>\n\t<div class=\"clear\"></div>\n<?php\n/**\n * Fires after the upload button in the media upload interface.\n *\n * @since 2.6.0\n */\ndo_action( 'post-html-upload-ui' );\n?>\n</div>\n\n<p class=\"max-upload-size\"><?php printf( __( 'Maximum upload file size: %s.' ), esc_html( size_format( $max_upload_size ) ) ); ?></p>\n<?php\n\n\t/**\n\t * Fires on the post upload UI screen.\n\t *\n\t * Legacy (pre-3.5.0) media workflow hook.\n\t *\n\t * @since 2.6.0\n\t */\n\tdo_action( 'post-upload-ui' );\n}\n\n/**\n * Outputs the legacy media upload form for a given media type.\n *\n * @since 2.5.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n */\nfunction media_upload_type_form($type = 'file', $errors = null, $id = null) {\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=type&post_id=$post_id\");\n\n\t/**\n\t * Filters the media upload form action URL.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $form_action_url The media upload form action URL.\n\t * @param string $type            The type of media. Default 'file'.\n\t */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form type-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"<?php echo $type; ?>-form\">\n<?php submit_button( '', 'hidden', 'save', false ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<?php wp_nonce_field('media-form'); ?>\n\n<h3 class=\"media-title\"><?php _e('Add media files from your computer'); ?></h3>\n\n<?php media_upload_form( $errors ); ?>\n\n<script type=\"text/javascript\">\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t}\n\tupdateMediaForm();\n});\n</script>\n<div id=\"media-items\"><?php\n\nif ( $id ) {\n\tif ( !is_wp_error($id) ) {\n\t\tadd_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);\n\t\techo get_media_items( $id, $errors );\n\t} else {\n\t\techo '<div id=\"media-upload-error\">'.esc_html($id->get_error_message()).'</div></div>';\n\t\texit;\n\t}\n}\n?></div>\n\n<p class=\"savebutton ml-submit\">\n<?php submit_button( __( 'Save all changes' ), '', 'save', false ); ?>\n</p>\n</form>\n<?php\n}\n\n/**\n * Outputs the legacy media upload form for external media.\n *\n * @since 2.7.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n */\nfunction media_upload_type_url_form($type = null, $errors = null, $id = null) {\n\tif ( null === $type )\n\t\t$type = 'image';\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=type&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form type-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"<?php echo $type; ?>-form\">\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<?php wp_nonce_field('media-form'); ?>\n\n<h3 class=\"media-title\"><?php _e('Insert media from another website'); ?></h3>\n\n<script type=\"text/javascript\">\nvar addExtImage = {\n\n\twidth : '',\n\theight : '',\n\talign : 'alignnone',\n\n\tinsert : function() {\n\t\tvar t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';\n\n\t\tif ( '' == f.src.value || '' == t.width )\n\t\t\treturn false;\n\n\t\tif ( f.alt.value )\n\t\t\talt = f.alt.value.replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n<?php\n\t/** This filter is documented in wp-admin/includes/media.php */\n\tif ( ! apply_filters( 'disable_captions', '' ) ) {\n\t\t?>\n\t\tif ( f.caption.value ) {\n\t\t\tcaption = f.caption.value.replace(/\\r\\n|\\r/g, '\\n');\n\t\t\tcaption = caption.replace(/<[a-zA-Z0-9]+( [^<>]+)?>/g, function(a){\n\t\t\t\treturn a.replace(/[\\r\\n\\t]+/, ' ');\n\t\t\t});\n\n\t\t\tcaption = caption.replace(/\\s*\\n\\s*/g, '<br />');\n\t\t}\n<?php } ?>\n\n\t\tcls = caption ? '' : ' class=\"'+t.align+'\"';\n\n\t\thtml = '<img alt=\"'+alt+'\" src=\"'+f.src.value+'\"'+cls+' width=\"'+t.width+'\" height=\"'+t.height+'\" />';\n\n\t\tif ( f.url.value ) {\n\t\t\turl = f.url.value.replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\t\thtml = '<a href=\"'+url+'\">'+html+'</a>';\n\t\t}\n\n\t\tif ( caption )\n\t\t\thtml = '[caption id=\"\" align=\"'+t.align+'\" width=\"'+t.width+'\"]'+html+caption+'[/caption]';\n\n\t\tvar win = window.dialogArguments || opener || parent || top;\n\t\twin.send_to_editor(html);\n\t\treturn false;\n\t},\n\n\tresetImageData : function() {\n\t\tvar t = addExtImage;\n\n\t\tt.width = t.height = '';\n\t\tdocument.getElementById('go_button').style.color = '#bbb';\n\t\tif ( ! document.forms[0].src.value )\n\t\t\tdocument.getElementById('status_img').innerHTML = '';\n\t\telse document.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>\" alt=\"\" />';\n\t},\n\n\tupdateImageData : function() {\n\t\tvar t = addExtImage;\n\n\t\tt.width = t.preloadImg.width;\n\t\tt.height = t.preloadImg.height;\n\t\tdocument.getElementById('go_button').style.color = '#333';\n\t\tdocument.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>\" alt=\"\" />';\n\t},\n\n\tgetImageData : function() {\n\t\tif ( jQuery('table.describe').hasClass('not-image') )\n\t\t\treturn;\n\n\t\tvar t = addExtImage, src = document.forms[0].src.value;\n\n\t\tif ( ! src ) {\n\t\t\tt.resetImageData();\n\t\t\treturn false;\n\t\t}\n\n\t\tdocument.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/spinner-2x.gif' ) ); ?>\" alt=\"\" width=\"16\" height=\"16\" />';\n\t\tt.preloadImg = new Image();\n\t\tt.preloadImg.onload = t.updateImageData;\n\t\tt.preloadImg.onerror = t.resetImageData;\n\t\tt.preloadImg.src = src;\n\t}\n};\n\njQuery(document).ready( function($) {\n\t$('.media-types input').click( function() {\n\t\t$('table.describe').toggleClass('not-image', $('#not-image').prop('checked') );\n\t});\n});\n</script>\n\n<div id=\"media-items\">\n<div class=\"media-item media-blank\">\n<?php\n/**\n * Filters the insert media from URL form HTML.\n *\n * @since 3.3.0\n *\n * @param string $form_html The insert from URL form HTML.\n */\necho apply_filters( 'type_url_form_media', wp_media_insert_url_form( $type ) );\n?>\n</div>\n</div>\n</form>\n<?php\n}\n\n/**\n * Adds gallery form to upload iframe\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n * @global string $type\n * @global string $tab\n *\n * @param array $errors\n */\nfunction media_upload_gallery_form($errors) {\n\tglobal $redir_tab, $type;\n\n\t$redir_tab = 'gallery';\n\tmedia_upload_header();\n\n\t$post_id = intval($_REQUEST['post_id']);\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=gallery&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<script type=\"text/javascript\">\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t\tupdateMediaForm();\n\t}\n});\n</script>\n<div id=\"sort-buttons\" class=\"hide-if-no-js\">\n<span>\n<?php _e('All Tabs:'); ?>\n<a href=\"#\" id=\"showall\"><?php _e('Show'); ?></a>\n<a href=\"#\" id=\"hideall\" style=\"display:none;\"><?php _e('Hide'); ?></a>\n</span>\n<?php _e('Sort Order:'); ?>\n<a href=\"#\" id=\"asc\"><?php _e('Ascending'); ?></a> |\n<a href=\"#\" id=\"desc\"><?php _e('Descending'); ?></a> |\n<a href=\"#\" id=\"clear\"><?php _ex('Clear', 'verb'); ?></a>\n</div>\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"gallery-form\">\n<?php wp_nonce_field('media-form'); ?>\n<?php //media_upload_form( $errors ); ?>\n<table class=\"widefat\">\n<thead><tr>\n<th><?php _e('Media'); ?></th>\n<th class=\"order-head\"><?php _e('Order'); ?></th>\n<th class=\"actions-head\"><?php _e('Actions'); ?></th>\n</tr></thead>\n</table>\n<div id=\"media-items\">\n<?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?>\n<?php echo get_media_items($post_id, $errors); ?>\n</div>\n\n<p class=\"ml-submit\">\n<?php submit_button( __( 'Save all changes' ), 'savebutton', 'save', false, array( 'id' => 'save-all', 'style' => 'display: none;' ) ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<input type=\"hidden\" name=\"type\" value=\"<?php echo esc_attr( $GLOBALS['type'] ); ?>\" />\n<input type=\"hidden\" name=\"tab\" value=\"<?php echo esc_attr( $GLOBALS['tab'] ); ?>\" />\n</p>\n\n<div id=\"gallery-settings\" style=\"display:none;\">\n<div class=\"title\"><?php _e('Gallery Settings'); ?></div>\n<table id=\"basic\" class=\"describe\"><tbody>\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Link thumbnails to:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<input type=\"radio\" name=\"linkto\" id=\"linkto-file\" value=\"file\" />\n\t\t<label for=\"linkto-file\" class=\"radio\"><?php _e('Image File'); ?></label>\n\n\t\t<input type=\"radio\" checked=\"checked\" name=\"linkto\" id=\"linkto-post\" value=\"post\" />\n\t\t<label for=\"linkto-post\" class=\"radio\"><?php _e('Attachment Page'); ?></label>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Order images by:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<select id=\"orderby\" name=\"orderby\">\n\t\t\t<option value=\"menu_order\" selected=\"selected\"><?php _e('Menu order'); ?></option>\n\t\t\t<option value=\"title\"><?php _e('Title'); ?></option>\n\t\t\t<option value=\"post_date\"><?php _e('Date/Time'); ?></option>\n\t\t\t<option value=\"rand\"><?php _e('Random'); ?></option>\n\t\t</select>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Order:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<input type=\"radio\" checked=\"checked\" name=\"order\" id=\"order-asc\" value=\"asc\" />\n\t\t<label for=\"order-asc\" class=\"radio\"><?php _e('Ascending'); ?></label>\n\n\t\t<input type=\"radio\" name=\"order\" id=\"order-desc\" value=\"desc\" />\n\t\t<label for=\"order-desc\" class=\"radio\"><?php _e('Descending'); ?></label>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Gallery columns:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<select id=\"columns\" name=\"columns\">\n\t\t\t<option value=\"1\">1</option>\n\t\t\t<option value=\"2\">2</option>\n\t\t\t<option value=\"3\" selected=\"selected\">3</option>\n\t\t\t<option value=\"4\">4</option>\n\t\t\t<option value=\"5\">5</option>\n\t\t\t<option value=\"6\">6</option>\n\t\t\t<option value=\"7\">7</option>\n\t\t\t<option value=\"8\">8</option>\n\t\t\t<option value=\"9\">9</option>\n\t\t</select>\n\t</td>\n\t</tr>\n</tbody></table>\n\n<p class=\"ml-submit\">\n<input type=\"button\" class=\"button\" style=\"display:none;\" onMouseDown=\"wpgallery.update();\" name=\"insert-gallery\" id=\"insert-gallery\" value=\"<?php esc_attr_e( 'Insert gallery' ); ?>\" />\n<input type=\"button\" class=\"button\" style=\"display:none;\" onMouseDown=\"wpgallery.update();\" name=\"update-gallery\" id=\"update-gallery\" value=\"<?php esc_attr_e( 'Update gallery settings' ); ?>\" />\n</p>\n</div>\n</form>\n<?php\n}\n\n/**\n * Outputs the legacy media upload form for the media library.\n *\n * @since 2.5.0\n *\n * @global wpdb      $wpdb\n * @global WP_Query  $wp_query\n * @global WP_Locale $wp_locale\n * @global string    $type\n * @global string    $tab\n * @global array     $post_mime_types\n *\n * @param array $errors\n */\nfunction media_upload_library_form($errors) {\n\tglobal $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=library&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n\n\t$q = $_GET;\n\t$q['posts_per_page'] = 10;\n\t$q['paged'] = isset( $q['paged'] ) ? intval( $q['paged'] ) : 0;\n\tif ( $q['paged'] < 1 ) {\n\t\t$q['paged'] = 1;\n\t}\n\t$q['offset'] = ( $q['paged'] - 1 ) * 10;\n\tif ( $q['offset'] < 1 ) {\n\t\t$q['offset'] = 0;\n\t}\n\n\tlist($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query( $q );\n\n?>\n\n<form id=\"filter\" method=\"get\">\n<input type=\"hidden\" name=\"type\" value=\"<?php echo esc_attr( $type ); ?>\" />\n<input type=\"hidden\" name=\"tab\" value=\"<?php echo esc_attr( $tab ); ?>\" />\n<input type=\"hidden\" name=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<input type=\"hidden\" name=\"post_mime_type\" value=\"<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>\" />\n<input type=\"hidden\" name=\"context\" value=\"<?php echo isset( $_GET['context'] ) ? esc_attr( $_GET['context'] ) : ''; ?>\" />\n\n<p id=\"media-search\" class=\"search-box\">\n\t<label class=\"screen-reader-text\" for=\"media-search-input\"><?php _e('Search Media');?>:</label>\n\t<input type=\"search\" id=\"media-search-input\" name=\"s\" value=\"<?php the_search_query(); ?>\" />\n\t<?php submit_button( __( 'Search Media' ), '', '', false ); ?>\n</p>\n\n<ul class=\"subsubsub\">\n<?php\n$type_links = array();\n$_num_posts = (array) wp_count_attachments();\n$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));\nforeach ( $matches as $_type => $reals )\n\tforeach ( $reals as $real )\n\t\tif ( isset($num_posts[$_type]) )\n\t\t\t$num_posts[$_type] += $_num_posts[$real];\n\t\telse\n\t\t\t$num_posts[$_type] = $_num_posts[$real];\n// If available type specified by media button clicked, filter by that type\nif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {\n\t$_GET['post_mime_type'] = $type;\n\tlist($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();\n}\nif ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )\n\t$class = ' class=\"current\"';\nelse\n\t$class = '';\n$type_links[] = '<li><a href=\"' . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . '\"' . $class . '>' . __('All Types') . '</a>';\nforeach ( $post_mime_types as $mime_type => $label ) {\n\t$class = '';\n\n\tif ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )\n\t\tcontinue;\n\n\tif ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )\n\t\t$class = ' class=\"current\"';\n\n\t$type_links[] = '<li><a href=\"' . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . '\"' . $class . '>' . sprintf( translate_nooped_plural( $label[2], $num_posts[$mime_type] ), '<span id=\"' . $mime_type . '-counter\">' . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';\n}\n/**\n * Filters the media upload mime type list items.\n *\n * Returned values should begin with an `<li>` tag.\n *\n * @since 3.1.0\n *\n * @param array $type_links An array of list items containing mime type link HTML.\n */\necho implode(' | </li>', apply_filters( 'media_upload_mime_type_links', $type_links ) ) . '</li>';\nunset($type_links);\n?>\n</ul>\n\n<div class=\"tablenav\">\n\n<?php\n$page_links = paginate_links( array(\n\t'base' => add_query_arg( 'paged', '%#%' ),\n\t'format' => '',\n\t'prev_text' => __('&laquo;'),\n\t'next_text' => __('&raquo;'),\n\t'total' => ceil($wp_query->found_posts / 10),\n\t'current' => $q['paged'],\n));\n\nif ( $page_links )\n\techo \"<div class='tablenav-pages'>$page_links</div>\";\n?>\n\n<div class=\"alignleft actions\">\n<?php\n\n$arc_query = \"SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC\";\n\n$arc_result = $wpdb->get_results( $arc_query );\n\n$month_count = count($arc_result);\n$selected_month = isset( $_GET['m'] ) ? $_GET['m'] : 0;\n\nif ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?>\n<select name='m'>\n<option<?php selected( $selected_month, 0 ); ?> value='0'><?php _e( 'All dates' ); ?></option>\n<?php\nforeach ($arc_result as $arc_row) {\n\tif ( $arc_row->yyear == 0 )\n\t\tcontinue;\n\t$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );\n\n\tif ( $arc_row->yyear . $arc_row->mmonth == $selected_month )\n\t\t$default = ' selected=\"selected\"';\n\telse\n\t\t$default = '';\n\n\techo \"<option$default value='\" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . \"'>\";\n\techo esc_html( $wp_locale->get_month($arc_row->mmonth) . \" $arc_row->yyear\" );\n\techo \"</option>\\n\";\n}\n?>\n</select>\n<?php } ?>\n\n<?php submit_button( __( 'Filter &#187;' ), '', 'post-query-submit', false ); ?>\n\n</div>\n\n<br class=\"clear\" />\n</div>\n</form>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"library-form\">\n\n<?php wp_nonce_field('media-form'); ?>\n<?php //media_upload_form( $errors ); ?>\n\n<script type=\"text/javascript\">\n<!--\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t\tupdateMediaForm();\n\t}\n});\n-->\n</script>\n\n<div id=\"media-items\">\n<?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?>\n<?php echo get_media_items(null, $errors); ?>\n</div>\n<p class=\"ml-submit\">\n<?php submit_button( __( 'Save all changes' ), 'savebutton', 'save', false ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n</p>\n</form>\n<?php\n}\n\n/**\n * Creates the form for external url\n *\n * @since 2.7.0\n *\n * @param string $default_view\n * @return string the form html\n */\nfunction wp_media_insert_url_form( $default_view = 'image' ) {\n\t/** This filter is documented in wp-admin/includes/media.php */\n\tif ( ! apply_filters( 'disable_captions', '' ) ) {\n\t\t$caption = '\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"caption\"><span class=\"alignleft\">' . __('Image Caption') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><textarea id=\"caption\" name=\"caption\"></textarea></td>\n\t\t</tr>\n';\n\t} else {\n\t\t$caption = '';\n\t}\n\n\t$default_align = get_option('image_default_align');\n\tif ( empty($default_align) )\n\t\t$default_align = 'none';\n\n\tif ( 'image' == $default_view ) {\n\t\t$view = 'image-only';\n\t\t$table_class = '';\n\t} else {\n\t\t$view = $table_class = 'not-image';\n\t}\n\n\treturn '\n\t<p class=\"media-types\"><label><input type=\"radio\" name=\"media_type\" value=\"image\" id=\"image-only\"' . checked( 'image-only', $view, false ) . ' /> ' . __( 'Image' ) . '</label> &nbsp; &nbsp; <label><input type=\"radio\" name=\"media_type\" value=\"generic\" id=\"not-image\"' . checked( 'not-image', $view, false ) . ' /> ' . __( 'Audio, Video, or Other File' ) . '</label></p>\n\t<p class=\"media-types media-types-required-info\">' . sprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . '</p>\n\t<table class=\"describe ' . $table_class . '\"><tbody>\n\t\t<tr>\n\t\t\t<th scope=\"row\" class=\"label\" style=\"width:130px;\">\n\t\t\t\t<label for=\"src\"><span class=\"alignleft\">' . __( 'URL' ) . '</span> <span class=\"required\">*</span></label>\n\t\t\t\t<span class=\"alignright\" id=\"status_img\"></span>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"src\" name=\"src\" value=\"\" type=\"text\" required aria-required=\"true\" onblur=\"addExtImage.getImageData()\" /></td>\n\t\t</tr>\n\n\t\t<tr>\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"title\"><span class=\"alignleft\">' . __( 'Title' ) . '</span> <span class=\"required\">*</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"title\" name=\"title\" value=\"\" type=\"text\" required aria-required=\"true\" /></td>\n\t\t</tr>\n\n\t\t<tr class=\"not-image\"><td></td><td><p class=\"help\">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</p></td></tr>\n\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"alt\"><span class=\"alignleft\">' . __('Alternative Text') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"alt\" name=\"alt\" value=\"\" type=\"text\" aria-required=\"true\" />\n\t\t\t<p class=\"help\">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>\n\t\t</tr>\n\t\t' . $caption . '\n\t\t<tr class=\"align image-only\">\n\t\t\t<th scope=\"row\" class=\"label\"><p><label for=\"align\">' . __('Alignment') . '</label></p></th>\n\t\t\t<td class=\"field\">\n\t\t\t\t<input name=\"align\" id=\"align-none\" value=\"none\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'none' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-none\" class=\"align image-align-none-label\">' . __('None') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-left\" value=\"left\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'left' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-left\" class=\"align image-align-left-label\">' . __('Left') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-center\" value=\"center\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'center' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-center\" class=\"align image-align-center-label\">' . __('Center') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-right\" value=\"right\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'right' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-right\" class=\"align image-align-right-label\">' . __('Right') . '</label>\n\t\t\t</td>\n\t\t</tr>\n\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"url\"><span class=\"alignleft\">' . __('Link Image To:') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"url\" name=\"url\" value=\"\" type=\"text\" /><br />\n\n\t\t\t<button type=\"button\" class=\"button\" value=\"\" onclick=\"document.forms[0].url.value=null\">' . __('None') . '</button>\n\t\t\t<button type=\"button\" class=\"button\" value=\"\" onclick=\"document.forms[0].url.value=document.forms[0].src.value\">' . __('Link to image') . '</button>\n\t\t\t<p class=\"help\">' . __('Enter a link URL or click above for presets.') . '</p></td>\n\t\t</tr>\n\t\t<tr class=\"image-only\">\n\t\t\t<td></td>\n\t\t\t<td>\n\t\t\t\t<input type=\"button\" class=\"button\" id=\"go_button\" style=\"color:#bbb;\" onclick=\"addExtImage.insert()\" value=\"' . esc_attr__('Insert into Post') . '\" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr class=\"not-image\">\n\t\t\t<td></td>\n\t\t\t<td>\n\t\t\t\t' . get_submit_button( __( 'Insert into Post' ), '', 'insertonlybutton', false ) . '\n\t\t\t</td>\n\t\t</tr>\n\t</tbody></table>\n';\n\n}\n\n/**\n * Displays the multi-file uploader message.\n *\n * @since 2.6.0\n *\n * @global int $post_ID\n */\nfunction media_upload_flash_bypass() {\n\t$browser_uploader = admin_url( 'media-new.php?browser-uploader' );\n\n\tif ( $post = get_post() )\n\t\t$browser_uploader .= '&amp;post_id=' . intval( $post->ID );\n\telseif ( ! empty( $GLOBALS['post_ID'] ) )\n\t\t$browser_uploader .= '&amp;post_id=' . intval( $GLOBALS['post_ID'] );\n\n\t?>\n\t<p class=\"upload-flash-bypass\">\n\t<?php printf( __( 'You are using the multi-file uploader. Problems? Try the <a href=\"%1$s\" target=\"%2$s\">browser uploader</a> instead.' ), $browser_uploader, '_blank' ); ?>\n\t</p>\n\t<?php\n}\n\n/**\n * Displays the browser's built-in uploader message.\n *\n * @since 2.6.0\n */\nfunction media_upload_html_bypass() {\n\t?>\n\t<p class=\"upload-html-bypass hide-if-no-js\">\n\t   <?php _e('You are using the browser&#8217;s built-in file uploader. The WordPress uploader includes multiple file selection and drag and drop capability. <a href=\"#\">Switch to the multi-file uploader</a>.'); ?>\n\t</p>\n\t<?php\n}\n\n/**\n * Used to display a \"After a file has been uploaded...\" help message.\n *\n * @since 3.3.0\n */\nfunction media_upload_text_after() {}\n\n/**\n * Displays the checkbox to scale images.\n *\n * @since 3.3.0\n */\nfunction media_upload_max_image_resize() {\n\t$checked = get_user_setting('upload_resize') ? ' checked=\"true\"' : '';\n\t$a = $end = '';\n\n\tif ( current_user_can( 'manage_options' ) ) {\n\t\t$a = '<a href=\"' . esc_url( admin_url( 'options-media.php' ) ) . '\" target=\"_blank\">';\n\t\t$end = '</a>';\n\t}\n?>\n<p class=\"hide-if-no-js\"><label>\n<input name=\"image_resize\" type=\"checkbox\" id=\"image_resize\" value=\"true\"<?php echo $checked; ?> />\n<?php\n\t/* translators: %1$s is link start tag, %2$s is link end tag, %3$d is width, %4$d is height*/\n\tprintf( __( 'Scale images to match the large size selected in %1$simage options%2$s (%3$d &times; %4$d).' ), $a, $end, (int) get_option( 'large_size_w', '1024' ), (int) get_option( 'large_size_h', '1024' ) );\n?>\n</label></p>\n<?php\n}\n\n/**\n * Displays the out of storage quota message in Multisite.\n *\n * @since 3.5.0\n */\nfunction multisite_over_quota_message() {\n\techo '<p>' . sprintf( __( 'Sorry, you have used all of your storage quota of %s MB.' ), get_space_allowed() ) . '</p>';\n}\n\n/**\n * Displays the image and editor in the post editor\n *\n * @since 3.5.0\n *\n * @param WP_Post $post A post object.\n */\nfunction edit_form_image_editor( $post ) {\n\t$open = isset( $_GET['image-editor'] );\n\tif ( $open )\n\t\trequire_once ABSPATH . 'wp-admin/includes/image-edit.php';\n\n\t$thumb_url = false;\n\tif ( $attachment_id = intval( $post->ID ) )\n\t\t$thumb_url = wp_get_attachment_image_src( $attachment_id, array( 900, 450 ), true );\n\n\t$alt_text = get_post_meta( $post->ID, '_wp_attachment_image_alt', true );\n\n\t$att_url = wp_get_attachment_url( $post->ID ); ?>\n\t<div class=\"wp_attachment_holder wp-clearfix\">\n\t<?php\n\tif ( wp_attachment_is_image( $post->ID ) ) :\n\t\t$image_edit_button = '';\n\t\tif ( wp_image_editor_supports( array( 'mime_type' => $post->post_mime_type ) ) ) {\n\t\t\t$nonce = wp_create_nonce( \"image_editor-$post->ID\" );\n\t\t\t$image_edit_button = \"<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \\\"$nonce\\\" )' class='button' value='\" . esc_attr__( 'Edit Image' ) . \"' /> <span class='spinner'></span>\";\n\t\t}\n\t?>\n\n\t\t<div class=\"imgedit-response\" id=\"imgedit-response-<?php echo $attachment_id; ?>\"></div>\n\n\t\t<div<?php if ( $open ) echo ' style=\"display:none\"'; ?> class=\"wp_attachment_image wp-clearfix\" id=\"media-head-<?php echo $attachment_id; ?>\">\n\t\t\t<p id=\"thumbnail-head-<?php echo $attachment_id; ?>\"><img class=\"thumbnail\" src=\"<?php echo set_url_scheme( $thumb_url[0] ); ?>\" style=\"max-width:100%\" alt=\"\" /></p>\n\t\t\t<p><?php echo $image_edit_button; ?></p>\n\t\t</div>\n\t\t<div<?php if ( ! $open ) echo ' style=\"display:none\"'; ?> class=\"image-editor\" id=\"image-editor-<?php echo $attachment_id; ?>\">\n\t\t\t<?php if ( $open ) wp_image_editor( $attachment_id ); ?>\n\t\t</div>\n\t<?php\n\telseif ( $attachment_id && wp_attachment_is( 'audio', $post ) ):\n\n\t\twp_maybe_generate_attachment_metadata( $post );\n\n\t\techo wp_audio_shortcode( array( 'src' => $att_url ) );\n\n\telseif ( $attachment_id && wp_attachment_is( 'video', $post ) ):\n\n\t\twp_maybe_generate_attachment_metadata( $post );\n\n\t\t$meta = wp_get_attachment_metadata( $attachment_id );\n\t\t$w = ! empty( $meta['width'] ) ? min( $meta['width'], 640 ) : 0;\n\t\t$h = ! empty( $meta['height'] ) ? $meta['height'] : 0;\n\t\tif ( $h && $w < $meta['width'] ) {\n\t\t\t$h = round( ( $meta['height'] * $w ) / $meta['width'] );\n\t\t}\n\n\t\t$attr = array( 'src' => $att_url );\n\t\tif ( ! empty( $w ) && ! empty( $h ) ) {\n\t\t\t$attr['width'] = $w;\n\t\t\t$attr['height'] = $h;\n\t\t}\n\n\t\t$thumb_id = get_post_thumbnail_id( $attachment_id );\n\t\tif ( ! empty( $thumb_id ) ) {\n\t\t\t$attr['poster'] = wp_get_attachment_url( $thumb_id );\n\t\t}\n\n\t\techo wp_video_shortcode( $attr );\n\n\telseif ( isset( $thumb_url[0] ) ):\n\n\t\t?>\n\t\t<div class=\"wp_attachment_image wp-clearfix\" id=\"media-head-<?php echo $attachment_id; ?>\">\n\t\t\t<p id=\"thumbnail-head-<?php echo $attachment_id; ?>\">\n\t\t\t\t<img class=\"thumbnail\" src=\"<?php echo set_url_scheme( $thumb_url[0] ); ?>\" style=\"max-width:100%\" alt=\"\" />\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\n\telse:\n\n\t\t/**\n\t\t * Fires when an attachment type can't be rendered in the edit form.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param WP_Post $post A post object.\n\t\t */\n\t\tdo_action( 'wp_edit_form_attachment_display', $post );\n\n\tendif; ?>\n\t</div>\n\t<div class=\"wp_attachment_details edit-form-section\">\n\t\t<p>\n\t\t\t<label for=\"attachment_caption\"><strong><?php _e( 'Caption' ); ?></strong></label><br />\n\t\t\t<textarea class=\"widefat\" name=\"excerpt\" id=\"attachment_caption\"><?php echo $post->post_excerpt; ?></textarea>\n\t\t</p>\n\n\n\t<?php if ( 'image' === substr( $post->post_mime_type, 0, 5 ) ) : ?>\n\t\t<p>\n\t\t\t<label for=\"attachment_alt\"><strong><?php _e( 'Alternative Text' ); ?></strong></label><br />\n\t\t\t<input type=\"text\" class=\"widefat\" name=\"_wp_attachment_image_alt\" id=\"attachment_alt\" value=\"<?php echo esc_attr( $alt_text ); ?>\" />\n\t\t</p>\n\t<?php endif; ?>\n\n\t<?php\n\t\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\t\t$editor_args = array(\n\t\t\t'textarea_name' => 'content',\n\t\t\t'textarea_rows' => 5,\n\t\t\t'media_buttons' => false,\n\t\t\t'tinymce' => false,\n\t\t\t'quicktags' => $quicktags_settings,\n\t\t);\n\t?>\n\n\t<label for=\"attachment_content\"><strong><?php _e( 'Description' ); ?></strong><?php\n\tif ( preg_match( '#^(audio|video)/#', $post->post_mime_type ) ) {\n\t\techo ': ' . __( 'Displayed on attachment pages.' );\n\t} ?></label>\n\t<?php wp_editor( $post->post_content, 'attachment_content', $editor_args ); ?>\n\n\t</div>\n\t<?php\n\t$extras = get_compat_media_markup( $post->ID );\n\techo $extras['item'];\n\techo '<input type=\"hidden\" id=\"image-edit-context\" value=\"edit-attachment\" />' . \"\\n\";\n}\n\n/**\n * Displays non-editable attachment metadata in the publish meta box.\n *\n * @since 3.5.0\n */\nfunction attachment_submitbox_metadata() {\n\t$post = get_post();\n\n\t$file = get_attached_file( $post->ID );\n\t$filename = esc_html( wp_basename( $file ) );\n\n\t$media_dims = '';\n\t$meta = wp_get_attachment_metadata( $post->ID );\n\tif ( isset( $meta['width'], $meta['height'] ) )\n\t\t$media_dims .= \"<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> \";\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$media_dims = apply_filters( 'media_meta', $media_dims, $post );\n\n\t$att_url = wp_get_attachment_url( $post->ID );\n?>\n\t<div class=\"misc-pub-section misc-pub-attachment\">\n\t\t<label for=\"attachment_url\"><?php _e( 'File URL:' ); ?></label>\n\t\t<input type=\"text\" class=\"widefat urlfield\" readonly=\"readonly\" name=\"attachment_url\" id=\"attachment_url\" value=\"<?php echo esc_attr( $att_url ); ?>\" />\n\t</div>\n\t<div class=\"misc-pub-section misc-pub-filename\">\n\t\t<?php _e( 'File name:' ); ?> <strong><?php echo $filename; ?></strong>\n\t</div>\n\t<div class=\"misc-pub-section misc-pub-filetype\">\n\t\t<?php _e( 'File type:' ); ?> <strong><?php\n\t\t\tif ( preg_match( '/^.*?\\.(\\w+)$/', get_attached_file( $post->ID ), $matches ) ) {\n\t\t\t\techo esc_html( strtoupper( $matches[1] ) );\n\t\t\t\tlist( $mime_type ) = explode( '/', $post->post_mime_type );\n\t\t\t\tif ( $mime_type !== 'image' && ! empty( $meta['mime_type'] ) ) {\n\t\t\t\t\tif ( $meta['mime_type'] !== \"$mime_type/\" . strtolower( $matches[1] ) ) {\n\t\t\t\t\t\techo ' (' . $meta['mime_type'] . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo strtoupper( str_replace( 'image/', '', $post->post_mime_type ) );\n\t\t\t}\n\t\t?></strong>\n\t</div>\n\n\t<?php\n\t\t$file_size = false;\n\n\t\tif ( isset( $meta['filesize'] ) )\n\t\t\t$file_size = $meta['filesize'];\n\t\telseif ( file_exists( $file ) )\n\t\t\t$file_size = filesize( $file );\n\n\t\tif ( ! empty( $file_size ) ) : ?>\n\t\t\t<div class=\"misc-pub-section misc-pub-filesize\">\n\t\t\t\t<?php _e( 'File size:' ); ?> <strong><?php echo size_format( $file_size ); ?></strong>\n\t\t\t</div>\n\t\t\t<?php\n\t\tendif;\n\n\tif ( preg_match( '#^(audio|video)/#', $post->post_mime_type ) ) {\n\n\t\t/**\n\t\t * Filters the audio and video metadata fields to be shown in the publish meta box.\n\t\t *\n\t\t * The key for each item in the array should correspond to an attachment\n\t\t * metadata key, and the value should be the desired label.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param array $fields An array of the attachment metadata keys and labels.\n\t\t */\n\t\t$fields = apply_filters( 'media_submitbox_misc_sections', array(\n\t\t\t'length_formatted' => __( 'Length:' ),\n\t\t\t'bitrate'          => __( 'Bitrate:' ),\n\t\t) );\n\n\t\tforeach ( $fields as $key => $label ) {\n\t\t\tif ( empty( $meta[ $key ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t?>\n\t\t<div class=\"misc-pub-section misc-pub-mime-meta misc-pub-<?php echo sanitize_html_class( $key ); ?>\">\n\t\t\t<?php echo $label ?> <strong><?php\n\t\t\t\tswitch ( $key ) {\n\t\t\t\t\tcase 'bitrate' :\n\t\t\t\t\t\techo round( $meta['bitrate'] / 1000 ) . 'kb/s';\n\t\t\t\t\t\tif ( ! empty( $meta['bitrate_mode'] ) ) {\n\t\t\t\t\t\t\techo ' ' . strtoupper( esc_html( $meta['bitrate_mode'] ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\techo esc_html( $meta[ $key ] );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t?></strong>\n\t\t</div>\n\t<?php\n\t\t}\n\n\t\t/**\n\t\t * Filters the audio attachment metadata fields to be shown in the publish meta box.\n\t\t *\n\t\t * The key for each item in the array should correspond to an attachment\n\t\t * metadata key, and the value should be the desired label.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param array $fields An array of the attachment metadata keys and labels.\n\t\t */\n\t\t$audio_fields = apply_filters( 'audio_submitbox_misc_sections', array(\n\t\t\t'dataformat' => __( 'Audio Format:' ),\n\t\t\t'codec'      => __( 'Audio Codec:' )\n\t\t) );\n\n\t\tforeach ( $audio_fields as $key => $label ) {\n\t\t\tif ( empty( $meta['audio'][ $key ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t?>\n\t\t<div class=\"misc-pub-section misc-pub-audio misc-pub-<?php echo sanitize_html_class( $key ); ?>\">\n\t\t\t<?php echo $label; ?> <strong><?php echo esc_html( $meta['audio'][$key] ); ?></strong>\n\t\t</div>\n\t<?php\n\t\t}\n\n\t}\n\n\tif ( $media_dims ) : ?>\n\t<div class=\"misc-pub-section misc-pub-dimensions\">\n\t\t<?php _e( 'Dimensions:' ); ?> <strong><?php echo $media_dims; ?></strong>\n\t</div>\n<?php\n\tendif;\n}\n\n/**\n * Parse ID3v2, ID3v1, and getID3 comments to extract usable data\n *\n * @since 3.6.0\n *\n * @param array $metadata An existing array with data\n * @param array $data Data supplied by ID3 tags\n */\nfunction wp_add_id3_tag_data( &$metadata, $data ) {\n\tforeach ( array( 'id3v2', 'id3v1' ) as $version ) {\n\t\tif ( ! empty( $data[$version]['comments'] ) ) {\n\t\t\tforeach ( $data[$version]['comments'] as $key => $list ) {\n\t\t\t\tif ( 'length' !== $key && ! empty( $list ) ) {\n\t\t\t\t\t$metadata[$key] = reset( $list );\n\t\t\t\t\t// Fix bug in byte stream analysis.\n\t\t\t\t\tif ( 'terms_of_use' === $key && 0 === strpos( $metadata[$key], 'yright notice.' ) )\n\t\t\t\t\t\t$metadata[$key] = 'Cop' . $metadata[$key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( ! empty( $data['id3v2']['APIC'] ) ) {\n\t\t$image = reset( $data['id3v2']['APIC']);\n\t\tif ( ! empty( $image['data'] ) ) {\n\t\t\t$metadata['image'] = array(\n\t\t\t\t'data' => $image['data'],\n\t\t\t\t'mime' => $image['image_mime'],\n\t\t\t\t'width' => $image['image_width'],\n\t\t\t\t'height' => $image['image_height']\n\t\t\t);\n\t\t}\n\t} elseif ( ! empty( $data['comments']['picture'] ) ) {\n\t\t$image = reset( $data['comments']['picture'] );\n\t\tif ( ! empty( $image['data'] ) ) {\n\t\t\t$metadata['image'] = array(\n\t\t\t\t'data' => $image['data'],\n\t\t\t\t'mime' => $image['image_mime']\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Retrieve metadata from a video file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n */\nfunction wp_read_video_metadata( $file ) {\n\tif ( ! file_exists( $file ) ) {\n\t\treturn false;\n\t}\n\n\t$metadata = array();\n\n\tif ( ! defined( 'GETID3_TEMP_DIR' ) ) {\n\t\tdefine( 'GETID3_TEMP_DIR', get_temp_dir() );\n\t}\n\n\tif ( ! class_exists( 'getID3', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/ID3/getid3.php' );\n\t}\n\t$id3 = new getID3();\n\t$data = $id3->analyze( $file );\n\n\tif ( isset( $data['video']['lossless'] ) )\n\t\t$metadata['lossless'] = $data['video']['lossless'];\n\tif ( ! empty( $data['video']['bitrate'] ) )\n\t\t$metadata['bitrate'] = (int) $data['video']['bitrate'];\n\tif ( ! empty( $data['video']['bitrate_mode'] ) )\n\t\t$metadata['bitrate_mode'] = $data['video']['bitrate_mode'];\n\tif ( ! empty( $data['filesize'] ) )\n\t\t$metadata['filesize'] = (int) $data['filesize'];\n\tif ( ! empty( $data['mime_type'] ) )\n\t\t$metadata['mime_type'] = $data['mime_type'];\n\tif ( ! empty( $data['playtime_seconds'] ) )\n\t\t$metadata['length'] = (int) round( $data['playtime_seconds'] );\n\tif ( ! empty( $data['playtime_string'] ) )\n\t\t$metadata['length_formatted'] = $data['playtime_string'];\n\tif ( ! empty( $data['video']['resolution_x'] ) )\n\t\t$metadata['width'] = (int) $data['video']['resolution_x'];\n\tif ( ! empty( $data['video']['resolution_y'] ) )\n\t\t$metadata['height'] = (int) $data['video']['resolution_y'];\n\tif ( ! empty( $data['fileformat'] ) )\n\t\t$metadata['fileformat'] = $data['fileformat'];\n\tif ( ! empty( $data['video']['dataformat'] ) )\n\t\t$metadata['dataformat'] = $data['video']['dataformat'];\n\tif ( ! empty( $data['video']['encoder'] ) )\n\t\t$metadata['encoder'] = $data['video']['encoder'];\n\tif ( ! empty( $data['video']['codec'] ) )\n\t\t$metadata['codec'] = $data['video']['codec'];\n\n\tif ( ! empty( $data['audio'] ) ) {\n\t\tunset( $data['audio']['streams'] );\n\t\t$metadata['audio'] = $data['audio'];\n\t}\n\n\twp_add_id3_tag_data( $metadata, $data );\n\n\treturn $metadata;\n}\n\n/**\n * Retrieve metadata from a audio file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n */\nfunction wp_read_audio_metadata( $file ) {\n\tif ( ! file_exists( $file ) ) {\n\t\treturn false;\n\t}\n\t$metadata = array();\n\n\tif ( ! defined( 'GETID3_TEMP_DIR' ) ) {\n\t\tdefine( 'GETID3_TEMP_DIR', get_temp_dir() );\n\t}\n\n\tif ( ! class_exists( 'getID3', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/ID3/getid3.php' );\n\t}\n\t$id3 = new getID3();\n\t$data = $id3->analyze( $file );\n\n\tif ( ! empty( $data['audio'] ) ) {\n\t\tunset( $data['audio']['streams'] );\n\t\t$metadata = $data['audio'];\n\t}\n\n\tif ( ! empty( $data['fileformat'] ) )\n\t\t$metadata['fileformat'] = $data['fileformat'];\n\tif ( ! empty( $data['filesize'] ) )\n\t\t$metadata['filesize'] = (int) $data['filesize'];\n\tif ( ! empty( $data['mime_type'] ) )\n\t\t$metadata['mime_type'] = $data['mime_type'];\n\tif ( ! empty( $data['playtime_seconds'] ) )\n\t\t$metadata['length'] = (int) round( $data['playtime_seconds'] );\n\tif ( ! empty( $data['playtime_string'] ) )\n\t\t$metadata['length_formatted'] = $data['playtime_string'];\n\n\twp_add_id3_tag_data( $metadata, $data );\n\n\treturn $metadata;\n}\n\n/**\n * Encapsulate logic for Attach/Detach actions\n *\n * @since 4.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $parent_id Attachment parent ID.\n * @param string $action    Optional. Attach/detach action. Accepts 'attach' or 'detach'.\n *                          Default 'attach'.\n */\nfunction wp_media_attach_action( $parent_id, $action = 'attach' ) {\n\tglobal $wpdb;\n\n\tif ( ! $parent_id ) {\n\t\treturn;\n\t}\n\n\tif ( ! current_user_can( 'edit_post', $parent_id ) ) {\n\t\twp_die( __( 'Sorry, you are not allowed to edit this post.' ) );\n\t}\n\t$ids = array();\n\tforeach ( (array) $_REQUEST['media'] as $att_id ) {\n\t\t$att_id = (int) $att_id;\n\n\t\tif ( ! current_user_can( 'edit_post', $att_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$ids[] = $att_id;\n\t}\n\n\tif ( ! empty( $ids ) ) {\n\t\t$ids_string = implode( ',', $ids );\n\t\tif ( 'attach' === $action ) {\n\t\t\t$result = $wpdb->query( $wpdb->prepare( \"UPDATE $wpdb->posts SET post_parent = %d WHERE post_type = 'attachment' AND ID IN ( $ids_string )\", $parent_id ) );\n\t\t} else {\n\t\t\t$result = $wpdb->query( \"UPDATE $wpdb->posts SET post_parent = 0 WHERE post_type = 'attachment' AND ID IN ( $ids_string )\" );\n\t\t}\n\n\t\tforeach ( $ids as $att_id ) {\n\t\t\tclean_attachment_cache( $att_id );\n\t\t}\n\t}\n\n\tif ( isset( $result ) ) {\n\t\t$location = 'upload.php';\n\t\tif ( $referer = wp_get_referer() ) {\n\t\t\tif ( false !== strpos( $referer, 'upload.php' ) ) {\n\t\t\t\t$location = remove_query_arg( array( 'attached', 'detach' ), $referer );\n\t\t\t}\n\t\t}\n\n\t\t$key = 'attach' === $action ? 'attached' : 'detach';\n\t\t$location = add_query_arg( array( $key => $result ), $location );\n\t\twp_redirect( $location );\n\t\texit;\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40147';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * WordPress Administration Media API.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/**\n * Defines the default media upload tabs\n *\n * @since 2.5.0\n *\n * @return array default tabs\n */\nfunction media_upload_tabs() {\n\t$_default_tabs = array(\n\t\t'type' => __('From Computer'), // handler action suffix => tab text\n\t\t'type_url' => __('From URL'),\n\t\t'gallery' => __('Gallery'),\n\t\t'library' => __('Media Library')\n\t);\n\n\t/**\n\t * Filters the available tabs in the legacy (pre-3.5.0) media popup.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array $_default_tabs An array of media tabs.\n\t */\n\treturn apply_filters( 'media_upload_tabs', $_default_tabs );\n}\n\n/**\n * Adds the gallery tab back to the tabs array if post has image attachments\n *\n * @since 2.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param array $tabs\n * @return array $tabs with gallery if post has image attachment\n */\nfunction update_gallery_tab($tabs) {\n\tglobal $wpdb;\n\n\tif ( !isset($_REQUEST['post_id']) ) {\n\t\tunset($tabs['gallery']);\n\t\treturn $tabs;\n\t}\n\n\t$post_id = intval($_REQUEST['post_id']);\n\n\tif ( $post_id )\n\t\t$attachments = intval( $wpdb->get_var( $wpdb->prepare( \"SELECT count(*) FROM $wpdb->posts WHERE post_type = 'attachment' AND post_status != 'trash' AND post_parent = %d\", $post_id ) ) );\n\n\tif ( empty($attachments) ) {\n\t\tunset($tabs['gallery']);\n\t\treturn $tabs;\n\t}\n\n\t$tabs['gallery'] = sprintf(__('Gallery (%s)'), \"<span id='attachments-count'>$attachments</span>\");\n\n\treturn $tabs;\n}\n\n/**\n * Outputs the legacy media upload tabs UI.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n */\nfunction the_media_upload_tabs() {\n\tglobal $redir_tab;\n\t$tabs = media_upload_tabs();\n\t$default = 'type';\n\n\tif ( !empty($tabs) ) {\n\t\techo \"<ul id='sidemenu'>\\n\";\n\t\tif ( isset($redir_tab) && array_key_exists($redir_tab, $tabs) ) {\n\t\t\t$current = $redir_tab;\n\t\t} elseif ( isset($_GET['tab']) && array_key_exists($_GET['tab'], $tabs) ) {\n\t\t\t$current = $_GET['tab'];\n\t\t} else {\n\t\t\t/** This filter is documented in wp-admin/media-upload.php */\n\t\t\t$current = apply_filters( 'media_upload_default_tab', $default );\n\t\t}\n\n\t\tforeach ( $tabs as $callback => $text ) {\n\t\t\t$class = '';\n\n\t\t\tif ( $current == $callback )\n\t\t\t\t$class = \" class='current'\";\n\n\t\t\t$href = add_query_arg(array('tab' => $callback, 's' => false, 'paged' => false, 'post_mime_type' => false, 'm' => false));\n\t\t\t$link = \"<a href='\" . esc_url($href) . \"'$class>$text</a>\";\n\t\t\techo \"\\t<li id='\" . esc_attr(\"tab-$callback\") . \"'>$link</li>\\n\";\n\t\t}\n\t\techo \"</ul>\\n\";\n\t}\n}\n\n/**\n * Retrieves the image HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param int          $id      Image attachment id.\n * @param string       $caption Image caption.\n * @param string       $title   Image title attribute.\n * @param string       $align   Image CSS alignment property.\n * @param string       $url     Optional. Image src URL. Default empty.\n * @param bool|string  $rel     Optional. Value for rel attribute or whether to add a default value. Default false.\n * @param string|array $size    Optional. Image size. Accepts any valid image size, or an array of width\n *                              and height values in pixels (in that order). Default 'medium'.\n * @param string       $alt     Optional. Image alt attribute. Default empty.\n * @return string The HTML output to insert into the editor.\n */\nfunction get_image_send_to_editor( $id, $caption, $title, $align, $url = '', $rel = false, $size = 'medium', $alt = '' ) {\n\n\t$html = get_image_tag( $id, $alt, '', $align, $size );\n\n\tif ( $rel ) {\n\t\tif ( is_string( $rel ) ) {\n\t\t\t$rel = ' rel=\"' . esc_attr( $rel ) . '\"';\n\t\t} else {\n\t\t\t$rel = ' rel=\"attachment wp-att-' . intval( $id ) . '\"';\n\t\t}\n\t} else {\n\t\t$rel = '';\n\t}\n\n\tif ( $url )\n\t\t$html = '<a href=\"' . esc_attr( $url ) . '\"' . $rel . '>' . $html . '</a>';\n\n\t/**\n\t * Filters the image HTML markup to send to the editor when inserting an image.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string       $html    The image HTML markup to send.\n\t * @param int          $id      The attachment id.\n\t * @param string       $caption The image caption.\n\t * @param string       $title   The image title.\n\t * @param string       $align   The image alignment.\n\t * @param string       $url     The image source URL.\n\t * @param string|array $size    Size of image. Image size or array of width and height values\n\t *                              (in that order). Default 'medium'.\n\t * @param string       $alt     The image alternative, or alt, text.\n\t */\n\t$html = apply_filters( 'image_send_to_editor', $html, $id, $caption, $title, $align, $url, $size, $alt );\n\n\treturn $html;\n}\n\n/**\n * Adds image shortcode with caption to editor\n *\n * @since 2.6.0\n *\n * @param string $html\n * @param integer $id\n * @param string $caption image caption\n * @param string $title image title attribute\n * @param string $align image css alignment property\n * @param string $url image src url\n * @param string $size image size (thumbnail, medium, large, full or added with add_image_size() )\n * @param string $alt image alt attribute\n * @return string\n */\nfunction image_add_caption( $html, $id, $caption, $title, $align, $url, $size, $alt = '' ) {\n\n\t/**\n\t * Filters the caption text.\n\t *\n\t * Note: If the caption text is empty, the caption shortcode will not be appended\n\t * to the image HTML when inserted into the editor.\n\t *\n\t * Passing an empty value also prevents the {@see 'image_add_caption_shortcode'}\n\t * Filters from being evaluated at the end of image_add_caption().\n\t *\n\t * @since 4.1.0\n\t *\n\t * @param string $caption The original caption text.\n\t * @param int    $id      The attachment ID.\n\t */\n\t$caption = apply_filters( 'image_add_caption_text', $caption, $id );\n\n\t/**\n\t * Filters whether to disable captions.\n\t *\n\t * Prevents image captions from being appended to image HTML when inserted into the editor.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param bool $bool Whether to disable appending captions. Returning true to the filter\n\t *                   will disable captions. Default empty string.\n\t */\n\tif ( empty($caption) || apply_filters( 'disable_captions', '' ) )\n\t\treturn $html;\n\n\t$id = ( 0 < (int) $id ) ? 'attachment_' . $id : '';\n\n\tif ( ! preg_match( '/width=[\"\\']([0-9]+)/', $html, $matches ) )\n\t\treturn $html;\n\n\t$width = $matches[1];\n\n\t$caption = str_replace( array(\"\\r\\n\", \"\\r\"), \"\\n\", $caption);\n\t$caption = preg_replace_callback( '/<[a-zA-Z0-9]+(?: [^<>]+>)*/', '_cleanup_image_add_caption', $caption );\n\n\t// Convert any remaining line breaks to <br>.\n\t$caption = preg_replace( '/[ \\n\\t]*\\n[ \\t]*/', '<br />', $caption );\n\n\t$html = preg_replace( '/(class=[\"\\'][^\\'\"]*)align(none|left|right|center)\\s?/', '$1', $html );\n\tif ( empty($align) )\n\t\t$align = 'none';\n\n\t$shcode = '[caption id=\"' . $id . '\" align=\"align' . $align\t. '\" width=\"' . $width . '\"]' . $html . ' ' . $caption . '[/caption]';\n\n\t/**\n\t * Filters the image HTML markup including the caption shortcode.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $shcode The image HTML markup with caption shortcode.\n\t * @param string $html   The image HTML markup.\n\t */\n\treturn apply_filters( 'image_add_caption_shortcode', $shcode, $html );\n}\n\n/**\n * Private preg_replace callback used in image_add_caption()\n *\n * @access private\n * @since 3.4.0\n */\nfunction _cleanup_image_add_caption( $matches ) {\n\t// Remove any line breaks from inside the tags.\n\treturn preg_replace( '/[\\r\\n\\t]+/', ' ', $matches[0] );\n}\n\n/**\n * Adds image html to editor\n *\n * @since 2.5.0\n *\n * @param string $html\n */\nfunction media_send_to_editor($html) {\n?>\n<script type=\"text/javascript\">\nvar win = window.dialogArguments || opener || parent || top;\nwin.send_to_editor( <?php echo wp_json_encode( $html ); ?> );\n</script>\n<?php\n\texit;\n}\n\n/**\n * Save a file submitted from a POST request and create an attachment post for it.\n *\n * @since 2.5.0\n *\n * @param string $file_id   Index of the `$_FILES` array that the file was sent. Required.\n * @param int    $post_id   The post ID of a post to attach the media item to. Required, but can\n *                          be set to 0, creating a media item that has no relationship to a post.\n * @param array  $post_data Overwrite some of the attachment. Optional.\n * @param array  $overrides Override the wp_handle_upload() behavior. Optional.\n * @return int|WP_Error ID of the attachment or a WP_Error object on failure.\n */\nfunction media_handle_upload($file_id, $post_id, $post_data = array(), $overrides = array( 'test_form' => false )) {\n\n\t$time = current_time('mysql');\n\tif ( $post = get_post($post_id) ) {\n\t\tif ( substr( $post->post_date, 0, 4 ) > 0 )\n\t\t\t$time = $post->post_date;\n\t}\n\n\t$file = wp_handle_upload($_FILES[$file_id], $overrides, $time);\n\n\tif ( isset($file['error']) )\n\t\treturn new WP_Error( 'upload_error', $file['error'] );\n\n\t$name = $_FILES[$file_id]['name'];\n\t$ext  = pathinfo( $name, PATHINFO_EXTENSION );\n\t$name = wp_basename( $name, \".$ext\" );\n\n\t$url = $file['url'];\n\t$type = $file['type'];\n\t$file = $file['file'];\n\t$title = sanitize_text_field( $name );\n\t$content = '';\n\t$excerpt = '';\n\n\tif ( preg_match( '#^audio#', $type ) ) {\n\t\t$meta = wp_read_audio_metadata( $file );\n\n\t\tif ( ! empty( $meta['title'] ) ) {\n\t\t\t$title = $meta['title'];\n\t\t}\n\n\t\tif ( ! empty( $title ) ) {\n\n\t\t\tif ( ! empty( $meta['album'] ) && ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: album title, 3: artist name */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" from %2$s by %3$s.' ), $title, $meta['album'], $meta['artist'] );\n\t\t\t} elseif ( ! empty( $meta['album'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: album title */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" from %2$s.' ), $title, $meta['album'] );\n\t\t\t} elseif ( ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio track title, 2: artist name */\n\t\t\t\t$content .= sprintf( __( '\"%1$s\" by %2$s.' ), $title, $meta['artist'] );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: audio track title */\n\t\t\t\t$content .= sprintf( __( '\"%s\".' ), $title );\n\t\t\t}\n\n\t\t} elseif ( ! empty( $meta['album'] ) ) {\n\n\t\t\tif ( ! empty( $meta['artist'] ) ) {\n\t\t\t\t/* translators: 1: audio album title, 2: artist name */\n\t\t\t\t$content .= sprintf( __( '%1$s by %2$s.' ), $meta['album'], $meta['artist'] );\n\t\t\t} else {\n\t\t\t\t$content .= $meta['album'] . '.';\n\t\t\t}\n\n\t\t} elseif ( ! empty( $meta['artist'] ) ) {\n\n\t\t\t$content .= $meta['artist'] . '.';\n\n\t\t}\n\n\t\tif ( ! empty( $meta['year'] ) ) {\n\t\t\t/* translators: Audio file track information. 1: Year of audio track release */\n\t\t\t$content .= ' ' . sprintf( __( 'Released: %d.' ), $meta['year'] );\n\t\t}\n\n\t\tif ( ! empty( $meta['track_number'] ) ) {\n\t\t\t$track_number = explode( '/', $meta['track_number'] );\n\t\t\tif ( isset( $track_number[1] ) ) {\n\t\t\t\t/* translators: Audio file track information. 1: Audio track number, 2: Total audio tracks */\n\t\t\t\t$content .= ' ' . sprintf( __( 'Track %1$s of %2$s.' ), number_format_i18n( $track_number[0] ), number_format_i18n( $track_number[1] ) );\n\t\t\t} else {\n\t\t\t\t/* translators: Audio file track information. 1: Audio track number */\n\t\t\t\t$content .= ' ' . sprintf( __( 'Track %1$s.' ), number_format_i18n( $track_number[0] ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $meta['genre'] ) ) {\n\t\t\t/* translators: Audio file genre information. 1: Audio genre name */\n\t\t\t$content .= ' ' . sprintf( __( 'Genre: %s.' ), $meta['genre'] );\n\t\t}\n\n\t// Use image exif/iptc data for title and caption defaults if possible.\n\t} elseif ( 0 === strpos( $type, 'image/' ) && $image_meta = @wp_read_image_metadata( $file ) ) {\n\t\tif ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) ) {\n\t\t\t$title = $image_meta['title'];\n\t\t}\n\n\t\tif ( trim( $image_meta['caption'] ) ) {\n\t\t\t$excerpt = $image_meta['caption'];\n\t\t}\n\t}\n\n\t// Construct the attachment array\n\t$attachment = array_merge( array(\n\t\t'post_mime_type' => $type,\n\t\t'guid' => $url,\n\t\t'post_parent' => $post_id,\n\t\t'post_title' => $title,\n\t\t'post_content' => $content,\n\t\t'post_excerpt' => $excerpt,\n\t), $post_data );\n\n\t// This should never be set as it would then overwrite an existing attachment.\n\tunset( $attachment['ID'] );\n\n\t// Save the data\n\t$id = wp_insert_attachment($attachment, $file, $post_id);\n\tif ( !is_wp_error($id) ) {\n\t\twp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );\n\t}\n\n\treturn $id;\n\n}\n\n/**\n * Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().\n *\n * @since 2.6.0\n *\n * @param array  $file_array Array similar to a `$_FILES` upload array.\n * @param int    $post_id    The post ID the media is associated with.\n * @param string $desc       Optional. Description of the side-loaded file. Default null.\n * @param array  $post_data  Optional. Post data to override. Default empty array.\n * @return int|object The ID of the attachment or a WP_Error on failure.\n */\nfunction media_handle_sideload( $file_array, $post_id, $desc = null, $post_data = array() ) {\n\t$overrides = array('test_form'=>false);\n\n\t$time = current_time( 'mysql' );\n\tif ( $post = get_post( $post_id ) ) {\n\t\tif ( substr( $post->post_date, 0, 4 ) > 0 )\n\t\t\t$time = $post->post_date;\n\t}\n\n\t$file = wp_handle_sideload( $file_array, $overrides, $time );\n\tif ( isset($file['error']) )\n\t\treturn new WP_Error( 'upload_error', $file['error'] );\n\n\t$url = $file['url'];\n\t$type = $file['type'];\n\t$file = $file['file'];\n\t$title = preg_replace('/\\.[^.]+$/', '', basename($file));\n\t$content = '';\n\n\t// Use image exif/iptc data for title and caption defaults if possible.\n\tif ( $image_meta = @wp_read_image_metadata($file) ) {\n\t\tif ( trim( $image_meta['title'] ) && ! is_numeric( sanitize_title( $image_meta['title'] ) ) )\n\t\t\t$title = $image_meta['title'];\n\t\tif ( trim( $image_meta['caption'] ) )\n\t\t\t$content = $image_meta['caption'];\n\t}\n\n\tif ( isset( $desc ) )\n\t\t$title = $desc;\n\n\t// Construct the attachment array.\n\t$attachment = array_merge( array(\n\t\t'post_mime_type' => $type,\n\t\t'guid' => $url,\n\t\t'post_parent' => $post_id,\n\t\t'post_title' => $title,\n\t\t'post_content' => $content,\n\t), $post_data );\n\n\t// This should never be set as it would then overwrite an existing attachment.\n\tunset( $attachment['ID'] );\n\n\t// Save the attachment metadata\n\t$id = wp_insert_attachment($attachment, $file, $post_id);\n\tif ( !is_wp_error($id) )\n\t\twp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $file ) );\n\n\treturn $id;\n}\n\n/**\n * Adds the iframe to display content for the media upload page\n *\n * @since 2.5.0\n *\n * @global int $body_id\n *\n * @param string|callable $content_func\n */\nfunction wp_iframe($content_func /* ... */) {\n\t_wp_admin_html_begin();\n?>\n<title><?php bloginfo('name') ?> &rsaquo; <?php _e('Uploads'); ?> &#8212; <?php _e('WordPress'); ?></title>\n<?php\n\nwp_enqueue_style( 'colors' );\n// Check callback name for 'media'\nif ( ( is_array( $content_func ) && ! empty( $content_func[1] ) && 0 === strpos( (string) $content_func[1], 'media' ) )\n\t|| ( ! is_array( $content_func ) && 0 === strpos( $content_func, 'media' ) ) )\n\twp_enqueue_style( 'deprecated-media' );\nwp_enqueue_style( 'ie' );\n?>\n<script type=\"text/javascript\">\naddLoadEvent = function(func){if(typeof jQuery!=\"undefined\")jQuery(document).ready(func);else if(typeof wpOnload!='function'){wpOnload=func;}else{var oldonload=wpOnload;wpOnload=function(){oldonload();func();}}};\nvar ajaxurl = '<?php echo admin_url( 'admin-ajax.php', 'relative' ); ?>', pagenow = 'media-upload-popup', adminpage = 'media-upload-popup',\nisRtl = <?php echo (int) is_rtl(); ?>;\n</script>\n<?php\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_enqueue_scripts', 'media-upload-popup' );\n\n\t/**\n\t * Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_print_styles-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_styles' );\n\n\t/**\n\t * Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_print_scripts-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_print_scripts' );\n\n\t/**\n\t * Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0)\n\t * media upload popup are printed.\n\t *\n\t * @since 2.9.0\n\t */\n\tdo_action( 'admin_head-media-upload-popup' );\n\n\t/** This action is documented in wp-admin/admin-header.php */\n\tdo_action( 'admin_head' );\n\nif ( is_string( $content_func ) ) {\n\t/**\n\t * Fires in the admin header for each specific form tab in the legacy\n\t * (pre-3.5.0) media upload popup.\n\t *\n\t * The dynamic portion of the hook, `$content_func`, refers to the form\n\t * callback for the media upload type. Possible values include\n\t * 'media_upload_type_form', 'media_upload_type_url_form', and\n\t * 'media_upload_library_form'.\n\t *\n\t * @since 2.5.0\n\t */\n\tdo_action( \"admin_head_{$content_func}\" );\n}\n?>\n</head>\n<body<?php if ( isset($GLOBALS['body_id']) ) echo ' id=\"' . $GLOBALS['body_id'] . '\"'; ?> class=\"wp-core-ui no-js\">\n<script type=\"text/javascript\">\ndocument.body.className = document.body.className.replace('no-js', 'js');\n</script>\n<?php\n\t$args = func_get_args();\n\t$args = array_slice($args, 1);\n\tcall_user_func_array($content_func, $args);\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n?>\n<script type=\"text/javascript\">if(typeof wpOnload=='function')wpOnload();</script>\n</body>\n</html>\n<?php\n}\n\n/**\n * Adds the media button to the editor\n *\n * @since 2.5.0\n *\n * @global int $post_ID\n *\n * @staticvar int $instance\n *\n * @param string $editor_id\n */\nfunction media_buttons($editor_id = 'content') {\n\tstatic $instance = 0;\n\t$instance++;\n\n\t$post = get_post();\n\tif ( ! $post && ! empty( $GLOBALS['post_ID'] ) )\n\t\t$post = $GLOBALS['post_ID'];\n\n\twp_enqueue_media( array(\n\t\t'post' => $post\n\t) );\n\n\t$img = '<span class=\"wp-media-buttons-icon\"></span> ';\n\n\t$id_attribute = $instance === 1 ? ' id=\"insert-media-button\"' : '';\n\tprintf( '<button type=\"button\"%s class=\"button insert-media add_media\" data-editor=\"%s\">%s</button>',\n\t\t$id_attribute,\n\t\tesc_attr( $editor_id ),\n\t\t$img . __( 'Add Media' )\n\t);\n\t/**\n\t * Filters the legacy (pre-3.5.0) media buttons.\n\t *\n\t * Use {@see 'media_buttons'} action instead.\n\t *\n\t * @since 2.5.0\n\t * @deprecated 3.5.0 Use {@see 'media_buttons'} action instead.\n\t *\n\t * @param string $string Media buttons context. Default empty.\n\t */\n\t$legacy_filter = apply_filters( 'media_buttons_context', '' );\n\n\tif ( $legacy_filter ) {\n\t\t// #WP22559. Close <a> if a plugin started by closing <a> to open their own <a> tag.\n\t\tif ( 0 === stripos( trim( $legacy_filter ), '</a>' ) )\n\t\t\t$legacy_filter .= '</a>';\n\t\techo $legacy_filter;\n\t}\n}\n\n/**\n *\n * @global int $post_ID\n * @param string $type\n * @param int $post_id\n * @param string $tab\n * @return string\n */\nfunction get_upload_iframe_src( $type = null, $post_id = null, $tab = null ) {\n\tglobal $post_ID;\n\n\tif ( empty( $post_id ) )\n\t\t$post_id = $post_ID;\n\n\t$upload_iframe_src = add_query_arg( 'post_id', (int) $post_id, admin_url('media-upload.php') );\n\n\tif ( $type && 'media' != $type )\n\t\t$upload_iframe_src = add_query_arg('type', $type, $upload_iframe_src);\n\n\tif ( ! empty( $tab ) )\n\t\t$upload_iframe_src = add_query_arg('tab', $tab, $upload_iframe_src);\n\n\t/**\n\t * Filters the upload iframe source URL for a specific media type.\n\t *\n\t * The dynamic portion of the hook name, `$type`, refers to the type\n\t * of media uploaded.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $upload_iframe_src The upload iframe source URL by type.\n\t */\n\t$upload_iframe_src = apply_filters( \"{$type}_upload_iframe_src\", $upload_iframe_src );\n\n\treturn add_query_arg('TB_iframe', true, $upload_iframe_src);\n}\n\n/**\n * Handles form submissions for the legacy media uploader.\n *\n * @since 2.5.0\n *\n * @return mixed void|object WP_Error on failure\n */\nfunction media_upload_form_handler() {\n\tcheck_admin_referer('media-form');\n\n\t$errors = null;\n\n\tif ( isset($_POST['send']) ) {\n\t\t$keys = array_keys( $_POST['send'] );\n\t\t$send_id = (int) reset( $keys );\n\t}\n\n\tif ( !empty($_POST['attachments']) ) foreach ( $_POST['attachments'] as $attachment_id => $attachment ) {\n\t\t$post = $_post = get_post($attachment_id, ARRAY_A);\n\n\t\tif ( !current_user_can( 'edit_post', $attachment_id ) )\n\t\t\tcontinue;\n\n\t\tif ( isset($attachment['post_content']) )\n\t\t\t$post['post_content'] = $attachment['post_content'];\n\t\tif ( isset($attachment['post_title']) )\n\t\t\t$post['post_title'] = $attachment['post_title'];\n\t\tif ( isset($attachment['post_excerpt']) )\n\t\t\t$post['post_excerpt'] = $attachment['post_excerpt'];\n\t\tif ( isset($attachment['menu_order']) )\n\t\t\t$post['menu_order'] = $attachment['menu_order'];\n\n\t\tif ( isset($send_id) && $attachment_id == $send_id ) {\n\t\t\tif ( isset($attachment['post_parent']) )\n\t\t\t\t$post['post_parent'] = $attachment['post_parent'];\n\t\t}\n\n\t\t/**\n\t\t * Filters the attachment fields to be saved.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @see wp_get_attachment_metadata()\n\t\t *\n\t\t * @param array $post       An array of post data.\n\t\t * @param array $attachment An array of attachment metadata.\n\t\t */\n\t\t$post = apply_filters( 'attachment_fields_to_save', $post, $attachment );\n\n\t\tif ( isset($attachment['image_alt']) ) {\n\t\t\t$image_alt = wp_unslash( $attachment['image_alt'] );\n\t\t\tif ( $image_alt != get_post_meta($attachment_id, '_wp_attachment_image_alt', true) ) {\n\t\t\t\t$image_alt = wp_strip_all_tags( $image_alt, true );\n\n\t\t\t\t// Update_meta expects slashed.\n\t\t\t\tupdate_post_meta( $attachment_id, '_wp_attachment_image_alt', wp_slash( $image_alt ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( isset($post['errors']) ) {\n\t\t\t$errors[$attachment_id] = $post['errors'];\n\t\t\tunset($post['errors']);\n\t\t}\n\n\t\tif ( $post != $_post )\n\t\t\twp_update_post($post);\n\n\t\tforeach ( get_attachment_taxonomies($post) as $t ) {\n\t\t\tif ( isset($attachment[$t]) )\n\t\t\t\twp_set_object_terms($attachment_id, array_map('trim', preg_split('/,+/', $attachment[$t])), $t, false);\n\t\t}\n\t}\n\n\tif ( isset($_POST['insert-gallery']) || isset($_POST['update-gallery']) ) { ?>\n\t\t<script type=\"text/javascript\">\n\t\tvar win = window.dialogArguments || opener || parent || top;\n\t\twin.tb_remove();\n\t\t</script>\n\t\t<?php\n\t\texit;\n\t}\n\n\tif ( isset($send_id) ) {\n\t\t$attachment = wp_unslash( $_POST['attachments'][$send_id] );\n\n\t\t$html = isset( $attachment['post_title'] ) ? $attachment['post_title'] : '';\n\t\tif ( !empty($attachment['url']) ) {\n\t\t\t$rel = '';\n\t\t\tif ( strpos($attachment['url'], 'attachment_id') || get_attachment_link($send_id) == $attachment['url'] )\n\t\t\t\t$rel = \" rel='attachment wp-att-\" . esc_attr($send_id) . \"'\";\n\t\t\t$html = \"<a href='{$attachment['url']}'$rel>$html</a>\";\n\t\t}\n\n\t\t/**\n\t\t * Filters the HTML markup for a media item sent to the editor.\n\t\t *\n\t\t * @since 2.5.0\n\t\t *\n\t\t * @see wp_get_attachment_metadata()\n\t\t *\n\t\t * @param string $html       HTML markup for a media item sent to the editor.\n\t\t * @param int    $send_id    The first key from the $_POST['send'] data.\n\t\t * @param array  $attachment Array of attachment metadata.\n\t\t */\n\t\t$html = apply_filters( 'media_send_to_editor', $html, $send_id, $attachment );\n\t\treturn media_send_to_editor($html);\n\t}\n\n\treturn $errors;\n}\n\n/**\n * Handles the process of uploading media.\n *\n * @since 2.5.0\n *\n * @return null|string\n */\nfunction wp_media_upload_handler() {\n\t$errors = array();\n\t$id = 0;\n\n\tif ( isset($_POST['html-upload']) && !empty($_FILES) ) {\n\t\tcheck_admin_referer('media-form');\n\t\t// Upload File button was clicked\n\t\t$id = media_handle_upload('async-upload', $_REQUEST['post_id']);\n\t\tunset($_FILES);\n\t\tif ( is_wp_error($id) ) {\n\t\t\t$errors['upload_error'] = $id;\n\t\t\t$id = false;\n\t\t}\n\t}\n\n\tif ( !empty($_POST['insertonlybutton']) ) {\n\t\t$src = $_POST['src'];\n\t\tif ( !empty($src) && !strpos($src, '://') )\n\t\t\t$src = \"http://$src\";\n\n\t\tif ( isset( $_POST['media_type'] ) && 'image' != $_POST['media_type'] ) {\n\t\t\t$title = esc_html( wp_unslash( $_POST['title'] ) );\n\t\t\tif ( empty( $title ) )\n\t\t\t\t$title = esc_html( basename( $src ) );\n\n\t\t\tif ( $title && $src )\n\t\t\t\t$html = \"<a href='\" . esc_url($src) . \"'>$title</a>\";\n\n\t\t\t$type = 'file';\n\t\t\tif ( ( $ext = preg_replace( '/^.+?\\.([^.]+)$/', '$1', $src ) ) && ( $ext_type = wp_ext2type( $ext ) )\n\t\t\t\t&& ( 'audio' == $ext_type || 'video' == $ext_type ) )\n\t\t\t\t\t$type = $ext_type;\n\n\t\t\t/**\n\t\t\t * Filters the URL sent to the editor for a specific media type.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$type`, refers to the type\n\t\t\t * of media being sent.\n\t\t\t *\n\t\t\t * @since 3.3.0\n\t\t\t *\n\t\t\t * @param string $html  HTML markup sent to the editor.\n\t\t\t * @param string $src   Media source URL.\n\t\t\t * @param string $title Media title.\n\t\t\t */\n\t\t\t$html = apply_filters( \"{$type}_send_to_editor_url\", $html, esc_url_raw( $src ), $title );\n\t\t} else {\n\t\t\t$align = '';\n\t\t\t$alt = esc_attr( wp_unslash( $_POST['alt'] ) );\n\t\t\tif ( isset($_POST['align']) ) {\n\t\t\t\t$align = esc_attr( wp_unslash( $_POST['align'] ) );\n\t\t\t\t$class = \" class='align$align'\";\n\t\t\t}\n\t\t\tif ( !empty($src) )\n\t\t\t\t$html = \"<img src='\" . esc_url($src) . \"' alt='$alt'$class />\";\n\n\t\t\t/**\n\t\t\t * Filters the image URL sent to the editor.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param string $html  HTML markup sent to the editor for an image.\n\t\t\t * @param string $src   Image source URL.\n\t\t\t * @param string $alt   Image alternate, or alt, text.\n\t\t\t * @param string $align The image alignment. Default 'alignnone'. Possible values include\n\t\t\t *                      'alignleft', 'aligncenter', 'alignright', 'alignnone'.\n\t\t\t */\n\t\t\t$html = apply_filters( 'image_send_to_editor_url', $html, esc_url_raw( $src ), $alt, $align );\n\t\t}\n\n\t\treturn media_send_to_editor($html);\n\t}\n\n\tif ( isset( $_POST['save'] ) ) {\n\t\t$errors['upload_notice'] = __('Saved.');\n\t\twp_enqueue_script( 'admin-gallery' );\n \t\treturn wp_iframe( 'media_upload_gallery_form', $errors );\n\n\t} elseif ( ! empty( $_POST ) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\tif ( isset($_GET['tab']) && $_GET['tab'] == 'type_url' ) {\n\t\t$type = 'image';\n\t\tif ( isset( $_GET['type'] ) && in_array( $_GET['type'], array( 'video', 'audio', 'file' ) ) )\n\t\t\t$type = $_GET['type'];\n\t\treturn wp_iframe( 'media_upload_type_url_form', $type, $errors, $id );\n\t}\n\n\treturn wp_iframe( 'media_upload_type_form', 'image', $errors, $id );\n}\n\n/**\n * Downloads an image from the specified URL and attaches it to a post.\n *\n * @since 2.6.0\n * @since 4.2.0 Introduced the `$return` parameter.\n *\n * @param string $file    The URL of the image to download.\n * @param int    $post_id The post ID the media is to be associated with.\n * @param string $desc    Optional. Description of the image.\n * @param string $return  Optional. Accepts 'html' (image tag html) or 'src' (URL). Default 'html'.\n * @return string|WP_Error Populated HTML img tag on success, WP_Error object otherwise.\n */\nfunction media_sideload_image( $file, $post_id, $desc = null, $return = 'html' ) {\n\tif ( ! empty( $file ) ) {\n\n\t\t// Set variables for storage, fix file filename for query strings.\n\t\tpreg_match( '/[^\\?]+\\.(jpe?g|jpe|gif|png)\\b/i', $file, $matches );\n\t\tif ( ! $matches ) {\n\t\t\treturn new WP_Error( 'image_sideload_failed', __( 'Invalid image URL' ) );\n\t\t}\n\n\t\t$file_array = array();\n\t\t$file_array['name'] = basename( $matches[0] );\n\n\t\t// Download file to temp location.\n\t\t$file_array['tmp_name'] = download_url( $file );\n\n\t\t// If error storing temporarily, return the error.\n\t\tif ( is_wp_error( $file_array['tmp_name'] ) ) {\n\t\t\treturn $file_array['tmp_name'];\n\t\t}\n\n\t\t// Do the validation and storage stuff.\n\t\t$id = media_handle_sideload( $file_array, $post_id, $desc );\n\n\t\t// If error storing permanently, unlink.\n\t\tif ( is_wp_error( $id ) ) {\n\t\t\t@unlink( $file_array['tmp_name'] );\n\t\t\treturn $id;\n\t\t}\n\n\t\t$src = wp_get_attachment_url( $id );\n\t}\n\n\t// Finally, check to make sure the file has been saved, then return the HTML.\n\tif ( ! empty( $src ) ) {\n\t\tif ( $return === 'src' ) {\n\t\t\treturn $src;\n\t\t}\n\n\t\t$alt = isset( $desc ) ? esc_attr( $desc ) : '';\n\t\t$html = \"<img src='$src' alt='$alt' />\";\n\t\treturn $html;\n\t} else {\n\t\treturn new WP_Error( 'image_sideload_failed' );\n\t}\n}\n\n/**\n * Retrieves the legacy media uploader form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n */\nfunction media_upload_gallery() {\n\t$errors = array();\n\n\tif ( !empty($_POST) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\twp_enqueue_script('admin-gallery');\n\treturn wp_iframe( 'media_upload_gallery_form', $errors );\n}\n\n/**\n * Retrieves the legacy media library form in an iframe.\n *\n * @since 2.5.0\n *\n * @return string|null\n */\nfunction media_upload_library() {\n\t$errors = array();\n\tif ( !empty($_POST) ) {\n\t\t$return = media_upload_form_handler();\n\n\t\tif ( is_string($return) )\n\t\t\treturn $return;\n\t\tif ( is_array($return) )\n\t\t\t$errors = $return;\n\t}\n\n\treturn wp_iframe( 'media_upload_library_form', $errors );\n}\n\n/**\n * Retrieve HTML for the image alignment radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $checked\n * @return string\n */\nfunction image_align_input_fields( $post, $checked = '' ) {\n\n\tif ( empty($checked) )\n\t\t$checked = get_user_setting('align', 'none');\n\n\t$alignments = array('none' => __('None'), 'left' => __('Left'), 'center' => __('Center'), 'right' => __('Right'));\n\tif ( !array_key_exists( (string) $checked, $alignments ) )\n\t\t$checked = 'none';\n\n\t$out = array();\n\tforeach ( $alignments as $name => $label ) {\n\t\t$name = esc_attr($name);\n\t\t$out[] = \"<input type='radio' name='attachments[{$post->ID}][align]' id='image-align-{$name}-{$post->ID}' value='$name'\".\n\t\t\t( $checked == $name ? \" checked='checked'\" : \"\" ) .\n\t\t\t\" /><label for='image-align-{$name}-{$post->ID}' class='align image-align-{$name}-label'>$label</label>\";\n\t}\n\treturn join(\"\\n\", $out);\n}\n\n/**\n * Retrieve HTML for the size radio buttons with the specified one checked.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param bool|string $check\n * @return array\n */\nfunction image_size_input_fields( $post, $check = '' ) {\n\t/**\n\t * Filters the names and labels of the default image sizes.\n\t *\n\t * @since 3.3.0\n\t *\n\t * @param array $size_names Array of image sizes and their names. Default values\n\t *                          include 'Thumbnail', 'Medium', 'Large', 'Full Size'.\n\t */\n\t$size_names = apply_filters( 'image_size_names_choose', array(\n\t\t'thumbnail' => __( 'Thumbnail' ),\n\t\t'medium'    => __( 'Medium' ),\n\t\t'large'     => __( 'Large' ),\n\t\t'full'      => __( 'Full Size' )\n\t) );\n\n\tif ( empty( $check ) ) {\n\t\t$check = get_user_setting('imgsize', 'medium');\n\t}\n\t$out = array();\n\n\tforeach ( $size_names as $size => $label ) {\n\t\t$downsize = image_downsize( $post->ID, $size );\n\t\t$checked = '';\n\n\t\t// Is this size selectable?\n\t\t$enabled = ( $downsize[3] || 'full' == $size );\n\t\t$css_id = \"image-size-{$size}-{$post->ID}\";\n\n\t\t// If this size is the default but that's not available, don't select it.\n\t\tif ( $size == $check ) {\n\t\t\tif ( $enabled ) {\n\t\t\t\t$checked = \" checked='checked'\";\n\t\t\t} else {\n\t\t\t\t$check = '';\n\t\t\t}\n\t\t} elseif ( ! $check && $enabled && 'thumbnail' != $size ) {\n\t\t\t/*\n\t\t\t * If $check is not enabled, default to the first available size\n\t\t\t * that's bigger than a thumbnail.\n\t\t\t */\n\t\t\t$check = $size;\n\t\t\t$checked = \" checked='checked'\";\n\t\t}\n\n\t\t$html = \"<div class='image-size-item'><input type='radio' \" . disabled( $enabled, false, false ) . \"name='attachments[$post->ID][image-size]' id='{$css_id}' value='{$size}'$checked />\";\n\n\t\t$html .= \"<label for='{$css_id}'>$label</label>\";\n\n\t\t// Only show the dimensions if that choice is available.\n\t\tif ( $enabled ) {\n\t\t\t$html .= \" <label for='{$css_id}' class='help'>\" . sprintf( \"(%d&nbsp;&times;&nbsp;%d)\", $downsize[1], $downsize[2] ). \"</label>\";\n\t\t}\n\t\t$html .= '</div>';\n\n\t\t$out[] = $html;\n\t}\n\n\treturn array(\n\t\t'label' => __( 'Size' ),\n\t\t'input' => 'html',\n\t\t'html'  => join( \"\\n\", $out ),\n\t);\n}\n\n/**\n * Retrieve HTML for the Link URL buttons with the default link type as specified.\n *\n * @since 2.7.0\n *\n * @param WP_Post $post\n * @param string $url_type\n * @return string\n */\nfunction image_link_input_fields($post, $url_type = '') {\n\n\t$file = wp_get_attachment_url($post->ID);\n\t$link = get_attachment_link($post->ID);\n\n\tif ( empty($url_type) )\n\t\t$url_type = get_user_setting('urlbutton', 'post');\n\n\t$url = '';\n\tif ( $url_type == 'file' )\n\t\t$url = $file;\n\telseif ( $url_type == 'post' )\n\t\t$url = $link;\n\n\treturn \"\n\t<input type='text' class='text urlfield' name='attachments[$post->ID][url]' value='\" . esc_attr($url) . \"' /><br />\n\t<button type='button' class='button urlnone' data-link-url=''>\" . __('None') . \"</button>\n\t<button type='button' class='button urlfile' data-link-url='\" . esc_attr($file) . \"'>\" . __('File URL') . \"</button>\n\t<button type='button' class='button urlpost' data-link-url='\" . esc_attr($link) . \"'>\" . __('Attachment Post URL') . \"</button>\n\";\n}\n\n/**\n * Output a textarea element for inputting an attachment caption.\n *\n * @since 3.4.0\n *\n * @param WP_Post $edit_post Attachment WP_Post object.\n * @return string HTML markup for the textarea element.\n */\nfunction wp_caption_input_textarea($edit_post) {\n\t// Post data is already escaped.\n\t$name = \"attachments[{$edit_post->ID}][post_excerpt]\";\n\n\treturn '<textarea name=\"' . $name . '\" id=\"' . $name . '\">' . $edit_post->post_excerpt . '</textarea>';\n}\n\n/**\n * Retrieves the image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array $form_fields\n * @param object $post\n * @return array\n */\nfunction image_attachment_fields_to_edit($form_fields, $post) {\n\treturn $form_fields;\n}\n\n/**\n * Retrieves the single non-image attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n */\nfunction media_single_attachment_fields_to_edit( $form_fields, $post ) {\n\tunset($form_fields['url'], $form_fields['align'], $form_fields['image-size']);\n\treturn $form_fields;\n}\n\n/**\n * Retrieves the post non-image attachment fields to edito form fields.\n *\n * @since 2.8.0\n *\n * @param array   $form_fields An array of attachment form fields.\n * @param WP_Post $post        The WP_Post attachment object.\n * @return array Filtered attachment form fields.\n */\nfunction media_post_single_attachment_fields_to_edit( $form_fields, $post ) {\n\tunset($form_fields['image_url']);\n\treturn $form_fields;\n}\n\n/**\n * Filters input from media_upload_form_handler() and assigns a default\n * post_title from the file name if none supplied.\n *\n * Illustrates the use of the {@see 'attachment_fields_to_save'} filter\n * which can be used to add default values to any field before saving to DB.\n *\n * @since 2.5.0\n *\n * @param array $post       The WP_Post attachment object converted to an array.\n * @param array $attachment An array of attachment metadata.\n * @return array Filtered attachment post object.\n */\nfunction image_attachment_fields_to_save( $post, $attachment ) {\n\tif ( substr( $post['post_mime_type'], 0, 5 ) == 'image' ) {\n\t\tif ( strlen( trim( $post['post_title'] ) ) == 0 ) {\n\t\t\t$attachment_url = ( isset( $post['attachment_url'] ) ) ? $post['attachment_url'] : $post['guid'];\n\t\t\t$post['post_title'] = preg_replace( '/\\.\\w+$/', '', wp_basename( $attachment_url ) );\n\t\t\t$post['errors']['post_title']['errors'][] = __( 'Empty Title filled from filename.' );\n\t\t}\n\t}\n\n\treturn $post;\n}\n\n/**\n * Retrieves the media element HTML to send to the editor.\n *\n * @since 2.5.0\n *\n * @param string $html\n * @param integer $attachment_id\n * @param array $attachment\n * @return string\n */\nfunction image_media_send_to_editor($html, $attachment_id, $attachment) {\n\t$post = get_post($attachment_id);\n\tif ( substr($post->post_mime_type, 0, 5) == 'image' ) {\n\t\t$url = $attachment['url'];\n\t\t$align = !empty($attachment['align']) ? $attachment['align'] : 'none';\n\t\t$size = !empty($attachment['image-size']) ? $attachment['image-size'] : 'medium';\n\t\t$alt = !empty($attachment['image_alt']) ? $attachment['image_alt'] : '';\n\t\t$rel = ( strpos( $url, 'attachment_id') || $url === get_attachment_link( $attachment_id ) );\n\n\t\treturn get_image_send_to_editor($attachment_id, $attachment['post_excerpt'], $attachment['post_title'], $align, $url, $rel, $size, $alt);\n\t}\n\n\treturn $html;\n}\n\n/**\n * Retrieves the attachment fields to edit form fields.\n *\n * @since 2.5.0\n *\n * @param WP_Post $post\n * @param array $errors\n * @return array\n */\nfunction get_attachment_fields_to_edit($post, $errors = null) {\n\tif ( is_int($post) )\n\t\t$post = get_post($post);\n\tif ( is_array($post) )\n\t\t$post = new WP_Post( (object) $post );\n\n\t$image_url = wp_get_attachment_url($post->ID);\n\n\t$edit_post = sanitize_post($post, 'edit');\n\n\t$form_fields = array(\n\t\t'post_title'   => array(\n\t\t\t'label'      => __('Title'),\n\t\t\t'value'      => $edit_post->post_title\n\t\t),\n\t\t'image_alt'   => array(),\n\t\t'post_excerpt' => array(\n\t\t\t'label'      => __('Caption'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => wp_caption_input_textarea($edit_post)\n\t\t),\n\t\t'post_content' => array(\n\t\t\t'label'      => __('Description'),\n\t\t\t'value'      => $edit_post->post_content,\n\t\t\t'input'      => 'textarea'\n\t\t),\n\t\t'url'          => array(\n\t\t\t'label'      => __('Link URL'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => image_link_input_fields($post, get_option('image_default_link_type')),\n\t\t\t'helps'      => __('Enter a link URL or click above for presets.')\n\t\t),\n\t\t'menu_order'   => array(\n\t\t\t'label'      => __('Order'),\n\t\t\t'value'      => $edit_post->menu_order\n\t\t),\n\t\t'image_url'\t=> array(\n\t\t\t'label'      => __('File URL'),\n\t\t\t'input'      => 'html',\n\t\t\t'html'       => \"<input type='text' class='text urlfield' readonly='readonly' name='attachments[$post->ID][url]' value='\" . esc_attr($image_url) . \"' /><br />\",\n\t\t\t'value'      => wp_get_attachment_url($post->ID),\n\t\t\t'helps'      => __('Location of the uploaded file.')\n\t\t)\n\t);\n\n\tforeach ( get_attachment_taxonomies($post) as $taxonomy ) {\n\t\t$t = (array) get_taxonomy($taxonomy);\n\t\tif ( ! $t['public'] || ! $t['show_ui'] )\n\t\t\tcontinue;\n\t\tif ( empty($t['label']) )\n\t\t\t$t['label'] = $taxonomy;\n\t\tif ( empty($t['args']) )\n\t\t\t$t['args'] = array();\n\n\t\t$terms = get_object_term_cache($post->ID, $taxonomy);\n\t\tif ( false === $terms )\n\t\t\t$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);\n\n\t\t$values = array();\n\n\t\tforeach ( $terms as $term )\n\t\t\t$values[] = $term->slug;\n\t\t$t['value'] = join(', ', $values);\n\n\t\t$form_fields[$taxonomy] = $t;\n\t}\n\n\t// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default\n\t// The recursive merge is easily traversed with array casting: foreach ( (array) $things as $thing )\n\t$form_fields = array_merge_recursive($form_fields, (array) $errors);\n\n\t// This was formerly in image_attachment_fields_to_edit().\n\tif ( substr($post->post_mime_type, 0, 5) == 'image' ) {\n\t\t$alt = get_post_meta($post->ID, '_wp_attachment_image_alt', true);\n\t\tif ( empty($alt) )\n\t\t\t$alt = '';\n\n\t\t$form_fields['post_title']['required'] = true;\n\n\t\t$form_fields['image_alt'] = array(\n\t\t\t'value' => $alt,\n\t\t\t'label' => __('Alternative Text'),\n\t\t\t'helps' => __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;')\n\t\t);\n\n\t\t$form_fields['align'] = array(\n\t\t\t'label' => __('Alignment'),\n\t\t\t'input' => 'html',\n\t\t\t'html'  => image_align_input_fields($post, get_option('image_default_align')),\n\t\t);\n\n\t\t$form_fields['image-size'] = image_size_input_fields( $post, get_option('image_default_size', 'medium') );\n\n\t} else {\n\t\tunset( $form_fields['image_alt'] );\n\t}\n\n\t/**\n\t * Filters the attachment fields to edit.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param array   $form_fields An array of attachment form fields.\n\t * @param WP_Post $post        The WP_Post attachment object.\n\t */\n\t$form_fields = apply_filters( 'attachment_fields_to_edit', $form_fields, $post );\n\n\treturn $form_fields;\n}\n\n/**\n * Retrieve HTML for media items of post gallery.\n *\n * The HTML markup retrieved will be created for the progress of SWF Upload\n * component. Will also create link for showing and hiding the form to modify\n * the image attachment.\n *\n * @since 2.5.0\n *\n * @global WP_Query $wp_the_query\n *\n * @param int $post_id Optional. Post ID.\n * @param array $errors Errors for attachment, if any.\n * @return string\n */\nfunction get_media_items( $post_id, $errors ) {\n\t$attachments = array();\n\tif ( $post_id ) {\n\t\t$post = get_post($post_id);\n\t\tif ( $post && $post->post_type == 'attachment' )\n\t\t\t$attachments = array($post->ID => $post);\n\t\telse\n\t\t\t$attachments = get_children( array( 'post_parent' => $post_id, 'post_type' => 'attachment', 'orderby' => 'menu_order ASC, ID', 'order' => 'DESC') );\n\t} else {\n\t\tif ( is_array($GLOBALS['wp_the_query']->posts) )\n\t\t\tforeach ( $GLOBALS['wp_the_query']->posts as $attachment )\n\t\t\t\t$attachments[$attachment->ID] = $attachment;\n\t}\n\n\t$output = '';\n\tforeach ( (array) $attachments as $id => $attachment ) {\n\t\tif ( $attachment->post_status == 'trash' )\n\t\t\tcontinue;\n\t\tif ( $item = get_media_item( $id, array( 'errors' => isset($errors[$id]) ? $errors[$id] : null) ) )\n\t\t\t$output .= \"\\n<div id='media-item-$id' class='media-item child-of-$attachment->post_parent preloaded'><div class='progress hidden'><div class='bar'></div></div><div id='media-upload-error-$id' class='hidden'></div><div class='filename hidden'></div>$item\\n</div>\";\n\t}\n\n\treturn $output;\n}\n\n/**\n * Retrieve HTML form for modifying the image attachment.\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n *\n * @param int $attachment_id Attachment ID for modification.\n * @param string|array $args Optional. Override defaults.\n * @return string HTML form for attachment.\n */\nfunction get_media_item( $attachment_id, $args = null ) {\n\tglobal $redir_tab;\n\n\tif ( ( $attachment_id = intval( $attachment_id ) ) && $thumb_url = wp_get_attachment_image_src( $attachment_id, 'thumbnail', true ) )\n\t\t$thumb_url = $thumb_url[0];\n\telse\n\t\t$thumb_url = false;\n\n\t$post = get_post( $attachment_id );\n\t$current_post_id = !empty( $_GET['post_id'] ) ? (int) $_GET['post_id'] : 0;\n\n\t$default_args = array(\n\t\t'errors' => null,\n\t\t'send' => $current_post_id ? post_type_supports( get_post_type( $current_post_id ), 'editor' ) : true,\n\t\t'delete' => true,\n\t\t'toggle' => true,\n\t\t'show_title' => true\n\t);\n\t$args = wp_parse_args( $args, $default_args );\n\n\t/**\n\t * Filters the arguments used to retrieve an image for the edit image form.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @see get_media_item\n\t *\n\t * @param array $args An array of arguments.\n\t */\n\t$r = apply_filters( 'get_media_item_args', $args );\n\n\t$toggle_on  = __( 'Show' );\n\t$toggle_off = __( 'Hide' );\n\n\t$file = get_attached_file( $post->ID );\n\t$filename = esc_html( wp_basename( $file ) );\n\t$title = esc_attr( $post->post_title );\n\n\t$post_mime_types = get_post_mime_types();\n\t$keys = array_keys( wp_match_mime_types( array_keys( $post_mime_types ), $post->post_mime_type ) );\n\t$type = reset( $keys );\n\t$type_html = \"<input type='hidden' id='type-of-$attachment_id' value='\" . esc_attr( $type ) . \"' />\";\n\n\t$form_fields = get_attachment_fields_to_edit( $post, $r['errors'] );\n\n\tif ( $r['toggle'] ) {\n\t\t$class = empty( $r['errors'] ) ? 'startclosed' : 'startopen';\n\t\t$toggle_links = \"\n\t<a class='toggle describe-toggle-on' href='#'>$toggle_on</a>\n\t<a class='toggle describe-toggle-off' href='#'>$toggle_off</a>\";\n\t} else {\n\t\t$class = '';\n\t\t$toggle_links = '';\n\t}\n\n\t$display_title = ( !empty( $title ) ) ? $title : $filename; // $title shouldn't ever be empty, but just in case\n\t$display_title = $r['show_title'] ? \"<div class='filename new'><span class='title'>\" . wp_html_excerpt( $display_title, 60, '&hellip;' ) . \"</span></div>\" : '';\n\n\t$gallery = ( ( isset( $_REQUEST['tab'] ) && 'gallery' == $_REQUEST['tab'] ) || ( isset( $redir_tab ) && 'gallery' == $redir_tab ) );\n\t$order = '';\n\n\tforeach ( $form_fields as $key => $val ) {\n\t\tif ( 'menu_order' == $key ) {\n\t\t\tif ( $gallery )\n\t\t\t\t$order = \"<div class='menu_order'> <input class='menu_order_input' type='text' id='attachments[$attachment_id][menu_order]' name='attachments[$attachment_id][menu_order]' value='\" . esc_attr( $val['value'] ). \"' /></div>\";\n\t\t\telse\n\t\t\t\t$order = \"<input type='hidden' name='attachments[$attachment_id][menu_order]' value='\" . esc_attr( $val['value'] ) . \"' />\";\n\n\t\t\tunset( $form_fields['menu_order'] );\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t$media_dims = '';\n\t$meta = wp_get_attachment_metadata( $post->ID );\n\tif ( isset( $meta['width'], $meta['height'] ) )\n\t\t$media_dims .= \"<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> \";\n\n\t/**\n\t * Filters the media metadata.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string  $media_dims The HTML markup containing the media dimensions.\n\t * @param WP_Post $post       The WP_Post attachment object.\n\t */\n\t$media_dims = apply_filters( 'media_meta', $media_dims, $post );\n\n\t$image_edit_button = '';\n\tif ( wp_attachment_is_image( $post->ID ) && wp_image_editor_supports( array( 'mime_type' => $post->post_mime_type ) ) ) {\n\t\t$nonce = wp_create_nonce( \"image_editor-$post->ID\" );\n\t\t$image_edit_button = \"<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \\\"$nonce\\\" )' class='button' value='\" . esc_attr__( 'Edit Image' ) . \"' /> <span class='spinner'></span>\";\n\t}\n\n\t$attachment_url = get_permalink( $attachment_id );\n\n\t$item = \"\n\t$type_html\n\t$toggle_links\n\t$order\n\t$display_title\n\t<table class='slidetoggle describe $class'>\n\t\t<thead class='media-item-info' id='media-head-$post->ID'>\n\t\t<tr>\n\t\t\t<td class='A1B1' id='thumbnail-head-$post->ID'>\n\t\t\t<p><a href='$attachment_url' target='_blank'><img class='thumbnail' src='$thumb_url' alt='' /></a></p>\n\t\t\t<p>$image_edit_button</p>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<p><strong>\" . __('File name:') . \"</strong> $filename</p>\n\t\t\t<p><strong>\" . __('File type:') . \"</strong> $post->post_mime_type</p>\n\t\t\t<p><strong>\" . __('Upload date:') . \"</strong> \" . mysql2date( __( 'F j, Y' ), $post->post_date ). '</p>';\n\t\t\tif ( !empty( $media_dims ) )\n\t\t\t\t$item .= \"<p><strong>\" . __('Dimensions:') . \"</strong> $media_dims</p>\\n\";\n\n\t\t\t$item .= \"</td></tr>\\n\";\n\n\t$item .= \"\n\t\t</thead>\n\t\t<tbody>\n\t\t<tr><td colspan='2' class='imgedit-response' id='imgedit-response-$post->ID'></td></tr>\\n\n\t\t<tr><td style='display:none' colspan='2' class='image-editor' id='image-editor-$post->ID'></td></tr>\\n\n\t\t<tr><td colspan='2'><p class='media-types media-types-required-info'>\" . sprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . \"</p></td></tr>\\n\";\n\n\t$defaults = array(\n\t\t'input'      => 'text',\n\t\t'required'   => false,\n\t\t'value'      => '',\n\t\t'extra_rows' => array(),\n\t);\n\n\tif ( $r['send'] ) {\n\t\t$r['send'] = get_submit_button( __( 'Insert into Post' ), '', \"send[$attachment_id]\", false );\n\t}\n\n\t$delete = empty( $r['delete'] ) ? '' : $r['delete'];\n\tif ( $delete && current_user_can( 'delete_post', $attachment_id ) ) {\n\t\tif ( !EMPTY_TRASH_DAYS ) {\n\t\t\t$delete = \"<a href='\" . wp_nonce_url( \"post.php?action=delete&amp;post=$attachment_id\", 'delete-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='delete-permanently'>\" . __( 'Delete Permanently' ) . '</a>';\n\t\t} elseif ( !MEDIA_TRASH ) {\n\t\t\t$delete = \"<a href='#' class='del-link' onclick=\\\"document.getElementById('del_attachment_$attachment_id').style.display='block';return false;\\\">\" . __( 'Delete' ) . \"</a>\n\t\t\t <div id='del_attachment_$attachment_id' class='del-attachment' style='display:none;'>\" .\n\t\t\t /* translators: %s: file name */\n\t\t\t'<p>' . sprintf( __( 'You are about to delete %s.' ), '<strong>' . $filename . '</strong>' ) . \"</p>\n\t\t\t <a href='\" . wp_nonce_url( \"post.php?action=delete&amp;post=$attachment_id\", 'delete-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='button'>\" . __( 'Continue' ) . \"</a>\n\t\t\t <a href='#' class='button' onclick=\\\"this.parentNode.style.display='none';return false;\\\">\" . __( 'Cancel' ) . \"</a>\n\t\t\t </div>\";\n\t\t} else {\n\t\t\t$delete = \"<a href='\" . wp_nonce_url( \"post.php?action=trash&amp;post=$attachment_id\", 'trash-post_' . $attachment_id ) . \"' id='del[$attachment_id]' class='delete'>\" . __( 'Move to Trash' ) . \"</a>\n\t\t\t<a href='\" . wp_nonce_url( \"post.php?action=untrash&amp;post=$attachment_id\", 'untrash-post_' . $attachment_id ) . \"' id='undo[$attachment_id]' class='undo hidden'>\" . __( 'Undo' ) . \"</a>\";\n\t\t}\n\t} else {\n\t\t$delete = '';\n\t}\n\n\t$thumbnail = '';\n\t$calling_post_id = 0;\n\tif ( isset( $_GET['post_id'] ) ) {\n\t\t$calling_post_id = absint( $_GET['post_id'] );\n\t} elseif ( isset( $_POST ) && count( $_POST ) ) {// Like for async-upload where $_GET['post_id'] isn't set\n\t\t$calling_post_id = $post->post_parent;\n\t}\n\tif ( 'image' == $type && $calling_post_id && current_theme_supports( 'post-thumbnails', get_post_type( $calling_post_id ) )\n\t\t&& post_type_supports( get_post_type( $calling_post_id ), 'thumbnail' ) && get_post_thumbnail_id( $calling_post_id ) != $attachment_id ) {\n\n\t\t$calling_post = get_post( $calling_post_id );\n\t\t$calling_post_type_object = get_post_type_object( $calling_post->post_type );\n\n\t\t$ajax_nonce = wp_create_nonce( \"set_post_thumbnail-$calling_post_id\" );\n\t\t$thumbnail = \"<a class='wp-post-thumbnail' id='wp-post-thumbnail-\" . $attachment_id . \"' href='#' onclick='WPSetAsThumbnail(\\\"$attachment_id\\\", \\\"$ajax_nonce\\\");return false;'>\" . esc_html( $calling_post_type_object->labels->use_featured_image ) . \"</a>\";\n\t}\n\n\tif ( ( $r['send'] || $thumbnail || $delete ) && !isset( $form_fields['buttons'] ) ) {\n\t\t$form_fields['buttons'] = array( 'tr' => \"\\t\\t<tr class='submit'><td></td><td class='savesend'>\" . $r['send'] . \" $thumbnail $delete</td></tr>\\n\" );\n\t}\n\t$hidden_fields = array();\n\n\tforeach ( $form_fields as $id => $field ) {\n\t\tif ( $id[0] == '_' )\n\t\t\tcontinue;\n\n\t\tif ( !empty( $field['tr'] ) ) {\n\t\t\t$item .= $field['tr'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$field = array_merge( $defaults, $field );\n\t\t$name = \"attachments[$attachment_id][$id]\";\n\n\t\tif ( $field['input'] == 'hidden' ) {\n\t\t\t$hidden_fields[$name] = $field['value'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$required      = $field['required'] ? '<span class=\"required\">*</span>' : '';\n\t\t$required_attr = $field['required'] ? ' required' : '';\n\t\t$aria_required = $field['required'] ? \" aria-required='true'\" : '';\n\t\t$class  = $id;\n\t\t$class .= $field['required'] ? ' form-required' : '';\n\n\t\t$item .= \"\\t\\t<tr class='$class'>\\n\\t\\t\\t<th scope='row' class='label'><label for='$name'><span class='alignleft'>{$field['label']}{$required}</span><br class='clear' /></label></th>\\n\\t\\t\\t<td class='field'>\";\n\t\tif ( !empty( $field[ $field['input'] ] ) )\n\t\t\t$item .= $field[ $field['input'] ];\n\t\telseif ( $field['input'] == 'textarea' ) {\n\t\t\tif ( 'post_content' == $id && user_can_richedit() ) {\n\t\t\t\t// Sanitize_post() skips the post_content when user_can_richedit.\n\t\t\t\t$field['value'] = htmlspecialchars( $field['value'], ENT_QUOTES );\n\t\t\t}\n\t\t\t// Post_excerpt is already escaped by sanitize_post() in get_attachment_fields_to_edit().\n\t\t\t$item .= \"<textarea id='$name' name='$name'{$required_attr}{$aria_required}>\" . $field['value'] . '</textarea>';\n\t\t} else {\n\t\t\t$item .= \"<input type='text' class='text' id='$name' name='$name' value='\" . esc_attr( $field['value'] ) . \"'{$required_attr}{$aria_required} />\";\n\t\t}\n\t\tif ( !empty( $field['helps'] ) )\n\t\t\t$item .= \"<p class='help'>\" . join( \"</p>\\n<p class='help'>\", array_unique( (array) $field['helps'] ) ) . '</p>';\n\t\t$item .= \"</td>\\n\\t\\t</tr>\\n\";\n\n\t\t$extra_rows = array();\n\n\t\tif ( !empty( $field['errors'] ) )\n\t\t\tforeach ( array_unique( (array) $field['errors'] ) as $error )\n\t\t\t\t$extra_rows['error'][] = $error;\n\n\t\tif ( !empty( $field['extra_rows'] ) )\n\t\t\tforeach ( $field['extra_rows'] as $class => $rows )\n\t\t\t\tforeach ( (array) $rows as $html )\n\t\t\t\t\t$extra_rows[$class][] = $html;\n\n\t\tforeach ( $extra_rows as $class => $rows )\n\t\t\tforeach ( $rows as $html )\n\t\t\t\t$item .= \"\\t\\t<tr><td></td><td class='$class'>$html</td></tr>\\n\";\n\t}\n\n\tif ( !empty( $form_fields['_final'] ) )\n\t\t$item .= \"\\t\\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\\n\";\n\t$item .= \"\\t</tbody>\\n\";\n\t$item .= \"\\t</table>\\n\";\n\n\tforeach ( $hidden_fields as $name => $value )\n\t\t$item .= \"\\t<input type='hidden' name='$name' id='$name' value='\" . esc_attr( $value ) . \"' />\\n\";\n\n\tif ( $post->post_parent < 1 && isset( $_REQUEST['post_id'] ) ) {\n\t\t$parent = (int) $_REQUEST['post_id'];\n\t\t$parent_name = \"attachments[$attachment_id][post_parent]\";\n\t\t$item .= \"\\t<input type='hidden' name='$parent_name' id='$parent_name' value='$parent' />\\n\";\n\t}\n\n\treturn $item;\n}\n\n/**\n * @since 3.5.0\n *\n * @param int   $attachment_id\n * @param array $args\n * @return array\n */\nfunction get_compat_media_markup( $attachment_id, $args = null ) {\n\t$post = get_post( $attachment_id );\n\n\t$default_args = array(\n\t\t'errors' => null,\n\t\t'in_modal' => false,\n\t);\n\n\t$user_can_edit = current_user_can( 'edit_post', $attachment_id );\n\n\t$args = wp_parse_args( $args, $default_args );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$args = apply_filters( 'get_media_item_args', $args );\n\n\t$form_fields = array();\n\n\tif ( $args['in_modal'] ) {\n\t\tforeach ( get_attachment_taxonomies($post) as $taxonomy ) {\n\t\t\t$t = (array) get_taxonomy($taxonomy);\n\t\t\tif ( ! $t['public'] || ! $t['show_ui'] )\n\t\t\t\tcontinue;\n\t\t\tif ( empty($t['label']) )\n\t\t\t\t$t['label'] = $taxonomy;\n\t\t\tif ( empty($t['args']) )\n\t\t\t\t$t['args'] = array();\n\n\t\t\t$terms = get_object_term_cache($post->ID, $taxonomy);\n\t\t\tif ( false === $terms )\n\t\t\t\t$terms = wp_get_object_terms($post->ID, $taxonomy, $t['args']);\n\n\t\t\t$values = array();\n\n\t\t\tforeach ( $terms as $term )\n\t\t\t\t$values[] = $term->slug;\n\t\t\t$t['value'] = join(', ', $values);\n\t\t\t$t['taxonomy'] = true;\n\n\t\t\t$form_fields[$taxonomy] = $t;\n\t\t}\n\t}\n\n\t// Merge default fields with their errors, so any key passed with the error (e.g. 'error', 'helps', 'value') will replace the default\n\t// The recursive merge is easily traversed with array casting: foreach ( (array) $things as $thing )\n\t$form_fields = array_merge_recursive($form_fields, (array) $args['errors'] );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_fields = apply_filters( 'attachment_fields_to_edit', $form_fields, $post );\n\n\tunset( $form_fields['image-size'], $form_fields['align'], $form_fields['image_alt'],\n\t\t$form_fields['post_title'], $form_fields['post_excerpt'], $form_fields['post_content'],\n\t\t$form_fields['url'], $form_fields['menu_order'], $form_fields['image_url'] );\n\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$media_meta = apply_filters( 'media_meta', '', $post );\n\n\t$defaults = array(\n\t\t'input'         => 'text',\n\t\t'required'      => false,\n\t\t'value'         => '',\n\t\t'extra_rows'    => array(),\n\t\t'show_in_edit'  => true,\n\t\t'show_in_modal' => true,\n\t);\n\n\t$hidden_fields = array();\n\n\t$item = '';\n\tforeach ( $form_fields as $id => $field ) {\n\t\tif ( $id[0] == '_' )\n\t\t\tcontinue;\n\n\t\t$name = \"attachments[$attachment_id][$id]\";\n\t\t$id_attr = \"attachments-$attachment_id-$id\";\n\n\t\tif ( !empty( $field['tr'] ) ) {\n\t\t\t$item .= $field['tr'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$field = array_merge( $defaults, $field );\n\n\t\tif ( ( ! $field['show_in_edit'] && ! $args['in_modal'] ) || ( ! $field['show_in_modal'] && $args['in_modal'] ) )\n\t\t\tcontinue;\n\n\t\tif ( $field['input'] == 'hidden' ) {\n\t\t\t$hidden_fields[$name] = $field['value'];\n\t\t\tcontinue;\n\t\t}\n\n\t\t$readonly      = ! $user_can_edit && ! empty( $field['taxonomy'] ) ? \" readonly='readonly' \" : '';\n\t\t$required      = $field['required'] ? '<span class=\"required\">*</span>' : '';\n\t\t$required_attr = $field['required'] ? ' required' : '';\n\t\t$aria_required = $field['required'] ? \" aria-required='true'\" : '';\n\t\t$class  = 'compat-field-' . $id;\n\t\t$class .= $field['required'] ? ' form-required' : '';\n\n\t\t$item .= \"\\t\\t<tr class='$class'>\";\n\t\t$item .= \"\\t\\t\\t<th scope='row' class='label'><label for='$id_attr'><span class='alignleft'>{$field['label']}</span>$required<br class='clear' /></label>\";\n\t\t$item .= \"</th>\\n\\t\\t\\t<td class='field'>\";\n\n\t\tif ( !empty( $field[ $field['input'] ] ) )\n\t\t\t$item .= $field[ $field['input'] ];\n\t\telseif ( $field['input'] == 'textarea' ) {\n\t\t\tif ( 'post_content' == $id && user_can_richedit() ) {\n\t\t\t\t// sanitize_post() skips the post_content when user_can_richedit.\n\t\t\t\t$field['value'] = htmlspecialchars( $field['value'], ENT_QUOTES );\n\t\t\t}\n\t\t\t$item .= \"<textarea id='$id_attr' name='$name'{$required_attr}{$aria_required}>\" . $field['value'] . '</textarea>';\n\t\t} else {\n\t\t\t$item .= \"<input type='text' class='text' id='$id_attr' name='$name' value='\" . esc_attr( $field['value'] ) . \"' $readonly{$required_attr}{$aria_required} />\";\n\t\t}\n\t\tif ( !empty( $field['helps'] ) )\n\t\t\t$item .= \"<p class='help'>\" . join( \"</p>\\n<p class='help'>\", array_unique( (array) $field['helps'] ) ) . '</p>';\n\t\t$item .= \"</td>\\n\\t\\t</tr>\\n\";\n\n\t\t$extra_rows = array();\n\n\t\tif ( !empty( $field['errors'] ) )\n\t\t\tforeach ( array_unique( (array) $field['errors'] ) as $error )\n\t\t\t\t$extra_rows['error'][] = $error;\n\n\t\tif ( !empty( $field['extra_rows'] ) )\n\t\t\tforeach ( $field['extra_rows'] as $class => $rows )\n\t\t\t\tforeach ( (array) $rows as $html )\n\t\t\t\t\t$extra_rows[$class][] = $html;\n\n\t\tforeach ( $extra_rows as $class => $rows )\n\t\t\tforeach ( $rows as $html )\n\t\t\t\t$item .= \"\\t\\t<tr><td></td><td class='$class'>$html</td></tr>\\n\";\n\t}\n\n\tif ( !empty( $form_fields['_final'] ) )\n\t\t$item .= \"\\t\\t<tr class='final'><td colspan='2'>{$form_fields['_final']}</td></tr>\\n\";\n\n\tif ( $item ) {\n\t\t$item = '<p class=\"media-types media-types-required-info\">' .\n\t\t\tsprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . '</p>\n\t\t\t<table class=\"compat-attachment-fields\">' . $item . '</table>';\n\t}\n\n\tforeach ( $hidden_fields as $hidden_field => $value ) {\n\t\t$item .= '<input type=\"hidden\" name=\"' . esc_attr( $hidden_field ) . '\" value=\"' . esc_attr( $value ) . '\" />' . \"\\n\";\n\t}\n\n\tif ( $item )\n\t\t$item = '<input type=\"hidden\" name=\"attachments[' . $attachment_id . '][menu_order]\" value=\"' . esc_attr( $post->menu_order ) . '\" />' . $item;\n\n\treturn array(\n\t\t'item'   => $item,\n\t\t'meta'   => $media_meta,\n\t);\n}\n\n/**\n * Outputs the legacy media upload header.\n *\n * @since 2.5.0\n */\nfunction media_upload_header() {\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\techo '<script type=\"text/javascript\">post_id = ' . $post_id . ';</script>';\n\tif ( empty( $_GET['chromeless'] ) ) {\n\t\techo '<div id=\"media-upload-header\">';\n\t\tthe_media_upload_tabs();\n\t\techo '</div>';\n\t}\n}\n\n/**\n * Outputs the legacy media upload form.\n *\n * @since 2.5.0\n *\n * @global string $type\n * @global string $tab\n * @global bool   $is_IE\n * @global bool   $is_opera\n *\n * @param array $errors\n */\nfunction media_upload_form( $errors = null ) {\n\tglobal $type, $tab, $is_IE, $is_opera;\n\n\tif ( ! _device_can_upload() ) {\n\t\techo '<p>' . sprintf( __('The web browser on your device cannot be used to upload files. You may be able to use the <a href=\"%s\">native app for your device</a> instead.'), 'https://apps.wordpress.org/' ) . '</p>';\n\t\treturn;\n\t}\n\n\t$upload_action_url = admin_url('async-upload.php');\n\t$post_id = isset($_REQUEST['post_id']) ? intval($_REQUEST['post_id']) : 0;\n\t$_type = isset($type) ? $type : '';\n\t$_tab = isset($tab) ? $tab : '';\n\n\t$max_upload_size = wp_max_upload_size();\n\tif ( ! $max_upload_size ) {\n\t\t$max_upload_size = 0;\n\t}\n?>\n\n<div id=\"media-upload-notice\"><?php\n\n\tif (isset($errors['upload_notice']) )\n\t\techo $errors['upload_notice'];\n\n?></div>\n<div id=\"media-upload-error\"><?php\n\n\tif (isset($errors['upload_error']) && is_wp_error($errors['upload_error']))\n\t\techo $errors['upload_error']->get_error_message();\n\n?></div>\n<?php\nif ( is_multisite() && !is_upload_space_available() ) {\n\t/**\n\t * Fires when an upload will exceed the defined upload space quota for a network site.\n\t *\n\t * @since 3.5.0\n\t */\n\tdo_action( 'upload_ui_over_quota' );\n\treturn;\n}\n\n/**\n * Fires just before the legacy (pre-3.5.0) upload interface is loaded.\n *\n * @since 2.6.0\n */\ndo_action( 'pre-upload-ui' );\n\n$post_params = array(\n\t\"post_id\" => $post_id,\n\t\"_wpnonce\" => wp_create_nonce('media-form'),\n\t\"type\" => $_type,\n\t\"tab\" => $_tab,\n\t\"short\" => \"1\",\n);\n\n/**\n * Filters the media upload post parameters.\n *\n * @since 3.1.0 As 'swfupload_post_params'\n * @since 3.3.0\n *\n * @param array $post_params An array of media upload parameters used by Plupload.\n */\n$post_params = apply_filters( 'upload_post_params', $post_params );\n\n$plupload_init = array(\n\t'runtimes'            => 'html5,flash,silverlight,html4',\n\t'browse_button'       => 'plupload-browse-button',\n\t'container'           => 'plupload-upload-ui',\n\t'drop_element'        => 'drag-drop-area',\n\t'file_data_name'      => 'async-upload',\n\t'url'                 => $upload_action_url,\n\t'flash_swf_url'       => includes_url( 'js/plupload/plupload.flash.swf' ),\n\t'silverlight_xap_url' => includes_url( 'js/plupload/plupload.silverlight.xap' ),\n\t'filters' => array(\n\t\t'max_file_size'   => $max_upload_size . 'b',\n\t),\n\t'multipart_params'    => $post_params,\n);\n\n// Currently only iOS Safari supports multiple files uploading but iOS 7.x has a bug that prevents uploading of videos\n// when enabled. See #29602.\nif ( wp_is_mobile() && strpos( $_SERVER['HTTP_USER_AGENT'], 'OS 7_' ) !== false &&\n\tstrpos( $_SERVER['HTTP_USER_AGENT'], 'like Mac OS X' ) !== false ) {\n\n\t$plupload_init['multi_selection'] = false;\n}\n\n/**\n * Filters the default Plupload settings.\n *\n * @since 3.3.0\n *\n * @param array $plupload_init An array of default settings used by Plupload.\n */\n$plupload_init = apply_filters( 'plupload_init', $plupload_init );\n\n?>\n\n<script type=\"text/javascript\">\n<?php\n// Verify size is an int. If not return default value.\n$large_size_h = absint( get_option('large_size_h') );\nif( !$large_size_h )\n\t$large_size_h = 1024;\n$large_size_w = absint( get_option('large_size_w') );\nif( !$large_size_w )\n\t$large_size_w = 1024;\n?>\nvar resize_height = <?php echo $large_size_h; ?>, resize_width = <?php echo $large_size_w; ?>,\nwpUploaderInit = <?php echo wp_json_encode( $plupload_init ); ?>;\n</script>\n\n<div id=\"plupload-upload-ui\" class=\"hide-if-no-js\">\n<?php\n/**\n * Fires before the upload interface loads.\n *\n * @since 2.6.0 As 'pre-flash-upload-ui'\n * @since 3.3.0\n */\ndo_action( 'pre-plupload-upload-ui' ); ?>\n<div id=\"drag-drop-area\">\n\t<div class=\"drag-drop-inside\">\n\t<p class=\"drag-drop-info\"><?php _e('Drop files here'); ?></p>\n\t<p><?php _ex('or', 'Uploader: Drop files here - or - Select Files'); ?></p>\n\t<p class=\"drag-drop-buttons\"><input id=\"plupload-browse-button\" type=\"button\" value=\"<?php esc_attr_e('Select Files'); ?>\" class=\"button\" /></p>\n\t</div>\n</div>\n<?php\n/**\n * Fires after the upload interface loads.\n *\n * @since 2.6.0 As 'post-flash-upload-ui'\n * @since 3.3.0\n */\ndo_action( 'post-plupload-upload-ui' ); ?>\n</div>\n\n<div id=\"html-upload-ui\" class=\"hide-if-js\">\n\t<?php\n\t/**\n\t * Fires before the upload button in the media upload interface.\n\t *\n\t * @since 2.6.0\n\t */\n\tdo_action( 'pre-html-upload-ui' );\n\t?>\n\t<p id=\"async-upload-wrap\">\n\t\t<label class=\"screen-reader-text\" for=\"async-upload\"><?php _e('Upload'); ?></label>\n\t\t<input type=\"file\" name=\"async-upload\" id=\"async-upload\" />\n\t\t<?php submit_button( __( 'Upload' ), 'primary', 'html-upload', false ); ?>\n\t\t<a href=\"#\" onclick=\"try{top.tb_remove();}catch(e){}; return false;\"><?php _e('Cancel'); ?></a>\n\t</p>\n\t<div class=\"clear\"></div>\n<?php\n/**\n * Fires after the upload button in the media upload interface.\n *\n * @since 2.6.0\n */\ndo_action( 'post-html-upload-ui' );\n?>\n</div>\n\n<p class=\"max-upload-size\"><?php printf( __( 'Maximum upload file size: %s.' ), esc_html( size_format( $max_upload_size ) ) ); ?></p>\n<?php\n\n\t/**\n\t * Fires on the post upload UI screen.\n\t *\n\t * Legacy (pre-3.5.0) media workflow hook.\n\t *\n\t * @since 2.6.0\n\t */\n\tdo_action( 'post-upload-ui' );\n}\n\n/**\n * Outputs the legacy media upload form for a given media type.\n *\n * @since 2.5.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n */\nfunction media_upload_type_form($type = 'file', $errors = null, $id = null) {\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] )? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=type&post_id=$post_id\");\n\n\t/**\n\t * Filters the media upload form action URL.\n\t *\n\t * @since 2.6.0\n\t *\n\t * @param string $form_action_url The media upload form action URL.\n\t * @param string $type            The type of media. Default 'file'.\n\t */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form type-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"<?php echo $type; ?>-form\">\n<?php submit_button( '', 'hidden', 'save', false ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<?php wp_nonce_field('media-form'); ?>\n\n<h3 class=\"media-title\"><?php _e('Add media files from your computer'); ?></h3>\n\n<?php media_upload_form( $errors ); ?>\n\n<script type=\"text/javascript\">\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t}\n\tupdateMediaForm();\n});\n</script>\n<div id=\"media-items\"><?php\n\nif ( $id ) {\n\tif ( !is_wp_error($id) ) {\n\t\tadd_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2);\n\t\techo get_media_items( $id, $errors );\n\t} else {\n\t\techo '<div id=\"media-upload-error\">'.esc_html($id->get_error_message()).'</div></div>';\n\t\texit;\n\t}\n}\n?></div>\n\n<p class=\"savebutton ml-submit\">\n<?php submit_button( __( 'Save all changes' ), '', 'save', false ); ?>\n</p>\n</form>\n<?php\n}\n\n/**\n * Outputs the legacy media upload form for external media.\n *\n * @since 2.7.0\n *\n * @param string $type\n * @param object $errors\n * @param integer $id\n */\nfunction media_upload_type_url_form($type = null, $errors = null, $id = null) {\n\tif ( null === $type )\n\t\t$type = 'image';\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=type&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form type-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"<?php echo $type; ?>-form\">\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<?php wp_nonce_field('media-form'); ?>\n\n<h3 class=\"media-title\"><?php _e('Insert media from another website'); ?></h3>\n\n<script type=\"text/javascript\">\nvar addExtImage = {\n\n\twidth : '',\n\theight : '',\n\talign : 'alignnone',\n\n\tinsert : function() {\n\t\tvar t = this, html, f = document.forms[0], cls, title = '', alt = '', caption = '';\n\n\t\tif ( '' == f.src.value || '' == t.width )\n\t\t\treturn false;\n\n\t\tif ( f.alt.value )\n\t\t\talt = f.alt.value.replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n<?php\n\t/** This filter is documented in wp-admin/includes/media.php */\n\tif ( ! apply_filters( 'disable_captions', '' ) ) {\n\t\t?>\n\t\tif ( f.caption.value ) {\n\t\t\tcaption = f.caption.value.replace(/\\r\\n|\\r/g, '\\n');\n\t\t\tcaption = caption.replace(/<[a-zA-Z0-9]+( [^<>]+)?>/g, function(a){\n\t\t\t\treturn a.replace(/[\\r\\n\\t]+/, ' ');\n\t\t\t});\n\n\t\t\tcaption = caption.replace(/\\s*\\n\\s*/g, '<br />');\n\t\t}\n<?php } ?>\n\n\t\tcls = caption ? '' : ' class=\"'+t.align+'\"';\n\n\t\thtml = '<img alt=\"'+alt+'\" src=\"'+f.src.value+'\"'+cls+' width=\"'+t.width+'\" height=\"'+t.height+'\" />';\n\n\t\tif ( f.url.value ) {\n\t\t\turl = f.url.value.replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\t\thtml = '<a href=\"'+url+'\">'+html+'</a>';\n\t\t}\n\n\t\tif ( caption )\n\t\t\thtml = '[caption id=\"\" align=\"'+t.align+'\" width=\"'+t.width+'\"]'+html+caption+'[/caption]';\n\n\t\tvar win = window.dialogArguments || opener || parent || top;\n\t\twin.send_to_editor(html);\n\t\treturn false;\n\t},\n\n\tresetImageData : function() {\n\t\tvar t = addExtImage;\n\n\t\tt.width = t.height = '';\n\t\tdocument.getElementById('go_button').style.color = '#bbb';\n\t\tif ( ! document.forms[0].src.value )\n\t\t\tdocument.getElementById('status_img').innerHTML = '';\n\t\telse document.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/no.png' ) ); ?>\" alt=\"\" />';\n\t},\n\n\tupdateImageData : function() {\n\t\tvar t = addExtImage;\n\n\t\tt.width = t.preloadImg.width;\n\t\tt.height = t.preloadImg.height;\n\t\tdocument.getElementById('go_button').style.color = '#333';\n\t\tdocument.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/yes.png' ) ); ?>\" alt=\"\" />';\n\t},\n\n\tgetImageData : function() {\n\t\tif ( jQuery('table.describe').hasClass('not-image') )\n\t\t\treturn;\n\n\t\tvar t = addExtImage, src = document.forms[0].src.value;\n\n\t\tif ( ! src ) {\n\t\t\tt.resetImageData();\n\t\t\treturn false;\n\t\t}\n\n\t\tdocument.getElementById('status_img').innerHTML = '<img src=\"<?php echo esc_url( admin_url( 'images/spinner-2x.gif' ) ); ?>\" alt=\"\" width=\"16\" height=\"16\" />';\n\t\tt.preloadImg = new Image();\n\t\tt.preloadImg.onload = t.updateImageData;\n\t\tt.preloadImg.onerror = t.resetImageData;\n\t\tt.preloadImg.src = src;\n\t}\n};\n\njQuery(document).ready( function($) {\n\t$('.media-types input').click( function() {\n\t\t$('table.describe').toggleClass('not-image', $('#not-image').prop('checked') );\n\t});\n});\n</script>\n\n<div id=\"media-items\">\n<div class=\"media-item media-blank\">\n<?php\n/**\n * Filters the insert media from URL form HTML.\n *\n * @since 3.3.0\n *\n * @param string $form_html The insert from URL form HTML.\n */\necho apply_filters( 'type_url_form_media', wp_media_insert_url_form( $type ) );\n?>\n</div>\n</div>\n</form>\n<?php\n}\n\n/**\n * Adds gallery form to upload iframe\n *\n * @since 2.5.0\n *\n * @global string $redir_tab\n * @global string $type\n * @global string $tab\n *\n * @param array $errors\n */\nfunction media_upload_gallery_form($errors) {\n\tglobal $redir_tab, $type;\n\n\t$redir_tab = 'gallery';\n\tmedia_upload_header();\n\n\t$post_id = intval($_REQUEST['post_id']);\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=gallery&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n?>\n\n<script type=\"text/javascript\">\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t\tupdateMediaForm();\n\t}\n});\n</script>\n<div id=\"sort-buttons\" class=\"hide-if-no-js\">\n<span>\n<?php _e('All Tabs:'); ?>\n<a href=\"#\" id=\"showall\"><?php _e('Show'); ?></a>\n<a href=\"#\" id=\"hideall\" style=\"display:none;\"><?php _e('Hide'); ?></a>\n</span>\n<?php _e('Sort Order:'); ?>\n<a href=\"#\" id=\"asc\"><?php _e('Ascending'); ?></a> |\n<a href=\"#\" id=\"desc\"><?php _e('Descending'); ?></a> |\n<a href=\"#\" id=\"clear\"><?php _ex('Clear', 'verb'); ?></a>\n</div>\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"gallery-form\">\n<?php wp_nonce_field('media-form'); ?>\n<?php //media_upload_form( $errors ); ?>\n<table class=\"widefat\">\n<thead><tr>\n<th><?php _e('Media'); ?></th>\n<th class=\"order-head\"><?php _e('Order'); ?></th>\n<th class=\"actions-head\"><?php _e('Actions'); ?></th>\n</tr></thead>\n</table>\n<div id=\"media-items\">\n<?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?>\n<?php echo get_media_items($post_id, $errors); ?>\n</div>\n\n<p class=\"ml-submit\">\n<?php submit_button( __( 'Save all changes' ), 'savebutton', 'save', false, array( 'id' => 'save-all', 'style' => 'display: none;' ) ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<input type=\"hidden\" name=\"type\" value=\"<?php echo esc_attr( $GLOBALS['type'] ); ?>\" />\n<input type=\"hidden\" name=\"tab\" value=\"<?php echo esc_attr( $GLOBALS['tab'] ); ?>\" />\n</p>\n\n<div id=\"gallery-settings\" style=\"display:none;\">\n<div class=\"title\"><?php _e('Gallery Settings'); ?></div>\n<table id=\"basic\" class=\"describe\"><tbody>\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Link thumbnails to:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<input type=\"radio\" name=\"linkto\" id=\"linkto-file\" value=\"file\" />\n\t\t<label for=\"linkto-file\" class=\"radio\"><?php _e('Image File'); ?></label>\n\n\t\t<input type=\"radio\" checked=\"checked\" name=\"linkto\" id=\"linkto-post\" value=\"post\" />\n\t\t<label for=\"linkto-post\" class=\"radio\"><?php _e('Attachment Page'); ?></label>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Order images by:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<select id=\"orderby\" name=\"orderby\">\n\t\t\t<option value=\"menu_order\" selected=\"selected\"><?php _e('Menu order'); ?></option>\n\t\t\t<option value=\"title\"><?php _e('Title'); ?></option>\n\t\t\t<option value=\"post_date\"><?php _e('Date/Time'); ?></option>\n\t\t\t<option value=\"rand\"><?php _e('Random'); ?></option>\n\t\t</select>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Order:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<input type=\"radio\" checked=\"checked\" name=\"order\" id=\"order-asc\" value=\"asc\" />\n\t\t<label for=\"order-asc\" class=\"radio\"><?php _e('Ascending'); ?></label>\n\n\t\t<input type=\"radio\" name=\"order\" id=\"order-desc\" value=\"desc\" />\n\t\t<label for=\"order-desc\" class=\"radio\"><?php _e('Descending'); ?></label>\n\t</td>\n\t</tr>\n\n\t<tr>\n\t<th scope=\"row\" class=\"label\">\n\t\t<label>\n\t\t<span class=\"alignleft\"><?php _e('Gallery columns:'); ?></span>\n\t\t</label>\n\t</th>\n\t<td class=\"field\">\n\t\t<select id=\"columns\" name=\"columns\">\n\t\t\t<option value=\"1\">1</option>\n\t\t\t<option value=\"2\">2</option>\n\t\t\t<option value=\"3\" selected=\"selected\">3</option>\n\t\t\t<option value=\"4\">4</option>\n\t\t\t<option value=\"5\">5</option>\n\t\t\t<option value=\"6\">6</option>\n\t\t\t<option value=\"7\">7</option>\n\t\t\t<option value=\"8\">8</option>\n\t\t\t<option value=\"9\">9</option>\n\t\t</select>\n\t</td>\n\t</tr>\n</tbody></table>\n\n<p class=\"ml-submit\">\n<input type=\"button\" class=\"button\" style=\"display:none;\" onMouseDown=\"wpgallery.update();\" name=\"insert-gallery\" id=\"insert-gallery\" value=\"<?php esc_attr_e( 'Insert gallery' ); ?>\" />\n<input type=\"button\" class=\"button\" style=\"display:none;\" onMouseDown=\"wpgallery.update();\" name=\"update-gallery\" id=\"update-gallery\" value=\"<?php esc_attr_e( 'Update gallery settings' ); ?>\" />\n</p>\n</div>\n</form>\n<?php\n}\n\n/**\n * Outputs the legacy media upload form for the media library.\n *\n * @since 2.5.0\n *\n * @global wpdb      $wpdb\n * @global WP_Query  $wp_query\n * @global WP_Locale $wp_locale\n * @global string    $type\n * @global string    $tab\n * @global array     $post_mime_types\n *\n * @param array $errors\n */\nfunction media_upload_library_form($errors) {\n\tglobal $wpdb, $wp_query, $wp_locale, $type, $tab, $post_mime_types;\n\n\tmedia_upload_header();\n\n\t$post_id = isset( $_REQUEST['post_id'] ) ? intval( $_REQUEST['post_id'] ) : 0;\n\n\t$form_action_url = admin_url(\"media-upload.php?type=$type&tab=library&post_id=$post_id\");\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$form_action_url = apply_filters( 'media_upload_form_url', $form_action_url, $type );\n\t$form_class = 'media-upload-form validate';\n\n\tif ( get_user_setting('uploader') )\n\t\t$form_class .= ' html-uploader';\n\n\t$q = $_GET;\n\t$q['posts_per_page'] = 10;\n\t$q['paged'] = isset( $q['paged'] ) ? intval( $q['paged'] ) : 0;\n\tif ( $q['paged'] < 1 ) {\n\t\t$q['paged'] = 1;\n\t}\n\t$q['offset'] = ( $q['paged'] - 1 ) * 10;\n\tif ( $q['offset'] < 1 ) {\n\t\t$q['offset'] = 0;\n\t}\n\n\tlist($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query( $q );\n\n?>\n\n<form id=\"filter\" method=\"get\">\n<input type=\"hidden\" name=\"type\" value=\"<?php echo esc_attr( $type ); ?>\" />\n<input type=\"hidden\" name=\"tab\" value=\"<?php echo esc_attr( $tab ); ?>\" />\n<input type=\"hidden\" name=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n<input type=\"hidden\" name=\"post_mime_type\" value=\"<?php echo isset( $_GET['post_mime_type'] ) ? esc_attr( $_GET['post_mime_type'] ) : ''; ?>\" />\n<input type=\"hidden\" name=\"context\" value=\"<?php echo isset( $_GET['context'] ) ? esc_attr( $_GET['context'] ) : ''; ?>\" />\n\n<p id=\"media-search\" class=\"search-box\">\n\t<label class=\"screen-reader-text\" for=\"media-search-input\"><?php _e('Search Media');?>:</label>\n\t<input type=\"search\" id=\"media-search-input\" name=\"s\" value=\"<?php the_search_query(); ?>\" />\n\t<?php submit_button( __( 'Search Media' ), '', '', false ); ?>\n</p>\n\n<ul class=\"subsubsub\">\n<?php\n$type_links = array();\n$_num_posts = (array) wp_count_attachments();\n$matches = wp_match_mime_types(array_keys($post_mime_types), array_keys($_num_posts));\nforeach ( $matches as $_type => $reals )\n\tforeach ( $reals as $real )\n\t\tif ( isset($num_posts[$_type]) )\n\t\t\t$num_posts[$_type] += $_num_posts[$real];\n\t\telse\n\t\t\t$num_posts[$_type] = $_num_posts[$real];\n// If available type specified by media button clicked, filter by that type\nif ( empty($_GET['post_mime_type']) && !empty($num_posts[$type]) ) {\n\t$_GET['post_mime_type'] = $type;\n\tlist($post_mime_types, $avail_post_mime_types) = wp_edit_attachments_query();\n}\nif ( empty($_GET['post_mime_type']) || $_GET['post_mime_type'] == 'all' )\n\t$class = ' class=\"current\"';\nelse\n\t$class = '';\n$type_links[] = '<li><a href=\"' . esc_url(add_query_arg(array('post_mime_type'=>'all', 'paged'=>false, 'm'=>false))) . '\"' . $class . '>' . __('All Types') . '</a>';\nforeach ( $post_mime_types as $mime_type => $label ) {\n\t$class = '';\n\n\tif ( !wp_match_mime_types($mime_type, $avail_post_mime_types) )\n\t\tcontinue;\n\n\tif ( isset($_GET['post_mime_type']) && wp_match_mime_types($mime_type, $_GET['post_mime_type']) )\n\t\t$class = ' class=\"current\"';\n\n\t$type_links[] = '<li><a href=\"' . esc_url(add_query_arg(array('post_mime_type'=>$mime_type, 'paged'=>false))) . '\"' . $class . '>' . sprintf( translate_nooped_plural( $label[2], $num_posts[$mime_type] ), '<span id=\"' . $mime_type . '-counter\">' . number_format_i18n( $num_posts[$mime_type] ) . '</span>') . '</a>';\n}\n/**\n * Filters the media upload mime type list items.\n *\n * Returned values should begin with an `<li>` tag.\n *\n * @since 3.1.0\n *\n * @param array $type_links An array of list items containing mime type link HTML.\n */\necho implode(' | </li>', apply_filters( 'media_upload_mime_type_links', $type_links ) ) . '</li>';\nunset($type_links);\n?>\n</ul>\n\n<div class=\"tablenav\">\n\n<?php\n$page_links = paginate_links( array(\n\t'base' => add_query_arg( 'paged', '%#%' ),\n\t'format' => '',\n\t'prev_text' => __('&laquo;'),\n\t'next_text' => __('&raquo;'),\n\t'total' => ceil($wp_query->found_posts / 10),\n\t'current' => $q['paged'],\n));\n\nif ( $page_links )\n\techo \"<div class='tablenav-pages'>$page_links</div>\";\n?>\n\n<div class=\"alignleft actions\">\n<?php\n\n$arc_query = \"SELECT DISTINCT YEAR(post_date) AS yyear, MONTH(post_date) AS mmonth FROM $wpdb->posts WHERE post_type = 'attachment' ORDER BY post_date DESC\";\n\n$arc_result = $wpdb->get_results( $arc_query );\n\n$month_count = count($arc_result);\n$selected_month = isset( $_GET['m'] ) ? $_GET['m'] : 0;\n\nif ( $month_count && !( 1 == $month_count && 0 == $arc_result[0]->mmonth ) ) { ?>\n<select name='m'>\n<option<?php selected( $selected_month, 0 ); ?> value='0'><?php _e( 'All dates' ); ?></option>\n<?php\nforeach ($arc_result as $arc_row) {\n\tif ( $arc_row->yyear == 0 )\n\t\tcontinue;\n\t$arc_row->mmonth = zeroise( $arc_row->mmonth, 2 );\n\n\tif ( $arc_row->yyear . $arc_row->mmonth == $selected_month )\n\t\t$default = ' selected=\"selected\"';\n\telse\n\t\t$default = '';\n\n\techo \"<option$default value='\" . esc_attr( $arc_row->yyear . $arc_row->mmonth ) . \"'>\";\n\techo esc_html( $wp_locale->get_month($arc_row->mmonth) . \" $arc_row->yyear\" );\n\techo \"</option>\\n\";\n}\n?>\n</select>\n<?php } ?>\n\n<?php submit_button( __( 'Filter &#187;' ), '', 'post-query-submit', false ); ?>\n\n</div>\n\n<br class=\"clear\" />\n</div>\n</form>\n\n<form enctype=\"multipart/form-data\" method=\"post\" action=\"<?php echo esc_url( $form_action_url ); ?>\" class=\"<?php echo $form_class; ?>\" id=\"library-form\">\n\n<?php wp_nonce_field('media-form'); ?>\n<?php //media_upload_form( $errors ); ?>\n\n<script type=\"text/javascript\">\n<!--\njQuery(function($){\n\tvar preloaded = $(\".media-item.preloaded\");\n\tif ( preloaded.length > 0 ) {\n\t\tpreloaded.each(function(){prepareMediaItem({id:this.id.replace(/[^0-9]/g, '')},'');});\n\t\tupdateMediaForm();\n\t}\n});\n-->\n</script>\n\n<div id=\"media-items\">\n<?php add_filter('attachment_fields_to_edit', 'media_post_single_attachment_fields_to_edit', 10, 2); ?>\n<?php echo get_media_items(null, $errors); ?>\n</div>\n<p class=\"ml-submit\">\n<?php submit_button( __( 'Save all changes' ), 'savebutton', 'save', false ); ?>\n<input type=\"hidden\" name=\"post_id\" id=\"post_id\" value=\"<?php echo (int) $post_id; ?>\" />\n</p>\n</form>\n<?php\n}\n\n/**\n * Creates the form for external url\n *\n * @since 2.7.0\n *\n * @param string $default_view\n * @return string the form html\n */\nfunction wp_media_insert_url_form( $default_view = 'image' ) {\n\t/** This filter is documented in wp-admin/includes/media.php */\n\tif ( ! apply_filters( 'disable_captions', '' ) ) {\n\t\t$caption = '\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"caption\"><span class=\"alignleft\">' . __('Image Caption') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><textarea id=\"caption\" name=\"caption\"></textarea></td>\n\t\t</tr>\n';\n\t} else {\n\t\t$caption = '';\n\t}\n\n\t$default_align = get_option('image_default_align');\n\tif ( empty($default_align) )\n\t\t$default_align = 'none';\n\n\tif ( 'image' == $default_view ) {\n\t\t$view = 'image-only';\n\t\t$table_class = '';\n\t} else {\n\t\t$view = $table_class = 'not-image';\n\t}\n\n\treturn '\n\t<p class=\"media-types\"><label><input type=\"radio\" name=\"media_type\" value=\"image\" id=\"image-only\"' . checked( 'image-only', $view, false ) . ' /> ' . __( 'Image' ) . '</label> &nbsp; &nbsp; <label><input type=\"radio\" name=\"media_type\" value=\"generic\" id=\"not-image\"' . checked( 'not-image', $view, false ) . ' /> ' . __( 'Audio, Video, or Other File' ) . '</label></p>\n\t<p class=\"media-types media-types-required-info\">' . sprintf( __( 'Required fields are marked %s' ), '<span class=\"required\">*</span>' ) . '</p>\n\t<table class=\"describe ' . $table_class . '\"><tbody>\n\t\t<tr>\n\t\t\t<th scope=\"row\" class=\"label\" style=\"width:130px;\">\n\t\t\t\t<label for=\"src\"><span class=\"alignleft\">' . __( 'URL' ) . '</span> <span class=\"required\">*</span></label>\n\t\t\t\t<span class=\"alignright\" id=\"status_img\"></span>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"src\" name=\"src\" value=\"\" type=\"text\" required aria-required=\"true\" onblur=\"addExtImage.getImageData()\" /></td>\n\t\t</tr>\n\n\t\t<tr>\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"title\"><span class=\"alignleft\">' . __( 'Title' ) . '</span> <span class=\"required\">*</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"title\" name=\"title\" value=\"\" type=\"text\" required aria-required=\"true\" /></td>\n\t\t</tr>\n\n\t\t<tr class=\"not-image\"><td></td><td><p class=\"help\">' . __('Link text, e.g. &#8220;Ransom Demands (PDF)&#8221;') . '</p></td></tr>\n\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"alt\"><span class=\"alignleft\">' . __('Alternative Text') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"alt\" name=\"alt\" value=\"\" type=\"text\" aria-required=\"true\" />\n\t\t\t<p class=\"help\">' . __('Alt text for the image, e.g. &#8220;The Mona Lisa&#8221;') . '</p></td>\n\t\t</tr>\n\t\t' . $caption . '\n\t\t<tr class=\"align image-only\">\n\t\t\t<th scope=\"row\" class=\"label\"><p><label for=\"align\">' . __('Alignment') . '</label></p></th>\n\t\t\t<td class=\"field\">\n\t\t\t\t<input name=\"align\" id=\"align-none\" value=\"none\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'none' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-none\" class=\"align image-align-none-label\">' . __('None') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-left\" value=\"left\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'left' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-left\" class=\"align image-align-left-label\">' . __('Left') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-center\" value=\"center\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'center' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-center\" class=\"align image-align-center-label\">' . __('Center') . '</label>\n\t\t\t\t<input name=\"align\" id=\"align-right\" value=\"right\" onclick=\"addExtImage.align=\\'align\\'+this.value\" type=\"radio\"' . ($default_align == 'right' ? ' checked=\"checked\"' : '').' />\n\t\t\t\t<label for=\"align-right\" class=\"align image-align-right-label\">' . __('Right') . '</label>\n\t\t\t</td>\n\t\t</tr>\n\n\t\t<tr class=\"image-only\">\n\t\t\t<th scope=\"row\" class=\"label\">\n\t\t\t\t<label for=\"url\"><span class=\"alignleft\">' . __('Link Image To:') . '</span></label>\n\t\t\t</th>\n\t\t\t<td class=\"field\"><input id=\"url\" name=\"url\" value=\"\" type=\"text\" /><br />\n\n\t\t\t<button type=\"button\" class=\"button\" value=\"\" onclick=\"document.forms[0].url.value=null\">' . __('None') . '</button>\n\t\t\t<button type=\"button\" class=\"button\" value=\"\" onclick=\"document.forms[0].url.value=document.forms[0].src.value\">' . __('Link to image') . '</button>\n\t\t\t<p class=\"help\">' . __('Enter a link URL or click above for presets.') . '</p></td>\n\t\t</tr>\n\t\t<tr class=\"image-only\">\n\t\t\t<td></td>\n\t\t\t<td>\n\t\t\t\t<input type=\"button\" class=\"button\" id=\"go_button\" style=\"color:#bbb;\" onclick=\"addExtImage.insert()\" value=\"' . esc_attr__('Insert into Post') . '\" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr class=\"not-image\">\n\t\t\t<td></td>\n\t\t\t<td>\n\t\t\t\t' . get_submit_button( __( 'Insert into Post' ), '', 'insertonlybutton', false ) . '\n\t\t\t</td>\n\t\t</tr>\n\t</tbody></table>\n';\n\n}\n\n/**\n * Displays the multi-file uploader message.\n *\n * @since 2.6.0\n *\n * @global int $post_ID\n */\nfunction media_upload_flash_bypass() {\n\t$browser_uploader = admin_url( 'media-new.php?browser-uploader' );\n\n\tif ( $post = get_post() )\n\t\t$browser_uploader .= '&amp;post_id=' . intval( $post->ID );\n\telseif ( ! empty( $GLOBALS['post_ID'] ) )\n\t\t$browser_uploader .= '&amp;post_id=' . intval( $GLOBALS['post_ID'] );\n\n\t?>\n\t<p class=\"upload-flash-bypass\">\n\t<?php printf( __( 'You are using the multi-file uploader. Problems? Try the <a href=\"%1$s\" target=\"%2$s\">browser uploader</a> instead.' ), $browser_uploader, '_blank' ); ?>\n\t</p>\n\t<?php\n}\n\n/**\n * Displays the browser's built-in uploader message.\n *\n * @since 2.6.0\n */\nfunction media_upload_html_bypass() {\n\t?>\n\t<p class=\"upload-html-bypass hide-if-no-js\">\n\t   <?php _e('You are using the browser&#8217;s built-in file uploader. The WordPress uploader includes multiple file selection and drag and drop capability. <a href=\"#\">Switch to the multi-file uploader</a>.'); ?>\n\t</p>\n\t<?php\n}\n\n/**\n * Used to display a \"After a file has been uploaded...\" help message.\n *\n * @since 3.3.0\n */\nfunction media_upload_text_after() {}\n\n/**\n * Displays the checkbox to scale images.\n *\n * @since 3.3.0\n */\nfunction media_upload_max_image_resize() {\n\t$checked = get_user_setting('upload_resize') ? ' checked=\"true\"' : '';\n\t$a = $end = '';\n\n\tif ( current_user_can( 'manage_options' ) ) {\n\t\t$a = '<a href=\"' . esc_url( admin_url( 'options-media.php' ) ) . '\" target=\"_blank\">';\n\t\t$end = '</a>';\n\t}\n?>\n<p class=\"hide-if-no-js\"><label>\n<input name=\"image_resize\" type=\"checkbox\" id=\"image_resize\" value=\"true\"<?php echo $checked; ?> />\n<?php\n\t/* translators: %1$s is link start tag, %2$s is link end tag, %3$d is width, %4$d is height*/\n\tprintf( __( 'Scale images to match the large size selected in %1$simage options%2$s (%3$d &times; %4$d).' ), $a, $end, (int) get_option( 'large_size_w', '1024' ), (int) get_option( 'large_size_h', '1024' ) );\n?>\n</label></p>\n<?php\n}\n\n/**\n * Displays the out of storage quota message in Multisite.\n *\n * @since 3.5.0\n */\nfunction multisite_over_quota_message() {\n\techo '<p>' . sprintf( __( 'Sorry, you have used all of your storage quota of %s MB.' ), get_space_allowed() ) . '</p>';\n}\n\n/**\n * Displays the image and editor in the post editor\n *\n * @since 3.5.0\n *\n * @param WP_Post $post A post object.\n */\nfunction edit_form_image_editor( $post ) {\n\t$open = isset( $_GET['image-editor'] );\n\tif ( $open )\n\t\trequire_once ABSPATH . 'wp-admin/includes/image-edit.php';\n\n\t$thumb_url = false;\n\tif ( $attachment_id = intval( $post->ID ) )\n\t\t$thumb_url = wp_get_attachment_image_src( $attachment_id, array( 900, 450 ), true );\n\n\t$alt_text = get_post_meta( $post->ID, '_wp_attachment_image_alt', true );\n\n\t$att_url = wp_get_attachment_url( $post->ID ); ?>\n\t<div class=\"wp_attachment_holder wp-clearfix\">\n\t<?php\n\tif ( wp_attachment_is_image( $post->ID ) ) :\n\t\t$image_edit_button = '';\n\t\tif ( wp_image_editor_supports( array( 'mime_type' => $post->post_mime_type ) ) ) {\n\t\t\t$nonce = wp_create_nonce( \"image_editor-$post->ID\" );\n\t\t\t$image_edit_button = \"<input type='button' id='imgedit-open-btn-$post->ID' onclick='imageEdit.open( $post->ID, \\\"$nonce\\\" )' class='button' value='\" . esc_attr__( 'Edit Image' ) . \"' /> <span class='spinner'></span>\";\n\t\t}\n\t?>\n\n\t\t<div class=\"imgedit-response\" id=\"imgedit-response-<?php echo $attachment_id; ?>\"></div>\n\n\t\t<div<?php if ( $open ) echo ' style=\"display:none\"'; ?> class=\"wp_attachment_image wp-clearfix\" id=\"media-head-<?php echo $attachment_id; ?>\">\n\t\t\t<p id=\"thumbnail-head-<?php echo $attachment_id; ?>\"><img class=\"thumbnail\" src=\"<?php echo set_url_scheme( $thumb_url[0] ); ?>\" style=\"max-width:100%\" alt=\"\" /></p>\n\t\t\t<p><?php echo $image_edit_button; ?></p>\n\t\t</div>\n\t\t<div<?php if ( ! $open ) echo ' style=\"display:none\"'; ?> class=\"image-editor\" id=\"image-editor-<?php echo $attachment_id; ?>\">\n\t\t\t<?php if ( $open ) wp_image_editor( $attachment_id ); ?>\n\t\t</div>\n\t<?php\n\telseif ( $attachment_id && wp_attachment_is( 'audio', $post ) ):\n\n\t\twp_maybe_generate_attachment_metadata( $post );\n\n\t\techo wp_audio_shortcode( array( 'src' => $att_url ) );\n\n\telseif ( $attachment_id && wp_attachment_is( 'video', $post ) ):\n\n\t\twp_maybe_generate_attachment_metadata( $post );\n\n\t\t$meta = wp_get_attachment_metadata( $attachment_id );\n\t\t$w = ! empty( $meta['width'] ) ? min( $meta['width'], 640 ) : 0;\n\t\t$h = ! empty( $meta['height'] ) ? $meta['height'] : 0;\n\t\tif ( $h && $w < $meta['width'] ) {\n\t\t\t$h = round( ( $meta['height'] * $w ) / $meta['width'] );\n\t\t}\n\n\t\t$attr = array( 'src' => $att_url );\n\t\tif ( ! empty( $w ) && ! empty( $h ) ) {\n\t\t\t$attr['width'] = $w;\n\t\t\t$attr['height'] = $h;\n\t\t}\n\n\t\t$thumb_id = get_post_thumbnail_id( $attachment_id );\n\t\tif ( ! empty( $thumb_id ) ) {\n\t\t\t$attr['poster'] = wp_get_attachment_url( $thumb_id );\n\t\t}\n\n\t\techo wp_video_shortcode( $attr );\n\n\telseif ( isset( $thumb_url[0] ) ):\n\n\t\t?>\n\t\t<div class=\"wp_attachment_image wp-clearfix\" id=\"media-head-<?php echo $attachment_id; ?>\">\n\t\t\t<p id=\"thumbnail-head-<?php echo $attachment_id; ?>\">\n\t\t\t\t<img class=\"thumbnail\" src=\"<?php echo set_url_scheme( $thumb_url[0] ); ?>\" style=\"max-width:100%\" alt=\"\" />\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\n\telse:\n\n\t\t/**\n\t\t * Fires when an attachment type can't be rendered in the edit form.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param WP_Post $post A post object.\n\t\t */\n\t\tdo_action( 'wp_edit_form_attachment_display', $post );\n\n\tendif; ?>\n\t</div>\n\t<div class=\"wp_attachment_details edit-form-section\">\n\t\t<p>\n\t\t\t<label for=\"attachment_caption\"><strong><?php _e( 'Caption' ); ?></strong></label><br />\n\t\t\t<textarea class=\"widefat\" name=\"excerpt\" id=\"attachment_caption\"><?php echo $post->post_excerpt; ?></textarea>\n\t\t</p>\n\n\n\t<?php if ( 'image' === substr( $post->post_mime_type, 0, 5 ) ) : ?>\n\t\t<p>\n\t\t\t<label for=\"attachment_alt\"><strong><?php _e( 'Alternative Text' ); ?></strong></label><br />\n\t\t\t<input type=\"text\" class=\"widefat\" name=\"_wp_attachment_image_alt\" id=\"attachment_alt\" value=\"<?php echo esc_attr( $alt_text ); ?>\" />\n\t\t</p>\n\t<?php endif; ?>\n\n\t<?php\n\t\t$quicktags_settings = array( 'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,close' );\n\t\t$editor_args = array(\n\t\t\t'textarea_name' => 'content',\n\t\t\t'textarea_rows' => 5,\n\t\t\t'media_buttons' => false,\n\t\t\t'tinymce' => false,\n\t\t\t'quicktags' => $quicktags_settings,\n\t\t);\n\t?>\n\n\t<label for=\"attachment_content\"><strong><?php _e( 'Description' ); ?></strong><?php\n\tif ( preg_match( '#^(audio|video)/#', $post->post_mime_type ) ) {\n\t\techo ': ' . __( 'Displayed on attachment pages.' );\n\t} ?></label>\n\t<?php wp_editor( $post->post_content, 'attachment_content', $editor_args ); ?>\n\n\t</div>\n\t<?php\n\t$extras = get_compat_media_markup( $post->ID );\n\techo $extras['item'];\n\techo '<input type=\"hidden\" id=\"image-edit-context\" value=\"edit-attachment\" />' . \"\\n\";\n}\n\n/**\n * Displays non-editable attachment metadata in the publish meta box.\n *\n * @since 3.5.0\n */\nfunction attachment_submitbox_metadata() {\n\t$post = get_post();\n\n\t$file = get_attached_file( $post->ID );\n\t$filename = esc_html( wp_basename( $file ) );\n\n\t$media_dims = '';\n\t$meta = wp_get_attachment_metadata( $post->ID );\n\tif ( isset( $meta['width'], $meta['height'] ) )\n\t\t$media_dims .= \"<span id='media-dims-$post->ID'>{$meta['width']}&nbsp;&times;&nbsp;{$meta['height']}</span> \";\n\t/** This filter is documented in wp-admin/includes/media.php */\n\t$media_dims = apply_filters( 'media_meta', $media_dims, $post );\n\n\t$att_url = wp_get_attachment_url( $post->ID );\n?>\n\t<div class=\"misc-pub-section misc-pub-attachment\">\n\t\t<label for=\"attachment_url\"><?php _e( 'File URL:' ); ?></label>\n\t\t<input type=\"text\" class=\"widefat urlfield\" readonly=\"readonly\" name=\"attachment_url\" id=\"attachment_url\" value=\"<?php echo esc_attr( $att_url ); ?>\" />\n\t</div>\n\t<div class=\"misc-pub-section misc-pub-filename\">\n\t\t<?php _e( 'File name:' ); ?> <strong><?php echo $filename; ?></strong>\n\t</div>\n\t<div class=\"misc-pub-section misc-pub-filetype\">\n\t\t<?php _e( 'File type:' ); ?> <strong><?php\n\t\t\tif ( preg_match( '/^.*?\\.(\\w+)$/', get_attached_file( $post->ID ), $matches ) ) {\n\t\t\t\techo esc_html( strtoupper( $matches[1] ) );\n\t\t\t\tlist( $mime_type ) = explode( '/', $post->post_mime_type );\n\t\t\t\tif ( $mime_type !== 'image' && ! empty( $meta['mime_type'] ) ) {\n\t\t\t\t\tif ( $meta['mime_type'] !== \"$mime_type/\" . strtolower( $matches[1] ) ) {\n\t\t\t\t\t\techo ' (' . $meta['mime_type'] . ')';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\techo strtoupper( str_replace( 'image/', '', $post->post_mime_type ) );\n\t\t\t}\n\t\t?></strong>\n\t</div>\n\n\t<?php\n\t\t$file_size = false;\n\n\t\tif ( isset( $meta['filesize'] ) )\n\t\t\t$file_size = $meta['filesize'];\n\t\telseif ( file_exists( $file ) )\n\t\t\t$file_size = filesize( $file );\n\n\t\tif ( ! empty( $file_size ) ) : ?>\n\t\t\t<div class=\"misc-pub-section misc-pub-filesize\">\n\t\t\t\t<?php _e( 'File size:' ); ?> <strong><?php echo size_format( $file_size ); ?></strong>\n\t\t\t</div>\n\t\t\t<?php\n\t\tendif;\n\n\tif ( preg_match( '#^(audio|video)/#', $post->post_mime_type ) ) {\n\n\t\t/**\n\t\t * Filters the audio and video metadata fields to be shown in the publish meta box.\n\t\t *\n\t\t * The key for each item in the array should correspond to an attachment\n\t\t * metadata key, and the value should be the desired label.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param array $fields An array of the attachment metadata keys and labels.\n\t\t */\n\t\t$fields = apply_filters( 'media_submitbox_misc_sections', array(\n\t\t\t'length_formatted' => __( 'Length:' ),\n\t\t\t'bitrate'          => __( 'Bitrate:' ),\n\t\t) );\n\n\t\tforeach ( $fields as $key => $label ) {\n\t\t\tif ( empty( $meta[ $key ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t?>\n\t\t<div class=\"misc-pub-section misc-pub-mime-meta misc-pub-<?php echo sanitize_html_class( $key ); ?>\">\n\t\t\t<?php echo $label ?> <strong><?php\n\t\t\t\tswitch ( $key ) {\n\t\t\t\t\tcase 'bitrate' :\n\t\t\t\t\t\techo round( $meta['bitrate'] / 1000 ) . 'kb/s';\n\t\t\t\t\t\tif ( ! empty( $meta['bitrate_mode'] ) ) {\n\t\t\t\t\t\t\techo ' ' . strtoupper( esc_html( $meta['bitrate_mode'] ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\techo esc_html( $meta[ $key ] );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t?></strong>\n\t\t</div>\n\t<?php\n\t\t}\n\n\t\t/**\n\t\t * Filters the audio attachment metadata fields to be shown in the publish meta box.\n\t\t *\n\t\t * The key for each item in the array should correspond to an attachment\n\t\t * metadata key, and the value should be the desired label.\n\t\t *\n\t\t * @since 3.7.0\n\t\t *\n\t\t * @param array $fields An array of the attachment metadata keys and labels.\n\t\t */\n\t\t$audio_fields = apply_filters( 'audio_submitbox_misc_sections', array(\n\t\t\t'dataformat' => __( 'Audio Format:' ),\n\t\t\t'codec'      => __( 'Audio Codec:' )\n\t\t) );\n\n\t\tforeach ( $audio_fields as $key => $label ) {\n\t\t\tif ( empty( $meta['audio'][ $key ] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t?>\n\t\t<div class=\"misc-pub-section misc-pub-audio misc-pub-<?php echo sanitize_html_class( $key ); ?>\">\n\t\t\t<?php echo $label; ?> <strong><?php echo esc_html( $meta['audio'][$key] ); ?></strong>\n\t\t</div>\n\t<?php\n\t\t}\n\n\t}\n\n\tif ( $media_dims ) : ?>\n\t<div class=\"misc-pub-section misc-pub-dimensions\">\n\t\t<?php _e( 'Dimensions:' ); ?> <strong><?php echo $media_dims; ?></strong>\n\t</div>\n<?php\n\tendif;\n}\n\n/**\n * Parse ID3v2, ID3v1, and getID3 comments to extract usable data\n *\n * @since 3.6.0\n *\n * @param array $metadata An existing array with data\n * @param array $data Data supplied by ID3 tags\n */\nfunction wp_add_id3_tag_data( &$metadata, $data ) {\n\tforeach ( array( 'id3v2', 'id3v1' ) as $version ) {\n\t\tif ( ! empty( $data[$version]['comments'] ) ) {\n\t\t\tforeach ( $data[$version]['comments'] as $key => $list ) {\n\t\t\t\tif ( 'length' !== $key && ! empty( $list ) ) {\n\t\t\t\t\t$metadata[$key] = reset( $list );\n\t\t\t\t\t// Fix bug in byte stream analysis.\n\t\t\t\t\tif ( 'terms_of_use' === $key && 0 === strpos( $metadata[$key], 'yright notice.' ) )\n\t\t\t\t\t\t$metadata[$key] = 'Cop' . $metadata[$key];\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif ( ! empty( $data['id3v2']['APIC'] ) ) {\n\t\t$image = reset( $data['id3v2']['APIC']);\n\t\tif ( ! empty( $image['data'] ) ) {\n\t\t\t$metadata['image'] = array(\n\t\t\t\t'data' => $image['data'],\n\t\t\t\t'mime' => $image['image_mime'],\n\t\t\t\t'width' => $image['image_width'],\n\t\t\t\t'height' => $image['image_height']\n\t\t\t);\n\t\t}\n\t} elseif ( ! empty( $data['comments']['picture'] ) ) {\n\t\t$image = reset( $data['comments']['picture'] );\n\t\tif ( ! empty( $image['data'] ) ) {\n\t\t\t$metadata['image'] = array(\n\t\t\t\t'data' => $image['data'],\n\t\t\t\t'mime' => $image['image_mime']\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Retrieve metadata from a video file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n */\nfunction wp_read_video_metadata( $file ) {\n\tif ( ! file_exists( $file ) ) {\n\t\treturn false;\n\t}\n\n\t$metadata = array();\n\n\tif ( ! defined( 'GETID3_TEMP_DIR' ) ) {\n\t\tdefine( 'GETID3_TEMP_DIR', get_temp_dir() );\n\t}\n\n\tif ( ! class_exists( 'getID3', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/ID3/getid3.php' );\n\t}\n\t$id3 = new getID3();\n\t$data = $id3->analyze( $file );\n\n\tif ( isset( $data['video']['lossless'] ) )\n\t\t$metadata['lossless'] = $data['video']['lossless'];\n\tif ( ! empty( $data['video']['bitrate'] ) )\n\t\t$metadata['bitrate'] = (int) $data['video']['bitrate'];\n\tif ( ! empty( $data['video']['bitrate_mode'] ) )\n\t\t$metadata['bitrate_mode'] = $data['video']['bitrate_mode'];\n\tif ( ! empty( $data['filesize'] ) )\n\t\t$metadata['filesize'] = (int) $data['filesize'];\n\tif ( ! empty( $data['mime_type'] ) )\n\t\t$metadata['mime_type'] = $data['mime_type'];\n\tif ( ! empty( $data['playtime_seconds'] ) )\n\t\t$metadata['length'] = (int) round( $data['playtime_seconds'] );\n\tif ( ! empty( $data['playtime_string'] ) )\n\t\t$metadata['length_formatted'] = $data['playtime_string'];\n\tif ( ! empty( $data['video']['resolution_x'] ) )\n\t\t$metadata['width'] = (int) $data['video']['resolution_x'];\n\tif ( ! empty( $data['video']['resolution_y'] ) )\n\t\t$metadata['height'] = (int) $data['video']['resolution_y'];\n\tif ( ! empty( $data['fileformat'] ) )\n\t\t$metadata['fileformat'] = $data['fileformat'];\n\tif ( ! empty( $data['video']['dataformat'] ) )\n\t\t$metadata['dataformat'] = $data['video']['dataformat'];\n\tif ( ! empty( $data['video']['encoder'] ) )\n\t\t$metadata['encoder'] = $data['video']['encoder'];\n\tif ( ! empty( $data['video']['codec'] ) )\n\t\t$metadata['codec'] = $data['video']['codec'];\n\n\tif ( ! empty( $data['audio'] ) ) {\n\t\tunset( $data['audio']['streams'] );\n\t\t$metadata['audio'] = $data['audio'];\n\t}\n\n\twp_add_id3_tag_data( $metadata, $data );\n\n\t$metadata = wp_kses_post_deep( $metadata );\n\n\treturn $metadata;\n}\n\n/**\n * Retrieve metadata from a audio file's ID3 tags\n *\n * @since 3.6.0\n *\n * @param string $file Path to file.\n * @return array|bool Returns array of metadata, if found.\n */\nfunction wp_read_audio_metadata( $file ) {\n\tif ( ! file_exists( $file ) ) {\n\t\treturn false;\n\t}\n\t$metadata = array();\n\n\tif ( ! defined( 'GETID3_TEMP_DIR' ) ) {\n\t\tdefine( 'GETID3_TEMP_DIR', get_temp_dir() );\n\t}\n\n\tif ( ! class_exists( 'getID3', false ) ) {\n\t\trequire( ABSPATH . WPINC . '/ID3/getid3.php' );\n\t}\n\t$id3 = new getID3();\n\t$data = $id3->analyze( $file );\n\n\tif ( ! empty( $data['audio'] ) ) {\n\t\tunset( $data['audio']['streams'] );\n\t\t$metadata = $data['audio'];\n\t}\n\n\tif ( ! empty( $data['fileformat'] ) )\n\t\t$metadata['fileformat'] = $data['fileformat'];\n\tif ( ! empty( $data['filesize'] ) )\n\t\t$metadata['filesize'] = (int) $data['filesize'];\n\tif ( ! empty( $data['mime_type'] ) )\n\t\t$metadata['mime_type'] = $data['mime_type'];\n\tif ( ! empty( $data['playtime_seconds'] ) )\n\t\t$metadata['length'] = (int) round( $data['playtime_seconds'] );\n\tif ( ! empty( $data['playtime_string'] ) )\n\t\t$metadata['length_formatted'] = $data['playtime_string'];\n\n\twp_add_id3_tag_data( $metadata, $data );\n\n\t$metadata = wp_kses_post_deep( $metadata );\n\n\treturn $metadata;\n}\n\n/**\n * Encapsulate logic for Attach/Detach actions\n *\n * @since 4.2.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param int    $parent_id Attachment parent ID.\n * @param string $action    Optional. Attach/detach action. Accepts 'attach' or 'detach'.\n *                          Default 'attach'.\n */\nfunction wp_media_attach_action( $parent_id, $action = 'attach' ) {\n\tglobal $wpdb;\n\n\tif ( ! $parent_id ) {\n\t\treturn;\n\t}\n\n\tif ( ! current_user_can( 'edit_post', $parent_id ) ) {\n\t\twp_die( __( 'Sorry, you are not allowed to edit this post.' ) );\n\t}\n\t$ids = array();\n\tforeach ( (array) $_REQUEST['media'] as $att_id ) {\n\t\t$att_id = (int) $att_id;\n\n\t\tif ( ! current_user_can( 'edit_post', $att_id ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$ids[] = $att_id;\n\t}\n\n\tif ( ! empty( $ids ) ) {\n\t\t$ids_string = implode( ',', $ids );\n\t\tif ( 'attach' === $action ) {\n\t\t\t$result = $wpdb->query( $wpdb->prepare( \"UPDATE $wpdb->posts SET post_parent = %d WHERE post_type = 'attachment' AND ID IN ( $ids_string )\", $parent_id ) );\n\t\t} else {\n\t\t\t$result = $wpdb->query( \"UPDATE $wpdb->posts SET post_parent = 0 WHERE post_type = 'attachment' AND ID IN ( $ids_string )\" );\n\t\t}\n\n\t\tforeach ( $ids as $att_id ) {\n\t\t\tclean_attachment_cache( $att_id );\n\t\t}\n\t}\n\n\tif ( isset( $result ) ) {\n\t\t$location = 'upload.php';\n\t\tif ( $referer = wp_get_referer() ) {\n\t\t\tif ( false !== strpos( $referer, 'upload.php' ) ) {\n\t\t\t\t$location = remove_query_arg( array( 'attached', 'detach' ), $referer );\n\t\t\t}\n\t\t}\n\n\t\t$key = 'attach' === $action ? 'attached' : 'detach';\n\t\t$location = add_query_arg( array( $key => $result ), $location );\n\t\twp_redirect( $location );\n\t\texit;\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40148';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/media.php", "wp-includes/version.php"], "buggy_code_start_loc": [3074, 7], "buggy_code_end_loc": [3119, 8], "fixing_code_start_loc": [3075, 7], "fixing_code_end_loc": [3124, 8], "type": "CWE-79", "message": "In WordPress before 4.7.3, there is authenticated Cross-Site Scripting (XSS) via Media File Metadata. This is demonstrated by both (1) mishandling of the playlist shortcode in the wp_playlist_shortcode function in wp-includes/media.php and (2) mishandling of meta information in the renderTracks function in wp-includes/js/mediaelement/wp-playlist.js.", "other": {"cve": {"id": "CVE-2017-6814", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-12T01:59:00.160", "lastModified": "2019-03-19T13:24:11.070", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.3, there is authenticated Cross-Site Scripting (XSS) via Media File Metadata. This is demonstrated by both (1) mishandling of the playlist shortcode in the wp_playlist_shortcode function in wp-includes/media.php and (2) mishandling of meta information in the renderTracks function in wp-includes/js/mediaelement/wp-playlist.js."}, {"lang": "es", "value": "En WordPress en versiones anteriores a 4.7.3, hay XSS autenticada a trav\u00e9s de Media File Metadata. Esto es demostrado tanto por (1) mal manejo de la playlist shortcode en la funci\u00f3n wp_playlist_shortcode en wp-includes/media.php y (2) mal manejo de de meta informaci\u00f3n en la funci\u00f3n renderTracks en wp-includes/js/mediaelement/wp-playlist.js."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.2", "matchCriteriaId": "5A557EFF-02E2-499A-AA55-15F43DB9D820"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/03/06/8", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://www.debian.org/security/2017/dsa-3815", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96601", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037959", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/28f838ca3ee205b6f39cd2bf23eb4e5f52796bd7", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://sumofpwn.nl/advisory/2016/wordpress_audio_playlist_functionality_is_affected_by_cross_site_scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8765", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/28f838ca3ee205b6f39cd2bf23eb4e5f52796bd7"}}