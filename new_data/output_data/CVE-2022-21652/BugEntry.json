{"buggy_code": ["# CHANGELOG for Shopware 5.7.x\n\nThis changelog references changes done in Shopware 5.7 patch versions.\n\n## 5.7.7\n\n[View all changes from v5.7.6...v5.7.7](https://github.com/shopware/shopware/compare/v5.7.5...v5.7.6)\n\n### Deprecations\n\n* Deprecated `\\Shopware_Controllers_Frontend_Checkout::getTaxRates`, it will be removed in the next minor version v5.8.\nUse `TaxAggregator::taxSum` instead.\n\n### Additions\n\n* Added `\\Shopware\\Components\\Cart\\TaxAggregatorInterface`\n* Added `\\Shopware\\Components\\Cart\\TaxAggregator` as a default implementation, extracting the tax aggregation logic from the checkout controller\n* Added a new component to the update process. The `.htaccess`-file now contains a section dedicated to the Shopware core.\n* Added new polyfill dependencies which were indirect dependencies before\n  * `symfony/polyfill-php80` version 1.23.1\n  * `symfony/polyfill-php81` version 1.23.0\n\n### Changes\n\n* Changed `\\Shopware_Controllers_Frontend_Checkout::getTaxRates`, this method uses the `TaxAggregator::taxSum` now\n* Changed `\\Shopware_Models_Document_Order::processOrder`, this method uses the `TaxAggregator::shippingCostsTaxSum` method now\n* Changed `\\Shopware_Models_Document_Order::processPositions`, this method uses the `TaxAggregator::positionsTaxSum` method now\n* Updated `league/flysystem` to version 1.1.6\n* Updated `symfony/config` to version 4.4.34\n* Updated `symfony/console` to version 4.4.34\n* Updated `symfony/dependency-injection` to version 4.4.34\n* Updated `symfony/expression-language` to version 4.4.34\n* Updated `symfony/form` to version 4.4.34\n* Updated `symfony/http-foundation` to version 4.4.34\n* Updated `symfony/http-kernel` to version 4.4.34\n* Updated `symfony/process` to version 4.4.34\n* Updated `symfony/serializer` to version 5.3.12\n* Updated `symfony/validator` to version 4.4.34\n* Updated several indirect dependencies\n\n### Removals\n\n* Removed deprecated composer dependency `symfony/class-loader`. Use Composer ClassLoader instead\n\n## 5.7.6\n\n[View all changes from v5.7.5...v5.7.6](https://github.com/shopware/shopware/compare/v5.7.5...v5.7.6)\n\n### Additions\n\n* Added a new CSP directive to the default `.htaccess`\n\n## 5.7.5\n\n[View all changes from v5.7.4...v5.7.5](https://github.com/shopware/shopware/compare/v5.7.4...v5.7.5)\n\n## 5.7.4\n\n[View all changes from v5.7.3...v5.7.4](https://github.com/shopware/shopware/compare/v5.7.3...v5.7.4)\n\n### Deprecations\n\n* Deprecated `ajaxValidateEmailAction`. It will be removed in Shopware 5.8 with no replacement.\n\n### Additions\n\n* Added filter event `Shopware_Controllers_Order_OpenPdf_FilterName` to `Shopware_Controllers_Backend_Order::openPdfAction()`\n* Added new composer dependency `psr/http-message`\n* Added new parameter `rowIndex` to `Shopware_Modules_Export_ExportResult_Filter_Fixed` event\n\n### Breaks\n\n* In case you have extended the `frontend_listing_actions_filter` block to override the \"include\" of the button template,\nplease extend the `frontend_listing_actions_filter_include` block from now on instead.\n\n### Changes\n\n* Changed `themes/Frontend/Bare/frontend/listing/listing_actions.tpl` to remove a duplicate name entry\n* Updated TinyMCE to version 3.5.12\n* Updated `bcremer/line-reader` to version 1.1.0\n* Updated `beberlei/assert` to version 3.3.1\n* Updated `beberlei/doctrineextensions` to version 1.3.0\n* Updated `doctrine/cache` to version 1.12.1\n* Updated `doctrine/collections` to version 1.6.8\n* Updated `doctrine/common` to version 3.1.2\n* Updated `doctrine/dbal` to version 2.13.4\n* Updated `doctrine/orm` to version 2.9.5\n* Updated `doctrine/persistence` to version 2.2.2\n* Updated `guzzlehttp/guzzle` to version 7.3.0\n* Updated `guzzlehttp/psr7` to version 1.8.2\n* Updated `laminas/laminas-code` to version 4.4.3\n* Updated `.aminas/laminas-escaper` to version 2.9.0\n* Updated `mpdf/mpdf` to version 8.0.13\n* Updated `ocramius/proxy-manager` to version 2.13.0\n* Updated `ongr/elasticsearch-dsl` to version 7.2.2\n* Updated `setasign/fpdf` to version 1.8.4\n* Updated `setasign/fpdi` to version 2.3.6\n* Updated `symfony/serializer` to version 5.3.8\n* Updated `friends-of-behat/mink-extension` to version 2.5.0\n* Updated `sensiolabs/behat-page-object-extension` to version 2.3.3\n* Changed several Doctrine types to better match the database type or to improve understanding their purpose\n  * \\Shopware\\Models\\Article\\Configurator\\PriceVariation::$variation\n  * \\Shopware\\Models\\Article\\Detail::$purchasePrice\n  * \\Shopware\\Models\\Article\\Price::$percent\n  * \\Shopware\\Models\\Blog\\Comment::$points\n  * \\Shopware\\Models\\Country\\Country::$taxFree\n  * \\Shopware\\Models\\Country\\Country::$taxFreeUstId\n  * \\Shopware\\Models\\Country\\Country::$taxFreeUstIdChecked\n  * \\Shopware\\Models\\Emotion\\Emotion::$active\n  * \\Shopware\\Models\\Emotion\\Emotion::$fullscreen\n  * \\Shopware\\Models\\Emotion\\Emotion::$isLandingPage\n  * \\Shopware\\Models\\Newsletter\\ContainerType\\Article::$position\n  * \\Shopware\\Models\\Order\\Order::$invoiceShippingTaxRate\n  * \\Shopware\\Models\\Premium\\Premium::$startPrice\n  * \\Shopware\\Models\\Tax\\Rule::$tax\n\n### Removals\n\n* Removed unused composer dependency `php-http/message`\n\n## 5.7.3\n\n[View all changes from v5.7.2...v5.7.3](https://github.com/shopware/shopware/compare/v5.7.2...v5.7.3)\n\n### Changes\n\n* Updated `wikimedia/less.php` to 3.1.0\n\n### Removals\n\n* Removed password hash from session\n* Removed xml support for the snippet importer\n\n## 5.7.2\n\n[View all changes from v5.7.10...v5.7.2](https://github.com/shopware/shopware/compare/v5.7.10...v5.7.2)\n\n### Changes\n\n* Updated `league/flysystem` to 1.1.4\n\n## 5.7.1\n\n[View all changes from v5.7.0...v5.7.1](https://github.com/shopware/shopware/compare/v5.7.0...v5.7.1)\n\n### Additions\n\n* Added service alias from `Template` to `template`\n* Added service alias from `Loader` to `loader`\n\n### Changes\n\n* Changed the visibility of services from tags `shopware_emotion.component_handler`, `criteria_request_handler` and `sitemap_url_provider` to public\n* Changed following columns type from `date` to `datetime`\n  * `s_order_basket.datum`\n  * `s_order_comparisons.datum`\n  * `s_order_notes.datum`\n\n## 5.7.0\n\n[View all changes from v5.6.1...v5.7.0](https://github.com/shopware/shopware/compare/v5.6.1...v5.7.0)\n\n### Breaks\n\n* Do not use the `count()` smarty function in your templates anymore, since this will break with PHP version > 8.0. Use `|count` modifier instead!\n* Replaced `psh` and `ant` with an `Makefile`. See updated README.md for installation workflow.\n* Changed min PHP version to 7.4\n* Changed min Elasticsearch version to 7\n* Added new required methods `saveCustomUrls` and `saveExcludedUrls` to interface `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\ConfigHandlerInterface`\n* Changed Symfony version to 4.4\n* Changed Slugify version to 3.2\n* Changed Doctrine ORM version to 2.7.3\n* Changed Doctrine Cache version to 1.10.2\n* Changed Doctrine Common version to 3.0.2\n* Changed Doctrine Persistence version to 2.0.0\n* Changed Guzzle version to 7.1\n* Changed Monolog version to 2\n* Changed FPDF version to 1.8.2\n* Changed FPDI version to 2.2.0\n* Changed mPDF version to 8.0.7\n* Migrated Zend components to new Laminas\n* Elasticsearch indices doesn't use anymore types\n\n### Additions\n\n* Added Symfony session to `Request` object\n* Added new user interface for the sitemap configuration. It's available in the backend performance module\n* Added `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\Database` to save and read the sitemap configuration from the database\n* Added new doctrine model `Shopware\\Models\\Emotion\\LandingPage`, which extends from `Shopware\\Models\\Emotion\\Emotion`.\nIt's needed to search for landing pages only using the backend store `Shopware.store.Search`\n* Added new doctrine models `Shopware\\Models\\Sitemap\\CustomUrl` and `Shopware\\Models\\Sitemap\\ExcludeUrl`\n* Added new ExtJS component `Shopware.grid.Searchable`.\nUsing it you can search for different entities in a single grid, such as products, categories, blogs, etc.\nHave a look at the new sitemap UI to see what it looks like\n* Added `Shopware-Listing-Total` header to ajax listing loading\n* Added database transaction around plugin uninstall, activate and deactivate\n* Added support for MySQL 8 `sql_require_primary_key`\n* Added `attribute` to users listing in API\n* Added new blocks `document_index_head_logo` and `document_index_head_wrapper` to `themes/Frontend/Bare/documents/index.tpl`\n* Added `unmapped_type` to `integer` in `engine/Shopware/Bundle/SearchBundleES/SortingHandler/ManualSortingHandler.php`\n* Added a notice to registration form when a shipment blocked country has been selected\n\n### Changes\n\n* Changed `Shopware\\Models\\Order\\Order` and `Shopware\\Models\\Order\\Detail` models by extracting business logic into:\n    * `Shopware\\Bundle\\OrderBundle\\Service\\StockService`\n    * `Shopware\\Bundle\\OrderBundle\\Service\\CalculationService`\n    * `Shopware\\Bundle\\OrderBundle\\Subscriber\\ProductStockSubscriber`\n    * `Shopware\\Bundle\\OrderBundle\\Subscriber\\OrderRecalculationSubscriber`\n* Changed `Enlight_Components_Session_Namespace` to extend from `Symfony\\Component\\HttpFoundation\\Session\\Session`\n* Changed the default config for smarty `compileCheck` to false\n* Changed following columns to nullable\n    * `s_order_details.releasedate`\n    * `s_core_auth.lastlogin`\n    * `s_campaigns_logs.datum`\n    * `s_emarketing_banners.valid_from`\n    * `s_emarketing_banners.valid_to`\n    * `s_emarketing_lastarticles.time`\n    * `s_emarketing_tellafriend.datum`\n    * `s_order_basket.datum`\n    * `s_order_comparisons.datum`\n    * `s_order_notes.datum`\n    * `s_statistics_pool.datum`\n    * `s_statistics_referer.datum`\n    * `s_statistics_visitors.datum`\n    * `s_user.firstlogin`\n    * `s_user.lastlogin`\n* Changed response from `Shopware_Controllers_Widgets_Listing` from JSON to HTML\n* Changed emotion component names to allow translations using snippets\n    * `Artikel` => `product`\n    * `Kategorie-Teaser` => `category_teaser`\n    * `Blog-Artikel` => `blog_article`\n    * `Banner` => `banner`\n    * `Banner-Slider` => `banner_slider`\n    * `Youtube-Video` => `youtube`\n    * `Hersteller-Slider` => `manufacturer_slider`\n    * `Artikel-Slider` => `product_slider`\n    * `HTML-Element` => `html_element`\n    * `iFrame-Element` => `iframe`\n    * `HTML5 Video-Element` => `html_video`\n    * `Code Element` => `code_element`\n* Changed the search to not consider keywords which match 90% of all variants \n* Changed `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProvider` to set `hasStock` based on instock like DBAL implementation\n* Changed `\\Shopware_Controllers_Backend_ProductStream::loadPreviewAction` to return formatted prices\n* Changed `sw:plugin:activate` exit code from 1 to 0, when it's already installed.\n* Changed `\\Shopware\\Bundle\\StoreFrontBundle\\Gateway\\DBAL\\CategoryGateway::get` it accepts now only integers as id\n* Changed `sw:es:index:populate` to accept multiple shop ids with `--shopId={1,2}`\n* Changed `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProvider` to consider cheapest price configuration\n* Changed `\\Shopware\\Bundle\\PluginInstallerBundle\\Service\\PluginInstaller` to remove also menu translations\n\n### Removals\n\n* Removed following classes:\n    * `Enlight_Components_Session`\n    * `Enlight_Components_Session_SaveHandler_DbTable`\n    * `Zend_Session`\n    * `Zend_Session_Namespace`\n    * `Zend_Session_Abstract`\n    * `Zend_Session_Exception`\n    * `Zend_Session_SaveHandler_DbTable`\n    * `Zend_Session_SaveHandler_Exception`\n    * `Zend_Session_SaveHandler_Interface`\n    * `Zend_Session_Validator_Abstract`\n    * `Zend_Session_Validator_HttpUserAgent`\n    * `Zend_Session_Validator_Interface`\n    * `Shopware\\Components\\Log\\Handler\\ChromePhpHandler`\n    * `Shopware\\Components\\Log\\Handler\\FirePHPHandler`\n    * `\\Shopware_Plugins_Core_Debug_Bootstrap`\n    * `\\Shopware\\Plugin\\Debug\\Components\\CollectorInterface`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ControllerCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\DatabaseCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\DbalCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ErrorCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\EventCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ExceptionCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\TemplateCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\TemplateVarCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\Utils`\n    * `\\Shopware\\Components\\Api\\Resource\\ApiProgressHelper`\n    * `\\Shopware\\Bundle\\StoreFrontBundle\\Struct\\LocationContext`\n    * `\\Shopware\\Components\\OpenSSLEncryption`\n    * `\\Shopware\\Bundle\\SearchBundleES\\DependencyInjection\\Factory\\ProductNumberSearchFactory`\n* Removed method `\\Shopware\\Bundle\\EsBackendBundle\\EsBackendIndexer::buildAlias` use `\\Shopware\\Bundle\\EsBackendBundle\\IndexFactoryInterface::createIndexConfiguration` instead\n* Removed method `\\Shopware\\Bundle\\SearchBundleES\\DependencyInjection\\Factory\\ProductNumberSearchFactory::registerHandlerCollection`, use DI Tag `shopware_search_es.search_handler` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryAll`, use `\\Shopware\\Components\\Model\\ModelRepository::findAll` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryAll`, use `\\Shopware\\Components\\Model\\ModelRepository::findAll` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryBy`, use `\\Shopware\\Components\\Model\\ModelRepository::findBy` instead\n* Removed following interfaces:\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProviderInterface`\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\Property\\PropertyProviderInterface`\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\EsSearchInterface`\n    * `\\Shopware\\Bundle\\StoreFrontBundle\\Struct\\LocationContextInterface`\n* Removed from class `\\Shopware\\Components\\HttpCache\\CacheWarmer` following methods:\n    * `callUrls`\n    * `getSEOURLByViewPortCount`\n    * `getAllSEOUrlCount`\n    * `getAllSEOUrls`\n    * `getSEOUrlByViewPort`\n    * `prepareUrl`\n    * `getShopDataById`\n* Removed following methods from class `\\Shopware_Controllers_Backend_Search`:\n    * `getArticles` \n    * `getCustomers` \n    * `getOrders` \n* Removed referenced value from magic getter in session\n* Removed the assignment of all request parameters to the view in `Shopware_Controllers_Widgets_Listing::productsAction`\n* Removed duplicate ExtJs classes and added alias to new class:\n    * `Shopware.apps.Config.view.element.Boolean`\n    * `Shopware.apps.Config.view.element.Button`\n    * `Shopware.apps.Config.view.element.Color`\n    * `Shopware.apps.Config.view.element.Date`\n    * `Shopware.apps.Config.view.element.DateTime`\n    * `Shopware.apps.Config.view.element.Html`\n    * `Shopware.apps.Config.view.element.Interval`\n    * `Shopware.apps.Config.view.element.Number`\n    * `Shopware.apps.Config.view.element.ProductBoxLayoutSelect`\n    * `Shopware.apps.Config.view.element.Select`\n    * `Shopware.apps.Config.view.element.SelectTree`\n    * `Shopware.apps.Config.view.element.Text`\n    * `Shopware.apps.Config.view.element.TextArea`\n    * `Shopware.apps.Config.view.element.Time`\n* Removed following unused dependencies\n    * `egulias/email-validator`\n    * `symfony/translation`\n    * `php-http/curl-client`\n    * `psr/link`\n    * `symfony/polyfill-ctype`\n    * `symfony/polyfill-iconv`\n    * `symfony/polyfill-iconv`\n    * `symfony/polyfill-php56`\n    * `symfony/polyfill-php70`\n    * `symfony/polyfill-php71`\n    * `symfony/polyfill-php72`\n* Removed field `size` from `Shopware\\Models\\Article\\Download`. Use media_service to get the correct file size\n* Removed plugin `Debug`\n\n### Deprecations\n\n* Deprecated the class `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\File`.\nIt will be removed in Shopware 5.8. Use `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\Database` instead.\n* Deprecated getting plugin config from `Shopware_Components_Config` without plugin namespace, use `SwagTestPlugin:MyConfigName` instead\n* Deprecated the class `\\Shopware\\Components\\Plugin\\DBALConfigReader`.\nIt will be removed in Shopware 5.9. Use `Shopware\\Components\\Plugin\\Configuration\\ReaderInterface` instead\n* Deprecated the class `\\Shopware\\Components\\Plugin\\CachedConfigReader`.\nIt will be removed in Shopware 5.9. Use `Shopware\\Components\\Plugin\\Configuration\\ReaderInterface` instead\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\ORM\\AbstractQuery;\nuse League\\Flysystem\\FileNotFoundException;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\EmailUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\PasswordUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\ProfileUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\ResetPasswordFormType;\nuse Shopware\\Bundle\\AccountBundle\\Service\\CustomerServiceInterface;\nuse Shopware\\Bundle\\StaticContentBundle\\Exception\\EsdNotFoundException;\nuse Shopware\\Bundle\\StoreFrontBundle\\Gateway\\CountryGatewayInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ContextServiceInterface;\nuse Shopware\\Components\\Compatibility\\LegacyStructConverter;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Random;\nuse Shopware\\Models\\CommentConfirm\\CommentConfirm;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Partner\\Partner;\nuse ShopwarePlugin\\PaymentMethods\\Components\\BasePaymentMethod;\nuse Symfony\\Component\\Form\\FormError;\nuse Symfony\\Component\\Form\\FormInterface;\n\nclass Shopware_Controllers_Frontend_Account extends Enlight_Controller_Action\n{\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @var sAdmin\n     */\n    protected $admin;\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @var CustomerServiceInterface\n     */\n    protected $customerService;\n\n    /**\n     * @return void\n     */\n    public function init()\n    {\n        $this->admin = Shopware()->Modules()->Admin();\n        $this->customerService = Shopware()->Container()->get(CustomerServiceInterface::class);\n    }\n\n    public function preDispatch()\n    {\n        $this->View()->setScope(Smarty::SCOPE_PARENT);\n        if ($this->shouldForwardToRegister()) {\n            $this->forward('index', 'register', 'frontend', $this->getForwardParameters());\n\n            return;\n        }\n        $customerData = $this->admin->sGetUserData();\n        if (!\\is_array($customerData)) {\n            $this->forward('index', 'register', 'frontend', $this->getForwardParameters());\n\n            return;\n        }\n\n        $activeBillingAddressId = $customerData['additional']['user']['default_billing_address_id'];\n        $activeShippingAddressId = $customerData['additional']['user']['default_shipping_address_id'];\n\n        if (!empty($customerData['shippingaddress']['country']['id'])) {\n            $country = $this->get(CountryGatewayInterface::class)->getCountry($customerData['shippingaddress']['country']['id'], $this->get(ContextServiceInterface::class)->getContext());\n            $customerData['shippingaddress']['country'] = $this->get(LegacyStructConverter::class)->convertCountryStruct($country);\n        }\n\n        $this->View()->assign('activeBillingAddressId', $activeBillingAddressId);\n        $this->View()->assign('activeShippingAddressId', $activeShippingAddressId);\n        $this->View()->assign('sUserData', $customerData);\n        $this->View()->assign('userInfo', $this->get('shopware_account.store_front_greeting_service')->fetch());\n        $this->View()->assign('sUserLoggedIn', $this->admin->sCheckUser());\n        $this->View()->assign('sAction', $this->request->getActionName());\n\n        if ($this->isOneTimeAccount() && !\\in_array($this->request->getActionName(), ['abort', 'login', 'register'])) {\n            $this->logoutAction();\n            $this->redirect(['controller' => 'register']);\n        }\n    }\n\n    /**\n     * @return void\n     */\n    public function indexAction()\n    {\n        if ($this->Request()->getParam('success')) {\n            $this->View()->assign('sSuccessAction', $this->Request()->getParam('success'));\n        }\n    }\n\n    /**\n     * Read and change payment mean and payment data\n     *\n     * @return void\n     */\n    public function paymentAction()\n    {\n        $this->View()->assign('sPaymentMeans', $this->admin->sGetPaymentMeans());\n        $this->View()->assign('sFormData', ['payment' => $this->View()->getAssign('sUserData')['additional']['user']['paymentID']]);\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget', $this->Request()->getControllerName()));\n        $this->View()->assign('sTargetAction', $this->Request()->getParam('sTargetAction', 'index'));\n\n        $getPaymentDetails = $this->admin->sGetPaymentMeanById($this->View()->getAssign('sFormData')['payment']);\n\n        $paymentClass = $this->admin->sInitiatePaymentClass($getPaymentDetails);\n        if ($paymentClass instanceof BasePaymentMethod) {\n            $data = $paymentClass->getCurrentPaymentDataAsArray(Shopware()->Session()->get('sUserId'));\n            if (!empty($data)) {\n                $this->View()->assign('sFormData', $this->View()->getAssign('sFormData') + $data);\n            }\n        }\n\n        if ($this->Request()->isPost()) {\n            $values = $this->Request()->getPost();\n            $values['payment'] = $this->Request()->getPost('register');\n            $values['payment'] = $values['payment']['payment'];\n            $values['isPost'] = true;\n            $this->View()->assign('sFormData', $values);\n        }\n    }\n\n    /**\n     * Read last orders\n     *\n     * @return void\n     */\n    public function ordersAction()\n    {\n        $destinationPage = (int) $this->Request()->get('sPage');\n        $orderData = $this->admin->sGetOpenOrderData($destinationPage);\n        $orderData = $this->applyTrackingUrl($orderData);\n\n        $this->View()->assign('sOpenOrders', $orderData['orderData']);\n        $this->View()->assign('sNumberPages', $orderData['numberOfPages']);\n        $this->View()->assign('sPages', $orderData['pages']);\n\n        // This has to be assigned here because the config method in smarty can't handle array structures\n        $this->View()->assign('sDownloadAvailablePaymentStatus', Shopware()->Config()->get('downloadAvailablePaymentStatus'));\n    }\n\n    /**\n     * Read last downloads\n     *\n     * @return void\n     */\n    public function downloadsAction()\n    {\n        $destinationPage = (int) $this->Request()->get('sPage');\n\n        if (empty($destinationPage)) {\n            $destinationPage = 1;\n        }\n\n        $orderData = $this->admin->sGetDownloads($destinationPage);\n        $this->View()->assign('sDownloads', $orderData['orderData']);\n        $this->View()->assign('sNumberPages', $orderData['numberOfPages']);\n        $this->View()->assign('sPages', $orderData['pages']);\n\n        // This has to be assigned here because the config method in smarty can't handle array structures\n        $this->View()->assign('sDownloadAvailablePaymentStatus', Shopware()->Config()->get('downloadAvailablePaymentStatus'));\n    }\n\n    /**\n     * The partner statistic menu item action displays\n     * the menu item in the account menu\n     *\n     * @return void\n     */\n    public function partnerStatisticMenuItemAction()\n    {\n        // Show partner statistic menu\n        $partnerModel = $this->get('models')->getRepository(Partner::class)->findOneBy(['customerId' => Shopware()->Session()->get('sUserId')]);\n        if (!empty($partnerModel)) {\n            $this->View()->assign('partnerId', $partnerModel->getId());\n            Shopware()->Session()->offsetSet('partnerId', $partnerModel->getId());\n        }\n    }\n\n    /**\n     * This action returns all data for the partner statistic page\n     *\n     * @return void\n     */\n    public function partnerStatisticAction()\n    {\n        $partnerId = Shopware()->Session()->get('partnerId');\n\n        if (empty($partnerId)) {\n            $this->forward('index');\n\n            return;\n        }\n\n        $toDate = $this->Request()->get('toDate');\n        $fromDate = $this->Request()->get('fromDate');\n\n        // If a \"fromDate\" is passed, format it over the \\DateTime object. Otherwise, create a new date with today\n        if (empty($fromDate) || !Zend_Date::isDate($fromDate, 'Y-m-d')) {\n            $fromDate = new DateTime();\n            $fromDate = $fromDate->sub(new DateInterval('P1M'));\n        } else {\n            $fromDate = new DateTime($fromDate);\n        }\n\n        // If a \"toDate\" is passed, format it over the \\DateTime object. Otherwise, create a new date with today\n        if (empty($toDate) || !Zend_Date::isDate($toDate, 'Y-m-d')) {\n            $toDate = new DateTime();\n        } else {\n            $toDate = new DateTime($toDate);\n        }\n\n        $this->View()->assign('partnerStatisticToDate', $toDate->format('Y-m-d'));\n        $this->View()->assign('partnerStatisticFromDate', $fromDate->format('Y-m-d'));\n\n        // To get the right value cause 2012-02-02 is smaller than 2012-02-02 15:33:12\n        $toDate = $toDate->add(new DateInterval('P1D'));\n\n        $repository = $this->get('models')->getRepository(Partner::class);\n\n        // Get the information of the partner chart\n        $customerCurrencyFactor = Shopware()->Shop()->getCurrency()->getFactor();\n\n        $dataQuery = $repository->getStatisticChartQuery($partnerId, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sPartnerOrderChartData', $dataQuery->getArrayResult());\n\n        $dataQuery = $repository->getStatisticListQuery(null, null, null, $partnerId, false, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sPartnerOrders', $dataQuery->getArrayResult());\n\n        $dataQuery = $repository->getStatisticListQuery(null, null, null, $partnerId, true, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sTotalPartnerAmount', $dataQuery->getOneOrNullResult(AbstractQuery::HYDRATE_ARRAY));\n    }\n\n    /**\n     * Logout account and delete session\n     *\n     * @return void\n     */\n    public function logoutAction()\n    {\n        $this->admin->logout();\n    }\n\n    /**\n     * Abort one time order and delete session\n     *\n     * @return void\n     */\n    public function abortAction()\n    {\n        $this->admin->logout();\n    }\n\n    /**\n     * Login account and show login errors\n     *\n     * @return void\n     */\n    public function loginAction()\n    {\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget'));\n\n        if ($this->Request()->isPost()) {\n            $checkCustomer = $this->admin->sLogin();\n            if (\\is_array($checkCustomer) && !empty($checkCustomer['sErrorMessages'])) {\n                $this->View()->assign('sFormData', $this->Request()->getPost());\n                $this->View()->assign('sErrorFlag', $checkCustomer['sErrorFlag']);\n                $this->View()->assign('sErrorMessages', $checkCustomer['sErrorMessages']);\n            } else {\n                $this->refreshBasket();\n            }\n        }\n\n        if (empty($this->View()->getAssign('sErrorMessages')) && $this->admin->sCheckUser()) {\n            $this->redirect(\n                [\n                    'controller' => $this->Request()->getParam('sTarget', 'account'),\n                    'action' => $this->Request()->getParam('sTargetAction', 'index'),\n                ]\n            );\n\n            return;\n        }\n\n        $this->forward('index', 'register', 'frontend', [\n            'sTarget' => $this->Request()->getParam('sTarget'),\n        ]);\n    }\n\n    /**\n     * @return void\n     */\n    public function savePaymentAction()\n    {\n        if ($this->Request()->isPost()) {\n            $sourceIsCheckoutConfirm = $this->Request()->getParam('sourceCheckoutConfirm');\n            $values = $this->Request()->getPost('register');\n            $frontRequest = $this->front->Request();\n            if ($frontRequest === null) {\n                throw new RuntimeException('Front controller has no request set');\n            }\n            $frontRequest->setPost('sPayment', $values['payment']);\n            $checkData = $this->admin->sValidateStep3();\n\n            if (!empty($checkData['checkPayment']['sErrorMessages']) || empty($checkData['sProcessed'])) {\n                if (empty($sourceIsCheckoutConfirm)) {\n                    $this->View()->assign('sErrorFlag', $checkData['checkPayment']['sErrorFlag']);\n                    $this->View()->assign('sErrorMessages', $checkData['checkPayment']['sErrorMessages']);\n                }\n\n                $this->forward('payment');\n\n                return;\n            }\n            $customerData = $this->admin->sGetUserData();\n            $previousPayment = \\is_array($customerData) ? $customerData['additional']['user']['paymentID'] : 0;\n\n            $previousPaymentData = $this->admin->sGetPaymentMeanById($previousPayment);\n            if ($previousPaymentData['paymentTable']) {\n                $deleteSQL = 'DELETE FROM ' . $previousPaymentData['paymentTable'] . ' WHERE userID=?';\n                Shopware()->Db()->query($deleteSQL, [Shopware()->Session()->get('sUserId')]);\n            }\n\n            $this->admin->sUpdatePayment();\n\n            if ($checkData['sPaymentObject'] instanceof BasePaymentMethod) {\n                $checkData['sPaymentObject']->savePaymentData(Shopware()->Session()->get('sUserId'), $this->Request());\n            }\n        }\n\n        $target = $this->Request()->getParam('sTarget');\n        if (!$target) {\n            $target = 'account';\n        }\n        $targetAction = $this->Request()->getParam('sTargetAction', 'index');\n        $this->redirect([\n            'controller' => $target,\n            'action' => $targetAction,\n            'success' => 'payment',\n        ]);\n    }\n\n    /**\n     * Save newsletter address data\n     *\n     * @return void\n     */\n    public function saveNewsletterAction()\n    {\n        if ($this->Request()->isPost()) {\n            $status = (bool) $this->Request()->getPost('newsletter');\n            $customerMail = $this->admin->sGetUserMailById();\n            if (!\\is_string($customerMail)) {\n                return;\n            }\n\n            $this->admin->sUpdateNewsletter($status, $customerMail, true);\n            $successMessage = $status ? 'newsletter' : 'deletenewsletter';\n            if (Shopware()->Config()->get('optinnewsletter') && $status) {\n                $successMessage = 'optinnewsletter';\n            }\n            $this->View()->assign('sSuccessAction', $successMessage);\n            $this->container->get('session')->offsetSet('sNewsletter', $status);\n        }\n        $this->forward('index');\n    }\n\n    /**\n     * Read and test download file\n     *\n     * @return void\n     */\n    public function downloadAction()\n    {\n        $esdService = $this->container->get('shopware_static_content.service.esd_service');\n        $downloadService = $this->container->get('shopware_static_content.service.download_service');\n        $filesystem = $this->container->get('shopware.filesystem.private');\n        $esdID = (int) $this->request->getParam('esdID', 0);\n\n        if ($esdID === 0) {\n            $this->forward('downloads');\n\n            return;\n        }\n\n        try {\n            $download = $esdService->loadEsdOfCustomer($this->container->get('session')->offsetGet('sUserId'), $esdID);\n        } catch (EsdNotFoundException $exception) {\n            $this->forwardDownloadError(1);\n\n            return;\n        }\n\n        if (empty($download->getFile())) {\n            $this->forwardDownloadError(1);\n\n            return;\n        }\n\n        $filePath = $esdService->getLocation($download);\n\n        if ($filesystem->has($filePath) === false) {\n            $this->forwardDownloadError(2);\n\n            return;\n        }\n\n        try {\n            $downloadService->send($filePath, $filesystem);\n        } catch (FileNotFoundException $exception) {\n            $this->forwardDownloadError(2);\n        }\n    }\n\n    /**\n     * Send new account password\n     *\n     * @return void\n     */\n    public function passwordAction()\n    {\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget'));\n\n        if ($this->Request()->isPost()) {\n            $checkCustomer = $this->sendResetPasswordConfirmationMail($this->Request()->getParam('email'));\n            if (!empty($checkCustomer['sErrorMessages']) && !empty($checkCustomer['sErrorFlag'])) {\n                $this->View()->assign('sFormData', $this->Request()->getPost());\n                $this->View()->assign('sErrorFlag', $checkCustomer['sErrorFlag']);\n                $this->View()->assign('sErrorMessages', $checkCustomer['sErrorMessages']);\n            } else {\n                $this->View()->assign('sSuccess', true);\n            }\n        }\n    }\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     * Send a mail asking the customer, if he actually wants to reset his password\n     *\n     * @param string $email\n     *\n     * @return array{sErrorMessages?: array<string>, sErrorFlag?: array{email: true}}\n     */\n    public function sendResetPasswordConfirmationMail($email)\n    {\n        $snippets = Shopware()->Snippets()->getNamespace('frontend/account/password');\n\n        if (empty($email)) {\n            return [\n                'sErrorMessages' => [$snippets->get('ErrorForgotMail')],\n                'sErrorFlag' => ['email' => true],\n            ];\n        }\n\n        $customerId = Shopware()->Modules()->Admin()->sGetUserByMail($email);\n        if (empty($customerId)) {\n            return [];\n        }\n\n        $hash = Random::getAlphanumericString(32);\n\n        $context = [\n            'sUrlReset' => $this->Front()->Router()->assemble(['controller' => 'account', 'action' => 'resetPassword', 'hash' => $hash]),\n            'sUrl' => $this->Front()->Router()->assemble(['controller' => 'account', 'action' => 'resetPassword']),\n            'sKey' => $hash,\n        ];\n\n        $sql = 'SELECT\n          s_user.accountmode,\n          s_user.active,\n          s_user.affiliate,\n          s_user.birthday,\n          s_user.confirmationkey,\n          s_user.customergroup,\n          s_user.customernumber,\n          s_user.email,\n          s_user.failedlogins,\n          s_user.firstlogin,\n          s_user.lastlogin,\n          s_user.language,\n          s_user.internalcomment,\n          s_user.lockeduntil,\n          s_user.subshopID,\n          s_user.title,\n          s_user.salutation,\n          s_user.firstname,\n          s_user.lastname,\n          s_user.lastlogin,\n          s_user.newsletter\n          FROM s_user\n          WHERE id = ?';\n\n        $customer = $this->get(Connection::class)->fetchAssociative($sql, [$customerId]);\n        $email = $customer['email'];\n        $customer['attributes'] = $this->get(Connection::class)->fetchAssociative('SELECT * FROM s_user_attributes WHERE userID = ?', [$customerId]);\n\n        $context['user'] = $customer;\n\n        // Send mail\n        $mail = Shopware()->TemplateMail()->createMail('sCONFIRMPASSWORDCHANGE', $context);\n        $mail->addTo($email);\n        $mail->send();\n\n        // Add the hash to the optin table\n        $sql = \"INSERT INTO `s_core_optin` (`type`, `datum`, `hash`, `data`) VALUES ('swPassword', NOW(), ?, ?)\";\n        Shopware()->Db()->query($sql, [$hash, $customerId]);\n\n        return [];\n    }\n\n    /**\n     * Shows the reset password form and triggers password reset on submit\n     *\n     * @return void\n     */\n    public function resetPasswordAction()\n    {\n        $hash = (string) $this->Request()->getParam('hash');\n        $this->View()->assign('hash', $hash);\n        $customer = null;\n\n        try {\n            $customer = $this->getCustomerByResetHash($hash);\n        } catch (Exception $ex) {\n            $this->View()->assign('invalidToken', true);\n            $this->View()->assign('sErrorMessages', [$ex->getMessage()]);\n        }\n\n        if (!$customer instanceof Customer) {\n            $this->View()->assign('sErrorMessages', ['Customer not found']);\n\n            return;\n        }\n\n        if (!$this->Request()->isPost()) {\n            return;\n        }\n\n        $form = $this->createForm(ResetPasswordFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && !$form->isValid()) {\n            $errors = ['sErrorFlag' => [], 'sErrorMessages' => []];\n\n            foreach ($form->getErrors(true) as $error) {\n                if (!$error instanceof FormError) {\n                    continue;\n                }\n                if ($error->getOrigin() instanceof FormInterface) {\n                    $errors['sErrorFlag'][$error->getOrigin()->getName()] = true;\n                }\n                $errors['sErrorMessages'][] = $this->View()->fetch('string:' . $error->getMessage());\n            }\n\n            $this->View()->assign($errors);\n\n            return;\n        }\n\n        $customer->setEncoderName($this->get('passwordencoder')->getDefaultPasswordEncoderName());\n\n        $this->get('models')->persist($customer);\n        $this->get('models')->flush($customer);\n\n        // Perform a login for customer and redirect to account\n        $this->Request()->setPost(['email' => $customer->getEmail(), 'password' => $form->get('password')->getData()]);\n        $this->admin->sLogin();\n\n        $target = $this->Request()->getParam('sTarget');\n        if (!$target) {\n            $target = 'account';\n        }\n\n        $this->get(Connection::class)->executeQuery(\n            'DELETE FROM s_core_optin WHERE hash = ? AND type = ?',\n            [$hash, 'swPassword']\n        );\n\n        $this->redirect(['controller' => $target, 'action' => 'index', 'success' => 'resetPassword']);\n    }\n\n    /**\n     * Profile forms for main data, password and email\n     *\n     * @return void\n     */\n    public function profileAction()\n    {\n        $errorFlags = [];\n        $errorMessages = [];\n        $postData = $this->Request()->getPost() ?: [];\n\n        $defaultData = [\n            'profile' => [\n                'salutation' => $this->View()->getAssign('sUserData')['additional']['user']['salutation'],\n                'title' => $this->View()->getAssign('sUserData')['additional']['user']['title'],\n                'firstname' => $this->View()->getAssign('sUserData')['additional']['user']['firstname'],\n                'lastname' => $this->View()->getAssign('sUserData')['additional']['user']['lastname'],\n                'birthday' => [\n                    'day' => null,\n                    'month' => null,\n                    'year' => null,\n                ],\n            ],\n        ];\n\n        if (!empty($this->View()->getAssign('sUserData')['additional']['user']['birthday'])) {\n            $datetime = new DateTime($this->View()->getAssign('sUserData')['additional']['user']['birthday']);\n            $defaultData['profile']['birthday']['year'] = $datetime->format('Y');\n            $defaultData['profile']['birthday']['month'] = $datetime->format('m');\n            $defaultData['profile']['birthday']['day'] = $datetime->format('d');\n        }\n\n        $formData = array_merge($defaultData, $postData);\n\n        if ($this->Request()->getParam('errors')) {\n            foreach ($this->Request()->getParam('errors') as $error) {\n                $message = $this->View()->fetch('string:' . $error->getMessage());\n                $errorFlags[$error->getOrigin()->getName()] = true;\n                $errorMessages[] = $message;\n            }\n\n            $errorMessages = array_unique($errorMessages);\n        }\n\n        $this->View()->assign('form_data', $formData);\n        $this->View()->assign('errorFlags', $errorFlags);\n        $this->View()->assign('errorMessages', $errorMessages);\n        $this->View()->assign('success', $this->Request()->getParam('success'));\n        $this->View()->assign('section', $this->Request()->getParam('section'));\n    }\n\n    /**\n     * Endpoint for changing the main profile data\n     *\n     * @return void\n     */\n    public function saveProfileAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(ProfileUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n            $this->container->get('session')->offsetSet('userInfo', null);\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'profile']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'profile', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * Endpoint for changing the email\n     *\n     * @return void\n     */\n    public function saveEmailAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(EmailUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n            $this->get('session')->offsetSet('sUserMail', $customer->getEmail());\n            $this->get('session')->offsetSet('userInfo', null);\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'email']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'email', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * Endpoint for changing the password\n     *\n     * @return void\n     */\n    public function savePasswordAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(PasswordUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'password']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'password', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @return void\n     */\n    protected function refreshBasket()\n    {\n        $modules = $this->container->get('modules');\n        $customerData = $modules->Admin()->sGetUserData();\n        $session = $this->container->get('session');\n\n        if (\\is_array($customerData)) {\n            $session->offsetSet('sCountry', (int) $customerData['additional']['countryShipping']['id']);\n            $session->offsetSet('sArea', (int) $customerData['additional']['countryShipping']['areaID']);\n        }\n\n        $this->container->get(ContextServiceInterface::class)->initializeContext();\n\n        $modules->Basket()->sRefreshBasket();\n    }\n\n    private function forwardDownloadError(int $errorCode): void\n    {\n        $this->View()->assign('sErrorCode', $errorCode);\n\n        $this->forward('downloads');\n    }\n\n    /**\n     * @param array<string, mixed> $orderData\n     *\n     * @return array<string, mixed>\n     */\n    private function applyTrackingUrl(array $orderData): array\n    {\n        foreach ($orderData['orderData'] as &$order) {\n            if (!empty($order['trackingcode']) && !empty($order['dispatch']) && !empty($order['dispatch']['status_link'])) {\n                $order['dispatch']['status_link'] = $this->renderTrackingLink(\n                    $order['dispatch']['status_link'],\n                    $order['trackingcode']\n                );\n            }\n        }\n\n        return $orderData;\n    }\n\n    private function renderTrackingLink(string $link, string $trackingCode): ?string\n    {\n        $regEx = '/(\\{\\$offerPosition.trackingcode\\})/';\n\n        return preg_replace($regEx, $trackingCode, $link);\n    }\n\n    /**\n     * Delete old expired password-hashes after two hours\n     */\n    private function deleteExpiredOptInItems(): void\n    {\n        $connection = $this->get(Connection::class);\n\n        $connection->executeStatement(\n            \"DELETE FROM s_core_optin WHERE datum <= (NOW() - INTERVAL 2 HOUR) AND type = 'swPassword'\"\n        );\n    }\n\n    /**\n     * @throws RuntimeException\n     */\n    private function getCustomerByResetHash(string $hash): Customer\n    {\n        $resetPasswordNamespace = $this->container->get('snippets')->getNamespace('frontend/account/reset_password');\n\n        $this->deleteExpiredOptInItems();\n\n        $confirmModel = $this->get(ModelManager::class)\n            ->getRepository(CommentConfirm::class)\n            ->findOneBy(['hash' => $hash, 'type' => 'swPassword']);\n\n        if (!$confirmModel) {\n            throw new RuntimeException($resetPasswordNamespace->get('PasswordResetNewLinkError', 'Confirmation link not found. Please check the spelling. Note that the confirmation link is only valid for 2 hours. After that you have to require a new confirmation link.'));\n        }\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $confirmModel->getData());\n        if (!$customer) {\n            throw new RuntimeException($resetPasswordNamespace->get('PasswordResetNewMissingId', 'Your account could not be found. Please contact us to fix this problem.'));\n        }\n\n        return $customer;\n    }\n\n    private function shouldForwardToRegister(): bool\n    {\n        return !\\in_array($this->Request()->getActionName(), ['login', 'logout', 'password', 'resetPassword'])\n            && !$this->admin->sCheckUser();\n    }\n\n    /**\n     * @return array{sTarget: string, sTargetAction: string}\n     */\n    private function getForwardParameters(): array\n    {\n        if (!$this->Request()->getParam('sTarget') && !$this->Request()->getParam('sTargetAction')) {\n            return [\n                'sTarget' => $this->Request()->getControllerName(),\n                'sTargetAction' => $this->Request()->getActionName(),\n            ];\n        }\n\n        return [\n            'sTarget' => $this->Request()->getParam('sTarget'),\n            'sTargetAction' => $this->Request()->getParam('sTargetAction'),\n        ];\n    }\n\n    private function isOneTimeAccount(): bool\n    {\n        return $this->container->get('session')->offsetGet('sOneTimeAccount')\n            || (int) $this->View()->getAssign('sUserData')['additional']['user']['accountmode'] === Customer::ACCOUNT_MODE_FAST_LOGIN;\n    }\n}\n", "<?php\n\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Shopware\\Bundle\\AccountBundle\\Service\\OptInLoginService;\nuse Shopware\\Bundle\\AccountBundle\\Service\\OptInLoginServiceInterface;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\CrudServiceInterface;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\DataLoader;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\DataLoaderInterface;\nuse Shopware\\Bundle\\CartBundle\\CartKey;\nuse Shopware\\Bundle\\StoreFrontBundle\\Gateway\\PaymentGatewayInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ContextServiceInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ListProductServiceInterface;\nuse Shopware\\Components\\Captcha\\CaptchaValidator;\nuse Shopware\\Components\\Cart\\CartOrderNumberProviderInterface;\nuse Shopware\\Components\\Cart\\CartPersistServiceInterface;\nuse Shopware\\Components\\Cart\\ConditionalLineItemServiceInterface;\nuse Shopware\\Components\\Compatibility\\LegacyStructConverter;\nuse Shopware\\Components\\HolidayTableUpdater;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Password\\Manager;\nuse Shopware\\Components\\Random;\nuse Shopware\\Components\\Routing\\RouterInterface;\nuse Shopware\\Components\\Validator\\EmailValidator;\nuse Shopware\\Components\\Validator\\EmailValidatorInterface;\nuse Shopware\\Models\\Customer\\Address;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Mail\\Mail;\nuse ShopwarePlugin\\PaymentMethods\\Components\\BasePaymentMethod;\n\n/**\n * Shopware Class that handles several\n * functions around customer / order related things\n */\nclass sAdmin implements \\Enlight_Hook\n{\n    /**\n     * Check if current active shop has own registration\n     *\n     * @var bool s_core_shops.customer_scope\n     */\n    public $scopedRegistration;\n\n    /**\n     * Id of current active shop\n     *\n     * @var int s_core_shops.id\n     */\n    public $subshopId;\n\n    /**\n     * Pointer to sSystem object\n     * Used for legacy purposes\n     *\n     * @var sSystem\n     *\n     * @deprecated\n     */\n    public $sSYSTEM;\n\n    /**\n     * Database connection which used for each database operation in this class.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Components_Db_Adapter_Pdo_Mysql\n     */\n    private $db;\n\n    /**\n     * Event manager which is used for the event system of shopware.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Event_EventManager\n     */\n    private $eventManager;\n\n    /**\n     * Shopware configuration object which used for\n     * each config access in this class.\n     * Injected over the class constructor\n     *\n     * @var Shopware_Components_Config\n     */\n    private $config;\n\n    /**\n     * Shopware session object.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Components_Session_Namespace\n     */\n    private $session;\n\n    /**\n     * Request wrapper object\n     *\n     * @var Enlight_Controller_Front\n     */\n    private $front;\n\n    /**\n     * Shopware password encoder.\n     * Injected over the class constructor\n     *\n     * @var Manager\n     */\n    private $passwordEncoder;\n\n    /**\n     * The snippet manager\n     *\n     * @var Shopware_Components_Snippet_Manager\n     */\n    private $snippetManager;\n\n    /**\n     * @var ContextServiceInterface\n     */\n    private $contextService;\n\n    /**\n     * Module manager for core class instances\n     *\n     * @var Shopware_Components_Modules\n     */\n    private $moduleManager;\n\n    /**\n     * Email address validator\n     *\n     * @var EmailValidatorInterface\n     */\n    private $emailValidator;\n\n    /**\n     * @var DataLoaderInterface\n     */\n    private $attributeLoader;\n\n    /**\n     * @var Shopware_Components_Translation\n     */\n    private $translationComponent;\n\n    /**\n     * @var Connection\n     */\n    private $connection;\n\n    /**\n     * @var OptInLoginServiceInterface\n     */\n    private $optInLoginService;\n\n    /**\n     * @var ConditionalLineItemServiceInterface\n     */\n    private $conditionalLineItemService;\n\n    /**\n     * @var CartOrderNumberProviderInterface\n     */\n    private $cartOrderNumberProvider;\n\n    /**\n     * @var array\n     */\n    private $cache = [\n        'country' => [],\n        'payment' => [],\n    ];\n\n    public function __construct(\n        Enlight_Components_Db_Adapter_Pdo_Mysql $db = null,\n        Enlight_Event_EventManager $eventManager = null,\n        Shopware_Components_Config $config = null,\n        Enlight_Components_Session_Namespace $session = null,\n        Enlight_Controller_Front $front = null,\n        Manager $passwordEncoder = null,\n        Shopware_Components_Snippet_Manager $snippetManager = null,\n        Shopware_Components_Modules $moduleManager = null,\n        sSystem $systemModule = null,\n        ContextServiceInterface $contextService = null,\n        EmailValidatorInterface $emailValidator = null,\n        Shopware_Components_Translation $translationComponent = null,\n        Connection $connection = null,\n        OptInLoginServiceInterface $optInLoginService = null\n    ) {\n        $this->db = $db ?: Shopware()->Db();\n        $this->eventManager = $eventManager ?: Shopware()->Events();\n        $this->config = $config ?: Shopware()->Config();\n        $this->session = $session ?: Shopware()->Session();\n        $this->front = $front ?: Shopware()->Front();\n        $this->passwordEncoder = $passwordEncoder ?: Shopware()->PasswordEncoder();\n        $this->snippetManager = $snippetManager ?: Shopware()->Snippets();\n        $this->moduleManager = $moduleManager ?: Shopware()->Modules();\n        $this->sSYSTEM = $systemModule ?: Shopware()->System();\n\n        $mainShop = Shopware()->Shop()->getMain() !== null ? Shopware()->Shop()->getMain() : Shopware()->Shop();\n        $this->scopedRegistration = $mainShop->getCustomerScope();\n\n        $this->contextService = $contextService ?: Shopware()->Container()->get(ContextServiceInterface::class);\n        $this->emailValidator = $emailValidator ?: Shopware()->Container()->get(EmailValidator::class);\n        $this->subshopId = $this->contextService->getShopContext()->getShop()->getParentId();\n        $this->attributeLoader = Shopware()->Container()->get(DataLoader::class);\n        $this->translationComponent = $translationComponent ?: Shopware()->Container()->get(\\Shopware_Components_Translation::class);\n        $this->connection = $connection ?: Shopware()->Container()->get(Connection::class);\n        $this->optInLoginService = $optInLoginService ?: Shopware()->Container()->get(OptInLoginService::class);\n        $this->conditionalLineItemService = Shopware()->Container()->get(ConditionalLineItemServiceInterface::class);\n        $this->cartOrderNumberProvider = Shopware()->Container()->get(CartOrderNumberProviderInterface::class);\n    }\n\n    /**\n     * Get data from a certain payment mean\n     * If user data is provided, the current user payment\n     * mean is validated against current country, risk management, etc\n     * and reset to default if necessary.\n     *\n     * Used in several places to get the payment mean data\n     *\n     * @param int        $id   Payment mean id\n     * @param array|bool $user Array with user data (sGetUserData)\n     *\n     * @return array Payment data\n     */\n    public function sGetPaymentMeanById($id, $user = false)\n    {\n        $id = (int) $id;\n        $resetPayment = false;\n\n        $data = $this->db->fetchRow(\n            'SELECT * FROM s_core_paymentmeans WHERE id = ?',\n            [$id]\n        ) ?: [];\n\n        $sEsd = $this->moduleManager->Basket()->sCheckForESD();\n        $isMobile = $this->front->Request()->getDeviceType() === 'mobile';\n\n        if (!\\is_array($user)) {\n            $user = [];\n        }\n\n        // Check for risk management\n        // If rules match, reset to default payment mean if this payment mean was not\n        // set by shop owner\n\n        // Hide payment means which are not active\n        if (!$data['active'] && $data['id'] != $user['additional']['user']['paymentpreset']) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // If esd - order, hide payment means which\n        // are not available for esd\n        if (!$data['esdactive'] && $sEsd) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // Handle blocking for smartphones\n        if (!empty($data['mobile_inactive']) && $isMobile) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // Check additional rules\n        if (\n            $this->sManageRisks($data['id'], null, $user)\n            && $data['id'] != $user['additional']['user']['paymentpreset']\n        ) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        if (!empty($user['additional']['countryShipping']['id'])) {\n            $sql = '\n                SELECT 1\n                FROM s_core_paymentmeans p\n\n                LEFT JOIN s_core_paymentmeans_subshops ps\n                ON ps.subshopID = ?\n                AND ps.paymentID = p.id\n\n                LEFT JOIN s_core_paymentmeans_countries pc\n                ON pc.countryID = ?\n                AND pc.paymentID=p.id\n\n                WHERE (ps.paymentID IS NOT NULL OR (\n                  SELECT paymentID FROM s_core_paymentmeans_subshops WHERE paymentID=p.id LIMIT 1\n                ) IS NULL)\n                AND (pc.paymentID IS NOT NULL OR (\n                  SELECT paymentID FROM s_core_paymentmeans_countries WHERE paymentID=p.id LIMIT 1\n                ) IS NULL)\n\n                AND id = ?\n            ';\n\n            $active = $this->db->fetchOne(\n                $sql,\n                [\n                    $this->contextService->getShopContext()->getShop()->getId(),\n                    $user['additional']['countryShipping']['id'],\n                    $id,\n                ]\n            );\n            if (empty($active)) {\n                $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n            }\n        }\n\n        if ($resetPayment && $user['additional']['user']['id']) {\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Payment_Fallback',\n                $data\n            );\n\n            $this->db->update(\n                's_user',\n                ['paymentID' => $resetPayment],\n                ['id = ?' => $user['additional']['user']['id']]\n            );\n            $data = ['id' => $resetPayment];\n        }\n\n        if (isset($data['id'])) {\n            $data = Shopware()->Container()->get(PaymentGatewayInterface::class)\n                ->getList([$data['id']], $this->contextService->getShopContext());\n\n            if (!empty($data)) {\n                $data = Shopware()->Container()->get(LegacyStructConverter::class)\n                    ->convertPaymentStruct(current($data));\n            }\n        }\n\n        $data = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetPaymentMeanById_DataFilter',\n            $data,\n            ['subject' => $this, 'id' => $id, 'user' => $user]\n        );\n\n        return $data;\n    }\n\n    /**\n     * Get all available payments\n     *\n     * @return array Payments data\n     */\n    public function sGetPaymentMeans()\n    {\n        $isMobile = $this->front->Request()->getDeviceType() === 'mobile';\n\n        $user = $this->sGetUserData();\n\n        $sEsd = $this->moduleManager->Basket()->sCheckForESD();\n\n        $countryID = (int) $user['additional']['countryShipping']['id'];\n        $subShopID = (int) $this->contextService->getShopContext()->getShop()->getId();\n        if (empty($countryID)) {\n            $countryID = $this->db->fetchOne(\n                'SELECT id FROM s_core_countries ORDER BY position ASC LIMIT 1'\n            );\n        }\n        $sql = '\n            SELECT p.id, p.active, p.esdactive, p.mobile_inactive\n            FROM s_core_paymentmeans p\n\n            LEFT JOIN s_core_paymentmeans_subshops ps\n            ON ps.subshopID = ?\n            AND ps.paymentID = p.id\n\n            LEFT JOIN s_core_paymentmeans_countries pc\n            ON pc.countryID = ?\n            AND pc.paymentID = p.id\n\n            WHERE\n              (\n                ps.paymentID IS NOT NULL\n                OR (\n                  SELECT paymentID\n                  FROM s_core_paymentmeans_subshops\n                  WHERE paymentID = p.id LIMIT 1\n                ) IS NULL\n              )\n            AND\n              (\n                pc.paymentID IS NOT NULL\n                OR (\n                  SELECT paymentID\n                  FROM s_core_paymentmeans_countries\n                  WHERE paymentID = p.id LIMIT 1\n                ) IS NULL\n              )\n\n            ORDER BY position, name\n        ';\n\n        $paymentMeans = $this->db->fetchAll(\n            $sql,\n            [\n                $subShopID,\n                $countryID,\n            ]\n        );\n\n        if ($paymentMeans === false) {\n            $paymentMeans = $this->db->fetchAll(\n                'SELECT id, active, esdactive, mobile_inactive FROM s_core_paymentmeans ORDER BY position, name'\n            );\n        }\n\n        foreach ($paymentMeans as $payKey => $payValue) {\n            // Hide payment means which are not active\n            if (empty($payValue['active']) && $payValue['id'] != $user['additional']['user']['paymentpreset']) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // If this is an esd order, hide payment means which are not accessible for esd\n            if (empty($payValue['esdactive']) && $sEsd) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // Handle blocking for smartphones\n            if (!empty($payValue['mobile_inactive']) && $isMobile) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // Check additional rules\n            if (\n                $this->sManageRisks($payValue['id'], null, $user)\n                && $payValue['id'] != $user['additional']['user']['paymentpreset']\n            ) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n        }\n\n        // If no payment is left use always the fallback payment no matter if it has any restrictions too\n        if (!\\count($paymentMeans)) {\n            $paymentMeans[] = ['id' => $this->config->offsetGet('paymentdefault')];\n        }\n\n        $paymentMeans = Shopware()->Container()->get(PaymentGatewayInterface::class)\n            ->getList(array_column($paymentMeans, 'id'), $this->contextService->getShopContext());\n\n        $paymentMeans = array_map(static function ($payment) {\n            return Shopware()->Container()->get(LegacyStructConverter::class)->convertPaymentStruct($payment);\n        }, $paymentMeans);\n\n        $paymentMeans = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetPaymentMeans_DataFilter',\n            $paymentMeans,\n            ['subject' => $this]\n        );\n\n        return $paymentMeans;\n    }\n\n    /**\n     * Loads the system class of the specified payment mean\n     *\n     * @param array $paymentData Array with payment data\n     *\n     * @throws Enlight_Exception If no payment classes were loaded\n     *\n     * @return BasePaymentMethod The payment mean handling class instance\n     */\n    public function sInitiatePaymentClass($paymentData)\n    {\n        $dirs = [];\n\n        if (substr($paymentData['class'], -\\strlen('.php')) === '.php') {\n            $index = substr($paymentData['class'], 0, (int) strpos($paymentData['class'], '.php'));\n        } else {\n            $index = $paymentData['class'];\n        }\n\n        $dirs = $this->eventManager->filter(\n            'Shopware_Modules_Admin_InitiatePaymentClass_AddClass',\n            $dirs,\n            ['subject' => $this]\n        );\n\n        $class = \\array_key_exists($index, $dirs) ? $dirs[$index] : $dirs['default'];\n        if (!$class) {\n            throw new Enlight_Exception('sValidateStep3 #02: Payment classes dir not loaded');\n        }\n\n        $sPaymentObject = new $class();\n\n        if (!$sPaymentObject instanceof BasePaymentMethod) {\n            throw new Enlight_Exception('sValidateStep3 #02: Payment class not found');\n        }\n\n        return $sPaymentObject;\n    }\n\n    /**\n     * Last step of the registration - validate all user fields that exists in session and\n     * stores the data into database\n     *\n     * @throws Enlight_Exception If no payment mean is set in POST\n     *\n     * @return array Payment data\n     */\n    public function sValidateStep3()\n    {\n        $paymentId = $this->front->Request()->getPost('sPayment');\n        if (empty($paymentId)) {\n            throw new Enlight_Exception('sValidateStep3 #00: No payment id');\n        }\n\n        $user = $this->sGetUserData();\n        $paymentData = $this->sGetPaymentMeanById($paymentId, $user);\n        $checkPayment = null;\n        $sPaymentObject = null;\n\n        if (!\\count($paymentData)) {\n            throw new Enlight_Exception('sValidateStep3 #01: Could not load paymentmean');\n        }\n        // Include management class and check input data\n        if (!empty($paymentData['class'])) {\n            $sPaymentObject = $this->sInitiatePaymentClass($paymentData);\n            $requestData = $this->front->Request()->getParams();\n            $checkPayment = $sPaymentObject->validate($requestData);\n        }\n\n        return [\n            'checkPayment' => $checkPayment,\n            'paymentData' => $paymentData,\n            'sProcessed' => true,\n            'sPaymentObject' => &$sPaymentObject,\n        ];\n    }\n\n    /**\n     * Add or remove an email address from the mailing list\n     *\n     * @param bool   $status   True if insert, false if remove\n     * @param string $email    Email address\n     * @param bool   $customer If email address belongs to a customer\n     *\n     * @return bool If operation was successful\n     */\n    public function sUpdateNewsletter($status, $email, $customer = false)\n    {\n        if (!$status) {\n            // Delete email address from database\n            $this->db->delete(\n                's_campaigns_mailaddresses',\n                ['email = ?' => $email]\n            );\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Newsletter_Unsubscribe',\n                ['email' => $email]\n            );\n        } else {\n            // Check if mail address is already subscribed, return\n            if ($this->db->fetchOne('SELECT id FROM s_campaigns_mailaddresses WHERE email = ?', [$email])) {\n                return false;\n            }\n\n            $optInNewsletter = $this->config->get('optinnewsletter');\n            if ($optInNewsletter) {\n                $hash = Random::getAlphanumericString(32);\n                $data = serialize(['newsletter' => $email, 'subscribeToNewsletter' => true]);\n\n                $link = $this->front->Router()->assemble([\n                    'sViewport' => 'newsletter',\n                    'action' => 'index',\n                    'sConfirmation' => $hash,\n                    'module' => 'frontend',\n                ]);\n\n                $this->sendMail($email, 'sOPTINNEWSLETTER', $link);\n\n                $this->db->insert(\n                    's_core_optin',\n                    [\n                        'datum' => new Zend_Date(),\n                        'hash' => $hash,\n                        'data' => $data,\n                        'type' => 'swNewsletter',\n                    ]\n                );\n\n                return true;\n            }\n\n            $groupID = $this->config->get('sNEWSLETTERDEFAULTGROUP');\n            if (!$groupID) {\n                $groupID = '0';\n            }\n\n            // Insert email into database\n            if (!empty($customer)) {\n                $this->db->insert(\n                    's_campaigns_mailaddresses',\n                    ['customer' => 1, 'email' => $email, 'added' => $this->getCurrentDateFormatted()]\n                );\n            } else {\n                $this->db->insert(\n                    's_campaigns_mailaddresses',\n                    ['groupID' => $groupID, 'email' => $email, 'added' => $this->getCurrentDateFormatted()]\n                );\n            }\n\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_sUpdateNewsletter_Subscribe',\n                ['email' => $email]\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates the payment mean of the user\n     * Used in the Frontend Account controller\n     *\n     * @param int|null $paymentId\n     *\n     * @throws Enlight_Exception On database error\n     *\n     * @return bool If operation was successful\n     */\n    public function sUpdatePayment($paymentId = null)\n    {\n        $userId = $this->session->offsetGet('sUserId');\n        if (empty($userId)) {\n            return false;\n        }\n        $sqlPayment = 'UPDATE s_user SET paymentID = ? WHERE id = ?';\n\n        $sqlPayment = $this->eventManager->filter(\n            'Shopware_Modules_Admin_UpdatePayment_FilterSql',\n            $sqlPayment,\n            [\n                'subject' => $this,\n                'id' => $userId,\n            ]\n        );\n\n        $this->db->query(\n            $sqlPayment,\n            [\n                $paymentId ?: $this->front->Request()->getPost('sPayment'),\n                $userId,\n            ]\n        );\n\n        if ($this->db->getErrorMessage()) {\n            throw new Enlight_Exception('sUpdatePayment #01: Could not save data (payment)' . $this->db->getErrorMessage());\n        }\n\n        return true;\n    }\n\n    public function logout()\n    {\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get(CartPersistServiceInterface::class)->prepare();\n        }\n\n        if ($this->config->get('clearBasketAfterLogout')) {\n            $this->moduleManager->Basket()->sDeleteBasket();\n        }\n\n        $this->session->clear();\n        $this->regenerateSessionId(true);\n\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get(CartPersistServiceInterface::class)->persist();\n        }\n\n        $shop = Shopware()->Shop();\n\n        $this->sSYSTEM->sUSERGROUP = $shop->getCustomerGroup()->getKey();\n        $this->sSYSTEM->sUSERGROUPDATA = $shop->getCustomerGroup()->toArray();\n        $this->sSYSTEM->sCurrency = $shop->getCurrency()->toArray();\n\n        $this->contextService->initializeContext();\n\n        if (!$this->config->get('clearBasketAfterLogout')) {\n            $this->moduleManager->Basket()->sRefreshBasket();\n\n            $countries = $this->sGetCountryList();\n            $country = reset($countries);\n\n            $this->moduleManager->Admin()->sGetPremiumShippingcosts($country);\n\n            $amount = $this->moduleManager->Basket()->sGetAmount();\n            $this->session->offsetSet('sBasketAmount', empty($amount) ? 0 : array_shift($amount));\n        }\n\n        $this->eventManager->notify('Shopware_Modules_Admin_Logout_Successful');\n    }\n\n    /**\n     * Attempt to login a user in the frontend\n     * Used for login and registration in frontend, also for user impersonation\n     * from backend\n     *\n     * @param bool $ignoreAccountMode Allows customers who have chosen\n     *                                the fast registration, one-time login after registration\n     *\n     * @throws Exception If no password encoder is specified\n     *\n     * @return array|false Array with errors that may have occurred, or false if\n     *                     the process is interrupted by an event\n     */\n    public function sLogin($ignoreAccountMode = false)\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_Login_Start',\n            [\n                'subject' => $this,\n                'ignoreAccountMode' => $ignoreAccountMode,\n                'post' => $this->front->Request()->getPost(),\n            ]\n        )\n        ) {\n            return false;\n        }\n\n        $sErrorFlag = null;\n        $sErrorMessages = null;\n\n        // If fields are not set, markup these fields\n        $email = strtolower($this->front->Request()->getPost('email'));\n        if (empty($email)) {\n            $sErrorFlag['email'] = true;\n        }\n\n        // If password is already md5 decrypted or the parameter $ignoreAccountMode is set, use it directly\n        if ($ignoreAccountMode && $this->front->Request()->getPost('passwordMD5')) {\n            $password = $this->front->Request()->getPost('passwordMD5');\n            $isPreHashed = true;\n        } else {\n            $password = $this->front->Request()->getPost('password');\n            $isPreHashed = false;\n        }\n\n        if (empty($password)) {\n            $sErrorFlag['password'] = true;\n        }\n\n        if (!empty($sErrorFlag)) {\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get('LoginFailure', 'Wrong email or password');\n            $this->session->offsetUnset('sUserMail');\n            $this->session->offsetUnset('sUserId');\n        }\n\n        if ($sErrorMessages) {\n            [$sErrorMessages, $sErrorFlag] = $this->eventManager->filter(\n                'Shopware_Modules_Admin_Login_FilterResult',\n                [$sErrorMessages, $sErrorFlag],\n                ['subject' => $this, 'email' => null, 'password' => null, 'error' => $sErrorMessages]\n            );\n\n            return ['sErrorFlag' => $sErrorFlag, 'sErrorMessages' => $sErrorMessages];\n        }\n\n        $addScopeSql = '';\n        if ($this->scopedRegistration == true) {\n            $addScopeSql = $this->db->quoteInto(' AND subshopID = ? ', $this->subshopId);\n        }\n\n        // When working with a pre-hashed password, we need to limit the getUser query by password,\n        // as there might be multiple users with the same mail address (accountmode = 1).\n        $preHashedSql = '';\n        if ($isPreHashed) {\n            $preHashedSql = $this->db->quoteInto(' AND password = ? ', $password);\n        }\n\n        if ($ignoreAccountMode) {\n            $sql = '\n                SELECT id, customergroup, password, encoder\n                FROM s_user WHERE email = ? AND active=1\n                AND (lockeduntil < now() OR lockeduntil IS NULL) '\n                . $addScopeSql\n                . $preHashedSql;\n        } else {\n            $sql = '\n                SELECT id, customergroup, password, encoder\n                FROM s_user\n                WHERE email = ? AND active=1 AND accountmode != 1\n                AND (lockeduntil < now() OR lockeduntil IS NULL) '\n                . $addScopeSql;\n        }\n\n        $getUser = $this->db->fetchRow($sql, [$email]) ?: [];\n        $hash = null;\n        $plaintext = null;\n        $encoderName = null;\n\n        if (!\\count($getUser)) {\n            $isValidLogin = false;\n        } else {\n            if ($isPreHashed) {\n                $encoderName = 'Prehashed';\n            } else {\n                $encoderName = $getUser['encoder'];\n                $encoderName = strtolower($encoderName);\n            }\n\n            if (empty($encoderName)) {\n                throw new Exception('No encoder name given.');\n            }\n\n            $hash = $getUser['password'];\n            $plaintext = $password;\n            $password = $hash;\n\n            $isValidLogin = $this->passwordEncoder->isPasswordValid($plaintext, $hash, $encoderName);\n        }\n\n        if ($isValidLogin) {\n            $this->loginUser($getUser, $email, $password, $isPreHashed, $encoderName, $plaintext, $hash);\n        } else {\n            $sErrorMessages = $this->failedLoginUser($addScopeSql, $email, $sErrorMessages, $password);\n        }\n\n        [$sErrorMessages, $sErrorFlag] = $this->eventManager->filter(\n            'Shopware_Modules_Admin_Login_FilterResult',\n            [$sErrorMessages, $sErrorFlag],\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'error' => $sErrorMessages]\n        );\n\n        return ['sErrorFlag' => $sErrorFlag, 'sErrorMessages' => $sErrorMessages];\n    }\n\n    /**\n     * Checks if user is correctly logged in. Also checks session timeout\n     *\n     * @return bool If user is authorized\n     */\n    public function sCheckUser()\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_CheckUser_Start',\n            ['subject' => $this]\n        )\n        ) {\n            return false;\n        }\n\n        $userId = $this->session->offsetGet('sUserId');\n        $userMail = $this->session->offsetGet('sUserMail');\n\n        if (empty($userMail)\n            || empty($userId)\n        ) {\n            $this->session->offsetUnset('sUserMail');\n            $this->session->offsetUnset('sUserId');\n\n            return false;\n        }\n\n        $sql = '\n            SELECT * FROM s_user\n            WHERE email = ? AND id = ?\n            AND UNIX_TIMESTAMP(lastlogin) >= (UNIX_TIMESTAMP(NOW())-?)\n        ';\n\n        $getUser = $this->db->fetchRow(\n            $sql,\n            [\n                $userMail,\n                $userId,\n                (int) ini_get('session.gc_maxlifetime'),\n            ]\n        );\n        $getUser = $getUser ?: [];\n\n        $getUser = $this->eventManager->filter(\n            'Shopware_Modules_Admin_CheckUser_FilterGetUser',\n            $getUser,\n            ['subject' => $this, 'sql' => $sql, 'session' => $this->session]\n        );\n\n        if (!empty($getUser['id'])) {\n            $this->sSYSTEM->sUSERGROUPDATA = $this->db->fetchRow(\n                'SELECT * FROM s_core_customergroups WHERE groupkey = ?',\n                [$getUser['customergroup']]\n            );\n            $this->sSYSTEM->sUSERGROUPDATA = $this->sSYSTEM->sUSERGROUPDATA ?: [];\n\n            $this->sSYSTEM->sUSERGROUP = $getUser['customergroup'];\n\n            $this->session->offsetSet('sUserGroup', $this->sSYSTEM->sUSERGROUP);\n            $this->session->offsetSet('sUserGroupData', $this->sSYSTEM->sUSERGROUPDATA);\n\n            $this->db->query(\n                'UPDATE s_user SET lastlogin = NOW(), sessionID = ? WHERE id = ?',\n                [$this->session->offsetGet('sessionId'), $getUser['id']]\n            );\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_CheckUser_Successful',\n                ['subject' => $this, 'session' => $this->session, 'user' => $getUser]\n            );\n\n            return true;\n        }\n        $this->session->offsetUnset('sUserMail');\n        $this->session->offsetUnset('sUserId');\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_CheckUser_Failure',\n            ['subject' => $this, 'session' => $this->session, 'user' => $getUser]\n        );\n\n        return false;\n    }\n\n    /**\n     * Loads translations for countries. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided country's translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $country Optional array containing country data for translation\n     *\n     * @return array<array-key, mixed> Translated country/ies data\n     */\n    public function sGetCountryTranslation($country = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_countries');\n\n        if (!$country) {\n            return $translationData;\n        }\n\n        if (!isset($translationData[$country['id']])) {\n            return $country;\n        }\n\n        // Pass (possible) translation to country\n        if ($translationData[$country['id']]['countryname']) {\n            $country['countryname'] = $translationData[$country['id']]['countryname'];\n        }\n        if ($translationData[$country['id']]['notice']) {\n            $country['notice'] = $translationData[$country['id']]['notice'];\n        }\n\n        if ($translationData[$country['id']]['active']) {\n            $country['active'] = $translationData[$country['id']]['active'];\n        }\n\n        return $country;\n    }\n\n    /**\n     * Loads the translation for shipping methods. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided shipping methods translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $dispatch Optional array containing shipping method data for translation\n     *\n     * @return array<array-key, mixed> Translated shipping method(s) data\n     */\n    public function sGetDispatchTranslation($dispatch = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_dispatch');\n\n        if (!$dispatch) {\n            return $translationData;\n        }\n\n        // Pass (possible) translation to country\n        if ($translationData[$dispatch['id']]['dispatch_name']) {\n            $dispatch['name'] = $translationData[$dispatch['id']]['dispatch_name'];\n        }\n        if ($translationData[$dispatch['id']]['dispatch_description']) {\n            $dispatch['description'] = $translationData[$dispatch['id']]['dispatch_description'];\n        }\n        if ($translationData[$dispatch['id']]['dispatch_status_link']) {\n            $dispatch['status_link'] = $translationData[$dispatch['id']]['dispatch_status_link'];\n        }\n\n        return $dispatch;\n    }\n\n    /**\n     * Loads the translation for payment means. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided payment means translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $payment Optional array containing payment mean data for translation\n     *\n     * @return array<array-key, mixed> Translated payment mean(s) data\n     */\n    public function sGetPaymentTranslation($payment = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_payment');\n\n        if (!$payment) {\n            return $translationData;\n        }\n\n        // Pass (possible) translation to payment\n        if (!empty($translationData[$payment['id']]['description'])) {\n            $payment['description'] = $translationData[$payment['id']]['description'];\n        }\n        if (!empty($translationData[$payment['id']]['additionalDescription'])) {\n            $payment['additionaldescription'] = $translationData[$payment['id']]['additionalDescription'];\n        }\n\n        return $payment;\n    }\n\n    /**\n     * Get translations for country states in the current shop language\n     * Also includes fallback translations\n     * Used internally in sAdmin\n     *\n     * @param array|null $state\n     *\n     * @return array States translations\n     */\n    public function sGetCountryStateTranslation($state = null)\n    {\n        if (Shopware()->Shop()->get('skipbackend')) {\n            return empty($state) ? [] : $state;\n        }\n\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_country_states');\n\n        if (empty($state)) {\n            return $translationData;\n        }\n\n        if ($translationData[$state['id']]) {\n            $state['statename'] = $translationData[$state['id']]['name'];\n        }\n\n        return $state;\n    }\n\n    /**\n     * Get list of currently active countries. Includes states and translations\n     *\n     * @return array Country list\n     */\n    public function sGetCountryList()\n    {\n        $context = Shopware()->Container()->get('shopware_storefront.context_service')->getShopContext();\n        $service = Shopware()->Container()->get('shopware_storefront.location_service');\n\n        $countryList = $service->getCountries($context);\n        $countryList = Shopware()->Container()->get('legacy_struct_converter')->convertCountryStructList($countryList);\n\n        $countryList = array_map(function ($country) {\n            $request = $this->front->Request();\n            $countryId = (int) $country['id'];\n            $country['flag'] = (int) $request->getPost('country') === $countryId || (int) $request->getPost('countryID') === $countryId;\n\n            return $country;\n        }, $countryList);\n\n        $countryList = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetCountries_FilterResult',\n            $countryList,\n            ['subject' => $this]\n        );\n\n        return $countryList;\n    }\n\n    /**\n     * Send email with registration confirmation\n     * Used internally in sAdmin during the registration process\n     *\n     * @param string $email Recipient email address\n     *\n     * @return false|null False if stopped, null otherwise\n     */\n    public function sSaveRegisterSendConfirmation($email)\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_SaveRegisterSendConfirmation_Start',\n            ['subject' => $this, 'email' => $email]\n        )\n        ) {\n            return false;\n        }\n\n        if (!$this->config->get('sendRegisterConfirmation')) {\n            return false;\n        }\n\n        /** @var \\Shopware\\Bundle\\StoreFrontBundle\\Struct\\Shop $shop */\n        $shop = $this->contextService->getShopContext()->getShop();\n        $shopUrl = 'http://' . $shop->getHost() . $shop->getUrl();\n\n        if ($shop->getSecure()) {\n            $shopUrl = 'https://' . $shop->getHost() . $shop->getUrl();\n        }\n\n        $context = [\n            'sMAIL' => $email,\n            'sShop' => $this->config->get('ShopName'),\n            'sShopURL' => $shopUrl,\n            'sConfig' => $this->config,\n        ];\n\n        $namespace = $this->snippetManager->getNamespace('frontend/salutation');\n        $register = $this->session->offsetGet('sRegister');\n\n        foreach ($register['billing'] as $key => $value) {\n            if ($key === 'salutation') {\n                $value = $namespace->get($value);\n            }\n\n            $context[$key] = $value;\n        }\n\n        if (\\array_key_exists('password', $context)) {\n            unset($context['password']);\n        }\n\n        if (\\array_key_exists('passwordConfirmation', $context)) {\n            unset($context['passwordConfirmation']);\n        }\n\n        $mail = Shopware()->TemplateMail()->createMail('sREGISTERCONFIRMATION', $context);\n        $mail->addTo($email);\n\n        $sendConfirmationEmail = $this->config->get('sSEND_CONFIRM_MAIL');\n        if (!empty($sendConfirmationEmail)) {\n            $mail->addBcc($this->config->get('sMAIL'));\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_SaveRegisterSendConfirmation_BeforeSend',\n            ['subject' => $this, 'mail' => $mail]\n        );\n\n        $mail->send();\n\n        return null;\n    }\n\n    /**\n     * Get purchased instant downloads for the current user\n     * Used in Account controller to display download available to the user\n     *\n     * @param int $destinationPage\n     * @param int $perPage\n     *\n     * @return array Data from orders who contains instant downloads\n     */\n    public function sGetDownloads($destinationPage = 1, $perPage = 10)\n    {\n        $userId = $this->session->offsetGet('sUserId');\n        /** @var array $getOrders */\n        $getOrders = $this->db->fetchAll(\n            \"SELECT\n                id, ordernumber, invoice_amount, invoice_amount_net,\n                invoice_shipping, invoice_shipping_net,\n                DATE_FORMAT(ordertime, '%d.%m.%Y %H:%i') AS datum,\n                status, cleared, comment\n            FROM s_order WHERE userID = ? AND s_order.status >= 0\n            ORDER BY ordertime DESC LIMIT 500\",\n            [$userId]\n        );\n\n        foreach ($getOrders as $orderKey => $orderValue) {\n            if (\n                ($this->config->get('sARTICLESOUTPUTNETTO') && !$this->sSYSTEM->sUSERGROUPDATA['tax'])\n                || (!$this->sSYSTEM->sUSERGROUPDATA['tax'] && $this->sSYSTEM->sUSERGROUPDATA['id'])\n            ) {\n                $getOrders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_amount_net']);\n                $getOrders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_shipping_net']);\n            } else {\n                $getOrders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_amount']);\n                $getOrders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_shipping']);\n            }\n\n            /** @var array $getOrderDetails */\n            $getOrderDetails = $this->db->fetchAll(\n                'SELECT * FROM s_order_details WHERE orderID = ?',\n                [$orderValue['id']]\n            );\n\n            if (!\\count($getOrderDetails)) {\n                unset($getOrders[$orderKey]);\n            } else {\n                $foundESD = false;\n                foreach ($getOrderDetails as $orderDetailsKey => $orderDetailsValue) {\n                    $getOrderDetails[$orderDetailsKey]['amount'] = $this->moduleManager->Articles()\n                        ->sFormatPrice(round($orderDetailsValue['price'] * $orderDetailsValue['quantity'], 2));\n                    $getOrderDetails[$orderDetailsKey]['price'] = $this->moduleManager->Articles()\n                        ->sFormatPrice($orderDetailsValue['price']);\n\n                    // Check for serial\n                    if ($getOrderDetails[$orderDetailsKey]['esdarticle']) {\n                        $foundESD = true;\n                        $numbers = [];\n                        $getSerial = $this->db->fetchAll(\n                            'SELECT serialnumber FROM s_articles_esd_serials, s_order_esd\n                            WHERE userID = ?\n                            AND orderID = ?\n                            AND orderdetailsID = ?\n                            AND s_order_esd.serialID = s_articles_esd_serials.id',\n                            [\n                                $userId,\n                                $orderValue['id'],\n                                $orderDetailsValue['id'],\n                            ]\n                        );\n                        foreach ($getSerial as $serial) {\n                            $numbers[] = $serial['serialnumber'];\n                        }\n                        $getOrderDetails[$orderDetailsKey]['serial'] = implode(', ', $numbers);\n                        // Building download link\n                        $getOrderDetails[$orderDetailsKey]['esdLink'] = $this->config->get('sBASEFILE')\n                            . '?sViewport=account&sAction=download&esdID='\n                            . $orderDetailsValue['id'];\n                    } else {\n                        unset($getOrderDetails[$orderDetailsKey]);\n                    }\n                }\n                if (!empty($foundESD)) {\n                    $getOrders[$orderKey]['details'] = $getOrderDetails;\n                } else {\n                    unset($getOrders[$orderKey]);\n                }\n            }\n        }\n\n        $getOrders = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetDownloads_FilterResult',\n            $getOrders,\n            ['subject' => $this, 'id' => $userId]\n        );\n\n        if ($perPage != 0) {\n            // Make Array with page-structure to render in template\n            $numberOfPages = ceil(\\count($getOrders) / $perPage);\n        } else {\n            $numberOfPages = 0;\n        }\n        $offset = ($destinationPage - 1) * $perPage;\n        $orderData['orderData'] = \\array_slice($getOrders, $offset, $perPage, true);\n        $orderData['numberOfPages'] = $numberOfPages;\n        $orderData['pages'] = $this->getPagerStructure($destinationPage, $numberOfPages);\n\n        return $orderData;\n    }\n\n    /**\n     * Get all orders for the current user\n     * Used in the user account in the Frontend\n     *\n     * @param int $destinationPage\n     * @param int $perPage\n     *\n     * @return array Array with order data / positions\n     */\n    public function sGetOpenOrderData($destinationPage = 1, $perPage = 10)\n    {\n        $shop = Shopware()->Shop();\n        $mainShop = $shop->getMain() !== null ? $shop->getMain() : $shop;\n\n        $destinationPage = !empty($destinationPage) ? $destinationPage : 1;\n        $limitStart = Shopware()->Db()->quote(($destinationPage - 1) * $perPage);\n        $limitEnd = Shopware()->Db()->quote($perPage);\n\n        $sql = \"\n            SELECT SQL_CALC_FOUND_ROWS o.*, cu.templatechar as currency_html, cu.symbol_position as currency_position, DATE_FORMAT(ordertime, '%d.%m.%Y %H:%i') AS datum, state.name as stateName\n            FROM s_order o\n            LEFT JOIN s_core_currencies as cu\n            ON o.currency = cu.currency\n            LEFT JOIN s_core_states as state ON state.id = o.status\n            WHERE userID = ? AND status != -1\n            AND subshopID = ?\n            ORDER BY ordertime DESC\n            LIMIT $limitStart, $limitEnd\n        \";\n        /** @var array $orders */\n        $orders = $this->db->fetchAll(\n            $sql,\n            [\n                $this->session->offsetGet('sUserId'),\n                $mainShop->getId(),\n            ]\n        );\n        $foundOrdersCount = (int) Shopware()->Db()->fetchOne('SELECT FOUND_ROWS()');\n\n        foreach ($orders as $orderKey => $orderValue) {\n            $orders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_amount']);\n            $orders[$orderKey]['invoice_amount_net'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_amount_net']);\n            $orders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_shipping']);\n\n            $orders = $this->processOpenOrderDetails($orderValue, $orders, $orderKey);\n            $orders[$orderKey]['dispatch'] = $this->sGetPremiumDispatch($orderValue['dispatchID']);\n        }\n\n        $orders = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetOpenOrderData_FilterResult',\n            $orders,\n            [\n                'subject' => $this,\n                'id' => $this->session->offsetGet('sUserId'),\n                'subshopID' => $this->contextService->getShopContext()->getShop()->getId(),\n            ]\n        );\n\n        $orderData = [];\n        $orderData['orderData'] = $orders;\n        $numberOfPages = 0;\n\n        if ($limitEnd != 0) {\n            // Make Array with page structure to render in template\n            $numberOfPages = ceil($foundOrdersCount / $limitEnd);\n        }\n\n        $orderData['numberOfPages'] = $numberOfPages;\n        $orderData['pages'] = $this->getPagerStructure($destinationPage, $numberOfPages);\n\n        return $orderData;\n    }\n\n    /**\n     * Calculates and returns the pager structure for the frontend\n     *\n     * @param int   $destinationPage\n     * @param int   $numberOfPages\n     * @param array $additionalParams\n     *\n     * @return array\n     */\n    public function getPagerStructure($destinationPage, $numberOfPages, $additionalParams = [])\n    {\n        $destinationPage = !empty($destinationPage) ? $destinationPage : 1;\n        $pagesStructure = [];\n        $baseFile = $this->config->get('sBASEFILE');\n        if ($numberOfPages > 1) {\n            for ($i = 1; $i <= $numberOfPages; ++$i) {\n                $pagesStructure['numbers'][$i]['markup'] = $i == $destinationPage;\n                $pagesStructure['numbers'][$i]['value'] = $i;\n                $pagesStructure['numbers'][$i]['link'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $i]);\n            }\n            // Previous page\n            if ($destinationPage != 1) {\n                $pagesStructure['previous'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $destinationPage - 1]);\n            } else {\n                $pagesStructure['previous'] = null;\n            }\n            // Next page\n            if ($destinationPage != $numberOfPages) {\n                $pagesStructure['next'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $destinationPage + 1]);\n            } else {\n                $pagesStructure['next'] = null;\n            }\n        }\n\n        return $pagesStructure;\n    }\n\n    /**\n     * Get the current user's email address\n     *\n     * @return string|null Current user email address, or null if none found\n     */\n    public function sGetUserMailById()\n    {\n        return $this->db->fetchOne(\n            'SELECT email FROM s_user WHERE id = ?',\n            [$this->session->offsetGet('sUserId')]\n        ) ?: null;\n    }\n\n    /**\n     * Get user id by his email address\n     *\n     * @param string $email Email address of the user\n     *\n     * @return int|null The user id, or null if none found\n     */\n    public function sGetUserByMail($email)\n    {\n        $addScopeSql = '';\n        if ($this->scopedRegistration == true) {\n            $addScopeSql = $this->db->quoteInto('AND subshopID = ?', $this->subshopId);\n        }\n\n        $result = $this->db->fetchOne(\n            \"SELECT id FROM s_user WHERE email = ? AND accountmode != 1 $addScopeSql\",\n            [$email]\n        );\n\n        return $result ? (int) $result : null;\n    }\n\n    /**\n     * Get user first and last names by id\n     *\n     * @param int $id User id\n     *\n     * @return array first name/last name\n     */\n    public function sGetUserNameById($id)\n    {\n        return $this->db->fetchRow('SELECT firstname, lastname FROM s_user WHERE id = ?', [$id]) ?: [];\n    }\n\n    /**\n     * Get all data from the current logged in user\n     *\n     * @return array|false User data, of false if interrupted\n     */\n    public function sGetUserData()\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_GetUserData_Start',\n            ['subject' => $this]\n        )\n        ) {\n            return false;\n        }\n        $register = $this->session->offsetGet('sRegister');\n        if (empty($register)) {\n            $this->session->offsetSet('sRegister', []);\n        }\n\n        $userData = [];\n\n        $countryQuery =\n            'SELECT c.*, a.name AS countryarea\n          FROM s_core_countries c\n          LEFT JOIN s_core_countries_areas a\n           ON a.id = c.areaID AND a.active = 1\n          WHERE c.id = ?';\n\n        // If user is logged in\n        $userId = (int) $this->session->offsetGet('sUserId');\n        if ($userId !== 0) {\n            $userData = $this->getUserBillingData($userId, $userData);\n\n            $userData = $this->getUserCountryData($userData, $userId);\n\n            $newsletter = $this->db->fetchRow(\n                'SELECT id FROM s_campaigns_mailaddresses WHERE email = ?',\n                [$userData['additional']['user']['email']]\n            );\n\n            $userData['additional']['user']['newsletter'] = isset($newsletter['id']) ? 1 : 0;\n\n            $userData = $this->getUserShippingData($userId, $userData, $countryQuery);\n            $userData = $this->overwriteBillingAddress($userData);\n            $userData = $this->overwriteShippingAddress($userData);\n\n            $userData['additional']['payment'] = $this->sGetPaymentMeanById(\n                $userData['additional']['user']['paymentID'],\n                $userData\n            );\n        } else {\n            // No user logged in\n            $register = $this->session->offsetGet('sRegister');\n            if (\n                $this->session->offsetGet('sCountry')\n                && $this->session->offsetGet('sCountry') != $register['billing']['country']\n            ) {\n                $register['billing']['country'] = (int) $this->session->offsetGet('sCountry');\n                $this->session->offsetSet('sRegister', $register);\n            }\n\n            $userData['additional']['country'] = $this->db->fetchRow(\n                $countryQuery,\n                [(int) $register['billing']['country']]\n            );\n            $userData['additional']['country'] = $userData['additional']['country'] ?: [];\n            $userData['additional']['countryShipping'] = $userData['additional']['country'];\n            $state = $this->session->offsetGet('sState');\n            $userData['additional']['stateShipping']['id'] = !empty($state) ? $state : 0;\n        }\n\n        $userData = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetUserData_FilterResult',\n            $userData,\n            ['subject' => $this, 'id' => $this->session->offsetGet('sUserId')]\n        );\n\n        return $userData;\n    }\n\n    /**\n     * Shopware Risk Management\n     *\n     * @param int        $paymentID Payment mean id (s_core_paymentmeans.id)\n     * @param array|null $basket    Current shopping cart\n     * @param array      $user      User data\n     *\n     * @return bool If customer is a risk customer\n     */\n    public function sManageRisks($paymentID, $basket, $user)\n    {\n        // Get all assigned rules\n        $queryRules = $this->db->fetchAll('\n            SELECT rule1, value1, rule2, value2\n            FROM s_core_rulesets\n            WHERE paymentID = ?\n            ORDER BY id ASC\n        ', [$paymentID]);\n\n        if (empty($queryRules)) {\n            return false;\n        }\n\n        // Get Basket\n        if (empty($basket)) {\n            $basket = [\n                'content' => $this->session->offsetGet('sBasketQuantity'),\n                'AmountNumeric' => $this->session->offsetGet('sBasketAmount'),\n            ];\n        }\n\n        foreach ($queryRules as $rule) {\n            if ($rule['rule1'] && !$rule['rule2']) {\n                $rule['rule1'] = 'sRisk' . $rule['rule1'];\n                if ($this->executeRiskRule($rule['rule1'], $user, $basket, $rule['value1'], $paymentID)) {\n                    return true;\n                }\n            } elseif ($rule['rule1'] && $rule['rule2']) {\n                $rule['rule1'] = 'sRisk' . $rule['rule1'];\n                $rule['rule2'] = 'sRisk' . $rule['rule2'];\n                if (\n                    $this->executeRiskRule($rule['rule1'], $user, $basket, $rule['value1'], $paymentID)\n                    && $this->executeRiskRule($rule['rule2'], $user, $basket, $rule['value2'], $paymentID)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Function to execute risk rules\n     *\n     * @param string $rule\n     * @param array  $user\n     * @param array  $basket\n     * @param string $value\n     * @param int    $paymentID\n     *\n     * @return bool\n     */\n    public function executeRiskRule($rule, $user, $basket, $value, $paymentID = null)\n    {\n        if (\n        $event = $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_Execute_Risk_Rule_' . $rule,\n            [\n                'rule' => $rule,\n                'user' => $user,\n                'basket' => $basket,\n                'value' => $value,\n                'paymentID' => $paymentID,\n            ]\n        )\n        ) {\n            return $event->getReturn();\n        }\n\n        return $this->$rule($user, $basket, $value);\n    }\n\n    /**\n     * Risk management - Order value greater then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERVALUEMORE($user, $order, $value)\n    {\n        $basketValue = $order[CartKey::AMOUNT_NUMERIC];\n\n        if ($this->sSYSTEM->sCurrency['factor']) {\n            $basketValue /= $this->sSYSTEM->sCurrency['factor'];\n        }\n\n        return $basketValue >= $value;\n    }\n\n    /**\n     * Risk management - Order value less then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERVALUELESS($user, $order, $value)\n    {\n        $basketValue = $order[CartKey::AMOUNT_NUMERIC];\n\n        if ($this->sSYSTEM->sCurrency['factor']) {\n            $basketValue /= $this->sSYSTEM->sCurrency['factor'];\n        }\n\n        return $basketValue <= $value;\n    }\n\n    /**\n     * Risk management Customer group matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERGROUPIS($user, $order, $value)\n    {\n        return $value == $user['additional']['user']['customergroup'];\n    }\n\n    /**\n     * Risk management Customer group doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERGROUPISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['user']['customergroup'];\n    }\n\n    /**\n     * Risk management - Shipping zip code match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZIPCODE($user, $order, $value)\n    {\n        if ($value == '-1') {\n            $value = '';\n        }\n\n        return $value == $user['shippingaddress']['zipcode'];\n    }\n\n    /**\n     * Risk management - Billing zip code match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZIPCODE($user, $order, $value)\n    {\n        if ($value == '-1') {\n            $value = '';\n        }\n\n        return $value == $user['billingaddress']['zipcode'];\n    }\n\n    /**\n     * Risk management - Country zone matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZONEIS($user, $order, $value)\n    {\n        return $value == $user['additional']['countryShipping']['countryarea'];\n    }\n\n    /**\n     * Risk management - Country zone doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZONEISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['countryShipping']['countryarea'];\n    }\n\n    /**\n     * Risk management - Billing Country zone matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZONEIS($user, $order, $value)\n    {\n        return $value == $user['additional']['country']['countryarea'];\n    }\n\n    /**\n     * Risk management - Billing Country zone doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZONEISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['country']['countryarea'];\n    }\n\n    /**\n     * Risk management - Country matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLANDIS($user, $order, $value)\n    {\n        if (preg_match(\"/$value/\", $user['additional']['countryShipping']['countryiso'])) {\n            return true;\n        }\n\n        return $value == $user['additional']['countryShipping']['countryiso'];\n    }\n\n    /**\n     * Risk management - Country doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLANDISNOT($user, $order, $value)\n    {\n        if (!preg_match(\"/$value/\", $user['additional']['countryShipping']['countryiso'])) {\n            return true;\n        }\n\n        return $value != $user['additional']['countryShipping']['countryiso'];\n    }\n\n    /**\n     * Risk management - Billing Country matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGLANDIS($user, $order, $value)\n    {\n        if (preg_match(\"/$value/\", $user['additional']['country']['countryiso'])) {\n            return true;\n        }\n\n        return $value == $user['additional']['country']['countryiso'];\n    }\n\n    /**\n     * Risk management - Billing Country doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGLANDISNOT($user, $order, $value)\n    {\n        if (!preg_match(\"/$value/\", $user['additional']['country']['countryiso'])) {\n            return true;\n        }\n\n        return $value != $user['additional']['country']['countryiso'];\n    }\n\n    /**\n     * Risk management - Customer is new\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskNEWCUSTOMER($user, $order, $value)\n    {\n        return date('Y-m-d') == $user['additional']['user']['firstlogin']\n            || !$user['additional']['user']['firstlogin'];\n    }\n\n    /**\n     * Risk management - Order has more then value positions\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERPOSITIONSMORE($user, $order, $value)\n    {\n        return \\is_array($order[CartKey::POSITIONS]) ? \\count($order[CartKey::POSITIONS]) : $order[CartKey::POSITIONS] >= $value;\n    }\n\n    /**\n     * Risk management - Article attribute x from basket - positions is y\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool|null Rule validation result\n     */\n    public function sRiskATTRIS($user, $order, $value)\n    {\n        if (!empty($order[CartKey::POSITIONS])) {\n            $value = explode('|', $value);\n\n            if (!isset($value[0], $value[1])) {\n                return null;\n            }\n\n            return $this->hasProductAttributeMatch($value[0], $value[1], '=');\n        }\n\n        return null;\n    }\n\n    /**\n     * Risk management - product attribute x from basket is not y\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool|null Rule validation result\n     */\n    public function sRiskATTRISNOT($user, $order, $value)\n    {\n        if (!empty($order[CartKey::POSITIONS])) {\n            $value = explode('|', $value);\n\n            if (!isset($value[0], $value[1])) {\n                return null;\n            }\n\n            return $this->hasProductAttributeMatch($value[0], $value[1], '!=');\n        }\n\n        return null;\n    }\n\n    /**\n     * @param bool|array $user\n     *\n     * @return bool|void\n     */\n    public function sRiskCUSTOMERATTRIS($user, array $order, string $value)\n    {\n        if (!isset($user['additional']['user'])) {\n            return;\n        }\n\n        $values = explode('|', $value);\n        if (!isset($values[0], $values[1])) {\n            return;\n        }\n\n        $attribute = $values[0];\n        $value = $values[1];\n\n        if (!isset($user['additional']['user'][$attribute])) {\n            return;\n        }\n\n        return $user['additional']['user'][$attribute] === $value;\n    }\n\n    /**\n     * @param bool|array $user\n     *\n     * @return bool|void\n     */\n    public function sRiskCUSTOMERATTRISNOT($user, array $order, string $value)\n    {\n        if (!isset($user['additional']['user'])) {\n            return true;\n        }\n\n        $values = explode('|', $value);\n        if (!isset($values[0], $values[1])) {\n            return true;\n        }\n\n        $attribute = $values[0];\n        $value = $values[1];\n\n        if (!isset($user['additional']['user'][$attribute])) {\n            return true;\n        }\n\n        return $user['additional']['user'][$attribute] !== $value;\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 13\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELONE($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(13);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 14\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELTWO($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(14);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 15\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELTHREE($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(15);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 16 (Encashment)\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskINKASSO($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(16);\n    }\n\n    /**\n     * Risk management - Last order less x days\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTORDERLESS($user, $order, $value)\n    {\n        // A order from previous x days must exists\n        if ($this->session->offsetGet('sUserId')) {\n            $value = (int) $value;\n            $checkOrder = $this->db->fetchRow(\n                \"SELECT id\n                FROM s_order\n                WHERE userID = ?\n                AND TO_DAYS(ordertime) <= (TO_DAYS(now())-$value) LIMIT 1\",\n                [\n                    $this->session->offsetGet('sUserId'),\n                ]\n            );\n\n            return !$checkOrder || !$checkOrder['id'];\n        }\n\n        return true;\n    }\n\n    /**\n     * Risk management - Products from a certain category\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskARTICLESFROM($user, $order, $value)\n    {\n        $checkProduct = $this->db->fetchOne('\n            SELECT s_articles_categories_ro.id AS id\n            FROM s_order_basket, s_articles_categories_ro\n            WHERE s_order_basket.articleID = s_articles_categories_ro.articleID\n            AND s_articles_categories_ro.categoryID = ?\n            AND s_order_basket.sessionID = ?\n            AND s_order_basket.modus = 0\n        ', [$value, $this->session->offsetGet('sessionId')]);\n\n        return !empty($checkProduct);\n    }\n\n    /**\n     * Risk management - Order value greater then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTORDERSLESS($user, $order, $value)\n    {\n        if ($this->session->offsetGet('sUserId')) {\n            $checkOrder = $this->db->fetchAll(\n                'SELECT id FROM s_order\n                  WHERE status != -1 AND status != 4 AND userID = ?',\n                [$this->session->offsetGet('sUserId')]\n            );\n\n            return \\count($checkOrder) <= $value;\n        }\n\n        return true;\n    }\n\n    /**\n     * Risk management - Block if street contains pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskPREGSTREET($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return (bool) preg_match(\n            \"/$value/\",\n            strtolower($user['shippingaddress']['street'])\n        );\n    }\n\n    /**\n     * Risk management - Block if street contains pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskPREGBILLINGSTREET($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return (bool) preg_match(\n            \"/$value/\",\n            strtolower($user['billingaddress']['street'])\n        );\n    }\n\n    /**\n     * Risk management - Block if billing address not equal to shipping address\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDIFFER($user, $order, $value)\n    {\n        // Compare street and zipcode.\n        // Return true if any of them doesn't match.\n        return (\n                strtolower(\n                    trim($user['shippingaddress']['street'])\n                ) != strtolower(\n                    trim($user['billingaddress']['street'])\n                )\n            ) || (\n                trim($user['shippingaddress']['zipcode'])\n                != trim($user['billingaddress']['zipcode'])\n            );\n    }\n\n    /**\n     * Risk management - Block if customer number matches pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERNR($user, $order, $value)\n    {\n        return $value == $user['additional']['user']['customernumber'] && !empty($value);\n    }\n\n    /**\n     * Risk management - Block if last name matches pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTNAME($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return preg_match(\"/$value/\", strtolower($user['shippingaddress']['lastname']))\n            || preg_match(\"/$value/\", strtolower($user['billingaddress']['lastname']));\n    }\n\n    /**\n     * Risk management -  Block if subshop id is x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskSUBSHOP($user, $order, $value)\n    {\n        return $this->contextService->getShopContext()->getShop()->getId() == $value;\n    }\n\n    /**\n     * Risk management -  Block if subshop id is not x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskSUBSHOPNOT($user, $order, $value)\n    {\n        return $this->contextService->getShopContext()->getShop()->getId() != $value;\n    }\n\n    /**\n     * Risk management - Block if currency id is not x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCURRENCIESISOIS($user, $order, $value)\n    {\n        return strtolower($this->sSYSTEM->sCurrency['currency']) === strtolower($value);\n    }\n\n    /**\n     * Risk management - Block if currency id is x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCURRENCIESISOISNOT($user, $order, $value)\n    {\n        return strtolower($this->sSYSTEM->sCurrency['currency']) !== strtolower($value);\n    }\n\n    /**\n     * Subscribe / unsubscribe to mailing list\n     * Used in the Newsletter frontend controller to manage subscriptions\n     *\n     * @param string $email       Email address\n     * @param bool   $unsubscribe If true, remove email address from mailing list\n     * @param int    $groupID     Id of the mailing list group\n     *\n     * @return array Array with the result of the operation\n     */\n    public function sNewsletterSubscription($email, $unsubscribe = false, $groupID = null)\n    {\n        if (empty($unsubscribe)) {\n            $errorFlag = [];\n            $config = Shopware()->Container()->get(Shopware_Components_Config::class);\n\n            if (\n                $this->shouldVerifyCaptcha($config)\n                && (bool) $this->front->Request()->getParam('voteConfirmed', false) === false\n            ) {\n                /** @var CaptchaValidator $captchaValidator */\n                $captchaValidator = Shopware()->Container()->get('shopware.captcha.validator');\n\n                if (!$captchaValidator->validateByName($config->get('newsletterCaptcha'), $this->front->Request())) {\n                    return [\n                        'code' => 7,\n                    ];\n                }\n            }\n\n            $fields = ['newsletter'];\n            foreach ($fields as $field) {\n                $fieldData = $this->front->Request()->getPost($field);\n                if (isset($fieldData) && empty($fieldData)) {\n                    $errorFlag[$field] = true;\n                }\n            }\n\n            if (!empty($errorFlag)) {\n                return [\n                    'code' => 5,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('ErrorFillIn', 'Please fill in all red fields'),\n                    'sErrorFlag' => $errorFlag,\n                ];\n            }\n        }\n\n        if (empty($groupID)) {\n            $groupID = $this->config->get('sNEWSLETTERDEFAULTGROUP');\n            $sql = '\n                INSERT IGNORE INTO s_campaigns_groups (id, name)\n                VALUES (?, ?)\n            ';\n            $this->db->query($sql, [$groupID, 'Newsletter-Empf\u00e4nger']);\n        }\n\n        $email = strtolower(trim(stripslashes($email)));\n        if (empty($email)) {\n            return [\n                'code' => 6,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('NewsletterFailureMail', 'Enter eMail address'),\n            ];\n        }\n        if (!$this->emailValidator->isValid($email)) {\n            return [\n                'code' => 1,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('NewsletterFailureInvalid', 'Enter valid eMail address'),\n            ];\n        }\n        if (!$unsubscribe) {\n            $result = $this->subscribeNewsletter($email, $groupID);\n        } else {\n            $deleteResult = $this->db->delete('s_campaigns_mailaddresses', ['email = ?' => $email]);\n            $updateResult = $this->db->update('s_user', ['newsletter' => 0], ['email = ?' => $email]);\n\n            if ($deleteResult == 0 && $updateResult == 0) {\n                $result = [\n                    'code' => 4,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('NewsletterFailureNotFound', 'This mail address could not be found'),\n                ];\n            } else {\n                $result = [\n                    'code' => 5,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('NewsletterMailDeleted', 'Your mail address was deleted'),\n                ];\n            }\n        }\n\n        if (!empty($result['code']) && \\in_array($result['code'], [2, 3])) {\n            $voteConfirmed = $this->front->getParam('voteConfirmed');\n            $now = $this->front->getParam('optinNow');\n            $now = isset($now) ? $now : (new DateTime())->format('Y-m-d H:i:s');\n\n            $added = $voteConfirmed ? $this->front->getParam('optinDate') : $now;\n            $doubleOptInConfirmed = $voteConfirmed ? $now : null;\n            $mailDataExists = $this->connection->fetchColumn(\n                'SELECT 1 FROM s_campaigns_maildata WHERE email = ? AND groupID = ?',\n                [\n                    $email,\n                    $groupID,\n                ]\n            );\n\n            if (empty($mailDataExists)) {\n                $sql = '\n                    REPLACE INTO s_campaigns_maildata (\n                      email, groupID, salutation, title, firstname,\n                      lastname, street, zipcode, city, added, double_optin_confirmed\n                    )\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                ';\n                $this->connection->executeQuery($sql, [\n                    $email,\n                    $groupID,\n                    $this->front->Request()->getPost('salutation'),\n                    $this->front->Request()->getPost('title'),\n                    $this->front->Request()->getPost('firstname'),\n                    $this->front->Request()->getPost('lastname'),\n                    $this->front->Request()->getPost('street'),\n                    $this->front->Request()->getPost('zipcode'),\n                    $this->front->Request()->getPost('city'),\n                    $added,\n                    $doubleOptInConfirmed,\n                ]);\n            } else {\n                $this->connection->update(\n                    's_campaigns_maildata',\n                    [\n                        'groupID' => $groupID,\n                        'salutation' => $this->front->Request()->getPost('salutation'),\n                        'title' => $this->front->Request()->getPost('title'),\n                        'firstname' => $this->front->Request()->getPost('firstname'),\n                        'lastname' => $this->front->Request()->getPost('lastname'),\n                        'street' => $this->front->Request()->getPost('street'),\n                        'city' => $this->front->Request()->getPost('city'),\n                    ],\n                    [\n                        'email' => $email,\n                        'groupID' => $groupID,\n                    ]\n                );\n            }\n        } elseif (!empty($unsubscribe)) {\n            $this->connection->delete('s_campaigns_maildata', ['email' => $email, 'groupID' => $groupID]);\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Newsletter_Unsubscribe',\n                ['email' => $email]\n            );\n        }\n\n        return $result;\n    }\n\n    /**\n     * Generate table with german holidays\n     *\n     * @return bool\n     */\n    public function sCreateHolidaysTable()\n    {\n        /** @var HolidayTableUpdater $updater */\n        $updater = Shopware()->Container()->get('shopware.holiday_table_updater');\n        $updater->update();\n\n        return true;\n    }\n\n    /**\n     * Get country from its id or iso code\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param int|string $country Country id or iso code\n     *\n     * @return array|false Array with country information, including area, or false if empty argument\n     */\n    public function sGetCountry($country)\n    {\n        if (empty($country)) {\n            return false;\n        }\n        if (isset($this->cache['country'][$country])) {\n            return $this->cache['country'][$country];\n        }\n\n        if (is_numeric($country)) {\n            $sql = $this->db->quoteInto('c.id = ?', $country);\n        } elseif (\\is_string($country)) {\n            $sql = $this->db->quoteInto('c.countryiso = ?', $country);\n        } else {\n            return false;\n        }\n\n        $sql = \"\n            SELECT c.id, c.id as countryID, countryname, countryiso,\n                (SELECT name FROM s_core_countries_areas WHERE id = areaID ) AS countryarea,\n                countryen, c.position, notice\n            FROM s_core_countries c\n            WHERE $sql\n        \";\n\n        return $this->cache['country'][$country] = $this->db->fetchRow($sql) ?: [];\n    }\n\n    /**\n     * Get a specific payment\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param int|string $payment Payment mean id or name\n     *\n     * @return array|false Array with payment mean information, including area, or false if empty argument\n     */\n    public function sGetPaymentMean($payment)\n    {\n        if (empty($payment)) {\n            return false;\n        }\n        if (isset($this->cache['payment'][$payment])) {\n            return $this->cache['payment'][$payment];\n        }\n        if (is_numeric($payment)) {\n            $sql = $this->db->quoteInto('id = ?', $payment);\n        } elseif (\\is_string($payment)) {\n            $sql = $this->db->quoteInto('name = ?', $payment);\n        } else {\n            return false;\n        }\n\n        $sql = \"\n            SELECT * FROM s_core_paymentmeans\n            WHERE $sql\n        \";\n        $this->cache['payment'][$payment] = $this->db->fetchRow($sql) ?: [];\n\n        $this->cache['payment'][$payment]['country_surcharge'] = [];\n        if (!empty($this->cache['payment'][$payment]['surchargestring'])) {\n            foreach (explode(';', $this->cache['payment'][$payment]['surchargestring']) as $countrySurcharge) {\n                [$key, $value] = explode(':', $countrySurcharge);\n                $value = (float) str_replace(',', '.', $value);\n                if (!empty($value)) {\n                    $this->cache['payment'][$payment]['country_surcharge'][$key] = $value;\n                }\n            }\n        }\n\n        return $this->cache['payment'][$payment];\n    }\n\n    /**\n     * Get dispatch data for basket\n     * Used internally in sAdmin::sGetPremiumShippingcosts() and sAdmin::sGetPremiumDispatches()\n     *\n     * @param int $countryID Country id\n     * @param int $paymentID Payment mean id\n     * @param int $stateId   Country state id\n     *\n     * @return false|array Array with dispatch data for the basket, or false if no basket\n     */\n    public function sGetDispatchBasket($countryID = null, $paymentID = null, $stateId = null)\n    {\n        $addSelect = [];\n        $premiumShippingBasketSelect = $this->config->get('sPREMIUMSHIPPIUNGASKETSELECT');\n        if (!empty($premiumShippingBasketSelect)) {\n            $addSelect[] = $premiumShippingBasketSelect;\n        }\n\n        $calculationQueryBuilder = $this->connection->createQueryBuilder()\n            ->select(['id', 'calculation_sql'])\n            ->from('s_premium_dispatch')\n            ->where('active = 1')\n            ->andWhere('calculation = 3');\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetDispatchBasket_Calculation_QueryBuilder',\n            [\n                'queryBuilder' => $calculationQueryBuilder,\n            ]\n        );\n\n        $calculations = $calculationQueryBuilder->execute()->fetchAll(PDO::FETCH_KEY_PAIR);\n\n        if (!empty($calculations)) {\n            foreach ($calculations as $dispatchID => $calculation) {\n                if (empty($calculation)) {\n                    $calculation = $this->db->quote($calculation);\n                }\n                $addSelect[] = '(' . $calculation . ') as calculation_value_' . $dispatchID;\n            }\n        }\n\n        $userId = $this->session->offsetGet('sUserId');\n        $sessionId = $this->session->offsetGet('sessionId');\n\n        if (empty($this->sSYSTEM->sUSERGROUPDATA['tax']) && !empty($this->sSYSTEM->sUSERGROUPDATA['id'])) {\n            $amount = 'b.quantity*ROUND(CAST(b.price as DECIMAL(10,2))*(100+t.tax)/100,2)';\n            $amount_net = 'b.quantity*CAST(b.price as DECIMAL(10,2))';\n        } else {\n            $amount = 'b.quantity*CAST(b.price as DECIMAL(10,2))';\n            $amount_net = 'b.quantity*ROUND(CAST(b.price as DECIMAL(10,2))/(100+t.tax)*100,2)';\n        }\n\n        $queryBuilder = $this->getBasketQueryBuilder($amount, $amount_net);\n\n        $queryBuilder->setParameters([\n            'userId' => $userId,\n            'sessionId' => empty($sessionId) ? session_id() : $sessionId,\n            'billingAddressId' => $this->getBillingAddressId(),\n            'shippingAddressId' => $this->getShippingAddressId(),\n        ]);\n\n        foreach ($addSelect as $select) {\n            $queryBuilder->addSelect($select);\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetDispatchBasket_QueryBuilder',\n            [\n                'queryBuilder' => $queryBuilder,\n                'amount' => $amount,\n                'amount_net' => $amount_net,\n            ]\n        );\n\n        $basket = $queryBuilder->execute()->fetch(PDO::FETCH_ASSOC);\n\n        if ($basket === false) {\n            return false;\n        }\n\n        $basket['max_tax'] = $this->moduleManager->Basket()->getMaxTax();\n\n        $postPaymentId = $this->front->Request()->getPost('sPayment');\n        $sessionPaymentId = $this->session->offsetGet('sPaymentID');\n\n        if (!empty($paymentID)) {\n            $paymentID = (int) $paymentID;\n        } elseif (!empty($userId)) {\n            $user = $this->sGetUserData();\n            $paymentID = (int) $user['additional']['payment']['id'];\n        } elseif (!empty($postPaymentId)) {\n            $paymentID = (int) $postPaymentId;\n        } elseif (!empty($sessionPaymentId)) {\n            $paymentID = (int) $sessionPaymentId;\n        }\n\n        $paymentMeans = $this->sGetPaymentMeans();\n        $paymentIDs = [];\n        foreach ($paymentMeans as $paymentMean) {\n            $paymentIDs[] = $paymentMean['id'];\n        }\n        if (!\\in_array($paymentID, $paymentIDs)) {\n            $paymentID = reset($paymentIDs);\n        }\n\n        if (empty($countryID) && !empty($user['additional']['countryShipping']['id'])) {\n            $countryID = (int) $user['additional']['countryShipping']['id'];\n        } else {\n            $countryID = (int) $countryID;\n        }\n\n        if (!empty($user['additional']['stateShipping']['id'])) {\n            $stateId = $user['additional']['stateShipping']['id'];\n        }\n        $mainId = $this->db->fetchOne(\n            'SELECT main_id FROM s_core_shops WHERE id = ?',\n            [(int) $this->contextService->getShopContext()->getShop()->getId()]\n        );\n        // Main id is null, so we use the current shop id\n        if ($mainId === null) {\n            $mainId = (int) $this->contextService->getShopContext()->getShop()->getId();\n        }\n        $basket['basketStateId'] = (int) $stateId;\n        $basket['countryID'] = $countryID;\n        $basket['paymentID'] = $paymentID;\n        $basket['customergroupID'] = (int) $this->sSYSTEM->sUSERGROUPDATA['id'];\n        $basket['multishopID'] = $mainId;\n        $basket['sessionID'] = $sessionId;\n\n        return $basket;\n    }\n\n    /**\n     * Get premium dispatch method\n     * Used internally, in sOrder and AboCommerce plugin\n     *\n     * @param int $dispatchID Dispatch method id\n     *\n     * @return array|false Array with dispatch method data\n     */\n    public function sGetPremiumDispatch($dispatchID = null)\n    {\n        $sql = '\n            SELECT d.id, `name`, d.description, calculation, status_link,\n              surcharge_calculation, bind_shippingfree, shippingfree, tax_calculation,\n              t.tax AS tax_calculation_value\n            FROM s_premium_dispatch d\n            LEFT JOIN s_core_tax t\n            ON t.id = d.tax_calculation\n            WHERE active = 1\n            AND d.id = ?\n        ';\n        $dispatch = $this->db->fetchRow($sql, [$dispatchID]);\n        if ($dispatch === false) {\n            return false;\n        }\n\n        return $this->sGetDispatchTranslation($dispatch);\n    }\n\n    /**\n     * Get dispatch methods\n     *\n     * @param int $countryID Country id\n     * @param int $paymentID Payment mean id\n     * @param int $stateId   Country state id\n     *\n     * @return array Shipping methods data\n     */\n    public function sGetPremiumDispatches($countryID = null, $paymentID = null, $stateId = null)\n    {\n        $this->sCreateHolidaysTable();\n\n        $basket = $this->sGetDispatchBasket($countryID, $paymentID, $stateId);\n\n        $statements = $this->connection->createQueryBuilder()\n            ->select('id', 'bind_sql')\n            ->from('s_premium_dispatch')\n            ->where('active = 1 AND type IN (0)')\n            ->andWhere('bind_sql IS NOT NULL AND bind_sql != \"\"')\n            ->execute()\n            ->fetchAll(PDO::FETCH_KEY_PAIR);\n\n        if (empty($basket)) {\n            return [];\n        }\n\n        $sqlAndWhere = [];\n        foreach ($statements as $dispatchID => $statement) {\n            $sqlAndWhere[] = \"(d.id != $dispatchID OR ($statement))\";\n        }\n\n        $sqlBasket = [];\n        foreach ($basket as $key => $value) {\n            $sqlBasket[] = $this->connection->quote($value) . \" as `$key`\";\n        }\n        $sqlBasket = implode(',', $sqlBasket);\n\n        $joinSubSelect = $this->connection->createQueryBuilder()\n            ->select('dc.dispatchID')\n            ->from('s_order_basket', 'b')\n            ->join('b', 's_articles_categories_ro', 'ac', 'ac.articleID = b.articleID')\n            ->join('ac', 's_premium_dispatch_categories', 'dc', 'dc.categoryID = ac.categoryID')\n            ->where('b.modus = 0')\n            ->andWhere('b.sessionID = :sessionId')\n            ->groupBy('dc.dispatchID');\n\n        $queryBuilder = $this->connection->createQueryBuilder();\n        $queryBuilder->select([\n            'd.id as `key`',\n            'd.id, d.name',\n            'd.description',\n            'd.calculation',\n            'd.status_link',\n            'b.*',\n        ])\n            ->from('s_premium_dispatch', 'd')\n            ->join('d', sprintf('(SELECT %s)', $sqlBasket), 'b', '1=1')\n            ->join('d', 's_premium_dispatch_countries', 'dc', 'd.id = dc.dispatchID AND dc.countryID=b.countryID')\n            ->join('d', 's_premium_dispatch_paymentmeans', 'dp', 'd.id = dp.dispatchID AND dp.paymentID=b.paymentID')\n            ->leftJoin('d', 's_premium_holidays', 'h', 'h.date = CURDATE()')\n            ->leftJoin('d', 's_premium_dispatch_holidays', 'dh', 'd.id=dh.dispatchID AND h.id=dh.holidayID')\n            ->leftJoin('d', sprintf('(%s)', $joinSubSelect->getSQL()), 'dk', 'dk.dispatchID=d.id')\n            ->leftJoin('b', 's_user', 'u', ' u.id=b.userID AND u.active=1')\n            ->leftJoin('u', 's_user_addresses', 'ub', 'ub.user_id = u.id AND ub.id = :billingAddressId')\n            ->leftJoin('u', 's_user_addresses', 'us', 'us.user_id = u.id AND us.id = :shippingAddressId')\n            ->where('d.active = 1')\n            ->andWhere('(\n                (bind_time_from IS NULL AND bind_time_to IS NULL)\n                OR\n                (IFNULL(bind_time_from,0) <= IFNULL(bind_time_to,86400) AND TIME_TO_SEC(DATE_FORMAT(NOW(),\"%H:%i:00\")) BETWEEN IFNULL(bind_time_from,0) AND IFNULL(bind_time_to,86400))\n                OR\n                (bind_time_from > bind_time_to AND TIME_TO_SEC(DATE_FORMAT(NOW(),\"%H:%i:00\")) NOT BETWEEN bind_time_to AND bind_time_from)\n            )')\n            ->andWhere('(\n                (bind_weekday_from IS NULL AND bind_weekday_to IS NULL)\n                OR\n                (IFNULL(bind_weekday_from,1) <= IFNULL(bind_weekday_to,7) AND WEEKDAY(NOW())+1 BETWEEN IFNULL(bind_weekday_from,1) AND IFNULL(bind_weekday_to,7))\n                OR\n                (bind_weekday_from > bind_weekday_to AND WEEKDAY(NOW())+1 NOT BETWEEN bind_weekday_to AND bind_weekday_from)\n            )')\n            ->andWhere('(bind_weight_from IS NULL OR bind_weight_from <= b.weight)')\n            ->andWhere('(bind_weight_to IS NULL OR bind_weight_to >= b.weight)')\n            ->andWhere('(bind_price_from IS NULL OR bind_price_from <= b.amount)')\n            ->andWhere('(bind_price_to IS NULL OR bind_price_to >= b.amount)')\n            ->andWhere('(bind_instock=0 OR bind_instock IS NULL OR (bind_instock=1 AND b.instock) OR (bind_instock=2 AND b.stockmin))')\n            ->andWhere('(bind_laststock=0 OR (bind_laststock=1 AND b.laststock))')\n            ->andWhere('(bind_shippingfree!=1 OR NOT b.shippingfree)')\n            ->andWhere('dh.holidayID IS NULL')\n            ->andWhere('(d.multishopID IS NULL OR d.multishopID=b.multishopID)')\n            ->andWhere('(d.customergroupID IS NULL OR d.customergroupID=b.customergroupID)')\n            ->andWhere('dk.dispatchID IS NULL')\n            ->andWhere('d.type IN (0)')\n            ->groupBy('d.id')\n            ->orderBy('d.position, d.name');\n\n        foreach ($sqlAndWhere as $andWhere) {\n            $queryBuilder->andWhere($andWhere);\n        }\n\n        $queryBuilder->setParameter('sessionId', $this->session->offsetGet('sessionId'));\n        $queryBuilder->setParameter('billingAddressId', $this->getBillingAddressId());\n        $queryBuilder->setParameter('shippingAddressId', $this->getShippingAddressId());\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetPremiumDispatches_QueryBuilder',\n            [\n                'queryBuilder' => $queryBuilder,\n            ]\n        );\n\n        $dispatches = $queryBuilder->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE);\n\n        if (empty($dispatches)) {\n            $sql = '\n                SELECT\n                    d.id AS `key`,\n                    d.id, d.name,\n                    d.description,\n                    d.calculation,\n                    d.status_link\n                FROM s_premium_dispatch d\n\n                WHERE d.active=1\n                AND d.type=1\n                GROUP BY d.id\n\n                ORDER BY d.position, d.name\n                LIMIT 1\n            ';\n            $dispatches = $this->db->fetchAssoc($sql);\n        }\n\n        $names = [];\n        foreach ($dispatches as $dispatchID => $dispatch) {\n            if (\\in_array($dispatch['name'], $names)) {\n                unset($dispatches[$dispatchID]);\n            } else {\n                $names[] = $dispatch['name'];\n            }\n        }\n        unset($names);\n\n        $object = $this->sGetDispatchTranslation();\n        foreach ($dispatches as &$dispatch) {\n            if (!empty($object[$dispatch['id']]['dispatch_name'])) {\n                $dispatch['name'] = $object[$dispatch['id']]['dispatch_name'];\n            }\n            if (!empty($object[$dispatch['id']]['dispatch_description'])) {\n                $dispatch['description'] = $object[$dispatch['id']]['dispatch_description'];\n            }\n\n            $dispatch['attribute'] = Shopware()->Container()->get(DataLoader::class)\n                ->load('s_premium_dispatch_attributes', $dispatch['id']);\n\n            if (!empty($dispatch['attribute'])) {\n                $languageId = $this->contextService->getShopContext()->getShop()->getId();\n                $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n                $translationData = $this->translationComponent->readWithFallback(\n                    $languageId,\n                    $fallbackId,\n                    's_premium_dispatch_attributes',\n                    $dispatch['id']\n                );\n\n                foreach ($translationData as $key => $attribute) {\n                    $key = str_replace(CrudServiceInterface::EXT_JS_PREFIX, '', $key);\n                    $dispatch['attribute'][$key] = $attribute;\n                }\n            }\n        }\n\n        return $dispatches;\n    }\n\n    /**\n     * Get dispatch surcharge value for current basket and shipping method\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param array $basket\n     * @param int   $type\n     *\n     * @return float|false\n     */\n    public function sGetPremiumDispatchSurcharge($basket, $type = 2)\n    {\n        if (empty($basket)) {\n            return false;\n        }\n        $type = (int) $type;\n\n        $statements = $this->db->fetchPairs(\n            'SELECT id, bind_sql\n             FROM s_premium_dispatch\n             WHERE active = 1 AND type = ?\n                AND bind_sql IS NOT NULL',\n            [$type]\n        );\n\n        $sql_where = '';\n        foreach ($statements as $dispatchID => $statement) {\n            $sql_where .= \"\n            AND ( d.id!=$dispatchID OR ($statement))\n            \";\n        }\n        $sql_basket = [];\n        foreach ($basket as $key => $value) {\n            $sql_basket[] = $this->db->quote($value) . \" as `$key`\";\n        }\n        $sql_basket = implode(', ', $sql_basket);\n\n        $sql = \"\n            SELECT d.id, d.calculation\n            FROM s_premium_dispatch d\n\n            JOIN ( SELECT $sql_basket ) b\n            JOIN s_premium_dispatch_countries dc\n            ON d.id = dc.dispatchID\n            AND dc.countryID=b.countryID\n            JOIN s_premium_dispatch_paymentmeans dp\n            ON d.id = dp.dispatchID\n            AND dp.paymentID=b.paymentID\n            LEFT JOIN s_premium_holidays h\n            ON h.date = CURDATE()\n            LEFT JOIN s_premium_dispatch_holidays dh\n            ON d.id=dh.dispatchID\n            AND h.id=dh.holidayID\n\n            LEFT JOIN (\n                SELECT dc.dispatchID\n                FROM s_order_basket b\n                JOIN s_articles_categories_ro ac\n                ON ac.articleID=b.articleID\n                JOIN s_premium_dispatch_categories dc\n                ON dc.categoryID=ac.categoryID\n                WHERE b.modus=0\n                AND b.sessionID='{$this->session->offsetGet('sessionId')}'\n                GROUP BY dc.dispatchID\n            ) as dk\n            ON dk.dispatchID=d.id\n\n            LEFT JOIN s_user u\n            ON u.id=b.userID\n            AND u.active=1\n\n            LEFT JOIN s_user_addresses as ub\n                ON ub.user_id = u.id\n                AND ub.id = :billingAddressId\n\n            LEFT JOIN s_user_addresses as us\n                ON us.user_id = u.id\n                AND us.id = :shippingAddressId\n\n            WHERE d.active=1\n            AND (\n                (bind_time_from IS NULL AND bind_time_to IS NULL)\n            OR\n                (IFNULL(bind_time_from,0) <= IFNULL(bind_time_to,86400) AND TIME_TO_SEC(DATE_FORMAT(NOW(),'%H:%i:00')) BETWEEN IFNULL(bind_time_from,0) AND IFNULL(bind_time_to,86400))\n            OR\n                (bind_time_from > bind_time_to AND TIME_TO_SEC(DATE_FORMAT(NOW(),'%H:%i:00')) NOT BETWEEN bind_time_to AND bind_time_from)\n            )\n            AND (\n                (bind_weekday_from IS NULL AND bind_weekday_to IS NULL)\n            OR\n                (IFNULL(bind_weekday_from,1) <= IFNULL(bind_weekday_to,7) AND REPLACE(WEEKDAY(NOW()),0,6)+1 BETWEEN IFNULL(bind_weekday_from,1) AND IFNULL(bind_weekday_to,7))\n            OR\n                (bind_weekday_from > bind_weekday_to AND REPLACE(WEEKDAY(NOW()),0,6)+1 NOT BETWEEN bind_weekday_to AND bind_weekday_from)\n            )\n            AND (bind_weight_from IS NULL OR bind_weight_from <= b.weight)\n            AND (bind_weight_to IS NULL OR bind_weight_to >= b.weight)\n            AND (bind_price_from IS NULL OR bind_price_from <= b.amount)\n            AND (bind_price_to IS NULL OR bind_price_to >= b.amount)\n            AND (bind_instock=0 OR bind_instock IS NULL OR (bind_instock=1 AND b.instock) OR (bind_instock=2 AND b.stockmin))\n            AND (bind_laststock=0 OR (bind_laststock=1 AND b.laststock))\n            AND (bind_shippingfree=2 OR NOT b.shippingfree)\n            AND dh.holidayID IS NULL\n            AND (d.multishopID IS NULL OR d.multishopID=b.multishopID)\n            AND (d.customergroupID IS NULL OR d.customergroupID=b.customergroupID)\n            AND dk.dispatchID IS NULL\n            AND d.type = $type\n            AND (d.shippingfree IS NULL OR d.shippingfree > b.amount)\n            $sql_where\n            GROUP BY d.id\n        \";\n\n        $dispatches = $this->db->fetchAll(\n            $sql,\n            [\n                'billingAddressId' => $this->getBillingAddressId(),\n                'shippingAddressId' => $this->getShippingAddressId(),\n            ]\n        );\n\n        $surcharge = $this->calculateDispatchSurcharge($basket, $dispatches);\n\n        $surcharge = $this->eventManager->filter(\n            'Shopware_Modules_Admin_sGetPremiumDispatchSurcharge_FilterSurcharge',\n            $surcharge,\n            ['subject' => $this, 'dispatches' => $dispatches]\n        );\n\n        return $surcharge;\n    }\n\n    /**\n     * Get shipping costs\n     * Used in sBasket and Checkout controller\n     *\n     * @param array $country Array with details for a single country\n     *\n     * @return array|false Array with shipping costs data, or false on failure\n     */\n    public function sGetPremiumShippingcosts($country = null)\n    {\n        $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n\n        // Determinate tax automatically\n        $taxAutoMode = $this->config->get('sTAXAUTOMODE');\n        if (!empty($taxAutoMode)) {\n            $discount_tax = $this->moduleManager->Basket()->getMaxTax();\n        } else {\n            $discount_tax = $this->config->get('sDISCOUNTTAX');\n            $discount_tax = empty($discount_tax) ? 0 : (float) str_replace(',', '.', $discount_tax);\n        }\n\n        $this->db->delete('s_order_basket', [\n            'sessionID = ?' => $this->session->offsetGet('sessionId'),\n            'modus IN (?)' => [3, 4],\n            'ordernumber IN (?)' => array_merge(...[\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::PAYMENT_ABSOLUTE),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::PAYMENT_PERCENT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::DISCOUNT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::SHIPPING_DISCOUNT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::SHIPPING_SURCHARGE),\n            ]),\n        ]);\n\n        $basket = $this->sGetDispatchBasket(empty($country['id']) ? null : $country['id']);\n        if (empty($basket) || $basket['count_article'] == 0) {\n            return false;\n        }\n        $country = $this->sGetCountry($basket['countryID']);\n        if (empty($country)) {\n            return false;\n        }\n        $payment = $this->sGetPaymentMean($basket['paymentID']);\n        if (empty($payment)) {\n            return false;\n        }\n\n        $amount = (float) $this->db->fetchOne(\n            'SELECT SUM((CAST(price AS DECIMAL(10,2))*quantity)/currencyFactor) AS amount\n             FROM s_order_basket\n             WHERE sessionID = ?\n             GROUP BY sessionID',\n            [$this->session->offsetGet('sessionId')]\n        );\n\n        $this->handleDispatchSurcharge(\n            $basket,\n            $discount_tax\n        );\n\n        $this->handleBasketDiscount(\n            $amount,\n            $currencyFactor,\n            $discount_tax\n        );\n\n        $this->handleDispatchDiscount(\n            $basket,\n            $discount_tax\n        );\n\n        $dispatch = $this->sGetPremiumDispatch((int) $this->session->offsetGet('sDispatch'));\n\n        $payment = $this->handlePaymentMeanSurcharge(\n            $country,\n            $payment,\n            $currencyFactor,\n            $dispatch,\n            $discount_tax\n        );\n\n        if (empty($dispatch)) {\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        if (empty($this->sSYSTEM->sUSERGROUPDATA['tax']) && !empty($this->sSYSTEM->sUSERGROUPDATA['id'])) {\n            $dispatch['shippingfree'] = round($dispatch['shippingfree'] / (100 + $discount_tax) * 100, 2);\n        }\n\n        if (\n            (!empty($dispatch['shippingfree']) && $dispatch['shippingfree'] <= $basket['amount_display'])\n            || empty($basket['count_article'])\n            || (!empty($basket['shippingfree']) && empty($dispatch['bind_shippingfree']))\n        ) {\n            if (empty($dispatch['surcharge_calculation']) && !empty($payment['surcharge'])) {\n                $tax = (float) $basket['max_tax'];\n\n                if (!empty($dispatch['tax_calculation'])) {\n                    $context = Shopware()->Container()->get(ContextServiceInterface::class)->getShopContext();\n                    $taxRule = $context->getTaxRule($dispatch['tax_calculation']);\n                    $tax = $taxRule->getTax();\n                }\n\n                return [\n                    'brutto' => $payment['surcharge'],\n                    'netto' => round($payment['surcharge'] * 100 / (100 + $tax), 2),\n                    'tax' => $tax,\n                ];\n            }\n\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        if (empty($dispatch['calculation'])) {\n            $from = round($basket['weight'], 3);\n        } elseif ($dispatch['calculation'] == 1) {\n            $from = round($basket['amount'], 2);\n        } elseif ($dispatch['calculation'] == 2) {\n            $from = round($basket['count_article']);\n        } elseif ($dispatch['calculation'] == 3) {\n            $from = round((float) $basket['calculation_value_' . $dispatch['id']], 2);\n        } else {\n            return false;\n        }\n        $result = $this->db->fetchRow(\n            'SELECT `value` , `factor`\n             FROM `s_premium_shippingcosts`\n             WHERE `from` <= ?\n             AND `dispatchID` = ?\n             ORDER BY `from` DESC\n             LIMIT 1',\n            [$from, $dispatch['id']]\n        );\n        if ($result === false) {\n            return false;\n        }\n\n        if (!empty($dispatch['shippingfree'])) {\n            $result['shippingfree'] = round($dispatch['shippingfree'] * $currencyFactor, 2);\n            $difference = round(($dispatch['shippingfree'] - $basket['amount_display']) * $currencyFactor, 2);\n            $result['difference'] = [\n                'float' => $difference,\n                'formated' => $this->moduleManager->Articles()->sFormatPrice($difference),\n            ];\n        }\n        $result['brutto'] = $result['value'];\n        if (!empty($result['factor'])) {\n            $result['brutto'] += $result['factor'] / 100 * $from;\n        }\n        $result['surcharge'] = $this->sGetPremiumDispatchSurcharge($basket);\n        if (!empty($result['surcharge'])) {\n            $result['brutto'] += $result['surcharge'];\n        }\n        $result['brutto'] *= $currencyFactor;\n        $result['brutto'] = round($result['brutto'], 2);\n        if (\n            !empty($payment['surcharge'])\n            && $dispatch['surcharge_calculation'] != 2\n            && (empty($basket['shippingfree']) || empty($dispatch['surcharge_calculation']))\n        ) {\n            $result['surcharge'] = $payment['surcharge'];\n            $result['brutto'] += $result['surcharge'];\n        }\n        if ($result['brutto'] < 0) {\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        $result['taxMode'] = $dispatch['tax_calculation'];\n\n        if (empty($dispatch['tax_calculation'])) {\n            $result['tax'] = $basket['max_tax'];\n        } else {\n            $result['tax'] = $dispatch['tax_calculation_value'];\n        }\n        $result['tax'] = (float) $result['tax'];\n        $result['netto'] = round($result['brutto'] * 100 / (100 + $result['tax']), 2);\n\n        return $result;\n    }\n\n    /**\n     * Helper function for sLogin\n     * Called when provided user data is correct\n     * Logs in the user\n     *\n     * @param array  $getUser\n     * @param string $email\n     * @param string $password\n     * @param bool   $isPreHashed\n     * @param string $encoderName\n     * @param string $plaintext\n     * @param string $hash\n     */\n    protected function loginUser($getUser, $email, $password, $isPreHashed, $encoderName, $plaintext, $hash)\n    {\n        $this->regenerateSessionId();\n\n        $this->db->update(\n            's_user',\n            [\n                'lastlogin' => new Zend_Date(),\n                'failedlogins' => 0,\n                'lockeduntil' => null,\n                'sessionID' => $this->session->offsetGet('sessionId'),\n            ],\n            [\n                'id = ?' => $getUser['id'],\n            ]\n        );\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Login_Successful',\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'user' => $getUser]\n        );\n\n        $newHash = '';\n        $liveMigration = $this->config->offsetGet('liveMigration');\n        $defaultEncoderName = $this->passwordEncoder->getDefaultPasswordEncoderName();\n\n        // Do not allow live migration when the password is pre-hashed\n        if ($liveMigration && !$isPreHashed && $encoderName !== $defaultEncoderName) {\n            $newHash = $this->passwordEncoder->encodePassword($plaintext, $defaultEncoderName);\n            $encoderName = $defaultEncoderName;\n        }\n\n        if (empty($newHash)) {\n            $newHash = $this->passwordEncoder->reencodePassword($plaintext, $hash, $encoderName);\n        }\n\n        $userId = (int) $getUser['id'];\n\n        if (!empty($newHash) && $newHash !== $hash) {\n            $hash = $newHash;\n            $this->db->update(\n                's_user',\n                [\n                    'password' => $hash,\n                    'encoder' => $encoderName,\n                ],\n                'id = ' . $userId\n            );\n        }\n\n        // Update note userID\n        $uniqueId = $this->front->Request()->getCookie('sUniqueID');\n        if (!empty($uniqueId)) {\n            $this->connection->executeQuery(\n                'UPDATE s_order_notes SET userID = :userId, sUniqueID = NULL WHERE sUniqueID = :uniqueId AND userID = 0',\n                [\n                    'userId' => $userId,\n                    'uniqueId' => $uniqueId,\n                ]\n            );\n\n            //destroy cookie\n            $this->front->Response()->setCookie('sUniqueID');\n        }\n\n        $this->session->offsetSet('sUserMail', $email);\n        $this->session->offsetSet('sUserId', $userId);\n        $this->session->offsetSet('sNotesQuantity', $this->moduleManager->Basket()->sCountNotes());\n\n        if (!$this->sCheckUser()) {\n            return;\n        }\n\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get('shopware.components.cart.cart_migration')->migrate();\n        }\n    }\n\n    private function hasProductAttributeMatch(string $attribute, string $value, string $operator): bool\n    {\n        $crudService = Shopware()->Container()->get('shopware_attribute.crud_service');\n        $columnData = $crudService->get('s_articles_attributes', $attribute);\n\n        if ($columnData === null && is_numeric($attribute)) {\n            $columnData = $crudService->get('s_articles_attributes', 'attr' . $attribute);\n            $attribute = 'attr' . $attribute;\n        }\n\n        if ($columnData !== null && !empty($attribute)) {\n            $sqlProductOrderNumber = $this->connection->createQueryBuilder()\n                ->select(['s_articles_attributes.id'])\n                ->from('s_order_basket, s_articles_attributes, s_articles_details')\n                ->where('s_order_basket.sessionID = :sessionID')\n                ->andWhere('s_order_basket.modus = 0')\n                ->andWhere('s_order_basket.ordernumber = s_articles_details.ordernumber')\n                ->andWhere('s_articles_details.id = s_articles_attributes.articledetailsID')\n                ->andWhere('s_articles_attributes.' . $attribute . ' ' . $operator . ' :attrValue')\n                ->setParameters([\n                    'attrValue' => $value,\n                    'sessionID' => $this->session->offsetGet('sessionId'),\n                ])\n                ->execute()->fetch(PDO::FETCH_ASSOC);\n\n            $sqlProductId = $this->connection->createQueryBuilder()\n                ->select(['s_articles_attributes.id'])\n                ->from('s_order_basket, s_articles_attributes, s_articles_details')\n                ->where('s_order_basket.sessionID = :sessionID')\n                ->andWhere('s_order_basket.modus = 0')\n                ->andWhere('s_order_basket.articleID = s_articles_details.articleID AND s_articles_details.kind = 1')\n                ->andWhere('s_articles_details.id = s_articles_attributes.articledetailsID')\n                ->andWhere('s_articles_attributes.' . $attribute . ' ' . $operator . ' :attrValue')\n                ->setParameters([\n                    'attrValue' => $value,\n                    'sessionID' => $this->session->offsetGet('sessionId'),\n                ])\n                ->execute()->fetch(PDO::FETCH_ASSOC);\n\n            return (bool) $sqlProductOrderNumber || (bool) $sqlProductId;\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a mail to the given recipient with a given template.\n     * If the opt in parameter is set, the sConfirmLink variable will be filled by the opt in link.\n     *\n     * @param string      $recipient\n     * @param string|Mail $template\n     * @param string      $optIn\n     */\n    private function sendMail($recipient, $template, $optIn = '')\n    {\n        $context = [];\n\n        if (!empty($optIn)) {\n            $context['sConfirmLink'] = $optIn;\n        }\n\n        $context = $this->eventManager->filter(\n            'Shopware_Modules_Admin_sendMail_FilterVariables',\n            $context,\n            [\n                'template' => $template,\n                'recipient' => $recipient,\n                'optin' => $optIn,\n            ]\n        );\n\n        $mail = Shopware()->TemplateMail()->createMail($template, $context);\n        $mail->addTo($recipient);\n        $mail->send();\n    }\n\n    /**\n     * Regenerates session id and updates references in the db\n     * Used internally by sAdmin::sLogin\n     */\n    private function regenerateSessionId(bool $ignoreUserTable = false): void\n    {\n        $oldSessionId = $this->session->getId();\n\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_regenerateSessionId_Start',\n            ['subject' => $this, 'sessionId' => $oldSessionId]\n        )\n        ) {\n            return;\n        }\n\n        $this->session->migrate(true);\n        $newSessionId = $this->session->getId();\n\n        $this->sSYSTEM->sSESSION_ID = $newSessionId;\n        $this->session->offsetSet('sessionId', $newSessionId);\n        Shopware()->Container()->reset('sessionid');\n        Shopware()->Container()->set('sessionid', $newSessionId);\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Regenerate_Session_Id',\n            [\n                'subject' => $this,\n                'oldSessionId' => $oldSessionId,\n                'newSessionId' => $newSessionId,\n            ]\n        );\n\n        $sessions = [\n            's_order_basket' => 'sessionID',\n            's_order_comparisons' => 'sessionID',\n        ];\n\n        if (!$ignoreUserTable) {\n            $sessions['s_user'] = 'sessionID';\n        }\n\n        foreach ($sessions as $tableName => $column) {\n            $this->db->update(\n                $tableName,\n                [$column => $newSessionId],\n                $column . ' = ' . $this->db->quote($oldSessionId)\n            );\n        }\n    }\n\n    /**\n     * Overwrite sUserData['billingaddress'] with chosen address\n     *\n     * @return array\n     */\n    private function overwriteBillingAddress(array $userData)\n    {\n        // Temporarily overwrite billing address\n        if (\n            !$this->session->offsetGet('checkoutBillingAddressId')\n            || Shopware()->Front()->Request()->getControllerName() !== 'checkout'\n        ) {\n            return $userData;\n        }\n\n        $addressRepository = Shopware()->Models()->getRepository(Address::class);\n        $addressId = $this->session->offsetGet('checkoutBillingAddressId');\n\n        try {\n            $legacyAddress = $this->convertToLegacyAddressArray(\n                $addressRepository->getOneByUser($addressId, $this->session->offsetGet('sUserId'))\n            );\n\n            $userData['billingaddress'] = array_merge($userData['billingaddress'], $legacyAddress);\n            $userData = $this->completeUserCountryData($userData);\n        } catch (Exception $ex) {\n            // No need to overwrite default billing address\n            $this->session->offsetUnset('checkoutBillingAddressId');\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Overwrite sUserData['shippingaddress'] with chosen address\n     *\n     * @return array\n     */\n    private function overwriteShippingAddress(array $userData)\n    {\n        // Temporarily overwrite shipping address\n        if (\n            !$this->session->offsetGet('checkoutShippingAddressId') || Shopware()->Front()->Request()\n                ->getControllerName() !== 'checkout'\n        ) {\n            return $userData;\n        }\n\n        $addressRepository = Shopware()->Models()->getRepository(Address::class);\n        $addressId = $this->session->offsetGet('checkoutShippingAddressId');\n\n        try {\n            $legacyAddress = $this->convertToLegacyAddressArray(\n                $addressRepository->getOneByUser($addressId, $this->session->offsetGet('sUserId'))\n            );\n\n            $userData['shippingaddress'] = array_merge($userData['shippingaddress'], $legacyAddress);\n            $userData = $this->completeUserCountryData($userData, true);\n        } catch (Exception $ex) {\n            // No need to overwrite default shipping address\n            $this->session->offsetUnset('checkoutShippingAddressId');\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Converts an address to the array key structure of a legacy billing or shipping address\n     *\n     * @return array<string, mixed>\n     */\n    private function convertToLegacyAddressArray(Address $address)\n    {\n        $output = Shopware()->Models()->toArray($address);\n\n        $output = array_merge($output, [\n            'id' => $address->getId(),\n            'userID' => $address->getCustomer()->getId(),\n            'company' => $address->getCompany(),\n            'department' => $address->getDepartment(),\n            'salutation' => $address->getSalutation(),\n            'title' => $address->getTitle(),\n            'firstname' => $address->getFirstname(),\n            'lastname' => $address->getLastname(),\n            'street' => $address->getStreet(),\n            'zipcode' => $address->getZipcode(),\n            'city' => $address->getCity(),\n            'phone' => $address->getPhone(),\n            'countryID' => $address->getCountry()->getId(),\n            'stateID' => $address->getState() ? $address->getState()->getId() : null,\n            'ustid' => $address->getVatId(),\n            'additional_address_line1' => $address->getAdditionalAddressLine1(),\n            'additional_address_line2' => $address->getAdditionalAddressLine2(),\n            'attributes' => [],\n        ]);\n\n        if ($address->getAttribute()) {\n            $data = Shopware()->Models()->toArray($address->getAttribute());\n\n            $output['attributes'] = $data;\n        }\n\n        return $output;\n    }\n\n    /**\n     * @param bool $isShippingAddress changes keys in sUserData\n     *\n     * @return array\n     */\n    private function completeUserCountryData(array $userData, $isShippingAddress = false)\n    {\n        $sql = <<<'SQL'\nSELECT c.*, a.name AS countryarea\nFROM s_core_countries c\nLEFT JOIN s_core_countries_areas a ON a.id = c.areaID AND a.active = 1\nWHERE c.id = ?\nSQL;\n\n        $addressKey = $isShippingAddress ? 'shippingaddress' : 'billingaddress';\n        $countryKey = $isShippingAddress ? 'countryShipping' : 'country';\n        $stateKey = $isShippingAddress ? 'stateShipping' : 'state';\n\n        $userData['additional'][$countryKey] = Shopware()->Container()->get(Connection::class)\n            ->executeQuery($sql, [$userData[$addressKey]['countryID']])\n            ->fetch(PDO::FETCH_ASSOC);\n\n        $userData['additional'][$stateKey] = Shopware()->Container()->get(Connection::class)\n            ->executeQuery(\n                'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n                [$userData[$addressKey]['stateID']]\n            )\n            ->fetch(PDO::FETCH_ASSOC);\n\n        // Get translations\n        $userData['additional'][$countryKey] = $this->sGetCountryTranslation($userData['additional'][$countryKey]);\n        $userData['additional'][$stateKey] = $this->sGetCountryStateTranslation($userData['additional'][$stateKey]);\n\n        // Session\n        if ($isShippingAddress) {\n            $this->session->offsetSet('sCountry', $userData['additional'][$countryKey]['id']);\n            $this->session->offsetSet('sState', $userData['additional'][$stateKey]['id']);\n            $this->session->offsetSet('sArea', $userData['additional'][$countryKey]['areaID']);\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sLogin\n     * Called when provided user data is incorrect\n     * Handles account lockdown detection and brute force protection\n     *\n     * @param string        $addScopeSql\n     * @param string        $email\n     * @param string[]|null $sErrorMessages\n     * @param string        $password\n     *\n     * @return array\n     */\n    private function failedLoginUser($addScopeSql, $email, $sErrorMessages, $password)\n    {\n        if ($sErrorMessages === null) {\n            $sErrorMessages = [];\n        }\n\n        // Check if account is disabled or not verified yet\n        $sql = 'SELECT id, doubleOptinRegister, doubleOptinEmailSentDate, doubleOptinConfirmDate, email, firstname, lastname, salutation, register_opt_in_id\n                FROM s_user\n                WHERE email=? AND active=0 ' . $addScopeSql;\n        $getUser = $this->db->fetchRow($sql, [$email]);\n\n        // If the verification process is active, the customer has an email sent date, but no confirm date\n        if ($getUser['doubleOptinRegister'] && $getUser['doubleOptinEmailSentDate'] !== null && $getUser['doubleOptinConfirmDate'] === null) {\n            $hash = $this->optInLoginService->refreshOptInHashForUser(\n                (int) $getUser['id'],\n                (int) $getUser['register_opt_in_id'],\n                DateTimeImmutable::createFromFormat('Y-m-d H:i:s', $getUser['doubleOptinEmailSentDate'])\n            );\n\n            $userInfo = [\n                'mail' => $getUser['email'],\n                'firstname' => $getUser['firstname'],\n                'lastname' => $getUser['lastname'],\n                'salutation' => $getUser['salutation'],\n            ];\n\n            $this->resendConfirmationMail($userInfo, $hash);\n\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get(\n                    'LoginFailureOptIn',\n                    'Your account has not been verified yet. You received a new activation mail.'\n                );\n        } elseif ($getUser) {\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get(\n                    'LoginFailureActive',\n                    'Your account is disabled. Please contact us.'\n                );\n        } else {\n            $getLockedUntilTime = $this->db->fetchOne(\n                'SELECT 1 FROM s_user WHERE email = ? AND lockeduntil > NOW()',\n                [$email]\n            );\n            if (!empty($getLockedUntilTime)) {\n                $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get(\n                        'LoginFailureLocked',\n                        'Too many failed logins. Your account was temporary deactivated.'\n                    );\n            } else {\n                $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('LoginFailure', 'Wrong email or password');\n            }\n        }\n\n        // Prevent brute force login attempts\n        if (!empty($email)) {\n            $sql = '\n                UPDATE s_user SET\n                    failedlogins = failedlogins + 1,\n                    lockeduntil = IF(\n                        failedlogins > 4,\n                        DATE_ADD(NOW(), INTERVAL (failedlogins + 1) * 30 SECOND),\n                        NULL\n                    )\n                WHERE email = ? AND accountmode=? ' . $addScopeSql;\n            $this->db->query($sql, [$email, Customer::ACCOUNT_MODE_CUSTOMER]);\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Login_Failure',\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'error' => $sErrorMessages]\n        );\n\n        $this->session->offsetUnset('sUserMail');\n        $this->session->offsetUnset('sUserId');\n\n        return $sErrorMessages;\n    }\n\n    /**\n     * @param string $hash\n     */\n    private function resendConfirmationMail(array $userInfo, $hash)\n    {\n        $link = Shopware()->Container()->get(RouterInterface::class)->assemble([\n            'sViewport' => 'register',\n            'action' => 'confirmValidation',\n            'sConfirmation' => $hash,\n        ]);\n\n        $context = array_merge(\n            [\n                'sConfirmLink' => $link,\n            ],\n            $userInfo\n        );\n\n        $context = Shopware()->Container()->get('events')->filter(\n            'Shopware_Controllers_Frontend_Register_DoubleOptIn_ResendMail',\n            $context,\n            [\n                'mail' => $userInfo['mail'],\n            ]\n        );\n\n        $mail = Shopware()->Container()->get(Shopware_Components_TemplateMail::class)\n            ->createMail('sOPTINREGISTER', $context);\n        $mail->addTo($userInfo['mail']);\n        $mail->send();\n    }\n\n    /**\n     * Helper method for sAdmin::sGetOpenOrderData()\n     *\n     * @param string $orderKey\n     *\n     * @return array\n     */\n    private function processOpenOrderDetails(array $orderValue, array $orders, $orderKey)\n    {\n        /** @var array $orderDetails */\n        $orderDetails = $this->db->fetchAll(\n            'SELECT * FROM s_order_details WHERE orderID = ? ORDER BY id ASC',\n            [$orderValue['id']]\n        );\n\n        if (!\\count($orderDetails)) {\n            unset($orders[$orderKey]);\n\n            return $orders;\n        }\n\n        $context = $this->contextService->getShopContext();\n        $orderProductOrderNumbers = array_column($orderDetails, 'articleordernumber');\n        $listProducts = Shopware()->Container()->get(ListProductServiceInterface::class)\n            ->getList($orderProductOrderNumbers, $context);\n        $listProducts = Shopware()->Container()->get(LegacyStructConverter::class)\n            ->convertListProductStructList($listProducts);\n\n        foreach ($listProducts as &$listProduct) {\n            $listProduct = array_merge($listProduct, $listProduct['prices'][0]);\n        }\n\n        foreach ($orderDetails as $orderDetailsKey => $orderDetailsValue) {\n            $orderDetails[$orderDetailsKey]['amountNumeric'] = round($orderDetailsValue['price'] * $orderDetailsValue['quantity'], 2);\n            $orderDetails[$orderDetailsKey]['priceNumeric'] = $orderDetailsValue['price'];\n            $orderDetails[$orderDetailsKey]['amount'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderDetails[$orderDetailsKey]['amountNumeric']);\n            $orderDetails[$orderDetailsKey]['price'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderDetailsValue['price']);\n            $orderDetails[$orderDetailsKey]['active'] = 0;\n\n            $tmpProduct = null;\n            if (!empty($listProducts[$orderDetailsValue['articleordernumber']])) {\n                $tmpProduct = $listProducts[$orderDetailsValue['articleordernumber']];\n            }\n\n            if (!empty($tmpProduct) && \\is_array($tmpProduct)) {\n                // Set product in activate state\n                $orderDetails[$orderDetailsKey]['active'] = 1;\n                $orderDetails[$orderDetailsKey]['article'] = $tmpProduct;\n                if (!empty($tmpProduct['purchaseunit'])) {\n                    $orderDetails[$orderDetailsKey]['purchaseunit'] = $tmpProduct['purchaseunit'];\n                }\n\n                if (!empty($tmpProduct['referenceunit'])) {\n                    $orderDetails[$orderDetailsKey]['referenceunit'] = $tmpProduct['referenceunit'];\n                }\n\n                if (!empty($tmpProduct['referenceprice'])) {\n                    $orderDetails[$orderDetailsKey]['referenceprice'] = $tmpProduct['referenceprice'];\n                }\n\n                if (!empty($tmpProduct['sUnit']) && \\is_array($tmpProduct['sUnit'])) {\n                    $orderDetails[$orderDetailsKey]['sUnit'] = $tmpProduct['sUnit'];\n                }\n\n                if (!empty($tmpProduct['price'])) {\n                    $orderDetails[$orderDetailsKey]['currentPrice'] = $tmpProduct['price'];\n                }\n\n                if (!empty($tmpProduct['pseudoprice'])) {\n                    $orderDetails[$orderDetailsKey]['currentPseudoprice'] = $tmpProduct['pseudoprice'];\n                }\n\n                $orderDetails[$orderDetailsKey]['currentHas_pseudoprice'] = $tmpProduct['has_pseudoprice'];\n            }\n\n            // Check for serial\n            if ($orderDetails[$orderDetailsKey]['esdarticle']) {\n                $numbers = [];\n                $getSerial = $this->db->fetchAll(\n                    'SELECT serialnumber\n                    FROM s_articles_esd_serials, s_order_esd\n                    WHERE userID = ?\n                    AND orderID = ?\n                    AND orderdetailsID = ?\n                    AND s_order_esd.serialID = s_articles_esd_serials.id',\n                    [\n                        $this->session->offsetGet('sUserId'),\n                        $orderValue['id'],\n                        $orderDetailsValue['id'],\n                    ]\n                );\n                foreach ($getSerial as $serial) {\n                    $numbers[] = $serial['serialnumber'];\n                }\n                $orderDetails[$orderDetailsKey]['serial'] = implode(',', $numbers);\n                $orderDetails[$orderDetailsKey]['esdLink'] = $this->config->get('sBASEFILE')\n                    . '?sViewport=account&sAction=download&esdID='\n                    . $orderDetailsValue['id'];\n            }\n        }\n        $orders[$orderKey]['activeBuyButton'] = 1;\n        $orders[$orderKey]['details'] = $orderDetails;\n\n        return $orders;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user country data\n     *\n     * @param array $userData\n     * @param int   $userId\n     *\n     * @return array\n     */\n    private function getUserCountryData($userData, $userId)\n    {\n        // Query country information\n        $userData['additional']['country'] = $this->db->fetchRow(\n            'SELECT c.*, a.name AS countryarea\n          FROM s_core_countries c\n          LEFT JOIN s_core_countries_areas a\n           ON a.id = c.areaID AND a.active = 1\n          WHERE c.id = ?',\n            [$userData['billingaddress']['countryID']]\n        );\n\n        $userData['additional']['country'] = $userData['additional']['country'] ?: [];\n        // State selection\n        $userData['additional']['state'] = $this->db->fetchRow(\n            'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n            [$userData['billingaddress']['stateID']]\n        );\n        $userData['additional']['state'] = $userData['additional']['state'] ?: [];\n\n        $userData['additional']['country'] = $this->sGetCountryTranslation($userData['additional']['country']);\n        $userData['additional']['state'] = $this->sGetCountryStateTranslation($userData['additional']['state']);\n\n        $additional = $this->db->fetchRow(\n            'SELECT * FROM s_user WHERE id = ?',\n            [$userId]\n        );\n        $additional = $additional ?: [];\n        $attributes = $this->attributeLoader->load('s_user_attributes', $userId);\n        $userData['additional']['user'] = array_merge($attributes, $additional);\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user shipping data (address, payment)\n     *\n     *  @return array<string, mixed>\n     */\n    private function getUserShippingData(int $userId, array $userData, string $countryQuery): array\n    {\n        $entityManager = Shopware()->Container()->get(ModelManager::class);\n\n        $customer = $entityManager->find(Customer::class, $userId);\n        if (!$customer instanceof Customer) {\n            throw new \\InvalidArgumentException('User with provided id not found');\n        }\n\n        $shipping = $this->getShippingAddressData($entityManager, $customer);\n        if ($shipping === null) {\n            throw new \\UnexpectedValueException('No shipping address found for user with provided userId');\n        }\n\n        $userData['shippingaddress'] = $shipping;\n\n        if (!isset($userData['shippingaddress']['firstname'])) {\n            $userData['shippingaddress'] = $userData['billingaddress'];\n            $userData['shippingaddress']['eqalBilling'] = true;\n        }\n\n        if (empty($userData['shippingaddress']['countryID'])) {\n            $targetCountryId = $userData['billingaddress']['countryID'];\n        } else {\n            $targetCountryId = $userData['shippingaddress']['countryID'];\n        }\n\n        $userData['additional']['countryShipping'] = $this->db->fetchRow(\n            $countryQuery,\n            [$targetCountryId]\n        );\n        $userData['additional']['countryShipping'] = $userData['additional']['countryShipping'] ?: [];\n        $userData['additional']['countryShipping'] = $this->sGetCountryTranslation(\n            $userData['additional']['countryShipping']\n        );\n\n        // State selection\n        $userData['additional']['stateShipping'] = $this->db->fetchRow(\n            'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n            [$userData['shippingaddress']['stateID']]\n        );\n        $userData['additional']['stateShipping'] = $userData['additional']['stateShipping'] ?: [];\n        $userData['additional']['stateShipping'] = $this->sGetCountryStateTranslation($userData['additional']['stateShipping']);\n\n        if (!empty($userData['additional']['stateShipping'])) {\n            // Add stateId to session\n            $this->session->offsetSet('sState', $userData['additional']['stateShipping']['id']);\n        }\n\n        if (!empty($userData['additional']['countryShipping'])) {\n            // Add areaId to session\n            $this->session->offsetSet('sArea', $userData['additional']['countryShipping']['areaID']);\n            // Add countryId to session\n            $this->session->offsetSet('sCountry', $userData['additional']['countryShipping']['id']);\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user billing data\n     *\n     * @throws Exception\n     */\n    private function getUserBillingData(int $userId, array $userData): array\n    {\n        $entityManager = Shopware()->Container()->get(ModelManager::class);\n        $customer = $entityManager->find(Customer::class, $userId);\n        if (!$customer) {\n            throw new Exception(sprintf('Customer with id %s not found', $userId));\n        }\n        $billing = $this->convertToLegacyAddressArray($customer->getDefaultBillingAddress());\n        $billing['attributes'] = $this->attributeLoader->load('s_user_addresses_attributes', $billing['id']);\n        $userData['billingaddress'] = $billing;\n\n        return $userData;\n    }\n\n    /**\n     * Helper method for sAdmin::sNewsletterSubscription\n     * Subscribes the provided email address to the newsletter group\n     */\n    private function subscribeNewsletter(string $email, int $groupID): array\n    {\n        $result = $this->db->fetchAll(\n            'SELECT * FROM s_campaigns_mailaddresses WHERE email = ?',\n            [$email]\n        );\n        $isEmailExists = \\count($result) === 0;\n\n        if ($result === false) {\n            $result = [\n                'code' => 10,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('UnknownError', 'Unknown error'),\n            ];\n\n            return $result;\n        } elseif (\\count($result) === 0) {\n            $customer = $this->db->fetchOne(\n                'SELECT id FROM s_user WHERE email = ? LIMIT 1',\n                [$email]\n            );\n\n            $voteConfirmed = $this->front->getParam('voteConfirmed');\n            $now = $this->front->getParam('optinNow');\n            $now = isset($now) ? $now : (new DateTime())->format('Y-m-d H:i:s');\n\n            $added = $voteConfirmed ? $this->front->getParam('optinDate') : $now;\n            $doubleOptInConfirmed = $voteConfirmed ? $now : null;\n\n            $result = $this->db->insert(\n                's_campaigns_mailaddresses',\n                [\n                    'customer' => (int) !empty($customer),\n                    'groupID' => $groupID,\n                    'email' => $email,\n                    'added' => $added,\n                    'double_optin_confirmed' => $doubleOptInConfirmed,\n                ]\n            );\n\n            if ($result === false) {\n                $result = [\n                    'code' => 10,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('UnknownError', 'Unknown error'),\n                ];\n\n                return $result;\n            }\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Newsletter_Registration_Success',\n            [\n                'subject' => $this,\n                'email' => $email,\n                'groupID' => $groupID,\n            ]\n        );\n\n        $result = [\n            'code' => 3,\n            'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get('NewsletterSuccess', 'Thank you for receiving our newsletter'),\n            'isNewRegistration' => $isEmailExists,\n        ];\n\n        return $result;\n    }\n\n    /**\n     * Helper method for sAdmin::sGetPremiumDispatchSurcharge()\n     * Calculates the surcharge for the current basket and dispatches\n     *\n     * @param array $basket\n     * @param array $dispatches\n     *\n     * @return float\n     */\n    private function calculateDispatchSurcharge($basket, $dispatches)\n    {\n        $surcharge = 0;\n\n        if (empty($dispatches)) {\n            return $surcharge;\n        }\n\n        foreach ($dispatches as $dispatch) {\n            if (empty($dispatch['calculation'])) {\n                $from = round((float) $basket['weight'], 3);\n            } elseif ($dispatch['calculation'] == 1) {\n                if (\n                    ($this->config->get('sARTICLESOUTPUTNETTO') && !$this->sSYSTEM->sUSERGROUPDATA['tax'])\n                    || (!$this->sSYSTEM->sUSERGROUPDATA['tax'] && $this->sSYSTEM->sUSERGROUPDATA['id'])\n                ) {\n                    $from = round((float) $basket['amount_net'], 2);\n                } else {\n                    $from = round((float) $basket['amount'], 2);\n                }\n            } elseif ($dispatch['calculation'] == 2) {\n                $from = (int) $basket['count_article'];\n            } elseif ($dispatch['calculation'] == 3) {\n                $from = (int) $basket['calculation_value_' . $dispatch['id']];\n            } else {\n                continue;\n            }\n            $result = $this->db->fetchRow(\n                'SELECT `value` , factor\n                FROM s_premium_shippingcosts\n                WHERE `from` <= ?\n                AND dispatchID = ?\n                ORDER BY `from` DESC\n                LIMIT 1',\n                [$from, $dispatch['id']]\n            );\n\n            if ($result === false) {\n                continue;\n            }\n            $surcharge += $result['value'];\n            if (!empty($result['factor'])) {\n                $surcharge += $result['factor'] / 100 * $from;\n            }\n        }\n\n        return $surcharge;\n    }\n\n    private function handleBasketDiscount(float $amount, float $currencyFactor, float $discount_tax): void\n    {\n        $discount_basket_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::DISCOUNT);\n        $discount_basket_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('discount_name', 'Warenkorbrabatt');\n\n        $basket_discount = $this->db->fetchOne(\n            'SELECT basketdiscount\n                FROM s_core_customergroups_discounts\n                WHERE groupID = ?\n                AND basketdiscountstart <= ?\n                ORDER BY basketdiscountstart DESC',\n            [$this->sSYSTEM->sUSERGROUPDATA['id'], $amount]\n        );\n\n        if (!empty($basket_discount)) {\n            $percent = $basket_discount;\n            $basket_discount = round($basket_discount / 100 * ($amount * $currencyFactor), 2);\n\n            $lineItemName = '- ' . $percent . ' % ' . $discount_basket_name;\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $lineItemName,\n                $discount_basket_ordernumber,\n                $basket_discount * -1,\n                $discount_tax,\n                3\n            );\n        }\n    }\n\n    private function handleDispatchDiscount(array $basket, float $discountTax): void\n    {\n        $discount_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::SHIPPING_DISCOUNT);\n        $discount_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('shipping_discount_name', 'Basket discount');\n\n        $discount = $this->sGetPremiumDispatchSurcharge($basket, 3);\n\n        if (!empty($discount)) {\n            $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n            $discount *= -$currencyFactor;\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $discount_name,\n                $discount_ordernumber,\n                $discount,\n                $discountTax,\n                4\n            );\n        }\n    }\n\n    private function handleDispatchSurcharge(array $basket, float $discountTax): void\n    {\n        $discount_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::SHIPPING_SURCHARGE);\n        $discount_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('shipping_surcharge_name', 'Dispatch surcharge');\n\n        $discount = $this->sGetPremiumDispatchSurcharge($basket, 4);\n\n        if (!empty($discount)) {\n            $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n            $discount *= $currencyFactor;\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $discount_name,\n                $discount_ordernumber,\n                $discount,\n                $discountTax,\n                4\n            );\n        }\n    }\n\n    /**\n     * Helper method for sAdmin::sGetPremiumShippingcosts()\n     * Calculates payment mean surcharge\n     *\n     * @param array $country\n     * @param array $payment\n     * @param float $currencyFactor\n     * @param array $dispatch\n     * @param float $discount_tax\n     *\n     * @return array\n     */\n    private function handlePaymentMeanSurcharge($country, $payment, $currencyFactor, $dispatch, $discount_tax)\n    {\n        $surcharge_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::PAYMENT_ABSOLUTE);\n        $percent_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::PAYMENT_PERCENT);\n\n        // Country surcharge\n        if (!empty($payment['country_surcharge'][$country['countryiso']])) {\n            $payment['surcharge'] += $payment['country_surcharge'][$country['countryiso']];\n        }\n        $payment['surcharge'] = round($payment['surcharge'] * $currencyFactor, 2);\n\n        // Fixed surcharge\n        if (!empty($payment['surcharge']) && (empty($dispatch) || $dispatch['surcharge_calculation'] == 3)) {\n            $surcharge = round($payment['surcharge'], 2);\n            $payment['surcharge'] = 0;\n\n            if ($surcharge > 0) {\n                $surcharge_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_add');\n            } else {\n                $surcharge_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_dev');\n            }\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $surcharge_name,\n                $surcharge_ordernumber,\n                $surcharge,\n                $discount_tax,\n                4\n            );\n        }\n\n        // Percentage surcharge\n        if (!empty($payment['debit_percent']) && (empty($dispatch) || $dispatch['surcharge_calculation'] != 2)) {\n            $amount = (float) $this->db->fetchOne(\n                'SELECT SUM(quantity*price) AS amount\n                FROM s_order_basket\n                WHERE sessionID = ? GROUP BY sessionID',\n                [$this->session->offsetGet('sessionId')]\n            );\n\n            $percent = round($amount / 100 * $payment['debit_percent'], 2);\n\n            if ($percent > 0) {\n                $percent_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_add');\n            } else {\n                $percent_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_dev');\n            }\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $percent_name,\n                $percent_ordernumber,\n                $percent,\n                $discount_tax,\n                4\n            );\n        }\n\n        return $payment;\n    }\n\n    /**\n     * Convenience function to check if there is at least one order with the\n     * provided cleared status.\n     *\n     * @param int $cleared\n     *\n     * @return bool\n     */\n    private function riskCheckClearedLevel($cleared)\n    {\n        if (!$this->session->offsetGet('sUserId')) {\n            return false;\n        }\n\n        $checkOrder = $this->db->fetchRow(\n            'SELECT id FROM s_order\n             WHERE cleared = ? AND userID = ?',\n            [\n                $cleared,\n                $this->session->offsetGet('sUserId'),\n            ]\n        );\n\n        return $checkOrder && $checkOrder['id'];\n    }\n\n    /**\n     * Helper function to return the current date formatted\n     *\n     * @param string $format\n     *\n     * @return string\n     */\n    private function getCurrentDateFormatted($format = 'Y-m-d H:i:s')\n    {\n        $date = new DateTime();\n\n        return $date->format($format);\n    }\n\n    /**\n     * @return int\n     */\n    private function getBillingAddressId()\n    {\n        if ($this->session->offsetGet('checkoutBillingAddressId')) {\n            return (int) $this->session->offsetGet('checkoutBillingAddressId');\n        }\n        if (!$this->session->offsetGet('sUserId')) {\n            return 0;\n        }\n        $dbal = Shopware()->Container()->get(Connection::class);\n\n        return (int) $dbal->fetchColumn(\n            'SELECT default_billing_address_id\n             FROM s_user WHERE id = :id\n            ',\n            ['id' => $this->session->offsetGet('sUserId')]\n        );\n    }\n\n    /**\n     * @return int\n     */\n    private function getShippingAddressId()\n    {\n        if ($this->session->offsetGet('checkoutShippingAddressId')) {\n            return (int) $this->session->offsetGet('checkoutShippingAddressId');\n        }\n        if (!$this->session->offsetGet('sUserId')) {\n            return 0;\n        }\n        $dbal = Shopware()->Container()->get(Connection::class);\n\n        return (int) $dbal->fetchColumn(\n            'SELECT default_shipping_address_id\n             FROM s_user WHERE id = :id\n            ',\n            ['id' => $this->session->offsetGet('sUserId')]\n        );\n    }\n\n    /**\n     * @param Shopware_Components_Config $config\n     *\n     * @return bool\n     */\n    private function shouldVerifyCaptcha($config)\n    {\n        return $config->get('newsletterCaptcha') !== 'nocaptcha'\n            && !($config->get('noCaptchaAfterLogin') && Shopware()->Modules()->Admin()->sCheckUser());\n    }\n\n    /**\n     * @param string $amount\n     * @param string $amount_net\n     *\n     * @return QueryBuilder\n     */\n    private function getBasketQueryBuilder($amount, $amount_net)\n    {\n        $queryBuilder = $this->connection->createQueryBuilder()\n            ->select([\n                'MIN(d.instock>=b.quantity) as instock',\n                'MIN(d.instock>=(b.quantity+d.stockmin)) as stockmin',\n                'MIN(a.laststock) as laststock',\n                'SUM(d.weight*b.quantity) as weight',\n                'SUM(IF(a.id,b.quantity,0)) as count_article',\n                'MAX(b.shippingfree) as shippingfree',\n                'SUM(IF(b.modus=0,' . $amount . '/b.currencyFactor,0)) as amount',\n                'SUM(IF(b.modus=0,' . $amount_net . '/b.currencyFactor,0)) as amount_net',\n                'SUM(CAST(b.price as DECIMAL(10,2))*b.quantity) as amount_display',\n                'MAX(d.length) as `length`',\n                'MAX(d.height) as height',\n                'MAX(d.width) as width',\n                'u.id as userID',\n            ])\n            ->from('s_order_basket', 'b')\n            ->leftJoin('b', 's_articles', 'a', 'b.articleID = a.id AND b.modus = 0 AND b.esdarticle = 0')\n            ->leftJoin('a', 's_articles_details', 'd', '(d.ordernumber = b.ordernumber) AND d.articleID = a.id')\n            ->leftJoin('d', 's_articles_attributes', 'at', 'at.articledetailsID = d.id')\n            ->leftJoin('a', 's_core_tax', 't', 't.id = a.taxID')\n            ->leftJoin('b', 's_user', 'u', 'u.id = :userId AND u.active = 1')\n            ->leftJoin('u', 's_user_addresses', 'ub', 'ub.user_id = u.id AND ub.id = :billingAddressId')\n            ->leftJoin('u', 's_user_addresses', 'us', 'us.user_id = u.id AND us.id = :shippingAddressId')\n            ->where('b.sessionID = :sessionId')\n            ->groupBy('b.sessionID');\n\n        return $queryBuilder;\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    private function getShippingAddressData(ModelManager $entityManager, Customer $customer): ?array\n    {\n        $shippingAddress = null;\n\n        if ($this->session->offsetExists('checkoutShippingAddressId')) {\n            $shippingId = (int) $this->session->offsetGet('checkoutShippingAddressId');\n            $shippingAddress = $entityManager->find(Address::class, $shippingId);\n        }\n\n        if ($shippingAddress === null) {\n            $shippingAddress = $customer->getDefaultShippingAddress();\n        }\n\n        if (!$shippingAddress instanceof Address) {\n            return null;\n        }\n\n        $shippingAddressArray = $this->convertToLegacyAddressArray($shippingAddress);\n\n        $shippingAddressArray['attributes'] = $this->attributeLoader->load(\n            's_user_addresses_attributes',\n            $shippingAddress->getid()\n        );\n\n        return $shippingAddressArray;\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Tests\\Functional\\Traits\\CustomerLoginTrait;\nuse Shopware\\Tests\\Functional\\Traits\\DatabaseTransactionBehaviour;\n\nclass sAdminSGetUserDataTest extends TestCase\n{\n    use CustomerLoginTrait;\n    use DatabaseTransactionBehaviour;\n\n    public function testSGetUserDataWithPreselectedShippingAddress(): void\n    {\n        $countryId = 21;\n        $sql = file_get_contents(__DIR__ . '/fixtures/user_address_change.sql');\n        static::assertIsString($sql);\n        Shopware()->Container()->get('dbal_connection')->exec($sql);\n\n        $this->loginCustomer(\n            'f375fe1b4ad9c6f2458844226831463f',\n            3,\n            'unit@test.com',\n        );\n\n        $session = Shopware()->Container()->get('session');\n        static::assertInstanceOf(\\Enlight_Components_Session_Namespace::class, $session);\n        $session->offsetSet('checkoutShippingAddressId', $countryId);\n\n        $result = Shopware()->Modules()->Admin()->sGetUserData();\n        static::assertIsArray($result);\n\n        $this->logOutCustomer();\n        $session->offsetUnset('checkoutShippingAddressId');\n\n        static::assertSame($countryId, $result['shippingaddress']['country']['id']);\n        static::assertSame('FooBar, 12', $result['shippingaddress']['street']);\n    }\n\n    public function testSGetUserDataWithAddressUserIdNotEqualsToUser(): void\n    {\n        $shippingAddress = 701;\n        $sql = file_get_contents(__DIR__ . '/fixtures/user_address_change.sql');\n        static::assertIsString($sql);\n        Shopware()->Container()->get('dbal_connection')->exec($sql);\n\n        $sql = 'UPDATE s_user_addresses SET user_id = 4 WHERE id = 701';\n        Shopware()->Container()->get('dbal_connection')->exec($sql);\n\n        $this->loginCustomer(\n            'f375fe1b4ad9c6f2458844226831463f',\n            3,\n            'unit@test.com',\n        );\n\n        $session = Shopware()->Container()->get('session');\n        static::assertInstanceOf(\\Enlight_Components_Session_Namespace::class, $session);\n        $session->offsetSet('checkoutShippingAddressId', $shippingAddress);\n\n        $result = Shopware()->Modules()->Admin()->sGetUserData();\n        static::assertIsArray($result);\n\n        $this->logOutCustomer();\n        $session->offsetUnset('checkoutShippingAddressId');\n\n        static::assertSame($shippingAddress, $result['shippingaddress']['id']);\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nnamespace Shopware\\Tests\\Functional\\Traits;\n\nuse Enlight_Components_Session_Namespace;\nuse RuntimeException;\n\ntrait CustomerLoginTrait\n{\n    /**\n     * Logged in a customer\n     */\n    public function loginCustomer(\n        string $sessionId = 'sessionId',\n        int $customerId = 1,\n        string $email = 'test@example.com',\n        int $countryId = 2,\n        int $areaId = 3,\n        string $customerGroupKey = 'EK',\n        ?int $stateId = null\n    ): void {\n        Shopware()->Container()->reset('modules');\n        $session = Shopware()->Container()->get('session');\n        if (!$session instanceof Enlight_Components_Session_Namespace) {\n            throw new RuntimeException('Cannot initialize session');\n        }\n\n        $session->offsetSet('sessionId', $sessionId);\n        $session->offsetSet('sUserId', $customerId);\n        $session->offsetSet('sUserMail', $email);\n        $session->offsetSet('sCountry', $countryId);\n        $session->offsetSet('sArea', $areaId);\n        $session->offsetSet('sUserGroup', $customerGroupKey);\n        $session->offsetSet('sState', $stateId);\n\n        Shopware()->Container()->get('dbal_connection')->executeQuery(\n            'UPDATE s_user SET sessionID = :sessionId, lastlogin = now() WHERE id=:userId',\n            [\n                ':sessionId' => $sessionId,\n                ':userId' => $customerId,\n            ]\n        );\n\n        static::assertTrue(Shopware()->Modules()->Admin()->sCheckUser());\n    }\n\n    public function logOutCustomer(): void\n    {\n        $session = Shopware()->Container()->get('session');\n        $session->offsetUnset('sessionId');\n        $session->offsetUnset('sUserId');\n        $session->offsetUnset('sUserMail');\n        $session->offsetUnset('sUserGroup');\n        $session->offsetUnset('sCountry');\n        $session->offsetUnset('sArea');\n        $session->offsetUnset('sState');\n\n        static::assertFalse(Shopware()->Modules()->Admin()->sCheckUser());\n    }\n}\n"], "fixing_code": ["# CHANGELOG for Shopware 5.7.x\n\nThis changelog references changes done in Shopware 5.7 patch versions.\n\n## 5.7.7\n\n[View all changes from v5.7.6...v5.7.7](https://github.com/shopware/shopware/compare/v5.7.5...v5.7.6)\n\n### Deprecations\n\n* Deprecated `\\Shopware_Controllers_Frontend_Checkout::getTaxRates`, it will be removed in the next minor version v5.8.\nUse `TaxAggregator::taxSum` instead.\n\n### Additions\n\n* Added `\\Shopware\\Components\\Cart\\TaxAggregatorInterface`\n* Added `\\Shopware\\Components\\Cart\\TaxAggregator` as a default implementation, extracting the tax aggregation logic from the checkout controller\n* Added a new component to the update process. The `.htaccess`-file now contains a section dedicated to the Shopware core.\n* Added new polyfill dependencies which were indirect dependencies before\n  * `symfony/polyfill-php80` version 1.23.1\n  * `symfony/polyfill-php81` version 1.23.0\n\n### Changes\n\n* Changed `\\Shopware_Controllers_Frontend_Checkout::getTaxRates`, this method uses the `TaxAggregator::taxSum` now\n* Changed `\\Shopware_Models_Document_Order::processOrder`, this method uses the `TaxAggregator::shippingCostsTaxSum` method now\n* Changed `\\Shopware_Models_Document_Order::processPositions`, this method uses the `TaxAggregator::positionsTaxSum` method now\n* Updated `league/flysystem` to version 1.1.6\n* Updated `symfony/config` to version 4.4.34\n* Updated `symfony/console` to version 4.4.34\n* Updated `symfony/dependency-injection` to version 4.4.34\n* Updated `symfony/expression-language` to version 4.4.34\n* Updated `symfony/form` to version 4.4.34\n* Updated `symfony/http-foundation` to version 4.4.34\n* Updated `symfony/http-kernel` to version 4.4.34\n* Updated `symfony/process` to version 4.4.34\n* Updated `symfony/serializer` to version 5.3.12\n* Updated `symfony/validator` to version 4.4.34\n* Updated several indirect dependencies\n\n### Removals\n\n* Removed deprecated composer dependency `symfony/class-loader`. Use Composer ClassLoader instead\n\n### Session validation\n\nWith v5.7.7 the session validation was adjusted, so that sessions created prior\nto the latest password change of a customer account can't be used to login with\nsaid account. This also means, that upon a password change, all existing\nsessions for a given customer account are automatically considered invalid.\n\nAll sessions created prior to v5.7.7 are lacking the timestamp of the latest\npassword change and are therefore not considered valid anymore. **After an\nupgrade to v5.7.7, all customers who have a session in the given shop, will need\nto log in again.**\n\n## 5.7.6\n\n[View all changes from v5.7.5...v5.7.6](https://github.com/shopware/shopware/compare/v5.7.5...v5.7.6)\n\n### Additions\n\n* Added a new CSP directive to the default `.htaccess`\n\n## 5.7.5\n\n[View all changes from v5.7.4...v5.7.5](https://github.com/shopware/shopware/compare/v5.7.4...v5.7.5)\n\n## 5.7.4\n\n[View all changes from v5.7.3...v5.7.4](https://github.com/shopware/shopware/compare/v5.7.3...v5.7.4)\n\n### Deprecations\n\n* Deprecated `ajaxValidateEmailAction`. It will be removed in Shopware 5.8 with no replacement.\n\n### Additions\n\n* Added filter event `Shopware_Controllers_Order_OpenPdf_FilterName` to `Shopware_Controllers_Backend_Order::openPdfAction()`\n* Added new composer dependency `psr/http-message`\n* Added new parameter `rowIndex` to `Shopware_Modules_Export_ExportResult_Filter_Fixed` event\n\n### Breaks\n\n* In case you have extended the `frontend_listing_actions_filter` block to override the \"include\" of the button template,\nplease extend the `frontend_listing_actions_filter_include` block from now on instead.\n\n### Changes\n\n* Changed `themes/Frontend/Bare/frontend/listing/listing_actions.tpl` to remove a duplicate name entry\n* Updated TinyMCE to version 3.5.12\n* Updated `bcremer/line-reader` to version 1.1.0\n* Updated `beberlei/assert` to version 3.3.1\n* Updated `beberlei/doctrineextensions` to version 1.3.0\n* Updated `doctrine/cache` to version 1.12.1\n* Updated `doctrine/collections` to version 1.6.8\n* Updated `doctrine/common` to version 3.1.2\n* Updated `doctrine/dbal` to version 2.13.4\n* Updated `doctrine/orm` to version 2.9.5\n* Updated `doctrine/persistence` to version 2.2.2\n* Updated `guzzlehttp/guzzle` to version 7.3.0\n* Updated `guzzlehttp/psr7` to version 1.8.2\n* Updated `laminas/laminas-code` to version 4.4.3\n* Updated `.aminas/laminas-escaper` to version 2.9.0\n* Updated `mpdf/mpdf` to version 8.0.13\n* Updated `ocramius/proxy-manager` to version 2.13.0\n* Updated `ongr/elasticsearch-dsl` to version 7.2.2\n* Updated `setasign/fpdf` to version 1.8.4\n* Updated `setasign/fpdi` to version 2.3.6\n* Updated `symfony/serializer` to version 5.3.8\n* Updated `friends-of-behat/mink-extension` to version 2.5.0\n* Updated `sensiolabs/behat-page-object-extension` to version 2.3.3\n* Changed several Doctrine types to better match the database type or to improve understanding their purpose\n  * \\Shopware\\Models\\Article\\Configurator\\PriceVariation::$variation\n  * \\Shopware\\Models\\Article\\Detail::$purchasePrice\n  * \\Shopware\\Models\\Article\\Price::$percent\n  * \\Shopware\\Models\\Blog\\Comment::$points\n  * \\Shopware\\Models\\Country\\Country::$taxFree\n  * \\Shopware\\Models\\Country\\Country::$taxFreeUstId\n  * \\Shopware\\Models\\Country\\Country::$taxFreeUstIdChecked\n  * \\Shopware\\Models\\Emotion\\Emotion::$active\n  * \\Shopware\\Models\\Emotion\\Emotion::$fullscreen\n  * \\Shopware\\Models\\Emotion\\Emotion::$isLandingPage\n  * \\Shopware\\Models\\Newsletter\\ContainerType\\Article::$position\n  * \\Shopware\\Models\\Order\\Order::$invoiceShippingTaxRate\n  * \\Shopware\\Models\\Premium\\Premium::$startPrice\n  * \\Shopware\\Models\\Tax\\Rule::$tax\n\n### Removals\n\n* Removed unused composer dependency `php-http/message`\n\n## 5.7.3\n\n[View all changes from v5.7.2...v5.7.3](https://github.com/shopware/shopware/compare/v5.7.2...v5.7.3)\n\n### Changes\n\n* Updated `wikimedia/less.php` to 3.1.0\n\n### Removals\n\n* Removed password hash from session\n* Removed xml support for the snippet importer\n\n## 5.7.2\n\n[View all changes from v5.7.10...v5.7.2](https://github.com/shopware/shopware/compare/v5.7.10...v5.7.2)\n\n### Changes\n\n* Updated `league/flysystem` to 1.1.4\n\n## 5.7.1\n\n[View all changes from v5.7.0...v5.7.1](https://github.com/shopware/shopware/compare/v5.7.0...v5.7.1)\n\n### Additions\n\n* Added service alias from `Template` to `template`\n* Added service alias from `Loader` to `loader`\n\n### Changes\n\n* Changed the visibility of services from tags `shopware_emotion.component_handler`, `criteria_request_handler` and `sitemap_url_provider` to public\n* Changed following columns type from `date` to `datetime`\n  * `s_order_basket.datum`\n  * `s_order_comparisons.datum`\n  * `s_order_notes.datum`\n\n## 5.7.0\n\n[View all changes from v5.6.1...v5.7.0](https://github.com/shopware/shopware/compare/v5.6.1...v5.7.0)\n\n### Breaks\n\n* Do not use the `count()` smarty function in your templates anymore, since this will break with PHP version > 8.0. Use `|count` modifier instead!\n* Replaced `psh` and `ant` with an `Makefile`. See updated README.md for installation workflow.\n* Changed min PHP version to 7.4\n* Changed min Elasticsearch version to 7\n* Added new required methods `saveCustomUrls` and `saveExcludedUrls` to interface `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\ConfigHandlerInterface`\n* Changed Symfony version to 4.4\n* Changed Slugify version to 3.2\n* Changed Doctrine ORM version to 2.7.3\n* Changed Doctrine Cache version to 1.10.2\n* Changed Doctrine Common version to 3.0.2\n* Changed Doctrine Persistence version to 2.0.0\n* Changed Guzzle version to 7.1\n* Changed Monolog version to 2\n* Changed FPDF version to 1.8.2\n* Changed FPDI version to 2.2.0\n* Changed mPDF version to 8.0.7\n* Migrated Zend components to new Laminas\n* Elasticsearch indices doesn't use anymore types\n\n### Additions\n\n* Added Symfony session to `Request` object\n* Added new user interface for the sitemap configuration. It's available in the backend performance module\n* Added `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\Database` to save and read the sitemap configuration from the database\n* Added new doctrine model `Shopware\\Models\\Emotion\\LandingPage`, which extends from `Shopware\\Models\\Emotion\\Emotion`.\nIt's needed to search for landing pages only using the backend store `Shopware.store.Search`\n* Added new doctrine models `Shopware\\Models\\Sitemap\\CustomUrl` and `Shopware\\Models\\Sitemap\\ExcludeUrl`\n* Added new ExtJS component `Shopware.grid.Searchable`.\nUsing it you can search for different entities in a single grid, such as products, categories, blogs, etc.\nHave a look at the new sitemap UI to see what it looks like\n* Added `Shopware-Listing-Total` header to ajax listing loading\n* Added database transaction around plugin uninstall, activate and deactivate\n* Added support for MySQL 8 `sql_require_primary_key`\n* Added `attribute` to users listing in API\n* Added new blocks `document_index_head_logo` and `document_index_head_wrapper` to `themes/Frontend/Bare/documents/index.tpl`\n* Added `unmapped_type` to `integer` in `engine/Shopware/Bundle/SearchBundleES/SortingHandler/ManualSortingHandler.php`\n* Added a notice to registration form when a shipment blocked country has been selected\n\n### Changes\n\n* Changed `Shopware\\Models\\Order\\Order` and `Shopware\\Models\\Order\\Detail` models by extracting business logic into:\n    * `Shopware\\Bundle\\OrderBundle\\Service\\StockService`\n    * `Shopware\\Bundle\\OrderBundle\\Service\\CalculationService`\n    * `Shopware\\Bundle\\OrderBundle\\Subscriber\\ProductStockSubscriber`\n    * `Shopware\\Bundle\\OrderBundle\\Subscriber\\OrderRecalculationSubscriber`\n* Changed `Enlight_Components_Session_Namespace` to extend from `Symfony\\Component\\HttpFoundation\\Session\\Session`\n* Changed the default config for smarty `compileCheck` to false\n* Changed following columns to nullable\n    * `s_order_details.releasedate`\n    * `s_core_auth.lastlogin`\n    * `s_campaigns_logs.datum`\n    * `s_emarketing_banners.valid_from`\n    * `s_emarketing_banners.valid_to`\n    * `s_emarketing_lastarticles.time`\n    * `s_emarketing_tellafriend.datum`\n    * `s_order_basket.datum`\n    * `s_order_comparisons.datum`\n    * `s_order_notes.datum`\n    * `s_statistics_pool.datum`\n    * `s_statistics_referer.datum`\n    * `s_statistics_visitors.datum`\n    * `s_user.firstlogin`\n    * `s_user.lastlogin`\n* Changed response from `Shopware_Controllers_Widgets_Listing` from JSON to HTML\n* Changed emotion component names to allow translations using snippets\n    * `Artikel` => `product`\n    * `Kategorie-Teaser` => `category_teaser`\n    * `Blog-Artikel` => `blog_article`\n    * `Banner` => `banner`\n    * `Banner-Slider` => `banner_slider`\n    * `Youtube-Video` => `youtube`\n    * `Hersteller-Slider` => `manufacturer_slider`\n    * `Artikel-Slider` => `product_slider`\n    * `HTML-Element` => `html_element`\n    * `iFrame-Element` => `iframe`\n    * `HTML5 Video-Element` => `html_video`\n    * `Code Element` => `code_element`\n* Changed the search to not consider keywords which match 90% of all variants \n* Changed `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProvider` to set `hasStock` based on instock like DBAL implementation\n* Changed `\\Shopware_Controllers_Backend_ProductStream::loadPreviewAction` to return formatted prices\n* Changed `sw:plugin:activate` exit code from 1 to 0, when it's already installed.\n* Changed `\\Shopware\\Bundle\\StoreFrontBundle\\Gateway\\DBAL\\CategoryGateway::get` it accepts now only integers as id\n* Changed `sw:es:index:populate` to accept multiple shop ids with `--shopId={1,2}`\n* Changed `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProvider` to consider cheapest price configuration\n* Changed `\\Shopware\\Bundle\\PluginInstallerBundle\\Service\\PluginInstaller` to remove also menu translations\n\n### Removals\n\n* Removed following classes:\n    * `Enlight_Components_Session`\n    * `Enlight_Components_Session_SaveHandler_DbTable`\n    * `Zend_Session`\n    * `Zend_Session_Namespace`\n    * `Zend_Session_Abstract`\n    * `Zend_Session_Exception`\n    * `Zend_Session_SaveHandler_DbTable`\n    * `Zend_Session_SaveHandler_Exception`\n    * `Zend_Session_SaveHandler_Interface`\n    * `Zend_Session_Validator_Abstract`\n    * `Zend_Session_Validator_HttpUserAgent`\n    * `Zend_Session_Validator_Interface`\n    * `Shopware\\Components\\Log\\Handler\\ChromePhpHandler`\n    * `Shopware\\Components\\Log\\Handler\\FirePHPHandler`\n    * `\\Shopware_Plugins_Core_Debug_Bootstrap`\n    * `\\Shopware\\Plugin\\Debug\\Components\\CollectorInterface`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ControllerCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\DatabaseCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\DbalCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ErrorCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\EventCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\ExceptionCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\TemplateCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\TemplateVarCollector`\n    * `\\Shopware\\Plugin\\Debug\\Components\\Utils`\n    * `\\Shopware\\Components\\Api\\Resource\\ApiProgressHelper`\n    * `\\Shopware\\Bundle\\StoreFrontBundle\\Struct\\LocationContext`\n    * `\\Shopware\\Components\\OpenSSLEncryption`\n    * `\\Shopware\\Bundle\\SearchBundleES\\DependencyInjection\\Factory\\ProductNumberSearchFactory`\n* Removed method `\\Shopware\\Bundle\\EsBackendBundle\\EsBackendIndexer::buildAlias` use `\\Shopware\\Bundle\\EsBackendBundle\\IndexFactoryInterface::createIndexConfiguration` instead\n* Removed method `\\Shopware\\Bundle\\SearchBundleES\\DependencyInjection\\Factory\\ProductNumberSearchFactory::registerHandlerCollection`, use DI Tag `shopware_search_es.search_handler` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryAll`, use `\\Shopware\\Components\\Model\\ModelRepository::findAll` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryAll`, use `\\Shopware\\Components\\Model\\ModelRepository::findAll` instead\n* Removed method `\\Shopware\\Components\\Model\\ModelRepository::queryBy`, use `\\Shopware\\Components\\Model\\ModelRepository::findBy` instead\n* Removed following interfaces:\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\Product\\ProductProviderInterface`\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\Property\\PropertyProviderInterface`\n    * `\\Shopware\\Bundle\\ESIndexingBundle\\EsSearchInterface`\n    * `\\Shopware\\Bundle\\StoreFrontBundle\\Struct\\LocationContextInterface`\n* Removed from class `\\Shopware\\Components\\HttpCache\\CacheWarmer` following methods:\n    * `callUrls`\n    * `getSEOURLByViewPortCount`\n    * `getAllSEOUrlCount`\n    * `getAllSEOUrls`\n    * `getSEOUrlByViewPort`\n    * `prepareUrl`\n    * `getShopDataById`\n* Removed following methods from class `\\Shopware_Controllers_Backend_Search`:\n    * `getArticles` \n    * `getCustomers` \n    * `getOrders` \n* Removed referenced value from magic getter in session\n* Removed the assignment of all request parameters to the view in `Shopware_Controllers_Widgets_Listing::productsAction`\n* Removed duplicate ExtJs classes and added alias to new class:\n    * `Shopware.apps.Config.view.element.Boolean`\n    * `Shopware.apps.Config.view.element.Button`\n    * `Shopware.apps.Config.view.element.Color`\n    * `Shopware.apps.Config.view.element.Date`\n    * `Shopware.apps.Config.view.element.DateTime`\n    * `Shopware.apps.Config.view.element.Html`\n    * `Shopware.apps.Config.view.element.Interval`\n    * `Shopware.apps.Config.view.element.Number`\n    * `Shopware.apps.Config.view.element.ProductBoxLayoutSelect`\n    * `Shopware.apps.Config.view.element.Select`\n    * `Shopware.apps.Config.view.element.SelectTree`\n    * `Shopware.apps.Config.view.element.Text`\n    * `Shopware.apps.Config.view.element.TextArea`\n    * `Shopware.apps.Config.view.element.Time`\n* Removed following unused dependencies\n    * `egulias/email-validator`\n    * `symfony/translation`\n    * `php-http/curl-client`\n    * `psr/link`\n    * `symfony/polyfill-ctype`\n    * `symfony/polyfill-iconv`\n    * `symfony/polyfill-iconv`\n    * `symfony/polyfill-php56`\n    * `symfony/polyfill-php70`\n    * `symfony/polyfill-php71`\n    * `symfony/polyfill-php72`\n* Removed field `size` from `Shopware\\Models\\Article\\Download`. Use media_service to get the correct file size\n* Removed plugin `Debug`\n\n### Deprecations\n\n* Deprecated the class `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\File`.\nIt will be removed in Shopware 5.8. Use `Shopware\\Bundle\\SitemapBundle\\ConfigHandler\\Database` instead.\n* Deprecated getting plugin config from `Shopware_Components_Config` without plugin namespace, use `SwagTestPlugin:MyConfigName` instead\n* Deprecated the class `\\Shopware\\Components\\Plugin\\DBALConfigReader`.\nIt will be removed in Shopware 5.9. Use `Shopware\\Components\\Plugin\\Configuration\\ReaderInterface` instead\n* Deprecated the class `\\Shopware\\Components\\Plugin\\CachedConfigReader`.\nIt will be removed in Shopware 5.9. Use `Shopware\\Components\\Plugin\\Configuration\\ReaderInterface` instead\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\ORM\\AbstractQuery;\nuse League\\Flysystem\\FileNotFoundException;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\EmailUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\PasswordUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\ProfileUpdateFormType;\nuse Shopware\\Bundle\\AccountBundle\\Form\\Account\\ResetPasswordFormType;\nuse Shopware\\Bundle\\AccountBundle\\Service\\CustomerServiceInterface;\nuse Shopware\\Bundle\\StaticContentBundle\\Exception\\EsdNotFoundException;\nuse Shopware\\Bundle\\StoreFrontBundle\\Gateway\\CountryGatewayInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ContextServiceInterface;\nuse Shopware\\Components\\Compatibility\\LegacyStructConverter;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Random;\nuse Shopware\\Models\\CommentConfirm\\CommentConfirm;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Partner\\Partner;\nuse ShopwarePlugin\\PaymentMethods\\Components\\BasePaymentMethod;\nuse Symfony\\Component\\Form\\FormError;\nuse Symfony\\Component\\Form\\FormInterface;\n\nclass Shopware_Controllers_Frontend_Account extends Enlight_Controller_Action\n{\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @var sAdmin\n     */\n    protected $admin;\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @var CustomerServiceInterface\n     */\n    protected $customerService;\n\n    /**\n     * @return void\n     */\n    public function init()\n    {\n        $this->admin = Shopware()->Modules()->Admin();\n        $this->customerService = Shopware()->Container()->get(CustomerServiceInterface::class);\n    }\n\n    public function preDispatch()\n    {\n        $this->View()->setScope(Smarty::SCOPE_PARENT);\n        if ($this->shouldForwardToRegister()) {\n            $this->forward('index', 'register', 'frontend', $this->getForwardParameters());\n\n            return;\n        }\n        $customerData = $this->admin->sGetUserData();\n        if (!\\is_array($customerData)) {\n            $this->forward('index', 'register', 'frontend', $this->getForwardParameters());\n\n            return;\n        }\n\n        $activeBillingAddressId = $customerData['additional']['user']['default_billing_address_id'];\n        $activeShippingAddressId = $customerData['additional']['user']['default_shipping_address_id'];\n\n        if (!empty($customerData['shippingaddress']['country']['id'])) {\n            $country = $this->get(CountryGatewayInterface::class)->getCountry($customerData['shippingaddress']['country']['id'], $this->get(ContextServiceInterface::class)->getContext());\n            $customerData['shippingaddress']['country'] = $this->get(LegacyStructConverter::class)->convertCountryStruct($country);\n        }\n\n        $this->View()->assign('activeBillingAddressId', $activeBillingAddressId);\n        $this->View()->assign('activeShippingAddressId', $activeShippingAddressId);\n        $this->View()->assign('sUserData', $customerData);\n        $this->View()->assign('userInfo', $this->get('shopware_account.store_front_greeting_service')->fetch());\n        $this->View()->assign('sUserLoggedIn', $this->admin->sCheckUser());\n        $this->View()->assign('sAction', $this->request->getActionName());\n\n        if ($this->isOneTimeAccount() && !\\in_array($this->request->getActionName(), ['abort', 'login', 'register'])) {\n            $this->logoutAction();\n            $this->redirect(['controller' => 'register']);\n        }\n    }\n\n    /**\n     * @return void\n     */\n    public function indexAction()\n    {\n        if ($this->Request()->getParam('success')) {\n            $this->View()->assign('sSuccessAction', $this->Request()->getParam('success'));\n        }\n    }\n\n    /**\n     * Read and change payment mean and payment data\n     *\n     * @return void\n     */\n    public function paymentAction()\n    {\n        $this->View()->assign('sPaymentMeans', $this->admin->sGetPaymentMeans());\n        $this->View()->assign('sFormData', ['payment' => $this->View()->getAssign('sUserData')['additional']['user']['paymentID']]);\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget', $this->Request()->getControllerName()));\n        $this->View()->assign('sTargetAction', $this->Request()->getParam('sTargetAction', 'index'));\n\n        $getPaymentDetails = $this->admin->sGetPaymentMeanById($this->View()->getAssign('sFormData')['payment']);\n\n        $paymentClass = $this->admin->sInitiatePaymentClass($getPaymentDetails);\n        if ($paymentClass instanceof BasePaymentMethod) {\n            $data = $paymentClass->getCurrentPaymentDataAsArray(Shopware()->Session()->get('sUserId'));\n            if (!empty($data)) {\n                $this->View()->assign('sFormData', $this->View()->getAssign('sFormData') + $data);\n            }\n        }\n\n        if ($this->Request()->isPost()) {\n            $values = $this->Request()->getPost();\n            $values['payment'] = $this->Request()->getPost('register');\n            $values['payment'] = $values['payment']['payment'];\n            $values['isPost'] = true;\n            $this->View()->assign('sFormData', $values);\n        }\n    }\n\n    /**\n     * Read last orders\n     *\n     * @return void\n     */\n    public function ordersAction()\n    {\n        $destinationPage = (int) $this->Request()->get('sPage');\n        $orderData = $this->admin->sGetOpenOrderData($destinationPage);\n        $orderData = $this->applyTrackingUrl($orderData);\n\n        $this->View()->assign('sOpenOrders', $orderData['orderData']);\n        $this->View()->assign('sNumberPages', $orderData['numberOfPages']);\n        $this->View()->assign('sPages', $orderData['pages']);\n\n        // This has to be assigned here because the config method in smarty can't handle array structures\n        $this->View()->assign('sDownloadAvailablePaymentStatus', Shopware()->Config()->get('downloadAvailablePaymentStatus'));\n    }\n\n    /**\n     * Read last downloads\n     *\n     * @return void\n     */\n    public function downloadsAction()\n    {\n        $destinationPage = (int) $this->Request()->get('sPage');\n\n        if (empty($destinationPage)) {\n            $destinationPage = 1;\n        }\n\n        $orderData = $this->admin->sGetDownloads($destinationPage);\n        $this->View()->assign('sDownloads', $orderData['orderData']);\n        $this->View()->assign('sNumberPages', $orderData['numberOfPages']);\n        $this->View()->assign('sPages', $orderData['pages']);\n\n        // This has to be assigned here because the config method in smarty can't handle array structures\n        $this->View()->assign('sDownloadAvailablePaymentStatus', Shopware()->Config()->get('downloadAvailablePaymentStatus'));\n    }\n\n    /**\n     * The partner statistic menu item action displays\n     * the menu item in the account menu\n     *\n     * @return void\n     */\n    public function partnerStatisticMenuItemAction()\n    {\n        // Show partner statistic menu\n        $partnerModel = $this->get('models')->getRepository(Partner::class)->findOneBy(['customerId' => Shopware()->Session()->get('sUserId')]);\n        if (!empty($partnerModel)) {\n            $this->View()->assign('partnerId', $partnerModel->getId());\n            Shopware()->Session()->offsetSet('partnerId', $partnerModel->getId());\n        }\n    }\n\n    /**\n     * This action returns all data for the partner statistic page\n     *\n     * @return void\n     */\n    public function partnerStatisticAction()\n    {\n        $partnerId = Shopware()->Session()->get('partnerId');\n\n        if (empty($partnerId)) {\n            $this->forward('index');\n\n            return;\n        }\n\n        $toDate = $this->Request()->get('toDate');\n        $fromDate = $this->Request()->get('fromDate');\n\n        // If a \"fromDate\" is passed, format it over the \\DateTime object. Otherwise, create a new date with today\n        if (empty($fromDate) || !Zend_Date::isDate($fromDate, 'Y-m-d')) {\n            $fromDate = new DateTime();\n            $fromDate = $fromDate->sub(new DateInterval('P1M'));\n        } else {\n            $fromDate = new DateTime($fromDate);\n        }\n\n        // If a \"toDate\" is passed, format it over the \\DateTime object. Otherwise, create a new date with today\n        if (empty($toDate) || !Zend_Date::isDate($toDate, 'Y-m-d')) {\n            $toDate = new DateTime();\n        } else {\n            $toDate = new DateTime($toDate);\n        }\n\n        $this->View()->assign('partnerStatisticToDate', $toDate->format('Y-m-d'));\n        $this->View()->assign('partnerStatisticFromDate', $fromDate->format('Y-m-d'));\n\n        // To get the right value cause 2012-02-02 is smaller than 2012-02-02 15:33:12\n        $toDate = $toDate->add(new DateInterval('P1D'));\n\n        $repository = $this->get('models')->getRepository(Partner::class);\n\n        // Get the information of the partner chart\n        $customerCurrencyFactor = Shopware()->Shop()->getCurrency()->getFactor();\n\n        $dataQuery = $repository->getStatisticChartQuery($partnerId, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sPartnerOrderChartData', $dataQuery->getArrayResult());\n\n        $dataQuery = $repository->getStatisticListQuery(null, null, null, $partnerId, false, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sPartnerOrders', $dataQuery->getArrayResult());\n\n        $dataQuery = $repository->getStatisticListQuery(null, null, null, $partnerId, true, $fromDate, $toDate, $customerCurrencyFactor);\n        $this->View()->assign('sTotalPartnerAmount', $dataQuery->getOneOrNullResult(AbstractQuery::HYDRATE_ARRAY));\n    }\n\n    /**\n     * Logout account and delete session\n     *\n     * @return void\n     */\n    public function logoutAction()\n    {\n        $this->admin->logout();\n    }\n\n    /**\n     * Abort one time order and delete session\n     *\n     * @return void\n     */\n    public function abortAction()\n    {\n        $this->admin->logout();\n    }\n\n    /**\n     * Login account and show login errors\n     *\n     * @return void\n     */\n    public function loginAction()\n    {\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget'));\n\n        if ($this->Request()->isPost()) {\n            $checkCustomer = $this->admin->sLogin();\n            if (\\is_array($checkCustomer) && !empty($checkCustomer['sErrorMessages'])) {\n                $this->View()->assign('sFormData', $this->Request()->getPost());\n                $this->View()->assign('sErrorFlag', $checkCustomer['sErrorFlag']);\n                $this->View()->assign('sErrorMessages', $checkCustomer['sErrorMessages']);\n            } else {\n                $this->refreshBasket();\n            }\n        }\n\n        if (empty($this->View()->getAssign('sErrorMessages')) && $this->admin->sCheckUser()) {\n            $this->redirect(\n                [\n                    'controller' => $this->Request()->getParam('sTarget', 'account'),\n                    'action' => $this->Request()->getParam('sTargetAction', 'index'),\n                ]\n            );\n\n            return;\n        }\n\n        $this->forward('index', 'register', 'frontend', [\n            'sTarget' => $this->Request()->getParam('sTarget'),\n        ]);\n    }\n\n    /**\n     * @return void\n     */\n    public function savePaymentAction()\n    {\n        if ($this->Request()->isPost()) {\n            $sourceIsCheckoutConfirm = $this->Request()->getParam('sourceCheckoutConfirm');\n            $values = $this->Request()->getPost('register');\n            $frontRequest = $this->front->Request();\n            if ($frontRequest === null) {\n                throw new RuntimeException('Front controller has no request set');\n            }\n            $frontRequest->setPost('sPayment', $values['payment']);\n            $checkData = $this->admin->sValidateStep3();\n\n            if (!empty($checkData['checkPayment']['sErrorMessages']) || empty($checkData['sProcessed'])) {\n                if (empty($sourceIsCheckoutConfirm)) {\n                    $this->View()->assign('sErrorFlag', $checkData['checkPayment']['sErrorFlag']);\n                    $this->View()->assign('sErrorMessages', $checkData['checkPayment']['sErrorMessages']);\n                }\n\n                $this->forward('payment');\n\n                return;\n            }\n            $customerData = $this->admin->sGetUserData();\n            $previousPayment = \\is_array($customerData) ? $customerData['additional']['user']['paymentID'] : 0;\n\n            $previousPaymentData = $this->admin->sGetPaymentMeanById($previousPayment);\n            if ($previousPaymentData['paymentTable']) {\n                $deleteSQL = 'DELETE FROM ' . $previousPaymentData['paymentTable'] . ' WHERE userID=?';\n                Shopware()->Db()->query($deleteSQL, [Shopware()->Session()->get('sUserId')]);\n            }\n\n            $this->admin->sUpdatePayment();\n\n            if ($checkData['sPaymentObject'] instanceof BasePaymentMethod) {\n                $checkData['sPaymentObject']->savePaymentData(Shopware()->Session()->get('sUserId'), $this->Request());\n            }\n        }\n\n        $target = $this->Request()->getParam('sTarget');\n        if (!$target) {\n            $target = 'account';\n        }\n        $targetAction = $this->Request()->getParam('sTargetAction', 'index');\n        $this->redirect([\n            'controller' => $target,\n            'action' => $targetAction,\n            'success' => 'payment',\n        ]);\n    }\n\n    /**\n     * Save newsletter address data\n     *\n     * @return void\n     */\n    public function saveNewsletterAction()\n    {\n        if ($this->Request()->isPost()) {\n            $status = (bool) $this->Request()->getPost('newsletter');\n            $customerMail = $this->admin->sGetUserMailById();\n            if (!\\is_string($customerMail)) {\n                return;\n            }\n\n            $this->admin->sUpdateNewsletter($status, $customerMail, true);\n            $successMessage = $status ? 'newsletter' : 'deletenewsletter';\n            if (Shopware()->Config()->get('optinnewsletter') && $status) {\n                $successMessage = 'optinnewsletter';\n            }\n            $this->View()->assign('sSuccessAction', $successMessage);\n            $this->container->get('session')->offsetSet('sNewsletter', $status);\n        }\n        $this->forward('index');\n    }\n\n    /**\n     * Read and test download file\n     *\n     * @return void\n     */\n    public function downloadAction()\n    {\n        $esdService = $this->container->get('shopware_static_content.service.esd_service');\n        $downloadService = $this->container->get('shopware_static_content.service.download_service');\n        $filesystem = $this->container->get('shopware.filesystem.private');\n        $esdID = (int) $this->request->getParam('esdID', 0);\n\n        if ($esdID === 0) {\n            $this->forward('downloads');\n\n            return;\n        }\n\n        try {\n            $download = $esdService->loadEsdOfCustomer($this->container->get('session')->offsetGet('sUserId'), $esdID);\n        } catch (EsdNotFoundException $exception) {\n            $this->forwardDownloadError(1);\n\n            return;\n        }\n\n        if (empty($download->getFile())) {\n            $this->forwardDownloadError(1);\n\n            return;\n        }\n\n        $filePath = $esdService->getLocation($download);\n\n        if ($filesystem->has($filePath) === false) {\n            $this->forwardDownloadError(2);\n\n            return;\n        }\n\n        try {\n            $downloadService->send($filePath, $filesystem);\n        } catch (FileNotFoundException $exception) {\n            $this->forwardDownloadError(2);\n        }\n    }\n\n    /**\n     * Send new account password\n     *\n     * @return void\n     */\n    public function passwordAction()\n    {\n        $this->View()->assign('sTarget', $this->Request()->getParam('sTarget'));\n\n        if ($this->Request()->isPost()) {\n            $checkCustomer = $this->sendResetPasswordConfirmationMail($this->Request()->getParam('email'));\n            if (!empty($checkCustomer['sErrorMessages']) && !empty($checkCustomer['sErrorFlag'])) {\n                $this->View()->assign('sFormData', $this->Request()->getPost());\n                $this->View()->assign('sErrorFlag', $checkCustomer['sErrorFlag']);\n                $this->View()->assign('sErrorMessages', $checkCustomer['sErrorMessages']);\n            } else {\n                $this->View()->assign('sSuccess', true);\n            }\n        }\n    }\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     * Send a mail asking the customer, if he actually wants to reset his password\n     *\n     * @param string $email\n     *\n     * @return array{sErrorMessages?: array<string>, sErrorFlag?: array{email: true}}\n     */\n    public function sendResetPasswordConfirmationMail($email)\n    {\n        $snippets = Shopware()->Snippets()->getNamespace('frontend/account/password');\n\n        if (empty($email)) {\n            return [\n                'sErrorMessages' => [$snippets->get('ErrorForgotMail')],\n                'sErrorFlag' => ['email' => true],\n            ];\n        }\n\n        $customerId = Shopware()->Modules()->Admin()->sGetUserByMail($email);\n        if (empty($customerId)) {\n            return [];\n        }\n\n        $hash = Random::getAlphanumericString(32);\n\n        $context = [\n            'sUrlReset' => $this->Front()->Router()->assemble(['controller' => 'account', 'action' => 'resetPassword', 'hash' => $hash]),\n            'sUrl' => $this->Front()->Router()->assemble(['controller' => 'account', 'action' => 'resetPassword']),\n            'sKey' => $hash,\n        ];\n\n        $sql = 'SELECT\n          s_user.accountmode,\n          s_user.active,\n          s_user.affiliate,\n          s_user.birthday,\n          s_user.confirmationkey,\n          s_user.customergroup,\n          s_user.customernumber,\n          s_user.email,\n          s_user.failedlogins,\n          s_user.firstlogin,\n          s_user.lastlogin,\n          s_user.language,\n          s_user.internalcomment,\n          s_user.lockeduntil,\n          s_user.subshopID,\n          s_user.title,\n          s_user.salutation,\n          s_user.firstname,\n          s_user.lastname,\n          s_user.lastlogin,\n          s_user.newsletter\n          FROM s_user\n          WHERE id = ?';\n\n        $customer = $this->get(Connection::class)->fetchAssociative($sql, [$customerId]);\n        $email = $customer['email'];\n        $customer['attributes'] = $this->get(Connection::class)->fetchAssociative('SELECT * FROM s_user_attributes WHERE userID = ?', [$customerId]);\n\n        $context['user'] = $customer;\n\n        // Send mail\n        $mail = Shopware()->TemplateMail()->createMail('sCONFIRMPASSWORDCHANGE', $context);\n        $mail->addTo($email);\n        $mail->send();\n\n        // Add the hash to the optin table\n        $sql = \"INSERT INTO `s_core_optin` (`type`, `datum`, `hash`, `data`) VALUES ('swPassword', NOW(), ?, ?)\";\n        Shopware()->Db()->query($sql, [$hash, $customerId]);\n\n        return [];\n    }\n\n    /**\n     * Shows the reset password form and triggers password reset on submit\n     *\n     * @return void\n     */\n    public function resetPasswordAction()\n    {\n        $hash = (string) $this->Request()->getParam('hash');\n        $this->View()->assign('hash', $hash);\n        $customer = null;\n\n        try {\n            $customer = $this->getCustomerByResetHash($hash);\n        } catch (Exception $ex) {\n            $this->View()->assign('invalidToken', true);\n            $this->View()->assign('sErrorMessages', [$ex->getMessage()]);\n        }\n\n        if (!$customer instanceof Customer) {\n            $this->View()->assign('sErrorMessages', ['Customer not found']);\n\n            return;\n        }\n\n        if (!$this->Request()->isPost()) {\n            return;\n        }\n\n        $form = $this->createForm(ResetPasswordFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && !$form->isValid()) {\n            $errors = ['sErrorFlag' => [], 'sErrorMessages' => []];\n\n            foreach ($form->getErrors(true) as $error) {\n                if (!$error instanceof FormError) {\n                    continue;\n                }\n                if ($error->getOrigin() instanceof FormInterface) {\n                    $errors['sErrorFlag'][$error->getOrigin()->getName()] = true;\n                }\n                $errors['sErrorMessages'][] = $this->View()->fetch('string:' . $error->getMessage());\n            }\n\n            $this->View()->assign($errors);\n\n            return;\n        }\n\n        $customer->setEncoderName($this->get('passwordencoder')->getDefaultPasswordEncoderName());\n\n        $this->get('models')->persist($customer);\n        $this->get('models')->flush($customer);\n\n        // Perform a login for customer and redirect to account\n        $this->Request()->setPost(['email' => $customer->getEmail(), 'password' => $form->get('password')->getData()]);\n        $this->admin->sLogin();\n\n        $target = $this->Request()->getParam('sTarget');\n        if (!$target) {\n            $target = 'account';\n        }\n\n        $this->get(Connection::class)->executeQuery(\n            'DELETE FROM s_core_optin WHERE hash = ? AND type = ?',\n            [$hash, 'swPassword']\n        );\n\n        $this->redirect(['controller' => $target, 'action' => 'index', 'success' => 'resetPassword']);\n    }\n\n    /**\n     * Profile forms for main data, password and email\n     *\n     * @return void\n     */\n    public function profileAction()\n    {\n        $errorFlags = [];\n        $errorMessages = [];\n        $postData = $this->Request()->getPost() ?: [];\n\n        $defaultData = [\n            'profile' => [\n                'salutation' => $this->View()->getAssign('sUserData')['additional']['user']['salutation'],\n                'title' => $this->View()->getAssign('sUserData')['additional']['user']['title'],\n                'firstname' => $this->View()->getAssign('sUserData')['additional']['user']['firstname'],\n                'lastname' => $this->View()->getAssign('sUserData')['additional']['user']['lastname'],\n                'birthday' => [\n                    'day' => null,\n                    'month' => null,\n                    'year' => null,\n                ],\n            ],\n        ];\n\n        if (!empty($this->View()->getAssign('sUserData')['additional']['user']['birthday'])) {\n            $datetime = new DateTime($this->View()->getAssign('sUserData')['additional']['user']['birthday']);\n            $defaultData['profile']['birthday']['year'] = $datetime->format('Y');\n            $defaultData['profile']['birthday']['month'] = $datetime->format('m');\n            $defaultData['profile']['birthday']['day'] = $datetime->format('d');\n        }\n\n        $formData = array_merge($defaultData, $postData);\n\n        if ($this->Request()->getParam('errors')) {\n            foreach ($this->Request()->getParam('errors') as $error) {\n                $message = $this->View()->fetch('string:' . $error->getMessage());\n                $errorFlags[$error->getOrigin()->getName()] = true;\n                $errorMessages[] = $message;\n            }\n\n            $errorMessages = array_unique($errorMessages);\n        }\n\n        $this->View()->assign('form_data', $formData);\n        $this->View()->assign('errorFlags', $errorFlags);\n        $this->View()->assign('errorMessages', $errorMessages);\n        $this->View()->assign('success', $this->Request()->getParam('success'));\n        $this->View()->assign('section', $this->Request()->getParam('section'));\n    }\n\n    /**\n     * Endpoint for changing the main profile data\n     *\n     * @return void\n     */\n    public function saveProfileAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(ProfileUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n            $this->container->get('session')->offsetSet('userInfo', null);\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'profile']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'profile', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * Endpoint for changing the email\n     *\n     * @return void\n     */\n    public function saveEmailAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(EmailUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n            $this->get('session')->offsetSet('sUserMail', $customer->getEmail());\n            $this->get('session')->offsetSet('userInfo', null);\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'email']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'email', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * Endpoint for changing the password\n     *\n     * @return void\n     */\n    public function savePasswordAction()\n    {\n        $customerId = $this->get('session')->get('sUserId');\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $customerId);\n\n        $form = $this->createForm(PasswordUpdateFormType::class, $customer);\n        $form->handleRequest($this->Request());\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->customerService->update($customer);\n\n            /*\n             * Formatting the date as 'Y-m-d H:i:s' is needed, since it is read\n             * directly from the DB in sAdmin::loginUser.\n             */\n            $this->get('session')->offsetSet('sUserPasswordChangeDate', $customer->getPasswordChangeDate()->format('Y-m-d H:i:s'));\n\n            $this->redirect(['controller' => 'account', 'action' => 'profile', 'success' => true, 'section' => 'password']);\n\n            return;\n        }\n\n        $this->forward('profile', 'account', 'frontend', ['section' => 'password', 'errors' => $form->getErrors(true)]);\n    }\n\n    /**\n     * @deprecated - Will be private in Shopware 5.8\n     *\n     * @return void\n     */\n    protected function refreshBasket()\n    {\n        $modules = $this->container->get('modules');\n        $customerData = $modules->Admin()->sGetUserData();\n        $session = $this->container->get('session');\n\n        if (\\is_array($customerData)) {\n            $session->offsetSet('sCountry', (int) $customerData['additional']['countryShipping']['id']);\n            $session->offsetSet('sArea', (int) $customerData['additional']['countryShipping']['areaID']);\n        }\n\n        $this->container->get(ContextServiceInterface::class)->initializeContext();\n\n        $modules->Basket()->sRefreshBasket();\n    }\n\n    private function forwardDownloadError(int $errorCode): void\n    {\n        $this->View()->assign('sErrorCode', $errorCode);\n\n        $this->forward('downloads');\n    }\n\n    /**\n     * @param array<string, mixed> $orderData\n     *\n     * @return array<string, mixed>\n     */\n    private function applyTrackingUrl(array $orderData): array\n    {\n        foreach ($orderData['orderData'] as &$order) {\n            if (!empty($order['trackingcode']) && !empty($order['dispatch']) && !empty($order['dispatch']['status_link'])) {\n                $order['dispatch']['status_link'] = $this->renderTrackingLink(\n                    $order['dispatch']['status_link'],\n                    $order['trackingcode']\n                );\n            }\n        }\n\n        return $orderData;\n    }\n\n    private function renderTrackingLink(string $link, string $trackingCode): ?string\n    {\n        $regEx = '/(\\{\\$offerPosition.trackingcode\\})/';\n\n        return preg_replace($regEx, $trackingCode, $link);\n    }\n\n    /**\n     * Delete old expired password-hashes after two hours\n     */\n    private function deleteExpiredOptInItems(): void\n    {\n        $connection = $this->get(Connection::class);\n\n        $connection->executeStatement(\n            \"DELETE FROM s_core_optin WHERE datum <= (NOW() - INTERVAL 2 HOUR) AND type = 'swPassword'\"\n        );\n    }\n\n    /**\n     * @throws RuntimeException\n     */\n    private function getCustomerByResetHash(string $hash): Customer\n    {\n        $resetPasswordNamespace = $this->container->get('snippets')->getNamespace('frontend/account/reset_password');\n\n        $this->deleteExpiredOptInItems();\n\n        $confirmModel = $this->get(ModelManager::class)\n            ->getRepository(CommentConfirm::class)\n            ->findOneBy(['hash' => $hash, 'type' => 'swPassword']);\n\n        if (!$confirmModel) {\n            throw new RuntimeException($resetPasswordNamespace->get('PasswordResetNewLinkError', 'Confirmation link not found. Please check the spelling. Note that the confirmation link is only valid for 2 hours. After that you have to require a new confirmation link.'));\n        }\n\n        $customer = $this->get(ModelManager::class)->find(Customer::class, $confirmModel->getData());\n        if (!$customer) {\n            throw new RuntimeException($resetPasswordNamespace->get('PasswordResetNewMissingId', 'Your account could not be found. Please contact us to fix this problem.'));\n        }\n\n        return $customer;\n    }\n\n    private function shouldForwardToRegister(): bool\n    {\n        return !\\in_array($this->Request()->getActionName(), ['login', 'logout', 'password', 'resetPassword'])\n            && !$this->admin->sCheckUser();\n    }\n\n    /**\n     * @return array{sTarget: string, sTargetAction: string}\n     */\n    private function getForwardParameters(): array\n    {\n        if (!$this->Request()->getParam('sTarget') && !$this->Request()->getParam('sTargetAction')) {\n            return [\n                'sTarget' => $this->Request()->getControllerName(),\n                'sTargetAction' => $this->Request()->getActionName(),\n            ];\n        }\n\n        return [\n            'sTarget' => $this->Request()->getParam('sTarget'),\n            'sTargetAction' => $this->Request()->getParam('sTargetAction'),\n        ];\n    }\n\n    private function isOneTimeAccount(): bool\n    {\n        return $this->container->get('session')->offsetGet('sOneTimeAccount')\n            || (int) $this->View()->getAssign('sUserData')['additional']['user']['accountmode'] === Customer::ACCOUNT_MODE_FAST_LOGIN;\n    }\n}\n", "<?php\n\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse Doctrine\\DBAL\\Connection;\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Shopware\\Bundle\\AccountBundle\\Service\\OptInLoginService;\nuse Shopware\\Bundle\\AccountBundle\\Service\\OptInLoginServiceInterface;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\CrudServiceInterface;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\DataLoader;\nuse Shopware\\Bundle\\AttributeBundle\\Service\\DataLoaderInterface;\nuse Shopware\\Bundle\\CartBundle\\CartKey;\nuse Shopware\\Bundle\\StoreFrontBundle\\Gateway\\PaymentGatewayInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ContextServiceInterface;\nuse Shopware\\Bundle\\StoreFrontBundle\\Service\\ListProductServiceInterface;\nuse Shopware\\Components\\Captcha\\CaptchaValidator;\nuse Shopware\\Components\\Cart\\CartOrderNumberProviderInterface;\nuse Shopware\\Components\\Cart\\CartPersistServiceInterface;\nuse Shopware\\Components\\Cart\\ConditionalLineItemServiceInterface;\nuse Shopware\\Components\\Compatibility\\LegacyStructConverter;\nuse Shopware\\Components\\HolidayTableUpdater;\nuse Shopware\\Components\\Model\\ModelManager;\nuse Shopware\\Components\\Password\\Manager;\nuse Shopware\\Components\\Random;\nuse Shopware\\Components\\Routing\\RouterInterface;\nuse Shopware\\Components\\Validator\\EmailValidator;\nuse Shopware\\Components\\Validator\\EmailValidatorInterface;\nuse Shopware\\Models\\Customer\\Address;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Models\\Mail\\Mail;\nuse ShopwarePlugin\\PaymentMethods\\Components\\BasePaymentMethod;\n\n/**\n * Shopware Class that handles several\n * functions around customer / order related things\n */\nclass sAdmin implements \\Enlight_Hook\n{\n    /**\n     * Check if current active shop has own registration\n     *\n     * @var bool s_core_shops.customer_scope\n     */\n    public $scopedRegistration;\n\n    /**\n     * Id of current active shop\n     *\n     * @var int s_core_shops.id\n     */\n    public $subshopId;\n\n    /**\n     * Pointer to sSystem object\n     * Used for legacy purposes\n     *\n     * @var sSystem\n     *\n     * @deprecated\n     */\n    public $sSYSTEM;\n\n    /**\n     * Database connection which used for each database operation in this class.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Components_Db_Adapter_Pdo_Mysql\n     */\n    private $db;\n\n    /**\n     * Event manager which is used for the event system of shopware.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Event_EventManager\n     */\n    private $eventManager;\n\n    /**\n     * Shopware configuration object which used for\n     * each config access in this class.\n     * Injected over the class constructor\n     *\n     * @var Shopware_Components_Config\n     */\n    private $config;\n\n    /**\n     * Shopware session object.\n     * Injected over the class constructor\n     *\n     * @var Enlight_Components_Session_Namespace\n     */\n    private $session;\n\n    /**\n     * Request wrapper object\n     *\n     * @var Enlight_Controller_Front\n     */\n    private $front;\n\n    /**\n     * Shopware password encoder.\n     * Injected over the class constructor\n     *\n     * @var Manager\n     */\n    private $passwordEncoder;\n\n    /**\n     * The snippet manager\n     *\n     * @var Shopware_Components_Snippet_Manager\n     */\n    private $snippetManager;\n\n    /**\n     * @var ContextServiceInterface\n     */\n    private $contextService;\n\n    /**\n     * Module manager for core class instances\n     *\n     * @var Shopware_Components_Modules\n     */\n    private $moduleManager;\n\n    /**\n     * Email address validator\n     *\n     * @var EmailValidatorInterface\n     */\n    private $emailValidator;\n\n    /**\n     * @var DataLoaderInterface\n     */\n    private $attributeLoader;\n\n    /**\n     * @var Shopware_Components_Translation\n     */\n    private $translationComponent;\n\n    /**\n     * @var Connection\n     */\n    private $connection;\n\n    /**\n     * @var OptInLoginServiceInterface\n     */\n    private $optInLoginService;\n\n    /**\n     * @var ConditionalLineItemServiceInterface\n     */\n    private $conditionalLineItemService;\n\n    /**\n     * @var CartOrderNumberProviderInterface\n     */\n    private $cartOrderNumberProvider;\n\n    /**\n     * @var array\n     */\n    private $cache = [\n        'country' => [],\n        'payment' => [],\n    ];\n\n    public function __construct(\n        Enlight_Components_Db_Adapter_Pdo_Mysql $db = null,\n        Enlight_Event_EventManager $eventManager = null,\n        Shopware_Components_Config $config = null,\n        Enlight_Components_Session_Namespace $session = null,\n        Enlight_Controller_Front $front = null,\n        Manager $passwordEncoder = null,\n        Shopware_Components_Snippet_Manager $snippetManager = null,\n        Shopware_Components_Modules $moduleManager = null,\n        sSystem $systemModule = null,\n        ContextServiceInterface $contextService = null,\n        EmailValidatorInterface $emailValidator = null,\n        Shopware_Components_Translation $translationComponent = null,\n        Connection $connection = null,\n        OptInLoginServiceInterface $optInLoginService = null\n    ) {\n        $this->db = $db ?: Shopware()->Db();\n        $this->eventManager = $eventManager ?: Shopware()->Events();\n        $this->config = $config ?: Shopware()->Config();\n        $this->session = $session ?: Shopware()->Session();\n        $this->front = $front ?: Shopware()->Front();\n        $this->passwordEncoder = $passwordEncoder ?: Shopware()->PasswordEncoder();\n        $this->snippetManager = $snippetManager ?: Shopware()->Snippets();\n        $this->moduleManager = $moduleManager ?: Shopware()->Modules();\n        $this->sSYSTEM = $systemModule ?: Shopware()->System();\n\n        $mainShop = Shopware()->Shop()->getMain() !== null ? Shopware()->Shop()->getMain() : Shopware()->Shop();\n        $this->scopedRegistration = $mainShop->getCustomerScope();\n\n        $this->contextService = $contextService ?: Shopware()->Container()->get(ContextServiceInterface::class);\n        $this->emailValidator = $emailValidator ?: Shopware()->Container()->get(EmailValidator::class);\n        $this->subshopId = $this->contextService->getShopContext()->getShop()->getParentId();\n        $this->attributeLoader = Shopware()->Container()->get(DataLoader::class);\n        $this->translationComponent = $translationComponent ?: Shopware()->Container()->get(\\Shopware_Components_Translation::class);\n        $this->connection = $connection ?: Shopware()->Container()->get(Connection::class);\n        $this->optInLoginService = $optInLoginService ?: Shopware()->Container()->get(OptInLoginService::class);\n        $this->conditionalLineItemService = Shopware()->Container()->get(ConditionalLineItemServiceInterface::class);\n        $this->cartOrderNumberProvider = Shopware()->Container()->get(CartOrderNumberProviderInterface::class);\n    }\n\n    /**\n     * Get data from a certain payment mean\n     * If user data is provided, the current user payment\n     * mean is validated against current country, risk management, etc\n     * and reset to default if necessary.\n     *\n     * Used in several places to get the payment mean data\n     *\n     * @param int        $id   Payment mean id\n     * @param array|bool $user Array with user data (sGetUserData)\n     *\n     * @return array Payment data\n     */\n    public function sGetPaymentMeanById($id, $user = false)\n    {\n        $id = (int) $id;\n        $resetPayment = false;\n\n        $data = $this->db->fetchRow(\n            'SELECT * FROM s_core_paymentmeans WHERE id = ?',\n            [$id]\n        ) ?: [];\n\n        $sEsd = $this->moduleManager->Basket()->sCheckForESD();\n        $isMobile = $this->front->Request()->getDeviceType() === 'mobile';\n\n        if (!\\is_array($user)) {\n            $user = [];\n        }\n\n        // Check for risk management\n        // If rules match, reset to default payment mean if this payment mean was not\n        // set by shop owner\n\n        // Hide payment means which are not active\n        if (!$data['active'] && $data['id'] != $user['additional']['user']['paymentpreset']) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // If esd - order, hide payment means which\n        // are not available for esd\n        if (!$data['esdactive'] && $sEsd) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // Handle blocking for smartphones\n        if (!empty($data['mobile_inactive']) && $isMobile) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        // Check additional rules\n        if (\n            $this->sManageRisks($data['id'], null, $user)\n            && $data['id'] != $user['additional']['user']['paymentpreset']\n        ) {\n            $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n        }\n\n        if (!empty($user['additional']['countryShipping']['id'])) {\n            $sql = '\n                SELECT 1\n                FROM s_core_paymentmeans p\n\n                LEFT JOIN s_core_paymentmeans_subshops ps\n                ON ps.subshopID = ?\n                AND ps.paymentID = p.id\n\n                LEFT JOIN s_core_paymentmeans_countries pc\n                ON pc.countryID = ?\n                AND pc.paymentID=p.id\n\n                WHERE (ps.paymentID IS NOT NULL OR (\n                  SELECT paymentID FROM s_core_paymentmeans_subshops WHERE paymentID=p.id LIMIT 1\n                ) IS NULL)\n                AND (pc.paymentID IS NOT NULL OR (\n                  SELECT paymentID FROM s_core_paymentmeans_countries WHERE paymentID=p.id LIMIT 1\n                ) IS NULL)\n\n                AND id = ?\n            ';\n\n            $active = $this->db->fetchOne(\n                $sql,\n                [\n                    $this->contextService->getShopContext()->getShop()->getId(),\n                    $user['additional']['countryShipping']['id'],\n                    $id,\n                ]\n            );\n            if (empty($active)) {\n                $resetPayment = $this->config->get('sPAYMENTDEFAULT');\n            }\n        }\n\n        if ($resetPayment && $user['additional']['user']['id']) {\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Payment_Fallback',\n                $data\n            );\n\n            $this->db->update(\n                's_user',\n                ['paymentID' => $resetPayment],\n                ['id = ?' => $user['additional']['user']['id']]\n            );\n            $data = ['id' => $resetPayment];\n        }\n\n        if (isset($data['id'])) {\n            $data = Shopware()->Container()->get(PaymentGatewayInterface::class)\n                ->getList([$data['id']], $this->contextService->getShopContext());\n\n            if (!empty($data)) {\n                $data = Shopware()->Container()->get(LegacyStructConverter::class)\n                    ->convertPaymentStruct(current($data));\n            }\n        }\n\n        $data = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetPaymentMeanById_DataFilter',\n            $data,\n            ['subject' => $this, 'id' => $id, 'user' => $user]\n        );\n\n        return $data;\n    }\n\n    /**\n     * Get all available payments\n     *\n     * @return array Payments data\n     */\n    public function sGetPaymentMeans()\n    {\n        $isMobile = $this->front->Request()->getDeviceType() === 'mobile';\n\n        $user = $this->sGetUserData();\n\n        $sEsd = $this->moduleManager->Basket()->sCheckForESD();\n\n        $countryID = (int) $user['additional']['countryShipping']['id'];\n        $subShopID = (int) $this->contextService->getShopContext()->getShop()->getId();\n        if (empty($countryID)) {\n            $countryID = $this->db->fetchOne(\n                'SELECT id FROM s_core_countries ORDER BY position ASC LIMIT 1'\n            );\n        }\n        $sql = '\n            SELECT p.id, p.active, p.esdactive, p.mobile_inactive\n            FROM s_core_paymentmeans p\n\n            LEFT JOIN s_core_paymentmeans_subshops ps\n            ON ps.subshopID = ?\n            AND ps.paymentID = p.id\n\n            LEFT JOIN s_core_paymentmeans_countries pc\n            ON pc.countryID = ?\n            AND pc.paymentID = p.id\n\n            WHERE\n              (\n                ps.paymentID IS NOT NULL\n                OR (\n                  SELECT paymentID\n                  FROM s_core_paymentmeans_subshops\n                  WHERE paymentID = p.id LIMIT 1\n                ) IS NULL\n              )\n            AND\n              (\n                pc.paymentID IS NOT NULL\n                OR (\n                  SELECT paymentID\n                  FROM s_core_paymentmeans_countries\n                  WHERE paymentID = p.id LIMIT 1\n                ) IS NULL\n              )\n\n            ORDER BY position, name\n        ';\n\n        $paymentMeans = $this->db->fetchAll(\n            $sql,\n            [\n                $subShopID,\n                $countryID,\n            ]\n        );\n\n        if ($paymentMeans === false) {\n            $paymentMeans = $this->db->fetchAll(\n                'SELECT id, active, esdactive, mobile_inactive FROM s_core_paymentmeans ORDER BY position, name'\n            );\n        }\n\n        foreach ($paymentMeans as $payKey => $payValue) {\n            // Hide payment means which are not active\n            if (empty($payValue['active']) && $payValue['id'] != $user['additional']['user']['paymentpreset']) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // If this is an esd order, hide payment means which are not accessible for esd\n            if (empty($payValue['esdactive']) && $sEsd) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // Handle blocking for smartphones\n            if (!empty($payValue['mobile_inactive']) && $isMobile) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n\n            // Check additional rules\n            if (\n                $this->sManageRisks($payValue['id'], null, $user)\n                && $payValue['id'] != $user['additional']['user']['paymentpreset']\n            ) {\n                unset($paymentMeans[$payKey]);\n                continue;\n            }\n        }\n\n        // If no payment is left use always the fallback payment no matter if it has any restrictions too\n        if (!\\count($paymentMeans)) {\n            $paymentMeans[] = ['id' => $this->config->offsetGet('paymentdefault')];\n        }\n\n        $paymentMeans = Shopware()->Container()->get(PaymentGatewayInterface::class)\n            ->getList(array_column($paymentMeans, 'id'), $this->contextService->getShopContext());\n\n        $paymentMeans = array_map(static function ($payment) {\n            return Shopware()->Container()->get(LegacyStructConverter::class)->convertPaymentStruct($payment);\n        }, $paymentMeans);\n\n        $paymentMeans = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetPaymentMeans_DataFilter',\n            $paymentMeans,\n            ['subject' => $this]\n        );\n\n        return $paymentMeans;\n    }\n\n    /**\n     * Loads the system class of the specified payment mean\n     *\n     * @param array $paymentData Array with payment data\n     *\n     * @throws Enlight_Exception If no payment classes were loaded\n     *\n     * @return BasePaymentMethod The payment mean handling class instance\n     */\n    public function sInitiatePaymentClass($paymentData)\n    {\n        $dirs = [];\n\n        if (substr($paymentData['class'], -\\strlen('.php')) === '.php') {\n            $index = substr($paymentData['class'], 0, (int) strpos($paymentData['class'], '.php'));\n        } else {\n            $index = $paymentData['class'];\n        }\n\n        $dirs = $this->eventManager->filter(\n            'Shopware_Modules_Admin_InitiatePaymentClass_AddClass',\n            $dirs,\n            ['subject' => $this]\n        );\n\n        $class = \\array_key_exists($index, $dirs) ? $dirs[$index] : $dirs['default'];\n        if (!$class) {\n            throw new Enlight_Exception('sValidateStep3 #02: Payment classes dir not loaded');\n        }\n\n        $sPaymentObject = new $class();\n\n        if (!$sPaymentObject instanceof BasePaymentMethod) {\n            throw new Enlight_Exception('sValidateStep3 #02: Payment class not found');\n        }\n\n        return $sPaymentObject;\n    }\n\n    /**\n     * Last step of the registration - validate all user fields that exists in session and\n     * stores the data into database\n     *\n     * @throws Enlight_Exception If no payment mean is set in POST\n     *\n     * @return array Payment data\n     */\n    public function sValidateStep3()\n    {\n        $paymentId = $this->front->Request()->getPost('sPayment');\n        if (empty($paymentId)) {\n            throw new Enlight_Exception('sValidateStep3 #00: No payment id');\n        }\n\n        $user = $this->sGetUserData();\n        $paymentData = $this->sGetPaymentMeanById($paymentId, $user);\n        $checkPayment = null;\n        $sPaymentObject = null;\n\n        if (!\\count($paymentData)) {\n            throw new Enlight_Exception('sValidateStep3 #01: Could not load paymentmean');\n        }\n        // Include management class and check input data\n        if (!empty($paymentData['class'])) {\n            $sPaymentObject = $this->sInitiatePaymentClass($paymentData);\n            $requestData = $this->front->Request()->getParams();\n            $checkPayment = $sPaymentObject->validate($requestData);\n        }\n\n        return [\n            'checkPayment' => $checkPayment,\n            'paymentData' => $paymentData,\n            'sProcessed' => true,\n            'sPaymentObject' => &$sPaymentObject,\n        ];\n    }\n\n    /**\n     * Add or remove an email address from the mailing list\n     *\n     * @param bool   $status   True if insert, false if remove\n     * @param string $email    Email address\n     * @param bool   $customer If email address belongs to a customer\n     *\n     * @return bool If operation was successful\n     */\n    public function sUpdateNewsletter($status, $email, $customer = false)\n    {\n        if (!$status) {\n            // Delete email address from database\n            $this->db->delete(\n                's_campaigns_mailaddresses',\n                ['email = ?' => $email]\n            );\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Newsletter_Unsubscribe',\n                ['email' => $email]\n            );\n        } else {\n            // Check if mail address is already subscribed, return\n            if ($this->db->fetchOne('SELECT id FROM s_campaigns_mailaddresses WHERE email = ?', [$email])) {\n                return false;\n            }\n\n            $optInNewsletter = $this->config->get('optinnewsletter');\n            if ($optInNewsletter) {\n                $hash = Random::getAlphanumericString(32);\n                $data = serialize(['newsletter' => $email, 'subscribeToNewsletter' => true]);\n\n                $link = $this->front->Router()->assemble([\n                    'sViewport' => 'newsletter',\n                    'action' => 'index',\n                    'sConfirmation' => $hash,\n                    'module' => 'frontend',\n                ]);\n\n                $this->sendMail($email, 'sOPTINNEWSLETTER', $link);\n\n                $this->db->insert(\n                    's_core_optin',\n                    [\n                        'datum' => new Zend_Date(),\n                        'hash' => $hash,\n                        'data' => $data,\n                        'type' => 'swNewsletter',\n                    ]\n                );\n\n                return true;\n            }\n\n            $groupID = $this->config->get('sNEWSLETTERDEFAULTGROUP');\n            if (!$groupID) {\n                $groupID = '0';\n            }\n\n            // Insert email into database\n            if (!empty($customer)) {\n                $this->db->insert(\n                    's_campaigns_mailaddresses',\n                    ['customer' => 1, 'email' => $email, 'added' => $this->getCurrentDateFormatted()]\n                );\n            } else {\n                $this->db->insert(\n                    's_campaigns_mailaddresses',\n                    ['groupID' => $groupID, 'email' => $email, 'added' => $this->getCurrentDateFormatted()]\n                );\n            }\n\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_sUpdateNewsletter_Subscribe',\n                ['email' => $email]\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Updates the payment mean of the user\n     * Used in the Frontend Account controller\n     *\n     * @param int|null $paymentId\n     *\n     * @throws Enlight_Exception On database error\n     *\n     * @return bool If operation was successful\n     */\n    public function sUpdatePayment($paymentId = null)\n    {\n        $userId = $this->session->offsetGet('sUserId');\n        if (empty($userId)) {\n            return false;\n        }\n        $sqlPayment = 'UPDATE s_user SET paymentID = ? WHERE id = ?';\n\n        $sqlPayment = $this->eventManager->filter(\n            'Shopware_Modules_Admin_UpdatePayment_FilterSql',\n            $sqlPayment,\n            [\n                'subject' => $this,\n                'id' => $userId,\n            ]\n        );\n\n        $this->db->query(\n            $sqlPayment,\n            [\n                $paymentId ?: $this->front->Request()->getPost('sPayment'),\n                $userId,\n            ]\n        );\n\n        if ($this->db->getErrorMessage()) {\n            throw new Enlight_Exception('sUpdatePayment #01: Could not save data (payment)' . $this->db->getErrorMessage());\n        }\n\n        return true;\n    }\n\n    public function logout()\n    {\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get(CartPersistServiceInterface::class)->prepare();\n        }\n\n        if ($this->config->get('clearBasketAfterLogout')) {\n            $this->moduleManager->Basket()->sDeleteBasket();\n        }\n\n        $this->session->clear();\n        $this->regenerateSessionId(true);\n\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get(CartPersistServiceInterface::class)->persist();\n        }\n\n        $shop = Shopware()->Shop();\n\n        $this->sSYSTEM->sUSERGROUP = $shop->getCustomerGroup()->getKey();\n        $this->sSYSTEM->sUSERGROUPDATA = $shop->getCustomerGroup()->toArray();\n        $this->sSYSTEM->sCurrency = $shop->getCurrency()->toArray();\n\n        $this->contextService->initializeContext();\n\n        if (!$this->config->get('clearBasketAfterLogout')) {\n            $this->moduleManager->Basket()->sRefreshBasket();\n\n            $countries = $this->sGetCountryList();\n            $country = reset($countries);\n\n            $this->moduleManager->Admin()->sGetPremiumShippingcosts($country);\n\n            $amount = $this->moduleManager->Basket()->sGetAmount();\n            $this->session->offsetSet('sBasketAmount', empty($amount) ? 0 : array_shift($amount));\n        }\n\n        $this->eventManager->notify('Shopware_Modules_Admin_Logout_Successful');\n    }\n\n    /**\n     * Attempt to login a user in the frontend\n     * Used for login and registration in frontend, also for user impersonation\n     * from backend\n     *\n     * @param bool $ignoreAccountMode Allows customers who have chosen\n     *                                the fast registration, one-time login after registration\n     *\n     * @throws Exception If no password encoder is specified\n     *\n     * @return array|false Array with errors that may have occurred, or false if\n     *                     the process is interrupted by an event\n     */\n    public function sLogin($ignoreAccountMode = false)\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_Login_Start',\n            [\n                'subject' => $this,\n                'ignoreAccountMode' => $ignoreAccountMode,\n                'post' => $this->front->Request()->getPost(),\n            ]\n        )\n        ) {\n            return false;\n        }\n\n        $sErrorFlag = null;\n        $sErrorMessages = null;\n\n        // If fields are not set, markup these fields\n        $email = strtolower($this->front->Request()->getPost('email'));\n        if (empty($email)) {\n            $sErrorFlag['email'] = true;\n        }\n\n        // If password is already md5 decrypted or the parameter $ignoreAccountMode is set, use it directly\n        if ($ignoreAccountMode && $this->front->Request()->getPost('passwordMD5')) {\n            $password = $this->front->Request()->getPost('passwordMD5');\n            $isPreHashed = true;\n        } else {\n            $password = $this->front->Request()->getPost('password');\n            $isPreHashed = false;\n        }\n\n        if (empty($password)) {\n            $sErrorFlag['password'] = true;\n        }\n\n        if (!empty($sErrorFlag)) {\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get('LoginFailure', 'Wrong email or password');\n            $this->session->offsetUnset('sUserMail');\n            $this->session->offsetUnset('sUserPasswordChangeDate');\n            $this->session->offsetUnset('sUserId');\n        }\n\n        if ($sErrorMessages) {\n            [$sErrorMessages, $sErrorFlag] = $this->eventManager->filter(\n                'Shopware_Modules_Admin_Login_FilterResult',\n                [$sErrorMessages, $sErrorFlag],\n                ['subject' => $this, 'email' => null, 'password' => null, 'error' => $sErrorMessages]\n            );\n\n            return ['sErrorFlag' => $sErrorFlag, 'sErrorMessages' => $sErrorMessages];\n        }\n\n        $addScopeSql = '';\n        if ($this->scopedRegistration == true) {\n            $addScopeSql = $this->db->quoteInto(' AND subshopID = ? ', $this->subshopId);\n        }\n\n        // When working with a pre-hashed password, we need to limit the getUser query by password,\n        // as there might be multiple users with the same mail address (accountmode = 1).\n        $preHashedSql = '';\n        if ($isPreHashed) {\n            $preHashedSql = $this->db->quoteInto(' AND password = ? ', $password);\n        }\n\n        if ($ignoreAccountMode) {\n            $sql = '\n                SELECT id, customergroup, password, encoder, password_change_date\n                FROM s_user WHERE email = ? AND active=1\n                AND (lockeduntil < now() OR lockeduntil IS NULL) '\n                . $addScopeSql\n                . $preHashedSql;\n        } else {\n            $sql = '\n                SELECT id, customergroup, password, encoder, password_change_date\n                FROM s_user\n                WHERE email = ? AND active=1 AND accountmode != 1\n                AND (lockeduntil < now() OR lockeduntil IS NULL) '\n                . $addScopeSql;\n        }\n\n        $getUser = $this->db->fetchRow($sql, [$email]) ?: [];\n        $hash = null;\n        $plaintext = null;\n        $encoderName = null;\n\n        if (!\\count($getUser)) {\n            $isValidLogin = false;\n        } else {\n            if ($isPreHashed) {\n                $encoderName = 'Prehashed';\n            } else {\n                $encoderName = $getUser['encoder'];\n                $encoderName = strtolower($encoderName);\n            }\n\n            if (empty($encoderName)) {\n                throw new Exception('No encoder name given.');\n            }\n\n            $hash = $getUser['password'];\n            $plaintext = $password;\n            $password = $hash;\n\n            $isValidLogin = $this->passwordEncoder->isPasswordValid($plaintext, $hash, $encoderName);\n        }\n\n        if ($isValidLogin) {\n            $this->loginUser($getUser, $email, $password, $isPreHashed, $encoderName, $plaintext, $hash);\n        } else {\n            $sErrorMessages = $this->failedLoginUser($addScopeSql, $email, $sErrorMessages, $password);\n        }\n\n        [$sErrorMessages, $sErrorFlag] = $this->eventManager->filter(\n            'Shopware_Modules_Admin_Login_FilterResult',\n            [$sErrorMessages, $sErrorFlag],\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'error' => $sErrorMessages]\n        );\n\n        return ['sErrorFlag' => $sErrorFlag, 'sErrorMessages' => $sErrorMessages];\n    }\n\n    /**\n     * Checks if user is correctly logged in. Also checks session timeout\n     *\n     * @return bool If user is authorized\n     */\n    public function sCheckUser()\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_CheckUser_Start',\n            ['subject' => $this]\n        )\n        ) {\n            return false;\n        }\n\n        $userId = $this->session->offsetGet('sUserId');\n        $userMail = $this->session->offsetGet('sUserMail');\n        $passwordChangeDate = $this->session->offsetGet('sUserPasswordChangeDate');\n\n        if (empty($userMail)\n            || empty($passwordChangeDate)\n            || empty($userId)\n        ) {\n            $this->session->offsetUnset('sUserMail');\n            $this->session->offsetUnset('sUserPasswordChangeDate');\n            $this->session->offsetUnset('sUserId');\n\n            return false;\n        }\n\n        $sql = '\n            SELECT * FROM s_user\n            WHERE password_change_date = ? AND email = ? AND id = ?\n            AND UNIX_TIMESTAMP(lastlogin) >= (UNIX_TIMESTAMP(NOW())-?)\n        ';\n\n        $getUser = $this->db->fetchRow(\n            $sql,\n            [\n                $passwordChangeDate,\n                $userMail,\n                $userId,\n                (int) ini_get('session.gc_maxlifetime'),\n            ]\n        );\n        $getUser = $getUser ?: [];\n\n        $getUser = $this->eventManager->filter(\n            'Shopware_Modules_Admin_CheckUser_FilterGetUser',\n            $getUser,\n            ['subject' => $this, 'sql' => $sql, 'session' => $this->session]\n        );\n\n        if (!empty($getUser['id'])) {\n            $this->sSYSTEM->sUSERGROUPDATA = $this->db->fetchRow(\n                'SELECT * FROM s_core_customergroups WHERE groupkey = ?',\n                [$getUser['customergroup']]\n            );\n            $this->sSYSTEM->sUSERGROUPDATA = $this->sSYSTEM->sUSERGROUPDATA ?: [];\n\n            $this->sSYSTEM->sUSERGROUP = $getUser['customergroup'];\n\n            $this->session->offsetSet('sUserGroup', $this->sSYSTEM->sUSERGROUP);\n            $this->session->offsetSet('sUserGroupData', $this->sSYSTEM->sUSERGROUPDATA);\n\n            $this->db->query(\n                'UPDATE s_user SET lastlogin = NOW(), sessionID = ? WHERE id = ?',\n                [$this->session->offsetGet('sessionId'), $getUser['id']]\n            );\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_CheckUser_Successful',\n                ['subject' => $this, 'session' => $this->session, 'user' => $getUser]\n            );\n\n            return true;\n        }\n        $this->session->offsetUnset('sUserMail');\n        $this->session->offsetUnset('sUserPasswordChangeDate');\n        $this->session->offsetUnset('sUserId');\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_CheckUser_Failure',\n            ['subject' => $this, 'session' => $this->session, 'user' => $getUser]\n        );\n\n        return false;\n    }\n\n    /**\n     * Loads translations for countries. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided country's translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $country Optional array containing country data for translation\n     *\n     * @return array<array-key, mixed> Translated country/ies data\n     */\n    public function sGetCountryTranslation($country = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_countries');\n\n        if (!$country) {\n            return $translationData;\n        }\n\n        if (!isset($translationData[$country['id']])) {\n            return $country;\n        }\n\n        // Pass (possible) translation to country\n        if ($translationData[$country['id']]['countryname']) {\n            $country['countryname'] = $translationData[$country['id']]['countryname'];\n        }\n        if ($translationData[$country['id']]['notice']) {\n            $country['notice'] = $translationData[$country['id']]['notice'];\n        }\n\n        if ($translationData[$country['id']]['active']) {\n            $country['active'] = $translationData[$country['id']]['active'];\n        }\n\n        return $country;\n    }\n\n    /**\n     * Loads the translation for shipping methods. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided shipping methods translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $dispatch Optional array containing shipping method data for translation\n     *\n     * @return array<array-key, mixed> Translated shipping method(s) data\n     */\n    public function sGetDispatchTranslation($dispatch = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_dispatch');\n\n        if (!$dispatch) {\n            return $translationData;\n        }\n\n        // Pass (possible) translation to country\n        if ($translationData[$dispatch['id']]['dispatch_name']) {\n            $dispatch['name'] = $translationData[$dispatch['id']]['dispatch_name'];\n        }\n        if ($translationData[$dispatch['id']]['dispatch_description']) {\n            $dispatch['description'] = $translationData[$dispatch['id']]['dispatch_description'];\n        }\n        if ($translationData[$dispatch['id']]['dispatch_status_link']) {\n            $dispatch['status_link'] = $translationData[$dispatch['id']]['dispatch_status_link'];\n        }\n\n        return $dispatch;\n    }\n\n    /**\n     * Loads the translation for payment means. If no argument is provided,\n     * all translations for current locale are returned, otherwise\n     * returns the provided payment means translation\n     * Used internally in sAdmin\n     *\n     * @param array<string, mixed> $payment Optional array containing payment mean data for translation\n     *\n     * @return array<array-key, mixed> Translated payment mean(s) data\n     */\n    public function sGetPaymentTranslation($payment = [])\n    {\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_payment');\n\n        if (!$payment) {\n            return $translationData;\n        }\n\n        // Pass (possible) translation to payment\n        if (!empty($translationData[$payment['id']]['description'])) {\n            $payment['description'] = $translationData[$payment['id']]['description'];\n        }\n        if (!empty($translationData[$payment['id']]['additionalDescription'])) {\n            $payment['additionaldescription'] = $translationData[$payment['id']]['additionalDescription'];\n        }\n\n        return $payment;\n    }\n\n    /**\n     * Get translations for country states in the current shop language\n     * Also includes fallback translations\n     * Used internally in sAdmin\n     *\n     * @param array|null $state\n     *\n     * @return array States translations\n     */\n    public function sGetCountryStateTranslation($state = null)\n    {\n        if (Shopware()->Shop()->get('skipbackend')) {\n            return empty($state) ? [] : $state;\n        }\n\n        $languageId = $this->contextService->getShopContext()->getShop()->getId();\n        $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n\n        $translationData = $this->translationComponent\n            ->readBatchWithFallback($languageId, $fallbackId, 'config_country_states');\n\n        if (empty($state)) {\n            return $translationData;\n        }\n\n        if ($translationData[$state['id']]) {\n            $state['statename'] = $translationData[$state['id']]['name'];\n        }\n\n        return $state;\n    }\n\n    /**\n     * Get list of currently active countries. Includes states and translations\n     *\n     * @return array Country list\n     */\n    public function sGetCountryList()\n    {\n        $context = Shopware()->Container()->get('shopware_storefront.context_service')->getShopContext();\n        $service = Shopware()->Container()->get('shopware_storefront.location_service');\n\n        $countryList = $service->getCountries($context);\n        $countryList = Shopware()->Container()->get('legacy_struct_converter')->convertCountryStructList($countryList);\n\n        $countryList = array_map(function ($country) {\n            $request = $this->front->Request();\n            $countryId = (int) $country['id'];\n            $country['flag'] = (int) $request->getPost('country') === $countryId || (int) $request->getPost('countryID') === $countryId;\n\n            return $country;\n        }, $countryList);\n\n        $countryList = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetCountries_FilterResult',\n            $countryList,\n            ['subject' => $this]\n        );\n\n        return $countryList;\n    }\n\n    /**\n     * Send email with registration confirmation\n     * Used internally in sAdmin during the registration process\n     *\n     * @param string $email Recipient email address\n     *\n     * @return false|null False if stopped, null otherwise\n     */\n    public function sSaveRegisterSendConfirmation($email)\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_SaveRegisterSendConfirmation_Start',\n            ['subject' => $this, 'email' => $email]\n        )\n        ) {\n            return false;\n        }\n\n        if (!$this->config->get('sendRegisterConfirmation')) {\n            return false;\n        }\n\n        /** @var \\Shopware\\Bundle\\StoreFrontBundle\\Struct\\Shop $shop */\n        $shop = $this->contextService->getShopContext()->getShop();\n        $shopUrl = 'http://' . $shop->getHost() . $shop->getUrl();\n\n        if ($shop->getSecure()) {\n            $shopUrl = 'https://' . $shop->getHost() . $shop->getUrl();\n        }\n\n        $context = [\n            'sMAIL' => $email,\n            'sShop' => $this->config->get('ShopName'),\n            'sShopURL' => $shopUrl,\n            'sConfig' => $this->config,\n        ];\n\n        $namespace = $this->snippetManager->getNamespace('frontend/salutation');\n        $register = $this->session->offsetGet('sRegister');\n\n        foreach ($register['billing'] as $key => $value) {\n            if ($key === 'salutation') {\n                $value = $namespace->get($value);\n            }\n\n            $context[$key] = $value;\n        }\n\n        if (\\array_key_exists('password', $context)) {\n            unset($context['password']);\n        }\n\n        if (\\array_key_exists('passwordConfirmation', $context)) {\n            unset($context['passwordConfirmation']);\n        }\n\n        $mail = Shopware()->TemplateMail()->createMail('sREGISTERCONFIRMATION', $context);\n        $mail->addTo($email);\n\n        $sendConfirmationEmail = $this->config->get('sSEND_CONFIRM_MAIL');\n        if (!empty($sendConfirmationEmail)) {\n            $mail->addBcc($this->config->get('sMAIL'));\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_SaveRegisterSendConfirmation_BeforeSend',\n            ['subject' => $this, 'mail' => $mail]\n        );\n\n        $mail->send();\n\n        return null;\n    }\n\n    /**\n     * Get purchased instant downloads for the current user\n     * Used in Account controller to display download available to the user\n     *\n     * @param int $destinationPage\n     * @param int $perPage\n     *\n     * @return array Data from orders who contains instant downloads\n     */\n    public function sGetDownloads($destinationPage = 1, $perPage = 10)\n    {\n        $userId = $this->session->offsetGet('sUserId');\n        /** @var array $getOrders */\n        $getOrders = $this->db->fetchAll(\n            \"SELECT\n                id, ordernumber, invoice_amount, invoice_amount_net,\n                invoice_shipping, invoice_shipping_net,\n                DATE_FORMAT(ordertime, '%d.%m.%Y %H:%i') AS datum,\n                status, cleared, comment\n            FROM s_order WHERE userID = ? AND s_order.status >= 0\n            ORDER BY ordertime DESC LIMIT 500\",\n            [$userId]\n        );\n\n        foreach ($getOrders as $orderKey => $orderValue) {\n            if (\n                ($this->config->get('sARTICLESOUTPUTNETTO') && !$this->sSYSTEM->sUSERGROUPDATA['tax'])\n                || (!$this->sSYSTEM->sUSERGROUPDATA['tax'] && $this->sSYSTEM->sUSERGROUPDATA['id'])\n            ) {\n                $getOrders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_amount_net']);\n                $getOrders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_shipping_net']);\n            } else {\n                $getOrders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_amount']);\n                $getOrders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                    ->sFormatPrice($orderValue['invoice_shipping']);\n            }\n\n            /** @var array $getOrderDetails */\n            $getOrderDetails = $this->db->fetchAll(\n                'SELECT * FROM s_order_details WHERE orderID = ?',\n                [$orderValue['id']]\n            );\n\n            if (!\\count($getOrderDetails)) {\n                unset($getOrders[$orderKey]);\n            } else {\n                $foundESD = false;\n                foreach ($getOrderDetails as $orderDetailsKey => $orderDetailsValue) {\n                    $getOrderDetails[$orderDetailsKey]['amount'] = $this->moduleManager->Articles()\n                        ->sFormatPrice(round($orderDetailsValue['price'] * $orderDetailsValue['quantity'], 2));\n                    $getOrderDetails[$orderDetailsKey]['price'] = $this->moduleManager->Articles()\n                        ->sFormatPrice($orderDetailsValue['price']);\n\n                    // Check for serial\n                    if ($getOrderDetails[$orderDetailsKey]['esdarticle']) {\n                        $foundESD = true;\n                        $numbers = [];\n                        $getSerial = $this->db->fetchAll(\n                            'SELECT serialnumber FROM s_articles_esd_serials, s_order_esd\n                            WHERE userID = ?\n                            AND orderID = ?\n                            AND orderdetailsID = ?\n                            AND s_order_esd.serialID = s_articles_esd_serials.id',\n                            [\n                                $userId,\n                                $orderValue['id'],\n                                $orderDetailsValue['id'],\n                            ]\n                        );\n                        foreach ($getSerial as $serial) {\n                            $numbers[] = $serial['serialnumber'];\n                        }\n                        $getOrderDetails[$orderDetailsKey]['serial'] = implode(', ', $numbers);\n                        // Building download link\n                        $getOrderDetails[$orderDetailsKey]['esdLink'] = $this->config->get('sBASEFILE')\n                            . '?sViewport=account&sAction=download&esdID='\n                            . $orderDetailsValue['id'];\n                    } else {\n                        unset($getOrderDetails[$orderDetailsKey]);\n                    }\n                }\n                if (!empty($foundESD)) {\n                    $getOrders[$orderKey]['details'] = $getOrderDetails;\n                } else {\n                    unset($getOrders[$orderKey]);\n                }\n            }\n        }\n\n        $getOrders = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetDownloads_FilterResult',\n            $getOrders,\n            ['subject' => $this, 'id' => $userId]\n        );\n\n        if ($perPage != 0) {\n            // Make Array with page-structure to render in template\n            $numberOfPages = ceil(\\count($getOrders) / $perPage);\n        } else {\n            $numberOfPages = 0;\n        }\n        $offset = ($destinationPage - 1) * $perPage;\n        $orderData['orderData'] = \\array_slice($getOrders, $offset, $perPage, true);\n        $orderData['numberOfPages'] = $numberOfPages;\n        $orderData['pages'] = $this->getPagerStructure($destinationPage, $numberOfPages);\n\n        return $orderData;\n    }\n\n    /**\n     * Get all orders for the current user\n     * Used in the user account in the Frontend\n     *\n     * @param int $destinationPage\n     * @param int $perPage\n     *\n     * @return array Array with order data / positions\n     */\n    public function sGetOpenOrderData($destinationPage = 1, $perPage = 10)\n    {\n        $shop = Shopware()->Shop();\n        $mainShop = $shop->getMain() !== null ? $shop->getMain() : $shop;\n\n        $destinationPage = !empty($destinationPage) ? $destinationPage : 1;\n        $limitStart = Shopware()->Db()->quote(($destinationPage - 1) * $perPage);\n        $limitEnd = Shopware()->Db()->quote($perPage);\n\n        $sql = \"\n            SELECT SQL_CALC_FOUND_ROWS o.*, cu.templatechar as currency_html, cu.symbol_position as currency_position, DATE_FORMAT(ordertime, '%d.%m.%Y %H:%i') AS datum, state.name as stateName\n            FROM s_order o\n            LEFT JOIN s_core_currencies as cu\n            ON o.currency = cu.currency\n            LEFT JOIN s_core_states as state ON state.id = o.status\n            WHERE userID = ? AND status != -1\n            AND subshopID = ?\n            ORDER BY ordertime DESC\n            LIMIT $limitStart, $limitEnd\n        \";\n        /** @var array $orders */\n        $orders = $this->db->fetchAll(\n            $sql,\n            [\n                $this->session->offsetGet('sUserId'),\n                $mainShop->getId(),\n            ]\n        );\n        $foundOrdersCount = (int) Shopware()->Db()->fetchOne('SELECT FOUND_ROWS()');\n\n        foreach ($orders as $orderKey => $orderValue) {\n            $orders[$orderKey]['invoice_amount'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_amount']);\n            $orders[$orderKey]['invoice_amount_net'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_amount_net']);\n            $orders[$orderKey]['invoice_shipping'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderValue['invoice_shipping']);\n\n            $orders = $this->processOpenOrderDetails($orderValue, $orders, $orderKey);\n            $orders[$orderKey]['dispatch'] = $this->sGetPremiumDispatch($orderValue['dispatchID']);\n        }\n\n        $orders = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetOpenOrderData_FilterResult',\n            $orders,\n            [\n                'subject' => $this,\n                'id' => $this->session->offsetGet('sUserId'),\n                'subshopID' => $this->contextService->getShopContext()->getShop()->getId(),\n            ]\n        );\n\n        $orderData = [];\n        $orderData['orderData'] = $orders;\n        $numberOfPages = 0;\n\n        if ($limitEnd != 0) {\n            // Make Array with page structure to render in template\n            $numberOfPages = ceil($foundOrdersCount / $limitEnd);\n        }\n\n        $orderData['numberOfPages'] = $numberOfPages;\n        $orderData['pages'] = $this->getPagerStructure($destinationPage, $numberOfPages);\n\n        return $orderData;\n    }\n\n    /**\n     * Calculates and returns the pager structure for the frontend\n     *\n     * @param int   $destinationPage\n     * @param int   $numberOfPages\n     * @param array $additionalParams\n     *\n     * @return array\n     */\n    public function getPagerStructure($destinationPage, $numberOfPages, $additionalParams = [])\n    {\n        $destinationPage = !empty($destinationPage) ? $destinationPage : 1;\n        $pagesStructure = [];\n        $baseFile = $this->config->get('sBASEFILE');\n        if ($numberOfPages > 1) {\n            for ($i = 1; $i <= $numberOfPages; ++$i) {\n                $pagesStructure['numbers'][$i]['markup'] = $i == $destinationPage;\n                $pagesStructure['numbers'][$i]['value'] = $i;\n                $pagesStructure['numbers'][$i]['link'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $i]);\n            }\n            // Previous page\n            if ($destinationPage != 1) {\n                $pagesStructure['previous'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $destinationPage - 1]);\n            } else {\n                $pagesStructure['previous'] = null;\n            }\n            // Next page\n            if ($destinationPage != $numberOfPages) {\n                $pagesStructure['next'] = $baseFile . $this->moduleManager->Core()\n                        ->sBuildLink($additionalParams + ['sPage' => $destinationPage + 1]);\n            } else {\n                $pagesStructure['next'] = null;\n            }\n        }\n\n        return $pagesStructure;\n    }\n\n    /**\n     * Get the current user's email address\n     *\n     * @return string|null Current user email address, or null if none found\n     */\n    public function sGetUserMailById()\n    {\n        return $this->db->fetchOne(\n            'SELECT email FROM s_user WHERE id = ?',\n            [$this->session->offsetGet('sUserId')]\n        ) ?: null;\n    }\n\n    /**\n     * Get user id by his email address\n     *\n     * @param string $email Email address of the user\n     *\n     * @return int|null The user id, or null if none found\n     */\n    public function sGetUserByMail($email)\n    {\n        $addScopeSql = '';\n        if ($this->scopedRegistration == true) {\n            $addScopeSql = $this->db->quoteInto('AND subshopID = ?', $this->subshopId);\n        }\n\n        $result = $this->db->fetchOne(\n            \"SELECT id FROM s_user WHERE email = ? AND accountmode != 1 $addScopeSql\",\n            [$email]\n        );\n\n        return $result ? (int) $result : null;\n    }\n\n    /**\n     * Get user first and last names by id\n     *\n     * @param int $id User id\n     *\n     * @return array first name/last name\n     */\n    public function sGetUserNameById($id)\n    {\n        return $this->db->fetchRow('SELECT firstname, lastname FROM s_user WHERE id = ?', [$id]) ?: [];\n    }\n\n    /**\n     * Get all data from the current logged in user\n     *\n     * @return array|false User data, of false if interrupted\n     */\n    public function sGetUserData()\n    {\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_GetUserData_Start',\n            ['subject' => $this]\n        )\n        ) {\n            return false;\n        }\n        $register = $this->session->offsetGet('sRegister');\n        if (empty($register)) {\n            $this->session->offsetSet('sRegister', []);\n        }\n\n        $userData = [];\n\n        $countryQuery =\n            'SELECT c.*, a.name AS countryarea\n          FROM s_core_countries c\n          LEFT JOIN s_core_countries_areas a\n           ON a.id = c.areaID AND a.active = 1\n          WHERE c.id = ?';\n\n        // If user is logged in\n        $userId = (int) $this->session->offsetGet('sUserId');\n        if ($userId !== 0) {\n            $userData = $this->getUserBillingData($userId, $userData);\n\n            $userData = $this->getUserCountryData($userData, $userId);\n\n            $newsletter = $this->db->fetchRow(\n                'SELECT id FROM s_campaigns_mailaddresses WHERE email = ?',\n                [$userData['additional']['user']['email']]\n            );\n\n            $userData['additional']['user']['newsletter'] = isset($newsletter['id']) ? 1 : 0;\n\n            $userData = $this->getUserShippingData($userId, $userData, $countryQuery);\n            $userData = $this->overwriteBillingAddress($userData);\n            $userData = $this->overwriteShippingAddress($userData);\n\n            $userData['additional']['payment'] = $this->sGetPaymentMeanById(\n                $userData['additional']['user']['paymentID'],\n                $userData\n            );\n        } else {\n            // No user logged in\n            $register = $this->session->offsetGet('sRegister');\n            if (\n                $this->session->offsetGet('sCountry')\n                && $this->session->offsetGet('sCountry') != $register['billing']['country']\n            ) {\n                $register['billing']['country'] = (int) $this->session->offsetGet('sCountry');\n                $this->session->offsetSet('sRegister', $register);\n            }\n\n            $userData['additional']['country'] = $this->db->fetchRow(\n                $countryQuery,\n                [(int) $register['billing']['country']]\n            );\n            $userData['additional']['country'] = $userData['additional']['country'] ?: [];\n            $userData['additional']['countryShipping'] = $userData['additional']['country'];\n            $state = $this->session->offsetGet('sState');\n            $userData['additional']['stateShipping']['id'] = !empty($state) ? $state : 0;\n        }\n\n        $userData = $this->eventManager->filter(\n            'Shopware_Modules_Admin_GetUserData_FilterResult',\n            $userData,\n            ['subject' => $this, 'id' => $this->session->offsetGet('sUserId')]\n        );\n\n        return $userData;\n    }\n\n    /**\n     * Shopware Risk Management\n     *\n     * @param int        $paymentID Payment mean id (s_core_paymentmeans.id)\n     * @param array|null $basket    Current shopping cart\n     * @param array      $user      User data\n     *\n     * @return bool If customer is a risk customer\n     */\n    public function sManageRisks($paymentID, $basket, $user)\n    {\n        // Get all assigned rules\n        $queryRules = $this->db->fetchAll('\n            SELECT rule1, value1, rule2, value2\n            FROM s_core_rulesets\n            WHERE paymentID = ?\n            ORDER BY id ASC\n        ', [$paymentID]);\n\n        if (empty($queryRules)) {\n            return false;\n        }\n\n        // Get Basket\n        if (empty($basket)) {\n            $basket = [\n                'content' => $this->session->offsetGet('sBasketQuantity'),\n                'AmountNumeric' => $this->session->offsetGet('sBasketAmount'),\n            ];\n        }\n\n        foreach ($queryRules as $rule) {\n            if ($rule['rule1'] && !$rule['rule2']) {\n                $rule['rule1'] = 'sRisk' . $rule['rule1'];\n                if ($this->executeRiskRule($rule['rule1'], $user, $basket, $rule['value1'], $paymentID)) {\n                    return true;\n                }\n            } elseif ($rule['rule1'] && $rule['rule2']) {\n                $rule['rule1'] = 'sRisk' . $rule['rule1'];\n                $rule['rule2'] = 'sRisk' . $rule['rule2'];\n                if (\n                    $this->executeRiskRule($rule['rule1'], $user, $basket, $rule['value1'], $paymentID)\n                    && $this->executeRiskRule($rule['rule2'], $user, $basket, $rule['value2'], $paymentID)\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Function to execute risk rules\n     *\n     * @param string $rule\n     * @param array  $user\n     * @param array  $basket\n     * @param string $value\n     * @param int    $paymentID\n     *\n     * @return bool\n     */\n    public function executeRiskRule($rule, $user, $basket, $value, $paymentID = null)\n    {\n        if (\n        $event = $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_Execute_Risk_Rule_' . $rule,\n            [\n                'rule' => $rule,\n                'user' => $user,\n                'basket' => $basket,\n                'value' => $value,\n                'paymentID' => $paymentID,\n            ]\n        )\n        ) {\n            return $event->getReturn();\n        }\n\n        return $this->$rule($user, $basket, $value);\n    }\n\n    /**\n     * Risk management - Order value greater then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERVALUEMORE($user, $order, $value)\n    {\n        $basketValue = $order[CartKey::AMOUNT_NUMERIC];\n\n        if ($this->sSYSTEM->sCurrency['factor']) {\n            $basketValue /= $this->sSYSTEM->sCurrency['factor'];\n        }\n\n        return $basketValue >= $value;\n    }\n\n    /**\n     * Risk management - Order value less then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERVALUELESS($user, $order, $value)\n    {\n        $basketValue = $order[CartKey::AMOUNT_NUMERIC];\n\n        if ($this->sSYSTEM->sCurrency['factor']) {\n            $basketValue /= $this->sSYSTEM->sCurrency['factor'];\n        }\n\n        return $basketValue <= $value;\n    }\n\n    /**\n     * Risk management Customer group matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERGROUPIS($user, $order, $value)\n    {\n        return $value == $user['additional']['user']['customergroup'];\n    }\n\n    /**\n     * Risk management Customer group doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERGROUPISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['user']['customergroup'];\n    }\n\n    /**\n     * Risk management - Shipping zip code match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZIPCODE($user, $order, $value)\n    {\n        if ($value == '-1') {\n            $value = '';\n        }\n\n        return $value == $user['shippingaddress']['zipcode'];\n    }\n\n    /**\n     * Risk management - Billing zip code match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZIPCODE($user, $order, $value)\n    {\n        if ($value == '-1') {\n            $value = '';\n        }\n\n        return $value == $user['billingaddress']['zipcode'];\n    }\n\n    /**\n     * Risk management - Country zone matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZONEIS($user, $order, $value)\n    {\n        return $value == $user['additional']['countryShipping']['countryarea'];\n    }\n\n    /**\n     * Risk management - Country zone doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskZONEISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['countryShipping']['countryarea'];\n    }\n\n    /**\n     * Risk management - Billing Country zone matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZONEIS($user, $order, $value)\n    {\n        return $value == $user['additional']['country']['countryarea'];\n    }\n\n    /**\n     * Risk management - Billing Country zone doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGZONEISNOT($user, $order, $value)\n    {\n        return $value != $user['additional']['country']['countryarea'];\n    }\n\n    /**\n     * Risk management - Country matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLANDIS($user, $order, $value)\n    {\n        if (preg_match(\"/$value/\", $user['additional']['countryShipping']['countryiso'])) {\n            return true;\n        }\n\n        return $value == $user['additional']['countryShipping']['countryiso'];\n    }\n\n    /**\n     * Risk management - Country doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLANDISNOT($user, $order, $value)\n    {\n        if (!preg_match(\"/$value/\", $user['additional']['countryShipping']['countryiso'])) {\n            return true;\n        }\n\n        return $value != $user['additional']['countryShipping']['countryiso'];\n    }\n\n    /**\n     * Risk management - Billing Country matches value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGLANDIS($user, $order, $value)\n    {\n        if (preg_match(\"/$value/\", $user['additional']['country']['countryiso'])) {\n            return true;\n        }\n\n        return $value == $user['additional']['country']['countryiso'];\n    }\n\n    /**\n     * Risk management - Billing Country doesn't match value\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskBILLINGLANDISNOT($user, $order, $value)\n    {\n        if (!preg_match(\"/$value/\", $user['additional']['country']['countryiso'])) {\n            return true;\n        }\n\n        return $value != $user['additional']['country']['countryiso'];\n    }\n\n    /**\n     * Risk management - Customer is new\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskNEWCUSTOMER($user, $order, $value)\n    {\n        return date('Y-m-d') == $user['additional']['user']['firstlogin']\n            || !$user['additional']['user']['firstlogin'];\n    }\n\n    /**\n     * Risk management - Order has more then value positions\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskORDERPOSITIONSMORE($user, $order, $value)\n    {\n        return \\is_array($order[CartKey::POSITIONS]) ? \\count($order[CartKey::POSITIONS]) : $order[CartKey::POSITIONS] >= $value;\n    }\n\n    /**\n     * Risk management - Article attribute x from basket - positions is y\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool|null Rule validation result\n     */\n    public function sRiskATTRIS($user, $order, $value)\n    {\n        if (!empty($order[CartKey::POSITIONS])) {\n            $value = explode('|', $value);\n\n            if (!isset($value[0], $value[1])) {\n                return null;\n            }\n\n            return $this->hasProductAttributeMatch($value[0], $value[1], '=');\n        }\n\n        return null;\n    }\n\n    /**\n     * Risk management - product attribute x from basket is not y\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool|null Rule validation result\n     */\n    public function sRiskATTRISNOT($user, $order, $value)\n    {\n        if (!empty($order[CartKey::POSITIONS])) {\n            $value = explode('|', $value);\n\n            if (!isset($value[0], $value[1])) {\n                return null;\n            }\n\n            return $this->hasProductAttributeMatch($value[0], $value[1], '!=');\n        }\n\n        return null;\n    }\n\n    /**\n     * @param bool|array $user\n     *\n     * @return bool|void\n     */\n    public function sRiskCUSTOMERATTRIS($user, array $order, string $value)\n    {\n        if (!isset($user['additional']['user'])) {\n            return;\n        }\n\n        $values = explode('|', $value);\n        if (!isset($values[0], $values[1])) {\n            return;\n        }\n\n        $attribute = $values[0];\n        $value = $values[1];\n\n        if (!isset($user['additional']['user'][$attribute])) {\n            return;\n        }\n\n        return $user['additional']['user'][$attribute] === $value;\n    }\n\n    /**\n     * @param bool|array $user\n     *\n     * @return bool|void\n     */\n    public function sRiskCUSTOMERATTRISNOT($user, array $order, string $value)\n    {\n        if (!isset($user['additional']['user'])) {\n            return true;\n        }\n\n        $values = explode('|', $value);\n        if (!isset($values[0], $values[1])) {\n            return true;\n        }\n\n        $attribute = $values[0];\n        $value = $values[1];\n\n        if (!isset($user['additional']['user'][$attribute])) {\n            return true;\n        }\n\n        return $user['additional']['user'][$attribute] !== $value;\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 13\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELONE($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(13);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 14\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELTWO($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(14);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 15\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDUNNINGLEVELTHREE($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(15);\n    }\n\n    /**\n     * Risk management\n     * Check if at least one order of the customer has a payment status 16 (Encashment)\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskINKASSO($user, $order, $value)\n    {\n        return $this->riskCheckClearedLevel(16);\n    }\n\n    /**\n     * Risk management - Last order less x days\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTORDERLESS($user, $order, $value)\n    {\n        // A order from previous x days must exists\n        if ($this->session->offsetGet('sUserId')) {\n            $value = (int) $value;\n            $checkOrder = $this->db->fetchRow(\n                \"SELECT id\n                FROM s_order\n                WHERE userID = ?\n                AND TO_DAYS(ordertime) <= (TO_DAYS(now())-$value) LIMIT 1\",\n                [\n                    $this->session->offsetGet('sUserId'),\n                ]\n            );\n\n            return !$checkOrder || !$checkOrder['id'];\n        }\n\n        return true;\n    }\n\n    /**\n     * Risk management - Products from a certain category\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskARTICLESFROM($user, $order, $value)\n    {\n        $checkProduct = $this->db->fetchOne('\n            SELECT s_articles_categories_ro.id AS id\n            FROM s_order_basket, s_articles_categories_ro\n            WHERE s_order_basket.articleID = s_articles_categories_ro.articleID\n            AND s_articles_categories_ro.categoryID = ?\n            AND s_order_basket.sessionID = ?\n            AND s_order_basket.modus = 0\n        ', [$value, $this->session->offsetGet('sessionId')]);\n\n        return !empty($checkProduct);\n    }\n\n    /**\n     * Risk management - Order value greater then\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTORDERSLESS($user, $order, $value)\n    {\n        if ($this->session->offsetGet('sUserId')) {\n            $checkOrder = $this->db->fetchAll(\n                'SELECT id FROM s_order\n                  WHERE status != -1 AND status != 4 AND userID = ?',\n                [$this->session->offsetGet('sUserId')]\n            );\n\n            return \\count($checkOrder) <= $value;\n        }\n\n        return true;\n    }\n\n    /**\n     * Risk management - Block if street contains pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskPREGSTREET($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return (bool) preg_match(\n            \"/$value/\",\n            strtolower($user['shippingaddress']['street'])\n        );\n    }\n\n    /**\n     * Risk management - Block if street contains pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskPREGBILLINGSTREET($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return (bool) preg_match(\n            \"/$value/\",\n            strtolower($user['billingaddress']['street'])\n        );\n    }\n\n    /**\n     * Risk management - Block if billing address not equal to shipping address\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskDIFFER($user, $order, $value)\n    {\n        // Compare street and zipcode.\n        // Return true if any of them doesn't match.\n        return (\n                strtolower(\n                    trim($user['shippingaddress']['street'])\n                ) != strtolower(\n                    trim($user['billingaddress']['street'])\n                )\n            ) || (\n                trim($user['shippingaddress']['zipcode'])\n                != trim($user['billingaddress']['zipcode'])\n            );\n    }\n\n    /**\n     * Risk management - Block if customer number matches pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCUSTOMERNR($user, $order, $value)\n    {\n        return $value == $user['additional']['user']['customernumber'] && !empty($value);\n    }\n\n    /**\n     * Risk management - Block if last name matches pattern\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskLASTNAME($user, $order, $value)\n    {\n        $value = strtolower($value);\n\n        return preg_match(\"/$value/\", strtolower($user['shippingaddress']['lastname']))\n            || preg_match(\"/$value/\", strtolower($user['billingaddress']['lastname']));\n    }\n\n    /**\n     * Risk management -  Block if subshop id is x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskSUBSHOP($user, $order, $value)\n    {\n        return $this->contextService->getShopContext()->getShop()->getId() == $value;\n    }\n\n    /**\n     * Risk management -  Block if subshop id is not x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskSUBSHOPNOT($user, $order, $value)\n    {\n        return $this->contextService->getShopContext()->getShop()->getId() != $value;\n    }\n\n    /**\n     * Risk management - Block if currency id is not x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCURRENCIESISOIS($user, $order, $value)\n    {\n        return strtolower($this->sSYSTEM->sCurrency['currency']) === strtolower($value);\n    }\n\n    /**\n     * Risk management - Block if currency id is x\n     *\n     * @param array $user  User data\n     * @param array $order Order data\n     * @param mixed $value Value to compare against\n     *\n     * @return bool Rule validation result\n     */\n    public function sRiskCURRENCIESISOISNOT($user, $order, $value)\n    {\n        return strtolower($this->sSYSTEM->sCurrency['currency']) !== strtolower($value);\n    }\n\n    /**\n     * Subscribe / unsubscribe to mailing list\n     * Used in the Newsletter frontend controller to manage subscriptions\n     *\n     * @param string $email       Email address\n     * @param bool   $unsubscribe If true, remove email address from mailing list\n     * @param int    $groupID     Id of the mailing list group\n     *\n     * @return array Array with the result of the operation\n     */\n    public function sNewsletterSubscription($email, $unsubscribe = false, $groupID = null)\n    {\n        if (empty($unsubscribe)) {\n            $errorFlag = [];\n            $config = Shopware()->Container()->get(Shopware_Components_Config::class);\n\n            if (\n                $this->shouldVerifyCaptcha($config)\n                && (bool) $this->front->Request()->getParam('voteConfirmed', false) === false\n            ) {\n                /** @var CaptchaValidator $captchaValidator */\n                $captchaValidator = Shopware()->Container()->get('shopware.captcha.validator');\n\n                if (!$captchaValidator->validateByName($config->get('newsletterCaptcha'), $this->front->Request())) {\n                    return [\n                        'code' => 7,\n                    ];\n                }\n            }\n\n            $fields = ['newsletter'];\n            foreach ($fields as $field) {\n                $fieldData = $this->front->Request()->getPost($field);\n                if (isset($fieldData) && empty($fieldData)) {\n                    $errorFlag[$field] = true;\n                }\n            }\n\n            if (!empty($errorFlag)) {\n                return [\n                    'code' => 5,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('ErrorFillIn', 'Please fill in all red fields'),\n                    'sErrorFlag' => $errorFlag,\n                ];\n            }\n        }\n\n        if (empty($groupID)) {\n            $groupID = $this->config->get('sNEWSLETTERDEFAULTGROUP');\n            $sql = '\n                INSERT IGNORE INTO s_campaigns_groups (id, name)\n                VALUES (?, ?)\n            ';\n            $this->db->query($sql, [$groupID, 'Newsletter-Empf\u00e4nger']);\n        }\n\n        $email = strtolower(trim(stripslashes($email)));\n        if (empty($email)) {\n            return [\n                'code' => 6,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('NewsletterFailureMail', 'Enter eMail address'),\n            ];\n        }\n        if (!$this->emailValidator->isValid($email)) {\n            return [\n                'code' => 1,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('NewsletterFailureInvalid', 'Enter valid eMail address'),\n            ];\n        }\n        if (!$unsubscribe) {\n            $result = $this->subscribeNewsletter($email, $groupID);\n        } else {\n            $deleteResult = $this->db->delete('s_campaigns_mailaddresses', ['email = ?' => $email]);\n            $updateResult = $this->db->update('s_user', ['newsletter' => 0], ['email = ?' => $email]);\n\n            if ($deleteResult == 0 && $updateResult == 0) {\n                $result = [\n                    'code' => 4,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('NewsletterFailureNotFound', 'This mail address could not be found'),\n                ];\n            } else {\n                $result = [\n                    'code' => 5,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('NewsletterMailDeleted', 'Your mail address was deleted'),\n                ];\n            }\n        }\n\n        if (!empty($result['code']) && \\in_array($result['code'], [2, 3])) {\n            $voteConfirmed = $this->front->getParam('voteConfirmed');\n            $now = $this->front->getParam('optinNow');\n            $now = isset($now) ? $now : (new DateTime())->format('Y-m-d H:i:s');\n\n            $added = $voteConfirmed ? $this->front->getParam('optinDate') : $now;\n            $doubleOptInConfirmed = $voteConfirmed ? $now : null;\n            $mailDataExists = $this->connection->fetchColumn(\n                'SELECT 1 FROM s_campaigns_maildata WHERE email = ? AND groupID = ?',\n                [\n                    $email,\n                    $groupID,\n                ]\n            );\n\n            if (empty($mailDataExists)) {\n                $sql = '\n                    REPLACE INTO s_campaigns_maildata (\n                      email, groupID, salutation, title, firstname,\n                      lastname, street, zipcode, city, added, double_optin_confirmed\n                    )\n                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n                ';\n                $this->connection->executeQuery($sql, [\n                    $email,\n                    $groupID,\n                    $this->front->Request()->getPost('salutation'),\n                    $this->front->Request()->getPost('title'),\n                    $this->front->Request()->getPost('firstname'),\n                    $this->front->Request()->getPost('lastname'),\n                    $this->front->Request()->getPost('street'),\n                    $this->front->Request()->getPost('zipcode'),\n                    $this->front->Request()->getPost('city'),\n                    $added,\n                    $doubleOptInConfirmed,\n                ]);\n            } else {\n                $this->connection->update(\n                    's_campaigns_maildata',\n                    [\n                        'groupID' => $groupID,\n                        'salutation' => $this->front->Request()->getPost('salutation'),\n                        'title' => $this->front->Request()->getPost('title'),\n                        'firstname' => $this->front->Request()->getPost('firstname'),\n                        'lastname' => $this->front->Request()->getPost('lastname'),\n                        'street' => $this->front->Request()->getPost('street'),\n                        'city' => $this->front->Request()->getPost('city'),\n                    ],\n                    [\n                        'email' => $email,\n                        'groupID' => $groupID,\n                    ]\n                );\n            }\n        } elseif (!empty($unsubscribe)) {\n            $this->connection->delete('s_campaigns_maildata', ['email' => $email, 'groupID' => $groupID]);\n            $this->eventManager->notify(\n                'Shopware_Modules_Admin_Newsletter_Unsubscribe',\n                ['email' => $email]\n            );\n        }\n\n        return $result;\n    }\n\n    /**\n     * Generate table with german holidays\n     *\n     * @return bool\n     */\n    public function sCreateHolidaysTable()\n    {\n        /** @var HolidayTableUpdater $updater */\n        $updater = Shopware()->Container()->get('shopware.holiday_table_updater');\n        $updater->update();\n\n        return true;\n    }\n\n    /**\n     * Get country from its id or iso code\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param int|string $country Country id or iso code\n     *\n     * @return array|false Array with country information, including area, or false if empty argument\n     */\n    public function sGetCountry($country)\n    {\n        if (empty($country)) {\n            return false;\n        }\n        if (isset($this->cache['country'][$country])) {\n            return $this->cache['country'][$country];\n        }\n\n        if (is_numeric($country)) {\n            $sql = $this->db->quoteInto('c.id = ?', $country);\n        } elseif (\\is_string($country)) {\n            $sql = $this->db->quoteInto('c.countryiso = ?', $country);\n        } else {\n            return false;\n        }\n\n        $sql = \"\n            SELECT c.id, c.id as countryID, countryname, countryiso,\n                (SELECT name FROM s_core_countries_areas WHERE id = areaID ) AS countryarea,\n                countryen, c.position, notice\n            FROM s_core_countries c\n            WHERE $sql\n        \";\n\n        return $this->cache['country'][$country] = $this->db->fetchRow($sql) ?: [];\n    }\n\n    /**\n     * Get a specific payment\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param int|string $payment Payment mean id or name\n     *\n     * @return array|false Array with payment mean information, including area, or false if empty argument\n     */\n    public function sGetPaymentMean($payment)\n    {\n        if (empty($payment)) {\n            return false;\n        }\n        if (isset($this->cache['payment'][$payment])) {\n            return $this->cache['payment'][$payment];\n        }\n        if (is_numeric($payment)) {\n            $sql = $this->db->quoteInto('id = ?', $payment);\n        } elseif (\\is_string($payment)) {\n            $sql = $this->db->quoteInto('name = ?', $payment);\n        } else {\n            return false;\n        }\n\n        $sql = \"\n            SELECT * FROM s_core_paymentmeans\n            WHERE $sql\n        \";\n        $this->cache['payment'][$payment] = $this->db->fetchRow($sql) ?: [];\n\n        $this->cache['payment'][$payment]['country_surcharge'] = [];\n        if (!empty($this->cache['payment'][$payment]['surchargestring'])) {\n            foreach (explode(';', $this->cache['payment'][$payment]['surchargestring']) as $countrySurcharge) {\n                [$key, $value] = explode(':', $countrySurcharge);\n                $value = (float) str_replace(',', '.', $value);\n                if (!empty($value)) {\n                    $this->cache['payment'][$payment]['country_surcharge'][$key] = $value;\n                }\n            }\n        }\n\n        return $this->cache['payment'][$payment];\n    }\n\n    /**\n     * Get dispatch data for basket\n     * Used internally in sAdmin::sGetPremiumShippingcosts() and sAdmin::sGetPremiumDispatches()\n     *\n     * @param int $countryID Country id\n     * @param int $paymentID Payment mean id\n     * @param int $stateId   Country state id\n     *\n     * @return false|array Array with dispatch data for the basket, or false if no basket\n     */\n    public function sGetDispatchBasket($countryID = null, $paymentID = null, $stateId = null)\n    {\n        $addSelect = [];\n        $premiumShippingBasketSelect = $this->config->get('sPREMIUMSHIPPIUNGASKETSELECT');\n        if (!empty($premiumShippingBasketSelect)) {\n            $addSelect[] = $premiumShippingBasketSelect;\n        }\n\n        $calculationQueryBuilder = $this->connection->createQueryBuilder()\n            ->select(['id', 'calculation_sql'])\n            ->from('s_premium_dispatch')\n            ->where('active = 1')\n            ->andWhere('calculation = 3');\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetDispatchBasket_Calculation_QueryBuilder',\n            [\n                'queryBuilder' => $calculationQueryBuilder,\n            ]\n        );\n\n        $calculations = $calculationQueryBuilder->execute()->fetchAll(PDO::FETCH_KEY_PAIR);\n\n        if (!empty($calculations)) {\n            foreach ($calculations as $dispatchID => $calculation) {\n                if (empty($calculation)) {\n                    $calculation = $this->db->quote($calculation);\n                }\n                $addSelect[] = '(' . $calculation . ') as calculation_value_' . $dispatchID;\n            }\n        }\n\n        $userId = $this->session->offsetGet('sUserId');\n        $sessionId = $this->session->offsetGet('sessionId');\n\n        if (empty($this->sSYSTEM->sUSERGROUPDATA['tax']) && !empty($this->sSYSTEM->sUSERGROUPDATA['id'])) {\n            $amount = 'b.quantity*ROUND(CAST(b.price as DECIMAL(10,2))*(100+t.tax)/100,2)';\n            $amount_net = 'b.quantity*CAST(b.price as DECIMAL(10,2))';\n        } else {\n            $amount = 'b.quantity*CAST(b.price as DECIMAL(10,2))';\n            $amount_net = 'b.quantity*ROUND(CAST(b.price as DECIMAL(10,2))/(100+t.tax)*100,2)';\n        }\n\n        $queryBuilder = $this->getBasketQueryBuilder($amount, $amount_net);\n\n        $queryBuilder->setParameters([\n            'userId' => $userId,\n            'sessionId' => empty($sessionId) ? session_id() : $sessionId,\n            'billingAddressId' => $this->getBillingAddressId(),\n            'shippingAddressId' => $this->getShippingAddressId(),\n        ]);\n\n        foreach ($addSelect as $select) {\n            $queryBuilder->addSelect($select);\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetDispatchBasket_QueryBuilder',\n            [\n                'queryBuilder' => $queryBuilder,\n                'amount' => $amount,\n                'amount_net' => $amount_net,\n            ]\n        );\n\n        $basket = $queryBuilder->execute()->fetch(PDO::FETCH_ASSOC);\n\n        if ($basket === false) {\n            return false;\n        }\n\n        $basket['max_tax'] = $this->moduleManager->Basket()->getMaxTax();\n\n        $postPaymentId = $this->front->Request()->getPost('sPayment');\n        $sessionPaymentId = $this->session->offsetGet('sPaymentID');\n\n        if (!empty($paymentID)) {\n            $paymentID = (int) $paymentID;\n        } elseif (!empty($userId)) {\n            $user = $this->sGetUserData();\n            $paymentID = (int) $user['additional']['payment']['id'];\n        } elseif (!empty($postPaymentId)) {\n            $paymentID = (int) $postPaymentId;\n        } elseif (!empty($sessionPaymentId)) {\n            $paymentID = (int) $sessionPaymentId;\n        }\n\n        $paymentMeans = $this->sGetPaymentMeans();\n        $paymentIDs = [];\n        foreach ($paymentMeans as $paymentMean) {\n            $paymentIDs[] = $paymentMean['id'];\n        }\n        if (!\\in_array($paymentID, $paymentIDs)) {\n            $paymentID = reset($paymentIDs);\n        }\n\n        if (empty($countryID) && !empty($user['additional']['countryShipping']['id'])) {\n            $countryID = (int) $user['additional']['countryShipping']['id'];\n        } else {\n            $countryID = (int) $countryID;\n        }\n\n        if (!empty($user['additional']['stateShipping']['id'])) {\n            $stateId = $user['additional']['stateShipping']['id'];\n        }\n        $mainId = $this->db->fetchOne(\n            'SELECT main_id FROM s_core_shops WHERE id = ?',\n            [(int) $this->contextService->getShopContext()->getShop()->getId()]\n        );\n        // Main id is null, so we use the current shop id\n        if ($mainId === null) {\n            $mainId = (int) $this->contextService->getShopContext()->getShop()->getId();\n        }\n        $basket['basketStateId'] = (int) $stateId;\n        $basket['countryID'] = $countryID;\n        $basket['paymentID'] = $paymentID;\n        $basket['customergroupID'] = (int) $this->sSYSTEM->sUSERGROUPDATA['id'];\n        $basket['multishopID'] = $mainId;\n        $basket['sessionID'] = $sessionId;\n\n        return $basket;\n    }\n\n    /**\n     * Get premium dispatch method\n     * Used internally, in sOrder and AboCommerce plugin\n     *\n     * @param int $dispatchID Dispatch method id\n     *\n     * @return array|false Array with dispatch method data\n     */\n    public function sGetPremiumDispatch($dispatchID = null)\n    {\n        $sql = '\n            SELECT d.id, `name`, d.description, calculation, status_link,\n              surcharge_calculation, bind_shippingfree, shippingfree, tax_calculation,\n              t.tax AS tax_calculation_value\n            FROM s_premium_dispatch d\n            LEFT JOIN s_core_tax t\n            ON t.id = d.tax_calculation\n            WHERE active = 1\n            AND d.id = ?\n        ';\n        $dispatch = $this->db->fetchRow($sql, [$dispatchID]);\n        if ($dispatch === false) {\n            return false;\n        }\n\n        return $this->sGetDispatchTranslation($dispatch);\n    }\n\n    /**\n     * Get dispatch methods\n     *\n     * @param int $countryID Country id\n     * @param int $paymentID Payment mean id\n     * @param int $stateId   Country state id\n     *\n     * @return array Shipping methods data\n     */\n    public function sGetPremiumDispatches($countryID = null, $paymentID = null, $stateId = null)\n    {\n        $this->sCreateHolidaysTable();\n\n        $basket = $this->sGetDispatchBasket($countryID, $paymentID, $stateId);\n\n        $statements = $this->connection->createQueryBuilder()\n            ->select('id', 'bind_sql')\n            ->from('s_premium_dispatch')\n            ->where('active = 1 AND type IN (0)')\n            ->andWhere('bind_sql IS NOT NULL AND bind_sql != \"\"')\n            ->execute()\n            ->fetchAll(PDO::FETCH_KEY_PAIR);\n\n        if (empty($basket)) {\n            return [];\n        }\n\n        $sqlAndWhere = [];\n        foreach ($statements as $dispatchID => $statement) {\n            $sqlAndWhere[] = \"(d.id != $dispatchID OR ($statement))\";\n        }\n\n        $sqlBasket = [];\n        foreach ($basket as $key => $value) {\n            $sqlBasket[] = $this->connection->quote($value) . \" as `$key`\";\n        }\n        $sqlBasket = implode(',', $sqlBasket);\n\n        $joinSubSelect = $this->connection->createQueryBuilder()\n            ->select('dc.dispatchID')\n            ->from('s_order_basket', 'b')\n            ->join('b', 's_articles_categories_ro', 'ac', 'ac.articleID = b.articleID')\n            ->join('ac', 's_premium_dispatch_categories', 'dc', 'dc.categoryID = ac.categoryID')\n            ->where('b.modus = 0')\n            ->andWhere('b.sessionID = :sessionId')\n            ->groupBy('dc.dispatchID');\n\n        $queryBuilder = $this->connection->createQueryBuilder();\n        $queryBuilder->select([\n            'd.id as `key`',\n            'd.id, d.name',\n            'd.description',\n            'd.calculation',\n            'd.status_link',\n            'b.*',\n        ])\n            ->from('s_premium_dispatch', 'd')\n            ->join('d', sprintf('(SELECT %s)', $sqlBasket), 'b', '1=1')\n            ->join('d', 's_premium_dispatch_countries', 'dc', 'd.id = dc.dispatchID AND dc.countryID=b.countryID')\n            ->join('d', 's_premium_dispatch_paymentmeans', 'dp', 'd.id = dp.dispatchID AND dp.paymentID=b.paymentID')\n            ->leftJoin('d', 's_premium_holidays', 'h', 'h.date = CURDATE()')\n            ->leftJoin('d', 's_premium_dispatch_holidays', 'dh', 'd.id=dh.dispatchID AND h.id=dh.holidayID')\n            ->leftJoin('d', sprintf('(%s)', $joinSubSelect->getSQL()), 'dk', 'dk.dispatchID=d.id')\n            ->leftJoin('b', 's_user', 'u', ' u.id=b.userID AND u.active=1')\n            ->leftJoin('u', 's_user_addresses', 'ub', 'ub.user_id = u.id AND ub.id = :billingAddressId')\n            ->leftJoin('u', 's_user_addresses', 'us', 'us.user_id = u.id AND us.id = :shippingAddressId')\n            ->where('d.active = 1')\n            ->andWhere('(\n                (bind_time_from IS NULL AND bind_time_to IS NULL)\n                OR\n                (IFNULL(bind_time_from,0) <= IFNULL(bind_time_to,86400) AND TIME_TO_SEC(DATE_FORMAT(NOW(),\"%H:%i:00\")) BETWEEN IFNULL(bind_time_from,0) AND IFNULL(bind_time_to,86400))\n                OR\n                (bind_time_from > bind_time_to AND TIME_TO_SEC(DATE_FORMAT(NOW(),\"%H:%i:00\")) NOT BETWEEN bind_time_to AND bind_time_from)\n            )')\n            ->andWhere('(\n                (bind_weekday_from IS NULL AND bind_weekday_to IS NULL)\n                OR\n                (IFNULL(bind_weekday_from,1) <= IFNULL(bind_weekday_to,7) AND WEEKDAY(NOW())+1 BETWEEN IFNULL(bind_weekday_from,1) AND IFNULL(bind_weekday_to,7))\n                OR\n                (bind_weekday_from > bind_weekday_to AND WEEKDAY(NOW())+1 NOT BETWEEN bind_weekday_to AND bind_weekday_from)\n            )')\n            ->andWhere('(bind_weight_from IS NULL OR bind_weight_from <= b.weight)')\n            ->andWhere('(bind_weight_to IS NULL OR bind_weight_to >= b.weight)')\n            ->andWhere('(bind_price_from IS NULL OR bind_price_from <= b.amount)')\n            ->andWhere('(bind_price_to IS NULL OR bind_price_to >= b.amount)')\n            ->andWhere('(bind_instock=0 OR bind_instock IS NULL OR (bind_instock=1 AND b.instock) OR (bind_instock=2 AND b.stockmin))')\n            ->andWhere('(bind_laststock=0 OR (bind_laststock=1 AND b.laststock))')\n            ->andWhere('(bind_shippingfree!=1 OR NOT b.shippingfree)')\n            ->andWhere('dh.holidayID IS NULL')\n            ->andWhere('(d.multishopID IS NULL OR d.multishopID=b.multishopID)')\n            ->andWhere('(d.customergroupID IS NULL OR d.customergroupID=b.customergroupID)')\n            ->andWhere('dk.dispatchID IS NULL')\n            ->andWhere('d.type IN (0)')\n            ->groupBy('d.id')\n            ->orderBy('d.position, d.name');\n\n        foreach ($sqlAndWhere as $andWhere) {\n            $queryBuilder->andWhere($andWhere);\n        }\n\n        $queryBuilder->setParameter('sessionId', $this->session->offsetGet('sessionId'));\n        $queryBuilder->setParameter('billingAddressId', $this->getBillingAddressId());\n        $queryBuilder->setParameter('shippingAddressId', $this->getShippingAddressId());\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_GetPremiumDispatches_QueryBuilder',\n            [\n                'queryBuilder' => $queryBuilder,\n            ]\n        );\n\n        $dispatches = $queryBuilder->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE);\n\n        if (empty($dispatches)) {\n            $sql = '\n                SELECT\n                    d.id AS `key`,\n                    d.id, d.name,\n                    d.description,\n                    d.calculation,\n                    d.status_link\n                FROM s_premium_dispatch d\n\n                WHERE d.active=1\n                AND d.type=1\n                GROUP BY d.id\n\n                ORDER BY d.position, d.name\n                LIMIT 1\n            ';\n            $dispatches = $this->db->fetchAssoc($sql);\n        }\n\n        $names = [];\n        foreach ($dispatches as $dispatchID => $dispatch) {\n            if (\\in_array($dispatch['name'], $names)) {\n                unset($dispatches[$dispatchID]);\n            } else {\n                $names[] = $dispatch['name'];\n            }\n        }\n        unset($names);\n\n        $object = $this->sGetDispatchTranslation();\n        foreach ($dispatches as &$dispatch) {\n            if (!empty($object[$dispatch['id']]['dispatch_name'])) {\n                $dispatch['name'] = $object[$dispatch['id']]['dispatch_name'];\n            }\n            if (!empty($object[$dispatch['id']]['dispatch_description'])) {\n                $dispatch['description'] = $object[$dispatch['id']]['dispatch_description'];\n            }\n\n            $dispatch['attribute'] = Shopware()->Container()->get(DataLoader::class)\n                ->load('s_premium_dispatch_attributes', $dispatch['id']);\n\n            if (!empty($dispatch['attribute'])) {\n                $languageId = $this->contextService->getShopContext()->getShop()->getId();\n                $fallbackId = $this->contextService->getShopContext()->getShop()->getFallbackId();\n                $translationData = $this->translationComponent->readWithFallback(\n                    $languageId,\n                    $fallbackId,\n                    's_premium_dispatch_attributes',\n                    $dispatch['id']\n                );\n\n                foreach ($translationData as $key => $attribute) {\n                    $key = str_replace(CrudServiceInterface::EXT_JS_PREFIX, '', $key);\n                    $dispatch['attribute'][$key] = $attribute;\n                }\n            }\n        }\n\n        return $dispatches;\n    }\n\n    /**\n     * Get dispatch surcharge value for current basket and shipping method\n     * Used internally in sAdmin::sGetPremiumShippingcosts()\n     *\n     * @param array $basket\n     * @param int   $type\n     *\n     * @return float|false\n     */\n    public function sGetPremiumDispatchSurcharge($basket, $type = 2)\n    {\n        if (empty($basket)) {\n            return false;\n        }\n        $type = (int) $type;\n\n        $statements = $this->db->fetchPairs(\n            'SELECT id, bind_sql\n             FROM s_premium_dispatch\n             WHERE active = 1 AND type = ?\n                AND bind_sql IS NOT NULL',\n            [$type]\n        );\n\n        $sql_where = '';\n        foreach ($statements as $dispatchID => $statement) {\n            $sql_where .= \"\n            AND ( d.id!=$dispatchID OR ($statement))\n            \";\n        }\n        $sql_basket = [];\n        foreach ($basket as $key => $value) {\n            $sql_basket[] = $this->db->quote($value) . \" as `$key`\";\n        }\n        $sql_basket = implode(', ', $sql_basket);\n\n        $sql = \"\n            SELECT d.id, d.calculation\n            FROM s_premium_dispatch d\n\n            JOIN ( SELECT $sql_basket ) b\n            JOIN s_premium_dispatch_countries dc\n            ON d.id = dc.dispatchID\n            AND dc.countryID=b.countryID\n            JOIN s_premium_dispatch_paymentmeans dp\n            ON d.id = dp.dispatchID\n            AND dp.paymentID=b.paymentID\n            LEFT JOIN s_premium_holidays h\n            ON h.date = CURDATE()\n            LEFT JOIN s_premium_dispatch_holidays dh\n            ON d.id=dh.dispatchID\n            AND h.id=dh.holidayID\n\n            LEFT JOIN (\n                SELECT dc.dispatchID\n                FROM s_order_basket b\n                JOIN s_articles_categories_ro ac\n                ON ac.articleID=b.articleID\n                JOIN s_premium_dispatch_categories dc\n                ON dc.categoryID=ac.categoryID\n                WHERE b.modus=0\n                AND b.sessionID='{$this->session->offsetGet('sessionId')}'\n                GROUP BY dc.dispatchID\n            ) as dk\n            ON dk.dispatchID=d.id\n\n            LEFT JOIN s_user u\n            ON u.id=b.userID\n            AND u.active=1\n\n            LEFT JOIN s_user_addresses as ub\n                ON ub.user_id = u.id\n                AND ub.id = :billingAddressId\n\n            LEFT JOIN s_user_addresses as us\n                ON us.user_id = u.id\n                AND us.id = :shippingAddressId\n\n            WHERE d.active=1\n            AND (\n                (bind_time_from IS NULL AND bind_time_to IS NULL)\n            OR\n                (IFNULL(bind_time_from,0) <= IFNULL(bind_time_to,86400) AND TIME_TO_SEC(DATE_FORMAT(NOW(),'%H:%i:00')) BETWEEN IFNULL(bind_time_from,0) AND IFNULL(bind_time_to,86400))\n            OR\n                (bind_time_from > bind_time_to AND TIME_TO_SEC(DATE_FORMAT(NOW(),'%H:%i:00')) NOT BETWEEN bind_time_to AND bind_time_from)\n            )\n            AND (\n                (bind_weekday_from IS NULL AND bind_weekday_to IS NULL)\n            OR\n                (IFNULL(bind_weekday_from,1) <= IFNULL(bind_weekday_to,7) AND REPLACE(WEEKDAY(NOW()),0,6)+1 BETWEEN IFNULL(bind_weekday_from,1) AND IFNULL(bind_weekday_to,7))\n            OR\n                (bind_weekday_from > bind_weekday_to AND REPLACE(WEEKDAY(NOW()),0,6)+1 NOT BETWEEN bind_weekday_to AND bind_weekday_from)\n            )\n            AND (bind_weight_from IS NULL OR bind_weight_from <= b.weight)\n            AND (bind_weight_to IS NULL OR bind_weight_to >= b.weight)\n            AND (bind_price_from IS NULL OR bind_price_from <= b.amount)\n            AND (bind_price_to IS NULL OR bind_price_to >= b.amount)\n            AND (bind_instock=0 OR bind_instock IS NULL OR (bind_instock=1 AND b.instock) OR (bind_instock=2 AND b.stockmin))\n            AND (bind_laststock=0 OR (bind_laststock=1 AND b.laststock))\n            AND (bind_shippingfree=2 OR NOT b.shippingfree)\n            AND dh.holidayID IS NULL\n            AND (d.multishopID IS NULL OR d.multishopID=b.multishopID)\n            AND (d.customergroupID IS NULL OR d.customergroupID=b.customergroupID)\n            AND dk.dispatchID IS NULL\n            AND d.type = $type\n            AND (d.shippingfree IS NULL OR d.shippingfree > b.amount)\n            $sql_where\n            GROUP BY d.id\n        \";\n\n        $dispatches = $this->db->fetchAll(\n            $sql,\n            [\n                'billingAddressId' => $this->getBillingAddressId(),\n                'shippingAddressId' => $this->getShippingAddressId(),\n            ]\n        );\n\n        $surcharge = $this->calculateDispatchSurcharge($basket, $dispatches);\n\n        $surcharge = $this->eventManager->filter(\n            'Shopware_Modules_Admin_sGetPremiumDispatchSurcharge_FilterSurcharge',\n            $surcharge,\n            ['subject' => $this, 'dispatches' => $dispatches]\n        );\n\n        return $surcharge;\n    }\n\n    /**\n     * Get shipping costs\n     * Used in sBasket and Checkout controller\n     *\n     * @param array $country Array with details for a single country\n     *\n     * @return array|false Array with shipping costs data, or false on failure\n     */\n    public function sGetPremiumShippingcosts($country = null)\n    {\n        $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n\n        // Determinate tax automatically\n        $taxAutoMode = $this->config->get('sTAXAUTOMODE');\n        if (!empty($taxAutoMode)) {\n            $discount_tax = $this->moduleManager->Basket()->getMaxTax();\n        } else {\n            $discount_tax = $this->config->get('sDISCOUNTTAX');\n            $discount_tax = empty($discount_tax) ? 0 : (float) str_replace(',', '.', $discount_tax);\n        }\n\n        $this->db->delete('s_order_basket', [\n            'sessionID = ?' => $this->session->offsetGet('sessionId'),\n            'modus IN (?)' => [3, 4],\n            'ordernumber IN (?)' => array_merge(...[\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::PAYMENT_ABSOLUTE),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::PAYMENT_PERCENT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::DISCOUNT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::SHIPPING_DISCOUNT),\n                $this->cartOrderNumberProvider->getAll(CartOrderNumberProviderInterface::SHIPPING_SURCHARGE),\n            ]),\n        ]);\n\n        $basket = $this->sGetDispatchBasket(empty($country['id']) ? null : $country['id']);\n        if (empty($basket) || $basket['count_article'] == 0) {\n            return false;\n        }\n        $country = $this->sGetCountry($basket['countryID']);\n        if (empty($country)) {\n            return false;\n        }\n        $payment = $this->sGetPaymentMean($basket['paymentID']);\n        if (empty($payment)) {\n            return false;\n        }\n\n        $amount = (float) $this->db->fetchOne(\n            'SELECT SUM((CAST(price AS DECIMAL(10,2))*quantity)/currencyFactor) AS amount\n             FROM s_order_basket\n             WHERE sessionID = ?\n             GROUP BY sessionID',\n            [$this->session->offsetGet('sessionId')]\n        );\n\n        $this->handleDispatchSurcharge(\n            $basket,\n            $discount_tax\n        );\n\n        $this->handleBasketDiscount(\n            $amount,\n            $currencyFactor,\n            $discount_tax\n        );\n\n        $this->handleDispatchDiscount(\n            $basket,\n            $discount_tax\n        );\n\n        $dispatch = $this->sGetPremiumDispatch((int) $this->session->offsetGet('sDispatch'));\n\n        $payment = $this->handlePaymentMeanSurcharge(\n            $country,\n            $payment,\n            $currencyFactor,\n            $dispatch,\n            $discount_tax\n        );\n\n        if (empty($dispatch)) {\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        if (empty($this->sSYSTEM->sUSERGROUPDATA['tax']) && !empty($this->sSYSTEM->sUSERGROUPDATA['id'])) {\n            $dispatch['shippingfree'] = round($dispatch['shippingfree'] / (100 + $discount_tax) * 100, 2);\n        }\n\n        if (\n            (!empty($dispatch['shippingfree']) && $dispatch['shippingfree'] <= $basket['amount_display'])\n            || empty($basket['count_article'])\n            || (!empty($basket['shippingfree']) && empty($dispatch['bind_shippingfree']))\n        ) {\n            if (empty($dispatch['surcharge_calculation']) && !empty($payment['surcharge'])) {\n                $tax = (float) $basket['max_tax'];\n\n                if (!empty($dispatch['tax_calculation'])) {\n                    $context = Shopware()->Container()->get(ContextServiceInterface::class)->getShopContext();\n                    $taxRule = $context->getTaxRule($dispatch['tax_calculation']);\n                    $tax = $taxRule->getTax();\n                }\n\n                return [\n                    'brutto' => $payment['surcharge'],\n                    'netto' => round($payment['surcharge'] * 100 / (100 + $tax), 2),\n                    'tax' => $tax,\n                ];\n            }\n\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        if (empty($dispatch['calculation'])) {\n            $from = round($basket['weight'], 3);\n        } elseif ($dispatch['calculation'] == 1) {\n            $from = round($basket['amount'], 2);\n        } elseif ($dispatch['calculation'] == 2) {\n            $from = round($basket['count_article']);\n        } elseif ($dispatch['calculation'] == 3) {\n            $from = round((float) $basket['calculation_value_' . $dispatch['id']], 2);\n        } else {\n            return false;\n        }\n        $result = $this->db->fetchRow(\n            'SELECT `value` , `factor`\n             FROM `s_premium_shippingcosts`\n             WHERE `from` <= ?\n             AND `dispatchID` = ?\n             ORDER BY `from` DESC\n             LIMIT 1',\n            [$from, $dispatch['id']]\n        );\n        if ($result === false) {\n            return false;\n        }\n\n        if (!empty($dispatch['shippingfree'])) {\n            $result['shippingfree'] = round($dispatch['shippingfree'] * $currencyFactor, 2);\n            $difference = round(($dispatch['shippingfree'] - $basket['amount_display']) * $currencyFactor, 2);\n            $result['difference'] = [\n                'float' => $difference,\n                'formated' => $this->moduleManager->Articles()->sFormatPrice($difference),\n            ];\n        }\n        $result['brutto'] = $result['value'];\n        if (!empty($result['factor'])) {\n            $result['brutto'] += $result['factor'] / 100 * $from;\n        }\n        $result['surcharge'] = $this->sGetPremiumDispatchSurcharge($basket);\n        if (!empty($result['surcharge'])) {\n            $result['brutto'] += $result['surcharge'];\n        }\n        $result['brutto'] *= $currencyFactor;\n        $result['brutto'] = round($result['brutto'], 2);\n        if (\n            !empty($payment['surcharge'])\n            && $dispatch['surcharge_calculation'] != 2\n            && (empty($basket['shippingfree']) || empty($dispatch['surcharge_calculation']))\n        ) {\n            $result['surcharge'] = $payment['surcharge'];\n            $result['brutto'] += $result['surcharge'];\n        }\n        if ($result['brutto'] < 0) {\n            return ['brutto' => 0, 'netto' => 0];\n        }\n\n        $result['taxMode'] = $dispatch['tax_calculation'];\n\n        if (empty($dispatch['tax_calculation'])) {\n            $result['tax'] = $basket['max_tax'];\n        } else {\n            $result['tax'] = $dispatch['tax_calculation_value'];\n        }\n        $result['tax'] = (float) $result['tax'];\n        $result['netto'] = round($result['brutto'] * 100 / (100 + $result['tax']), 2);\n\n        return $result;\n    }\n\n    /**\n     * Helper function for sLogin\n     * Called when provided user data is correct\n     * Logs in the user\n     *\n     * @param array  $getUser\n     * @param string $email\n     * @param string $password\n     * @param bool   $isPreHashed\n     * @param string $encoderName\n     * @param string $plaintext\n     * @param string $hash\n     */\n    protected function loginUser($getUser, $email, $password, $isPreHashed, $encoderName, $plaintext, $hash)\n    {\n        $this->regenerateSessionId();\n\n        $this->db->update(\n            's_user',\n            [\n                'lastlogin' => new Zend_Date(),\n                'failedlogins' => 0,\n                'lockeduntil' => null,\n                'sessionID' => $this->session->offsetGet('sessionId'),\n            ],\n            [\n                'id = ?' => $getUser['id'],\n            ]\n        );\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Login_Successful',\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'user' => $getUser]\n        );\n\n        $newHash = '';\n        $liveMigration = $this->config->offsetGet('liveMigration');\n        $defaultEncoderName = $this->passwordEncoder->getDefaultPasswordEncoderName();\n\n        // Do not allow live migration when the password is pre-hashed\n        if ($liveMigration && !$isPreHashed && $encoderName !== $defaultEncoderName) {\n            $newHash = $this->passwordEncoder->encodePassword($plaintext, $defaultEncoderName);\n            $encoderName = $defaultEncoderName;\n        }\n\n        if (empty($newHash)) {\n            $newHash = $this->passwordEncoder->reencodePassword($plaintext, $hash, $encoderName);\n        }\n\n        $userId = (int) $getUser['id'];\n\n        if (!empty($newHash) && $newHash !== $hash) {\n            $hash = $newHash;\n            $this->db->update(\n                's_user',\n                [\n                    'password' => $hash,\n                    'encoder' => $encoderName,\n                ],\n                'id = ' . $userId\n            );\n        }\n\n        // Update note userID\n        $uniqueId = $this->front->Request()->getCookie('sUniqueID');\n        if (!empty($uniqueId)) {\n            $this->connection->executeQuery(\n                'UPDATE s_order_notes SET userID = :userId, sUniqueID = NULL WHERE sUniqueID = :uniqueId AND userID = 0',\n                [\n                    'userId' => $userId,\n                    'uniqueId' => $uniqueId,\n                ]\n            );\n\n            //destroy cookie\n            $this->front->Response()->setCookie('sUniqueID');\n        }\n\n        $this->session->offsetSet('sUserMail', $email);\n        $this->session->offsetSet('sUserPasswordChangeDate', $getUser['password_change_date']);\n        $this->session->offsetSet('sUserId', $userId);\n        $this->session->offsetSet('sNotesQuantity', $this->moduleManager->Basket()->sCountNotes());\n\n        if (!$this->sCheckUser()) {\n            return;\n        }\n\n        if ($this->config->get('migrateCartAfterLogin')) {\n            Shopware()->Container()->get('shopware.components.cart.cart_migration')->migrate();\n        }\n    }\n\n    private function hasProductAttributeMatch(string $attribute, string $value, string $operator): bool\n    {\n        $crudService = Shopware()->Container()->get('shopware_attribute.crud_service');\n        $columnData = $crudService->get('s_articles_attributes', $attribute);\n\n        if ($columnData === null && is_numeric($attribute)) {\n            $columnData = $crudService->get('s_articles_attributes', 'attr' . $attribute);\n            $attribute = 'attr' . $attribute;\n        }\n\n        if ($columnData !== null && !empty($attribute)) {\n            $sqlProductOrderNumber = $this->connection->createQueryBuilder()\n                ->select(['s_articles_attributes.id'])\n                ->from('s_order_basket, s_articles_attributes, s_articles_details')\n                ->where('s_order_basket.sessionID = :sessionID')\n                ->andWhere('s_order_basket.modus = 0')\n                ->andWhere('s_order_basket.ordernumber = s_articles_details.ordernumber')\n                ->andWhere('s_articles_details.id = s_articles_attributes.articledetailsID')\n                ->andWhere('s_articles_attributes.' . $attribute . ' ' . $operator . ' :attrValue')\n                ->setParameters([\n                    'attrValue' => $value,\n                    'sessionID' => $this->session->offsetGet('sessionId'),\n                ])\n                ->execute()->fetch(PDO::FETCH_ASSOC);\n\n            $sqlProductId = $this->connection->createQueryBuilder()\n                ->select(['s_articles_attributes.id'])\n                ->from('s_order_basket, s_articles_attributes, s_articles_details')\n                ->where('s_order_basket.sessionID = :sessionID')\n                ->andWhere('s_order_basket.modus = 0')\n                ->andWhere('s_order_basket.articleID = s_articles_details.articleID AND s_articles_details.kind = 1')\n                ->andWhere('s_articles_details.id = s_articles_attributes.articledetailsID')\n                ->andWhere('s_articles_attributes.' . $attribute . ' ' . $operator . ' :attrValue')\n                ->setParameters([\n                    'attrValue' => $value,\n                    'sessionID' => $this->session->offsetGet('sessionId'),\n                ])\n                ->execute()->fetch(PDO::FETCH_ASSOC);\n\n            return (bool) $sqlProductOrderNumber || (bool) $sqlProductId;\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a mail to the given recipient with a given template.\n     * If the opt in parameter is set, the sConfirmLink variable will be filled by the opt in link.\n     *\n     * @param string      $recipient\n     * @param string|Mail $template\n     * @param string      $optIn\n     */\n    private function sendMail($recipient, $template, $optIn = '')\n    {\n        $context = [];\n\n        if (!empty($optIn)) {\n            $context['sConfirmLink'] = $optIn;\n        }\n\n        $context = $this->eventManager->filter(\n            'Shopware_Modules_Admin_sendMail_FilterVariables',\n            $context,\n            [\n                'template' => $template,\n                'recipient' => $recipient,\n                'optin' => $optIn,\n            ]\n        );\n\n        $mail = Shopware()->TemplateMail()->createMail($template, $context);\n        $mail->addTo($recipient);\n        $mail->send();\n    }\n\n    /**\n     * Regenerates session id and updates references in the db\n     * Used internally by sAdmin::sLogin\n     */\n    private function regenerateSessionId(bool $ignoreUserTable = false): void\n    {\n        $oldSessionId = $this->session->getId();\n\n        if (\n        $this->eventManager->notifyUntil(\n            'Shopware_Modules_Admin_regenerateSessionId_Start',\n            ['subject' => $this, 'sessionId' => $oldSessionId]\n        )\n        ) {\n            return;\n        }\n\n        $this->session->migrate(true);\n        $newSessionId = $this->session->getId();\n\n        $this->sSYSTEM->sSESSION_ID = $newSessionId;\n        $this->session->offsetSet('sessionId', $newSessionId);\n        Shopware()->Container()->reset('sessionid');\n        Shopware()->Container()->set('sessionid', $newSessionId);\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Regenerate_Session_Id',\n            [\n                'subject' => $this,\n                'oldSessionId' => $oldSessionId,\n                'newSessionId' => $newSessionId,\n            ]\n        );\n\n        $sessions = [\n            's_order_basket' => 'sessionID',\n            's_order_comparisons' => 'sessionID',\n        ];\n\n        if (!$ignoreUserTable) {\n            $sessions['s_user'] = 'sessionID';\n        }\n\n        foreach ($sessions as $tableName => $column) {\n            $this->db->update(\n                $tableName,\n                [$column => $newSessionId],\n                $column . ' = ' . $this->db->quote($oldSessionId)\n            );\n        }\n    }\n\n    /**\n     * Overwrite sUserData['billingaddress'] with chosen address\n     *\n     * @return array\n     */\n    private function overwriteBillingAddress(array $userData)\n    {\n        // Temporarily overwrite billing address\n        if (\n            !$this->session->offsetGet('checkoutBillingAddressId')\n            || Shopware()->Front()->Request()->getControllerName() !== 'checkout'\n        ) {\n            return $userData;\n        }\n\n        $addressRepository = Shopware()->Models()->getRepository(Address::class);\n        $addressId = $this->session->offsetGet('checkoutBillingAddressId');\n\n        try {\n            $legacyAddress = $this->convertToLegacyAddressArray(\n                $addressRepository->getOneByUser($addressId, $this->session->offsetGet('sUserId'))\n            );\n\n            $userData['billingaddress'] = array_merge($userData['billingaddress'], $legacyAddress);\n            $userData = $this->completeUserCountryData($userData);\n        } catch (Exception $ex) {\n            // No need to overwrite default billing address\n            $this->session->offsetUnset('checkoutBillingAddressId');\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Overwrite sUserData['shippingaddress'] with chosen address\n     *\n     * @return array\n     */\n    private function overwriteShippingAddress(array $userData)\n    {\n        // Temporarily overwrite shipping address\n        if (\n            !$this->session->offsetGet('checkoutShippingAddressId') || Shopware()->Front()->Request()\n                ->getControllerName() !== 'checkout'\n        ) {\n            return $userData;\n        }\n\n        $addressRepository = Shopware()->Models()->getRepository(Address::class);\n        $addressId = $this->session->offsetGet('checkoutShippingAddressId');\n\n        try {\n            $legacyAddress = $this->convertToLegacyAddressArray(\n                $addressRepository->getOneByUser($addressId, $this->session->offsetGet('sUserId'))\n            );\n\n            $userData['shippingaddress'] = array_merge($userData['shippingaddress'], $legacyAddress);\n            $userData = $this->completeUserCountryData($userData, true);\n        } catch (Exception $ex) {\n            // No need to overwrite default shipping address\n            $this->session->offsetUnset('checkoutShippingAddressId');\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Converts an address to the array key structure of a legacy billing or shipping address\n     *\n     * @return array<string, mixed>\n     */\n    private function convertToLegacyAddressArray(Address $address)\n    {\n        $output = Shopware()->Models()->toArray($address);\n\n        $output = array_merge($output, [\n            'id' => $address->getId(),\n            'userID' => $address->getCustomer()->getId(),\n            'company' => $address->getCompany(),\n            'department' => $address->getDepartment(),\n            'salutation' => $address->getSalutation(),\n            'title' => $address->getTitle(),\n            'firstname' => $address->getFirstname(),\n            'lastname' => $address->getLastname(),\n            'street' => $address->getStreet(),\n            'zipcode' => $address->getZipcode(),\n            'city' => $address->getCity(),\n            'phone' => $address->getPhone(),\n            'countryID' => $address->getCountry()->getId(),\n            'stateID' => $address->getState() ? $address->getState()->getId() : null,\n            'ustid' => $address->getVatId(),\n            'additional_address_line1' => $address->getAdditionalAddressLine1(),\n            'additional_address_line2' => $address->getAdditionalAddressLine2(),\n            'attributes' => [],\n        ]);\n\n        if ($address->getAttribute()) {\n            $data = Shopware()->Models()->toArray($address->getAttribute());\n\n            $output['attributes'] = $data;\n        }\n\n        return $output;\n    }\n\n    /**\n     * @param bool $isShippingAddress changes keys in sUserData\n     *\n     * @return array\n     */\n    private function completeUserCountryData(array $userData, $isShippingAddress = false)\n    {\n        $sql = <<<'SQL'\nSELECT c.*, a.name AS countryarea\nFROM s_core_countries c\nLEFT JOIN s_core_countries_areas a ON a.id = c.areaID AND a.active = 1\nWHERE c.id = ?\nSQL;\n\n        $addressKey = $isShippingAddress ? 'shippingaddress' : 'billingaddress';\n        $countryKey = $isShippingAddress ? 'countryShipping' : 'country';\n        $stateKey = $isShippingAddress ? 'stateShipping' : 'state';\n\n        $userData['additional'][$countryKey] = Shopware()->Container()->get(Connection::class)\n            ->executeQuery($sql, [$userData[$addressKey]['countryID']])\n            ->fetch(PDO::FETCH_ASSOC);\n\n        $userData['additional'][$stateKey] = Shopware()->Container()->get(Connection::class)\n            ->executeQuery(\n                'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n                [$userData[$addressKey]['stateID']]\n            )\n            ->fetch(PDO::FETCH_ASSOC);\n\n        // Get translations\n        $userData['additional'][$countryKey] = $this->sGetCountryTranslation($userData['additional'][$countryKey]);\n        $userData['additional'][$stateKey] = $this->sGetCountryStateTranslation($userData['additional'][$stateKey]);\n\n        // Session\n        if ($isShippingAddress) {\n            $this->session->offsetSet('sCountry', $userData['additional'][$countryKey]['id']);\n            $this->session->offsetSet('sState', $userData['additional'][$stateKey]['id']);\n            $this->session->offsetSet('sArea', $userData['additional'][$countryKey]['areaID']);\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sLogin\n     * Called when provided user data is incorrect\n     * Handles account lockdown detection and brute force protection\n     *\n     * @param string        $addScopeSql\n     * @param string        $email\n     * @param string[]|null $sErrorMessages\n     * @param string        $password\n     *\n     * @return array\n     */\n    private function failedLoginUser($addScopeSql, $email, $sErrorMessages, $password)\n    {\n        if ($sErrorMessages === null) {\n            $sErrorMessages = [];\n        }\n\n        // Check if account is disabled or not verified yet\n        $sql = 'SELECT id, doubleOptinRegister, doubleOptinEmailSentDate, doubleOptinConfirmDate, email, firstname, lastname, salutation, register_opt_in_id\n                FROM s_user\n                WHERE email=? AND active=0 ' . $addScopeSql;\n        $getUser = $this->db->fetchRow($sql, [$email]);\n\n        // If the verification process is active, the customer has an email sent date, but no confirm date\n        if ($getUser['doubleOptinRegister'] && $getUser['doubleOptinEmailSentDate'] !== null && $getUser['doubleOptinConfirmDate'] === null) {\n            $hash = $this->optInLoginService->refreshOptInHashForUser(\n                (int) $getUser['id'],\n                (int) $getUser['register_opt_in_id'],\n                DateTimeImmutable::createFromFormat('Y-m-d H:i:s', $getUser['doubleOptinEmailSentDate'])\n            );\n\n            $userInfo = [\n                'mail' => $getUser['email'],\n                'firstname' => $getUser['firstname'],\n                'lastname' => $getUser['lastname'],\n                'salutation' => $getUser['salutation'],\n            ];\n\n            $this->resendConfirmationMail($userInfo, $hash);\n\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get(\n                    'LoginFailureOptIn',\n                    'Your account has not been verified yet. You received a new activation mail.'\n                );\n        } elseif ($getUser) {\n            $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get(\n                    'LoginFailureActive',\n                    'Your account is disabled. Please contact us.'\n                );\n        } else {\n            $getLockedUntilTime = $this->db->fetchOne(\n                'SELECT 1 FROM s_user WHERE email = ? AND lockeduntil > NOW()',\n                [$email]\n            );\n            if (!empty($getLockedUntilTime)) {\n                $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get(\n                        'LoginFailureLocked',\n                        'Too many failed logins. Your account was temporary deactivated.'\n                    );\n            } else {\n                $sErrorMessages[] = $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('LoginFailure', 'Wrong email or password');\n            }\n        }\n\n        // Prevent brute force login attempts\n        if (!empty($email)) {\n            $sql = '\n                UPDATE s_user SET\n                    failedlogins = failedlogins + 1,\n                    lockeduntil = IF(\n                        failedlogins > 4,\n                        DATE_ADD(NOW(), INTERVAL (failedlogins + 1) * 30 SECOND),\n                        NULL\n                    )\n                WHERE email = ? AND accountmode=? ' . $addScopeSql;\n            $this->db->query($sql, [$email, Customer::ACCOUNT_MODE_CUSTOMER]);\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Login_Failure',\n            ['subject' => $this, 'email' => $email, 'password' => $password, 'error' => $sErrorMessages]\n        );\n\n        $this->session->offsetUnset('sUserMail');\n        $this->session->offsetUnset('sUserPasswordChangeDate');\n        $this->session->offsetUnset('sUserId');\n\n        return $sErrorMessages;\n    }\n\n    /**\n     * @param string $hash\n     */\n    private function resendConfirmationMail(array $userInfo, $hash)\n    {\n        $link = Shopware()->Container()->get(RouterInterface::class)->assemble([\n            'sViewport' => 'register',\n            'action' => 'confirmValidation',\n            'sConfirmation' => $hash,\n        ]);\n\n        $context = array_merge(\n            [\n                'sConfirmLink' => $link,\n            ],\n            $userInfo\n        );\n\n        $context = Shopware()->Container()->get('events')->filter(\n            'Shopware_Controllers_Frontend_Register_DoubleOptIn_ResendMail',\n            $context,\n            [\n                'mail' => $userInfo['mail'],\n            ]\n        );\n\n        $mail = Shopware()->Container()->get(Shopware_Components_TemplateMail::class)\n            ->createMail('sOPTINREGISTER', $context);\n        $mail->addTo($userInfo['mail']);\n        $mail->send();\n    }\n\n    /**\n     * Helper method for sAdmin::sGetOpenOrderData()\n     *\n     * @param string $orderKey\n     *\n     * @return array\n     */\n    private function processOpenOrderDetails(array $orderValue, array $orders, $orderKey)\n    {\n        /** @var array $orderDetails */\n        $orderDetails = $this->db->fetchAll(\n            'SELECT * FROM s_order_details WHERE orderID = ? ORDER BY id ASC',\n            [$orderValue['id']]\n        );\n\n        if (!\\count($orderDetails)) {\n            unset($orders[$orderKey]);\n\n            return $orders;\n        }\n\n        $context = $this->contextService->getShopContext();\n        $orderProductOrderNumbers = array_column($orderDetails, 'articleordernumber');\n        $listProducts = Shopware()->Container()->get(ListProductServiceInterface::class)\n            ->getList($orderProductOrderNumbers, $context);\n        $listProducts = Shopware()->Container()->get(LegacyStructConverter::class)\n            ->convertListProductStructList($listProducts);\n\n        foreach ($listProducts as &$listProduct) {\n            $listProduct = array_merge($listProduct, $listProduct['prices'][0]);\n        }\n\n        foreach ($orderDetails as $orderDetailsKey => $orderDetailsValue) {\n            $orderDetails[$orderDetailsKey]['amountNumeric'] = round($orderDetailsValue['price'] * $orderDetailsValue['quantity'], 2);\n            $orderDetails[$orderDetailsKey]['priceNumeric'] = $orderDetailsValue['price'];\n            $orderDetails[$orderDetailsKey]['amount'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderDetails[$orderDetailsKey]['amountNumeric']);\n            $orderDetails[$orderDetailsKey]['price'] = $this->moduleManager->Articles()\n                ->sFormatPrice($orderDetailsValue['price']);\n            $orderDetails[$orderDetailsKey]['active'] = 0;\n\n            $tmpProduct = null;\n            if (!empty($listProducts[$orderDetailsValue['articleordernumber']])) {\n                $tmpProduct = $listProducts[$orderDetailsValue['articleordernumber']];\n            }\n\n            if (!empty($tmpProduct) && \\is_array($tmpProduct)) {\n                // Set product in activate state\n                $orderDetails[$orderDetailsKey]['active'] = 1;\n                $orderDetails[$orderDetailsKey]['article'] = $tmpProduct;\n                if (!empty($tmpProduct['purchaseunit'])) {\n                    $orderDetails[$orderDetailsKey]['purchaseunit'] = $tmpProduct['purchaseunit'];\n                }\n\n                if (!empty($tmpProduct['referenceunit'])) {\n                    $orderDetails[$orderDetailsKey]['referenceunit'] = $tmpProduct['referenceunit'];\n                }\n\n                if (!empty($tmpProduct['referenceprice'])) {\n                    $orderDetails[$orderDetailsKey]['referenceprice'] = $tmpProduct['referenceprice'];\n                }\n\n                if (!empty($tmpProduct['sUnit']) && \\is_array($tmpProduct['sUnit'])) {\n                    $orderDetails[$orderDetailsKey]['sUnit'] = $tmpProduct['sUnit'];\n                }\n\n                if (!empty($tmpProduct['price'])) {\n                    $orderDetails[$orderDetailsKey]['currentPrice'] = $tmpProduct['price'];\n                }\n\n                if (!empty($tmpProduct['pseudoprice'])) {\n                    $orderDetails[$orderDetailsKey]['currentPseudoprice'] = $tmpProduct['pseudoprice'];\n                }\n\n                $orderDetails[$orderDetailsKey]['currentHas_pseudoprice'] = $tmpProduct['has_pseudoprice'];\n            }\n\n            // Check for serial\n            if ($orderDetails[$orderDetailsKey]['esdarticle']) {\n                $numbers = [];\n                $getSerial = $this->db->fetchAll(\n                    'SELECT serialnumber\n                    FROM s_articles_esd_serials, s_order_esd\n                    WHERE userID = ?\n                    AND orderID = ?\n                    AND orderdetailsID = ?\n                    AND s_order_esd.serialID = s_articles_esd_serials.id',\n                    [\n                        $this->session->offsetGet('sUserId'),\n                        $orderValue['id'],\n                        $orderDetailsValue['id'],\n                    ]\n                );\n                foreach ($getSerial as $serial) {\n                    $numbers[] = $serial['serialnumber'];\n                }\n                $orderDetails[$orderDetailsKey]['serial'] = implode(',', $numbers);\n                $orderDetails[$orderDetailsKey]['esdLink'] = $this->config->get('sBASEFILE')\n                    . '?sViewport=account&sAction=download&esdID='\n                    . $orderDetailsValue['id'];\n            }\n        }\n        $orders[$orderKey]['activeBuyButton'] = 1;\n        $orders[$orderKey]['details'] = $orderDetails;\n\n        return $orders;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user country data\n     *\n     * @param array $userData\n     * @param int   $userId\n     *\n     * @return array\n     */\n    private function getUserCountryData($userData, $userId)\n    {\n        // Query country information\n        $userData['additional']['country'] = $this->db->fetchRow(\n            'SELECT c.*, a.name AS countryarea\n          FROM s_core_countries c\n          LEFT JOIN s_core_countries_areas a\n           ON a.id = c.areaID AND a.active = 1\n          WHERE c.id = ?',\n            [$userData['billingaddress']['countryID']]\n        );\n\n        $userData['additional']['country'] = $userData['additional']['country'] ?: [];\n        // State selection\n        $userData['additional']['state'] = $this->db->fetchRow(\n            'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n            [$userData['billingaddress']['stateID']]\n        );\n        $userData['additional']['state'] = $userData['additional']['state'] ?: [];\n\n        $userData['additional']['country'] = $this->sGetCountryTranslation($userData['additional']['country']);\n        $userData['additional']['state'] = $this->sGetCountryStateTranslation($userData['additional']['state']);\n\n        $additional = $this->db->fetchRow(\n            'SELECT * FROM s_user WHERE id = ?',\n            [$userId]\n        );\n        $additional = $additional ?: [];\n        $attributes = $this->attributeLoader->load('s_user_attributes', $userId);\n        $userData['additional']['user'] = array_merge($attributes, $additional);\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user shipping data (address, payment)\n     *\n     *  @return array<string, mixed>\n     */\n    private function getUserShippingData(int $userId, array $userData, string $countryQuery): array\n    {\n        $entityManager = Shopware()->Container()->get(ModelManager::class);\n\n        $customer = $entityManager->find(Customer::class, $userId);\n        if (!$customer instanceof Customer) {\n            throw new \\InvalidArgumentException('User with provided id not found');\n        }\n\n        $shipping = $this->getShippingAddressData($entityManager, $customer);\n        if ($shipping === null) {\n            throw new \\UnexpectedValueException('No shipping address found for user with provided userId');\n        }\n\n        $userData['shippingaddress'] = $shipping;\n\n        if (!isset($userData['shippingaddress']['firstname'])) {\n            $userData['shippingaddress'] = $userData['billingaddress'];\n            $userData['shippingaddress']['eqalBilling'] = true;\n        }\n\n        if (empty($userData['shippingaddress']['countryID'])) {\n            $targetCountryId = $userData['billingaddress']['countryID'];\n        } else {\n            $targetCountryId = $userData['shippingaddress']['countryID'];\n        }\n\n        $userData['additional']['countryShipping'] = $this->db->fetchRow(\n            $countryQuery,\n            [$targetCountryId]\n        );\n        $userData['additional']['countryShipping'] = $userData['additional']['countryShipping'] ?: [];\n        $userData['additional']['countryShipping'] = $this->sGetCountryTranslation(\n            $userData['additional']['countryShipping']\n        );\n\n        // State selection\n        $userData['additional']['stateShipping'] = $this->db->fetchRow(\n            'SELECT *, name AS statename FROM s_core_countries_states WHERE id = ?',\n            [$userData['shippingaddress']['stateID']]\n        );\n        $userData['additional']['stateShipping'] = $userData['additional']['stateShipping'] ?: [];\n        $userData['additional']['stateShipping'] = $this->sGetCountryStateTranslation($userData['additional']['stateShipping']);\n\n        if (!empty($userData['additional']['stateShipping'])) {\n            // Add stateId to session\n            $this->session->offsetSet('sState', $userData['additional']['stateShipping']['id']);\n        }\n\n        if (!empty($userData['additional']['countryShipping'])) {\n            // Add areaId to session\n            $this->session->offsetSet('sArea', $userData['additional']['countryShipping']['areaID']);\n            // Add countryId to session\n            $this->session->offsetSet('sCountry', $userData['additional']['countryShipping']['id']);\n        }\n\n        return $userData;\n    }\n\n    /**\n     * Helper function for sAdmin::sGetUserData()\n     * Gets user billing data\n     *\n     * @throws Exception\n     */\n    private function getUserBillingData(int $userId, array $userData): array\n    {\n        $entityManager = Shopware()->Container()->get(ModelManager::class);\n        $customer = $entityManager->find(Customer::class, $userId);\n        if (!$customer) {\n            throw new Exception(sprintf('Customer with id %s not found', $userId));\n        }\n        $billing = $this->convertToLegacyAddressArray($customer->getDefaultBillingAddress());\n        $billing['attributes'] = $this->attributeLoader->load('s_user_addresses_attributes', $billing['id']);\n        $userData['billingaddress'] = $billing;\n\n        return $userData;\n    }\n\n    /**\n     * Helper method for sAdmin::sNewsletterSubscription\n     * Subscribes the provided email address to the newsletter group\n     */\n    private function subscribeNewsletter(string $email, int $groupID): array\n    {\n        $result = $this->db->fetchAll(\n            'SELECT * FROM s_campaigns_mailaddresses WHERE email = ?',\n            [$email]\n        );\n        $isEmailExists = \\count($result) === 0;\n\n        if ($result === false) {\n            $result = [\n                'code' => 10,\n                'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                    ->get('UnknownError', 'Unknown error'),\n            ];\n\n            return $result;\n        } elseif (\\count($result) === 0) {\n            $customer = $this->db->fetchOne(\n                'SELECT id FROM s_user WHERE email = ? LIMIT 1',\n                [$email]\n            );\n\n            $voteConfirmed = $this->front->getParam('voteConfirmed');\n            $now = $this->front->getParam('optinNow');\n            $now = isset($now) ? $now : (new DateTime())->format('Y-m-d H:i:s');\n\n            $added = $voteConfirmed ? $this->front->getParam('optinDate') : $now;\n            $doubleOptInConfirmed = $voteConfirmed ? $now : null;\n\n            $result = $this->db->insert(\n                's_campaigns_mailaddresses',\n                [\n                    'customer' => (int) !empty($customer),\n                    'groupID' => $groupID,\n                    'email' => $email,\n                    'added' => $added,\n                    'double_optin_confirmed' => $doubleOptInConfirmed,\n                ]\n            );\n\n            if ($result === false) {\n                $result = [\n                    'code' => 10,\n                    'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                        ->get('UnknownError', 'Unknown error'),\n                ];\n\n                return $result;\n            }\n        }\n\n        $this->eventManager->notify(\n            'Shopware_Modules_Admin_Newsletter_Registration_Success',\n            [\n                'subject' => $this,\n                'email' => $email,\n                'groupID' => $groupID,\n            ]\n        );\n\n        $result = [\n            'code' => 3,\n            'message' => $this->snippetManager->getNamespace('frontend/account/internalMessages')\n                ->get('NewsletterSuccess', 'Thank you for receiving our newsletter'),\n            'isNewRegistration' => $isEmailExists,\n        ];\n\n        return $result;\n    }\n\n    /**\n     * Helper method for sAdmin::sGetPremiumDispatchSurcharge()\n     * Calculates the surcharge for the current basket and dispatches\n     *\n     * @param array $basket\n     * @param array $dispatches\n     *\n     * @return float\n     */\n    private function calculateDispatchSurcharge($basket, $dispatches)\n    {\n        $surcharge = 0;\n\n        if (empty($dispatches)) {\n            return $surcharge;\n        }\n\n        foreach ($dispatches as $dispatch) {\n            if (empty($dispatch['calculation'])) {\n                $from = round((float) $basket['weight'], 3);\n            } elseif ($dispatch['calculation'] == 1) {\n                if (\n                    ($this->config->get('sARTICLESOUTPUTNETTO') && !$this->sSYSTEM->sUSERGROUPDATA['tax'])\n                    || (!$this->sSYSTEM->sUSERGROUPDATA['tax'] && $this->sSYSTEM->sUSERGROUPDATA['id'])\n                ) {\n                    $from = round((float) $basket['amount_net'], 2);\n                } else {\n                    $from = round((float) $basket['amount'], 2);\n                }\n            } elseif ($dispatch['calculation'] == 2) {\n                $from = (int) $basket['count_article'];\n            } elseif ($dispatch['calculation'] == 3) {\n                $from = (int) $basket['calculation_value_' . $dispatch['id']];\n            } else {\n                continue;\n            }\n            $result = $this->db->fetchRow(\n                'SELECT `value` , factor\n                FROM s_premium_shippingcosts\n                WHERE `from` <= ?\n                AND dispatchID = ?\n                ORDER BY `from` DESC\n                LIMIT 1',\n                [$from, $dispatch['id']]\n            );\n\n            if ($result === false) {\n                continue;\n            }\n            $surcharge += $result['value'];\n            if (!empty($result['factor'])) {\n                $surcharge += $result['factor'] / 100 * $from;\n            }\n        }\n\n        return $surcharge;\n    }\n\n    private function handleBasketDiscount(float $amount, float $currencyFactor, float $discount_tax): void\n    {\n        $discount_basket_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::DISCOUNT);\n        $discount_basket_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('discount_name', 'Warenkorbrabatt');\n\n        $basket_discount = $this->db->fetchOne(\n            'SELECT basketdiscount\n                FROM s_core_customergroups_discounts\n                WHERE groupID = ?\n                AND basketdiscountstart <= ?\n                ORDER BY basketdiscountstart DESC',\n            [$this->sSYSTEM->sUSERGROUPDATA['id'], $amount]\n        );\n\n        if (!empty($basket_discount)) {\n            $percent = $basket_discount;\n            $basket_discount = round($basket_discount / 100 * ($amount * $currencyFactor), 2);\n\n            $lineItemName = '- ' . $percent . ' % ' . $discount_basket_name;\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $lineItemName,\n                $discount_basket_ordernumber,\n                $basket_discount * -1,\n                $discount_tax,\n                3\n            );\n        }\n    }\n\n    private function handleDispatchDiscount(array $basket, float $discountTax): void\n    {\n        $discount_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::SHIPPING_DISCOUNT);\n        $discount_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('shipping_discount_name', 'Basket discount');\n\n        $discount = $this->sGetPremiumDispatchSurcharge($basket, 3);\n\n        if (!empty($discount)) {\n            $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n            $discount *= -$currencyFactor;\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $discount_name,\n                $discount_ordernumber,\n                $discount,\n                $discountTax,\n                4\n            );\n        }\n    }\n\n    private function handleDispatchSurcharge(array $basket, float $discountTax): void\n    {\n        $discount_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::SHIPPING_SURCHARGE);\n        $discount_name = $this->snippetManager\n            ->getNamespace('backend/static/discounts_surcharges')\n            ->get('shipping_surcharge_name', 'Dispatch surcharge');\n\n        $discount = $this->sGetPremiumDispatchSurcharge($basket, 4);\n\n        if (!empty($discount)) {\n            $currencyFactor = empty($this->sSYSTEM->sCurrency['factor']) ? 1 : $this->sSYSTEM->sCurrency['factor'];\n            $discount *= $currencyFactor;\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $discount_name,\n                $discount_ordernumber,\n                $discount,\n                $discountTax,\n                4\n            );\n        }\n    }\n\n    /**\n     * Helper method for sAdmin::sGetPremiumShippingcosts()\n     * Calculates payment mean surcharge\n     *\n     * @param array $country\n     * @param array $payment\n     * @param float $currencyFactor\n     * @param array $dispatch\n     * @param float $discount_tax\n     *\n     * @return array\n     */\n    private function handlePaymentMeanSurcharge($country, $payment, $currencyFactor, $dispatch, $discount_tax)\n    {\n        $surcharge_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::PAYMENT_ABSOLUTE);\n        $percent_ordernumber = $this->cartOrderNumberProvider->get(CartOrderNumberProviderInterface::PAYMENT_PERCENT);\n\n        // Country surcharge\n        if (!empty($payment['country_surcharge'][$country['countryiso']])) {\n            $payment['surcharge'] += $payment['country_surcharge'][$country['countryiso']];\n        }\n        $payment['surcharge'] = round($payment['surcharge'] * $currencyFactor, 2);\n\n        // Fixed surcharge\n        if (!empty($payment['surcharge']) && (empty($dispatch) || $dispatch['surcharge_calculation'] == 3)) {\n            $surcharge = round($payment['surcharge'], 2);\n            $payment['surcharge'] = 0;\n\n            if ($surcharge > 0) {\n                $surcharge_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_add');\n            } else {\n                $surcharge_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_dev');\n            }\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $surcharge_name,\n                $surcharge_ordernumber,\n                $surcharge,\n                $discount_tax,\n                4\n            );\n        }\n\n        // Percentage surcharge\n        if (!empty($payment['debit_percent']) && (empty($dispatch) || $dispatch['surcharge_calculation'] != 2)) {\n            $amount = (float) $this->db->fetchOne(\n                'SELECT SUM(quantity*price) AS amount\n                FROM s_order_basket\n                WHERE sessionID = ? GROUP BY sessionID',\n                [$this->session->offsetGet('sessionId')]\n            );\n\n            $percent = round($amount / 100 * $payment['debit_percent'], 2);\n\n            if ($percent > 0) {\n                $percent_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_add');\n            } else {\n                $percent_name = $this->snippetManager\n                    ->getNamespace('backend/static/discounts_surcharges')\n                    ->get('payment_surcharge_dev');\n            }\n\n            $this->conditionalLineItemService->addConditionalLineItem(\n                $percent_name,\n                $percent_ordernumber,\n                $percent,\n                $discount_tax,\n                4\n            );\n        }\n\n        return $payment;\n    }\n\n    /**\n     * Convenience function to check if there is at least one order with the\n     * provided cleared status.\n     *\n     * @param int $cleared\n     *\n     * @return bool\n     */\n    private function riskCheckClearedLevel($cleared)\n    {\n        if (!$this->session->offsetGet('sUserId')) {\n            return false;\n        }\n\n        $checkOrder = $this->db->fetchRow(\n            'SELECT id FROM s_order\n             WHERE cleared = ? AND userID = ?',\n            [\n                $cleared,\n                $this->session->offsetGet('sUserId'),\n            ]\n        );\n\n        return $checkOrder && $checkOrder['id'];\n    }\n\n    /**\n     * Helper function to return the current date formatted\n     *\n     * @param string $format\n     *\n     * @return string\n     */\n    private function getCurrentDateFormatted($format = 'Y-m-d H:i:s')\n    {\n        $date = new DateTime();\n\n        return $date->format($format);\n    }\n\n    /**\n     * @return int\n     */\n    private function getBillingAddressId()\n    {\n        if ($this->session->offsetGet('checkoutBillingAddressId')) {\n            return (int) $this->session->offsetGet('checkoutBillingAddressId');\n        }\n        if (!$this->session->offsetGet('sUserId')) {\n            return 0;\n        }\n        $dbal = Shopware()->Container()->get(Connection::class);\n\n        return (int) $dbal->fetchColumn(\n            'SELECT default_billing_address_id\n             FROM s_user WHERE id = :id\n            ',\n            ['id' => $this->session->offsetGet('sUserId')]\n        );\n    }\n\n    /**\n     * @return int\n     */\n    private function getShippingAddressId()\n    {\n        if ($this->session->offsetGet('checkoutShippingAddressId')) {\n            return (int) $this->session->offsetGet('checkoutShippingAddressId');\n        }\n        if (!$this->session->offsetGet('sUserId')) {\n            return 0;\n        }\n        $dbal = Shopware()->Container()->get(Connection::class);\n\n        return (int) $dbal->fetchColumn(\n            'SELECT default_shipping_address_id\n             FROM s_user WHERE id = :id\n            ',\n            ['id' => $this->session->offsetGet('sUserId')]\n        );\n    }\n\n    /**\n     * @param Shopware_Components_Config $config\n     *\n     * @return bool\n     */\n    private function shouldVerifyCaptcha($config)\n    {\n        return $config->get('newsletterCaptcha') !== 'nocaptcha'\n            && !($config->get('noCaptchaAfterLogin') && Shopware()->Modules()->Admin()->sCheckUser());\n    }\n\n    /**\n     * @param string $amount\n     * @param string $amount_net\n     *\n     * @return QueryBuilder\n     */\n    private function getBasketQueryBuilder($amount, $amount_net)\n    {\n        $queryBuilder = $this->connection->createQueryBuilder()\n            ->select([\n                'MIN(d.instock>=b.quantity) as instock',\n                'MIN(d.instock>=(b.quantity+d.stockmin)) as stockmin',\n                'MIN(a.laststock) as laststock',\n                'SUM(d.weight*b.quantity) as weight',\n                'SUM(IF(a.id,b.quantity,0)) as count_article',\n                'MAX(b.shippingfree) as shippingfree',\n                'SUM(IF(b.modus=0,' . $amount . '/b.currencyFactor,0)) as amount',\n                'SUM(IF(b.modus=0,' . $amount_net . '/b.currencyFactor,0)) as amount_net',\n                'SUM(CAST(b.price as DECIMAL(10,2))*b.quantity) as amount_display',\n                'MAX(d.length) as `length`',\n                'MAX(d.height) as height',\n                'MAX(d.width) as width',\n                'u.id as userID',\n            ])\n            ->from('s_order_basket', 'b')\n            ->leftJoin('b', 's_articles', 'a', 'b.articleID = a.id AND b.modus = 0 AND b.esdarticle = 0')\n            ->leftJoin('a', 's_articles_details', 'd', '(d.ordernumber = b.ordernumber) AND d.articleID = a.id')\n            ->leftJoin('d', 's_articles_attributes', 'at', 'at.articledetailsID = d.id')\n            ->leftJoin('a', 's_core_tax', 't', 't.id = a.taxID')\n            ->leftJoin('b', 's_user', 'u', 'u.id = :userId AND u.active = 1')\n            ->leftJoin('u', 's_user_addresses', 'ub', 'ub.user_id = u.id AND ub.id = :billingAddressId')\n            ->leftJoin('u', 's_user_addresses', 'us', 'us.user_id = u.id AND us.id = :shippingAddressId')\n            ->where('b.sessionID = :sessionId')\n            ->groupBy('b.sessionID');\n\n        return $queryBuilder;\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    private function getShippingAddressData(ModelManager $entityManager, Customer $customer): ?array\n    {\n        $shippingAddress = null;\n\n        if ($this->session->offsetExists('checkoutShippingAddressId')) {\n            $shippingId = (int) $this->session->offsetGet('checkoutShippingAddressId');\n            $shippingAddress = $entityManager->find(Address::class, $shippingId);\n        }\n\n        if ($shippingAddress === null) {\n            $shippingAddress = $customer->getDefaultShippingAddress();\n        }\n\n        if (!$shippingAddress instanceof Address) {\n            return null;\n        }\n\n        $shippingAddressArray = $this->convertToLegacyAddressArray($shippingAddress);\n\n        $shippingAddressArray['attributes'] = $this->attributeLoader->load(\n            's_user_addresses_attributes',\n            $shippingAddress->getid()\n        );\n\n        return $shippingAddressArray;\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nuse PHPUnit\\Framework\\TestCase;\nuse Shopware\\Bundle\\AccountBundle\\Service\\CustomerServiceInterface;\nuse Shopware\\Models\\Customer\\Customer;\nuse Shopware\\Tests\\Functional\\Traits\\CustomerLoginTrait;\nuse Shopware\\Tests\\Functional\\Traits\\DatabaseTransactionBehaviour;\n\nclass sAdminSGetUserDataTest extends TestCase\n{\n    use CustomerLoginTrait;\n    use DatabaseTransactionBehaviour;\n\n    public function setUp(): void\n    {\n        $sql = file_get_contents(__DIR__ . '/fixtures/user_address_change.sql');\n        static::assertIsString($sql);\n\n        Shopware()->Container()->get('dbal_connection')->exec($sql);\n\n        parent::setUp();\n    }\n\n    public function testSGetUserDataWithPreselectedShippingAddress(): void\n    {\n        $countryId = 21;\n\n        $this->loginCustomer(\n            'f375fe1b4ad9c6f2458844226831463f',\n            3,\n            'unit@test.com',\n            '2021-07-09 07:08:11'\n        );\n\n        $session = Shopware()->Container()->get('session');\n        static::assertInstanceOf(\\Enlight_Components_Session_Namespace::class, $session);\n        $session->offsetSet('checkoutShippingAddressId', $countryId);\n\n        $result = Shopware()->Modules()->Admin()->sGetUserData();\n        static::assertIsArray($result);\n\n        $this->logOutCustomer();\n        $session->offsetUnset('checkoutShippingAddressId');\n\n        static::assertSame($countryId, $result['shippingaddress']['country']['id']);\n        static::assertSame('FooBar, 12', $result['shippingaddress']['street']);\n    }\n\n    public function testSGetUserDataWithAddressUserIdNotEqualsToUser(): void\n    {\n        $shippingAddress = 701;\n\n        $sql = 'UPDATE s_user_addresses SET user_id = 4 WHERE id = 701';\n        Shopware()->Container()->get('dbal_connection')->exec($sql);\n\n        $this->loginCustomer(\n            'f375fe1b4ad9c6f2458844226831463f',\n            3,\n            'unit@test.com',\n            '2021-07-09 07:08:11'\n        );\n\n        $session = Shopware()->Container()->get('session');\n        static::assertInstanceOf(\\Enlight_Components_Session_Namespace::class, $session);\n        $session->offsetSet('checkoutShippingAddressId', $shippingAddress);\n\n        $result = Shopware()->Modules()->Admin()->sGetUserData();\n        static::assertIsArray($result);\n\n        $this->logOutCustomer();\n        $session->offsetUnset('checkoutShippingAddressId');\n\n        static::assertSame($shippingAddress, $result['shippingaddress']['id']);\n    }\n\n    public function testMultipleLoginsWithPasswordChange(): void\n    {\n        $customerId = 3;\n        $customerMail = 'unit@test.com';\n\n        $this->loginCustomer(\n            '2af1572ba5d04d6cbb916cce10f31d2b',\n            $customerId,\n            $customerMail,\n            '2021-07-09 07:08:11'\n        );\n\n        /** @var CustomerServiceInterface $customerService */\n        $customerService = Shopware()->Container()->get('shopware_account.customer_service');\n        $customerRepository = Shopware()->Container()->get('models')->getRepository(Customer::class);\n        $customer = $customerRepository->find($customerId);\n\n        static::assertInstanceOf(Customer::class, $customer);\n\n        $customer->setPassword('a1197019-546e-445a-8d48-c6813e3381ed');\n\n        $customerService->update($customer);\n\n        /*\n         * The password_change_date has been updated now, but the session used\n         * still has the old value of '2021-07-09 07:08:11', so sCheckUser\n         * should fail.\n         */\n        static::assertFalse(Shopware()->Modules()->Admin()->sCheckUser());\n\n        $this->loginCustomer(\n            '2af1572ba5d04d6cbb916cce10f31d2b',\n            $customerId,\n            $customerMail,\n            $customer->getPasswordChangeDate()->format('Y-m-d H:i:s')\n        );\n\n        static::assertTrue(Shopware()->Modules()->Admin()->sCheckUser());\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\nnamespace Shopware\\Tests\\Functional\\Traits;\n\nuse Enlight_Components_Session_Namespace;\nuse RuntimeException;\n\ntrait CustomerLoginTrait\n{\n    /**\n     * Logged in a customer\n     */\n    public function loginCustomer(\n        string $sessionId = 'sessionId',\n        int $customerId = 1,\n        string $email = 'test@example.com',\n        ?string $passwordChangeDate = null,\n        int $countryId = 2,\n        int $areaId = 3,\n        string $customerGroupKey = 'EK',\n        ?int $stateId = null\n    ): void {\n        Shopware()->Container()->reset('modules');\n        $session = Shopware()->Container()->get('session');\n        if (!$session instanceof Enlight_Components_Session_Namespace) {\n            throw new RuntimeException('Cannot initialize session');\n        }\n\n        if ($passwordChangeDate === null) {\n            $result = Shopware()->Container()->get('dbal_connection')->fetchFirstColumn(\n                'SELECT `password_change_date` FROM `s_user` WHERE `id` = :customerId;',\n                [\n                    'customerId' => $customerId,\n                ]\n            );\n\n            $passwordChangeDate = array_pop($result);\n        }\n\n        $session->offsetSet('sessionId', $sessionId);\n        $session->offsetSet('sUserId', $customerId);\n        $session->offsetSet('sUserMail', $email);\n        $session->offsetSet('sUserPasswordChangeDate', $passwordChangeDate);\n        $session->offsetSet('sCountry', $countryId);\n        $session->offsetSet('sArea', $areaId);\n        $session->offsetSet('sUserGroup', $customerGroupKey);\n        $session->offsetSet('sState', $stateId);\n\n        Shopware()->Container()->get('dbal_connection')->executeQuery(\n            'UPDATE s_user SET sessionID = :sessionId, lastlogin = now() WHERE id=:userId',\n            [\n                ':sessionId' => $sessionId,\n                ':userId' => $customerId,\n            ]\n        );\n\n        static::assertTrue(Shopware()->Modules()->Admin()->sCheckUser());\n    }\n\n    public function logOutCustomer(): void\n    {\n        $session = Shopware()->Container()->get('session');\n        $session->offsetUnset('sessionId');\n        $session->offsetUnset('sUserId');\n        $session->offsetUnset('sUserMail');\n        $session->offsetUnset('sUserPasswordChangeDate');\n        $session->offsetUnset('sUserGroup');\n        $session->offsetUnset('sCountry');\n        $session->offsetUnset('sArea');\n        $session->offsetUnset('sState');\n\n        static::assertFalse(Shopware()->Modules()->Admin()->sCheckUser());\n    }\n}\n"], "filenames": ["UPGRADE-5.7.md", "engine/Shopware/Controllers/Frontend/Account.php", "engine/Shopware/Core/sAdmin.php", "tests/Functional/Core/sAdminSGetUserDataTest.php", "tests/Functional/Traits/CustomerLoginTrait.php"], "buggy_code_start_loc": [43, 727, 774, 25, 38], "buggy_code_end_loc": [43, 727, 3625, 88, 74], "fixing_code_start_loc": [44, 728, 775, 26, 39], "fixing_code_end_loc": [56, 734, 3634, 137, 89], "type": "CWE-613", "message": "Shopware is an open source e-commerce software platform. In affected versions shopware would not invalidate a user session in the event of a password change. With version 5.7.7 the session validation was adjusted, so that sessions created prior to the latest password change of a customer account can't be used to login with said account. This also means, that upon a password change, all existing sessions for a given customer account are automatically considered invalid. There is no workaround for this issue.", "other": {"cve": {"id": "CVE-2022-21652", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-05T20:15:08.117", "lastModified": "2022-01-12T18:28:21.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Shopware is an open source e-commerce software platform. In affected versions shopware would not invalidate a user session in the event of a password change. With version 5.7.7 the session validation was adjusted, so that sessions created prior to the latest password change of a customer account can't be used to login with said account. This also means, that upon a password change, all existing sessions for a given customer account are automatically considered invalid. There is no workaround for this issue."}, {"lang": "es", "value": "Shopware es una plataforma de software de comercio electr\u00f3nico de c\u00f3digo abierto. En las versiones afectadas shopware no invalidaba la sesi\u00f3n de un usuario en caso de cambio de contrase\u00f1a. Con la versi\u00f3n 5.7.7 se ajust\u00f3 la comprobaci\u00f3n de la sesi\u00f3n, de modo que las sesiones creadas antes del \u00faltimo cambio de contrase\u00f1a de una cuenta de cliente no pueden ser usadas para iniciar sesi\u00f3n con dicha cuenta. Esto tambi\u00e9n significa que, al cambiar la contrase\u00f1a, todas las sesiones existentes para una cuenta de cliente determinada son consideradas autom\u00e1ticamente inv\u00e1lidas. No se presenta ninguna medida de mitigaci\u00f3n para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.7.3", "versionEndExcluding": "5.7.7", "matchCriteriaId": "9C2597B8-803D-453D-9284-014FEABC6262"}]}]}], "references": [{"url": "https://docs.shopware.com/en/shopware-5-en/securityupdates/security-update-01-2022", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/shopware/shopware/commit/47ebd126a94f4b019b6fde64c0df3d18d74ef7d0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/shopware/shopware/security/advisories/GHSA-p523-jrph-qjc6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/shopware/commit/47ebd126a94f4b019b6fde64c0df3d18d74ef7d0"}}