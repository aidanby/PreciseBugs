{"buggy_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Task Duplication controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass TaskDuplicationController extends BaseController\n{\n    /**\n     * Duplicate a task\n     *\n     * @access public\n     */\n    public function duplicate()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->getStringParam('confirmation') === 'yes') {\n            $this->checkCSRFParam();\n            $task_id = $this->taskDuplicationModel->duplicate($task['id']);\n\n            if ($task_id > 0) {\n                $this->flash->success(t('Task created successfully.'));\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task_id)));\n            } else {\n                $this->flash->failure(t('Unable to create this task.'));\n                return $this->response->redirect($this->helper->url->to('TaskDuplicationController', 'duplicate', array('task_id' => $task['id'])), true);\n            }\n        }\n\n        return $this->response->html($this->template->render('task_duplication/duplicate', array(\n            'task' => $task,\n        )));\n    }\n\n    /**\n     * Move a task to another project\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->isPost()) {\n            $values = $this->request->getValues();\n            list($valid, ) = $this->taskValidator->validateProjectModification($values);\n\n            if ($valid && $this->taskProjectMoveModel->moveToProject($task['id'],\n                                                                $values['project_id'],\n                                                                $values['swimlane_id'],\n                                                                $values['column_id'],\n                                                                $values['category_id'],\n                                                                $values['owner_id'])) {\n                $this->flash->success(t('Task updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])));\n            }\n\n            $this->flash->failure(t('Unable to update your task.'));\n        }\n\n        return $this->chooseDestination($task, 'task_duplication/move');\n    }\n\n    /**\n     * Duplicate a task to another project\n     *\n     * @access public\n     */\n    public function copy()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->isPost()) {\n            $values = $this->request->getValues();\n            list($valid, ) = $this->taskValidator->validateProjectModification($values);\n\n            if ($valid) {\n                $task_id = $this->taskProjectDuplicationModel->duplicateToProject(\n                    $task['id'], $values['project_id'], $values['swimlane_id'],\n                    $values['column_id'], $values['category_id'], $values['owner_id']\n                );\n\n                if ($task_id > 0) {\n                    $this->flash->success(t('Task created successfully.'));\n                    return $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $task['project_id'])), true);\n                }\n            }\n\n            $this->flash->failure(t('Unable to create your task.'));\n        }\n\n        return $this->chooseDestination($task, 'task_duplication/copy');\n    }\n\n    /**\n     * Choose destination when move/copy task to another project\n     *\n     * @access private\n     * @param  array   $task\n     * @param  string  $template\n     */\n    private function chooseDestination(array $task, $template)\n    {\n        $values = array();\n        $projects_list = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n\n        unset($projects_list[$task['project_id']]);\n\n        if (! empty($projects_list)) {\n            $dst_project_id = $this->request->getIntegerParam('dst_project_id', key($projects_list));\n\n            $swimlanes_list = $this->swimlaneModel->getList($dst_project_id, false, true);\n            $columns_list = $this->columnModel->getList($dst_project_id);\n            $categories_list = $this->categoryModel->getList($dst_project_id);\n            $users_list = $this->projectUserRoleModel->getAssignableUsersList($dst_project_id);\n\n            $values = $this->taskDuplicationModel->checkDestinationProjectValues($task);\n            $values['project_id'] = $dst_project_id;\n        } else {\n            $swimlanes_list = array();\n            $columns_list = array();\n            $categories_list = array();\n            $users_list = array();\n        }\n\n        $this->response->html($this->template->render($template, array(\n            'values' => $values,\n            'task' => $task,\n            'projects_list' => $projects_list,\n            'swimlanes_list' => $swimlanes_list,\n            'columns_list' => $columns_list,\n            'categories_list' => $categories_list,\n            'users_list' => $users_list,\n        )));\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\n\n/**\n * Task Duplication controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass TaskDuplicationController extends BaseController\n{\n    /**\n     * Duplicate a task\n     *\n     * @access public\n     */\n    public function duplicate()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->getStringParam('confirmation') === 'yes') {\n            $this->checkCSRFParam();\n            $task_id = $this->taskDuplicationModel->duplicate($task['id']);\n\n            if ($task_id > 0) {\n                $this->flash->success(t('Task created successfully.'));\n                return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task_id)));\n            } else {\n                $this->flash->failure(t('Unable to create this task.'));\n                return $this->response->redirect($this->helper->url->to('TaskDuplicationController', 'duplicate', array('task_id' => $task['id'])), true);\n            }\n        }\n\n        return $this->response->html($this->template->render('task_duplication/duplicate', array(\n            'task' => $task,\n        )));\n    }\n\n    /**\n     * Move a task to another project\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->isPost()) {\n            $values = $this->request->getValues();\n            list($valid, ) = $this->taskValidator->validateProjectModification($values);\n\n            if ($valid) {\n                if (! $this->projectPermissionModel->isUserAllowed($values['project_id'], $this->userSession->getId())) {\n                    throw new AccessForbiddenException();\n                }\n\n                if ($this->taskProjectMoveModel->moveToProject($task['id'],\n                                                                $values['project_id'],\n                                                                $values['swimlane_id'],\n                                                                $values['column_id'],\n                                                                $values['category_id'],\n                                                                $values['owner_id'])) {\n                    $this->flash->success(t('Task updated successfully.'));\n                    return $this->response->redirect($this->helper->url->to('TaskViewController', 'show', array('task_id' => $task['id'])));\n                }\n            }\n\n            $this->flash->failure(t('Unable to update your task.'));\n        }\n\n        return $this->chooseDestination($task, 'task_duplication/move');\n    }\n\n    /**\n     * Duplicate a task to another project\n     *\n     * @access public\n     */\n    public function copy()\n    {\n        $task = $this->getTask();\n\n        if ($this->request->isPost()) {\n            $values = $this->request->getValues();\n            list($valid, ) = $this->taskValidator->validateProjectModification($values);\n\n            if ($valid) {\n                if (! $this->projectPermissionModel->isUserAllowed($values['project_id'], $this->userSession->getId())) {\n                    throw new AccessForbiddenException();\n                }\n\n                $task_id = $this->taskProjectDuplicationModel->duplicateToProject(\n                    $task['id'],\n                    $values['project_id'],\n                    $values['swimlane_id'],\n                    $values['column_id'],\n                    $values['category_id'],\n                    $values['owner_id']\n                );\n\n                if ($task_id > 0) {\n                    $this->flash->success(t('Task created successfully.'));\n                    return $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $task['project_id'])), true);\n                }\n            }\n\n            $this->flash->failure(t('Unable to create your task.'));\n        }\n\n        return $this->chooseDestination($task, 'task_duplication/copy');\n    }\n\n    /**\n     * Choose destination when move/copy task to another project\n     *\n     * @access private\n     * @param  array   $task\n     * @param  string  $template\n     */\n    private function chooseDestination(array $task, $template)\n    {\n        $values = array();\n        $projects_list = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n\n        unset($projects_list[$task['project_id']]);\n\n        if (! empty($projects_list)) {\n            $dst_project_id = $this->request->getIntegerParam('dst_project_id', key($projects_list));\n\n            $swimlanes_list = $this->swimlaneModel->getList($dst_project_id, false, true);\n            $columns_list = $this->columnModel->getList($dst_project_id);\n            $categories_list = $this->categoryModel->getList($dst_project_id);\n            $users_list = $this->projectUserRoleModel->getAssignableUsersList($dst_project_id);\n\n            $values = $this->taskDuplicationModel->checkDestinationProjectValues($task);\n            $values['project_id'] = $dst_project_id;\n        } else {\n            $swimlanes_list = array();\n            $columns_list = array();\n            $categories_list = array();\n            $users_list = array();\n        }\n\n        $this->response->html($this->template->render($template, array(\n            'values' => $values,\n            'task' => $task,\n            'projects_list' => $projects_list,\n            'swimlanes_list' => $swimlanes_list,\n            'columns_list' => $columns_list,\n            'categories_list' => $categories_list,\n            'users_list' => $users_list,\n        )));\n    }\n}\n"], "filenames": ["app/Controller/TaskDuplicationController.php"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [86], "fixing_code_start_loc": [4], "fixing_code_end_loc": [102], "type": "CWE-862", "message": "Kanboard is open source project management software that focuses on the Kanban methodology. Versions prior to 1.2.30 are subject to a missing access control vulnerability that allows a user with low privileges to create or transfer tasks to any project within the software, even if they have not been invited or the project is personal. The vulnerable features are `Duplicate to project` and `Move to project`, which both utilize the `checkDestinationProjectValues()` function to check his values. This issue has been addressed in version 1.2.30. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-33968", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-05T20:15:09.750", "lastModified": "2023-06-12T17:56:58.817", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Kanboard is open source project management software that focuses on the Kanban methodology. Versions prior to 1.2.30 are subject to a missing access control vulnerability that allows a user with low privileges to create or transfer tasks to any project within the software, even if they have not been invited or the project is personal. The vulnerable features are `Duplicate to project` and `Move to project`, which both utilize the `checkDestinationProjectValues()` function to check his values. This issue has been addressed in version 1.2.30. Users are advised to upgrade. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.30", "matchCriteriaId": "082DAE98-80F0-4423-8581-AB8D0051EAA1"}]}]}], "references": [{"url": "https://github.com/kanboard/kanboard/commit/c20be8f5fa26e54005a90c645e80b11481a65053", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/kanboard/kanboard/security/advisories/GHSA-gf8r-4p6m-v8vr", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/c20be8f5fa26e54005a90c645e80b11481a65053"}}