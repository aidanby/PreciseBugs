{"buggy_code": ["<?php\n\n/**\n * Upload handler for the filemanager/util/browser dialog.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Invalid path')));\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('No file uploaded or file too large.')));\n\treturn;\n}\n\nif (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {\n\t$errors = array (\n\t\t1 => __ ('File size is too large.'),\n\t\t2 => __ ('File size is too large.'),\n\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t4 => __ ('No file was uploaded.'),\n\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t);\n\techo json_encode (array ('success' => false, 'error' => $errors[$_FILES['file']['error']]));\n\treturn;\n}\n\nif (preg_match ('/\\.(php5?|phtml|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);\n\nif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('A file by that name already exists.')));\n\treturn;\n}\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('success' => false, 'error' => __ ('The file name contains invalid characters.')));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t));\n} else {\n\techo json_encode (array ('success' => false, 'error' => __ ('Unable to save the file') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\necho json_encode (array ('success' => true, 'data' => __ ('File saved.')));\n"], "fixing_code": ["<?php\n\n/**\n * Upload handler for the filemanager/util/browser dialog.\n */\n\n$page->layout = false;\n\nif (! User::require_acl ('admin') || ! User::require_acl ('filemanager')) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Must be logged in to upload')));\n\treturn;\n}\n\n$root = getcwd () . '/' . conf('Paths','filemanager_path') . '/';\n\nif (! FileManager::verify_folder ($_POST['path'], $root)) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Invalid path')));\n\treturn;\n}\n\nif (! isset ($_FILES['file'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('No file uploaded or file too large.')));\n\treturn;\n}\n\nif (isset ($_FILES['file']['error']) && $_FILES['file']['error'] > 0) {\n\t$errors = array (\n\t\t1 => __ ('File size is too large.'),\n\t\t2 => __ ('File size is too large.'),\n\t\t3 => __ ('The file was only partially uploaded.'),\n\t\t4 => __ ('No file was uploaded.'),\n\t\t6 => __ ('Missing a temporary folder, check your PHP setup.'),\n\t\t7 => __ ('Failed to write the file to disk.'),\n\t\t8 => __ ('A PHP extension stopped the file upload.')\n\t);\n\techo json_encode (array ('success' => false, 'error' => $errors[$_FILES['file']['error']]));\n\treturn;\n}\n\n// some browsers may urlencode the file name\n$_FILES['file']['name'] = urldecode ($_FILES['file']['name']);\n\nif (preg_match ('/\\.(php5?|phtml|js|rb|py|pl|sh|bash|exe)$/i', $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('Cannot upload executable files due to security.')));\n\treturn;\n}\n\nif (@file_exists ($root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\techo json_encode (array ('success' => false, 'error' => __ ('A file by that name already exists.')));\n\treturn;\n}\nif (strpos ($_FILES['file']['name'], '..') !== false) {\n\techo json_encode (array ('success' => false, 'error' => __ ('The file name contains invalid characters.')));\n\treturn;\n}\n\nif (@move_uploaded_file ($_FILES['file']['tmp_name'], $root . $_POST['path'] . '/' . $_FILES['file']['name'])) {\n\t@chmod ($root . $_POST['path'] . '/' . $_FILES['file']['name'], 0666);\n\t$this->hook ('filemanager/add', array (\n\t\t'file' => $_POST['path'] . '/' . $_FILES['file']['name']\n\t));\n} else {\n\techo json_encode (array ('success' => false, 'error' => __ ('Unable to save the file') . ': ' . $_FILES['file']['name']));\n\treturn;\n}\n\necho json_encode (array ('success' => true, 'data' => __ ('File saved.')));\n"], "filenames": ["apps/filemanager/handlers/upload/drop.php"], "buggy_code_start_loc": [39], "buggy_code_end_loc": [47], "fixing_code_start_loc": [40], "fixing_code_end_loc": [46], "type": "CWE-20", "message": "apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the \"Cannot upload executable files\" protection mechanism.", "other": {"cve": {"id": "CVE-2018-15601", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-21T02:29:00.227", "lastModified": "2018-10-19T14:06:38.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "apps/filemanager/handlers/upload/drop.php in Elefant CMS 2.0.3 performs a urldecode step too late in the \"Cannot upload executable files\" protection mechanism."}, {"lang": "es", "value": "apps/filemanager/handlers/upload/drop.php en Elefant CMS 2.0.3 realiza un paso urldecode demasiado tarde en el mecanismo de protecci\u00f3n \"Cannot upload executable files\"."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:elefantcms:elefantcms:2.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "4BCE4E60-B005-442B-9AD3-2AD90A8178B7"}]}]}], "references": [{"url": "https://github.com/jbroadway/elefant/commit/afb3346e50b992bcba143660ca2149e563430e05", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jbroadway/elefant/commit/afb3346e50b992bcba143660ca2149e563430e05"}}