{"buggy_code": ["<?php\n\nnamespace App\\Controller\\Component;\n\nuse Cake\\Controller\\Component;\nuse Cake\\Error\\Debugger;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Inflector;\nuse Cake\\View\\ViewBuilder;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\NotFoundException;\n\nclass CRUDComponent extends Component\n{\n    public $components = ['RestResponse'];\n\n    public function initialize(array $config): void\n    {\n        $this->Controller = $this->getController();\n        $this->Table = $config['table'];\n        $this->request = $config['request'];\n        $this->TableAlias = $this->Table->getAlias();\n        $this->ObjectAlias = Inflector::singularize($this->TableAlias);\n        $this->MetaFields = $config['MetaFields'];\n        $this->MetaTemplates = $config['MetaTemplates'];\n    }\n\n    public function index(array $options): void\n    {\n        if (!empty($options['quickFilters'])) {\n            if (empty($options['filters'])) {\n                $options['filters'] = [];\n            }\n            $options['filters'][] = 'quickFilter';\n        }\n        $options['filters'][] = 'filteringLabel';\n        if ($this->taggingSupported()) {\n            $options['filters'][] = 'filteringTags';\n        }\n\n        $optionFilters = empty($options['filters']) ? [] : $options['filters'];\n        foreach ($optionFilters as $i => $filter) {\n            $optionFilters[] = \"{$filter} !=\";\n        }\n        $params = $this->Controller->ParamHandler->harvestParams($optionFilters);\n        $query = $this->Table->find();\n        if (!empty($options['filterFunction'])) {\n            $query = $options['filterFunction']($query);\n        }\n        $query = $this->setFilters($params, $query, $options);\n        $query = $this->setQuickFilters($params, $query, empty($options['quickFilters']) ? [] : $options['quickFilters']);\n        if (!empty($options['conditions'])) {\n            $query->where($options['conditions']);\n        }\n        if (!empty($options['contain'])) {\n            $query->contain($options['contain']);\n        }\n        if ($this->taggingSupported()) {\n            $query->contain('Tags');\n        }\n        if (!empty($options['fields'])) {\n            $query->select($options['fields']);\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $data = $query->all();\n            if (isset($options['hidden'])) {\n                $data->each(function($value, $key) use ($options) {\n                    $hidden = is_array($options['hidden']) ? $options['hidden'] : [$options['hidden']];\n                    $value->setHidden($hidden);\n                    return $value;\n                });\n            }\n            if (isset($options['afterFind'])) {\n                $function = $options['afterFind'];\n                if (is_callable($options['afterFind'])) {\n                    $function = $options['afterFind'];\n                    $data->each(function($value, $key) use ($function) {\n                        return $function($value);\n                    });\n                } else {\n                    $t = $this->Table;\n                    $data->each(function($value, $key) use ($t, $function) {\n                        return $t->$function($value);\n                    });\n                }\n            }\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->loadComponent('Paginator');\n            $data = $this->Controller->Paginator->paginate($query, $this->Controller->paginate ?? []);\n            if (isset($options['afterFind'])) {\n                $function = $options['afterFind'];\n                if (is_callable($options['afterFind'])) {\n                    $function = $options['afterFind'];\n                    $data->each(function($value, $key) use ($function) {\n                        return $function($value);\n                    });\n                } else {\n                    $t = $this->Table;\n                    $data->each(function($value, $key) use ($t, $function) {\n                        return $t->$function($value);\n                    });\n                }\n            }\n            $this->setFilteringContext($options['contextFilters'] ?? [], $params);\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function filtering(): void\n    {\n        if ($this->taggingSupported()) {\n            $this->Controller->set('taggingEnabled', true);\n            $this->setAllTags();\n        }\n        $filters = !empty($this->Controller->filterFields) ? $this->Controller->filterFields : [];\n        $this->Controller->set('filters', $filters);\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/filters');\n    }\n\n    /**\n     * getResponsePayload Returns the adaquate response payload based on the request context\n     *\n     * @return false or Array\n     */\n    public function getResponsePayload()\n    {\n        if ($this->Controller->ParamHandler->isRest()) {\n            return $this->Controller->restResponsePayload;\n        } else if ($this->Controller->ParamHandler->isAjax() && $this->request->is(['post', 'put'])) {\n            return $this->Controller->ajaxResponsePayload;\n        }\n        return false;\n    }\n\n    private function getMetaTemplates()\n    {\n        $metaTemplates = [];\n        if (!empty($this->Table->metaFields)) {\n            $metaQuery = $this->MetaTemplates->find();\n            $metaQuery\n                ->order(['is_default' => 'DESC'])\n                ->where([\n                    'scope' => $this->Table->metaFields,\n                    'enabled' => 1\n                ]);\n            $metaQuery->contain(['MetaTemplateFields']);\n            $metaTemplates = $metaQuery->all();\n        }\n        $this->Controller->set('metaTemplates', $metaTemplates);\n        return true;\n    }\n\n    public function add(array $params = []): void\n    {\n        $this->getMetaTemplates();\n        $data = $this->Table->newEmptyEntity();\n        if ($this->request->is('post')) {\n            $patchEntityParams = [\n                'associated' => [],\n                'accessibleFields' => $data->getAccessibleFieldForNew(),\n            ];\n            if (!empty($params['id'])) {\n                unset($params['id']);\n            }\n            $input = $this->__massageInput($params);\n            if (!empty($params['fields'])) {\n                $patchEntityParams['fields'] = $params['fields'];\n            }\n            $data = $this->Table->patchEntity($data, $input, $patchEntityParams);\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n                if ($data === false) {\n                    throw new NotFoundException(__('Could not save {0} due to the input failing to meet expectations. Your input is bad and you should feel bad.', $this->ObjectAlias));\n                }\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('{0} added.', $this->ObjectAlias);\n                if (!empty($input['metaFields'])) {\n                    $this->saveMetaFields($data->id, $input);\n                }\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($savedData, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    if (!empty($params['displayOnSuccess'])) {\n                        $displayOnSuccess = $this->renderViewInVariable($params['displayOnSuccess'], ['entity' => $data]);\n                        $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'add', $savedData, $message, ['displayOnSuccess' => $displayOnSuccess]);\n                    } else {\n                        $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'add', $savedData, $message);\n                    }\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $data->id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $this->Controller->isFailResponse = true;\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be added.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : PHP_EOL . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($message, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'add', $data, $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        if (!empty($params['fields'])) {\n            $this->Controller->set('fields', $params['fields']);\n        }\n        $this->Controller->entity = $data;\n        $this->Controller->set('entity', $data);\n    }\n\n    public function prepareValidationMessage($errors)\n    {\n        $validationMessage = '';\n        if (!empty($errors)) {\n            if (count($errors) == 1) {\n                $field = array_keys($errors)[0];\n                $fieldError = implode(', ', array_values($errors[$field]));\n                $validationMessage = __('{0}: {1}', $field, $fieldError);\n            } else {\n                $validationMessage = __('There has been validation issues with multiple fields');\n            }\n        }\n        return $validationMessage;\n    }\n\n    private function prepareValidationError($data)\n    {\n        $validationMessage = '';\n        if (!empty($data->getErrors())) {\n            foreach ($data->getErrors() as $field => $errorData) {\n                $errorMessages = [];\n                foreach ($errorData as $key => $value) {\n                    $errorMessages[] = $value;\n                }\n                $validationMessage .= __('{0}: {1}', $field, implode(',', $errorMessages));\n            }\n        }\n        return $validationMessage;\n    }\n\n    private function saveMetaFields($id, $input)\n    {\n        $this->Table->saveMetaFields($id, $input, $this->Table);\n    }\n\n    private function __massageInput($params)\n    {\n        $input = $this->request->getData();\n        if (!empty($params['override'])) {\n            foreach ($params['override'] as $field => $value) {\n                $input[$field] = $value;\n            }\n        }\n        if (!empty($params['removeEmpty'])) {\n            foreach ($params['removeEmpty'] as $removeEmptyField) {\n                if (empty($input[$removeEmptyField])) {\n                    unset($input[$removeEmptyField]);\n                }\n            }\n        }\n        return $input;\n    }\n\n    public function edit(int $id, array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $this->getMetaTemplates();\n        if ($this->taggingSupported()) {\n            $params['contain'][] = 'Tags';\n            $this->setAllTags();\n        }\n        $data = $this->Table->find()->where(['id' => $id]);\n        if (!empty($params['conditions'])) {\n            $data->where($params['conditions']);\n        }\n        $data = $data->first();\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data, $params);\n        }\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $data = $this->getMetaFields($id, $data);\n        if ($this->request->is(['post', 'put'])) {\n            $patchEntityParams = [\n                'associated' => []\n            ];\n            $input = $this->__massageInput($params);\n            if (!empty($params['fields'])) {\n                $patchEntityParams['fields'] = $params['fields'];\n            }\n            $data = $this->Table->patchEntity($data, $input, $patchEntityParams);\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('{0} `{1}` updated.', $this->ObjectAlias, $savedData->{$this->Table->getDisplayField()});\n                if (!empty($input['metaFields'])) {\n                    $this->MetaFields->deleteAll(['scope' => $this->Table->metaFields, 'parent_id' => $savedData->id]);\n                    $this->saveMetaFields($savedData->id, $input);\n                }\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($savedData, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'edit', $savedData, $message);\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be modified.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : PHP_EOL . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'edit', $data, $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        if (!empty($params['fields'])) {\n            $this->Controller->set('fields', $params['fields']);\n        }\n        $this->Controller->entity = $data;\n        $this->Controller->set('entity', $data);\n    }\n\n    public function attachMetaData($id, $data)\n    {\n        if (empty($this->Table->metaFields)) {\n            return $data;\n        }\n        $metaFieldScope = $this->Table->metaFields;\n        $query = $this->MetaTemplates->find()->where(['MetaTemplates.scope' => $metaFieldScope]);\n        $query->contain(['MetaTemplateFields.MetaFields' => function ($q) use ($id, $metaFieldScope) {\n            return $q->where(['MetaFields.scope' => $metaFieldScope, 'MetaFields.parent_id' => $id]);\n        }]);\n        $query\n            ->order(['MetaTemplates.is_default' => 'DESC'])\n            ->order(['MetaTemplates.name' => 'ASC']);\n        $metaTemplates = $query->all()->toArray();\n        $metaTemplates = $this->pruneEmptyMetaTemplates($metaTemplates);\n        $data['metaTemplates'] = $metaTemplates;\n        return $data;\n    }\n\n    public function pruneEmptyMetaTemplates($metaTemplates)\n    {\n        foreach ($metaTemplates as $i => $metaTemplate) {\n            foreach ($metaTemplate['meta_template_fields'] as $j => $metaTemplateField) {\n                if (empty($metaTemplateField['meta_fields'])) {\n                    unset($metaTemplates[$i]['meta_template_fields'][$j]);\n                }\n            }\n            if (empty($metaTemplates[$i]['meta_template_fields'])) {\n                unset($metaTemplates[$i]);\n            }\n        }\n        return $metaTemplates;\n    }\n\n    public function getMetaFields($id, $data)\n    {\n        if (empty($this->Table->metaFields)) {\n            return $data;\n        }\n        $query = $this->MetaFields->find();\n        $query->where(['MetaFields.scope' => $this->Table->metaFields, 'MetaFields.parent_id' => $id]);\n        $metaFields = $query->all();\n        $data['metaFields'] = [];\n        foreach($metaFields as $metaField) {\n            $data['metaFields'][$metaField->meta_template_id][$metaField->field] = $metaField->value;\n        }\n        return $data;\n    }\n\n    public function view(int $id, array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        if ($this->taggingSupported()) {\n            $params['contain'][] = 'Tags';\n            $this->setAllTags();\n        }\n\n        $data = $this->Table->get($id, $params);\n        $data = $this->attachMetaData($id, $data);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function delete($id=false, $params=[]): void\n    {\n        if ($this->request->is('get')) {\n            if(!empty($id)) {\n                $data = $this->Table->find()->where([$this->Table->getAlias() . '.id' => $id]);\n                if (!empty($params['conditions'])) {\n                    $data->where($params['conditions']);\n                }\n                if (!empty($params['contain'])) {\n                    $data->contain($params['contain']);\n                }\n                $data = $data->first();\n                if (empty($data)) {\n                    throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n                }\n                if (isset($params['beforeSave'])) {\n                    $data = $params['beforeSave']($data);\n                    if ($data === false) {\n                        throw new NotFoundException(__('Could not save {0} due to the input failing to meet expectations. Your input is bad and you should feel bad.', $this->ObjectAlias));\n                    }\n                }\n                $this->Controller->set('id', $data['id']);\n                $this->Controller->set('data', $data);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $skipExecution = false;\n                $data = $this->Table->find()->where([$this->Table->getAlias() . '.id' => $id]);\n                if (!empty($params['conditions'])) {\n                    $data->where($params['conditions']);\n                }\n                if (!empty($params['contain'])) {\n                    $data->contain($params['contain']);\n                }\n                $data = $data->first();\n                if (isset($params['beforeSave'])) {\n                    try {\n                        $data = $params['beforeSave']($data);\n                    } catch (Exception $e) {\n                        $data = false;\n                    }\n                }\n                if (!empty($data)) {\n                    $success = $this->Table->delete($data);\n                    $success = true;\n                } else {\n                    $success = false;\n                }\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} deleted.', $this->ObjectAlias),\n                __('All {0} have been deleted.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not delete {0}.', $this->ObjectAlias),\n                __('{0} / {1} {2} have been deleted.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('delete', $bulkSuccesses, $message, $data);\n        }\n        $this->Controller->set('metaGroup', 'ContactDB');\n        $this->Controller->set('scope', 'users');\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/delete');\n    }\n\n    public function tag($id=false): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if ($this->request->is('get')) {\n            $this->setAllTags();\n            if(!empty($id)) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $this->Controller->set('id', $entity->id);\n                $this->Controller->set('data', $entity);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $input = $this->request->getData();\n                $tagsToAdd = json_decode($input['tag_list']);\n                // patching will mirror tag in the DB, however, we only want to add tags\n                $input['tags'] = array_merge($tagsToAdd, $entity->tags);\n                $patchEntityParams = [\n                    'fields' => ['tags'],\n                ];\n                $entity = $this->Table->patchEntity($entity, $input, $patchEntityParams);\n                $savedData = $this->Table->save($entity);\n                $success = true;\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} tagged with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('All {0} have been tagged.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not tag {0} with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('{0} / {1} {2} have been tagged.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('tag', $bulkSuccesses, $message, $savedData);\n        }\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tagForm');\n    }\n\n    public function untag($id=false): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if ($this->request->is('get')) {\n            $this->setAllTags();\n            if(!empty($id)) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $this->Controller->set('id', $entity->id);\n                $this->Controller->set('data', $entity);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $input = $this->request->getData();\n                $tagsToRemove = json_decode($input['tag_list']);\n                // patching will mirror tag in the DB, however, we only want to remove tags\n                $input['tags'] = array_filter($entity->tags, function ($existingTag) use ($tagsToRemove) {\n                    return !in_array($existingTag->name, $tagsToRemove);\n                });\n                $patchEntityParams = [\n                    'fields' => ['tags'],\n                ];\n                $entity = $this->Table->patchEntity($entity, $input, $patchEntityParams);\n                $savedData = $this->Table->save($entity);\n                $success = true;\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} untagged with `{1}`.', $this->ObjectAlias, implode(', ', $tagsToRemove)),\n                __('All {0} have been untagged.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not untag {0} with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('{0} / {1} {2} have been untagged.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('tag', $bulkSuccesses, $message, $entity);\n        }\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tagForm');\n    }\n\n    public function viewTags(int $id, array $params = []): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        $params['contain'][] = 'Tags';\n        $data = $this->Table->get($id, $params);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        }\n        $this->Controller->set('entity', $data);\n        $this->setAllTags();\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tag');\n    }\n\n    public function setResponseForController($action, $success, $message, $data=[], $errors=null)\n    {\n        if ($success) {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n            } elseif ($this->Controller->ParamHandler->isAjax()) {\n                $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, $action, $data, $message);\n            } else {\n                $this->Controller->Flash->success($message);\n                $this->Controller->redirect($this->Controller->referer());\n            }\n        } else {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n            } elseif ($this->Controller->ParamHandler->isAjax()) {\n                $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, $action, $data, $message, !is_null($errors) ? $errors : $data->getErrors());\n            } else {\n                $this->Controller->Flash->error($message);\n                $this->Controller->redirect($this->Controller->referer());\n            }\n        }\n    }\n\n    private function getMessageBasedOnResult($isSuccess, $isBulk, $messageSingleSuccess, $messageBulkSuccess, $messageSingleFailure, $messageBulkFailure)\n    {\n        if ($isSuccess) {\n            $message = $isBulk ? $messageBulkSuccess : $messageSingleSuccess;\n        } else {\n            $message = $isBulk ? $messageBulkFailure : $messageSingleFailure;\n        }\n        return $message;\n    }\n\n    /**\n     * getIdsOrFail\n     *\n     * @param  mixed $id\n     * @return Array The ID converted to a list or the list of provided IDs from the request\n     * @throws NotFoundException when no ID could be found\n     */\n    public function getIdsOrFail($id=false): Array\n    {\n        $params = $this->Controller->ParamHandler->harvestParams(['ids']);\n        if (!empty($params['ids'])) {\n            $params['ids'] = json_decode($params['ids']);\n        }\n        $ids = [];\n        if (empty($id)) {\n            if (empty($params['ids'])) {\n                throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n            }\n            $ids = $params['ids'];\n        } else {\n            $id = $this->getInteger($id);\n            if (!is_null($id)) {\n                $ids = [$id];\n            } else {\n                throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n            }\n        }\n        return $ids;\n    }\n\n    private function getInteger($value)\n    {\n        return is_numeric($value) ? intval($value) : null;\n    }\n\n    protected function massageFilters(array $params): array\n    {\n        $massagedFilters = [\n            'simpleFilters' => [],\n            'relatedFilters' => []\n        ];\n        if (!empty($params)) {\n            foreach ($params as $param => $paramValue) {\n                if (strpos($param, '.') !== false) {\n                    $param = explode('.', $param);\n                    if ($param[0] === $this->Table->getAlias()) {\n                        $massagedFilters['simpleFilters'][implode('.', $param)] = $paramValue;\n                    } else {\n                        $massagedFilters['relatedFilters'][implode('.', $param)] = $paramValue;\n                    }\n                } else {\n                    $massagedFilters['simpleFilters'][$param] = $paramValue;\n                }\n            }\n        }\n        return $massagedFilters;\n    }\n\n    public function setQuickFilters(array $params, \\Cake\\ORM\\Query $query, array $quickFilterFields): \\Cake\\ORM\\Query\n    {\n        $queryConditions = [];\n        $this->Controller->set('quickFilter', empty($quickFilterFields) ? [] : $quickFilterFields);\n        if (!empty($params['quickFilter']) && !empty($quickFilterFields)) {\n            $this->Controller->set('quickFilterValue', $params['quickFilter']);\n            foreach ($quickFilterFields as $filterField) {\n                $likeCondition = false;\n                if (is_array($filterField)) {\n                    $likeCondition = reset($filterField);\n                    $filterFieldName = array_key_first($filterField);\n                    $queryConditions[$filterFieldName . ' LIKE'] = '%' . $params['quickFilter'] .'%';\n                } else {\n                    $queryConditions[$filterField] = $params['quickFilter'];\n                }\n            }\n            $query->where(['OR' => $queryConditions]);\n        } else {\n            $this->Controller->set('quickFilterValue', '');\n        }\n        return $query;\n    }\n\n    protected function setFilters($params, \\Cake\\ORM\\Query $query, array $options): \\Cake\\ORM\\Query\n    {\n        $filteringLabel = !empty($params['filteringLabel']) ? $params['filteringLabel'] : '';\n        unset($params['filteringLabel']);\n        $filteringTags = !empty($params['filteringTags']) && $this->taggingSupported() ? $params['filteringTags'] : '';\n        unset($params['filteringTags']);\n        $customFilteringFunction = '';\n        $chosenFilter = '';\n        if (!empty($options['contextFilters']['custom'])) {\n            foreach ($options['contextFilters']['custom'] as $filter) {\n                if ($filter['label'] == $filteringLabel) {\n                    $customFilteringFunction = $filter;\n                    $chosenFilter = $filter;\n                    break;\n                }\n            }\n        }\n\n        $activeFilters = [];\n        if (!empty($customFilteringFunction['filterConditionFunction'])) {\n            $query = $customFilteringFunction['filterConditionFunction']($query);\n            $activeFilters['filteringLabel'] = $filteringLabel;\n        } else {\n            if (!empty($chosenFilter)) {\n                $params = $this->massageFilters($chosenFilter['filterCondition']);\n            } else {\n                $params = $this->massageFilters($params);\n            }\n            if (!empty($params['simpleFilters'])) {\n                foreach ($params['simpleFilters'] as $filter => $filterValue) {\n                    $activeFilters[$filter] = $filterValue;\n                    if ($filter === 'quickFilter') {\n                        continue;\n                    }\n                    if (is_array($filterValue)) {\n                        $query->where([($filter . ' IN') => $filterValue]);\n                    } else {\n                        $query = $this->setValueCondition($query, $filter, $filterValue);\n                    }\n                }\n            }\n            if (!empty($params['relatedFilters'])) {\n                foreach ($params['relatedFilters'] as $filter => $filterValue) {\n                    $activeFilters[$filter] = $filterValue;\n                    $filterParts = explode('.', $filter);\n                    $query = $this->setNestedRelatedCondition($query, $filterParts, $filterValue);\n                }\n            }\n        }\n\n        if ($this->taggingSupported() && !empty($filteringTags)) {\n            $activeFilters['filteringTags'] = $filteringTags;\n            $query = $this->setTagFilters($query, $filteringTags);\n        }\n\n        $this->Controller->set('activeFilters', $activeFilters);\n        return $query;\n    }\n\n    protected function setTagFilters($query, $tags)\n    {\n        $modelAlias = $this->Table->getAlias();\n        $subQuery = $this->Table->find('tagged', [\n            'name' => $tags,\n            'forceAnd' => true\n        ])->select($modelAlias . '.id');\n        return $query->where([$modelAlias . '.id IN' => $subQuery]);\n    }\n\n    protected function setNestedRelatedCondition($query, $filterParts, $filterValue)\n    {\n        $modelName = $filterParts[0];\n        if (count($filterParts) == 2) {\n            $fieldName = implode('.', $filterParts);\n            $query = $this->setRelatedCondition($query, $modelName, $fieldName, $filterValue);\n        } else {\n            $filterParts = array_slice($filterParts, 1);\n            $query = $query->matching($modelName, function(\\Cake\\ORM\\Query $q) use ($filterParts, $filterValue) {\n                return $this->setNestedRelatedCondition($q, $filterParts, $filterValue);\n            });\n        }\n        return $query;\n    }\n\n    protected function setRelatedCondition($query, $modelName, $fieldName, $filterValue)\n    {\n        return $query->matching($modelName, function(\\Cake\\ORM\\Query $q) use ($fieldName, $filterValue) {\n            return $this->setValueCondition($q, $fieldName, $filterValue);\n        });\n    }\n\n    protected function setValueCondition($query, $fieldName, $value)\n    {\n        if (strlen(trim($value, '%')) === strlen($value)) {\n            return $query->where([$fieldName => $value]);\n        } else {\n            return $query->where(function ($exp, \\Cake\\ORM\\Query $q) use ($fieldName, $value) {\n                return $exp->like($fieldName, $value);\n            });\n        }\n    }\n\n    protected function setFilteringContext($contextFilters, $params)\n    {\n        $filteringContexts = [];\n        if (!isset($contextFilters['allow_all']) || $contextFilters['allow_all']) {\n            $filteringContexts[] = ['label' => __('All')];\n        }\n        if (!empty($contextFilters['fields'])) {\n            foreach ($contextFilters['fields'] as $field) {\n                $contextsFromField = $this->getFilteringContextFromField($field);\n                foreach ($contextsFromField as $contextFromField) {\n                    if (is_bool($contextFromField)) {\n                        $contextFromFieldText = sprintf('%s: %s', $field, $contextFromField ? 'true' : 'false');\n                    } else {\n                        $contextFromFieldText = sprintf('%s: %s', $field, $contextFromField);\n                    }\n                    $filteringContexts[] = [\n                        'label' => Inflector::humanize($contextFromFieldText),\n                        'filterCondition' => [\n                            $field => $contextFromField\n                        ]\n                    ];\n                }\n            }\n        }\n        if (!empty($contextFilters['custom'])) {\n            $filteringContexts = array_merge($filteringContexts, $contextFilters['custom']);\n        }\n        $this->Controller->set('filteringContexts', $filteringContexts);\n    }\n\n    public function setParentConditionsForMetaFields($query, array $metaConditions)\n    {\n        $metaTemplates = $this->MetaFields->MetaTemplates->find('list', [\n            'keyField' => 'name',\n            'valueField' => 'id'\n        ])->where(['name IN' => array_keys($metaConditions)])->all()->toArray();\n        $fieldsConditions = [];\n        foreach ($metaConditions as $templateName => $templateConditions) {\n            $metaTemplateID = isset($metaTemplates[$templateName]) ? $metaTemplates[$templateName] : -1;\n            foreach ($templateConditions as $conditions) {\n                $conditions['meta_template_id'] = $metaTemplateID;\n                $fieldsConditions[] = $conditions;\n            }\n        }\n        $matchingMetaQuery = $this->getParentIDQueryForMetaANDConditions($fieldsConditions);\n        return $query->where(['id IN' => $matchingMetaQuery]);\n    }\n\n    private function getParentIDQueryForMetaANDConditions(array $metaANDConditions)\n    {\n        if (empty($metaANDConditions)) {\n            throw new Exception('Invalid passed conditions');\n        }\n        foreach ($metaANDConditions as $i => $conditions) {\n            $metaANDConditions[$i]['scope'] = $this->Table->metaFields;\n        }\n        $firstCondition = $this->prefixConditions('MetaFields', $metaANDConditions[0]);\n        $conditionsToJoin = array_slice($metaANDConditions, 1);\n        $query = $this->MetaFields->find()\n            ->select('parent_id')\n            ->where($firstCondition);\n        foreach ($conditionsToJoin as $i => $conditions) {\n            $joinedConditions = $this->prefixConditions(\"m{$i}\", $conditions);\n            $joinedConditions[] = \"m{$i}.parent_id = MetaFields.parent_id\";\n            $query->rightJoin(\n                [\"m{$i}\" => 'meta_fields'],\n                $joinedConditions\n            );\n        }\n        return $query;\n    }\n\n    private function prefixConditions(string $prefix, array $conditions)\n    {\n        $prefixedConditions = [];\n        foreach ($conditions as $condField => $condValue) {\n            $prefixedConditions[\"${prefix}.${condField}\"] = $condValue;\n        }\n        return $prefixedConditions;\n    }\n\n    public function taggingSupported()\n    {\n        return $this->Table->behaviors()->has('Tag');\n    }\n\n    public function setAllTags()\n    {\n        $this->Tags = TableRegistry::getTableLocator()->get('Tags.Tags');\n        $allTags = $this->Tags->find()->all()->toList();\n        $this->Controller->set('allTags', $allTags);\n    }\n\n    public function toggle(int $id, string $fieldName = 'enabled', array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        $data = $this->Table->get($id, $params);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data, $params);\n        }\n        if ($this->request->is(['post', 'put'])) {\n            if (isset($params['force_state'])) {\n                $data->{$fieldName} = $params['force_state'];\n            } else {\n                $data->{$fieldName} = !$data->{$fieldName};\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                $message = __('{0} field {1}. (ID: {2} {3})',\n                    $fieldName,\n                    $data->{$fieldName} ? __('enabled') : __('disabled'),\n                    Inflector::humanize($this->ObjectAlias),\n                    $data->id\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'toggle', $savedData, $message);\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be modified.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : ' ' . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'toggle', $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            }\n        }\n        $this->Controller->set('entity', $data);\n        $this->Controller->set('fieldName', $fieldName);\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/toggle');\n    }\n\n    public function toggleEnabled(int $id, array $path, string $fieldName = 'enabled'): bool\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $data = $this->Table->get($id);\n        if ($this->request->is('post')) {\n            $data[$fieldName] = $data[$fieldName] ? true : false;\n            $this->Table->save($data);\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData(['value' => $data[$fieldName]], 'json');\n        } else {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData(['value' => $data[$fieldName]], 'json');\n            } else {\n                $this->Controller->set('fieldName', $fieldName);\n                $this->Controller->set('currentValue', $data[$fieldName]);\n                $this->Controller->set('path', $path);\n                $this->Controller->render('/genericTemplates/ajaxForm');\n            }\n        }\n    }\n\n    private function getFilteringContextFromField($field)\n    {\n        $exploded = explode('.', $field);\n        if (count($exploded) > 1) {\n            $model = $exploded[0];\n            $subField = $exploded[1];\n            $association = $this->Table->associations()->get($model);\n            $associationType = $association->type();\n            if ($associationType == 'oneToMany') {\n                $fieldToExtract = $subField;\n                $associatedTable = $association->getTarget();\n                $query = $associatedTable->find()->rightJoin(\n                    [$this->Table->getAlias() => $this->Table->getTable()],\n                    [sprintf('%s.id = %s.%s', $this->Table->getAlias(), $associatedTable->getAlias(), $association->getForeignKey())]\n                )\n                ->where([\n                    [\"${field} IS NOT\" => NULL]\n                ]);\n            } else if ($associationType == 'manyToOne') {\n                $fieldToExtract = sprintf('%s.%s', Inflector::singularize(strtolower($model)), $subField);\n                $query = $this->Table->find()->contain($model);\n            } else {\n                throw new Exception(\"Association ${associationType} not supported in CRUD Component\");\n            }\n        } else {\n            $fieldToExtract = $field;\n            $query = $this->Table->find();\n        }\n        return $query->select([$field])\n            ->distinct()\n            ->extract($fieldToExtract)\n            ->toList();\n    }\n\n    private function renderViewInVariable($templateRelativeName, $data)\n    {\n        $builder = new ViewBuilder();\n        $builder->disableAutoLayout()->setTemplate(\"{$this->TableAlias}/{$templateRelativeName}\");\n        $view = $builder->build($data);\n        return $view->render();\n    }\n}\n", "<?php\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Inflector;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Error\\Debugger;\n\nclass SharingGroupsController extends AppController\n{\n    public $filterFields = ['SharingGroups.uuid', 'SharingGroups.name', 'description', 'releasability', 'Organisations.name', 'Organisations.uuid'];\n    public $quickFilterFields = ['SharingGroups.uuid', ['SharingGroups.name' => true], ['description' => true], ['releasability' => true]];\n    public $containFields = ['SharingGroupOrgs', 'Organisations', 'Users' => ['fields' => ['id', 'username']]];\n\n    public function index()\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['SharingGroups.organisation_id'] = $currentUser['organisation_id'];\n        }\n        $this->CRUD->index([\n            'contain' => $this->containFields,\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n            'conditions' => $conditions\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function add()\n    {\n        $this->CRUD->add([\n            'override' => [\n                'user_id' => $this->ACL->getUser()['id']\n            ]\n        ]);\n        $dropdownData = [\n            'organisation' => $this->getAvailableOrgForSg($this->ACL->getUser())\n        ];\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set(compact('dropdownData'));\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function view($id)\n    {\n        $this->CRUD->view($id, [\n            'contain' => ['SharingGroupOrgs', 'Organisations', 'Users' => ['fields' => ['id', 'username']]]\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function edit($id = false)\n    {\n        $params = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            $params['conditions'] = ['organisation_id' => $currentUser['organisation_id']];\n        }\n        $params['fields'] = ['name', 'releasability', 'description', 'active'];\n        $this->CRUD->edit($id, $params);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $dropdownData = [\n            'organisation' => $this->getAvailableOrgForSg($this->ACL->getUser())\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('metaGroup', 'Trust Circles');\n        $this->render('add');\n    }\n\n    public function delete($id)\n    {\n        $this->CRUD->delete($id);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function addOrg($id)\n    {\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        $conditions = [];\n        $containedOrgIds = array_values(\\Cake\\Utility\\Hash::extract($sharingGroup, 'sharing_group_orgs.{n}.id'));\n        if (!empty($containedOrgIds)) {\n            $conditions = [\n                'NOT' => [\n                    'id IN' => $containedOrgIds\n                ]\n            ];\n        }\n        $dropdownData = [\n            'organisation' => $this->SharingGroups->Organisations->find('list', [\n                'sort' => ['name' => 'asc'],\n                'conditions' => $conditions\n            ])\n        ];\n        if ($this->request->is('post')) {\n            $input = $this->request->getData();\n            if (empty($input['organisation_id'])) {\n                throw new InvalidArgumentException(__('No organisation IDs passed.'));\n            }\n            if (!is_array($input['organisation_id'])) {\n                $input['organisation_id'] = [$input['organisation_id']];\n            }\n            $result = true;\n            foreach ($input['organisation_id'] as $org_id) {\n                $org = $this->SharingGroups->SharingGroupOrgs->get($org_id);\n                $result &= (bool)$this->SharingGroups->SharingGroupOrgs->link($sharingGroup, [$org]);\n            }\n            if ($result) {\n                $message = __('Organisation(s) added to the sharing group.');\n            } else {\n                $message = __('Organisation(s) could not be added to the sharing group.');\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($result) {\n                    $savedData = $this->SharingGroups->get($id, [\n                        'contain' => 'SharingGroupOrgs'\n                    ]);\n                    return $this->RestResponse->ajaxSuccessResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'addOrg', $savedData, $message);\n                } else {\n                    return $this->RestResponse->ajaxFailResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'addOrg', $sharingGroup, $message);;\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(['action' => 'view', $id]);\n            }\n        }\n        $this->set(compact('dropdownData'));\n    }\n\n    public function removeOrg($id, $org_id)\n    {\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        if ($this->request->is('post')) {\n            $org = $this->SharingGroups->SharingGroupOrgs->get($org_id);\n            $result = (bool)$this->SharingGroups->SharingGroupOrgs->unlink($sharingGroup, [$org]);\n            if ($result) {\n                $message = __('Organisation(s) removed from the sharing group.');\n            } else {\n                $message = __('Organisation(s) could not be removed to the sharing group.');\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($result) {\n                    $savedData = $this->SharingGroups->get($id, [\n                        'contain' => 'SharingGroupOrgs'\n                    ]);\n                    return $this->RestResponse->ajaxSuccessResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'removeOrg', $savedData, $message);\n                } else {\n                    return $this->RestResponse->ajaxFailResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'removeOrg', $sharingGroup, $message);\n                    ;\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(['action' => 'view', $id]);\n            }\n        }\n        $this->set('scope', 'sharing_groups');\n        $this->set('id', $org_id);\n        $this->set('sharingGroup', $sharingGroup);\n        $this->set('deletionText', __('Are you sure you want to remove Organisation #{0} from Sharing group #{1}?', $org_id, $sharingGroup['id']));\n        $this->set('postLinkParameters', ['action' => 'removeOrg', $id, $org_id]);\n        $this->viewBuilder()->setLayout('ajax');\n        $this->render('/genericTemplates/delete');\n    }\n\n    public function listOrgs($id)\n    {\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        $params = $this->ParamHandler->harvestParams(['quickFilter']);\n        if (!empty($params['quickFilter'])) {\n            foreach ($sharingGroup['sharing_group_orgs'] as $k => $org) {\n                if (strpos($org['name'], $params['quickFilter']) === false) {\n                    unset($sharingGroup['sharing_group_orgs'][$k]);\n                }\n            }\n            $sharingGroup['sharing_group_orgs'] = array_values($sharingGroup['sharing_group_orgs']);\n        }\n        $this->set('sharing_group_id', $id);\n        $this->set('sharing_group_orgs', $sharingGroup['sharing_group_orgs']);\n    }\n\n    private function getAvailableOrgForSg($user)\n    {\n        $organisations = [];\n        if (!empty($user['role']['perm_admin'])) {\n            $organisations = $this->SharingGroups->Organisations->find('list')->order(['name' => 'ASC'])->toArray();\n        } else {\n            $organisations = $this->SharingGroups->Organisations->find('list', [\n                'sort' => ['name' => 'asc'],\n                'conditions' => [\n                    'id' => $user['organisation_id']\n                ]\n            ]);\n        }\n        return $organisations;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controller\\Component;\n\nuse Cake\\Controller\\Component;\nuse Cake\\Error\\Debugger;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Inflector;\nuse Cake\\View\\ViewBuilder;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\NotFoundException;\n\nclass CRUDComponent extends Component\n{\n    public $components = ['RestResponse'];\n\n    public function initialize(array $config): void\n    {\n        $this->Controller = $this->getController();\n        $this->Table = $config['table'];\n        $this->request = $config['request'];\n        $this->TableAlias = $this->Table->getAlias();\n        $this->ObjectAlias = Inflector::singularize($this->TableAlias);\n        $this->MetaFields = $config['MetaFields'];\n        $this->MetaTemplates = $config['MetaTemplates'];\n    }\n\n    public function index(array $options): void\n    {\n        if (!empty($options['quickFilters'])) {\n            if (empty($options['filters'])) {\n                $options['filters'] = [];\n            }\n            $options['filters'][] = 'quickFilter';\n        }\n        $options['filters'][] = 'filteringLabel';\n        if ($this->taggingSupported()) {\n            $options['filters'][] = 'filteringTags';\n        }\n\n        $optionFilters = empty($options['filters']) ? [] : $options['filters'];\n        foreach ($optionFilters as $i => $filter) {\n            $optionFilters[] = \"{$filter} !=\";\n        }\n        $params = $this->Controller->ParamHandler->harvestParams($optionFilters);\n        $query = $this->Table->find();\n        if (!empty($options['filterFunction'])) {\n            $query = $options['filterFunction']($query);\n        }\n        $query = $this->setFilters($params, $query, $options);\n        $query = $this->setQuickFilters($params, $query, empty($options['quickFilters']) ? [] : $options['quickFilters']);\n        if (!empty($options['conditions'])) {\n            $query->where($options['conditions']);\n        }\n        if (!empty($options['contain'])) {\n            $query->contain($options['contain']);\n        }\n        if ($this->taggingSupported()) {\n            $query->contain('Tags');\n        }\n        if (!empty($options['fields'])) {\n            $query->select($options['fields']);\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $data = $query->all();\n            if (isset($options['hidden'])) {\n                $data->each(function($value, $key) use ($options) {\n                    $hidden = is_array($options['hidden']) ? $options['hidden'] : [$options['hidden']];\n                    $value->setHidden($hidden);\n                    return $value;\n                });\n            }\n            if (isset($options['afterFind'])) {\n                $function = $options['afterFind'];\n                if (is_callable($options['afterFind'])) {\n                    $function = $options['afterFind'];\n                    $data->each(function($value, $key) use ($function) {\n                        return $function($value);\n                    });\n                } else {\n                    $t = $this->Table;\n                    $data->each(function($value, $key) use ($t, $function) {\n                        return $t->$function($value);\n                    });\n                }\n            }\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        } else {\n            $this->Controller->loadComponent('Paginator');\n            $data = $this->Controller->Paginator->paginate($query, $this->Controller->paginate ?? []);\n            if (isset($options['afterFind'])) {\n                $function = $options['afterFind'];\n                if (is_callable($options['afterFind'])) {\n                    $function = $options['afterFind'];\n                    $data->each(function($value, $key) use ($function) {\n                        return $function($value);\n                    });\n                } else {\n                    $t = $this->Table;\n                    $data->each(function($value, $key) use ($t, $function) {\n                        return $t->$function($value);\n                    });\n                }\n            }\n            $this->setFilteringContext($options['contextFilters'] ?? [], $params);\n            $this->Controller->set('data', $data);\n        }\n    }\n\n    public function filtering(): void\n    {\n        if ($this->taggingSupported()) {\n            $this->Controller->set('taggingEnabled', true);\n            $this->setAllTags();\n        }\n        $filters = !empty($this->Controller->filterFields) ? $this->Controller->filterFields : [];\n        $this->Controller->set('filters', $filters);\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/filters');\n    }\n\n    /**\n     * getResponsePayload Returns the adaquate response payload based on the request context\n     *\n     * @return false or Array\n     */\n    public function getResponsePayload()\n    {\n        if ($this->Controller->ParamHandler->isRest()) {\n            return $this->Controller->restResponsePayload;\n        } else if ($this->Controller->ParamHandler->isAjax() && $this->request->is(['post', 'put'])) {\n            return $this->Controller->ajaxResponsePayload;\n        }\n        return false;\n    }\n\n    private function getMetaTemplates()\n    {\n        $metaTemplates = [];\n        if (!empty($this->Table->metaFields)) {\n            $metaQuery = $this->MetaTemplates->find();\n            $metaQuery\n                ->order(['is_default' => 'DESC'])\n                ->where([\n                    'scope' => $this->Table->metaFields,\n                    'enabled' => 1\n                ]);\n            $metaQuery->contain(['MetaTemplateFields']);\n            $metaTemplates = $metaQuery->all();\n        }\n        $this->Controller->set('metaTemplates', $metaTemplates);\n        return true;\n    }\n\n    public function add(array $params = []): void\n    {\n        $this->getMetaTemplates();\n        $data = $this->Table->newEmptyEntity();\n        if ($this->request->is('post')) {\n            $patchEntityParams = [\n                'associated' => [],\n                'accessibleFields' => $data->getAccessibleFieldForNew(),\n            ];\n            if (!empty($params['id'])) {\n                unset($params['id']);\n            }\n            $input = $this->__massageInput($params);\n            if (!empty($params['fields'])) {\n                $patchEntityParams['fields'] = $params['fields'];\n            }\n            $data = $this->Table->patchEntity($data, $input, $patchEntityParams);\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n                if ($data === false) {\n                    throw new NotFoundException(__('Could not save {0} due to the input failing to meet expectations. Your input is bad and you should feel bad.', $this->ObjectAlias));\n                }\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('{0} added.', $this->ObjectAlias);\n                if (!empty($input['metaFields'])) {\n                    $this->saveMetaFields($data->id, $input);\n                }\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($savedData, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    if (!empty($params['displayOnSuccess'])) {\n                        $displayOnSuccess = $this->renderViewInVariable($params['displayOnSuccess'], ['entity' => $data]);\n                        $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'add', $savedData, $message, ['displayOnSuccess' => $displayOnSuccess]);\n                    } else {\n                        $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'add', $savedData, $message);\n                    }\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $data->id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $this->Controller->isFailResponse = true;\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be added.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : PHP_EOL . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($message, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'add', $data, $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        if (!empty($params['fields'])) {\n            $this->Controller->set('fields', $params['fields']);\n        }\n        $this->Controller->entity = $data;\n        $this->Controller->set('entity', $data);\n    }\n\n    public function prepareValidationMessage($errors)\n    {\n        $validationMessage = '';\n        if (!empty($errors)) {\n            if (count($errors) == 1) {\n                $field = array_keys($errors)[0];\n                $fieldError = implode(', ', array_values($errors[$field]));\n                $validationMessage = __('{0}: {1}', $field, $fieldError);\n            } else {\n                $validationMessage = __('There has been validation issues with multiple fields');\n            }\n        }\n        return $validationMessage;\n    }\n\n    private function prepareValidationError($data)\n    {\n        $validationMessage = '';\n        if (!empty($data->getErrors())) {\n            foreach ($data->getErrors() as $field => $errorData) {\n                $errorMessages = [];\n                foreach ($errorData as $key => $value) {\n                    $errorMessages[] = $value;\n                }\n                $validationMessage .= __('{0}: {1}', $field, implode(',', $errorMessages));\n            }\n        }\n        return $validationMessage;\n    }\n\n    private function saveMetaFields($id, $input)\n    {\n        $this->Table->saveMetaFields($id, $input, $this->Table);\n    }\n\n    private function __massageInput($params)\n    {\n        $input = $this->request->getData();\n        if (!empty($params['override'])) {\n            foreach ($params['override'] as $field => $value) {\n                $input[$field] = $value;\n            }\n        }\n        if (!empty($params['removeEmpty'])) {\n            foreach ($params['removeEmpty'] as $removeEmptyField) {\n                if (empty($input[$removeEmptyField])) {\n                    unset($input[$removeEmptyField]);\n                }\n            }\n        }\n        return $input;\n    }\n\n    public function edit(int $id, array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $this->getMetaTemplates();\n        if ($this->taggingSupported()) {\n            $params['contain'][] = 'Tags';\n            $this->setAllTags();\n        }\n        $data = $this->Table->find()->where(['id' => $id]);\n        if (!empty($params['conditions'])) {\n            $data->where($params['conditions']);\n        }\n        $data = $data->first();\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data, $params);\n        }\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $data = $this->getMetaFields($id, $data);\n        if ($this->request->is(['post', 'put'])) {\n            $patchEntityParams = [\n                'associated' => []\n            ];\n            $input = $this->__massageInput($params);\n            if (!empty($params['fields'])) {\n                $patchEntityParams['fields'] = $params['fields'];\n            }\n            $data = $this->Table->patchEntity($data, $input, $patchEntityParams);\n            if (isset($params['beforeSave'])) {\n                $data = $params['beforeSave']($data);\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                if (isset($params['afterSave'])) {\n                    $params['afterSave']($data);\n                }\n                $message = __('{0} `{1}` updated.', $this->ObjectAlias, $savedData->{$this->Table->getDisplayField()});\n                if (!empty($input['metaFields'])) {\n                    $this->MetaFields->deleteAll(['scope' => $this->Table->metaFields, 'parent_id' => $savedData->id]);\n                    $this->saveMetaFields($savedData->id, $input);\n                }\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($savedData, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'edit', $savedData, $message);\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be modified.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : PHP_EOL . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'edit', $data, $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                }\n            }\n        }\n        if (!empty($params['fields'])) {\n            $this->Controller->set('fields', $params['fields']);\n        }\n        $this->Controller->entity = $data;\n        $this->Controller->set('entity', $data);\n    }\n\n    public function attachMetaData($id, $data)\n    {\n        if (empty($this->Table->metaFields)) {\n            return $data;\n        }\n        $metaFieldScope = $this->Table->metaFields;\n        $query = $this->MetaTemplates->find()->where(['MetaTemplates.scope' => $metaFieldScope]);\n        $query->contain(['MetaTemplateFields.MetaFields' => function ($q) use ($id, $metaFieldScope) {\n            return $q->where(['MetaFields.scope' => $metaFieldScope, 'MetaFields.parent_id' => $id]);\n        }]);\n        $query\n            ->order(['MetaTemplates.is_default' => 'DESC'])\n            ->order(['MetaTemplates.name' => 'ASC']);\n        $metaTemplates = $query->all()->toArray();\n        $metaTemplates = $this->pruneEmptyMetaTemplates($metaTemplates);\n        $data['metaTemplates'] = $metaTemplates;\n        return $data;\n    }\n\n    public function pruneEmptyMetaTemplates($metaTemplates)\n    {\n        foreach ($metaTemplates as $i => $metaTemplate) {\n            foreach ($metaTemplate['meta_template_fields'] as $j => $metaTemplateField) {\n                if (empty($metaTemplateField['meta_fields'])) {\n                    unset($metaTemplates[$i]['meta_template_fields'][$j]);\n                }\n            }\n            if (empty($metaTemplates[$i]['meta_template_fields'])) {\n                unset($metaTemplates[$i]);\n            }\n        }\n        return $metaTemplates;\n    }\n\n    public function getMetaFields($id, $data)\n    {\n        if (empty($this->Table->metaFields)) {\n            return $data;\n        }\n        $query = $this->MetaFields->find();\n        $query->where(['MetaFields.scope' => $this->Table->metaFields, 'MetaFields.parent_id' => $id]);\n        $metaFields = $query->all();\n        $data['metaFields'] = [];\n        foreach($metaFields as $metaField) {\n            $data['metaFields'][$metaField->meta_template_id][$metaField->field] = $metaField->value;\n        }\n        return $data;\n    }\n\n    public function view(int $id, array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        if ($this->taggingSupported()) {\n            $params['contain'][] = 'Tags';\n            $this->setAllTags();\n        }\n\n        $data = $this->Table->get($id, $params);\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $data = $this->attachMetaData($id, $data);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if (empty($data)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        }\n        $this->Controller->set('entity', $data);\n    }\n\n    public function delete($id=false, $params=[]): void\n    {\n        if ($this->request->is('get')) {\n            if(!empty($id)) {\n                $data = $this->Table->find()->where([$this->Table->getAlias() . '.id' => $id]);\n                if (!empty($params['conditions'])) {\n                    $data->where($params['conditions']);\n                }\n                if (!empty($params['contain'])) {\n                    $data->contain($params['contain']);\n                }\n                $data = $data->first();\n                if (empty($data)) {\n                    throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n                }\n                if (isset($params['beforeSave'])) {\n                    $data = $params['beforeSave']($data);\n                    if ($data === false) {\n                        throw new NotFoundException(__('Could not save {0} due to the input failing to meet expectations. Your input is bad and you should feel bad.', $this->ObjectAlias));\n                    }\n                }\n                $this->Controller->set('id', $data['id']);\n                $this->Controller->set('data', $data);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $skipExecution = false;\n                $data = $this->Table->find()->where([$this->Table->getAlias() . '.id' => $id]);\n                if (!empty($params['conditions'])) {\n                    $data->where($params['conditions']);\n                }\n                if (!empty($params['contain'])) {\n                    $data->contain($params['contain']);\n                }\n                $data = $data->first();\n                if (isset($params['beforeSave'])) {\n                    try {\n                        $data = $params['beforeSave']($data);\n                    } catch (Exception $e) {\n                        $data = false;\n                    }\n                }\n                if (!empty($data)) {\n                    $success = $this->Table->delete($data);\n                    $success = true;\n                } else {\n                    $success = false;\n                }\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} deleted.', $this->ObjectAlias),\n                __('All {0} have been deleted.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not delete {0}.', $this->ObjectAlias),\n                __('{0} / {1} {2} have been deleted.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('delete', $bulkSuccesses, $message, $data);\n        }\n        $this->Controller->set('metaGroup', 'ContactDB');\n        $this->Controller->set('scope', 'users');\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/delete');\n    }\n\n    public function tag($id=false): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if ($this->request->is('get')) {\n            $this->setAllTags();\n            if(!empty($id)) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $this->Controller->set('id', $entity->id);\n                $this->Controller->set('data', $entity);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $input = $this->request->getData();\n                $tagsToAdd = json_decode($input['tag_list']);\n                // patching will mirror tag in the DB, however, we only want to add tags\n                $input['tags'] = array_merge($tagsToAdd, $entity->tags);\n                $patchEntityParams = [\n                    'fields' => ['tags'],\n                ];\n                $entity = $this->Table->patchEntity($entity, $input, $patchEntityParams);\n                $savedData = $this->Table->save($entity);\n                $success = true;\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} tagged with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('All {0} have been tagged.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not tag {0} with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('{0} / {1} {2} have been tagged.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('tag', $bulkSuccesses, $message, $savedData);\n        }\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tagForm');\n    }\n\n    public function untag($id=false): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if ($this->request->is('get')) {\n            $this->setAllTags();\n            if(!empty($id)) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $this->Controller->set('id', $entity->id);\n                $this->Controller->set('data', $entity);\n                $this->Controller->set('bulkEnabled', false);\n            } else {\n                $this->Controller->set('bulkEnabled', true);\n            }\n        } else if ($this->request->is('post') || $this->request->is('delete')) {\n            $ids = $this->getIdsOrFail($id);\n            $isBulk = count($ids) > 1;\n            $bulkSuccesses = 0;\n            foreach ($ids as $id) {\n                $params = [\n                    'contain' => 'Tags',\n                ];\n                $entity = $this->Table->get($id, $params);\n                $input = $this->request->getData();\n                $tagsToRemove = json_decode($input['tag_list']);\n                // patching will mirror tag in the DB, however, we only want to remove tags\n                $input['tags'] = array_filter($entity->tags, function ($existingTag) use ($tagsToRemove) {\n                    return !in_array($existingTag->name, $tagsToRemove);\n                });\n                $patchEntityParams = [\n                    'fields' => ['tags'],\n                ];\n                $entity = $this->Table->patchEntity($entity, $input, $patchEntityParams);\n                $savedData = $this->Table->save($entity);\n                $success = true;\n                if ($success) {\n                    $bulkSuccesses++;\n                }\n            }\n            $message = $this->getMessageBasedOnResult(\n                $bulkSuccesses == count($ids),\n                $isBulk,\n                __('{0} untagged with `{1}`.', $this->ObjectAlias, implode(', ', $tagsToRemove)),\n                __('All {0} have been untagged.', Inflector::pluralize($this->ObjectAlias)),\n                __('Could not untag {0} with `{1}`.', $this->ObjectAlias, $input['tag_list']),\n                __('{0} / {1} {2} have been untagged.',\n                    $bulkSuccesses,\n                    count($ids),\n                    Inflector::pluralize($this->ObjectAlias)\n                )\n            );\n            $this->setResponseForController('tag', $bulkSuccesses, $message, $entity);\n        }\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tagForm');\n    }\n\n    public function viewTags(int $id, array $params = []): void\n    {\n        if (!$this->taggingSupported()) {\n            throw new Exception(\"Table {$this->TableAlias} does not support tagging\");\n        }\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        $params['contain'][] = 'Tags';\n        $data = $this->Table->get($id, $params);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data);\n        }\n        if ($this->Controller->ParamHandler->isRest()) {\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n        }\n        $this->Controller->set('entity', $data);\n        $this->setAllTags();\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/tag');\n    }\n\n    public function setResponseForController($action, $success, $message, $data=[], $errors=null)\n    {\n        if ($success) {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n            } elseif ($this->Controller->ParamHandler->isAjax()) {\n                $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, $action, $data, $message);\n            } else {\n                $this->Controller->Flash->success($message);\n                $this->Controller->redirect($this->Controller->referer());\n            }\n        } else {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n            } elseif ($this->Controller->ParamHandler->isAjax()) {\n                $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, $action, $data, $message, !is_null($errors) ? $errors : $data->getErrors());\n            } else {\n                $this->Controller->Flash->error($message);\n                $this->Controller->redirect($this->Controller->referer());\n            }\n        }\n    }\n\n    private function getMessageBasedOnResult($isSuccess, $isBulk, $messageSingleSuccess, $messageBulkSuccess, $messageSingleFailure, $messageBulkFailure)\n    {\n        if ($isSuccess) {\n            $message = $isBulk ? $messageBulkSuccess : $messageSingleSuccess;\n        } else {\n            $message = $isBulk ? $messageBulkFailure : $messageSingleFailure;\n        }\n        return $message;\n    }\n\n    /**\n     * getIdsOrFail\n     *\n     * @param  mixed $id\n     * @return Array The ID converted to a list or the list of provided IDs from the request\n     * @throws NotFoundException when no ID could be found\n     */\n    public function getIdsOrFail($id=false): Array\n    {\n        $params = $this->Controller->ParamHandler->harvestParams(['ids']);\n        if (!empty($params['ids'])) {\n            $params['ids'] = json_decode($params['ids']);\n        }\n        $ids = [];\n        if (empty($id)) {\n            if (empty($params['ids'])) {\n                throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n            }\n            $ids = $params['ids'];\n        } else {\n            $id = $this->getInteger($id);\n            if (!is_null($id)) {\n                $ids = [$id];\n            } else {\n                throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n            }\n        }\n        return $ids;\n    }\n\n    private function getInteger($value)\n    {\n        return is_numeric($value) ? intval($value) : null;\n    }\n\n    protected function massageFilters(array $params): array\n    {\n        $massagedFilters = [\n            'simpleFilters' => [],\n            'relatedFilters' => []\n        ];\n        if (!empty($params)) {\n            foreach ($params as $param => $paramValue) {\n                if (strpos($param, '.') !== false) {\n                    $param = explode('.', $param);\n                    if ($param[0] === $this->Table->getAlias()) {\n                        $massagedFilters['simpleFilters'][implode('.', $param)] = $paramValue;\n                    } else {\n                        $massagedFilters['relatedFilters'][implode('.', $param)] = $paramValue;\n                    }\n                } else {\n                    $massagedFilters['simpleFilters'][$param] = $paramValue;\n                }\n            }\n        }\n        return $massagedFilters;\n    }\n\n    public function setQuickFilters(array $params, \\Cake\\ORM\\Query $query, array $quickFilterFields): \\Cake\\ORM\\Query\n    {\n        $queryConditions = [];\n        $this->Controller->set('quickFilter', empty($quickFilterFields) ? [] : $quickFilterFields);\n        if (!empty($params['quickFilter']) && !empty($quickFilterFields)) {\n            $this->Controller->set('quickFilterValue', $params['quickFilter']);\n            foreach ($quickFilterFields as $filterField) {\n                $likeCondition = false;\n                if (is_array($filterField)) {\n                    $likeCondition = reset($filterField);\n                    $filterFieldName = array_key_first($filterField);\n                    $queryConditions[$filterFieldName . ' LIKE'] = '%' . $params['quickFilter'] .'%';\n                } else {\n                    $queryConditions[$filterField] = $params['quickFilter'];\n                }\n            }\n            $query->where(['OR' => $queryConditions]);\n        } else {\n            $this->Controller->set('quickFilterValue', '');\n        }\n        return $query;\n    }\n\n    protected function setFilters($params, \\Cake\\ORM\\Query $query, array $options): \\Cake\\ORM\\Query\n    {\n        $filteringLabel = !empty($params['filteringLabel']) ? $params['filteringLabel'] : '';\n        unset($params['filteringLabel']);\n        $filteringTags = !empty($params['filteringTags']) && $this->taggingSupported() ? $params['filteringTags'] : '';\n        unset($params['filteringTags']);\n        $customFilteringFunction = '';\n        $chosenFilter = '';\n        if (!empty($options['contextFilters']['custom'])) {\n            foreach ($options['contextFilters']['custom'] as $filter) {\n                if ($filter['label'] == $filteringLabel) {\n                    $customFilteringFunction = $filter;\n                    $chosenFilter = $filter;\n                    break;\n                }\n            }\n        }\n\n        $activeFilters = [];\n        if (!empty($customFilteringFunction['filterConditionFunction'])) {\n            $query = $customFilteringFunction['filterConditionFunction']($query);\n            $activeFilters['filteringLabel'] = $filteringLabel;\n        } else {\n            if (!empty($chosenFilter)) {\n                $params = $this->massageFilters($chosenFilter['filterCondition']);\n            } else {\n                $params = $this->massageFilters($params);\n            }\n            if (!empty($params['simpleFilters'])) {\n                foreach ($params['simpleFilters'] as $filter => $filterValue) {\n                    $activeFilters[$filter] = $filterValue;\n                    if ($filter === 'quickFilter') {\n                        continue;\n                    }\n                    if (is_array($filterValue)) {\n                        $query->where([($filter . ' IN') => $filterValue]);\n                    } else {\n                        $query = $this->setValueCondition($query, $filter, $filterValue);\n                    }\n                }\n            }\n            if (!empty($params['relatedFilters'])) {\n                foreach ($params['relatedFilters'] as $filter => $filterValue) {\n                    $activeFilters[$filter] = $filterValue;\n                    $filterParts = explode('.', $filter);\n                    $query = $this->setNestedRelatedCondition($query, $filterParts, $filterValue);\n                }\n            }\n        }\n\n        if ($this->taggingSupported() && !empty($filteringTags)) {\n            $activeFilters['filteringTags'] = $filteringTags;\n            $query = $this->setTagFilters($query, $filteringTags);\n        }\n\n        $this->Controller->set('activeFilters', $activeFilters);\n        return $query;\n    }\n\n    protected function setTagFilters($query, $tags)\n    {\n        $modelAlias = $this->Table->getAlias();\n        $subQuery = $this->Table->find('tagged', [\n            'name' => $tags,\n            'forceAnd' => true\n        ])->select($modelAlias . '.id');\n        return $query->where([$modelAlias . '.id IN' => $subQuery]);\n    }\n\n    protected function setNestedRelatedCondition($query, $filterParts, $filterValue)\n    {\n        $modelName = $filterParts[0];\n        if (count($filterParts) == 2) {\n            $fieldName = implode('.', $filterParts);\n            $query = $this->setRelatedCondition($query, $modelName, $fieldName, $filterValue);\n        } else {\n            $filterParts = array_slice($filterParts, 1);\n            $query = $query->matching($modelName, function(\\Cake\\ORM\\Query $q) use ($filterParts, $filterValue) {\n                return $this->setNestedRelatedCondition($q, $filterParts, $filterValue);\n            });\n        }\n        return $query;\n    }\n\n    protected function setRelatedCondition($query, $modelName, $fieldName, $filterValue)\n    {\n        return $query->matching($modelName, function(\\Cake\\ORM\\Query $q) use ($fieldName, $filterValue) {\n            return $this->setValueCondition($q, $fieldName, $filterValue);\n        });\n    }\n\n    protected function setValueCondition($query, $fieldName, $value)\n    {\n        if (strlen(trim($value, '%')) === strlen($value)) {\n            return $query->where([$fieldName => $value]);\n        } else {\n            return $query->where(function ($exp, \\Cake\\ORM\\Query $q) use ($fieldName, $value) {\n                return $exp->like($fieldName, $value);\n            });\n        }\n    }\n\n    protected function setFilteringContext($contextFilters, $params)\n    {\n        $filteringContexts = [];\n        if (!isset($contextFilters['allow_all']) || $contextFilters['allow_all']) {\n            $filteringContexts[] = ['label' => __('All')];\n        }\n        if (!empty($contextFilters['fields'])) {\n            foreach ($contextFilters['fields'] as $field) {\n                $contextsFromField = $this->getFilteringContextFromField($field);\n                foreach ($contextsFromField as $contextFromField) {\n                    if (is_bool($contextFromField)) {\n                        $contextFromFieldText = sprintf('%s: %s', $field, $contextFromField ? 'true' : 'false');\n                    } else {\n                        $contextFromFieldText = sprintf('%s: %s', $field, $contextFromField);\n                    }\n                    $filteringContexts[] = [\n                        'label' => Inflector::humanize($contextFromFieldText),\n                        'filterCondition' => [\n                            $field => $contextFromField\n                        ]\n                    ];\n                }\n            }\n        }\n        if (!empty($contextFilters['custom'])) {\n            $filteringContexts = array_merge($filteringContexts, $contextFilters['custom']);\n        }\n        $this->Controller->set('filteringContexts', $filteringContexts);\n    }\n\n    public function setParentConditionsForMetaFields($query, array $metaConditions)\n    {\n        $metaTemplates = $this->MetaFields->MetaTemplates->find('list', [\n            'keyField' => 'name',\n            'valueField' => 'id'\n        ])->where(['name IN' => array_keys($metaConditions)])->all()->toArray();\n        $fieldsConditions = [];\n        foreach ($metaConditions as $templateName => $templateConditions) {\n            $metaTemplateID = isset($metaTemplates[$templateName]) ? $metaTemplates[$templateName] : -1;\n            foreach ($templateConditions as $conditions) {\n                $conditions['meta_template_id'] = $metaTemplateID;\n                $fieldsConditions[] = $conditions;\n            }\n        }\n        $matchingMetaQuery = $this->getParentIDQueryForMetaANDConditions($fieldsConditions);\n        return $query->where(['id IN' => $matchingMetaQuery]);\n    }\n\n    private function getParentIDQueryForMetaANDConditions(array $metaANDConditions)\n    {\n        if (empty($metaANDConditions)) {\n            throw new Exception('Invalid passed conditions');\n        }\n        foreach ($metaANDConditions as $i => $conditions) {\n            $metaANDConditions[$i]['scope'] = $this->Table->metaFields;\n        }\n        $firstCondition = $this->prefixConditions('MetaFields', $metaANDConditions[0]);\n        $conditionsToJoin = array_slice($metaANDConditions, 1);\n        $query = $this->MetaFields->find()\n            ->select('parent_id')\n            ->where($firstCondition);\n        foreach ($conditionsToJoin as $i => $conditions) {\n            $joinedConditions = $this->prefixConditions(\"m{$i}\", $conditions);\n            $joinedConditions[] = \"m{$i}.parent_id = MetaFields.parent_id\";\n            $query->rightJoin(\n                [\"m{$i}\" => 'meta_fields'],\n                $joinedConditions\n            );\n        }\n        return $query;\n    }\n\n    private function prefixConditions(string $prefix, array $conditions)\n    {\n        $prefixedConditions = [];\n        foreach ($conditions as $condField => $condValue) {\n            $prefixedConditions[\"${prefix}.${condField}\"] = $condValue;\n        }\n        return $prefixedConditions;\n    }\n\n    public function taggingSupported()\n    {\n        return $this->Table->behaviors()->has('Tag');\n    }\n\n    public function setAllTags()\n    {\n        $this->Tags = TableRegistry::getTableLocator()->get('Tags.Tags');\n        $allTags = $this->Tags->find()->all()->toList();\n        $this->Controller->set('allTags', $allTags);\n    }\n\n    public function toggle(int $id, string $fieldName = 'enabled', array $params = []): void\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n\n        $data = $this->Table->get($id, $params);\n        if (isset($params['afterFind'])) {\n            $data = $params['afterFind']($data, $params);\n        }\n        if ($this->request->is(['post', 'put'])) {\n            if (isset($params['force_state'])) {\n                $data->{$fieldName} = $params['force_state'];\n            } else {\n                $data->{$fieldName} = !$data->{$fieldName};\n            }\n            $savedData = $this->Table->save($data);\n            if ($savedData !== false) {\n                $message = __('{0} field {1}. (ID: {2} {3})',\n                    $fieldName,\n                    $data->{$fieldName} ? __('enabled') : __('disabled'),\n                    Inflector::humanize($this->ObjectAlias),\n                    $data->id\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                    $this->Controller->restResponsePayload = $this->RestResponse->viewData($data, 'json');\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxSuccessResponse($this->ObjectAlias, 'toggle', $savedData, $message);\n                } else {\n                    $this->Controller->Flash->success($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            } else {\n                $validationErrors = $data->getErrors();\n                $validationMessage = $this->prepareValidationMessage($validationErrors);\n                $message = __(\n                    '{0} could not be modified.{1}',\n                    $this->ObjectAlias,\n                    empty($validationMessage) ? '' : ' ' . __('Reason:{0}', $validationMessage)\n                );\n                if ($this->Controller->ParamHandler->isRest()) {\n                } else if ($this->Controller->ParamHandler->isAjax()) {\n                    $this->Controller->ajaxResponsePayload = $this->RestResponse->ajaxFailResponse($this->ObjectAlias, 'toggle', $message, $validationErrors);\n                } else {\n                    $this->Controller->Flash->error($message);\n                    if (empty($params['redirect'])) {\n                        $this->Controller->redirect(['action' => 'view', $id]);\n                    } else {\n                        $this->Controller->redirect($params['redirect']);\n                    }\n                }\n            }\n        }\n        $this->Controller->set('entity', $data);\n        $this->Controller->set('fieldName', $fieldName);\n        $this->Controller->viewBuilder()->setLayout('ajax');\n        $this->Controller->render('/genericTemplates/toggle');\n    }\n\n    public function toggleEnabled(int $id, array $path, string $fieldName = 'enabled'): bool\n    {\n        if (empty($id)) {\n            throw new NotFoundException(__('Invalid {0}.', $this->ObjectAlias));\n        }\n        $data = $this->Table->get($id);\n        if ($this->request->is('post')) {\n            $data[$fieldName] = $data[$fieldName] ? true : false;\n            $this->Table->save($data);\n            $this->Controller->restResponsePayload = $this->RestResponse->viewData(['value' => $data[$fieldName]], 'json');\n        } else {\n            if ($this->Controller->ParamHandler->isRest()) {\n                $this->Controller->restResponsePayload = $this->RestResponse->viewData(['value' => $data[$fieldName]], 'json');\n            } else {\n                $this->Controller->set('fieldName', $fieldName);\n                $this->Controller->set('currentValue', $data[$fieldName]);\n                $this->Controller->set('path', $path);\n                $this->Controller->render('/genericTemplates/ajaxForm');\n            }\n        }\n    }\n\n    private function getFilteringContextFromField($field)\n    {\n        $exploded = explode('.', $field);\n        if (count($exploded) > 1) {\n            $model = $exploded[0];\n            $subField = $exploded[1];\n            $association = $this->Table->associations()->get($model);\n            $associationType = $association->type();\n            if ($associationType == 'oneToMany') {\n                $fieldToExtract = $subField;\n                $associatedTable = $association->getTarget();\n                $query = $associatedTable->find()->rightJoin(\n                    [$this->Table->getAlias() => $this->Table->getTable()],\n                    [sprintf('%s.id = %s.%s', $this->Table->getAlias(), $associatedTable->getAlias(), $association->getForeignKey())]\n                )\n                ->where([\n                    [\"${field} IS NOT\" => NULL]\n                ]);\n            } else if ($associationType == 'manyToOne') {\n                $fieldToExtract = sprintf('%s.%s', Inflector::singularize(strtolower($model)), $subField);\n                $query = $this->Table->find()->contain($model);\n            } else {\n                throw new Exception(\"Association ${associationType} not supported in CRUD Component\");\n            }\n        } else {\n            $fieldToExtract = $field;\n            $query = $this->Table->find();\n        }\n        return $query->select([$field])\n            ->distinct()\n            ->extract($fieldToExtract)\n            ->toList();\n    }\n\n    private function renderViewInVariable($templateRelativeName, $data)\n    {\n        $builder = new ViewBuilder();\n        $builder->disableAutoLayout()->setTemplate(\"{$this->TableAlias}/{$templateRelativeName}\");\n        $view = $builder->build($data);\n        return $view->render();\n    }\n}\n", "<?php\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Inflector;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Error\\Debugger;\nuse Cake\\Http\\Exception\\NotFoundException;\n\nclass SharingGroupsController extends AppController\n{\n    public $filterFields = ['SharingGroups.uuid', 'SharingGroups.name', 'description', 'releasability', 'Organisations.name', 'Organisations.uuid'];\n    public $quickFilterFields = ['SharingGroups.uuid', ['SharingGroups.name' => true], ['description' => true], ['releasability' => true]];\n    public $containFields = ['SharingGroupOrgs', 'Organisations', 'Users' => ['fields' => ['id', 'username']]];\n\n    public function index()\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['SharingGroups.organisation_id'] = $currentUser['organisation_id'];\n        }\n        $this->CRUD->index([\n            'contain' => $this->containFields,\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n            'conditions' => $conditions\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function add()\n    {\n        $this->CRUD->add([\n            'override' => [\n                'user_id' => $this->ACL->getUser()['id']\n            ]\n        ]);\n        $dropdownData = [\n            'organisation' => $this->getAvailableOrgForSg($this->ACL->getUser())\n        ];\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set(compact('dropdownData'));\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function view($id)\n    {\n        $currentUser = $this->ACL->getUser();\n        $this->CRUD->view($id, [\n            'contain' => ['SharingGroupOrgs', 'Organisations', 'Users' => ['fields' => ['id', 'username']]],\n            'afterFind' => function($data) use ($currentUser) {\n                if (empty($currentUser['role']['perm_admin'])) {\n                    $orgFround = false;\n                    if (!empty($data['sharing_group_orgs'])) {\n                        foreach ($data['sharing_group_orgs'] as $org) {\n                            if ($org['id'] === $currentUser['organisation_id']) {\n                                $orgFound = true;\n                            }\n                        }\n                    }\n                    if ($data['organisation_id'] !== $currentUser['organisation_id'] && !$orgFround) {\n                        return null;\n                    }\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function edit($id = false)\n    {\n        $params = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            $params['conditions'] = ['organisation_id' => $currentUser['organisation_id']];\n        }\n        $params['fields'] = ['name', 'releasability', 'description', 'active'];\n        $this->CRUD->edit($id, $params);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $dropdownData = [\n            'organisation' => $this->getAvailableOrgForSg($this->ACL->getUser())\n        ];\n        $this->set(compact('dropdownData'));\n        $this->set('metaGroup', 'Trust Circles');\n        $this->render('add');\n    }\n\n    public function delete($id)\n    {\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            $params['conditions'] = ['organisation_id' => $currentUser['organisation_id']];\n        }\n        $this->CRUD->delete($id, $params);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', 'Trust Circles');\n    }\n\n    public function addOrg($id)\n    {\n        $currentUser = $this->ACL->getUser();\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        if (empty($currentUser['role']['perm_admin'])) {\n            if ($sharingGroup['organisation_id'] !== $currentUser['organisation_id']) {\n                $sharingGroup = null;\n            }\n        }\n        if (empty($sharingGroup)) {\n            throw new NotFoundException(__('Invalid SharingGroup.'));\n        }\n        $conditions = [];\n        $containedOrgIds = array_values(\\Cake\\Utility\\Hash::extract($sharingGroup, 'sharing_group_orgs.{n}.id'));\n        if (!empty($containedOrgIds)) {\n            $conditions = [\n                'NOT' => [\n                    'id IN' => $containedOrgIds\n                ]\n            ];\n        }\n        $dropdownData = [\n            'organisation' => $this->SharingGroups->Organisations->find('list', [\n                'sort' => ['name' => 'asc'],\n                'conditions' => $conditions\n            ])\n        ];\n        if ($this->request->is('post')) {\n            $input = $this->request->getData();\n            if (empty($input['organisation_id'])) {\n                throw new InvalidArgumentException(__('No organisation IDs passed.'));\n            }\n            if (!is_array($input['organisation_id'])) {\n                $input['organisation_id'] = [$input['organisation_id']];\n            }\n            $result = true;\n            foreach ($input['organisation_id'] as $org_id) {\n                $org = $this->SharingGroups->SharingGroupOrgs->get($org_id);\n                $result &= (bool)$this->SharingGroups->SharingGroupOrgs->link($sharingGroup, [$org]);\n            }\n            if ($result) {\n                $message = __('Organisation(s) added to the sharing group.');\n            } else {\n                $message = __('Organisation(s) could not be added to the sharing group.');\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($result) {\n                    $savedData = $this->SharingGroups->get($id, [\n                        'contain' => 'SharingGroupOrgs'\n                    ]);\n                    return $this->RestResponse->ajaxSuccessResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'addOrg', $savedData, $message);\n                } else {\n                    return $this->RestResponse->ajaxFailResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'addOrg', $sharingGroup, $message);;\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(['action' => 'view', $id]);\n            }\n        }\n        $this->set(compact('dropdownData'));\n    }\n\n    public function removeOrg($id, $org_id)\n    {\n        $currentUser = $this->ACL->getUser();\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        if (empty($currentUser['role']['perm_admin'])) {\n            if ($sharingGroup['organisation_id'] !== $currentUser['organisation_id']) {\n                $sharingGroup = null;\n            }\n        }\n        if (empty($sharingGroup)) {\n            throw new NotFoundException(__('Invalid SharingGroup.'));\n        }\n        if ($this->request->is('post')) {\n            $org = $this->SharingGroups->SharingGroupOrgs->get($org_id);\n            $result = (bool)$this->SharingGroups->SharingGroupOrgs->unlink($sharingGroup, [$org]);\n            if ($result) {\n                $message = __('Organisation(s) removed from the sharing group.');\n            } else {\n                $message = __('Organisation(s) could not be removed to the sharing group.');\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($result) {\n                    $savedData = $this->SharingGroups->get($id, [\n                        'contain' => 'SharingGroupOrgs'\n                    ]);\n                    return $this->RestResponse->ajaxSuccessResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'removeOrg', $savedData, $message);\n                } else {\n                    return $this->RestResponse->ajaxFailResponse(Inflector::singularize($this->SharingGroups->getAlias()), 'removeOrg', $sharingGroup, $message);\n                    ;\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success($message);\n                } else {\n                    $this->Flash->error($message);\n                }\n                $this->redirect(['action' => 'view', $id]);\n            }\n        }\n        $this->set('scope', 'sharing_groups');\n        $this->set('id', $org_id);\n        $this->set('sharingGroup', $sharingGroup);\n        $this->set('deletionText', __('Are you sure you want to remove Organisation #{0} from Sharing group #{1}?', $org_id, $sharingGroup['id']));\n        $this->set('postLinkParameters', ['action' => 'removeOrg', $id, $org_id]);\n        $this->viewBuilder()->setLayout('ajax');\n        $this->render('/genericTemplates/delete');\n    }\n\n    public function listOrgs($id)\n    {\n        $sharingGroup = $this->SharingGroups->get($id, [\n            'contain' => 'SharingGroupOrgs'\n        ]);\n        $params = $this->ParamHandler->harvestParams(['quickFilter']);\n        if (!empty($params['quickFilter'])) {\n            foreach ($sharingGroup['sharing_group_orgs'] as $k => $org) {\n                if (strpos($org['name'], $params['quickFilter']) === false) {\n                    unset($sharingGroup['sharing_group_orgs'][$k]);\n                }\n            }\n            $sharingGroup['sharing_group_orgs'] = array_values($sharingGroup['sharing_group_orgs']);\n        }\n        $this->set('sharing_group_id', $id);\n        $this->set('sharing_group_orgs', $sharingGroup['sharing_group_orgs']);\n    }\n\n    private function getAvailableOrgForSg($user)\n    {\n        $organisations = [];\n        if (!empty($user['role']['perm_admin'])) {\n            $organisations = $this->SharingGroups->Organisations->find('list')->order(['name' => 'ASC'])->toArray();\n        } else {\n            $organisations = $this->SharingGroups->Organisations->find('list', [\n                'sort' => ['name' => 'asc'],\n                'conditions' => [\n                    'id' => $user['organisation_id']\n                ]\n            ]);\n        }\n        return $organisations;\n    }\n}\n"], "filenames": ["src/Controller/Component/CRUDComponent.php", "src/Controller/SharingGroupsController.php"], "buggy_code_start_loc": [422, 9], "buggy_code_end_loc": [425, 161], "fixing_code_start_loc": [423, 10], "fixing_code_end_loc": [432, 202], "type": "CWE-668", "message": "An issue was discovered in Cerebrate through 1.4. An incorrect sharing group ACL allowed an unprivileged user to edit and modify sharing groups.", "other": {"cve": {"id": "CVE-2022-25318", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-18T06:15:10.463", "lastModified": "2022-02-25T15:34:03.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in Cerebrate through 1.4. An incorrect sharing group ACL allowed an unprivileged user to edit and modify sharing groups."}, {"lang": "es", "value": "Se ha detectado un problema en Cerebrate versiones hasta 1.4. Una ACL incorrecta de grupos compartidos permit\u00eda a un usuario no privilegiado editar y modificar los grupos compartidos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.4", "matchCriteriaId": "94801AF4-44EE-499D-AD31-99E3EA6C79E2"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/15190b930ebada9e8d294db57c96832799d9d93e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/15190b930ebada9e8d294db57c96832799d9d93e"}}