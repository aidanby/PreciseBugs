{"buggy_code": ["Version 1.0.47 (unreleased)\n---------------------------\n\nNew features:\n\n* Vietnamese translation\n\nVersion 1.0.46 (August 13, 2017)\n--------------------------------\n\nSecurity Issues:\n\n* Fix two privilege escalation issues: a standard user could reset the password \nof another user (including admin) by altering form data.\n(CVE-2017-12850 and CVE-2017-12851, discovered by \"chbi\").\n\nImprovements:\n\n* Add \"Create another link\" checkbox for internal link as in sub-task creation\n* Updated translations\n\nBug fixes:\n\n* Fix parsing issue in phpToBytes() method\n\nVersion 1.0.45 (June 23, 2017)\n------------------------------\n\nNew features:\n\n* Automatic action to assign tasks to its creator\n* Add the possibility to create a comment when a task is sent by email\n* Add dropdown menu to autocomplete email field from project members\n* Add configurable list of predefined subjects when sending a task or a a comment by email\n* Add command line argument to filter overdue notification for a given project\n\nImprovements:\n\n* Improve SQL migrations when old default swimlanes have the same name as a normal swimlanes\n\nBug fixes:\n\n* Add missing subtask permissions for project viewer role\n* Fix Javascript language mapping\n\nVersion 1.0.44 (May 28, 2017)\n-----------------------------\n\nImprovements:\n\n* Use datetime field for due date\n* Update Docker image to Alpine Linux 3.6\n* Add the possibility to pass API token as environment variable for Docker container\n* Add wildcard search for task reference field\n* Improve automated action TaskAssignColorOnDueDate to update task only when necessary\n* Add task and project API formatters\n* Update translations\n\nBug fixes:\n\n* Fix broken user mentions in comment form at the bottom of the task view page\n* Ensure project tags are removed when the project is removed\n* Avoid PHP notice when regenerating API token for a user\n* Fix wrong dropdown menu in group members list\n* Show only active users in auto-complete forms (project permissions)\n* Check owner existence before to create project\n\nVersion 1.0.43 (April 30, 2017)\n-------------------------------\n\nImprovements:\n\n* Add \"[DUPLICATE]\" prefix to duplicated tasks title\n* Add sorting by position and start date in task list view\n* Update translations\n\nBug fixes:\n\n* Add missing plugin parameter for search box (Gantt and calendar plugin)\n* Fix broken start date button\n\nVersion 1.0.42 (April 8, 2017)\n------------------------------\n\nNew features:\n\n* New restrictions for custom project roles\n\nImprovements:\n\n* Improved dashboard\n\nBreaking Changes:\n\n* Move calendar to external plugin: https://github.com/kanboard/plugin-calendar\n* Move Gantt charts to external plugin: https://github.com/kanboard/plugin-gantt\n* Move Gravatar to external plugin: https://github.com/kanboard/plugin-gravatar\n\nBug fixes:\n\n* Fix typo in Sqlite schema\n\nVersion 1.0.41 (March 19, 2017)\n-------------------------------\n\nNew features:\n\n* Add Croatian language translation\n\nImprovements:\n\n* Simplify dashboard to use new tasks list view\n* Move notifications outside of dashboard\n* Render QR code for TwoFactor authentication without Google Chart API\n* Add toggle button to show/hide subtasks in task list view\n* Use same layout as task listing for task search\n* Display tags in task list view\n* Make user actions available from contextual menu\n* Change users and groups list layout\n* Project priority is always rendered now\n* Do not list private projects when adding a new user\n* Restore link for task title on board\n\nBreaking Changes:\n\n* Remove method getQrCodeUrl() from PostAuthenticationProviderInterface\n\nVersion 1.0.40 (Feb 24 2017)\n----------------------------\n\nNew features:\n\n* Send comments by email\n* Send tasks by email\n* Add Reply-To header to emails sent from Kanboard\n* Upload Sqlite database from user interface\n* Automatic action to change task color when due date is expired\n\nImprovements:\n\n* Make link to calendar view bookable\n* Reintroduce word search in board selector\n* Properly resize task list height on column toggle\n* Show total score across all swimlanes\n* Redesign task list view and project list view\n* Allow people to remove missing automatic actions (installed from a removed plugins)\n* Improve task view tables\n* Simplify automatic actions table\n* Show category description in tooltip\n* Show category creation form in modal dialog\n* Prevent people to remove swimlanes that contains tasks\n* Show task count in swimlane table\n* Use contextual menu instead of action column in users management\n\nBreaking changes:\n\n* The concept of \"default swimlane\" has been removed\n* Previous default swimlanes are migrated to an independent swimlanes\n* Columns \"default_swimlane\" and \"show_default_swimlane\" from \"projects\" table are not used anymore\n* Remove API method \"getDefaultSwimlane()\"\n* Add mandatory argument \"project_id\" to API method \"updateSwimlane()\"\n* Change interface for mail transports\n\nBug fixes:\n\n* Upload files button stay disabled when there are other submit buttons on the same page\n* Hiding subtasks from hidden tasks in dashboard\n\nSecurity:\n\n* Fix XSS in LetterAvatarProvider (render broken image)\n\nThose issues are harmless if you use default Kanboard settings for CSP rules:\n\n* Avoid potential XSS in project overview when listing users\n* Avoid potential XSS in Gantt chart\n\nVersion 1.0.39 (Feb 12, 2017)\n-----------------------------\n\nImprovements:\n\n* Add menu entry in task dropdown to add attachments\n* Improve error reporting when file upload is not configured properly\n* Open comments on board view with a modal dialog instead of tooltip\n* Improve card icons alignment on board\n* Adjust modal dialog width on mobile devices\n* Add priority column in list view\n* Change wording for project status (use \"closed\" instead of \"inactive\")\n* Prevent people to remove columns that contains tasks\n* Improve LDAP error reporting\n* Add configuration parameter to disable email configuration from user interface\n* Add email address field for projects\n* Improve forget password behavior (notify the user that an email has been sent or not)\n* Do not display current project in board selector\n* Do not set default task assignee for team projects\n* Comments are highlighted if hash (#comment-123) is present in URL\n* Documentation translated in Turkish\n\nBug fixes:\n\n* Search with multiple expressions with double quotes was not working\n* Fix broken subtask restriction per user\n* Fix CFD chart (stack wrongly ordered)\n\nVersion 1.0.38 (Jan 28, 2017)\n-----------------------------\n\nNew features:\n\n* User invitations by email\n\nImprovements:\n\n* Simplify user creation form\n* Add modification date for comments\n* Add project creation links to project management pages\n* More API procedures are now available to project members and project viewers\n* Simplify date and time configuration to avoid potential validation issues\n* Show dashboard column visibility in columns page\n* Add new template hooks\n* Update translations (id_ID, de_DE, ru_RU, fr_FR, pt_PT)\n* Add command to execute individual job (mostly for debugging)\n\nRegressions:\n\n* Stay on the same page when a task is closed\n* Wrong URL in modal to move task to another project\n\nBug fixes:\n\n* Fix broken link when clicking on user avatar for tasks on board\n* Fix wrong datetime formatting when task form shows validation errors\n* Empty arrays are serialized to a list instead of a dict (Json API)\n* Always unbind internal listeners when closing a modal dialog\n* Fix installation errors on MySQL 8.0.0 (unescaped reserved keyword)\n* Avoid PHP notice when column form validation failed\n* Fix wrong default value for add group member modal\n* Add missing filter (completed) for task search\n\nVersion 1.0.37 (Jan 14, 2017)\n-----------------------------\n\nImprovements:\n\n* Improve keyboard shortcuts handling\n* Improve auto-complete dropdown elements sorting\n* Larger task form\n* Rewrite dialog and confirmation boxes (inline popups)\n* Remove TaskGanttCreationController\n* Add helpers to open modal boxes\n* Make icons clickable in menus\n* Open task imports in modal box\n* Open form to create customer filters in modal box\n* Open project activities in modal box\n* Display project analytics in modal box\n* Display project exports in modal box\n* Improve accordion component\n* Improve currencies page navigation\n* Improve link labels page navigation\n* Improve settings page layout\n* Offer the possibility to define version compatibility from plugins\n* Add task creation event to the automatic action to send task by email\n\nBug fixes:\n\n* Closing screenshot dialog prevent input elements to get focus\n\nVersion 1.0.36 (Dec 30, 2016)\n-----------------------------\n\nNew features:\n\n* Add slideshow for images\n* Add API calls to manage tags\n* Offer the possibility to override internal formatter objects from plugins\n* Open PDF attachments in browser tab (preview)\n\nImprovements:\n\n* Add pagination details\n* Handle username with dots in user mentions\n* Rewrite UI component that change user/group roles\n* Replace Chosen jQuery plugin by custom UI component\n* Remove dependency on Mousetrap Javascript library\n* Disable PageSpeed module from .htaccess if present\n* Add currency of Chinese Yuan\n\nBug fixes:\n\n* Fix compatibility issue with PHP 5.3 for array_combine function\n* Fix wrong controller name on project activity page when using filters\n* Uploaded avatar images are now visible in public board view\n\nVersion 1.0.35 (Dec 4, 2016)\n----------------------------\n\nNew features:\n\n* Add external tasks plugin interfaces\n* Add personal API access token for users\n* Rewrite of Markdown editor (remove CodeMirror)\n* Suggest menu for task ID and user mentions in Markdown editor\n* Add config parameter to disable automatic SQL migrations\n\nImprovements:\n\n* Add button to close inline popups\n* Simplify `.htaccess` to avoid potential issues with possible specific Apache configurations\n* Replace notifications Javascript code by CSS\n* Refactoring of user mentions job\n* Remove Nitrous installer\n* Update translations\n* Rewrite some components in Vanilla Javascript\n* Started Javascript code refactoring to avoid to much dependencies on jQuery\n* Remove dependency on VueJS and CoreMirror\n* Add P3P headers to avoid potential issues with IE\n\nBreaking changes:\n\n* Rename command line tool `./kanboard` to `./cli`\n\nBug fixes:\n\n* Change column type for application settings value (field too small)\n* Fix link generation when user mention is followed by a punctuation mark\n* Make user mentions works again\n\nVersion 1.0.34 (Oct 11, 2016)\n-----------------------------\n\nNew features:\n\n* Custom project roles with configurable restrictions\n* Duplicate a task to multiple projects during creation\n* New automatic action:\n    - Close a task in a specific column when not moved during a given period\n\nImprovements:\n\n* Do not close the popover when clicking on the background\n* Add visual icon to show a dropdown action on task\n* Avoid 'blur' effect on popover\n* Accept more file types for external links\n* Restrict search to active projects\n* Improve task status filter\n* Add filter tag:none\n* Always apply merge hooks in task creation controller\n* Update task moved date only when the column or swimlane is changed\n* Add new subtask hooks\n* Add the actual use of TaskStartDateFilter\n* Update translations and documentation\n\nBug fixes:\n\n* Send absolute links in email notifications\n* Restrict task complexity to a specific range to avoid integer overflow\n* Do not show closed tasks in task move position form\n* Avoid \"Controller not found\" in Settings > Links\n\nVersion 1.0.33 (Sep 5, 2016)\n----------------------------\n\nNew features:\n\n* Move a task without drag and drop (smartphones and tablets)\n* Add the possibility to unlock users from the user interface\n* New API calls for task metadata\n* New automatic actions:\n    - Define color by Swimlane\n    - Define priority by Swimlane\n\nImprovements:\n\n* Introduce Vue.js to manage user interface components\n* Add column \"Reference\" and \"Creator Name\" in CSV task export\n* Show both time spent and estimated on the board\n* Store board collapsed mode user preference in the database\n* Store comment sorting direction in the database\n* Avoid tags overlapping on the board\n* Show project name in notifications\n* Allow priority changes for inverted priority scales\n* Add the possibility to attach template hooks with local variables and callback\n* Add \"reference\" hooks\n* Show project name in task forms\n* Convert vanilla CSS to SASS\n* Make user interface more responsive for smartphones and tablets\n* Support version operators for plugin directory: >= and >\n* Update Spanish documentation\n\nOther changes:\n\n* Time spent (in hours) for subtasks are not rounded too the nearest quarter anymore\n\nBug fixes:\n\n* Fix improper HTML escaping for textarea (potential XSS)\n* Do not show closed tasks on public boards\n* Fix undefined constant in config example file\n* Fix PHP notice when sending overdue notifications\n* Fix wrong project date format (shown as 01/01/1970)\n    - If the dates still not correct, modify and save the date\n\nVersion 1.0.32 (July 31, 2016)\n------------------------------\n\nNew features:\n\n* New automated actions:\n    - Close tasks without activity in a specific column\n    - Set due date automatically\n    - Move a task to another column when closed\n    - Move a task to another column when not moved during a given period\n* New filter \"moved\" for moved date of tasks\n* Added internal task links to activity stream\n* Added new event for removed comments\n* Added search filter for task priority\n* Added the possibility to hide tasks in dashboard for a specific column\n* Documentation translated in Russian\n\nImprovements:\n\n* Improve background worker and job handler\n* New template hooks\n* Removed individual column scrolling on board, columns use the height of all tasks\n* Improve project page titles\n* Remove sidebar titles when not necessary\n* Internal events management refactoring\n* Handle header X-Real-IP to get IP address\n* Display project name for task auto-complete fields\n* Make search attributes not case sensitive\n* Display TOTP issuer for 2FA\n* Make sure that the table schema_version use InnoDB for Mysql\n* Use the library PicoFeed to generate RSS/Atom feeds\n* Change all links to the new repository\n\nBug fixes:\n\n* Allow users to see inactive projects\n* Fixed typo in template that prevent project permissions to be duplicated\n* Fixed search query with multiple assignees (nested OR conditions)\n* Fixed Markdown editor auto-grow on the task form (Safari)\n* Fixed compatibility issue with PHP 5.3 for OAuthUserProvider class\n\nVersion 1.0.31 (Jul 3, 2016)\n----------------------------\n\nNew features:\n\n* Added tags: global and specific by project\n* Added application and project roles validation for API procedure calls\n* Added new API call: \"getProjectByIdentifier\"\n* Added new API calls for external task links, project attachments and subtask time tracking\n\nImprovements:\n\n* Use PHP 7 for the Docker image\n* Preserve role for existing users when using ReverseProxy authentication\n* Handle priority for task and project duplication\n* Expose task reference field to the user interface\n* Improve ICal export\n* Added argument owner_id and identifier to project API calls\n* Rewrite integration tests to run with Docker containers\n* Use the same task form layout everywhere\n* Removed some tasks dropdown menus that are now available with task edit form\n* Make embedded documentation readable in multiple languages (if a translation is available)\n* Added acceptance tests (browser tests)\n\nBug fixes:\n\n* Fixed broken CSV exports\n* Fixed identical background color for LetterAvatar on 32bits platforms (Hash greater than PHP_MAX_INT)\n* Fixed lexer issue with non word characters\n* Flush memory cache in worker to get latest config values\n* Fixed empty title for web notification with only one overdue task\n* Take default swimlane into consideration for SwimlaneModel::getFirstActiveSwimlane()\n* Fixed \"due today\" highlighting\n\nBreaking changes:\n\n* Docker volume paths are changed to /var/www/app/{data,plugins}\n\nVersion 1.0.30 (Jun 8, 2016)\n----------------------------\n\nImprovements:\n\n* Show tasks that are due today in a different color\n\nBug fixes:\n\n* Fixed wrong controller for search in dashboard\n* Fixed plural form in alert message\n* Fixed CSS cosmetic issue with popover and tooltips\n\nVersion 1.0.29 (Jun 5, 2016)\n----------------------------\n\nNew features:\n\n* Manage plugin from the user interface and from the command line\n* Added support for background workers\n* Added the possibility to convert a subtask to a task\n* Added menu entry to add tasks from all project views\n* Add tasks in bulk from the board\n* Add dropdown for projects\n* Added config parameter to allow self-signed certificates for the HTTP client\n\nImprovements:\n\n* Display local date format in date picker\n* Configure email settings with the user interface in addition to config file\n* Upgrade Docker image to Alpine Linux 3.4\n* Move task import to a separate section\n* Mark web notification as read when clicking on it\n* Support strtotime strings for date search\n* Reset failed login counter and unlock user when changing password\n* Task do not open anymore in a new window on the Gantt chart\n* Do not display task progress for tasks with no start/end date\n* Use Gulp and Bower to manage assets\n* Controller and Middleware refactoring\n* Replace jQuery mobile detection by the library isMobile\n\nBug fixes:\n\n* Fixed user date format parsing for dates that can be valid in multiple formats\n* Do not sync user role if LDAP groups are not configured\n* Fixed issue with unicode handling for letter based avatars and user initials\n* Do not send notifications to disabled users\n* Fixed wrong redirect when removing a task from the task view page\n\nBreaking changes:\n\n* Webhook to create tasks have been removed, use the API instead\n* All controllers have been renamed, people who are not using URL rewriting will see different URLs\n* All models have been renamed, plugin maintainers will have to update their plugins\n\nVersion 1.0.28 (May 8, 2016)\n----------------------------\n\nNew features:\n\n* Added automated action to change task color based on the priority\n* Added support for LDAP Posix Groups (OpenLDAP with memberUid or groupOfNames)\n* Added support for LDAP user photo attribute (Avatar image)\n* Added support for language LDAP attribute\n* Added support for Mysql SSL connection\n* Search in activity stream\n* Search in comments\n* Search by task creator\n* Added command line utility to reset user password and to disable 2FA\n\nImprovements:\n\n* Improve Avatar upload form\n* User roles are now synced with LDAP at each login\n* Improve web page title on the task view\n* Unify task drop-down menu between different views\n* Improve LDAP user group membership synchronization\n* Category and user filters do not append anymore in search field\n* Added more template hooks\n* Added tasks search with the API\n* Added priority field to API procedures\n* Added API procedure \"getMemberGroups\"\n* Added parameters for overdue tasks notifications: group by projects and send only to managers\n* Allow people to install Kanboard outside of the DocumentRoot\n* Allow plugins to be loaded from another folder\n* Filter/Lexer/QueryBuilder refactoring\n\nBug fixes:\n\n* Allow a project owner to manage his own public project\n* Fixed PHP warning when removing a user with no Avatar image\n* Fixed improper Markdown escaping for some tooltips\n* Closing all tasks by column, also update closed tasks\n* Fixed wrong task link generation within Markdown text\n* Fixed wrong URL on comment toggle link for sorting\n* Fixed form submission with Meta+Enter keyboard shortcut\n* Removed PHP notices in comment suppression view\n\nVersion 1.0.27 (Mar 27, 2016)\n-----------------------------\n\nNew features:\n\n* Added Markdown editor\n* Added user avatars with pluggable system\n    - Default is a letter based avatar\n    - Gravatar\n    - Avatar Image upload\n* Added Korean translation\n\nImprovements:\n\n* Added more logging for LDAP client\n* Improve schema migration process\n* Improve notification configuration form\n* Handle state in OAuth2 client\n* Allow to use the original template in overridden templates\n* Unification of the project header\n* Refactoring of Javascript code\n* Improve comments design\n* Improve task summary sections\n* Put back the action sidebar in task view\n* Added support for multiple placeholders for LDAP_USER_FILTER\n* Added local file link provider\n* Show configuration in settings page\n* Added \"?\" to display list of keyboard shortcuts\n* Added new keyboard shortcuts for task view\n* Always display project name and task title in task views\n* Improve automatic action creation\n* Move notifications to the bottom of the screen\n* Added the possibility to import automatic actions from another project\n* Added Ajax loading icon for submit buttons\n* Added support for HTTP header \"X-Forwarded-Proto: https\"\n\nBug fixes:\n\n* Fix bad unique constraints in Mysql table user_has_notifications\n* Force integer type for aggregated metrics (Burndown chart concat values instead of summing)\n* Fixes cycle time calculation when the start date is defined in the future\n* Access allowed to any tasks from the shared public board by changing the URL parameters\n* Fix invalid user filter for API procedure createLdapUser()\n* Ambiguous column name with very old version of Sqlite\n\nVersion 1.0.26 (Feb 28, 2016)\n-----------------------------\n\nBreaking changes:\n\n* API procedures:\n    - \"moveColumnUp\" and \"moveColumnDown\" are replaced by \"changeColumnPosition\"\n    - \"moveSwimlaneUp\" and \"moveSwimlaneDown\" are replaced by \"changeSwimlanePosition\"\n\nNew features:\n\n* Add drag and drop to change subtasks, swimlanes and columns positions\n* Add file drag and drop and asynchronous upload\n* Enable/Disable users\n* Add setting option to disable private projects\n* Add new config option to disable logout\n\nImprovements:\n\n* Use inline popup to create new columns\n* Improve filter box design\n* Improve image thumbnails and files table\n* Add confirmation inline popup to remove custom filter\n* Increase client_max_body_size value for Nginx\n* Split Board model into multiple classes\n* Improve logging for the Docker image\n\nBug fixes:\n\n* Fix PHP notices during creation of first project and in subtasks table\n* Fix filter dropdown not accessible when there are too many items\n* Fix regression: unable to change project in \"task move/duplicate to another project\"\n\nVersion 1.0.25 (Feb 7, 2016)\n----------------------------\n\nBreaking changes:\n\n* Core functionalities moved to external plugins:\n    - Google Auth: https://github.com/kanboard/plugin-google-auth\n    - Github Auth: https://github.com/kanboard/plugin-github-auth\n    - Gitlab Auth: https://github.com/kanboard/plugin-gitlab-auth\n\nNew features:\n\n* When creating a new project, have the possibility to select another project to duplicate\n* Add a \"Me\" button to assignee form element\n* Add external links for tasks with plugin api\n* Add project owner (Directly Responsible Individual)\n* Add configurable task priority\n* Add Greek translation\n* Add automatic actions to close tasks with no activity\n* Add automatic actions to send an email when there is no activity on a task\n* Regroup all daily background tasks in one command: \"cronjob\"\n* Add task dropdown menu on listing pages\n\nImprovements:\n\n* New Dockerfile based on Alpine Linux and Nginx/PHP-FPM\n* The date time format can be chosen in application settings\n* Export only open tasks in iCal feed\n* Remove time form on task summary page and move that to task edit form\n* Replace box shadow by a larger border width when a task is recently modified\n* Do not refresh the whole page when changing subtask status\n* Add dropdown menu with inline popup for all task actions\n* Change sidebar style\n* Change task summary layout\n* Use inline popup for subtasks, categories, swimlanes, actions and columns\n* Move homepage menus to the user dropdown\n* Have a new task assigned to the creator by default instead of \"no assignee\"\n* Show progress for task links in board tooltips\n* Simplify code to handle ajax popover and redirects\n* Simplify layout and templates generation\n* Move task form elements to Task helper\n\nBug fixes:\n\n* Category label is broken on the board if there's a url in the description\n* Fix pagination on task time tracking page\n\nVersion 1.0.24 (Jan 23, 2016)\n-----------------------------\n\nNew features:\n\n* Forgot Password\n* Add drop-down menu on each board column title to close all tasks\n* Add Malay language\n* Add new API procedures for groups, roles, project permissions and to move/duplicate tasks to another project\n\nImprovements:\n\n* Avoid to send XHR request when a task has not moved after a drag and drop\n* Set maximum dropzone height when the individual column scrolling is disabled\n* Always show the search box in board selector\n* Replace logout link by a drop-down menu\n* Handle notification for group members attached to a project\n* Return the highest role for a project when a user is member of multiple groups\n* Show in user interface the saving state of the task\n* Add drop-down menu for subtasks, categories, swimlanes, columns, custom filters, task links and groups\n* Add new template hooks\n* Application settings are not cached anymore in the session\n* Do not check board status during task move\n* Move validators to a separate namespace\n* Improve and write unit tests for reports\n* Reduce the number of SQL queries for project daily column stats\n* Remove event subscriber to update date_moved field\n* Make sure that some event subscribers are not executed multiple times\n* Show rendering time of individual templates when debug mode is enabled\n* Make sure that no events are fired if nothing has been modified in the task\n* Make dashboard section title clickable\n* Add unit tests for LastLogin\n\nBug fixes:\n\n* Automatic action listeners were using the same instance\n* Fix wrong link for category in task footer\n* Unable to set currency rate with Postgres database\n* Avoid automatic actions that change the color to fire subsequent events\n* Unable to unassign a task from the API\n* Revert back previous optimizations of TaskPosition (incompatibility with some environment)\n\nVersion 1.0.23 (Jan 9, 2016)\n----------------------------\n\nBreaking changes:\n\n* Plugin API changes for Automatic Actions\n* Automatic Action to close a task doesn't have the column parameter anymore (use the action \"Close a task in a specific column\")\n* Action name stored in the database is now the absolute class name\n* Core functionalities moved to external plugins:\n    - Github Webhook: https://github.com/kanboard/plugin-github-webhook\n    - Gitlab Webhook: https://github.com/kanboard/plugin-gitlab-webhook\n    - Bitbucket Webhook: https://github.com/kanboard/plugin-bitbucket-webhook\n\nNew features:\n\n* Added support of user mentions (@username)\n* Added report to compare working hours between open and closed tasks\n* Added the possibility to define custom routes from plugins\n* Added new method to remove metadata\n\nImprovements:\n\n* Improve Two-Factor activation and plugin API\n* Improving performance during task position change (SQL queries are 3 times faster than before)\n* Do not show window scrollbars when individual column scrolling is enabled\n* Automatic Actions code improvements and unit tests\n* Increase action name column length in actions table\n\nBug fixes:\n\n* Fix compatibility issue with FreeBSD for session.hash_function parameter\n* Fix wrong constant name that causes a PHP error in project management section\n* Fix pagination in group members listing\n* Avoid PHP error when enabling LDAP group provider with PHP < 5.5\n\nVersion 1.0.22 (Dec 13, 2015)\n-----------------------------\n\nBreaking changes:\n\n* LDAP configuration parameters changes (See documentation)\n* SQL table changes:\n    - \"users\" table: added new column \"role\" and removed columns \"is_admin\" and \"is_project_admin\"\n    - \"project_has_users\" table: replaced column \"is_owner\" with column \"role\"\n    - Sqlite does not support alter table, old columns still there but unused\n* API procedure changes:\n    - createUser\n    - createLdapUser\n    - updateUser\n    - updateTask\n* Event removed: \"session.bootstrap\", use \"app.boostrap\" instead\n\nNew features:\n\n* Add pluggable authentication and authorization system (complete rewrite)\n* Add groups (teams/organization)\n* Add LDAP groups synchronization\n* Add project group permissions\n* Add new project role Viewer\n* Add generic LDAP client library\n* Add search query attribute for task link\n* Add the possibility to define API token in config file\n* Add capability to reopen Gitlab issues\n* Try to load config.php from /data if not available\n\nVersion 1.0.21 (Nov 22, 2015)\n-----------------------------\n\nBreaking changes:\n\n* Projects with duplicate names are now allowed:\n    - For Postgres and Mysql the unique constraint is removed by database migration\n    - However Sqlite does not support alter table, only new databases will have the unique constraint removed\n\nNew features:\n\n* New automatic action: Assign a category based on a link\n* Added Bosnian translation\n\nImprovements:\n\n* Dropdown menu entries are now clickable outside of the html link\n* Improve error handling of plugins\n* Use PHP7 function random_bytes() to generate tokens if available\n* CSV task export show the assignee name in addition to the assignee username\n* Add new hooks for plugins\n* Remove workaround for \"INSERT ON DUPLICATE KEY UPDATE...\"\n\nInternal code refactoring:\n\n* Rewrite of session management\n* Move some classes to a new namespace Kanboard\\Core\\Http\n\nBug fixes:\n\n* Loading cs_CZ locale display the wrong language in datetime picker\n* Datepicker is closed unexpectedly on blur event\n* Fix bug in daily project summary CSV export\n* Fix PHP error when adding a new user with email notification enabled\n* Add missing template for activity stream to show event \"file.create\"\n* Fix wrong value for PLUGINS_DIR in config.default.php\n* Make CSV export compatible with PHP 5.3\n* Avoid Safari to append .html at the end of downloaded files\n\nVersion 1.0.20 (Oct 24, 2015)\n-----------------------------\n\nBreaking changes:\n\n* Add namespace Kanboard (update your plugins)\n* Move Mailgun, Sendgrid, Postmark, Slack, Hipchat and Jabber to plugins\n* ReverseProxy authentication check for each request that the username match the user session\n\nNew features:\n\n* Add CSV import for users and tasks\n* Add Task, User and Project metadata for plugin creators\n\nImprovements:\n\n* Allow to change comments sorting\n* Add the possibility to append or not custom filters\n* Make mail transports pluggable\n* Do not show scroll-bars when a column is collapsed on Windows systems\n* Regenerate thumbnails if missing\n\nBug fixes:\n\n* People should not see any tasks during a search when they are not associated to a project\n* Avoid disabling the default swimlane during renaming when there is no other activated swimlane\n\nVersion 1.0.19 (Oct 11, 2015)\n-----------------------------\n\nNew features:\n\n* Added web notifications\n* Added LDAP group sync\n* Added swimlane description\n* New plugin system (alpha)\n* Added Bahasa Indonesia translation\n* Added API procedures: getMyOverdueTasks, getOverdueTasksByProject and GetMyProjects\n* Added user API access for procedure getProjectActivity()\n* Added config parameter to enable/disable Syslog\n* Added custom filters\n* Added http client proxy support\n\nCore functionalities moved to plugins:\n\n* Budget planning: https://github.com/kanboard/plugin-budget\n* SubtaskForecast: https://github.com/kanboard/plugin-subtask-forecast\n* Timetable: https://github.com/kanboard/plugin-timetable\n\nImprovements:\n\n* When duplicating a task redirect to the new task\n* Include more shortcut links into the view \"My projects\"\n* Duplicate a project with tasks will copy the new tasks in the same columns\n* Offer alternative method to create Mysql and Postgres databases (import sql dump)\n* Make sure there is always a trailing slash for application_url\n* Do not show the checkbox \"Show default swimlane\" when there is no active swimlanes\n* Append filters instead of replacing value for users and categories drop-downs\n* Do not show empty swimlanes in public view\n* Change swimlane layout to save space on the screen\n* Add the possibility to set/unset max column height (column scrolling)\n* Show \"Open this task\" in drop-down menu for closed tasks\n* Show assignee on card only when someone is assigned (hide nobody text)\n* Highlight selected item in drop-down menus\n* Gantt chart: change bar color according to task progress\n* Replace color drop-down by color picker in task forms\n* Creating another task stay in the popover (no full page refresh anymore)\n* Avoid scrollbar in Gantt chart for row title on Windows platform\n* Remove unnecessary margin for calendar header\n* Show localized documentation if available\n* Add event subtask.delete\n* Add abstract storage layer\n* Add abstract cache layer\n* Add Docker tag for stable version\n\nOthers:\n\n* Data directory permission are not checked anymore\n* Data directory is not mandatory anymore for people that use a remote database and remote object storage\n\nBug fixes:\n\n* Fix typo in template that prevents Gitlab OAuth link to be displayed\n* Fix Markdown preview links focus\n* Avoid drop-down menu to be truncated inside a column with scrolling\n* Deleting subtask doesn't update task time tracking\n* Fix Mysql error about gitlab_id when creating remote user\n* Fix subtask timer bug (event called recursively)\n* Fix Postgres issue \"Cardinality violation\" when there is multiple \"is_milestone_of\" links\n* Fix issue with due date greater than year 2038\n\nVersion 1.0.18 (Aug 30, 2015)\n-----------------------------\n\nNew features:\n\n* Include documentation in the application\n* Add Gitlab authentication\n* Add users and categories filters on the board\n* Add hide/show columns\n* Add Gantt chart for projects and tasks\n* Add new role \"Project Administrator\"\n* Add login brute force protection with captcha and account lockdown\n* Add new api procedures: getDefaultTaskColor(), getDefaultTaskColors() and getColorList()\n* Add user api access\n* Add config parameter to define session duration\n* Add config parameter to disable/enable RememberMe authentication\n* Add start/end date for projects\n* Add new automated action to change task color based on the task link\n* Add milestone marker in board task\n* Add search for task title when using an integer only input\n* Add Portuguese (European) translation\n* Add Norwegian translation\n\nImprovements:\n\n* Add handle to move tasks on touch devices\n* Improve file attachments tooltip on the board\n* Adjust automatically the height of the placeholder during drag and drop\n* Show all tasks when using no search criteria\n* Add column vertical scrolling\n* Set dynamically column height based on viewport size\n* Enable support for Github Enterprise when using Github Authentication\n* Update iCalendar library to display organizer name\n* Improve sidebar menus\n* Add no referrer policy in meta tags\n* Run automated unit tests with Sqlite/Mysql/Postgres on Travis-ci\n* Add Makefile and remove the \"scripts\" directory\n\nBug fixes:\n\n* Wrong template name for subtasks tooltip due to previous refactoring\n* Fix broken url for closed tasks in project view\n* Fix permission issue when changing the url manually\n* Fix bug task estimate is reset when using subtask timer\n* Fix screenshot feature with Firefox 40\n* Fix bug when uploading files with Cyrilic characters\n\nVersion 1.0.17 (Jul 27, 2015)\n-----------------------------\n\nNew features:\n\n* Added url rewrite and new routes\n* Added new search engine with advanced syntax\n* Added global search section\n* Added search form on the dashboard\n* Added new dashboard layout\n* Added new layout for board/calendar/list views\n* Added filters helper for search forms\n* Added setting option to disable subtask timer\n* Added setting option to include or exclude closed tasks into CFD\n* Added setting option to define the default task color\n* Added new config option to disable automatic creation of LDAP accounts\n* Added loading icon on board view\n* Prompt user when moving or duplicate a task to another project\n* Added current values when moving/duplicate a task to another project and add a loading icon\n* Added memory consumption to debug log\n* Added form to create remote user\n* Added edit form for user authentication\n* Added config option to hide login form\n* Display OAuth2 urls on integration page\n* Added keyboard shortcuts to switch between board/calendar/list view\n* Added keyboard shortcut to focus on the search box\n* Added Slack channel override\n* Added new report: Lead and cycle time for projects\n* Added new report: Average time spent into each column\n* Added task analytics\n* Added icon to set the start date automatically\n* Added datetime picker for start date\n\nImprovements:\n\n* Updated documentation\n* Display user initials when tasks are in collapsed mode\n* Show title in tooltip for collapsed tasks\n* Improve alert box fadeout to avoid an empty space\n* Set focus on the drop-down for category popover\n* Make escape keyboard shortcut global\n* Check the box remember me by default\n* Store redirect login url in session instead of using url parameter\n* Update Gitlab webhook\n* Do not rewrite remember me cookie for each request\n* Set the assignee as organizer for ical events\n* Increase date range for ics export\n* Reduce spacing on cards\n* Move board collapse/expand mode to server side to avoid board flickering\n* Use ajax requests for board collapse/expand\n* Do not set anchor for the default swimlane on the link back to board\n* Replace timeserie axis to category axis for charts\n* Hide task age in compact mode\n* Improve quick-add subtasks form\n* Reduce the size of the filter box for smaller screen\n* Added icon to hide/show sidebar\n* Update GitLab logo\n* Improve Dockerfile\n\nTranslations:\n\n* Added Czech translation\n* Updated Spanish translation\n* Updated German Translation\n\nBug fixes:\n\n* Screenshot drop-down: unexpected scroll down on the board view and focus lost when clicking on the drop zone\n* No creator when duplicating a task\n* Avoid the creation of multiple subtask timer for the same task and user\n\nCode refactoring:\n\n* Split task controller into smaller classes\n* Remove method Category::getBoardCategories()\n* Rewrite movePosition() to improve performances\n* Refactoring of Github and Google authentication\n\nBreaking changes:\n\n* New OAuth url for Google and Github authentication\n\nAPI:\n\n* Add urls in api response for tasks and projects\n\nOther:\n\n* Added automated Docker build\n* Remove edit recurrence from the task menu on the board\n* Switch to MIT License instead of AGPLv3\n\nVersion 1.0.0 to 1.0.16\n-----------------------\n\n* See commit history and website news\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Automatic Actions Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ActionController extends BaseController\n{\n    /**\n     * List of automatic actions for a given project\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $actions = $this->actionModel->getAllByProject($project['id']);\n\n        $this->response->html($this->helper->layout->project('action/index', array(\n            'values' => array('project_id' => $project['id']),\n            'project' => $project,\n            'actions' => $actions,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'available_events' => $this->eventManager->getAll(),\n            'available_params' => $this->actionManager->getAvailableParameters($actions),\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id']),\n            'projects_list' => $this->projectUserRoleModel->getProjectsByUser($this->userSession->getId()),\n            'colors_list' => $this->colorModel->getList(),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'links_list' => $this->linkModel->getList(0, false),\n            'swimlane_list' => $this->swimlaneModel->getList($project['id']),\n            'title' => t('Automatic actions')\n        )));\n    }\n\n    /**\n     * Confirmation dialog before removing an action\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('action/remove', array(\n            'action' => $this->actionModel->getById($this->request->getIntegerParam('action_id')),\n            'available_events' => $this->eventManager->getAll(),\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'project' => $project,\n            'title' => t('Remove an action')\n        )));\n    }\n\n    /**\n     * Remove an action\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n\n        if (! empty($action) && $this->actionModel->remove($action['id'])) {\n            $this->flash->success(t('Action removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this action.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ActionController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Action Creation Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ActionCreationController extends BaseController\n{\n    /**\n     * Show the form (step 1)\n     *\n     * @access public\n     */\n    public function create()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('action_creation/create', array(\n            'project' => $project,\n            'values' => array('project_id' => $project['id']),\n            'available_actions' => $this->actionManager->getAvailableActions(),\n        )));\n    }\n\n    /**\n     * Choose the event according to the action (step 2)\n     *\n     * @access public\n     */\n    public function event()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        if (empty($values['action_name']) || empty($values['project_id'])) {\n            return $this->create();\n        }\n\n        return $this->response->html($this->template->render('action_creation/event', array(\n            'values' => $values,\n            'project' => $project,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'events' => $this->actionManager->getCompatibleEvents($values['action_name']),\n        )));\n    }\n\n    /**\n     * Define action parameters (step 3)\n     *\n     * @access public\n     */\n    public function params()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        if (empty($values['action_name']) || empty($values['project_id']) || empty($values['event_name'])) {\n            $this->create();\n            return;\n        }\n\n        $action = $this->actionManager->getAction($values['action_name']);\n        $action_params = $action->getActionRequiredParameters();\n\n        if (empty($action_params)) {\n            $this->doCreation($project, $values + array('params' => array()));\n        }\n\n        $projects_list = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n        unset($projects_list[$project['id']]);\n\n        $this->response->html($this->template->render('action_creation/params', array(\n            'values' => $values,\n            'action_params' => $action_params,\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id']),\n            'projects_list' => $projects_list,\n            'colors_list' => $this->colorModel->getList(),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'links_list' => $this->linkModel->getList(0, false),\n            'priorities_list' => $this->projectTaskPriorityModel->getPriorities($project),\n            'project' => $project,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'swimlane_list' => $this->swimlaneModel->getList($project['id']),\n            'events' => $this->actionManager->getCompatibleEvents($values['action_name']),\n        )));\n    }\n\n    /**\n     * Save the action (last step)\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $this->doCreation($this->getProject(), $this->request->getValues());\n    }\n\n    /**\n     * Common method to save the action\n     *\n     * @access private\n     * @param  array     $project   Project properties\n     * @param  array     $values    Form values\n     */\n    private function doCreation(array $project, array $values)\n    {\n        list($valid, ) = $this->actionValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->actionModel->create($values) !== false) {\n                $this->flash->success(t('Your automatic action have been created successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to create your automatic action.'));\n            }\n        }\n\n        $this->response->redirect($this->helper->url->to('ActionController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Base;\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Base Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nabstract class BaseController extends Base\n{\n    /**\n     * Check if the CSRF token from the URL is correct\n     *\n     * @access protected\n     */\n    protected function checkCSRFParam()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Check webhook token\n     *\n     * @access protected\n     */\n    protected function checkWebhookToken()\n    {\n        if ($this->configModel->get('webhook_token') !== $this->request->getStringParam('token')) {\n            throw AccessForbiddenException::getInstance()->withoutLayout();\n        }\n    }\n\n    /**\n     * Common method to get a task for task views\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getTask()\n    {\n        $project_id = $this->request->getIntegerParam('project_id');\n        $task = $this->taskFinderModel->getDetails($this->request->getIntegerParam('task_id'));\n\n        if (empty($task)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($project_id !== 0 && $project_id != $task['project_id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $task;\n    }\n\n    /**\n     * Get Task or Project file\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getFile()\n    {\n        $task_id = $this->request->getIntegerParam('task_id');\n        $file_id = $this->request->getIntegerParam('file_id');\n        $model = 'projectFileModel';\n\n        if ($task_id > 0) {\n            $model = 'taskFileModel';\n            $project_id = $this->taskFinderModel->getProjectId($task_id);\n\n            if ($project_id !== $this->request->getIntegerParam('project_id')) {\n                throw new AccessForbiddenException();\n            }\n        }\n\n        $file = $this->$model->getById($file_id);\n\n        if (empty($file)) {\n            throw new PageNotFoundException();\n        }\n\n        $file['model'] = $model;\n        return $file;\n    }\n\n    /**\n     * Common method to get a project\n     *\n     * @access protected\n     * @param  integer      $project_id    Default project id\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getProject($project_id = 0)\n    {\n        $project_id = $this->request->getIntegerParam('project_id', $project_id);\n        $project = $this->projectModel->getByIdWithOwner($project_id);\n\n        if (empty($project)) {\n            throw new PageNotFoundException();\n        }\n\n        return $project;\n    }\n\n    /**\n     * Common method to get the user\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getUser()\n    {\n        $user = $this->userModel->getById($this->request->getIntegerParam('user_id', $this->userSession->getId()));\n\n        if (empty($user)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $this->userSession->getId() != $user['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $user;\n    }\n\n    /**\n     * Get the current subtask\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getSubtask()\n    {\n        $subtask = $this->subtaskModel->getById($this->request->getIntegerParam('subtask_id'));\n\n        if (empty($subtask)) {\n            throw new PageNotFoundException();\n        }\n\n        return $subtask;\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Category Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass CategoryController extends BaseController\n{\n    /**\n     * Get the category (common method between actions)\n     *\n     * @access private\n     * @return array\n     * @throws PageNotFoundException\n     */\n    private function getCategory()\n    {\n        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n\n        if (empty($category)) {\n            throw new PageNotFoundException();\n        }\n\n        return $category;\n    }\n\n    /**\n     * List of categories for a given project\n     *\n     * @access public\n     * @throws PageNotFoundException\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('category/index', array(\n            'categories' => $this->categoryModel->getAll($project['id']),\n            'project'    => $project,\n            'title'      => t('Categories'),\n        )));\n    }\n\n    /**\n     * Show form to create new category\n     *\n     * @param array $values\n     * @param array $errors\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('category/create', array(\n            'values'  => $values + array('project_id' => $project['id']),\n            'errors'  => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and save a new category\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->categoryValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->categoryModel->create($values) !== false) {\n                $this->flash->success(t('Your category have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors = array('name' => array(t('Another category with the same name exists in this project')));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Edit a category (display the form)\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $category = $this->getCategory();\n\n        $this->response->html($this->template->render('category/edit', array(\n            'values'  => empty($values) ? $category : $values,\n            'errors'  => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Edit a category (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->categoryValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->categoryModel->update($values)) {\n                $this->flash->success(t('This category has been updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])));\n            } else {\n                $this->flash->failure(t('Unable to update this category.'));\n            }\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a category\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $category = $this->getCategory();\n\n        $this->response->html($this->helper->layout->project('category/remove', array(\n            'project'  => $project,\n            'category' => $category,\n        )));\n    }\n\n    /**\n     * Remove a category\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $category = $this->getCategory();\n\n        if ($this->categoryModel->remove($category['id'])) {\n            $this->flash->success(t('Category removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this category.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\n\n/**\n * Column Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass ColumnController extends BaseController\n{\n    /**\n     * Display columns list\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $columns = $this->columnModel->getAllWithTaskCount($project['id']);\n\n        $this->response->html($this->helper->layout->project('column/index', array(\n            'columns' => $columns,\n            'project' => $project,\n            'title' => t('Edit columns')\n        )));\n    }\n\n    /**\n     * Show form to create a new column\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        if (empty($values)) {\n            $values = array('project_id' => $project['id']);\n        }\n\n        $this->response->html($this->template->render('column/create', array(\n            'values' => $values,\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and add a new column\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n\n        list($valid, $errors) = $this->columnValidator->validateCreation($values);\n\n        if ($valid) {\n            $result = $this->columnModel->create(\n                $project['id'],\n                $values['title'],\n                $values['task_limit'],\n                $values['description'],\n                $values['hide_in_dashboard']\n            );\n\n            if ($result !== false) {\n                $this->flash->success(t('Column created successfully.'));\n                $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors['title'] = array(t('Another column with the same name exists in the project'));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Display a form to edit a column\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n\n        $this->response->html($this->helper->layout->project('column/edit', array(\n            'errors' => $errors,\n            'values' => $values ?: $column,\n            'project' => $project,\n            'column' => $column,\n        )));\n    }\n\n    /**\n     * Validate and update a column\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n\n        list($valid, $errors) = $this->columnValidator->validateModification($values);\n\n        if ($valid) {\n            $result = $this->columnModel->update(\n                $values['id'],\n                $values['title'],\n                $values['task_limit'],\n                $values['description'],\n                $values['hide_in_dashboard']\n            );\n\n            if ($result) {\n                $this->flash->success(t('Board updated successfully.'));\n                $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this board.'));\n            }\n        }\n\n        $this->edit($values, $errors);\n    }\n\n    /**\n     * Move column position\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getJson();\n\n        if (! empty($values) && isset($values['column_id']) && isset($values['position'])) {\n            $result = $this->columnModel->changePosition($project['id'], $values['column_id'], $values['position']);\n            $this->response->json(array('result' => $result));\n        } else {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Confirm column suppression\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('column/remove', array(\n            'column' => $this->columnModel->getById($this->request->getIntegerParam('column_id')),\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Remove a column\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $project = $this->getProject();\n        $this->checkCSRFParam();\n        $column_id = $this->request->getIntegerParam('column_id');\n\n        if ($this->columnModel->remove($column_id)) {\n            $this->flash->success(t('Column removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this column.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Security\\Role;\n\n/**\n * Custom Filter Controller\n *\n * @package Kanboard\\Controller\n * @author  Timo Litzbarski\n * @author  Frederic Guillot\n */\nclass CustomFilterController extends BaseController\n{\n    /**\n     * Display list of filters\n     *\n     * @access public\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('custom_filter/index', array(\n            'project' => $project,\n            'custom_filters' => $this->customFilterModel->getAll($project['id'], $this->userSession->getId()),\n            'title' => t('Custom filters'),\n        )));\n    }\n\n    /**\n     * Show creation form for custom filters\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('custom_filter/create', array(\n            'values' => $values + array('project_id' => $project['id']),\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Save a new custom filter\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n\n        $values = $this->request->getValues();\n        $values['user_id'] = $this->userSession->getId();\n\n        list($valid, $errors) = $this->customFilterValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->customFilterModel->create($values) !== false) {\n                $this->flash->success(t('Your custom filter have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to create your custom filter.'));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a custom filter\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->response->html($this->helper->layout->project('custom_filter/remove', array(\n            'project' => $project,\n            'filter' => $filter,\n            'title' => t('Remove a custom filter')\n        )));\n    }\n\n    /**\n     * Remove a custom filter\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->checkPermission($project, $filter);\n\n        if ($this->customFilterModel->remove($filter['id'])) {\n            $this->flash->success(t('Custom filter removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this custom filter.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Edit a custom filter (display the form)\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->checkPermission($project, $filter);\n\n        $this->response->html($this->helper->layout->project('custom_filter/edit', array(\n            'values' => empty($values) ? $filter : $values,\n            'errors' => $errors,\n            'project' => $project,\n            'filter' => $filter,\n            'title' => t('Edit custom filter')\n        )));\n    }\n\n    /**\n     * Edit a custom filter (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->checkPermission($project, $filter);\n\n        $values = $this->request->getValues();\n\n        if (! isset($values['is_shared'])) {\n            $values += array('is_shared' => 0);\n        }\n\n        if (! isset($values['append'])) {\n            $values += array('append' => 0);\n        }\n\n        list($valid, $errors) = $this->customFilterValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->customFilterModel->update($values)) {\n                $this->flash->success(t('Your custom filter have been updated successfully.'));\n                $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update custom filter.'));\n            }\n        }\n\n        $this->edit($values, $errors);\n    }\n\n    private function checkPermission(array $project, array $filter)\n    {\n        $user_id = $this->userSession->getId();\n\n        if ($filter['user_id'] != $user_id && ($this->projectUserRoleModel->getUserRole($project['id'], $user_id) === Role::PROJECT_MANAGER || ! $this->userSession->isAdmin())) {\n            throw new AccessForbiddenException();\n        }\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Project Edit Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass ProjectEditController extends BaseController\n{\n    /**\n     * Edit project\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('project_edit/show', array(\n            'owners' => $this->projectUserRoleModel->getAssignableUsersList($project['id'], true),\n            'values' => empty($values) ? $project : $values,\n            'errors' => $errors,\n            'project' => $project,\n            'title' => t('Edit project')\n        )));\n    }\n\n    /**\n     * Validate and update a project\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        $values = $this->prepareValues($project, $values);\n        list($valid, $errors) = $this->projectValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->projectModel->update($values)) {\n                $this->flash->success(t('Project updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('ProjectEditController', 'show', array('project_id' => $project['id'])), true);\n            } else {\n                $this->flash->failure(t('Unable to update this project.'));\n            }\n        }\n\n        return $this->show($values, $errors);\n    }\n\n    /**\n     * Prepare form values\n     *\n     * @access private\n     * @param  array  $project\n     * @param  array  $values\n     * @return array\n     */\n    private function prepareValues(array $project, array $values)\n    {\n        if (isset($values['is_private'])) {\n            if (! $this->helper->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])) {\n                unset($values['is_private']);\n            }\n        } elseif ($project['is_private'] == 1 && ! isset($values['is_private'])) {\n            if ($this->helper->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])) {\n                $values += array('is_private' => 0);\n            }\n        }\n\n        return $values;\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\n\n/**\n * Class ProjectTagController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ProjectTagController extends BaseController\n{\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('project_tag/index', array(\n            'project' => $project,\n            'tags'    => $this->tagModel->getAllByProject($project['id']),\n            'title'   => t('Project tags management'),\n        )));\n    }\n\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        if (empty($values)) {\n            $values['project_id'] = $project['id'];\n        }\n\n        $this->response->html($this->template->render('project_tag/create', array(\n            'project' => $project,\n            'values'  => $values,\n            'errors'  => $errors,\n        )));\n    }\n\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->tagValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->tagModel->create($project['id'], $values['name']) > 0) {\n                $this->flash->success(t('Tag created successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to create this tag.'));\n            }\n\n            $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n        } else {\n            $this->create($values, $errors);\n        }\n    }\n\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $tag_id = $this->request->getIntegerParam('tag_id');\n        $tag = $this->tagModel->getById($tag_id);\n\n        if (empty($values)) {\n            $values = $tag;\n        }\n\n        $this->response->html($this->template->render('project_tag/edit', array(\n            'project' => $project,\n            'tag'     => $tag,\n            'values'  => $values,\n            'errors'  => $errors,\n        )));\n    }\n\n    public function update()\n    {\n        $project = $this->getProject();\n        $tag_id = $this->request->getIntegerParam('tag_id');\n        $tag = $this->tagModel->getById($tag_id);\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->tagValidator->validateModification($values);\n\n        if ($tag['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        if ($valid) {\n            if ($this->tagModel->update($values['id'], $values['name'])) {\n                $this->flash->success(t('Tag updated successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to update this tag.'));\n            }\n\n            $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n        } else {\n            $this->edit($values, $errors);\n        }\n    }\n\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $tag_id = $this->request->getIntegerParam('tag_id');\n        $tag = $this->tagModel->getById($tag_id);\n\n        $this->response->html($this->template->render('project_tag/remove', array(\n            'tag'     => $tag,\n            'project' => $project,\n        )));\n    }\n\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $tag_id = $this->request->getIntegerParam('tag_id');\n        $tag = $this->tagModel->getById($tag_id);\n\n        if ($tag['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        if ($this->tagModel->remove($tag_id)) {\n            $this->flash->success(t('Tag removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this tag.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\nuse Kanboard\\Model\\SwimlaneModel;\n\n/**\n * Swimlanes Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass SwimlaneController extends BaseController\n{\n    /**\n     * Get the swimlane (common method between actions)\n     *\n     * @access private\n     * @return array\n     * @throws PageNotFoundException\n     */\n    private function getSwimlane()\n    {\n        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n\n        if (empty($swimlane)) {\n            throw new PageNotFoundException();\n        }\n\n        return $swimlane;\n    }\n\n    /**\n     * List of swimlanes for a given project\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $swimlanes = $this->swimlaneModel->getAllWithTaskCount($project['id']);\n\n        $this->response->html($this->helper->layout->project('swimlane/index', array(\n            'active_swimlanes' => $swimlanes['active'],\n            'inactive_swimlanes' => $swimlanes['inactive'],\n            'project' => $project,\n            'title' => t('Swimlanes')\n        )));\n    }\n\n    /**\n     * Create a new swimlane\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('swimlane/create', array(\n            'values' => $values + array('project_id' => $project['id']),\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and save a new swimlane\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->swimlaneValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->swimlaneModel->create($project['id'], $values['name'], $values['description']) !== false) {\n                $this->flash->success(t('Your swimlane have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors = array('name' => array(t('Another swimlane with the same name exists in the project')));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Edit a swimlane (display the form)\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane();\n\n        $this->response->html($this->helper->layout->project('swimlane/edit', array(\n            'values' => empty($values) ? $swimlane : $values,\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Edit a swimlane (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n\n        $values = $this->request->getValues();\n        list($valid, $errors) = $this->swimlaneValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->swimlaneModel->update($values['id'], $values)) {\n                $this->flash->success(t('Swimlane updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n            } else {\n                $errors = array('name' => array(t('Another swimlane with the same name exists in the project')));\n            }\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a swimlane\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane();\n\n        $this->response->html($this->helper->layout->project('swimlane/remove', array(\n            'project' => $project,\n            'swimlane' => $swimlane,\n        )));\n    }\n\n    /**\n     * Remove a swimlane\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n\n        if ($this->swimlaneModel->remove($project['id'], $swimlane_id)) {\n            $this->flash->success(t('Swimlane removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Disable a swimlane\n     *\n     * @access public\n     */\n    public function disable()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n\n        if ($this->swimlaneModel->disable($project['id'], $swimlane_id)) {\n            $this->flash->success(t('Swimlane updated successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to update this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Enable a swimlane\n     *\n     * @access public\n     */\n    public function enable()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n\n        if ($this->swimlaneModel->enable($project['id'], $swimlane_id)) {\n            $this->flash->success(t('Swimlane updated successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to update this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Move swimlane position\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getJson();\n\n        if (! empty($values) && isset($values['swimlane_id']) && isset($values['position'])) {\n            $result = $this->swimlaneModel->changePosition($project['id'], $values['swimlane_id'], $values['position']);\n            $this->response->json(array('result' => $result));\n        } else {\n            throw new AccessForbiddenException();\n        }\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Task Creation Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass TaskCreationController extends BaseController\n{\n    /**\n     * Display a form to create a new task\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws PageNotFoundException\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $swimlanesList = $this->swimlaneModel->getList($project['id'], false, true);\n        $values += $this->prepareValues($project['is_private'], $swimlanesList);\n\n        $values = $this->hook->merge('controller:task:form:default', $values, array('default_values' => $values));\n        $values = $this->hook->merge('controller:task-creation:form:default', $values, array('default_values' => $values));\n\n        $this->response->html($this->template->render('task_creation/show', array(\n            'project' => $project,\n            'errors' => $errors,\n            'values' => $values + array('project_id' => $project['id']),\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id'], true, false, $project['is_private'] == 1),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'swimlanes_list' => $swimlanesList,\n        )));\n    }\n\n    /**\n     * Validate and save a new task\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        list($valid, $errors) = $this->taskValidator->validateCreation($values);\n\n        if (! $valid) {\n            $this->flash->failure(t('Unable to create your task.'));\n            $this->show($values, $errors);\n        } else if (! $this->helper->projectRole->canCreateTaskInColumn($project['id'], $values['column_id'])) {\n            $this->flash->failure(t('You cannot create tasks in this column.'));\n            $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n        } else {\n            $task_id = $this->taskCreationModel->create($values);\n\n            if ($task_id > 0) {\n                $this->flash->success(t('Task created successfully.'));\n                $this->afterSave($project, $values, $task_id);\n            } else {\n                $this->flash->failure(t('Unable to create this task.'));\n                $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n            }\n        }\n    }\n\n    /**\n     * Duplicate created tasks to multiple projects\n     *\n     * @throws PageNotFoundException\n     */\n    public function duplicateProjects()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        if (isset($values['project_ids'])) {\n            foreach ($values['project_ids'] as $project_id) {\n                $this->taskProjectDuplicationModel->duplicateToProject($values['task_id'], $project_id);\n            }\n        }\n\n        $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n    }\n\n    /**\n     * Executed after the task is saved\n     *\n     * @param array   $project\n     * @param array   $values\n     * @param integer $task_id\n     */\n    protected function afterSave(array $project, array &$values, $task_id)\n    {\n        if (isset($values['duplicate_multiple_projects']) && $values['duplicate_multiple_projects'] == 1) {\n            $this->chooseProjects($project, $task_id);\n        } elseif (isset($values['another_task']) && $values['another_task'] == 1) {\n            $this->show(array(\n                'owner_id' => $values['owner_id'],\n                'color_id' => $values['color_id'],\n                'category_id' => isset($values['category_id']) ? $values['category_id'] : 0,\n                'column_id' => $values['column_id'],\n                'swimlane_id' => isset($values['swimlane_id']) ? $values['swimlane_id'] : 0,\n                'another_task' => 1,\n            ));\n        } else {\n            $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n        }\n    }\n\n    /**\n     * Prepare form values\n     *\n     * @access protected\n     * @param  bool  $isPrivateProject\n     * @param  array $swimlanesList\n     * @return array\n     */\n    protected function prepareValues($isPrivateProject, array $swimlanesList)\n    {\n        $values = array(\n            'swimlane_id' => $this->request->getIntegerParam('swimlane_id', key($swimlanesList)),\n            'column_id'   => $this->request->getIntegerParam('column_id'),\n            'color_id'    => $this->colorModel->getDefaultColor(),\n        );\n\n        if ($isPrivateProject) {\n            $values['owner_id'] = $this->userSession->getId();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Choose projects\n     *\n     * @param array $project\n     * @param integer $task_id\n     */\n    protected function chooseProjects(array $project, $task_id)\n    {\n        $task = $this->taskFinderModel->getById($task_id);\n        $projects = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n        unset($projects[$project['id']]);\n\n        $this->response->html($this->template->render('task_creation/duplicate_projects', array(\n            'project' => $project,\n            'task' => $task,\n            'projects_list' => $projects,\n            'values' => array('task_id' => $task['id'])\n        )));\n    }\n}\n", "<div class=\"page-header\">\n    <h2><?= t('Add an action') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'event', array('project_id' => $project['id'])) ?>\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values) ?>\n\n    <?= $this->modal->submitButtons(array(\n        'submitLabel' => t('Next step')\n    )) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Choose an event') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'params', array('project_id' => $project['id'])) ?>\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('project_id', $values) ?>\n    <?= $this->form->hidden('action_name', $values) ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values, array(), array('disabled')) ?>\n\n    <?= $this->form->label(t('Event'), 'event_name') ?>\n    <?= $this->form->select('event_name', $events, $values) ?>\n\n    <div class=\"form-help\">\n        <?= t('When the selected event occurs execute the corresponding action.') ?>\n    </div>\n\n    <?= $this->modal->submitButtons(array(\n        'submitLabel' => t('Next step')\n    )) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Define action parameters') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('project_id', $values) ?>\n    <?= $this->form->hidden('event_name', $values) ?>\n    <?= $this->form->hidden('action_name', $values) ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values, array(), array('disabled')) ?>\n\n    <?= $this->form->label(t('Event'), 'event_name') ?>\n    <?= $this->form->select('event_name', $events, $values, array(), array('disabled')) ?>\n\n    <?php foreach ($action_params as $param_name => $param_desc): ?>\n        <?php if ($this->text->contains($param_name, 'column_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $columns_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'user_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $users_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'project_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $projects_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'color_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $colors_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'category_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $categories_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'link_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $links_list, $values) ?>\n        <?php elseif ($param_name === 'priority'): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $priorities_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'duration')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->number('params['.$param_name.']', $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'swimlane_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $swimlane_list, $values) ?>\n        <?php else: ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->text('params['.$param_name.']', $values) ?>\n        <?php endif ?>\n    <?php endforeach ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new category') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Category Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Category modification for the project \"%s\"', $project['name']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'update', array('project_id' => $project['id'], 'category_id' => $values['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('id', $values) ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Category Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new column') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Title'), 'title') ?>\n    <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Task limit'), 'task_limit') ?>\n    <?= $this->form->number('task_limit', $values, $errors, array('tabindex=\"2\"')) ?>\n\n    <?= $this->form->checkbox('hide_in_dashboard', t('Hide tasks in this column in the dashboard'), 1, false, '', array('tabindex' => 3)) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 4)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit column \"%s\"', $column['title']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'update', array('project_id' => $project['id'], 'column_id' => $column['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('id', $values) ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Title'), 'title') ?>\n    <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>\n\n    <?= $this->form->label(t('Task limit'), 'task_limit') ?>\n    <?= $this->form->number('task_limit', $values, $errors) ?>\n\n    <?= $this->form->checkbox('hide_in_dashboard', t('Hide tasks in this column in the dashboard'), 1, $values['hide_in_dashboard'] == 1) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new filter') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>\n\n    <?= $this->form->label(t('Filter'), 'filter') ?>\n    <?= $this->form->text('filter', $values, $errors, array('required', 'maxlength=\"100\"')) ?>\n\n    <?php if ($this->user->hasProjectAccess('ProjectEditController', 'show', $project['id'])): ?>\n        <?= $this->form->checkbox('is_shared', t('Share with all project members'), 1) ?>\n    <?php endif ?>\n\n    <?= $this->form->checkbox('append', t('Append filter (instead of replacement)'), 1) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit custom filter') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'update', array('project_id' => $filter['project_id'], 'filter_id' => $filter['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('id', $values) ?>\n    <?= $this->form->hidden('user_id', $values) ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>\n\n    <?= $this->form->label(t('Filter'), 'filter') ?>\n    <?= $this->form->text('filter', $values, $errors, array('required', 'maxlength=\"100\"')) ?>\n\n    <?php if ($this->user->hasProjectAccess('ProjectEditController', 'show', $project['id'])): ?>\n        <?= $this->form->checkbox('is_shared', t('Share with all project members'), 1, $values['is_shared'] == 1) ?>\n    <?php else: ?>\n        <?= $this->form->hidden('is_shared', $values) ?>\n    <?php endif ?>\n\n    <?= $this->form->checkbox('append', t('Append filter (instead of replacement)'), 1, $values['append'] == 1) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<?php if ($this->app->isAjax()): ?>\n    <div class=\"page-header\">\n        <h2><?= $this->text->e($project['name']) ?> &gt; <?= t('Edit project') ?></h2>\n    </div>\n<?php else: ?>\n    <div class=\"page-header\">\n        <h2><?= t('Edit project') ?></h2>\n    </div>\n<?php endif ?>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectEditController', 'update', array('project_id' => $project['id'], 'redirect' => 'edit')) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('id', $values) ?>\n\n    <fieldset>\n        <legend><?= t('General') ?></legend>\n\n        <?= $this->form->label(t('Name'), 'name') ?>\n        <?= $this->form->text('name', $values, $errors, array('required', 'maxlength=\"50\"', 'autofocus', 'tabindex=\"1\"')) ?>\n\n        <?= $this->form->label(t('Email'), 'email') ?>\n        <?= $this->form->email('email', $values, $errors, array('maxlength=\"255\"', 'tabindex=\"2\"')) ?>\n        <p class=\"form-help\"><?= t('The project email is optional and could be used by several plugins.') ?></p>\n\n        <?= $this->form->label(t('Identifier'), 'identifier') ?>\n        <?= $this->form->text('identifier', $values, $errors, array('maxlength=\"50\"', 'tabindex=\"3\"')) ?>\n        <p class=\"form-help\"><?= t('The project identifier is optional and must be alphanumeric, example: MYPROJECT.') ?></p>\n\n        <?= $this->form->label(t('Description'), 'description') ?>\n        <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 4)) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Permissions and ownership') ?></legend>\n\n        <?php if ($this->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])): ?>\n            <?= $this->form->checkbox('is_private', t('Private project'), 1, $project['is_private'] == 1) ?>\n            <p class=\"form-help\"><?= t('Private projects do not have users and groups management.') ?></p>\n        <?php endif ?>\n\n        <div class=\"form-inline\">\n            <?= $this->form->label(t('Project owner'), 'owner_id') ?>\n            <?= $this->form->select('owner_id', $owners, $values, $errors, array('tabindex=\"5\"')) ?>\n        </div>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Dates') ?></legend>\n\n        <?= $this->form->date(t('Start date'), 'start_date', $values, $errors, array('tabindex=\"6\"')) ?>\n        <?= $this->form->date(t('End date'), 'end_date', $values, $errors, array('tabindex=\"7\"')) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Priorities') ?></legend>\n\n        <?= $this->form->label(t('Default priority'), 'priority_default') ?>\n        <?= $this->form->number('priority_default', $values, $errors, array('tabindex=\"8\"')) ?>\n\n        <?= $this->form->label(t('Lowest priority'), 'priority_start') ?>\n        <?= $this->form->number('priority_start', $values, $errors, array('tabindex=\"9\"')) ?>\n\n        <?= $this->form->label(t('Highest priority'), 'priority_end') ?>\n        <?= $this->form->number('priority_end', $values, $errors, array('tabindex=\"10\"')) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Predefined Email Subjects') ?></legend>\n        <?= $this->form->textarea('predefined_email_subjects', $values, $errors, array('tabindex=\"11\"')) ?>\n        <p class=\"form-help\"><?= t('Write one subject by line.') ?></p>\n    </fieldset>\n\n    <?= $this->modal->submitButtons(array('tabindex' => 11)) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add new tag') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit a tag') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'update', array('tag_id' => $tag['id'], 'project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('id', $values) ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new swimlane') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Swimlane modification for the project \"%s\"', $project['name']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'update', array('project_id' => $project['id'], 'swimlane_id' => $values['id'])) ?>\" autocomplete=\"off\">\n\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('id', $values) ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= $this->text->e($project['name']) ?> &gt; <?= t('New task') ?><?= $this->task->getNewTaskDropdown($project['id'], $values['swimlane_id'], $values['column_id']) ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('TaskCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n    <?= $this->form->hidden('project_id', $values) ?>\n\n    <div class=\"task-form-container\">\n        <div class=\"task-form-main-column\">\n            <?= $this->task->renderTitleField($values, $errors) ?>\n            <?= $this->task->renderDescriptionField($values, $errors) ?>\n            <?= $this->task->renderTagField($project) ?>\n\n            <?= $this->hook->render('template:task:form:first-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-secondary-column\">\n            <?= $this->task->renderColorField($values) ?>\n            <?= $this->task->renderAssigneeField($users_list, $values, $errors) ?>\n            <?= $this->task->renderCategoryField($categories_list, $values, $errors) ?>\n            <?= $this->task->renderSwimlaneField($swimlanes_list, $values, $errors) ?>\n            <?= $this->task->renderColumnField($columns_list, $values, $errors) ?>\n            <?= $this->task->renderPriorityField($project, $values) ?>\n\n            <?= $this->hook->render('template:task:form:second-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-secondary-column\">\n            <?= $this->task->renderDueDateField($values, $errors) ?>\n            <?= $this->task->renderStartDateField($values, $errors) ?>\n            <?= $this->task->renderTimeEstimatedField($values, $errors) ?>\n            <?= $this->task->renderTimeSpentField($values, $errors) ?>\n            <?= $this->task->renderScoreField($values, $errors) ?>\n            <?= $this->task->renderReferenceField($values, $errors) ?>\n\n            <?= $this->hook->render('template:task:form:third-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-bottom\">\n            <?php if (! isset($duplicate)): ?>\n                <?= $this->form->checkbox('another_task', t('Create another task'), 1, isset($values['another_task']) && $values['another_task'] == 1) ?>\n                <?= $this->form->checkbox('duplicate_multiple_projects', t('Duplicate to multiple projects'), 1) ?>\n            <?php endif ?>\n\n            <?= $this->modal->submitButtons() ?>\n        </div>\n    </div>\n</form>\n"], "fixing_code": ["Version 1.0.47 (unreleased)\n---------------------------\n\nNew features:\n\n* Vietnamese translation\n\nSecurity Issues:\n\n* Avoid people to alter other project resources by changing form data\n\nVersion 1.0.46 (August 13, 2017)\n--------------------------------\n\nSecurity Issues:\n\n* Fix two privilege escalation issues: a standard user could reset the password \nof another user (including admin) by altering form data.\n(CVE-2017-12850 and CVE-2017-12851, discovered by \"chbi\").\n\nImprovements:\n\n* Add \"Create another link\" checkbox for internal link as in sub-task creation\n* Updated translations\n\nBug fixes:\n\n* Fix parsing issue in phpToBytes() method\n\nVersion 1.0.45 (June 23, 2017)\n------------------------------\n\nNew features:\n\n* Automatic action to assign tasks to its creator\n* Add the possibility to create a comment when a task is sent by email\n* Add dropdown menu to autocomplete email field from project members\n* Add configurable list of predefined subjects when sending a task or a a comment by email\n* Add command line argument to filter overdue notification for a given project\n\nImprovements:\n\n* Improve SQL migrations when old default swimlanes have the same name as a normal swimlanes\n\nBug fixes:\n\n* Add missing subtask permissions for project viewer role\n* Fix Javascript language mapping\n\nVersion 1.0.44 (May 28, 2017)\n-----------------------------\n\nImprovements:\n\n* Use datetime field for due date\n* Update Docker image to Alpine Linux 3.6\n* Add the possibility to pass API token as environment variable for Docker container\n* Add wildcard search for task reference field\n* Improve automated action TaskAssignColorOnDueDate to update task only when necessary\n* Add task and project API formatters\n* Update translations\n\nBug fixes:\n\n* Fix broken user mentions in comment form at the bottom of the task view page\n* Ensure project tags are removed when the project is removed\n* Avoid PHP notice when regenerating API token for a user\n* Fix wrong dropdown menu in group members list\n* Show only active users in auto-complete forms (project permissions)\n* Check owner existence before to create project\n\nVersion 1.0.43 (April 30, 2017)\n-------------------------------\n\nImprovements:\n\n* Add \"[DUPLICATE]\" prefix to duplicated tasks title\n* Add sorting by position and start date in task list view\n* Update translations\n\nBug fixes:\n\n* Add missing plugin parameter for search box (Gantt and calendar plugin)\n* Fix broken start date button\n\nVersion 1.0.42 (April 8, 2017)\n------------------------------\n\nNew features:\n\n* New restrictions for custom project roles\n\nImprovements:\n\n* Improved dashboard\n\nBreaking Changes:\n\n* Move calendar to external plugin: https://github.com/kanboard/plugin-calendar\n* Move Gantt charts to external plugin: https://github.com/kanboard/plugin-gantt\n* Move Gravatar to external plugin: https://github.com/kanboard/plugin-gravatar\n\nBug fixes:\n\n* Fix typo in Sqlite schema\n\nVersion 1.0.41 (March 19, 2017)\n-------------------------------\n\nNew features:\n\n* Add Croatian language translation\n\nImprovements:\n\n* Simplify dashboard to use new tasks list view\n* Move notifications outside of dashboard\n* Render QR code for TwoFactor authentication without Google Chart API\n* Add toggle button to show/hide subtasks in task list view\n* Use same layout as task listing for task search\n* Display tags in task list view\n* Make user actions available from contextual menu\n* Change users and groups list layout\n* Project priority is always rendered now\n* Do not list private projects when adding a new user\n* Restore link for task title on board\n\nBreaking Changes:\n\n* Remove method getQrCodeUrl() from PostAuthenticationProviderInterface\n\nVersion 1.0.40 (Feb 24 2017)\n----------------------------\n\nNew features:\n\n* Send comments by email\n* Send tasks by email\n* Add Reply-To header to emails sent from Kanboard\n* Upload Sqlite database from user interface\n* Automatic action to change task color when due date is expired\n\nImprovements:\n\n* Make link to calendar view bookable\n* Reintroduce word search in board selector\n* Properly resize task list height on column toggle\n* Show total score across all swimlanes\n* Redesign task list view and project list view\n* Allow people to remove missing automatic actions (installed from a removed plugins)\n* Improve task view tables\n* Simplify automatic actions table\n* Show category description in tooltip\n* Show category creation form in modal dialog\n* Prevent people to remove swimlanes that contains tasks\n* Show task count in swimlane table\n* Use contextual menu instead of action column in users management\n\nBreaking changes:\n\n* The concept of \"default swimlane\" has been removed\n* Previous default swimlanes are migrated to an independent swimlanes\n* Columns \"default_swimlane\" and \"show_default_swimlane\" from \"projects\" table are not used anymore\n* Remove API method \"getDefaultSwimlane()\"\n* Add mandatory argument \"project_id\" to API method \"updateSwimlane()\"\n* Change interface for mail transports\n\nBug fixes:\n\n* Upload files button stay disabled when there are other submit buttons on the same page\n* Hiding subtasks from hidden tasks in dashboard\n\nSecurity:\n\n* Fix XSS in LetterAvatarProvider (render broken image)\n\nThose issues are harmless if you use default Kanboard settings for CSP rules:\n\n* Avoid potential XSS in project overview when listing users\n* Avoid potential XSS in Gantt chart\n\nVersion 1.0.39 (Feb 12, 2017)\n-----------------------------\n\nImprovements:\n\n* Add menu entry in task dropdown to add attachments\n* Improve error reporting when file upload is not configured properly\n* Open comments on board view with a modal dialog instead of tooltip\n* Improve card icons alignment on board\n* Adjust modal dialog width on mobile devices\n* Add priority column in list view\n* Change wording for project status (use \"closed\" instead of \"inactive\")\n* Prevent people to remove columns that contains tasks\n* Improve LDAP error reporting\n* Add configuration parameter to disable email configuration from user interface\n* Add email address field for projects\n* Improve forget password behavior (notify the user that an email has been sent or not)\n* Do not display current project in board selector\n* Do not set default task assignee for team projects\n* Comments are highlighted if hash (#comment-123) is present in URL\n* Documentation translated in Turkish\n\nBug fixes:\n\n* Search with multiple expressions with double quotes was not working\n* Fix broken subtask restriction per user\n* Fix CFD chart (stack wrongly ordered)\n\nVersion 1.0.38 (Jan 28, 2017)\n-----------------------------\n\nNew features:\n\n* User invitations by email\n\nImprovements:\n\n* Simplify user creation form\n* Add modification date for comments\n* Add project creation links to project management pages\n* More API procedures are now available to project members and project viewers\n* Simplify date and time configuration to avoid potential validation issues\n* Show dashboard column visibility in columns page\n* Add new template hooks\n* Update translations (id_ID, de_DE, ru_RU, fr_FR, pt_PT)\n* Add command to execute individual job (mostly for debugging)\n\nRegressions:\n\n* Stay on the same page when a task is closed\n* Wrong URL in modal to move task to another project\n\nBug fixes:\n\n* Fix broken link when clicking on user avatar for tasks on board\n* Fix wrong datetime formatting when task form shows validation errors\n* Empty arrays are serialized to a list instead of a dict (Json API)\n* Always unbind internal listeners when closing a modal dialog\n* Fix installation errors on MySQL 8.0.0 (unescaped reserved keyword)\n* Avoid PHP notice when column form validation failed\n* Fix wrong default value for add group member modal\n* Add missing filter (completed) for task search\n\nVersion 1.0.37 (Jan 14, 2017)\n-----------------------------\n\nImprovements:\n\n* Improve keyboard shortcuts handling\n* Improve auto-complete dropdown elements sorting\n* Larger task form\n* Rewrite dialog and confirmation boxes (inline popups)\n* Remove TaskGanttCreationController\n* Add helpers to open modal boxes\n* Make icons clickable in menus\n* Open task imports in modal box\n* Open form to create customer filters in modal box\n* Open project activities in modal box\n* Display project analytics in modal box\n* Display project exports in modal box\n* Improve accordion component\n* Improve currencies page navigation\n* Improve link labels page navigation\n* Improve settings page layout\n* Offer the possibility to define version compatibility from plugins\n* Add task creation event to the automatic action to send task by email\n\nBug fixes:\n\n* Closing screenshot dialog prevent input elements to get focus\n\nVersion 1.0.36 (Dec 30, 2016)\n-----------------------------\n\nNew features:\n\n* Add slideshow for images\n* Add API calls to manage tags\n* Offer the possibility to override internal formatter objects from plugins\n* Open PDF attachments in browser tab (preview)\n\nImprovements:\n\n* Add pagination details\n* Handle username with dots in user mentions\n* Rewrite UI component that change user/group roles\n* Replace Chosen jQuery plugin by custom UI component\n* Remove dependency on Mousetrap Javascript library\n* Disable PageSpeed module from .htaccess if present\n* Add currency of Chinese Yuan\n\nBug fixes:\n\n* Fix compatibility issue with PHP 5.3 for array_combine function\n* Fix wrong controller name on project activity page when using filters\n* Uploaded avatar images are now visible in public board view\n\nVersion 1.0.35 (Dec 4, 2016)\n----------------------------\n\nNew features:\n\n* Add external tasks plugin interfaces\n* Add personal API access token for users\n* Rewrite of Markdown editor (remove CodeMirror)\n* Suggest menu for task ID and user mentions in Markdown editor\n* Add config parameter to disable automatic SQL migrations\n\nImprovements:\n\n* Add button to close inline popups\n* Simplify `.htaccess` to avoid potential issues with possible specific Apache configurations\n* Replace notifications Javascript code by CSS\n* Refactoring of user mentions job\n* Remove Nitrous installer\n* Update translations\n* Rewrite some components in Vanilla Javascript\n* Started Javascript code refactoring to avoid to much dependencies on jQuery\n* Remove dependency on VueJS and CoreMirror\n* Add P3P headers to avoid potential issues with IE\n\nBreaking changes:\n\n* Rename command line tool `./kanboard` to `./cli`\n\nBug fixes:\n\n* Change column type for application settings value (field too small)\n* Fix link generation when user mention is followed by a punctuation mark\n* Make user mentions works again\n\nVersion 1.0.34 (Oct 11, 2016)\n-----------------------------\n\nNew features:\n\n* Custom project roles with configurable restrictions\n* Duplicate a task to multiple projects during creation\n* New automatic action:\n    - Close a task in a specific column when not moved during a given period\n\nImprovements:\n\n* Do not close the popover when clicking on the background\n* Add visual icon to show a dropdown action on task\n* Avoid 'blur' effect on popover\n* Accept more file types for external links\n* Restrict search to active projects\n* Improve task status filter\n* Add filter tag:none\n* Always apply merge hooks in task creation controller\n* Update task moved date only when the column or swimlane is changed\n* Add new subtask hooks\n* Add the actual use of TaskStartDateFilter\n* Update translations and documentation\n\nBug fixes:\n\n* Send absolute links in email notifications\n* Restrict task complexity to a specific range to avoid integer overflow\n* Do not show closed tasks in task move position form\n* Avoid \"Controller not found\" in Settings > Links\n\nVersion 1.0.33 (Sep 5, 2016)\n----------------------------\n\nNew features:\n\n* Move a task without drag and drop (smartphones and tablets)\n* Add the possibility to unlock users from the user interface\n* New API calls for task metadata\n* New automatic actions:\n    - Define color by Swimlane\n    - Define priority by Swimlane\n\nImprovements:\n\n* Introduce Vue.js to manage user interface components\n* Add column \"Reference\" and \"Creator Name\" in CSV task export\n* Show both time spent and estimated on the board\n* Store board collapsed mode user preference in the database\n* Store comment sorting direction in the database\n* Avoid tags overlapping on the board\n* Show project name in notifications\n* Allow priority changes for inverted priority scales\n* Add the possibility to attach template hooks with local variables and callback\n* Add \"reference\" hooks\n* Show project name in task forms\n* Convert vanilla CSS to SASS\n* Make user interface more responsive for smartphones and tablets\n* Support version operators for plugin directory: >= and >\n* Update Spanish documentation\n\nOther changes:\n\n* Time spent (in hours) for subtasks are not rounded too the nearest quarter anymore\n\nBug fixes:\n\n* Fix improper HTML escaping for textarea (potential XSS)\n* Do not show closed tasks on public boards\n* Fix undefined constant in config example file\n* Fix PHP notice when sending overdue notifications\n* Fix wrong project date format (shown as 01/01/1970)\n    - If the dates still not correct, modify and save the date\n\nVersion 1.0.32 (July 31, 2016)\n------------------------------\n\nNew features:\n\n* New automated actions:\n    - Close tasks without activity in a specific column\n    - Set due date automatically\n    - Move a task to another column when closed\n    - Move a task to another column when not moved during a given period\n* New filter \"moved\" for moved date of tasks\n* Added internal task links to activity stream\n* Added new event for removed comments\n* Added search filter for task priority\n* Added the possibility to hide tasks in dashboard for a specific column\n* Documentation translated in Russian\n\nImprovements:\n\n* Improve background worker and job handler\n* New template hooks\n* Removed individual column scrolling on board, columns use the height of all tasks\n* Improve project page titles\n* Remove sidebar titles when not necessary\n* Internal events management refactoring\n* Handle header X-Real-IP to get IP address\n* Display project name for task auto-complete fields\n* Make search attributes not case sensitive\n* Display TOTP issuer for 2FA\n* Make sure that the table schema_version use InnoDB for Mysql\n* Use the library PicoFeed to generate RSS/Atom feeds\n* Change all links to the new repository\n\nBug fixes:\n\n* Allow users to see inactive projects\n* Fixed typo in template that prevent project permissions to be duplicated\n* Fixed search query with multiple assignees (nested OR conditions)\n* Fixed Markdown editor auto-grow on the task form (Safari)\n* Fixed compatibility issue with PHP 5.3 for OAuthUserProvider class\n\nVersion 1.0.31 (Jul 3, 2016)\n----------------------------\n\nNew features:\n\n* Added tags: global and specific by project\n* Added application and project roles validation for API procedure calls\n* Added new API call: \"getProjectByIdentifier\"\n* Added new API calls for external task links, project attachments and subtask time tracking\n\nImprovements:\n\n* Use PHP 7 for the Docker image\n* Preserve role for existing users when using ReverseProxy authentication\n* Handle priority for task and project duplication\n* Expose task reference field to the user interface\n* Improve ICal export\n* Added argument owner_id and identifier to project API calls\n* Rewrite integration tests to run with Docker containers\n* Use the same task form layout everywhere\n* Removed some tasks dropdown menus that are now available with task edit form\n* Make embedded documentation readable in multiple languages (if a translation is available)\n* Added acceptance tests (browser tests)\n\nBug fixes:\n\n* Fixed broken CSV exports\n* Fixed identical background color for LetterAvatar on 32bits platforms (Hash greater than PHP_MAX_INT)\n* Fixed lexer issue with non word characters\n* Flush memory cache in worker to get latest config values\n* Fixed empty title for web notification with only one overdue task\n* Take default swimlane into consideration for SwimlaneModel::getFirstActiveSwimlane()\n* Fixed \"due today\" highlighting\n\nBreaking changes:\n\n* Docker volume paths are changed to /var/www/app/{data,plugins}\n\nVersion 1.0.30 (Jun 8, 2016)\n----------------------------\n\nImprovements:\n\n* Show tasks that are due today in a different color\n\nBug fixes:\n\n* Fixed wrong controller for search in dashboard\n* Fixed plural form in alert message\n* Fixed CSS cosmetic issue with popover and tooltips\n\nVersion 1.0.29 (Jun 5, 2016)\n----------------------------\n\nNew features:\n\n* Manage plugin from the user interface and from the command line\n* Added support for background workers\n* Added the possibility to convert a subtask to a task\n* Added menu entry to add tasks from all project views\n* Add tasks in bulk from the board\n* Add dropdown for projects\n* Added config parameter to allow self-signed certificates for the HTTP client\n\nImprovements:\n\n* Display local date format in date picker\n* Configure email settings with the user interface in addition to config file\n* Upgrade Docker image to Alpine Linux 3.4\n* Move task import to a separate section\n* Mark web notification as read when clicking on it\n* Support strtotime strings for date search\n* Reset failed login counter and unlock user when changing password\n* Task do not open anymore in a new window on the Gantt chart\n* Do not display task progress for tasks with no start/end date\n* Use Gulp and Bower to manage assets\n* Controller and Middleware refactoring\n* Replace jQuery mobile detection by the library isMobile\n\nBug fixes:\n\n* Fixed user date format parsing for dates that can be valid in multiple formats\n* Do not sync user role if LDAP groups are not configured\n* Fixed issue with unicode handling for letter based avatars and user initials\n* Do not send notifications to disabled users\n* Fixed wrong redirect when removing a task from the task view page\n\nBreaking changes:\n\n* Webhook to create tasks have been removed, use the API instead\n* All controllers have been renamed, people who are not using URL rewriting will see different URLs\n* All models have been renamed, plugin maintainers will have to update their plugins\n\nVersion 1.0.28 (May 8, 2016)\n----------------------------\n\nNew features:\n\n* Added automated action to change task color based on the priority\n* Added support for LDAP Posix Groups (OpenLDAP with memberUid or groupOfNames)\n* Added support for LDAP user photo attribute (Avatar image)\n* Added support for language LDAP attribute\n* Added support for Mysql SSL connection\n* Search in activity stream\n* Search in comments\n* Search by task creator\n* Added command line utility to reset user password and to disable 2FA\n\nImprovements:\n\n* Improve Avatar upload form\n* User roles are now synced with LDAP at each login\n* Improve web page title on the task view\n* Unify task drop-down menu between different views\n* Improve LDAP user group membership synchronization\n* Category and user filters do not append anymore in search field\n* Added more template hooks\n* Added tasks search with the API\n* Added priority field to API procedures\n* Added API procedure \"getMemberGroups\"\n* Added parameters for overdue tasks notifications: group by projects and send only to managers\n* Allow people to install Kanboard outside of the DocumentRoot\n* Allow plugins to be loaded from another folder\n* Filter/Lexer/QueryBuilder refactoring\n\nBug fixes:\n\n* Allow a project owner to manage his own public project\n* Fixed PHP warning when removing a user with no Avatar image\n* Fixed improper Markdown escaping for some tooltips\n* Closing all tasks by column, also update closed tasks\n* Fixed wrong task link generation within Markdown text\n* Fixed wrong URL on comment toggle link for sorting\n* Fixed form submission with Meta+Enter keyboard shortcut\n* Removed PHP notices in comment suppression view\n\nVersion 1.0.27 (Mar 27, 2016)\n-----------------------------\n\nNew features:\n\n* Added Markdown editor\n* Added user avatars with pluggable system\n    - Default is a letter based avatar\n    - Gravatar\n    - Avatar Image upload\n* Added Korean translation\n\nImprovements:\n\n* Added more logging for LDAP client\n* Improve schema migration process\n* Improve notification configuration form\n* Handle state in OAuth2 client\n* Allow to use the original template in overridden templates\n* Unification of the project header\n* Refactoring of Javascript code\n* Improve comments design\n* Improve task summary sections\n* Put back the action sidebar in task view\n* Added support for multiple placeholders for LDAP_USER_FILTER\n* Added local file link provider\n* Show configuration in settings page\n* Added \"?\" to display list of keyboard shortcuts\n* Added new keyboard shortcuts for task view\n* Always display project name and task title in task views\n* Improve automatic action creation\n* Move notifications to the bottom of the screen\n* Added the possibility to import automatic actions from another project\n* Added Ajax loading icon for submit buttons\n* Added support for HTTP header \"X-Forwarded-Proto: https\"\n\nBug fixes:\n\n* Fix bad unique constraints in Mysql table user_has_notifications\n* Force integer type for aggregated metrics (Burndown chart concat values instead of summing)\n* Fixes cycle time calculation when the start date is defined in the future\n* Access allowed to any tasks from the shared public board by changing the URL parameters\n* Fix invalid user filter for API procedure createLdapUser()\n* Ambiguous column name with very old version of Sqlite\n\nVersion 1.0.26 (Feb 28, 2016)\n-----------------------------\n\nBreaking changes:\n\n* API procedures:\n    - \"moveColumnUp\" and \"moveColumnDown\" are replaced by \"changeColumnPosition\"\n    - \"moveSwimlaneUp\" and \"moveSwimlaneDown\" are replaced by \"changeSwimlanePosition\"\n\nNew features:\n\n* Add drag and drop to change subtasks, swimlanes and columns positions\n* Add file drag and drop and asynchronous upload\n* Enable/Disable users\n* Add setting option to disable private projects\n* Add new config option to disable logout\n\nImprovements:\n\n* Use inline popup to create new columns\n* Improve filter box design\n* Improve image thumbnails and files table\n* Add confirmation inline popup to remove custom filter\n* Increase client_max_body_size value for Nginx\n* Split Board model into multiple classes\n* Improve logging for the Docker image\n\nBug fixes:\n\n* Fix PHP notices during creation of first project and in subtasks table\n* Fix filter dropdown not accessible when there are too many items\n* Fix regression: unable to change project in \"task move/duplicate to another project\"\n\nVersion 1.0.25 (Feb 7, 2016)\n----------------------------\n\nBreaking changes:\n\n* Core functionalities moved to external plugins:\n    - Google Auth: https://github.com/kanboard/plugin-google-auth\n    - Github Auth: https://github.com/kanboard/plugin-github-auth\n    - Gitlab Auth: https://github.com/kanboard/plugin-gitlab-auth\n\nNew features:\n\n* When creating a new project, have the possibility to select another project to duplicate\n* Add a \"Me\" button to assignee form element\n* Add external links for tasks with plugin api\n* Add project owner (Directly Responsible Individual)\n* Add configurable task priority\n* Add Greek translation\n* Add automatic actions to close tasks with no activity\n* Add automatic actions to send an email when there is no activity on a task\n* Regroup all daily background tasks in one command: \"cronjob\"\n* Add task dropdown menu on listing pages\n\nImprovements:\n\n* New Dockerfile based on Alpine Linux and Nginx/PHP-FPM\n* The date time format can be chosen in application settings\n* Export only open tasks in iCal feed\n* Remove time form on task summary page and move that to task edit form\n* Replace box shadow by a larger border width when a task is recently modified\n* Do not refresh the whole page when changing subtask status\n* Add dropdown menu with inline popup for all task actions\n* Change sidebar style\n* Change task summary layout\n* Use inline popup for subtasks, categories, swimlanes, actions and columns\n* Move homepage menus to the user dropdown\n* Have a new task assigned to the creator by default instead of \"no assignee\"\n* Show progress for task links in board tooltips\n* Simplify code to handle ajax popover and redirects\n* Simplify layout and templates generation\n* Move task form elements to Task helper\n\nBug fixes:\n\n* Category label is broken on the board if there's a url in the description\n* Fix pagination on task time tracking page\n\nVersion 1.0.24 (Jan 23, 2016)\n-----------------------------\n\nNew features:\n\n* Forgot Password\n* Add drop-down menu on each board column title to close all tasks\n* Add Malay language\n* Add new API procedures for groups, roles, project permissions and to move/duplicate tasks to another project\n\nImprovements:\n\n* Avoid to send XHR request when a task has not moved after a drag and drop\n* Set maximum dropzone height when the individual column scrolling is disabled\n* Always show the search box in board selector\n* Replace logout link by a drop-down menu\n* Handle notification for group members attached to a project\n* Return the highest role for a project when a user is member of multiple groups\n* Show in user interface the saving state of the task\n* Add drop-down menu for subtasks, categories, swimlanes, columns, custom filters, task links and groups\n* Add new template hooks\n* Application settings are not cached anymore in the session\n* Do not check board status during task move\n* Move validators to a separate namespace\n* Improve and write unit tests for reports\n* Reduce the number of SQL queries for project daily column stats\n* Remove event subscriber to update date_moved field\n* Make sure that some event subscribers are not executed multiple times\n* Show rendering time of individual templates when debug mode is enabled\n* Make sure that no events are fired if nothing has been modified in the task\n* Make dashboard section title clickable\n* Add unit tests for LastLogin\n\nBug fixes:\n\n* Automatic action listeners were using the same instance\n* Fix wrong link for category in task footer\n* Unable to set currency rate with Postgres database\n* Avoid automatic actions that change the color to fire subsequent events\n* Unable to unassign a task from the API\n* Revert back previous optimizations of TaskPosition (incompatibility with some environment)\n\nVersion 1.0.23 (Jan 9, 2016)\n----------------------------\n\nBreaking changes:\n\n* Plugin API changes for Automatic Actions\n* Automatic Action to close a task doesn't have the column parameter anymore (use the action \"Close a task in a specific column\")\n* Action name stored in the database is now the absolute class name\n* Core functionalities moved to external plugins:\n    - Github Webhook: https://github.com/kanboard/plugin-github-webhook\n    - Gitlab Webhook: https://github.com/kanboard/plugin-gitlab-webhook\n    - Bitbucket Webhook: https://github.com/kanboard/plugin-bitbucket-webhook\n\nNew features:\n\n* Added support of user mentions (@username)\n* Added report to compare working hours between open and closed tasks\n* Added the possibility to define custom routes from plugins\n* Added new method to remove metadata\n\nImprovements:\n\n* Improve Two-Factor activation and plugin API\n* Improving performance during task position change (SQL queries are 3 times faster than before)\n* Do not show window scrollbars when individual column scrolling is enabled\n* Automatic Actions code improvements and unit tests\n* Increase action name column length in actions table\n\nBug fixes:\n\n* Fix compatibility issue with FreeBSD for session.hash_function parameter\n* Fix wrong constant name that causes a PHP error in project management section\n* Fix pagination in group members listing\n* Avoid PHP error when enabling LDAP group provider with PHP < 5.5\n\nVersion 1.0.22 (Dec 13, 2015)\n-----------------------------\n\nBreaking changes:\n\n* LDAP configuration parameters changes (See documentation)\n* SQL table changes:\n    - \"users\" table: added new column \"role\" and removed columns \"is_admin\" and \"is_project_admin\"\n    - \"project_has_users\" table: replaced column \"is_owner\" with column \"role\"\n    - Sqlite does not support alter table, old columns still there but unused\n* API procedure changes:\n    - createUser\n    - createLdapUser\n    - updateUser\n    - updateTask\n* Event removed: \"session.bootstrap\", use \"app.boostrap\" instead\n\nNew features:\n\n* Add pluggable authentication and authorization system (complete rewrite)\n* Add groups (teams/organization)\n* Add LDAP groups synchronization\n* Add project group permissions\n* Add new project role Viewer\n* Add generic LDAP client library\n* Add search query attribute for task link\n* Add the possibility to define API token in config file\n* Add capability to reopen Gitlab issues\n* Try to load config.php from /data if not available\n\nVersion 1.0.21 (Nov 22, 2015)\n-----------------------------\n\nBreaking changes:\n\n* Projects with duplicate names are now allowed:\n    - For Postgres and Mysql the unique constraint is removed by database migration\n    - However Sqlite does not support alter table, only new databases will have the unique constraint removed\n\nNew features:\n\n* New automatic action: Assign a category based on a link\n* Added Bosnian translation\n\nImprovements:\n\n* Dropdown menu entries are now clickable outside of the html link\n* Improve error handling of plugins\n* Use PHP7 function random_bytes() to generate tokens if available\n* CSV task export show the assignee name in addition to the assignee username\n* Add new hooks for plugins\n* Remove workaround for \"INSERT ON DUPLICATE KEY UPDATE...\"\n\nInternal code refactoring:\n\n* Rewrite of session management\n* Move some classes to a new namespace Kanboard\\Core\\Http\n\nBug fixes:\n\n* Loading cs_CZ locale display the wrong language in datetime picker\n* Datepicker is closed unexpectedly on blur event\n* Fix bug in daily project summary CSV export\n* Fix PHP error when adding a new user with email notification enabled\n* Add missing template for activity stream to show event \"file.create\"\n* Fix wrong value for PLUGINS_DIR in config.default.php\n* Make CSV export compatible with PHP 5.3\n* Avoid Safari to append .html at the end of downloaded files\n\nVersion 1.0.20 (Oct 24, 2015)\n-----------------------------\n\nBreaking changes:\n\n* Add namespace Kanboard (update your plugins)\n* Move Mailgun, Sendgrid, Postmark, Slack, Hipchat and Jabber to plugins\n* ReverseProxy authentication check for each request that the username match the user session\n\nNew features:\n\n* Add CSV import for users and tasks\n* Add Task, User and Project metadata for plugin creators\n\nImprovements:\n\n* Allow to change comments sorting\n* Add the possibility to append or not custom filters\n* Make mail transports pluggable\n* Do not show scroll-bars when a column is collapsed on Windows systems\n* Regenerate thumbnails if missing\n\nBug fixes:\n\n* People should not see any tasks during a search when they are not associated to a project\n* Avoid disabling the default swimlane during renaming when there is no other activated swimlane\n\nVersion 1.0.19 (Oct 11, 2015)\n-----------------------------\n\nNew features:\n\n* Added web notifications\n* Added LDAP group sync\n* Added swimlane description\n* New plugin system (alpha)\n* Added Bahasa Indonesia translation\n* Added API procedures: getMyOverdueTasks, getOverdueTasksByProject and GetMyProjects\n* Added user API access for procedure getProjectActivity()\n* Added config parameter to enable/disable Syslog\n* Added custom filters\n* Added http client proxy support\n\nCore functionalities moved to plugins:\n\n* Budget planning: https://github.com/kanboard/plugin-budget\n* SubtaskForecast: https://github.com/kanboard/plugin-subtask-forecast\n* Timetable: https://github.com/kanboard/plugin-timetable\n\nImprovements:\n\n* When duplicating a task redirect to the new task\n* Include more shortcut links into the view \"My projects\"\n* Duplicate a project with tasks will copy the new tasks in the same columns\n* Offer alternative method to create Mysql and Postgres databases (import sql dump)\n* Make sure there is always a trailing slash for application_url\n* Do not show the checkbox \"Show default swimlane\" when there is no active swimlanes\n* Append filters instead of replacing value for users and categories drop-downs\n* Do not show empty swimlanes in public view\n* Change swimlane layout to save space on the screen\n* Add the possibility to set/unset max column height (column scrolling)\n* Show \"Open this task\" in drop-down menu for closed tasks\n* Show assignee on card only when someone is assigned (hide nobody text)\n* Highlight selected item in drop-down menus\n* Gantt chart: change bar color according to task progress\n* Replace color drop-down by color picker in task forms\n* Creating another task stay in the popover (no full page refresh anymore)\n* Avoid scrollbar in Gantt chart for row title on Windows platform\n* Remove unnecessary margin for calendar header\n* Show localized documentation if available\n* Add event subtask.delete\n* Add abstract storage layer\n* Add abstract cache layer\n* Add Docker tag for stable version\n\nOthers:\n\n* Data directory permission are not checked anymore\n* Data directory is not mandatory anymore for people that use a remote database and remote object storage\n\nBug fixes:\n\n* Fix typo in template that prevents Gitlab OAuth link to be displayed\n* Fix Markdown preview links focus\n* Avoid drop-down menu to be truncated inside a column with scrolling\n* Deleting subtask doesn't update task time tracking\n* Fix Mysql error about gitlab_id when creating remote user\n* Fix subtask timer bug (event called recursively)\n* Fix Postgres issue \"Cardinality violation\" when there is multiple \"is_milestone_of\" links\n* Fix issue with due date greater than year 2038\n\nVersion 1.0.18 (Aug 30, 2015)\n-----------------------------\n\nNew features:\n\n* Include documentation in the application\n* Add Gitlab authentication\n* Add users and categories filters on the board\n* Add hide/show columns\n* Add Gantt chart for projects and tasks\n* Add new role \"Project Administrator\"\n* Add login brute force protection with captcha and account lockdown\n* Add new api procedures: getDefaultTaskColor(), getDefaultTaskColors() and getColorList()\n* Add user api access\n* Add config parameter to define session duration\n* Add config parameter to disable/enable RememberMe authentication\n* Add start/end date for projects\n* Add new automated action to change task color based on the task link\n* Add milestone marker in board task\n* Add search for task title when using an integer only input\n* Add Portuguese (European) translation\n* Add Norwegian translation\n\nImprovements:\n\n* Add handle to move tasks on touch devices\n* Improve file attachments tooltip on the board\n* Adjust automatically the height of the placeholder during drag and drop\n* Show all tasks when using no search criteria\n* Add column vertical scrolling\n* Set dynamically column height based on viewport size\n* Enable support for Github Enterprise when using Github Authentication\n* Update iCalendar library to display organizer name\n* Improve sidebar menus\n* Add no referrer policy in meta tags\n* Run automated unit tests with Sqlite/Mysql/Postgres on Travis-ci\n* Add Makefile and remove the \"scripts\" directory\n\nBug fixes:\n\n* Wrong template name for subtasks tooltip due to previous refactoring\n* Fix broken url for closed tasks in project view\n* Fix permission issue when changing the url manually\n* Fix bug task estimate is reset when using subtask timer\n* Fix screenshot feature with Firefox 40\n* Fix bug when uploading files with Cyrilic characters\n\nVersion 1.0.17 (Jul 27, 2015)\n-----------------------------\n\nNew features:\n\n* Added url rewrite and new routes\n* Added new search engine with advanced syntax\n* Added global search section\n* Added search form on the dashboard\n* Added new dashboard layout\n* Added new layout for board/calendar/list views\n* Added filters helper for search forms\n* Added setting option to disable subtask timer\n* Added setting option to include or exclude closed tasks into CFD\n* Added setting option to define the default task color\n* Added new config option to disable automatic creation of LDAP accounts\n* Added loading icon on board view\n* Prompt user when moving or duplicate a task to another project\n* Added current values when moving/duplicate a task to another project and add a loading icon\n* Added memory consumption to debug log\n* Added form to create remote user\n* Added edit form for user authentication\n* Added config option to hide login form\n* Display OAuth2 urls on integration page\n* Added keyboard shortcuts to switch between board/calendar/list view\n* Added keyboard shortcut to focus on the search box\n* Added Slack channel override\n* Added new report: Lead and cycle time for projects\n* Added new report: Average time spent into each column\n* Added task analytics\n* Added icon to set the start date automatically\n* Added datetime picker for start date\n\nImprovements:\n\n* Updated documentation\n* Display user initials when tasks are in collapsed mode\n* Show title in tooltip for collapsed tasks\n* Improve alert box fadeout to avoid an empty space\n* Set focus on the drop-down for category popover\n* Make escape keyboard shortcut global\n* Check the box remember me by default\n* Store redirect login url in session instead of using url parameter\n* Update Gitlab webhook\n* Do not rewrite remember me cookie for each request\n* Set the assignee as organizer for ical events\n* Increase date range for ics export\n* Reduce spacing on cards\n* Move board collapse/expand mode to server side to avoid board flickering\n* Use ajax requests for board collapse/expand\n* Do not set anchor for the default swimlane on the link back to board\n* Replace timeserie axis to category axis for charts\n* Hide task age in compact mode\n* Improve quick-add subtasks form\n* Reduce the size of the filter box for smaller screen\n* Added icon to hide/show sidebar\n* Update GitLab logo\n* Improve Dockerfile\n\nTranslations:\n\n* Added Czech translation\n* Updated Spanish translation\n* Updated German Translation\n\nBug fixes:\n\n* Screenshot drop-down: unexpected scroll down on the board view and focus lost when clicking on the drop zone\n* No creator when duplicating a task\n* Avoid the creation of multiple subtask timer for the same task and user\n\nCode refactoring:\n\n* Split task controller into smaller classes\n* Remove method Category::getBoardCategories()\n* Rewrite movePosition() to improve performances\n* Refactoring of Github and Google authentication\n\nBreaking changes:\n\n* New OAuth url for Google and Github authentication\n\nAPI:\n\n* Add urls in api response for tasks and projects\n\nOther:\n\n* Added automated Docker build\n* Remove edit recurrence from the task menu on the board\n* Switch to MIT License instead of AGPLv3\n\nVersion 1.0.0 to 1.0.16\n-----------------------\n\n* See commit history and website news\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Automatic Actions Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ActionController extends BaseController\n{\n    /**\n     * List of automatic actions for a given project\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $actions = $this->actionModel->getAllByProject($project['id']);\n\n        $this->response->html($this->helper->layout->project('action/index', array(\n            'values' => array('project_id' => $project['id']),\n            'project' => $project,\n            'actions' => $actions,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'available_events' => $this->eventManager->getAll(),\n            'available_params' => $this->actionManager->getAvailableParameters($actions),\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id']),\n            'projects_list' => $this->projectUserRoleModel->getProjectsByUser($this->userSession->getId()),\n            'colors_list' => $this->colorModel->getList(),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'links_list' => $this->linkModel->getList(0, false),\n            'swimlane_list' => $this->swimlaneModel->getList($project['id']),\n            'title' => t('Automatic actions')\n        )));\n    }\n\n    /**\n     * Confirmation dialog before removing an action\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $action = $this->getAction($project);\n\n        $this->response->html($this->helper->layout->project('action/remove', array(\n            'action' => $action,\n            'available_events' => $this->eventManager->getAll(),\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'project' => $project,\n            'title' => t('Remove an action')\n        )));\n    }\n\n    /**\n     * Remove an action\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $action = $this->getAction($project);\n\n        if (! empty($action) && $this->actionModel->remove($action['id'])) {\n            $this->flash->success(t('Action removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this action.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ActionController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Action Creation Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ActionCreationController extends BaseController\n{\n    /**\n     * Show the form (step 1)\n     *\n     * @access public\n     */\n    public function create()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('action_creation/create', array(\n            'project' => $project,\n            'values' => array('project_id' => $project['id']),\n            'available_actions' => $this->actionManager->getAvailableActions(),\n        )));\n    }\n\n    /**\n     * Choose the event according to the action (step 2)\n     *\n     * @access public\n     */\n    public function event()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        if (empty($values['action_name'])) {\n            return $this->create();\n        }\n\n        return $this->response->html($this->template->render('action_creation/event', array(\n            'values' => $values,\n            'project' => $project,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'events' => $this->actionManager->getCompatibleEvents($values['action_name']),\n        )));\n    }\n\n    /**\n     * Define action parameters (step 3)\n     *\n     * @access public\n     */\n    public function params()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        if (empty($values['action_name']) || empty($values['event_name'])) {\n            $this->create();\n            return;\n        }\n\n        $action = $this->actionManager->getAction($values['action_name']);\n        $action_params = $action->getActionRequiredParameters();\n\n        if (empty($action_params)) {\n            $this->doCreation($project, $values + array('params' => array()));\n        }\n\n        $projects_list = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n        unset($projects_list[$project['id']]);\n\n        $this->response->html($this->template->render('action_creation/params', array(\n            'values' => $values,\n            'action_params' => $action_params,\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id']),\n            'projects_list' => $projects_list,\n            'colors_list' => $this->colorModel->getList(),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'links_list' => $this->linkModel->getList(0, false),\n            'priorities_list' => $this->projectTaskPriorityModel->getPriorities($project),\n            'project' => $project,\n            'available_actions' => $this->actionManager->getAvailableActions(),\n            'swimlane_list' => $this->swimlaneModel->getList($project['id']),\n            'events' => $this->actionManager->getCompatibleEvents($values['action_name']),\n        )));\n    }\n\n    /**\n     * Save the action (last step)\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $this->doCreation($this->getProject(), $this->request->getValues());\n    }\n\n    /**\n     * Common method to save the action\n     *\n     * @access private\n     * @param  array     $project   Project properties\n     * @param  array     $values    Form values\n     */\n    private function doCreation(array $project, array $values)\n    {\n        $values['project_id'] = $project['id'];\n        list($valid, ) = $this->actionValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->actionModel->create($values) !== false) {\n                $this->flash->success(t('Your automatic action have been created successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to create your automatic action.'));\n            }\n        }\n\n        $this->response->redirect($this->helper->url->to('ActionController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Base;\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Base Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nabstract class BaseController extends Base\n{\n    /**\n     * Check if the CSRF token from the URL is correct\n     *\n     * @access protected\n     */\n    protected function checkCSRFParam()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Check webhook token\n     *\n     * @access protected\n     */\n    protected function checkWebhookToken()\n    {\n        if ($this->configModel->get('webhook_token') !== $this->request->getStringParam('token')) {\n            throw AccessForbiddenException::getInstance()->withoutLayout();\n        }\n    }\n\n    /**\n     * Common method to get a task for task views\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getTask()\n    {\n        $project_id = $this->request->getIntegerParam('project_id');\n        $task = $this->taskFinderModel->getDetails($this->request->getIntegerParam('task_id'));\n\n        if (empty($task)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($project_id !== 0 && $project_id != $task['project_id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $task;\n    }\n\n    /**\n     * Get Task or Project file\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getFile()\n    {\n        $task_id = $this->request->getIntegerParam('task_id');\n        $file_id = $this->request->getIntegerParam('file_id');\n        $model = 'projectFileModel';\n\n        if ($task_id > 0) {\n            $model = 'taskFileModel';\n            $project_id = $this->taskFinderModel->getProjectId($task_id);\n\n            if ($project_id !== $this->request->getIntegerParam('project_id')) {\n                throw new AccessForbiddenException();\n            }\n        }\n\n        $file = $this->$model->getById($file_id);\n\n        if (empty($file)) {\n            throw new PageNotFoundException();\n        }\n\n        $file['model'] = $model;\n        return $file;\n    }\n\n    /**\n     * Common method to get a project\n     *\n     * @access protected\n     * @param  integer      $project_id    Default project id\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getProject($project_id = 0)\n    {\n        $project_id = $this->request->getIntegerParam('project_id', $project_id);\n        $project = $this->projectModel->getByIdWithOwner($project_id);\n\n        if (empty($project)) {\n            throw new PageNotFoundException();\n        }\n\n        return $project;\n    }\n\n    /**\n     * Common method to get the user\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getUser()\n    {\n        $user = $this->userModel->getById($this->request->getIntegerParam('user_id', $this->userSession->getId()));\n\n        if (empty($user)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $this->userSession->getId() != $user['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $user;\n    }\n\n    /**\n     * Get the current subtask\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getSubtask()\n    {\n        $subtask = $this->subtaskModel->getById($this->request->getIntegerParam('subtask_id'));\n\n        if (empty($subtask)) {\n            throw new PageNotFoundException();\n        }\n\n        return $subtask;\n    }\n\n    protected function getColumn(array $project)\n    {\n        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n\n        if (empty($column)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($column['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $column;\n    }\n\n    protected function getSwimlane(array $project)\n    {\n        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n\n        if (empty($swimlane)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($swimlane['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $swimlane;\n    }\n\n    protected function getCategory(array $project)\n    {\n        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n\n        if (empty($category)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($category['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $category;\n    }\n\n    protected function getProjectTag(array $project)\n    {\n        $tag = $this->tagModel->getById($this->request->getIntegerParam('tag_id'));\n\n        if (empty($tag)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($tag['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $tag;\n    }\n\n    protected function getAction(array $project)\n    {\n        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n\n        if (empty($action)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($action['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $action;\n    }\n\n    protected function getCustomFilter(array $project)\n    {\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        if (empty($filter)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($filter['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $filter;\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Category Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass CategoryController extends BaseController\n{\n    /**\n     * List of categories for a given project\n     *\n     * @access public\n     * @throws PageNotFoundException\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('category/index', array(\n            'categories' => $this->categoryModel->getAll($project['id']),\n            'project'    => $project,\n            'title'      => t('Categories'),\n        )));\n    }\n\n    /**\n     * Show form to create new category\n     *\n     * @param array $values\n     * @param array $errors\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('category/create', array(\n            'values'  => $values + array('project_id' => $project['id']),\n            'errors'  => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and save a new category\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        list($valid, $errors) = $this->categoryValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->categoryModel->create($values) !== false) {\n                $this->flash->success(t('Your category have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors = array('name' => array(t('Another category with the same name exists in this project')));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Edit a category (display the form)\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $category = $this->getCategory($project);\n\n        $this->response->html($this->template->render('category/edit', array(\n            'values'  => empty($values) ? $category : $values,\n            'errors'  => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Edit a category (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $category = $this->getCategory($project);\n\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n        $values['id'] = $category['id'];\n\n        list($valid, $errors) = $this->categoryValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->categoryModel->update($values)) {\n                $this->flash->success(t('This category has been updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])));\n            } else {\n                $this->flash->failure(t('Unable to update this category.'));\n            }\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a category\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $category = $this->getCategory($project);\n\n        $this->response->html($this->helper->layout->project('category/remove', array(\n            'project'  => $project,\n            'category' => $category,\n        )));\n    }\n\n    /**\n     * Remove a category\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $category = $this->getCategory($project);\n\n        if ($this->categoryModel->remove($category['id'])) {\n            $this->flash->success(t('Category removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this category.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('CategoryController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\n\n/**\n * Column Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass ColumnController extends BaseController\n{\n    /**\n     * Display columns list\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $columns = $this->columnModel->getAllWithTaskCount($project['id']);\n\n        $this->response->html($this->helper->layout->project('column/index', array(\n            'columns' => $columns,\n            'project' => $project,\n            'title' => t('Edit columns')\n        )));\n    }\n\n    /**\n     * Show form to create a new column\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        if (empty($values)) {\n            $values = array('project_id' => $project['id']);\n        }\n\n        $this->response->html($this->template->render('column/create', array(\n            'values' => $values,\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and add a new column\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n        $values['project_id'] = $project['id'];\n\n        list($valid, $errors) = $this->columnValidator->validateCreation($values);\n\n        if ($valid) {\n            $result = $this->columnModel->create(\n                $project['id'],\n                $values['title'],\n                $values['task_limit'],\n                $values['description'],\n                $values['hide_in_dashboard']\n            );\n\n            if ($result !== false) {\n                $this->flash->success(t('Column created successfully.'));\n                $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors['title'] = array(t('Another column with the same name exists in the project'));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Display a form to edit a column\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $column = $this->getColumn($project);\n\n        $this->response->html($this->helper->layout->project('column/edit', array(\n            'errors' => $errors,\n            'values' => $values ?: $column,\n            'project' => $project,\n            'column' => $column,\n        )));\n    }\n\n    /**\n     * Validate and update a column\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $column = $this->getColumn($project);\n\n        $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n        $values['project_id'] = $project['id'];\n        $values['id'] = $column['id'];\n\n        list($valid, $errors) = $this->columnValidator->validateModification($values);\n\n        if ($valid) {\n            $result = $this->columnModel->update(\n                $values['id'],\n                $values['title'],\n                $values['task_limit'],\n                $values['description'],\n                $values['hide_in_dashboard']\n            );\n\n            if ($result) {\n                $this->flash->success(t('Board updated successfully.'));\n                $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update this board.'));\n            }\n        }\n\n        $this->edit($values, $errors);\n    }\n\n    /**\n     * Move column position\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getJson();\n\n        if (! empty($values) && isset($values['column_id']) && isset($values['position'])) {\n            $result = $this->columnModel->changePosition($project['id'], $values['column_id'], $values['position']);\n            $this->response->json(array('result' => $result));\n        } else {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Confirm column suppression\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $column = $this->getColumn($project);\n\n        $this->response->html($this->helper->layout->project('column/remove', array(\n            'column' => $column,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Remove a column\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $column = $this->getColumn($project);\n\n        if ($this->columnModel->remove($column['id'])) {\n            $this->flash->success(t('Column removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this column.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ColumnController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Security\\Role;\n\n/**\n * Custom Filter Controller\n *\n * @package Kanboard\\Controller\n * @author  Timo Litzbarski\n * @author  Frederic Guillot\n */\nclass CustomFilterController extends BaseController\n{\n    /**\n     * Display list of filters\n     *\n     * @access public\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('custom_filter/index', array(\n            'project' => $project,\n            'custom_filters' => $this->customFilterModel->getAll($project['id'], $this->userSession->getId()),\n            'title' => t('Custom filters'),\n        )));\n    }\n\n    /**\n     * Show creation form for custom filters\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('custom_filter/create', array(\n            'values' => $values + array('project_id' => $project['id']),\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Save a new custom filter\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n        $values['user_id'] = $this->userSession->getId();\n\n        list($valid, $errors) = $this->customFilterValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->customFilterModel->create($values) !== false) {\n                $this->flash->success(t('Your custom filter have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to create your custom filter.'));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a custom filter\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $filter = $this->getCustomFilter($project);\n\n        $this->response->html($this->helper->layout->project('custom_filter/remove', array(\n            'project' => $project,\n            'filter' => $filter,\n            'title' => t('Remove a custom filter')\n        )));\n    }\n\n    /**\n     * Remove a custom filter\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $filter = $this->getCustomFilter($project);\n\n        $this->checkPermission($project, $filter);\n\n        if ($this->customFilterModel->remove($filter['id'])) {\n            $this->flash->success(t('Custom filter removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this custom filter.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Edit a custom filter (display the form)\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws AccessForbiddenException\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->checkPermission($project, $filter);\n\n        $this->response->html($this->helper->layout->project('custom_filter/edit', array(\n            'values' => empty($values) ? $filter : $values,\n            'errors' => $errors,\n            'project' => $project,\n            'filter' => $filter,\n            'title' => t('Edit custom filter')\n        )));\n    }\n\n    /**\n     * Edit a custom filter (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        $this->checkPermission($project, $filter);\n\n        $values = $this->request->getValues();\n        $values['id'] = $filter['id'];\n        $values['project_id'] = $project['id'];\n\n        if (! isset($values['is_shared'])) {\n            $values += array('is_shared' => 0);\n        }\n\n        if (! isset($values['append'])) {\n            $values += array('append' => 0);\n        }\n\n        list($valid, $errors) = $this->customFilterValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->customFilterModel->update($values)) {\n                $this->flash->success(t('Your custom filter have been updated successfully.'));\n                $this->response->redirect($this->helper->url->to('CustomFilterController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $this->flash->failure(t('Unable to update custom filter.'));\n            }\n        }\n\n        $this->edit($values, $errors);\n    }\n\n    private function checkPermission(array $project, array $filter)\n    {\n        $user_id = $this->userSession->getId();\n\n        if ($filter['user_id'] != $user_id && ($this->projectUserRoleModel->getUserRole($project['id'], $user_id) === Role::PROJECT_MANAGER || ! $this->userSession->isAdmin())) {\n            throw new AccessForbiddenException();\n        }\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Project Edit Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass ProjectEditController extends BaseController\n{\n    /**\n     * Edit project\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('project_edit/show', array(\n            'owners' => $this->projectUserRoleModel->getAssignableUsersList($project['id'], true),\n            'values' => empty($values) ? $project : $values,\n            'errors' => $errors,\n            'project' => $project,\n            'title' => t('Edit project')\n        )));\n    }\n\n    /**\n     * Validate and update a project\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        $values = $this->prepareValues($project, $values);\n        list($valid, $errors) = $this->projectValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->projectModel->update($values)) {\n                $this->flash->success(t('Project updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('ProjectEditController', 'show', array('project_id' => $project['id'])), true);\n            } else {\n                $this->flash->failure(t('Unable to update this project.'));\n            }\n        }\n\n        return $this->show($values, $errors);\n    }\n\n    /**\n     * Prepare form values\n     *\n     * @access private\n     * @param  array  $project\n     * @param  array  $values\n     * @return array\n     */\n    private function prepareValues(array $project, array $values)\n    {\n        $values['id'] = $project['id'];\n\n        if (isset($values['is_private'])) {\n            if (! $this->helper->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])) {\n                unset($values['is_private']);\n            }\n        } elseif ($project['is_private'] == 1 && ! isset($values['is_private'])) {\n            if ($this->helper->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])) {\n                $values += array('is_private' => 0);\n            }\n        }\n\n        return $values;\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\n/**\n * Class ProjectTagController\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass ProjectTagController extends BaseController\n{\n    public function index()\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->helper->layout->project('project_tag/index', array(\n            'project' => $project,\n            'tags'    => $this->tagModel->getAllByProject($project['id']),\n            'title'   => t('Project tags management'),\n        )));\n    }\n\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('project_tag/create', array(\n            'project' => $project,\n            'values'  => $values,\n            'errors'  => $errors,\n        )));\n    }\n\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        list($valid, $errors) = $this->tagValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->tagModel->create($project['id'], $values['name']) > 0) {\n                $this->flash->success(t('Tag created successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to create this tag.'));\n            }\n\n            $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n        } else {\n            $this->create($values, $errors);\n        }\n    }\n\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $tag = $this->getProjectTag($project);\n\n        if (empty($values)) {\n            $values = $tag;\n        }\n\n        $this->response->html($this->template->render('project_tag/edit', array(\n            'project' => $project,\n            'tag'     => $tag,\n            'values'  => $values,\n            'errors'  => $errors,\n        )));\n    }\n\n    public function update()\n    {\n        $project = $this->getProject();\n        $tag = $this->getProjectTag($project);\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n        $values['id'] = $tag['id'];\n\n        list($valid, $errors) = $this->tagValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->tagModel->update($values['id'], $values['name'])) {\n                $this->flash->success(t('Tag updated successfully.'));\n            } else {\n                $this->flash->failure(t('Unable to update this tag.'));\n            }\n\n            $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n        } else {\n            $this->edit($values, $errors);\n        }\n    }\n\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $tag = $this->getProjectTag($project);\n\n        $this->response->html($this->template->render('project_tag/remove', array(\n            'tag'     => $tag,\n            'project' => $project,\n        )));\n    }\n\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $tag = $this->getProjectTag($project);\n\n        if ($this->tagModel->remove($tag['id'])) {\n            $this->flash->success(t('Tag removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this tag.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('ProjectTagController', 'index', array('project_id' => $project['id'])));\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\n\n/**\n * Swimlanes Controller\n *\n * @package Kanboard\\Controller\n * @author  Frederic Guillot\n */\nclass SwimlaneController extends BaseController\n{\n    /**\n     * List of swimlanes for a given project\n     *\n     * @access public\n     */\n    public function index()\n    {\n        $project = $this->getProject();\n        $swimlanes = $this->swimlaneModel->getAllWithTaskCount($project['id']);\n\n        $this->response->html($this->helper->layout->project('swimlane/index', array(\n            'active_swimlanes' => $swimlanes['active'],\n            'inactive_swimlanes' => $swimlanes['inactive'],\n            'project' => $project,\n            'title' => t('Swimlanes')\n        )));\n    }\n\n    /**\n     * Create a new swimlane\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function create(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n\n        $this->response->html($this->template->render('swimlane/create', array(\n            'values' => $values + array('project_id' => $project['id']),\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Validate and save a new swimlane\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        list($valid, $errors) = $this->swimlaneValidator->validateCreation($values);\n\n        if ($valid) {\n            if ($this->swimlaneModel->create($project['id'], $values['name'], $values['description']) !== false) {\n                $this->flash->success(t('Your swimlane have been created successfully.'));\n                $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])), true);\n                return;\n            } else {\n                $errors = array('name' => array(t('Another swimlane with the same name exists in the project')));\n            }\n        }\n\n        $this->create($values, $errors);\n    }\n\n    /**\n     * Edit a swimlane (display the form)\n     *\n     * @access public\n     * @param array $values\n     * @param array $errors\n     * @throws \\Kanboard\\Core\\Controller\\PageNotFoundException\n     */\n    public function edit(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n\n        $this->response->html($this->helper->layout->project('swimlane/edit', array(\n            'values' => empty($values) ? $swimlane : $values,\n            'errors' => $errors,\n            'project' => $project,\n        )));\n    }\n\n    /**\n     * Edit a swimlane (validate the form and update the database)\n     *\n     * @access public\n     */\n    public function update()\n    {\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n        $values['id'] = $swimlane['id'];\n\n        list($valid, $errors) = $this->swimlaneValidator->validateModification($values);\n\n        if ($valid) {\n            if ($this->swimlaneModel->update($values['id'], $values)) {\n                $this->flash->success(t('Swimlane updated successfully.'));\n                return $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n            } else {\n                $errors = array('name' => array(t('Another swimlane with the same name exists in the project')));\n            }\n        }\n\n        return $this->edit($values, $errors);\n    }\n\n    /**\n     * Confirmation dialog before removing a swimlane\n     *\n     * @access public\n     */\n    public function confirm()\n    {\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n\n        $this->response->html($this->helper->layout->project('swimlane/remove', array(\n            'project' => $project,\n            'swimlane' => $swimlane,\n        )));\n    }\n\n    /**\n     * Remove a swimlane\n     *\n     * @access public\n     */\n    public function remove()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n\n        if ($this->swimlaneModel->remove($project['id'], $swimlane['id'])) {\n            $this->flash->success(t('Swimlane removed successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to remove this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Disable a swimlane\n     *\n     * @access public\n     */\n    public function disable()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n\n        if ($this->swimlaneModel->disable($project['id'], $swimlane['id'])) {\n            $this->flash->success(t('Swimlane updated successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to update this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Enable a swimlane\n     *\n     * @access public\n     */\n    public function enable()\n    {\n        $this->checkCSRFParam();\n        $project = $this->getProject();\n        $swimlane = $this->getSwimlane($project);\n\n        if ($this->swimlaneModel->enable($project['id'], $swimlane['id'])) {\n            $this->flash->success(t('Swimlane updated successfully.'));\n        } else {\n            $this->flash->failure(t('Unable to update this swimlane.'));\n        }\n\n        $this->response->redirect($this->helper->url->to('SwimlaneController', 'index', array('project_id' => $project['id'])));\n    }\n\n    /**\n     * Move swimlane position\n     *\n     * @access public\n     */\n    public function move()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getJson();\n\n        if (! empty($values) && isset($values['swimlane_id']) && isset($values['position'])) {\n            $result = $this->swimlaneModel->changePosition($project['id'], $values['swimlane_id'], $values['position']);\n            $this->response->json(array('result' => $result));\n        } else {\n            throw new AccessForbiddenException();\n        }\n    }\n}\n", "<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Task Creation Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nclass TaskCreationController extends BaseController\n{\n    /**\n     * Display a form to create a new task\n     *\n     * @access public\n     * @param  array $values\n     * @param  array $errors\n     * @throws PageNotFoundException\n     */\n    public function show(array $values = array(), array $errors = array())\n    {\n        $project = $this->getProject();\n        $swimlanesList = $this->swimlaneModel->getList($project['id'], false, true);\n        $values += $this->prepareValues($project['is_private'], $swimlanesList);\n\n        $values = $this->hook->merge('controller:task:form:default', $values, array('default_values' => $values));\n        $values = $this->hook->merge('controller:task-creation:form:default', $values, array('default_values' => $values));\n\n        $this->response->html($this->template->render('task_creation/show', array(\n            'project' => $project,\n            'errors' => $errors,\n            'values' => $values + array('project_id' => $project['id']),\n            'columns_list' => $this->columnModel->getList($project['id']),\n            'users_list' => $this->projectUserRoleModel->getAssignableUsersList($project['id'], true, false, $project['is_private'] == 1),\n            'categories_list' => $this->categoryModel->getList($project['id']),\n            'swimlanes_list' => $swimlanesList,\n        )));\n    }\n\n    /**\n     * Validate and save a new task\n     *\n     * @access public\n     */\n    public function save()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n        $values['project_id'] = $project['id'];\n\n        list($valid, $errors) = $this->taskValidator->validateCreation($values);\n\n        if (! $valid) {\n            $this->flash->failure(t('Unable to create your task.'));\n            $this->show($values, $errors);\n        } else if (! $this->helper->projectRole->canCreateTaskInColumn($project['id'], $values['column_id'])) {\n            $this->flash->failure(t('You cannot create tasks in this column.'));\n            $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n        } else {\n            $task_id = $this->taskCreationModel->create($values);\n\n            if ($task_id > 0) {\n                $this->flash->success(t('Task created successfully.'));\n                $this->afterSave($project, $values, $task_id);\n            } else {\n                $this->flash->failure(t('Unable to create this task.'));\n                $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n            }\n        }\n    }\n\n    /**\n     * Duplicate created tasks to multiple projects\n     *\n     * @throws PageNotFoundException\n     */\n    public function duplicateProjects()\n    {\n        $project = $this->getProject();\n        $values = $this->request->getValues();\n\n        if (isset($values['project_ids'])) {\n            foreach ($values['project_ids'] as $project_id) {\n                $this->taskProjectDuplicationModel->duplicateToProject($values['task_id'], $project_id);\n            }\n        }\n\n        $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n    }\n\n    /**\n     * Executed after the task is saved\n     *\n     * @param array   $project\n     * @param array   $values\n     * @param integer $task_id\n     */\n    protected function afterSave(array $project, array &$values, $task_id)\n    {\n        if (isset($values['duplicate_multiple_projects']) && $values['duplicate_multiple_projects'] == 1) {\n            $this->chooseProjects($project, $task_id);\n        } elseif (isset($values['another_task']) && $values['another_task'] == 1) {\n            $this->show(array(\n                'owner_id' => $values['owner_id'],\n                'color_id' => $values['color_id'],\n                'category_id' => isset($values['category_id']) ? $values['category_id'] : 0,\n                'column_id' => $values['column_id'],\n                'swimlane_id' => isset($values['swimlane_id']) ? $values['swimlane_id'] : 0,\n                'another_task' => 1,\n            ));\n        } else {\n            $this->response->redirect($this->helper->url->to('BoardViewController', 'show', array('project_id' => $project['id'])), true);\n        }\n    }\n\n    /**\n     * Prepare form values\n     *\n     * @access protected\n     * @param  bool  $isPrivateProject\n     * @param  array $swimlanesList\n     * @return array\n     */\n    protected function prepareValues($isPrivateProject, array $swimlanesList)\n    {\n        $values = array(\n            'swimlane_id' => $this->request->getIntegerParam('swimlane_id', key($swimlanesList)),\n            'column_id'   => $this->request->getIntegerParam('column_id'),\n            'color_id'    => $this->colorModel->getDefaultColor(),\n        );\n\n        if ($isPrivateProject) {\n            $values['owner_id'] = $this->userSession->getId();\n        }\n\n        return $values;\n    }\n\n    /**\n     * Choose projects\n     *\n     * @param array $project\n     * @param integer $task_id\n     */\n    protected function chooseProjects(array $project, $task_id)\n    {\n        $task = $this->taskFinderModel->getById($task_id);\n        $projects = $this->projectUserRoleModel->getActiveProjectsByUser($this->userSession->getId());\n        unset($projects[$project['id']]);\n\n        $this->response->html($this->template->render('task_creation/duplicate_projects', array(\n            'project' => $project,\n            'task' => $task,\n            'projects_list' => $projects,\n            'values' => array('task_id' => $task['id'])\n        )));\n    }\n}\n", "<div class=\"page-header\">\n    <h2><?= t('Add an action') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'event', array('project_id' => $project['id'])) ?>\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values) ?>\n\n    <?= $this->modal->submitButtons(array(\n        'submitLabel' => t('Next step')\n    )) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Choose an event') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'params', array('project_id' => $project['id'])) ?>\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('action_name', $values) ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values, array(), array('disabled')) ?>\n\n    <?= $this->form->label(t('Event'), 'event_name') ?>\n    <?= $this->form->select('event_name', $events, $values) ?>\n\n    <div class=\"form-help\">\n        <?= t('When the selected event occurs execute the corresponding action.') ?>\n    </div>\n\n    <?= $this->modal->submitButtons(array(\n        'submitLabel' => t('Next step')\n    )) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Define action parameters') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('event_name', $values) ?>\n    <?= $this->form->hidden('action_name', $values) ?>\n\n    <?= $this->form->label(t('Action'), 'action_name') ?>\n    <?= $this->form->select('action_name', $available_actions, $values, array(), array('disabled')) ?>\n\n    <?= $this->form->label(t('Event'), 'event_name') ?>\n    <?= $this->form->select('event_name', $events, $values, array(), array('disabled')) ?>\n\n    <?php foreach ($action_params as $param_name => $param_desc): ?>\n        <?php if ($this->text->contains($param_name, 'column_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $columns_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'user_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $users_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'project_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $projects_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'color_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $colors_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'category_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $categories_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'link_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $links_list, $values) ?>\n        <?php elseif ($param_name === 'priority'): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $priorities_list, $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'duration')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->number('params['.$param_name.']', $values) ?>\n        <?php elseif ($this->text->contains($param_name, 'swimlane_id')): ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->select('params['.$param_name.']', $swimlane_list, $values) ?>\n        <?php else: ?>\n            <?= $this->form->label($param_desc, $param_name) ?>\n            <?= $this->form->text('params['.$param_name.']', $values) ?>\n        <?php endif ?>\n    <?php endforeach ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new category') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Category Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Category modification for the project \"%s\"', $project['name']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'update', array('project_id' => $project['id'], 'category_id' => $values['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Category Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new column') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Title'), 'title') ?>\n    <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Task limit'), 'task_limit') ?>\n    <?= $this->form->number('task_limit', $values, $errors, array('tabindex=\"2\"')) ?>\n\n    <?= $this->form->checkbox('hide_in_dashboard', t('Hide tasks in this column in the dashboard'), 1, false, '', array('tabindex' => 3)) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 4)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit column \"%s\"', $column['title']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'update', array('project_id' => $project['id'], 'column_id' => $column['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Title'), 'title') ?>\n    <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>\n\n    <?= $this->form->label(t('Task limit'), 'task_limit') ?>\n    <?= $this->form->number('task_limit', $values, $errors) ?>\n\n    <?= $this->form->checkbox('hide_in_dashboard', t('Hide tasks in this column in the dashboard'), 1, $values['hide_in_dashboard'] == 1) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new filter') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>\n\n    <?= $this->form->label(t('Filter'), 'filter') ?>\n    <?= $this->form->text('filter', $values, $errors, array('required', 'maxlength=\"100\"')) ?>\n\n    <?php if ($this->user->hasProjectAccess('ProjectEditController', 'show', $project['id'])): ?>\n        <?= $this->form->checkbox('is_shared', t('Share with all project members'), 1) ?>\n    <?php endif ?>\n\n    <?= $this->form->checkbox('append', t('Append filter (instead of replacement)'), 1) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit custom filter') ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'update', array('project_id' => $filter['project_id'], 'filter_id' => $filter['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->hidden('user_id', $values) ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>\n\n    <?= $this->form->label(t('Filter'), 'filter') ?>\n    <?= $this->form->text('filter', $values, $errors, array('required', 'maxlength=\"100\"')) ?>\n\n    <?php if ($this->user->hasProjectAccess('ProjectEditController', 'show', $project['id'])): ?>\n        <?= $this->form->checkbox('is_shared', t('Share with all project members'), 1, $values['is_shared'] == 1) ?>\n    <?php else: ?>\n        <?= $this->form->hidden('is_shared', $values) ?>\n    <?php endif ?>\n\n    <?= $this->form->checkbox('append', t('Append filter (instead of replacement)'), 1, $values['append'] == 1) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<?php if ($this->app->isAjax()): ?>\n    <div class=\"page-header\">\n        <h2><?= $this->text->e($project['name']) ?> &gt; <?= t('Edit project') ?></h2>\n    </div>\n<?php else: ?>\n    <div class=\"page-header\">\n        <h2><?= t('Edit project') ?></h2>\n    </div>\n<?php endif ?>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectEditController', 'update', array('project_id' => $project['id'], 'redirect' => 'edit')) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <fieldset>\n        <legend><?= t('General') ?></legend>\n\n        <?= $this->form->label(t('Name'), 'name') ?>\n        <?= $this->form->text('name', $values, $errors, array('required', 'maxlength=\"50\"', 'autofocus', 'tabindex=\"1\"')) ?>\n\n        <?= $this->form->label(t('Email'), 'email') ?>\n        <?= $this->form->email('email', $values, $errors, array('maxlength=\"255\"', 'tabindex=\"2\"')) ?>\n        <p class=\"form-help\"><?= t('The project email is optional and could be used by several plugins.') ?></p>\n\n        <?= $this->form->label(t('Identifier'), 'identifier') ?>\n        <?= $this->form->text('identifier', $values, $errors, array('maxlength=\"50\"', 'tabindex=\"3\"')) ?>\n        <p class=\"form-help\"><?= t('The project identifier is optional and must be alphanumeric, example: MYPROJECT.') ?></p>\n\n        <?= $this->form->label(t('Description'), 'description') ?>\n        <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 4)) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Permissions and ownership') ?></legend>\n\n        <?php if ($this->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])): ?>\n            <?= $this->form->checkbox('is_private', t('Private project'), 1, $project['is_private'] == 1) ?>\n            <p class=\"form-help\"><?= t('Private projects do not have users and groups management.') ?></p>\n        <?php endif ?>\n\n        <div class=\"form-inline\">\n            <?= $this->form->label(t('Project owner'), 'owner_id') ?>\n            <?= $this->form->select('owner_id', $owners, $values, $errors, array('tabindex=\"5\"')) ?>\n        </div>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Dates') ?></legend>\n\n        <?= $this->form->date(t('Start date'), 'start_date', $values, $errors, array('tabindex=\"6\"')) ?>\n        <?= $this->form->date(t('End date'), 'end_date', $values, $errors, array('tabindex=\"7\"')) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Priorities') ?></legend>\n\n        <?= $this->form->label(t('Default priority'), 'priority_default') ?>\n        <?= $this->form->number('priority_default', $values, $errors, array('tabindex=\"8\"')) ?>\n\n        <?= $this->form->label(t('Lowest priority'), 'priority_start') ?>\n        <?= $this->form->number('priority_start', $values, $errors, array('tabindex=\"9\"')) ?>\n\n        <?= $this->form->label(t('Highest priority'), 'priority_end') ?>\n        <?= $this->form->number('priority_end', $values, $errors, array('tabindex=\"10\"')) ?>\n    </fieldset>\n\n    <fieldset>\n        <legend><?= t('Predefined Email Subjects') ?></legend>\n        <?= $this->form->textarea('predefined_email_subjects', $values, $errors, array('tabindex=\"11\"')) ?>\n        <p class=\"form-help\"><?= t('Write one subject by line.') ?></p>\n    </fieldset>\n\n    <?= $this->modal->submitButtons(array('tabindex' => 11)) ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add new tag') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Edit a tag') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'update', array('tag_id' => $tag['id'], 'project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Add a new swimlane') ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= t('Swimlane modification for the project \"%s\"', $project['name']) ?></h2>\n</div>\n\n<form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'update', array('project_id' => $project['id'], 'swimlane_id' => $values['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <?= $this->form->label(t('Name'), 'name') ?>\n    <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n\n    <?= $this->form->label(t('Description'), 'description') ?>\n    <?= $this->form->textEditor('description', $values, $errors, array('tabindex' => 2)) ?>\n\n    <?= $this->modal->submitButtons() ?>\n</form>\n", "<div class=\"page-header\">\n    <h2><?= $this->text->e($project['name']) ?> &gt; <?= t('New task') ?><?= $this->task->getNewTaskDropdown($project['id'], $values['swimlane_id'], $values['column_id']) ?></h2>\n</div>\n<form method=\"post\" action=\"<?= $this->url->href('TaskCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n    <?= $this->form->csrf() ?>\n\n    <div class=\"task-form-container\">\n        <div class=\"task-form-main-column\">\n            <?= $this->task->renderTitleField($values, $errors) ?>\n            <?= $this->task->renderDescriptionField($values, $errors) ?>\n            <?= $this->task->renderTagField($project) ?>\n\n            <?= $this->hook->render('template:task:form:first-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-secondary-column\">\n            <?= $this->task->renderColorField($values) ?>\n            <?= $this->task->renderAssigneeField($users_list, $values, $errors) ?>\n            <?= $this->task->renderCategoryField($categories_list, $values, $errors) ?>\n            <?= $this->task->renderSwimlaneField($swimlanes_list, $values, $errors) ?>\n            <?= $this->task->renderColumnField($columns_list, $values, $errors) ?>\n            <?= $this->task->renderPriorityField($project, $values) ?>\n\n            <?= $this->hook->render('template:task:form:second-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-secondary-column\">\n            <?= $this->task->renderDueDateField($values, $errors) ?>\n            <?= $this->task->renderStartDateField($values, $errors) ?>\n            <?= $this->task->renderTimeEstimatedField($values, $errors) ?>\n            <?= $this->task->renderTimeSpentField($values, $errors) ?>\n            <?= $this->task->renderScoreField($values, $errors) ?>\n            <?= $this->task->renderReferenceField($values, $errors) ?>\n\n            <?= $this->hook->render('template:task:form:third-column', array('values' => $values, 'errors' => $errors)) ?>\n        </div>\n\n        <div class=\"task-form-bottom\">\n            <?php if (! isset($duplicate)): ?>\n                <?= $this->form->checkbox('another_task', t('Create another task'), 1, isset($values['another_task']) && $values['another_task'] == 1) ?>\n                <?= $this->form->checkbox('duplicate_multiple_projects', t('Duplicate to multiple projects'), 1) ?>\n            <?php endif ?>\n\n            <?= $this->modal->submitButtons() ?>\n        </div>\n    </div>\n</form>\n"], "filenames": ["ChangeLog", "app/Controller/ActionController.php", "app/Controller/ActionCreationController.php", "app/Controller/BaseController.php", "app/Controller/CategoryController.php", "app/Controller/ColumnController.php", "app/Controller/CustomFilterController.php", "app/Controller/ProjectEditController.php", "app/Controller/ProjectTagController.php", "app/Controller/SwimlaneController.php", "app/Controller/TaskCreationController.php", "app/Template/action_creation/create.php", "app/Template/action_creation/event.php", "app/Template/action_creation/params.php", "app/Template/category/create.php", "app/Template/category/edit.php", "app/Template/column/create.php", "app/Template/column/edit.php", "app/Template/custom_filter/create.php", "app/Template/custom_filter/edit.php", "app/Template/project_edit/show.php", "app/Template/project_tag/create.php", "app/Template/project_tag/edit.php", "app/Template/swimlane/create.php", "app/Template/swimlane/edit.php", "app/Template/task_creation/show.php"], "buggy_code_start_loc": [6, 48, 37, 157, 15, 63, 61, 67, 4, 6, 51, 6, 8, 8, 6, 7, 6, 7, 6, 8, 12, 6, 6, 5, 6, 6], "buggy_code_end_loc": [6, 69, 111, 157, 162, 186, 155, 67, 127, 208, 51, 7, 9, 9, 7, 10, 8, 10, 7, 11, 13, 7, 8, 8, 11, 7], "fixing_code_start_loc": [7, 49, 38, 158, 14, 64, 62, 68, 3, 5, 52, 5, 7, 7, 5, 6, 5, 6, 5, 7, 11, 5, 5, 4, 5, 5], "fixing_code_end_loc": [11, 70, 115, 248, 149, 192, 159, 70, 114, 193, 53, 5, 7, 7, 5, 6, 5, 6, 5, 8, 11, 5, 5, 5, 6, 5], "type": "CWE-639", "message": "In Kanboard before 1.0.47, by altering form data, an authenticated user can add automatic actions to a private project of another user.", "other": {"cve": {"id": "CVE-2017-15204", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-11T01:32:54.833", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Kanboard before 1.0.47, by altering form data, an authenticated user can add automatic actions to a private project of another user."}, {"lang": "es", "value": "En Kanboard en versiones anteriores a 1.0.47, al alterar los datos del formulario, un usuario autenticado puede a\u00f1adir acciones autom\u00e1ticas a un proyecto privado de otro usuario."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "D9FFA667-B2E5-464E-9B11-3B98283AD2C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "9F126BD8-B6F8-43BF-96CF-B11F2E9CB9F3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "3507C156-EB3B-470C-B895-F71845D2368E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "6E0902C1-DECB-4183-B369-511E2768D995"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "AA633272-8FA7-407C-9B3E-2D876B7271F0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "B306B73B-15B3-4B8B-9095-3642F8B47924"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "8FA40036-AC79-4367-BACB-B0B1451C5BD8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "C86BF2C5-D92F-41B4-B381-6D21BAA2D913"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "A62EF43A-C147-4C11-BD6E-82CF941AEBD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "958B6A4D-C466-4361-AA0A-5EB3D111C4E6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "C7C42F62-CD96-4727-9CD0-C3BD81418E53"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "970266EC-8452-4A06-81AC-05CF336D3C6F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.12:*:*:*:*:*:*:*", "matchCriteriaId": "1FE55D52-992D-4E67-BB6C-2E80299D22E0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.13:*:*:*:*:*:*:*", "matchCriteriaId": "DCE0BBFF-553F-4518-809B-BF136B7ABC71"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.14:*:*:*:*:*:*:*", "matchCriteriaId": "E2EFAF36-875E-41DB-BFB8-45846E29903E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.15:*:*:*:*:*:*:*", "matchCriteriaId": "C1333058-CD6D-4F7D-8C07-D4352D2FA9DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.16:*:*:*:*:*:*:*", "matchCriteriaId": "C3952635-F178-4AC0-8FE7-1034E0078AC7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.17:*:*:*:*:*:*:*", "matchCriteriaId": "7512FB30-BE2A-4CDA-8B77-44234223B578"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.18:*:*:*:*:*:*:*", "matchCriteriaId": "971C5D44-1406-4446-BEFE-20EF9ECDFFF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.19:*:*:*:*:*:*:*", "matchCriteriaId": "0045683B-30D9-4A04-A3A4-4DB903245380"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.20:*:*:*:*:*:*:*", "matchCriteriaId": "2BF439AC-B790-45D7-9C25-1C9195924ADD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.21:*:*:*:*:*:*:*", "matchCriteriaId": "A4FDBF54-282B-49A1-8095-811A5B998EEF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.22:*:*:*:*:*:*:*", "matchCriteriaId": "F650F14A-6A3E-4FD2-BCA1-6AF29278B827"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.23:*:*:*:*:*:*:*", "matchCriteriaId": "91C4B000-72B1-4E5F-814E-FBE2CEC602A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.24:*:*:*:*:*:*:*", "matchCriteriaId": "9249BDDA-4E2D-421D-8285-926FC400AC58"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.25:*:*:*:*:*:*:*", "matchCriteriaId": "B3B8946D-2BF0-47FD-BEA0-0C2C74126142"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.26:*:*:*:*:*:*:*", "matchCriteriaId": "A0315865-561D-4EA2-B361-FDB6D03FF5B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.27:*:*:*:*:*:*:*", "matchCriteriaId": "2E0FC480-9E2A-4A76-92FF-60E6239CE89F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.28:*:*:*:*:*:*:*", "matchCriteriaId": "3BA990B5-D038-4E5E-8FAF-035460BD4146"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.29:*:*:*:*:*:*:*", "matchCriteriaId": "070A3295-AFD7-473F-A9DA-ACF84C33274E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.30:*:*:*:*:*:*:*", "matchCriteriaId": "3B0B924E-76CE-412D-A47A-417B7C5E3454"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.31:*:*:*:*:*:*:*", "matchCriteriaId": "E7B48D3D-556D-4942-99E6-E6135400B2A8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.31:beta0:*:*:*:*:*:*", "matchCriteriaId": "08E6DE90-A247-4B72-A05C-61C9496E0D9E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.31:beta1:*:*:*:*:*:*", "matchCriteriaId": "15D496D1-DF37-4B06-BAE5-485D5141E1A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.32:*:*:*:*:*:*:*", "matchCriteriaId": "CC6332E7-A86D-4B09-93B3-815797E92A2F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.32:beta0:*:*:*:*:*:*", "matchCriteriaId": "CC8AE758-147C-4786-89CE-D2876C23BA5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.32:beta1:*:*:*:*:*:*", "matchCriteriaId": "4781CBDB-35CA-43BC-B031-34DB66B16D13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.33:*:*:*:*:*:*:*", "matchCriteriaId": "16F193B8-C859-47A5-9D1C-510925E9478C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.34:*:*:*:*:*:*:*", "matchCriteriaId": "CF622DE0-35C4-4F04-B74A-4127A885395F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.35:*:*:*:*:*:*:*", "matchCriteriaId": "98B3CDED-1284-45F7-93E2-F3CBFD2BB79C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.36:*:*:*:*:*:*:*", "matchCriteriaId": "2A4CD995-FEF9-47DE-A5AB-671471773DC0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.37:*:*:*:*:*:*:*", "matchCriteriaId": "60825078-59BC-45AD-B644-B23973233B33"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.38:*:*:*:*:*:*:*", "matchCriteriaId": "4695EEFA-1098-4741-A4C5-39D613880091"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.39:*:*:*:*:*:*:*", "matchCriteriaId": "49DD1826-5FC0-4773-AFFB-EAE3CFA4AC46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.40:*:*:*:*:*:*:*", "matchCriteriaId": "5033EDD4-9217-467E-91E9-8805B3667E1D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.41:*:*:*:*:*:*:*", "matchCriteriaId": "C04963CA-D17A-4847-B022-187D33134A74"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.42:*:*:*:*:*:*:*", "matchCriteriaId": "868722FE-E626-427A-8B24-58A8214824A9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.43:*:*:*:*:*:*:*", "matchCriteriaId": "FB2AF76B-C4CA-40D1-829C-E80560E14FDE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.44:*:*:*:*:*:*:*", "matchCriteriaId": "82D7AE61-C248-4E95-8878-903A188B41C6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.45:*:*:*:*:*:*:*", "matchCriteriaId": "467A191D-9A57-4B53-AD41-30CF317AA102"}, {"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:1.0.46:*:*:*:*:*:*:*", "matchCriteriaId": "41590AFF-2DB4-4D37-8CF8-84FCF85BB75B"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/10/04/9", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/kanboard/kanboard/commit/074f6c104f3e49401ef0065540338fc2d4be79f0", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kanboard/kanboard/commit/3e0f14ae2b0b5a44bd038a472f17eac75f538524", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://kanboard.net/news/version-1.0.47", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/074f6c104f3e49401ef0065540338fc2d4be79f0"}}