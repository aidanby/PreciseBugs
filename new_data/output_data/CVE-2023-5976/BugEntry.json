{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Content\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasEvents;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Kirschbaum\\PowerJoins\\PowerJoins;\nuse MicroweberPackages\\Category\\Traits\\CategoryTrait;\nuse MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\nuse MicroweberPackages\\ContentData\\Traits\\ContentDataTrait;\nuse MicroweberPackages\\ContentField\\Traits\\HasContentFieldTrait;\nuse MicroweberPackages\\Core\\Models\\HasSearchableTrait;\nuse MicroweberPackages\\CustomField\\Traits\\CustomFieldsTrait;\nuse MicroweberPackages\\Database\\Traits\\CacheableQueryBuilderTrait;\nuse MicroweberPackages\\Database\\Traits\\HasCreatedByFieldsTrait;\nuse MicroweberPackages\\Database\\Traits\\HasSlugTrait;\nuse MicroweberPackages\\Database\\Traits\\MaxPositionTrait;\nuse MicroweberPackages\\Media\\Traits\\MediaTrait;\nuse MicroweberPackages\\Menu\\Traits\\HasMenuItem;\nuse MicroweberPackages\\Multilanguage\\Models\\Traits\\HasMultilanguageTrait;\nuse MicroweberPackages\\Tag\\Traits\\TaggableTrait;\n\nclass Content extends Model\n{\n    use TaggableTrait;\n    use ContentDataTrait;\n    use CustomFieldsTrait;\n    use CategoryTrait;\n    use HasContentFieldTrait;\n    use HasSlugTrait;\n    use HasSearchableTrait;\n    use HasMenuItem;\n    use MediaTrait;\n    use Filterable;\n    use HasCreatedByFieldsTrait;\n    use CacheableQueryBuilderTrait;\n    use PowerJoins;\n    use HasEvents;\n    use HasMultilanguageTrait;\n    use MaxPositionTrait;\n\n    protected $table = 'content';\n    protected $content_type = 'content';\n    public $additionalData = [];\n\n    public $cacheTagsToClear = ['repositories', 'content', 'content_fields_drafts', 'menu', 'content_fields', 'categories'];\n\n    public $translatable = ['title','url','description','content','content_body','content_meta_title','content_meta_keywords'];\n\n    protected $attributes = [\n        'is_active' => '1',\n        'is_deleted' => '0',\n        'is_shop' => '0',\n        'is_home' => '0',\n    ];\n    protected $searchableByKeyword = [\n        'title',\n        'content',\n        'content_body',\n        'description',\n        'url',\n        'content_meta_title',\n        'content_meta_keywords',\n    ];\n    protected $searchable = [\n        'id',\n        'title',\n        'content',\n        'content_body',\n        'content_type',\n        'subtype',\n        'description',\n        'is_home',\n        'is_shop',\n        'is_deleted',\n        'is_active',\n        'subtype',\n        'subtype_value',\n        'parent',\n        'layout_file',\n        'active_site_template',\n        'url',\n        'content_meta_title',\n        'content_meta_keywords',\n    ];\n\n    protected $fillable = [\n        \"id\",\n        \"subtype\",\n        \"subtype_value\",\n        \"content_type\",\n        \"parent\",\n        \"layout_file\",\n        \"active_site_template\",\n        \"title\",\n        \"url\",\n        \"content_meta_title\",\n        \"content\",\n        \"description\",\n        \"content_body\",\n        \"content_meta_keywords\",\n        \"original_link\",\n        \"require_login\",\n        \"created_by\",\n        \"is_home\",\n        \"is_shop\",\n        \"is_active\",\n        \"is_deleted\",\n        \"updated_at\",\n        \"created_at\",\n    ];\n\n    public function scopeActive($query)\n    {\n        return $query->where('is_active', 1)->where('is_deleted', 0);\n    }\n\n    public function related()\n    {\n        return $this->hasMany(ContentRelated::class,'content_id','id')->orderBy('position', 'ASC');\n    }\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(ContentFilter::class);\n    }\n\n    public function getMorphClass()\n    {\n        return 'content';\n    }\n\n    public function link()\n    {\n        return content_link($this->id);\n    }\n\n    public function editLink()\n    {\n        return content_edit_link($this->id);\n    }\n\n    public function liveEditLink()\n    {\n        return content_edit_link($this->id);\n    }\n\n    public function getDescriptionAttribute($value)\n    {\n        if(is_string($value) and $value){\n          return  strip_tags($value);\n        }\n    }\n\n    public function shortDescription($limit = 224, $end = '...')\n    {\n        if (empty($this->description)) {\n            return false;\n        }\n\n        $shortDescription = $this->description;\n        $shortDescription = strip_tags($shortDescription);\n        $shortDescription = trim($shortDescription);\n        $shortDescription = str_limit($shortDescription, $limit, $end);\n\n        return $shortDescription;\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Modules\\Comments\\Http\\LiveWire;\n\nuse Livewire\\Component;\n\nclass UserCommentReplyComponent extends Component\n{\n    public $state = [\n        'comment_name' => '',\n        'comment_email' => '',\n        'comment_body' => '',\n    ];\n\n    public function mount($relId = null, $replyToCommentId = null)\n    {\n        $this->state['rel_id'] = $relId;\n        $this->state['reply_to_comment_id'] = $replyToCommentId;\n    }\n\n    public function render()\n    {\n        return view('comments::livewire.user-comment-reply-component');\n    }\n\n    public function save()\n    {\n        $validate = [\n            'state.comment_body' => 'required|min:3',\n        ];\n        if (!user_id()) {\n            $validate['state.comment_name'] = 'required|min:3';\n            $validate['state.comment_email'] = 'required|email';\n        }\n\n        $this->validate($validate);\n\n        $comment = new \\MicroweberPackages\\Comment\\Models\\Comment();\n\n        if (isset($this->state['rel_id'])) {\n            $comment->rel_id = $this->state['rel_id'];\n            $comment->rel_type = 'content';\n        }\n\n        if (isset($this->state['reply_to_comment_id'])) {\n            $comment->reply_to_comment_id = $this->state['reply_to_comment_id'];\n        }\n\n        $comment->user_ip = user_ip();\n        $comment->session_id = session_id();\n\n        if (user_id()) {\n            $comment->created_by = user_id();\n        } else {\n            $comment->comment_name = $this->state['comment_name'];\n            $comment->comment_email = $this->state['comment_email'];\n        }\n\n        $comment->comment_body = $this->state['comment_body'];\n        $comment->save();\n\n        $this->state['comment_body'] = '';\n        $this->state['comment_name'] = '';\n        $this->state['comment_email'] = '';\n\n        $this->emit('commentAdded', $comment->id);\n\n    }\n}\n\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Content\\Models;\n\nuse EloquentFilter\\Filterable;\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasEvents;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Kirschbaum\\PowerJoins\\PowerJoins;\nuse MicroweberPackages\\Category\\Traits\\CategoryTrait;\nuse MicroweberPackages\\Content\\Models\\ModelFilters\\ContentFilter;\nuse MicroweberPackages\\ContentData\\Traits\\ContentDataTrait;\nuse MicroweberPackages\\ContentField\\Traits\\HasContentFieldTrait;\nuse MicroweberPackages\\Core\\Models\\HasSearchableTrait;\nuse MicroweberPackages\\CustomField\\Traits\\CustomFieldsTrait;\nuse MicroweberPackages\\Database\\Traits\\CacheableQueryBuilderTrait;\nuse MicroweberPackages\\Database\\Traits\\HasCreatedByFieldsTrait;\nuse MicroweberPackages\\Database\\Traits\\HasSlugTrait;\nuse MicroweberPackages\\Database\\Traits\\MaxPositionTrait;\nuse MicroweberPackages\\Media\\Traits\\MediaTrait;\nuse MicroweberPackages\\Menu\\Traits\\HasMenuItem;\nuse MicroweberPackages\\Multilanguage\\Models\\Traits\\HasMultilanguageTrait;\nuse MicroweberPackages\\Tag\\Traits\\TaggableTrait;\n\nclass Content extends Model\n{\n    use TaggableTrait;\n    use ContentDataTrait;\n    use CustomFieldsTrait;\n    use CategoryTrait;\n    use HasContentFieldTrait;\n    use HasSlugTrait;\n    use HasSearchableTrait;\n    use HasMenuItem;\n    use MediaTrait;\n    use Filterable;\n    use HasCreatedByFieldsTrait;\n    use CacheableQueryBuilderTrait;\n    use PowerJoins;\n    use HasEvents;\n    use HasMultilanguageTrait;\n    use MaxPositionTrait;\n\n    protected $table = 'content';\n    protected $content_type = 'content';\n    public $additionalData = [];\n\n    public $cacheTagsToClear = ['repositories', 'content', 'content_fields_drafts', 'menu', 'content_fields', 'categories'];\n\n    public $translatable = ['title','url','description','content','content_body','content_meta_title','content_meta_keywords'];\n\n    protected $attributes = [\n        'is_active' => '1',\n        'is_deleted' => '0',\n        'is_shop' => '0',\n        'is_home' => '0',\n    ];\n    protected $searchableByKeyword = [\n        'title',\n        'content',\n        'content_body',\n        'description',\n        'url',\n        'content_meta_title',\n        'content_meta_keywords',\n    ];\n    protected $searchable = [\n        'id',\n        'title',\n        'content',\n        'content_body',\n        'content_type',\n        'subtype',\n        'description',\n        'is_home',\n        'is_shop',\n        'is_deleted',\n        'is_active',\n        'subtype',\n        'subtype_value',\n        'parent',\n        'layout_file',\n        'active_site_template',\n        'url',\n        'content_meta_title',\n        'content_meta_keywords',\n    ];\n\n    protected $fillable = [\n        \"id\",\n        \"subtype\",\n        \"subtype_value\",\n        \"content_type\",\n        \"parent\",\n        \"layout_file\",\n        \"active_site_template\",\n        \"title\",\n        \"url\",\n        \"content_meta_title\",\n        \"content\",\n        \"description\",\n        \"content_body\",\n        \"content_meta_keywords\",\n        \"original_link\",\n        \"require_login\",\n        \"created_by\",\n        \"is_home\",\n        \"is_shop\",\n        \"is_active\",\n        \"is_deleted\",\n        \"updated_at\",\n        \"created_at\",\n    ];\n\n    public function scopeActive($query)\n    {\n        return $query\n            ->where('is_active', 1)\n            ->where(function($subQuery) {\n                $subQuery\n                    ->whereNull('is_deleted')\n                    ->orWhere('is_deleted', 0);\n            });\n    }\n\n    public function related()\n    {\n        return $this->hasMany(ContentRelated::class,'content_id','id')->orderBy('position', 'ASC');\n    }\n\n    public function modelFilter()\n    {\n        return $this->provideFilter(ContentFilter::class);\n    }\n\n    public function getMorphClass()\n    {\n        return 'content';\n    }\n\n    public function link()\n    {\n        return content_link($this->id);\n    }\n\n    public function editLink()\n    {\n        return content_edit_link($this->id);\n    }\n\n    public function liveEditLink()\n    {\n        return content_edit_link($this->id);\n    }\n\n    public function getDescriptionAttribute($value)\n    {\n        if(is_string($value) and $value){\n          return  strip_tags($value);\n        }\n    }\n\n    public function shortDescription($limit = 224, $end = '...')\n    {\n        if (empty($this->description)) {\n            return false;\n        }\n\n        $shortDescription = $this->description;\n        $shortDescription = strip_tags($shortDescription);\n        $shortDescription = trim($shortDescription);\n        $shortDescription = str_limit($shortDescription, $limit, $end);\n\n        return $shortDescription;\n    }\n\n}\n", "<?php\n\nnamespace MicroweberPackages\\Modules\\Comments\\Http\\LiveWire;\n\nuse Livewire\\Component;\nuse MicroweberPackages\\Content\\Models\\Content;\n\nclass UserCommentReplyComponent extends Component\n{\n    public $state = [\n        'comment_name' => '',\n        'comment_email' => '',\n        'comment_body' => '',\n    ];\n\n    public function mount($relId = null, $replyToCommentId = null)\n    {\n        $this->state['rel_id'] = $relId;\n        $this->state['reply_to_comment_id'] = $replyToCommentId;\n    }\n\n    public function render()\n    {\n        return view('comments::livewire.user-comment-reply-component');\n    }\n\n    public function save()\n    {\n        $validate = [\n            'state.rel_id' => 'required|min:1',\n            'state.comment_body' => 'required|min:3',\n        ];\n        if (!user_id()) {\n            $validate['state.comment_name'] = 'required|min:3';\n            $validate['state.comment_email'] = 'required|email';\n        }\n\n        $this->validate($validate);\n\n        $countContent = Content::where('id', $this->state['rel_id'])->whereActive()->count();\n        if ($countContent == 0) {\n            $this->addError('state.rel_id', 'Content not found');\n            return;\n        }\n\n        $comment = new \\MicroweberPackages\\Comment\\Models\\Comment();\n        $comment->rel_id = $this->state['rel_id'];\n        $comment->rel_type = 'content';\n\n        if (isset($this->state['reply_to_comment_id'])) {\n            $comment->reply_to_comment_id = $this->state['reply_to_comment_id'];\n        }\n\n        $comment->user_ip = user_ip();\n        $comment->session_id = session_id();\n\n        if (user_id()) {\n            $comment->created_by = user_id();\n        } else {\n            $comment->comment_name = $this->state['comment_name'];\n            $comment->comment_email = $this->state['comment_email'];\n        }\n\n        $comment->comment_body = $this->state['comment_body'];\n        $comment->save();\n\n        $this->state['comment_body'] = '';\n        $this->state['comment_name'] = '';\n        $this->state['comment_email'] = '';\n\n        $this->emit('commentAdded', $comment->id);\n\n    }\n}\n\n"], "filenames": ["src/MicroweberPackages/Content/Models/Content.php", "userfiles/modules/comments/src/Http/Livewire/UserCommentReplyComponent.php"], "buggy_code_start_loc": [116, 5], "buggy_code_end_loc": [117, 44], "fixing_code_start_loc": [116, 6], "fixing_code_end_loc": [123, 49], "type": "CWE-284", "message": "Improper Access Control in GitHub repository microweber/microweber prior to 2.0.", "other": {"cve": {"id": "CVE-2023-5976", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-07T04:24:37.473", "lastModified": "2023-11-14T18:39:05.787", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository microweber/microweber prior to 2.0."}, {"lang": "es", "value": "Control de acceso inadecuado en el repositorio de GitHub microweber/microweber anterior a 2.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.0", "matchCriteriaId": "1CF90546-1596-44C3-8F49-77B4CDD14DFD"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/bc537ebe235bf9924c6557a46114f5f9557cd16a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/2004e4a9-c5f6-406a-89b0-571f808882fa", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/bc537ebe235bf9924c6557a46114f5f9557cd16a"}}