{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Tool\\UUID;\n\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Model;\n\n/**\n * @internal\n *\n * @property \\Pimcore\\Model\\Tool\\UUID $model\n */\nclass Dao extends Model\\Dao\\AbstractDao\n{\n    const TABLE_NAME = 'uuids';\n\n    public function save()\n    {\n        $data = $this->getValidObjectVars();\n\n        Helper::insertOrUpdate($this->db, self::TABLE_NAME, $data);\n    }\n\n    public function create()\n    {\n        $data = $this->getValidObjectVars();\n\n        $this->db->insert(self::TABLE_NAME, $data);\n    }\n\n    /**\n     * @return array\n     */\n    private function getValidObjectVars()\n    {\n        $data = $this->model->getObjectVars();\n\n        foreach ($data as $key => $value) {\n            if (!in_array($key, $this->getValidTableColumns(static::TABLE_NAME))) {\n                unset($data[$key]);\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @throws \\Exception\n     */\n    public function delete()\n    {\n        $uuid = $this->model->getUuid();\n        if (!$uuid) {\n            throw new \\Exception(\"Couldn't delete UUID - no UUID specified.\");\n        }\n\n        $itemId = $this->model->getItemId();\n        $type = $this->model->getType();\n\n        $this->db->delete(self::TABLE_NAME, ['itemId' => $itemId, 'type' => $type, 'uuid' => $uuid]);\n    }\n\n    /**\n     * @param string $uuid\n     *\n     * @return Model\\Tool\\UUID\n     */\n    public function getByUuid($uuid)\n    {\n        $data = $this->db->fetchAssociative('SELECT * FROM ' . self::TABLE_NAME .\" where uuid='\" . $uuid . \"'\");\n        $model = new Model\\Tool\\UUID();\n        $model->setValues($data);\n\n        return $model;\n    }\n\n    /**\n     * @param string $uuid\n     *\n     * @return bool\n     */\n    public function exists($uuid)\n    {\n        return (bool) $this->db->fetchOne('SELECT uuid FROM ' . self::TABLE_NAME . ' where uuid = ?', [$uuid]);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\Tool\\UUID;\n\nuse Doctrine\\DBAL\\Types\\Types;\nuse Pimcore\\Db\\Helper;\nuse Pimcore\\Model;\n\n/**\n * @internal\n *\n * @property \\Pimcore\\Model\\Tool\\UUID $model\n */\nclass Dao extends Model\\Dao\\AbstractDao\n{\n    const TABLE_NAME = 'uuids';\n\n    public function save()\n    {\n        $data = $this->getValidObjectVars();\n\n        Helper::insertOrUpdate($this->db, self::TABLE_NAME, $data);\n    }\n\n    public function create()\n    {\n        $data = $this->getValidObjectVars();\n\n        $this->db->insert(self::TABLE_NAME, $data);\n    }\n\n    /**\n     * @return array\n     */\n    private function getValidObjectVars()\n    {\n        $data = $this->model->getObjectVars();\n\n        foreach ($data as $key => $value) {\n            if (!in_array($key, $this->getValidTableColumns(static::TABLE_NAME))) {\n                unset($data[$key]);\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @throws \\Exception\n     */\n    public function delete()\n    {\n        $uuid = $this->model->getUuid();\n        if (!$uuid) {\n            throw new \\Exception(\"Couldn't delete UUID - no UUID specified.\");\n        }\n\n        $itemId = $this->model->getItemId();\n        $type = $this->model->getType();\n\n        $this->db->delete(self::TABLE_NAME, ['itemId' => $itemId, 'type' => $type, 'uuid' => $uuid]);\n    }\n\n    /**\n     * @param string $uuid\n     *\n     * @return Model\\Tool\\UUID\n     */\n    public function getByUuid($uuid)\n    {\n        $queryBuilder = $this->db->createQueryBuilder();\n        $queryBuilder\n            ->select('*')\n            ->from(self::TABLE_NAME)\n            ->where('uuid = :uuid')\n            ->setParameter('uuid', $uuid, Types::STRING);\n\n        $data = $queryBuilder\n            ->execute()\n            ->fetchAssociative();\n\n        $model = new Model\\Tool\\UUID();\n        $model->setValues($data);\n\n        return $model;\n    }\n\n    /**\n     * @param string $uuid\n     *\n     * @return bool\n     */\n    public function exists($uuid)\n    {\n        $queryBuilder = $this->db->createQueryBuilder();\n        $queryBuilder\n            ->select('uuid')\n            ->from(self::TABLE_NAME)\n            ->where('uuid = :uuid')\n            ->setParameter('uuid', $uuid, Types::STRING);\n\n\n        $result = $queryBuilder\n            ->execute()\n            ->fetchOne();\n\n        return (bool) $result;\n    }\n}\n"], "filenames": ["models/Tool/UUID/Dao.php"], "buggy_code_start_loc": [17], "buggy_code_end_loc": [98], "fixing_code_start_loc": [18], "fixing_code_end_loc": [121], "type": "CWE-89", "message": "Pimcore is an open source data and experience management platform. Prior to version 10.5.19, quoting is not done properly in UUID DAO model. There is the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and so relies on the auto-quoting being done by the DAO class. Users should update to version 10.5.19 to receive a patch or, as a workaround, apply the patch manually.", "other": {"cve": {"id": "CVE-2023-28108", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-16T17:15:09.663", "lastModified": "2023-03-22T18:42:56.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore is an open source data and experience management platform. Prior to version 10.5.19, quoting is not done properly in UUID DAO model. There is the theoretical possibility to inject custom SQL if the developer is using this methods with input data and not doing proper input validation in advance and so relies on the auto-quoting being done by the DAO class. Users should update to version 10.5.19 to receive a patch or, as a workaround, apply the patch manually."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.9, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.5, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/08e7ba56ae983c3c67ec563b6989b16ef8f35275.patch", "source": "security-advisories@github.com", "tags": ["Mailing List", "Patch"]}, {"url": "https://github.com/pimcore/pimcore/pull/14633", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/pimcore/security/advisories/GHSA-xc9p-r5qj-8xm9", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/08e7ba56ae983c3c67ec563b6989b16ef8f35275.patch"}}