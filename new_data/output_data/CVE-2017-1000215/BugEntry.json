{"buggy_code": ["#-------------------------------------------------------------------------------\n# Helper macros\n#-------------------------------------------------------------------------------\n%if %{?rhel:1}%{!?rhel:0}\n    %if %{rhel} >= 7\n        %define use_systemd 1\n    %else\n        %define use_systemd 0\n    %endif\n%else\n    %if %{?fedora}%{!?fedora:0} >= 19\n        %define use_systemd 1\n    %else\n        %define use_systemd 0\n    %endif\n%endif\n\n%if %{?fedora}%{!?fedora:0} >= 22\n    %define use_libc_semaphore 1\n%else\n    %define use_libc_semaphore 0\n%endif\n\n%if %{?_with_ceph11:1}%{!?_with_ceph11:0}\n    %define _with_ceph 1\n%endif\n\n# Remove default rpm python bytecompiling scripts\n%global __os_install_post \\\n    %(echo '%{__os_install_post}' | \\\n      sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g \\\n              s!/usr/lib[^[:space:]]*/brp-python-hardlink[[:space:]].*$!!g')\n\n#-------------------------------------------------------------------------------\n# Package definitions\n#-------------------------------------------------------------------------------\nName:      xrootd\nEpoch:     1\nVersion:   __VERSION__\nRelease:   __RELEASE__%{?dist}%{?_with_cpp11:.cpp11}%{?_with_clang:.clang}\nSummary:   Extended ROOT file server\nGroup:     System Environment/Daemons\nLicense:   LGPLv3+\nURL:       http://xrootd.org/\n\n# git clone http://xrootd.org/repo/xrootd.git xrootd\n# cd xrootd\n# git-archive master | gzip -9 > ~/rpmbuild/SOURCES/xrootd.tgz\nSource0:   xrootd.tar.gz\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\nSource1:   xrootd-3.3.6.tar.gz\n%endif\n\nBuildRoot: %{_tmppath}/%{name}-root\n\nBuildRequires: cmake\nBuildRequires: krb5-devel\nBuildRequires: readline-devel\nBuildRequires: fuse-devel\nBuildRequires: libxml2-devel\nBuildRequires: krb5-devel\nBuildRequires: zlib-devel\nBuildRequires: ncurses-devel\nBuildRequires: python-devel\nBuildRequires: openssl-devel\n\nBuildRequires: selinux-policy-devel\n\n%if %{?_with_tests:1}%{!?_with_tests:0}\nBuildRequires: cppunit-devel\n%endif\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n    %if %{?_with_ceph11:1}%{!?_with_ceph11:0}\nBuildRequires: librados-devel >= 11.0\nBuildRequires: libradosstriper-devel >= 11.0\n    %else\nBuildRequires: ceph-devel >= 0.87\n    %endif\n%endif\n\nBuildRequires:\tdoxygen\nBuildRequires:\tgraphviz\n%if %{?rhel}%{!?rhel:0} == 5\nBuildRequires:\tgraphviz-gd\n%endif\n\n%if %{?_with_clang:1}%{!?_with_clang:0}\nBuildRequires: clang\n%endif\n\nRequires:\t%{name}-server%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-selinux = %{epoch}:%{version}-%{release}\n\n%if %{use_systemd}\nBuildRequires:    systemd\nBuildRequires:    systemd-devel\nRequires(pre):\t\tsystemd\nRequires(post):\t\tsystemd\nRequires(preun):\tsystemd\nRequires(postun):\tsystemd\n%else\nRequires(pre):\t\tshadow-utils\nRequires(pre):\t\tchkconfig\nRequires(post):\t\tchkconfig\nRequires(preun):\tchkconfig\nRequires(preun):\tinitscripts\nRequires(postun):\tinitscripts\n%endif\n\n%description\nThe Extended root file server consists of a file server called xrootd\nand a cluster management server called cmsd.\n\nThe xrootd server was developed for the root analysis framework to\nserve root files. However, the server is agnostic to file types and\nprovides POSIX-like access to any type of file.\n\nThe cmsd server is the next generation version of the olbd server,\noriginally developed to cluster and load balance Objectivity/DB AMS\ndatabase servers. It provides enhanced capability along with lower\nlatency and increased throughput.\n\n#-------------------------------------------------------------------------------\n# libs\n#-------------------------------------------------------------------------------\n%package libs\nSummary:\tLibraries used by xrootd servers and clients\nGroup:\t\tSystem Environment/Libraries\n\n%description libs\nThis package contains libraries used by the xrootd servers and clients.\n\n#-------------------------------------------------------------------------------\n# devel\n#------------------------------------------------------------------------------\n%package devel\nSummary:\tDevelopment files for xrootd\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description devel\nThis package contains header files and development libraries for xrootd\ndevelopment.\n\n#-------------------------------------------------------------------------------\n# client-libs\n#-------------------------------------------------------------------------------\n%package client-libs\nSummary:\tLibraries used by xrootd clients\nGroup:\t\tSystem Environment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n%if %{use_libc_semaphore}\nRequires:       glibc >= 2.21\n%endif\n\n%description client-libs\nThis package contains libraries used by xrootd clients.\n\n#-------------------------------------------------------------------------------\n# client-devel\n#-------------------------------------------------------------------------------\n%package client-devel\nSummary:\tDevelopment files for xrootd clients\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description client-devel\nThis package contains header files and development libraries for xrootd\nclient development.\n\n#-------------------------------------------------------------------------------\n# server-libs\n#-------------------------------------------------------------------------------\n%package server-libs\nSummary:\tLibraries used by xrootd servers\nGroup:\t\tSystem Environment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-libs\nThis package contains libraries used by xrootd servers.\n\n#-------------------------------------------------------------------------------\n# server-devel\n#-------------------------------------------------------------------------------\n%package server-devel\nSummary:\tDevelopment files for xrootd servers\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-server-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-devel\nThis package contains header files and development libraries for xrootd\nserver development.\n\n#-------------------------------------------------------------------------------\n# private devel\n#-------------------------------------------------------------------------------\n%package private-devel\nSummary:\tLegacy xrootd headers\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-libs = %{epoch}:%{version}-%{release}\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch:\tnoarch\n%endif\n\n%description private-devel\nThis package contains some private xrootd headers. The use of these\nheaders is strongly discouraged. Backward compatibility between\nversions is not guaranteed for these headers.\n\n#-------------------------------------------------------------------------------\n# client\n#-------------------------------------------------------------------------------\n%package client\nSummary:\tXrootd command line client tools\nGroup:\t\tApplications/Internet\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description client\nThis package contains the command line tools used to communicate with\nxrootd servers.\n\n#-------------------------------------------------------------------------------\n# server\n#-------------------------------------------------------------------------------\n%package server\nSummary:   Extended ROOT file server\nGroup:     System Environment/Daemons\nRequires:  %{name}-libs        = %{epoch}:%{version}-%{release}\nRequires:  %{name}-client-libs = %{epoch}:%{version}-%{release}\nRequires:  %{name}-server-libs = %{epoch}:%{version}-%{release}\nRequires:  expect\n\n%description server\nXRootD server binaries\n\n#-------------------------------------------------------------------------------\n# fuse\n#-------------------------------------------------------------------------------\n%package fuse\nSummary:\tXrootd FUSE tool\nGroup:\t\tApplications/Internet\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\tfuse\n\n%description fuse\nThis package contains the FUSE (file system in user space) xrootd mount\ntool.\n\n#-------------------------------------------------------------------------------\n# python\n#-------------------------------------------------------------------------------\n%package python\nSummary:\tPython bindings for XRootD\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description python\nPython bindings for XRootD\n\n#-------------------------------------------------------------------------------\n# doc\n#-------------------------------------------------------------------------------\n%package doc\nSummary:\tDeveloper documentation for the xrootd libraries\nGroup:\t\tDocumentation\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch:\tnoarch\n%endif\n\n%description doc\nThis package contains the API documentation of the xrootd libraries.\n\n#-------------------------------------------------------------------------------\n# selinux\n#-------------------------------------------------------------------------------\n%package selinux\nSummary:\t SELinux policy extensions for xrootd.\nGroup:\t\t System Environment/Base\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch: noarch\n%endif\nRequires(post):   policycoreutils\nRequires(postun): policycoreutils\nRequires:         selinux-policy\n\n%description selinux\nSELinux policy extensions for running xrootd while in enforcing mode.\n\n#-------------------------------------------------------------------------------\n# ceph\n#-------------------------------------------------------------------------------\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%package ceph\nSummary: Ceph back-end plug-in for XRootD\nGroup:   Development/Tools\nRequires: %{name}-server = %{epoch}:%{version}-%{release}\n%description ceph\nCeph back-end plug-in for XRootD.\n%endif\n\n#-------------------------------------------------------------------------------\n# tests\n#-------------------------------------------------------------------------------\n%if %{?_with_tests:1}%{!?_with_tests:0}\n%package tests\nSummary: CPPUnit tests\nGroup:   Development/Tools\nRequires: %{name}-client = %{epoch}:%{version}-%{release}\n%description tests\nThis package contains a set of CPPUnit tests for xrootd.\n%endif\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n#-------------------------------------------------------------------------------\n# client-compat\n#-------------------------------------------------------------------------------\n%package client-compat\nSummary:\tXRootD 3 compatibility client libraries\nGroup:\t\tSystem Environment/Libraries\n\n%description client-compat\nThis package contains compatibility libraries for xrootd 3 clients.\n\n#-------------------------------------------------------------------------------\n# server-compat\n#-------------------------------------------------------------------------------\n%package server-compat\nSummary:\tXRootD 3 compatibility server binaries\nGroup:\t\tSystem Environment/Daemons\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-compat\nThis package contains compatibility binaries for xrootd 3 servers.\n\n%endif\n\n#-------------------------------------------------------------------------------\n# Build instructions\n#-------------------------------------------------------------------------------\n%prep\n%setup -c -n xrootd\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n%setup -T -D -n %{name} -a 1\n%endif\n\n%build\ncd xrootd\n\n%if %{?_with_cpp11:1}%{!?_with_cpp11:0}\nexport CXXFLAGS=-std=c++11\n%endif\n\n%if %{?_with_clang:1}%{!?_with_clang:0}\nexport CC=clang\nexport CXX=clang++\n%endif\n\nmkdir build\npushd build\n%if %{?_with_tests:1}%{!?_with_tests:0}\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_TESTS=TRUE -DUSE_LIBC_SEMAPHORE=%{use_libc_semaphore} ../\n%else\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_LIBC_SEMAPHORE=%{use_libc_semaphore} ../\n%endif\n\nmake -i VERBOSE=1 %{?_smp_mflags}\npopd\n\npushd packaging/common\nmake -f /usr/share/selinux/devel/Makefile\npopd\n\ndoxygen Doxyfile\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\npushd ../xrootd-3.3.6\nmkdir build\npushd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_PERL=FALSE ../\nmake VERBOSE=1 %{?_smp_mflags}\npopd\npopd\n%endif\n\n#-------------------------------------------------------------------------------\n# Installation\n#-------------------------------------------------------------------------------\n%install\nrm -rf $RPM_BUILD_ROOT\n\n#-------------------------------------------------------------------------------\n# Install 3.3.6 compat\n#-------------------------------------------------------------------------------\n%if %{?_with_compat:1}%{!?_with_compat:0}\npushd xrootd-3.3.6/build\nmake install DESTDIR=$RPM_BUILD_ROOT\nrm -rf $RPM_BUILD_ROOT%{_includedir}\nrm -rf $RPM_BUILD_ROOT%{_datadir}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{cconfig,cns_ssi,frm_admin,frm_xfragent,mpxstats}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{wait41,xprep,xrd,xrdadler32,XrdCnsd,xrdcopy}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{xrdcp,xrdcp-old,xrdfs,xrdgsiproxy,xrdpwdadmin}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{xrdsssadmin,xrdstagetool,xrootdfs}\nrm -f $RPM_BUILD_ROOT%{_libdir}/libXrdAppUtils.so\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdClient.so,libXrdCl.so,libXrdCryptoLite.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdCrypto.so,libXrdFfs.so,libXrdMain.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdOfs.so,libXrdPosixPreload.so,libXrdPosix.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdServer.so,libXrdUtils.so}\n\nfor i in cmsd frm_purged frm_xfrd xrootd; do\n  mv $RPM_BUILD_ROOT%{_bindir}/$i $RPM_BUILD_ROOT%{_bindir}/${i}-3\ndone\npopd\n%endif\n\n#-------------------------------------------------------------------------------\n# Install 4.x.y\n#-------------------------------------------------------------------------------\npushd xrootd\npushd  build\nmake install DESTDIR=$RPM_BUILD_ROOT\ncat PYTHON_INSTALLED | sed -e \"s|$RPM_BUILD_ROOT||g\" > PYTHON_INSTALLED_FILES\npopd\n\n# configuration stuff\nrm -rf $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/*\n\n# ceph posix unversioned so\nrm -f $RPM_BUILD_ROOT%{_libdir}/libXrdCephPosix.so\n\n# var paths\nmkdir -p $RPM_BUILD_ROOT%{_var}/log/xrootd\nmkdir -p $RPM_BUILD_ROOT%{_var}/run/xrootd\nmkdir -p $RPM_BUILD_ROOT%{_var}/spool/xrootd\n\n# init stuff\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/xrootd\n\n%if %{use_systemd}\n\nmkdir -p $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/xrootd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/xrdhttp.socket   $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/cmsd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/frm_xfrd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/frm_purged@.service $RPM_BUILD_ROOT%{_unitdir}\n\n# tmpfiles.d\nmkdir -p $RPM_BUILD_ROOT%{_tmpfilesdir}\ninstall -m 0644 packaging/rhel/xrootd.tmpfiles $RPM_BUILD_ROOT%{_tmpfilesdir}/%{name}.conf\n\n%else\n\nmkdir -p $RPM_BUILD_ROOT%{_initrddir}\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig\ninstall -m 644 packaging/rhel/xrootd.sysconfig $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/xrootd\n\ninstall -m 755 packaging/rhel/cmsd.init $RPM_BUILD_ROOT%{_initrddir}/cmsd\ninstall -m 755 packaging/rhel/frm_purged.init $RPM_BUILD_ROOT%{_initrddir}/frm_purged\ninstall -m 755 packaging/rhel/frm_xfrd.init $RPM_BUILD_ROOT%{_initrddir}/frm_xfrd\ninstall -m 755 packaging/rhel/xrootd.init $RPM_BUILD_ROOT%{_initrddir}/xrootd\ninstall -m 755 packaging/rhel/xrootd.functions $RPM_BUILD_ROOT%{_initrddir}/xrootd.functions\n\n%endif\n\n# logrotate\nmkdir $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d\ninstall -p -m 644 packaging/common/xrootd.logrotate $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d/xrootd\n\ninstall -m 644 packaging/common/xrootd-clustered.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-clustered.cfg\ninstall -m 644 packaging/common/xrootd-standalone.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-standalone.cfg\ninstall -m 644 packaging/common/xrootd-filecache-clustered.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-filecache-clustered.cfg\ninstall -m 644 packaging/common/xrootd-filecache-standalone.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-filecache-standalone.cfg\n\n# client plug-in config\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.plugins.d\ninstall -m 644 packaging/common/client-plugin.conf.example $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.plugins.d/client-plugin.conf.example\n\n# client config\ninstall -m 644 packaging/common/client.conf $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.conf\n\n# documentation\nmkdir -p %{buildroot}%{_docdir}/%{name}-%{version}\ncp -pr doxydoc/html %{buildroot}%{_docdir}/%{name}-%{version}\n\n# selinux\nmkdir -p %{buildroot}%{_datadir}/selinux/packages/%{name}\ninstall -m 644 -p packaging/common/xrootd.pp \\\n    %{buildroot}%{_datadir}/selinux/packages/%{name}/%{name}.pp\n\n%clean\nrm -rf $RPM_BUILD_ROOT\n\n#-------------------------------------------------------------------------------\n# RPM scripts\n#-------------------------------------------------------------------------------\n%post   libs -p /sbin/ldconfig\n%postun libs -p /sbin/ldconfig\n\n%post   client-libs -p /sbin/ldconfig\n%postun client-libs -p /sbin/ldconfig\n\n%post   server-libs -p /sbin/ldconfig\n%postun server-libs -p /sbin/ldconfig\n\n%pre server\n\ngetent group xrootd >/dev/null || groupadd -r xrootd\ngetent passwd xrootd >/dev/null || \\\n       useradd -r -g xrootd -c \"XRootD runtime user\" \\\n       -s /sbin/nologin -d %{_localstatedir}/spool/xrootd xrootd\nexit 0\n\n%if %{use_systemd}\n\n%post server\nif [ $1 -eq 1 ] ; then\n    /usr/bin/systemctl daemon-reload >/dev/null 2>&1 || :\nfi\n\n%preun server\nif [ $1 -eq 0 ] ; then\n    for DAEMON in xrootd cmsd frm_purged frm xfrd; do\n        for INSTANCE in `/usr/bin/systemctl | grep $DAEMON@ | awk '{print $1;}'`; do\n            /usr/bin/systemctl --no-reload disable $INSTANCE > /dev/null 2>&1 || :\n            /usr/bin/systemctl stop $INSTANCE > /dev/null 2>&1 || :\n        done\n    done\nfi\n\n%postun server\nif [ $1 -ge 1 ] ; then\n    /usr/bin/systemctl daemon-reload >/dev/null 2>&1 || :\n    for DAEMON in xrootd cmsd frm_purged frm xfrd; do\n        for INSTANCE in `/usr/bin/systemctl | grep $DAEMON@ | awk '{print $1;}'`; do\n            /usr/bin/systemctl try-restart $INSTANCE >/dev/null 2>&1 || :\n        done\n    done\nfi\n\n%else\n\n%post server\nif [ $1 -eq 1 ]; then\n    /sbin/chkconfig --add xrootd\n    /sbin/chkconfig --add cmsd\n    /sbin/chkconfig --add frm_purged\n    /sbin/chkconfig --add frm_xfrd\nfi\n\n%preun server\nif [ $1 -eq 0 ]; then\n    /sbin/service xrootd stop >/dev/null 2>&1 || :\n    /sbin/service cmsd stop >/dev/null 2>&1 || :\n    /sbin/service frm_purged stop >/dev/null 2>&1 || :\n    /sbin/service frm_xfrd stop >/dev/null 2>&1 || :\n    /sbin/chkconfig --del xrootd\n    /sbin/chkconfig --del cmsd\n    /sbin/chkconfig --del frm_purged\n    /sbin/chkconfig --del frm_xfrd\nfi\n\n%postun server\nif [ $1 -ge 1 ]; then\n    /sbin/service xrootd condrestart >/dev/null 2>&1 || :\n    /sbin/service cmsd condrestart >/dev/null 2>&1 || :\n    /sbin/service frm_purged condrestart >/dev/null 2>&1 || :\n    /sbin/service frm_xfrd condrestart >/dev/null 2>&1 || :\nfi\n\n%endif\n\n#-------------------------------------------------------------------------------\n# Add a new user and group if necessary\n#-------------------------------------------------------------------------------\n%pre fuse\ngetent group xrootd >/dev/null || groupadd -r xrootd\ngetent passwd xrootd >/dev/null || \\\n       useradd -r -g xrootd -c \"XRootD runtime user\" \\\n       -s /sbin/nologin -d %{_localstatedir}/spool/xrootd xrootd\nexit 0\n\n#-------------------------------------------------------------------------------\n# Selinux\n#-------------------------------------------------------------------------------\n%post selinux\n/usr/sbin/semodule -i %{_datadir}/selinux/packages/%{name}/%{name}.pp >/dev/null 2>&1 || :\n\n%postun selinux\nif [ $1 -eq 0 ] ; then\n    /usr/sbin/semodule -r %{name} >/dev/null 2>&1 || :\nfi\n\n#-------------------------------------------------------------------------------\n# Files\n#-------------------------------------------------------------------------------\n%files\n# empty\n\n%files server\n%defattr(-,root,root,-)\n%{_bindir}/cconfig\n%{_bindir}/cmsd\n%{_bindir}/cns_ssi\n%{_bindir}/frm_admin\n%{_bindir}/frm_purged\n%{_bindir}/frm_xfragent\n%{_bindir}/frm_xfrd\n%{_bindir}/mpxstats\n%{_bindir}/wait41\n%{_bindir}/XrdCnsd\n%{_bindir}/xrdpwdadmin\n%{_bindir}/xrdsssadmin\n%{_bindir}/xrdmapc\n%{_bindir}/xrootd\n%{_bindir}/xrdpfc_print\n%{_bindir}/xrdacctest\n%{_mandir}/man8/cmsd.8*\n%{_mandir}/man8/cns_ssi.8*\n%{_mandir}/man8/frm_admin.8*\n%{_mandir}/man8/frm_purged.8*\n%{_mandir}/man8/frm_xfragent.8*\n%{_mandir}/man8/frm_xfrd.8*\n%{_mandir}/man8/mpxstats.8*\n%{_mandir}/man8/XrdCnsd.8*\n%{_mandir}/man8/xrdpwdadmin.8*\n%{_mandir}/man8/xrdsssadmin.8*\n%{_mandir}/man8/xrootd.8*\n%{_mandir}/man8/xrdpfc_print.8*\n%{_datadir}/xrootd\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-clustered.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-standalone.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-filecache-clustered.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-filecache-standalone.cfg\n%attr(-,xrootd,xrootd) %dir %{_var}/log/xrootd\n%attr(-,xrootd,xrootd) %dir %{_var}/run/xrootd\n%attr(-,xrootd,xrootd) %dir %{_var}/spool/xrootd\n%config(noreplace) %{_sysconfdir}/logrotate.d/xrootd\n\n%if %{use_systemd}\n%{_unitdir}/*\n%{_tmpfilesdir}/%{name}.conf\n%else\n%config(noreplace) %{_sysconfdir}/sysconfig/xrootd\n%{_initrddir}/*\n%endif\n\n%files libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdAppUtils.so.1*\n%{_libdir}/libXrdClProxyPlugin-4.so\n%{_libdir}/libXrdCks*-4.so\n%{_libdir}/libXrdCrypto.so.1*\n%{_libdir}/libXrdCryptoLite.so.1*\n%{_libdir}/libXrdCryptossl-4.so\n%{_libdir}/libXrdSec*-4.so\n%{_libdir}/libXrdUtils.so.*\n%{_libdir}/libXrdXml.so.*\n\n%files devel\n%defattr(-,root,root,-)\n%dir %{_includedir}/xrootd\n%{_bindir}/xrootd-config\n%{_includedir}/xrootd/XProtocol\n%{_includedir}/xrootd/Xrd\n%{_includedir}/xrootd/XrdCks\n%{_includedir}/xrootd/XrdNet\n%{_includedir}/xrootd/XrdOuc\n%{_includedir}/xrootd/XrdSec\n%{_includedir}/xrootd/XrdSys\n%{_includedir}/xrootd/XrdVersion.hh\n%{_libdir}/libXrdAppUtils.so\n%{_libdir}/libXrdCrypto.so\n%{_libdir}/libXrdCryptoLite.so\n%{_libdir}/libXrdUtils.so\n%{_libdir}/libXrdXml.so\n%{_includedir}/xrootd/XrdXml/XrdXmlReader.hh\n\n%files client-libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdCl.so.2*\n%{_libdir}/libXrdClient.so.2*\n%{_libdir}/libXrdFfs.so.2*\n%{_libdir}/libXrdPosix.so.2*\n%{_libdir}/libXrdPosixPreload.so.1*\n%{_sysconfdir}/xrootd/client.plugins.d/client-plugin.conf.example\n%config(noreplace) %{_sysconfdir}/xrootd/client.conf\n# This lib may be used for LD_PRELOAD so the .so link needs to be included\n%{_libdir}/libXrdPosixPreload.so\n\n%files client-devel\n%defattr(-,root,root,-)\n%{_bindir}/xrdgsitest\n%{_includedir}/xrootd/XrdCl\n%{_includedir}/xrootd/XrdClient\n%{_includedir}/xrootd/XrdPosix\n%{_libdir}/libXrdCl.so\n%{_libdir}/libXrdClient.so\n%{_libdir}/libXrdFfs.so\n%{_libdir}/libXrdPosix.so\n%{_mandir}/man1/xrdgsitest.1*\n\n%files server-libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdBwm-4.so\n%{_libdir}/libXrdPss-4.so\n%{_libdir}/libXrdXrootd-4.so\n%{_libdir}/libXrdFileCache-4.so\n%{_libdir}/libXrdBlacklistDecision-4.so\n%{_libdir}/libXrdHttp-4.so\n%{_libdir}/libXrdOssSIgpfsT-4.so\n%{_libdir}/libXrdServer.so.*\n%{_libdir}/libXrdThrottle-4.so\n\n%files server-devel\n%defattr(-,root,root,-)\n%{_includedir}/xrootd/XrdAcc\n%{_includedir}/xrootd/XrdCms\n%{_includedir}/xrootd/XrdFileCache\n%{_includedir}/xrootd/XrdOss\n%{_includedir}/xrootd/XrdSfs\n%{_includedir}/xrootd/XrdXrootd\n%{_includedir}/xrootd/XrdHttp\n%{_libdir}/libXrdServer.so\n\n%files private-devel\n%defattr(-,root,root,-)\n%{_includedir}/xrootd/private\n\n%files client\n%defattr(-,root,root,-)\n%{_bindir}/xprep\n%{_bindir}/xrd\n%{_bindir}/xrdadler32\n%{_bindir}/xrdcopy\n%{_bindir}/xrdcp\n%{_bindir}/xrdcp-old\n%{_bindir}/xrdfs\n%{_bindir}/xrdgsiproxy\n%{_bindir}/xrdstagetool\n%{_mandir}/man1/xprep.1*\n%{_mandir}/man1/xrd.1*\n%{_mandir}/man1/xrdadler32.1*\n%{_mandir}/man1/xrdcopy.1*\n%{_mandir}/man1/xrdcp.1*\n%{_mandir}/man1/xrdcp-old.1*\n%{_mandir}/man1/xrdfs.1*\n%{_mandir}/man1/xrdgsiproxy.1*\n%{_mandir}/man1/xrdstagetool.1*\n\n%files fuse\n%defattr(-,root,root,-)\n%{_bindir}/xrootdfs\n%{_mandir}/man1/xrootdfs.1*\n%dir %{_sysconfdir}/xrootd\n\n%files python -f xrootd/build/PYTHON_INSTALLED_FILES\n%defattr(-,root,root,-)\n\n%files doc\n%defattr(-,root,root,-)\n%doc %{_docdir}/%{name}-%{version}\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%files ceph\n%defattr(-,root,root,-)\n%{_libdir}/libXrdCeph-4.so\n%{_libdir}/libXrdCephXattr-4.so\n%{_libdir}/libXrdCephPosix.so*\n%endif\n\n%if %{?_with_tests:1}%{!?_with_tests:0}\n%files tests\n%defattr(-,root,root,-)\n%{_bindir}/text-runner\n%{_libdir}/libXrdClTests.so\n%{_libdir}/libXrdClTestsHelper.so\n%{_libdir}/libXrdClTestMonitor*.so\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%{_libdir}/libXrdCephTests*.so\n%endif\n%endif\n\n%files selinux\n%defattr(-,root,root)\n%{_datadir}/selinux/packages/%{name}/%{name}.pp\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n%files client-compat\n%defattr(-,root,root,-)\n%{_libdir}/libXrdAppUtils.so.0*\n%{_libdir}/libXrdCksCalczcrc32.so*\n%{_libdir}/libXrdClient.so.1*\n%{_libdir}/libXrdCl.so.1*\n%{_libdir}/libXrdCryptoLite.so.0*\n%{_libdir}/libXrdCrypto.so.0*\n%{_libdir}/libXrdCryptossl.so*\n%{_libdir}/libXrdFfs.so.1*\n%{_libdir}/libXrdPosixPreload.so.0*\n%{_libdir}/libXrdPosix.so.1*\n%{_libdir}/libXrdSecgsiAuthzVO.so*\n%{_libdir}/libXrdSecgsiGMAPDN.so*\n%{_libdir}/libXrdSecgsiGMAPLDAP.so*\n%{_libdir}/libXrdSecgsi.so*\n%{_libdir}/libXrdSeckrb5.so*\n%{_libdir}/libXrdSecpwd.so*\n%{_libdir}/libXrdSec.so*\n%{_libdir}/libXrdSecsss.so*\n%{_libdir}/libXrdSecunix.so*\n%{_libdir}/libXrdUtils.so.1*\n\n%files server-compat\n%defattr(-,root,root,-)\n%{_bindir}/cmsd-3\n%{_bindir}/frm_purged-3\n%{_bindir}/frm_xfrd-3\n%{_bindir}/xrootd-3\n%{_libdir}/libXrdBwm.so*\n%{_libdir}/libXrdMain.so.1*\n%{_libdir}/libXrdOfs.so.1*\n%{_libdir}/libXrdPss.so*\n%{_libdir}/libXrdServer.so.1*\n%{_libdir}/libXrdXrootd.so*\n%endif\n\n#-------------------------------------------------------------------------------\n# Changelog\n#-------------------------------------------------------------------------------\n%changelog\n* Tue Dec 13 2016 Gerardo Ganis <gerardo.ganis@cern.ch>\n- Add xrdgsitest to xrootd-client-devel\n\n* Mon Mar 16 2015 Lukasz Janyst <ljanyst@cern.ch>\n- create the python package\n\n* Wed Mar 11 2015 Lukasz Janyst <ljanyst@cern.ch>\n- create the xrootd-ceph package\n\n* Thu Oct 30 2014 Lukasz Janyst <ljanyst@cern.ch>\n- update for 4.1 and introduce 3.3.6 compat packages\n\n* Thu Aug 28 2014 Lukasz Janyst <ljanyst@cern.ch>\n- add support for systemd\n\n* Wed Aug 27 2014 Lukasz Janyst <ljanyst@cern.ch>\n- use generic selinux policy build mechanisms\n\n* Tue Apr 01 2014 Lukasz Janyst <ljanyst@cern.ch>\n- correct the license field (LGPLv3+)\n- rename to xrootd4\n- add 'conflicts' statements\n- remove 'provides' and 'obsoletes'\n\n* Mon Mar 31 2014 Lukasz Janyst <ljanyst@cern.ch>\n- Add selinux policy\n\n* Fri Jan 24 2014 Lukasz Janyst <ljanyst@cern.ch>\n- Import XrdHttp\n\n* Fri Jun 7 2013 Lukasz Janyst <ljanyst@cern.ch>\n- adopt the EPEL RPM layout by Mattias Ellert\n\n* Tue Apr 2 2013 Lukasz Janyst <ljanyst@cern.ch>\n- remove perl\n\n* Thu Nov 1 2012 Justin Salmon <jsalmon@cern.ch>\n- add tests package\n\n* Fri Oct 21 2011 Lukasz Janyst <ljanyst@cern.ch> 3.1.0-1\n- bump the version to 3.1.0\n\n* Mon Apr 11 2011 Lukasz Janyst <ljanyst@cern.ch> 3.0.3-1\n- the first RPM release - version 3.0.3\n- the detailed release notes are available at:\n  http://xrootd.org/download/ReleaseNotes.html\n", "//------------------------------------------------------------------------------\n// Copyright (c) 2011-2012 by European Organization for Nuclear Research (CERN)\n// Author: Lukasz Janyst <ljanyst@cern.ch>\n//------------------------------------------------------------------------------\n// XRootD is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// XRootD is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with XRootD.  If not, see <http://www.gnu.org/licenses/>.\n//------------------------------------------------------------------------------\n\n#include \"XrdCl/XrdClDefaultEnv.hh\"\n#include \"XrdCl/XrdClConstants.hh\"\n#include \"XrdCl/XrdClPostMaster.hh\"\n#include \"XrdCl/XrdClLog.hh\"\n#include \"XrdCl/XrdClForkHandler.hh\"\n#include \"XrdCl/XrdClFileTimer.hh\"\n#include \"XrdCl/XrdClUtils.hh\"\n#include \"XrdCl/XrdClMonitor.hh\"\n#include \"XrdCl/XrdClCheckSumManager.hh\"\n#include \"XrdCl/XrdClTransportManager.hh\"\n#include \"XrdCl/XrdClPlugInManager.hh\"\n#include \"XrdCl/XrdClOptimizers.hh\"\n#include \"XrdOuc/XrdOucPreload.hh\"\n#include \"XrdSys/XrdSysAtomics.hh\"\n#include \"XrdSys/XrdSysUtils.hh\"\n#include \"XrdSys/XrdSysPwd.hh\"\n#include \"XrdVersion.hh\"\n\n#include <libgen.h>\n#include <cstring>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n#include <string>\n#include <pthread.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nXrdVERSIONINFO( XrdCl, client );\n\n//------------------------------------------------------------------------------\n// Forking functions\n//------------------------------------------------------------------------------\nextern \"C\"\n{\n  //----------------------------------------------------------------------------\n  // Prepare for the forking\n  //----------------------------------------------------------------------------\n  static void prepare()\n  {\n    using namespace XrdCl;\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n\n    log->Debug( UtilityMsg, \"In the prepare fork handler for process %d\",\n                getpid() );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n      forkHandler->Prepare();\n    env->WriteLock();\n  }\n\n  //----------------------------------------------------------------------------\n  // Parent handler\n  //----------------------------------------------------------------------------\n  static void parent()\n  {\n    using namespace XrdCl;\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n    env->UnLock();\n\n    pid_t pid = getpid();\n    log->Debug( UtilityMsg, \"In the parent fork handler for process %d\", pid );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n    {\n      log->SetPid(pid);\n      forkHandler->Parent();\n    }\n  }\n\n  //----------------------------------------------------------------------------\n  // Child handler\n  //----------------------------------------------------------------------------\n  static void child()\n  {\n    using namespace XrdCl;\n    DefaultEnv::ReInitializeLogging();\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n    env->ReInitializeLock();\n\n    pid_t pid = getpid();\n    log->Debug( UtilityMsg, \"In the child fork handler for process %d\", pid );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n    {\n      log->SetPid(pid);\n      forkHandler->Child();\n    }\n  }\n}\n\nnamespace\n{\n  //----------------------------------------------------------------------------\n  // Translate a string into a topic mask\n  //----------------------------------------------------------------------------\n  struct MaskTranslator\n  {\n    //--------------------------------------------------------------------------\n    // Initialize the translation array\n    //--------------------------------------------------------------------------\n    MaskTranslator()\n    {\n      masks[\"AppMsg\"]             = XrdCl::AppMsg;\n      masks[\"UtilityMsg\"]         = XrdCl::UtilityMsg;\n      masks[\"FileMsg\"]            = XrdCl::FileMsg;\n      masks[\"PollerMsg\"]          = XrdCl::PollerMsg;\n      masks[\"PostMasterMsg\"]      = XrdCl::PostMasterMsg;\n      masks[\"XRootDTransportMsg\"] = XrdCl::XRootDTransportMsg;\n      masks[\"TaskMgrMsg\"]         = XrdCl::TaskMgrMsg;\n      masks[\"XRootDMsg\"]          = XrdCl::XRootDMsg;\n      masks[\"FileSystemMsg\"]      = XrdCl::FileSystemMsg;\n      masks[\"AsyncSockMsg\"]       = XrdCl::AsyncSockMsg;\n      masks[\"JobMgrMsg\"]          = XrdCl::JobMgrMsg;\n      masks[\"PlugInMgrMsg\"]       = XrdCl::PlugInMgrMsg;\n    }\n\n    //--------------------------------------------------------------------------\n    // Translate the mask\n    //--------------------------------------------------------------------------\n    uint64_t translateMask( const std::string mask )\n    {\n      if( mask == \"\" )\n        return 0xffffffffffffffffULL;\n\n      std::vector<std::string>           topics;\n      std::vector<std::string>::iterator it;\n      XrdCl::Utils::splitString( topics, mask, \"|\" );\n\n      uint64_t resultMask = 0;\n      std::map<std::string, uint64_t>::iterator maskIt;\n      for( it = topics.begin(); it != topics.end(); ++it )\n      {\n        //----------------------------------------------------------------------\n        // Check for resetting pseudo topics\n        //----------------------------------------------------------------------\n        if( *it == \"All\" )\n        {\n          resultMask = 0xffffffffffffffffULL;\n          continue;\n        }\n\n        if( *it == \"None\" )\n        {\n          resultMask = 0ULL;\n          continue;\n        }\n\n        //----------------------------------------------------------------------\n        // Check whether given topic should be disabled or enabled\n        //----------------------------------------------------------------------\n        std::string topic = *it;\n        bool disable      = false;\n        if( !topic.empty() && topic[0] == '^' )\n        {\n          disable = true;\n          topic   = topic.substr( 1, topic.length()-1 );\n        }\n\n        maskIt = masks.find( topic );\n        if( maskIt == masks.end() )\n          continue;\n\n        if( disable )\n          resultMask &= (0xffffffffffffffffULL ^ maskIt->second);\n        else\n          resultMask |= maskIt->second;\n      }\n\n      return resultMask;\n    }\n\n    std::map<std::string, uint64_t> masks;\n  };\n\n  //----------------------------------------------------------------------------\n  // Helper for handling environment variables\n  //----------------------------------------------------------------------------\n  template<typename Item>\n  struct EnvVarHolder\n  {\n    EnvVarHolder( const std::string &name_, const Item &def_ ):\n      name( name_ ), def( def_ ) {}\n    std::string name;\n    Item        def;\n  };\n}\n\n#define REGISTER_VAR_INT( array, name,  def ) \\\n    array.push_back( EnvVarHolder<int>( name, def ) )\n\n#define REGISTER_VAR_STR( array, name,  def ) \\\n    array.push_back( EnvVarHolder<std::string>( name, def ) )\n\nnamespace XrdCl\n{\n  //----------------------------------------------------------------------------\n  // Statics\n  //----------------------------------------------------------------------------\n  XrdSysMutex        DefaultEnv::sInitMutex;\n  Env               *DefaultEnv::sEnv                = 0;\n  PostMaster        *DefaultEnv::sPostMaster         = 0;\n  Log               *DefaultEnv::sLog                = 0;\n  ForkHandler       *DefaultEnv::sForkHandler        = 0;\n  FileTimer         *DefaultEnv::sFileTimer          = 0;\n  Monitor           *DefaultEnv::sMonitor            = 0;\n  XrdOucPinLoader   *DefaultEnv::sMonitorLibHandle   = 0;\n  bool               DefaultEnv::sMonitorInitialized = false;\n  CheckSumManager   *DefaultEnv::sCheckSumManager    = 0;\n  TransportManager  *DefaultEnv::sTransportManager   = 0;\n  PlugInManager     *DefaultEnv::sPlugInManager      = 0;\n\n  //----------------------------------------------------------------------------\n  // Constructor\n  //----------------------------------------------------------------------------\n  DefaultEnv::DefaultEnv()\n  {\n    Log *log = GetLog();\n\n    //--------------------------------------------------------------------------\n    // Declate the variables to be processed\n    //--------------------------------------------------------------------------\n    std::vector<EnvVarHolder<int> >         varsInt;\n    std::vector<EnvVarHolder<std::string> > varsStr;\n    REGISTER_VAR_INT( varsInt, \"ConnectionWindow\",     DefaultConnectionWindow     );\n    REGISTER_VAR_INT( varsInt, \"ConnectionRetry\",      DefaultConnectionRetry      );\n    REGISTER_VAR_INT( varsInt, \"RequestTimeout\",       DefaultRequestTimeout       );\n    REGISTER_VAR_INT( varsInt, \"StreamTimeout\",        DefaultStreamTimeout        );\n    REGISTER_VAR_INT( varsInt, \"SubStreamsPerChannel\", DefaultSubStreamsPerChannel );\n    REGISTER_VAR_INT( varsInt, \"TimeoutResolution\",    DefaultTimeoutResolution    );\n    REGISTER_VAR_INT( varsInt, \"StreamErrorWindow\",    DefaultStreamErrorWindow    );\n    REGISTER_VAR_INT( varsInt, \"RunForkHandler\",       DefaultRunForkHandler       );\n    REGISTER_VAR_INT( varsInt, \"RedirectLimit\",        DefaultRedirectLimit        );\n    REGISTER_VAR_INT( varsInt, \"WorkerThreads\",        DefaultWorkerThreads        );\n    REGISTER_VAR_INT( varsInt, \"CPChunkSize\",          DefaultCPChunkSize          );\n    REGISTER_VAR_INT( varsInt, \"CPParallelChunks\",     DefaultCPParallelChunks     );\n    REGISTER_VAR_INT( varsInt, \"DataServerTTL\",        DefaultDataServerTTL        );\n    REGISTER_VAR_INT( varsInt, \"LoadBalancerTTL\",      DefaultLoadBalancerTTL      );\n    REGISTER_VAR_INT( varsInt, \"CPInitTimeout\",        DefaultCPInitTimeout        );\n    REGISTER_VAR_INT( varsInt, \"CPTPCTimeout\",         DefaultCPTPCTimeout         );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAlive\",         DefaultTCPKeepAlive         );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAliveTime\",     DefaultTCPKeepAliveTime     );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAliveInterval\", DefaultTCPKeepAliveInterval );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepProbes\",        DefaultTCPKeepAliveProbes   );\n    REGISTER_VAR_INT( varsInt, \"MultiProtocol\",        DefaultMultiProtocol        );\n    REGISTER_VAR_INT( varsInt, \"ParallelEvtLoop\",      DefaultParallelEvtLoop      );\n    REGISTER_VAR_INT( varsInt, \"MetalinkProcessing\",   DefaultMetalinkProcessing   );\n    REGISTER_VAR_INT( varsInt, \"LocalMetalinkFile\",    DefaultLocalMetalinkFile    );\n    REGISTER_VAR_INT( varsInt, \"XCpBlockSize\",         DefaultXCpBlockSize    );\n\n    REGISTER_VAR_STR( varsStr, \"PollerPreference\",     DefaultPollerPreference     );\n    REGISTER_VAR_STR( varsStr, \"ClientMonitor\",        DefaultClientMonitor        );\n    REGISTER_VAR_STR( varsStr, \"ClientMonitorParam\",   DefaultClientMonitorParam   );\n    REGISTER_VAR_STR( varsStr, \"NetworkStack\",         DefaultNetworkStack         );\n    REGISTER_VAR_STR( varsStr, \"PlugIn\",               DefaultPlugIn               );\n    REGISTER_VAR_STR( varsStr, \"PlugInConfDir\",        DefaultPlugInConfDir        );\n    REGISTER_VAR_STR( varsStr, \"ReadRecovery\",         DefaultReadRecovery         );\n    REGISTER_VAR_STR( varsStr, \"WriteRecovery\",        DefaultWriteRecovery        );\n    REGISTER_VAR_STR( varsStr, \"GlfnRedirector\",       DefaultGlfnRedirector       );\n\n    //--------------------------------------------------------------------------\n    // Process the configuration files\n    //--------------------------------------------------------------------------\n    std::map<std::string, std::string> config, userConfig;\n    Status st = Utils::ProcessConfig( config, \"/etc/xrootd/client.conf\" );\n\n    if( !st.IsOK() )\n      log->Warning( UtilityMsg, \"Unable to process global config file: %s\",\n                    st.ToString().c_str() );\n\n    XrdSysPwd pwdHandler;\n    passwd *pwd = pwdHandler.Get( getuid() );\n    if( pwd )\n    {\n      std::string userConfigFile = pwd->pw_dir;\n      userConfigFile += \"/.xrootd/client.conf\";\n\n      st = Utils::ProcessConfig( userConfig, userConfigFile );\n\n      if( !st.IsOK() )\n        log->Debug( UtilityMsg, \"Unable to process user config file: %s\",\n                    st.ToString().c_str() );\n    }\n    else\n      log->Debug( UtilityMsg, \"Unable to find user home directory.\" );\n\n    std::map<std::string, std::string>::iterator it;\n\n    for( it = config.begin(); it != config.end(); ++it )\n      log->Dump( UtilityMsg, \"[Global config] \\\"%s\\\" = \\\"%s\\\"\",\n                 it->first.c_str(), it->second.c_str() );\n\n    for( it = userConfig.begin(); it != userConfig.end(); ++it )\n    {\n      config[it->first] = it->second;\n      log->Dump( UtilityMsg, \"[User config] \\\"%s\\\" = \\\"%s\\\"\",\n                 it->first.c_str(), it->second.c_str() );\n    }\n\n    for( it = config.begin(); it != config.end(); ++it )\n      log->Debug( UtilityMsg, \"[Effective config] \\\"%s\\\" = \\\"%s\\\"\",\n                  it->first.c_str(), it->second.c_str() );\n\n    //--------------------------------------------------------------------------\n    // Monitoring settings\n    //--------------------------------------------------------------------------\n    char *tmp = strdup( XrdSysUtils::ExecName() );\n    char *appName = basename( tmp );\n    PutString( \"AppName\", appName );\n    free( tmp );\n    ImportString( \"AppName\", \"XRD_APPNAME\" );\n    PutString( \"MonInfo\", \"\" );\n    ImportString( \"MonInfo\", \"XRD_MONINFO\" );\n\n    //--------------------------------------------------------------------------\n    // Process ints\n    //--------------------------------------------------------------------------\n    for( size_t i = 0; i < varsInt.size(); ++i )\n    {\n      PutInt( varsInt[i].name, varsInt[i].def );\n\n      it = config.find( varsInt[i].name );\n      if( it != config.end() )\n      {\n        char *endPtr = 0;\n        int value = (int)strtol( it->second.c_str(), &endPtr, 0 );\n        if( *endPtr )\n          log->Warning( UtilityMsg, \"Unable to set %s to %s: not a proper \"\n                        \"integer\", varsInt[i].name.c_str(),\n                        it->second.c_str() );\n        else\n          PutInt( varsInt[i].name, value );\n      }\n\n      std::string name = \"XRD_\" + varsInt[i].name;\n      std::transform( name.begin(), name.end(), name.begin(), ::toupper );\n      ImportInt( varsInt[i].name, name );\n    }\n\n    //--------------------------------------------------------------------------\n    // Process strings\n    //--------------------------------------------------------------------------\n    for( size_t i = 0; i < varsStr.size(); ++i )\n    {\n      PutString( varsStr[i].name, varsStr[i].def );\n\n      it = config.find( varsStr[i].name );\n      if( it != config.end() )\n        PutString( varsStr[i].name, it->second );\n\n      std::string name = \"XRD_\" + varsStr[i].name;\n      std::transform( name.begin(), name.end(), name.begin(), ::toupper );\n      ImportString( varsStr[i].name, name );\n    }\n\n    //--------------------------------------------------------------------------\n    // Register fork handlers\n    //--------------------------------------------------------------------------\n    pthread_atfork( prepare, parent, child );\n  }\n\n  //----------------------------------------------------------------------------\n  // Get default client environment\n  //----------------------------------------------------------------------------\n  Env *DefaultEnv::GetEnv()\n  {\n    return sEnv;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get default post master\n  //----------------------------------------------------------------------------\n  PostMaster *DefaultEnv::GetPostMaster()\n  {\n    PostMaster* postMaster = AtomicGet(sPostMaster);\n\n    if( unlikely( !postMaster ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      postMaster = AtomicGet(sPostMaster);\n\n      if( postMaster )\n        return postMaster;\n\n      postMaster = new PostMaster();\n\n      if( !postMaster->Initialize() )\n      {\n        delete postMaster;\n        postMaster = 0;\n        return 0;\n      }\n\n      if( !postMaster->Start() )\n      {\n        postMaster->Finalize();\n        delete postMaster;\n        postMaster = 0;\n        return 0;\n      }\n\n      sForkHandler->RegisterPostMaster( postMaster );\n      postMaster->GetTaskManager()->RegisterTask( sFileTimer, time(0), false );\n      AtomicCAS(sPostMaster, sPostMaster, postMaster);\n    }\n\n    return postMaster;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get log\n  //----------------------------------------------------------------------------\n  Log *DefaultEnv::GetLog()\n  {\n    return sLog;\n  }\n\n  //----------------------------------------------------------------------------\n  // Set log level\n  //----------------------------------------------------------------------------\n  void DefaultEnv::SetLogLevel( const std::string &level )\n  {\n    Log *log = GetLog();\n    log->SetLevel( level );\n  }\n\n  //----------------------------------------------------------------------------\n  // Set log file\n  //----------------------------------------------------------------------------\n  bool DefaultEnv::SetLogFile( const std::string &filepath )\n  {\n    Log *log = GetLog();\n    LogOutFile *out = new LogOutFile();\n\n    if( out->Open( filepath ) )\n    {\n      log->SetOutput( out );\n      return true;\n    }\n\n    delete out;\n    return false;\n  }\n\n  //----------------------------------------------------------------------------\n  //! Set log mask.\n  //------------------------------------------------------------------------\n  void DefaultEnv::SetLogMask( const std::string &level,\n                               const std::string &mask )\n  {\n    Log *log = GetLog();\n    MaskTranslator translator;\n    uint64_t topicMask = translator.translateMask( mask );\n\n    if( level == \"All\" )\n    {\n      log->SetMask( Log::ErrorMsg,   topicMask );\n      log->SetMask( Log::WarningMsg, topicMask );\n      log->SetMask( Log::InfoMsg,    topicMask );\n      log->SetMask( Log::DebugMsg,   topicMask );\n      log->SetMask( Log::DumpMsg,    topicMask );\n      return;\n    }\n\n    log->SetMask( level, topicMask );\n  }\n\n  //----------------------------------------------------------------------------\n  // Get fork handler\n  //----------------------------------------------------------------------------\n  ForkHandler *DefaultEnv::GetForkHandler()\n  {\n    return sForkHandler;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get fork handler\n  //----------------------------------------------------------------------------\n  FileTimer *DefaultEnv::GetFileTimer()\n  {\n    return sFileTimer;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get the monitor object\n  //----------------------------------------------------------------------------\n  Monitor *DefaultEnv::GetMonitor()\n  {\n    if( unlikely( !sMonitorInitialized ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sMonitorInitialized )\n      {\n        //----------------------------------------------------------------------\n        // Check the environment settings\n        //----------------------------------------------------------------------\n        Env *env = GetEnv();\n        Log *log = GetLog();\n        sMonitorInitialized = true;\n        std::string monitorLib = DefaultClientMonitor;\n        env->GetString( \"ClientMonitor\", monitorLib );\n        if( monitorLib.empty() )\n        {\n          log->Debug( UtilityMsg, \"Monitor library name not set. No \"\n                      \"monitoring\" );\n          return 0;\n        }\n\n        std::string monitorParam = DefaultClientMonitorParam;\n        env->GetString( \"ClientMonitorParam\", monitorParam );\n\n        log->Debug( UtilityMsg, \"Initializing monitoring, lib: %s, param: %s\",\n                    monitorLib.c_str(), monitorParam.c_str() );\n\n        //----------------------------------------------------------------------\n        // Loading the plugin\n        //----------------------------------------------------------------------\n        char *errBuffer = new char[4000];\n        sMonitorLibHandle = new XrdOucPinLoader(\n                                 errBuffer, 4000, &XrdVERSIONINFOVAR( XrdCl ),\n                                 \"monitor\", monitorLib.c_str() );\n\n        typedef XrdCl::Monitor *(*MonLoader)(const char *, const char *);\n        MonLoader loader;\n        loader = (MonLoader)sMonitorLibHandle->Resolve( \"XrdClGetMonitor\", -1 );\n        if( !loader )\n        {\n          log->Error( UtilityMsg, \"Unable to initialize user monitoring: %s\",\n                      errBuffer );\n          delete [] errBuffer;\n          sMonitorLibHandle->Unload();\n          delete sMonitorLibHandle; sMonitorLibHandle = 0;\n          return 0;\n        }\n\n        //----------------------------------------------------------------------\n        // Instantiating the monitor object\n        //----------------------------------------------------------------------\n        const char *param = monitorParam.empty() ? 0 : monitorParam.c_str();\n        sMonitor = (*loader)( XrdSysUtils::ExecName(), param );\n\n        if( !sMonitor )\n        {\n          log->Error( UtilityMsg, \"Unable to initialize user monitoring: %s\",\n                      errBuffer );\n          delete [] errBuffer;\n          sMonitorLibHandle->Unload();\n          delete sMonitorLibHandle; sMonitorLibHandle = 0;\n          return 0;\n        }\n        log->Debug( UtilityMsg, \"Successfully initialized monitoring from: %s\",\n                    monitorLib.c_str() );\n        delete [] errBuffer;\n      }\n    }\n    return sMonitor;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get checksum manager\n  //----------------------------------------------------------------------------\n  CheckSumManager *DefaultEnv::GetCheckSumManager()\n  {\n    if( unlikely( !sCheckSumManager ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sCheckSumManager )\n        sCheckSumManager = new CheckSumManager();\n    }\n    return sCheckSumManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get transport manager\n  //----------------------------------------------------------------------------\n  TransportManager *DefaultEnv::GetTransportManager()\n  {\n    if( unlikely( !sTransportManager ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sTransportManager )\n        sTransportManager = new TransportManager();\n    }\n    return sTransportManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get plug-in manager\n  //----------------------------------------------------------------------------\n  PlugInManager *DefaultEnv::GetPlugInManager()\n  {\n    return sPlugInManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Retrieve the plug-in factory for the given URL\n  //----------------------------------------------------------------------------\n  PlugInFactory *DefaultEnv::GetPlugInFactory( const std::string url )\n  {\n    return  sPlugInManager->GetFactory( url );\n  }\n\n  //----------------------------------------------------------------------------\n  // Initialize the environment\n  //----------------------------------------------------------------------------\n  void DefaultEnv::Initialize()\n  {\n    sLog           = new Log();\n    SetUpLog();\n\n    sEnv           = new DefaultEnv();\n    sForkHandler   = new ForkHandler();\n    sFileTimer     = new FileTimer();\n    sPlugInManager = new PlugInManager();\n\n    sPlugInManager->ProcessEnvironmentSettings();\n    sForkHandler->RegisterFileTimer( sFileTimer );\n\n    //--------------------------------------------------------------------------\n    // MacOSX library loading is completely moronic. We cannot dlopen a library\n    // from a thread other than a main thread, so we-pre dlopen all the\n    // libraries that we may potentially want.\n    //--------------------------------------------------------------------------\n#ifdef __APPLE__\n    char *errBuff = new char[1024];\n\n    const char *libs[] =\n    {\n      \"libXrdSeckrb5.so\",\n      \"libXrdSecgsi.so\",\n      \"libXrdSecgsiAuthzVO.so\",\n      \"libXrdSecgsiGMAPDN.so\",\n      \"libXrdSecgsiGMAPLDAP.so\",\n      \"libXrdSecpwd.so\",\n      \"libXrdSecsss.so\",\n      \"libXrdSecunix.so\",\n      0\n    };\n\n    for( int i = 0; libs[i]; ++i )\n    {\n      sLog->Debug( UtilityMsg, \"Attempting to pre-load: %s\", libs[i] );\n      bool ok = XrdOucPreload( libs[i], errBuff, 1024 );\n      if( !ok )\n        sLog->Error( UtilityMsg, \"Unable to pre-load %s: %s\", libs[i], errBuff );\n    }\n    delete [] errBuff;\n#endif\n  }\n\n  //----------------------------------------------------------------------------\n  // Finalize the environment\n  //----------------------------------------------------------------------------\n  void DefaultEnv::Finalize()\n  {\n    if( sPostMaster )\n    {\n      sPostMaster->Stop();\n      sPostMaster->Finalize();\n      delete sPostMaster;\n      sPostMaster = 0;\n    }\n\n    delete sTransportManager;\n    sTransportManager = 0;\n\n    delete sCheckSumManager;\n    sCheckSumManager = 0;\n\n    delete sMonitor;\n    sMonitor = 0;\n\n    if( sMonitorLibHandle )\n      sMonitorLibHandle->Unload();\n\n    delete sMonitorLibHandle;\n    sMonitorLibHandle = 0;\n\n    delete sForkHandler;\n    sForkHandler = 0;\n\n    delete sFileTimer;\n    sFileTimer = 0;\n\n    delete sPlugInManager;\n    sPlugInManager = 0;\n\n    delete sEnv;\n    sEnv = 0;\n\n    delete sLog;\n    sLog = 0;\n  }\n\n  //----------------------------------------------------------------------------\n  // Re-initialize the logging\n  //----------------------------------------------------------------------------\n  void DefaultEnv::ReInitializeLogging()\n  {\n    delete sLog;\n    sLog = new Log();\n    SetUpLog();\n  }\n\n  //----------------------------------------------------------------------------\n  // Set up the log\n  //----------------------------------------------------------------------------\n  void DefaultEnv::SetUpLog()\n  {\n    Log *log = GetLog();\n\n    //--------------------------------------------------------------------------\n    // Check if the log level has been defined in the environment\n    //--------------------------------------------------------------------------\n    char *level = getenv( \"XRD_LOGLEVEL\" );\n    if( level )\n      log->SetLevel( level );\n\n    //--------------------------------------------------------------------------\n    // Check if we need to log to a file\n    //--------------------------------------------------------------------------\n    char *file = getenv( \"XRD_LOGFILE\" );\n    if( file )\n    {\n      LogOutFile *out = new LogOutFile();\n      if( out->Open( file ) )\n        log->SetOutput( out );\n      else\n        delete out;\n    }\n\n    //--------------------------------------------------------------------------\n    // Log mask defaults\n    //--------------------------------------------------------------------------\n    MaskTranslator translator;\n    log->SetMask( Log::DumpMsg, translator.translateMask( \"All|^PollerMsg\" ) );\n\n    //--------------------------------------------------------------------------\n    // Initialize the topic mask\n    //--------------------------------------------------------------------------\n    char *logMask = getenv( \"XRD_LOGMASK\" );\n    if( logMask )\n    {\n      uint64_t mask = translator.translateMask( logMask );\n      log->SetMask( Log::ErrorMsg,   mask );\n      log->SetMask( Log::WarningMsg, mask );\n      log->SetMask( Log::InfoMsg,    mask );\n      log->SetMask( Log::DebugMsg,   mask );\n      log->SetMask( Log::DumpMsg,    mask );\n    }\n\n    logMask = getenv( \"XRD_LOGMASK_ERROR\" );\n    if( logMask ) log->SetMask( Log::ErrorMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_WARNING\" );\n    if( logMask ) log->SetMask( Log::WarningMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_INFO\" );\n    if( logMask ) log->SetMask( Log::InfoMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_DEBUG\" );\n    if( logMask ) log->SetMask( Log::DebugMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_DUMP\" );\n    if( logMask ) log->SetMask( Log::DumpMsg, translator.translateMask( logMask ) );\n\n    //--------------------------------------------------------------------------\n    // Set up the topic strings\n    //--------------------------------------------------------------------------\n    log->SetTopicName( AppMsg,             \"App\" );\n    log->SetTopicName( UtilityMsg,         \"Utility\" );\n    log->SetTopicName( FileMsg,            \"File\" );\n    log->SetTopicName( PollerMsg,          \"Poller\" );\n    log->SetTopicName( PostMasterMsg,      \"PostMaster\" );\n    log->SetTopicName( XRootDTransportMsg, \"XRootDTransport\" );\n    log->SetTopicName( TaskMgrMsg,         \"TaskMgr\" );\n    log->SetTopicName( XRootDMsg,          \"XRootD\" );\n    log->SetTopicName( FileSystemMsg,      \"FileSystem\" );\n    log->SetTopicName( AsyncSockMsg,       \"AsyncSock\" );\n    log->SetTopicName( JobMgrMsg,          \"JobMgr\" );\n    log->SetTopicName( PlugInMgrMsg,       \"PlugInMgr\" );\n  }\n}\n\n\n//------------------------------------------------------------------------------\n// Static initialization and finalization\n//------------------------------------------------------------------------------\nint EnvInitializer::counter = 0;\n\n//------------------------------------------------------------------------------\n// The constructor will be invoked in every translation unit\n// that includes XrdClDefaultEnv.hh, but the DefaultEnv will\n// be initialized only in the first one\n//------------------------------------------------------------------------------\nEnvInitializer::EnvInitializer ()\n{\n  if( counter++ == 0 ) XrdCl::DefaultEnv::Initialize();\n}\n\n//------------------------------------------------------------------------------\n// The destructor will be invoked in every translation unit\n// that includes XrdClDefaultEnv.hh, but the DefaultEnv will\n// be finalized only once in the last one\n//------------------------------------------------------------------------------\nEnvInitializer::~EnvInitializer ()\n{\n  if( --counter == 0 ) XrdCl::DefaultEnv::Finalize();\n}\n\n", "\ninclude( XRootDCommon )\n\n#-------------------------------------------------------------------------------\n# Shared library version\n#-------------------------------------------------------------------------------\nset( LIB_XRD_SEC_GSI          XrdSecgsi-${PLUGIN_VERSION} )\nset( LIB_XRD_SEC_GSI_GMAPLDAP XrdSecgsiGMAPLDAP-${PLUGIN_VERSION} )\nset( LIB_XRD_SEC_GSI_GMAPDN   XrdSecgsiGMAPDN-${PLUGIN_VERSION} )\nset( LIB_XRD_SEC_GSI_AUTHZVO  XrdSecgsiAUTHZVO-${PLUGIN_VERSION} )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsi library\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI}\n  MODULE\n  XrdSecgsi/XrdSecProtocolgsi.cc      XrdSecgsi/XrdSecProtocolgsi.hh\n                                      XrdSecgsi/XrdSecgsiTrace.hh )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI}\n  XrdCrypto\n  XrdUtils\n  pthread )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsiGMAPLDAP module\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI_GMAPLDAP}\n  MODULE\n  XrdSecgsi/XrdSecgsiGMAPFunLDAP.cc )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI_GMAPLDAP}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsiAuthzVO module\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  MODULE\n  XrdSecgsi/XrdSecgsiAuthzFunVO.cc )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  XrdUtils )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsiGMAPDN module\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  MODULE\n  XrdSecgsi/XrdSecgsiGMAPFunDN.cc )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  XrdUtils )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# xrdgsiproxy\n#-------------------------------------------------------------------------------\nadd_executable(\n  xrdgsiproxy\n  XrdSecgsi/XrdSecgsiProxy.cc )\n\ntarget_link_libraries(\n  xrdgsiproxy\n  XrdCrypto\n  XrdUtils\n  ${OPENSSL_CRYPTO_LIBRARY} )\n\n#-------------------------------------------------------------------------------\n# xrdgsitest\n#-------------------------------------------------------------------------------\nadd_executable(\n  xrdgsitest\n  XrdSecgsi/XrdSecgsitest.cc )\n\ntarget_link_libraries(\n  xrdgsitest\n  XrdCrypto\n  XrdUtils\n  ${OPENSSL_CRYPTO_LIBRARY} )\n\n#-------------------------------------------------------------------------------\n# Install\n#-------------------------------------------------------------------------------\ninstall(\n  TARGETS\n  ${LIB_XRD_SEC_GSI}\n  ${LIB_XRD_SEC_GSI_GMAPLDAP}\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  xrdgsiproxy\n  xrdgsitest\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} )\n\ninstall(\n  FILES\n  ${PROJECT_SOURCE_DIR}/docs/man/xrdgsiproxy.1\n  ${PROJECT_SOURCE_DIR}/docs/man/xrdgsitest.1\n  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 )\n", "/******************************************************************************/\n/*                                                                            */\n/*             X r d S e c g s i G M A P F u n L D A P . c c                  */\n/*                                                                            */\n/* (c) 2008, G. Ganis / CERN                                                  */\n/*                                                                            */\n/* This file is part of the XRootD software suite.                            */\n/*                                                                            */\n/* XRootD is free software: you can redistribute it and/or modify it under    */\n/* the terms of the GNU Lesser General Public License as published by the     */\n/* Free Software Foundation, either version 3 of the License, or (at your     */\n/* option) any later version.                                                 */\n/*                                                                            */\n/* XRootD is distributed in the hope that it will be useful, but WITHOUT      */\n/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      */\n/* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public       */\n/* License for more details.                                                  */\n/*                                                                            */\n/* You should have received a copy of the GNU Lesser General Public License   */\n/* along with XRootD in a file called COPYING.LESSER (LGPL license) and file  */\n/* COPYING (GPL license).  If not, see <http://www.gnu.org/licenses/>.        */\n/*                                                                            */\n/* The copyright holder's institutional names and contributor's names may not */\n/* be used to endorse or promote products derived from this software without  */\n/* specific prior written permission of the institution or contributor.       */\n/*                                                                            */\n/******************************************************************************/\n\n#include \"XrdVersion.hh\"\n\n/******************************************************************************/\n/*                   V e r s i o n   I n f o r m a t i o n                    */\n/******************************************************************************/\n  \nXrdVERSIONINFO(XrdSecgsiGMAPFun,secgsigmap);\n\n/* ************************************************************************** */\n/*                                                                            */\n/* GMAP function implementation querying a LDAP database                      */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\nstatic char *ldapsrv    = 0;\nstatic char *searchbase = 0;\nstatic char *attribute  = 0;\n\nint XrdSecgsiGMAPInit(const char *cfg);\n\n//\n// Main function\n//\nextern \"C\"\n{\nchar *XrdSecgsiGMAPFun(const char *dn, int now)\n{\n   // Implementation of XrdSecgsiGMAPFun querying an LDAP server\n   // for the distinguished name 'dn'\n\n   // Init the relevant fields (only once)\n   if (now <= 0) {\n      if (XrdSecgsiGMAPInit(dn) != 0)\n         return (char *)-1;\n      return (char *)0;\n   }\n\n   // Output\n   char *name = 0;\n\n   // Prepare the command to be executed\n   char cmd[4096];\n   sprintf(cmd, \"ldapsearch -H %s -x -b \\\"%s\\\" \\\"subject=%s\\\" %s\",\n                 ldapsrv, searchbase, dn, attribute);\n\n   // Execute the command into a pipe\n   FILE *fp = popen(cmd, \"r\");\n   if (fp) {\n      char line[1024], att[40], uname[256];\n      sprintf(att, \"%s: \", attribute);\n      while (fgets(line, sizeof(line), fp)) {\n         // Look for a line starting with \"uid: \"\n         if (!strncmp(line, att, strlen(att))) {\n            sscanf(line, \"%s %s\", att, uname);\n            name = new char[strlen(uname)+1];\n            strcpy(name, uname);\n            break;\n         }\n      }\n      pclose(fp);\n   }\n\n   // Done\n   return name;\n}}\n\n//\n// Init the relevant parameters from a dedicated config file\n//\nint XrdSecgsiGMAPInit(const char *cfg)\n{\n   // Initialize the relevant parameters from the file 'cfg' or\n   // from the one defined by XRDGSIGMAPLDAPCF.\n   // Return 0 on success, -1 otherwise\n\n   if (!cfg) cfg = getenv(\"XRDGSIGMAPLDAPCF\");\n   if (!cfg || strlen(cfg) <= 0) {\n      fprintf(stderr, \" +++ XrdSecgsiGMAPInit (LDAP): error: undefined config file path +++\\n\");\n      return -1;\n   }\n\n   FILE *fcf = fopen(cfg, \"r\");\n   if (fcf) {\n      char l[4096], k[20], val[4096];\n      while (fgets(l, sizeof(l), fcf)) {\n         int len = strlen(l);\n         if (len < 2) continue;\n         if (l[0] == '#') continue;\n         if (l[len-1] == '\\n') l[len-1] = '\\0';\n         sscanf(l, \"%s %s\", k, val);\n         if (!strcmp(k, \"srv:\")) {\n            ldapsrv = strdup(val);\n         } else if (!strcmp(k, \"base:\")) {\n            searchbase = strdup(val);\n         } else if (!strcmp(k, \"attr:\")) {\n            attribute = strdup(val);\n         } else {\n            fprintf(stderr, \"XrdSecgsiGMAPInit (LDAP): warning: unknown key: '%s' - ignoring\\n\", k);\n         }\n      }\n      fclose(fcf);\n   } else {\n      fprintf(stderr, \" +++ XrdSecgsiGMAPInit (LDAP): error: config file '%s'\"\n                      \" could not be open (errno: %d) +++\\n\", cfg, errno);\n      return -1;\n   }\n   // Done\n   return 0;\n}\n", "#ifndef __XRDVERSIONPLUGIN_HH__\n#define __XRDVERSIONPLUGIN_HH__\n/******************************************************************************/\n/*                                                                            */\n/*                   X r d V e r s i o n P l u g i n . h h                    */\n/*                                                                            */\n/* (c) 2012 by the Board of Trustees of the Leland Stanford, Jr., University  */\n/*                            All Rights Reserved                             */\n/*   Produced by Andrew Hanushevsky for Stanford University under contract    */\n/*              DE-AC02-76-SFO0515 with the Department of Energy              */\n/*                                                                            */\n/* This file is part of the XRootD software suite.                            */\n/*                                                                            */\n/* XRootD is free software: you can redistribute it and/or modify it under    */\n/* the terms of the GNU Lesser General Public License as published by the     */\n/* Free Software Foundation, either version 3 of the License, or (at your     */\n/* option) any later version.                                                 */\n/*                                                                            */\n/* XRootD is distributed in the hope that it will be useful, but WITHOUT      */\n/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      */\n/* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public       */\n/* License for more details.                                                  */\n/*                                                                            */\n/* You should have received a copy of the GNU Lesser General Public License   */\n/* along with XRootD in a file called COPYING.LESSER (LGPL license) and file  */\n/* COPYING (GPL license).  If not, see <http://www.gnu.org/licenses/>.        */\n/*                                                                            */\n/* The copyright holder's institutional names and contributor's names may not */\n/* be used to endorse or promote products derived from this software without  */\n/* specific prior written permission of the institution or contributor.       */\n/******************************************************************************/\n  \n/* The following section defines the versioning rules for plugins. The rules are\n   applied by 'XrdSysPlugin.cc'. The rules defined by the XrdVERSIONPLUGIN_RULE\n   macro (see below) are used to initialize a data the following data structure.\n*/\n   struct XrdVersionPlugin\n         {const char *pName;    //!< -> plugin object creator function name\n          char        vPfxLen;  //!< Generic rule prefix length\n          char        vSfxLen;  //!< Generic rule suffix length for preceeding\n          int         vProcess; //!< version: <0 skip, =0 optional, >0 required\n          short       vMajLow;  //!< Lowest compatible major version number\n          short       vMinLow;  //!< Lowest compatible minor (>99 don't check).\n         };\n\n/* The rules are defined here because they apply to every class that uses a\n   plugin.  This file *must* be updated whenever a plugin interface materially\n   changes; including any material changes (layout or size) to any classes\n   passed as arguments to the plugin.\n*/\n\n// Macros used to define version checking rule values (see explanation below).\n//\n#define XrdVERSIONPLUGIN_DoNotChk -1\n#define XrdVERSIONPLUGIN_Optional  0\n#define XrdVERSIONPLUGIN_Required  1\n\n#define XrdVERSIONPLUGIN_Rule(procMode, majorVer, minorVer, piSymbol)\\\n           {#piSymbol, 0, 0, XrdVERSIONPLUGIN_##procMode, majorVer, minorVer},\n\n/* Each rule must be defined by the XrdVERSIONPLUGIN_Rule macro which takes four\n   arguments, as follows:\n\n   procMode: Version procsessing mode:\n             DoNotChk -> Skip version check as it's already been done by a\n                         previous getPlugin() call for a library symbol.\n             Optional -> Version check is optional, do it if version information\n                         present but warn if it is missing.\n             Required -> Version check required; plugin must define a version\n                         number and issue error message if it is missing.\n\n   majorVer: The required major version number. It is checked as follows:\n             <   0: major version numbers must be identical.\n             >=  0: is the lowest valid major version number allowed.\n\n   minorVer: The required minor version number, It is check as follows:\n             <   0: minor version numbers must be identical.\n             >=  0: the lowest valid minor version for the major number allowed.\n             >  99: Do not check the minor version number, it's immaterial.\n\n   piSymbol: The plugin's object creator's unquoted function name. When this\n             symbol is looked-up, the defined version rule is applied.\n\n   Note: a plugin may not have a major.minor version number greater than the\n         program's major.minor version number unless either one is unreleased.\n         Unreleased versions can use any version. However, a message is issued.\n*/\n#define XrdVERSIONPLUGINRULES \\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdAccAuthorizeObject         )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdBwmPolicyObject            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCksCalcInit                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCksInit                    )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCmsGetClient               )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCryptosslFactoryObject     )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdFileCacheGetDecision       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdgetProtocol                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdgetProtocolPort            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdHttpGetSecXtractor         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSysLogPInit                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOssGetStorageSystem        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOssStatInfoInit            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOucGetCache                )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdOucgetName2Name            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecGetProtocol             )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecgetService              )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiAuthzFun             )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiAuthzInit            )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiAuthzKey             )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiGMAPFun              )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiVOMSFun              )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiVOMSInit             )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolgsiInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolgsiObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolkrb5Init        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolkrb5Object      )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolpwdInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolpwdObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolsssInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolsssObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolunixInit        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolunixObject      )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSfsGetFileSystem           )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSfsGetFileSystem2          )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSysGetXAttrObject          )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdClGetMonitor               )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdClGetPlugIn                )\\\n                             { 0, 0, 0,  0,  0, 0}\n\n#define XrdVERSIONPLUGIN_Maxim(procMode, majorVer, minorVer, piPfx, piSfx)\\\n           {#piPfx #piSfx, static_cast<char>(strlen(#piPfx)),\\\n                           static_cast<char>(strlen(#piSfx)),\\\n            XrdVERSIONPLUGIN_##procMode, majorVer, minorVer},\n\n/* Each generic rule must be defined by the XrdVERSIONPLUGIN_Maxim macro which\n   takes five arguments. The first three are exactly the same as defined for\n   XrdVERSIONPLUGIN_Rule. The last two define a pefix/suffix match for the\n   symbol being looked up, as follows:\n\n   piPfx:    The leading  characters of the plugin's object creator's unquoted\n             function name. When this symbol is looked-up, the defined version\n             rule is applied if the suffix, if any, also matches.\n\n   piSfx:    The trailing characters of the plugin's object creator's unquoted\n             function name. When this symbol is looked-up, the defined version\n             rule is applied if the prefix, if any, also matches.\n\n   Note: An attempt is made to match the symbol using specific rules defined\n         by XRDVERSIONPLUGIN_Rule before using any generic rules. If a match\n         is found the same processing as for specific rules is applied.\n*/\n#define XrdVERSIONPLUGINMAXIMS\\\n        XrdVERSIONPLUGIN_Maxim(DoNotChk,  4,  0, XrdSecProtocol, Init         )\\\n        XrdVERSIONPLUGIN_Maxim(Required,  4,  0, XrdSecProtocol, Object       )\\\n        XrdVERSIONPLUGIN_Maxim(Optional,  4,  0, XrdCrypto,      FactoryObject)\\\n                             { 0, 0, 0,  0,  0, 0}\n\n/* The following defines the list of plugins that are included in the base\n   code and are to be strictly name versioned upon loading (i.e. fallback\n   to an unversioned name is not allowed). This is enforced by XrdOucVerName.\n*/\n#define XrdVERSIONPLUGINSTRICT       \\\n        {\"libXrdBwm.so\",             \\\n         \"libXrdCksCalczcrc32.so\",   \\\n         \"libXrdCryptossl.so\",       \\\n         \"libXrdFileCache.so\",       \\\n         \"libXrdHttp.so\",            \\\n         \"libXrdOssSIgpfsT.so\",      \\\n         \"libXrdPss.so\",             \\\n         \"libXrdSec.so\",             \\\n         \"libXrdSecgsi.so\",          \\\n         \"libXrdSecgsiAUTHZVO.so\",   \\\n         \"libXrdSecgsiGMAPDLAP.so\",  \\\n         \"libXrdSecgsiGMAPLDAP.so\",  \\\n         \"libXrdSeckrb5.so\",         \\\n         \"libXrdSecpwd.so\",          \\\n         \"libXrdSecsss.so\",          \\\n         \"libXrdSecunix.so\",         \\\n         \"libXrdXrootd.so\",          \\\n         0}\n#endif\n"], "fixing_code": ["#-------------------------------------------------------------------------------\n# Helper macros\n#-------------------------------------------------------------------------------\n%if %{?rhel:1}%{!?rhel:0}\n    %if %{rhel} >= 7\n        %define use_systemd 1\n    %else\n        %define use_systemd 0\n    %endif\n%else\n    %if %{?fedora}%{!?fedora:0} >= 19\n        %define use_systemd 1\n    %else\n        %define use_systemd 0\n    %endif\n%endif\n\n%if %{?fedora}%{!?fedora:0} >= 22\n    %define use_libc_semaphore 1\n%else\n    %define use_libc_semaphore 0\n%endif\n\n%if %{?_with_ceph11:1}%{!?_with_ceph11:0}\n    %define _with_ceph 1\n%endif\n\n# Remove default rpm python bytecompiling scripts\n%global __os_install_post \\\n    %(echo '%{__os_install_post}' | \\\n      sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g \\\n              s!/usr/lib[^[:space:]]*/brp-python-hardlink[[:space:]].*$!!g')\n\n#-------------------------------------------------------------------------------\n# Package definitions\n#-------------------------------------------------------------------------------\nName:      xrootd\nEpoch:     1\nVersion:   __VERSION__\nRelease:   __RELEASE__%{?dist}%{?_with_cpp11:.cpp11}%{?_with_clang:.clang}\nSummary:   Extended ROOT file server\nGroup:     System Environment/Daemons\nLicense:   LGPLv3+\nURL:       http://xrootd.org/\n\n# git clone http://xrootd.org/repo/xrootd.git xrootd\n# cd xrootd\n# git-archive master | gzip -9 > ~/rpmbuild/SOURCES/xrootd.tgz\nSource0:   xrootd.tar.gz\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\nSource1:   xrootd-3.3.6.tar.gz\n%endif\n\nBuildRoot: %{_tmppath}/%{name}-root\n\nBuildRequires: cmake\nBuildRequires: krb5-devel\nBuildRequires: readline-devel\nBuildRequires: fuse-devel\nBuildRequires: libxml2-devel\nBuildRequires: krb5-devel\nBuildRequires: zlib-devel\nBuildRequires: ncurses-devel\nBuildRequires: python-devel\nBuildRequires: openssl-devel\n\nBuildRequires: selinux-policy-devel\n\n%if %{?_with_tests:1}%{!?_with_tests:0}\nBuildRequires: cppunit-devel\n%endif\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n    %if %{?_with_ceph11:1}%{!?_with_ceph11:0}\nBuildRequires: librados-devel >= 11.0\nBuildRequires: libradosstriper-devel >= 11.0\n    %else\nBuildRequires: ceph-devel >= 0.87\n    %endif\n%endif\n\nBuildRequires:\tdoxygen\nBuildRequires:\tgraphviz\n%if %{?rhel}%{!?rhel:0} == 5\nBuildRequires:\tgraphviz-gd\n%endif\n\n%if %{?_with_clang:1}%{!?_with_clang:0}\nBuildRequires: clang\n%endif\n\nRequires:\t%{name}-server%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-selinux = %{epoch}:%{version}-%{release}\n\n%if %{use_systemd}\nBuildRequires:    systemd\nBuildRequires:    systemd-devel\nRequires(pre):\t\tsystemd\nRequires(post):\t\tsystemd\nRequires(preun):\tsystemd\nRequires(postun):\tsystemd\n%else\nRequires(pre):\t\tshadow-utils\nRequires(pre):\t\tchkconfig\nRequires(post):\t\tchkconfig\nRequires(preun):\tchkconfig\nRequires(preun):\tinitscripts\nRequires(postun):\tinitscripts\n%endif\n\n%description\nThe Extended root file server consists of a file server called xrootd\nand a cluster management server called cmsd.\n\nThe xrootd server was developed for the root analysis framework to\nserve root files. However, the server is agnostic to file types and\nprovides POSIX-like access to any type of file.\n\nThe cmsd server is the next generation version of the olbd server,\noriginally developed to cluster and load balance Objectivity/DB AMS\ndatabase servers. It provides enhanced capability along with lower\nlatency and increased throughput.\n\n#-------------------------------------------------------------------------------\n# libs\n#-------------------------------------------------------------------------------\n%package libs\nSummary:\tLibraries used by xrootd servers and clients\nGroup:\t\tSystem Environment/Libraries\n\n%description libs\nThis package contains libraries used by the xrootd servers and clients.\n\n#-------------------------------------------------------------------------------\n# devel\n#------------------------------------------------------------------------------\n%package devel\nSummary:\tDevelopment files for xrootd\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description devel\nThis package contains header files and development libraries for xrootd\ndevelopment.\n\n#-------------------------------------------------------------------------------\n# client-libs\n#-------------------------------------------------------------------------------\n%package client-libs\nSummary:\tLibraries used by xrootd clients\nGroup:\t\tSystem Environment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n%if %{use_libc_semaphore}\nRequires:       glibc >= 2.21\n%endif\n\n%description client-libs\nThis package contains libraries used by xrootd clients.\n\n#-------------------------------------------------------------------------------\n# client-devel\n#-------------------------------------------------------------------------------\n%package client-devel\nSummary:\tDevelopment files for xrootd clients\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description client-devel\nThis package contains header files and development libraries for xrootd\nclient development.\n\n#-------------------------------------------------------------------------------\n# server-libs\n#-------------------------------------------------------------------------------\n%package server-libs\nSummary:\tLibraries used by xrootd servers\nGroup:\t\tSystem Environment/Libraries\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-libs\nThis package contains libraries used by xrootd servers.\n\n#-------------------------------------------------------------------------------\n# server-devel\n#-------------------------------------------------------------------------------\n%package server-devel\nSummary:\tDevelopment files for xrootd servers\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-devel%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-server-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-devel\nThis package contains header files and development libraries for xrootd\nserver development.\n\n#-------------------------------------------------------------------------------\n# private devel\n#-------------------------------------------------------------------------------\n%package private-devel\nSummary:\tLegacy xrootd headers\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-libs = %{epoch}:%{version}-%{release}\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch:\tnoarch\n%endif\n\n%description private-devel\nThis package contains some private xrootd headers. The use of these\nheaders is strongly discouraged. Backward compatibility between\nversions is not guaranteed for these headers.\n\n#-------------------------------------------------------------------------------\n# client\n#-------------------------------------------------------------------------------\n%package client\nSummary:\tXrootd command line client tools\nGroup:\t\tApplications/Internet\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description client\nThis package contains the command line tools used to communicate with\nxrootd servers.\n\n#-------------------------------------------------------------------------------\n# server\n#-------------------------------------------------------------------------------\n%package server\nSummary:   Extended ROOT file server\nGroup:     System Environment/Daemons\nRequires:  %{name}-libs        = %{epoch}:%{version}-%{release}\nRequires:  %{name}-client-libs = %{epoch}:%{version}-%{release}\nRequires:  %{name}-server-libs = %{epoch}:%{version}-%{release}\nRequires:  expect\n\n%description server\nXRootD server binaries\n\n#-------------------------------------------------------------------------------\n# fuse\n#-------------------------------------------------------------------------------\n%package fuse\nSummary:\tXrootd FUSE tool\nGroup:\t\tApplications/Internet\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\nRequires:\tfuse\n\n%description fuse\nThis package contains the FUSE (file system in user space) xrootd mount\ntool.\n\n#-------------------------------------------------------------------------------\n# python\n#-------------------------------------------------------------------------------\n%package python\nSummary:\tPython bindings for XRootD\nGroup:\t\tDevelopment/Libraries\nRequires:\t%{name}-client-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description python\nPython bindings for XRootD\n\n#-------------------------------------------------------------------------------\n# doc\n#-------------------------------------------------------------------------------\n%package doc\nSummary:\tDeveloper documentation for the xrootd libraries\nGroup:\t\tDocumentation\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch:\tnoarch\n%endif\n\n%description doc\nThis package contains the API documentation of the xrootd libraries.\n\n#-------------------------------------------------------------------------------\n# selinux\n#-------------------------------------------------------------------------------\n%package selinux\nSummary:\t SELinux policy extensions for xrootd.\nGroup:\t\t System Environment/Base\n%if %{?fedora}%{!?fedora:0} >= 10 || %{?rhel}%{!?rhel:0} >= 6\nBuildArch: noarch\n%endif\nRequires(post):   policycoreutils\nRequires(postun): policycoreutils\nRequires:         selinux-policy\n\n%description selinux\nSELinux policy extensions for running xrootd while in enforcing mode.\n\n#-------------------------------------------------------------------------------\n# ceph\n#-------------------------------------------------------------------------------\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%package ceph\nSummary: Ceph back-end plug-in for XRootD\nGroup:   Development/Tools\nRequires: %{name}-server = %{epoch}:%{version}-%{release}\n%description ceph\nCeph back-end plug-in for XRootD.\n%endif\n\n#-------------------------------------------------------------------------------\n# tests\n#-------------------------------------------------------------------------------\n%if %{?_with_tests:1}%{!?_with_tests:0}\n%package tests\nSummary: CPPUnit tests\nGroup:   Development/Tools\nRequires: %{name}-client = %{epoch}:%{version}-%{release}\n%description tests\nThis package contains a set of CPPUnit tests for xrootd.\n%endif\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n#-------------------------------------------------------------------------------\n# client-compat\n#-------------------------------------------------------------------------------\n%package client-compat\nSummary:\tXRootD 3 compatibility client libraries\nGroup:\t\tSystem Environment/Libraries\n\n%description client-compat\nThis package contains compatibility libraries for xrootd 3 clients.\n\n#-------------------------------------------------------------------------------\n# server-compat\n#-------------------------------------------------------------------------------\n%package server-compat\nSummary:\tXRootD 3 compatibility server binaries\nGroup:\t\tSystem Environment/Daemons\nRequires:\t%{name}-libs%{?_isa} = %{epoch}:%{version}-%{release}\n\n%description server-compat\nThis package contains compatibility binaries for xrootd 3 servers.\n\n%endif\n\n#-------------------------------------------------------------------------------\n# Build instructions\n#-------------------------------------------------------------------------------\n%prep\n%setup -c -n xrootd\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n%setup -T -D -n %{name} -a 1\n%endif\n\n%build\ncd xrootd\n\n%if %{?_with_cpp11:1}%{!?_with_cpp11:0}\nexport CXXFLAGS=-std=c++11\n%endif\n\n%if %{?_with_clang:1}%{!?_with_clang:0}\nexport CC=clang\nexport CXX=clang++\n%endif\n\nmkdir build\npushd build\n%if %{?_with_tests:1}%{!?_with_tests:0}\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_TESTS=TRUE -DUSE_LIBC_SEMAPHORE=%{use_libc_semaphore} ../\n%else\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_LIBC_SEMAPHORE=%{use_libc_semaphore} ../\n%endif\n\nmake -i VERBOSE=1 %{?_smp_mflags}\npopd\n\npushd packaging/common\nmake -f /usr/share/selinux/devel/Makefile\npopd\n\ndoxygen Doxyfile\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\npushd ../xrootd-3.3.6\nmkdir build\npushd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_PERL=FALSE ../\nmake VERBOSE=1 %{?_smp_mflags}\npopd\npopd\n%endif\n\n#-------------------------------------------------------------------------------\n# Installation\n#-------------------------------------------------------------------------------\n%install\nrm -rf $RPM_BUILD_ROOT\n\n#-------------------------------------------------------------------------------\n# Install 3.3.6 compat\n#-------------------------------------------------------------------------------\n%if %{?_with_compat:1}%{!?_with_compat:0}\npushd xrootd-3.3.6/build\nmake install DESTDIR=$RPM_BUILD_ROOT\nrm -rf $RPM_BUILD_ROOT%{_includedir}\nrm -rf $RPM_BUILD_ROOT%{_datadir}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{cconfig,cns_ssi,frm_admin,frm_xfragent,mpxstats}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{wait41,xprep,xrd,xrdadler32,XrdCnsd,xrdcopy}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{xrdcp,xrdcp-old,xrdfs,xrdgsiproxy,xrdpwdadmin}\nrm -f $RPM_BUILD_ROOT%{_bindir}/{xrdsssadmin,xrdstagetool,xrootdfs}\nrm -f $RPM_BUILD_ROOT%{_libdir}/libXrdAppUtils.so\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdClient.so,libXrdCl.so,libXrdCryptoLite.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdCrypto.so,libXrdFfs.so,libXrdMain.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdOfs.so,libXrdPosixPreload.so,libXrdPosix.so}\nrm -f $RPM_BUILD_ROOT%{_libdir}/{libXrdServer.so,libXrdUtils.so}\n\nfor i in cmsd frm_purged frm_xfrd xrootd; do\n  mv $RPM_BUILD_ROOT%{_bindir}/$i $RPM_BUILD_ROOT%{_bindir}/${i}-3\ndone\npopd\n%endif\n\n#-------------------------------------------------------------------------------\n# Install 4.x.y\n#-------------------------------------------------------------------------------\npushd xrootd\npushd  build\nmake install DESTDIR=$RPM_BUILD_ROOT\ncat PYTHON_INSTALLED | sed -e \"s|$RPM_BUILD_ROOT||g\" > PYTHON_INSTALLED_FILES\npopd\n\n# configuration stuff\nrm -rf $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/*\n\n# ceph posix unversioned so\nrm -f $RPM_BUILD_ROOT%{_libdir}/libXrdCephPosix.so\n\n# var paths\nmkdir -p $RPM_BUILD_ROOT%{_var}/log/xrootd\nmkdir -p $RPM_BUILD_ROOT%{_var}/run/xrootd\nmkdir -p $RPM_BUILD_ROOT%{_var}/spool/xrootd\n\n# init stuff\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/xrootd\n\n%if %{use_systemd}\n\nmkdir -p $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/xrootd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/xrdhttp.socket   $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/cmsd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/frm_xfrd@.service $RPM_BUILD_ROOT%{_unitdir}\ninstall -m 644 packaging/common/frm_purged@.service $RPM_BUILD_ROOT%{_unitdir}\n\n# tmpfiles.d\nmkdir -p $RPM_BUILD_ROOT%{_tmpfilesdir}\ninstall -m 0644 packaging/rhel/xrootd.tmpfiles $RPM_BUILD_ROOT%{_tmpfilesdir}/%{name}.conf\n\n%else\n\nmkdir -p $RPM_BUILD_ROOT%{_initrddir}\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig\ninstall -m 644 packaging/rhel/xrootd.sysconfig $RPM_BUILD_ROOT%{_sysconfdir}/sysconfig/xrootd\n\ninstall -m 755 packaging/rhel/cmsd.init $RPM_BUILD_ROOT%{_initrddir}/cmsd\ninstall -m 755 packaging/rhel/frm_purged.init $RPM_BUILD_ROOT%{_initrddir}/frm_purged\ninstall -m 755 packaging/rhel/frm_xfrd.init $RPM_BUILD_ROOT%{_initrddir}/frm_xfrd\ninstall -m 755 packaging/rhel/xrootd.init $RPM_BUILD_ROOT%{_initrddir}/xrootd\ninstall -m 755 packaging/rhel/xrootd.functions $RPM_BUILD_ROOT%{_initrddir}/xrootd.functions\n\n%endif\n\n# logrotate\nmkdir $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d\ninstall -p -m 644 packaging/common/xrootd.logrotate $RPM_BUILD_ROOT%{_sysconfdir}/logrotate.d/xrootd\n\ninstall -m 644 packaging/common/xrootd-clustered.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-clustered.cfg\ninstall -m 644 packaging/common/xrootd-standalone.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-standalone.cfg\ninstall -m 644 packaging/common/xrootd-filecache-clustered.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-filecache-clustered.cfg\ninstall -m 644 packaging/common/xrootd-filecache-standalone.cfg $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/xrootd-filecache-standalone.cfg\n\n# client plug-in config\nmkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.plugins.d\ninstall -m 644 packaging/common/client-plugin.conf.example $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.plugins.d/client-plugin.conf.example\n\n# client config\ninstall -m 644 packaging/common/client.conf $RPM_BUILD_ROOT%{_sysconfdir}/xrootd/client.conf\n\n# documentation\nmkdir -p %{buildroot}%{_docdir}/%{name}-%{version}\ncp -pr doxydoc/html %{buildroot}%{_docdir}/%{name}-%{version}\n\n# selinux\nmkdir -p %{buildroot}%{_datadir}/selinux/packages/%{name}\ninstall -m 644 -p packaging/common/xrootd.pp \\\n    %{buildroot}%{_datadir}/selinux/packages/%{name}/%{name}.pp\n\n%clean\nrm -rf $RPM_BUILD_ROOT\n\n#-------------------------------------------------------------------------------\n# RPM scripts\n#-------------------------------------------------------------------------------\n%post   libs -p /sbin/ldconfig\n%postun libs -p /sbin/ldconfig\n\n%post   client-libs -p /sbin/ldconfig\n%postun client-libs -p /sbin/ldconfig\n\n%post   server-libs -p /sbin/ldconfig\n%postun server-libs -p /sbin/ldconfig\n\n%pre server\n\ngetent group xrootd >/dev/null || groupadd -r xrootd\ngetent passwd xrootd >/dev/null || \\\n       useradd -r -g xrootd -c \"XRootD runtime user\" \\\n       -s /sbin/nologin -d %{_localstatedir}/spool/xrootd xrootd\nexit 0\n\n%if %{use_systemd}\n\n%post server\nif [ $1 -eq 1 ] ; then\n    /usr/bin/systemctl daemon-reload >/dev/null 2>&1 || :\nfi\n\n%preun server\nif [ $1 -eq 0 ] ; then\n    for DAEMON in xrootd cmsd frm_purged frm xfrd; do\n        for INSTANCE in `/usr/bin/systemctl | grep $DAEMON@ | awk '{print $1;}'`; do\n            /usr/bin/systemctl --no-reload disable $INSTANCE > /dev/null 2>&1 || :\n            /usr/bin/systemctl stop $INSTANCE > /dev/null 2>&1 || :\n        done\n    done\nfi\n\n%postun server\nif [ $1 -ge 1 ] ; then\n    /usr/bin/systemctl daemon-reload >/dev/null 2>&1 || :\n    for DAEMON in xrootd cmsd frm_purged frm xfrd; do\n        for INSTANCE in `/usr/bin/systemctl | grep $DAEMON@ | awk '{print $1;}'`; do\n            /usr/bin/systemctl try-restart $INSTANCE >/dev/null 2>&1 || :\n        done\n    done\nfi\n\n%else\n\n%post server\nif [ $1 -eq 1 ]; then\n    /sbin/chkconfig --add xrootd\n    /sbin/chkconfig --add cmsd\n    /sbin/chkconfig --add frm_purged\n    /sbin/chkconfig --add frm_xfrd\nfi\n\n%preun server\nif [ $1 -eq 0 ]; then\n    /sbin/service xrootd stop >/dev/null 2>&1 || :\n    /sbin/service cmsd stop >/dev/null 2>&1 || :\n    /sbin/service frm_purged stop >/dev/null 2>&1 || :\n    /sbin/service frm_xfrd stop >/dev/null 2>&1 || :\n    /sbin/chkconfig --del xrootd\n    /sbin/chkconfig --del cmsd\n    /sbin/chkconfig --del frm_purged\n    /sbin/chkconfig --del frm_xfrd\nfi\n\n%postun server\nif [ $1 -ge 1 ]; then\n    /sbin/service xrootd condrestart >/dev/null 2>&1 || :\n    /sbin/service cmsd condrestart >/dev/null 2>&1 || :\n    /sbin/service frm_purged condrestart >/dev/null 2>&1 || :\n    /sbin/service frm_xfrd condrestart >/dev/null 2>&1 || :\nfi\n\n%endif\n\n#-------------------------------------------------------------------------------\n# Add a new user and group if necessary\n#-------------------------------------------------------------------------------\n%pre fuse\ngetent group xrootd >/dev/null || groupadd -r xrootd\ngetent passwd xrootd >/dev/null || \\\n       useradd -r -g xrootd -c \"XRootD runtime user\" \\\n       -s /sbin/nologin -d %{_localstatedir}/spool/xrootd xrootd\nexit 0\n\n#-------------------------------------------------------------------------------\n# Selinux\n#-------------------------------------------------------------------------------\n%post selinux\n/usr/sbin/semodule -i %{_datadir}/selinux/packages/%{name}/%{name}.pp >/dev/null 2>&1 || :\n\n%postun selinux\nif [ $1 -eq 0 ] ; then\n    /usr/sbin/semodule -r %{name} >/dev/null 2>&1 || :\nfi\n\n#-------------------------------------------------------------------------------\n# Files\n#-------------------------------------------------------------------------------\n%files\n# empty\n\n%files server\n%defattr(-,root,root,-)\n%{_bindir}/cconfig\n%{_bindir}/cmsd\n%{_bindir}/cns_ssi\n%{_bindir}/frm_admin\n%{_bindir}/frm_purged\n%{_bindir}/frm_xfragent\n%{_bindir}/frm_xfrd\n%{_bindir}/mpxstats\n%{_bindir}/wait41\n%{_bindir}/XrdCnsd\n%{_bindir}/xrdpwdadmin\n%{_bindir}/xrdsssadmin\n%{_bindir}/xrdmapc\n%{_bindir}/xrootd\n%{_bindir}/xrdpfc_print\n%{_bindir}/xrdacctest\n%{_mandir}/man8/cmsd.8*\n%{_mandir}/man8/cns_ssi.8*\n%{_mandir}/man8/frm_admin.8*\n%{_mandir}/man8/frm_purged.8*\n%{_mandir}/man8/frm_xfragent.8*\n%{_mandir}/man8/frm_xfrd.8*\n%{_mandir}/man8/mpxstats.8*\n%{_mandir}/man8/XrdCnsd.8*\n%{_mandir}/man8/xrdpwdadmin.8*\n%{_mandir}/man8/xrdsssadmin.8*\n%{_mandir}/man8/xrootd.8*\n%{_mandir}/man8/xrdpfc_print.8*\n%{_datadir}/xrootd\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-clustered.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-standalone.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-filecache-clustered.cfg\n%attr(-,xrootd,xrootd) %config(noreplace) %{_sysconfdir}/xrootd/xrootd-filecache-standalone.cfg\n%attr(-,xrootd,xrootd) %dir %{_var}/log/xrootd\n%attr(-,xrootd,xrootd) %dir %{_var}/run/xrootd\n%attr(-,xrootd,xrootd) %dir %{_var}/spool/xrootd\n%config(noreplace) %{_sysconfdir}/logrotate.d/xrootd\n\n%if %{use_systemd}\n%{_unitdir}/*\n%{_tmpfilesdir}/%{name}.conf\n%else\n%config(noreplace) %{_sysconfdir}/sysconfig/xrootd\n%{_initrddir}/*\n%endif\n\n%files libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdAppUtils.so.1*\n%{_libdir}/libXrdClProxyPlugin-4.so\n%{_libdir}/libXrdCks*-4.so\n%{_libdir}/libXrdCrypto.so.1*\n%{_libdir}/libXrdCryptoLite.so.1*\n%{_libdir}/libXrdCryptossl-4.so\n%{_libdir}/libXrdSec*-4.so\n%{_libdir}/libXrdUtils.so.*\n%{_libdir}/libXrdXml.so.*\n\n%files devel\n%defattr(-,root,root,-)\n%dir %{_includedir}/xrootd\n%{_bindir}/xrootd-config\n%{_includedir}/xrootd/XProtocol\n%{_includedir}/xrootd/Xrd\n%{_includedir}/xrootd/XrdCks\n%{_includedir}/xrootd/XrdNet\n%{_includedir}/xrootd/XrdOuc\n%{_includedir}/xrootd/XrdSec\n%{_includedir}/xrootd/XrdSys\n%{_includedir}/xrootd/XrdVersion.hh\n%{_libdir}/libXrdAppUtils.so\n%{_libdir}/libXrdCrypto.so\n%{_libdir}/libXrdCryptoLite.so\n%{_libdir}/libXrdUtils.so\n%{_libdir}/libXrdXml.so\n%{_includedir}/xrootd/XrdXml/XrdXmlReader.hh\n\n%files client-libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdCl.so.2*\n%{_libdir}/libXrdClient.so.2*\n%{_libdir}/libXrdFfs.so.2*\n%{_libdir}/libXrdPosix.so.2*\n%{_libdir}/libXrdPosixPreload.so.1*\n%{_sysconfdir}/xrootd/client.plugins.d/client-plugin.conf.example\n%config(noreplace) %{_sysconfdir}/xrootd/client.conf\n# This lib may be used for LD_PRELOAD so the .so link needs to be included\n%{_libdir}/libXrdPosixPreload.so\n\n%files client-devel\n%defattr(-,root,root,-)\n%{_bindir}/xrdgsitest\n%{_includedir}/xrootd/XrdCl\n%{_includedir}/xrootd/XrdClient\n%{_includedir}/xrootd/XrdPosix\n%{_libdir}/libXrdCl.so\n%{_libdir}/libXrdClient.so\n%{_libdir}/libXrdFfs.so\n%{_libdir}/libXrdPosix.so\n%{_mandir}/man1/xrdgsitest.1*\n\n%files server-libs\n%defattr(-,root,root,-)\n%{_libdir}/libXrdBwm-4.so\n%{_libdir}/libXrdPss-4.so\n%{_libdir}/libXrdXrootd-4.so\n%{_libdir}/libXrdFileCache-4.so\n%{_libdir}/libXrdBlacklistDecision-4.so\n%{_libdir}/libXrdHttp-4.so\n%{_libdir}/libXrdOssSIgpfsT-4.so\n%{_libdir}/libXrdServer.so.*\n%{_libdir}/libXrdThrottle-4.so\n\n%files server-devel\n%defattr(-,root,root,-)\n%{_includedir}/xrootd/XrdAcc\n%{_includedir}/xrootd/XrdCms\n%{_includedir}/xrootd/XrdFileCache\n%{_includedir}/xrootd/XrdOss\n%{_includedir}/xrootd/XrdSfs\n%{_includedir}/xrootd/XrdXrootd\n%{_includedir}/xrootd/XrdHttp\n%{_libdir}/libXrdServer.so\n\n%files private-devel\n%defattr(-,root,root,-)\n%{_includedir}/xrootd/private\n\n%files client\n%defattr(-,root,root,-)\n%{_bindir}/xprep\n%{_bindir}/xrd\n%{_bindir}/xrdadler32\n%{_bindir}/xrdcopy\n%{_bindir}/xrdcp\n%{_bindir}/xrdcp-old\n%{_bindir}/xrdfs\n%{_bindir}/xrdgsiproxy\n%{_bindir}/xrdstagetool\n%{_mandir}/man1/xprep.1*\n%{_mandir}/man1/xrd.1*\n%{_mandir}/man1/xrdadler32.1*\n%{_mandir}/man1/xrdcopy.1*\n%{_mandir}/man1/xrdcp.1*\n%{_mandir}/man1/xrdcp-old.1*\n%{_mandir}/man1/xrdfs.1*\n%{_mandir}/man1/xrdgsiproxy.1*\n%{_mandir}/man1/xrdstagetool.1*\n\n%files fuse\n%defattr(-,root,root,-)\n%{_bindir}/xrootdfs\n%{_mandir}/man1/xrootdfs.1*\n%dir %{_sysconfdir}/xrootd\n\n%files python -f xrootd/build/PYTHON_INSTALLED_FILES\n%defattr(-,root,root,-)\n\n%files doc\n%defattr(-,root,root,-)\n%doc %{_docdir}/%{name}-%{version}\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%files ceph\n%defattr(-,root,root,-)\n%{_libdir}/libXrdCeph-4.so\n%{_libdir}/libXrdCephXattr-4.so\n%{_libdir}/libXrdCephPosix.so*\n%endif\n\n%if %{?_with_tests:1}%{!?_with_tests:0}\n%files tests\n%defattr(-,root,root,-)\n%{_bindir}/text-runner\n%{_libdir}/libXrdClTests.so\n%{_libdir}/libXrdClTestsHelper.so\n%{_libdir}/libXrdClTestMonitor*.so\n\n%if %{?_with_ceph:1}%{!?_with_ceph:0}\n%{_libdir}/libXrdCephTests*.so\n%endif\n%endif\n\n%files selinux\n%defattr(-,root,root)\n%{_datadir}/selinux/packages/%{name}/%{name}.pp\n\n%if %{?_with_compat:1}%{!?_with_compat:0}\n%files client-compat\n%defattr(-,root,root,-)\n%{_libdir}/libXrdAppUtils.so.0*\n%{_libdir}/libXrdCksCalczcrc32.so*\n%{_libdir}/libXrdClient.so.1*\n%{_libdir}/libXrdCl.so.1*\n%{_libdir}/libXrdCryptoLite.so.0*\n%{_libdir}/libXrdCrypto.so.0*\n%{_libdir}/libXrdCryptossl.so*\n%{_libdir}/libXrdFfs.so.1*\n%{_libdir}/libXrdPosixPreload.so.0*\n%{_libdir}/libXrdPosix.so.1*\n%{_libdir}/libXrdSecgsiAuthzVO.so*\n%{_libdir}/libXrdSecgsiGMAPDN.so*\n%{_libdir}/libXrdSecgsi.so*\n%{_libdir}/libXrdSeckrb5.so*\n%{_libdir}/libXrdSecpwd.so*\n%{_libdir}/libXrdSec.so*\n%{_libdir}/libXrdSecsss.so*\n%{_libdir}/libXrdSecunix.so*\n%{_libdir}/libXrdUtils.so.1*\n\n%files server-compat\n%defattr(-,root,root,-)\n%{_bindir}/cmsd-3\n%{_bindir}/frm_purged-3\n%{_bindir}/frm_xfrd-3\n%{_bindir}/xrootd-3\n%{_libdir}/libXrdBwm.so*\n%{_libdir}/libXrdMain.so.1*\n%{_libdir}/libXrdOfs.so.1*\n%{_libdir}/libXrdPss.so*\n%{_libdir}/libXrdServer.so.1*\n%{_libdir}/libXrdXrootd.so*\n%endif\n\n#-------------------------------------------------------------------------------\n# Changelog\n#-------------------------------------------------------------------------------\n%changelog\n* Tue Dec 13 2016 Gerardo Ganis <gerardo.ganis@cern.ch>\n- Add xrdgsitest to xrootd-client-devel\n\n* Mon Mar 16 2015 Lukasz Janyst <ljanyst@cern.ch>\n- create the python package\n\n* Wed Mar 11 2015 Lukasz Janyst <ljanyst@cern.ch>\n- create the xrootd-ceph package\n\n* Thu Oct 30 2014 Lukasz Janyst <ljanyst@cern.ch>\n- update for 4.1 and introduce 3.3.6 compat packages\n\n* Thu Aug 28 2014 Lukasz Janyst <ljanyst@cern.ch>\n- add support for systemd\n\n* Wed Aug 27 2014 Lukasz Janyst <ljanyst@cern.ch>\n- use generic selinux policy build mechanisms\n\n* Tue Apr 01 2014 Lukasz Janyst <ljanyst@cern.ch>\n- correct the license field (LGPLv3+)\n- rename to xrootd4\n- add 'conflicts' statements\n- remove 'provides' and 'obsoletes'\n\n* Mon Mar 31 2014 Lukasz Janyst <ljanyst@cern.ch>\n- Add selinux policy\n\n* Fri Jan 24 2014 Lukasz Janyst <ljanyst@cern.ch>\n- Import XrdHttp\n\n* Fri Jun 7 2013 Lukasz Janyst <ljanyst@cern.ch>\n- adopt the EPEL RPM layout by Mattias Ellert\n\n* Tue Apr 2 2013 Lukasz Janyst <ljanyst@cern.ch>\n- remove perl\n\n* Thu Nov 1 2012 Justin Salmon <jsalmon@cern.ch>\n- add tests package\n\n* Fri Oct 21 2011 Lukasz Janyst <ljanyst@cern.ch> 3.1.0-1\n- bump the version to 3.1.0\n\n* Mon Apr 11 2011 Lukasz Janyst <ljanyst@cern.ch> 3.0.3-1\n- the first RPM release - version 3.0.3\n- the detailed release notes are available at:\n  http://xrootd.org/download/ReleaseNotes.html\n", "//------------------------------------------------------------------------------\n// Copyright (c) 2011-2012 by European Organization for Nuclear Research (CERN)\n// Author: Lukasz Janyst <ljanyst@cern.ch>\n//------------------------------------------------------------------------------\n// XRootD is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// XRootD is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with XRootD.  If not, see <http://www.gnu.org/licenses/>.\n//------------------------------------------------------------------------------\n\n#include \"XrdCl/XrdClDefaultEnv.hh\"\n#include \"XrdCl/XrdClConstants.hh\"\n#include \"XrdCl/XrdClPostMaster.hh\"\n#include \"XrdCl/XrdClLog.hh\"\n#include \"XrdCl/XrdClForkHandler.hh\"\n#include \"XrdCl/XrdClFileTimer.hh\"\n#include \"XrdCl/XrdClUtils.hh\"\n#include \"XrdCl/XrdClMonitor.hh\"\n#include \"XrdCl/XrdClCheckSumManager.hh\"\n#include \"XrdCl/XrdClTransportManager.hh\"\n#include \"XrdCl/XrdClPlugInManager.hh\"\n#include \"XrdCl/XrdClOptimizers.hh\"\n#include \"XrdOuc/XrdOucPreload.hh\"\n#include \"XrdSys/XrdSysAtomics.hh\"\n#include \"XrdSys/XrdSysUtils.hh\"\n#include \"XrdSys/XrdSysPwd.hh\"\n#include \"XrdVersion.hh\"\n\n#include <libgen.h>\n#include <cstring>\n#include <map>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n#include <string>\n#include <pthread.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nXrdVERSIONINFO( XrdCl, client );\n\n//------------------------------------------------------------------------------\n// Forking functions\n//------------------------------------------------------------------------------\nextern \"C\"\n{\n  //----------------------------------------------------------------------------\n  // Prepare for the forking\n  //----------------------------------------------------------------------------\n  static void prepare()\n  {\n    using namespace XrdCl;\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n\n    log->Debug( UtilityMsg, \"In the prepare fork handler for process %d\",\n                getpid() );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n      forkHandler->Prepare();\n    env->WriteLock();\n  }\n\n  //----------------------------------------------------------------------------\n  // Parent handler\n  //----------------------------------------------------------------------------\n  static void parent()\n  {\n    using namespace XrdCl;\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n    env->UnLock();\n\n    pid_t pid = getpid();\n    log->Debug( UtilityMsg, \"In the parent fork handler for process %d\", pid );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n    {\n      log->SetPid(pid);\n      forkHandler->Parent();\n    }\n  }\n\n  //----------------------------------------------------------------------------\n  // Child handler\n  //----------------------------------------------------------------------------\n  static void child()\n  {\n    using namespace XrdCl;\n    DefaultEnv::ReInitializeLogging();\n    Log         *log         = DefaultEnv::GetLog();\n    Env         *env         = DefaultEnv::GetEnv();\n    ForkHandler *forkHandler = DefaultEnv::GetForkHandler();\n    env->ReInitializeLock();\n\n    pid_t pid = getpid();\n    log->Debug( UtilityMsg, \"In the child fork handler for process %d\", pid );\n\n    //--------------------------------------------------------------------------\n    // Run the fork handler if it's enabled\n    //--------------------------------------------------------------------------\n    int runForkHandler = DefaultRunForkHandler;\n    env->GetInt( \"RunForkHandler\", runForkHandler );\n    if( runForkHandler )\n    {\n      log->SetPid(pid);\n      forkHandler->Child();\n    }\n  }\n}\n\nnamespace\n{\n  //----------------------------------------------------------------------------\n  // Translate a string into a topic mask\n  //----------------------------------------------------------------------------\n  struct MaskTranslator\n  {\n    //--------------------------------------------------------------------------\n    // Initialize the translation array\n    //--------------------------------------------------------------------------\n    MaskTranslator()\n    {\n      masks[\"AppMsg\"]             = XrdCl::AppMsg;\n      masks[\"UtilityMsg\"]         = XrdCl::UtilityMsg;\n      masks[\"FileMsg\"]            = XrdCl::FileMsg;\n      masks[\"PollerMsg\"]          = XrdCl::PollerMsg;\n      masks[\"PostMasterMsg\"]      = XrdCl::PostMasterMsg;\n      masks[\"XRootDTransportMsg\"] = XrdCl::XRootDTransportMsg;\n      masks[\"TaskMgrMsg\"]         = XrdCl::TaskMgrMsg;\n      masks[\"XRootDMsg\"]          = XrdCl::XRootDMsg;\n      masks[\"FileSystemMsg\"]      = XrdCl::FileSystemMsg;\n      masks[\"AsyncSockMsg\"]       = XrdCl::AsyncSockMsg;\n      masks[\"JobMgrMsg\"]          = XrdCl::JobMgrMsg;\n      masks[\"PlugInMgrMsg\"]       = XrdCl::PlugInMgrMsg;\n    }\n\n    //--------------------------------------------------------------------------\n    // Translate the mask\n    //--------------------------------------------------------------------------\n    uint64_t translateMask( const std::string mask )\n    {\n      if( mask == \"\" )\n        return 0xffffffffffffffffULL;\n\n      std::vector<std::string>           topics;\n      std::vector<std::string>::iterator it;\n      XrdCl::Utils::splitString( topics, mask, \"|\" );\n\n      uint64_t resultMask = 0;\n      std::map<std::string, uint64_t>::iterator maskIt;\n      for( it = topics.begin(); it != topics.end(); ++it )\n      {\n        //----------------------------------------------------------------------\n        // Check for resetting pseudo topics\n        //----------------------------------------------------------------------\n        if( *it == \"All\" )\n        {\n          resultMask = 0xffffffffffffffffULL;\n          continue;\n        }\n\n        if( *it == \"None\" )\n        {\n          resultMask = 0ULL;\n          continue;\n        }\n\n        //----------------------------------------------------------------------\n        // Check whether given topic should be disabled or enabled\n        //----------------------------------------------------------------------\n        std::string topic = *it;\n        bool disable      = false;\n        if( !topic.empty() && topic[0] == '^' )\n        {\n          disable = true;\n          topic   = topic.substr( 1, topic.length()-1 );\n        }\n\n        maskIt = masks.find( topic );\n        if( maskIt == masks.end() )\n          continue;\n\n        if( disable )\n          resultMask &= (0xffffffffffffffffULL ^ maskIt->second);\n        else\n          resultMask |= maskIt->second;\n      }\n\n      return resultMask;\n    }\n\n    std::map<std::string, uint64_t> masks;\n  };\n\n  //----------------------------------------------------------------------------\n  // Helper for handling environment variables\n  //----------------------------------------------------------------------------\n  template<typename Item>\n  struct EnvVarHolder\n  {\n    EnvVarHolder( const std::string &name_, const Item &def_ ):\n      name( name_ ), def( def_ ) {}\n    std::string name;\n    Item        def;\n  };\n}\n\n#define REGISTER_VAR_INT( array, name,  def ) \\\n    array.push_back( EnvVarHolder<int>( name, def ) )\n\n#define REGISTER_VAR_STR( array, name,  def ) \\\n    array.push_back( EnvVarHolder<std::string>( name, def ) )\n\nnamespace XrdCl\n{\n  //----------------------------------------------------------------------------\n  // Statics\n  //----------------------------------------------------------------------------\n  XrdSysMutex        DefaultEnv::sInitMutex;\n  Env               *DefaultEnv::sEnv                = 0;\n  PostMaster        *DefaultEnv::sPostMaster         = 0;\n  Log               *DefaultEnv::sLog                = 0;\n  ForkHandler       *DefaultEnv::sForkHandler        = 0;\n  FileTimer         *DefaultEnv::sFileTimer          = 0;\n  Monitor           *DefaultEnv::sMonitor            = 0;\n  XrdOucPinLoader   *DefaultEnv::sMonitorLibHandle   = 0;\n  bool               DefaultEnv::sMonitorInitialized = false;\n  CheckSumManager   *DefaultEnv::sCheckSumManager    = 0;\n  TransportManager  *DefaultEnv::sTransportManager   = 0;\n  PlugInManager     *DefaultEnv::sPlugInManager      = 0;\n\n  //----------------------------------------------------------------------------\n  // Constructor\n  //----------------------------------------------------------------------------\n  DefaultEnv::DefaultEnv()\n  {\n    Log *log = GetLog();\n\n    //--------------------------------------------------------------------------\n    // Declate the variables to be processed\n    //--------------------------------------------------------------------------\n    std::vector<EnvVarHolder<int> >         varsInt;\n    std::vector<EnvVarHolder<std::string> > varsStr;\n    REGISTER_VAR_INT( varsInt, \"ConnectionWindow\",     DefaultConnectionWindow     );\n    REGISTER_VAR_INT( varsInt, \"ConnectionRetry\",      DefaultConnectionRetry      );\n    REGISTER_VAR_INT( varsInt, \"RequestTimeout\",       DefaultRequestTimeout       );\n    REGISTER_VAR_INT( varsInt, \"StreamTimeout\",        DefaultStreamTimeout        );\n    REGISTER_VAR_INT( varsInt, \"SubStreamsPerChannel\", DefaultSubStreamsPerChannel );\n    REGISTER_VAR_INT( varsInt, \"TimeoutResolution\",    DefaultTimeoutResolution    );\n    REGISTER_VAR_INT( varsInt, \"StreamErrorWindow\",    DefaultStreamErrorWindow    );\n    REGISTER_VAR_INT( varsInt, \"RunForkHandler\",       DefaultRunForkHandler       );\n    REGISTER_VAR_INT( varsInt, \"RedirectLimit\",        DefaultRedirectLimit        );\n    REGISTER_VAR_INT( varsInt, \"WorkerThreads\",        DefaultWorkerThreads        );\n    REGISTER_VAR_INT( varsInt, \"CPChunkSize\",          DefaultCPChunkSize          );\n    REGISTER_VAR_INT( varsInt, \"CPParallelChunks\",     DefaultCPParallelChunks     );\n    REGISTER_VAR_INT( varsInt, \"DataServerTTL\",        DefaultDataServerTTL        );\n    REGISTER_VAR_INT( varsInt, \"LoadBalancerTTL\",      DefaultLoadBalancerTTL      );\n    REGISTER_VAR_INT( varsInt, \"CPInitTimeout\",        DefaultCPInitTimeout        );\n    REGISTER_VAR_INT( varsInt, \"CPTPCTimeout\",         DefaultCPTPCTimeout         );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAlive\",         DefaultTCPKeepAlive         );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAliveTime\",     DefaultTCPKeepAliveTime     );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepAliveInterval\", DefaultTCPKeepAliveInterval );\n    REGISTER_VAR_INT( varsInt, \"TCPKeepProbes\",        DefaultTCPKeepAliveProbes   );\n    REGISTER_VAR_INT( varsInt, \"MultiProtocol\",        DefaultMultiProtocol        );\n    REGISTER_VAR_INT( varsInt, \"ParallelEvtLoop\",      DefaultParallelEvtLoop      );\n    REGISTER_VAR_INT( varsInt, \"MetalinkProcessing\",   DefaultMetalinkProcessing   );\n    REGISTER_VAR_INT( varsInt, \"LocalMetalinkFile\",    DefaultLocalMetalinkFile    );\n    REGISTER_VAR_INT( varsInt, \"XCpBlockSize\",         DefaultXCpBlockSize    );\n\n    REGISTER_VAR_STR( varsStr, \"PollerPreference\",     DefaultPollerPreference     );\n    REGISTER_VAR_STR( varsStr, \"ClientMonitor\",        DefaultClientMonitor        );\n    REGISTER_VAR_STR( varsStr, \"ClientMonitorParam\",   DefaultClientMonitorParam   );\n    REGISTER_VAR_STR( varsStr, \"NetworkStack\",         DefaultNetworkStack         );\n    REGISTER_VAR_STR( varsStr, \"PlugIn\",               DefaultPlugIn               );\n    REGISTER_VAR_STR( varsStr, \"PlugInConfDir\",        DefaultPlugInConfDir        );\n    REGISTER_VAR_STR( varsStr, \"ReadRecovery\",         DefaultReadRecovery         );\n    REGISTER_VAR_STR( varsStr, \"WriteRecovery\",        DefaultWriteRecovery        );\n    REGISTER_VAR_STR( varsStr, \"GlfnRedirector\",       DefaultGlfnRedirector       );\n\n    //--------------------------------------------------------------------------\n    // Process the configuration files\n    //--------------------------------------------------------------------------\n    std::map<std::string, std::string> config, userConfig;\n    Status st = Utils::ProcessConfig( config, \"/etc/xrootd/client.conf\" );\n\n    if( !st.IsOK() )\n      log->Warning( UtilityMsg, \"Unable to process global config file: %s\",\n                    st.ToString().c_str() );\n\n    XrdSysPwd pwdHandler;\n    passwd *pwd = pwdHandler.Get( getuid() );\n    if( pwd )\n    {\n      std::string userConfigFile = pwd->pw_dir;\n      userConfigFile += \"/.xrootd/client.conf\";\n\n      st = Utils::ProcessConfig( userConfig, userConfigFile );\n\n      if( !st.IsOK() )\n        log->Debug( UtilityMsg, \"Unable to process user config file: %s\",\n                    st.ToString().c_str() );\n    }\n    else\n      log->Debug( UtilityMsg, \"Unable to find user home directory.\" );\n\n    std::map<std::string, std::string>::iterator it;\n\n    for( it = config.begin(); it != config.end(); ++it )\n      log->Dump( UtilityMsg, \"[Global config] \\\"%s\\\" = \\\"%s\\\"\",\n                 it->first.c_str(), it->second.c_str() );\n\n    for( it = userConfig.begin(); it != userConfig.end(); ++it )\n    {\n      config[it->first] = it->second;\n      log->Dump( UtilityMsg, \"[User config] \\\"%s\\\" = \\\"%s\\\"\",\n                 it->first.c_str(), it->second.c_str() );\n    }\n\n    for( it = config.begin(); it != config.end(); ++it )\n      log->Debug( UtilityMsg, \"[Effective config] \\\"%s\\\" = \\\"%s\\\"\",\n                  it->first.c_str(), it->second.c_str() );\n\n    //--------------------------------------------------------------------------\n    // Monitoring settings\n    //--------------------------------------------------------------------------\n    char *tmp = strdup( XrdSysUtils::ExecName() );\n    char *appName = basename( tmp );\n    PutString( \"AppName\", appName );\n    free( tmp );\n    ImportString( \"AppName\", \"XRD_APPNAME\" );\n    PutString( \"MonInfo\", \"\" );\n    ImportString( \"MonInfo\", \"XRD_MONINFO\" );\n\n    //--------------------------------------------------------------------------\n    // Process ints\n    //--------------------------------------------------------------------------\n    for( size_t i = 0; i < varsInt.size(); ++i )\n    {\n      PutInt( varsInt[i].name, varsInt[i].def );\n\n      it = config.find( varsInt[i].name );\n      if( it != config.end() )\n      {\n        char *endPtr = 0;\n        int value = (int)strtol( it->second.c_str(), &endPtr, 0 );\n        if( *endPtr )\n          log->Warning( UtilityMsg, \"Unable to set %s to %s: not a proper \"\n                        \"integer\", varsInt[i].name.c_str(),\n                        it->second.c_str() );\n        else\n          PutInt( varsInt[i].name, value );\n      }\n\n      std::string name = \"XRD_\" + varsInt[i].name;\n      std::transform( name.begin(), name.end(), name.begin(), ::toupper );\n      ImportInt( varsInt[i].name, name );\n    }\n\n    //--------------------------------------------------------------------------\n    // Process strings\n    //--------------------------------------------------------------------------\n    for( size_t i = 0; i < varsStr.size(); ++i )\n    {\n      PutString( varsStr[i].name, varsStr[i].def );\n\n      it = config.find( varsStr[i].name );\n      if( it != config.end() )\n        PutString( varsStr[i].name, it->second );\n\n      std::string name = \"XRD_\" + varsStr[i].name;\n      std::transform( name.begin(), name.end(), name.begin(), ::toupper );\n      ImportString( varsStr[i].name, name );\n    }\n\n    //--------------------------------------------------------------------------\n    // Register fork handlers\n    //--------------------------------------------------------------------------\n    pthread_atfork( prepare, parent, child );\n  }\n\n  //----------------------------------------------------------------------------\n  // Get default client environment\n  //----------------------------------------------------------------------------\n  Env *DefaultEnv::GetEnv()\n  {\n    return sEnv;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get default post master\n  //----------------------------------------------------------------------------\n  PostMaster *DefaultEnv::GetPostMaster()\n  {\n    PostMaster* postMaster = AtomicGet(sPostMaster);\n\n    if( unlikely( !postMaster ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      postMaster = AtomicGet(sPostMaster);\n\n      if( postMaster )\n        return postMaster;\n\n      postMaster = new PostMaster();\n\n      if( !postMaster->Initialize() )\n      {\n        delete postMaster;\n        postMaster = 0;\n        return 0;\n      }\n\n      if( !postMaster->Start() )\n      {\n        postMaster->Finalize();\n        delete postMaster;\n        postMaster = 0;\n        return 0;\n      }\n\n      sForkHandler->RegisterPostMaster( postMaster );\n      postMaster->GetTaskManager()->RegisterTask( sFileTimer, time(0), false );\n      AtomicCAS(sPostMaster, sPostMaster, postMaster);\n    }\n\n    return postMaster;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get log\n  //----------------------------------------------------------------------------\n  Log *DefaultEnv::GetLog()\n  {\n    return sLog;\n  }\n\n  //----------------------------------------------------------------------------\n  // Set log level\n  //----------------------------------------------------------------------------\n  void DefaultEnv::SetLogLevel( const std::string &level )\n  {\n    Log *log = GetLog();\n    log->SetLevel( level );\n  }\n\n  //----------------------------------------------------------------------------\n  // Set log file\n  //----------------------------------------------------------------------------\n  bool DefaultEnv::SetLogFile( const std::string &filepath )\n  {\n    Log *log = GetLog();\n    LogOutFile *out = new LogOutFile();\n\n    if( out->Open( filepath ) )\n    {\n      log->SetOutput( out );\n      return true;\n    }\n\n    delete out;\n    return false;\n  }\n\n  //----------------------------------------------------------------------------\n  //! Set log mask.\n  //------------------------------------------------------------------------\n  void DefaultEnv::SetLogMask( const std::string &level,\n                               const std::string &mask )\n  {\n    Log *log = GetLog();\n    MaskTranslator translator;\n    uint64_t topicMask = translator.translateMask( mask );\n\n    if( level == \"All\" )\n    {\n      log->SetMask( Log::ErrorMsg,   topicMask );\n      log->SetMask( Log::WarningMsg, topicMask );\n      log->SetMask( Log::InfoMsg,    topicMask );\n      log->SetMask( Log::DebugMsg,   topicMask );\n      log->SetMask( Log::DumpMsg,    topicMask );\n      return;\n    }\n\n    log->SetMask( level, topicMask );\n  }\n\n  //----------------------------------------------------------------------------\n  // Get fork handler\n  //----------------------------------------------------------------------------\n  ForkHandler *DefaultEnv::GetForkHandler()\n  {\n    return sForkHandler;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get fork handler\n  //----------------------------------------------------------------------------\n  FileTimer *DefaultEnv::GetFileTimer()\n  {\n    return sFileTimer;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get the monitor object\n  //----------------------------------------------------------------------------\n  Monitor *DefaultEnv::GetMonitor()\n  {\n    if( unlikely( !sMonitorInitialized ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sMonitorInitialized )\n      {\n        //----------------------------------------------------------------------\n        // Check the environment settings\n        //----------------------------------------------------------------------\n        Env *env = GetEnv();\n        Log *log = GetLog();\n        sMonitorInitialized = true;\n        std::string monitorLib = DefaultClientMonitor;\n        env->GetString( \"ClientMonitor\", monitorLib );\n        if( monitorLib.empty() )\n        {\n          log->Debug( UtilityMsg, \"Monitor library name not set. No \"\n                      \"monitoring\" );\n          return 0;\n        }\n\n        std::string monitorParam = DefaultClientMonitorParam;\n        env->GetString( \"ClientMonitorParam\", monitorParam );\n\n        log->Debug( UtilityMsg, \"Initializing monitoring, lib: %s, param: %s\",\n                    monitorLib.c_str(), monitorParam.c_str() );\n\n        //----------------------------------------------------------------------\n        // Loading the plugin\n        //----------------------------------------------------------------------\n        char *errBuffer = new char[4000];\n        sMonitorLibHandle = new XrdOucPinLoader(\n                                 errBuffer, 4000, &XrdVERSIONINFOVAR( XrdCl ),\n                                 \"monitor\", monitorLib.c_str() );\n\n        typedef XrdCl::Monitor *(*MonLoader)(const char *, const char *);\n        MonLoader loader;\n        loader = (MonLoader)sMonitorLibHandle->Resolve( \"XrdClGetMonitor\", -1 );\n        if( !loader )\n        {\n          log->Error( UtilityMsg, \"Unable to initialize user monitoring: %s\",\n                      errBuffer );\n          delete [] errBuffer;\n          sMonitorLibHandle->Unload();\n          delete sMonitorLibHandle; sMonitorLibHandle = 0;\n          return 0;\n        }\n\n        //----------------------------------------------------------------------\n        // Instantiating the monitor object\n        //----------------------------------------------------------------------\n        const char *param = monitorParam.empty() ? 0 : monitorParam.c_str();\n        sMonitor = (*loader)( XrdSysUtils::ExecName(), param );\n\n        if( !sMonitor )\n        {\n          log->Error( UtilityMsg, \"Unable to initialize user monitoring: %s\",\n                      errBuffer );\n          delete [] errBuffer;\n          sMonitorLibHandle->Unload();\n          delete sMonitorLibHandle; sMonitorLibHandle = 0;\n          return 0;\n        }\n        log->Debug( UtilityMsg, \"Successfully initialized monitoring from: %s\",\n                    monitorLib.c_str() );\n        delete [] errBuffer;\n      }\n    }\n    return sMonitor;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get checksum manager\n  //----------------------------------------------------------------------------\n  CheckSumManager *DefaultEnv::GetCheckSumManager()\n  {\n    if( unlikely( !sCheckSumManager ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sCheckSumManager )\n        sCheckSumManager = new CheckSumManager();\n    }\n    return sCheckSumManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get transport manager\n  //----------------------------------------------------------------------------\n  TransportManager *DefaultEnv::GetTransportManager()\n  {\n    if( unlikely( !sTransportManager ) )\n    {\n      XrdSysMutexHelper scopedLock( sInitMutex );\n      if( !sTransportManager )\n        sTransportManager = new TransportManager();\n    }\n    return sTransportManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Get plug-in manager\n  //----------------------------------------------------------------------------\n  PlugInManager *DefaultEnv::GetPlugInManager()\n  {\n    return sPlugInManager;\n  }\n\n  //----------------------------------------------------------------------------\n  // Retrieve the plug-in factory for the given URL\n  //----------------------------------------------------------------------------\n  PlugInFactory *DefaultEnv::GetPlugInFactory( const std::string url )\n  {\n    return  sPlugInManager->GetFactory( url );\n  }\n\n  //----------------------------------------------------------------------------\n  // Initialize the environment\n  //----------------------------------------------------------------------------\n  void DefaultEnv::Initialize()\n  {\n    sLog           = new Log();\n    SetUpLog();\n\n    sEnv           = new DefaultEnv();\n    sForkHandler   = new ForkHandler();\n    sFileTimer     = new FileTimer();\n    sPlugInManager = new PlugInManager();\n\n    sPlugInManager->ProcessEnvironmentSettings();\n    sForkHandler->RegisterFileTimer( sFileTimer );\n\n    //--------------------------------------------------------------------------\n    // MacOSX library loading is completely moronic. We cannot dlopen a library\n    // from a thread other than a main thread, so we-pre dlopen all the\n    // libraries that we may potentially want.\n    //--------------------------------------------------------------------------\n#ifdef __APPLE__\n    char *errBuff = new char[1024];\n\n    const char *libs[] =\n    {\n      \"libXrdSeckrb5.so\",\n      \"libXrdSecgsi.so\",\n      \"libXrdSecgsiAuthzVO.so\",\n      \"libXrdSecgsiGMAPDN.so\",\n      \"libXrdSecpwd.so\",\n      \"libXrdSecsss.so\",\n      \"libXrdSecunix.so\",\n      0\n    };\n\n    for( int i = 0; libs[i]; ++i )\n    {\n      sLog->Debug( UtilityMsg, \"Attempting to pre-load: %s\", libs[i] );\n      bool ok = XrdOucPreload( libs[i], errBuff, 1024 );\n      if( !ok )\n        sLog->Error( UtilityMsg, \"Unable to pre-load %s: %s\", libs[i], errBuff );\n    }\n    delete [] errBuff;\n#endif\n  }\n\n  //----------------------------------------------------------------------------\n  // Finalize the environment\n  //----------------------------------------------------------------------------\n  void DefaultEnv::Finalize()\n  {\n    if( sPostMaster )\n    {\n      sPostMaster->Stop();\n      sPostMaster->Finalize();\n      delete sPostMaster;\n      sPostMaster = 0;\n    }\n\n    delete sTransportManager;\n    sTransportManager = 0;\n\n    delete sCheckSumManager;\n    sCheckSumManager = 0;\n\n    delete sMonitor;\n    sMonitor = 0;\n\n    if( sMonitorLibHandle )\n      sMonitorLibHandle->Unload();\n\n    delete sMonitorLibHandle;\n    sMonitorLibHandle = 0;\n\n    delete sForkHandler;\n    sForkHandler = 0;\n\n    delete sFileTimer;\n    sFileTimer = 0;\n\n    delete sPlugInManager;\n    sPlugInManager = 0;\n\n    delete sEnv;\n    sEnv = 0;\n\n    delete sLog;\n    sLog = 0;\n  }\n\n  //----------------------------------------------------------------------------\n  // Re-initialize the logging\n  //----------------------------------------------------------------------------\n  void DefaultEnv::ReInitializeLogging()\n  {\n    delete sLog;\n    sLog = new Log();\n    SetUpLog();\n  }\n\n  //----------------------------------------------------------------------------\n  // Set up the log\n  //----------------------------------------------------------------------------\n  void DefaultEnv::SetUpLog()\n  {\n    Log *log = GetLog();\n\n    //--------------------------------------------------------------------------\n    // Check if the log level has been defined in the environment\n    //--------------------------------------------------------------------------\n    char *level = getenv( \"XRD_LOGLEVEL\" );\n    if( level )\n      log->SetLevel( level );\n\n    //--------------------------------------------------------------------------\n    // Check if we need to log to a file\n    //--------------------------------------------------------------------------\n    char *file = getenv( \"XRD_LOGFILE\" );\n    if( file )\n    {\n      LogOutFile *out = new LogOutFile();\n      if( out->Open( file ) )\n        log->SetOutput( out );\n      else\n        delete out;\n    }\n\n    //--------------------------------------------------------------------------\n    // Log mask defaults\n    //--------------------------------------------------------------------------\n    MaskTranslator translator;\n    log->SetMask( Log::DumpMsg, translator.translateMask( \"All|^PollerMsg\" ) );\n\n    //--------------------------------------------------------------------------\n    // Initialize the topic mask\n    //--------------------------------------------------------------------------\n    char *logMask = getenv( \"XRD_LOGMASK\" );\n    if( logMask )\n    {\n      uint64_t mask = translator.translateMask( logMask );\n      log->SetMask( Log::ErrorMsg,   mask );\n      log->SetMask( Log::WarningMsg, mask );\n      log->SetMask( Log::InfoMsg,    mask );\n      log->SetMask( Log::DebugMsg,   mask );\n      log->SetMask( Log::DumpMsg,    mask );\n    }\n\n    logMask = getenv( \"XRD_LOGMASK_ERROR\" );\n    if( logMask ) log->SetMask( Log::ErrorMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_WARNING\" );\n    if( logMask ) log->SetMask( Log::WarningMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_INFO\" );\n    if( logMask ) log->SetMask( Log::InfoMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_DEBUG\" );\n    if( logMask ) log->SetMask( Log::DebugMsg, translator.translateMask( logMask ) );\n\n    logMask = getenv( \"XRD_LOGMASK_DUMP\" );\n    if( logMask ) log->SetMask( Log::DumpMsg, translator.translateMask( logMask ) );\n\n    //--------------------------------------------------------------------------\n    // Set up the topic strings\n    //--------------------------------------------------------------------------\n    log->SetTopicName( AppMsg,             \"App\" );\n    log->SetTopicName( UtilityMsg,         \"Utility\" );\n    log->SetTopicName( FileMsg,            \"File\" );\n    log->SetTopicName( PollerMsg,          \"Poller\" );\n    log->SetTopicName( PostMasterMsg,      \"PostMaster\" );\n    log->SetTopicName( XRootDTransportMsg, \"XRootDTransport\" );\n    log->SetTopicName( TaskMgrMsg,         \"TaskMgr\" );\n    log->SetTopicName( XRootDMsg,          \"XRootD\" );\n    log->SetTopicName( FileSystemMsg,      \"FileSystem\" );\n    log->SetTopicName( AsyncSockMsg,       \"AsyncSock\" );\n    log->SetTopicName( JobMgrMsg,          \"JobMgr\" );\n    log->SetTopicName( PlugInMgrMsg,       \"PlugInMgr\" );\n  }\n}\n\n\n//------------------------------------------------------------------------------\n// Static initialization and finalization\n//------------------------------------------------------------------------------\nint EnvInitializer::counter = 0;\n\n//------------------------------------------------------------------------------\n// The constructor will be invoked in every translation unit\n// that includes XrdClDefaultEnv.hh, but the DefaultEnv will\n// be initialized only in the first one\n//------------------------------------------------------------------------------\nEnvInitializer::EnvInitializer ()\n{\n  if( counter++ == 0 ) XrdCl::DefaultEnv::Initialize();\n}\n\n//------------------------------------------------------------------------------\n// The destructor will be invoked in every translation unit\n// that includes XrdClDefaultEnv.hh, but the DefaultEnv will\n// be finalized only once in the last one\n//------------------------------------------------------------------------------\nEnvInitializer::~EnvInitializer ()\n{\n  if( --counter == 0 ) XrdCl::DefaultEnv::Finalize();\n}\n\n", "\ninclude( XRootDCommon )\n\n#-------------------------------------------------------------------------------\n# Shared library version\n#-------------------------------------------------------------------------------\nset( LIB_XRD_SEC_GSI          XrdSecgsi-${PLUGIN_VERSION} )\nset( LIB_XRD_SEC_GSI_GMAPDN   XrdSecgsiGMAPDN-${PLUGIN_VERSION} )\nset( LIB_XRD_SEC_GSI_AUTHZVO  XrdSecgsiAUTHZVO-${PLUGIN_VERSION} )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsi library\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI}\n  MODULE\n  XrdSecgsi/XrdSecProtocolgsi.cc      XrdSecgsi/XrdSecProtocolgsi.hh\n                                      XrdSecgsi/XrdSecgsiTrace.hh )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI}\n  XrdCrypto\n  XrdUtils\n  pthread )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsiAuthzVO module\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  MODULE\n  XrdSecgsi/XrdSecgsiAuthzFunVO.cc )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  XrdUtils )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# The XrdSecgsiGMAPDN module\n#-------------------------------------------------------------------------------\nadd_library(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  MODULE\n  XrdSecgsi/XrdSecgsiGMAPFunDN.cc )\n\ntarget_link_libraries(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  XrdUtils )\n\nset_target_properties(\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  PROPERTIES\n  INTERFACE_LINK_LIBRARIES \"\"\n  LINK_INTERFACE_LIBRARIES \"\" )\n\n#-------------------------------------------------------------------------------\n# xrdgsiproxy\n#-------------------------------------------------------------------------------\nadd_executable(\n  xrdgsiproxy\n  XrdSecgsi/XrdSecgsiProxy.cc )\n\ntarget_link_libraries(\n  xrdgsiproxy\n  XrdCrypto\n  XrdUtils\n  ${OPENSSL_CRYPTO_LIBRARY} )\n\n#-------------------------------------------------------------------------------\n# xrdgsitest\n#-------------------------------------------------------------------------------\nadd_executable(\n  xrdgsitest\n  XrdSecgsi/XrdSecgsitest.cc )\n\ntarget_link_libraries(\n  xrdgsitest\n  XrdCrypto\n  XrdUtils\n  ${OPENSSL_CRYPTO_LIBRARY} )\n\n#-------------------------------------------------------------------------------\n# Install\n#-------------------------------------------------------------------------------\ninstall(\n  TARGETS\n  ${LIB_XRD_SEC_GSI}\n  ${LIB_XRD_SEC_GSI_AUTHZVO}\n  ${LIB_XRD_SEC_GSI_GMAPDN}\n  xrdgsiproxy\n  xrdgsitest\n  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}\n  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} )\n\ninstall(\n  FILES\n  ${PROJECT_SOURCE_DIR}/docs/man/xrdgsiproxy.1\n  ${PROJECT_SOURCE_DIR}/docs/man/xrdgsitest.1\n  DESTINATION ${CMAKE_INSTALL_MANDIR}/man1 )\n", "/******************************************************************************/\n/*                                                                            */\n/*             X r d S e c g s i G M A P F u n L D A P . c c                  */\n/*                                                                            */\n/* (c) 2008, G. Ganis / CERN                                                  */\n/*                                                                            */\n/* This file is part of the XRootD software suite.                            */\n/*                                                                            */\n/* XRootD is free software: you can redistribute it and/or modify it under    */\n/* the terms of the GNU Lesser General Public License as published by the     */\n/* Free Software Foundation, either version 3 of the License, or (at your     */\n/* option) any later version.                                                 */\n/*                                                                            */\n/* XRootD is distributed in the hope that it will be useful, but WITHOUT      */\n/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      */\n/* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public       */\n/* License for more details.                                                  */\n/*                                                                            */\n/* You should have received a copy of the GNU Lesser General Public License   */\n/* along with XRootD in a file called COPYING.LESSER (LGPL license) and file  */\n/* COPYING (GPL license).  If not, see <http://www.gnu.org/licenses/>.        */\n/*                                                                            */\n/* The copyright holder's institutional names and contributor's names may not */\n/* be used to endorse or promote products derived from this software without  */\n/* specific prior written permission of the institution or contributor.       */\n/*                                                                            */\n/******************************************************************************/\n\n#include \"XrdVersion.hh\"\n\n/******************************************************************************/\n/*                   V e r s i o n   I n f o r m a t i o n                    */\n/******************************************************************************/\n  \nXrdVERSIONINFO(XrdSecgsiGMAPFun,secgsigmap);\n\n/* ************************************************************************** */\n/*                                                                            */\n/* GMAP function implementation querying a LDAP database                      */\n/*                                                                            */\n/* Warning: this plug-in is not build any longer because the external         */\n/* LDAP query via the popen() represents a potential security threat          */\n/* and it is believed that functionality provided is not actually used.       */\n/* If this believe happens to be uncorrect please report at                   */\n/*                                                                            */\n/*                   https://github.com/xrootd                                */\n/*                                                                            */\n/* a sanitized version of the plug-in can be provided using a proper library. */\n/*                                                                            */\n/* ************************************************************************** */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\nstatic char *ldapsrv    = 0;\nstatic char *searchbase = 0;\nstatic char *attribute  = 0;\n\nint XrdSecgsiGMAPInit(const char *cfg);\n\n//\n// Main function\n//\nextern \"C\"\n{\nchar *XrdSecgsiGMAPFun(const char *dn, int now)\n{\n   // Implementation of XrdSecgsiGMAPFun querying an LDAP server\n   // for the distinguished name 'dn'\n\n   // Init the relevant fields (only once)\n   if (now <= 0) {\n      if (XrdSecgsiGMAPInit(dn) != 0)\n         return (char *)-1;\n      return (char *)0;\n   }\n\n   // Output\n   char *name = 0;\n\n   // Prepare the command to be executed\n   char cmd[4096];\n   sprintf(cmd, \"ldapsearch -H %s -x -b \\\"%s\\\" \\\"subject=%s\\\" %s\",\n                 ldapsrv, searchbase, dn, attribute);\n\n   // Execute the command into a pipe\n   FILE *fp = popen(cmd, \"r\");\n   if (fp) {\n      char line[1024], att[40], uname[256];\n      sprintf(att, \"%s: \", attribute);\n      while (fgets(line, sizeof(line), fp)) {\n         // Look for a line starting with \"uid: \"\n         if (!strncmp(line, att, strlen(att))) {\n            sscanf(line, \"%s %s\", att, uname);\n            name = new char[strlen(uname)+1];\n            strcpy(name, uname);\n            break;\n         }\n      }\n      pclose(fp);\n   }\n\n   // Done\n   return name;\n}}\n\n//\n// Init the relevant parameters from a dedicated config file\n//\nint XrdSecgsiGMAPInit(const char *cfg)\n{\n   // Initialize the relevant parameters from the file 'cfg' or\n   // from the one defined by XRDGSIGMAPLDAPCF.\n   // Return 0 on success, -1 otherwise\n\n   if (!cfg) cfg = getenv(\"XRDGSIGMAPLDAPCF\");\n   if (!cfg || strlen(cfg) <= 0) {\n      fprintf(stderr, \" +++ XrdSecgsiGMAPInit (LDAP): error: undefined config file path +++\\n\");\n      return -1;\n   }\n\n   FILE *fcf = fopen(cfg, \"r\");\n   if (fcf) {\n      char l[4096], k[20], val[4096];\n      while (fgets(l, sizeof(l), fcf)) {\n         int len = strlen(l);\n         if (len < 2) continue;\n         if (l[0] == '#') continue;\n         if (l[len-1] == '\\n') l[len-1] = '\\0';\n         sscanf(l, \"%s %s\", k, val);\n         if (!strcmp(k, \"srv:\")) {\n            ldapsrv = strdup(val);\n         } else if (!strcmp(k, \"base:\")) {\n            searchbase = strdup(val);\n         } else if (!strcmp(k, \"attr:\")) {\n            attribute = strdup(val);\n         } else {\n            fprintf(stderr, \"XrdSecgsiGMAPInit (LDAP): warning: unknown key: '%s' - ignoring\\n\", k);\n         }\n      }\n      fclose(fcf);\n   } else {\n      fprintf(stderr, \" +++ XrdSecgsiGMAPInit (LDAP): error: config file '%s'\"\n                      \" could not be open (errno: %d) +++\\n\", cfg, errno);\n      return -1;\n   }\n   // Done\n   return 0;\n}\n", "#ifndef __XRDVERSIONPLUGIN_HH__\n#define __XRDVERSIONPLUGIN_HH__\n/******************************************************************************/\n/*                                                                            */\n/*                   X r d V e r s i o n P l u g i n . h h                    */\n/*                                                                            */\n/* (c) 2012 by the Board of Trustees of the Leland Stanford, Jr., University  */\n/*                            All Rights Reserved                             */\n/*   Produced by Andrew Hanushevsky for Stanford University under contract    */\n/*              DE-AC02-76-SFO0515 with the Department of Energy              */\n/*                                                                            */\n/* This file is part of the XRootD software suite.                            */\n/*                                                                            */\n/* XRootD is free software: you can redistribute it and/or modify it under    */\n/* the terms of the GNU Lesser General Public License as published by the     */\n/* Free Software Foundation, either version 3 of the License, or (at your     */\n/* option) any later version.                                                 */\n/*                                                                            */\n/* XRootD is distributed in the hope that it will be useful, but WITHOUT      */\n/* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or      */\n/* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public       */\n/* License for more details.                                                  */\n/*                                                                            */\n/* You should have received a copy of the GNU Lesser General Public License   */\n/* along with XRootD in a file called COPYING.LESSER (LGPL license) and file  */\n/* COPYING (GPL license).  If not, see <http://www.gnu.org/licenses/>.        */\n/*                                                                            */\n/* The copyright holder's institutional names and contributor's names may not */\n/* be used to endorse or promote products derived from this software without  */\n/* specific prior written permission of the institution or contributor.       */\n/******************************************************************************/\n  \n/* The following section defines the versioning rules for plugins. The rules are\n   applied by 'XrdSysPlugin.cc'. The rules defined by the XrdVERSIONPLUGIN_RULE\n   macro (see below) are used to initialize a data the following data structure.\n*/\n   struct XrdVersionPlugin\n         {const char *pName;    //!< -> plugin object creator function name\n          char        vPfxLen;  //!< Generic rule prefix length\n          char        vSfxLen;  //!< Generic rule suffix length for preceeding\n          int         vProcess; //!< version: <0 skip, =0 optional, >0 required\n          short       vMajLow;  //!< Lowest compatible major version number\n          short       vMinLow;  //!< Lowest compatible minor (>99 don't check).\n         };\n\n/* The rules are defined here because they apply to every class that uses a\n   plugin.  This file *must* be updated whenever a plugin interface materially\n   changes; including any material changes (layout or size) to any classes\n   passed as arguments to the plugin.\n*/\n\n// Macros used to define version checking rule values (see explanation below).\n//\n#define XrdVERSIONPLUGIN_DoNotChk -1\n#define XrdVERSIONPLUGIN_Optional  0\n#define XrdVERSIONPLUGIN_Required  1\n\n#define XrdVERSIONPLUGIN_Rule(procMode, majorVer, minorVer, piSymbol)\\\n           {#piSymbol, 0, 0, XrdVERSIONPLUGIN_##procMode, majorVer, minorVer},\n\n/* Each rule must be defined by the XrdVERSIONPLUGIN_Rule macro which takes four\n   arguments, as follows:\n\n   procMode: Version procsessing mode:\n             DoNotChk -> Skip version check as it's already been done by a\n                         previous getPlugin() call for a library symbol.\n             Optional -> Version check is optional, do it if version information\n                         present but warn if it is missing.\n             Required -> Version check required; plugin must define a version\n                         number and issue error message if it is missing.\n\n   majorVer: The required major version number. It is checked as follows:\n             <   0: major version numbers must be identical.\n             >=  0: is the lowest valid major version number allowed.\n\n   minorVer: The required minor version number, It is check as follows:\n             <   0: minor version numbers must be identical.\n             >=  0: the lowest valid minor version for the major number allowed.\n             >  99: Do not check the minor version number, it's immaterial.\n\n   piSymbol: The plugin's object creator's unquoted function name. When this\n             symbol is looked-up, the defined version rule is applied.\n\n   Note: a plugin may not have a major.minor version number greater than the\n         program's major.minor version number unless either one is unreleased.\n         Unreleased versions can use any version. However, a message is issued.\n*/\n#define XrdVERSIONPLUGINRULES \\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdAccAuthorizeObject         )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdBwmPolicyObject            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCksCalcInit                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCksInit                    )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCmsGetClient               )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdCryptosslFactoryObject     )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdFileCacheGetDecision       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdgetProtocol                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdgetProtocolPort            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdHttpGetSecXtractor         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSysLogPInit                )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOssGetStorageSystem        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOssStatInfoInit            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdOucGetCache                )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdOucgetName2Name            )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecGetProtocol             )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecgetService              )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiAuthzFun             )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiAuthzInit            )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiAuthzKey             )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiGMAPFun              )\\\n        XrdVERSIONPLUGIN_Rule(Optional,  4,  0, XrdSecgsiVOMSFun              )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecgsiVOMSInit             )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolgsiInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolgsiObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolkrb5Init        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolkrb5Object      )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolpwdInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolpwdObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolsssInit         )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolsssObject       )\\\n        XrdVERSIONPLUGIN_Rule(DoNotChk,  4,  0, XrdSecProtocolunixInit        )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSecProtocolunixObject      )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSfsGetFileSystem           )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSfsGetFileSystem2          )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdSysGetXAttrObject          )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdClGetMonitor               )\\\n        XrdVERSIONPLUGIN_Rule(Required,  4,  0, XrdClGetPlugIn                )\\\n                             { 0, 0, 0,  0,  0, 0}\n\n#define XrdVERSIONPLUGIN_Maxim(procMode, majorVer, minorVer, piPfx, piSfx)\\\n           {#piPfx #piSfx, static_cast<char>(strlen(#piPfx)),\\\n                           static_cast<char>(strlen(#piSfx)),\\\n            XrdVERSIONPLUGIN_##procMode, majorVer, minorVer},\n\n/* Each generic rule must be defined by the XrdVERSIONPLUGIN_Maxim macro which\n   takes five arguments. The first three are exactly the same as defined for\n   XrdVERSIONPLUGIN_Rule. The last two define a pefix/suffix match for the\n   symbol being looked up, as follows:\n\n   piPfx:    The leading  characters of the plugin's object creator's unquoted\n             function name. When this symbol is looked-up, the defined version\n             rule is applied if the suffix, if any, also matches.\n\n   piSfx:    The trailing characters of the plugin's object creator's unquoted\n             function name. When this symbol is looked-up, the defined version\n             rule is applied if the prefix, if any, also matches.\n\n   Note: An attempt is made to match the symbol using specific rules defined\n         by XRDVERSIONPLUGIN_Rule before using any generic rules. If a match\n         is found the same processing as for specific rules is applied.\n*/\n#define XrdVERSIONPLUGINMAXIMS\\\n        XrdVERSIONPLUGIN_Maxim(DoNotChk,  4,  0, XrdSecProtocol, Init         )\\\n        XrdVERSIONPLUGIN_Maxim(Required,  4,  0, XrdSecProtocol, Object       )\\\n        XrdVERSIONPLUGIN_Maxim(Optional,  4,  0, XrdCrypto,      FactoryObject)\\\n                             { 0, 0, 0,  0,  0, 0}\n\n/* The following defines the list of plugins that are included in the base\n   code and are to be strictly name versioned upon loading (i.e. fallback\n   to an unversioned name is not allowed). This is enforced by XrdOucVerName.\n*/\n#define XrdVERSIONPLUGINSTRICT       \\\n        {\"libXrdBwm.so\",             \\\n         \"libXrdCksCalczcrc32.so\",   \\\n         \"libXrdCryptossl.so\",       \\\n         \"libXrdFileCache.so\",       \\\n         \"libXrdHttp.so\",            \\\n         \"libXrdOssSIgpfsT.so\",      \\\n         \"libXrdPss.so\",             \\\n         \"libXrdSec.so\",             \\\n         \"libXrdSecgsi.so\",          \\\n         \"libXrdSecgsiAUTHZVO.so\",   \\\n         \"libXrdSecgsiGMAPDLAP.so\",  \\\n         \"libXrdSeckrb5.so\",         \\\n         \"libXrdSecpwd.so\",          \\\n         \"libXrdSecsss.so\",          \\\n         \"libXrdSecunix.so\",         \\\n         \"libXrdXrootd.so\",          \\\n         0}\n#endif\n"], "filenames": ["packaging/rhel/xrootd.spec.in", "src/XrdCl/XrdClDefaultEnv.cc", "src/XrdSecgsi.cmake", "src/XrdSecgsi/XrdSecgsiGMAPFunLDAP.cc", "src/XrdVersionPlugin.hh"], "buggy_code_start_loc": [812, 673, 8, 39, 173], "buggy_code_end_loc": [813, 674, 116, 39, 174], "fixing_code_start_loc": [811, 672, 7, 40, 172], "fixing_code_end_loc": [811, 672, 99, 49, 172], "type": "CWE-78", "message": "ROOT xrootd version 4.6.0 and below is vulnerable to an unauthenticated shell command injection resulting in remote code execution", "other": {"cve": {"id": "CVE-2017-1000215", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-17T20:29:00.277", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ROOT xrootd version 4.6.0 and below is vulnerable to an unauthenticated shell command injection resulting in remote code execution"}, {"lang": "es", "value": "ROOT xrootd en su versi\u00f3n 4.6.0 y anteriores es vulnerable a una inyecci\u00f3n de comandos shell sin autenticaci\u00f3n que tiene como resultado una ejecuci\u00f3n remota de c\u00f3digo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xrootd:xrootd:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.6.0", "matchCriteriaId": "2BE6F995-C9F7-42E9-94EE-8B4EFEFC2EA8"}]}]}], "references": [{"url": "https://github.com/xrootd/xrootd/blob/befa2e627a5a33a38c92db3e57c07d8246a24acf/src/XrdSecgsi/XrdSecgsiGMAPFunLDAP.cc#L85", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/xrootd/xrootd/blob/v4.6.1/docs/ReleaseNotes.txt", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/xrootd/xrootd/commit/befa2e627a5a33a38c92db3e57c07d8246a24acf", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201903-11", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/xrootd/xrootd/commit/befa2e627a5a33a38c92db3e57c07d8246a24acf"}}