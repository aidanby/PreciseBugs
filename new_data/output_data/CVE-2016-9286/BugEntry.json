{"buggy_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass usersController extends expController {\n    public $basemodel_name = 'user';\n//    protected $remove_permissions = array(\n//        'create',\n//        'edit'\n//    );\n    protected $manage_permissions = array(\n        'toggle_extension' => 'Activate Extensions',\n        'kill_session'     => 'End Sessions',\n        'boot_user'        => 'Boot Users',\n        'userperms'        => 'User Permissions',\n        'groupperms'       => 'Group Permissions',\n        'import'           => 'Import Users',\n        'export'           => 'Export Users',\n        'update'           => 'Update Users',\n        'show'             => 'Show User',\n        'showall'          => 'Show Users',\n        'getUsersByJSON'   => 'Get Users',\n    );\n\n    static function displayname() {\n        return gt(\"User Manager\");\n    }\n\n    static function description() {\n        return gt(\"This is the user management module. It allows for creating user, editing user, etc.\");\n    }\n\n    static function hasSources() {\n        return false;\n    }\n\n    static function hasContent() {\n        return false;\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    public function manage() {\n        global $user;\n\n        expHistory::set('manageable', $this->params);\n//        $limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n//        $order = empty($this->config['order']) ? 'username' : $this->config['order'];\n        if ($user->is_system_user == 1) {\n//            $filter = 1; //'1';\n            $where = '';\n        } elseif ($user->isSuperAdmin()) {\n//            $filter = 2; //\"is_system_user != 1\";\n            $where = \"is_system_user != 1\";\n        } else {\n//            $filter = 3; //\"is_admin != 1\";\n            $where = \"is_admin != 1\";\n        }\n        $page = new expPaginator(array(\n                    'model'=>'user',\n                    'where'=>$where,\n//                    'limit'=>$limit,\n//                    'order'=>$order,\n                    'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller'=>$this->baseclassname,\n                    'action'=>$this->params['action'],\n                    'columns'=>array(\n                        gt('Username')=>'username',\n                        gt('First Name')=>'firstname',\n                        gt('Last Name')=>'lastname',\n                        gt('Is Admin')=>'is_acting_admin',\n                    )\n                ));\n\n        assign_to_template(array('page'=>$page));\n//        assign_to_template(array(\n//            'filter' => $filter\n//        ));\n    }\n\n    public function create() {\n        redirect_to(array('controller' => 'users', 'action' => 'edituser'));\n//        $this->edituser();\n    }\n\n    public function edituser() {\n        global $user, $db;\n\n        // set history\n        expHistory::set('editable', $this->params);\n        expSession::set(\"userkey\", sha1(microtime()));\n        expSession::clearCurrentUserSessionCache();\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or editing own account.\n        if ($user->isAdmin() || ($user->id == $id && !$user->globalPerm('prevent_profile_change'))) {\n            $u = new user($id);\n            if ($u->isSuperAdmin() && $user->isActingAdmin()) {  // prevent regular admin's from editing super-admins\n                flash('error', gt('You do not have the proper permissions to edit this user'));\n                expHistory::back();\n            }\n        } else {\n            flash('error', gt('You do not have the proper permissions to edit this user'));\n            expHistory::back();\n        }\n        $active_extensions = $db->selectObjects('profileextension', 'active=1', 'rank');\n\n        //If there is no image uploaded, use the default avatar\n        if (empty($u->image)) $u->image = PATH_RELATIVE . \"framework/modules/users/assets/images/avatar_not_found.jpg\";\n\n        assign_to_template(array(\n            'edit_user'  => $u,\n            'extensions' => $active_extensions,\n            \"userkey\"    => expSession::get(\"userkey\")\n        ));\n\n        if ($user->isAdmin()) {\n            $page = new expPaginator(array(\n                'model'      => 'group',\n                'where'      => 1,\n                'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n                'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n                'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'columns'    => array(\n                    gt('Name')        => 'name',\n                    gt('Description') => 'description',\n                ),\n                'controller' => $this->baseclassname,\n                'action'     => $this->params['action'],\n            ));\n\n            assign_to_template(array(\n                'groups' => $page,\n                'mygroups' => $u->getGroupMemberships(),\n            ));\n        }\n    }\n\n    public function update() {\n        global $user, $db;\n\n        // get the id of user we are editing, if there is one\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n        if ((($user->id == $id) || $user->isAdmin()) && $this->params['userkey'] != expSession::get(\"userkey\")) expHistory::back();\n\n        // make sure this user should be updating user accounts\n        if (!$user->isLoggedIn() && SITE_ALLOW_REGISTRATION == 0) {\n            flash('error', gt('This site does not allow user registrations'));\n            expHistory::back();\n        } elseif (!$user->isAdmin() && ($user->isLoggedIn() && $user->id != $id) && !$user->globalPerm('prevent_profile_change')) {\n            flash('error', gt('You do not have permission to edit this user account'));\n            expHistory::back();\n        }\n\n        // if this is a new user account we need to check the password.\n        // the password fields wont come thru on an edit. Otherwise we will\n        // just update the existing account.\n        if (!empty($id)) {\n            $u = new user($id);\n            $u->update($this->params);\n            if ($user->isAdmin() && $user->id != $id) {\n                flash('message', gt('Account information for') . ' ' . $u->username . ' ' . gt('has been updated.'));\n            } else {\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your account information has been updated.'));\n            }\n            if ($user->id == $id) {\n                $_SESSION[SYS_SESSION_KEY]['user'] = $u;\n                $user = $u;\n            }\n        } else {\n            $u = new user($this->params);\n            $ret = $u->setPassword($this->params['pass1'], $this->params['pass2']);\n            if ($ret != true) expValidator::failAndReturnToForm($ret, $this->params);\n            $u->save();\n            if ($user->isAdmin()) {\n                flash('message', gt('Created new user account for') . ' ' . $u->username);\n            } else {\n                user::login($u->username, $this->params['pass1']);\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your new account has been created.'));\n            }\n        }\n\n        // update the user profiles\n        if (!empty($u->id)) {\n            $this->params['user_id'] = $u->id;\n            // get the active profile extensions and save them out\n            $active_extensions = $db->selectObjects('profileextension', 'active=1');\n            foreach ($active_extensions as $pe) {\n                if (is_file(BASE . $pe->classfile)) {\n                    include_once(BASE . $pe->classfile);\n                    $ext = new $pe->classname();\n                    $db->delete($ext->tablename, 'user_id=' . $u->id);\n                    $ext->update($this->params);\n                }\n            }\n        }\n\n        // update group membership assignment\n        if (!empty($this->params['member'])) {\n            $old_groups = $db->selectObjects('groupmembership', 'member_id=' . $u->id);\n//            $db->delete('groupmembership', 'member_id=' . $u->id);  // start from scratch\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            foreach ($this->params['member'] as $grp) {\n                $memb->group_id = $grp;\n                $memb->is_admin = false;\n                foreach ($old_groups as $oldgroup) {\n                    if ($oldgroup->group_id == $grp) {\n                        if ($oldgroup->is_admin) $memb->is_admin = true;  // retain group admin setting\n                    }\n                }\n                $db->insertObject($memb, 'groupmembership');\n            }\n            if ($u->id == $user->id) expSession::triggerRefresh();\n        }\n\n        // if this is a new account then we will check to see if we need to send\n        // a welcome message or admin notification of new accounts.\n        if (empty($id)) {\n            // Calculate Group Memberships for newly created users.  Any groups that\n            // are marked as 'inclusive' automatically pick up new users.  This is the part\n            // of the code that goes out, finds those groups, and makes the new user a member\n            // of them.\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            // Also need to process the groupcodes, for promotional signup\n//            $code_where = '';\n//            if (isset($this->params['groupcode']) && $this->params['groupcode'] != '') {\n//                $code_where = \" OR code='\" . $this->params['groupcode'] . \"'\";\n//            }\n            // Add to default plus any groupcode groups\n//            foreach ($db->selectObjects('group', 'inclusive=1' . $code_where) as $g) {\n            foreach ($db->selectObjects('group', 'inclusive=1') as $g) {\n                $memb->group_id = $g->id;\n                $db->insertObject($memb, 'groupmembership');\n            }\n\n            // if we added the user to any group than we need to reload their permissions\n//            expPermissions::load($u);  //FIXME why are we doing this? this loads the edited user perms over the current user???\n\n            //signup email stuff\n            if (USER_REGISTRATION_SEND_WELCOME && !empty($u->email)) {\n                $msg = $u->firstname . \", \\n\\n\";\n                $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $u->firstname, $u->lastname, $u->username);\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                ));\n\n                flash('message', gt('A welcome email has been sent to') . ' ' . $u->email);\n            }\n\n            // send and email notification to the admin of the site.\n            if (USER_REGISTRATION_SEND_NOTIF && !$user->isAdmin()) {\n                $msg = gt(\"When\") . \": \" . date(\"F j, Y, g:i a\") . \"\\n\\n\";\n                $msg .= gt(\"Their name is\") . \": \" . $u->firstname . \" \" . $u->lastname . \"\\n\\n\";\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => trim(USER_REGISTRATION_ADMIN_EMAIL),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_NOTIF_SUBJECT,\n                ));\n            }\n        }\n\n        // we need to reload our updated profile if we just edited our own account\n        if ($id == $user->id) {\n            $user->getUserProfile();\n//            expPermissions::load($user);  // not sure this is necessary since we can't add groups here\n        }\n\n        expHistory::back();\n    }\n\n    public function delete() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user accounts'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No user selected.'));\n            expHistory::back();\n        }\n\n        // remove group memeberships\n        $db->delete('groupmembership', 'member_id=' . $this->params['id']);\n\n        // remove user permissions\n        $db->delete('userpermission', 'uid=' . $this->params['id']);\n\n        //remove user profiles\n        $active_extensions = $db->selectObjects('profileextension', 'active=1');\n        foreach ($active_extensions as $pe) {\n            if (is_file(BASE . $pe->classfile)) {\n                include_once(BASE . $pe->classfile);\n                $ext = new $pe->classname();\n                $db->delete($ext->table, 'user_id=' . $this->params['id']);\n            }\n        }\n\n        // remove user address\n        $address = new address();\n        $db->delete($address->table, 'user_id=' . $this->params['id']);\n\n        parent::delete();\n    }\n\n    public function manage_sessions() {\n//        global $db, $user;\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n\n        //cleans up any old sessions\n        if (SESSION_TIMEOUT_ENABLE == true) {\n            $db->delete('sessionticket', 'last_active < ' . (time() - SESSION_TIMEOUT));\n//        } else {\n//            $db->delete('sessionticket', '1');\n        }\n\n        if (isset($this->params['id']) && $this->params['id'] == 0) {\n            $sessions = $db->selectObjects('sessionticket', \"uid<>0\");\n            $filtered = 1;\n        } else {\n            $sessions = $db->selectObjects('sessionticket');\n            $filtered = 0;\n        }\n\n//\t    $sessions = $db->selectObjects('sessionticket');\n        for ($i = 0, $iMax = count($sessions); $i < $iMax; $i++) {\n            $sessions[$i]->user = new user($sessions[$i]->uid);\n            if ($sessions[$i]->uid == 0) {\n                $sessions[$i]->user->id = 0;\n            }\n            $sessions[$i]->duration = expDateTime::duration($sessions[$i]->last_active, $sessions[$i]->start_time);\n        }\n\n        assign_to_template(array(\n            'sessions' => $sessions,\n            'filter'   => $filtered\n        ));\n    }\n\n    public function kill_session() {\n        global $user, $db;\n        $ticket = $db->selectObject('sessionticket', \"ticket='\" . preg_replace('/[^A-Za-z0-9.]/', '', $this->params['ticket']) . \"'\");\n        if ($ticket) {\n            $u = new user($ticket->uid);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', \"ticket='\" . $ticket->ticket . \"'\");\n            }\n        }\n        expHistory::back();\n    }\n\n    public function boot_user() {\n        global $user, $db;\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', 'uid=' . $u->id);\n            }\n        }\n        expHistory::back();\n    }\n\n    /**\n    \u00a0*\u00a0This function scans two directories and searches for php files to add to the extensions database.\n     * If you have added new extensions since the last time you have visited the page, it will add them to the database\n     * in effect enabling your new extension to be tacked onto users profiles. You then have to enable it in the menu, but at least\n     * now it is in the system and when the user goes to edit his profile, it will check for extensions and this one will be in!\n     *\n    \u00a0*\u00a0@global\u00a0string\u00a0This function uses the global $db save information through the Exponenet database connection.\n    \u00a0*/\n    public function manage_extensions() {\n        global $db;\n\n        // set history\n        expHistory::set('manageable', $this->params);\n\n        // Lets find all the user profiles availabe and then see if they are\n        // in the database yet.  If not we will add them.\n        $ext_dirs = array(\n            'framework/modules/users/extensions',\n            'themes/' . DISPLAY_THEME . '/modules/users/extensions'\n        );\n        foreach ($ext_dirs as $dir) {\n            if (is_readable(BASE . $dir)) {\n                $dh = opendir(BASE . $dir);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_file(BASE . \"$dir/$file\") && is_readable(BASE . \"$dir/$file\") && substr($file, 0, 1) != '_' && substr($file, 0, 1) != '.') {\n                        include_once(BASE . \"$dir/$file\");\n                        $classname = substr($file, 0, -4);\n                        $class = new $classname();\n                        $extension = $db->selectObject('profileextension', \"title='\" . $class->name() . \"'\");\n                        if (empty($extension->id)) {\n                            $pe = new profileextension();\n                            $pe->title = $class->name();\n                            $pe->body = $class->description();\n                            $pe->classfile = \"$dir/$file\";\n                            $pe->classname = $classname;\n                            $pe->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $page = new expPaginator(array(\n            'model'      => 'profileextension',\n            'where'      => 1,\n            'limit'      => 25,\n            'order'      => 'title',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'title',\n                gt('Description') => 'body',\n                gt('Active')      => 'active'\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    public function manage_groups() {\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'      => 'group',\n            'where'      => 1,\n//            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'name',\n                gt('Description') => 'description',\n                gt('Type')        => 'inclusive',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        foreach ($page->records as $key=>$group) {\n            $page->records[$key]->members = group::getUsersInGroup($group->id);\n        }\n\n        assign_to_template(array(\n            'page' => $page,\n        ));\n    }\n\n    public function reset_password() {\n        expHistory::set('editable', $this->params);\n    }\n\n    public function send_new_password() {\n        global $db;\n\n        // find the user\n        $this->params['username'] = expString::escape($this->params['username']);\n        $u = user::getUserByName($this->params['username']);\n        if (empty($u)) {\n            $u = user::getUserByEmail($this->params['username']);\n            if (!empty($u) && $u->count > 1) {\n                expValidator::failAndReturnToForm(gt('That email address applies to more than one user account, please enter your username instead.'));\n            }\n        }\n        $u = new user($u->id);\n\n        if (!expValidator::check_antispam($this->params)) {\n            expValidator::failAndReturnToForm(gt('Anti-spam verification failed.  Please try again.'), $this->params);\n        } elseif (empty($u->id)) {\n            expValidator::failAndReturnToForm(gt('We were unable to find an account with that username/email'), $this->params);\n        } elseif (empty($u->email)) {\n            expValidator::failAndReturnToForm(gt('Your account does not appear to have an email address.  Please contact the site administrators to reset your password'), $this->params);\n        } elseif ($u->isAdmin()) {\n            expValidator::failAndReturnToForm(gt('You cannot reset passwords for an administrator account.'), $this->params);\n        }\n\n        $tok = new stdClass();\n        $tok->uid = $u->id;\n        $tok->expires = time() + 2 * 3600;\n        $tok->token = md5(time()) . uniqid('');\n\n        $email = $template = expTemplate::get_template_for_action($this, 'email/password_reset_email', $this->loc);\n        $email->assign('token', $tok);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'text_message' => expString::html2text($msg),\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('Password Reset Requested'),\n        ));\n\n        $db->delete('passreset_token', 'uid=' . $u->id);\n        $db->insertObject($tok, 'passreset_token');\n        flash('message', gt('An email has been sent to you with instructions on how to finish resetting your password.') . '<br><br>' .\n            gt('This new password request is only valid for 2 hours.  If you have not completed the password reset process within 2 hours, the new password request will expire.'));\n\n        expHistory::back();\n    }\n\n    public function confirm_password_reset() {\n        global $db;\n\n        $db->delete('passreset_token', 'expires < ' . time());\n        $tok = $db->selectObject('passreset_token', 'uid=' . intval($this->params['uid']) . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', expString::escape($this->params['token'])) . \"'\");\n        if ($tok == null) {\n            flash('error', gt('Your password reset request has expired.  Please try again.'));\n            expHistory::back();\n        }\n\n        // create the password\n        $newpass = '';\n        for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n            $num = mt_rand(48, 122);\n            if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n            else $i--;\n        }\n\n        // look up the user\n        $u = new user($tok->uid);\n\n        // get the email message body and render it\n        $email = $template = expTemplate::get_template_for_action($this, 'email/confirm_password_email', $this->loc);\n        $email->assign('newpass', $newpass);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n\n        // send the new password to the user\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'text_message' => expString::html2text($msg),\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('The account password for') . ' ' . HOSTNAME . ' ' . gt('was reset'),\n        ));\n\n        // Save new password\n        $u->update(array('password' => user::encryptPassword($newpass)));\n\n        // cleanup the reset token\n        $db->delete('passreset_token', 'uid=' . $tok->uid);\n\n        flash('message', gt('Your password has been reset and the new password has been emailed to you.'));\n\n        // send the user the login page.\n        redirect_to(array('controller' => 'login', 'action' => 'loginredirect'));\n    }\n\n    public function change_password() {\n        global $user;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : $user->id;\n\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $isuser = ($user->id == $id) ? 1 : 0;\n            $u = new user($id);\n        } else {\n            flash('error', gt('You do not have the proper permissions to do that'));\n            expHistory::back();\n        }\n        assign_to_template(array(\n            'u'      => $u,\n            'isuser' => $isuser\n        ));\n    }\n\n    public function save_change_password() {\n        global $user;\n\n        $isuser = ($this->params['uid'] == $user->id) ? 1 : 0;\n\n        if (!$user->isAdmin() && !$isuser) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (($isuser && empty($this->params['password'])) || (!empty($this->params['password']) && $user->password != user::encryptPassword($this->params['password']))) {\n            flash('error', gt('The current password you entered is not correct.'));\n            expHistory::returnTo('editable');\n        }\n        //eDebug($user);\n        $u = new user(intval($this->params['uid']));\n\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        //eDebug($u, true);\n        if (is_string($ret)) {\n            flash('error', $ret);\n            expHistory::returnTo('editable');\n        } else {\n            $params = array();\n            $params['is_admin'] = !empty($u->is_admin);\n            $params['is_acting_admin'] = !empty($u->is_acting_admin);\n            $u->update($params);\n        }\n\n        if (!$isuser) {\n            flash('message', gt('The password for') . ' ' . $u->username . ' ' . gt('has been changed.'));\n        } else {\n            $user->password = $u->password;\n            flash('message', gt('Your password has been changed.'));\n        }\n        expHistory::back();\n    }\n\n    public function edit_userpassword() {\n        expHistory::set('editable', $this->params);\n        if (empty($this->params['id'])) {\n            flash('error', gt('You must specify the user whose password you want to change'));\n            expHistory::back();\n        }\n\n        $u = new user($this->params['id']);\n        assign_to_template(array(\n            'u' => $u\n        ));\n    }\n\n    public function update_userpassword() {\n        global $user;\n\n        if (!$user->isAdmin() && $this->params['id'] != $user->id) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            expValidator::failAndReturnToForm(gt('You must specify the user whose password you want to change'), $this->params);\n        }\n\n        if (empty($this->params['new_password1'])) {\n            expValidator::setErrorField('new_password1');\n            expValidator::failAndReturnToForm(gt('You must specify a new password for this user.'), $this->params);\n        }\n\n        if (empty($this->params['new_password2'])) {\n            expValidator::setErrorField('new_password2');\n            expValidator::failAndReturnToForm(gt('You must confirm the password.'), $this->params);\n\n        }\n\n        $u = new user($this->params['id']);\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        if (is_string($ret)) {\n            expValidator::setErrorField('new_password1');\n            $this->params['new_password1'] = '';\n            $this->params['new_password2'] = '';\n            expValidator::failAndReturnToForm($ret, $this->params);\n        } else {\n            $u->save(true);\n        }\n\n        flash('message', gt('Password reset for user') . ' ' . $u->username);\n        expHistory::back();\n    }\n\n    public function edit_group() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : null;\n        $group = new group($id);\n        $group->redirect = $db->selectValue('section', 'id', \"sef_name='\" . $group->redirect . \"'\");\n        assign_to_template(array(\n            'record' => $group\n        ));\n    }\n\n    public function manage_group_memberships() {\n        global $db, $user;\n//        expHistory::set('manageable', $this->params);\n\n        $memb = $db->selectObject('groupmembership', 'member_id=' . $user->id . ' AND group_id=' . $this->params['id'] . ' AND is_admin=1');\n\n        $perm_level = 0;\n        if ($memb) $perm_level = 1;\n        if (expPermissions::check('user_management', expCore::makeLocation('administrationmodule'))) $perm_level = 2;\n\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n        $users = user::getAllUsers(0);\n\n        $members = array();\n        $admins = array();\n        foreach ($db->selectObjects('groupmembership', 'group_id=' . $group->id) as $m) {\n            $members[] = $m->member_id;\n            if ($m->is_admin == 1) {\n                $admins[] = $m->member_id;\n            }\n        }\n\n        for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n            if (in_array($users[$i]->id, $members)) {\n                $users[$i]->is_member = 1;\n            } else {\n                $users[$i]->is_member = 0;\n            }\n\n            if (in_array($users[$i]->id, $admins)) {\n                $users[$i]->is_admin = 1;\n            } else {\n                $users[$i]->is_admin = 0;\n            }\n        }\n\n        //$limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n        $page = new expPaginator(array(\n//          'model'=>'user',\n            'records'    => $users,\n            'where'      => 1,\n//          'limit'=>9999,  // unless we're showing all users on a page at once, there's no way to\n            // add all users to a group, since it's rebuilding the group on save...\n            'order'      => empty($this->config['order']) ? 'username' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Username')   => 'username',\n                gt('First Name') => 'firstname',\n                gt('Last Name')  => 'lastname',\n                gt('Is Member')  => 'is_member',\n                gt('Is Admin')   => 'is_admin',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page'       => $page,\n            'group'      => $group,\n            'users'      => $users,\n            'canAdd'     => (count($members) < count($users) ? 1 : 0),\n            'hasMember'  => (count($members) > 0 ? 1 : 0),\n            'perm_level' => $perm_level,\n        ));\n    }\n\n    public function update_group() {\n        global $db;\n\n        $group = new group();\n        if (!empty($this->params['redirect'])) {\n            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . intval($this->params['redirect']));\n        }\n        $group->update($this->params);\n        expHistory::back();\n    }\n\n    public function delete_group() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user groups'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No group selected.'));\n            expHistory::back();\n        }\n\n        // remove group members\n        $db->delete('groupmembership', 'group_id=' . $this->params['id']);\n\n        // remove group permissions\n        $db->delete('grouppermission', 'gid=' . $this->params['id']);\n\n        // remove group\n        $db->delete('group', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function toggle_extension() {\n        global $db;\n        if (isset($this->params['id'])) $db->toggle('profileextension', 'active', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function update_memberships() {\n//        global $user, $db;\n        global $db;\n\n        //$memb = $db->selectObject('groupmembership','member_id='.$user->id.' AND group_id='.$this->params['id'].' AND is_admin=1');\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n\n        $db->delete('groupmembership', 'group_id=' . $group->id);\n        $memb = new stdClass();\n        $memb->group_id = $group->id;\n        if ($this->params['memdata'] != \"\") {\n            foreach ($this->params['memdata'] as $u => $str) {\n                $memb->member_id = $u;\n                $memb->is_admin = $str['is_admin'];\n                $db->insertObject($memb, 'groupmembership');\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function getUsersByJSON() {\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get 25\n        $startIndex = 0; // default start at 0\n        $sort = null; // default don't sort\n        $dir = 'asc'; // default sort dir is asc\n        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if (strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if (strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if (strlen($this->params['sort']) > 0) {\n            $sort = expString::escape($this->params['sort']);\n            if ($sort = 'id') $sort = 'username';\n        }\n\n        if (!empty($this->params['filter'])) {\n            switch ($this->params['filter']) {\n                case '1' :\n                    $filter = '';\n                    break;\n                case '2' :\n                    $filter = \"is_system_user != 1\";\n                    break;\n                case '3' :\n                    $filter = \"is_admin != 1\";\n            }\n        }\n\n//        if (!empty($_GET['filter'])) {\n//            switch ($_GET['filter']) {\n//                case '1' :\n//                    $filter = '';\n//                    break;\n//                case '2' :\n//                    $filter = \"is_system_user != 1\";\n//                    break;\n//                case '3' :\n//                    $filter = \"is_admin != 1\";\n//            }\n//        }\n\n        // Sort dir?\n        if ((strlen($this->params['dir']) > 0) && ($this->params['dir'] == 'desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n\n        if (!empty($this->params['query'])) {\n\n            $this->params['query'] = expString::escape($this->params['query']);\n            $totalrecords = $this->$modelname->find('count', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\");\n\n            $users = $this->$modelname->find('all', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\", $sort . ' ' . $dir, $results, $startIndex);\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n        } else {\n\n            $totalrecords = $this->$modelname->find('count', $filter);\n\n            $users = $this->$modelname->find('all', $filter, $sort . ' ' . $dir, $results, $startIndex);\n\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    public function viewuser() {\n        global $user;\n\n        if (!empty($this->params['id']) && $user->isAdmin()) {\n            $u = new user($this->params['id']);\n        } elseif (!empty($user->id)) {\n            $u = $user;\n        } else {\n            flash('error', gt('You may not view this user'));\n            expHistory::back();\n        }\n        $address = new address();\n\n        $billings = $address->find('all', 'user_id=' . $u->id . ' AND is_billing = 1');\n        $shippings = $address->find('all', 'user_id=' . $u->id . ' AND is_shipping = 1');\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . DB_TABLE_PREFIX . '_orders o, ' . DB_TABLE_PREFIX . '_billingmethods b, ';\n        $sql .= DB_TABLE_PREFIX . '_order_status os, ';\n        $sql .= DB_TABLE_PREFIX . '_order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0 AND user_id =' . $u->id;\n\n        $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n        $order = !empty($this->params['order']) ? $this->params['order'] : 'purchased';\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'DESC';\n        //eDebug($sql, true);\n        $orders = new expPaginator(array(\n            //'model'=>'order',\n            'sql'        => $sql,\n            'limit'      => $limit,\n            'order'      => $order,\n            'dir'        => $dir,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Order #')        => 'invoice_id',\n                gt('Total')          => 'total',\n                gt('Date Purchased') => 'purchased',\n//                gt('Type')           => 'order_type_id',\n                gt('Status')         => 'order_status_id',\n                gt('Ref')            => 'orig_referrer',\n            ),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'u'         => $u,\n            'billings'  => $billings,\n            'shippings' => $shippings,\n            'orders'    => $orders,\n        ));\n    }\n\n    public function userperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array();\n            $modclass = expModules::getModuleClassName(($loc->mod));\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n            $have_users = 0;\n            foreach (user::getAllUsers(false) as $u) {\n                $have_users = 1;\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkUser($u, $perm, $loc, true)) {\n                        $u->$perm = 1;\n                    } else if (expPermissions::checkUser($u, $perm, $loc)) {\n                        $u->$perm = 2;\n                    } else {\n                        $u->$perm = 0;\n                    }\n                }\n                $users[] = $u;\n            }\n\n            $p[gt(\"User Name\")] = 'username';\n            $p[gt(\"First Name\")] = 'firstname';\n            $p[gt(\"Last Name\")] = 'lastname';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 1,\n                'have_users' => $have_users,\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function userperms_save() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $u) {\n            expPermissions::revokeAll($u, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $user_str) {\n            $perms = array_keys($user_str);\n            $u = user::getUserById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grant($u, $perms[$i], $loc);\n            }\n\n            if ($k == $user->id) {\n                expPermissions::load($user);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function groupperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array(); // users = groups\n            $modclass = expModules::getModuleClassName($loc->mod);\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n\n            foreach (group::getAllGroups() as $g) {\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkGroup($g, $perm, $loc, true)) {\n                        $g->$perm = 1;\n                    } else if (expPermissions::checkGroup($g, $perm, $loc)) {\n                        $g->$perm = 2;\n                    } else {\n                        $g->$perm = 0;\n                    }\n                }\n                $users[] = $g;\n            }\n\n            $p[gt(\"Group\")] = 'username';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 0,\n                'is_group'   => 1,\n                'have_users' => count($users) > 0, // users = groups\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function groupperms_save() {\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $g) {\n            expPermissions::revokeAllGroup($g, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $group_str) {\n            $perms = array_keys($group_str);\n            $g = group::getGroupById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grantGroup($g, $perms[$i], $loc);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function import() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n//            //Setup the mete data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"users\");\n//            $form->meta(\"action\", \"import_users_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('User Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n            ));\n        }\n    }\n\n    public function import_users_mapper() {\n        //Check to make sure the user filled out the required input.\n        //FIXME needs to be the newer fail form\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/');\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n\n        $colNames = array(\n            \"none\"      => gt('--Disregard this column--'),\n            \"username\"  => gt('Username'),\n            \"password\"  => gt('Password'),\n            \"firstname\" => gt('First Name'),\n            \"lastname\"  => gt('Last Name'),\n            \"email\"     => gt('Email Address')\n        );\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"users\");\n            $form->meta(\"action\", \"import_users_process\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                    if (array_key_exists($headerinfo[$i], $colNames)) {\n                        $default = $headerinfo[$i];\n                    } else {\n                        $default = \"none\";\n                    }\n                } else {\n                    $title = $lineInfo[$i];\n                    $default = \"none\";\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol($default, $colNames));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_users_process() {\n        if (in_array(\"username\", $this->params[\"column\"]) == false) {\n            $unameOptions = array(\n                \"FILN\"    => gt('First Initial / Last Name'),\n                \"FILNNUM\" => gt('First Initial / Last Name / Random Number'),\n                \"EMAIL\"   => gt('Email Address'),\n                \"FNLN\"    => gt('First Name / Last Name'));\n        } else {\n            $unameOptions = array(\"INFILE\" => gt('Username Specified in CSV File'));\n        }\n\n        if (in_array(\"password\", $this->params[\"column\"]) == false) {\n            $pwordOptions = array(\n                \"RAND\"    => gt('Generate Random Passwords'),\n                \"DEFPASS\" => gt('Use the Default Password Supplied Below'));\n        } else {\n            $pwordOptions = array(\"INFILE\" => gt('Password Specified in CSV File'));\n        }\n        if (count($pwordOptions) == 1) {\n            $disabled = true;\n        } else {\n            $disabled = false;\n        }\n\n//        $form = new form();\n//        $form->meta(\"controller\", \"users\");\n//        $form->meta(\"action\", \"import_users_display\");\n//        $form->meta(\"column\", $this->params[\"column\"]);\n//        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n//        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n//        $form->meta(\"filename\", $this->params[\"filename\"]);\n//        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n//\n//        $form->register(\"unameOptions\", gt('User Name Generations Options'), new dropdowncontrol(\"INFILE\", $unameOptions));\n//        $form->register(\"pwordOptions\", gt('Password Generation Options'), new dropdowncontrol(\"defpass\", $pwordOptions));\n//        $form->register(\"pwordText\", gt('Default Password'), new textcontrol(\"\", 10, $disabled));\n//        $form->register(\"update\", gt('Update users already in database, instead of creating new user?'), new checkboxcontrol(0, 0));\n//        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n//            \"form_html\" => $form->tohtml(),\n            'uname_options' => $unameOptions,\n            'pword_options' => $pwordOptions,\n            'pword_disabled' => $disabled,\n            'params' => $this->params\n        ));\n    }\n\n    public function import_users_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n//                    switch ($this->params[\"pwordOptions\"]) {\n//                        case \"RAND\":\n//                            $newpass = \"\";\n//                            for ($i = 0; $i < mt_rand(12, 20); $i++) {\n//                                $num = mt_rand(48, 122);\n//                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n//                                else $i--;\n//                            }\n//                            $userinfo['clearpassword'] = $newpass;\n//                            break;\n//                        case \"DEFPASS\":\n//                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n//                            break;\n//                    }\n//\n//                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {\n                                $suffix = '-rand-' . mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = '-rand-' . mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_users_add() {\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importuser'])) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if ($this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n                    switch ($this->params[\"pwordOptions\"]) {\n                        case \"RAND\":\n                            $newpass = \"\";\n                            for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n                                $num = mt_rand(48, 122);\n                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n                                else $i--;\n                            }\n                            $userinfo['clearpassword'] = $newpass;\n                            break;\n                        case \"DEFPASS\":\n                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n                            break;\n                    }\n\n                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {  // username exists because we already created it\n                                $suffix = mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $newuser = new user($userinfo);\n                    $newuser->update();\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                    if (USER_REGISTRATION_SEND_WELCOME && $this->params['sendemail'] && !empty($newuser->email)) {\n                        $msg = $newuser->firstname . \", \\n\\n\";\n                        $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $newuser->firstname, $newuser->lastname, $newuser->username);\n                        $msg .= \"/n/nYour new password is: \".$userinfo['clearpassword'];\n                        $mail = new expMail();\n                        $mail->quickSend(array(\n                            'text_message' => $msg,\n                            'to'           => array(trim($newuser->email) => trim(user::getUserAttribution($newuser->id))),\n                            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                            'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                        ));\n                    }\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n        ));\n        unlink(BASE . $this->params[\"filename\"]);\n    }\n\n    public function sync_LDAPUsers() {\n        if (USE_LDAP == 1 && function_exists('ldap_connect')) {\n            $ldap = new expLDAP();\n            $updated = $ldap->syncLDAPUsers();\n            $ldap->close();\n            flash('message', $updated.' '.gt('LDAP Users Updated'));\n        }\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * @subpackage Controllers\n * @package    Modules\n */\n/** @define \"BASE\" \"../../../..\" */\n\nclass usersController extends expController {\n    public $basemodel_name = 'user';\n//    protected $remove_permissions = array(\n//        'create',\n//        'edit'\n//    );\n    protected $manage_permissions = array(\n        'toggle_extension' => 'Activate Extensions',\n        'kill_session'     => 'End Sessions',\n        'boot_user'        => 'Boot Users',\n        'userperms'        => 'User Permissions',\n        'groupperms'       => 'Group Permissions',\n        'import'           => 'Import Users',\n        'export'           => 'Export Users',\n        'update'           => 'Update Users',\n        'show'             => 'Show User',\n        'showall'          => 'Show Users',\n        'getUsersByJSON'   => 'Get Users',\n    );\n\n    static function displayname() {\n        return gt(\"User Manager\");\n    }\n\n    static function description() {\n        return gt(\"This is the user management module. It allows for creating user, editing user, etc.\");\n    }\n\n    static function hasSources() {\n        return false;\n    }\n\n    static function hasContent() {\n        return false;\n    }\n\n    static function canImportData() {\n        return true;\n    }\n\n    public function show() {\n        global $user;\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or viewing own account.\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $u = new user($id);\n            if ($u->isSuperAdmin() && $user->isActingAdmin()) {\n                flash('error', gt('You do not have the proper permissions to view this record'));\n                expHistory::back();\n            }\n            parent::show();\n        } else {\n            flash('error', gt('You do not have the proper permissions to view this record'));\n            expHistory::back();\n        }\n    }\n\n    public function manage() {\n        global $user;\n\n        expHistory::set('manageable', $this->params);\n//        $limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n//        $order = empty($this->config['order']) ? 'username' : $this->config['order'];\n        if ($user->is_system_user == 1) {\n//            $filter = 1; //'1';\n            $where = '';\n        } elseif ($user->isSuperAdmin()) {\n//            $filter = 2; //\"is_system_user != 1\";\n            $where = \"is_system_user != 1\";\n        } else {\n//            $filter = 3; //\"is_admin != 1\";\n            $where = \"is_admin != 1\";\n        }\n        $page = new expPaginator(array(\n                    'model'=>'user',\n                    'where'=>$where,\n//                    'limit'=>$limit,\n//                    'order'=>$order,\n                    'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller'=>$this->baseclassname,\n                    'action'=>$this->params['action'],\n                    'columns'=>array(\n                        gt('Username')=>'username',\n                        gt('First Name')=>'firstname',\n                        gt('Last Name')=>'lastname',\n                        gt('Is Admin')=>'is_acting_admin',\n                    )\n                ));\n\n        assign_to_template(array('page'=>$page));\n//        assign_to_template(array(\n//            'filter' => $filter\n//        ));\n    }\n\n    public function create() {\n        redirect_to(array('controller' => 'users', 'action' => 'edituser'));\n//        $this->edituser();\n    }\n\n    public function edituser() {\n        global $user, $db;\n\n        // set history\n        expHistory::set('editable', $this->params);\n        expSession::set(\"userkey\", sha1(microtime()));\n        expSession::clearCurrentUserSessionCache();\n\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n\n        // check to see if we should be editing.  You either need to be an admin, or editing own account.\n        if ($user->isAdmin() || ($user->id == $id && !$user->globalPerm('prevent_profile_change'))) {\n            $u = new user($id);\n            if ($u->isSuperAdmin() && $user->isActingAdmin()) {  // prevent regular admin's from editing super-admins\n                flash('error', gt('You do not have the proper permissions to edit this user'));\n                expHistory::back();\n            }\n        } else {\n            flash('error', gt('You do not have the proper permissions to edit this user'));\n            expHistory::back();\n        }\n        $active_extensions = $db->selectObjects('profileextension', 'active=1', 'rank');\n\n        //If there is no image uploaded, use the default avatar\n        if (empty($u->image)) $u->image = PATH_RELATIVE . \"framework/modules/users/assets/images/avatar_not_found.jpg\";\n\n        assign_to_template(array(\n            'edit_user'  => $u,\n            'extensions' => $active_extensions,\n            \"userkey\"    => expSession::get(\"userkey\")\n        ));\n\n        if ($user->isAdmin()) {\n            $page = new expPaginator(array(\n                'model'      => 'group',\n                'where'      => 1,\n                'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n                'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n                'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                'columns'    => array(\n                    gt('Name')        => 'name',\n                    gt('Description') => 'description',\n                ),\n                'controller' => $this->baseclassname,\n                'action'     => $this->params['action'],\n            ));\n\n            assign_to_template(array(\n                'groups' => $page,\n                'mygroups' => $u->getGroupMemberships(),\n            ));\n        }\n    }\n\n    public function update() {\n        global $user, $db;\n\n        // get the id of user we are editing, if there is one\n        $id = !empty($this->params['id']) ? $this->params['id'] : null;\n        if ((($user->id == $id) || $user->isAdmin()) && $this->params['userkey'] != expSession::get(\"userkey\")) expHistory::back();\n\n        // make sure this user should be updating user accounts\n        if (!$user->isLoggedIn() && SITE_ALLOW_REGISTRATION == 0) {\n            flash('error', gt('This site does not allow user registrations'));\n            expHistory::back();\n        } elseif (!$user->isAdmin() && ($user->isLoggedIn() && $user->id != $id) && !$user->globalPerm('prevent_profile_change')) {\n            flash('error', gt('You do not have permission to edit this user account'));\n            expHistory::back();\n        }\n\n        // if this is a new user account we need to check the password.\n        // the password fields wont come thru on an edit. Otherwise we will\n        // just update the existing account.\n        if (!empty($id)) {\n            $u = new user($id);\n            $u->update($this->params);\n            if ($user->isAdmin() && $user->id != $id) {\n                flash('message', gt('Account information for') . ' ' . $u->username . ' ' . gt('has been updated.'));\n            } else {\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your account information has been updated.'));\n            }\n            if ($user->id == $id) {\n                $_SESSION[SYS_SESSION_KEY]['user'] = $u;\n                $user = $u;\n            }\n        } else {\n            $u = new user($this->params);\n            $ret = $u->setPassword($this->params['pass1'], $this->params['pass2']);\n            if ($ret != true) expValidator::failAndReturnToForm($ret, $this->params);\n            $u->save();\n            if ($user->isAdmin()) {\n                flash('message', gt('Created new user account for') . ' ' . $u->username);\n            } else {\n                user::login($u->username, $this->params['pass1']);\n                flash('message', gt('Thank you') . ' ' . $u->firstname . '.  ' . gt('Your new account has been created.'));\n            }\n        }\n\n        // update the user profiles\n        if (!empty($u->id)) {\n            $this->params['user_id'] = $u->id;\n            // get the active profile extensions and save them out\n            $active_extensions = $db->selectObjects('profileextension', 'active=1');\n            foreach ($active_extensions as $pe) {\n                if (is_file(BASE . $pe->classfile)) {\n                    include_once(BASE . $pe->classfile);\n                    $ext = new $pe->classname();\n                    $db->delete($ext->tablename, 'user_id=' . $u->id);\n                    $ext->update($this->params);\n                }\n            }\n        }\n\n        // update group membership assignment\n        if (!empty($this->params['member'])) {\n            $old_groups = $db->selectObjects('groupmembership', 'member_id=' . $u->id);\n//            $db->delete('groupmembership', 'member_id=' . $u->id);  // start from scratch\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            foreach ($this->params['member'] as $grp) {\n                $memb->group_id = $grp;\n                $memb->is_admin = false;\n                foreach ($old_groups as $oldgroup) {\n                    if ($oldgroup->group_id == $grp) {\n                        if ($oldgroup->is_admin) $memb->is_admin = true;  // retain group admin setting\n                    }\n                }\n                $db->insertObject($memb, 'groupmembership');\n            }\n            if ($u->id == $user->id) expSession::triggerRefresh();\n        }\n\n        // if this is a new account then we will check to see if we need to send\n        // a welcome message or admin notification of new accounts.\n        if (empty($id)) {\n            // Calculate Group Memberships for newly created users.  Any groups that\n            // are marked as 'inclusive' automatically pick up new users.  This is the part\n            // of the code that goes out, finds those groups, and makes the new user a member\n            // of them.\n            $memb = new stdClass();\n            $memb->member_id = $u->id;\n            // Also need to process the groupcodes, for promotional signup\n//            $code_where = '';\n//            if (isset($this->params['groupcode']) && $this->params['groupcode'] != '') {\n//                $code_where = \" OR code='\" . $this->params['groupcode'] . \"'\";\n//            }\n            // Add to default plus any groupcode groups\n//            foreach ($db->selectObjects('group', 'inclusive=1' . $code_where) as $g) {\n            foreach ($db->selectObjects('group', 'inclusive=1') as $g) {\n                $memb->group_id = $g->id;\n                $db->insertObject($memb, 'groupmembership');\n            }\n\n            // if we added the user to any group than we need to reload their permissions\n//            expPermissions::load($u);  //FIXME why are we doing this? this loads the edited user perms over the current user???\n\n            //signup email stuff\n            if (USER_REGISTRATION_SEND_WELCOME && !empty($u->email)) {\n                $msg = $u->firstname . \", \\n\\n\";\n                $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $u->firstname, $u->lastname, $u->username);\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                ));\n\n                flash('message', gt('A welcome email has been sent to') . ' ' . $u->email);\n            }\n\n            // send and email notification to the admin of the site.\n            if (USER_REGISTRATION_SEND_NOTIF && !$user->isAdmin()) {\n                $msg = gt(\"When\") . \": \" . date(\"F j, Y, g:i a\") . \"\\n\\n\";\n                $msg .= gt(\"Their name is\") . \": \" . $u->firstname . \" \" . $u->lastname . \"\\n\\n\";\n\n                $mail = new expMail();\n                $mail->quickSend(array(\n                    'text_message' => $msg,\n                    'to'           => trim(USER_REGISTRATION_ADMIN_EMAIL),\n                    'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                    'subject'      => USER_REGISTRATION_NOTIF_SUBJECT,\n                ));\n            }\n        }\n\n        // we need to reload our updated profile if we just edited our own account\n        if ($id == $user->id) {\n            $user->getUserProfile();\n//            expPermissions::load($user);  // not sure this is necessary since we can't add groups here\n        }\n\n        expHistory::back();\n    }\n\n    public function delete() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user accounts'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No user selected.'));\n            expHistory::back();\n        }\n\n        // remove group memeberships\n        $db->delete('groupmembership', 'member_id=' . $this->params['id']);\n\n        // remove user permissions\n        $db->delete('userpermission', 'uid=' . $this->params['id']);\n\n        //remove user profiles\n        $active_extensions = $db->selectObjects('profileextension', 'active=1');\n        foreach ($active_extensions as $pe) {\n            if (is_file(BASE . $pe->classfile)) {\n                include_once(BASE . $pe->classfile);\n                $ext = new $pe->classname();\n                $db->delete($ext->table, 'user_id=' . $this->params['id']);\n            }\n        }\n\n        // remove user address\n        $address = new address();\n        $db->delete($address->table, 'user_id=' . $this->params['id']);\n\n        parent::delete();\n    }\n\n    public function manage_sessions() {\n//        global $db, $user;\n        global $db;\n\n        expHistory::set('manageable', $this->params);\n\n        //cleans up any old sessions\n        if (SESSION_TIMEOUT_ENABLE == true) {\n            $db->delete('sessionticket', 'last_active < ' . (time() - SESSION_TIMEOUT));\n//        } else {\n//            $db->delete('sessionticket', '1');\n        }\n\n        if (isset($this->params['id']) && $this->params['id'] == 0) {\n            $sessions = $db->selectObjects('sessionticket', \"uid<>0\");\n            $filtered = 1;\n        } else {\n            $sessions = $db->selectObjects('sessionticket');\n            $filtered = 0;\n        }\n\n//\t    $sessions = $db->selectObjects('sessionticket');\n        for ($i = 0, $iMax = count($sessions); $i < $iMax; $i++) {\n            $sessions[$i]->user = new user($sessions[$i]->uid);\n            if ($sessions[$i]->uid == 0) {\n                $sessions[$i]->user->id = 0;\n            }\n            $sessions[$i]->duration = expDateTime::duration($sessions[$i]->last_active, $sessions[$i]->start_time);\n        }\n\n        assign_to_template(array(\n            'sessions' => $sessions,\n            'filter'   => $filtered\n        ));\n    }\n\n    public function kill_session() {\n        global $user, $db;\n        $ticket = $db->selectObject('sessionticket', \"ticket='\" . preg_replace('/[^A-Za-z0-9.]/', '', $this->params['ticket']) . \"'\");\n        if ($ticket) {\n            $u = new user($ticket->uid);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', \"ticket='\" . $ticket->ticket . \"'\");\n            }\n        }\n        expHistory::back();\n    }\n\n    public function boot_user() {\n        global $user, $db;\n        if (!empty($this->params['id'])) {\n            $u = new user($this->params['id']);\n            if ($user->isSuperAdmin() || ($user->isActingAdmin() && !$u->isAdmin())) {\n                // We can only kick the user if they are A) not an acting admin, or\n                // B) The current user is a super user and the kicked user is not.\n                $db->delete('sessionticket', 'uid=' . $u->id);\n            }\n        }\n        expHistory::back();\n    }\n\n    /**\n    \u00a0*\u00a0This function scans two directories and searches for php files to add to the extensions database.\n     * If you have added new extensions since the last time you have visited the page, it will add them to the database\n     * in effect enabling your new extension to be tacked onto users profiles. You then have to enable it in the menu, but at least\n     * now it is in the system and when the user goes to edit his profile, it will check for extensions and this one will be in!\n     *\n    \u00a0*\u00a0@global\u00a0string\u00a0This function uses the global $db save information through the Exponenet database connection.\n    \u00a0*/\n    public function manage_extensions() {\n        global $db;\n\n        // set history\n        expHistory::set('manageable', $this->params);\n\n        // Lets find all the user profiles availabe and then see if they are\n        // in the database yet.  If not we will add them.\n        $ext_dirs = array(\n            'framework/modules/users/extensions',\n            'themes/' . DISPLAY_THEME . '/modules/users/extensions'\n        );\n        foreach ($ext_dirs as $dir) {\n            if (is_readable(BASE . $dir)) {\n                $dh = opendir(BASE . $dir);\n                while (($file = readdir($dh)) !== false) {\n                    if (is_file(BASE . \"$dir/$file\") && is_readable(BASE . \"$dir/$file\") && substr($file, 0, 1) != '_' && substr($file, 0, 1) != '.') {\n                        include_once(BASE . \"$dir/$file\");\n                        $classname = substr($file, 0, -4);\n                        $class = new $classname();\n                        $extension = $db->selectObject('profileextension', \"title='\" . $class->name() . \"'\");\n                        if (empty($extension->id)) {\n                            $pe = new profileextension();\n                            $pe->title = $class->name();\n                            $pe->body = $class->description();\n                            $pe->classfile = \"$dir/$file\";\n                            $pe->classname = $classname;\n                            $pe->save();\n                        }\n                    }\n                }\n            }\n        }\n\n        $page = new expPaginator(array(\n            'model'      => 'profileextension',\n            'where'      => 1,\n            'limit'      => 25,\n            'order'      => 'title',\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'title',\n                gt('Description') => 'body',\n                gt('Active')      => 'active'\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page' => $page\n        ));\n    }\n\n    public function manage_groups() {\n        expHistory::set('manageable', $this->params);\n        $page = new expPaginator(array(\n            'model'      => 'group',\n            'where'      => 1,\n//            'limit'      => (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10,\n            'order'      => empty($this->config['order']) ? 'name' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Name')        => 'name',\n                gt('Description') => 'description',\n                gt('Type')        => 'inclusive',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        foreach ($page->records as $key=>$group) {\n            $page->records[$key]->members = group::getUsersInGroup($group->id);\n        }\n\n        assign_to_template(array(\n            'page' => $page,\n        ));\n    }\n\n    public function reset_password() {\n        expHistory::set('editable', $this->params);\n    }\n\n    public function send_new_password() {\n        global $db;\n\n        // find the user\n        $this->params['username'] = expString::escape($this->params['username']);\n        $u = user::getUserByName($this->params['username']);\n        if (empty($u)) {\n            $u = user::getUserByEmail($this->params['username']);\n            if (!empty($u) && $u->count > 1) {\n                expValidator::failAndReturnToForm(gt('That email address applies to more than one user account, please enter your username instead.'));\n            }\n        }\n        $u = new user($u->id);\n\n        if (!expValidator::check_antispam($this->params)) {\n            expValidator::failAndReturnToForm(gt('Anti-spam verification failed.  Please try again.'), $this->params);\n        } elseif (empty($u->id)) {\n            expValidator::failAndReturnToForm(gt('We were unable to find an account with that username/email'), $this->params);\n        } elseif (empty($u->email)) {\n            expValidator::failAndReturnToForm(gt('Your account does not appear to have an email address.  Please contact the site administrators to reset your password'), $this->params);\n        } elseif ($u->isAdmin()) {\n            expValidator::failAndReturnToForm(gt('You cannot reset passwords for an administrator account.'), $this->params);\n        }\n\n        $tok = new stdClass();\n        $tok->uid = $u->id;\n        $tok->expires = time() + 2 * 3600;\n        $tok->token = md5(time()) . uniqid('');\n\n        $email = $template = expTemplate::get_template_for_action($this, 'email/password_reset_email', $this->loc);\n        $email->assign('token', $tok);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'text_message' => expString::html2text($msg),\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('Password Reset Requested'),\n        ));\n\n        $db->delete('passreset_token', 'uid=' . $u->id);\n        $db->insertObject($tok, 'passreset_token');\n        flash('message', gt('An email has been sent to you with instructions on how to finish resetting your password.') . '<br><br>' .\n            gt('This new password request is only valid for 2 hours.  If you have not completed the password reset process within 2 hours, the new password request will expire.'));\n\n        expHistory::back();\n    }\n\n    public function confirm_password_reset() {\n        global $db;\n\n        $db->delete('passreset_token', 'expires < ' . time());\n        $tok = $db->selectObject('passreset_token', 'uid=' . intval($this->params['uid']) . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', expString::escape($this->params['token'])) . \"'\");\n        if ($tok == null) {\n            flash('error', gt('Your password reset request has expired.  Please try again.'));\n            expHistory::back();\n        }\n\n        // create the password\n        $newpass = '';\n        for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n            $num = mt_rand(48, 122);\n            if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n            else $i--;\n        }\n\n        // look up the user\n        $u = new user($tok->uid);\n\n        // get the email message body and render it\n        $email = $template = expTemplate::get_template_for_action($this, 'email/confirm_password_email', $this->loc);\n        $email->assign('newpass', $newpass);\n        $email->assign('username', $u->username);\n        $msg = $email->render();\n\n        // send the new password to the user\n        $mail = new expMail();\n        $mail->quickSend(array(\n            'html_message' => $msg,\n            'text_message' => expString::html2text($msg),\n            'to'           => array(trim($u->email) => trim(user::getUserAttribution($u->id))),\n            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n            'subject'      => gt('The account password for') . ' ' . HOSTNAME . ' ' . gt('was reset'),\n        ));\n\n        // Save new password\n        $u->update(array('password' => user::encryptPassword($newpass)));\n\n        // cleanup the reset token\n        $db->delete('passreset_token', 'uid=' . $tok->uid);\n\n        flash('message', gt('Your password has been reset and the new password has been emailed to you.'));\n\n        // send the user the login page.\n        redirect_to(array('controller' => 'login', 'action' => 'loginredirect'));\n    }\n\n    public function change_password() {\n        global $user;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : $user->id;\n\n        if ($user->isAdmin() || ($user->id == $id)) {\n            $isuser = ($user->id == $id) ? 1 : 0;\n            $u = new user($id);\n        } else {\n            flash('error', gt('You do not have the proper permissions to do that'));\n            expHistory::back();\n        }\n        assign_to_template(array(\n            'u'      => $u,\n            'isuser' => $isuser\n        ));\n    }\n\n    public function save_change_password() {\n        global $user;\n\n        $isuser = ($this->params['uid'] == $user->id) ? 1 : 0;\n\n        if (!$user->isAdmin() && !$isuser) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (($isuser && empty($this->params['password'])) || (!empty($this->params['password']) && $user->password != user::encryptPassword($this->params['password']))) {\n            flash('error', gt('The current password you entered is not correct.'));\n            expHistory::returnTo('editable');\n        }\n        //eDebug($user);\n        $u = new user(intval($this->params['uid']));\n\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        //eDebug($u, true);\n        if (is_string($ret)) {\n            flash('error', $ret);\n            expHistory::returnTo('editable');\n        } else {\n            $params = array();\n            $params['is_admin'] = !empty($u->is_admin);\n            $params['is_acting_admin'] = !empty($u->is_acting_admin);\n            $u->update($params);\n        }\n\n        if (!$isuser) {\n            flash('message', gt('The password for') . ' ' . $u->username . ' ' . gt('has been changed.'));\n        } else {\n            $user->password = $u->password;\n            flash('message', gt('Your password has been changed.'));\n        }\n        expHistory::back();\n    }\n\n    public function edit_userpassword() {\n        expHistory::set('editable', $this->params);\n        if (empty($this->params['id'])) {\n            flash('error', gt('You must specify the user whose password you want to change'));\n            expHistory::back();\n        }\n\n        $u = new user($this->params['id']);\n        assign_to_template(array(\n            'u' => $u\n        ));\n    }\n\n    public function update_userpassword() {\n        global $user;\n\n        if (!$user->isAdmin() && $this->params['id'] != $user->id) {\n            flash('error', gt('You do not have permissions to change this users password.'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            expValidator::failAndReturnToForm(gt('You must specify the user whose password you want to change'), $this->params);\n        }\n\n        if (empty($this->params['new_password1'])) {\n            expValidator::setErrorField('new_password1');\n            expValidator::failAndReturnToForm(gt('You must specify a new password for this user.'), $this->params);\n        }\n\n        if (empty($this->params['new_password2'])) {\n            expValidator::setErrorField('new_password2');\n            expValidator::failAndReturnToForm(gt('You must confirm the password.'), $this->params);\n\n        }\n\n        $u = new user($this->params['id']);\n        $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n        if (is_string($ret)) {\n            expValidator::setErrorField('new_password1');\n            $this->params['new_password1'] = '';\n            $this->params['new_password2'] = '';\n            expValidator::failAndReturnToForm($ret, $this->params);\n        } else {\n            $u->save(true);\n        }\n\n        flash('message', gt('Password reset for user') . ' ' . $u->username);\n        expHistory::back();\n    }\n\n    public function edit_group() {\n        global $db;\n\n        expHistory::set('editable', $this->params);\n        $id = isset($this->params['id']) ? $this->params['id'] : null;\n        $group = new group($id);\n        $group->redirect = $db->selectValue('section', 'id', \"sef_name='\" . $group->redirect . \"'\");\n        assign_to_template(array(\n            'record' => $group\n        ));\n    }\n\n    public function manage_group_memberships() {\n        global $db, $user;\n//        expHistory::set('manageable', $this->params);\n\n        $memb = $db->selectObject('groupmembership', 'member_id=' . $user->id . ' AND group_id=' . $this->params['id'] . ' AND is_admin=1');\n\n        $perm_level = 0;\n        if ($memb) $perm_level = 1;\n        if (expPermissions::check('user_management', expCore::makeLocation('administrationmodule'))) $perm_level = 2;\n\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n        $users = user::getAllUsers(0);\n\n        $members = array();\n        $admins = array();\n        foreach ($db->selectObjects('groupmembership', 'group_id=' . $group->id) as $m) {\n            $members[] = $m->member_id;\n            if ($m->is_admin == 1) {\n                $admins[] = $m->member_id;\n            }\n        }\n\n        for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n            if (in_array($users[$i]->id, $members)) {\n                $users[$i]->is_member = 1;\n            } else {\n                $users[$i]->is_member = 0;\n            }\n\n            if (in_array($users[$i]->id, $admins)) {\n                $users[$i]->is_admin = 1;\n            } else {\n                $users[$i]->is_admin = 0;\n            }\n        }\n\n        //$limit = empty($this->config['limit']) ? 10 : $this->config['limit'];\n        $page = new expPaginator(array(\n//          'model'=>'user',\n            'records'    => $users,\n            'where'      => 1,\n//          'limit'=>9999,  // unless we're showing all users on a page at once, there's no way to\n            // add all users to a group, since it's rebuilding the group on save...\n            'order'      => empty($this->config['order']) ? 'username' : $this->config['order'],\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Username')   => 'username',\n                gt('First Name') => 'firstname',\n                gt('Last Name')  => 'lastname',\n                gt('Is Member')  => 'is_member',\n                gt('Is Admin')   => 'is_admin',\n            ),\n            'controller' => $this->baseclassname,\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'page'       => $page,\n            'group'      => $group,\n            'users'      => $users,\n            'canAdd'     => (count($members) < count($users) ? 1 : 0),\n            'hasMember'  => (count($members) > 0 ? 1 : 0),\n            'perm_level' => $perm_level,\n        ));\n    }\n\n    public function update_group() {\n        global $db;\n\n        $group = new group();\n        if (!empty($this->params['redirect'])) {\n            $this->params['redirect'] = $db->selectValue('section', 'sef_name', 'id=' . intval($this->params['redirect']));\n        }\n        $group->update($this->params);\n        expHistory::back();\n    }\n\n    public function delete_group() {\n        global $user, $db;\n        if (!$user->isAdmin()) {\n            flash('error', gt('You do not have permission to delete user groups'));\n            expHistory::back();\n        }\n\n        if (empty($this->params['id'])) {\n            flash('error', gt('No group selected.'));\n            expHistory::back();\n        }\n\n        // remove group members\n        $db->delete('groupmembership', 'group_id=' . $this->params['id']);\n\n        // remove group permissions\n        $db->delete('grouppermission', 'gid=' . $this->params['id']);\n\n        // remove group\n        $db->delete('group', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function toggle_extension() {\n        global $db;\n        if (isset($this->params['id'])) $db->toggle('profileextension', 'active', 'id=' . $this->params['id']);\n        expHistory::back();\n    }\n\n    public function update_memberships() {\n//        global $user, $db;\n        global $db;\n\n        //$memb = $db->selectObject('groupmembership','member_id='.$user->id.' AND group_id='.$this->params['id'].' AND is_admin=1');\n        $group = $db->selectObject('group', 'id=' . $this->params['id']);\n\n        $db->delete('groupmembership', 'group_id=' . $group->id);\n        $memb = new stdClass();\n        $memb->group_id = $group->id;\n        if ($this->params['memdata'] != \"\") {\n            foreach ($this->params['memdata'] as $u => $str) {\n                $memb->member_id = $u;\n                $memb->is_admin = $str['is_admin'];\n                $db->insertObject($memb, 'groupmembership');\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function getUsersByJSON() {\n        $modelname = $this->basemodel_name;\n        $results = 25; // default get 25\n        $startIndex = 0; // default start at 0\n        $sort = null; // default don't sort\n        $dir = 'asc'; // default sort dir is asc\n        $sort_dir = SORT_ASC;\n\n        // How many records to get?\n        if (strlen($this->params['results']) > 0) {\n            $results = intval($this->params['results']);\n        }\n\n        // Start at which record?\n        if (strlen($this->params['startIndex']) > 0) {\n            $startIndex = intval($this->params['startIndex']);\n        }\n\n        // Sorted?\n        if (strlen($this->params['sort']) > 0) {\n            $sort = expString::escape($this->params['sort']);\n            if ($sort = 'id') $sort = 'username';\n        }\n\n        if (!empty($this->params['filter'])) {\n            switch ($this->params['filter']) {\n                case '1' :\n                    $filter = '';\n                    break;\n                case '2' :\n                    $filter = \"is_system_user != 1\";\n                    break;\n                case '3' :\n                    $filter = \"is_admin != 1\";\n            }\n        }\n\n//        if (!empty($_GET['filter'])) {\n//            switch ($_GET['filter']) {\n//                case '1' :\n//                    $filter = '';\n//                    break;\n//                case '2' :\n//                    $filter = \"is_system_user != 1\";\n//                    break;\n//                case '3' :\n//                    $filter = \"is_admin != 1\";\n//            }\n//        }\n\n        // Sort dir?\n        if ((strlen($this->params['dir']) > 0) && ($this->params['dir'] == 'desc')) {\n            $dir = 'desc';\n            $sort_dir = SORT_DESC;\n        } else {\n            $dir = 'asc';\n            $sort_dir = SORT_ASC;\n        }\n\n        if (!empty($this->params['query'])) {\n\n            $this->params['query'] = expString::escape($this->params['query']);\n            $totalrecords = $this->$modelname->find('count', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\");\n\n            $users = $this->$modelname->find('all', (empty($filter) ? '' : $filter . \" AND \") . \"(username LIKE '%\" . $this->params['query'] . \"%' OR firstname LIKE '%\" . $this->params['query'] . \"%' OR lastname LIKE '%\" . $this->params['query'] . \"%' OR email LIKE '%\" . $this->params['query'] . \"%')\", $sort . ' ' . $dir, $results, $startIndex);\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n        } else {\n\n            $totalrecords = $this->$modelname->find('count', $filter);\n\n            $users = $this->$modelname->find('all', $filter, $sort . ' ' . $dir, $results, $startIndex);\n\n            for ($i = 0, $iMax = count($users); $i < $iMax; $i++) {\n                if (ECOM == 1) {\n                    $users[$i]->usernamelabel = \"<a href='viewuser/{$users[$i]->id}'  class='fileinfo'>{$users[$i]->username}</a>\";\n                } else {\n                    $users[$i]->usernamelabel = $users[$i]->username;\n                }\n            }\n\n            $returnValue = array(\n                'recordsReturned' => count($users),\n                'totalRecords'    => $totalrecords,\n                'startIndex'      => $startIndex,\n                'sort'            => $sort,\n                'dir'             => $dir,\n                'pageSize'        => $results,\n                'records'         => $users\n            );\n\n        }\n\n        echo json_encode($returnValue);\n    }\n\n    public function viewuser() {\n        global $user;\n\n        if (!empty($this->params['id']) && $user->isAdmin()) {\n            $u = new user($this->params['id']);\n        } elseif (!empty($user->id)) {\n            $u = $user;\n        } else {\n            flash('error', gt('You may not view this user'));\n            expHistory::back();\n        }\n        $address = new address();\n\n        $billings = $address->find('all', 'user_id=' . $u->id . ' AND is_billing = 1');\n        $shippings = $address->find('all', 'user_id=' . $u->id . ' AND is_shipping = 1');\n\n        // build out a SQL query that gets all the data we need and is sortable.\n        $sql = 'SELECT o.*, b.firstname as firstname, b.billing_cost as total, b.middlename as middlename, b.lastname as lastname, os.title as status, ot.title as order_type ';\n        $sql .= 'FROM ' . DB_TABLE_PREFIX . '_orders o, ' . DB_TABLE_PREFIX . '_billingmethods b, ';\n        $sql .= DB_TABLE_PREFIX . '_order_status os, ';\n        $sql .= DB_TABLE_PREFIX . '_order_type ot ';\n        $sql .= 'WHERE o.id = b.orders_id AND o.order_status_id = os.id AND o.order_type_id = ot.id AND o.purchased > 0 AND user_id =' . $u->id;\n\n        $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n        $order = !empty($this->params['order']) ? $this->params['order'] : 'purchased';\n        $dir = !empty($this->params['dir']) ? $this->params['dir'] : 'DESC';\n        //eDebug($sql, true);\n        $orders = new expPaginator(array(\n            //'model'=>'order',\n            'sql'        => $sql,\n            'limit'      => $limit,\n            'order'      => $order,\n            'dir'        => $dir,\n            'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n            'columns'    => array(\n                gt('Order #')        => 'invoice_id',\n                gt('Total')          => 'total',\n                gt('Date Purchased') => 'purchased',\n//                gt('Type')           => 'order_type_id',\n                gt('Status')         => 'order_status_id',\n                gt('Ref')            => 'orig_referrer',\n            ),\n            'controller' => $this->params['controller'],\n            'action'     => $this->params['action'],\n        ));\n\n        assign_to_template(array(\n            'u'         => $u,\n            'billings'  => $billings,\n            'shippings' => $shippings,\n            'orders'    => $orders,\n        ));\n    }\n\n    public function userperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array();\n            $modclass = expModules::getModuleClassName(($loc->mod));\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n            $have_users = 0;\n            foreach (user::getAllUsers(false) as $u) {\n                $have_users = 1;\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkUser($u, $perm, $loc, true)) {\n                        $u->$perm = 1;\n                    } else if (expPermissions::checkUser($u, $perm, $loc)) {\n                        $u->$perm = 2;\n                    } else {\n                        $u->$perm = 0;\n                    }\n                }\n                $users[] = $u;\n            }\n\n            $p[gt(\"User Name\")] = 'username';\n            $p[gt(\"First Name\")] = 'firstname';\n            $p[gt(\"Last Name\")] = 'lastname';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'username'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 1,\n                'have_users' => $have_users,\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function userperms_save() {\n        global $user;\n\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $u) {\n            expPermissions::revokeAll($u, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $user_str) {\n            $perms = array_keys($user_str);\n            $u = user::getUserById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grant($u, $perms[$i], $loc);\n            }\n\n            if ($k == $user->id) {\n                expPermissions::load($user);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function groupperms() {\n        global $user;\n\n        if (!empty($this->params['mod']) && $user->isAdmin()) {\n            $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n            $users = array(); // users = groups\n            $modclass = expModules::getModuleClassName($loc->mod);\n            $mod = new $modclass();\n            $perms = $mod->permissions($loc->int);\n\n            foreach (group::getAllGroups() as $g) {\n                foreach ($perms as $perm => $name) {\n//        \t\t\t$var = 'perms_'.$perm;\n                    if (expPermissions::checkGroup($g, $perm, $loc, true)) {\n                        $g->$perm = 1;\n                    } else if (expPermissions::checkGroup($g, $perm, $loc)) {\n                        $g->$perm = 2;\n                    } else {\n                        $g->$perm = 0;\n                    }\n                }\n                $users[] = $g;\n            }\n\n            $p[gt(\"Group\")] = 'username';\n            foreach ($mod->permissions() as $value) {\n                //        $p[gt($value)]=$key;\n                $p[gt($value)] = 'no-sort';\n            }\n\n//            if (SEF_URLS == 1) {\n                $page = new expPaginator(array(\n                    //'model'=>'user',\n//                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n                    'records'    => $users,\n                    //'sql'=>$sql,\n                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n                    'controller' => $this->params['controller'],\n                    'action'     => $this->params['action'],\n                    'columns'    => $p,\n                ));\n//            } else {\n//                $page = new expPaginator(array(\n//                    //'model'=>'user',\n////                    'limit'      => (isset($this->params['limit']) ? $this->params['limit'] : 20),\n//                    'records'    => $users,\n//                    //'sql'=>$sql,\n//                    'order'      => (isset($this->params['order']) ? $this->params['order'] : 'name'),\n//                    'dir'        => (isset($this->params['dir']) ? $this->params['dir'] : 'ASC'),\n//                    'page'       => (isset($this->params['page']) ? $this->params['page'] : 1),\n//                    'controller' => $this->params['module'],\n//                    'action'     => $this->params['action'],\n//                    'columns'    => $p,\n//                ));\n//            }\n\n            assign_to_template(array(\n                'user_form'  => 0,\n                'is_group'   => 1,\n                'have_users' => count($users) > 0, // users = groups\n                'users'      => $users,\n                'page'       => $page,\n                'perms'      => $perms,\n                'loc'        => $loc,\n//                'title'=>($modclass != 'navigationController' || ($modclass == 'navigationController' && !empty($loc->src))) ? $mod->name().' '.($modclass != 'containermodule' ? gt('module') : '').' ' : gt('Page'),\n                'title'      => ($loc->mod != 'navigation' || ($loc->mod == 'navigation' && !empty($loc->src))) ? $mod->name() . ' ' . ($loc->mod != 'container' ? gt('module') : '') . ' ' : gt('Page'),\n            ));\n        } else {\n//            echo SITE_403_HTML;\n            notfoundController::handle_not_authorized();\n        }\n    }\n\n    public function groupperms_save() {\n        $loc = expCore::makeLocation($this->params['mod'], isset($this->params['src']) ? $this->params['src'] : null, isset($this->params['int']) ? $this->params['int'] : null);\n        foreach ($this->params['users'] as $g) {\n            expPermissions::revokeAllGroup($g, $loc);\n        }\n        foreach ($this->params['permdata'] as $k => $group_str) {\n            $perms = array_keys($group_str);\n            $g = group::getGroupById($k);\n            for ($i = 0, $iMax = count($perms); $i < $iMax; $i++) {\n                expPermissions::grantGroup($g, $perms[$i], $loc);\n            }\n        }\n        expSession::triggerRefresh();\n        expHistory::back();\n    }\n\n    public function import() {\n        if (expFile::canCreate(BASE . \"tmp/test\") != SYS_FILES_SUCCESS) {\n            assign_to_template(array(\n                \"error\" => \"The /tmp directory is not writable.  Please contact your administrator.\",\n            ));\n        } else {\n            //Setup the arrays with the name/value pairs for the dropdown menus\n            $delimiterArray = Array(\n                ',' => gt('Comma'),\n                ';' => gt('Semicolon'),\n                ':' => gt('Colon'),\n                ' ' => gt('Space'));\n\n//            //Setup the mete data (hidden values)\n//            $form = new form();\n//            $form->meta(\"controller\", \"users\");\n//            $form->meta(\"action\", \"import_users_mapper\");\n//\n//            //Register the dropdown menus\n//            $form->register(\"delimiter\", gt('Delimiter Character'), new dropdowncontrol(\",\", $delimiterArray));\n//            $form->register(\"upload\", gt('CSV File to Upload'), new uploadcontrol());\n//            $form->register(\"use_header\", gt('First Row is a Header'), new checkboxcontrol(0, 0));\n//            $form->register(\"rowstart\", gt('User Data begins in Row'), new textcontrol(\"1\", 1, 0, 6));\n//            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n//                \"form_html\" => $form->tohtml(),\n                'delimiters' => $delimiterArray,\n            ));\n        }\n    }\n\n    public function import_users_mapper() {\n        //Check to make sure the user filled out the required input.\n        //FIXME needs to be the newer fail form\n        if (!is_numeric($this->params[\"rowstart\"])) {\n            unset($this->params[\"rowstart\"]);\n            $this->params['_formError'] = gt('The starting row must be a number.');\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit('Redirecting...');\n        }\n\n        //Get the temp directory to put the uploaded file\n        $directory = \"tmp\";\n\n        //Get the file save it to the temp directory\n        if ($_FILES[\"upload\"][\"error\"] == UPLOAD_ERR_OK) {\n            //\t$file = file::update(\"upload\",$directory,null,time().\"_\".$_FILES['upload']['name']);\n            $file = expFile::fileUpload(\"upload\", false, false, time() . \"_\" . $_FILES['upload']['name'], $directory.'/');\n            if ($file == null) {\n                switch ($_FILES[\"upload\"][\"error\"]) {\n                    case UPLOAD_ERR_INI_SIZE:\n                    case UPLOAD_ERR_FORM_SIZE:\n                        $this->params['_formError'] = gt('The file you attempted to upload is too large.  Contact your system administrator if this is a problem.');\n                        break;\n                    case UPLOAD_ERR_PARTIAL:\n                        $this->params['_formError'] = gt('The file was only partially uploaded.');\n                        break;\n                    case UPLOAD_ERR_NO_FILE:\n                        $this->params['_formError'] = gt('No file was uploaded.');\n                        break;\n                    default:\n                        $this->params['_formError'] = gt('A strange internal error has occurred.  Please contact the Exponent Developers.');\n                        break;\n                }\n                expSession::set(\"last_POST\", $this->params);\n                header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n                exit(\"\");\n            }\n        }\n        /*\n        if (mime_content_type(BASE.$directory.\"/\".$file->filename) != \"text/plain\"){\n            $this->params['_formError'] = \"File is not a delimited text file.\";\n            expSession::set(\"last_POST\",$this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        }\n        */\n\n        //split the line into its columns\n        $headerinfo = null;\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $fh = fopen(BASE . $directory . \"/\" . $file->filename, \"r\");\n        if (!empty($this->params[\"use_header\"])) $this->params[\"rowstart\"]++;\n        for ($x = 0; $x < $this->params[\"rowstart\"]; $x++) {\n            $lineInfo = fgetcsv($fh, 2000, $this->params[\"delimiter\"]);\n            if ($x == 0 && !empty($this->params[\"use_header\"])) $headerinfo = $lineInfo;\n        }\n\n        $colNames = array(\n            \"none\"      => gt('--Disregard this column--'),\n            \"username\"  => gt('Username'),\n            \"password\"  => gt('Password'),\n            \"firstname\" => gt('First Name'),\n            \"lastname\"  => gt('Last Name'),\n            \"email\"     => gt('Email Address')\n        );\n\n        //Check to see if the line got split, otherwise throw an error\n        if ($lineInfo == null) {\n            $this->params['_formError'] = sprintf(gt('This file does not appear to be delimited by \"%s\". <br />Please specify a different delimiter.<br /><br />'), $this->params[\"delimiter\"]);\n            expSession::set(\"last_POST\", $this->params);\n            header(\"Location: \" . $_SERVER['HTTP_REFERER']);\n            exit(\"\");\n        } else {\n            //Setup the meta data (hidden values)\n            $form = new form();\n            $form->meta(\"controller\", \"users\");\n            $form->meta(\"action\", \"import_users_process\");\n            $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n            $form->meta(\"use_header\", $this->params[\"use_header\"]);\n            $form->meta(\"filename\", $directory . \"/\" . $file->filename);\n            $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n            for ($i = 0, $iMax = count($lineInfo); $i < $iMax; $i++) {\n                if ($headerinfo != null) {\n                    $title = $headerinfo[$i] . ' (' . $lineInfo[$i] .')';\n                    if (array_key_exists($headerinfo[$i], $colNames)) {\n                        $default = $headerinfo[$i];\n                    } else {\n                        $default = \"none\";\n                    }\n                } else {\n                    $title = $lineInfo[$i];\n                    $default = \"none\";\n                }\n                $form->register(\"column[$i]\", $title, new dropdowncontrol($default, $colNames));\n            }\n            $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n            assign_to_template(array(\n                \"form_html\" => $form->tohtml(),\n            ));\n        }\n    }\n\n    public function import_users_process() {\n        if (in_array(\"username\", $this->params[\"column\"]) == false) {\n            $unameOptions = array(\n                \"FILN\"    => gt('First Initial / Last Name'),\n                \"FILNNUM\" => gt('First Initial / Last Name / Random Number'),\n                \"EMAIL\"   => gt('Email Address'),\n                \"FNLN\"    => gt('First Name / Last Name'));\n        } else {\n            $unameOptions = array(\"INFILE\" => gt('Username Specified in CSV File'));\n        }\n\n        if (in_array(\"password\", $this->params[\"column\"]) == false) {\n            $pwordOptions = array(\n                \"RAND\"    => gt('Generate Random Passwords'),\n                \"DEFPASS\" => gt('Use the Default Password Supplied Below'));\n        } else {\n            $pwordOptions = array(\"INFILE\" => gt('Password Specified in CSV File'));\n        }\n        if (count($pwordOptions) == 1) {\n            $disabled = true;\n        } else {\n            $disabled = false;\n        }\n\n//        $form = new form();\n//        $form->meta(\"controller\", \"users\");\n//        $form->meta(\"action\", \"import_users_display\");\n//        $form->meta(\"column\", $this->params[\"column\"]);\n//        $form->meta(\"delimiter\", $this->params[\"delimiter\"]);\n//        $form->meta(\"use_header\", $this->params[\"use_header\"]);\n//        $form->meta(\"filename\", $this->params[\"filename\"]);\n//        $form->meta(\"rowstart\", $this->params[\"rowstart\"]);\n//\n//        $form->register(\"unameOptions\", gt('User Name Generations Options'), new dropdowncontrol(\"INFILE\", $unameOptions));\n//        $form->register(\"pwordOptions\", gt('Password Generation Options'), new dropdowncontrol(\"defpass\", $pwordOptions));\n//        $form->register(\"pwordText\", gt('Default Password'), new textcontrol(\"\", 10, $disabled));\n//        $form->register(\"update\", gt('Update users already in database, instead of creating new user?'), new checkboxcontrol(0, 0));\n//        $form->register(\"submit\", \"\", new buttongroupcontrol(gt('Next'), \"\", gt('Cancel')));\n\n        assign_to_template(array(\n//            \"form_html\" => $form->tohtml(),\n            'uname_options' => $unameOptions,\n            'pword_options' => $pwordOptions,\n            'pword_disabled' => $disabled,\n            'params' => $this->params\n        ));\n    }\n\n    public function import_users_display() {\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"]) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if (!empty($this->params[\"column\"][$i]) && $this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    } else {\n                        unset($this->params['column'][$i]);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n//                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n//                    switch ($this->params[\"pwordOptions\"]) {\n//                        case \"RAND\":\n//                            $newpass = \"\";\n//                            for ($i = 0; $i < mt_rand(12, 20); $i++) {\n//                                $num = mt_rand(48, 122);\n//                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n//                                else $i--;\n//                            }\n//                            $userinfo['clearpassword'] = $newpass;\n//                            break;\n//                        case \"DEFPASS\":\n//                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n//                            break;\n//                    }\n//\n//                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {\n                                $suffix = '-rand-' . mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = '-rand-' . mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n            \"params\" => $this->params,\n        ));\n    }\n\n    public function import_users_add() {\n        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n            header('Location: ' . URL_FULL);\n            exit();  // attempt to hack the site\n        }\n        $line_end = ini_get('auto_detect_line_endings');\n        ini_set('auto_detect_line_endings',TRUE);\n        $file = fopen(BASE . $this->params[\"filename\"], \"r\");\n        $userinfo = array();\n        $userarray = array();\n        $usersdone = array();\n        $linenum = 1;\n\n        while (($filedata = fgetcsv($file, 2000, $this->params[\"delimiter\"])) != false) {\n\n            if ($linenum >= $this->params[\"rowstart\"] && in_array($linenum,$this->params['importuser'])) {\n                $i = 0;\n\n                $userinfo['username'] = \"\";\n                $userinfo['firstname'] = \"\";\n                $userinfo['lastname'] = \"\";\n                $userinfo['is_admin'] = 0;\n                $userinfo['is_acting_admin'] = 0;\n//                $userinfo['is_locked'] = 0;\n                $userinfo['email'] = '';\n                $userinfo['changed'] = \"\";\n\n                foreach ($filedata as $field) {\n                    if ($this->params[\"column\"][$i] != \"none\") {\n                        $colname = $this->params[\"column\"][$i];\n                        $userinfo[$colname] = trim($field);\n                    }\n                    $i++;\n                }\n\n                switch ($this->params[\"unameOptions\"]) {\n                    case \"FILN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FILNNUM\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname']{0} . $userinfo['lastname'] . mt_rand(100, 999)));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"EMAIL\":\n                        if ($userinfo['email'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['email']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"FNLN\":\n                        if (($userinfo['firstname'] != \"\") && ($userinfo['lastname'] != \"\")) {\n                            $userinfo['username'] = str_replace(\" \", \"\", strtolower($userinfo['firstname'] . $userinfo['lastname']));\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                    case \"INFILE\":\n                        if ($userinfo['username'] != \"\") {\n                            $userinfo['username'] = str_replace(\" \", \"\", $userinfo['username']);\n                        } else {\n                            $userinfo['username'] = \"\";\n                            $userinfo['clearpassword'] = \"\";\n                            $userinfo['changed'] = \"skipped\";\n                        }\n                        break;\n                }\n\n                if ((!isset($userinfo['changed'])) || ($userinfo['changed'] != \"skipped\")) {\n                    switch ($this->params[\"pwordOptions\"]) {\n                        case \"RAND\":\n                            $newpass = \"\";\n                            for ($i = 0, $iMax = mt_rand(12, 20); $i < $iMax; $i++) {\n                                $num = mt_rand(48, 122);\n                                if (($num > 97 && $num < 122) || ($num > 65 && $num < 90) || ($num > 48 && $num < 57)) $newpass .= chr($num);\n                                else $i--;\n                            }\n                            $userinfo['clearpassword'] = $newpass;\n                            break;\n                        case \"DEFPASS\":\n                            $userinfo['clearpassword'] = str_replace(\" \", \"\", trim($this->params[\"pwordText\"]));\n                            break;\n                    }\n\n                    $userinfo['password'] = user::encryptPassword($userinfo['clearpassword']);\n\n                    $suffix = \"\";\n                    while (user::getUserByName($userinfo['username'] . $suffix) != null) { //username already exists\n                        if (!empty($this->params[\"update\"])) {\n                            if (in_array($userinfo['username'], $usersdone)) {  // username exists because we already created it\n                                $suffix = mt_rand(100, 999);\n                            } else {\n                                $tmp = user::getUserByName($userinfo['username'] . $suffix);\n                                $userinfo['id'] = $tmp->id;\n                                $userinfo['changed'] = 1;\n                                break;\n                            }\n                        } else {\n                            $suffix = mt_rand(100, 999);\n                        }\n                    }\n\n                    $userinfo['username'] = $userinfo['username'] . $suffix;\n                    $newuser = new user($userinfo);\n                    $newuser->update();\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                    $usersdone[] = $userinfo['username'];\n                    if (USER_REGISTRATION_SEND_WELCOME && $this->params['sendemail'] && !empty($newuser->email)) {\n                        $msg = $newuser->firstname . \", \\n\\n\";\n                        $msg .= sprintf(USER_REGISTRATION_WELCOME_MSG, $newuser->firstname, $newuser->lastname, $newuser->username);\n                        $msg .= \"/n/nYour new password is: \".$userinfo['clearpassword'];\n                        $mail = new expMail();\n                        $mail->quickSend(array(\n                            'text_message' => $msg,\n                            'to'           => array(trim($newuser->email) => trim(user::getUserAttribution($newuser->id))),\n                            'from'         => array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                            'subject'      => USER_REGISTRATION_WELCOME_SUBJECT,\n                        ));\n                    }\n                } else {\n                    $userinfo['linenum'] = $linenum;\n                    $userarray[] = $userinfo;\n                }\n            }\n            $linenum++;\n        }\n        fclose($file);\n        ini_set('auto_detect_line_endings',$line_end);\n        assign_to_template(array(\n            \"userarray\" => $userarray,\n        ));\n        unlink(BASE . $this->params[\"filename\"]);\n    }\n\n    public function sync_LDAPUsers() {\n        if (USE_LDAP == 1 && function_exists('ldap_connect')) {\n            $ldap = new expLDAP();\n            $updated = $ldap->syncLDAPUsers();\n            $ldap->close();\n            flash('message', $updated.' '.gt('LDAP Users Updated'));\n        }\n    }\n\n}\n\n?>"], "filenames": ["framework/modules/users/controllers/usersController.php"], "buggy_code_start_loc": [62], "buggy_code_end_loc": [62], "fixing_code_start_loc": [63], "fixing_code_end_loc": [82], "type": "CWE-200", "message": "framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0patch1 does not properly restrict access to user records, which allows remote attackers to read address information, as demonstrated by an address/show/id/1 URI.", "other": {"cve": {"id": "CVE-2016-9286", "sourceIdentifier": "cve@mitre.org", "published": "2016-11-11T22:59:04.310", "lastModified": "2017-07-28T01:29:08.267", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "framework/modules/users/controllers/usersController.php in Exponent CMS v2.4.0patch1 does not properly restrict access to user records, which allows remote attackers to read address information, as demonstrated by an address/show/id/1 URI."}, {"lang": "es", "value": "framework/modules/users/controllers/usersController.php en Exponent CMS v2.4.0patch1 no restringe adecuadamente el acceso a grabaciones de usuario, lo que permite a atacantes remotos leer informaci\u00f3n de direcciones, como es demostrado por una URI address/show/id/1."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:2.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFEAA82F-83B2-49B8-B860-2F18C3C66321"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/94296", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037281", "source": "cve@mitre.org"}, {"url": "https://github.com/exponentcms/exponent-cms/commit/e38aae66c785f08f3907aa121378caf71ca5f2d7", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/e38aae66c785f08f3907aa121378caf71ca5f2d7"}}