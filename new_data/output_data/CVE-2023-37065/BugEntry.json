{"buggy_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Course;\nuse Chamilo\\CoreBundle\\Entity\\ExtraField;\nuse Chamilo\\CoreBundle\\Entity\\Repository\\SequenceResourceRepository;\nuse Chamilo\\CoreBundle\\Entity\\SequenceResource;\nuse Chamilo\\CoreBundle\\Entity\\Session;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelCourse;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelCourseRelUser;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelUser;\nuse Chamilo\\UserBundle\\Entity\\User;\nuse ExtraField as ExtraFieldModel;\nuse Monolog\\Logger;\n\n/**\n * Class SessionManager.\n *\n * This is the session library for Chamilo\n * (as in courses>session, not as in PHP session)\n * All main sessions functions should be placed here.\n * This class provides methods for sessions management.\n * Include/require it in your code to use its features.\n */\nclass SessionManager\n{\n    public const STATUS_PLANNED = 1;\n    public const STATUS_PROGRESS = 2;\n    public const STATUS_FINISHED = 3;\n    public const STATUS_CANCELLED = 4;\n\n    public static $_debug = false;\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Fetches a session from the database.\n     *\n     * @param int $id Session Id\n     *\n     * @return array Session details\n     */\n    public static function fetch($id)\n    {\n        $em = Database::getManager();\n\n        if (empty($id)) {\n            return [];\n        }\n\n        /** @var Session $session */\n        $session = $em->find('ChamiloCoreBundle:Session', $id);\n\n        if (!$session) {\n            return [];\n        }\n\n        $result = [\n            'id' => $session->getId(),\n            'id_coach' => $session->getGeneralCoach() ? $session->getGeneralCoach()->getId() : null,\n            'session_category_id' => $session->getCategory() ? $session->getCategory()->getId() : null,\n            'name' => $session->getName(),\n            'description' => $session->getDescription(),\n            'show_description' => $session->getShowDescription(),\n            'duration' => $session->getDuration(),\n            'nbr_courses' => $session->getNbrCourses(),\n            'nbr_users' => $session->getNbrUsers(),\n            'nbr_classes' => $session->getNbrClasses(),\n            'session_admin_id' => $session->getSessionAdminId(),\n            'visibility' => $session->getVisibility(),\n            'promotion_id' => $session->getPromotionId(),\n            'display_start_date' => $session->getDisplayStartDate()\n                ? $session->getDisplayStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'display_end_date' => $session->getDisplayEndDate()\n                ? $session->getDisplayEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'access_start_date' => $session->getAccessStartDate()\n                ? $session->getAccessStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'access_end_date' => $session->getAccessEndDate()\n                ? $session->getAccessEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'coach_access_start_date' => $session->getCoachAccessStartDate()\n                ? $session->getCoachAccessStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'coach_access_end_date' => $session->getCoachAccessEndDate()\n                ? $session->getCoachAccessEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'send_subscription_notification' => $session->getSendSubscriptionNotification(),\n        ];\n\n        if (api_get_configuration_value('allow_session_status')) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sql = \"SELECT status FROM $table WHERE id = $id\";\n            $resultQuery = Database::query($sql);\n            $row = Database::fetch_array($resultQuery);\n            $result['status'] = $row['status'];\n            $result['status_label'] = self::getStatusLabel($row['status']);\n        }\n\n        // Converted to local values\n        $variables = [\n            'display_start_date',\n            'display_end_date',\n            'access_start_date',\n            'access_end_date',\n            'coach_access_start_date',\n            'coach_access_end_date',\n        ];\n\n        foreach ($variables as $value) {\n            $result[$value.'_to_local_time'] = null;\n            if (!empty($result[$value])) {\n                $result[$value.'_to_local_time'] = api_get_local_time($result[$value]);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Create a session.\n     *\n     * @author Carlos Vargas <carlos.vargas@beeznest.com>, from existing code\n     *\n     * @param string $name\n     * @param string $startDate                    (YYYY-MM-DD hh:mm:ss)\n     * @param string $endDate                      (YYYY-MM-DD hh:mm:ss)\n     * @param string $displayStartDate             (YYYY-MM-DD hh:mm:ss)\n     * @param string $displayEndDate               (YYYY-MM-DD hh:mm:ss)\n     * @param string $coachStartDate               (YYYY-MM-DD hh:mm:ss)\n     * @param string $coachEndDate                 (YYYY-MM-DD hh:mm:ss)\n     * @param mixed  $coachId                      If int, this is the session coach id,\n     *                                             if string, the coach ID will be looked for from the user table\n     * @param int    $sessionCategoryId            ID of the session category in which this session is registered\n     * @param int    $visibility                   Visibility after end date (0 = read-only, 1 = invisible, 2 =\n     *                                             accessible)\n     * @param bool   $fixSessionNameIfExists\n     * @param string $duration\n     * @param string $description                  Optional. The session description\n     * @param int    $showDescription              Optional. Whether show the session description\n     * @param array  $extraFields\n     * @param int    $sessionAdminId               Optional. If this sessions was created by a session admin, assign it\n     *                                             to him\n     * @param bool   $sendSubscriptionNotification Optional.\n     *                                             Whether send a mail notification to users being subscribed\n     * @param int    $accessUrlId                  Optional.\n     * @param int    $status\n     *\n     * @return mixed Session ID on success, error message otherwise\n     *\n     * @todo   use an array to replace all this parameters or use the model.lib.php ...\n     */\n    public static function create_session(\n        $name,\n        $startDate,\n        $endDate,\n        $displayStartDate,\n        $displayEndDate,\n        $coachStartDate,\n        $coachEndDate,\n        $coachId,\n        $sessionCategoryId,\n        $visibility = 1,\n        $fixSessionNameIfExists = false,\n        $duration = null,\n        $description = null,\n        $showDescription = 0,\n        $extraFields = [],\n        $sessionAdminId = 0,\n        $sendSubscriptionNotification = false,\n        $accessUrlId = 0,\n        $status = 0\n    ) {\n        global $_configuration;\n\n        // Check portal limits\n        $accessUrlId = api_is_multiple_url_enabled()\n            ? (empty($accessUrlId) ? api_get_current_access_url_id() : (int) $accessUrlId)\n            : 1;\n\n        if (isset($_configuration[$accessUrlId]) &&\n            is_array($_configuration[$accessUrlId]) &&\n            isset($_configuration[$accessUrlId]['hosting_limit_sessions']) &&\n            $_configuration[$accessUrlId]['hosting_limit_sessions'] > 0\n        ) {\n            $num = self::count_sessions();\n            if ($num >= $_configuration[$accessUrlId]['hosting_limit_sessions']) {\n                api_warn_hosting_contact('hosting_limit_sessions');\n\n                return get_lang('PortalSessionsLimitReached');\n            }\n        }\n\n        $name = Database::escape_string(trim($name));\n        $sessionCategoryId = (int) $sessionCategoryId;\n        $visibility = (int) $visibility;\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $startDate = Database::escape_string($startDate);\n        $endDate = Database::escape_string($endDate);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionNameIsRequired');\n\n            return $msg;\n        } elseif (!empty($startDate) && !api_is_valid_date($startDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i:s')\n        ) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!empty($endDate) && !api_is_valid_date($endDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i:s')\n        ) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif (!empty($startDate) && !empty($endDate) && $startDate >= $endDate) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        } else {\n            $ready_to_create = false;\n            if ($fixSessionNameIfExists) {\n                $name = self::generateNextSessionName($name);\n                if ($name) {\n                    $ready_to_create = true;\n                } else {\n                    $msg = get_lang('SessionNameAlreadyExists');\n\n                    return $msg;\n                }\n            } else {\n                $rs = Database::query(\"SELECT 1 FROM $tbl_session WHERE name='\".$name.\"'\");\n                if (Database::num_rows($rs)) {\n                    $msg = get_lang('SessionNameAlreadyExists');\n\n                    return $msg;\n                }\n                $ready_to_create = true;\n            }\n\n            if ($ready_to_create) {\n                $sessionAdminId = !empty($sessionAdminId) ? $sessionAdminId : api_get_user_id();\n                $values = [\n                    'name' => $name,\n                    'id_coach' => $coachId,\n                    'session_admin_id' => $sessionAdminId,\n                    'visibility' => $visibility,\n                    'description' => $description,\n                    'show_description' => $showDescription,\n                    'send_subscription_notification' => (int) $sendSubscriptionNotification,\n                ];\n\n                if (!empty($startDate)) {\n                    $values['access_start_date'] = api_get_utc_datetime($startDate);\n                }\n\n                if (!empty($endDate)) {\n                    $values['access_end_date'] = api_get_utc_datetime($endDate);\n                }\n\n                if (!empty($displayStartDate)) {\n                    $values['display_start_date'] = api_get_utc_datetime($displayStartDate);\n                }\n\n                if (!empty($displayEndDate)) {\n                    $values['display_end_date'] = api_get_utc_datetime($displayEndDate);\n                }\n\n                if (!empty($coachStartDate)) {\n                    $values['coach_access_start_date'] = api_get_utc_datetime($coachStartDate);\n                }\n                if (!empty($coachEndDate)) {\n                    $values['coach_access_end_date'] = api_get_utc_datetime($coachEndDate);\n                }\n\n                if (!empty($sessionCategoryId)) {\n                    $values['session_category_id'] = $sessionCategoryId;\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $values['status'] = $status;\n                }\n\n                $session_id = Database::insert($tbl_session, $values);\n                $duration = (int) $duration;\n\n                if (!empty($duration)) {\n                    $sql = \"UPDATE $tbl_session SET\n                        access_start_date = NULL,\n                        access_end_date = NULL,\n                        display_start_date = NULL,\n                        display_end_date = NULL,\n                        coach_access_start_date = NULL,\n                        coach_access_end_date = NULL,\n                        duration = $duration\n                    WHERE id = $session_id\";\n                    Database::query($sql);\n                } else {\n                    $sql = \"UPDATE $tbl_session\n                        SET duration = 0\n                        WHERE id = $session_id\";\n                    Database::query($sql);\n                }\n\n                if (!empty($session_id)) {\n                    $extraFields['item_id'] = $session_id;\n                    $sessionFieldValue = new ExtraFieldValue('session');\n                    $sessionFieldValue->saveFieldValues($extraFields);\n\n                    // Adding to the correct URL\n                    UrlManager::add_session_to_url($session_id, $accessUrlId);\n\n                    // add event to system log\n                    Event::addEvent(\n                        LOG_SESSION_CREATE,\n                        LOG_SESSION_ID,\n                        $session_id,\n                        api_get_utc_datetime(),\n                        api_get_user_id()\n                    );\n                }\n\n                return $session_id;\n            }\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return bool\n     */\n    public static function sessionNameExists($name)\n    {\n        $name = Database::escape_string($name);\n        $sql = \"SELECT COUNT(*) as count FROM \".Database::get_main_table(TABLE_MAIN_SESSION).\"\n                WHERE name = '$name'\";\n        $result = Database::fetch_array(Database::query($sql));\n\n        return $result['count'] > 0;\n    }\n\n    /**\n     * @param string $where_condition\n     *\n     * @return mixed\n     */\n    public static function get_count_admin($where_condition = '')\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $where = 'WHERE 1=1 ';\n        $user_id = api_get_user_id();\n        $extraJoin = '';\n\n        if (api_is_session_admin() &&\n            api_get_setting('allow_session_admins_to_manage_all_sessions') == 'false'\n        ) {\n            $where .= \" AND (\n                            s.session_admin_id = $user_id  OR\n                            sru.user_id = '$user_id' AND\n                            sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\n                            )\n                      \";\n\n            $extraJoin = \" INNER JOIN $tbl_session_rel_user sru\n                           ON sru.session_id = s.id \";\n        }\n\n        $today = api_get_utc_datetime();\n        $today = api_strtotime($today, 'UTC');\n        $today = date('Y-m-d', $today);\n\n        if (!empty($where_condition)) {\n            $where_condition = str_replace(\"(  session_active = ':'  )\", '1=1', $where_condition);\n\n            $where_condition = str_replace('category_name', 'sc.name', $where_condition);\n            $where_condition = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $where_condition\n            );\n            $where_condition = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $where_condition\n            );\n        } else {\n            $where_condition = \" AND 1 = 1\";\n        }\n\n        $courseCondition = null;\n        if (strpos($where_condition, 'c.id')) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n            $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n            $courseCondition = \" INNER JOIN $table course_rel_session\n                                 ON (s.id = course_rel_session.session_id)\n                                 INNER JOIN $tableCourse c\n                                 ON (course_rel_session.c_id = c.id)\n                                \";\n        }\n\n        $sql = \"SELECT COUNT(id) as total_rows FROM (\n                SELECT DISTINCT\n                 IF (\n\t\t\t\t\t(s.access_start_date <= '$today' AND '$today' <= s.access_end_date) OR\n                    (s.access_start_date IS NULL AND s.access_end_date IS NULL ) OR\n\t\t\t\t\t(s.access_start_date <= '$today' AND s.access_end_date IS NULL) OR\n\t\t\t\t\t('$today' <= s.access_end_date AND s.access_start_date IS NULL)\n\t\t\t\t, 1, 0) as session_active,\n                s.id\n                FROM $tbl_session s\n                LEFT JOIN $tbl_session_category sc\n                ON s.session_category_id = sc.id\n                INNER JOIN $tbl_user u\n                ON s.id_coach = u.id\n                $courseCondition\n                $extraJoin\n                $where $where_condition ) as session_table\";\n\n        if (api_is_multiple_url_enabled()) {\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $where .= \" AND ar.access_url_id = $access_url_id \";\n\n                $sql = \"SELECT count(id) as total_rows FROM (\n                SELECT DISTINCT\n                  IF (\n\t\t\t\t\t(s.access_start_date <= '$today' AND '$today' <= s.access_end_date) OR\n                    (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n\t\t\t\t\t(s.access_start_date <= '$today' AND s.access_end_date IS NULL) OR\n\t\t\t\t\t('$today' <= s.access_end_date AND s.access_start_date IS NULL)\n\t\t\t\t, 1, 0)\n\t\t\t\tas session_active,\n\t\t\t\ts.id\n                FROM $tbl_session s\n                    LEFT JOIN  $tbl_session_category sc\n                    ON s.session_category_id = sc.id\n                    INNER JOIN $tbl_user u ON s.id_coach = u.user_id\n                    INNER JOIN $table_access_url_rel_session ar\n                    ON ar.session_id = s.id\n                    $courseCondition\n                    $extraJoin\n                $where $where_condition) as session_table\";\n            }\n        }\n\n        $result_rows = Database::query($sql);\n        $row = Database::fetch_array($result_rows);\n        $num = $row['total_rows'];\n\n        return $num;\n    }\n\n    /**\n     * Get session list for a session admin or platform admin.\n     *\n     * @param int    $userId   User Id for the session admin.\n     * @param array  $options  Order and limit keys.\n     * @param bool   $getCount Whether to get all the results or only the count.\n     * @param array  $columns  Columns from jqGrid.\n     * @param string $listType\n     *\n     * @return array\n     */\n    public static function getSessionsForAdmin(\n        $userId,\n        $options = [],\n        $getCount = false,\n        $columns = [],\n        $listType = 'all'\n    ) {\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sessionCategoryTable = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n\n        $where = 'WHERE 1 = 1 ';\n\n        $userId = (int) $userId;\n\n        if (!api_is_platform_admin()) {\n            if (api_is_session_admin() &&\n                'false' === api_get_setting('allow_session_admins_to_manage_all_sessions')\n            ) {\n                $where .= \" AND s.session_admin_id = $userId \";\n            }\n        }\n\n        if (!api_is_platform_admin() &&\n            api_is_teacher() &&\n            'true' === api_get_setting('allow_teachers_to_create_sessions')\n        ) {\n            $where .= \" AND s.id_coach = $userId \";\n        }\n\n        $extraFieldModel = new ExtraFieldModel('session');\n        $conditions = $extraFieldModel->parseConditions($options);\n\n        $sqlInjectJoins = $conditions['inject_joins'];\n        $where .= $conditions['where'];\n        $sqlInjectWhere = $conditions['inject_where'];\n        $injectExtraFields = $conditions['inject_extra_fields'];\n        $order = $conditions['order'];\n        $limit = $conditions['limit'];\n\n        $isMakingOrder = false;\n        $showCountUsers = false;\n\n        if (true === $getCount) {\n            $select = ' SELECT count(DISTINCT s.id) as total_rows ';\n        } else {\n            if (!empty($columns['column_model'])) {\n                foreach ($columns['column_model'] as $column) {\n                    if ('users' == $column['name']) {\n                        $showCountUsers = true;\n                    }\n                }\n            }\n\n            $select =\n                \"SELECT DISTINCT\n                     s.name,\n                     s.display_start_date,\n                     s.display_end_date,\n                     access_start_date,\n                     access_end_date,\n                     s.visibility,\n                     s.session_category_id,\n                     $injectExtraFields\n                     s.id\n             \";\n\n            if ($showCountUsers) {\n                $select .= ', count(su.user_id) users';\n            }\n\n            if (api_get_configuration_value('allow_session_status')) {\n                $select .= ', status';\n            }\n\n            if (isset($options['order'])) {\n                $isMakingOrder = 0 === strpos($options['order'], 'category_name');\n            }\n        }\n\n        $isFilteringSessionCategory = strpos($where, 'category_name') !== false;\n        $isFilteringSessionCategoryWithName = strpos($where, 'sc.name') !== false;\n\n        if ($isMakingOrder || $isFilteringSessionCategory || $isFilteringSessionCategoryWithName) {\n            $sqlInjectJoins .= \" LEFT JOIN $sessionCategoryTable sc ON s.session_category_id = sc.id \";\n\n            if ($isFilteringSessionCategory) {\n                $where = str_replace('category_name', 'sc.name', $where);\n            }\n\n            if ($isMakingOrder) {\n                $order = str_replace('category_name', 'sc.name', $order);\n            }\n        }\n\n        if ($showCountUsers) {\n            $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n            $sqlInjectJoins .= \" LEFT JOIN $tblSessionRelUser su ON (su.session_id = s.id)\";\n        }\n\n        $query = \"$select FROM $tblSession s $sqlInjectJoins $where $sqlInjectWhere\";\n\n        if (api_is_multiple_url_enabled()) {\n            $tblAccessUrlRelSession = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $accessUrlId = api_get_current_access_url_id();\n\n            if ($accessUrlId != -1) {\n                $where .= \" AND ar.access_url_id = $accessUrlId \";\n                $query = \"$select\n                    FROM $tblSession s $sqlInjectJoins\n                    INNER JOIN $tblAccessUrlRelSession ar\n                    ON (ar.session_id = s.id) $where\";\n            }\n        }\n\n        $date = api_get_utc_datetime();\n\n        switch ($listType) {\n            case 'all':\n                break;\n            case 'active':\n                $query .= \"AND (\n                    (s.access_end_date IS NULL)\n                    OR\n                    (\n                    s.access_start_date IS NOT NULL AND\n                    s.access_end_date IS NOT NULL AND\n                    s.access_start_date <= '$date' AND s.access_end_date >= '$date')\n                    OR\n                    (\n                        s.access_start_date IS NULL AND\n                        s.access_end_date IS NOT NULL AND\n                        s.access_end_date >= '$date'\n                    )\n                )\";\n                break;\n            case 'close':\n                $query .= \"AND (\n                    (\n                    s.access_start_date IS NOT NULL AND\n                    s.access_end_date IS NOT NULL AND\n                    s.access_start_date <= '$date' AND s.access_end_date <= '$date')\n                    OR\n                    (\n                        s.access_start_date IS NULL AND\n                        s.access_end_date IS NOT NULL AND\n                        s.access_end_date <= '$date'\n                    )\n                )\";\n                break;\n        }\n\n        if ($showCountUsers) {\n            $query .= ' GROUP by s.id';\n        }\n\n        $allowOrder = api_get_configuration_value('session_list_order');\n\n        if ($allowOrder) {\n            $order = ' ORDER BY position ASC';\n        }\n\n        $query .= $order;\n        $query .= $limit;\n        $result = Database::query($query);\n\n        $sessions = Database::store_result($result, 'ASSOC');\n\n        if ('all' === $listType) {\n            if ($getCount) {\n                return $sessions[0]['total_rows'];\n            }\n\n            return $sessions;\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Gets the admin session list callback of the session/session_list.php page.\n     *\n     * @param array  $options           order and limit keys\n     * @param bool   $getCount          Whether to get all the results or only the count\n     * @param array  $columns\n     * @param array  $extraFieldsToLoad\n     * @param string $listType\n     *\n     * @return mixed Integer for number of rows, or array of results\n     * @assert ([],true) !== false\n     */\n    public static function formatSessionsAdminForGrid(\n        $options = [],\n        $getCount = false,\n        $columns = [],\n        $extraFieldsToLoad = [],\n        $listType = 'all'\n    ) {\n        $showCountUsers = false;\n        if (!$getCount && !empty($columns['column_model'])) {\n            foreach ($columns['column_model'] as $column) {\n                if ('users' === $column['name']) {\n                    $showCountUsers = true;\n                }\n            }\n        }\n\n        $userId = api_get_user_id();\n        $sessions = self::getSessionsForAdmin($userId, $options, $getCount, $columns, $listType);\n        if ($getCount) {\n            return (int) $sessions;\n        }\n\n        $formattedSessions = [];\n        $categories = self::get_all_session_category();\n        $orderedCategories = [];\n        if (!empty($categories)) {\n            foreach ($categories as $category) {\n                $orderedCategories[$category['id']] = $category['name'];\n            }\n        }\n\n        $activeIcon = Display::return_icon('accept.png', get_lang('Active'));\n        $inactiveIcon = Display::return_icon('error.png', get_lang('Inactive'));\n        $webPath = api_get_path(WEB_PATH);\n\n        foreach ($sessions as $session) {\n            if ($showCountUsers) {\n                $session['users'] = self::get_users_by_session($session['id'], 0, true);\n            }\n            $url = $webPath.'main/session/resume_session.php?id_session='.$session['id'];\n            if ($extraFieldsToLoad || api_is_drh()) {\n                $url = $webPath.'session/'.$session['id'].'/about/';\n            }\n\n            $session['name'] = Display::url($session['name'], $url);\n\n            if (!empty($extraFieldsToLoad)) {\n                foreach ($extraFieldsToLoad as $field) {\n                    $extraFieldValue = new ExtraFieldValue('session');\n                    $fieldData = $extraFieldValue->getAllValuesByItemAndField(\n                        $session['id'],\n                        $field['id']\n                    );\n                    $fieldDataArray = [];\n                    $fieldDataToString = '';\n                    if (!empty($fieldData)) {\n                        foreach ($fieldData as $data) {\n                            $fieldDataArray[] = $data['value'];\n                        }\n                        $fieldDataToString = implode(', ', $fieldDataArray);\n                    }\n                    $session[$field['variable']] = $fieldDataToString;\n                }\n            }\n            if (isset($session['session_active']) && $session['session_active'] == 1) {\n                $session['session_active'] = $activeIcon;\n            } else {\n                $session['session_active'] = $inactiveIcon;\n            }\n\n            $session = self::convert_dates_to_local($session, true);\n\n            switch ($session['visibility']) {\n                case SESSION_VISIBLE_READ_ONLY: //1\n                    $session['visibility'] = get_lang('ReadOnly');\n                    break;\n                case SESSION_VISIBLE:           //2\n                case SESSION_AVAILABLE:         //4\n                    $session['visibility'] = get_lang('Visible');\n                    break;\n                case SESSION_INVISIBLE:         //3\n                    $session['visibility'] = api_ucfirst(get_lang('Invisible'));\n                    break;\n            }\n\n            // Cleaning double selects.\n            foreach ($session as $key => &$value) {\n                if (isset($optionsByDouble[$key]) || isset($optionsByDouble[$key.'_second'])) {\n                    $options = explode('::', $value);\n                }\n                $original_key = $key;\n                if (strpos($key, '_second') !== false) {\n                    $key = str_replace('_second', '', $key);\n                }\n\n                if (isset($optionsByDouble[$key]) &&\n                    isset($options[0]) &&\n                    isset($optionsByDouble[$key][$options[0]])\n                ) {\n                    if (strpos($original_key, '_second') === false) {\n                        $value = $optionsByDouble[$key][$options[0]]['option_display_text'];\n                    } else {\n                        $value = $optionsByDouble[$key][$options[1]]['option_display_text'];\n                    }\n                }\n            }\n\n            $categoryName = isset($orderedCategories[$session['session_category_id']]) ? $orderedCategories[$session['session_category_id']] : '';\n            $session['category_name'] = $categoryName;\n            if (isset($session['status'])) {\n                $session['status'] = self::getStatusLabel($session['status']);\n            }\n\n            $formattedSessions[] = $session;\n        }\n\n        return $formattedSessions;\n    }\n\n    /**\n     * Gets the progress of learning paths in the given session.\n     *\n     * @param int    $sessionId\n     * @param int    $courseId\n     * @param string $date_from\n     * @param string $date_to\n     * @param array options order and limit keys\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_session_lp_progress(\n        $sessionId,\n        $courseId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        //escaping vars\n        $sessionId = $sessionId === 'T' ? 'T' : intval($sessionId);\n        $courseId = intval($courseId);\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_course_lp_view = Database::get_course_table(TABLE_LP_VIEW);\n\n        $course = api_get_course_info_by_id($courseId);\n        $sessionCond = 'and session_id = %s';\n        if ($sessionId === 'T') {\n            $sessionCond = '';\n        }\n\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 $sessionCond\";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'].\" \";\n        }\n\n        $sql = \"SELECT u.id as user_id, u.lastname, u.firstname, u.username, u.email, s.c_id\n                FROM $session_course_user s\n                INNER JOIN $user u ON u.id = s.user_id\n                $where\n                $order\n                $limit\";\n\n        $sql_query = sprintf($sql, Database::escape_string($course['real_id']), $sessionId);\n\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        // Get lessons\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n\n        $table = [];\n        foreach ($users as $user) {\n            $data = [\n                'lastname' => $user[1],\n                'firstname' => $user[2],\n                'username' => $user[3],\n            ];\n\n            $sessionCond = 'AND v.session_id = %d';\n            if ($sessionId == 'T') {\n                $sessionCond = \"\";\n            }\n\n            //Get lessons progress by user\n            $sql = \"SELECT v.lp_id as id, v.progress\n                    FROM  $tbl_course_lp_view v\n                    WHERE v.c_id = %d\n                    AND v.user_id = %d\n            $sessionCond\";\n\n            $sql_query = sprintf(\n                $sql,\n                intval($courseId),\n                intval($user['user_id']),\n                $sessionId\n            );\n\n            $result = Database::query($sql_query);\n\n            $user_lessons = [];\n            while ($row = Database::fetch_array($result)) {\n                $user_lessons[$row['id']] = $row;\n            }\n\n            //Match course lessons with user progress\n            $progress = 0;\n            $count = 0;\n            foreach ($lessons as $lesson) {\n                $data[$lesson['id']] = (!empty($user_lessons[$lesson['id']]['progress'])) ? $user_lessons[$lesson['id']]['progress'] : 0;\n                $progress += $data[$lesson['id']];\n                $data[$lesson['id']] = $data[$lesson['id']].'%';\n                $count++;\n            }\n            if ($count == 0) {\n                $data['total'] = 0;\n            } else {\n                $data['total'] = round($progress / $count, 2).'%';\n            }\n            $table[] = $data;\n        }\n\n        return $table;\n    }\n\n    /**\n     * Gets the survey answers.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     * @param int $surveyId\n     * @param array options order and limit keys\n     *\n     * @todo fix the query\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_survey_overview(\n        $sessionId,\n        $courseId,\n        $surveyId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        //escaping vars\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n        $surveyId = intval($surveyId);\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $c_survey = Database::get_course_table(TABLE_SURVEY);\n        $c_survey_answer = Database::get_course_table(TABLE_SURVEY_ANSWER);\n        $c_survey_question = Database::get_course_table(TABLE_SURVEY_QUESTION);\n        $c_survey_question_option = Database::get_course_table(TABLE_SURVEY_QUESTION_OPTION);\n\n        $course = api_get_course_info_by_id($courseId);\n\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 AND session_id = %s\";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        $sql = \"SELECT u.user_id, u.lastname, u.firstname, u.username, u.email, s.c_id\n                FROM $session_course_user s\n                INNER JOIN $user u ON u.user_id = s.user_id\n                $where $order $limit\";\n\n        $sql_query = sprintf($sql, intval($course['real_id']), $sessionId);\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        //Get survey questions\n        $questions = SurveyManager::get_questions($surveyId, $courseId);\n\n        //Survey is anonymous?\n        $result = Database::query(sprintf(\"SELECT anonymous FROM $c_survey WHERE survey_id = %d\", $surveyId));\n        $row = Database::fetch_array($result);\n        $anonymous = ($row['anonymous'] == 1) ? true : false;\n\n        $table = [];\n        foreach ($users as $user) {\n            $data = [\n                'lastname' => ($anonymous ? '***' : $user[1]),\n                'firstname' => ($anonymous ? '***' : $user[2]),\n                'username' => ($anonymous ? '***' : $user[3]),\n            ];\n\n            //Get questions by user\n            $sql = \"SELECT sa.question_id, sa.option_id, sqo.option_text, sq.type\n                    FROM $c_survey_answer sa\n                    INNER JOIN $c_survey_question sq\n                    ON sq.question_id = sa.question_id\n                    LEFT JOIN $c_survey_question_option sqo\n                    ON\n                      sqo.c_id = sa.c_id AND\n                      sqo.question_id = sq.question_id AND\n                      sqo.question_option_id = sa.option_id AND\n                      sqo.survey_id = sq.survey_id\n                    WHERE\n                      sa.survey_id = %d AND\n                      sa.c_id = %d AND\n                      sa.user = %d\n            \"; //. $where_survey;\n            $sql_query = sprintf($sql, $surveyId, $courseId, $user['user_id']);\n\n            $result = Database::query($sql_query);\n\n            $user_questions = [];\n            while ($row = Database::fetch_array($result)) {\n                $user_questions[$row['question_id']] = $row;\n            }\n\n            //Match course lessons with user progress\n            foreach ($questions as $question_id => $question) {\n                $option_text = 'option_text';\n                if ($user_questions[$question_id]['type'] == 'open') {\n                    $option_text = 'option_id';\n                }\n                $data[$question_id] = $user_questions[$question_id][$option_text];\n            }\n\n            $table[] = $data;\n        }\n\n        return $table;\n    }\n\n    /**\n     * Gets the progress of the given session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     * @param array options order and limit keys\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_session_progress(\n        $sessionId,\n        $courseId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        $sessionId = (int) $sessionId;\n\n        $getAllSessions = false;\n        if (empty($sessionId)) {\n            $sessionId = 0;\n            $getAllSessions = true;\n        }\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n        $tbl_course_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $wiki = Database::get_course_table(TABLE_WIKI);\n        $table_stats_default = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $table_stats_access = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ACCESS);\n\n        $course = api_get_course_info_by_id($courseId);\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 \";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        //TODO, fix create report without session\n        $queryVariables = [$course['real_id']];\n        if (!empty($sessionId)) {\n            $where .= ' AND session_id = %s';\n            $queryVariables[] = $sessionId;\n            $sql = \"SELECT\n                        u.user_id, u.lastname, u.firstname, u.username,\n                        u.email, s.c_id, s.session_id\n                    FROM $session_course_user s\n                    INNER JOIN $user u\n                    ON u.user_id = s.user_id\n                    $where $order $limit\";\n        } else {\n            $sql = \"SELECT\n                        u.user_id, u.lastname, u.firstname, u.username,\n                        u.email, s.c_id, s.session_id\n                    FROM $session_course_user s\n                    INNER JOIN $user u ON u.user_id = s.user_id\n                    $where $order $limit\";\n        }\n\n        $sql_query = vsprintf($sql, $queryVariables);\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        /**\n         *  Lessons.\n         */\n        $sql = \"SELECT * FROM $tbl_course_lp WHERE c_id = %s \"; //AND session_id = %s\n        $sql_query = sprintf($sql, $course['real_id']);\n        $result = Database::query($sql_query);\n        $arrLesson = [[]];\n        while ($row = Database::fetch_array($result)) {\n            if (empty($arrLesson[$row['session_id']]['lessons_total'])) {\n                $arrLesson[$row['session_id']]['lessons_total'] = 1;\n            } else {\n                $arrLesson[$row['session_id']]['lessons_total']++;\n            }\n        }\n\n        /**\n         *  Exercises.\n         */\n        $exercises = ExerciseLib::get_all_exercises(\n            $course,\n            $sessionId,\n            false,\n            '',\n            $getAllSessions\n        );\n        $exercises_total = count($exercises);\n\n        /**\n         *  Assignments.\n         */\n        //total\n        $params = [$course['real_id']];\n        if ($getAllSessions) {\n            $sql = \"SELECT count(w.id) as count\n                    FROM $workTable w\n                    LEFT JOIN $workTableAssignment a\n                    ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                    WHERE\n                        w.c_id = %s AND\n                        parent_id = 0 AND\n                        active IN (1, 0)\";\n        } else {\n            $sql = \"SELECT count(w.id) as count\n                    FROM $workTable w\n                    LEFT JOIN $workTableAssignment a\n                    ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                    WHERE\n                        w.c_id = %s AND\n                        parent_id = 0 AND\n                        active IN (1, 0)\";\n\n            if (empty($sessionId)) {\n                $sql .= ' AND w.session_id = NULL ';\n            } else {\n                $sql .= ' AND w.session_id = %s ';\n                $params[] = $sessionId;\n            }\n        }\n\n        $sql_query = vsprintf($sql, $params);\n        $result = Database::query($sql_query);\n        $row = Database::fetch_array($result);\n        $assignments_total = $row['count'];\n\n        /**\n         * Wiki.\n         */\n        if ($getAllSessions) {\n            $sql = \"SELECT count(distinct page_id)  as count FROM $wiki\n                    WHERE c_id = %s\";\n        } else {\n            $sql = \"SELECT count(distinct page_id)  as count FROM $wiki\n                    WHERE c_id = %s and session_id = %s\";\n        }\n        $sql_query = sprintf($sql, $course['real_id'], $sessionId);\n        $result = Database::query($sql_query);\n        $row = Database::fetch_array($result);\n        $wiki_total = $row['count'];\n\n        /**\n         * Surveys.\n         */\n        $survey_user_list = [];\n        $survey_list = SurveyManager::get_surveys($course['code'], $sessionId);\n\n        $surveys_total = count($survey_list);\n        foreach ($survey_list as $survey) {\n            $user_list = SurveyManager::get_people_who_filled_survey(\n                $survey['survey_id'],\n                false,\n                $course['real_id']\n            );\n            foreach ($user_list as $user_id) {\n                isset($survey_user_list[$user_id]) ? $survey_user_list[$user_id]++ : $survey_user_list[$user_id] = 1;\n            }\n        }\n\n        /**\n         * Forums.\n         */\n        $forums_total = CourseManager::getCountForum(\n            $course['real_id'],\n            $sessionId,\n            $getAllSessions\n        );\n\n        //process table info\n        foreach ($users as $user) {\n            //Course description\n            $sql = \"SELECT count(*) as count\n                    FROM $table_stats_access\n                    WHERE access_tool = 'course_description'\n                    AND c_id = '%s'\n                    AND access_session_id = %s\n                    AND access_user_id = %s \";\n            $sql_query = sprintf($sql, $course['real_id'], $user['id_session'], $user['user_id']);\n\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n            $course_description_progress = ($row['count'] > 0) ? 100 : 0;\n\n            if (!empty($arrLesson[$user['id_session']]['lessons_total'])) {\n                $lessons_total = $arrLesson[$user['id_session']]['lessons_total'];\n            } else {\n                $lessons_total = !empty($arrLesson[0]['lessons_total']) ? $arrLesson[0]['lessons_total'] : 0;\n            }\n\n            //Lessons\n            //TODO: Lessons done and left is calculated by progress per item in lesson, maybe we should calculate it only per completed lesson?\n            $lessons_progress = Tracking::get_avg_student_progress(\n                $user['user_id'],\n                $course['code'],\n                [],\n                $user['id_session']\n            );\n            $lessons_done = ($lessons_progress * $lessons_total) / 100;\n            $lessons_left = $lessons_total - $lessons_done;\n\n            // Exercises\n            $exercises_progress = str_replace(\n                '%',\n                '',\n                Tracking::get_exercise_student_progress(\n                    $exercises,\n                    $user['user_id'],\n                    $course['real_id'],\n                    $user['id_session']\n                )\n            );\n            $exercises_done = round(($exercises_progress * $exercises_total) / 100);\n            $exercises_left = $exercises_total - $exercises_done;\n\n            //Assignments\n            $assignments_done = Tracking::count_student_assignments($user['user_id'], $course['code'], $user['id_session']);\n            $assignments_left = $assignments_total - $assignments_done;\n            if (!empty($assignments_total)) {\n                $assignments_progress = round((($assignments_done * 100) / $assignments_total), 2);\n            } else {\n                $assignments_progress = 0;\n            }\n\n            // Wiki\n            // total revisions per user\n            $sql = \"SELECT count(*) as count\n                    FROM $wiki\n                    WHERE c_id = %s and session_id = %s and user_id = %s\";\n            $sql_query = sprintf($sql, $course['real_id'], $user['id_session'], $user['user_id']);\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n            $wiki_revisions = $row['count'];\n            //count visited wiki pages\n            $sql = \"SELECT count(distinct default_value) as count\n                    FROM $table_stats_default\n                    WHERE\n                        default_user_id = %s AND\n                        default_event_type = 'wiki_page_view' AND\n                        default_value_type = 'wiki_page_id' AND\n                        c_id = %s\n                    \";\n            $sql_query = sprintf($sql, $user['user_id'], $course['real_id']);\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n\n            $wiki_read = $row['count'];\n            $wiki_unread = $wiki_total - $wiki_read;\n            if (!empty($wiki_total)) {\n                $wiki_progress = round((($wiki_read * 100) / $wiki_total), 2);\n            } else {\n                $wiki_progress = 0;\n            }\n\n            //Surveys\n            $surveys_done = (isset($survey_user_list[$user['user_id']]) ? $survey_user_list[$user['user_id']] : 0);\n            $surveys_left = $surveys_total - $surveys_done;\n            if (!empty($surveys_total)) {\n                $surveys_progress = round((($surveys_done * 100) / $surveys_total), 2);\n            } else {\n                $surveys_progress = 0;\n            }\n\n            //Forums\n            $forums_done = CourseManager::getCountForumPerUser(\n                $user['user_id'],\n                $course['real_id'],\n                $user['id_session']\n            );\n            $forums_left = $forums_total - $forums_done;\n            if (!empty($forums_total)) {\n                $forums_progress = round((($forums_done * 100) / $forums_total), 2);\n            } else {\n                $forums_progress = 0;\n            }\n\n            // Overall Total\n            $overall_total = ($course_description_progress + $exercises_progress + $forums_progress + $assignments_progress + $wiki_progress + $surveys_progress) / 6;\n\n            $link = '<a href=\"'.api_get_path(WEB_CODE_PATH).'mySpace/myStudents.php?student='.$user[0].'&details=true&course='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkForum = '<a href=\"'.api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkWork = '<a href=\"'.api_get_path(WEB_CODE_PATH).'work/work.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkWiki = '<a href=\"'.api_get_path(WEB_CODE_PATH).'wiki/index.php?cidReq='.$course['code'].'&session_id='.$user['id_session'].'&action=statistics\"> %s </a>';\n            $linkSurvey = '<a href=\"'.api_get_path(WEB_CODE_PATH).'survey/survey_list.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n\n            $table[] = [\n                'lastname' => $user[1],\n                'firstname' => $user[2],\n                'username' => $user[3],\n                //'profile'   => '',\n                'total' => round($overall_total, 2).'%',\n                'courses' => sprintf($link, $course_description_progress.'%'),\n                'lessons' => sprintf($link, $lessons_progress.'%'),\n                'exercises' => sprintf($link, $exercises_progress.'%'),\n                'forums' => sprintf($link, $forums_progress.'%'),\n                'homeworks' => sprintf($link, $assignments_progress.'%'),\n                'wikis' => sprintf($link, $wiki_progress.'%'),\n                'surveys' => sprintf($link, $surveys_progress.'%'),\n                //course description\n                'course_description_progress' => $course_description_progress.'%',\n                //lessons\n                'lessons_total' => sprintf($link, $lessons_total),\n                'lessons_done' => sprintf($link, $lessons_done),\n                'lessons_left' => sprintf($link, $lessons_left),\n                'lessons_progress' => sprintf($link, $lessons_progress.'%'),\n                //exercises\n                'exercises_total' => sprintf($link, $exercises_total),\n                'exercises_done' => sprintf($link, $exercises_done),\n                'exercises_left' => sprintf($link, $exercises_left),\n                'exercises_progress' => sprintf($link, $exercises_progress.'%'),\n                //forums\n                'forums_total' => sprintf($linkForum, $forums_total),\n                'forums_done' => sprintf($linkForum, $forums_done),\n                'forums_left' => sprintf($linkForum, $forums_left),\n                'forums_progress' => sprintf($linkForum, $forums_progress.'%'),\n                //assignments\n                'assignments_total' => sprintf($linkWork, $assignments_total),\n                'assignments_done' => sprintf($linkWork, $assignments_done),\n                'assignments_left' => sprintf($linkWork, $assignments_left),\n                'assignments_progress' => sprintf($linkWork, $assignments_progress.'%'),\n                //wiki\n                'wiki_total' => sprintf($linkWiki, $wiki_total),\n                'wiki_revisions' => sprintf($linkWiki, $wiki_revisions),\n                'wiki_read' => sprintf($linkWiki, $wiki_read),\n                'wiki_unread' => sprintf($linkWiki, $wiki_unread),\n                'wiki_progress' => sprintf($linkWiki, $wiki_progress.'%'),\n                //survey\n                'surveys_total' => sprintf($linkSurvey, $surveys_total),\n                'surveys_done' => sprintf($linkSurvey, $surveys_done),\n                'surveys_left' => sprintf($linkSurvey, $surveys_left),\n                'surveys_progress' => sprintf($linkSurvey, $surveys_progress.'%'),\n            ];\n        }\n\n        return $table;\n    }\n\n    /**\n     * Get the ip, total of clicks, login date and time logged in for all user, in one session.\n     *\n     * @todo track_e_course_access table should have ip so we dont have to look for it in track_e_login\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     *\n     * @version 1.9.6\n     */\n    public static function get_user_data_access_tracking_overview(\n        $sessionId,\n        $courseId = 0,\n        $studentId = 0,\n        $profile = '',\n        $date_from = '',\n        $date_to = '',\n        $options = []\n    ) {\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n        $studentId = intval($studentId);\n        $profile = intval($profile);\n        $date_from = Database::escape_string($date_from);\n        $date_to = Database::escape_string($date_to);\n\n        // database table definition\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $track_e_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $track_e_course_access = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        global $export_csv;\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        } else {\n            $is_western_name_order = api_is_western_name_order();\n        }\n\n        $where = null;\n        if (isset($sessionId) && !empty($sessionId)) {\n            $where = sprintf(\" WHERE a.session_id = %d\", $sessionId);\n        }\n        if (isset($courseId) && !empty($courseId)) {\n            $where .= sprintf(\" AND c.id = %d\", $courseId);\n        }\n        if (isset($studentId) && !empty($studentId)) {\n            $where .= sprintf(\" AND u.user_id = %d\", $studentId);\n        }\n        if (isset($profile) && !empty($profile)) {\n            $where .= sprintf(\" AND u.status = %d\", $profile);\n        }\n        if (!empty($date_to) && !empty($date_from)) {\n            $where .= sprintf(\n                \" AND a.login_course_date >= '%s 00:00:00'\n                 AND a.login_course_date <= '%s 23:59:59'\",\n                $date_from,\n                $date_to\n            );\n        }\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        //TODO add course name\n        $sql = \"SELECT\n                a.login_course_date ,\n                u.username ,\n                \".($is_western_name_order ? \"\n                    u.firstname,\n                    u.lastname,\n                    \" : \"\n                    u.lastname,\n                    u.firstname,\n                \").\"\n                a.logout_course_date,\n                a.counter,\n                c.title,\n                c.code,\n                u.user_id,\n                a.session_id\n            FROM $track_e_course_access a\n            INNER JOIN $user u ON a.user_id = u.user_id\n            INNER JOIN $course c ON a.c_id = c.id\n            $where $order $limit\";\n        $result = Database::query(sprintf($sql, $sessionId, $courseId));\n\n        $data = [];\n        while ($user = Database::fetch_assoc($result)) {\n            $data[] = $user;\n        }\n\n        foreach ($data as $key => $info) {\n            $sql = \"SELECT\n                    name\n                    FROM $sessionTable\n                    WHERE\n                    id = {$info['session_id']}\";\n            $result = Database::query($sql);\n            $session = Database::fetch_assoc($result);\n\n            // building array to display\n            $return[] = [\n                'user_id' => $info['user_id'],\n                'logindate' => $info['login_course_date'],\n                'username' => $info['username'],\n                'firstname' => $info['firstname'],\n                'lastname' => $info['lastname'],\n                'clicks' => $info['counter'], //+ $clicks[$info['user_id']],\n                'ip' => '',\n                'timeLoggedIn' => gmdate(\"H:i:s\", strtotime($info['logout_course_date']) - strtotime($info['login_course_date'])),\n                'session' => $session['name'],\n            ];\n        }\n\n        foreach ($return as $key => $info) {\n            //Search for ip, we do less querys if we iterate the final array\n            $sql = sprintf(\n                \"SELECT user_ip FROM $track_e_login WHERE login_user_id = %d AND login_date < '%s' ORDER BY login_date DESC LIMIT 1\",\n                $info['user_id'],\n                $info['logindate']\n            ); //TODO add select by user too\n            $result = Database::query($sql);\n            $ip = Database::fetch_assoc($result);\n            //if no ip founded, we search the closest higher ip\n            if (empty($ip['user_ip'])) {\n                $sql = sprintf(\n                    \"SELECT user_ip FROM $track_e_login WHERE login_user_id = %d AND login_date > '%s'  ORDER BY login_date ASC LIMIT 1\",\n                    $info['user_id'],\n                    $info['logindate']\n                ); //TODO add select by user too\n                $result = Database::query($sql);\n                $ip = Database::fetch_assoc($result);\n            }\n            //add ip to final array\n            $return[$key]['ip'] = $ip['user_ip'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Creates a new course code based in given code.\n     *\n     * @param string $session_name\n     *                             <code>\n     *                             $wanted_code = 'curse' if there are in the DB codes like curse1 curse2 the function\n     *                             will return: course3 if the course code doest not exist in the DB the same course\n     *                             code will be returned\n     *                             </code>\n     *\n     * @return string wanted unused code\n     */\n    public static function generateNextSessionName($session_name)\n    {\n        $session_name_ok = !self::sessionNameExists($session_name);\n        if (!$session_name_ok) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION);\n            $session_name = Database::escape_string($session_name);\n            $sql = \"SELECT count(*) as count FROM $table\n                    WHERE name LIKE '$session_name%'\";\n            $result = Database::query($sql);\n            if (Database::num_rows($result) > 0) {\n                $row = Database::fetch_array($result);\n                $count = $row['count'] + 1;\n                $session_name = $session_name.'_'.$count;\n                $result = self::sessionNameExists($session_name);\n                if (!$result) {\n                    return $session_name;\n                }\n            }\n\n            return false;\n        }\n\n        return $session_name;\n    }\n\n    /**\n     * Edit a session.\n     *\n     * @author Carlos Vargas from existing code\n     *\n     * @param int    $id                           Session primary key\n     * @param string $name\n     * @param string $startDate\n     * @param string $endDate\n     * @param string $displayStartDate\n     * @param string $displayEndDate\n     * @param string $coachStartDate\n     * @param string $coachEndDate\n     * @param int    $coachId\n     * @param int    $sessionCategoryId\n     * @param int    $visibility\n     * @param string $description\n     * @param int    $showDescription\n     * @param int    $duration\n     * @param array  $extraFields\n     * @param int    $sessionAdminId\n     * @param bool   $sendSubscriptionNotification Optional. Whether send a mail notification to users being subscribed\n     * @param int    $status\n     *\n     * @return mixed\n     */\n    public static function edit_session(\n        $id,\n        $name,\n        $startDate,\n        $endDate,\n        $displayStartDate,\n        $displayEndDate,\n        $coachStartDate,\n        $coachEndDate,\n        $coachId,\n        $sessionCategoryId,\n        $visibility,\n        $description = null,\n        $showDescription = 0,\n        $duration = null,\n        $extraFields = [],\n        $sessionAdminId = 0,\n        $sendSubscriptionNotification = false,\n        $status = 0\n    ) {\n        $status = (int) $status;\n        $coachId = (int) $coachId;\n        $sessionCategoryId = (int) $sessionCategoryId;\n        $visibility = (int) $visibility;\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        if (empty($name)) {\n            Display::addFlash(\n                Display::return_message(get_lang('SessionNameIsRequired'), 'warning')\n            );\n\n            return false;\n        } elseif (empty($coachId)) {\n            Display::addFlash(\n                Display::return_message(get_lang('CoachIsRequired'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($startDate) &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i:s')\n        ) {\n            Display::addFlash(\n                Display::return_message(get_lang('InvalidStartDate'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($endDate) &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i:s')\n        ) {\n            Display::addFlash(\n                Display::return_message(get_lang('InvalidEndDate'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($startDate) && !empty($endDate) && $startDate >= $endDate) {\n            Display::addFlash(\n                Display::return_message(get_lang('StartDateShouldBeBeforeEndDate'), 'warning')\n            );\n\n            return false;\n        } else {\n            $sessionInfo = self::get_session_by_name($name);\n            $exists = false;\n\n            if (!empty($sessionInfo)) {\n                if ($sessionInfo['id'] != $id) {\n                    $exists = true;\n                }\n            }\n\n            if ($exists) {\n                Display::addFlash(\n                    Display::return_message(get_lang('SessionNameAlreadyExists'), 'warning')\n                );\n\n                return false;\n            } else {\n                $values = [\n                    'name' => $name,\n                    'duration' => $duration,\n                    'id_coach' => $coachId,\n                    'description' => $description,\n                    'show_description' => intval($showDescription),\n                    'visibility' => $visibility,\n                    'send_subscription_notification' => $sendSubscriptionNotification,\n                    'access_start_date' => null,\n                    'access_end_date' => null,\n                    'display_start_date' => null,\n                    'display_end_date' => null,\n                    'coach_access_start_date' => null,\n                    'coach_access_end_date' => null,\n                ];\n\n                if (!empty($sessionAdminId)) {\n                    $values['session_admin_id'] = $sessionAdminId;\n                }\n\n                if (!empty($startDate)) {\n                    $values['access_start_date'] = api_get_utc_datetime($startDate);\n                }\n\n                if (!empty($endDate)) {\n                    $values['access_end_date'] = api_get_utc_datetime($endDate);\n                }\n\n                if (!empty($displayStartDate)) {\n                    $values['display_start_date'] = api_get_utc_datetime($displayStartDate);\n                }\n\n                if (!empty($displayEndDate)) {\n                    $values['display_end_date'] = api_get_utc_datetime($displayEndDate);\n                }\n\n                if (!empty($coachStartDate)) {\n                    $values['coach_access_start_date'] = api_get_utc_datetime($coachStartDate);\n                }\n                if (!empty($coachEndDate)) {\n                    $values['coach_access_end_date'] = api_get_utc_datetime($coachEndDate);\n                }\n\n                $values['session_category_id'] = null;\n                if (!empty($sessionCategoryId)) {\n                    $values['session_category_id'] = $sessionCategoryId;\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $values['status'] = $status;\n                }\n\n                Database::update(\n                    $tbl_session,\n                    $values,\n                    ['id = ?' => $id]\n                );\n\n                if (!empty($extraFields)) {\n                    $extraFields['item_id'] = $id;\n                    $sessionFieldValue = new ExtraFieldValue('session');\n                    $sessionFieldValue->saveFieldValues($extraFields);\n                }\n\n                return $id;\n            }\n        }\n    }\n\n    /**\n     * Delete session.\n     *\n     * @author Carlos Vargas  from existing code\n     *\n     * @param array $id_checked an array to delete sessions\n     * @param bool  $from_ws    optional, true if the function is called\n     *                          by a webservice, false otherwise\n     *\n     * @return bool\n     * */\n    public static function delete($id_checked, $from_ws = false)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_url_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $tbl_item_properties = Database::get_course_table(TABLE_ITEM_PROPERTY);\n        $tbl_student_publication = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $tbl_student_publication_assignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n        $userGroupSessionTable = Database::get_main_table(TABLE_USERGROUP_REL_SESSION);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $trackAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ACCESS);\n        $tbl_learnpath = Database::get_course_table(TABLE_LP_MAIN);\n        $tbl_dropbox = Database::get_course_table(TABLE_DROPBOX_FILE);\n        $trackEExercises = Database::get_main_table(TABLE_STATISTIC_TRACK_E_EXERCISES);\n        $trackEAttempt = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ATTEMPT);\n\n        $ticket = Database::get_main_table(TABLE_TICKET_TICKET);\n        $em = Database::getManager();\n        $userId = api_get_user_id();\n\n        // If this session is involved in any sequence, cancel deletion and ask\n        // for the sequence update before deleting.\n        /** @var SequenceResourceRepository $repo */\n        $repo = Database::getManager()->getRepository('ChamiloCoreBundle:SequenceResource');\n        $sequenceResource = $repo->findRequirementForResource(\n            $id_checked,\n            SequenceResource::SESSION_TYPE\n        );\n\n        if ($sequenceResource) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('ThereIsASequenceResourceLinkedToThisSessionYouNeedToDeleteItFirst'),\n                    'error'\n                )\n            );\n\n            return false;\n        }\n\n        // If the $id_checked param is an array, split it into individual\n        // sessions deletion.\n        if (is_array($id_checked)) {\n            foreach ($id_checked as $sessionId) {\n                self::delete($sessionId);\n            }\n        } else {\n            $id_checked = intval($id_checked);\n        }\n\n        // Check permissions from the person launching the deletion.\n        // If the call is issued from a web service or automated process,\n        // we assume the caller checks for permissions ($from_ws).\n        if (self::allowed($id_checked) && !$from_ws) {\n            $qb = $em\n                ->createQuery('\n                    SELECT s.sessionAdminId FROM ChamiloCoreBundle:Session s\n                    WHERE s.id = ?1\n                ')\n                ->setParameter(1, $id_checked);\n\n            $res = $qb->getSingleScalarResult();\n\n            if ($res != $userId && !api_is_platform_admin()) {\n                api_not_allowed(true);\n            }\n        }\n\n        $sessionInfo = api_get_session_info($id_checked);\n\n        // Delete documents and assignments inside a session\n        $courses = self::getCoursesInSession($id_checked);\n        foreach ($courses as $courseId) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n            // Delete documents\n            DocumentManager::deleteDocumentsFromSession($courseInfo, $id_checked);\n\n            // Delete assignments\n            $works = Database::select(\n                '*',\n                $tbl_student_publication,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            $currentCourseRepositorySys = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n            foreach ($works as $index => $work) {\n                if ($work['filetype'] = 'folder') {\n                    Database::query(\"DELETE FROM $tbl_student_publication_assignment WHERE publication_id = $index\");\n                }\n                my_delete($currentCourseRepositorySys.'/'.$work['url']);\n            }\n\n            // Delete learning paths\n            $learnpaths = Database::select(\n                'iid',\n                $tbl_learnpath,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            $courseInfo = api_get_course_info_by_id($courseId);\n            foreach ($learnpaths as $lpData) {\n                $lp = new learnpath($courseInfo['code'], $lpData['iid'], $userId);\n                $lp->delete($courseInfo, $lpData['iid'], true);\n                unset($lp);\n            }\n\n            // Delete dropbox documents\n            $dropboxes = Database::select(\n                'iid',\n                $tbl_dropbox,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            require_once __DIR__.'/../../dropbox/dropbox_functions.inc.php';\n            foreach ($dropboxes as $dropbox) {\n                $dropboxPerson = new Dropbox_Person(\n                    $userId,\n                    true,\n                    false,\n                    $courseId,\n                    $id_checked\n                );\n                $dropboxPerson->deleteReceivedWork($dropbox['iid'], $courseId, $id_checked);\n                $dropboxPerson->deleteSentWork($dropbox['iid'], $courseId, $id_checked);\n            }\n\n            // TODO: Delete audio files from test answers\n            $attempts = Database::select(\n                ['id', 'user_id', 'exe_id'],\n                $trackEAttempt,\n                [\n                    'where' => [\n                        'session_id = ? AND c_id = ? AND (filename IS NOT NULL AND filename != \\'\\')' => [\n                            $id_checked,\n                            $courseId,\n                        ],\n                    ],\n                ]\n            );\n            foreach ($attempts as $attempt) {\n                $oral = new OralExpression();\n                $oral->initFile($id_checked, $attempt['user_id'], 0, $attempt['exe_id'], $courseId);\n                $filename = $oral->getAbsoluteFilePath(true);\n                my_delete($filename);\n            }\n        }\n\n        // Class\n        $sql = \"DELETE FROM $userGroupSessionTable\n                WHERE session_id IN($id_checked)\";\n        Database::query($sql);\n\n        Database::query(\"DELETE FROM $tbl_student_publication WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_course WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_course_rel_user WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_user WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_item_properties WHERE session_id IN ($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_url_session WHERE session_id IN($id_checked)\");\n\n        Database::query(\"DELETE FROM $trackCourseAccess WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $trackAccess WHERE access_session_id IN($id_checked)\");\n\n        if (api_get_configuration_value('allow_lp_subscription_to_usergroups')) {\n            $tableGroup = Database::get_course_table(TABLE_LP_REL_USERGROUP);\n            Database::query(\"DELETE FROM $tableGroup WHERE session_id IN($id_checked)\");\n            $tableGroup = Database::get_course_table(TABLE_LP_CATEGORY_REL_USERGROUP);\n            Database::query(\"DELETE FROM $tableGroup WHERE session_id IN($id_checked)\");\n        }\n\n        $sql = \"UPDATE $ticket SET session_id = NULL WHERE session_id IN ($id_checked)\";\n        Database::query($sql);\n\n        $app_plugin = new AppPlugin();\n        $app_plugin->performActionsWhenDeletingItem('session', $id_checked);\n\n        $sql = \"DELETE FROM $tbl_session WHERE id IN ($id_checked)\";\n        Database::query($sql);\n\n        $extraFieldValue = new ExtraFieldValue('session');\n        $extraFieldValue->deleteValuesByItem($id_checked);\n\n        $repo->deleteResource(\n            $id_checked,\n            SequenceResource::SESSION_TYPE\n        );\n\n        // Add event to system log\n        Event::addEvent(\n            LOG_SESSION_DELETE,\n            LOG_SESSION_ID,\n            $sessionInfo['name'].' - id:'.$id_checked,\n            api_get_utc_datetime(),\n            $userId\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int $id promotion id\n     *\n     * @return bool\n     */\n    public static function clear_session_ref_promotion($id)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $id = intval($id);\n        $sql = \"UPDATE $tbl_session\n                SET promotion_id = 0\n                WHERE promotion_id = $id\";\n        if (Database::query($sql)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Subscribes students to the given session and optionally (default)\n     * unsubscribes previous users.\n     *\n     * @author Carlos Vargas from existing code\n     * @author Julio Montoya. Cleaning code.\n     *\n     * @param int   $sessionId\n     * @param array $userList\n     * @param int   $session_visibility\n     * @param bool  $empty_users\n     * @param bool  $registerUsersToAllCourses\n     *\n     * @return bool\n     */\n    public static function subscribeUsersToSession(\n        $sessionId,\n        $userList,\n        $session_visibility = SESSION_VISIBLE_READ_ONLY,\n        $empty_users = true,\n        $registerUsersToAllCourses = true\n    ) {\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return false;\n        }\n\n        foreach ($userList as $intUser) {\n            if ($intUser != strval(intval($intUser))) {\n                return false;\n            }\n        }\n\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $session = api_get_session_entity($sessionId);\n\n        // from function parameter\n        if (empty($session_visibility)) {\n            $session_visibility = $session->getVisibility();\n            //default status loaded if empty\n            // by default readonly 1\n            if (empty($session_visibility)) {\n                $session_visibility = SESSION_VISIBLE_READ_ONLY;\n            }\n        } else {\n            if (!in_array($session_visibility, [SESSION_VISIBLE_READ_ONLY, SESSION_VISIBLE, SESSION_INVISIBLE])) {\n                $session_visibility = SESSION_VISIBLE_READ_ONLY;\n            }\n        }\n\n        $sql = \"SELECT user_id FROM $tbl_session_rel_course_rel_user\n                WHERE session_id = $sessionId AND status = 0\";\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        $sql = \"SELECT c_id FROM $tbl_session_rel_course\n                WHERE session_id = $sessionId\";\n        $result = Database::query($sql);\n        $course_list = [];\n        while ($row = Database::fetch_array($result)) {\n            $course_list[] = $row['c_id'];\n        }\n\n        if ($session->getSendSubscriptionNotification() &&\n            is_array($userList)\n        ) {\n            // Sending emails only\n            foreach ($userList as $user_id) {\n                if (in_array($user_id, $existingUsers)) {\n                    continue;\n                }\n\n                $tplSubject = new Template(\n                    null,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false\n                );\n                $layoutSubject = $tplSubject->get_template(\n                    'mail/subject_subscription_to_session_confirmation.tpl'\n                );\n                $subject = $tplSubject->fetch($layoutSubject);\n                $user_info = api_get_user_info($user_id);\n\n                $tplContent = new Template(\n                    null,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false\n                );\n                // Variables for default template\n                $tplContent->assign('complete_name', stripslashes($user_info['complete_name']));\n                $tplContent->assign('session_name', $session->getName());\n                $tplContent->assign('session_coach', $session->getGeneralCoach()->getCompleteName());\n                $layoutContent = $tplContent->get_template(\n                    'mail/content_subscription_to_session_confirmation.tpl'\n                );\n\n                if (api_get_configuration_value('email_template_subscription_to_session_confirmation_username')) {\n                    $username = sprintf(\n                        get_lang('YourUsernameToAccessIsX'),\n                        stripslashes($user_info['username']));\n\n                    $tplContent->assign('username', $username);\n                }\n\n                if (api_get_configuration_value('email_template_subscription_to_session_confirmation_lost_password')) {\n                    $urlLostPw = api_get_path(WEB_CODE_PATH).'auth/lostPassword.php';\n\n                    $forgotPassword = sprintf(\n                        get_lang('InstructionsLostPasswordWithLinkX'),\n                        $urlLostPw);\n\n                    $tplContent->assign('lostPassword', $forgotPassword);\n                }\n\n                $content = $tplContent->fetch($layoutContent);\n\n                api_mail_html(\n                    $user_info['complete_name'],\n                    $user_info['mail'],\n                    $subject,\n                    $content,\n                    api_get_person_name(\n                        api_get_setting('administratorName'),\n                        api_get_setting('administratorSurname')\n                    ),\n                    api_get_setting('emailAdministrator')\n                );\n            }\n        }\n\n        if ($registerUsersToAllCourses) {\n            foreach ($course_list as $courseId) {\n                // for each course in the session\n                $courseId = (int) $courseId;\n\n                $sql = \"SELECT DISTINCT user_id\n                        FROM $tbl_session_rel_course_rel_user\n                        WHERE\n                            session_id = $sessionId AND\n                            c_id = $courseId AND\n                            status = 0\n                        \";\n                $result = Database::query($sql);\n                $existingUsers = [];\n                while ($row = Database::fetch_array($result)) {\n                    $existingUsers[] = $row['user_id'];\n                }\n\n                // Delete existing users\n                if ($empty_users) {\n                    foreach ($existingUsers as $existing_user) {\n                        if (!in_array($existing_user, $userList)) {\n                            self::unSubscribeUserFromCourseSession($existing_user, $courseId, $sessionId);\n                        }\n                    }\n                }\n\n                $usersToSubscribeInCourse = array_filter(\n                    $userList,\n                    function ($userId) use ($existingUsers) {\n                        return !in_array($userId, $existingUsers);\n                    }\n                );\n\n                self::insertUsersInCourse(\n                    $usersToSubscribeInCourse,\n                    $courseId,\n                    $sessionId,\n                    ['visibility' => $session_visibility],\n                    false\n                );\n            }\n        }\n\n        // Delete users from the session\n        if (true === $empty_users) {\n            $sql = \"DELETE FROM $tbl_session_rel_user\n                    WHERE\n                      session_id = $sessionId AND\n                      relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n            // Don't reset session_rel_user.registered_at of users that will be registered later anyways.\n            if (!empty($userList)) {\n                $avoidDeleteThisUsers = \" AND user_id NOT IN ('\".implode(\"','\", $userList).\"')\";\n                $sql .= $avoidDeleteThisUsers;\n            }\n            Event::addEvent(\n                LOG_SESSION_DELETE_USER,\n                LOG_USER_ID,\n                'all',\n                api_get_utc_datetime(),\n                api_get_user_id(),\n                null,\n                $sessionId\n            );\n            Database::query($sql);\n        }\n\n        // Insert missing users into session\n        foreach ($userList as $enreg_user) {\n            $isUserSubscribed = self::isUserSubscribedAsStudent($sessionId, $enreg_user);\n            if ($isUserSubscribed === false) {\n                $enreg_user = (int) $enreg_user;\n                $sql = \"INSERT IGNORE INTO $tbl_session_rel_user (relation_type, session_id, user_id, registered_at)\n                        VALUES (0, $sessionId, $enreg_user, '\".api_get_utc_datetime().\"')\";\n                Database::query($sql);\n                Event::addEvent(\n                    LOG_SESSION_ADD_USER,\n                    LOG_USER_ID,\n                    $enreg_user,\n                    api_get_utc_datetime(),\n                    api_get_user_id(),\n                    null,\n                    $sessionId\n                );\n            }\n        }\n\n        // update number of users in the session\n        $sql = \"UPDATE $tbl_session\n                SET nbr_users = (SELECT count(user_id) FROM $tbl_session_rel_user WHERE session_id = $sessionId)\n                WHERE id = $sessionId\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Returns user list of the current users subscribed in the course-session.\n     *\n     * @param int   $sessionId\n     * @param array $courseInfo\n     * @param int   $status\n     *\n     * @return array\n     */\n    public static function getUsersByCourseSession(\n        $sessionId,\n        $courseInfo,\n        $status = null\n    ) {\n        $sessionId = (int) $sessionId;\n        $courseId = $courseInfo['real_id'];\n\n        if (empty($sessionId) || empty($courseId)) {\n            return [];\n        }\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE\n                    session_id = $sessionId AND\n                    c_id = $courseId\n                    $statusCondition\n                \";\n\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        return $existingUsers;\n    }\n\n    /**\n     * Returns user list of the current users subscribed in the course-session.\n     *\n     * @param array $sessionList\n     * @param array $courseList\n     * @param int   $status\n     * @param int   $start\n     * @param int   $limit\n     *\n     * @return array\n     */\n    public static function getUsersByCourseAndSessionList(\n        $sessionList,\n        $courseList,\n        $status = null,\n        $start = null,\n        $limit = null\n    ) {\n        if (empty($sessionList) || empty($courseList)) {\n            return [];\n        }\n        $sessionListToString = implode(\"','\", $sessionList);\n        $courseListToString = implode(\"','\", $courseList);\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE\n                    session_id IN ('$sessionListToString') AND\n                    c_id IN ('$courseListToString')\n                    $statusCondition\n                \";\n        if (!is_null($start) && !is_null($limit)) {\n            $start = (int) $start;\n            $limit = (int) $limit;\n            $sql .= \"LIMIT $start, $limit\";\n        }\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        return $existingUsers;\n    }\n\n    /**\n     * Remove a list of users from a course-session.\n     *\n     * @param array $userList\n     * @param int   $sessionId\n     * @param array $courseInfo\n     * @param int   $status\n     * @param bool  $updateTotal\n     *\n     * @return bool\n     */\n    public static function removeUsersFromCourseSession(\n        $userList,\n        $sessionId,\n        $courseInfo,\n        $status = null,\n        $updateTotal = true\n    ) {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tableSessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId) || empty($userList) || empty($courseInfo)) {\n            return false;\n        }\n\n        is_array($courseInfo) ? $courseId = $courseInfo['real_id'] : $courseId = $courseInfo;\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        foreach ($userList as $userId) {\n            $userId = (int) $userId;\n            $sql = \"DELETE FROM $table\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId\n                        $statusCondition\n                    \";\n            Database::query($sql);\n\n            Event::addEvent(\n                LOG_SESSION_DELETE_USER_COURSE,\n                LOG_USER_ID,\n                $userId,\n                api_get_utc_datetime(),\n                api_get_user_id(),\n                $courseId,\n                $sessionId\n            );\n        }\n\n        if ($updateTotal) {\n            // Count users in this session-course relation\n            $sql = \"SELECT COUNT(user_id) as nbUsers\n                    FROM $table\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        status <> 2\";\n            $result = Database::query($sql);\n            [$userCount] = Database::fetch_array($result);\n\n            // update the session-course relation to add the users total\n            $sql = \"UPDATE $tableSessionCourse\n                    SET nbr_users = $userCount\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId\";\n            Database::query($sql);\n        }\n    }\n\n    /**\n     * Subscribe a user to an specific course inside a session.\n     *\n     * @param array  $user_list\n     * @param int    $session_id\n     * @param string $course_code\n     * @param int    $session_visibility\n     * @param bool   $removeUsersNotInList\n     *\n     * @return bool\n     */\n    public static function subscribe_users_to_session_course(\n        $user_list,\n        $session_id,\n        $course_code,\n        $session_visibility = SESSION_VISIBLE_READ_ONLY,\n        $removeUsersNotInList = false\n    ) {\n        if (empty($session_id) || empty($course_code)) {\n            return false;\n        }\n\n        $session_id = (int) $session_id;\n        $session_visibility = (int) $session_visibility;\n        $course_code = Database::escape_string($course_code);\n        $courseInfo = api_get_course_info($course_code);\n        $courseId = $courseInfo['real_id'];\n\n        if ($removeUsersNotInList) {\n            $currentUsers = self::getUsersByCourseSession($session_id, $courseInfo, 0);\n\n            if (!empty($user_list)) {\n                $userToDelete = array_diff($currentUsers, $user_list);\n            } else {\n                $userToDelete = $currentUsers;\n            }\n\n            if (!empty($userToDelete)) {\n                self::removeUsersFromCourseSession(\n                    $userToDelete,\n                    $session_id,\n                    $courseInfo,\n                    0,\n                    true\n                );\n            }\n        }\n\n        self::insertUsersInCourse(\n            $user_list,\n            $courseId,\n            $session_id,\n            ['visibility' => $session_visibility]\n        );\n    }\n\n    /**\n     * Unsubscribe user from session.\n     *\n     * @param int Session id\n     * @param int User id\n     *\n     * @return bool True in case of success, false in case of error\n     */\n    public static function unsubscribe_user_from_session($session_id, $user_id)\n    {\n        $session_id = (int) $session_id;\n        $user_id = (int) $user_id;\n\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $sql = \"DELETE FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $session_id AND\n                    user_id = $user_id AND\n                    relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n        $return = Database::affected_rows($result);\n\n        // Update number of users\n        $sql = \"UPDATE $tbl_session\n                SET nbr_users = nbr_users - $return\n                WHERE id = $session_id \";\n        Database::query($sql);\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_USER,\n            LOG_USER_ID,\n            $user_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            null,\n            $session_id\n        );\n\n        // Get the list of courses related to this session\n        $course_list = self::get_course_list_by_session_id($session_id);\n        if (!empty($course_list)) {\n            foreach ($course_list as $course) {\n                self::unSubscribeUserFromCourseSession($user_id, $course['id'], $session_id);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $courseId\n     * @param int $session_id\n     */\n    public static function unSubscribeUserFromCourseSession($user_id, $courseId, $session_id)\n    {\n        $user_id = (int) $user_id;\n        $courseId = (int) $courseId;\n        $session_id = (int) $session_id;\n\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        // Delete user from course\n        $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                WHERE session_id = $session_id AND c_id = $courseId AND user_id = $user_id\";\n        $result = Database::query($sql);\n\n        if (Database::affected_rows($result)) {\n            // Update number of users in this relation\n            $sql = \"UPDATE $tbl_session_rel_course SET\n                    nbr_users = nbr_users - 1\n                    WHERE session_id = $session_id AND c_id = $courseId\";\n            Database::query($sql);\n        }\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_USER_COURSE,\n            LOG_USER_ID,\n            $user_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            $courseId,\n            $session_id\n        );\n    }\n\n    /**\n     * Subscribes courses to the given session and optionally (default)\n     * unsubscribe previous users.\n     *\n     * @author Carlos Vargas from existing code\n     *\n     * @param int   $sessionId\n     * @param array $courseList                     List of courses int ids\n     * @param bool  $removeExistingCoursesWithUsers Whether to unsubscribe\n     *                                              existing courses and users (true, default) or not (false)\n     * @param bool  $copyEvaluation                 from base course to session course\n     * @param bool  $copyCourseTeachersAsCoach\n     * @param bool  $importAssignments\n     *\n     * @throws Exception\n     *\n     * @return bool False on failure, true otherwise\n     * */\n    public static function add_courses_to_session(\n        $sessionId,\n        $courseList,\n        $removeExistingCoursesWithUsers = true,\n        $copyEvaluation = false,\n        $copyCourseTeachersAsCoach = false,\n        $importAssignments = false\n    ) {\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId) || empty($courseList)) {\n            return false;\n        }\n\n        if ($importAssignments) {\n            require_once api_get_path(SYS_CODE_PATH).'work/work.lib.php';\n        }\n\n        $session = api_get_session_entity($sessionId);\n\n        if (!$session) {\n            return false;\n        }\n        $sessionVisibility = $session->getVisibility();\n\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        // Get list of courses subscribed to this session\n        $sql = \"SELECT c_id\n                FROM $tbl_session_rel_course\n                WHERE session_id = $sessionId\";\n        $rs = Database::query($sql);\n        $existingCourses = Database::store_result($rs);\n        $nbr_courses = count($existingCourses);\n\n        // Get list of users subscribed to this session\n        $sql = \"SELECT user_id\n                FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $sessionId AND\n                    relation_type<>\".SESSION_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n        $user_list = Database::store_result($result);\n\n        // Remove existing courses from the session.\n        if ($removeExistingCoursesWithUsers === true && !empty($existingCourses)) {\n            foreach ($existingCourses as $existingCourse) {\n                if (!in_array($existingCourse['c_id'], $courseList)) {\n                    $sql = \"DELETE FROM $tbl_session_rel_course\n                            WHERE\n                                c_id = \".$existingCourse['c_id'].\" AND\n                                session_id = $sessionId\";\n                    Database::query($sql);\n\n                    $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                            WHERE\n                                c_id = \".$existingCourse['c_id'].\" AND\n                                session_id = $sessionId\";\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_DELETE_COURSE,\n                        LOG_COURSE_ID,\n                        $existingCourse['c_id'],\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        $existingCourse['c_id'],\n                        $sessionId\n                    );\n\n                    CourseManager::remove_course_ranking(\n                        $existingCourse['c_id'],\n                        $sessionId\n                    );\n                    $nbr_courses--;\n                }\n            }\n        }\n\n        $em = Database::getManager();\n\n        // Pass through the courses list we want to add to the session\n        foreach ($courseList as $courseId) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n\n            // If course doesn't exists continue!\n            if (empty($courseInfo)) {\n                continue;\n            }\n\n            $exists = false;\n            // check if the course we want to add is already subscribed\n            foreach ($existingCourses as $existingCourse) {\n                if ($courseId == $existingCourse['c_id']) {\n                    $exists = true;\n                }\n            }\n\n            if (!$exists) {\n                // Copy gradebook categories and links (from base course)\n                // to the new course session\n                if ($copyEvaluation) {\n                    // it gets the main categories ordered by parent\n                    $cats = Category::load(null, null, $courseInfo['code'], null, null, null, 'ORDER BY parent_id ASC');\n                    if (!empty($cats)) {\n                        $sessionCategory = Category::load(\n                            null,\n                            null,\n                            $courseInfo['code'],\n                            null,\n                            null,\n                            $sessionId,\n                            false\n                        );\n\n                        $sessionCategoriesId = [];\n                        if (empty($sessionCategory)) {\n                            // It sets the values from the main categories to be copied\n                            foreach ($cats as $origCat) {\n                                $cat = new Category();\n                                $sessionName = $session->getName();\n                                $cat->set_name($origCat->get_name().' - '.get_lang('Session').' '.$sessionName);\n                                $cat->set_session_id($sessionId);\n                                $cat->set_course_code($origCat->get_course_code());\n                                $cat->set_description($origCat->get_description());\n                                $cat->set_parent_id($origCat->get_parent_id());\n                                $cat->set_weight($origCat->get_weight());\n                                $cat->set_visible(0);\n                                $cat->set_certificate_min_score($origCat->getCertificateMinScore());\n                                $cat->add();\n                                $sessionGradeBookCategoryId = $cat->get_id();\n                                $sessionCategoriesId[$origCat->get_id()] = $sessionGradeBookCategoryId;\n\n                                // it updates the new parent id\n                                if ($origCat->get_parent_id() > 0) {\n                                    $cat->updateParentId($sessionCategoriesId[$origCat->get_parent_id()], $sessionGradeBookCategoryId);\n                                }\n                            }\n                        } else {\n                            if (!empty($sessionCategory[0])) {\n                                $sessionCategoriesId[0] = $sessionCategory[0]->get_id();\n                            }\n                        }\n\n                        $categoryIdList = [];\n                        /** @var Category $cat */\n                        foreach ($cats as $cat) {\n                            $categoryIdList[$cat->get_id()] = $cat->get_id();\n                        }\n\n                        $newCategoryIdList = [];\n                        foreach ($cats as $cat) {\n                            $links = $cat->get_links(\n                                null,\n                                false,\n                                $courseInfo['code'],\n                                0\n                            );\n\n                            if (!empty($links)) {\n                                /** @var AbstractLink $link */\n                                foreach ($links as $link) {\n                                    $newCategoryId = isset($sessionCategoriesId[$link->getCategory()->get_id()]) ? $sessionCategoriesId[$link->getCategory()->get_id()] : $sessionCategoriesId[0];\n                                    $link->set_category_id($newCategoryId);\n                                    $link->add();\n                                }\n                            }\n\n                            $evaluationList = $cat->get_evaluations(\n                                null,\n                                false,\n                                $courseInfo['code'],\n                                0\n                            );\n\n                            if (!empty($evaluationList)) {\n                                /** @var Evaluation $evaluation */\n                                foreach ($evaluationList as $evaluation) {\n                                    $newCategoryId = isset($sessionCategoriesId[$evaluation->getCategory()->get_id()]) ? $sessionCategoriesId[$evaluation->getCategory()->get_id()] : $sessionCategoriesId[0];\n                                    $evaluation->set_category_id($newCategoryId);\n                                    $evaluation->add();\n                                }\n                            }\n                        }\n\n                        // Create\n                        DocumentManager::generateDefaultCertificate(\n                            $courseInfo,\n                            true,\n                            $sessionId\n                        );\n                    }\n                }\n\n                if ($importAssignments) {\n                    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n                    $sql = \" SELECT * FROM $workTable\n                             WHERE active = 1 AND\n                                   c_id = $courseId AND\n                                   parent_id = 0 AND\n                                   (session_id IS NULL OR session_id = 0)\";\n                    $result = Database::query($sql);\n                    $workList = Database::store_result($result, 'ASSOC');\n\n                    foreach ($workList as $work) {\n                        $values = [\n                            'work_title' => $work['title'],\n                            'new_dir' => $work['url'].'_session_'.$sessionId,\n                            'description' => $work['description'],\n                            'qualification' => $work['qualification'],\n                            'allow_text_assignment' => $work['allow_text_assignment'],\n                        ];\n\n                        addDir(\n                            $values,\n                            api_get_user_id(),\n                            $courseInfo,\n                            0,\n                            $sessionId\n                        );\n                    }\n                }\n\n                // If the course isn't subscribed yet\n                $sql = \"INSERT INTO $tbl_session_rel_course (session_id, c_id, nbr_users, position)\n                        VALUES ($sessionId, $courseId, 0, 0)\";\n                Database::query($sql);\n\n                if (api_get_configuration_value('allow_skill_rel_items')) {\n                    $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n                    $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => null]);\n                    /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $item */\n                    foreach ($items as $item) {\n                        $exists = $skillRelCourseRepo->findOneBy(['course' => $courseId, 'session' => $session]);\n                        if (null === $exists) {\n                            $skillRelCourse = clone $item;\n                            $skillRelCourse->setSession($session);\n                            $em->persist($skillRelCourse);\n                        }\n                    }\n                    $em->flush();\n                }\n\n                Event::addEvent(\n                    LOG_SESSION_ADD_COURSE,\n                    LOG_COURSE_ID,\n                    $courseId,\n                    api_get_utc_datetime(),\n                    api_get_user_id(),\n                    $courseId,\n                    $sessionId\n                );\n\n                // We add the current course in the existing courses array,\n                // to avoid adding another time the current course\n                $existingCourses[] = ['c_id' => $courseId];\n                $nbr_courses++;\n\n                // Subscribe all the users from the session to this course inside the session\n                self::insertUsersInCourse(\n                    array_column($user_list, 'user_id'),\n                    $courseId,\n                    $sessionId,\n                    ['visibility' => $sessionVisibility]\n                );\n            }\n\n            if ($copyCourseTeachersAsCoach) {\n                $teachers = CourseManager::get_teacher_list_from_course_code($courseInfo['code']);\n                if (!empty($teachers)) {\n                    foreach ($teachers as $teacher) {\n                        self::updateCoaches(\n                            $sessionId,\n                            $courseId,\n                            [$teacher['user_id']],\n                            false\n                        );\n                    }\n                }\n            }\n        }\n\n        $sql = \"UPDATE $tbl_session SET nbr_courses = $nbr_courses WHERE id = $sessionId\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Unsubscribe course from a session.\n     *\n     * @param int $session_id\n     * @param int $course_id\n     *\n     * @return bool True in case of success, false otherwise\n     */\n    public static function unsubscribe_course_from_session($session_id, $course_id)\n    {\n        $session_id = (int) $session_id;\n        $course_id = (int) $course_id;\n\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        // Get course code\n        $course_code = CourseManager::get_course_code_from_course_id($course_id);\n\n        if (empty($course_code)) {\n            return false;\n        }\n\n        // Unsubscribe course\n        $sql = \"DELETE FROM $tbl_session_rel_course\n                WHERE c_id = $course_id AND session_id = $session_id\";\n        $result = Database::query($sql);\n        $nb_affected = Database::affected_rows($result);\n\n        $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                WHERE c_id = $course_id AND session_id = $session_id\";\n        Database::query($sql);\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_COURSE,\n            LOG_COURSE_ID,\n            $course_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            $course_id,\n            $session_id\n        );\n\n        if ($nb_affected > 0) {\n            // Update number of courses in the session\n            $sql = \"UPDATE $tbl_session SET nbr_courses= nbr_courses - $nb_affected\n                    WHERE id = $session_id\";\n            Database::query($sql);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates a new extra field for a given session.\n     *\n     * @param string $variable    Field's internal variable name\n     * @param int    $fieldType   Field's type\n     * @param string $displayText Field's language var name\n     * @param string $default     Field's default value\n     *\n     * @return int new extra field id\n     */\n    public static function create_session_extra_field(\n        $variable,\n        $fieldType,\n        $displayText,\n        $default = ''\n    ) {\n        $extraField = new ExtraFieldModel('session');\n        $params = [\n            'variable' => $variable,\n            'field_type' => $fieldType,\n            'display_text' => $displayText,\n            'default_value' => $default,\n        ];\n\n        return $extraField->save($params);\n    }\n\n    /**\n     * Update an extra field value for a given session.\n     *\n     * @param int    $sessionId Session ID\n     * @param string $variable  Field variable name\n     * @param string $value     Optional. Default field value\n     *\n     * @return bool|int An integer when register a new extra field. And boolean when update the extrafield\n     */\n    public static function update_session_extra_field_value($sessionId, $variable, $value = '')\n    {\n        $extraFieldValue = new ExtraFieldValue('session');\n        $params = [\n            'item_id' => $sessionId,\n            'variable' => $variable,\n            'value' => $value,\n        ];\n\n        return $extraFieldValue->save($params);\n    }\n\n    /**\n     * Checks the relationship between a session and a course.\n     *\n     * @param int $session_id\n     * @param int $courseId\n     *\n     * @return bool returns TRUE if the session and the course are related, FALSE otherwise\n     * */\n    public static function relation_session_course_exist($session_id, $courseId)\n    {\n        $tbl_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $return_value = false;\n        $sql = \"SELECT c_id FROM $tbl_session_course\n                WHERE\n                  session_id = \".intval($session_id).\" AND\n                  c_id = \".intval($courseId);\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            $return_value = true;\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * Get the session information by name.\n     *\n     * @param string $name\n     *\n     * @return mixed false if the session does not exist, array if the session exist\n     */\n    public static function get_session_by_name($name)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $name = Database::escape_string(trim($name));\n        if (empty($name)) {\n            return false;\n        }\n\n        $sql = 'SELECT *\n\t\t        FROM '.$tbl_session.'\n\t\t        WHERE name = \"'.$name.'\"';\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return Database::fetch_array($result);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $name\n     *\n     * @return bool\n     */\n    public static function sessionNameExistBesidesMySession($sessionId, $name)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $name = Database::escape_string(trim($name));\n        $sessionId = (int) $sessionId;\n\n        if (empty($name)) {\n            return false;\n        }\n\n        $sql = \"SELECT *\n\t\t        FROM $table\n\t\t        WHERE name = '$name' AND id <> $sessionId \";\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Create a session category.\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>, from existing code\n     *\n     * @param string        name\n     * @param int        year_start\n     * @param int        month_start\n     * @param int        day_start\n     * @param int        year_end\n     * @param int        month_end\n     * @param int        day_end\n     *\n     * @return int session ID\n     * */\n    public static function create_category_session(\n        $sname,\n        $syear_start,\n        $smonth_start,\n        $sday_start,\n        $syear_end,\n        $smonth_end,\n        $sday_end\n    ) {\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $name = trim($sname);\n        $year_start = intval($syear_start);\n        $month_start = intval($smonth_start);\n        $day_start = intval($sday_start);\n        $year_end = intval($syear_end);\n        $month_end = intval($smonth_end);\n        $day_end = intval($sday_end);\n\n        $date_start = \"$year_start-\".(($month_start < 10) ? \"0$month_start\" : $month_start).\"-\".(($day_start < 10) ? \"0$day_start\" : $day_start);\n        $date_end = \"$year_end-\".(($month_end < 10) ? \"0$month_end\" : $month_end).\"-\".(($day_end < 10) ? \"0$day_end\" : $day_end);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionCategoryNameIsRequired');\n\n            return $msg;\n        } elseif (!$month_start || !$day_start || !$year_start || !checkdate($month_start, $day_start, $year_start)) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!$month_end && !$day_end && !$year_end) {\n            $date_end = '';\n        } elseif (!$month_end || !$day_end || !$year_end || !checkdate($month_end, $day_end, $year_end)) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif ($date_start >= $date_end) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        }\n\n        $access_url_id = api_get_current_access_url_id();\n        $params = [\n            'name' => $name,\n            'date_start' => $date_start,\n            'access_url_id' => $access_url_id,\n        ];\n\n        if (!empty($date_end)) {\n            $params['date_end'] = $date_end;\n        }\n\n        $id = Database::insert($tbl_session_category, $params);\n\n        // Add event to system log\n        $user_id = api_get_user_id();\n        Event::addEvent(\n            LOG_SESSION_CATEGORY_CREATE,\n            LOG_SESSION_CATEGORY_ID,\n            $id,\n            api_get_utc_datetime(),\n            $user_id\n        );\n\n        return $id;\n    }\n\n    /**\n     * Edit a sessions category.\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>,from existing code\n     *\n     * @param int        id\n     * @param string        name\n     * @param int        year_start\n     * @param int        month_start\n     * @param int        day_start\n     * @param int        year_end\n     * @param int        month_end\n     * @param int        day_end\n     *\n     * @return bool\n     *              The parameter id is a primary key\n     * */\n    public static function edit_category_session(\n        $id,\n        $sname,\n        $syear_start,\n        $smonth_start,\n        $sday_start,\n        $syear_end,\n        $smonth_end,\n        $sday_end\n    ) {\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $name = trim($sname);\n        $year_start = intval($syear_start);\n        $month_start = intval($smonth_start);\n        $day_start = intval($sday_start);\n        $year_end = intval($syear_end);\n        $month_end = intval($smonth_end);\n        $day_end = intval($sday_end);\n        $id = intval($id);\n        $date_start = \"$year_start-\".(($month_start < 10) ? \"0$month_start\" : $month_start).\"-\".(($day_start < 10) ? \"0$day_start\" : $day_start);\n        $date_end = \"$year_end-\".(($month_end < 10) ? \"0$month_end\" : $month_end).\"-\".(($day_end < 10) ? \"0$day_end\" : $day_end);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionCategoryNameIsRequired');\n\n            return $msg;\n        } elseif (!$month_start || !$day_start || !$year_start || !checkdate($month_start, $day_start, $year_start)) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!$month_end && !$day_end && !$year_end) {\n            $date_end = null;\n        } elseif (!$month_end || !$day_end || !$year_end || !checkdate($month_end, $day_end, $year_end)) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif ($date_start >= $date_end) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        }\n        if ($date_end != null) {\n            $sql = \"UPDATE $tbl_session_category\n                    SET\n                        name = '\".Database::escape_string($name).\"',\n                        date_start = '$date_start' ,\n                        date_end = '$date_end'\n                    WHERE id= $id\";\n        } else {\n            $sql = \"UPDATE $tbl_session_category SET\n                        name = '\".Database::escape_string($name).\"',\n                        date_start = '$date_start',\n                        date_end = NULL\n                    WHERE id= $id\";\n        }\n        $result = Database::query($sql);\n\n        return $result ? true : false;\n    }\n\n    /**\n     * Delete sessions categories.\n     *\n     * @param array|int $categoryId\n     * @param bool      $deleteSessions Optional. Include delete session.\n     * @param bool      $fromWs         Optional. True if the function is called by a webservice, false otherwise.\n     *\n     * @return bool Nothing, or false on error\n     *              The parameters is a array to delete sessions\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>, from existing code\n     */\n    public static function delete_session_category($categoryId, $deleteSessions = false, $fromWs = false)\n    {\n        $tblSessionCategory = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        if (is_array($categoryId)) {\n            $categoryId = array_map('intval', $categoryId);\n        } else {\n            $categoryId = [(int) $categoryId];\n        }\n\n        $categoryId = implode(', ', $categoryId);\n\n        if ($deleteSessions) {\n            $sql = \"SELECT id FROM $tblSession WHERE session_category_id IN ($categoryId)\";\n            $result = Database::query($sql);\n            while ($rows = Database::fetch_array($result)) {\n                $sessionId = $rows['id'];\n                self::delete($sessionId, $fromWs);\n            }\n        } else {\n            $sql = \"UPDATE $tblSession SET session_category_id = NULL WHERE session_category_id IN ($categoryId)\";\n            Database::query($sql);\n        }\n\n        $sql = \"DELETE FROM $tblSessionCategory WHERE id IN ($categoryId)\";\n        Database::query($sql);\n\n        // Add event to system log\n        Event::addEvent(\n            LOG_SESSION_CATEGORY_DELETE,\n            LOG_SESSION_CATEGORY_ID,\n            $categoryId,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * Get a list of sessions of which the given conditions match with an = 'cond'.\n     *\n     * @param array $conditions          a list of condition example :\n     *                                   array('status' => STUDENT) or\n     *                                   array('s.name' => array('operator' => 'LIKE', value = '%$needle%'))\n     * @param array $order_by            a list of fields on which sort\n     * @param int   $urlId\n     * @param array $onlyThisSessionList\n     *\n     * @return array an array with all sessions of the platform\n     *\n     * @todo   optional course code parameter, optional sorting parameters...\n     */\n    public static function get_sessions_list(\n        $conditions = [],\n        $order_by = [],\n        $from = null,\n        $to = null,\n        $urlId = 0,\n        $onlyThisSessionList = []\n    ) {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $session_category_table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $session_course_table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n        $urlId = empty($urlId) ? api_get_current_access_url_id() : (int) $urlId;\n        $return_array = [];\n\n        $sql_query = \" SELECT\n                    DISTINCT(s.id),\n                    s.name,\n                    s.nbr_courses,\n                    s.access_start_date,\n                    s.access_end_date,\n                    u.firstname,\n                    u.lastname,\n                    sc.name as category_name,\n                    s.promotion_id\n\t\t\t\tFROM $session_table s\n\t\t\t\tINNER JOIN $user_table u ON s.id_coach = u.user_id\n\t\t\t\tINNER JOIN $table_access_url_rel_session ar ON ar.session_id = s.id\n\t\t\t\tLEFT JOIN  $session_category_table sc ON s.session_category_id = sc.id\n\t\t\t\tLEFT JOIN $session_course_table sco ON (sco.session_id = s.id)\n\t\t\t\tINNER JOIN $course_table c ON sco.c_id = c.id\n\t\t\t\tWHERE ar.access_url_id = $urlId \";\n\n        $availableFields = [\n            's.id',\n            's.name',\n            'c.id',\n        ];\n\n        $availableOperator = [\n            'like',\n            '>=',\n            '<=',\n            '=',\n        ];\n\n        if (count($conditions) > 0) {\n            foreach ($conditions as $field => $options) {\n                $operator = strtolower($options['operator']);\n                $value = Database::escape_string($options['value']);\n                if (in_array($field, $availableFields) && in_array($operator, $availableOperator)) {\n                    $sql_query .= ' AND '.$field.\" $operator '\".$value.\"'\";\n                }\n            }\n        }\n\n        if (!empty($onlyThisSessionList)) {\n            $onlyThisSessionList = array_map('intval', $onlyThisSessionList);\n            $onlyThisSessionList = implode(\"','\", $onlyThisSessionList);\n            $sql_query .= \" AND s.id IN ('$onlyThisSessionList') \";\n        }\n\n        $orderAvailableList = ['name'];\n        if (count($order_by) > 0) {\n            $order = null;\n            $direction = null;\n            if (isset($order_by[0]) && in_array($order_by[0], $orderAvailableList)) {\n                $order = $order_by[0];\n            }\n            if (isset($order_by[1]) && in_array(strtolower($order_by[1]), ['desc', 'asc'])) {\n                $direction = $order_by[1];\n            }\n\n            if (!empty($order)) {\n                $sql_query .= \" ORDER BY `$order` $direction \";\n            }\n        }\n\n        if (!is_null($from) && !is_null($to)) {\n            $to = (int) $to;\n            $from = (int) $from;\n            $sql_query .= \"LIMIT $from, $to\";\n        }\n\n        $sql_result = Database::query($sql_query);\n        if (Database::num_rows($sql_result) > 0) {\n            while ($result = Database::fetch_array($sql_result)) {\n                $return_array[$result['id']] = $result;\n            }\n        }\n\n        return $return_array;\n    }\n\n    /**\n     * Get the session category information by id.\n     *\n     * @param string session category ID\n     *\n     * @return mixed false if the session category does not exist, array if the session category exists\n     */\n    public static function get_session_category($id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $id = (int) $id;\n        $sql = \"SELECT id, name, date_start, date_end\n                FROM $table\n                WHERE id= $id\";\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return Database::fetch_array($result);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get Hot Sessions (limit 8).\n     *\n     * @return array with sessions\n     */\n    public static function getHotSessions()\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_users = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_extra_fields = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n\n        $extraField = new ExtraFieldModel('session');\n        $field = $extraField->get_handler_field_info_by_field_variable('image');\n\n        $sql = \"SELECT\n                s.id,\n                s.name,\n                s.id_coach,\n                u.firstname,\n                u.lastname,\n                s.session_category_id,\n                c.name as category_name,\n                s.description,\n                (SELECT COUNT(*) FROM $tbl_session_user WHERE session_id = s.id) as users,\n\t\t\t\t(SELECT COUNT(*) FROM $tbl_lp WHERE session_id = s.id) as lessons \";\n        if ($field !== false) {\n            $fieldId = $field['id'];\n            $sql .= \",(SELECT value FROM $tbl_extra_fields WHERE field_id = $fieldId AND item_id = s.id) as image \";\n        }\n        $sql .= \" FROM $tbl_session s\n                LEFT JOIN $tbl_session_category c\n                    ON s.session_category_id = c.id\n                INNER JOIN $tbl_users u\n                    ON s.id_coach = u.id\n                ORDER BY 9 DESC\n                LIMIT 8\";\n        $result = Database::query($sql);\n\n        if (Database::num_rows($result) > 0) {\n            $plugin = BuyCoursesPlugin::create();\n            $checker = $plugin->isEnabled();\n            $sessions = [];\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                if (!isset($row['image'])) {\n                    $row['image'] = '';\n                }\n                $row['on_sale'] = '';\n                if ($checker) {\n                    $row['on_sale'] = $plugin->getItemByProduct(\n                        $row['id'],\n                        BuyCoursesPlugin::PRODUCT_TYPE_SESSION\n                    );\n                }\n                $sessions[] = $row;\n            }\n\n            return $sessions;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get all session categories (filter by access_url_id).\n     *\n     * @return mixed false if the session category does not exist, array if the session category exists\n     */\n    public static function get_all_session_category()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $id = api_get_current_access_url_id();\n        $sql = 'SELECT * FROM '.$table.'\n                WHERE access_url_id = '.$id.'\n                ORDER BY name ASC';\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $data = Database::store_result($result, 'ASSOC');\n\n            return $data;\n        }\n\n        return false;\n    }\n\n    /**\n     * Assign a coach to course in session with status = 2.\n     *\n     * @param int  $userId\n     * @param int  $sessionId\n     * @param int  $courseId\n     * @param bool $noCoach   optional, if is true the user don't be a coach now,\n     *                        otherwise it'll assign a coach\n     *\n     * @return bool true if there are affected rows, otherwise false\n     */\n    public static function set_coach_to_course_session(\n        $userId,\n        $sessionId = 0,\n        $courseId = 0,\n        $noCoach = false\n    ) {\n        // Definition of variables\n        $userId = (int) $userId;\n\n        $sessionId = !empty($sessionId) ? (int) $sessionId : api_get_session_id();\n        $courseId = !empty($courseId) ? (int) $courseId : api_get_course_id();\n\n        if (empty($sessionId) || empty($courseId) || empty($userId)) {\n            return false;\n        }\n\n        // Table definition\n        $tblSessionRelCourseRelUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n\n        $allowedTeachers = implode(',', UserManager::getAllowedRolesAsTeacher());\n\n        // check if user is a teacher\n        $sql = \"SELECT * FROM $tblUser WHERE status IN ($allowedTeachers) AND user_id = $userId\";\n\n        $rsCheckUser = Database::query($sql);\n\n        if (Database::num_rows($rsCheckUser) <= 0) {\n            return false;\n        }\n\n        if ($noCoach) {\n            // check if user_id exists in session_rel_user (if the user is\n            // subscribed to the session in any manner)\n            $sql = \"SELECT user_id FROM $tblSessionRelUser\n                    WHERE\n                        session_id = $sessionId AND\n                        user_id = $userId\";\n            $res = Database::query($sql);\n\n            if (Database::num_rows($res) > 0) {\n                // The user is already subscribed to the session. Change the\n                // record so the user is NOT a coach for this course anymore\n                // and then exit\n                $sql = \"UPDATE $tblSessionRelCourseRelUser\n                        SET status = 0\n                        WHERE\n                            session_id = $sessionId AND\n                            c_id = $courseId AND\n                            user_id = $userId \";\n                $result = Database::query($sql);\n\n                return Database::affected_rows($result) > 0;\n            }\n\n            // The user is not subscribed to the session, so make sure\n            // he isn't subscribed to a course in this session either\n            // and then exit\n            $sql = \"DELETE FROM $tblSessionRelCourseRelUser\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId \";\n            $result = Database::query($sql);\n\n            return Database::affected_rows($result) > 0;\n        }\n\n        // Assign user as a coach to course\n        // First check if the user is registered to the course\n        $sql = \"SELECT user_id FROM $tblSessionRelCourseRelUser\n                WHERE\n                    session_id = $sessionId AND\n                    c_id = $courseId AND\n                    user_id = $userId\";\n        $rs_check = Database::query($sql);\n\n        // Then update or insert.\n        if (Database::num_rows($rs_check) > 0) {\n            $sql = \"UPDATE $tblSessionRelCourseRelUser SET status = 2\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId \";\n            $result = Database::query($sql);\n\n            return Database::affected_rows($result) > 0;\n        }\n\n        $sql = \"INSERT INTO $tblSessionRelCourseRelUser(session_id, c_id, user_id, status)\n                VALUES($sessionId, $courseId, $userId, 2)\";\n        $result = Database::query($sql);\n\n        return Database::affected_rows($result) > 0;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function removeAllDrhFromSession($sessionId)\n    {\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return false;\n        }\n\n        $sql = \"DELETE FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $sessionId AND\n                    relation_type =\".SESSION_RELATION_TYPE_RRHH;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Subscribes sessions to human resource manager (Dashboard feature).\n     *\n     * @param array $userInfo               Human Resource Manager info\n     * @param array $sessions_list          Sessions id\n     * @param bool  $sendEmail\n     * @param bool  $removeSessionsFromUser\n     *\n     * @return int\n     * */\n    public static function subscribeSessionsToDrh(\n        $userInfo,\n        $sessions_list,\n        $sendEmail = false,\n        $removeSessionsFromUser = true\n    ) {\n        // Database Table Definitions\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        if (empty($userInfo)) {\n            return 0;\n        }\n\n        $userId = $userInfo['user_id'];\n\n        // Only subscribe DRH users.\n        $rolesAllowed = [\n            DRH,\n            SESSIONADMIN,\n            PLATFORM_ADMIN,\n            COURSE_TUTOR,\n        ];\n        $isAdmin = api_is_platform_admin_by_id($userInfo['user_id']);\n        if (!$isAdmin && !in_array($userInfo['status'], $rolesAllowed)) {\n            return 0;\n        }\n\n        $affected_rows = 0;\n        // Deleting assigned sessions to hrm_id.\n        if ($removeSessionsFromUser) {\n            if (api_is_multiple_url_enabled()) {\n                $sql = \"SELECT s.session_id\n                        FROM $tbl_session_rel_user s\n                        INNER JOIN $tbl_session_rel_access_url a\n                        ON (a.session_id = s.session_id)\n                        WHERE\n                            s.user_id = $userId AND\n                            relation_type = \".SESSION_RELATION_TYPE_RRHH.\" AND\n                            access_url_id = \".api_get_current_access_url_id();\n            } else {\n                $sql = \"SELECT s.session_id\n                        FROM $tbl_session_rel_user s\n                        WHERE user_id = $userId AND relation_type=\".SESSION_RELATION_TYPE_RRHH;\n            }\n            $result = Database::query($sql);\n\n            if (Database::num_rows($result) > 0) {\n                while ($row = Database::fetch_array($result)) {\n                    $sql = \"DELETE FROM $tbl_session_rel_user\n                            WHERE\n                                session_id = {$row['session_id']} AND\n                                user_id = $userId AND\n                                relation_type =\".SESSION_RELATION_TYPE_RRHH;\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_DELETE_USER,\n                        LOG_USER_ID,\n                        $userId,\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        null,\n                        $row['session_id']\n                    );\n                }\n            }\n        }\n\n        // Inserting new sessions list.\n        if (!empty($sessions_list) && is_array($sessions_list)) {\n            foreach ($sessions_list as $session_id) {\n                $session_id = (int) $session_id;\n                $sql = \"SELECT session_id\n                        FROM $tbl_session_rel_user\n                        WHERE\n                            session_id = $session_id AND\n                            user_id = $userId AND\n                            relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\";\n                $result = Database::query($sql);\n                if (Database::num_rows($result) == 0) {\n                    $sql = \"INSERT IGNORE INTO $tbl_session_rel_user (session_id, user_id, relation_type, registered_at)\n                            VALUES (\n                                $session_id,\n                                $userId,\n                                '\".SESSION_RELATION_TYPE_RRHH.\"',\n                                '\".api_get_utc_datetime().\"'\n                            )\";\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_ADD_USER,\n                        LOG_USER_ID,\n                        $userId,\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        null,\n                        $session_id\n                    );\n\n                    $affected_rows++;\n                }\n            }\n        }\n\n        return $affected_rows;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getDrhUsersInSession($sessionId)\n    {\n        return self::get_users_by_session($sessionId, SESSION_RELATION_TYPE_RRHH);\n    }\n\n    /**\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getSessionFollowedByDrh($userId, $sessionId)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        $select = \" SELECT * \";\n        if (api_is_multiple_url_enabled()) {\n            $sql = \" $select FROM $tbl_session s\n                    INNER JOIN $tbl_session_rel_user sru ON (sru.session_id = s.id)\n                    LEFT JOIN $tbl_session_rel_access_url a ON (s.id = a.session_id)\n                    WHERE\n                        sru.user_id = '$userId' AND\n                        sru.session_id = '$sessionId' AND\n                        sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                        access_url_id = \".api_get_current_access_url_id().\"\n                    \";\n        } else {\n            $sql = \"$select FROM $tbl_session s\n                     INNER JOIN $tbl_session_rel_user sru\n                     ON\n                        sru.session_id = s.id AND\n                        sru.user_id = '$userId' AND\n                        sru.session_id = '$sessionId' AND\n                        sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\n                    \";\n        }\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['course_list'] = self::get_course_list_by_session_id($sessionId);\n\n            return $row;\n        }\n\n        return [];\n    }\n\n    /**\n     * Get sessions followed by human resources manager.\n     *\n     * @param int    $userId\n     * @param int    $start\n     * @param int    $limit\n     * @param bool   $getCount\n     * @param bool   $getOnlySessionId\n     * @param bool   $getSql\n     * @param string $orderCondition\n     * @param string $keyword\n     * @param string $description\n     * @param array  $options\n     *\n     * @return array sessions\n     */\n    public static function get_sessions_followed_by_drh(\n        $userId,\n        $start = null,\n        $limit = null,\n        $getCount = false,\n        $getOnlySessionId = false,\n        $getSql = false,\n        $orderCondition = null,\n        $keyword = '',\n        $description = '',\n        $options = []\n    ) {\n        return self::getSessionsFollowedByUser(\n            $userId,\n            DRH,\n            $start,\n            $limit,\n            $getCount,\n            $getOnlySessionId,\n            $getSql,\n            $orderCondition,\n            $keyword,\n            $description,\n            $options\n        );\n    }\n\n    /**\n     * Get sessions followed by human resources manager.\n     *\n     * @param int    $userId\n     * @param int    $status           DRH Optional\n     * @param int    $start\n     * @param int    $limit\n     * @param bool   $getCount\n     * @param bool   $getOnlySessionId\n     * @param bool   $getSql\n     * @param string $orderCondition\n     * @param string $keyword\n     * @param string $description\n     * @param array  $options\n     *\n     * @return array sessions\n     */\n    public static function getSessionsFollowedByUser(\n        $userId,\n        $status = null,\n        $start = null,\n        $limit = null,\n        $getCount = false,\n        $getOnlySessionId = false,\n        $getSql = false,\n        $orderCondition = null,\n        $keyword = '',\n        $description = '',\n        $options = []\n    ) {\n        // Database Table Definitions\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $extraFieldModel = new ExtraFieldModel('session');\n        $conditions = $extraFieldModel->parseConditions($options);\n        $sqlInjectJoins = $conditions['inject_joins'];\n        $extraFieldsConditions = $conditions['where'];\n        $sqlInjectWhere = $conditions['inject_where'];\n        $injectExtraFields = $conditions['inject_extra_fields'];\n\n        if (!empty($injectExtraFields)) {\n            $injectExtraFields = ' , '.$injectExtraFields.' s.id';\n        }\n\n        $userId = (int) $userId;\n\n        $select = ' SELECT DISTINCT * '.$injectExtraFields;\n        if ($getCount) {\n            $select = ' SELECT count(DISTINCT(s.id)) as count ';\n        }\n\n        if ($getOnlySessionId) {\n            $select = ' SELECT DISTINCT(s.id) ';\n        }\n\n        $limitCondition = null;\n        if (!is_null($start) && !is_null($limit)) {\n            $limitCondition = \" LIMIT \".intval($start).\", \".intval($limit);\n        }\n\n        if (empty($orderCondition)) {\n            $orderCondition = ' ORDER BY s.name ';\n        }\n\n        $whereConditions = null;\n        $sessionCourseConditions = null;\n        $sessionConditions = null;\n        $sessionQuery = '';\n        $courseSessionQuery = null;\n        switch ($status) {\n            case DRH:\n                $sessionQuery = \"SELECT sru.session_id\n                                 FROM\n                                 $tbl_session_rel_user sru\n                                 WHERE\n                                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                                    sru.user_id = $userId\";\n                break;\n            case COURSEMANAGER:\n                $courseSessionQuery = \"\n                    SELECT scu.session_id as id\n                    FROM $tbl_session_rel_course_rel_user scu\n                    WHERE (scu.status = 2 AND scu.user_id = $userId)\";\n\n                $whereConditions = \" OR (s.id_coach = $userId) \";\n                break;\n            case SESSIONADMIN:\n                $sessionQuery = '';\n                if (api_get_setting('allow_session_admins_to_manage_all_sessions') != 'true') {\n                    $sqlInjectJoins .= \" AND s.session_admin_id = $userId \";\n                }\n                break;\n            default:\n                $sessionQuery = \"SELECT sru.session_id\n                                 FROM\n                                 $tbl_session_rel_user sru\n                                 WHERE\n                                    sru.user_id = $userId\";\n                break;\n        }\n\n        $keywordCondition = '';\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (s.name LIKE '%$keyword%' ) \";\n\n            if (!empty($description)) {\n                $description = Database::escape_string($description);\n                $keywordCondition = \" AND (s.name LIKE '%$keyword%' OR s.description LIKE '%$description%' ) \";\n            }\n        }\n\n        $whereConditions .= $keywordCondition;\n        $subQuery = $sessionQuery.$courseSessionQuery;\n\n        if (!empty($subQuery)) {\n            $subQuery = \" AND s.id IN ($subQuery)\";\n        }\n\n        $sql = \" $select\n                FROM $tbl_session s\n                INNER JOIN $tbl_session_rel_access_url a\n                ON (s.id = a.session_id)\n                $sqlInjectJoins\n                WHERE\n                    access_url_id = \".api_get_current_access_url_id().\"\n                    $subQuery\n                    $whereConditions\n                    $extraFieldsConditions\n                    $sqlInjectWhere\n                    $orderCondition\n                    $limitCondition\";\n\n        if ($getSql) {\n            return $sql;\n        }\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $row = Database::fetch_array($result);\n            if ($row) {\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n\n        $sessions = [];\n        if (Database::num_rows($result) > 0) {\n            $sysUploadPath = api_get_path(SYS_UPLOAD_PATH).'sessions/';\n            $webUploadPath = api_get_path(WEB_UPLOAD_PATH).'sessions/';\n            $imgPath = Display::return_icon(\n                'session_default_small.png',\n                null,\n                [],\n                ICON_SIZE_SMALL,\n                false,\n                true\n            );\n\n            while ($row = Database::fetch_array($result)) {\n                if ($getOnlySessionId) {\n                    $sessions[$row['id']] = $row;\n                    continue;\n                }\n                $imageFilename = ExtraFieldModel::FIELD_TYPE_FILE_IMAGE.'_'.$row['id'].'.png';\n                $row['image'] = is_file($sysUploadPath.$imageFilename) ? $webUploadPath.$imageFilename : $imgPath;\n\n                if ($row['display_start_date'] === '0000-00-00 00:00:00' || $row['display_start_date'] === '0000-00-00') {\n                    $row['display_start_date'] = null;\n                }\n\n                if ($row['display_end_date'] === '0000-00-00 00:00:00' || $row['display_end_date'] === '0000-00-00') {\n                    $row['display_end_date'] = null;\n                }\n\n                if ($row['access_start_date'] === '0000-00-00 00:00:00' || $row['access_start_date'] === '0000-00-00') {\n                    $row['access_start_date'] = null;\n                }\n\n                if ($row['access_end_date'] === '0000-00-00 00:00:00' || $row['access_end_date'] === '0000-00-00') {\n                    $row['access_end_date'] = null;\n                }\n\n                if ($row['coach_access_start_date'] === '0000-00-00 00:00:00' ||\n                    $row['coach_access_start_date'] === '0000-00-00'\n                ) {\n                    $row['coach_access_start_date'] = null;\n                }\n\n                if ($row['coach_access_end_date'] === '0000-00-00 00:00:00' ||\n                    $row['coach_access_end_date'] === '0000-00-00'\n                ) {\n                    $row['coach_access_end_date'] = null;\n                }\n\n                $sessions[$row['id']] = $row;\n            }\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Gets the list (or the count) of courses by session filtered by access_url.\n     *\n     * @param int    $session_id  The session id\n     * @param string $course_name The course code\n     * @param string $orderBy     Field to order the data\n     * @param bool   $getCount    Optional. Count the session courses\n     *\n     * @return array|int List of courses. Whether $getCount is true, return the count\n     */\n    public static function get_course_list_by_session_id(\n        $session_id,\n        $course_name = '',\n        $orderBy = null,\n        $getCount = false\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $session_id = (int) $session_id;\n        $sqlSelect = '*, c.id, c.id as real_id, c.code as course_code';\n\n        if ($getCount) {\n            $sqlSelect = 'COUNT(1) as count';\n        }\n\n        // select the courses\n        $sql = \"SELECT $sqlSelect\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON (c.id = src.c_id)\n\t\t        WHERE src.session_id = '$session_id' \";\n\n        if (!empty($course_name)) {\n            $course_name = Database::escape_string($course_name);\n            $sql .= \" AND c.title LIKE '%$course_name%' \";\n        }\n\n        if (!empty($orderBy)) {\n            $orderBy = Database::escape_string($orderBy);\n            $orderBy = \" ORDER BY $orderBy\";\n        } else {\n            if (self::orderCourseIsEnabled()) {\n                $orderBy .= ' ORDER BY position ';\n            } else {\n                $orderBy .= ' ORDER BY title ';\n            }\n        }\n\n        $sql .= Database::escape_string($orderBy);\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n        if ($num_rows > 0) {\n            if ($getCount) {\n                $count = Database::fetch_assoc($result);\n\n                return (int) $count['count'];\n            }\n\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['real_id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the list of courses by session filtered by access_url.\n     *\n     * @param $userId\n     * @param $sessionId\n     * @param null   $from\n     * @param null   $limit\n     * @param null   $column\n     * @param null   $direction\n     * @param bool   $getCount\n     * @param string $keyword\n     *\n     * @return array\n     */\n    public static function getAllCoursesFollowedByUser(\n        $userId,\n        $sessionId,\n        $from = null,\n        $limit = null,\n        $column = null,\n        $direction = null,\n        $getCount = false,\n        $keyword = ''\n    ) {\n        if (empty($sessionId)) {\n            $sessionsSQL = self::get_sessions_followed_by_drh(\n                $userId,\n                null,\n                null,\n                null,\n                true,\n                true\n            );\n        } else {\n            $sessionsSQL = intval($sessionId);\n        }\n\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        if ($getCount) {\n            $select = \"SELECT COUNT(DISTINCT(c.code)) as count \";\n        } else {\n            $select = \"SELECT DISTINCT c.* \";\n        }\n\n        $keywordCondition = null;\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (c.code LIKE '%$keyword%' OR c.title LIKE '%$keyword%' ) \";\n        }\n\n        // Select the courses\n        $sql = \"$select\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE\n\t\t            src.session_id IN ($sessionsSQL)\n\t\t            $keywordCondition\n\t\t        \";\n        if ($getCount) {\n            $result = Database::query($sql);\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        if (isset($from) && isset($limit)) {\n            $from = intval($from);\n            $limit = intval($limit);\n            $sql .= \" LIMIT $from, $limit\";\n        }\n\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n\n        if ($num_rows > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the list of courses by session filtered by access_url.\n     *\n     * @param int    $session_id\n     * @param string $course_name\n     *\n     * @return array list of courses\n     */\n    public static function get_course_list_by_session_id_like($session_id, $course_name = '')\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        $session_id = (int) $session_id;\n        $course_name = Database::escape_string($course_name);\n\n        // select the courses\n        $sql = \"SELECT c.id, c.title FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE \";\n\n        if (!empty($session_id)) {\n            $sql .= \"src.session_id LIKE '$session_id' AND \";\n        }\n\n        if (!empty($course_name)) {\n            $sql .= \"UPPER(c.title) LIKE UPPER('%$course_name%') \";\n        }\n\n        $sql .= \"ORDER BY title;\";\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n        if ($num_rows > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the count of courses by session filtered by access_url.\n     *\n     * @param int session id\n     * @param string $keyword\n     *\n     * @return array list of courses\n     */\n    public static function getCourseCountBySessionId($session_id, $keyword = '')\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $session_id = (int) $session_id;\n\n        // select the courses\n        $sql = \"SELECT COUNT(c.code) count\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE src.session_id = '$session_id' \";\n\n        $keywordCondition = null;\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (c.code LIKE '%$keyword%' OR c.title LIKE '%$keyword%' ) \";\n        }\n        $sql .= $keywordCondition;\n\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        if ($num_rows > 0) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the session id based on the original id and field name in the extra fields.\n     * Returns 0 if session was not found.\n     *\n     * @param string $value    Original session id\n     * @param string $variable Original field name\n     *\n     * @return int Session id\n     */\n    public static function getSessionIdFromOriginalId($value, $variable)\n    {\n        $extraFieldValue = new ExtraFieldValue('session');\n        $result = $extraFieldValue->get_item_id_from_field_variable_and_field_value(\n            $variable,\n            $value\n        );\n\n        if (!empty($result)) {\n            return $result['item_id'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get users by session.\n     *\n     * @param int  $id       session id\n     * @param int  $status   filter by status coach = 2\n     * @param bool $getCount Optional. Allow get the number of rows from the result\n     * @param int  $urlId\n     *\n     * @return array|int A list with an user list. If $getCount is true then return a the count of registers\n     */\n    public static function get_users_by_session(\n        $id,\n        $status = null,\n        $getCount = false,\n        $urlId = 0\n    ) {\n        if (empty($id)) {\n            return [];\n        }\n        $id = (int) $id;\n        $urlId = empty($urlId) ? api_get_current_access_url_id() : (int) $urlId;\n\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $table_access_url_user = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n\n        $selectedField = '\n            u.id as user_id, u.lastname, u.firstname, u.username, su.relation_type, au.access_url_id,\n            su.moved_to, su.moved_status, su.moved_at, su.registered_at\n        ';\n\n        if ($getCount) {\n            $selectedField = 'count(1) AS count';\n        }\n\n        $sql = \"SELECT $selectedField\n                FROM $tbl_user u\n                INNER JOIN $tbl_session_rel_user su\n                ON u.user_id = su.user_id AND\n                su.session_id = $id\n                LEFT OUTER JOIN $table_access_url_user au\n                ON (au.user_id = u.user_id)\n                \";\n\n        if (is_numeric($status)) {\n            $status = (int) $status;\n            $sql .= \" WHERE su.relation_type = $status AND (au.access_url_id = $urlId OR au.access_url_id is null)\";\n        } else {\n            $sql .= \" WHERE (au.access_url_id = $urlId OR au.access_url_id is null )\";\n        }\n\n        $sql .= ' ORDER BY su.relation_type, ';\n        $sql .= api_sort_by_first_name() ? ' u.firstname, u.lastname' : '  u.lastname, u.firstname';\n\n        $result = Database::query($sql);\n        if ($getCount) {\n            $count = Database::fetch_assoc($result);\n            if ($count) {\n                return (int) $count['count'];\n            }\n\n            return 0;\n        }\n\n        $return = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $return[] = $row;\n        }\n\n        return $return;\n    }\n\n    /**\n     * The general coach (field: session.id_coach).\n     *\n     * @param int  $user_id         user id\n     * @param bool $asPlatformAdmin The user is platform admin, return everything\n     *\n     * @return array\n     */\n    public static function get_sessions_by_general_coach($user_id, $asPlatformAdmin = false)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $user_id = (int) $user_id;\n\n        // Session where we are general coach\n        $sql = \"SELECT DISTINCT *\n                FROM $session_table\";\n\n        if (!$asPlatformAdmin) {\n            $sql .= \" WHERE id_coach = $user_id\";\n        }\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n\n            $sqlCoach = '';\n            if (!$asPlatformAdmin) {\n                $sqlCoach = \" id_coach = $user_id AND \";\n            }\n\n            if ($access_url_id != -1) {\n                $sql = 'SELECT DISTINCT session.*\n                    FROM '.$session_table.' session INNER JOIN '.$tbl_session_rel_access_url.' session_rel_url\n                    ON (session.id = session_rel_url.session_id)\n                    WHERE '.$sqlCoach.' access_url_id = '.$access_url_id;\n            }\n        }\n        $sql .= ' ORDER by name';\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $user_id\n     *\n     * @return array\n     *\n     * @deprecated use get_sessions_by_general_coach()\n     */\n    public static function get_sessions_by_coach($user_id)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        return Database::select(\n            '*',\n            $session_table,\n            ['where' => ['id_coach = ?' => $user_id]]\n        );\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $courseId\n     * @param int $session_id\n     *\n     * @return array|bool\n     */\n    public static function get_user_status_in_course_session($user_id, $courseId, $session_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = \"SELECT session_rcru.status\n                FROM $table session_rcru\n                INNER JOIN $tbl_user user\n                ON (session_rcru.user_id = user.user_id)\n                WHERE\n                    session_rcru.session_id = '\".intval($session_id).\"' AND\n                    session_rcru.c_id ='\".intval($courseId).\"' AND\n                    user.user_id = \".intval($user_id);\n\n        $result = Database::query($sql);\n        $status = false;\n        if (Database::num_rows($result)) {\n            $status = Database::fetch_row($result);\n            $status = $status['0'];\n        }\n\n        return $status;\n    }\n\n    /**\n     * Gets user status within a session.\n     *\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return SessionRelUser\n     */\n    public static function getUserStatusInSession($userId, $sessionId)\n    {\n        $em = Database::getManager();\n        $subscriptions = $em\n            ->getRepository('ChamiloCoreBundle:SessionRelUser')\n            ->findBy(['session' => $sessionId, 'user' => $userId]);\n\n        /** @var SessionRelUser $subscription */\n        $subscription = current($subscriptions);\n\n        return $subscription;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public static function get_all_sessions_by_promotion($id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        return Database::select(\n            '*',\n            $table,\n            ['where' => ['promotion_id = ?' => $id]]\n        );\n    }\n\n    /**\n     * @param int   $promotion_id\n     * @param array $list\n     */\n    public static function subscribe_sessions_to_promotion($promotion_id, $list)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $params = [];\n        $params['promotion_id'] = 0;\n        Database::update(\n            $table,\n            $params,\n            ['promotion_id = ?' => $promotion_id]\n        );\n\n        $params['promotion_id'] = $promotion_id;\n        if (!empty($list)) {\n            foreach ($list as $session_id) {\n                $session_id = (int) $session_id;\n                Database::update($table, $params, ['id = ?' => $session_id]);\n            }\n        }\n    }\n\n    /**\n     * Updates a session status.\n     *\n     * @param int session id\n     * @param int status\n     */\n    public static function set_session_status($session_id, $status)\n    {\n        $t = Database::get_main_table(TABLE_MAIN_SESSION);\n        $params['visibility'] = $status;\n        Database::update($t, $params, ['id = ?' => $session_id]);\n    }\n\n    /**\n     * Copies a session with the same data to a new session.\n     * The new copy is not assigned to the same promotion.\n     *\n     * @param int  $id                         Session ID\n     * @param bool $copy_courses               Whether to copy the relationship with courses\n     * @param bool $copyTeachersAndDrh\n     * @param bool $create_new_courses         New courses will be created\n     * @param bool $set_exercises_lp_invisible Set exercises and LPs in the new session to invisible by default\n     * @param bool $copyWithSessionContent     Copy course session content into the courses\n     *\n     * @return int The new session ID on success, 0 otherwise\n     *\n     * @see subscribe_sessions_to_promotions() for that.\n     *\n     * @todo make sure the extra session fields are copied too\n     */\n    public static function copy(\n        $id,\n        $copy_courses = true,\n        $copyTeachersAndDrh = true,\n        $create_new_courses = false,\n        $set_exercises_lp_invisible = false,\n        $copyWithSessionContent = false\n    ) {\n        $id = (int) $id;\n        $s = self::fetch($id);\n\n        if (empty($s)) {\n            return false;\n        }\n\n        // Check all dates before copying\n        // Get timestamp for now in UTC - see http://php.net/manual/es/function.time.php#117251\n        $now = time() - date('Z');\n        // Timestamp in one month\n        $inOneMonth = $now + (30 * 24 * 3600);\n        $inOneMonth = api_get_local_time($inOneMonth);\n        if (api_strtotime($s['access_start_date']) < $now) {\n            $s['access_start_date'] = api_get_local_time($now);\n        } else {\n            $s['access_start_date'] = api_get_local_time($s['access_start_date']);\n        }\n        if (api_strtotime($s['display_start_date']) < $now) {\n            $s['display_start_date'] = api_get_local_time($now);\n        } else {\n            $s['display_start_date'] = api_get_local_time($s['display_start_date']);\n        }\n        if (api_strtotime($s['coach_access_start_date']) < $now) {\n            $s['coach_access_start_date'] = api_get_local_time($now);\n        } else {\n            $s['coach_access_start_date'] = api_get_local_time($s['coach_access_start_date']);\n        }\n        if (api_strtotime($s['access_end_date']) < $now) {\n            $s['access_end_date'] = $inOneMonth;\n        } else {\n            $s['access_end_date'] = api_get_local_time($s['access_end_date']);\n        }\n        if (api_strtotime($s['display_end_date']) < $now) {\n            $s['display_end_date'] = $inOneMonth;\n        } else {\n            $s['display_end_date'] = api_get_local_time($s['display_end_date']);\n        }\n        if (api_strtotime($s['coach_access_end_date']) < $now) {\n            $s['coach_access_end_date'] = $inOneMonth;\n        } else {\n            $s['coach_access_end_date'] = api_get_local_time($s['coach_access_end_date']);\n        }\n\n        $extraFieldValue = new ExtraFieldValue('session');\n        $extraFieldsValues = $extraFieldValue->getAllValuesByItem($id);\n        $extraFieldsValuesToCopy = [];\n        if (!empty($extraFieldsValues)) {\n            foreach ($extraFieldsValues as $extraFieldValue) {\n                $extraFieldsValuesToCopy['extra_'.$extraFieldValue['variable']]['extra_'.$extraFieldValue['variable']] = $extraFieldValue['value'];\n            }\n        }\n\n        if (isset($extraFieldsValuesToCopy['extra_image']) && isset($extraFieldsValuesToCopy['extra_image']['extra_image'])) {\n            $extraFieldsValuesToCopy['extra_image'] = [\n                'tmp_name' => api_get_path(SYS_UPLOAD_PATH).$extraFieldsValuesToCopy['extra_image']['extra_image'],\n                'error' => 0,\n            ];\n        }\n\n        // Now try to create the session\n        $sid = self::create_session(\n            $s['name'].' '.get_lang('CopyLabelSuffix'),\n            $s['access_start_date'],\n            $s['access_end_date'],\n            $s['display_start_date'],\n            $s['display_end_date'],\n            $s['coach_access_start_date'],\n            $s['coach_access_end_date'],\n            (int) $s['id_coach'],\n            $s['session_category_id'],\n            (int) $s['visibility'],\n            true,\n            $s['duration'],\n            $s['description'],\n            $s['show_description'],\n            $extraFieldsValuesToCopy\n        );\n\n        if (!is_numeric($sid) || empty($sid)) {\n            return false;\n        }\n\n        if ($copy_courses) {\n            // Register courses from the original session to the new session\n            $courses = self::get_course_list_by_session_id($id);\n            $short_courses = $new_short_courses = [];\n            if (is_array($courses) && count($courses) > 0) {\n                foreach ($courses as $course) {\n                    $short_courses[] = $course;\n                }\n            }\n\n            // We will copy the current courses of the session to new courses\n            if (!empty($short_courses)) {\n                if ($create_new_courses) {\n                    api_set_more_memory_and_time_limits();\n                    $params = [];\n                    $params['skip_lp_dates'] = true;\n\n                    foreach ($short_courses as $course_data) {\n                        $course_info = CourseManager::copy_course_simple(\n                            $course_data['title'].' '.get_lang('CopyLabelSuffix'),\n                            $course_data['course_code'],\n                            $id,\n                            $sid,\n                            $params\n                        );\n\n                        if ($course_info) {\n                            //By default new elements are invisible\n                            if ($set_exercises_lp_invisible) {\n                                $list = new LearnpathList('', $course_info, $sid);\n                                $flat_list = $list->get_flat_list();\n                                if (!empty($flat_list)) {\n                                    foreach ($flat_list as $lp_id => $data) {\n                                        api_item_property_update(\n                                            $course_info,\n                                            TOOL_LEARNPATH,\n                                            $lp_id,\n                                            'invisible',\n                                            api_get_user_id(),\n                                            0,\n                                            0,\n                                            0,\n                                            0,\n                                            $sid\n                                        );\n                                    }\n                                }\n                                $quiz_table = Database::get_course_table(TABLE_QUIZ_TEST);\n                                $course_id = $course_info['real_id'];\n                                //@todo check this query\n                                $sql = \"UPDATE $quiz_table SET active = 0\n                                        WHERE c_id = $course_id AND session_id = $sid\";\n                                Database::query($sql);\n                            }\n                            $new_short_courses[] = $course_info['real_id'];\n                        }\n                    }\n                } else {\n                    foreach ($short_courses as $course_data) {\n                        $new_short_courses[] = $course_data['id'];\n                    }\n                }\n\n                $short_courses = $new_short_courses;\n                self::add_courses_to_session($sid, $short_courses, true);\n\n                if ($copyWithSessionContent) {\n                    foreach ($courses as $course) {\n                        CourseManager::copy_course(\n                            $course['code'],\n                            $id,\n                            $course['code'],\n                            $sid,\n                            [],\n                            false,\n                            true\n                        );\n                    }\n                }\n\n                if ($create_new_courses === false && $copyTeachersAndDrh) {\n                    foreach ($short_courses as $courseItemId) {\n                        $coachList = self::getCoachesByCourseSession($id, $courseItemId);\n                        foreach ($coachList as $userId) {\n                            self::set_coach_to_course_session($userId, $sid, $courseItemId);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($copyTeachersAndDrh) {\n            // Register users from the original session to the new session\n            $users = self::get_users_by_session($id);\n            if (!empty($users)) {\n                $userListByStatus = [];\n                foreach ($users as $userData) {\n                    $userData['relation_type'] = (int) $userData['relation_type'];\n                    $userListByStatus[$userData['relation_type']][] = $userData;\n                }\n\n                foreach ($userListByStatus as $status => $userList) {\n                    $userList = array_column($userList, 'user_id');\n                    switch ($status) {\n                        case 0:\n                            /*self::subscribeUsersToSession(\n                                $sid,\n                                $userList,\n                                SESSION_VISIBLE_READ_ONLY,\n                                false,\n                                true\n                            );*/\n                            break;\n                        case 1:\n                            // drh users\n                            foreach ($userList as $drhId) {\n                                $userInfo = api_get_user_info($drhId);\n                                self::subscribeSessionsToDrh($userInfo, [$sid], false, false);\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n\n        return $sid;\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $session_id\n     *\n     * @return bool\n     */\n    public static function user_is_general_coach($user_id, $session_id)\n    {\n        $session_id = (int) $session_id;\n        $user_id = (int) $user_id;\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sql = \"SELECT DISTINCT id\n\t         \tFROM $table\n\t         \tWHERE session.id_coach = '\".$user_id.\"' AND id = '$session_id'\";\n        $result = Database::query($sql);\n        if ($result && Database::num_rows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the number of sessions.\n     *\n     * @param int $access_url_id ID of the URL we want to filter on (optional)\n     *\n     * @return int Number of sessions\n     */\n    public static function count_sessions($access_url_id = 0)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $access_url_rel_session_table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $access_url_id = (int) $access_url_id;\n        $sql = \"SELECT count(s.id) FROM $session_table s\";\n        if (!empty($access_url_id)) {\n            $sql .= \", $access_url_rel_session_table u \".\n                \" WHERE s.id = u.session_id AND u.access_url_id = $access_url_id\";\n        }\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * @param int  $id\n     * @param bool $checkSession\n     *\n     * @return bool\n     */\n    public static function cantEditSession($id, $checkSession = true)\n    {\n        if (!self::allowToManageSessions()) {\n            return false;\n        }\n\n        if (api_is_platform_admin() && self::allowed($id)) {\n            return true;\n        }\n\n        if ($checkSession) {\n            if (self::allowed($id)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Protect a session to be edited.\n     *\n     * @param int  $id\n     * @param bool $checkSession\n     *\n     * @return mixed|bool true if pass the check, api_not_allowed otherwise\n     */\n    public static function protectSession($id, $checkSession = true)\n    {\n        if (!self::cantEditSession($id, $checkSession)) {\n            api_not_allowed(true);\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowToManageSessions()\n    {\n        if (self::allowManageAllSessions()) {\n            return true;\n        }\n\n        $setting = api_get_setting('allow_teachers_to_create_sessions');\n\n        if (api_is_teacher() && $setting == 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowOnlyMySessions()\n    {\n        if (self::allowToManageSessions() &&\n            !api_is_platform_admin() &&\n            api_is_teacher()\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowManageAllSessions()\n    {\n        if (api_is_platform_admin() || api_is_session_admin()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public static function protect_teacher_session_edit($id)\n    {\n        if (!api_is_coach($id) && !api_is_platform_admin()) {\n            api_not_allowed(true);\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @param int $courseId\n     *\n     * @return array\n     *\n     * @todo Add param to get only active sessions (not expires ones)\n     */\n    public static function get_session_by_course($courseId)\n    {\n        $table_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $table_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $courseId = (int) $courseId;\n        $urlId = api_get_current_access_url_id();\n\n        if (empty($courseId)) {\n            return [];\n        }\n\n        $sql = \"SELECT name, s.id\n                FROM $table_session_course sc\n                INNER JOIN $table_session s\n                ON (sc.session_id = s.id)\n                INNER JOIN $url u\n                ON (u.session_id = s.id)\n                WHERE\n                    u.access_url_id = $urlId AND\n                    sc.c_id = '$courseId' \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int  $userId\n     * @param bool $ignoreVisibilityForAdmins\n     * @param bool $ignoreTimeLimit\n     *\n     * @return array\n     */\n    public static function get_sessions_by_user(\n        $userId,\n        $ignoreVisibilityForAdmins = false,\n        $ignoreTimeLimit = false\n    ) {\n        $sessionCategories = UserManager::get_sessions_by_category(\n            $userId,\n            false,\n            $ignoreVisibilityForAdmins,\n            $ignoreTimeLimit\n        );\n\n        $sessionArray = [];\n        if (!empty($sessionCategories)) {\n            foreach ($sessionCategories as $category) {\n                if (isset($category['sessions'])) {\n                    foreach ($category['sessions'] as $session) {\n                        $sessionArray[] = $session;\n                    }\n                }\n            }\n        }\n\n        return $sessionArray;\n    }\n\n    /**\n     * @param string $file\n     * @param bool   $updateSession                                   true: if the session exists it will be updated.\n     *                                                                false: if session exists a new session will be\n     *                                                                created adding a counter session1, session2, etc\n     * @param int    $defaultUserId\n     * @param Logger $logger\n     * @param array  $extraFields                                     convert a file row to an extra field. Example in\n     *                                                                CSV file there's a SessionID then it will\n     *                                                                converted to extra_external_session_id if you\n     *                                                                set: array('SessionId' =>\n     *                                                                'extra_external_session_id')\n     * @param string $extraFieldId\n     * @param int    $daysCoachAccessBeforeBeginning\n     * @param int    $daysCoachAccessAfterBeginning\n     * @param int    $sessionVisibility\n     * @param array  $fieldsToAvoidUpdate\n     * @param bool   $deleteUsersNotInList\n     * @param bool   $updateCourseCoaches\n     * @param bool   $sessionWithCoursesModifier\n     * @param bool   $addOriginalCourseTeachersAsCourseSessionCoaches\n     * @param bool   $removeAllTeachersFromCourse\n     * @param int    $showDescription\n     * @param array  $teacherBackupList\n     * @param array  $groupBackup\n     *\n     * @return array\n     */\n    public static function importCSV(\n        $file,\n        $updateSession,\n        $defaultUserId = null,\n        $logger = null,\n        $extraFields = [],\n        $extraFieldId = null,\n        $daysCoachAccessBeforeBeginning = null,\n        $daysCoachAccessAfterBeginning = null,\n        $sessionVisibility = 1,\n        $fieldsToAvoidUpdate = [],\n        $deleteUsersNotInList = false,\n        $updateCourseCoaches = false,\n        $sessionWithCoursesModifier = false,\n        $addOriginalCourseTeachersAsCourseSessionCoaches = true,\n        $removeAllTeachersFromCourse = true,\n        $showDescription = null,\n        &$teacherBackupList = [],\n        &$groupBackup = []\n    ) {\n        $content = file($file);\n        $error_message = null;\n        $session_counter = 0;\n        $defaultUserId = empty($defaultUserId) ? api_get_user_id() : (int) $defaultUserId;\n\n        $eol = PHP_EOL;\n        if (PHP_SAPI != 'cli') {\n            $eol = '<br />';\n        }\n\n        $debug = false;\n        if (isset($logger)) {\n            $debug = true;\n        }\n\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessions = [];\n        if (!api_strstr($content[0], ';')) {\n            $error_message = get_lang('NotCSV');\n        } else {\n            $tag_names = [];\n            foreach ($content as $key => $enreg) {\n                $enreg = explode(';', trim($enreg));\n                if ($key) {\n                    foreach ($tag_names as $tag_key => $tag_name) {\n                        if (isset($enreg[$tag_key])) {\n                            $sessions[$key - 1][$tag_name] = $enreg[$tag_key];\n                        }\n                    }\n                } else {\n                    foreach ($enreg as $tag_name) {\n                        $tag_names[] = api_preg_replace('/[^a-zA-Z0-9_\\-]/', '', $tag_name);\n                    }\n                    if (!in_array('SessionName', $tag_names) ||\n                        !in_array('DateStart', $tag_names) ||\n                        !in_array('DateEnd', $tag_names)\n                    ) {\n                        $error_message = get_lang('NoNeededData');\n                        break;\n                    }\n                }\n            }\n\n            $sessionList = [];\n            $report = [];\n\n            // Looping the sessions.\n            foreach ($sessions as $enreg) {\n                $user_counter = 0;\n                $course_counter = 0;\n\n                if (isset($extraFields) && !empty($extraFields)) {\n                    foreach ($extraFields as $original => $to) {\n                        $enreg[$to] = isset($enreg[$original]) ? $enreg[$original] : null;\n                    }\n                }\n\n                $session_name = $enreg['SessionName'];\n\n                if ($debug) {\n                    $logger->addInfo('---------------------------------------');\n                    $logger->addInfo(\"Sessions - Start process of session: $session_name\");\n                    $logger->addInfo('---------------------------------------');\n                }\n\n                // Default visibility\n                $visibilityAfterExpirationPerSession = $sessionVisibility;\n\n                if (isset($enreg['VisibilityAfterExpiration'])) {\n                    $visibility = $enreg['VisibilityAfterExpiration'];\n                    switch ($visibility) {\n                        case 'read_only':\n                            $visibilityAfterExpirationPerSession = SESSION_VISIBLE_READ_ONLY;\n                            break;\n                        case 'accessible':\n                            $visibilityAfterExpirationPerSession = SESSION_VISIBLE;\n                            break;\n                        case 'not_accessible':\n                            $visibilityAfterExpirationPerSession = SESSION_INVISIBLE;\n                            break;\n                    }\n                }\n\n                if (empty($session_name)) {\n                    continue;\n                }\n\n                $displayAccessStartDate = $enreg['DisplayStartDate'] ?? $enreg['DateStart'];\n                $displayAccessEndDate = $enreg['DisplayEndDate'] ?? $enreg['DateEnd'];\n                $coachAccessStartDate = $enreg['CoachStartDate'] ?? $enreg['DateStart'];\n                $coachAccessEndDate = $enreg['CoachEndDate'] ?? $enreg['DateEnd'];\n                // We assume the dates are already in UTC\n                $dateStart = explode('/', $enreg['DateStart']);\n                $dateEnd = explode('/', $enreg['DateEnd']);\n                $dateStart = $dateStart[0].'-'.$dateStart[1].'-'.$dateStart[2].' 00:00:00';\n                $dateEnd = $dateEnd[0].'-'.$dateEnd[1].'-'.$dateEnd[2].' 23:59:59';\n                $displayAccessStartDate = explode('/', $displayAccessStartDate);\n                $displayAccessStartDate = implode('-', $displayAccessStartDate).' 00:00:00';\n                $displayAccessEndDate = explode('/', $displayAccessEndDate);\n                $displayAccessEndDate = implode('-', $displayAccessEndDate).' 23:59:59';\n                $coachAccessStartDate = explode('/', $coachAccessStartDate);\n                $coachAccessStartDate = implode('-', $coachAccessStartDate).' 00:00:00';\n                $coachAccessEndDate = explode('/', $coachAccessEndDate);\n                $coachAccessEndDate = implode('-', $coachAccessEndDate).' 23:59:59';\n                $session_category_id = $enreg['SessionCategory'] ?? null;\n                $sessionDescription = $enreg['SessionDescription'] ?? null;\n                $classes = isset($enreg['Classes']) ? explode('|', $enreg['Classes']) : [];\n                $extraParams = [];\n                if (!is_null($showDescription)) {\n                    $extraParams['show_description'] = intval($showDescription);\n                }\n\n                $coachBefore = '';\n                $coachAfter = '';\n                if (!empty($daysCoachAccessBeforeBeginning) && !empty($daysCoachAccessAfterBeginning)) {\n                    $date = new DateTime($dateStart);\n                    $interval = new DateInterval('P'.$daysCoachAccessBeforeBeginning.'D');\n                    $date->sub($interval);\n                    $coachBefore = $date->format('Y-m-d h:i');\n                    $coachAccessStartDate = $coachBefore;\n                    $coachBefore = api_get_utc_datetime($coachBefore);\n\n                    $date = new DateTime($dateEnd);\n                    $interval = new DateInterval('P'.$daysCoachAccessAfterBeginning.'D');\n                    $date->add($interval);\n                    $coachAfter = $date->format('Y-m-d h:i');\n                    $coachAccessEndDate = $coachAfter;\n                    $coachAfter = api_get_utc_datetime($coachAfter);\n                }\n\n                $dateStart = api_get_utc_datetime($dateStart);\n                $dateEnd = api_get_utc_datetime($dateEnd);\n                $displayAccessStartDate = api_get_utc_datetime($displayAccessStartDate);\n                $displayAccessEndDate = api_get_utc_datetime($displayAccessEndDate);\n                $coachAccessStartDate = api_get_utc_datetime($coachAccessStartDate);\n                $coachAccessEndDate = api_get_utc_datetime($coachAccessEndDate);\n\n                if (!empty($sessionDescription)) {\n                    $extraParams['description'] = $sessionDescription;\n                }\n\n                if (!empty($session_category_id)) {\n                    $extraParams['session_category_id'] = $session_category_id;\n                }\n\n                // Searching a general coach.\n                if (!empty($enreg['Coach'])) {\n                    $coach_id = UserManager::get_user_id_from_username($enreg['Coach']);\n                    if ($coach_id === false) {\n                        // If the coach-user does not exist - I'm the coach.\n                        $coach_id = $defaultUserId;\n                    }\n                } else {\n                    $coach_id = $defaultUserId;\n                }\n\n                $users = explode('|', $enreg['Users']);\n                $courses = explode('|', $enreg['Courses']);\n\n                $deleteOnlyCourseCoaches = false;\n                if (count($courses) == 1) {\n                    if ($logger) {\n                        $logger->addInfo('Only one course delete old coach list');\n                    }\n                    $deleteOnlyCourseCoaches = true;\n                }\n\n                if (!$updateSession) {\n                    // Create a session.\n                    $unique_name = false;\n                    $i = 0;\n                    // Change session name, verify that session doesn't exist.\n                    $suffix = null;\n                    while (!$unique_name) {\n                        if ($i > 1) {\n                            $suffix = ' - '.$i;\n                        }\n                        $sql = 'SELECT id FROM '.$tbl_session.'\n                                WHERE name=\"'.Database::escape_string($session_name).$suffix.'\"';\n                        $rs = Database::query($sql);\n                        if (Database::result($rs, 0, 0)) {\n                            $i++;\n                        } else {\n                            $unique_name = true;\n                            $session_name .= $suffix;\n                        }\n                    }\n\n                    $sessionParams = [\n                        'name' => $session_name,\n                        'id_coach' => $coach_id,\n                        'access_start_date' => $dateStart,\n                        'access_end_date' => $dateEnd,\n                        'display_start_date' => $displayAccessStartDate,\n                        'display_end_date' => $displayAccessEndDate,\n                        'coach_access_start_date' => $coachAccessStartDate,\n                        'coach_access_end_date' => $coachAccessEndDate,\n                        'visibility' => $visibilityAfterExpirationPerSession,\n                        'session_admin_id' => $defaultUserId,\n                    ];\n\n                    if (!empty($extraParams)) {\n                        $sessionParams = array_merge($sessionParams, $extraParams);\n                    }\n                    // Creating the session.\n                    $session_id = Database::insert($tbl_session, $sessionParams);\n                    if ($debug) {\n                        if ($session_id) {\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n                            $logger->addInfo(\"Session created: #$session_id - $session_name\");\n                        } else {\n                            $message = \"Sessions - Session NOT created: $session_name\";\n                            $logger->addError($message);\n                            $report[] = $message;\n                        }\n                    }\n                    $session_counter++;\n                } else {\n                    $sessionId = null;\n                    if (isset($extraFields) && !empty($extraFields) && !empty($enreg['extra_'.$extraFieldId])) {\n                        $sessionId = self::getSessionIdFromOriginalId($enreg['extra_'.$extraFieldId], $extraFieldId);\n                        if (empty($sessionId)) {\n                            $my_session_result = false;\n                        } else {\n                            $my_session_result = true;\n                        }\n                    } else {\n                        $my_session_result = self::get_session_by_name($enreg['SessionName']);\n                    }\n\n                    if ($my_session_result === false) {\n                        // One more check\n                        $sessionExistsWithName = self::get_session_by_name($session_name);\n                        if ($sessionExistsWithName) {\n                            if ($debug) {\n                                $message = \"Skip Session - Trying to update a session, but name already exists: $session_name\";\n                                $logger->addError($message);\n                                $report[] = $message;\n                            }\n                            continue;\n                        }\n\n                        $sessionParams = [\n                            'name' => $session_name,\n                            'id_coach' => $coach_id,\n                            'access_start_date' => $dateStart,\n                            'access_end_date' => $dateEnd,\n                            'display_start_date' => $displayAccessStartDate,\n                            'display_end_date' => $displayAccessEndDate,\n                            'coach_access_start_date' => $coachAccessStartDate,\n                            'coach_access_end_date' => $coachAccessEndDate,\n                            'visibility' => $visibilityAfterExpirationPerSession,\n                            'session_admin_id' => $defaultUserId,\n                        ];\n\n                        if (!empty($extraParams)) {\n                            $sessionParams = array_merge($sessionParams, $extraParams);\n                        }\n                        Database::insert($tbl_session, $sessionParams);\n\n                        // We get the last insert id.\n                        $my_session_result = self::get_session_by_name($session_name);\n                        $session_id = $my_session_result['id'];\n\n                        if ($session_id) {\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n                            if ($debug) {\n                                $logger->addInfo(\"Sessions - #$session_id created: $session_name\");\n                            }\n\n                            // Delete session-user relation only for students\n                            $sql = \"DELETE FROM $tbl_session_user\n                                    WHERE session_id = '$session_id' AND relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n                            Database::query($sql);\n\n                            $sql = \"DELETE FROM $tbl_session_course WHERE session_id = '$session_id'\";\n                            Database::query($sql);\n\n                            // Delete session-course-user relationships students and coaches.\n                            if ($updateCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('0', '2')\";\n                                Database::query($sql);\n                            } else {\n                                // Delete session-course-user relation ships *only* for students.\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status <> 2\";\n                                Database::query($sql);\n                            }\n                            if ($deleteOnlyCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('2')\";\n                                Database::query($sql);\n                            }\n                        }\n                    } else {\n                        // Updating the session.\n                        $params = [\n                            'id_coach' => $coach_id,\n                            'access_start_date' => $dateStart,\n                            'access_end_date' => $dateEnd,\n                            'display_start_date' => $displayAccessStartDate,\n                            'display_end_date' => $displayAccessEndDate,\n                            'coach_access_start_date' => $coachAccessStartDate,\n                            'coach_access_end_date' => $coachAccessEndDate,\n                            'visibility' => $visibilityAfterExpirationPerSession,\n                            'session_category_id' => $session_category_id,\n                        ];\n\n                        if (!empty($sessionDescription)) {\n                            $params['description'] = $sessionDescription;\n                        }\n\n                        if (!empty($fieldsToAvoidUpdate)) {\n                            foreach ($fieldsToAvoidUpdate as $field) {\n                                unset($params[$field]);\n                            }\n                        }\n\n                        if (isset($sessionId) && !empty($sessionId)) {\n                            $session_id = $sessionId;\n                            if (!empty($enreg['SessionName'])) {\n                                $sessionExistsWithName = self::get_session_by_name($session_name);\n                                if ($sessionExistsWithName === false) {\n                                    $sessionName = Database::escape_string($enreg['SessionName']);\n                                    $sql = \"UPDATE $tbl_session SET name = '$sessionName' WHERE id = $session_id\";\n                                    Database::query($sql);\n                                    $logger->addInfo(\n                                        \"Session #$session_id name IS updated with: '$session_name' External id: \".$enreg['extra_'.$extraFieldId]\n                                    );\n                                } else {\n                                    $sessionExistsBesidesMe = self::sessionNameExistBesidesMySession(\n                                        $session_id,\n                                        $session_name\n                                    );\n                                    if ($sessionExistsBesidesMe === true) {\n                                        if ($debug) {\n                                            $message = \"Skip Session. Error when update session Session #$session_id Name: '$session_name'. Other session has the same name. External id: \".$enreg['extra_'.$extraFieldId];\n                                            $logger->addError($message);\n                                            $report[] = $message;\n                                        }\n                                        continue;\n                                    } else {\n                                        if ($debug) {\n                                            $logger->addInfo(\n                                                \"Session #$session_id name is not updated because it didn't change (but update of other session values will continue) Name: '$session_name' External id: \".$enreg['extra_'.$extraFieldId]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $my_session_result = self::get_session_by_name($session_name);\n                            $session_id = $my_session_result['id'];\n                        }\n\n                        if ($debug) {\n                            $logger->addInfo(\"Session #$session_id to be updated: '$session_name'\");\n                        }\n\n                        if ($session_id) {\n                            $sessionInfo = api_get_session_info($session_id);\n                            $params['show_description'] = isset($sessionInfo['show_description']) ? $sessionInfo['show_description'] : intval($showDescription);\n\n                            if (!empty($daysCoachAccessBeforeBeginning) && !empty($daysCoachAccessAfterBeginning)) {\n                                if (empty($sessionInfo['nb_days_access_before_beginning']) ||\n                                    (!empty($sessionInfo['nb_days_access_before_beginning']) &&\n                                        $sessionInfo['nb_days_access_before_beginning'] < $daysCoachAccessBeforeBeginning)\n                                ) {\n                                    $params['coach_access_start_date'] = $coachBefore;\n                                }\n\n                                if (empty($sessionInfo['nb_days_access_after_end']) ||\n                                    (!empty($sessionInfo['nb_days_access_after_end']) &&\n                                        $sessionInfo['nb_days_access_after_end'] < $daysCoachAccessAfterBeginning)\n                                ) {\n                                    $params['coach_access_end_date'] = $coachAfter;\n                                }\n                            }\n\n                            Database::update($tbl_session, $params, ['id = ?' => $session_id]);\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n\n                            if ($debug) {\n                                $logger->addInfo(\"Session updated #$session_id\");\n                            }\n\n                            // Delete session-user relation only for students\n                            $sql = \"DELETE FROM $tbl_session_user\n                                    WHERE session_id = '$session_id' AND relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n                            Database::query($sql);\n\n                            $sql = \"DELETE FROM $tbl_session_course WHERE session_id = '$session_id'\";\n                            Database::query($sql);\n\n                            // Delete session-course-user relationships students and coaches.\n                            if ($updateCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('0', '2')\";\n                                Database::query($sql);\n                            } else {\n                                // Delete session-course-user relation ships *only* for students.\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status <> 2\";\n                                Database::query($sql);\n                            }\n\n                            if ($deleteOnlyCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('2')\";\n                                Database::query($sql);\n                            }\n                        } else {\n                            if ($debug) {\n                                $logger->addError(\n                                    \"Sessions - Session not found\"\n                                );\n                            }\n                        }\n                    }\n                    $session_counter++;\n                }\n\n                $sessionList[] = $session_id;\n\n                // Adding the relationship \"Session - User\" for students\n                $userList = [];\n                if (is_array($users)) {\n                    $extraFieldValueCareer = new ExtraFieldValue('career');\n                    $careerList = isset($enreg['extra_careerid']) && !empty($enreg['extra_careerid']) ? $enreg['extra_careerid'] : [];\n                    $careerList = str_replace(['[', ']'], '', $careerList);\n                    $finalCareerIdList = [];\n                    if (!empty($careerList)) {\n                        $careerList = explode(',', $careerList);\n                        foreach ($careerList as $careerId) {\n                            $realCareerIdList = $extraFieldValueCareer->get_item_id_from_field_variable_and_field_value(\n                                'external_career_id',\n                                $careerId\n                            );\n                            if (isset($realCareerIdList['item_id'])) {\n                                $finalCareerIdList[] = $realCareerIdList['item_id'];\n                            }\n                        }\n                    }\n                    foreach ($users as $user) {\n                        $user_id = UserManager::get_user_id_from_username($user);\n                        if ($user_id !== false) {\n                            if (!empty($finalCareerIdList)) {\n                                foreach ($finalCareerIdList as $careerId) {\n                                    UserManager::addUserCareer($user_id, $careerId);\n                                }\n                            }\n\n                            $userList[] = $user_id;\n                            // Insert new users.\n                            $sql = \"INSERT IGNORE INTO $tbl_session_user SET\n                                    user_id = '$user_id',\n                                    session_id = '$session_id',\n                                    registered_at = '\".api_get_utc_datetime().\"'\";\n                            Database::query($sql);\n                            if ($debug) {\n                                $logger->addInfo(\"Adding User #$user_id ($user) to session #$session_id\");\n                            }\n                            $user_counter++;\n                        }\n                    }\n                }\n\n                if ($deleteUsersNotInList) {\n                    // Getting user in DB in order to compare to the new list.\n                    $usersListInDatabase = self::get_users_by_session($session_id, 0);\n                    if (!empty($usersListInDatabase)) {\n                        if (empty($userList)) {\n                            foreach ($usersListInDatabase as $userInfo) {\n                                self::unsubscribe_user_from_session($session_id, $userInfo['user_id']);\n                            }\n                        } else {\n                            foreach ($usersListInDatabase as $userInfo) {\n                                if (!in_array($userInfo['user_id'], $userList)) {\n                                    self::unsubscribe_user_from_session($session_id, $userInfo['user_id']);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // See BT#6449\n                $onlyAddFirstCoachOrTeacher = false;\n                if ($sessionWithCoursesModifier) {\n                    if (count($courses) >= 2) {\n                        // Only first teacher in course session;\n                        $onlyAddFirstCoachOrTeacher = true;\n                        // Remove all teachers from course.\n                        $removeAllTeachersFromCourse = false;\n                    }\n                }\n\n                foreach ($courses as $course) {\n                    $courseArray = bracketsToArray($course);\n                    $course_code = $courseArray[0];\n\n                    if (CourseManager::course_exists($course_code)) {\n                        $courseInfo = api_get_course_info($course_code);\n                        $courseId = $courseInfo['real_id'];\n\n                        // Adding the course to a session.\n                        $sql = \"INSERT IGNORE INTO $tbl_session_course\n                                SET c_id = '$courseId', session_id='$session_id'\";\n                        Database::query($sql);\n\n                        self::installCourse($session_id, $courseInfo['real_id']);\n\n                        if ($debug) {\n                            $logger->addInfo(\"Adding course '$course_code' to session #$session_id\");\n                        }\n\n                        $course_counter++;\n                        $course_coaches = isset($courseArray[1]) ? $courseArray[1] : null;\n                        $course_users = isset($courseArray[2]) ? $courseArray[2] : null;\n                        $course_users = explode(',', $course_users);\n                        $course_coaches = explode(',', $course_coaches);\n\n                        // Checking if the flag is set TeachersWillBeAddedAsCoachInAllCourseSessions (course_edit.php)\n                        $addTeachersToSession = true;\n\n                        if (array_key_exists('add_teachers_to_sessions_courses', $courseInfo)) {\n                            $addTeachersToSession = $courseInfo['add_teachers_to_sessions_courses'];\n                        }\n\n                        // If any user provided for a course, use the users array.\n                        if (empty($course_users)) {\n                            if (!empty($userList)) {\n                                self::subscribe_users_to_session_course(\n                                    $userList,\n                                    $session_id,\n                                    $course_code\n                                );\n                                if ($debug) {\n                                    $msg = \"Adding student list \".implode(', #', $userList).\" to course: '$course_code' and session #$session_id\";\n                                    $logger->addInfo($msg);\n                                }\n                            }\n                        }\n\n                        // Adding coaches to session course user.\n                        if (!empty($course_coaches)) {\n                            $savedCoaches = [];\n                            // only edit if add_teachers_to_sessions_courses is set.\n                            if ($addTeachersToSession) {\n                                if ($addOriginalCourseTeachersAsCourseSessionCoaches) {\n                                    // Adding course teachers as course session teachers.\n                                    $alreadyAddedTeachers = CourseManager::get_teacher_list_from_course_code(\n                                        $course_code\n                                    );\n\n                                    if (!empty($alreadyAddedTeachers)) {\n                                        $teachersToAdd = [];\n                                        foreach ($alreadyAddedTeachers as $user) {\n                                            $teachersToAdd[] = $user['username'];\n                                        }\n                                        $course_coaches = array_merge(\n                                            $course_coaches,\n                                            $teachersToAdd\n                                        );\n                                    }\n                                }\n\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                    if ($coach_id !== false) {\n                                        // Just insert new coaches\n                                        self::updateCoaches(\n                                            $session_id,\n                                            $courseId,\n                                            [$coach_id],\n                                            false\n                                        );\n\n                                        if ($debug) {\n                                            $logger->addInfo(\"Adding course coach: user #$coach_id ($course_coach) to course: '$course_code' and session #$session_id\");\n                                        }\n                                        $savedCoaches[] = $coach_id;\n                                    } else {\n                                        $error_message .= get_lang('UserDoesNotExist').' : '.$course_coach.$eol;\n                                    }\n                                }\n                            }\n\n                            // Custom courses/session coaches\n                            $teacherToAdd = null;\n                            // Only one coach is added.\n                            if ($onlyAddFirstCoachOrTeacher == true) {\n                                if ($debug) {\n                                    $logger->addInfo(\"onlyAddFirstCoachOrTeacher : true\");\n                                }\n\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                    if ($coach_id !== false) {\n                                        $teacherToAdd = $coach_id;\n                                        break;\n                                    }\n                                }\n\n                                // Un subscribe everyone that's not in the list.\n                                $teacherList = CourseManager::get_teacher_list_from_course_code($course_code);\n                                if (!empty($teacherList)) {\n                                    foreach ($teacherList as $teacher) {\n                                        if ($teacherToAdd != $teacher['user_id']) {\n                                            $sql = \"SELECT * FROM \".Database::get_main_table(TABLE_MAIN_COURSE_USER).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseId.\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            $rows = Database::num_rows($result);\n                                            if ($rows > 0) {\n                                                $userCourseData = Database::fetch_array($result, 'ASSOC');\n                                                if (!empty($userCourseData)) {\n                                                    $teacherBackupList[$teacher['user_id']][$course_code] = $userCourseData;\n                                                }\n                                            }\n\n                                            $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_USER).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseInfo['real_id'].\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                $groupBackup['user'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                            }\n\n                                            $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_TUTOR).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseInfo['real_id'].\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                $groupBackup['tutor'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                            }\n\n                                            CourseManager::unsubscribe_user(\n                                                $teacher['user_id'],\n                                                $course_code\n                                            );\n\n                                            if ($debug) {\n                                                $logger->addInfo(\"Delete user #\".$teacher['user_id'].\" from base course: $course_code\");\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (!empty($teacherToAdd)) {\n                                    self::updateCoaches(\n                                        $session_id,\n                                        $courseId,\n                                        [$teacherToAdd],\n                                        true\n                                    );\n\n                                    if ($debug) {\n                                        $logger->addInfo(\"Add coach #$teacherToAdd to course $courseId and session $session_id\");\n                                    }\n\n                                    $userCourseCategory = '';\n                                    if (isset($teacherBackupList[$teacherToAdd]) &&\n                                        isset($teacherBackupList[$teacherToAdd][$course_code])\n                                    ) {\n                                        $courseUserData = $teacherBackupList[$teacherToAdd][$course_code];\n                                        $userCourseCategory = $courseUserData['user_course_cat'];\n                                    }\n\n                                    CourseManager::subscribeUser(\n                                        $teacherToAdd,\n                                        $course_code,\n                                        COURSEMANAGER,\n                                        0,\n                                        $userCourseCategory\n                                    );\n\n                                    if ($debug) {\n                                        $logger->addInfo(\"Subscribe user #$teacherToAdd as teacher in course $course_code with user userCourseCategory $userCourseCategory\");\n                                    }\n\n                                    if (isset($groupBackup['user'][$teacherToAdd]) &&\n                                        isset($groupBackup['user'][$teacherToAdd][$course_code]) &&\n                                        !empty($groupBackup['user'][$teacherToAdd][$course_code])\n                                    ) {\n                                        foreach ($groupBackup['user'][$teacherToAdd][$course_code] as $data) {\n                                            $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                            GroupManager::subscribe_users(\n                                                $teacherToAdd,\n                                                $groupInfo,\n                                                $data['c_id']\n                                            );\n                                        }\n                                    }\n\n                                    if (isset($groupBackup['tutor'][$teacherToAdd]) &&\n                                        isset($groupBackup['tutor'][$teacherToAdd][$course_code]) &&\n                                        !empty($groupBackup['tutor'][$teacherToAdd][$course_code])\n                                    ) {\n                                        foreach ($groupBackup['tutor'][$teacherToAdd][$course_code] as $data) {\n                                            $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                            GroupManager::subscribe_tutors(\n                                                $teacherToAdd,\n                                                $groupInfo,\n                                                $data['c_id']\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n\n                            // See BT#6449#note-195\n                            // All coaches are added.\n                            if ($removeAllTeachersFromCourse) {\n                                if ($debug) {\n                                    $logger->addInfo(\"removeAllTeachersFromCourse true\");\n                                }\n                                $teacherToAdd = null;\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username(\n                                        $course_coach\n                                    );\n                                    if ($coach_id !== false) {\n                                        $teacherToAdd[] = $coach_id;\n                                    }\n                                }\n\n                                if (!empty($teacherToAdd)) {\n                                    // Deleting all course teachers and adding the only coach as teacher.\n                                    $teacherList = CourseManager::get_teacher_list_from_course_code($course_code);\n\n                                    if (!empty($teacherList)) {\n                                        foreach ($teacherList as $teacher) {\n                                            if (!in_array($teacher['user_id'], $teacherToAdd)) {\n                                                $sql = \"SELECT * FROM \".Database::get_main_table(TABLE_MAIN_COURSE_USER).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseId.\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                $rows = Database::num_rows($result);\n                                                if ($rows > 0) {\n                                                    $userCourseData = Database::fetch_array($result, 'ASSOC');\n                                                    if (!empty($userCourseData)) {\n                                                        $teacherBackupList[$teacher['user_id']][$course_code] = $userCourseData;\n                                                    }\n                                                }\n\n                                                $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_USER).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseInfo['real_id'].\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                    $groupBackup['user'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                                }\n\n                                                $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_TUTOR).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseInfo['real_id'].\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                    $groupBackup['tutor'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                                }\n\n                                                CourseManager::unsubscribe_user(\n                                                    $teacher['user_id'],\n                                                    $course_code\n                                                );\n\n                                                if ($debug) {\n                                                    $logger->addInfo(\"Delete user #\".$teacher['user_id'].\" from base course: $course_code\");\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    foreach ($teacherToAdd as $teacherId) {\n                                        $userCourseCategory = '';\n                                        if (isset($teacherBackupList[$teacherId]) &&\n                                            isset($teacherBackupList[$teacherId][$course_code])\n                                        ) {\n                                            $courseUserData = $teacherBackupList[$teacherId][$course_code];\n                                            $userCourseCategory = $courseUserData['user_course_cat'];\n                                        }\n\n                                        CourseManager::subscribeUser(\n                                            $teacherId,\n                                            $course_code,\n                                            COURSEMANAGER,\n                                            0,\n                                            $userCourseCategory\n                                        );\n\n                                        if ($debug) {\n                                            $logger->addInfo(\"Add user as teacher #\".$teacherId.\" in base course: $course_code with userCourseCategory: $userCourseCategory\");\n                                        }\n\n                                        if (isset($groupBackup['user'][$teacherId]) &&\n                                            isset($groupBackup['user'][$teacherId][$course_code]) &&\n                                            !empty($groupBackup['user'][$teacherId][$course_code])\n                                        ) {\n                                            foreach ($groupBackup['user'][$teacherId][$course_code] as $data) {\n                                                $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                                GroupManager::subscribe_users(\n                                                    $teacherId,\n                                                    $groupInfo,\n                                                    $data['c_id']\n                                                );\n                                            }\n                                        }\n\n                                        if (isset($groupBackup['tutor'][$teacherId]) &&\n                                            isset($groupBackup['tutor'][$teacherId][$course_code]) &&\n                                            !empty($groupBackup['tutor'][$teacherId][$course_code])\n                                        ) {\n                                            foreach ($groupBackup['tutor'][$teacherId][$course_code] as $data) {\n                                                $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                                GroupManager::subscribe_tutors(\n                                                    $teacherId,\n                                                    $groupInfo,\n                                                    $data['c_id']\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Continue default behaviour.\n                            if ($onlyAddFirstCoachOrTeacher == false) {\n                                // Checking one more time see BT#6449#note-149\n                                $coaches = self::getCoachesByCourseSession($session_id, $courseId);\n                                // Update coaches if only there's 1 course see BT#6449#note-189\n                                if (empty($coaches) || count($courses) == 1) {\n                                    foreach ($course_coaches as $course_coach) {\n                                        $course_coach = trim($course_coach);\n                                        $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                        if ($coach_id !== false) {\n                                            // Just insert new coaches\n                                            self::updateCoaches(\n                                                $session_id,\n                                                $courseId,\n                                                [$coach_id],\n                                                false\n                                            );\n\n                                            if ($debug) {\n                                                $logger->addInfo(\"Sessions - Adding course coach: user #$coach_id ($course_coach) to course: '$course_code' and session #$session_id\");\n                                            }\n                                            $savedCoaches[] = $coach_id;\n                                        } else {\n                                            $error_message .= get_lang('UserDoesNotExist').' : '.$course_coach.$eol;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Adding Students, updating relationship \"Session - Course - User\".\n                        $course_users = array_filter($course_users);\n                        if (!empty($course_users)) {\n                            foreach ($course_users as $user) {\n                                $user_id = UserManager::get_user_id_from_username($user);\n\n                                if ($user_id !== false) {\n                                    self::subscribe_users_to_session_course(\n                                        [$user_id],\n                                        $session_id,\n                                        $course_code\n                                    );\n                                    if ($debug) {\n                                        $logger->addInfo(\"Adding student: user #$user_id ($user) to course: '$course_code' and session #$session_id\");\n                                    }\n                                } else {\n                                    $error_message .= get_lang('UserDoesNotExist').': '.$user.$eol;\n                                }\n                            }\n                        }\n                        $inserted_in_course[$course_code] = $courseInfo['title'];\n                    }\n                }\n                $access_url_id = api_get_current_access_url_id();\n                UrlManager::add_session_to_url($session_id, $access_url_id);\n                $sql = \"UPDATE $tbl_session SET nbr_users = '$user_counter', nbr_courses = '$course_counter'\n                        WHERE id = '$session_id'\";\n                Database::query($sql);\n\n                self::addClassesByName($session_id, $classes, false, $error_message);\n\n                if ($debug) {\n                    $logger->addInfo(\"End process session #$session_id -------------------- \");\n                }\n            }\n\n            if (!empty($report)) {\n                if ($debug) {\n                    $logger->addInfo(\"--Summary--\");\n                    foreach ($report as $line) {\n                        $logger->addInfo($line);\n                    }\n                }\n            }\n        }\n\n        return [\n            'error_message' => $error_message,\n            'session_counter' => $session_counter,\n            'session_list' => $sessionList,\n        ];\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function getCoachesByCourseSession($sessionId, $courseId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessionId = (int) $sessionId;\n        $courseId = (int) $courseId;\n\n        $sql = \"SELECT user_id FROM $table\n                WHERE\n                    session_id = '$sessionId' AND\n                    c_id = '$courseId' AND\n                    status = 2\";\n        $result = Database::query($sql);\n\n        $coaches = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $coaches[] = $row['user_id'];\n            }\n        }\n\n        return $coaches;\n    }\n\n    /**\n     * @param int    $sessionId\n     * @param int    $courseId\n     * @param string $separator\n     *\n     * @return string\n     */\n    public static function getCoachesByCourseSessionToString(\n        $sessionId,\n        $courseId,\n        $separator = ''\n    ) {\n        $coaches = self::getCoachesByCourseSession($sessionId, $courseId);\n        $list = [];\n        if (!empty($coaches)) {\n            foreach ($coaches as $coachId) {\n                $userInfo = api_get_user_info($coachId);\n                if ($userInfo) {\n                    $list[] = $userInfo['complete_name'];\n                }\n            }\n        }\n\n        $separator = empty($separator) ? CourseManager::USER_SEPARATOR : $separator;\n\n        return array_to_string($list, $separator);\n    }\n\n    /**\n     * Get all coaches added in the session - course relationship.\n     *\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getCoachesBySession($sessionId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessionId = intval($sessionId);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE session_id = '$sessionId' AND status = 2\";\n        $result = Database::query($sql);\n\n        $coaches = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $coaches[] = $row['user_id'];\n            }\n        }\n\n        return $coaches;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getAllCoursesFromAllSessionFromDrh($userId)\n    {\n        $sessions = self::get_sessions_followed_by_drh($userId);\n        $coursesFromSession = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $session) {\n                $courseList = self::get_course_list_by_session_id($session['id']);\n                foreach ($courseList as $course) {\n                    $coursesFromSession[] = $course['code'];\n                }\n            }\n        }\n\n        return $coursesFromSession;\n    }\n\n    /**\n     * getAllCoursesFromAllSessions.\n     *\n     * @return array\n     */\n    public static function getAllCoursesFromAllSessions()\n    {\n        $sessions = self::get_sessions_list();\n        $coursesFromSession = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $session) {\n                $courseList = self::get_course_list_by_session_id($session['id']);\n                foreach ($courseList as $course) {\n                    $coursesFromSession[$course['code'].':'.$session['id']] = $course['visual_code'].' - '.$course['title'].' ('.$session['name'].')';\n                }\n            }\n        }\n\n        return $coursesFromSession;\n    }\n\n    /**\n     * Return user id list or count of users depending of the $getCount parameter.\n     *\n     * @param string $status\n     * @param int    $userId\n     * @param bool   $getCount\n     * @param int    $from\n     * @param int    $numberItems\n     * @param int    $column\n     * @param string $direction\n     * @param string $keyword\n     * @param string $active\n     * @param string $lastConnectionDate\n     * @param array  $sessionIdList\n     * @param array  $studentIdList\n     * @param int    $filterByStatus\n     *\n     * @return array|int\n     */\n    public static function getAllUsersFromCoursesFromAllSessionFromStatus(\n        $status,\n        $userId,\n        $getCount = false,\n        $from = null,\n        $numberItems = null,\n        $column = '',\n        $direction = 'asc',\n        $keyword = null,\n        $active = null,\n        $lastConnectionDate = null,\n        $sessionIdList = [],\n        $studentIdList = [],\n        $filterByStatus = null,\n        $filterUsers = null\n    ) {\n        $filterByStatus = (int) $filterByStatus;\n        $userId = (int) $userId;\n\n        if (empty($column)) {\n            $column = 'u.lastname';\n            if (api_is_western_name_order()) {\n                $column = 'u.firstname';\n            }\n        }\n\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $tbl_course_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $direction = in_array(strtolower($direction), ['asc', 'desc']) ? $direction : 'asc';\n        $column = Database::escape_string($column);\n\n        $urlId = api_get_current_access_url_id();\n\n        $sessionConditions = '';\n        $courseConditions = '';\n        $userConditions = '';\n\n        if (isset($active)) {\n            $active = (int) $active;\n            $userConditions .= \" AND active = $active\";\n        }\n\n        $courseList = CourseManager::get_courses_followed_by_drh($userId, DRH);\n        if (!empty($courseList)) {\n            $courseIdList = array_column($courseList, 'id');\n            $courseConditions = ' AND c.id IN (\"'.implode('\",\"', $courseIdList).'\")';\n        }\n\n        $userConditionsFromDrh = '';\n\n        // Classic DRH\n        if (empty($studentIdList)) {\n            $studentListSql = UserManager::get_users_followed_by_drh(\n                $userId,\n                $filterByStatus,\n                true,\n                false\n            );\n            if (!empty($studentListSql)) {\n                $studentIdList = array_keys($studentListSql);\n                $studentListSql = \"'\".implode(\"','\", $studentIdList).\"'\";\n            }\n        } else {\n            $studentIdList = array_map('intval', $studentIdList);\n            $studentListSql = \"'\".implode(\"','\", $studentIdList).\"'\";\n        }\n        if (!empty($studentListSql)) {\n            $userConditionsFromDrh = \" AND u.user_id IN ($studentListSql) \";\n        }\n\n        switch ($status) {\n            case 'admin':\n            case 'drh':\n                break;\n            case 'drh_all':\n                // Show all by DRH\n                if (empty($sessionIdList)) {\n                    $sessionListFollowed = self::get_sessions_followed_by_drh(\n                        $userId,\n                        null,\n                        null,\n                        false,\n                        true\n                    );\n\n                    if (!empty($sessionListFollowed)) {\n                        $sessionIdList = array_column($sessionListFollowed, 'id');\n                    }\n                }\n\n                if (!empty($sessionIdList)) {\n                    $sessionIdList = array_map('intval', $sessionIdList);\n                    $sessionsListSql = \"'\".implode(\"','\", $sessionIdList).\"'\";\n                    $sessionConditions = \" AND s.id IN ($sessionsListSql) \";\n                }\n\n                break;\n            case 'teacher':\n            case 'session_admin':\n                $sessionConditions = \" AND s.id_coach = $userId \";\n                $userConditionsFromDrh = '';\n                break;\n        }\n\n        $select = 'SELECT DISTINCT u.* ';\n        $masterSelect = 'SELECT DISTINCT user_id FROM ';\n\n        if ($getCount) {\n            $select = 'SELECT DISTINCT u.user_id ';\n            $masterSelect = 'SELECT COUNT(DISTINCT(user_id)) as count FROM ';\n        }\n\n        if (!empty($filterByStatus)) {\n            $userConditions .= \" AND u.status = $filterByStatus\";\n        }\n\n        if (!empty($lastConnectionDate)) {\n            $lastConnectionDate = Database::escape_string($lastConnectionDate);\n            $userConditions .= \" AND u.last_login <= '$lastConnectionDate' \";\n        }\n\n        if (!empty($filterUsers)) {\n            $userConditions .= \" AND u.id IN(\".implode(',', $filterUsers).\")\";\n        }\n\n        if (!empty($keyword)) {\n            $keyword = trim(Database::escape_string($keyword));\n            $keywordParts = array_filter(explode(' ', $keyword));\n            $extraKeyword = '';\n            if (!empty($keywordParts)) {\n                $keywordPartsFixed = Database::escape_string(implode('%', $keywordParts));\n                if (!empty($keywordPartsFixed)) {\n                    $extraKeyword .= \" OR\n                        CONCAT(u.firstname, ' ', u.lastname) LIKE '%$keywordPartsFixed%' OR\n                        CONCAT(u.lastname, ' ', u.firstname) LIKE '%$keywordPartsFixed%' \";\n                }\n            }\n\n            $userConditions .= \" AND (\n                u.username LIKE '%$keyword%' OR\n                u.firstname LIKE '%$keyword%' OR\n                u.lastname LIKE '%$keyword%' OR\n                u.official_code LIKE '%$keyword%' OR\n                u.email LIKE '%$keyword%' OR\n                CONCAT(u.firstname, ' ', u.lastname) LIKE '%$keyword%' OR\n                CONCAT(u.lastname, ' ', u.firstname) LIKE '%$keyword%'\n                $extraKeyword\n            )\";\n        }\n\n        $where = \" WHERE\n                   access_url_id = $urlId\n                   $userConditions\n        \";\n\n        $userUnion = '';\n        if (!empty($userConditionsFromDrh)) {\n            $userUnion = \"\n            UNION (\n                $select\n                FROM $tbl_user u\n                INNER JOIN $tbl_user_rel_access_url url ON (url.user_id = u.id)\n                $where\n                $userConditionsFromDrh\n            )\";\n        }\n\n        $sql = \"$masterSelect (\n                ($select\n                    FROM $tbl_session s\n                    INNER JOIN $tbl_session_rel_access_url url ON (url.session_id = s.id)\n                    INNER JOIN $tbl_session_rel_course_rel_user su ON (s.id = su.session_id)\n                    INNER JOIN $tbl_user u ON (u.user_id = su.user_id)\n                    $where\n                    $sessionConditions\n                    $userConditionsFromDrh\n                ) UNION (\n                    $select\n                    FROM $tbl_course c\n                    INNER JOIN $tbl_course_rel_access_url url ON (url.c_id = c.id)\n                    INNER JOIN $tbl_course_user cu ON (cu.c_id = c.id)\n                    INNER JOIN $tbl_user u ON (u.user_id = cu.user_id)\n                    $where\n                    $courseConditions\n                    $userConditionsFromDrh\n                ) $userUnion\n                ) as t1\n                \";\n\n        if ($getCount) {\n            $result = Database::query($sql);\n\n            $count = 0;\n            if (Database::num_rows($result)) {\n                $rows = Database::fetch_array($result);\n                $count = $rows['count'];\n            }\n\n            return $count;\n        }\n\n        if (!empty($column) && !empty($direction)) {\n            $column = str_replace('u.', '', $column);\n            $sql .= \" ORDER BY `$column` $direction \";\n        }\n\n        $limitCondition = '';\n        if (isset($from) && isset($numberItems)) {\n            $from = (int) $from;\n            $numberItems = (int) $numberItems;\n            $limitCondition = \"LIMIT $from, $numberItems\";\n        }\n\n        $sql .= $limitCondition;\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int   $sessionId\n     * @param int   $courseId\n     * @param array $coachList\n     * @param bool  $deleteCoachesNotInList\n     */\n    public static function updateCoaches(\n        $sessionId,\n        $courseId,\n        $coachList,\n        $deleteCoachesNotInList = false\n    ) {\n        $currentCoaches = self::getCoachesByCourseSession($sessionId, $courseId);\n\n        if (!empty($coachList)) {\n            foreach ($coachList as $userId) {\n                self::set_coach_to_course_session($userId, $sessionId, $courseId);\n            }\n        }\n\n        if ($deleteCoachesNotInList) {\n            if (!empty($coachList)) {\n                $coachesToDelete = array_diff($currentCoaches, $coachList);\n            } else {\n                $coachesToDelete = $currentCoaches;\n            }\n\n            if (!empty($coachesToDelete)) {\n                foreach ($coachesToDelete as $userId) {\n                    self::set_coach_to_course_session(\n                        $userId,\n                        $sessionId,\n                        $courseId,\n                        true\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array $sessions\n     * @param array $sessionsDestination\n     *\n     * @return array\n     */\n    public static function copyStudentsFromSession($sessions, $sessionsDestination)\n    {\n        $messages = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $sessionId) {\n                $sessionInfo = self::fetch($sessionId);\n                $userList = self::get_users_by_session($sessionId, 0);\n                if (!empty($userList)) {\n                    $newUserList = [];\n                    $userToString = null;\n                    foreach ($userList as $userInfo) {\n                        $newUserList[] = $userInfo['user_id'];\n                        $userToString .= $userInfo['firstname'].' '.$userInfo['lastname'].'<br />';\n                    }\n\n                    if (!empty($sessionsDestination)) {\n                        foreach ($sessionsDestination as $sessionDestinationId) {\n                            $sessionDestinationInfo = self::fetch($sessionDestinationId);\n                            $messages[] = Display::return_message(\n                                sprintf(\n                                    get_lang(\n                                        'AddingStudentsFromSessionXToSessionY'\n                                    ),\n                                    $sessionInfo['name'],\n                                    $sessionDestinationInfo['name']\n                                ),\n                                'info',\n                                false\n                            );\n                            if ($sessionId == $sessionDestinationId) {\n                                $messages[] = Display::return_message(\n                                    sprintf(\n                                        get_lang('SessionXSkipped'),\n                                        $sessionDestinationId\n                                    ),\n                                    'warning',\n                                    false\n                                );\n                                continue;\n                            }\n                            $messages[] = Display::return_message(get_lang('StudentList').'<br />'.$userToString, 'info', false);\n                            self::subscribeUsersToSession(\n                                $sessionDestinationId,\n                                $newUserList,\n                                SESSION_VISIBLE_READ_ONLY,\n                                false\n                            );\n                        }\n                    } else {\n                        $messages[] = Display::return_message(get_lang('NoDestinationSessionProvided'), 'warning');\n                    }\n                } else {\n                    $messages[] = Display::return_message(\n                        get_lang('NoStudentsFoundForSession').' #'.$sessionInfo['name'],\n                        'warning'\n                    );\n                }\n            }\n        } else {\n            $messages[] = Display::return_message(get_lang('NoData'), 'warning');\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Assign coaches of a session(s) as teachers to a given course (or courses).\n     *\n     * @param array A list of session IDs\n     * @param array A list of course IDs\n     *\n     * @return string\n     */\n    public static function copyCoachesFromSessionToCourse($sessions, $courses)\n    {\n        $coachesPerSession = [];\n        foreach ($sessions as $sessionId) {\n            $coaches = self::getCoachesBySession($sessionId);\n            $coachesPerSession[$sessionId] = $coaches;\n        }\n\n        $result = [];\n\n        if (!empty($courses)) {\n            foreach ($courses as $courseId) {\n                $courseInfo = api_get_course_info_by_id($courseId);\n                foreach ($coachesPerSession as $sessionId => $coachList) {\n                    CourseManager::updateTeachers(\n                        $courseInfo,\n                        $coachList,\n                        false,\n                        false,\n                        false\n                    );\n                    $result[$courseInfo['code']][$sessionId] = $coachList;\n                }\n            }\n        }\n        $sessionUrl = api_get_path(WEB_CODE_PATH).'session/resume_session.php?id_session=';\n        $htmlResult = null;\n\n        if (!empty($result)) {\n            foreach ($result as $courseCode => $data) {\n                $url = api_get_course_url($courseCode);\n                $htmlResult .= sprintf(\n                    get_lang('CoachesSubscribedAsATeacherInCourseX'),\n                    Display::url($courseCode, $url, ['target' => '_blank'])\n                );\n                foreach ($data as $sessionId => $coachList) {\n                    $sessionInfo = self::fetch($sessionId);\n                    $htmlResult .= '<br />';\n                    $htmlResult .= Display::url(\n                        get_lang('Session').': '.$sessionInfo['name'].' <br />',\n                        $sessionUrl.$sessionId,\n                        ['target' => '_blank']\n                    );\n                    $teacherList = [];\n                    foreach ($coachList as $coachId) {\n                        $userInfo = api_get_user_info($coachId);\n                        $teacherList[] = $userInfo['complete_name'];\n                    }\n                    if (!empty($teacherList)) {\n                        $htmlResult .= implode(', ', $teacherList);\n                    } else {\n                        $htmlResult .= get_lang('NothingToAdd');\n                    }\n                }\n                $htmlResult .= '<br />';\n            }\n            $htmlResult = Display::return_message($htmlResult, 'normal', false);\n        }\n\n        return $htmlResult;\n    }\n\n    /**\n     * @param string $keyword\n     * @param string $active\n     * @param string $lastConnectionDate\n     * @param array  $sessionIdList\n     * @param array  $studentIdList\n     * @param int    $filterUserStatus   STUDENT|COURSEMANAGER constants\n     *\n     * @return array|int\n     */\n    public static function getCountUserTracking(\n        $keyword = null,\n        $active = null,\n        $lastConnectionDate = null,\n        $sessionIdList = [],\n        $studentIdList = [],\n        $filterUserStatus = null\n    ) {\n        $userId = api_get_user_id();\n        $drhLoaded = false;\n        if (api_is_drh()) {\n            if (api_drh_can_access_all_session_content()) {\n                $count = self::getAllUsersFromCoursesFromAllSessionFromStatus(\n                    'drh_all',\n                    $userId,\n                    true,\n                    null,\n                    null,\n                    null,\n                    null,\n                    $keyword,\n                    $active,\n                    $lastConnectionDate,\n                    $sessionIdList,\n                    $studentIdList,\n                    $filterUserStatus\n                );\n                $drhLoaded = true;\n            }\n            $allowDhrAccessToAllStudents = api_get_configuration_value('drh_allow_access_to_all_students');\n            if ($allowDhrAccessToAllStudents) {\n                $conditions = ['status' => STUDENT];\n                if (isset($active)) {\n                    $conditions['active'] = (int) $active;\n                }\n                $students = UserManager::get_user_list(\n                    $conditions,\n                    [],\n                    false,\n                    false,\n                    null,\n                    $keyword,\n                    $lastConnectionDate\n                );\n                $count = count($students);\n                $drhLoaded = true;\n            }\n        }\n\n        $checkSessionVisibility = api_get_configuration_value('show_users_in_active_sessions_in_tracking');\n\n        if (false === $drhLoaded) {\n            $count = UserManager::getUsersFollowedByUser(\n                $userId,\n                $filterUserStatus,\n                false,\n                false,\n                true,\n                null,\n                null,\n                null,\n                null,\n                $active,\n                $lastConnectionDate,\n                api_is_student_boss() ? STUDENT_BOSS : COURSEMANAGER,\n                $keyword,\n                $checkSessionVisibility\n            );\n        }\n\n        return $count;\n    }\n\n    /**\n     * Get teachers followed by a user.\n     *\n     * @param int    $userId\n     * @param int    $active\n     * @param string $lastConnectionDate\n     * @param bool   $getCount\n     * @param array  $sessionIdList\n     *\n     * @return array|int\n     */\n    public static function getTeacherTracking(\n        $userId,\n        $active = 1,\n        $lastConnectionDate = null,\n        $getCount = false,\n        $sessionIdList = []\n    ) {\n        $teacherListId = [];\n        if (api_is_drh() || api_is_platform_admin()) {\n            // Followed teachers by drh\n            if (api_drh_can_access_all_session_content()) {\n                if (empty($sessionIdList)) {\n                    $sessions = self::get_sessions_followed_by_drh($userId);\n                    $sessionIdList = [];\n                    foreach ($sessions as $session) {\n                        $sessionIdList[] = $session['id'];\n                    }\n                }\n\n                $sessionIdList = array_map('intval', $sessionIdList);\n                $sessionToString = implode(\"', '\", $sessionIdList);\n\n                $course = Database::get_main_table(TABLE_MAIN_COURSE);\n                $sessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n                $courseUser = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n\n                // Select the teachers.\n                $sql = \"SELECT DISTINCT(cu.user_id)\n                        FROM $course c\n                        INNER JOIN $sessionCourse src\n                        ON c.id = src.c_id\n                        INNER JOIN $courseUser cu\n                        ON (cu.c_id = c.id)\n\t\t                WHERE src.session_id IN ('$sessionToString') AND cu.status = 1\";\n                $result = Database::query($sql);\n                while ($row = Database::fetch_array($result, 'ASSOC')) {\n                    $teacherListId[$row['user_id']] = $row['user_id'];\n                }\n            } else {\n                $teacherResult = UserManager::get_users_followed_by_drh($userId, COURSEMANAGER);\n                foreach ($teacherResult as $userInfo) {\n                    $teacherListId[] = $userInfo['user_id'];\n                }\n            }\n        }\n\n        if (!empty($teacherListId)) {\n            $tableUser = Database::get_main_table(TABLE_MAIN_USER);\n\n            $select = \"SELECT DISTINCT u.* \";\n            if ($getCount) {\n                $select = \"SELECT count(DISTINCT(u.user_id)) as count\";\n            }\n\n            $sql = \"$select FROM $tableUser u\";\n\n            if (!empty($lastConnectionDate)) {\n                $tableLogin = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n                //$sql .= \" INNER JOIN $tableLogin l ON (l.login_user_id = u.user_id) \";\n            }\n            $active = intval($active);\n            $teacherListId = implode(\"','\", $teacherListId);\n            $where = \" WHERE u.active = $active AND u.user_id IN ('$teacherListId') \";\n\n            if (!empty($lastConnectionDate)) {\n                $lastConnectionDate = Database::escape_string($lastConnectionDate);\n                //$where .= \" AND l.login_date <= '$lastConnectionDate' \";\n            }\n\n            $sql .= $where;\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                if ($getCount) {\n                    $row = Database::fetch_array($result);\n\n                    return $row['count'];\n                } else {\n                    return Database::store_result($result, 'ASSOC');\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get the list of course tools that have to be dealt with in case of\n     * registering any course to a session.\n     *\n     * @return array The list of tools to be dealt with (literal names)\n     */\n    public static function getCourseToolToBeManaged()\n    {\n        return [\n            'courseDescription',\n            'courseIntroduction',\n        ];\n    }\n\n    /**\n     * Calls the methods bound to each tool when a course is registered into a session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public static function installCourse($sessionId, $courseId)\n    {\n        return true;\n        $toolList = self::getCourseToolToBeManaged();\n\n        foreach ($toolList as $tool) {\n            $method = 'add'.$tool;\n            if (method_exists(get_class(), $method)) {\n                self::$method($sessionId, $courseId);\n            }\n        }\n    }\n\n    /**\n     * Calls the methods bound to each tool when a course is unregistered from\n     * a session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     */\n    public static function unInstallCourse($sessionId, $courseId)\n    {\n        return true;\n        $toolList = self::getCourseToolToBeManaged();\n\n        foreach ($toolList as $tool) {\n            $method = 'remove'.$tool;\n            if (method_exists(get_class(), $method)) {\n                self::$method($sessionId, $courseId);\n            }\n        }\n    }\n\n    /**\n     * @param array $userSessionList        format see self::importSessionDrhCSV()\n     * @param bool  $sendEmail\n     * @param bool  $removeOldRelationShips\n     */\n    public static function subscribeDrhToSessionList(\n        $userSessionList,\n        $sendEmail,\n        $removeOldRelationShips\n    ) {\n        if (!empty($userSessionList)) {\n            foreach ($userSessionList as $userId => $data) {\n                $sessionList = [];\n                foreach ($data['session_list'] as $sessionInfo) {\n                    $sessionList[] = $sessionInfo['session_id'];\n                }\n                $userInfo = $data['user_info'];\n                self::subscribeSessionsToDrh(\n                    $userInfo,\n                    $sessionList,\n                    $sendEmail,\n                    $removeOldRelationShips\n                );\n            }\n        }\n    }\n\n    /**\n     * @param array $userSessionList format see self::importSessionDrhCSV()\n     *\n     * @return string\n     */\n    public static function checkSubscribeDrhToSessionList($userSessionList)\n    {\n        $message = null;\n        if (!empty($userSessionList)) {\n            if (!empty($userSessionList)) {\n                foreach ($userSessionList as $userId => $data) {\n                    $userInfo = $data['user_info'];\n\n                    $sessionListSubscribed = self::get_sessions_followed_by_drh($userId);\n                    if (!empty($sessionListSubscribed)) {\n                        $sessionListSubscribed = array_keys($sessionListSubscribed);\n                    }\n\n                    $sessionList = [];\n                    if (!empty($data['session_list'])) {\n                        foreach ($data['session_list'] as $sessionInfo) {\n                            if (in_array($sessionInfo['session_id'], $sessionListSubscribed)) {\n                                $sessionList[] = $sessionInfo['session_info']['name'];\n                            }\n                        }\n                    }\n\n                    $message .= '<strong>'.get_lang('User').'</strong>: ';\n                    $message .= $userInfo['complete_name_with_username'].' <br />';\n\n                    if (!in_array($userInfo['status'], [DRH]) && !api_is_platform_admin_by_id($userInfo['user_id'])) {\n                        $message .= get_lang('UserMustHaveTheDrhRole').'<br />';\n                        continue;\n                    }\n\n                    if (!empty($sessionList)) {\n                        $message .= '<strong>'.get_lang('Sessions').':</strong> <br />';\n                        $message .= implode(', ', $sessionList).'<br /><br />';\n                    } else {\n                        $message .= get_lang('NoSessionProvided').' <br /><br />';\n                    }\n                }\n            }\n        }\n\n        return $message;\n    }\n\n    /**\n     * @param string $file\n     * @param bool   $sendEmail\n     * @param bool   $removeOldRelationShips\n     *\n     * @return string\n     */\n    public static function importSessionDrhCSV($file, $sendEmail, $removeOldRelationShips)\n    {\n        $list = Import::csv_reader($file);\n\n        if (!empty($list)) {\n            $userSessionList = [];\n            foreach ($list as $data) {\n                $sessionInfo = [];\n                if (isset($data['SessionId'])) {\n                    $sessionInfo = api_get_session_info($data['SessionId']);\n                }\n\n                if (isset($data['SessionName']) && empty($sessionInfo)) {\n                    $sessionInfo = self::get_session_by_name($data['SessionName']);\n                }\n\n                if (empty($sessionInfo)) {\n                    $sessionData = isset($data['SessionName']) ? $data['SessionName'] : $data['SessionId'];\n                    Display::addFlash(\n                        Display::return_message(get_lang('SessionNotFound').' - '.$sessionData, 'warning')\n                    );\n                    continue;\n                }\n\n                $userList = explode(',', $data['Username']);\n\n                foreach ($userList as $username) {\n                    $userInfo = api_get_user_info_from_username($username);\n\n                    if (empty($userInfo)) {\n                        Display::addFlash(\n                            Display::return_message(get_lang('UserDoesNotExist').' - '.$username, 'warning')\n                        );\n                        continue;\n                    }\n\n                    if (!empty($userInfo) && !empty($sessionInfo)) {\n                        $userSessionList[$userInfo['user_id']]['session_list'][] = [\n                            'session_id' => $sessionInfo['id'],\n                            'session_info' => $sessionInfo,\n                        ];\n                        $userSessionList[$userInfo['user_id']]['user_info'] = $userInfo;\n                    }\n                }\n            }\n\n            self::subscribeDrhToSessionList($userSessionList, $sendEmail, $removeOldRelationShips);\n\n            return self::checkSubscribeDrhToSessionList($userSessionList);\n        }\n    }\n\n    /**\n     * Courses re-ordering in resume_session.php flag see BT#8316.\n     */\n    public static function orderCourseIsEnabled()\n    {\n        $sessionCourseOrder = api_get_setting('session_course_ordering');\n        if ($sessionCourseOrder === 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $direction (up/down)\n     * @param int    $sessionId\n     * @param int    $courseId\n     *\n     * @return bool\n     */\n    public static function move($direction, $sessionId, $courseId)\n    {\n        if (!self::orderCourseIsEnabled()) {\n            return false;\n        }\n\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $courseList = self::get_course_list_by_session_id($sessionId, null, 'position');\n\n        $position = [];\n        $count = 0;\n        foreach ($courseList as $course) {\n            if ($course['position'] == '') {\n                $course['position'] = $count;\n            }\n            $position[$course['code']] = $course['position'];\n            // Saving current order.\n            $sql = \"UPDATE $table SET position = $count\n                    WHERE session_id = $sessionId AND c_id = '\".$course['real_id'].\"'\";\n            Database::query($sql);\n            $count++;\n        }\n\n        // Loading new positions.\n        $courseList = self::get_course_list_by_session_id($sessionId, null, 'position');\n\n        $found = false;\n\n        switch ($direction) {\n            case 'up':\n                $courseList = array_reverse($courseList);\n                break;\n            case 'down':\n                break;\n        }\n\n        foreach ($courseList as $course) {\n            if ($found) {\n                $nextId = $course['real_id'];\n                $nextOrder = $course['position'];\n                break;\n            }\n\n            if ($courseId == $course['real_id']) {\n                $thisCourseCode = $course['real_id'];\n                $thisOrder = $course['position'];\n                $found = true;\n            }\n        }\n\n        $sql1 = \"UPDATE $table SET position = '\".intval($nextOrder).\"'\n                 WHERE session_id = $sessionId AND c_id =  $thisCourseCode\";\n        Database::query($sql1);\n\n        $sql2 = \"UPDATE $table SET position = '\".intval($thisOrder).\"'\n                 WHERE session_id = $sessionId AND c_id = $nextId\";\n        Database::query($sql2);\n\n        return true;\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public static function moveUp($sessionId, $courseId)\n    {\n        return self::move('up', $sessionId, $courseId);\n    }\n\n    /**\n     * @param int    $sessionId\n     * @param string $courseCode\n     *\n     * @return bool\n     */\n    public static function moveDown($sessionId, $courseCode)\n    {\n        return self::move('down', $sessionId, $courseCode);\n    }\n\n    /**\n     * Use the session duration to allow/block user access see BT#8317\n     * Needs these DB changes\n     * ALTER TABLE session ADD COLUMN duration int;\n     * ALTER TABLE session_rel_user ADD COLUMN duration int;.\n     */\n    public static function durationPerUserIsEnabled()\n    {\n        return api_get_configuration_value('session_duration_feature');\n    }\n\n    /**\n     * Returns the number of days the student has left in a session when using\n     * sessions durations.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getDayLeftInSession(array $sessionInfo, $userId)\n    {\n        $sessionId = $sessionInfo['id'];\n        $subscription = self::getUserSession($userId, $sessionId);\n        $duration = empty($subscription['duration'])\n            ? $sessionInfo['duration']\n            : $sessionInfo['duration'] + $subscription['duration'];\n\n        // Get an array with the details of the first access of the student to\n        // this session\n        $courseAccess = CourseManager::getFirstCourseAccessPerSessionAndUser(\n            $sessionId,\n            $userId\n        );\n\n        $currentTime = time();\n\n        // If no previous access, return false\n        if (count($courseAccess) == 0) {\n            return $duration;\n        }\n\n        $firstAccess = api_strtotime($courseAccess['login_course_date'], 'UTC');\n        $endDateInSeconds = $firstAccess + $duration * 24 * 60 * 60;\n        $leftDays = round(($endDateInSeconds - $currentTime) / 60 / 60 / 24);\n\n        return $leftDays;\n    }\n\n    /**\n     * @param int $duration\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function editUserSessionDuration($duration, $userId, $sessionId)\n    {\n        $duration = (int) $duration;\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        if (empty($userId) || empty($sessionId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $parameters = ['duration' => $duration];\n        $where = ['session_id = ? AND user_id = ? ' => [$sessionId, $userId]];\n        Database::update($table, $parameters, $where);\n\n        return true;\n    }\n\n    /**\n     * Gets one row from the session_rel_user table.\n     *\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getUserSession($userId, $sessionId)\n    {\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        if (empty($userId) || empty($sessionId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sql = \"SELECT * FROM $table\n                WHERE session_id = $sessionId AND user_id = $userId\";\n        $result = Database::query($sql);\n        $values = [];\n        if (Database::num_rows($result)) {\n            $values = Database::fetch_array($result, 'ASSOC');\n        }\n\n        return $values;\n    }\n\n    /**\n     * Check if user is subscribed inside a session as student.\n     *\n     * @param int $sessionId The session id\n     * @param int $userId    The user id\n     *\n     * @return bool Whether is subscribed\n     */\n    public static function isUserSubscribedAsStudent($sessionId, $userId)\n    {\n        $sessionRelUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sessionId = (int) $sessionId;\n        $userId = (int) $userId;\n\n        // COUNT(1) actually returns the number of rows from the table (as if\n        // counting the results from the first column)\n        $sql = \"SELECT COUNT(1) AS qty FROM $sessionRelUserTable\n                WHERE\n                    session_id = $sessionId AND\n                    user_id = $userId AND\n                    relation_type = 0\";\n\n        $result = Database::fetch_assoc(Database::query($sql));\n\n        if (!empty($result) && $result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if user is subscribed inside a session as a HRM.\n     *\n     * @param int $sessionId The session id\n     * @param int $userId    The user id\n     *\n     * @return bool Whether is subscribed\n     */\n    public static function isUserSubscribedAsHRM($sessionId, $userId)\n    {\n        $sessionRelUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $sessionId = (int) $sessionId;\n        $userId = (int) $userId;\n\n        // COUNT(1) actually returns the number of rows from the table (as if\n        // counting the results from the first column)\n        $sql = \"SELECT COUNT(1) AS qty FROM $sessionRelUserTable\n                WHERE\n                    session_id = $sessionId AND\n                    user_id = $userId AND\n                    relation_type = \".SESSION_RELATION_TYPE_RRHH;\n\n        $result = Database::fetch_assoc(Database::query($sql));\n\n        if (!empty($result) && $result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the session coached by a user (general coach and course-session coach).\n     *\n     * @param int  $coachId                       The coach id\n     * @param bool $checkSessionRelUserVisibility Check the session visibility\n     * @param bool $asPlatformAdmin               The user is a platform admin and we want all sessions\n     *\n     * @return array The session list\n     */\n    public static function getSessionsCoachedByUser(\n        $coachId,\n        $checkSessionRelUserVisibility = false,\n        $asPlatformAdmin = false\n    ) {\n        // Get all sessions where $coachId is the general coach\n        $sessions = self::get_sessions_by_general_coach($coachId, $asPlatformAdmin);\n        // Get all sessions where $coachId is the course - session coach\n        $courseSessionList = self::getCoursesListByCourseCoach($coachId);\n        $sessionsByCoach = [];\n        if (!empty($courseSessionList)) {\n            foreach ($courseSessionList as $userCourseSubscription) {\n                $session = $userCourseSubscription->getSession();\n                $sessionsByCoach[$session->getId()] = api_get_session_info(\n                    $session->getId()\n                );\n            }\n        }\n\n        if (!empty($sessionsByCoach)) {\n            $sessions = array_merge($sessions, $sessionsByCoach);\n        }\n\n        // Remove repeated sessions\n        if (!empty($sessions)) {\n            $cleanSessions = [];\n            foreach ($sessions as $session) {\n                $cleanSessions[$session['id']] = $session;\n            }\n            $sessions = $cleanSessions;\n        }\n\n        if ($checkSessionRelUserVisibility) {\n            if (!empty($sessions)) {\n                $newSessions = [];\n                foreach ($sessions as $session) {\n                    $visibility = api_get_session_visibility($session['id']);\n                    if ($visibility == SESSION_INVISIBLE) {\n                        continue;\n                    }\n                    $newSessions[] = $session;\n                }\n                $sessions = $newSessions;\n            }\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Check if the course belongs to the session.\n     *\n     * @param int    $sessionId  The session id\n     * @param string $courseCode The course code\n     *\n     * @return bool\n     */\n    public static function sessionHasCourse($sessionId, $courseCode)\n    {\n        $sessionId = (int) $sessionId;\n        $courseCode = Database::escape_string($courseCode);\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $sessionRelCourseTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        $sql = \"SELECT COUNT(1) AS qty\n                FROM $courseTable c\n                INNER JOIN $sessionRelCourseTable src\n                ON c.id = src.c_id\n                WHERE src.session_id = $sessionId\n                AND c.code = '$courseCode'  \";\n\n        $result = Database::query($sql);\n\n        if (false !== $result) {\n            $data = Database::fetch_assoc($result);\n\n            if ($data['qty'] > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Calculate the total user time in the platform.\n     *\n     * @param int    $userId The user id\n     * @param string $from   Optional. From date\n     * @param string $until  Optional. Until date\n     *\n     * @return string The time (hh:mm:ss)\n     */\n    public static function getTotalUserTimeInPlatform($userId, $from = '', $until = '')\n    {\n        $userId = (int) $userId;\n        $trackLoginTable = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $whereConditions = [\n            'login_user_id = ? ' => $userId,\n        ];\n\n        if (!empty($from) && !empty($until)) {\n            $whereConditions[\"AND (login_date >= '?' \"] = $from;\n            $whereConditions[\"AND logout_date <= DATE_ADD('?', INTERVAL 1 DAY)) \"] = $until;\n        }\n\n        $trackResult = Database::select(\n            'SEC_TO_TIME(SUM(UNIX_TIMESTAMP(logout_date) - UNIX_TIMESTAMP(login_date))) as total_time',\n            $trackLoginTable,\n            [\n                'where' => $whereConditions,\n            ],\n            'first'\n        );\n\n        if (false != $trackResult) {\n            return $trackResult['total_time'] ? $trackResult['total_time'] : '00:00:00';\n        }\n\n        return '00:00:00';\n    }\n\n    /**\n     * Get the courses list by a course coach.\n     *\n     * @param int $coachId The coach id\n     *\n     * @return array (id, user_id, session_id, c_id, visibility, status, legal_agreement)\n     */\n    public static function getCoursesListByCourseCoach($coachId)\n    {\n        $entityManager = Database::getManager();\n        $scuRepo = $entityManager->getRepository(\n            'ChamiloCoreBundle:SessionRelCourseRelUser'\n        );\n\n        return $scuRepo->findBy([\n            'user' => $coachId,\n            'status' => SessionRelCourseRelUser::STATUS_COURSE_COACH,\n        ]);\n    }\n\n    /**\n     * Get the count of user courses in session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function getTotalUserCoursesInSession($sessionId, $courseId = 0)\n    {\n        $tableUser = Database::get_main_table(TABLE_MAIN_USER);\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return [];\n        }\n\n        $courseCondition = '';\n        if (!empty($courseId)) {\n            $courseId = (int) $courseId;\n            $courseCondition = \"  c_id = $courseId AND \";\n        }\n\n        $sql = \"SELECT\n                    COUNT(u.id) as count,\n                    u.id,\n                    scu.status status_in_session,\n                    u.status user_status\n                FROM $table scu\n                INNER JOIN $tableUser u\n                ON scu.user_id = u.id\n                WHERE\n                  $courseCondition\n                  scu.session_id = \".$sessionId.\"\n                GROUP BY u.id\";\n\n        $result = Database::query($sql);\n\n        $list = [];\n        while ($data = Database::fetch_assoc($result)) {\n            $list[] = $data;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Returns list of a few data from session (name, short description, start\n     * date, end date) and the given extra fields if defined based on a\n     * session category Id.\n     *\n     * @param int    $categoryId  The internal ID of the session category\n     * @param string $target      Value to search for in the session field values\n     * @param array  $extraFields A list of fields to be scanned and returned\n     *\n     * @return mixed\n     */\n    public static function getShortSessionListAndExtraByCategory(\n        $categoryId,\n        $target,\n        $extraFields = null,\n        $publicationDate = null\n    ) {\n        $categoryId = (int) $categoryId;\n        $sessionList = [];\n        // Check if categoryId is valid\n        if ($categoryId > 0) {\n            $target = Database::escape_string($target);\n            $sTable = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sfTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sfvTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            // Join session field and session field values tables\n            $joinTable = $sfTable.' sf INNER JOIN '.$sfvTable.' sfv ON sf.id = sfv.field_id';\n            $fieldsArray = [];\n            foreach ($extraFields as $field) {\n                $fieldsArray[] = Database::escape_string($field);\n            }\n            $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n            if (isset($publicationDate)) {\n                $publicationDateString = $publicationDate->format('Y-m-d H:i:s');\n                $wherePublication = \" AND id NOT IN (\n                    SELECT sfv.item_id FROM $joinTable\n                    WHERE\n                        sf.extra_field_type = $extraFieldType AND\n                        ((sf.variable = 'publication_start_date' AND sfv.value > '$publicationDateString' and sfv.value != '') OR\n                        (sf.variable = 'publication_end_date' AND sfv.value < '$publicationDateString' and sfv.value != ''))\n                )\";\n            }\n            // Get the session list from session category and target\n            $sessionList = Database::select(\n                'id, name, access_start_date, access_end_date',\n                $sTable,\n                [\n                    'where' => [\n                        \"session_category_id = ? AND id IN (\n                            SELECT sfv.item_id FROM $joinTable\n                            WHERE\n                                sf.extra_field_type = $extraFieldType AND\n                                sfv.item_id = session.id AND\n                                sf.variable = 'target' AND\n                                sfv.value = ?\n                        ) $wherePublication\" => [$categoryId, $target],\n                    ],\n                ]\n            );\n            $whereFieldVariables = [];\n            $whereFieldIds = [];\n            if (\n                is_array($fieldsArray) &&\n                count($fieldsArray) > 0\n            ) {\n                $whereParams = '?';\n                for ($i = 1; $i < count($fieldsArray); $i++) {\n                    $whereParams .= ', ?';\n                }\n                $whereFieldVariables = ' variable IN ( '.$whereParams.' )';\n                $whereFieldIds = 'field_id IN ( '.$whereParams.' )';\n            }\n            // Get session fields\n            $extraField = new ExtraFieldModel('session');\n            $questionMarks = substr(str_repeat('?, ', count($fieldsArray)), 0, -2);\n            $fieldsList = $extraField->get_all([\n                ' variable IN ( '.$questionMarks.' )' => $fieldsArray,\n            ]);\n            // Index session fields\n            foreach ($fieldsList as $field) {\n                $fields[$field['id']] = $field['variable'];\n            }\n            // Get session field values\n            $extra = new ExtraFieldValue('session');\n            $questionMarksFields = substr(str_repeat('?, ', count($fields)), 0, -2);\n            $sessionFieldValueList = $extra->get_all(['where' => ['field_id IN ( '.$questionMarksFields.' )' => array_keys($fields)]]);\n            // Add session fields values to session list\n            foreach ($sessionList as $id => &$session) {\n                foreach ($sessionFieldValueList as $sessionFieldValue) {\n                    // Match session field values to session\n                    if ($sessionFieldValue['item_id'] == $id) {\n                        // Check if session field value is set in session field list\n                        if (isset($fields[$sessionFieldValue['field_id']])) {\n                            // Avoid overwriting the session's ID field\n                            if ($fields[$sessionFieldValue['field_id']] != 'id') {\n                                $var = $fields[$sessionFieldValue['field_id']];\n                                $val = $sessionFieldValue['value'];\n                                // Assign session field value to session\n                                $session[$var] = $val;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $sessionList;\n    }\n\n    /**\n     * Return the Session Category id searched by name.\n     *\n     * @param string $categoryName Name attribute of session category used for search query\n     * @param bool   $force        boolean used to get even if something is wrong (e.g not unique name)\n     *\n     * @return int|array If success, return category id (int), else it will return an array\n     *                   with the next structure:\n     *                   array('error' => true, 'errorMessage' => ERROR_MESSAGE)\n     */\n    public static function getSessionCategoryIdByName($categoryName, $force = false)\n    {\n        // Start error result\n        $errorResult = ['error' => true, 'errorMessage' => get_lang('ThereWasAnError')];\n        $categoryName = Database::escape_string($categoryName);\n        // Check if is not empty category name\n        if (!empty($categoryName)) {\n            $sessionCategoryTable = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n            // Get all session category with same name\n            $result = Database::select(\n                'id',\n                $sessionCategoryTable,\n                [\n                    'where' => [\n                        'name = ?' => $categoryName,\n                    ],\n                ]\n            );\n            // Check the result\n            if ($result < 1) {\n                // If not found any result, update error message\n                $errorResult['errorMessage'] = 'Not found any session category name '.$categoryName;\n            } elseif (count($result) > 1 && !$force) {\n                // If found more than one result and force is disabled, update error message\n                $errorResult['errorMessage'] = 'Found many session categories';\n            } elseif (count($result) == 1 || $force) {\n                // If found just one session category or force option is enabled\n\n                return key($result);\n            }\n        } else {\n            // category name is empty, update error message\n            $errorResult['errorMessage'] = 'Not valid category name';\n        }\n\n        return $errorResult;\n    }\n\n    /**\n     * Return all data from sessions (plus extra field, course and coach data) by category id.\n     *\n     * @param int $sessionCategoryId session category id used to search sessions\n     *\n     * @return array If success, return session list and more session related data, else it will return an array\n     *               with the next structure:\n     *               array('error' => true, 'errorMessage' => ERROR_MESSAGE)\n     */\n    public static function getSessionListAndExtraByCategoryId($sessionCategoryId)\n    {\n        // Start error result\n        $errorResult = [\n            'error' => true,\n            'errorMessage' => get_lang('ThereWasAnError'),\n        ];\n\n        $sessionCategoryId = intval($sessionCategoryId);\n        // Check if session category id is valid\n        if ($sessionCategoryId > 0) {\n            // Get table names\n            $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sessionFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sessionFieldValueTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            $sessionCourseUserTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n            $userTable = Database::get_main_table(TABLE_MAIN_USER);\n            $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n\n            // Get all data from all sessions whit the session category specified\n            $sessionList = Database::select(\n                '*',\n                $sessionTable,\n                [\n                    'where' => [\n                        'session_category_id = ?' => $sessionCategoryId,\n                    ],\n                ]\n            );\n\n            $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n\n            // Check if session list query had result\n            if (!empty($sessionList)) {\n                // implode all session id\n                $sessionIdsString = '('.implode(', ', array_keys($sessionList)).')';\n                // Get all field variables\n                $sessionFieldList = Database::select(\n                    'id, variable',\n                    $sessionFieldTable,\n                    ['extra_field_type = ? ' => [$extraFieldType]]\n                );\n\n                // Get all field values\n                $sql = \"SELECT item_id, field_id, value FROM\n                        $sessionFieldValueTable v INNER JOIN $sessionFieldTable f\n                        ON (f.id = v.field_id)\n                        WHERE\n                            item_id IN $sessionIdsString AND\n                            extra_field_type = $extraFieldType\n                \";\n                $result = Database::query($sql);\n                $sessionFieldValueList = Database::store_result($result, 'ASSOC');\n\n                // Check if session field values had result\n                if (!empty($sessionFieldValueList)) {\n                    $sessionFieldValueListBySession = [];\n                    foreach ($sessionFieldValueList as $key => $sessionFieldValue) {\n                        // Create an array to index ids to session id\n                        $sessionFieldValueListBySession[$sessionFieldValue['item_id']][] = $key;\n                    }\n                }\n                // Query used to find course-coaches from sessions\n                $sql = \"SELECT\n                            scu.session_id,\n                            c.id AS course_id,\n                            c.code AS course_code,\n                            c.title AS course_title,\n                            u.username AS coach_username,\n                            u.firstname AS coach_firstname,\n                            u.lastname AS coach_lastname\n                        FROM $courseTable c\n                        INNER JOIN $sessionCourseUserTable scu ON c.id = scu.c_id\n                        INNER JOIN $userTable u ON scu.user_id = u.user_id\n                        WHERE scu.status = 2 AND scu.session_id IN $sessionIdsString\n                        ORDER BY scu.session_id ASC \";\n                $res = Database::query($sql);\n                $sessionCourseList = Database::store_result($res, 'ASSOC');\n                // Check if course list had result\n                if (!empty($sessionCourseList)) {\n                    foreach ($sessionCourseList as $key => $sessionCourse) {\n                        // Create an array to index ids to session_id\n                        $sessionCourseListBySession[$sessionCourse['session_id']][] = $key;\n                    }\n                }\n                // Join lists\n                if (is_array($sessionList)) {\n                    foreach ($sessionList as $id => &$row) {\n                        if (\n                            !empty($sessionFieldValueListBySession) &&\n                            is_array($sessionFieldValueListBySession[$id])\n                        ) {\n                            // If have an index array for session extra fields, use it to join arrays\n                            foreach ($sessionFieldValueListBySession[$id] as $key) {\n                                $row['extra'][$key] = [\n                                    'field_name' => $sessionFieldList[$sessionFieldValueList[$key]['field_id']]['variable'],\n                                    'value' => $sessionFieldValueList[$key]['value'],\n                                ];\n                            }\n                        }\n                        if (\n                            !empty($sessionCourseListBySession) &&\n                            is_array($sessionCourseListBySession[$id])\n                        ) {\n                            // If have an index array for session course coach, use it to join arrays\n                            foreach ($sessionCourseListBySession[$id] as $key) {\n                                $row['course'][$key] = [\n                                    'course_id' => $sessionCourseList[$key]['course_id'],\n                                    'course_code' => $sessionCourseList[$key]['course_code'],\n                                    'course_title' => $sessionCourseList[$key]['course_title'],\n                                    'coach_username' => $sessionCourseList[$key]['coach_username'],\n                                    'coach_firstname' => $sessionCourseList[$key]['coach_firstname'],\n                                    'coach_lastname' => $sessionCourseList[$key]['coach_lastname'],\n                                ];\n                            }\n                        }\n                    }\n                }\n\n                return $sessionList;\n            } else {\n                // Not found result, update error message\n                $errorResult['errorMessage'] = 'Not found any session for session category id '.$sessionCategoryId;\n            }\n        }\n\n        return $errorResult;\n    }\n\n    /**\n     * Return session description from session id.\n     *\n     * @param int $sessionId\n     *\n     * @return string\n     */\n    public static function getDescriptionFromSessionId($sessionId)\n    {\n        // Init variables\n        $sessionId = (int) $sessionId;\n        $description = '';\n        // Check if session id is valid\n        if ($sessionId > 0) {\n            // Select query from session id\n            $rows = Database::select(\n                'description',\n                Database::get_main_table(TABLE_MAIN_SESSION),\n                [\n                    'where' => [\n                        'id = ?' => $sessionId,\n                    ],\n                ]\n            );\n\n            // Check if select query result is not empty\n            if (!empty($rows)) {\n                // Get session description\n                $description = $rows[0]['description'];\n            }\n        }\n\n        return $description;\n    }\n\n    /**\n     * Get a session list filtered by name, description or any of the given extra fields.\n     *\n     * @param string $term                 The term to search\n     * @param array  $extraFieldsToInclude Extra fields to include in the session data\n     *\n     * @return array The list\n     */\n    public static function searchSession($term, $extraFieldsToInclude = [])\n    {\n        $sTable = Database::get_main_table(TABLE_MAIN_SESSION);\n        $extraFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $sfvTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $term = Database::escape_string($term);\n        $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n        if (is_array($extraFieldsToInclude) && count($extraFieldsToInclude) > 0) {\n            $resultData = Database::select('*', $sTable, [\n                'where' => [\n                    \"name LIKE %?% \" => $term,\n                    \" OR description LIKE %?% \" => $term,\n                    \" OR id IN (\n                    SELECT item_id\n                    FROM $sfvTable v INNER JOIN $extraFieldTable e\n                    ON (v.field_id = e.id)\n                    WHERE value LIKE %?% AND extra_field_type = $extraFieldType\n                ) \" => $term,\n                ],\n            ]);\n        } else {\n            $resultData = Database::select('*', $sTable, [\n                'where' => [\n                    \"name LIKE %?% \" => $term,\n                    \"OR description LIKE %?% \" => $term,\n                ],\n            ]);\n\n            return $resultData;\n        }\n\n        foreach ($resultData as $id => &$session) {\n            $session['extra'] = self::getFilteredExtraFields($id, $extraFieldsToInclude);\n        }\n\n        return $resultData;\n    }\n\n    /**\n     * @param int   $sessionId\n     * @param array $extraFieldsToInclude (empty means all)\n     *\n     * @return array\n     */\n    public static function getFilteredExtraFields($sessionId, $extraFieldsToInclude = [])\n    {\n        $extraData = [];\n        $variables = [];\n        $variablePlaceHolders = [];\n\n        foreach ($extraFieldsToInclude as $sessionExtraField) {\n            $variablePlaceHolders[] = \"?\";\n            $variables[] = Database::escape_string($sessionExtraField);\n        }\n\n        $sessionExtraField = new ExtraFieldModel('session');\n        $fieldList = $sessionExtraField->get_all(empty($extraFieldsToInclude) ? [] : [\n            \"variable IN ( \".implode(\", \", $variablePlaceHolders).\" ) \" => $variables,\n        ]);\n\n        if (empty($fieldList)) {\n            return [];\n        }\n\n        $fields = [];\n\n        // Index session fields\n        foreach ($fieldList as $field) {\n            $fields[$field['id']] = $field['variable'];\n        }\n\n        // Get session field values\n        $extra = new ExtraFieldValue('session');\n        $sessionFieldValueList = [];\n        foreach (array_keys($fields) as $fieldId) {\n            $sessionFieldValue = $extra->get_values_by_handler_and_field_id($sessionId, $fieldId);\n            if ($sessionFieldValue != false) {\n                $sessionFieldValueList[$fieldId] = $sessionFieldValue;\n            }\n        }\n\n        foreach ($sessionFieldValueList as $sessionFieldValue) {\n            $extrafieldVariable = $fields[$sessionFieldValue['field_id']];\n            $extrafieldValue = $sessionFieldValue['value'];\n\n            $extraData[] = [\n                'variable' => $extrafieldVariable,\n                'value' => $extrafieldValue,\n            ];\n        }\n\n        return $extraData;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function isValidId($sessionId)\n    {\n        $sessionId = (int) $sessionId;\n        if ($sessionId > 0) {\n            $rows = Database::select(\n                'id',\n                Database::get_main_table(TABLE_MAIN_SESSION),\n                ['where' => ['id = ?' => $sessionId]]\n            );\n            if (!empty($rows)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get list of sessions based on users of a group for a group admin.\n     *\n     * @param int $userId The user id\n     *\n     * @return array\n     */\n    public static function getSessionsFollowedForGroupAdmin($userId)\n    {\n        $sessionList = [];\n        $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sessionUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $userGroup = new UserGroup();\n        $userIdList = $userGroup->getGroupUsersByUser($userId);\n\n        if (empty($userIdList)) {\n            return [];\n        }\n\n        $sql = \"SELECT DISTINCT s.*\n                FROM $sessionTable s\n                INNER JOIN $sessionUserTable sru\n                ON s.id = sru.id_session\n                WHERE\n                    (sru.id_user IN (\".implode(', ', $userIdList).\")\n                    AND sru.relation_type = 0\n                )\";\n\n        if (api_is_multiple_url_enabled()) {\n            $sessionAccessUrlTable = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $accessUrlId = api_get_current_access_url_id();\n\n            if (-1 != $accessUrlId) {\n                $sql = \"SELECT DISTINCT s.*\n                        FROM $sessionTable s\n                        INNER JOIN $sessionUserTable sru ON s.id = sru.id_session\n                        INNER JOIN $sessionAccessUrlTable srau ON s.id = srau.session_id\n                        WHERE\n                            srau.access_url_id = $accessUrlId\n                            AND (\n                                sru.id_user IN (\".implode(', ', $userIdList).\")\n                                AND sru.relation_type = 0\n                            )\";\n            }\n        }\n\n        $result = Database::query($sql);\n        while ($row = Database::fetch_assoc($result)) {\n            $sessionList[] = $row;\n        }\n\n        return $sessionList;\n    }\n\n    /**\n     * @param array $sessionInfo\n     *\n     * @return string\n     */\n    public static function getSessionVisibility($sessionInfo)\n    {\n        switch ($sessionInfo['visibility']) {\n            case 1:\n                return get_lang('ReadOnly');\n            case 2:\n                return get_lang('Visible');\n            case 3:\n                return api_ucfirst(get_lang('Invisible'));\n        }\n    }\n\n    /**\n     * Returns a human readable string.\n     *\n     * @param array $sessionInfo An array with all the session dates\n     * @param bool  $showTime\n     *\n     * @return array\n     */\n    public static function parseSessionDates($sessionInfo, $showTime = false)\n    {\n        $displayDates = self::convertSessionDateToString(\n            $sessionInfo['display_start_date'],\n            $sessionInfo['display_end_date'],\n            $showTime,\n            true\n        );\n        $accessDates = self::convertSessionDateToString(\n            $sessionInfo['access_start_date'],\n            $sessionInfo['access_end_date'],\n            $showTime,\n            true\n        );\n\n        $coachDates = self::convertSessionDateToString(\n            $sessionInfo['coach_access_start_date'],\n            $sessionInfo['coach_access_end_date'],\n            $showTime,\n            true\n        );\n\n        $result = [\n            'access' => $accessDates,\n            'display' => $displayDates,\n            'coach' => $coachDates,\n        ];\n\n        return $result;\n    }\n\n    /**\n     * @param array $sessionInfo Optional\n     *\n     * @return array\n     */\n    public static function setForm(FormValidator $form, array $sessionInfo = [])\n    {\n        $sessionId = 0;\n        $coachInfo = [];\n\n        if (!empty($sessionInfo)) {\n            $sessionId = (int) $sessionInfo['id'];\n            $coachInfo = api_get_user_info($sessionInfo['id_coach']);\n        }\n\n        $categoriesList = self::get_all_session_category();\n        $userInfo = api_get_user_info();\n\n        $categoriesOptions = [\n            '0' => get_lang('None'),\n        ];\n\n        if ($categoriesList != false) {\n            foreach ($categoriesList as $categoryItem) {\n                $categoriesOptions[$categoryItem['id']] = $categoryItem['name'];\n            }\n        }\n\n        // Database Table Definitions\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        $form->addText(\n            'name',\n            get_lang('SessionName'),\n            true,\n            ['maxlength' => 150, 'aria-label' => get_lang('SessionName')]\n        );\n        $form->addRule('name', get_lang('SessionNameAlreadyExists'), 'callback', 'check_session_name');\n\n        if (!api_is_platform_admin() && api_is_teacher()) {\n            $form->addElement(\n                'select',\n                'coach_username',\n                get_lang('CoachName'),\n                [api_get_user_id() => $userInfo['complete_name']],\n                [\n                    'id' => 'coach_username',\n                    'style' => 'width:370px;',\n                ]\n            );\n        } else {\n            $sql = \"SELECT COUNT(1) FROM $tbl_user WHERE status = 1\";\n            $rs = Database::query($sql);\n            $countUsers = (int) Database::result($rs, 0, 0);\n\n            if ($countUsers < 50) {\n                $orderClause = 'ORDER BY ';\n                $orderClause .= api_sort_by_first_name() ? 'firstname, lastname, username' : 'lastname, firstname, username';\n\n                $sql = \"SELECT user_id, lastname, firstname, username\n                        FROM $tbl_user\n                        WHERE status = '1' \".\n                        $orderClause;\n\n                if (api_is_multiple_url_enabled()) {\n                    $userRelAccessUrlTable = Database::get_main_table(\n                        TABLE_MAIN_ACCESS_URL_REL_USER\n                    );\n                    $accessUrlId = api_get_current_access_url_id();\n                    if ($accessUrlId != -1) {\n                        $sql = \"SELECT user.user_id, username, lastname, firstname\n                        FROM $tbl_user user\n                        INNER JOIN $userRelAccessUrlTable url_user\n                        ON (url_user.user_id = user.user_id)\n                        WHERE\n                            access_url_id = $accessUrlId AND\n                            status = 1 \"\n                            .$orderClause;\n                    }\n                }\n\n                $result = Database::query($sql);\n                $coachesList = Database::store_result($result);\n                $coachesOptions = [];\n                foreach ($coachesList as $coachItem) {\n                    $coachesOptions[$coachItem['user_id']] =\n                        api_get_person_name($coachItem['firstname'], $coachItem['lastname']).' ('.$coachItem['username'].')';\n                }\n\n                $form->addElement(\n                    'select',\n                    'coach_username',\n                    get_lang('CoachName'),\n                    $coachesOptions,\n                    [\n                        'id' => 'coach_username',\n                        'style' => 'width:370px;',\n                    ]\n                );\n            } else {\n                $form->addElement(\n                    'select_ajax',\n                    'coach_username',\n                    get_lang('CoachName'),\n                    $coachInfo ? [$coachInfo['id'] => $coachInfo['complete_name_with_username']] : [],\n                    [\n                        'url' => api_get_path(WEB_AJAX_PATH).'session.ajax.php?a=search_general_coach',\n                        'width' => '100%',\n                        'id' => 'coach_username',\n                    ]\n                );\n            }\n        }\n\n        $form->addRule('coach_username', get_lang('ThisFieldIsRequired'), 'required');\n        $form->addHtml('<div id=\"ajax_list_coachs\"></div>');\n\n        $form->addButtonAdvancedSettings('advanced_params');\n        $form->addElement('html', '<div id=\"advanced_params_options\" style=\"display:none\">');\n\n        if (empty($sessionId)) {\n            $form->addSelectAjax(\n                'session_template',\n                get_lang('SessionTemplate'),\n                [],\n                ['url' => api_get_path(WEB_AJAX_PATH).'session.ajax.php?a=search_template_session', 'id' => 'system_template']\n            );\n        }\n\n        $form->addSelect(\n            'session_category',\n            get_lang('SessionCategory'),\n            $categoriesOptions,\n            [\n                'id' => 'session_category',\n            ]\n        );\n\n        if (api_get_configuration_value('allow_session_status')) {\n            $statusList = self::getStatusList();\n            $form->addSelect(\n                'status',\n                get_lang('SessionStatus'),\n                $statusList,\n                [\n                    'id' => 'status',\n                ]\n            );\n        }\n\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Minimal',\n            ]\n        );\n\n        $form->addElement('checkbox', 'show_description', null, get_lang('ShowDescription'));\n\n        $visibilityGroup = [];\n        $visibilityGroup[] = $form->createElement(\n            'select',\n            'session_visibility',\n            null,\n            [\n                SESSION_VISIBLE_READ_ONLY => get_lang('SessionReadOnly'),\n                SESSION_VISIBLE => get_lang('SessionAccessible'),\n                SESSION_INVISIBLE => api_ucfirst(get_lang('SessionNotAccessible')),\n            ]\n        );\n        $form->addGroup(\n            $visibilityGroup,\n            'visibility_group',\n            get_lang('SessionVisibility'),\n            null,\n            false\n        );\n\n        $options = [\n            0 => get_lang('ByDuration'),\n            1 => get_lang('ByDates'),\n        ];\n\n        $form->addSelect('access', get_lang('Access'), $options, [\n            'onchange' => 'accessSwitcher()',\n            'id' => 'access',\n        ]);\n\n        $form->addHtml('<div id=\"duration_div\" style=\"display:none\">');\n        $form->addElement(\n            'number',\n            'duration',\n            [\n                get_lang('SessionDurationTitle'),\n                get_lang('SessionDurationDescription'),\n            ],\n            [\n                'maxlength' => 50,\n            ]\n        );\n\n        $form->addHtml('</div>');\n        $form->addHtml('<div id=\"date_fields\" style=\"display:none\">');\n\n        // Dates\n        $form->addDateTimePicker(\n            'access_start_date',\n            [get_lang('SessionStartDate'), get_lang('SessionStartDateComment')],\n            ['id' => 'access_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'access_end_date',\n            [get_lang('SessionEndDate'), get_lang('SessionEndDateComment')],\n            ['id' => 'access_end_date']\n        );\n\n        $form->addRule(\n            ['access_start_date', 'access_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addDateTimePicker(\n            'display_start_date',\n            [\n                get_lang('SessionDisplayStartDate'),\n                get_lang('SessionDisplayStartDateComment'),\n            ],\n            ['id' => 'display_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'display_end_date',\n            [\n                get_lang('SessionDisplayEndDate'),\n                get_lang('SessionDisplayEndDateComment'),\n            ],\n            ['id' => 'display_end_date']\n        );\n\n        $form->addRule(\n            ['display_start_date', 'display_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addDateTimePicker(\n            'coach_access_start_date',\n            [\n                get_lang('SessionCoachStartDate'),\n                get_lang('SessionCoachStartDateComment'),\n            ],\n            ['id' => 'coach_access_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'coach_access_end_date',\n            [\n                get_lang('SessionCoachEndDate'),\n                get_lang('SessionCoachEndDateComment'),\n            ],\n            ['id' => 'coach_access_end_date']\n        );\n\n        $form->addRule(\n            ['coach_access_start_date', 'coach_access_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addElement('html', '</div>');\n\n        $form->addCheckBox(\n            'send_subscription_notification',\n            [\n                get_lang('SendSubscriptionNotification'),\n                get_lang('SendAnEmailWhenAUserBeingSubscribed'),\n            ]\n        );\n\n        // Extra fields\n        $setExtraFieldsMandatory = api_get_configuration_value('session_creation_form_set_extra_fields_mandatory');\n        $fieldsRequired = [];\n        if (false !== $setExtraFieldsMandatory && !empty($setExtraFieldsMandatory['fields'])) {\n            $fieldsRequired = $setExtraFieldsMandatory['fields'];\n        }\n        $extra_field = new ExtraFieldModel('session');\n        $extra = $extra_field->addElements(\n            $form,\n            $sessionId,\n            [],\n            false,\n            false,\n            [],\n            [],\n            [],\n            false,\n            false,\n            [],\n            [],\n            false,\n            [],\n            $fieldsRequired\n        );\n\n        $form->addElement('html', '</div>');\n\n        $js = $extra['jquery_ready_content'];\n\n        return ['js' => $js];\n    }\n\n    /**\n     * Gets the number of rows in the session table filtered through the given\n     * array of parameters.\n     *\n     * @param array Array of options/filters/keys\n     *\n     * @return int The number of rows, or false on wrong param\n     * @assert ('a') === false\n     */\n    public static function get_count_admin_complete($options = [])\n    {\n        if (!is_array($options)) {\n            return false;\n        }\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sessionCourseUserTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $where = 'WHERE 1 = 1 ';\n        $user_id = api_get_user_id();\n\n        if (api_is_session_admin() &&\n            'false' == api_get_setting('allow_session_admins_to_see_all_sessions')\n        ) {\n            $where .= \" WHERE s.session_admin_id = $user_id \";\n        }\n\n        $extraFieldTables = '';\n        if (!empty($options['where'])) {\n            $options['where'] = str_replace('course_title', 'c.title', $options['where']);\n            $options['where'] = str_replace(\"( session_active = '0' )\", '1=1', $options['where']);\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $options['where']\n            );\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $options['where']\n            );\n\n            if (!empty($options['extra'])) {\n                $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n                $options['where'] = str_replace('AND', 'OR', $options['where']);\n\n                foreach ($options['extra'] as $extra) {\n                    $options['where'] = str_replace(\n                        $extra['field'],\n                        'fv.field_id = '.$extra['id'].' AND fvo.option_value',\n                        $options['where']\n                    );\n                    $extraFieldTables = \"$tbl_session_field_values fv, $tbl_session_field_options fvo, \";\n                }\n            }\n            $where .= ' AND '.$options['where'];\n        }\n\n        $today = api_get_utc_datetime();\n        $query_rows = \"SELECT count(*) as total_rows, c.title as course_title, s.name,\n                        IF (\n                            (s.access_start_date <= '$today' AND '$today' < s.access_end_date) OR\n                            (s.access_start_date = '0000-00-00 00:00:00' AND s.access_end_date = '0000-00-00 00:00:00' ) OR\n                            (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n                            (s.access_start_date <= '$today' AND ('0000-00-00 00:00:00' = s.access_end_date OR s.access_end_date IS NULL )) OR\n                            ('$today' < s.access_end_date AND ('0000-00-00 00:00:00' = s.access_start_date OR s.access_start_date IS NULL) )\n                        , 1, 0) as session_active\n                       FROM $extraFieldTables $tbl_session s\n                       LEFT JOIN  $tbl_session_category sc\n                       ON s.session_category_id = sc.id\n                       INNER JOIN $tbl_user u\n                       ON s.id_coach = u.id\n                       INNER JOIN $sessionCourseUserTable scu\n                       ON s.id = scu.session_id\n                       INNER JOIN $courseTable c\n                       ON c.id = scu.c_id\n                       $where \";\n\n        if (api_is_multiple_url_enabled()) {\n            $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if (-1 != $access_url_id) {\n                $where .= \" AND ar.access_url_id = $access_url_id \";\n                $query_rows = \"SELECT count(*) as total_rows\n                               FROM $tbl_session s\n                               LEFT JOIN  $tbl_session_category sc\n                               ON s.session_category_id = sc.id\n                               INNER JOIN $tbl_user u\n                               ON s.id_coach = u.id\n                               INNER JOIN $table_access_url_rel_session ar\n                               ON ar.session_id = s.id $where \";\n            }\n        }\n\n        $result = Database::query($query_rows);\n        $num = 0;\n        if (Database::num_rows($result)) {\n            $rows = Database::fetch_array($result);\n            $num = $rows['total_rows'];\n        }\n\n        return $num;\n    }\n\n    /**\n     * @param string $listType\n     * @param array  $extraFields\n     *\n     * @return array\n     */\n    public static function getGridColumns(\n        $listType = 'all',\n        $extraFields = [],\n        $addExtraFields = true\n    ) {\n        $showCount = api_get_configuration_value('session_list_show_count_users');\n        // Column config\n        $operators = ['cn', 'nc'];\n        $date_operators = ['gt', 'ge', 'lt', 'le'];\n\n        switch ($listType) {\n            case 'my_space':\n                $columns = [\n                    get_lang('Title'),\n                    get_lang('Date'),\n                    get_lang('NbCoursesPerSession'),\n                    get_lang('NbStudentPerSession'),\n                    get_lang('Details'),\n                ];\n\n                $columnModel = [\n                    ['name' => 'name', 'index' => 'name', 'width' => '255', 'align' => 'left'],\n                    ['name' => 'date', 'index' => 'access_start_date', 'width' => '150', 'align' => 'left'],\n                    [\n                        'name' => 'course_per_session',\n                        'index' => 'course_per_session',\n                        'width' => '150',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'student_per_session',\n                        'index' => 'student_per_session',\n                        'width' => '100',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'actions',\n                        'index' => 'actions',\n                        'width' => '100',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                ];\n                break;\n            case 'all':\n            case 'active':\n            case 'close':\n                $columns = [\n                    '#',\n                    get_lang('Name'),\n                    get_lang('Category'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Visibility'),\n                ];\n\n                $columnModel = [\n                    [\n                        'name' => 'id',\n                        'index' => 's.id',\n                        'width' => '160',\n                        'hidden' => 'true',\n                    ],\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '160',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'category_name',\n                        'index' => 'category_name',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_today',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_one_month',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                ];\n\n                if ($showCount) {\n                    $columns[] = get_lang('Users');\n                    $columnModel[] = [\n                        'name' => 'users',\n                        'index' => 'users',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n\n                    // ofaj\n                    $columns[] = get_lang('Teachers');\n                    $columnModel[] = [\n                        'name' => 'teachers',\n                        'index' => 'teachers',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $columns[] = get_lang('SessionStatus');\n                    $list = self::getStatusList();\n                    $listToString = '';\n                    foreach ($list as $statusId => $status) {\n                        $listToString .= $statusId.':'.$status.';';\n                    }\n\n                    $columnModel[] = [\n                        'name' => 'status',\n                        'index' => 'status',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => $listToString,\n                        ],\n                    ];\n                }\n                break;\n            case 'complete':\n                $columns = [\n                    get_lang('Name'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Coach'),\n                    get_lang('Status'),\n                    get_lang('Visibility'),\n                    get_lang('CourseTitle'),\n                ];\n                $columnModel = [\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '200',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['dataInit' => 'date_pick_today', 'sopt' => $date_operators],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['dataInit' => 'date_pick_one_month', 'sopt' => $date_operators],\n                    ],\n                    [\n                        'name' => 'coach_name',\n                        'index' => 'coach_name',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'false',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'session_active',\n                        'index' => 'session_active',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => '1:'.get_lang('Active').';0:'.get_lang('Inactive'),\n                        ],\n                        // for the top bar\n                        'editoptions' => [\n                            'value' => '\" \":'.get_lang('All').';1:'.get_lang('Active').';0:'.get_lang(\n                                    'Inactive'\n                                ),\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'course_title',\n                        'index' => 'course_title',\n                        'width' => '50',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'searchoptions' => ['searchhidden' => 'true', 'sopt' => $operators],\n                    ],\n                ];\n\n                break;\n\n            case 'custom':\n                $columns = [\n                    '#',\n                    get_lang('Name'),\n                    get_lang('Category'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Visibility'),\n                ];\n                $columnModel = [\n                    [\n                        'name' => 'id',\n                        'index' => 's.id',\n                        'width' => '160',\n                        'hidden' => 'true',\n                    ],\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '160',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'category_name',\n                        'index' => 'category_name',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_today',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_one_month',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                ];\n\n                if ($showCount) {\n                    $columns[] = get_lang('Users');\n                    $columnModel[] = [\n                        'name' => 'users',\n                        'index' => 'users',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n\n                    // ofaj\n                    $columns[] = get_lang('Teachers');\n                    $columnModel[] = [\n                        'name' => 'teachers',\n                        'index' => 'teachers',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $columns[] = get_lang('SessionStatus');\n                    $list = self::getStatusList();\n                    $listToString = '';\n                    foreach ($list as $statusId => $status) {\n                        $listToString .= $statusId.':'.$status.';';\n                    }\n\n                    $columnModel[] = [\n                        'name' => 'status',\n                        'index' => 'status',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => $listToString,\n                        ],\n                    ];\n                }\n\n                break;\n        }\n\n        if (!empty($extraFields)) {\n            foreach ($extraFields as $field) {\n                $columns[] = $field['display_text'];\n                $columnModel[] = [\n                    'name' => $field['variable'],\n                    'index' => $field['variable'],\n                    'width' => '80',\n                    'align' => 'center',\n                    'search' => 'false',\n                ];\n            }\n        }\n\n        // Inject extra session fields\n        $rules = [];\n        if ($addExtraFields) {\n            $sessionField = new ExtraFieldModel('session');\n            $rules = $sessionField->getRules($columns, $columnModel);\n        }\n\n        if (!in_array('actions', array_column($columnModel, 'name'))) {\n            $columnModel[] = [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '80',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n                'search' => 'false',\n            ];\n            $columns[] = get_lang('Actions');\n        }\n\n        $columnName = [];\n        foreach ($columnModel as $col) {\n            $columnName[] = $col['name'];\n        }\n\n        $return = [\n            'columns' => $columns,\n            'column_model' => $columnModel,\n            'rules' => $rules,\n            'simple_column_name' => $columnName,\n        ];\n\n        return $return;\n    }\n\n    /**\n     * Converts all dates sent through the param array (given form) to correct dates with timezones.\n     *\n     * @param array The dates The same array, with times converted\n     * @param bool $applyFormat Whether apply the DATE_TIME_FORMAT_SHORT format for sessions\n     *\n     * @return array The same array, with times converted\n     */\n    public static function convert_dates_to_local($params, $applyFormat = false)\n    {\n        if (!is_array($params)) {\n            return false;\n        }\n        $params['display_start_date'] = api_get_local_time($params['display_start_date'], null, null, true);\n        $params['display_end_date'] = api_get_local_time($params['display_end_date'], null, null, true);\n\n        $params['access_start_date'] = api_get_local_time($params['access_start_date'], null, null, true);\n        $params['access_end_date'] = api_get_local_time($params['access_end_date'], null, null, true);\n\n        $params['coach_access_start_date'] = isset($params['coach_access_start_date']) ? api_get_local_time($params['coach_access_start_date'], null, null, true) : null;\n        $params['coach_access_end_date'] = isset($params['coach_access_end_date']) ? api_get_local_time($params['coach_access_end_date'], null, null, true) : null;\n\n        if ($applyFormat) {\n            if (isset($params['display_start_date'])) {\n                $params['display_start_date'] = api_format_date($params['display_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['display_end_date'])) {\n                $params['display_end_date'] = api_format_date($params['display_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['access_start_date'])) {\n                $params['access_start_date'] = api_format_date($params['access_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['access_end_date'])) {\n                $params['access_end_date'] = api_format_date($params['access_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['coach_access_start_date'])) {\n                $params['coach_access_start_date'] = api_format_date($params['coach_access_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['coach_access_end_date'])) {\n                $params['coach_access_end_date'] = api_format_date($params['coach_access_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n        }\n\n        return $params;\n    }\n\n    /**\n     * Gets the admin session list callback of the session/session_list.php\n     * page with all user/details in the right fomat.\n     *\n     * @param array $options\n     *\n     * @return array Array of rows results\n     * @asset ('a') === false\n     */\n    public static function get_sessions_admin_complete($options = [])\n    {\n        if (!is_array($options)) {\n            return false;\n        }\n\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        $extraFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tbl_session_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $where = 'WHERE 1 = 1 ';\n        $user_id = api_get_user_id();\n\n        if (!api_is_platform_admin()) {\n            if (api_is_session_admin() &&\n                'false' == api_get_setting('allow_session_admins_to_manage_all_sessions')\n            ) {\n                $where .= \" AND s.session_admin_id = $user_id \";\n            }\n        }\n\n        $coach_name = \" CONCAT(u.lastname , ' ', u.firstname) as coach_name \";\n        if (api_is_western_name_order()) {\n            $coach_name = \" CONCAT(u.firstname, ' ', u.lastname) as coach_name \";\n        }\n\n        $today = api_get_utc_datetime();\n        $injectExtraFields = null;\n        $extra_fields_info = [];\n\n        //for now only sessions\n        $extra_field = new ExtraFieldModel('session');\n        $double_fields = [];\n        $extra_field_option = new ExtraFieldOption('session');\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                foreach ($extra_fields as $extra) {\n                    $injectExtraFields .= \" IF (fv.field_id = {$extra['id']}, fvo.option_display_text, NULL ) as {$extra['field']} , \";\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $extra_field->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n\n                    if (ExtraFieldModel::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extra_field_option->get_field_options_by_field(\n                $double['id'],\n                true\n            );\n            $options_by_double['extra_'.$double['field_variable']] = $my_options;\n        }\n\n        //sc.name as category_name,\n        $select = \"\n                SELECT * FROM (\n                    SELECT DISTINCT\n                        IF (\n                            (s.access_start_date <= '$today' AND '$today' < s.access_end_date) OR\n                            (s.access_start_date = '0000-00-00 00:00:00' AND s.access_end_date = '0000-00-00 00:00:00' ) OR\n                            (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n                            (s.access_start_date <= '$today' AND ('0000-00-00 00:00:00' = s.access_end_date OR s.access_end_date IS NULL )) OR\n                            ('$today' < s.access_end_date AND ('0000-00-00 00:00:00' = s.access_start_date OR s.access_start_date IS NULL) )\n                        , 1, 0) as session_active,\n                s.name,\n                s.nbr_courses,\n                s.nbr_users,\n                s.display_start_date,\n                s.display_end_date,\n                $coach_name,\n                access_start_date,\n                access_end_date,\n                s.visibility,\n                u.id as user_id,\n                $injectExtraFields\n                c.title as course_title,\n                s.id \";\n\n        if (!empty($options['where'])) {\n            if (!empty($options['extra'])) {\n                $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n                $options['where'] = str_replace('AND', 'OR', $options['where']);\n                foreach ($options['extra'] as $extra) {\n                    $options['where'] = str_replace($extra['field'], 'fv.field_id = '.$extra['id'].' AND fvo.option_value', $options['where']);\n                }\n            }\n            $options['where'] = str_replace('course_title', 'c.title', $options['where']);\n            $options['where'] = str_replace(\"( session_active = '0' )\", '1=1', $options['where']);\n            $options['where'] = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $options['where']\n            );\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $options['where']\n            );\n\n            $where .= ' AND '.$options['where'];\n        }\n\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        $query = \"$select FROM $tbl_session s\n                    LEFT JOIN $tbl_session_field_values fv\n                    ON (fv.item_id = s.id)\n                    LEFT JOIN $extraFieldTable f\n                    ON f.id = fv.field_id\n                    LEFT JOIN $tbl_session_field_options fvo\n                    ON (fv.field_id = fvo.field_id)\n                    LEFT JOIN $tbl_session_rel_course src\n                    ON (src.session_id = s.id)\n                    LEFT JOIN $tbl_course c\n                    ON (src.c_id = c.id)\n                    LEFT JOIN $tbl_session_category sc\n                    ON (s.session_category_id = sc.id)\n                    INNER JOIN $tbl_user u\n                    ON (s.id_coach = u.id)\n                    $where\n                    $limit\n        \";\n\n        if (api_is_multiple_url_enabled()) {\n            $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if (-1 != $access_url_id) {\n                $query = \"$select\n                    FROM $tbl_session s\n                    LEFT JOIN $tbl_session_field_values fv\n                    ON (fv.item_id = s.id)\n                    LEFT JOIN $tbl_session_field_options fvo\n                    ON (fv.field_id = fvo.field_id)\n                    LEFT JOIN $tbl_session_rel_course src\n                    ON (src.session_id = s.id)\n                    LEFT JOIN $tbl_course c\n                    ON (src.c_id = c.id)\n                    LEFT JOIN $tbl_session_category sc\n                    ON (s.session_category_id = sc.id)\n                    INNER JOIN $tbl_user u\n                    ON (s.id_coach = u.id)\n                    INNER JOIN $table_access_url_rel_session ar\n                    ON (ar.session_id = s.id AND ar.access_url_id = $access_url_id)\n                    $where\n                    $limit\n                \";\n            }\n        }\n\n        $query .= ') AS s';\n\n        if (!empty($options['order'])) {\n            $query .= ' ORDER BY '.$options['order'];\n        }\n\n        $result = Database::query($query);\n\n        $acceptIcon = Display::return_icon(\n            'accept.png',\n            get_lang('Active'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $errorIcon = Display::return_icon(\n            'error.png',\n            get_lang('Inactive'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $formatted_sessions = [];\n        if (Database::num_rows($result)) {\n            $sessions = Database::store_result($result, 'ASSOC');\n            foreach ($sessions as $session) {\n                $session_id = $session['id'];\n                $session['name'] = Display::url($session['name'], \"resume_session.php?id_session=\".$session['id']);\n                $session['coach_name'] = Display::url($session['coach_name'], \"user_information.php?user_id=\".$session['user_id']);\n                if (1 == $session['session_active']) {\n                    $session['session_active'] = $acceptIcon;\n                } else {\n                    $session['session_active'] = $errorIcon;\n                }\n\n                $session = self::convert_dates_to_local($session);\n\n                switch ($session['visibility']) {\n                    case SESSION_VISIBLE_READ_ONLY: //1\n                        $session['visibility'] = get_lang('ReadOnly');\n                        break;\n                    case SESSION_VISIBLE:           //2\n                    case SESSION_AVAILABLE:         //4\n                        $session['visibility'] = get_lang('Visible');\n                        break;\n                    case SESSION_INVISIBLE:         //3\n                        $session['visibility'] = api_ucfirst(get_lang('Invisible'));\n                        break;\n                }\n\n                // Cleaning double selects\n                foreach ($session as $key => &$value) {\n                    if (isset($options_by_double[$key]) || isset($options_by_double[$key.'_second'])) {\n                        $options = explode('::', $value);\n                    }\n                    $original_key = $key;\n\n                    if (strpos($key, '_second') === false) {\n                    } else {\n                        $key = str_replace('_second', '', $key);\n                    }\n\n                    if (isset($options_by_double[$key])) {\n                        if (isset($options[0])) {\n                            if (isset($options_by_double[$key][$options[0]])) {\n                                if (strpos($original_key, '_second') === false) {\n                                    $value = $options_by_double[$key][$options[0]]['option_display_text'];\n                                } else {\n                                    $value = $options_by_double[$key][$options[1]]['option_display_text'];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Magic filter\n                if (isset($formatted_sessions[$session_id])) {\n                    $formatted_sessions[$session_id] = self::compareArraysToMerge(\n                        $formatted_sessions[$session_id],\n                        $session\n                    );\n                } else {\n                    $formatted_sessions[$session_id] = $session;\n                }\n            }\n        }\n\n        return $formatted_sessions;\n    }\n\n    /**\n     * Compare two arrays.\n     *\n     * @param array $array1\n     * @param array $array2\n     *\n     * @return array\n     */\n    public static function compareArraysToMerge($array1, $array2)\n    {\n        if (empty($array2)) {\n            return $array1;\n        }\n        foreach ($array1 as $key => $item) {\n            if (!isset($array1[$key])) {\n                //My string is empty try the other one\n                if (isset($array2[$key]) && !empty($array2[$key])) {\n                    $array1[$key] = $array2[$key];\n                }\n            }\n        }\n\n        return $array1;\n    }\n\n    /**\n     * Get link to the admin page for this session.\n     *\n     * @param int $id Session ID\n     *\n     * @return mixed URL to the admin page to manage the session, or false on error\n     */\n    public static function getAdminPath($id)\n    {\n        $id = (int) $id;\n        $session = self::fetch($id);\n        if (empty($session)) {\n            return false;\n        }\n\n        return api_get_path(WEB_CODE_PATH).'session/resume_session.php?id_session='.$id;\n    }\n\n    /**\n     * Get link to the user page for this session.\n     * If a course is provided, build the link to the course.\n     *\n     * @param int $id       Session ID\n     * @param int $courseId Course ID (optional) in case the link has to send straight to the course\n     *\n     * @return mixed URL to the page to use the session, or false on error\n     */\n    public static function getPath($id, $courseId = 0)\n    {\n        $id = (int) $id;\n        $session = self::fetch($id);\n        if (empty($session)) {\n            return false;\n        }\n        if (empty($courseId)) {\n            return api_get_path(WEB_CODE_PATH).'session/index.php?session_id='.$id;\n        } else {\n            $courseInfo = api_get_course_info_by_id($courseId);\n            if ($courseInfo) {\n                return $courseInfo['course_public_url'].'?id_session='.$id;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2\n     * for course where user is coach\n     * i.e. coach for the course or\n     * main coach for a session the course is in\n     * for a session category (or woth no session category if empty).\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getSessionCourseForUser($userId)\n    {\n        // list of COURSES where user is COURSE session coach\n        $listCourseCourseCoachSession = self::getCoursesForCourseSessionCoach($userId);\n        // list of courses where user is MAIN session coach\n        $listCourseMainCoachSession = self::getCoursesForMainSessionCoach($userId);\n        // merge these 2 array\n        $listResCourseSession = $listCourseCourseCoachSession;\n        foreach ($listCourseMainCoachSession as $courseId2 => $listSessionId2) {\n            if (isset($listResCourseSession[$courseId2])) {\n                // if sessionId array exists for this course\n                // same courseId, merge the list of session\n                foreach ($listCourseMainCoachSession[$courseId2] as $i => $sessionId2) {\n                    if (!in_array($sessionId2, $listResCourseSession[$courseId2])) {\n                        $listResCourseSession[$courseId2][] = $sessionId2;\n                    }\n                }\n            } else {\n                $listResCourseSession[$courseId2] = $listSessionId2;\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2.\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getCoursesForCourseSessionCoach($userId)\n    {\n        $userId = (int) $userId;\n        $listResCourseSession = [];\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tblSessionRelCourseRelUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT session_id, c_id, c.id\n                FROM $tblSessionRelCourseRelUser srcru\n                LEFT JOIN $tblCourse c\n                ON c.id = srcru.c_id\n                WHERE\n                    srcru.user_id = $userId AND\n                    srcru.status = 2\";\n\n        $res = Database::query($sql);\n\n        while ($data = Database::fetch_assoc($res)) {\n            if (api_get_session_visibility($data['session_id'])) {\n                if (!isset($listResCourseSession[$data['id']])) {\n                    $listResCourseSession[$data['id']] = [];\n                }\n                $listResCourseSession[$data['id']][] = $data['session_id'];\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2.\n     *\n     * @param $userId\n     *\n     * @return array\n     */\n    public static function getCoursesForMainSessionCoach($userId)\n    {\n        $userId = (int) $userId;\n        $listResCourseSession = [];\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        // list of SESSION where user is session coach\n        $sql = \"SELECT id FROM $tblSession\n                WHERE id_coach = \".$userId;\n        $res = Database::query($sql);\n\n        while ($data = Database::fetch_assoc($res)) {\n            $sessionId = $data['id'];\n            $listCoursesInSession = self::getCoursesInSession($sessionId);\n            foreach ($listCoursesInSession as $i => $courseId) {\n                if (api_get_session_visibility($sessionId)) {\n                    if (!isset($listResCourseSession[$courseId])) {\n                        $listResCourseSession[$courseId] = [];\n                    }\n                    $listResCourseSession[$courseId][] = $sessionId;\n                }\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an array of course_id used in session $sessionId.\n     *\n     * @param $sessionId\n     *\n     * @return array\n     */\n    public static function getCoursesInSession($sessionId)\n    {\n        if (empty($sessionId)) {\n            return [];\n        }\n\n        $tblSessionRelCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        // list of course in this session\n        $sql = \"SELECT session_id, c.id\n                FROM $tblSessionRelCourse src\n                LEFT JOIN $tblCourse c\n                ON c.id = src.c_id\n                WHERE session_id = \".intval($sessionId);\n        $res = Database::query($sql);\n\n        $listResultsCourseId = [];\n        while ($data = Database::fetch_assoc($res)) {\n            $listResultsCourseId[] = $data['id'];\n        }\n\n        return $listResultsCourseId;\n    }\n\n    /**\n     * Return an array of courses in session for user\n     * and for each courses the list of session that use this course for user.\n     *\n     * [0] => array\n     *      userCatId\n     *      userCatTitle\n     *      courseInUserCatList\n     *          [0] => array\n     *              courseId\n     *              title\n     *              courseCode\n     *              sessionCatList\n     *                  [0] => array\n     *                      catSessionId\n     *                      catSessionName\n     *                      sessionList\n     *                          [0] => array\n     *                              sessionId\n     *                              sessionName\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getNamedSessionCourseForCoach($userId)\n    {\n        $listResults = [];\n        $listCourseSession = self::getSessionCourseForUser($userId);\n        foreach ($listCourseSession as $courseId => $listSessionId) {\n            // Course info\n            $courseInfo = api_get_course_info_by_id($courseId);\n            $listOneCourse = [];\n            $listOneCourse['courseId'] = $courseId;\n            $listOneCourse['title'] = $courseInfo['title'];\n            //$listOneCourse['courseCode'] = $courseInfo['code'];\n            $listOneCourse['course'] = $courseInfo;\n            $listOneCourse['sessionCatList'] = [];\n            $listCat = [];\n            foreach ($listSessionId as $i => $sessionId) {\n                // here we got all session for this course\n                // lets check there session categories\n                $sessionInfo = self::fetch($sessionId);\n                $catId = $sessionInfo['session_category_id'];\n                if (!isset($listCat[$catId])) {\n                    $listCatInfo = self::get_session_category($catId);\n                    if ($listCatInfo) {\n                        $listCat[$catId] = [];\n                        $listCat[$catId]['catSessionId'] = $catId;\n                        $listCat[$catId]['catSessionName'] = $listCatInfo['name'];\n                        $listCat[$catId]['sessionList'] = [];\n                    }\n                }\n                $listSessionInfo = self::fetch($sessionId);\n                $listSessionIdName = [\n                    'sessionId' => $sessionId,\n                    'sessionName' => $listSessionInfo['name'],\n                ];\n                $listCat[$catId]['sessionList'][] = $listSessionIdName;\n            }\n            // sort $listCat by catSessionName\n            usort($listCat, 'self::compareBySessionName');\n            // in each catSession sort sessionList by sessionName\n            foreach ($listCat as $i => $listCatSessionInfo) {\n                $listSessionList = $listCatSessionInfo['sessionList'];\n                usort($listSessionList, 'self::compareCatSessionInfo');\n                $listCat[$i]['sessionList'] = $listSessionList;\n            }\n\n            $listOneCourse['sessionCatList'] = $listCat;\n\n            // user course category\n            $courseCategory = CourseManager::getUserCourseCategoryForCourse(\n                $userId,\n                $courseId\n            );\n\n            $userCatTitle = '';\n            $userCatId = 0;\n            if ($courseCategory) {\n                $userCatId = $courseCategory['user_course_cat'];\n                $userCatTitle = $courseCategory['title'];\n            }\n\n            $listResults[$userCatId]['courseInUserCategoryId'] = $userCatId;\n            $listResults[$userCatId]['courseInUserCategoryTitle'] = $userCatTitle;\n            $listResults[$userCatId]['courseInUserCatList'][] = $listOneCourse;\n        }\n\n        // sort by user course cat\n        uasort($listResults, 'self::compareByUserCourseCat');\n\n        // sort by course title\n        foreach ($listResults as $userCourseCatId => $tabCoursesInCat) {\n            $courseInUserCatList = $tabCoursesInCat['courseInUserCatList'];\n            uasort($courseInUserCatList, 'self::compareByCourse');\n            $listResults[$userCourseCatId]['courseInUserCatList'] = $courseInUserCatList;\n        }\n\n        return $listResults;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function searchCourseInSessionsFromUser($userId, $courseId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $userId = (int) $userId;\n        $courseId = (int) $courseId;\n        if (empty($userId) || empty($courseId)) {\n            return [];\n        }\n\n        $sql = \"SELECT * FROM $table\n                WHERE c_id = $courseId AND user_id = $userId\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Subscribe and redirect to session after inscription.\n     */\n    public static function redirectToSession()\n    {\n        $sessionId = (int) ChamiloSession::read('session_redirect');\n        $onlyOneCourseSessionToRedirect = ChamiloSession::read('only_one_course_session_redirect');\n        if ($sessionId) {\n            $sessionInfo = api_get_session_info($sessionId);\n            if (!empty($sessionInfo)) {\n                $userId = api_get_user_id();\n                $response = self::isUserSubscribedAsStudent($sessionId, $userId);\n                if ($response) {\n                    $urlToRedirect = api_get_path(WEB_CODE_PATH).'session/index.php?session_id='.$sessionId;\n                    if (!empty($onlyOneCourseSessionToRedirect)) {\n                        $urlToRedirect = api_get_path(WEB_PATH).\n                            'courses/'.$onlyOneCourseSessionToRedirect.'/index.php?id_session='.$sessionId;\n                    }\n\n                    header('Location: '.$urlToRedirect);\n                    exit;\n                }\n            }\n        }\n    }\n\n    /**\n     * @return int\n     */\n    public static function getCountUsersInCourseSession(Course $course, Session $session)\n    {\n        $urlId = api_get_current_access_url_id();\n\n        return Database::getManager()\n            ->createQuery(\"\n                SELECT COUNT(scu)\n                FROM ChamiloCoreBundle:SessionRelCourseRelUser scu\n                INNER JOIN ChamiloCoreBundle:SessionRelUser su\n                    WITH scu.user = su.user\n                    AND scu.session = su.session\n                INNER JOIN ChamiloCoreBundle:AccessUrlRelUser a\n                    WITH a.user = su.user\n                WHERE\n                    scu.course = :course AND\n                    su.relationType <> :relationType AND\n                    scu.session = :session AND\n                    a.portal = :url\n            \")\n            ->setParameters([\n                'course' => $course->getId(),\n                'relationType' => SESSION_RELATION_TYPE_RRHH,\n                'session' => $session->getId(),\n                'url' => $urlId,\n            ])\n            ->getSingleScalarResult();\n    }\n\n    /**\n     * Get course IDs where user in not subscribed in session.\n     *\n     * @return array\n     */\n    public static function getAvoidedCoursesInSession(User $user, Session $session)\n    {\n        $courseIds = [];\n\n        /** @var SessionRelCourse $sessionCourse */\n        foreach ($session->getCourses() as $sessionCourse) {\n            /** @var Course $course */\n            $course = $sessionCourse->getCourse();\n\n            if ($session->getUserInCourse($user, $course)->count()) {\n                continue;\n            }\n\n            $courseIds[] = $course->getId();\n        }\n\n        return $courseIds;\n    }\n\n    /**\n     * @param int             $userId\n     * @param int             $sessionId\n     * @param ExtraFieldValue $extraFieldValue\n     * @param string          $collapsableLink\n     *\n     * @return array\n     */\n    public static function getCollapsableData($userId, $sessionId, $extraFieldValue, $collapsableLink)\n    {\n        $collapsed = 0;\n\n        // Get default collapsed value in extra field\n        $value = $extraFieldValue->get_values_by_handler_and_field_variable($sessionId, 'collapsed');\n        if (!empty($value) && isset($value['value'])) {\n            $collapsed = $value['value'];\n        }\n\n        $userRelSession = self::getUserSession($userId, $sessionId);\n\n        if ($userRelSession) {\n            if (isset($userRelSession['collapsed']) && '' != $userRelSession['collapsed']) {\n                $collapsed = $userRelSession['collapsed'];\n            }\n        } else {\n            return ['collapsed' => $collapsed, 'collapsable_link' => '&nbsp;'];\n        }\n\n        $link = $collapsableLink.'&session_id='.$sessionId.'&value=1';\n        $image = '<i class=\"fa fa-folder-open\"></i>';\n        if (1 == $collapsed) {\n            $link = $collapsableLink.'&session_id='.$sessionId.'&value=0';\n            $image = '<i class=\"fa fa-folder\"></i>';\n        }\n\n        $link = Display::url(\n            $image,\n            $link\n        );\n\n        return ['collapsed' => $collapsed, 'collapsable_link' => $link];\n    }\n\n    /**\n     * Converts \"start date\" and \"end date\" to \"From start date to end date\" string.\n     *\n     * @param string $startDate\n     * @param string $endDate\n     * @param bool   $showTime\n     * @param bool   $dateHuman\n     *\n     * @return string\n     */\n    public static function convertSessionDateToString($startDate, $endDate, $showTime, $dateHuman)\n    {\n        // api_get_local_time returns empty if date is invalid like 0000-00-00 00:00:00\n        $startDateToLocal = api_get_local_time(\n            $startDate,\n            null,\n            null,\n            true,\n            $showTime,\n            $dateHuman\n        );\n        $endDateToLocal = api_get_local_time(\n            $endDate,\n            null,\n            null,\n            true,\n            $showTime,\n            $dateHuman\n        );\n\n        $format = $showTime ? DATE_TIME_FORMAT_LONG_24H : DATE_FORMAT_LONG_NO_DAY;\n\n        $result = '';\n        if (!empty($startDateToLocal) && !empty($endDateToLocal)) {\n            $result = sprintf(\n                get_lang('FromDateXToDateY'),\n                api_format_date($startDateToLocal, $format),\n                api_format_date($endDateToLocal, $format)\n            );\n        } else {\n            if (!empty($startDateToLocal)) {\n                $result = get_lang('From').' '.api_format_date($startDateToLocal, $format);\n            }\n            if (!empty($endDateToLocal)) {\n                $result = get_lang('Until').' '.api_format_date($endDateToLocal, $format);\n            }\n        }\n        if (empty($result)) {\n            $result = get_lang('NoTimeLimits');\n        }\n\n        return $result;\n    }\n\n    public static function getStatusList()\n    {\n        return [\n            self::STATUS_PLANNED => get_lang('Planned'),\n            self::STATUS_PROGRESS => get_lang('InProgress'),\n            self::STATUS_FINISHED => get_lang('Finished'),\n            self::STATUS_CANCELLED => get_lang('Cancelled'),\n        ];\n    }\n\n    public static function getStatusLabel($status)\n    {\n        $list = self::getStatusList();\n\n        if (!isset($list[$status])) {\n            return get_lang('NoStatus');\n        }\n\n        return $list[$status];\n    }\n\n    public static function getDefaultSessionTab()\n    {\n        $default = 'all';\n        $view = api_get_configuration_value('default_session_list_view');\n\n        if (!empty($view)) {\n            $default = $view;\n        }\n\n        return $default;\n    }\n\n    /**\n     * @return string\n     */\n    public static function getSessionListTabs($listType)\n    {\n        $tabs = [\n            [\n                'content' => get_lang('AllSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=all',\n            ],\n            [\n                'content' => get_lang('ActiveSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=active',\n            ],\n            [\n                'content' => get_lang('ClosedSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=close',\n            ],\n            [\n                'content' => get_lang('SessionListCustom'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=custom',\n            ],\n            /*[\n                'content' => get_lang('Complete'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list_simple.php?list_type=complete',\n            ],*/\n        ];\n\n        switch ($listType) {\n            case 'all':\n                $default = 1;\n                break;\n            case 'active':\n                $default = 2;\n                break;\n            case 'close':\n                $default = 3;\n                break;\n            case 'custom':\n                $default = 4;\n                break;\n        }\n\n        return Display::tabsOnlyLink($tabs, $default);\n    }\n\n    /**\n     * Check if a session is followed by human resources manager.\n     *\n     * @param int $sessionId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function isSessionFollowedByDrh($sessionId, $userId)\n    {\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        if (api_is_multiple_url_enabled()) {\n            $tblSessionRelAccessUrl = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n            $sql = \"SELECT s.id FROM $tblSession s\n                INNER JOIN $tblSessionRelUser sru ON (sru.session_id = s.id)\n                LEFT JOIN $tblSessionRelAccessUrl a ON (s.id = a.session_id)\n                WHERE\n                    sru.user_id = '$userId' AND\n                    sru.session_id = '$sessionId' AND\n                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                    access_url_id = \".api_get_current_access_url_id();\n        } else {\n            $sql = \"SELECT s.id FROM $tblSession s\n                INNER JOIN $tblSessionRelUser sru ON sru.session_id = s.id\n                WHERE\n                    sru.user_id = '$userId' AND\n                    sru.session_id = '$sessionId' AND\n                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\";\n        }\n\n        $result = Database::query($sql);\n\n        return Database::num_rows($result) > 0;\n    }\n\n    /**\n     * Add a warning message when session is read-only mode.\n     */\n    public static function addFlashSessionReadOnly()\n    {\n        if (api_get_session_id() && !api_is_allowed_to_session_edit()) {\n            Display::addFlash(\n                Display::return_message(get_lang('SessionIsReadOnly'), 'warning')\n            );\n        }\n    }\n\n    public static function insertUsersInCourses(array $studentIds, array $courseIds, int $sessionId)\n    {\n        $tblSessionUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        foreach ($courseIds as $courseId) {\n            self::insertUsersInCourse($studentIds, $courseId, $sessionId, [], false);\n        }\n\n        foreach ($studentIds as $studentId) {\n            Database::query(\n                \"INSERT IGNORE INTO $tblSessionUser (session_id, user_id, registered_at)\n                VALUES ($sessionId, $studentId, '\".api_get_utc_datetime().\"')\"\n            );\n        }\n\n        Database::query(\n            \"UPDATE $tblSession s\n            SET s.nbr_users = (\n                SELECT COUNT(1) FROM session_rel_user sru\n                WHERE sru.session_id = $sessionId AND sru.relation_type <> \".Session::DRH.\"\n            )\n            WHERE s.id = $sessionId\"\n        );\n    }\n\n    public static function insertUsersInCourse(\n        array $studentIds,\n        int $courseId,\n        int $sessionId,\n        array $relationInfo = [],\n        bool $updateSession = true\n    ) {\n        $tblSessionCourseUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblSessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tblSessionUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $relationInfo = array_merge(['visibility' => 0, 'status' => Session::STUDENT], $relationInfo);\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $courseCode = $courseInfo['code'];\n        $subscribeToForums = (int) api_get_course_setting('subscribe_users_to_forum_notifications', $courseInfo);\n        if ($subscribeToForums) {\n            $forums = [];\n            $forumsBaseCourse = [];\n            require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n            $forums = get_forums(0, $courseCode, true, $sessionId);\n            if (api_get_configuration_value('subscribe_users_to_forum_notifications_also_in_base_course')) {\n                $forumsBaseCourse = get_forums(0, $courseCode, true, 0);\n            }\n        }\n\n        $sessionCourseUser = [\n            'session_id' => $sessionId,\n            'c_id' => $courseId,\n            'visibility' => $relationInfo['visibility'],\n            'status' => $relationInfo['status'],\n        ];\n        $sessionUser = [\n            'session_id' => $sessionId,\n            'registered_at' => api_get_utc_datetime(),\n        ];\n\n        foreach ($studentIds as $studentId) {\n            $sessionCourseUser['user_id'] = $studentId;\n\n            $count = Database::select(\n                'COUNT(1) as nbr',\n                $tblSessionCourseUser,\n                ['where' => ['session_id = ? AND c_id = ? AND user_id = ?' => [$sessionId, $courseId, $studentId]]],\n                'first'\n            );\n\n            if (empty($count['nbr'])) {\n                Database::insert($tblSessionCourseUser, $sessionCourseUser);\n\n                Event::logUserSubscribedInCourseSession($studentId, $courseId, $sessionId);\n                if ($subscribeToForums) {\n                    $userInfo = api_get_user_info($studentID);\n                    if (!empty($forums)) {\n                        foreach ($forums as $forum) {\n                            $forumId = $forum['iid'];\n                            set_notification('forum', $forumId, false, $userInfo, $courseInfo);\n                        }\n                    }\n                    if (!empty($forumsBaseCourse)) {\n                        foreach ($forumsBaseCourse as $forum) {\n                            $forumId = $forum['iid'];\n                            set_notification('forum', $forumId, false, $userInfo, $courseInfo);\n                        }\n                    }\n                }\n            }\n\n            if ($updateSession) {\n                $sessionUser['user_id'] = $studentId;\n\n                $count = Database::select(\n                    'COUNT(1) as nbr',\n                    $tblSessionUser,\n                    ['where' => ['session_id = ? AND user_id = ?' => [$sessionId, $studentId]]],\n                    'first'\n                );\n\n                if (empty($count['nbr'])) {\n                    Database::insert($tblSessionUser, $sessionUser);\n                }\n            }\n        }\n\n        Database::query(\n            \"UPDATE $tblSessionCourse src\n            SET src.nbr_users = (\n                SELECT COUNT(1) FROM $tblSessionCourseUser srcru\n                WHERE\n                    srcru.session_id = $sessionId AND srcru.c_id = $courseId AND srcru.status <> \".Session::COACH.\"\n            )\n            WHERE src.session_id = $sessionId AND src.c_id = $courseId\"\n        );\n\n        if ($updateSession) {\n            Database::query(\n                \"UPDATE $tblSession s\n                SET s.nbr_users = (\n                    SELECT COUNT(1) FROM session_rel_user sru\n                    WHERE sru.session_id = $sessionId AND sru.relation_type <> \".Session::DRH.\"\n                )\n                WHERE s.id = $sessionId\"\n            );\n        }\n    }\n\n    public static function getCareersFromSession(int $sessionId): array\n    {\n        $extraFieldValueSession = new ExtraFieldValue('session');\n        $extraFieldValueCareer = new ExtraFieldValue('career');\n\n        $value = $extraFieldValueSession->get_values_by_handler_and_field_variable($sessionId, 'careerid');\n        $careers = [];\n        if (isset($value['value']) && !empty($value['value'])) {\n            $careerList = str_replace(['[', ']'], '', $value['value']);\n            $careerList = explode(',', $careerList);\n            $careerManager = new Career();\n            foreach ($careerList as $career) {\n                $careerIdValue = $extraFieldValueCareer->get_item_id_from_field_variable_and_field_value(\n                    'external_career_id',\n                    $career\n                );\n                if (isset($careerIdValue['item_id']) && !empty($careerIdValue['item_id'])) {\n                    $finalCareerId = $careerIdValue['item_id'];\n                    $careerInfo = $careerManager->get($finalCareerId);\n                    if (!empty($careerInfo)) {\n                        $careers[] = $careerInfo;\n                    }\n                }\n            }\n        }\n\n        return $careers;\n    }\n\n    public static function getCareerDiagramPerSessionList($sessionList, $userId)\n    {\n        if (empty($sessionList) || empty($userId)) {\n            return '';\n        }\n\n        $userId = (int) $userId;\n        $careersAdded = [];\n        $careerModel = new Career();\n        $frames = '';\n        foreach ($sessionList as $sessionId) {\n            $visibility = api_get_session_visibility($sessionId, null, false, $userId);\n            if (SESSION_AVAILABLE === $visibility) {\n                $careerList = self::getCareersFromSession($sessionId);\n                if (empty($careerList)) {\n                    continue;\n                }\n                foreach ($careerList as $career) {\n                    $careerId = $careerIdToShow = $career['id'];\n                    if (api_get_configuration_value('use_career_external_id_as_identifier_in_diagrams')) {\n                        $careerIdToShow = $careerModel->getCareerIdFromInternalToExternal($careerId);\n                    }\n\n                    if (!in_array($careerId, $careersAdded)) {\n                        $careersAdded[] = $careerId;\n                        $careerUrl = api_get_path(WEB_CODE_PATH).'user/career_diagram.php?iframe=1&career_id='.$careerIdToShow.'&user_id='.$userId;\n                        $frames .= '\n                            <iframe\n                                onload=\"resizeIframe(this)\"\n                                style=\"width:100%;\"\n                                border=\"0\"\n                                frameborder=\"0\"\n                                scrolling=\"no\"\n                                src=\"'.$careerUrl.'\"\n                            ></iframe>';\n                    }\n                }\n            }\n        }\n\n        $content = '';\n        if (!empty($frames)) {\n            $content = Display::page_subheader(get_lang('OngoingTraining'));\n            $content .= '\n               <script>\n                resizeIframe = function(iFrame) {\n                    iFrame.height = iFrame.contentWindow.document.body.scrollHeight + 20;\n                }\n                </script>\n            ';\n            $content .= $frames;\n            $content .= Career::renderDiagramFooter();\n        }\n\n        return $content;\n    }\n\n    public static function importAgendaFromSessionModel(int $modelSessionId, int $sessionId, int $courseId)\n    {\n        $em = Database::getManager();\n        $repo = $em->getRepository('ChamiloCourseBundle:CCalendarEvent');\n\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $session = api_get_session_entity($sessionId);\n        $modelSession = api_get_session_entity($modelSessionId);\n\n        $sessionDateDiff = $modelSession->getAccessStartDate()->diff($session->getAccessStartDate());\n\n        $events = $repo->findBy(\n            ['cId' => $courseId, 'sessionId' => $modelSessionId]\n        );\n\n        $agenda = new Agenda('course');\n        $agenda->set_course($courseInfo);\n        $agenda->setSessionId($sessionId);\n\n        foreach ($events as $event) {\n            $startDate = $event->getStartDate()->add($sessionDateDiff);\n            $endDate = $event->getEndDate()->add($sessionDateDiff);\n\n            $agenda->addEvent(\n                $startDate->format('Y-m-d H:i:s'),\n                $endDate->format('Y-m-d H:i:s'),\n                'false',\n                $event->getTitle(),\n                $event->getContent(),\n                ['GROUP:0'],\n                false,\n                null,\n                [],\n                [],\n                $event->getComment(),\n                $event->getColor()\n            );\n        }\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    private static function allowed($id)\n    {\n        $sessionInfo = self::fetch($id);\n\n        if (empty($sessionInfo)) {\n            return false;\n        }\n\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $userId = api_get_user_id();\n\n        if (api_is_session_admin() &&\n            api_get_setting('allow_session_admins_to_manage_all_sessions') != 'true'\n        ) {\n            if ($sessionInfo['session_admin_id'] != $userId) {\n                return false;\n            }\n        }\n\n        if (api_is_teacher() &&\n            api_get_setting('allow_teachers_to_create_sessions') == 'true'\n        ) {\n            if ($sessionInfo['id_coach'] != $userId) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Add classes (by their names) to a session.\n     *\n     * @param int   $sessionId\n     * @param array $classesNames\n     * @param bool  $deleteClassSessions Optional. Empty the session list for the usergroup (class)\n     */\n    private static function addClassesByName($sessionId, $classesNames, $deleteClassSessions = true, ?string &$error_message = '')\n    {\n        if (!$classesNames) {\n            return;\n        }\n\n        $usergroup = new UserGroup();\n\n        foreach ($classesNames as $className) {\n            if (empty($className)) {\n                continue;\n            }\n\n            $classIdByName = $usergroup->getIdByName($className);\n\n            if (empty($classIdByName)) {\n                $error_message .= sprintf(get_lang('ClassNameXDoesntExists'), $className).'<br>';\n                continue;\n            }\n\n            $usergroup->subscribe_sessions_to_usergroup(\n                $usergroup->getIdByName($className),\n                [$sessionId],\n                $deleteClassSessions\n            );\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareCatSessionInfo($listA, $listB)\n    {\n        if ($listA['sessionName'] == $listB['sessionName']) {\n            return 0;\n        } elseif ($listA['sessionName'] > $listB['sessionName']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareBySessionName($listA, $listB)\n    {\n        if ('' == $listB['catSessionName']) {\n            return -1;\n        } elseif ('' == $listA['catSessionName']) {\n            return 1;\n        } elseif ($listA['catSessionName'] == $listB['catSessionName']) {\n            return 0;\n        } elseif ($listA['catSessionName'] > $listB['catSessionName']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareByUserCourseCat($listA, $listB)\n    {\n        if ($listA['courseInUserCategoryTitle'] == $listB['courseInUserCategoryTitle']) {\n            return 0;\n        } elseif ($listA['courseInUserCategoryTitle'] > $listB['courseInUserCategoryTitle']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareByCourse($listA, $listB)\n    {\n        if ($listA['title'] == $listB['title']) {\n            return 0;\n        } elseif ($listA['title'] > $listB['title']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\n/* For licensing terms, see /license.txt */\n\nuse Chamilo\\CoreBundle\\Entity\\Course;\nuse Chamilo\\CoreBundle\\Entity\\ExtraField;\nuse Chamilo\\CoreBundle\\Entity\\Repository\\SequenceResourceRepository;\nuse Chamilo\\CoreBundle\\Entity\\SequenceResource;\nuse Chamilo\\CoreBundle\\Entity\\Session;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelCourse;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelCourseRelUser;\nuse Chamilo\\CoreBundle\\Entity\\SessionRelUser;\nuse Chamilo\\UserBundle\\Entity\\User;\nuse ExtraField as ExtraFieldModel;\nuse Monolog\\Logger;\n\n/**\n * Class SessionManager.\n *\n * This is the session library for Chamilo\n * (as in courses>session, not as in PHP session)\n * All main sessions functions should be placed here.\n * This class provides methods for sessions management.\n * Include/require it in your code to use its features.\n */\nclass SessionManager\n{\n    public const STATUS_PLANNED = 1;\n    public const STATUS_PROGRESS = 2;\n    public const STATUS_FINISHED = 3;\n    public const STATUS_CANCELLED = 4;\n\n    public static $_debug = false;\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Fetches a session from the database.\n     *\n     * @param int $id Session Id\n     *\n     * @return array Session details\n     */\n    public static function fetch($id)\n    {\n        $em = Database::getManager();\n\n        if (empty($id)) {\n            return [];\n        }\n\n        /** @var Session $session */\n        $session = $em->find('ChamiloCoreBundle:Session', $id);\n\n        if (!$session) {\n            return [];\n        }\n\n        $result = [\n            'id' => $session->getId(),\n            'id_coach' => $session->getGeneralCoach() ? $session->getGeneralCoach()->getId() : null,\n            'session_category_id' => $session->getCategory() ? $session->getCategory()->getId() : null,\n            'name' => $session->getName(),\n            'description' => $session->getDescription(),\n            'show_description' => $session->getShowDescription(),\n            'duration' => $session->getDuration(),\n            'nbr_courses' => $session->getNbrCourses(),\n            'nbr_users' => $session->getNbrUsers(),\n            'nbr_classes' => $session->getNbrClasses(),\n            'session_admin_id' => $session->getSessionAdminId(),\n            'visibility' => $session->getVisibility(),\n            'promotion_id' => $session->getPromotionId(),\n            'display_start_date' => $session->getDisplayStartDate()\n                ? $session->getDisplayStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'display_end_date' => $session->getDisplayEndDate()\n                ? $session->getDisplayEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'access_start_date' => $session->getAccessStartDate()\n                ? $session->getAccessStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'access_end_date' => $session->getAccessEndDate()\n                ? $session->getAccessEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'coach_access_start_date' => $session->getCoachAccessStartDate()\n                ? $session->getCoachAccessStartDate()->format('Y-m-d H:i:s')\n                : null,\n            'coach_access_end_date' => $session->getCoachAccessEndDate()\n                ? $session->getCoachAccessEndDate()->format('Y-m-d H:i:s')\n                : null,\n            'send_subscription_notification' => $session->getSendSubscriptionNotification(),\n        ];\n\n        if (api_get_configuration_value('allow_session_status')) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sql = \"SELECT status FROM $table WHERE id = $id\";\n            $resultQuery = Database::query($sql);\n            $row = Database::fetch_array($resultQuery);\n            $result['status'] = $row['status'];\n            $result['status_label'] = self::getStatusLabel($row['status']);\n        }\n\n        // Converted to local values\n        $variables = [\n            'display_start_date',\n            'display_end_date',\n            'access_start_date',\n            'access_end_date',\n            'coach_access_start_date',\n            'coach_access_end_date',\n        ];\n\n        foreach ($variables as $value) {\n            $result[$value.'_to_local_time'] = null;\n            if (!empty($result[$value])) {\n                $result[$value.'_to_local_time'] = api_get_local_time($result[$value]);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Create a session.\n     *\n     * @author Carlos Vargas <carlos.vargas@beeznest.com>, from existing code\n     *\n     * @param string $name\n     * @param string $startDate                    (YYYY-MM-DD hh:mm:ss)\n     * @param string $endDate                      (YYYY-MM-DD hh:mm:ss)\n     * @param string $displayStartDate             (YYYY-MM-DD hh:mm:ss)\n     * @param string $displayEndDate               (YYYY-MM-DD hh:mm:ss)\n     * @param string $coachStartDate               (YYYY-MM-DD hh:mm:ss)\n     * @param string $coachEndDate                 (YYYY-MM-DD hh:mm:ss)\n     * @param mixed  $coachId                      If int, this is the session coach id,\n     *                                             if string, the coach ID will be looked for from the user table\n     * @param int    $sessionCategoryId            ID of the session category in which this session is registered\n     * @param int    $visibility                   Visibility after end date (0 = read-only, 1 = invisible, 2 =\n     *                                             accessible)\n     * @param bool   $fixSessionNameIfExists\n     * @param string $duration\n     * @param string $description                  Optional. The session description\n     * @param int    $showDescription              Optional. Whether show the session description\n     * @param array  $extraFields\n     * @param int    $sessionAdminId               Optional. If this sessions was created by a session admin, assign it\n     *                                             to him\n     * @param bool   $sendSubscriptionNotification Optional.\n     *                                             Whether send a mail notification to users being subscribed\n     * @param int    $accessUrlId                  Optional.\n     * @param int    $status\n     *\n     * @return mixed Session ID on success, error message otherwise\n     *\n     * @todo   use an array to replace all this parameters or use the model.lib.php ...\n     */\n    public static function create_session(\n        $name,\n        $startDate,\n        $endDate,\n        $displayStartDate,\n        $displayEndDate,\n        $coachStartDate,\n        $coachEndDate,\n        $coachId,\n        $sessionCategoryId,\n        $visibility = 1,\n        $fixSessionNameIfExists = false,\n        $duration = null,\n        $description = null,\n        $showDescription = 0,\n        $extraFields = [],\n        $sessionAdminId = 0,\n        $sendSubscriptionNotification = false,\n        $accessUrlId = 0,\n        $status = 0\n    ) {\n        global $_configuration;\n\n        // Check portal limits\n        $accessUrlId = api_is_multiple_url_enabled()\n            ? (empty($accessUrlId) ? api_get_current_access_url_id() : (int) $accessUrlId)\n            : 1;\n\n        if (isset($_configuration[$accessUrlId]) &&\n            is_array($_configuration[$accessUrlId]) &&\n            isset($_configuration[$accessUrlId]['hosting_limit_sessions']) &&\n            $_configuration[$accessUrlId]['hosting_limit_sessions'] > 0\n        ) {\n            $num = self::count_sessions();\n            if ($num >= $_configuration[$accessUrlId]['hosting_limit_sessions']) {\n                api_warn_hosting_contact('hosting_limit_sessions');\n\n                return get_lang('PortalSessionsLimitReached');\n            }\n        }\n\n        $name = Database::escape_string(trim($name));\n        $sessionCategoryId = (int) $sessionCategoryId;\n        $visibility = (int) $visibility;\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $startDate = Database::escape_string($startDate);\n        $endDate = Database::escape_string($endDate);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionNameIsRequired');\n\n            return $msg;\n        } elseif (!empty($startDate) && !api_is_valid_date($startDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i:s')\n        ) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!empty($endDate) && !api_is_valid_date($endDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i:s')\n        ) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif (!empty($startDate) && !empty($endDate) && $startDate >= $endDate) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        } else {\n            $ready_to_create = false;\n            if ($fixSessionNameIfExists) {\n                $name = self::generateNextSessionName($name);\n                if ($name) {\n                    $ready_to_create = true;\n                } else {\n                    $msg = get_lang('SessionNameAlreadyExists');\n\n                    return $msg;\n                }\n            } else {\n                $rs = Database::query(\"SELECT 1 FROM $tbl_session WHERE name='\".$name.\"'\");\n                if (Database::num_rows($rs)) {\n                    $msg = get_lang('SessionNameAlreadyExists');\n\n                    return $msg;\n                }\n                $ready_to_create = true;\n            }\n\n            if ($ready_to_create) {\n                $sessionAdminId = !empty($sessionAdminId) ? $sessionAdminId : api_get_user_id();\n                $values = [\n                    'name' => $name,\n                    'id_coach' => $coachId,\n                    'session_admin_id' => $sessionAdminId,\n                    'visibility' => $visibility,\n                    'description' => $description,\n                    'show_description' => $showDescription,\n                    'send_subscription_notification' => (int) $sendSubscriptionNotification,\n                ];\n\n                if (!empty($startDate)) {\n                    $values['access_start_date'] = api_get_utc_datetime($startDate);\n                }\n\n                if (!empty($endDate)) {\n                    $values['access_end_date'] = api_get_utc_datetime($endDate);\n                }\n\n                if (!empty($displayStartDate)) {\n                    $values['display_start_date'] = api_get_utc_datetime($displayStartDate);\n                }\n\n                if (!empty($displayEndDate)) {\n                    $values['display_end_date'] = api_get_utc_datetime($displayEndDate);\n                }\n\n                if (!empty($coachStartDate)) {\n                    $values['coach_access_start_date'] = api_get_utc_datetime($coachStartDate);\n                }\n                if (!empty($coachEndDate)) {\n                    $values['coach_access_end_date'] = api_get_utc_datetime($coachEndDate);\n                }\n\n                if (!empty($sessionCategoryId)) {\n                    $values['session_category_id'] = $sessionCategoryId;\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $values['status'] = $status;\n                }\n\n                $session_id = Database::insert($tbl_session, $values);\n                $duration = (int) $duration;\n\n                if (!empty($duration)) {\n                    $sql = \"UPDATE $tbl_session SET\n                        access_start_date = NULL,\n                        access_end_date = NULL,\n                        display_start_date = NULL,\n                        display_end_date = NULL,\n                        coach_access_start_date = NULL,\n                        coach_access_end_date = NULL,\n                        duration = $duration\n                    WHERE id = $session_id\";\n                    Database::query($sql);\n                } else {\n                    $sql = \"UPDATE $tbl_session\n                        SET duration = 0\n                        WHERE id = $session_id\";\n                    Database::query($sql);\n                }\n\n                if (!empty($session_id)) {\n                    $extraFields['item_id'] = $session_id;\n                    $sessionFieldValue = new ExtraFieldValue('session');\n                    $sessionFieldValue->saveFieldValues($extraFields);\n\n                    // Adding to the correct URL\n                    UrlManager::add_session_to_url($session_id, $accessUrlId);\n\n                    // add event to system log\n                    Event::addEvent(\n                        LOG_SESSION_CREATE,\n                        LOG_SESSION_ID,\n                        $session_id,\n                        api_get_utc_datetime(),\n                        api_get_user_id()\n                    );\n                }\n\n                return $session_id;\n            }\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return bool\n     */\n    public static function sessionNameExists($name)\n    {\n        $name = Database::escape_string($name);\n        $sql = \"SELECT COUNT(*) as count FROM \".Database::get_main_table(TABLE_MAIN_SESSION).\"\n                WHERE name = '$name'\";\n        $result = Database::fetch_array(Database::query($sql));\n\n        return $result['count'] > 0;\n    }\n\n    /**\n     * @param string $where_condition\n     *\n     * @return mixed\n     */\n    public static function get_count_admin($where_condition = '')\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $where = 'WHERE 1=1 ';\n        $user_id = api_get_user_id();\n        $extraJoin = '';\n\n        if (api_is_session_admin() &&\n            api_get_setting('allow_session_admins_to_manage_all_sessions') == 'false'\n        ) {\n            $where .= \" AND (\n                            s.session_admin_id = $user_id  OR\n                            sru.user_id = '$user_id' AND\n                            sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\n                            )\n                      \";\n\n            $extraJoin = \" INNER JOIN $tbl_session_rel_user sru\n                           ON sru.session_id = s.id \";\n        }\n\n        $today = api_get_utc_datetime();\n        $today = api_strtotime($today, 'UTC');\n        $today = date('Y-m-d', $today);\n\n        if (!empty($where_condition)) {\n            $where_condition = str_replace(\"(  session_active = ':'  )\", '1=1', $where_condition);\n\n            $where_condition = str_replace('category_name', 'sc.name', $where_condition);\n            $where_condition = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $where_condition\n            );\n            $where_condition = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $where_condition\n            );\n        } else {\n            $where_condition = \" AND 1 = 1\";\n        }\n\n        $courseCondition = null;\n        if (strpos($where_condition, 'c.id')) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n            $tableCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n            $courseCondition = \" INNER JOIN $table course_rel_session\n                                 ON (s.id = course_rel_session.session_id)\n                                 INNER JOIN $tableCourse c\n                                 ON (course_rel_session.c_id = c.id)\n                                \";\n        }\n\n        $sql = \"SELECT COUNT(id) as total_rows FROM (\n                SELECT DISTINCT\n                 IF (\n\t\t\t\t\t(s.access_start_date <= '$today' AND '$today' <= s.access_end_date) OR\n                    (s.access_start_date IS NULL AND s.access_end_date IS NULL ) OR\n\t\t\t\t\t(s.access_start_date <= '$today' AND s.access_end_date IS NULL) OR\n\t\t\t\t\t('$today' <= s.access_end_date AND s.access_start_date IS NULL)\n\t\t\t\t, 1, 0) as session_active,\n                s.id\n                FROM $tbl_session s\n                LEFT JOIN $tbl_session_category sc\n                ON s.session_category_id = sc.id\n                INNER JOIN $tbl_user u\n                ON s.id_coach = u.id\n                $courseCondition\n                $extraJoin\n                $where $where_condition ) as session_table\";\n\n        if (api_is_multiple_url_enabled()) {\n            $access_url_id = api_get_current_access_url_id();\n            if ($access_url_id != -1) {\n                $where .= \" AND ar.access_url_id = $access_url_id \";\n\n                $sql = \"SELECT count(id) as total_rows FROM (\n                SELECT DISTINCT\n                  IF (\n\t\t\t\t\t(s.access_start_date <= '$today' AND '$today' <= s.access_end_date) OR\n                    (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n\t\t\t\t\t(s.access_start_date <= '$today' AND s.access_end_date IS NULL) OR\n\t\t\t\t\t('$today' <= s.access_end_date AND s.access_start_date IS NULL)\n\t\t\t\t, 1, 0)\n\t\t\t\tas session_active,\n\t\t\t\ts.id\n                FROM $tbl_session s\n                    LEFT JOIN  $tbl_session_category sc\n                    ON s.session_category_id = sc.id\n                    INNER JOIN $tbl_user u ON s.id_coach = u.user_id\n                    INNER JOIN $table_access_url_rel_session ar\n                    ON ar.session_id = s.id\n                    $courseCondition\n                    $extraJoin\n                $where $where_condition) as session_table\";\n            }\n        }\n\n        $result_rows = Database::query($sql);\n        $row = Database::fetch_array($result_rows);\n        $num = $row['total_rows'];\n\n        return $num;\n    }\n\n    /**\n     * Get session list for a session admin or platform admin.\n     *\n     * @param int    $userId   User Id for the session admin.\n     * @param array  $options  Order and limit keys.\n     * @param bool   $getCount Whether to get all the results or only the count.\n     * @param array  $columns  Columns from jqGrid.\n     * @param string $listType\n     *\n     * @return array\n     */\n    public static function getSessionsForAdmin(\n        $userId,\n        $options = [],\n        $getCount = false,\n        $columns = [],\n        $listType = 'all'\n    ) {\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sessionCategoryTable = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n\n        $where = 'WHERE 1 = 1 ';\n\n        $userId = (int) $userId;\n\n        if (!api_is_platform_admin()) {\n            if (api_is_session_admin() &&\n                'false' === api_get_setting('allow_session_admins_to_manage_all_sessions')\n            ) {\n                $where .= \" AND s.session_admin_id = $userId \";\n            }\n        }\n\n        if (!api_is_platform_admin() &&\n            api_is_teacher() &&\n            'true' === api_get_setting('allow_teachers_to_create_sessions')\n        ) {\n            $where .= \" AND s.id_coach = $userId \";\n        }\n\n        $extraFieldModel = new ExtraFieldModel('session');\n        $conditions = $extraFieldModel->parseConditions($options);\n\n        $sqlInjectJoins = $conditions['inject_joins'];\n        $where .= $conditions['where'];\n        $sqlInjectWhere = $conditions['inject_where'];\n        $injectExtraFields = $conditions['inject_extra_fields'];\n        $order = $conditions['order'];\n        $limit = $conditions['limit'];\n\n        $isMakingOrder = false;\n        $showCountUsers = false;\n\n        if (true === $getCount) {\n            $select = ' SELECT count(DISTINCT s.id) as total_rows ';\n        } else {\n            if (!empty($columns['column_model'])) {\n                foreach ($columns['column_model'] as $column) {\n                    if ('users' == $column['name']) {\n                        $showCountUsers = true;\n                    }\n                }\n            }\n\n            $select =\n                \"SELECT DISTINCT\n                     s.name,\n                     s.display_start_date,\n                     s.display_end_date,\n                     access_start_date,\n                     access_end_date,\n                     s.visibility,\n                     s.session_category_id,\n                     $injectExtraFields\n                     s.id\n             \";\n\n            if ($showCountUsers) {\n                $select .= ', count(su.user_id) users';\n            }\n\n            if (api_get_configuration_value('allow_session_status')) {\n                $select .= ', status';\n            }\n\n            if (isset($options['order'])) {\n                $isMakingOrder = 0 === strpos($options['order'], 'category_name');\n            }\n        }\n\n        $isFilteringSessionCategory = strpos($where, 'category_name') !== false;\n        $isFilteringSessionCategoryWithName = strpos($where, 'sc.name') !== false;\n\n        if ($isMakingOrder || $isFilteringSessionCategory || $isFilteringSessionCategoryWithName) {\n            $sqlInjectJoins .= \" LEFT JOIN $sessionCategoryTable sc ON s.session_category_id = sc.id \";\n\n            if ($isFilteringSessionCategory) {\n                $where = str_replace('category_name', 'sc.name', $where);\n            }\n\n            if ($isMakingOrder) {\n                $order = str_replace('category_name', 'sc.name', $order);\n            }\n        }\n\n        if ($showCountUsers) {\n            $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n            $sqlInjectJoins .= \" LEFT JOIN $tblSessionRelUser su ON (su.session_id = s.id)\";\n        }\n\n        $query = \"$select FROM $tblSession s $sqlInjectJoins $where $sqlInjectWhere\";\n\n        if (api_is_multiple_url_enabled()) {\n            $tblAccessUrlRelSession = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $accessUrlId = api_get_current_access_url_id();\n\n            if ($accessUrlId != -1) {\n                $where .= \" AND ar.access_url_id = $accessUrlId \";\n                $query = \"$select\n                    FROM $tblSession s $sqlInjectJoins\n                    INNER JOIN $tblAccessUrlRelSession ar\n                    ON (ar.session_id = s.id) $where\";\n            }\n        }\n\n        $date = api_get_utc_datetime();\n\n        switch ($listType) {\n            case 'all':\n                break;\n            case 'active':\n                $query .= \"AND (\n                    (s.access_end_date IS NULL)\n                    OR\n                    (\n                    s.access_start_date IS NOT NULL AND\n                    s.access_end_date IS NOT NULL AND\n                    s.access_start_date <= '$date' AND s.access_end_date >= '$date')\n                    OR\n                    (\n                        s.access_start_date IS NULL AND\n                        s.access_end_date IS NOT NULL AND\n                        s.access_end_date >= '$date'\n                    )\n                )\";\n                break;\n            case 'close':\n                $query .= \"AND (\n                    (\n                    s.access_start_date IS NOT NULL AND\n                    s.access_end_date IS NOT NULL AND\n                    s.access_start_date <= '$date' AND s.access_end_date <= '$date')\n                    OR\n                    (\n                        s.access_start_date IS NULL AND\n                        s.access_end_date IS NOT NULL AND\n                        s.access_end_date <= '$date'\n                    )\n                )\";\n                break;\n        }\n\n        if ($showCountUsers) {\n            $query .= ' GROUP by s.id';\n        }\n\n        $allowOrder = api_get_configuration_value('session_list_order');\n\n        if ($allowOrder) {\n            $order = ' ORDER BY position ASC';\n        }\n\n        $query .= $order;\n        $query .= $limit;\n        $result = Database::query($query);\n\n        $sessions = Database::store_result($result, 'ASSOC');\n\n        if ('all' === $listType) {\n            if ($getCount) {\n                return $sessions[0]['total_rows'];\n            }\n\n            return $sessions;\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Gets the admin session list callback of the session/session_list.php page.\n     *\n     * @param array  $options           order and limit keys\n     * @param bool   $getCount          Whether to get all the results or only the count\n     * @param array  $columns\n     * @param array  $extraFieldsToLoad\n     * @param string $listType\n     *\n     * @return mixed Integer for number of rows, or array of results\n     * @assert ([],true) !== false\n     */\n    public static function formatSessionsAdminForGrid(\n        $options = [],\n        $getCount = false,\n        $columns = [],\n        $extraFieldsToLoad = [],\n        $listType = 'all'\n    ) {\n        $showCountUsers = false;\n        if (!$getCount && !empty($columns['column_model'])) {\n            foreach ($columns['column_model'] as $column) {\n                if ('users' === $column['name']) {\n                    $showCountUsers = true;\n                }\n            }\n        }\n\n        $userId = api_get_user_id();\n        $sessions = self::getSessionsForAdmin($userId, $options, $getCount, $columns, $listType);\n        if ($getCount) {\n            return (int) $sessions;\n        }\n\n        $formattedSessions = [];\n        $categories = self::get_all_session_category();\n        $orderedCategories = [];\n        if (!empty($categories)) {\n            foreach ($categories as $category) {\n                $orderedCategories[$category['id']] = $category['name'];\n            }\n        }\n\n        $activeIcon = Display::return_icon('accept.png', get_lang('Active'));\n        $inactiveIcon = Display::return_icon('error.png', get_lang('Inactive'));\n        $webPath = api_get_path(WEB_PATH);\n\n        foreach ($sessions as $session) {\n            if ($showCountUsers) {\n                $session['users'] = self::get_users_by_session($session['id'], 0, true);\n            }\n            $url = $webPath.'main/session/resume_session.php?id_session='.$session['id'];\n            if ($extraFieldsToLoad || api_is_drh()) {\n                $url = $webPath.'session/'.$session['id'].'/about/';\n            }\n\n            $session['name'] = Display::url($session['name'], $url);\n\n            if (!empty($extraFieldsToLoad)) {\n                foreach ($extraFieldsToLoad as $field) {\n                    $extraFieldValue = new ExtraFieldValue('session');\n                    $fieldData = $extraFieldValue->getAllValuesByItemAndField(\n                        $session['id'],\n                        $field['id']\n                    );\n                    $fieldDataArray = [];\n                    $fieldDataToString = '';\n                    if (!empty($fieldData)) {\n                        foreach ($fieldData as $data) {\n                            $fieldDataArray[] = $data['value'];\n                        }\n                        $fieldDataToString = implode(', ', $fieldDataArray);\n                    }\n                    $session[$field['variable']] = $fieldDataToString;\n                }\n            }\n            if (isset($session['session_active']) && $session['session_active'] == 1) {\n                $session['session_active'] = $activeIcon;\n            } else {\n                $session['session_active'] = $inactiveIcon;\n            }\n\n            $session = self::convert_dates_to_local($session, true);\n\n            switch ($session['visibility']) {\n                case SESSION_VISIBLE_READ_ONLY: //1\n                    $session['visibility'] = get_lang('ReadOnly');\n                    break;\n                case SESSION_VISIBLE:           //2\n                case SESSION_AVAILABLE:         //4\n                    $session['visibility'] = get_lang('Visible');\n                    break;\n                case SESSION_INVISIBLE:         //3\n                    $session['visibility'] = api_ucfirst(get_lang('Invisible'));\n                    break;\n            }\n\n            // Cleaning double selects.\n            foreach ($session as $key => &$value) {\n                if (isset($optionsByDouble[$key]) || isset($optionsByDouble[$key.'_second'])) {\n                    $options = explode('::', $value);\n                }\n                $original_key = $key;\n                if (strpos($key, '_second') !== false) {\n                    $key = str_replace('_second', '', $key);\n                }\n\n                if (isset($optionsByDouble[$key]) &&\n                    isset($options[0]) &&\n                    isset($optionsByDouble[$key][$options[0]])\n                ) {\n                    if (strpos($original_key, '_second') === false) {\n                        $value = $optionsByDouble[$key][$options[0]]['option_display_text'];\n                    } else {\n                        $value = $optionsByDouble[$key][$options[1]]['option_display_text'];\n                    }\n                }\n            }\n\n            $categoryName = isset($orderedCategories[$session['session_category_id']]) ? $orderedCategories[$session['session_category_id']] : '';\n            $session['category_name'] = $categoryName;\n            if (isset($session['status'])) {\n                $session['status'] = self::getStatusLabel($session['status']);\n            }\n\n            $formattedSessions[] = $session;\n        }\n\n        return $formattedSessions;\n    }\n\n    /**\n     * Gets the progress of learning paths in the given session.\n     *\n     * @param int    $sessionId\n     * @param int    $courseId\n     * @param string $date_from\n     * @param string $date_to\n     * @param array options order and limit keys\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_session_lp_progress(\n        $sessionId,\n        $courseId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        //escaping vars\n        $sessionId = $sessionId === 'T' ? 'T' : intval($sessionId);\n        $courseId = intval($courseId);\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_course_lp_view = Database::get_course_table(TABLE_LP_VIEW);\n\n        $course = api_get_course_info_by_id($courseId);\n        $sessionCond = 'and session_id = %s';\n        if ($sessionId === 'T') {\n            $sessionCond = '';\n        }\n\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 $sessionCond\";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'].\" \";\n        }\n\n        $sql = \"SELECT u.id as user_id, u.lastname, u.firstname, u.username, u.email, s.c_id\n                FROM $session_course_user s\n                INNER JOIN $user u ON u.id = s.user_id\n                $where\n                $order\n                $limit\";\n\n        $sql_query = sprintf($sql, Database::escape_string($course['real_id']), $sessionId);\n\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        // Get lessons\n        $lessons = LearnpathList::get_course_lessons($course['code'], $sessionId);\n\n        $table = [];\n        foreach ($users as $user) {\n            $data = [\n                'lastname' => $user[1],\n                'firstname' => $user[2],\n                'username' => $user[3],\n            ];\n\n            $sessionCond = 'AND v.session_id = %d';\n            if ($sessionId == 'T') {\n                $sessionCond = \"\";\n            }\n\n            //Get lessons progress by user\n            $sql = \"SELECT v.lp_id as id, v.progress\n                    FROM  $tbl_course_lp_view v\n                    WHERE v.c_id = %d\n                    AND v.user_id = %d\n            $sessionCond\";\n\n            $sql_query = sprintf(\n                $sql,\n                intval($courseId),\n                intval($user['user_id']),\n                $sessionId\n            );\n\n            $result = Database::query($sql_query);\n\n            $user_lessons = [];\n            while ($row = Database::fetch_array($result)) {\n                $user_lessons[$row['id']] = $row;\n            }\n\n            //Match course lessons with user progress\n            $progress = 0;\n            $count = 0;\n            foreach ($lessons as $lesson) {\n                $data[$lesson['id']] = (!empty($user_lessons[$lesson['id']]['progress'])) ? $user_lessons[$lesson['id']]['progress'] : 0;\n                $progress += $data[$lesson['id']];\n                $data[$lesson['id']] = $data[$lesson['id']].'%';\n                $count++;\n            }\n            if ($count == 0) {\n                $data['total'] = 0;\n            } else {\n                $data['total'] = round($progress / $count, 2).'%';\n            }\n            $table[] = $data;\n        }\n\n        return $table;\n    }\n\n    /**\n     * Gets the survey answers.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     * @param int $surveyId\n     * @param array options order and limit keys\n     *\n     * @todo fix the query\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_survey_overview(\n        $sessionId,\n        $courseId,\n        $surveyId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        //escaping vars\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n        $surveyId = intval($surveyId);\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $c_survey = Database::get_course_table(TABLE_SURVEY);\n        $c_survey_answer = Database::get_course_table(TABLE_SURVEY_ANSWER);\n        $c_survey_question = Database::get_course_table(TABLE_SURVEY_QUESTION);\n        $c_survey_question_option = Database::get_course_table(TABLE_SURVEY_QUESTION_OPTION);\n\n        $course = api_get_course_info_by_id($courseId);\n\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 AND session_id = %s\";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        $sql = \"SELECT u.user_id, u.lastname, u.firstname, u.username, u.email, s.c_id\n                FROM $session_course_user s\n                INNER JOIN $user u ON u.user_id = s.user_id\n                $where $order $limit\";\n\n        $sql_query = sprintf($sql, intval($course['real_id']), $sessionId);\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        //Get survey questions\n        $questions = SurveyManager::get_questions($surveyId, $courseId);\n\n        //Survey is anonymous?\n        $result = Database::query(sprintf(\"SELECT anonymous FROM $c_survey WHERE survey_id = %d\", $surveyId));\n        $row = Database::fetch_array($result);\n        $anonymous = ($row['anonymous'] == 1) ? true : false;\n\n        $table = [];\n        foreach ($users as $user) {\n            $data = [\n                'lastname' => ($anonymous ? '***' : $user[1]),\n                'firstname' => ($anonymous ? '***' : $user[2]),\n                'username' => ($anonymous ? '***' : $user[3]),\n            ];\n\n            //Get questions by user\n            $sql = \"SELECT sa.question_id, sa.option_id, sqo.option_text, sq.type\n                    FROM $c_survey_answer sa\n                    INNER JOIN $c_survey_question sq\n                    ON sq.question_id = sa.question_id\n                    LEFT JOIN $c_survey_question_option sqo\n                    ON\n                      sqo.c_id = sa.c_id AND\n                      sqo.question_id = sq.question_id AND\n                      sqo.question_option_id = sa.option_id AND\n                      sqo.survey_id = sq.survey_id\n                    WHERE\n                      sa.survey_id = %d AND\n                      sa.c_id = %d AND\n                      sa.user = %d\n            \"; //. $where_survey;\n            $sql_query = sprintf($sql, $surveyId, $courseId, $user['user_id']);\n\n            $result = Database::query($sql_query);\n\n            $user_questions = [];\n            while ($row = Database::fetch_array($result)) {\n                $user_questions[$row['question_id']] = $row;\n            }\n\n            //Match course lessons with user progress\n            foreach ($questions as $question_id => $question) {\n                $option_text = 'option_text';\n                if ($user_questions[$question_id]['type'] == 'open') {\n                    $option_text = 'option_id';\n                }\n                $data[$question_id] = $user_questions[$question_id][$option_text];\n            }\n\n            $table[] = $data;\n        }\n\n        return $table;\n    }\n\n    /**\n     * Gets the progress of the given session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     * @param array options order and limit keys\n     *\n     * @return array table with user name, lp name, progress\n     */\n    public static function get_session_progress(\n        $sessionId,\n        $courseId,\n        $date_from,\n        $date_to,\n        $options\n    ) {\n        $sessionId = (int) $sessionId;\n\n        $getAllSessions = false;\n        if (empty($sessionId)) {\n            $sessionId = 0;\n            $getAllSessions = true;\n        }\n\n        //tables\n        $session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $workTableAssignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n        $tbl_course_lp = Database::get_course_table(TABLE_LP_MAIN);\n        $wiki = Database::get_course_table(TABLE_WIKI);\n        $table_stats_default = Database::get_main_table(TABLE_STATISTIC_TRACK_E_DEFAULT);\n        $table_stats_access = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ACCESS);\n\n        $course = api_get_course_info_by_id($courseId);\n        $where = \" WHERE c_id = '%s' AND s.status <> 2 \";\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        //TODO, fix create report without session\n        $queryVariables = [$course['real_id']];\n        if (!empty($sessionId)) {\n            $where .= ' AND session_id = %s';\n            $queryVariables[] = $sessionId;\n            $sql = \"SELECT\n                        u.user_id, u.lastname, u.firstname, u.username,\n                        u.email, s.c_id, s.session_id\n                    FROM $session_course_user s\n                    INNER JOIN $user u\n                    ON u.user_id = s.user_id\n                    $where $order $limit\";\n        } else {\n            $sql = \"SELECT\n                        u.user_id, u.lastname, u.firstname, u.username,\n                        u.email, s.c_id, s.session_id\n                    FROM $session_course_user s\n                    INNER JOIN $user u ON u.user_id = s.user_id\n                    $where $order $limit\";\n        }\n\n        $sql_query = vsprintf($sql, $queryVariables);\n        $rs = Database::query($sql_query);\n        while ($user = Database::fetch_array($rs)) {\n            $users[$user['user_id']] = $user;\n        }\n\n        /**\n         *  Lessons.\n         */\n        $sql = \"SELECT * FROM $tbl_course_lp WHERE c_id = %s \"; //AND session_id = %s\n        $sql_query = sprintf($sql, $course['real_id']);\n        $result = Database::query($sql_query);\n        $arrLesson = [[]];\n        while ($row = Database::fetch_array($result)) {\n            if (empty($arrLesson[$row['session_id']]['lessons_total'])) {\n                $arrLesson[$row['session_id']]['lessons_total'] = 1;\n            } else {\n                $arrLesson[$row['session_id']]['lessons_total']++;\n            }\n        }\n\n        /**\n         *  Exercises.\n         */\n        $exercises = ExerciseLib::get_all_exercises(\n            $course,\n            $sessionId,\n            false,\n            '',\n            $getAllSessions\n        );\n        $exercises_total = count($exercises);\n\n        /**\n         *  Assignments.\n         */\n        //total\n        $params = [$course['real_id']];\n        if ($getAllSessions) {\n            $sql = \"SELECT count(w.id) as count\n                    FROM $workTable w\n                    LEFT JOIN $workTableAssignment a\n                    ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                    WHERE\n                        w.c_id = %s AND\n                        parent_id = 0 AND\n                        active IN (1, 0)\";\n        } else {\n            $sql = \"SELECT count(w.id) as count\n                    FROM $workTable w\n                    LEFT JOIN $workTableAssignment a\n                    ON (a.publication_id = w.id AND a.c_id = w.c_id)\n                    WHERE\n                        w.c_id = %s AND\n                        parent_id = 0 AND\n                        active IN (1, 0)\";\n\n            if (empty($sessionId)) {\n                $sql .= ' AND w.session_id = NULL ';\n            } else {\n                $sql .= ' AND w.session_id = %s ';\n                $params[] = $sessionId;\n            }\n        }\n\n        $sql_query = vsprintf($sql, $params);\n        $result = Database::query($sql_query);\n        $row = Database::fetch_array($result);\n        $assignments_total = $row['count'];\n\n        /**\n         * Wiki.\n         */\n        if ($getAllSessions) {\n            $sql = \"SELECT count(distinct page_id)  as count FROM $wiki\n                    WHERE c_id = %s\";\n        } else {\n            $sql = \"SELECT count(distinct page_id)  as count FROM $wiki\n                    WHERE c_id = %s and session_id = %s\";\n        }\n        $sql_query = sprintf($sql, $course['real_id'], $sessionId);\n        $result = Database::query($sql_query);\n        $row = Database::fetch_array($result);\n        $wiki_total = $row['count'];\n\n        /**\n         * Surveys.\n         */\n        $survey_user_list = [];\n        $survey_list = SurveyManager::get_surveys($course['code'], $sessionId);\n\n        $surveys_total = count($survey_list);\n        foreach ($survey_list as $survey) {\n            $user_list = SurveyManager::get_people_who_filled_survey(\n                $survey['survey_id'],\n                false,\n                $course['real_id']\n            );\n            foreach ($user_list as $user_id) {\n                isset($survey_user_list[$user_id]) ? $survey_user_list[$user_id]++ : $survey_user_list[$user_id] = 1;\n            }\n        }\n\n        /**\n         * Forums.\n         */\n        $forums_total = CourseManager::getCountForum(\n            $course['real_id'],\n            $sessionId,\n            $getAllSessions\n        );\n\n        //process table info\n        foreach ($users as $user) {\n            //Course description\n            $sql = \"SELECT count(*) as count\n                    FROM $table_stats_access\n                    WHERE access_tool = 'course_description'\n                    AND c_id = '%s'\n                    AND access_session_id = %s\n                    AND access_user_id = %s \";\n            $sql_query = sprintf($sql, $course['real_id'], $user['id_session'], $user['user_id']);\n\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n            $course_description_progress = ($row['count'] > 0) ? 100 : 0;\n\n            if (!empty($arrLesson[$user['id_session']]['lessons_total'])) {\n                $lessons_total = $arrLesson[$user['id_session']]['lessons_total'];\n            } else {\n                $lessons_total = !empty($arrLesson[0]['lessons_total']) ? $arrLesson[0]['lessons_total'] : 0;\n            }\n\n            //Lessons\n            //TODO: Lessons done and left is calculated by progress per item in lesson, maybe we should calculate it only per completed lesson?\n            $lessons_progress = Tracking::get_avg_student_progress(\n                $user['user_id'],\n                $course['code'],\n                [],\n                $user['id_session']\n            );\n            $lessons_done = ($lessons_progress * $lessons_total) / 100;\n            $lessons_left = $lessons_total - $lessons_done;\n\n            // Exercises\n            $exercises_progress = str_replace(\n                '%',\n                '',\n                Tracking::get_exercise_student_progress(\n                    $exercises,\n                    $user['user_id'],\n                    $course['real_id'],\n                    $user['id_session']\n                )\n            );\n            $exercises_done = round(($exercises_progress * $exercises_total) / 100);\n            $exercises_left = $exercises_total - $exercises_done;\n\n            //Assignments\n            $assignments_done = Tracking::count_student_assignments($user['user_id'], $course['code'], $user['id_session']);\n            $assignments_left = $assignments_total - $assignments_done;\n            if (!empty($assignments_total)) {\n                $assignments_progress = round((($assignments_done * 100) / $assignments_total), 2);\n            } else {\n                $assignments_progress = 0;\n            }\n\n            // Wiki\n            // total revisions per user\n            $sql = \"SELECT count(*) as count\n                    FROM $wiki\n                    WHERE c_id = %s and session_id = %s and user_id = %s\";\n            $sql_query = sprintf($sql, $course['real_id'], $user['id_session'], $user['user_id']);\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n            $wiki_revisions = $row['count'];\n            //count visited wiki pages\n            $sql = \"SELECT count(distinct default_value) as count\n                    FROM $table_stats_default\n                    WHERE\n                        default_user_id = %s AND\n                        default_event_type = 'wiki_page_view' AND\n                        default_value_type = 'wiki_page_id' AND\n                        c_id = %s\n                    \";\n            $sql_query = sprintf($sql, $user['user_id'], $course['real_id']);\n            $result = Database::query($sql_query);\n            $row = Database::fetch_array($result);\n\n            $wiki_read = $row['count'];\n            $wiki_unread = $wiki_total - $wiki_read;\n            if (!empty($wiki_total)) {\n                $wiki_progress = round((($wiki_read * 100) / $wiki_total), 2);\n            } else {\n                $wiki_progress = 0;\n            }\n\n            //Surveys\n            $surveys_done = (isset($survey_user_list[$user['user_id']]) ? $survey_user_list[$user['user_id']] : 0);\n            $surveys_left = $surveys_total - $surveys_done;\n            if (!empty($surveys_total)) {\n                $surveys_progress = round((($surveys_done * 100) / $surveys_total), 2);\n            } else {\n                $surveys_progress = 0;\n            }\n\n            //Forums\n            $forums_done = CourseManager::getCountForumPerUser(\n                $user['user_id'],\n                $course['real_id'],\n                $user['id_session']\n            );\n            $forums_left = $forums_total - $forums_done;\n            if (!empty($forums_total)) {\n                $forums_progress = round((($forums_done * 100) / $forums_total), 2);\n            } else {\n                $forums_progress = 0;\n            }\n\n            // Overall Total\n            $overall_total = ($course_description_progress + $exercises_progress + $forums_progress + $assignments_progress + $wiki_progress + $surveys_progress) / 6;\n\n            $link = '<a href=\"'.api_get_path(WEB_CODE_PATH).'mySpace/myStudents.php?student='.$user[0].'&details=true&course='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkForum = '<a href=\"'.api_get_path(WEB_CODE_PATH).'forum/index.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkWork = '<a href=\"'.api_get_path(WEB_CODE_PATH).'work/work.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n            $linkWiki = '<a href=\"'.api_get_path(WEB_CODE_PATH).'wiki/index.php?cidReq='.$course['code'].'&session_id='.$user['id_session'].'&action=statistics\"> %s </a>';\n            $linkSurvey = '<a href=\"'.api_get_path(WEB_CODE_PATH).'survey/survey_list.php?cidReq='.$course['code'].'&id_session='.$user['id_session'].'\"> %s </a>';\n\n            $table[] = [\n                'lastname' => $user[1],\n                'firstname' => $user[2],\n                'username' => $user[3],\n                //'profile'   => '',\n                'total' => round($overall_total, 2).'%',\n                'courses' => sprintf($link, $course_description_progress.'%'),\n                'lessons' => sprintf($link, $lessons_progress.'%'),\n                'exercises' => sprintf($link, $exercises_progress.'%'),\n                'forums' => sprintf($link, $forums_progress.'%'),\n                'homeworks' => sprintf($link, $assignments_progress.'%'),\n                'wikis' => sprintf($link, $wiki_progress.'%'),\n                'surveys' => sprintf($link, $surveys_progress.'%'),\n                //course description\n                'course_description_progress' => $course_description_progress.'%',\n                //lessons\n                'lessons_total' => sprintf($link, $lessons_total),\n                'lessons_done' => sprintf($link, $lessons_done),\n                'lessons_left' => sprintf($link, $lessons_left),\n                'lessons_progress' => sprintf($link, $lessons_progress.'%'),\n                //exercises\n                'exercises_total' => sprintf($link, $exercises_total),\n                'exercises_done' => sprintf($link, $exercises_done),\n                'exercises_left' => sprintf($link, $exercises_left),\n                'exercises_progress' => sprintf($link, $exercises_progress.'%'),\n                //forums\n                'forums_total' => sprintf($linkForum, $forums_total),\n                'forums_done' => sprintf($linkForum, $forums_done),\n                'forums_left' => sprintf($linkForum, $forums_left),\n                'forums_progress' => sprintf($linkForum, $forums_progress.'%'),\n                //assignments\n                'assignments_total' => sprintf($linkWork, $assignments_total),\n                'assignments_done' => sprintf($linkWork, $assignments_done),\n                'assignments_left' => sprintf($linkWork, $assignments_left),\n                'assignments_progress' => sprintf($linkWork, $assignments_progress.'%'),\n                //wiki\n                'wiki_total' => sprintf($linkWiki, $wiki_total),\n                'wiki_revisions' => sprintf($linkWiki, $wiki_revisions),\n                'wiki_read' => sprintf($linkWiki, $wiki_read),\n                'wiki_unread' => sprintf($linkWiki, $wiki_unread),\n                'wiki_progress' => sprintf($linkWiki, $wiki_progress.'%'),\n                //survey\n                'surveys_total' => sprintf($linkSurvey, $surveys_total),\n                'surveys_done' => sprintf($linkSurvey, $surveys_done),\n                'surveys_left' => sprintf($linkSurvey, $surveys_left),\n                'surveys_progress' => sprintf($linkSurvey, $surveys_progress.'%'),\n            ];\n        }\n\n        return $table;\n    }\n\n    /**\n     * Get the ip, total of clicks, login date and time logged in for all user, in one session.\n     *\n     * @todo track_e_course_access table should have ip so we dont have to look for it in track_e_login\n     *\n     * @author C\u00e9sar Perales <cesar.perales@beeznest.com>, Beeznest Team\n     *\n     * @version 1.9.6\n     */\n    public static function get_user_data_access_tracking_overview(\n        $sessionId,\n        $courseId = 0,\n        $studentId = 0,\n        $profile = '',\n        $date_from = '',\n        $date_to = '',\n        $options = []\n    ) {\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n        $studentId = intval($studentId);\n        $profile = intval($profile);\n        $date_from = Database::escape_string($date_from);\n        $date_to = Database::escape_string($date_to);\n\n        // database table definition\n        $user = Database::get_main_table(TABLE_MAIN_USER);\n        $course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $track_e_login = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $track_e_course_access = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        global $export_csv;\n        if ($export_csv) {\n            $is_western_name_order = api_is_western_name_order(PERSON_NAME_DATA_EXPORT);\n        } else {\n            $is_western_name_order = api_is_western_name_order();\n        }\n\n        $where = null;\n        if (isset($sessionId) && !empty($sessionId)) {\n            $where = sprintf(\" WHERE a.session_id = %d\", $sessionId);\n        }\n        if (isset($courseId) && !empty($courseId)) {\n            $where .= sprintf(\" AND c.id = %d\", $courseId);\n        }\n        if (isset($studentId) && !empty($studentId)) {\n            $where .= sprintf(\" AND u.user_id = %d\", $studentId);\n        }\n        if (isset($profile) && !empty($profile)) {\n            $where .= sprintf(\" AND u.status = %d\", $profile);\n        }\n        if (!empty($date_to) && !empty($date_from)) {\n            $where .= sprintf(\n                \" AND a.login_course_date >= '%s 00:00:00'\n                 AND a.login_course_date <= '%s 23:59:59'\",\n                $date_from,\n                $date_to\n            );\n        }\n\n        $limit = null;\n        if (!empty($options['limit'])) {\n            $limit = \" LIMIT \".$options['limit'];\n        }\n\n        if (!empty($options['where'])) {\n            $where .= ' '.$options['where'];\n        }\n\n        $order = null;\n        if (!empty($options['order'])) {\n            $order = \" ORDER BY \".$options['order'];\n        }\n\n        //TODO add course name\n        $sql = \"SELECT\n                a.login_course_date ,\n                u.username ,\n                \".($is_western_name_order ? \"\n                    u.firstname,\n                    u.lastname,\n                    \" : \"\n                    u.lastname,\n                    u.firstname,\n                \").\"\n                a.logout_course_date,\n                a.counter,\n                c.title,\n                c.code,\n                u.user_id,\n                a.session_id\n            FROM $track_e_course_access a\n            INNER JOIN $user u ON a.user_id = u.user_id\n            INNER JOIN $course c ON a.c_id = c.id\n            $where $order $limit\";\n        $result = Database::query(sprintf($sql, $sessionId, $courseId));\n\n        $data = [];\n        while ($user = Database::fetch_assoc($result)) {\n            $data[] = $user;\n        }\n\n        foreach ($data as $key => $info) {\n            $sql = \"SELECT\n                    name\n                    FROM $sessionTable\n                    WHERE\n                    id = {$info['session_id']}\";\n            $result = Database::query($sql);\n            $session = Database::fetch_assoc($result);\n\n            // building array to display\n            $return[] = [\n                'user_id' => $info['user_id'],\n                'logindate' => $info['login_course_date'],\n                'username' => $info['username'],\n                'firstname' => $info['firstname'],\n                'lastname' => $info['lastname'],\n                'clicks' => $info['counter'], //+ $clicks[$info['user_id']],\n                'ip' => '',\n                'timeLoggedIn' => gmdate(\"H:i:s\", strtotime($info['logout_course_date']) - strtotime($info['login_course_date'])),\n                'session' => $session['name'],\n            ];\n        }\n\n        foreach ($return as $key => $info) {\n            //Search for ip, we do less querys if we iterate the final array\n            $sql = sprintf(\n                \"SELECT user_ip FROM $track_e_login WHERE login_user_id = %d AND login_date < '%s' ORDER BY login_date DESC LIMIT 1\",\n                $info['user_id'],\n                $info['logindate']\n            ); //TODO add select by user too\n            $result = Database::query($sql);\n            $ip = Database::fetch_assoc($result);\n            //if no ip founded, we search the closest higher ip\n            if (empty($ip['user_ip'])) {\n                $sql = sprintf(\n                    \"SELECT user_ip FROM $track_e_login WHERE login_user_id = %d AND login_date > '%s'  ORDER BY login_date ASC LIMIT 1\",\n                    $info['user_id'],\n                    $info['logindate']\n                ); //TODO add select by user too\n                $result = Database::query($sql);\n                $ip = Database::fetch_assoc($result);\n            }\n            //add ip to final array\n            $return[$key]['ip'] = $ip['user_ip'];\n        }\n\n        return $return;\n    }\n\n    /**\n     * Creates a new course code based in given code.\n     *\n     * @param string $session_name\n     *                             <code>\n     *                             $wanted_code = 'curse' if there are in the DB codes like curse1 curse2 the function\n     *                             will return: course3 if the course code doest not exist in the DB the same course\n     *                             code will be returned\n     *                             </code>\n     *\n     * @return string wanted unused code\n     */\n    public static function generateNextSessionName($session_name)\n    {\n        $session_name_ok = !self::sessionNameExists($session_name);\n        if (!$session_name_ok) {\n            $table = Database::get_main_table(TABLE_MAIN_SESSION);\n            $session_name = Database::escape_string($session_name);\n            $sql = \"SELECT count(*) as count FROM $table\n                    WHERE name LIKE '$session_name%'\";\n            $result = Database::query($sql);\n            if (Database::num_rows($result) > 0) {\n                $row = Database::fetch_array($result);\n                $count = $row['count'] + 1;\n                $session_name = $session_name.'_'.$count;\n                $result = self::sessionNameExists($session_name);\n                if (!$result) {\n                    return $session_name;\n                }\n            }\n\n            return false;\n        }\n\n        return $session_name;\n    }\n\n    /**\n     * Edit a session.\n     *\n     * @author Carlos Vargas from existing code\n     *\n     * @param int    $id                           Session primary key\n     * @param string $name\n     * @param string $startDate\n     * @param string $endDate\n     * @param string $displayStartDate\n     * @param string $displayEndDate\n     * @param string $coachStartDate\n     * @param string $coachEndDate\n     * @param int    $coachId\n     * @param int    $sessionCategoryId\n     * @param int    $visibility\n     * @param string $description\n     * @param int    $showDescription\n     * @param int    $duration\n     * @param array  $extraFields\n     * @param int    $sessionAdminId\n     * @param bool   $sendSubscriptionNotification Optional. Whether send a mail notification to users being subscribed\n     * @param int    $status\n     *\n     * @return mixed\n     */\n    public static function edit_session(\n        $id,\n        $name,\n        $startDate,\n        $endDate,\n        $displayStartDate,\n        $displayEndDate,\n        $coachStartDate,\n        $coachEndDate,\n        $coachId,\n        $sessionCategoryId,\n        $visibility,\n        $description = null,\n        $showDescription = 0,\n        $duration = null,\n        $extraFields = [],\n        $sessionAdminId = 0,\n        $sendSubscriptionNotification = false,\n        $status = 0\n    ) {\n        $status = (int) $status;\n        $coachId = (int) $coachId;\n        $sessionCategoryId = (int) $sessionCategoryId;\n        $visibility = (int) $visibility;\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        if (empty($name)) {\n            Display::addFlash(\n                Display::return_message(get_lang('SessionNameIsRequired'), 'warning')\n            );\n\n            return false;\n        } elseif (empty($coachId)) {\n            Display::addFlash(\n                Display::return_message(get_lang('CoachIsRequired'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($startDate) &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($startDate, 'Y-m-d H:i:s')\n        ) {\n            Display::addFlash(\n                Display::return_message(get_lang('InvalidStartDate'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($endDate) &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i') &&\n            !api_is_valid_date($endDate, 'Y-m-d H:i:s')\n        ) {\n            Display::addFlash(\n                Display::return_message(get_lang('InvalidEndDate'), 'warning')\n            );\n\n            return false;\n        } elseif (!empty($startDate) && !empty($endDate) && $startDate >= $endDate) {\n            Display::addFlash(\n                Display::return_message(get_lang('StartDateShouldBeBeforeEndDate'), 'warning')\n            );\n\n            return false;\n        } else {\n            $sessionInfo = self::get_session_by_name($name);\n            $exists = false;\n\n            if (!empty($sessionInfo)) {\n                if ($sessionInfo['id'] != $id) {\n                    $exists = true;\n                }\n            }\n\n            if ($exists) {\n                Display::addFlash(\n                    Display::return_message(get_lang('SessionNameAlreadyExists'), 'warning')\n                );\n\n                return false;\n            } else {\n                $values = [\n                    'name' => $name,\n                    'duration' => $duration,\n                    'id_coach' => $coachId,\n                    'description' => $description,\n                    'show_description' => intval($showDescription),\n                    'visibility' => $visibility,\n                    'send_subscription_notification' => $sendSubscriptionNotification,\n                    'access_start_date' => null,\n                    'access_end_date' => null,\n                    'display_start_date' => null,\n                    'display_end_date' => null,\n                    'coach_access_start_date' => null,\n                    'coach_access_end_date' => null,\n                ];\n\n                if (!empty($sessionAdminId)) {\n                    $values['session_admin_id'] = $sessionAdminId;\n                }\n\n                if (!empty($startDate)) {\n                    $values['access_start_date'] = api_get_utc_datetime($startDate);\n                }\n\n                if (!empty($endDate)) {\n                    $values['access_end_date'] = api_get_utc_datetime($endDate);\n                }\n\n                if (!empty($displayStartDate)) {\n                    $values['display_start_date'] = api_get_utc_datetime($displayStartDate);\n                }\n\n                if (!empty($displayEndDate)) {\n                    $values['display_end_date'] = api_get_utc_datetime($displayEndDate);\n                }\n\n                if (!empty($coachStartDate)) {\n                    $values['coach_access_start_date'] = api_get_utc_datetime($coachStartDate);\n                }\n                if (!empty($coachEndDate)) {\n                    $values['coach_access_end_date'] = api_get_utc_datetime($coachEndDate);\n                }\n\n                $values['session_category_id'] = null;\n                if (!empty($sessionCategoryId)) {\n                    $values['session_category_id'] = $sessionCategoryId;\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $values['status'] = $status;\n                }\n\n                Database::update(\n                    $tbl_session,\n                    $values,\n                    ['id = ?' => $id]\n                );\n\n                if (!empty($extraFields)) {\n                    $extraFields['item_id'] = $id;\n                    $sessionFieldValue = new ExtraFieldValue('session');\n                    $sessionFieldValue->saveFieldValues($extraFields);\n                }\n\n                return $id;\n            }\n        }\n    }\n\n    /**\n     * Delete session.\n     *\n     * @author Carlos Vargas  from existing code\n     *\n     * @param array $id_checked an array to delete sessions\n     * @param bool  $from_ws    optional, true if the function is called\n     *                          by a webservice, false otherwise\n     *\n     * @return bool\n     * */\n    public static function delete($id_checked, $from_ws = false)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_url_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $tbl_item_properties = Database::get_course_table(TABLE_ITEM_PROPERTY);\n        $tbl_student_publication = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n        $tbl_student_publication_assignment = Database::get_course_table(TABLE_STUDENT_PUBLICATION_ASSIGNMENT);\n        $userGroupSessionTable = Database::get_main_table(TABLE_USERGROUP_REL_SESSION);\n        $trackCourseAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_COURSE_ACCESS);\n        $trackAccess = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ACCESS);\n        $tbl_learnpath = Database::get_course_table(TABLE_LP_MAIN);\n        $tbl_dropbox = Database::get_course_table(TABLE_DROPBOX_FILE);\n        $trackEExercises = Database::get_main_table(TABLE_STATISTIC_TRACK_E_EXERCISES);\n        $trackEAttempt = Database::get_main_table(TABLE_STATISTIC_TRACK_E_ATTEMPT);\n\n        $ticket = Database::get_main_table(TABLE_TICKET_TICKET);\n        $em = Database::getManager();\n        $userId = api_get_user_id();\n\n        // If this session is involved in any sequence, cancel deletion and ask\n        // for the sequence update before deleting.\n        /** @var SequenceResourceRepository $repo */\n        $repo = Database::getManager()->getRepository('ChamiloCoreBundle:SequenceResource');\n        $sequenceResource = $repo->findRequirementForResource(\n            $id_checked,\n            SequenceResource::SESSION_TYPE\n        );\n\n        if ($sequenceResource) {\n            Display::addFlash(\n                Display::return_message(\n                    get_lang('ThereIsASequenceResourceLinkedToThisSessionYouNeedToDeleteItFirst'),\n                    'error'\n                )\n            );\n\n            return false;\n        }\n\n        // If the $id_checked param is an array, split it into individual\n        // sessions deletion.\n        if (is_array($id_checked)) {\n            foreach ($id_checked as $sessionId) {\n                self::delete($sessionId);\n            }\n        } else {\n            $id_checked = intval($id_checked);\n        }\n\n        // Check permissions from the person launching the deletion.\n        // If the call is issued from a web service or automated process,\n        // we assume the caller checks for permissions ($from_ws).\n        if (self::allowed($id_checked) && !$from_ws) {\n            $qb = $em\n                ->createQuery('\n                    SELECT s.sessionAdminId FROM ChamiloCoreBundle:Session s\n                    WHERE s.id = ?1\n                ')\n                ->setParameter(1, $id_checked);\n\n            $res = $qb->getSingleScalarResult();\n\n            if ($res != $userId && !api_is_platform_admin()) {\n                api_not_allowed(true);\n            }\n        }\n\n        $sessionInfo = api_get_session_info($id_checked);\n\n        // Delete documents and assignments inside a session\n        $courses = self::getCoursesInSession($id_checked);\n        foreach ($courses as $courseId) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n            // Delete documents\n            DocumentManager::deleteDocumentsFromSession($courseInfo, $id_checked);\n\n            // Delete assignments\n            $works = Database::select(\n                '*',\n                $tbl_student_publication,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            $currentCourseRepositorySys = api_get_path(SYS_COURSE_PATH).$courseInfo['path'].'/';\n            foreach ($works as $index => $work) {\n                if ($work['filetype'] = 'folder') {\n                    Database::query(\"DELETE FROM $tbl_student_publication_assignment WHERE publication_id = $index\");\n                }\n                my_delete($currentCourseRepositorySys.'/'.$work['url']);\n            }\n\n            // Delete learning paths\n            $learnpaths = Database::select(\n                'iid',\n                $tbl_learnpath,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            $courseInfo = api_get_course_info_by_id($courseId);\n            foreach ($learnpaths as $lpData) {\n                $lp = new learnpath($courseInfo['code'], $lpData['iid'], $userId);\n                $lp->delete($courseInfo, $lpData['iid'], true);\n                unset($lp);\n            }\n\n            // Delete dropbox documents\n            $dropboxes = Database::select(\n                'iid',\n                $tbl_dropbox,\n                [\n                    'where' => ['session_id = ? AND c_id = ?' => [$id_checked, $courseId]],\n                ]\n            );\n            require_once __DIR__.'/../../dropbox/dropbox_functions.inc.php';\n            foreach ($dropboxes as $dropbox) {\n                $dropboxPerson = new Dropbox_Person(\n                    $userId,\n                    true,\n                    false,\n                    $courseId,\n                    $id_checked\n                );\n                $dropboxPerson->deleteReceivedWork($dropbox['iid'], $courseId, $id_checked);\n                $dropboxPerson->deleteSentWork($dropbox['iid'], $courseId, $id_checked);\n            }\n\n            // TODO: Delete audio files from test answers\n            $attempts = Database::select(\n                ['id', 'user_id', 'exe_id'],\n                $trackEAttempt,\n                [\n                    'where' => [\n                        'session_id = ? AND c_id = ? AND (filename IS NOT NULL AND filename != \\'\\')' => [\n                            $id_checked,\n                            $courseId,\n                        ],\n                    ],\n                ]\n            );\n            foreach ($attempts as $attempt) {\n                $oral = new OralExpression();\n                $oral->initFile($id_checked, $attempt['user_id'], 0, $attempt['exe_id'], $courseId);\n                $filename = $oral->getAbsoluteFilePath(true);\n                my_delete($filename);\n            }\n        }\n\n        // Class\n        $sql = \"DELETE FROM $userGroupSessionTable\n                WHERE session_id IN($id_checked)\";\n        Database::query($sql);\n\n        Database::query(\"DELETE FROM $tbl_student_publication WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_course WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_course_rel_user WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_session_rel_user WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_item_properties WHERE session_id IN ($id_checked)\");\n        Database::query(\"DELETE FROM $tbl_url_session WHERE session_id IN($id_checked)\");\n\n        Database::query(\"DELETE FROM $trackCourseAccess WHERE session_id IN($id_checked)\");\n        Database::query(\"DELETE FROM $trackAccess WHERE access_session_id IN($id_checked)\");\n\n        if (api_get_configuration_value('allow_lp_subscription_to_usergroups')) {\n            $tableGroup = Database::get_course_table(TABLE_LP_REL_USERGROUP);\n            Database::query(\"DELETE FROM $tableGroup WHERE session_id IN($id_checked)\");\n            $tableGroup = Database::get_course_table(TABLE_LP_CATEGORY_REL_USERGROUP);\n            Database::query(\"DELETE FROM $tableGroup WHERE session_id IN($id_checked)\");\n        }\n\n        $sql = \"UPDATE $ticket SET session_id = NULL WHERE session_id IN ($id_checked)\";\n        Database::query($sql);\n\n        $app_plugin = new AppPlugin();\n        $app_plugin->performActionsWhenDeletingItem('session', $id_checked);\n\n        $sql = \"DELETE FROM $tbl_session WHERE id IN ($id_checked)\";\n        Database::query($sql);\n\n        $extraFieldValue = new ExtraFieldValue('session');\n        $extraFieldValue->deleteValuesByItem($id_checked);\n\n        $repo->deleteResource(\n            $id_checked,\n            SequenceResource::SESSION_TYPE\n        );\n\n        // Add event to system log\n        Event::addEvent(\n            LOG_SESSION_DELETE,\n            LOG_SESSION_ID,\n            $sessionInfo['name'].' - id:'.$id_checked,\n            api_get_utc_datetime(),\n            $userId\n        );\n\n        return true;\n    }\n\n    /**\n     * @param int $id promotion id\n     *\n     * @return bool\n     */\n    public static function clear_session_ref_promotion($id)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $id = intval($id);\n        $sql = \"UPDATE $tbl_session\n                SET promotion_id = 0\n                WHERE promotion_id = $id\";\n        if (Database::query($sql)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Subscribes students to the given session and optionally (default)\n     * unsubscribes previous users.\n     *\n     * @author Carlos Vargas from existing code\n     * @author Julio Montoya. Cleaning code.\n     *\n     * @param int   $sessionId\n     * @param array $userList\n     * @param int   $session_visibility\n     * @param bool  $empty_users\n     * @param bool  $registerUsersToAllCourses\n     *\n     * @return bool\n     */\n    public static function subscribeUsersToSession(\n        $sessionId,\n        $userList,\n        $session_visibility = SESSION_VISIBLE_READ_ONLY,\n        $empty_users = true,\n        $registerUsersToAllCourses = true\n    ) {\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return false;\n        }\n\n        foreach ($userList as $intUser) {\n            if ($intUser != strval(intval($intUser))) {\n                return false;\n            }\n        }\n\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $session = api_get_session_entity($sessionId);\n\n        // from function parameter\n        if (empty($session_visibility)) {\n            $session_visibility = $session->getVisibility();\n            //default status loaded if empty\n            // by default readonly 1\n            if (empty($session_visibility)) {\n                $session_visibility = SESSION_VISIBLE_READ_ONLY;\n            }\n        } else {\n            if (!in_array($session_visibility, [SESSION_VISIBLE_READ_ONLY, SESSION_VISIBLE, SESSION_INVISIBLE])) {\n                $session_visibility = SESSION_VISIBLE_READ_ONLY;\n            }\n        }\n\n        $sql = \"SELECT user_id FROM $tbl_session_rel_course_rel_user\n                WHERE session_id = $sessionId AND status = 0\";\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        $sql = \"SELECT c_id FROM $tbl_session_rel_course\n                WHERE session_id = $sessionId\";\n        $result = Database::query($sql);\n        $course_list = [];\n        while ($row = Database::fetch_array($result)) {\n            $course_list[] = $row['c_id'];\n        }\n\n        if ($session->getSendSubscriptionNotification() &&\n            is_array($userList)\n        ) {\n            // Sending emails only\n            foreach ($userList as $user_id) {\n                if (in_array($user_id, $existingUsers)) {\n                    continue;\n                }\n\n                $tplSubject = new Template(\n                    null,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false\n                );\n                $layoutSubject = $tplSubject->get_template(\n                    'mail/subject_subscription_to_session_confirmation.tpl'\n                );\n                $subject = $tplSubject->fetch($layoutSubject);\n                $user_info = api_get_user_info($user_id);\n\n                $tplContent = new Template(\n                    null,\n                    false,\n                    false,\n                    false,\n                    false,\n                    false\n                );\n                // Variables for default template\n                $tplContent->assign('complete_name', stripslashes($user_info['complete_name']));\n                $tplContent->assign('session_name', $session->getName());\n                $tplContent->assign('session_coach', $session->getGeneralCoach()->getCompleteName());\n                $layoutContent = $tplContent->get_template(\n                    'mail/content_subscription_to_session_confirmation.tpl'\n                );\n\n                if (api_get_configuration_value('email_template_subscription_to_session_confirmation_username')) {\n                    $username = sprintf(\n                        get_lang('YourUsernameToAccessIsX'),\n                        stripslashes($user_info['username']));\n\n                    $tplContent->assign('username', $username);\n                }\n\n                if (api_get_configuration_value('email_template_subscription_to_session_confirmation_lost_password')) {\n                    $urlLostPw = api_get_path(WEB_CODE_PATH).'auth/lostPassword.php';\n\n                    $forgotPassword = sprintf(\n                        get_lang('InstructionsLostPasswordWithLinkX'),\n                        $urlLostPw);\n\n                    $tplContent->assign('lostPassword', $forgotPassword);\n                }\n\n                $content = $tplContent->fetch($layoutContent);\n\n                api_mail_html(\n                    $user_info['complete_name'],\n                    $user_info['mail'],\n                    $subject,\n                    $content,\n                    api_get_person_name(\n                        api_get_setting('administratorName'),\n                        api_get_setting('administratorSurname')\n                    ),\n                    api_get_setting('emailAdministrator')\n                );\n            }\n        }\n\n        if ($registerUsersToAllCourses) {\n            foreach ($course_list as $courseId) {\n                // for each course in the session\n                $courseId = (int) $courseId;\n\n                $sql = \"SELECT DISTINCT user_id\n                        FROM $tbl_session_rel_course_rel_user\n                        WHERE\n                            session_id = $sessionId AND\n                            c_id = $courseId AND\n                            status = 0\n                        \";\n                $result = Database::query($sql);\n                $existingUsers = [];\n                while ($row = Database::fetch_array($result)) {\n                    $existingUsers[] = $row['user_id'];\n                }\n\n                // Delete existing users\n                if ($empty_users) {\n                    foreach ($existingUsers as $existing_user) {\n                        if (!in_array($existing_user, $userList)) {\n                            self::unSubscribeUserFromCourseSession($existing_user, $courseId, $sessionId);\n                        }\n                    }\n                }\n\n                $usersToSubscribeInCourse = array_filter(\n                    $userList,\n                    function ($userId) use ($existingUsers) {\n                        return !in_array($userId, $existingUsers);\n                    }\n                );\n\n                self::insertUsersInCourse(\n                    $usersToSubscribeInCourse,\n                    $courseId,\n                    $sessionId,\n                    ['visibility' => $session_visibility],\n                    false\n                );\n            }\n        }\n\n        // Delete users from the session\n        if (true === $empty_users) {\n            $sql = \"DELETE FROM $tbl_session_rel_user\n                    WHERE\n                      session_id = $sessionId AND\n                      relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n            // Don't reset session_rel_user.registered_at of users that will be registered later anyways.\n            if (!empty($userList)) {\n                $avoidDeleteThisUsers = \" AND user_id NOT IN ('\".implode(\"','\", $userList).\"')\";\n                $sql .= $avoidDeleteThisUsers;\n            }\n            Event::addEvent(\n                LOG_SESSION_DELETE_USER,\n                LOG_USER_ID,\n                'all',\n                api_get_utc_datetime(),\n                api_get_user_id(),\n                null,\n                $sessionId\n            );\n            Database::query($sql);\n        }\n\n        // Insert missing users into session\n        foreach ($userList as $enreg_user) {\n            $isUserSubscribed = self::isUserSubscribedAsStudent($sessionId, $enreg_user);\n            if ($isUserSubscribed === false) {\n                $enreg_user = (int) $enreg_user;\n                $sql = \"INSERT IGNORE INTO $tbl_session_rel_user (relation_type, session_id, user_id, registered_at)\n                        VALUES (0, $sessionId, $enreg_user, '\".api_get_utc_datetime().\"')\";\n                Database::query($sql);\n                Event::addEvent(\n                    LOG_SESSION_ADD_USER,\n                    LOG_USER_ID,\n                    $enreg_user,\n                    api_get_utc_datetime(),\n                    api_get_user_id(),\n                    null,\n                    $sessionId\n                );\n            }\n        }\n\n        // update number of users in the session\n        $sql = \"UPDATE $tbl_session\n                SET nbr_users = (SELECT count(user_id) FROM $tbl_session_rel_user WHERE session_id = $sessionId)\n                WHERE id = $sessionId\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Returns user list of the current users subscribed in the course-session.\n     *\n     * @param int   $sessionId\n     * @param array $courseInfo\n     * @param int   $status\n     *\n     * @return array\n     */\n    public static function getUsersByCourseSession(\n        $sessionId,\n        $courseInfo,\n        $status = null\n    ) {\n        $sessionId = (int) $sessionId;\n        $courseId = $courseInfo['real_id'];\n\n        if (empty($sessionId) || empty($courseId)) {\n            return [];\n        }\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE\n                    session_id = $sessionId AND\n                    c_id = $courseId\n                    $statusCondition\n                \";\n\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        return $existingUsers;\n    }\n\n    /**\n     * Returns user list of the current users subscribed in the course-session.\n     *\n     * @param array $sessionList\n     * @param array $courseList\n     * @param int   $status\n     * @param int   $start\n     * @param int   $limit\n     *\n     * @return array\n     */\n    public static function getUsersByCourseAndSessionList(\n        $sessionList,\n        $courseList,\n        $status = null,\n        $start = null,\n        $limit = null\n    ) {\n        if (empty($sessionList) || empty($courseList)) {\n            return [];\n        }\n        $sessionListToString = implode(\"','\", $sessionList);\n        $courseListToString = implode(\"','\", $courseList);\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE\n                    session_id IN ('$sessionListToString') AND\n                    c_id IN ('$courseListToString')\n                    $statusCondition\n                \";\n        if (!is_null($start) && !is_null($limit)) {\n            $start = (int) $start;\n            $limit = (int) $limit;\n            $sql .= \"LIMIT $start, $limit\";\n        }\n        $result = Database::query($sql);\n        $existingUsers = [];\n        while ($row = Database::fetch_array($result)) {\n            $existingUsers[] = $row['user_id'];\n        }\n\n        return $existingUsers;\n    }\n\n    /**\n     * Remove a list of users from a course-session.\n     *\n     * @param array $userList\n     * @param int   $sessionId\n     * @param array $courseInfo\n     * @param int   $status\n     * @param bool  $updateTotal\n     *\n     * @return bool\n     */\n    public static function removeUsersFromCourseSession(\n        $userList,\n        $sessionId,\n        $courseInfo,\n        $status = null,\n        $updateTotal = true\n    ) {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tableSessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId) || empty($userList) || empty($courseInfo)) {\n            return false;\n        }\n\n        is_array($courseInfo) ? $courseId = $courseInfo['real_id'] : $courseId = $courseInfo;\n\n        $statusCondition = null;\n        if (isset($status) && !is_null($status)) {\n            $status = (int) $status;\n            $statusCondition = \" AND status = $status\";\n        }\n\n        foreach ($userList as $userId) {\n            $userId = (int) $userId;\n            $sql = \"DELETE FROM $table\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId\n                        $statusCondition\n                    \";\n            Database::query($sql);\n\n            Event::addEvent(\n                LOG_SESSION_DELETE_USER_COURSE,\n                LOG_USER_ID,\n                $userId,\n                api_get_utc_datetime(),\n                api_get_user_id(),\n                $courseId,\n                $sessionId\n            );\n        }\n\n        if ($updateTotal) {\n            // Count users in this session-course relation\n            $sql = \"SELECT COUNT(user_id) as nbUsers\n                    FROM $table\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        status <> 2\";\n            $result = Database::query($sql);\n            [$userCount] = Database::fetch_array($result);\n\n            // update the session-course relation to add the users total\n            $sql = \"UPDATE $tableSessionCourse\n                    SET nbr_users = $userCount\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId\";\n            Database::query($sql);\n        }\n    }\n\n    /**\n     * Subscribe a user to an specific course inside a session.\n     *\n     * @param array  $user_list\n     * @param int    $session_id\n     * @param string $course_code\n     * @param int    $session_visibility\n     * @param bool   $removeUsersNotInList\n     *\n     * @return bool\n     */\n    public static function subscribe_users_to_session_course(\n        $user_list,\n        $session_id,\n        $course_code,\n        $session_visibility = SESSION_VISIBLE_READ_ONLY,\n        $removeUsersNotInList = false\n    ) {\n        if (empty($session_id) || empty($course_code)) {\n            return false;\n        }\n\n        $session_id = (int) $session_id;\n        $session_visibility = (int) $session_visibility;\n        $course_code = Database::escape_string($course_code);\n        $courseInfo = api_get_course_info($course_code);\n        $courseId = $courseInfo['real_id'];\n\n        if ($removeUsersNotInList) {\n            $currentUsers = self::getUsersByCourseSession($session_id, $courseInfo, 0);\n\n            if (!empty($user_list)) {\n                $userToDelete = array_diff($currentUsers, $user_list);\n            } else {\n                $userToDelete = $currentUsers;\n            }\n\n            if (!empty($userToDelete)) {\n                self::removeUsersFromCourseSession(\n                    $userToDelete,\n                    $session_id,\n                    $courseInfo,\n                    0,\n                    true\n                );\n            }\n        }\n\n        self::insertUsersInCourse(\n            $user_list,\n            $courseId,\n            $session_id,\n            ['visibility' => $session_visibility]\n        );\n    }\n\n    /**\n     * Unsubscribe user from session.\n     *\n     * @param int Session id\n     * @param int User id\n     *\n     * @return bool True in case of success, false in case of error\n     */\n    public static function unsubscribe_user_from_session($session_id, $user_id)\n    {\n        $session_id = (int) $session_id;\n        $user_id = (int) $user_id;\n\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $sql = \"DELETE FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $session_id AND\n                    user_id = $user_id AND\n                    relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n        $return = Database::affected_rows($result);\n\n        // Update number of users\n        $sql = \"UPDATE $tbl_session\n                SET nbr_users = nbr_users - $return\n                WHERE id = $session_id \";\n        Database::query($sql);\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_USER,\n            LOG_USER_ID,\n            $user_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            null,\n            $session_id\n        );\n\n        // Get the list of courses related to this session\n        $course_list = self::get_course_list_by_session_id($session_id);\n        if (!empty($course_list)) {\n            foreach ($course_list as $course) {\n                self::unSubscribeUserFromCourseSession($user_id, $course['id'], $session_id);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $courseId\n     * @param int $session_id\n     */\n    public static function unSubscribeUserFromCourseSession($user_id, $courseId, $session_id)\n    {\n        $user_id = (int) $user_id;\n        $courseId = (int) $courseId;\n        $session_id = (int) $session_id;\n\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        // Delete user from course\n        $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                WHERE session_id = $session_id AND c_id = $courseId AND user_id = $user_id\";\n        $result = Database::query($sql);\n\n        if (Database::affected_rows($result)) {\n            // Update number of users in this relation\n            $sql = \"UPDATE $tbl_session_rel_course SET\n                    nbr_users = nbr_users - 1\n                    WHERE session_id = $session_id AND c_id = $courseId\";\n            Database::query($sql);\n        }\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_USER_COURSE,\n            LOG_USER_ID,\n            $user_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            $courseId,\n            $session_id\n        );\n    }\n\n    /**\n     * Subscribes courses to the given session and optionally (default)\n     * unsubscribe previous users.\n     *\n     * @author Carlos Vargas from existing code\n     *\n     * @param int   $sessionId\n     * @param array $courseList                     List of courses int ids\n     * @param bool  $removeExistingCoursesWithUsers Whether to unsubscribe\n     *                                              existing courses and users (true, default) or not (false)\n     * @param bool  $copyEvaluation                 from base course to session course\n     * @param bool  $copyCourseTeachersAsCoach\n     * @param bool  $importAssignments\n     *\n     * @throws Exception\n     *\n     * @return bool False on failure, true otherwise\n     * */\n    public static function add_courses_to_session(\n        $sessionId,\n        $courseList,\n        $removeExistingCoursesWithUsers = true,\n        $copyEvaluation = false,\n        $copyCourseTeachersAsCoach = false,\n        $importAssignments = false\n    ) {\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId) || empty($courseList)) {\n            return false;\n        }\n\n        if ($importAssignments) {\n            require_once api_get_path(SYS_CODE_PATH).'work/work.lib.php';\n        }\n\n        $session = api_get_session_entity($sessionId);\n\n        if (!$session) {\n            return false;\n        }\n        $sessionVisibility = $session->getVisibility();\n\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        // Get list of courses subscribed to this session\n        $sql = \"SELECT c_id\n                FROM $tbl_session_rel_course\n                WHERE session_id = $sessionId\";\n        $rs = Database::query($sql);\n        $existingCourses = Database::store_result($rs);\n        $nbr_courses = count($existingCourses);\n\n        // Get list of users subscribed to this session\n        $sql = \"SELECT user_id\n                FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $sessionId AND\n                    relation_type<>\".SESSION_RELATION_TYPE_RRHH;\n        $result = Database::query($sql);\n        $user_list = Database::store_result($result);\n\n        // Remove existing courses from the session.\n        if ($removeExistingCoursesWithUsers === true && !empty($existingCourses)) {\n            foreach ($existingCourses as $existingCourse) {\n                if (!in_array($existingCourse['c_id'], $courseList)) {\n                    $sql = \"DELETE FROM $tbl_session_rel_course\n                            WHERE\n                                c_id = \".$existingCourse['c_id'].\" AND\n                                session_id = $sessionId\";\n                    Database::query($sql);\n\n                    $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                            WHERE\n                                c_id = \".$existingCourse['c_id'].\" AND\n                                session_id = $sessionId\";\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_DELETE_COURSE,\n                        LOG_COURSE_ID,\n                        $existingCourse['c_id'],\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        $existingCourse['c_id'],\n                        $sessionId\n                    );\n\n                    CourseManager::remove_course_ranking(\n                        $existingCourse['c_id'],\n                        $sessionId\n                    );\n                    $nbr_courses--;\n                }\n            }\n        }\n\n        $em = Database::getManager();\n\n        // Pass through the courses list we want to add to the session\n        foreach ($courseList as $courseId) {\n            $courseInfo = api_get_course_info_by_id($courseId);\n\n            // If course doesn't exists continue!\n            if (empty($courseInfo)) {\n                continue;\n            }\n\n            $exists = false;\n            // check if the course we want to add is already subscribed\n            foreach ($existingCourses as $existingCourse) {\n                if ($courseId == $existingCourse['c_id']) {\n                    $exists = true;\n                }\n            }\n\n            if (!$exists) {\n                // Copy gradebook categories and links (from base course)\n                // to the new course session\n                if ($copyEvaluation) {\n                    // it gets the main categories ordered by parent\n                    $cats = Category::load(null, null, $courseInfo['code'], null, null, null, 'ORDER BY parent_id ASC');\n                    if (!empty($cats)) {\n                        $sessionCategory = Category::load(\n                            null,\n                            null,\n                            $courseInfo['code'],\n                            null,\n                            null,\n                            $sessionId,\n                            false\n                        );\n\n                        $sessionCategoriesId = [];\n                        if (empty($sessionCategory)) {\n                            // It sets the values from the main categories to be copied\n                            foreach ($cats as $origCat) {\n                                $cat = new Category();\n                                $sessionName = $session->getName();\n                                $cat->set_name($origCat->get_name().' - '.get_lang('Session').' '.$sessionName);\n                                $cat->set_session_id($sessionId);\n                                $cat->set_course_code($origCat->get_course_code());\n                                $cat->set_description($origCat->get_description());\n                                $cat->set_parent_id($origCat->get_parent_id());\n                                $cat->set_weight($origCat->get_weight());\n                                $cat->set_visible(0);\n                                $cat->set_certificate_min_score($origCat->getCertificateMinScore());\n                                $cat->add();\n                                $sessionGradeBookCategoryId = $cat->get_id();\n                                $sessionCategoriesId[$origCat->get_id()] = $sessionGradeBookCategoryId;\n\n                                // it updates the new parent id\n                                if ($origCat->get_parent_id() > 0) {\n                                    $cat->updateParentId($sessionCategoriesId[$origCat->get_parent_id()], $sessionGradeBookCategoryId);\n                                }\n                            }\n                        } else {\n                            if (!empty($sessionCategory[0])) {\n                                $sessionCategoriesId[0] = $sessionCategory[0]->get_id();\n                            }\n                        }\n\n                        $categoryIdList = [];\n                        /** @var Category $cat */\n                        foreach ($cats as $cat) {\n                            $categoryIdList[$cat->get_id()] = $cat->get_id();\n                        }\n\n                        $newCategoryIdList = [];\n                        foreach ($cats as $cat) {\n                            $links = $cat->get_links(\n                                null,\n                                false,\n                                $courseInfo['code'],\n                                0\n                            );\n\n                            if (!empty($links)) {\n                                /** @var AbstractLink $link */\n                                foreach ($links as $link) {\n                                    $newCategoryId = isset($sessionCategoriesId[$link->getCategory()->get_id()]) ? $sessionCategoriesId[$link->getCategory()->get_id()] : $sessionCategoriesId[0];\n                                    $link->set_category_id($newCategoryId);\n                                    $link->add();\n                                }\n                            }\n\n                            $evaluationList = $cat->get_evaluations(\n                                null,\n                                false,\n                                $courseInfo['code'],\n                                0\n                            );\n\n                            if (!empty($evaluationList)) {\n                                /** @var Evaluation $evaluation */\n                                foreach ($evaluationList as $evaluation) {\n                                    $newCategoryId = isset($sessionCategoriesId[$evaluation->getCategory()->get_id()]) ? $sessionCategoriesId[$evaluation->getCategory()->get_id()] : $sessionCategoriesId[0];\n                                    $evaluation->set_category_id($newCategoryId);\n                                    $evaluation->add();\n                                }\n                            }\n                        }\n\n                        // Create\n                        DocumentManager::generateDefaultCertificate(\n                            $courseInfo,\n                            true,\n                            $sessionId\n                        );\n                    }\n                }\n\n                if ($importAssignments) {\n                    $workTable = Database::get_course_table(TABLE_STUDENT_PUBLICATION);\n                    $sql = \" SELECT * FROM $workTable\n                             WHERE active = 1 AND\n                                   c_id = $courseId AND\n                                   parent_id = 0 AND\n                                   (session_id IS NULL OR session_id = 0)\";\n                    $result = Database::query($sql);\n                    $workList = Database::store_result($result, 'ASSOC');\n\n                    foreach ($workList as $work) {\n                        $values = [\n                            'work_title' => $work['title'],\n                            'new_dir' => $work['url'].'_session_'.$sessionId,\n                            'description' => $work['description'],\n                            'qualification' => $work['qualification'],\n                            'allow_text_assignment' => $work['allow_text_assignment'],\n                        ];\n\n                        addDir(\n                            $values,\n                            api_get_user_id(),\n                            $courseInfo,\n                            0,\n                            $sessionId\n                        );\n                    }\n                }\n\n                // If the course isn't subscribed yet\n                $sql = \"INSERT INTO $tbl_session_rel_course (session_id, c_id, nbr_users, position)\n                        VALUES ($sessionId, $courseId, 0, 0)\";\n                Database::query($sql);\n\n                if (api_get_configuration_value('allow_skill_rel_items')) {\n                    $skillRelCourseRepo = $em->getRepository('ChamiloSkillBundle:SkillRelCourse');\n                    $items = $skillRelCourseRepo->findBy(['course' => $courseId, 'session' => null]);\n                    /** @var \\Chamilo\\SkillBundle\\Entity\\SkillRelCourse $item */\n                    foreach ($items as $item) {\n                        $exists = $skillRelCourseRepo->findOneBy(['course' => $courseId, 'session' => $session]);\n                        if (null === $exists) {\n                            $skillRelCourse = clone $item;\n                            $skillRelCourse->setSession($session);\n                            $em->persist($skillRelCourse);\n                        }\n                    }\n                    $em->flush();\n                }\n\n                Event::addEvent(\n                    LOG_SESSION_ADD_COURSE,\n                    LOG_COURSE_ID,\n                    $courseId,\n                    api_get_utc_datetime(),\n                    api_get_user_id(),\n                    $courseId,\n                    $sessionId\n                );\n\n                // We add the current course in the existing courses array,\n                // to avoid adding another time the current course\n                $existingCourses[] = ['c_id' => $courseId];\n                $nbr_courses++;\n\n                // Subscribe all the users from the session to this course inside the session\n                self::insertUsersInCourse(\n                    array_column($user_list, 'user_id'),\n                    $courseId,\n                    $sessionId,\n                    ['visibility' => $sessionVisibility]\n                );\n            }\n\n            if ($copyCourseTeachersAsCoach) {\n                $teachers = CourseManager::get_teacher_list_from_course_code($courseInfo['code']);\n                if (!empty($teachers)) {\n                    foreach ($teachers as $teacher) {\n                        self::updateCoaches(\n                            $sessionId,\n                            $courseId,\n                            [$teacher['user_id']],\n                            false\n                        );\n                    }\n                }\n            }\n        }\n\n        $sql = \"UPDATE $tbl_session SET nbr_courses = $nbr_courses WHERE id = $sessionId\";\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Unsubscribe course from a session.\n     *\n     * @param int $session_id\n     * @param int $course_id\n     *\n     * @return bool True in case of success, false otherwise\n     */\n    public static function unsubscribe_course_from_session($session_id, $course_id)\n    {\n        $session_id = (int) $session_id;\n        $course_id = (int) $course_id;\n\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        // Get course code\n        $course_code = CourseManager::get_course_code_from_course_id($course_id);\n\n        if (empty($course_code)) {\n            return false;\n        }\n\n        // Unsubscribe course\n        $sql = \"DELETE FROM $tbl_session_rel_course\n                WHERE c_id = $course_id AND session_id = $session_id\";\n        $result = Database::query($sql);\n        $nb_affected = Database::affected_rows($result);\n\n        $sql = \"DELETE FROM $tbl_session_rel_course_rel_user\n                WHERE c_id = $course_id AND session_id = $session_id\";\n        Database::query($sql);\n\n        Event::addEvent(\n            LOG_SESSION_DELETE_COURSE,\n            LOG_COURSE_ID,\n            $course_id,\n            api_get_utc_datetime(),\n            api_get_user_id(),\n            $course_id,\n            $session_id\n        );\n\n        if ($nb_affected > 0) {\n            // Update number of courses in the session\n            $sql = \"UPDATE $tbl_session SET nbr_courses= nbr_courses - $nb_affected\n                    WHERE id = $session_id\";\n            Database::query($sql);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates a new extra field for a given session.\n     *\n     * @param string $variable    Field's internal variable name\n     * @param int    $fieldType   Field's type\n     * @param string $displayText Field's language var name\n     * @param string $default     Field's default value\n     *\n     * @return int new extra field id\n     */\n    public static function create_session_extra_field(\n        $variable,\n        $fieldType,\n        $displayText,\n        $default = ''\n    ) {\n        $extraField = new ExtraFieldModel('session');\n        $params = [\n            'variable' => $variable,\n            'field_type' => $fieldType,\n            'display_text' => $displayText,\n            'default_value' => $default,\n        ];\n\n        return $extraField->save($params);\n    }\n\n    /**\n     * Update an extra field value for a given session.\n     *\n     * @param int    $sessionId Session ID\n     * @param string $variable  Field variable name\n     * @param string $value     Optional. Default field value\n     *\n     * @return bool|int An integer when register a new extra field. And boolean when update the extrafield\n     */\n    public static function update_session_extra_field_value($sessionId, $variable, $value = '')\n    {\n        $extraFieldValue = new ExtraFieldValue('session');\n        $params = [\n            'item_id' => $sessionId,\n            'variable' => $variable,\n            'value' => $value,\n        ];\n\n        return $extraFieldValue->save($params);\n    }\n\n    /**\n     * Checks the relationship between a session and a course.\n     *\n     * @param int $session_id\n     * @param int $courseId\n     *\n     * @return bool returns TRUE if the session and the course are related, FALSE otherwise\n     * */\n    public static function relation_session_course_exist($session_id, $courseId)\n    {\n        $tbl_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $return_value = false;\n        $sql = \"SELECT c_id FROM $tbl_session_course\n                WHERE\n                  session_id = \".intval($session_id).\" AND\n                  c_id = \".intval($courseId);\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            $return_value = true;\n        }\n\n        return $return_value;\n    }\n\n    /**\n     * Get the session information by name.\n     *\n     * @param string $name\n     *\n     * @return mixed false if the session does not exist, array if the session exist\n     */\n    public static function get_session_by_name($name)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $name = Database::escape_string(trim($name));\n        if (empty($name)) {\n            return false;\n        }\n\n        $sql = 'SELECT *\n\t\t        FROM '.$tbl_session.'\n\t\t        WHERE name = \"'.$name.'\"';\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return Database::fetch_array($result);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $name\n     *\n     * @return bool\n     */\n    public static function sessionNameExistBesidesMySession($sessionId, $name)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $name = Database::escape_string(trim($name));\n        $sessionId = (int) $sessionId;\n\n        if (empty($name)) {\n            return false;\n        }\n\n        $sql = \"SELECT *\n\t\t        FROM $table\n\t\t        WHERE name = '$name' AND id <> $sessionId \";\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Create a session category.\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>, from existing code\n     *\n     * @param string        name\n     * @param int        year_start\n     * @param int        month_start\n     * @param int        day_start\n     * @param int        year_end\n     * @param int        month_end\n     * @param int        day_end\n     *\n     * @return int session ID\n     * */\n    public static function create_category_session(\n        $sname,\n        $syear_start,\n        $smonth_start,\n        $sday_start,\n        $syear_end,\n        $smonth_end,\n        $sday_end\n    ) {\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $name = html_filter(trim($sname));\n        $year_start = intval($syear_start);\n        $month_start = intval($smonth_start);\n        $day_start = intval($sday_start);\n        $year_end = intval($syear_end);\n        $month_end = intval($smonth_end);\n        $day_end = intval($sday_end);\n\n        $date_start = \"$year_start-\".(($month_start < 10) ? \"0$month_start\" : $month_start).\"-\".(($day_start < 10) ? \"0$day_start\" : $day_start);\n        $date_end = \"$year_end-\".(($month_end < 10) ? \"0$month_end\" : $month_end).\"-\".(($day_end < 10) ? \"0$day_end\" : $day_end);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionCategoryNameIsRequired');\n\n            return $msg;\n        } elseif (!$month_start || !$day_start || !$year_start || !checkdate($month_start, $day_start, $year_start)) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!$month_end && !$day_end && !$year_end) {\n            $date_end = '';\n        } elseif (!$month_end || !$day_end || !$year_end || !checkdate($month_end, $day_end, $year_end)) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif ($date_start >= $date_end) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        }\n\n        $access_url_id = api_get_current_access_url_id();\n        $params = [\n            'name' => $name,\n            'date_start' => $date_start,\n            'access_url_id' => $access_url_id,\n        ];\n\n        if (!empty($date_end)) {\n            $params['date_end'] = $date_end;\n        }\n\n        $id = Database::insert($tbl_session_category, $params);\n\n        // Add event to system log\n        $user_id = api_get_user_id();\n        Event::addEvent(\n            LOG_SESSION_CATEGORY_CREATE,\n            LOG_SESSION_CATEGORY_ID,\n            $id,\n            api_get_utc_datetime(),\n            $user_id\n        );\n\n        return $id;\n    }\n\n    /**\n     * Edit a sessions category.\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>,from existing code\n     *\n     * @param int        id\n     * @param string        name\n     * @param int        year_start\n     * @param int        month_start\n     * @param int        day_start\n     * @param int        year_end\n     * @param int        month_end\n     * @param int        day_end\n     *\n     * @return bool\n     *              The parameter id is a primary key\n     * */\n    public static function edit_category_session(\n        $id,\n        $sname,\n        $syear_start,\n        $smonth_start,\n        $sday_start,\n        $syear_end,\n        $smonth_end,\n        $sday_end\n    ) {\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $name = html_filter(trim($sname));\n        $year_start = intval($syear_start);\n        $month_start = intval($smonth_start);\n        $day_start = intval($sday_start);\n        $year_end = intval($syear_end);\n        $month_end = intval($smonth_end);\n        $day_end = intval($sday_end);\n        $id = intval($id);\n        $date_start = \"$year_start-\".(($month_start < 10) ? \"0$month_start\" : $month_start).\"-\".(($day_start < 10) ? \"0$day_start\" : $day_start);\n        $date_end = \"$year_end-\".(($month_end < 10) ? \"0$month_end\" : $month_end).\"-\".(($day_end < 10) ? \"0$day_end\" : $day_end);\n\n        if (empty($name)) {\n            $msg = get_lang('SessionCategoryNameIsRequired');\n\n            return $msg;\n        } elseif (!$month_start || !$day_start || !$year_start || !checkdate($month_start, $day_start, $year_start)) {\n            $msg = get_lang('InvalidStartDate');\n\n            return $msg;\n        } elseif (!$month_end && !$day_end && !$year_end) {\n            $date_end = null;\n        } elseif (!$month_end || !$day_end || !$year_end || !checkdate($month_end, $day_end, $year_end)) {\n            $msg = get_lang('InvalidEndDate');\n\n            return $msg;\n        } elseif ($date_start >= $date_end) {\n            $msg = get_lang('StartDateShouldBeBeforeEndDate');\n\n            return $msg;\n        }\n        if ($date_end != null) {\n            $sql = \"UPDATE $tbl_session_category\n                    SET\n                        name = '\".Database::escape_string($name).\"',\n                        date_start = '$date_start' ,\n                        date_end = '$date_end'\n                    WHERE id= $id\";\n        } else {\n            $sql = \"UPDATE $tbl_session_category SET\n                        name = '\".Database::escape_string($name).\"',\n                        date_start = '$date_start',\n                        date_end = NULL\n                    WHERE id= $id\";\n        }\n        $result = Database::query($sql);\n\n        return $result ? true : false;\n    }\n\n    /**\n     * Delete sessions categories.\n     *\n     * @param array|int $categoryId\n     * @param bool      $deleteSessions Optional. Include delete session.\n     * @param bool      $fromWs         Optional. True if the function is called by a webservice, false otherwise.\n     *\n     * @return bool Nothing, or false on error\n     *              The parameters is a array to delete sessions\n     *\n     * @author Jhon Hinojosa <jhon.hinojosa@dokeos.com>, from existing code\n     */\n    public static function delete_session_category($categoryId, $deleteSessions = false, $fromWs = false)\n    {\n        $tblSessionCategory = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        if (is_array($categoryId)) {\n            $categoryId = array_map('intval', $categoryId);\n        } else {\n            $categoryId = [(int) $categoryId];\n        }\n\n        $categoryId = implode(', ', $categoryId);\n\n        if ($deleteSessions) {\n            $sql = \"SELECT id FROM $tblSession WHERE session_category_id IN ($categoryId)\";\n            $result = Database::query($sql);\n            while ($rows = Database::fetch_array($result)) {\n                $sessionId = $rows['id'];\n                self::delete($sessionId, $fromWs);\n            }\n        } else {\n            $sql = \"UPDATE $tblSession SET session_category_id = NULL WHERE session_category_id IN ($categoryId)\";\n            Database::query($sql);\n        }\n\n        $sql = \"DELETE FROM $tblSessionCategory WHERE id IN ($categoryId)\";\n        Database::query($sql);\n\n        // Add event to system log\n        Event::addEvent(\n            LOG_SESSION_CATEGORY_DELETE,\n            LOG_SESSION_CATEGORY_ID,\n            $categoryId,\n            api_get_utc_datetime(),\n            api_get_user_id()\n        );\n\n        return true;\n    }\n\n    /**\n     * Get a list of sessions of which the given conditions match with an = 'cond'.\n     *\n     * @param array $conditions          a list of condition example :\n     *                                   array('status' => STUDENT) or\n     *                                   array('s.name' => array('operator' => 'LIKE', value = '%$needle%'))\n     * @param array $order_by            a list of fields on which sort\n     * @param int   $urlId\n     * @param array $onlyThisSessionList\n     *\n     * @return array an array with all sessions of the platform\n     *\n     * @todo   optional course code parameter, optional sorting parameters...\n     */\n    public static function get_sessions_list(\n        $conditions = [],\n        $order_by = [],\n        $from = null,\n        $to = null,\n        $urlId = 0,\n        $onlyThisSessionList = []\n    ) {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $session_category_table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $user_table = Database::get_main_table(TABLE_MAIN_USER);\n        $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $session_course_table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $course_table = Database::get_main_table(TABLE_MAIN_COURSE);\n        $urlId = empty($urlId) ? api_get_current_access_url_id() : (int) $urlId;\n        $return_array = [];\n\n        $sql_query = \" SELECT\n                    DISTINCT(s.id),\n                    s.name,\n                    s.nbr_courses,\n                    s.access_start_date,\n                    s.access_end_date,\n                    u.firstname,\n                    u.lastname,\n                    sc.name as category_name,\n                    s.promotion_id\n\t\t\t\tFROM $session_table s\n\t\t\t\tINNER JOIN $user_table u ON s.id_coach = u.user_id\n\t\t\t\tINNER JOIN $table_access_url_rel_session ar ON ar.session_id = s.id\n\t\t\t\tLEFT JOIN  $session_category_table sc ON s.session_category_id = sc.id\n\t\t\t\tLEFT JOIN $session_course_table sco ON (sco.session_id = s.id)\n\t\t\t\tINNER JOIN $course_table c ON sco.c_id = c.id\n\t\t\t\tWHERE ar.access_url_id = $urlId \";\n\n        $availableFields = [\n            's.id',\n            's.name',\n            'c.id',\n        ];\n\n        $availableOperator = [\n            'like',\n            '>=',\n            '<=',\n            '=',\n        ];\n\n        if (count($conditions) > 0) {\n            foreach ($conditions as $field => $options) {\n                $operator = strtolower($options['operator']);\n                $value = Database::escape_string($options['value']);\n                if (in_array($field, $availableFields) && in_array($operator, $availableOperator)) {\n                    $sql_query .= ' AND '.$field.\" $operator '\".$value.\"'\";\n                }\n            }\n        }\n\n        if (!empty($onlyThisSessionList)) {\n            $onlyThisSessionList = array_map('intval', $onlyThisSessionList);\n            $onlyThisSessionList = implode(\"','\", $onlyThisSessionList);\n            $sql_query .= \" AND s.id IN ('$onlyThisSessionList') \";\n        }\n\n        $orderAvailableList = ['name'];\n        if (count($order_by) > 0) {\n            $order = null;\n            $direction = null;\n            if (isset($order_by[0]) && in_array($order_by[0], $orderAvailableList)) {\n                $order = $order_by[0];\n            }\n            if (isset($order_by[1]) && in_array(strtolower($order_by[1]), ['desc', 'asc'])) {\n                $direction = $order_by[1];\n            }\n\n            if (!empty($order)) {\n                $sql_query .= \" ORDER BY `$order` $direction \";\n            }\n        }\n\n        if (!is_null($from) && !is_null($to)) {\n            $to = (int) $to;\n            $from = (int) $from;\n            $sql_query .= \"LIMIT $from, $to\";\n        }\n\n        $sql_result = Database::query($sql_query);\n        if (Database::num_rows($sql_result) > 0) {\n            while ($result = Database::fetch_array($sql_result)) {\n                $return_array[$result['id']] = $result;\n            }\n        }\n\n        return $return_array;\n    }\n\n    /**\n     * Get the session category information by id.\n     *\n     * @param string session category ID\n     *\n     * @return mixed false if the session category does not exist, array if the session category exists\n     */\n    public static function get_session_category($id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $id = (int) $id;\n        $sql = \"SELECT id, name, date_start, date_end\n                FROM $table\n                WHERE id= $id\";\n        $result = Database::query($sql);\n        $num = Database::num_rows($result);\n        if ($num > 0) {\n            return Database::fetch_array($result);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get Hot Sessions (limit 8).\n     *\n     * @return array with sessions\n     */\n    public static function getHotSessions()\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_users = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_extra_fields = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_lp = Database::get_course_table(TABLE_LP_MAIN);\n\n        $extraField = new ExtraFieldModel('session');\n        $field = $extraField->get_handler_field_info_by_field_variable('image');\n\n        $sql = \"SELECT\n                s.id,\n                s.name,\n                s.id_coach,\n                u.firstname,\n                u.lastname,\n                s.session_category_id,\n                c.name as category_name,\n                s.description,\n                (SELECT COUNT(*) FROM $tbl_session_user WHERE session_id = s.id) as users,\n\t\t\t\t(SELECT COUNT(*) FROM $tbl_lp WHERE session_id = s.id) as lessons \";\n        if ($field !== false) {\n            $fieldId = $field['id'];\n            $sql .= \",(SELECT value FROM $tbl_extra_fields WHERE field_id = $fieldId AND item_id = s.id) as image \";\n        }\n        $sql .= \" FROM $tbl_session s\n                LEFT JOIN $tbl_session_category c\n                    ON s.session_category_id = c.id\n                INNER JOIN $tbl_users u\n                    ON s.id_coach = u.id\n                ORDER BY 9 DESC\n                LIMIT 8\";\n        $result = Database::query($sql);\n\n        if (Database::num_rows($result) > 0) {\n            $plugin = BuyCoursesPlugin::create();\n            $checker = $plugin->isEnabled();\n            $sessions = [];\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                if (!isset($row['image'])) {\n                    $row['image'] = '';\n                }\n                $row['on_sale'] = '';\n                if ($checker) {\n                    $row['on_sale'] = $plugin->getItemByProduct(\n                        $row['id'],\n                        BuyCoursesPlugin::PRODUCT_TYPE_SESSION\n                    );\n                }\n                $sessions[] = $row;\n            }\n\n            return $sessions;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get all session categories (filter by access_url_id).\n     *\n     * @return mixed false if the session category does not exist, array if the session category exists\n     */\n    public static function get_all_session_category()\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $id = api_get_current_access_url_id();\n        $sql = 'SELECT * FROM '.$table.'\n                WHERE access_url_id = '.$id.'\n                ORDER BY name ASC';\n        $result = Database::query($sql);\n        if (Database::num_rows($result) > 0) {\n            $data = Database::store_result($result, 'ASSOC');\n\n            return $data;\n        }\n\n        return false;\n    }\n\n    /**\n     * Assign a coach to course in session with status = 2.\n     *\n     * @param int  $userId\n     * @param int  $sessionId\n     * @param int  $courseId\n     * @param bool $noCoach   optional, if is true the user don't be a coach now,\n     *                        otherwise it'll assign a coach\n     *\n     * @return bool true if there are affected rows, otherwise false\n     */\n    public static function set_coach_to_course_session(\n        $userId,\n        $sessionId = 0,\n        $courseId = 0,\n        $noCoach = false\n    ) {\n        // Definition of variables\n        $userId = (int) $userId;\n\n        $sessionId = !empty($sessionId) ? (int) $sessionId : api_get_session_id();\n        $courseId = !empty($courseId) ? (int) $courseId : api_get_course_id();\n\n        if (empty($sessionId) || empty($courseId) || empty($userId)) {\n            return false;\n        }\n\n        // Table definition\n        $tblSessionRelCourseRelUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblUser = Database::get_main_table(TABLE_MAIN_USER);\n\n        $allowedTeachers = implode(',', UserManager::getAllowedRolesAsTeacher());\n\n        // check if user is a teacher\n        $sql = \"SELECT * FROM $tblUser WHERE status IN ($allowedTeachers) AND user_id = $userId\";\n\n        $rsCheckUser = Database::query($sql);\n\n        if (Database::num_rows($rsCheckUser) <= 0) {\n            return false;\n        }\n\n        if ($noCoach) {\n            // check if user_id exists in session_rel_user (if the user is\n            // subscribed to the session in any manner)\n            $sql = \"SELECT user_id FROM $tblSessionRelUser\n                    WHERE\n                        session_id = $sessionId AND\n                        user_id = $userId\";\n            $res = Database::query($sql);\n\n            if (Database::num_rows($res) > 0) {\n                // The user is already subscribed to the session. Change the\n                // record so the user is NOT a coach for this course anymore\n                // and then exit\n                $sql = \"UPDATE $tblSessionRelCourseRelUser\n                        SET status = 0\n                        WHERE\n                            session_id = $sessionId AND\n                            c_id = $courseId AND\n                            user_id = $userId \";\n                $result = Database::query($sql);\n\n                return Database::affected_rows($result) > 0;\n            }\n\n            // The user is not subscribed to the session, so make sure\n            // he isn't subscribed to a course in this session either\n            // and then exit\n            $sql = \"DELETE FROM $tblSessionRelCourseRelUser\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId \";\n            $result = Database::query($sql);\n\n            return Database::affected_rows($result) > 0;\n        }\n\n        // Assign user as a coach to course\n        // First check if the user is registered to the course\n        $sql = \"SELECT user_id FROM $tblSessionRelCourseRelUser\n                WHERE\n                    session_id = $sessionId AND\n                    c_id = $courseId AND\n                    user_id = $userId\";\n        $rs_check = Database::query($sql);\n\n        // Then update or insert.\n        if (Database::num_rows($rs_check) > 0) {\n            $sql = \"UPDATE $tblSessionRelCourseRelUser SET status = 2\n                    WHERE\n                        session_id = $sessionId AND\n                        c_id = $courseId AND\n                        user_id = $userId \";\n            $result = Database::query($sql);\n\n            return Database::affected_rows($result) > 0;\n        }\n\n        $sql = \"INSERT INTO $tblSessionRelCourseRelUser(session_id, c_id, user_id, status)\n                VALUES($sessionId, $courseId, $userId, 2)\";\n        $result = Database::query($sql);\n\n        return Database::affected_rows($result) > 0;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function removeAllDrhFromSession($sessionId)\n    {\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return false;\n        }\n\n        $sql = \"DELETE FROM $tbl_session_rel_user\n                WHERE\n                    session_id = $sessionId AND\n                    relation_type =\".SESSION_RELATION_TYPE_RRHH;\n        Database::query($sql);\n\n        return true;\n    }\n\n    /**\n     * Subscribes sessions to human resource manager (Dashboard feature).\n     *\n     * @param array $userInfo               Human Resource Manager info\n     * @param array $sessions_list          Sessions id\n     * @param bool  $sendEmail\n     * @param bool  $removeSessionsFromUser\n     *\n     * @return int\n     * */\n    public static function subscribeSessionsToDrh(\n        $userInfo,\n        $sessions_list,\n        $sendEmail = false,\n        $removeSessionsFromUser = true\n    ) {\n        // Database Table Definitions\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        if (empty($userInfo)) {\n            return 0;\n        }\n\n        $userId = $userInfo['user_id'];\n\n        // Only subscribe DRH users.\n        $rolesAllowed = [\n            DRH,\n            SESSIONADMIN,\n            PLATFORM_ADMIN,\n            COURSE_TUTOR,\n        ];\n        $isAdmin = api_is_platform_admin_by_id($userInfo['user_id']);\n        if (!$isAdmin && !in_array($userInfo['status'], $rolesAllowed)) {\n            return 0;\n        }\n\n        $affected_rows = 0;\n        // Deleting assigned sessions to hrm_id.\n        if ($removeSessionsFromUser) {\n            if (api_is_multiple_url_enabled()) {\n                $sql = \"SELECT s.session_id\n                        FROM $tbl_session_rel_user s\n                        INNER JOIN $tbl_session_rel_access_url a\n                        ON (a.session_id = s.session_id)\n                        WHERE\n                            s.user_id = $userId AND\n                            relation_type = \".SESSION_RELATION_TYPE_RRHH.\" AND\n                            access_url_id = \".api_get_current_access_url_id();\n            } else {\n                $sql = \"SELECT s.session_id\n                        FROM $tbl_session_rel_user s\n                        WHERE user_id = $userId AND relation_type=\".SESSION_RELATION_TYPE_RRHH;\n            }\n            $result = Database::query($sql);\n\n            if (Database::num_rows($result) > 0) {\n                while ($row = Database::fetch_array($result)) {\n                    $sql = \"DELETE FROM $tbl_session_rel_user\n                            WHERE\n                                session_id = {$row['session_id']} AND\n                                user_id = $userId AND\n                                relation_type =\".SESSION_RELATION_TYPE_RRHH;\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_DELETE_USER,\n                        LOG_USER_ID,\n                        $userId,\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        null,\n                        $row['session_id']\n                    );\n                }\n            }\n        }\n\n        // Inserting new sessions list.\n        if (!empty($sessions_list) && is_array($sessions_list)) {\n            foreach ($sessions_list as $session_id) {\n                $session_id = (int) $session_id;\n                $sql = \"SELECT session_id\n                        FROM $tbl_session_rel_user\n                        WHERE\n                            session_id = $session_id AND\n                            user_id = $userId AND\n                            relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\";\n                $result = Database::query($sql);\n                if (Database::num_rows($result) == 0) {\n                    $sql = \"INSERT IGNORE INTO $tbl_session_rel_user (session_id, user_id, relation_type, registered_at)\n                            VALUES (\n                                $session_id,\n                                $userId,\n                                '\".SESSION_RELATION_TYPE_RRHH.\"',\n                                '\".api_get_utc_datetime().\"'\n                            )\";\n                    Database::query($sql);\n\n                    Event::addEvent(\n                        LOG_SESSION_ADD_USER,\n                        LOG_USER_ID,\n                        $userId,\n                        api_get_utc_datetime(),\n                        api_get_user_id(),\n                        null,\n                        $session_id\n                    );\n\n                    $affected_rows++;\n                }\n            }\n        }\n\n        return $affected_rows;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getDrhUsersInSession($sessionId)\n    {\n        return self::get_users_by_session($sessionId, SESSION_RELATION_TYPE_RRHH);\n    }\n\n    /**\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getSessionFollowedByDrh($userId, $sessionId)\n    {\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        $select = \" SELECT * \";\n        if (api_is_multiple_url_enabled()) {\n            $sql = \" $select FROM $tbl_session s\n                    INNER JOIN $tbl_session_rel_user sru ON (sru.session_id = s.id)\n                    LEFT JOIN $tbl_session_rel_access_url a ON (s.id = a.session_id)\n                    WHERE\n                        sru.user_id = '$userId' AND\n                        sru.session_id = '$sessionId' AND\n                        sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                        access_url_id = \".api_get_current_access_url_id().\"\n                    \";\n        } else {\n            $sql = \"$select FROM $tbl_session s\n                     INNER JOIN $tbl_session_rel_user sru\n                     ON\n                        sru.session_id = s.id AND\n                        sru.user_id = '$userId' AND\n                        sru.session_id = '$sessionId' AND\n                        sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\n                    \";\n        }\n\n        $result = Database::query($sql);\n        if (Database::num_rows($result)) {\n            $row = Database::fetch_array($result, 'ASSOC');\n            $row['course_list'] = self::get_course_list_by_session_id($sessionId);\n\n            return $row;\n        }\n\n        return [];\n    }\n\n    /**\n     * Get sessions followed by human resources manager.\n     *\n     * @param int    $userId\n     * @param int    $start\n     * @param int    $limit\n     * @param bool   $getCount\n     * @param bool   $getOnlySessionId\n     * @param bool   $getSql\n     * @param string $orderCondition\n     * @param string $keyword\n     * @param string $description\n     * @param array  $options\n     *\n     * @return array sessions\n     */\n    public static function get_sessions_followed_by_drh(\n        $userId,\n        $start = null,\n        $limit = null,\n        $getCount = false,\n        $getOnlySessionId = false,\n        $getSql = false,\n        $orderCondition = null,\n        $keyword = '',\n        $description = '',\n        $options = []\n    ) {\n        return self::getSessionsFollowedByUser(\n            $userId,\n            DRH,\n            $start,\n            $limit,\n            $getCount,\n            $getOnlySessionId,\n            $getSql,\n            $orderCondition,\n            $keyword,\n            $description,\n            $options\n        );\n    }\n\n    /**\n     * Get sessions followed by human resources manager.\n     *\n     * @param int    $userId\n     * @param int    $status           DRH Optional\n     * @param int    $start\n     * @param int    $limit\n     * @param bool   $getCount\n     * @param bool   $getOnlySessionId\n     * @param bool   $getSql\n     * @param string $orderCondition\n     * @param string $keyword\n     * @param string $description\n     * @param array  $options\n     *\n     * @return array sessions\n     */\n    public static function getSessionsFollowedByUser(\n        $userId,\n        $status = null,\n        $start = null,\n        $limit = null,\n        $getCount = false,\n        $getOnlySessionId = false,\n        $getSql = false,\n        $orderCondition = null,\n        $keyword = '',\n        $description = '',\n        $options = []\n    ) {\n        // Database Table Definitions\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $extraFieldModel = new ExtraFieldModel('session');\n        $conditions = $extraFieldModel->parseConditions($options);\n        $sqlInjectJoins = $conditions['inject_joins'];\n        $extraFieldsConditions = $conditions['where'];\n        $sqlInjectWhere = $conditions['inject_where'];\n        $injectExtraFields = $conditions['inject_extra_fields'];\n\n        if (!empty($injectExtraFields)) {\n            $injectExtraFields = ' , '.$injectExtraFields.' s.id';\n        }\n\n        $userId = (int) $userId;\n\n        $select = ' SELECT DISTINCT * '.$injectExtraFields;\n        if ($getCount) {\n            $select = ' SELECT count(DISTINCT(s.id)) as count ';\n        }\n\n        if ($getOnlySessionId) {\n            $select = ' SELECT DISTINCT(s.id) ';\n        }\n\n        $limitCondition = null;\n        if (!is_null($start) && !is_null($limit)) {\n            $limitCondition = \" LIMIT \".intval($start).\", \".intval($limit);\n        }\n\n        if (empty($orderCondition)) {\n            $orderCondition = ' ORDER BY s.name ';\n        }\n\n        $whereConditions = null;\n        $sessionCourseConditions = null;\n        $sessionConditions = null;\n        $sessionQuery = '';\n        $courseSessionQuery = null;\n        switch ($status) {\n            case DRH:\n                $sessionQuery = \"SELECT sru.session_id\n                                 FROM\n                                 $tbl_session_rel_user sru\n                                 WHERE\n                                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                                    sru.user_id = $userId\";\n                break;\n            case COURSEMANAGER:\n                $courseSessionQuery = \"\n                    SELECT scu.session_id as id\n                    FROM $tbl_session_rel_course_rel_user scu\n                    WHERE (scu.status = 2 AND scu.user_id = $userId)\";\n\n                $whereConditions = \" OR (s.id_coach = $userId) \";\n                break;\n            case SESSIONADMIN:\n                $sessionQuery = '';\n                if (api_get_setting('allow_session_admins_to_manage_all_sessions') != 'true') {\n                    $sqlInjectJoins .= \" AND s.session_admin_id = $userId \";\n                }\n                break;\n            default:\n                $sessionQuery = \"SELECT sru.session_id\n                                 FROM\n                                 $tbl_session_rel_user sru\n                                 WHERE\n                                    sru.user_id = $userId\";\n                break;\n        }\n\n        $keywordCondition = '';\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (s.name LIKE '%$keyword%' ) \";\n\n            if (!empty($description)) {\n                $description = Database::escape_string($description);\n                $keywordCondition = \" AND (s.name LIKE '%$keyword%' OR s.description LIKE '%$description%' ) \";\n            }\n        }\n\n        $whereConditions .= $keywordCondition;\n        $subQuery = $sessionQuery.$courseSessionQuery;\n\n        if (!empty($subQuery)) {\n            $subQuery = \" AND s.id IN ($subQuery)\";\n        }\n\n        $sql = \" $select\n                FROM $tbl_session s\n                INNER JOIN $tbl_session_rel_access_url a\n                ON (s.id = a.session_id)\n                $sqlInjectJoins\n                WHERE\n                    access_url_id = \".api_get_current_access_url_id().\"\n                    $subQuery\n                    $whereConditions\n                    $extraFieldsConditions\n                    $sqlInjectWhere\n                    $orderCondition\n                    $limitCondition\";\n\n        if ($getSql) {\n            return $sql;\n        }\n        $result = Database::query($sql);\n\n        if ($getCount) {\n            $row = Database::fetch_array($result);\n            if ($row) {\n                return (int) $row['count'];\n            }\n\n            return 0;\n        }\n\n        $sessions = [];\n        if (Database::num_rows($result) > 0) {\n            $sysUploadPath = api_get_path(SYS_UPLOAD_PATH).'sessions/';\n            $webUploadPath = api_get_path(WEB_UPLOAD_PATH).'sessions/';\n            $imgPath = Display::return_icon(\n                'session_default_small.png',\n                null,\n                [],\n                ICON_SIZE_SMALL,\n                false,\n                true\n            );\n\n            while ($row = Database::fetch_array($result)) {\n                if ($getOnlySessionId) {\n                    $sessions[$row['id']] = $row;\n                    continue;\n                }\n                $imageFilename = ExtraFieldModel::FIELD_TYPE_FILE_IMAGE.'_'.$row['id'].'.png';\n                $row['image'] = is_file($sysUploadPath.$imageFilename) ? $webUploadPath.$imageFilename : $imgPath;\n\n                if ($row['display_start_date'] === '0000-00-00 00:00:00' || $row['display_start_date'] === '0000-00-00') {\n                    $row['display_start_date'] = null;\n                }\n\n                if ($row['display_end_date'] === '0000-00-00 00:00:00' || $row['display_end_date'] === '0000-00-00') {\n                    $row['display_end_date'] = null;\n                }\n\n                if ($row['access_start_date'] === '0000-00-00 00:00:00' || $row['access_start_date'] === '0000-00-00') {\n                    $row['access_start_date'] = null;\n                }\n\n                if ($row['access_end_date'] === '0000-00-00 00:00:00' || $row['access_end_date'] === '0000-00-00') {\n                    $row['access_end_date'] = null;\n                }\n\n                if ($row['coach_access_start_date'] === '0000-00-00 00:00:00' ||\n                    $row['coach_access_start_date'] === '0000-00-00'\n                ) {\n                    $row['coach_access_start_date'] = null;\n                }\n\n                if ($row['coach_access_end_date'] === '0000-00-00 00:00:00' ||\n                    $row['coach_access_end_date'] === '0000-00-00'\n                ) {\n                    $row['coach_access_end_date'] = null;\n                }\n\n                $sessions[$row['id']] = $row;\n            }\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Gets the list (or the count) of courses by session filtered by access_url.\n     *\n     * @param int    $session_id  The session id\n     * @param string $course_name The course code\n     * @param string $orderBy     Field to order the data\n     * @param bool   $getCount    Optional. Count the session courses\n     *\n     * @return array|int List of courses. Whether $getCount is true, return the count\n     */\n    public static function get_course_list_by_session_id(\n        $session_id,\n        $course_name = '',\n        $orderBy = null,\n        $getCount = false\n    ) {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $session_id = (int) $session_id;\n        $sqlSelect = '*, c.id, c.id as real_id, c.code as course_code';\n\n        if ($getCount) {\n            $sqlSelect = 'COUNT(1) as count';\n        }\n\n        // select the courses\n        $sql = \"SELECT $sqlSelect\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON (c.id = src.c_id)\n\t\t        WHERE src.session_id = '$session_id' \";\n\n        if (!empty($course_name)) {\n            $course_name = Database::escape_string($course_name);\n            $sql .= \" AND c.title LIKE '%$course_name%' \";\n        }\n\n        if (!empty($orderBy)) {\n            $orderBy = Database::escape_string($orderBy);\n            $orderBy = \" ORDER BY $orderBy\";\n        } else {\n            if (self::orderCourseIsEnabled()) {\n                $orderBy .= ' ORDER BY position ';\n            } else {\n                $orderBy .= ' ORDER BY title ';\n            }\n        }\n\n        $sql .= Database::escape_string($orderBy);\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n        if ($num_rows > 0) {\n            if ($getCount) {\n                $count = Database::fetch_assoc($result);\n\n                return (int) $count['count'];\n            }\n\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['real_id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the list of courses by session filtered by access_url.\n     *\n     * @param $userId\n     * @param $sessionId\n     * @param null   $from\n     * @param null   $limit\n     * @param null   $column\n     * @param null   $direction\n     * @param bool   $getCount\n     * @param string $keyword\n     *\n     * @return array\n     */\n    public static function getAllCoursesFollowedByUser(\n        $userId,\n        $sessionId,\n        $from = null,\n        $limit = null,\n        $column = null,\n        $direction = null,\n        $getCount = false,\n        $keyword = ''\n    ) {\n        if (empty($sessionId)) {\n            $sessionsSQL = self::get_sessions_followed_by_drh(\n                $userId,\n                null,\n                null,\n                null,\n                true,\n                true\n            );\n        } else {\n            $sessionsSQL = intval($sessionId);\n        }\n\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        if ($getCount) {\n            $select = \"SELECT COUNT(DISTINCT(c.code)) as count \";\n        } else {\n            $select = \"SELECT DISTINCT c.* \";\n        }\n\n        $keywordCondition = null;\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (c.code LIKE '%$keyword%' OR c.title LIKE '%$keyword%' ) \";\n        }\n\n        // Select the courses\n        $sql = \"$select\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE\n\t\t            src.session_id IN ($sessionsSQL)\n\t\t            $keywordCondition\n\t\t        \";\n        if ($getCount) {\n            $result = Database::query($sql);\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        if (isset($from) && isset($limit)) {\n            $from = intval($from);\n            $limit = intval($limit);\n            $sql .= \" LIMIT $from, $limit\";\n        }\n\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n\n        if ($num_rows > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the list of courses by session filtered by access_url.\n     *\n     * @param int    $session_id\n     * @param string $course_name\n     *\n     * @return array list of courses\n     */\n    public static function get_course_list_by_session_id_like($session_id, $course_name = '')\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        $session_id = (int) $session_id;\n        $course_name = Database::escape_string($course_name);\n\n        // select the courses\n        $sql = \"SELECT c.id, c.title FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE \";\n\n        if (!empty($session_id)) {\n            $sql .= \"src.session_id LIKE '$session_id' AND \";\n        }\n\n        if (!empty($course_name)) {\n            $sql .= \"UPPER(c.title) LIKE UPPER('%$course_name%') \";\n        }\n\n        $sql .= \"ORDER BY title;\";\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        $courses = [];\n        if ($num_rows > 0) {\n            while ($row = Database::fetch_array($result, 'ASSOC')) {\n                $courses[$row['id']] = $row;\n            }\n        }\n\n        return $courses;\n    }\n\n    /**\n     * Gets the count of courses by session filtered by access_url.\n     *\n     * @param int session id\n     * @param string $keyword\n     *\n     * @return array list of courses\n     */\n    public static function getCourseCountBySessionId($session_id, $keyword = '')\n    {\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $session_id = (int) $session_id;\n\n        // select the courses\n        $sql = \"SELECT COUNT(c.code) count\n                FROM $tbl_course c\n                INNER JOIN $tbl_session_rel_course src\n                ON c.id = src.c_id\n\t\t        WHERE src.session_id = '$session_id' \";\n\n        $keywordCondition = null;\n        if (!empty($keyword)) {\n            $keyword = Database::escape_string($keyword);\n            $keywordCondition = \" AND (c.code LIKE '%$keyword%' OR c.title LIKE '%$keyword%' ) \";\n        }\n        $sql .= $keywordCondition;\n\n        $result = Database::query($sql);\n        $num_rows = Database::num_rows($result);\n        if ($num_rows > 0) {\n            $row = Database::fetch_array($result, 'ASSOC');\n\n            return $row['count'];\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the session id based on the original id and field name in the extra fields.\n     * Returns 0 if session was not found.\n     *\n     * @param string $value    Original session id\n     * @param string $variable Original field name\n     *\n     * @return int Session id\n     */\n    public static function getSessionIdFromOriginalId($value, $variable)\n    {\n        $extraFieldValue = new ExtraFieldValue('session');\n        $result = $extraFieldValue->get_item_id_from_field_variable_and_field_value(\n            $variable,\n            $value\n        );\n\n        if (!empty($result)) {\n            return $result['item_id'];\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get users by session.\n     *\n     * @param int  $id       session id\n     * @param int  $status   filter by status coach = 2\n     * @param bool $getCount Optional. Allow get the number of rows from the result\n     * @param int  $urlId\n     *\n     * @return array|int A list with an user list. If $getCount is true then return a the count of registers\n     */\n    public static function get_users_by_session(\n        $id,\n        $status = null,\n        $getCount = false,\n        $urlId = 0\n    ) {\n        if (empty($id)) {\n            return [];\n        }\n        $id = (int) $id;\n        $urlId = empty($urlId) ? api_get_current_access_url_id() : (int) $urlId;\n\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $table_access_url_user = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n\n        $selectedField = '\n            u.id as user_id, u.lastname, u.firstname, u.username, su.relation_type, au.access_url_id,\n            su.moved_to, su.moved_status, su.moved_at, su.registered_at\n        ';\n\n        if ($getCount) {\n            $selectedField = 'count(1) AS count';\n        }\n\n        $sql = \"SELECT $selectedField\n                FROM $tbl_user u\n                INNER JOIN $tbl_session_rel_user su\n                ON u.user_id = su.user_id AND\n                su.session_id = $id\n                LEFT OUTER JOIN $table_access_url_user au\n                ON (au.user_id = u.user_id)\n                \";\n\n        if (is_numeric($status)) {\n            $status = (int) $status;\n            $sql .= \" WHERE su.relation_type = $status AND (au.access_url_id = $urlId OR au.access_url_id is null)\";\n        } else {\n            $sql .= \" WHERE (au.access_url_id = $urlId OR au.access_url_id is null )\";\n        }\n\n        $sql .= ' ORDER BY su.relation_type, ';\n        $sql .= api_sort_by_first_name() ? ' u.firstname, u.lastname' : '  u.lastname, u.firstname';\n\n        $result = Database::query($sql);\n        if ($getCount) {\n            $count = Database::fetch_assoc($result);\n            if ($count) {\n                return (int) $count['count'];\n            }\n\n            return 0;\n        }\n\n        $return = [];\n        while ($row = Database::fetch_array($result, 'ASSOC')) {\n            $return[] = $row;\n        }\n\n        return $return;\n    }\n\n    /**\n     * The general coach (field: session.id_coach).\n     *\n     * @param int  $user_id         user id\n     * @param bool $asPlatformAdmin The user is platform admin, return everything\n     *\n     * @return array\n     */\n    public static function get_sessions_by_general_coach($user_id, $asPlatformAdmin = false)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $user_id = (int) $user_id;\n\n        // Session where we are general coach\n        $sql = \"SELECT DISTINCT *\n                FROM $session_table\";\n\n        if (!$asPlatformAdmin) {\n            $sql .= \" WHERE id_coach = $user_id\";\n        }\n\n        if (api_is_multiple_url_enabled()) {\n            $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n\n            $sqlCoach = '';\n            if (!$asPlatformAdmin) {\n                $sqlCoach = \" id_coach = $user_id AND \";\n            }\n\n            if ($access_url_id != -1) {\n                $sql = 'SELECT DISTINCT session.*\n                    FROM '.$session_table.' session INNER JOIN '.$tbl_session_rel_access_url.' session_rel_url\n                    ON (session.id = session_rel_url.session_id)\n                    WHERE '.$sqlCoach.' access_url_id = '.$access_url_id;\n            }\n        }\n        $sql .= ' ORDER by name';\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * @param int $user_id\n     *\n     * @return array\n     *\n     * @deprecated use get_sessions_by_general_coach()\n     */\n    public static function get_sessions_by_coach($user_id)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        return Database::select(\n            '*',\n            $session_table,\n            ['where' => ['id_coach = ?' => $user_id]]\n        );\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $courseId\n     * @param int $session_id\n     *\n     * @return array|bool\n     */\n    public static function get_user_status_in_course_session($user_id, $courseId, $session_id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sql = \"SELECT session_rcru.status\n                FROM $table session_rcru\n                INNER JOIN $tbl_user user\n                ON (session_rcru.user_id = user.user_id)\n                WHERE\n                    session_rcru.session_id = '\".intval($session_id).\"' AND\n                    session_rcru.c_id ='\".intval($courseId).\"' AND\n                    user.user_id = \".intval($user_id);\n\n        $result = Database::query($sql);\n        $status = false;\n        if (Database::num_rows($result)) {\n            $status = Database::fetch_row($result);\n            $status = $status['0'];\n        }\n\n        return $status;\n    }\n\n    /**\n     * Gets user status within a session.\n     *\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return SessionRelUser\n     */\n    public static function getUserStatusInSession($userId, $sessionId)\n    {\n        $em = Database::getManager();\n        $subscriptions = $em\n            ->getRepository('ChamiloCoreBundle:SessionRelUser')\n            ->findBy(['session' => $sessionId, 'user' => $userId]);\n\n        /** @var SessionRelUser $subscription */\n        $subscription = current($subscriptions);\n\n        return $subscription;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return array\n     */\n    public static function get_all_sessions_by_promotion($id)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        return Database::select(\n            '*',\n            $table,\n            ['where' => ['promotion_id = ?' => $id]]\n        );\n    }\n\n    /**\n     * @param int   $promotion_id\n     * @param array $list\n     */\n    public static function subscribe_sessions_to_promotion($promotion_id, $list)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $params = [];\n        $params['promotion_id'] = 0;\n        Database::update(\n            $table,\n            $params,\n            ['promotion_id = ?' => $promotion_id]\n        );\n\n        $params['promotion_id'] = $promotion_id;\n        if (!empty($list)) {\n            foreach ($list as $session_id) {\n                $session_id = (int) $session_id;\n                Database::update($table, $params, ['id = ?' => $session_id]);\n            }\n        }\n    }\n\n    /**\n     * Updates a session status.\n     *\n     * @param int session id\n     * @param int status\n     */\n    public static function set_session_status($session_id, $status)\n    {\n        $t = Database::get_main_table(TABLE_MAIN_SESSION);\n        $params['visibility'] = $status;\n        Database::update($t, $params, ['id = ?' => $session_id]);\n    }\n\n    /**\n     * Copies a session with the same data to a new session.\n     * The new copy is not assigned to the same promotion.\n     *\n     * @param int  $id                         Session ID\n     * @param bool $copy_courses               Whether to copy the relationship with courses\n     * @param bool $copyTeachersAndDrh\n     * @param bool $create_new_courses         New courses will be created\n     * @param bool $set_exercises_lp_invisible Set exercises and LPs in the new session to invisible by default\n     * @param bool $copyWithSessionContent     Copy course session content into the courses\n     *\n     * @return int The new session ID on success, 0 otherwise\n     *\n     * @see subscribe_sessions_to_promotions() for that.\n     *\n     * @todo make sure the extra session fields are copied too\n     */\n    public static function copy(\n        $id,\n        $copy_courses = true,\n        $copyTeachersAndDrh = true,\n        $create_new_courses = false,\n        $set_exercises_lp_invisible = false,\n        $copyWithSessionContent = false\n    ) {\n        $id = (int) $id;\n        $s = self::fetch($id);\n\n        if (empty($s)) {\n            return false;\n        }\n\n        // Check all dates before copying\n        // Get timestamp for now in UTC - see http://php.net/manual/es/function.time.php#117251\n        $now = time() - date('Z');\n        // Timestamp in one month\n        $inOneMonth = $now + (30 * 24 * 3600);\n        $inOneMonth = api_get_local_time($inOneMonth);\n        if (api_strtotime($s['access_start_date']) < $now) {\n            $s['access_start_date'] = api_get_local_time($now);\n        } else {\n            $s['access_start_date'] = api_get_local_time($s['access_start_date']);\n        }\n        if (api_strtotime($s['display_start_date']) < $now) {\n            $s['display_start_date'] = api_get_local_time($now);\n        } else {\n            $s['display_start_date'] = api_get_local_time($s['display_start_date']);\n        }\n        if (api_strtotime($s['coach_access_start_date']) < $now) {\n            $s['coach_access_start_date'] = api_get_local_time($now);\n        } else {\n            $s['coach_access_start_date'] = api_get_local_time($s['coach_access_start_date']);\n        }\n        if (api_strtotime($s['access_end_date']) < $now) {\n            $s['access_end_date'] = $inOneMonth;\n        } else {\n            $s['access_end_date'] = api_get_local_time($s['access_end_date']);\n        }\n        if (api_strtotime($s['display_end_date']) < $now) {\n            $s['display_end_date'] = $inOneMonth;\n        } else {\n            $s['display_end_date'] = api_get_local_time($s['display_end_date']);\n        }\n        if (api_strtotime($s['coach_access_end_date']) < $now) {\n            $s['coach_access_end_date'] = $inOneMonth;\n        } else {\n            $s['coach_access_end_date'] = api_get_local_time($s['coach_access_end_date']);\n        }\n\n        $extraFieldValue = new ExtraFieldValue('session');\n        $extraFieldsValues = $extraFieldValue->getAllValuesByItem($id);\n        $extraFieldsValuesToCopy = [];\n        if (!empty($extraFieldsValues)) {\n            foreach ($extraFieldsValues as $extraFieldValue) {\n                $extraFieldsValuesToCopy['extra_'.$extraFieldValue['variable']]['extra_'.$extraFieldValue['variable']] = $extraFieldValue['value'];\n            }\n        }\n\n        if (isset($extraFieldsValuesToCopy['extra_image']) && isset($extraFieldsValuesToCopy['extra_image']['extra_image'])) {\n            $extraFieldsValuesToCopy['extra_image'] = [\n                'tmp_name' => api_get_path(SYS_UPLOAD_PATH).$extraFieldsValuesToCopy['extra_image']['extra_image'],\n                'error' => 0,\n            ];\n        }\n\n        // Now try to create the session\n        $sid = self::create_session(\n            $s['name'].' '.get_lang('CopyLabelSuffix'),\n            $s['access_start_date'],\n            $s['access_end_date'],\n            $s['display_start_date'],\n            $s['display_end_date'],\n            $s['coach_access_start_date'],\n            $s['coach_access_end_date'],\n            (int) $s['id_coach'],\n            $s['session_category_id'],\n            (int) $s['visibility'],\n            true,\n            $s['duration'],\n            $s['description'],\n            $s['show_description'],\n            $extraFieldsValuesToCopy\n        );\n\n        if (!is_numeric($sid) || empty($sid)) {\n            return false;\n        }\n\n        if ($copy_courses) {\n            // Register courses from the original session to the new session\n            $courses = self::get_course_list_by_session_id($id);\n            $short_courses = $new_short_courses = [];\n            if (is_array($courses) && count($courses) > 0) {\n                foreach ($courses as $course) {\n                    $short_courses[] = $course;\n                }\n            }\n\n            // We will copy the current courses of the session to new courses\n            if (!empty($short_courses)) {\n                if ($create_new_courses) {\n                    api_set_more_memory_and_time_limits();\n                    $params = [];\n                    $params['skip_lp_dates'] = true;\n\n                    foreach ($short_courses as $course_data) {\n                        $course_info = CourseManager::copy_course_simple(\n                            $course_data['title'].' '.get_lang('CopyLabelSuffix'),\n                            $course_data['course_code'],\n                            $id,\n                            $sid,\n                            $params\n                        );\n\n                        if ($course_info) {\n                            //By default new elements are invisible\n                            if ($set_exercises_lp_invisible) {\n                                $list = new LearnpathList('', $course_info, $sid);\n                                $flat_list = $list->get_flat_list();\n                                if (!empty($flat_list)) {\n                                    foreach ($flat_list as $lp_id => $data) {\n                                        api_item_property_update(\n                                            $course_info,\n                                            TOOL_LEARNPATH,\n                                            $lp_id,\n                                            'invisible',\n                                            api_get_user_id(),\n                                            0,\n                                            0,\n                                            0,\n                                            0,\n                                            $sid\n                                        );\n                                    }\n                                }\n                                $quiz_table = Database::get_course_table(TABLE_QUIZ_TEST);\n                                $course_id = $course_info['real_id'];\n                                //@todo check this query\n                                $sql = \"UPDATE $quiz_table SET active = 0\n                                        WHERE c_id = $course_id AND session_id = $sid\";\n                                Database::query($sql);\n                            }\n                            $new_short_courses[] = $course_info['real_id'];\n                        }\n                    }\n                } else {\n                    foreach ($short_courses as $course_data) {\n                        $new_short_courses[] = $course_data['id'];\n                    }\n                }\n\n                $short_courses = $new_short_courses;\n                self::add_courses_to_session($sid, $short_courses, true);\n\n                if ($copyWithSessionContent) {\n                    foreach ($courses as $course) {\n                        CourseManager::copy_course(\n                            $course['code'],\n                            $id,\n                            $course['code'],\n                            $sid,\n                            [],\n                            false,\n                            true\n                        );\n                    }\n                }\n\n                if ($create_new_courses === false && $copyTeachersAndDrh) {\n                    foreach ($short_courses as $courseItemId) {\n                        $coachList = self::getCoachesByCourseSession($id, $courseItemId);\n                        foreach ($coachList as $userId) {\n                            self::set_coach_to_course_session($userId, $sid, $courseItemId);\n                        }\n                    }\n                }\n            }\n        }\n\n        if ($copyTeachersAndDrh) {\n            // Register users from the original session to the new session\n            $users = self::get_users_by_session($id);\n            if (!empty($users)) {\n                $userListByStatus = [];\n                foreach ($users as $userData) {\n                    $userData['relation_type'] = (int) $userData['relation_type'];\n                    $userListByStatus[$userData['relation_type']][] = $userData;\n                }\n\n                foreach ($userListByStatus as $status => $userList) {\n                    $userList = array_column($userList, 'user_id');\n                    switch ($status) {\n                        case 0:\n                            /*self::subscribeUsersToSession(\n                                $sid,\n                                $userList,\n                                SESSION_VISIBLE_READ_ONLY,\n                                false,\n                                true\n                            );*/\n                            break;\n                        case 1:\n                            // drh users\n                            foreach ($userList as $drhId) {\n                                $userInfo = api_get_user_info($drhId);\n                                self::subscribeSessionsToDrh($userInfo, [$sid], false, false);\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n\n        return $sid;\n    }\n\n    /**\n     * @param int $user_id\n     * @param int $session_id\n     *\n     * @return bool\n     */\n    public static function user_is_general_coach($user_id, $session_id)\n    {\n        $session_id = (int) $session_id;\n        $user_id = (int) $user_id;\n        $table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sql = \"SELECT DISTINCT id\n\t         \tFROM $table\n\t         \tWHERE session.id_coach = '\".$user_id.\"' AND id = '$session_id'\";\n        $result = Database::query($sql);\n        if ($result && Database::num_rows($result)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the number of sessions.\n     *\n     * @param int $access_url_id ID of the URL we want to filter on (optional)\n     *\n     * @return int Number of sessions\n     */\n    public static function count_sessions($access_url_id = 0)\n    {\n        $session_table = Database::get_main_table(TABLE_MAIN_SESSION);\n        $access_url_rel_session_table = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $access_url_id = (int) $access_url_id;\n        $sql = \"SELECT count(s.id) FROM $session_table s\";\n        if (!empty($access_url_id)) {\n            $sql .= \", $access_url_rel_session_table u \".\n                \" WHERE s.id = u.session_id AND u.access_url_id = $access_url_id\";\n        }\n        $res = Database::query($sql);\n        $row = Database::fetch_row($res);\n\n        return $row[0];\n    }\n\n    /**\n     * @param int  $id\n     * @param bool $checkSession\n     *\n     * @return bool\n     */\n    public static function cantEditSession($id, $checkSession = true)\n    {\n        if (!self::allowToManageSessions()) {\n            return false;\n        }\n\n        if (api_is_platform_admin() && self::allowed($id)) {\n            return true;\n        }\n\n        if ($checkSession) {\n            if (self::allowed($id)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Protect a session to be edited.\n     *\n     * @param int  $id\n     * @param bool $checkSession\n     *\n     * @return mixed|bool true if pass the check, api_not_allowed otherwise\n     */\n    public static function protectSession($id, $checkSession = true)\n    {\n        if (!self::cantEditSession($id, $checkSession)) {\n            api_not_allowed(true);\n        }\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowToManageSessions()\n    {\n        if (self::allowManageAllSessions()) {\n            return true;\n        }\n\n        $setting = api_get_setting('allow_teachers_to_create_sessions');\n\n        if (api_is_teacher() && $setting == 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowOnlyMySessions()\n    {\n        if (self::allowToManageSessions() &&\n            !api_is_platform_admin() &&\n            api_is_teacher()\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    public static function allowManageAllSessions()\n    {\n        if (api_is_platform_admin() || api_is_session_admin()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param $id\n     *\n     * @return bool\n     */\n    public static function protect_teacher_session_edit($id)\n    {\n        if (!api_is_coach($id) && !api_is_platform_admin()) {\n            api_not_allowed(true);\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @param int $courseId\n     *\n     * @return array\n     *\n     * @todo Add param to get only active sessions (not expires ones)\n     */\n    public static function get_session_by_course($courseId)\n    {\n        $table_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $table_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n        $courseId = (int) $courseId;\n        $urlId = api_get_current_access_url_id();\n\n        if (empty($courseId)) {\n            return [];\n        }\n\n        $sql = \"SELECT name, s.id\n                FROM $table_session_course sc\n                INNER JOIN $table_session s\n                ON (sc.session_id = s.id)\n                INNER JOIN $url u\n                ON (u.session_id = s.id)\n                WHERE\n                    u.access_url_id = $urlId AND\n                    sc.c_id = '$courseId' \";\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int  $userId\n     * @param bool $ignoreVisibilityForAdmins\n     * @param bool $ignoreTimeLimit\n     *\n     * @return array\n     */\n    public static function get_sessions_by_user(\n        $userId,\n        $ignoreVisibilityForAdmins = false,\n        $ignoreTimeLimit = false\n    ) {\n        $sessionCategories = UserManager::get_sessions_by_category(\n            $userId,\n            false,\n            $ignoreVisibilityForAdmins,\n            $ignoreTimeLimit\n        );\n\n        $sessionArray = [];\n        if (!empty($sessionCategories)) {\n            foreach ($sessionCategories as $category) {\n                if (isset($category['sessions'])) {\n                    foreach ($category['sessions'] as $session) {\n                        $sessionArray[] = $session;\n                    }\n                }\n            }\n        }\n\n        return $sessionArray;\n    }\n\n    /**\n     * @param string $file\n     * @param bool   $updateSession                                   true: if the session exists it will be updated.\n     *                                                                false: if session exists a new session will be\n     *                                                                created adding a counter session1, session2, etc\n     * @param int    $defaultUserId\n     * @param Logger $logger\n     * @param array  $extraFields                                     convert a file row to an extra field. Example in\n     *                                                                CSV file there's a SessionID then it will\n     *                                                                converted to extra_external_session_id if you\n     *                                                                set: array('SessionId' =>\n     *                                                                'extra_external_session_id')\n     * @param string $extraFieldId\n     * @param int    $daysCoachAccessBeforeBeginning\n     * @param int    $daysCoachAccessAfterBeginning\n     * @param int    $sessionVisibility\n     * @param array  $fieldsToAvoidUpdate\n     * @param bool   $deleteUsersNotInList\n     * @param bool   $updateCourseCoaches\n     * @param bool   $sessionWithCoursesModifier\n     * @param bool   $addOriginalCourseTeachersAsCourseSessionCoaches\n     * @param bool   $removeAllTeachersFromCourse\n     * @param int    $showDescription\n     * @param array  $teacherBackupList\n     * @param array  $groupBackup\n     *\n     * @return array\n     */\n    public static function importCSV(\n        $file,\n        $updateSession,\n        $defaultUserId = null,\n        $logger = null,\n        $extraFields = [],\n        $extraFieldId = null,\n        $daysCoachAccessBeforeBeginning = null,\n        $daysCoachAccessAfterBeginning = null,\n        $sessionVisibility = 1,\n        $fieldsToAvoidUpdate = [],\n        $deleteUsersNotInList = false,\n        $updateCourseCoaches = false,\n        $sessionWithCoursesModifier = false,\n        $addOriginalCourseTeachersAsCourseSessionCoaches = true,\n        $removeAllTeachersFromCourse = true,\n        $showDescription = null,\n        &$teacherBackupList = [],\n        &$groupBackup = []\n    ) {\n        $content = file($file);\n        $error_message = null;\n        $session_counter = 0;\n        $defaultUserId = empty($defaultUserId) ? api_get_user_id() : (int) $defaultUserId;\n\n        $eol = PHP_EOL;\n        if (PHP_SAPI != 'cli') {\n            $eol = '<br />';\n        }\n\n        $debug = false;\n        if (isset($logger)) {\n            $debug = true;\n        }\n\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_user = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tbl_session_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_session_course_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessions = [];\n        if (!api_strstr($content[0], ';')) {\n            $error_message = get_lang('NotCSV');\n        } else {\n            $tag_names = [];\n            foreach ($content as $key => $enreg) {\n                $enreg = explode(';', trim($enreg));\n                if ($key) {\n                    foreach ($tag_names as $tag_key => $tag_name) {\n                        if (isset($enreg[$tag_key])) {\n                            $sessions[$key - 1][$tag_name] = $enreg[$tag_key];\n                        }\n                    }\n                } else {\n                    foreach ($enreg as $tag_name) {\n                        $tag_names[] = api_preg_replace('/[^a-zA-Z0-9_\\-]/', '', $tag_name);\n                    }\n                    if (!in_array('SessionName', $tag_names) ||\n                        !in_array('DateStart', $tag_names) ||\n                        !in_array('DateEnd', $tag_names)\n                    ) {\n                        $error_message = get_lang('NoNeededData');\n                        break;\n                    }\n                }\n            }\n\n            $sessionList = [];\n            $report = [];\n\n            // Looping the sessions.\n            foreach ($sessions as $enreg) {\n                $user_counter = 0;\n                $course_counter = 0;\n\n                if (isset($extraFields) && !empty($extraFields)) {\n                    foreach ($extraFields as $original => $to) {\n                        $enreg[$to] = isset($enreg[$original]) ? $enreg[$original] : null;\n                    }\n                }\n\n                $session_name = $enreg['SessionName'];\n\n                if ($debug) {\n                    $logger->addInfo('---------------------------------------');\n                    $logger->addInfo(\"Sessions - Start process of session: $session_name\");\n                    $logger->addInfo('---------------------------------------');\n                }\n\n                // Default visibility\n                $visibilityAfterExpirationPerSession = $sessionVisibility;\n\n                if (isset($enreg['VisibilityAfterExpiration'])) {\n                    $visibility = $enreg['VisibilityAfterExpiration'];\n                    switch ($visibility) {\n                        case 'read_only':\n                            $visibilityAfterExpirationPerSession = SESSION_VISIBLE_READ_ONLY;\n                            break;\n                        case 'accessible':\n                            $visibilityAfterExpirationPerSession = SESSION_VISIBLE;\n                            break;\n                        case 'not_accessible':\n                            $visibilityAfterExpirationPerSession = SESSION_INVISIBLE;\n                            break;\n                    }\n                }\n\n                if (empty($session_name)) {\n                    continue;\n                }\n\n                $displayAccessStartDate = $enreg['DisplayStartDate'] ?? $enreg['DateStart'];\n                $displayAccessEndDate = $enreg['DisplayEndDate'] ?? $enreg['DateEnd'];\n                $coachAccessStartDate = $enreg['CoachStartDate'] ?? $enreg['DateStart'];\n                $coachAccessEndDate = $enreg['CoachEndDate'] ?? $enreg['DateEnd'];\n                // We assume the dates are already in UTC\n                $dateStart = explode('/', $enreg['DateStart']);\n                $dateEnd = explode('/', $enreg['DateEnd']);\n                $dateStart = $dateStart[0].'-'.$dateStart[1].'-'.$dateStart[2].' 00:00:00';\n                $dateEnd = $dateEnd[0].'-'.$dateEnd[1].'-'.$dateEnd[2].' 23:59:59';\n                $displayAccessStartDate = explode('/', $displayAccessStartDate);\n                $displayAccessStartDate = implode('-', $displayAccessStartDate).' 00:00:00';\n                $displayAccessEndDate = explode('/', $displayAccessEndDate);\n                $displayAccessEndDate = implode('-', $displayAccessEndDate).' 23:59:59';\n                $coachAccessStartDate = explode('/', $coachAccessStartDate);\n                $coachAccessStartDate = implode('-', $coachAccessStartDate).' 00:00:00';\n                $coachAccessEndDate = explode('/', $coachAccessEndDate);\n                $coachAccessEndDate = implode('-', $coachAccessEndDate).' 23:59:59';\n                $session_category_id = $enreg['SessionCategory'] ?? null;\n                $sessionDescription = $enreg['SessionDescription'] ?? null;\n                $classes = isset($enreg['Classes']) ? explode('|', $enreg['Classes']) : [];\n                $extraParams = [];\n                if (!is_null($showDescription)) {\n                    $extraParams['show_description'] = intval($showDescription);\n                }\n\n                $coachBefore = '';\n                $coachAfter = '';\n                if (!empty($daysCoachAccessBeforeBeginning) && !empty($daysCoachAccessAfterBeginning)) {\n                    $date = new DateTime($dateStart);\n                    $interval = new DateInterval('P'.$daysCoachAccessBeforeBeginning.'D');\n                    $date->sub($interval);\n                    $coachBefore = $date->format('Y-m-d h:i');\n                    $coachAccessStartDate = $coachBefore;\n                    $coachBefore = api_get_utc_datetime($coachBefore);\n\n                    $date = new DateTime($dateEnd);\n                    $interval = new DateInterval('P'.$daysCoachAccessAfterBeginning.'D');\n                    $date->add($interval);\n                    $coachAfter = $date->format('Y-m-d h:i');\n                    $coachAccessEndDate = $coachAfter;\n                    $coachAfter = api_get_utc_datetime($coachAfter);\n                }\n\n                $dateStart = api_get_utc_datetime($dateStart);\n                $dateEnd = api_get_utc_datetime($dateEnd);\n                $displayAccessStartDate = api_get_utc_datetime($displayAccessStartDate);\n                $displayAccessEndDate = api_get_utc_datetime($displayAccessEndDate);\n                $coachAccessStartDate = api_get_utc_datetime($coachAccessStartDate);\n                $coachAccessEndDate = api_get_utc_datetime($coachAccessEndDate);\n\n                if (!empty($sessionDescription)) {\n                    $extraParams['description'] = $sessionDescription;\n                }\n\n                if (!empty($session_category_id)) {\n                    $extraParams['session_category_id'] = $session_category_id;\n                }\n\n                // Searching a general coach.\n                if (!empty($enreg['Coach'])) {\n                    $coach_id = UserManager::get_user_id_from_username($enreg['Coach']);\n                    if ($coach_id === false) {\n                        // If the coach-user does not exist - I'm the coach.\n                        $coach_id = $defaultUserId;\n                    }\n                } else {\n                    $coach_id = $defaultUserId;\n                }\n\n                $users = explode('|', $enreg['Users']);\n                $courses = explode('|', $enreg['Courses']);\n\n                $deleteOnlyCourseCoaches = false;\n                if (count($courses) == 1) {\n                    if ($logger) {\n                        $logger->addInfo('Only one course delete old coach list');\n                    }\n                    $deleteOnlyCourseCoaches = true;\n                }\n\n                if (!$updateSession) {\n                    // Create a session.\n                    $unique_name = false;\n                    $i = 0;\n                    // Change session name, verify that session doesn't exist.\n                    $suffix = null;\n                    while (!$unique_name) {\n                        if ($i > 1) {\n                            $suffix = ' - '.$i;\n                        }\n                        $sql = 'SELECT id FROM '.$tbl_session.'\n                                WHERE name=\"'.Database::escape_string($session_name).$suffix.'\"';\n                        $rs = Database::query($sql);\n                        if (Database::result($rs, 0, 0)) {\n                            $i++;\n                        } else {\n                            $unique_name = true;\n                            $session_name .= $suffix;\n                        }\n                    }\n\n                    $sessionParams = [\n                        'name' => $session_name,\n                        'id_coach' => $coach_id,\n                        'access_start_date' => $dateStart,\n                        'access_end_date' => $dateEnd,\n                        'display_start_date' => $displayAccessStartDate,\n                        'display_end_date' => $displayAccessEndDate,\n                        'coach_access_start_date' => $coachAccessStartDate,\n                        'coach_access_end_date' => $coachAccessEndDate,\n                        'visibility' => $visibilityAfterExpirationPerSession,\n                        'session_admin_id' => $defaultUserId,\n                    ];\n\n                    if (!empty($extraParams)) {\n                        $sessionParams = array_merge($sessionParams, $extraParams);\n                    }\n                    // Creating the session.\n                    $session_id = Database::insert($tbl_session, $sessionParams);\n                    if ($debug) {\n                        if ($session_id) {\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n                            $logger->addInfo(\"Session created: #$session_id - $session_name\");\n                        } else {\n                            $message = \"Sessions - Session NOT created: $session_name\";\n                            $logger->addError($message);\n                            $report[] = $message;\n                        }\n                    }\n                    $session_counter++;\n                } else {\n                    $sessionId = null;\n                    if (isset($extraFields) && !empty($extraFields) && !empty($enreg['extra_'.$extraFieldId])) {\n                        $sessionId = self::getSessionIdFromOriginalId($enreg['extra_'.$extraFieldId], $extraFieldId);\n                        if (empty($sessionId)) {\n                            $my_session_result = false;\n                        } else {\n                            $my_session_result = true;\n                        }\n                    } else {\n                        $my_session_result = self::get_session_by_name($enreg['SessionName']);\n                    }\n\n                    if ($my_session_result === false) {\n                        // One more check\n                        $sessionExistsWithName = self::get_session_by_name($session_name);\n                        if ($sessionExistsWithName) {\n                            if ($debug) {\n                                $message = \"Skip Session - Trying to update a session, but name already exists: $session_name\";\n                                $logger->addError($message);\n                                $report[] = $message;\n                            }\n                            continue;\n                        }\n\n                        $sessionParams = [\n                            'name' => $session_name,\n                            'id_coach' => $coach_id,\n                            'access_start_date' => $dateStart,\n                            'access_end_date' => $dateEnd,\n                            'display_start_date' => $displayAccessStartDate,\n                            'display_end_date' => $displayAccessEndDate,\n                            'coach_access_start_date' => $coachAccessStartDate,\n                            'coach_access_end_date' => $coachAccessEndDate,\n                            'visibility' => $visibilityAfterExpirationPerSession,\n                            'session_admin_id' => $defaultUserId,\n                        ];\n\n                        if (!empty($extraParams)) {\n                            $sessionParams = array_merge($sessionParams, $extraParams);\n                        }\n                        Database::insert($tbl_session, $sessionParams);\n\n                        // We get the last insert id.\n                        $my_session_result = self::get_session_by_name($session_name);\n                        $session_id = $my_session_result['id'];\n\n                        if ($session_id) {\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n                            if ($debug) {\n                                $logger->addInfo(\"Sessions - #$session_id created: $session_name\");\n                            }\n\n                            // Delete session-user relation only for students\n                            $sql = \"DELETE FROM $tbl_session_user\n                                    WHERE session_id = '$session_id' AND relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n                            Database::query($sql);\n\n                            $sql = \"DELETE FROM $tbl_session_course WHERE session_id = '$session_id'\";\n                            Database::query($sql);\n\n                            // Delete session-course-user relationships students and coaches.\n                            if ($updateCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('0', '2')\";\n                                Database::query($sql);\n                            } else {\n                                // Delete session-course-user relation ships *only* for students.\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status <> 2\";\n                                Database::query($sql);\n                            }\n                            if ($deleteOnlyCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('2')\";\n                                Database::query($sql);\n                            }\n                        }\n                    } else {\n                        // Updating the session.\n                        $params = [\n                            'id_coach' => $coach_id,\n                            'access_start_date' => $dateStart,\n                            'access_end_date' => $dateEnd,\n                            'display_start_date' => $displayAccessStartDate,\n                            'display_end_date' => $displayAccessEndDate,\n                            'coach_access_start_date' => $coachAccessStartDate,\n                            'coach_access_end_date' => $coachAccessEndDate,\n                            'visibility' => $visibilityAfterExpirationPerSession,\n                            'session_category_id' => $session_category_id,\n                        ];\n\n                        if (!empty($sessionDescription)) {\n                            $params['description'] = $sessionDescription;\n                        }\n\n                        if (!empty($fieldsToAvoidUpdate)) {\n                            foreach ($fieldsToAvoidUpdate as $field) {\n                                unset($params[$field]);\n                            }\n                        }\n\n                        if (isset($sessionId) && !empty($sessionId)) {\n                            $session_id = $sessionId;\n                            if (!empty($enreg['SessionName'])) {\n                                $sessionExistsWithName = self::get_session_by_name($session_name);\n                                if ($sessionExistsWithName === false) {\n                                    $sessionName = Database::escape_string($enreg['SessionName']);\n                                    $sql = \"UPDATE $tbl_session SET name = '$sessionName' WHERE id = $session_id\";\n                                    Database::query($sql);\n                                    $logger->addInfo(\n                                        \"Session #$session_id name IS updated with: '$session_name' External id: \".$enreg['extra_'.$extraFieldId]\n                                    );\n                                } else {\n                                    $sessionExistsBesidesMe = self::sessionNameExistBesidesMySession(\n                                        $session_id,\n                                        $session_name\n                                    );\n                                    if ($sessionExistsBesidesMe === true) {\n                                        if ($debug) {\n                                            $message = \"Skip Session. Error when update session Session #$session_id Name: '$session_name'. Other session has the same name. External id: \".$enreg['extra_'.$extraFieldId];\n                                            $logger->addError($message);\n                                            $report[] = $message;\n                                        }\n                                        continue;\n                                    } else {\n                                        if ($debug) {\n                                            $logger->addInfo(\n                                                \"Session #$session_id name is not updated because it didn't change (but update of other session values will continue) Name: '$session_name' External id: \".$enreg['extra_'.$extraFieldId]\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            $my_session_result = self::get_session_by_name($session_name);\n                            $session_id = $my_session_result['id'];\n                        }\n\n                        if ($debug) {\n                            $logger->addInfo(\"Session #$session_id to be updated: '$session_name'\");\n                        }\n\n                        if ($session_id) {\n                            $sessionInfo = api_get_session_info($session_id);\n                            $params['show_description'] = isset($sessionInfo['show_description']) ? $sessionInfo['show_description'] : intval($showDescription);\n\n                            if (!empty($daysCoachAccessBeforeBeginning) && !empty($daysCoachAccessAfterBeginning)) {\n                                if (empty($sessionInfo['nb_days_access_before_beginning']) ||\n                                    (!empty($sessionInfo['nb_days_access_before_beginning']) &&\n                                        $sessionInfo['nb_days_access_before_beginning'] < $daysCoachAccessBeforeBeginning)\n                                ) {\n                                    $params['coach_access_start_date'] = $coachBefore;\n                                }\n\n                                if (empty($sessionInfo['nb_days_access_after_end']) ||\n                                    (!empty($sessionInfo['nb_days_access_after_end']) &&\n                                        $sessionInfo['nb_days_access_after_end'] < $daysCoachAccessAfterBeginning)\n                                ) {\n                                    $params['coach_access_end_date'] = $coachAfter;\n                                }\n                            }\n\n                            Database::update($tbl_session, $params, ['id = ?' => $session_id]);\n                            foreach ($enreg as $key => $value) {\n                                if (substr($key, 0, 6) == 'extra_') { //an extra field\n                                    self::update_session_extra_field_value($session_id, substr($key, 6), $value);\n                                }\n                            }\n\n                            if ($debug) {\n                                $logger->addInfo(\"Session updated #$session_id\");\n                            }\n\n                            // Delete session-user relation only for students\n                            $sql = \"DELETE FROM $tbl_session_user\n                                    WHERE session_id = '$session_id' AND relation_type <> \".SESSION_RELATION_TYPE_RRHH;\n                            Database::query($sql);\n\n                            $sql = \"DELETE FROM $tbl_session_course WHERE session_id = '$session_id'\";\n                            Database::query($sql);\n\n                            // Delete session-course-user relationships students and coaches.\n                            if ($updateCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('0', '2')\";\n                                Database::query($sql);\n                            } else {\n                                // Delete session-course-user relation ships *only* for students.\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status <> 2\";\n                                Database::query($sql);\n                            }\n\n                            if ($deleteOnlyCourseCoaches) {\n                                $sql = \"DELETE FROM $tbl_session_course_user\n                                        WHERE session_id = '$session_id' AND status in ('2')\";\n                                Database::query($sql);\n                            }\n                        } else {\n                            if ($debug) {\n                                $logger->addError(\n                                    \"Sessions - Session not found\"\n                                );\n                            }\n                        }\n                    }\n                    $session_counter++;\n                }\n\n                $sessionList[] = $session_id;\n\n                // Adding the relationship \"Session - User\" for students\n                $userList = [];\n                if (is_array($users)) {\n                    $extraFieldValueCareer = new ExtraFieldValue('career');\n                    $careerList = isset($enreg['extra_careerid']) && !empty($enreg['extra_careerid']) ? $enreg['extra_careerid'] : [];\n                    $careerList = str_replace(['[', ']'], '', $careerList);\n                    $finalCareerIdList = [];\n                    if (!empty($careerList)) {\n                        $careerList = explode(',', $careerList);\n                        foreach ($careerList as $careerId) {\n                            $realCareerIdList = $extraFieldValueCareer->get_item_id_from_field_variable_and_field_value(\n                                'external_career_id',\n                                $careerId\n                            );\n                            if (isset($realCareerIdList['item_id'])) {\n                                $finalCareerIdList[] = $realCareerIdList['item_id'];\n                            }\n                        }\n                    }\n                    foreach ($users as $user) {\n                        $user_id = UserManager::get_user_id_from_username($user);\n                        if ($user_id !== false) {\n                            if (!empty($finalCareerIdList)) {\n                                foreach ($finalCareerIdList as $careerId) {\n                                    UserManager::addUserCareer($user_id, $careerId);\n                                }\n                            }\n\n                            $userList[] = $user_id;\n                            // Insert new users.\n                            $sql = \"INSERT IGNORE INTO $tbl_session_user SET\n                                    user_id = '$user_id',\n                                    session_id = '$session_id',\n                                    registered_at = '\".api_get_utc_datetime().\"'\";\n                            Database::query($sql);\n                            if ($debug) {\n                                $logger->addInfo(\"Adding User #$user_id ($user) to session #$session_id\");\n                            }\n                            $user_counter++;\n                        }\n                    }\n                }\n\n                if ($deleteUsersNotInList) {\n                    // Getting user in DB in order to compare to the new list.\n                    $usersListInDatabase = self::get_users_by_session($session_id, 0);\n                    if (!empty($usersListInDatabase)) {\n                        if (empty($userList)) {\n                            foreach ($usersListInDatabase as $userInfo) {\n                                self::unsubscribe_user_from_session($session_id, $userInfo['user_id']);\n                            }\n                        } else {\n                            foreach ($usersListInDatabase as $userInfo) {\n                                if (!in_array($userInfo['user_id'], $userList)) {\n                                    self::unsubscribe_user_from_session($session_id, $userInfo['user_id']);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // See BT#6449\n                $onlyAddFirstCoachOrTeacher = false;\n                if ($sessionWithCoursesModifier) {\n                    if (count($courses) >= 2) {\n                        // Only first teacher in course session;\n                        $onlyAddFirstCoachOrTeacher = true;\n                        // Remove all teachers from course.\n                        $removeAllTeachersFromCourse = false;\n                    }\n                }\n\n                foreach ($courses as $course) {\n                    $courseArray = bracketsToArray($course);\n                    $course_code = $courseArray[0];\n\n                    if (CourseManager::course_exists($course_code)) {\n                        $courseInfo = api_get_course_info($course_code);\n                        $courseId = $courseInfo['real_id'];\n\n                        // Adding the course to a session.\n                        $sql = \"INSERT IGNORE INTO $tbl_session_course\n                                SET c_id = '$courseId', session_id='$session_id'\";\n                        Database::query($sql);\n\n                        self::installCourse($session_id, $courseInfo['real_id']);\n\n                        if ($debug) {\n                            $logger->addInfo(\"Adding course '$course_code' to session #$session_id\");\n                        }\n\n                        $course_counter++;\n                        $course_coaches = isset($courseArray[1]) ? $courseArray[1] : null;\n                        $course_users = isset($courseArray[2]) ? $courseArray[2] : null;\n                        $course_users = explode(',', $course_users);\n                        $course_coaches = explode(',', $course_coaches);\n\n                        // Checking if the flag is set TeachersWillBeAddedAsCoachInAllCourseSessions (course_edit.php)\n                        $addTeachersToSession = true;\n\n                        if (array_key_exists('add_teachers_to_sessions_courses', $courseInfo)) {\n                            $addTeachersToSession = $courseInfo['add_teachers_to_sessions_courses'];\n                        }\n\n                        // If any user provided for a course, use the users array.\n                        if (empty($course_users)) {\n                            if (!empty($userList)) {\n                                self::subscribe_users_to_session_course(\n                                    $userList,\n                                    $session_id,\n                                    $course_code\n                                );\n                                if ($debug) {\n                                    $msg = \"Adding student list \".implode(', #', $userList).\" to course: '$course_code' and session #$session_id\";\n                                    $logger->addInfo($msg);\n                                }\n                            }\n                        }\n\n                        // Adding coaches to session course user.\n                        if (!empty($course_coaches)) {\n                            $savedCoaches = [];\n                            // only edit if add_teachers_to_sessions_courses is set.\n                            if ($addTeachersToSession) {\n                                if ($addOriginalCourseTeachersAsCourseSessionCoaches) {\n                                    // Adding course teachers as course session teachers.\n                                    $alreadyAddedTeachers = CourseManager::get_teacher_list_from_course_code(\n                                        $course_code\n                                    );\n\n                                    if (!empty($alreadyAddedTeachers)) {\n                                        $teachersToAdd = [];\n                                        foreach ($alreadyAddedTeachers as $user) {\n                                            $teachersToAdd[] = $user['username'];\n                                        }\n                                        $course_coaches = array_merge(\n                                            $course_coaches,\n                                            $teachersToAdd\n                                        );\n                                    }\n                                }\n\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                    if ($coach_id !== false) {\n                                        // Just insert new coaches\n                                        self::updateCoaches(\n                                            $session_id,\n                                            $courseId,\n                                            [$coach_id],\n                                            false\n                                        );\n\n                                        if ($debug) {\n                                            $logger->addInfo(\"Adding course coach: user #$coach_id ($course_coach) to course: '$course_code' and session #$session_id\");\n                                        }\n                                        $savedCoaches[] = $coach_id;\n                                    } else {\n                                        $error_message .= get_lang('UserDoesNotExist').' : '.$course_coach.$eol;\n                                    }\n                                }\n                            }\n\n                            // Custom courses/session coaches\n                            $teacherToAdd = null;\n                            // Only one coach is added.\n                            if ($onlyAddFirstCoachOrTeacher == true) {\n                                if ($debug) {\n                                    $logger->addInfo(\"onlyAddFirstCoachOrTeacher : true\");\n                                }\n\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                    if ($coach_id !== false) {\n                                        $teacherToAdd = $coach_id;\n                                        break;\n                                    }\n                                }\n\n                                // Un subscribe everyone that's not in the list.\n                                $teacherList = CourseManager::get_teacher_list_from_course_code($course_code);\n                                if (!empty($teacherList)) {\n                                    foreach ($teacherList as $teacher) {\n                                        if ($teacherToAdd != $teacher['user_id']) {\n                                            $sql = \"SELECT * FROM \".Database::get_main_table(TABLE_MAIN_COURSE_USER).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseId.\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            $rows = Database::num_rows($result);\n                                            if ($rows > 0) {\n                                                $userCourseData = Database::fetch_array($result, 'ASSOC');\n                                                if (!empty($userCourseData)) {\n                                                    $teacherBackupList[$teacher['user_id']][$course_code] = $userCourseData;\n                                                }\n                                            }\n\n                                            $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_USER).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseInfo['real_id'].\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                $groupBackup['user'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                            }\n\n                                            $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_TUTOR).\"\n                                                    WHERE\n                                                        user_id = \".$teacher['user_id'].\" AND\n                                                        c_id = '\".$courseInfo['real_id'].\"'\n                                                    \";\n\n                                            $result = Database::query($sql);\n                                            while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                $groupBackup['tutor'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                            }\n\n                                            CourseManager::unsubscribe_user(\n                                                $teacher['user_id'],\n                                                $course_code\n                                            );\n\n                                            if ($debug) {\n                                                $logger->addInfo(\"Delete user #\".$teacher['user_id'].\" from base course: $course_code\");\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (!empty($teacherToAdd)) {\n                                    self::updateCoaches(\n                                        $session_id,\n                                        $courseId,\n                                        [$teacherToAdd],\n                                        true\n                                    );\n\n                                    if ($debug) {\n                                        $logger->addInfo(\"Add coach #$teacherToAdd to course $courseId and session $session_id\");\n                                    }\n\n                                    $userCourseCategory = '';\n                                    if (isset($teacherBackupList[$teacherToAdd]) &&\n                                        isset($teacherBackupList[$teacherToAdd][$course_code])\n                                    ) {\n                                        $courseUserData = $teacherBackupList[$teacherToAdd][$course_code];\n                                        $userCourseCategory = $courseUserData['user_course_cat'];\n                                    }\n\n                                    CourseManager::subscribeUser(\n                                        $teacherToAdd,\n                                        $course_code,\n                                        COURSEMANAGER,\n                                        0,\n                                        $userCourseCategory\n                                    );\n\n                                    if ($debug) {\n                                        $logger->addInfo(\"Subscribe user #$teacherToAdd as teacher in course $course_code with user userCourseCategory $userCourseCategory\");\n                                    }\n\n                                    if (isset($groupBackup['user'][$teacherToAdd]) &&\n                                        isset($groupBackup['user'][$teacherToAdd][$course_code]) &&\n                                        !empty($groupBackup['user'][$teacherToAdd][$course_code])\n                                    ) {\n                                        foreach ($groupBackup['user'][$teacherToAdd][$course_code] as $data) {\n                                            $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                            GroupManager::subscribe_users(\n                                                $teacherToAdd,\n                                                $groupInfo,\n                                                $data['c_id']\n                                            );\n                                        }\n                                    }\n\n                                    if (isset($groupBackup['tutor'][$teacherToAdd]) &&\n                                        isset($groupBackup['tutor'][$teacherToAdd][$course_code]) &&\n                                        !empty($groupBackup['tutor'][$teacherToAdd][$course_code])\n                                    ) {\n                                        foreach ($groupBackup['tutor'][$teacherToAdd][$course_code] as $data) {\n                                            $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                            GroupManager::subscribe_tutors(\n                                                $teacherToAdd,\n                                                $groupInfo,\n                                                $data['c_id']\n                                            );\n                                        }\n                                    }\n                                }\n                            }\n\n                            // See BT#6449#note-195\n                            // All coaches are added.\n                            if ($removeAllTeachersFromCourse) {\n                                if ($debug) {\n                                    $logger->addInfo(\"removeAllTeachersFromCourse true\");\n                                }\n                                $teacherToAdd = null;\n                                foreach ($course_coaches as $course_coach) {\n                                    $coach_id = UserManager::get_user_id_from_username(\n                                        $course_coach\n                                    );\n                                    if ($coach_id !== false) {\n                                        $teacherToAdd[] = $coach_id;\n                                    }\n                                }\n\n                                if (!empty($teacherToAdd)) {\n                                    // Deleting all course teachers and adding the only coach as teacher.\n                                    $teacherList = CourseManager::get_teacher_list_from_course_code($course_code);\n\n                                    if (!empty($teacherList)) {\n                                        foreach ($teacherList as $teacher) {\n                                            if (!in_array($teacher['user_id'], $teacherToAdd)) {\n                                                $sql = \"SELECT * FROM \".Database::get_main_table(TABLE_MAIN_COURSE_USER).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseId.\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                $rows = Database::num_rows($result);\n                                                if ($rows > 0) {\n                                                    $userCourseData = Database::fetch_array($result, 'ASSOC');\n                                                    if (!empty($userCourseData)) {\n                                                        $teacherBackupList[$teacher['user_id']][$course_code] = $userCourseData;\n                                                    }\n                                                }\n\n                                                $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_USER).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseInfo['real_id'].\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                    $groupBackup['user'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                                }\n\n                                                $sql = \"SELECT * FROM \".Database::get_course_table(TABLE_GROUP_TUTOR).\"\n                                                        WHERE\n                                                            user_id = \".$teacher['user_id'].\" AND\n                                                            c_id = '\".$courseInfo['real_id'].\"'\n                                                        \";\n\n                                                $result = Database::query($sql);\n                                                while ($groupData = Database::fetch_array($result, 'ASSOC')) {\n                                                    $groupBackup['tutor'][$teacher['user_id']][$course_code][$groupData['group_id']] = $groupData;\n                                                }\n\n                                                CourseManager::unsubscribe_user(\n                                                    $teacher['user_id'],\n                                                    $course_code\n                                                );\n\n                                                if ($debug) {\n                                                    $logger->addInfo(\"Delete user #\".$teacher['user_id'].\" from base course: $course_code\");\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    foreach ($teacherToAdd as $teacherId) {\n                                        $userCourseCategory = '';\n                                        if (isset($teacherBackupList[$teacherId]) &&\n                                            isset($teacherBackupList[$teacherId][$course_code])\n                                        ) {\n                                            $courseUserData = $teacherBackupList[$teacherId][$course_code];\n                                            $userCourseCategory = $courseUserData['user_course_cat'];\n                                        }\n\n                                        CourseManager::subscribeUser(\n                                            $teacherId,\n                                            $course_code,\n                                            COURSEMANAGER,\n                                            0,\n                                            $userCourseCategory\n                                        );\n\n                                        if ($debug) {\n                                            $logger->addInfo(\"Add user as teacher #\".$teacherId.\" in base course: $course_code with userCourseCategory: $userCourseCategory\");\n                                        }\n\n                                        if (isset($groupBackup['user'][$teacherId]) &&\n                                            isset($groupBackup['user'][$teacherId][$course_code]) &&\n                                            !empty($groupBackup['user'][$teacherId][$course_code])\n                                        ) {\n                                            foreach ($groupBackup['user'][$teacherId][$course_code] as $data) {\n                                                $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                                GroupManager::subscribe_users(\n                                                    $teacherId,\n                                                    $groupInfo,\n                                                    $data['c_id']\n                                                );\n                                            }\n                                        }\n\n                                        if (isset($groupBackup['tutor'][$teacherId]) &&\n                                            isset($groupBackup['tutor'][$teacherId][$course_code]) &&\n                                            !empty($groupBackup['tutor'][$teacherId][$course_code])\n                                        ) {\n                                            foreach ($groupBackup['tutor'][$teacherId][$course_code] as $data) {\n                                                $groupInfo = GroupManager::get_group_properties($data['group_id']);\n                                                GroupManager::subscribe_tutors(\n                                                    $teacherId,\n                                                    $groupInfo,\n                                                    $data['c_id']\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Continue default behaviour.\n                            if ($onlyAddFirstCoachOrTeacher == false) {\n                                // Checking one more time see BT#6449#note-149\n                                $coaches = self::getCoachesByCourseSession($session_id, $courseId);\n                                // Update coaches if only there's 1 course see BT#6449#note-189\n                                if (empty($coaches) || count($courses) == 1) {\n                                    foreach ($course_coaches as $course_coach) {\n                                        $course_coach = trim($course_coach);\n                                        $coach_id = UserManager::get_user_id_from_username($course_coach);\n                                        if ($coach_id !== false) {\n                                            // Just insert new coaches\n                                            self::updateCoaches(\n                                                $session_id,\n                                                $courseId,\n                                                [$coach_id],\n                                                false\n                                            );\n\n                                            if ($debug) {\n                                                $logger->addInfo(\"Sessions - Adding course coach: user #$coach_id ($course_coach) to course: '$course_code' and session #$session_id\");\n                                            }\n                                            $savedCoaches[] = $coach_id;\n                                        } else {\n                                            $error_message .= get_lang('UserDoesNotExist').' : '.$course_coach.$eol;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        // Adding Students, updating relationship \"Session - Course - User\".\n                        $course_users = array_filter($course_users);\n                        if (!empty($course_users)) {\n                            foreach ($course_users as $user) {\n                                $user_id = UserManager::get_user_id_from_username($user);\n\n                                if ($user_id !== false) {\n                                    self::subscribe_users_to_session_course(\n                                        [$user_id],\n                                        $session_id,\n                                        $course_code\n                                    );\n                                    if ($debug) {\n                                        $logger->addInfo(\"Adding student: user #$user_id ($user) to course: '$course_code' and session #$session_id\");\n                                    }\n                                } else {\n                                    $error_message .= get_lang('UserDoesNotExist').': '.$user.$eol;\n                                }\n                            }\n                        }\n                        $inserted_in_course[$course_code] = $courseInfo['title'];\n                    }\n                }\n                $access_url_id = api_get_current_access_url_id();\n                UrlManager::add_session_to_url($session_id, $access_url_id);\n                $sql = \"UPDATE $tbl_session SET nbr_users = '$user_counter', nbr_courses = '$course_counter'\n                        WHERE id = '$session_id'\";\n                Database::query($sql);\n\n                self::addClassesByName($session_id, $classes, false, $error_message);\n\n                if ($debug) {\n                    $logger->addInfo(\"End process session #$session_id -------------------- \");\n                }\n            }\n\n            if (!empty($report)) {\n                if ($debug) {\n                    $logger->addInfo(\"--Summary--\");\n                    foreach ($report as $line) {\n                        $logger->addInfo($line);\n                    }\n                }\n            }\n        }\n\n        return [\n            'error_message' => $error_message,\n            'session_counter' => $session_counter,\n            'session_list' => $sessionList,\n        ];\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function getCoachesByCourseSession($sessionId, $courseId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessionId = (int) $sessionId;\n        $courseId = (int) $courseId;\n\n        $sql = \"SELECT user_id FROM $table\n                WHERE\n                    session_id = '$sessionId' AND\n                    c_id = '$courseId' AND\n                    status = 2\";\n        $result = Database::query($sql);\n\n        $coaches = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $coaches[] = $row['user_id'];\n            }\n        }\n\n        return $coaches;\n    }\n\n    /**\n     * @param int    $sessionId\n     * @param int    $courseId\n     * @param string $separator\n     *\n     * @return string\n     */\n    public static function getCoachesByCourseSessionToString(\n        $sessionId,\n        $courseId,\n        $separator = ''\n    ) {\n        $coaches = self::getCoachesByCourseSession($sessionId, $courseId);\n        $list = [];\n        if (!empty($coaches)) {\n            foreach ($coaches as $coachId) {\n                $userInfo = api_get_user_info($coachId);\n                if ($userInfo) {\n                    $list[] = $userInfo['complete_name'];\n                }\n            }\n        }\n\n        $separator = empty($separator) ? CourseManager::USER_SEPARATOR : $separator;\n\n        return array_to_string($list, $separator);\n    }\n\n    /**\n     * Get all coaches added in the session - course relationship.\n     *\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getCoachesBySession($sessionId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $sessionId = intval($sessionId);\n\n        $sql = \"SELECT DISTINCT user_id\n                FROM $table\n                WHERE session_id = '$sessionId' AND status = 2\";\n        $result = Database::query($sql);\n\n        $coaches = [];\n        if (Database::num_rows($result) > 0) {\n            while ($row = Database::fetch_array($result)) {\n                $coaches[] = $row['user_id'];\n            }\n        }\n\n        return $coaches;\n    }\n\n    /**\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getAllCoursesFromAllSessionFromDrh($userId)\n    {\n        $sessions = self::get_sessions_followed_by_drh($userId);\n        $coursesFromSession = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $session) {\n                $courseList = self::get_course_list_by_session_id($session['id']);\n                foreach ($courseList as $course) {\n                    $coursesFromSession[] = $course['code'];\n                }\n            }\n        }\n\n        return $coursesFromSession;\n    }\n\n    /**\n     * getAllCoursesFromAllSessions.\n     *\n     * @return array\n     */\n    public static function getAllCoursesFromAllSessions()\n    {\n        $sessions = self::get_sessions_list();\n        $coursesFromSession = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $session) {\n                $courseList = self::get_course_list_by_session_id($session['id']);\n                foreach ($courseList as $course) {\n                    $coursesFromSession[$course['code'].':'.$session['id']] = $course['visual_code'].' - '.$course['title'].' ('.$session['name'].')';\n                }\n            }\n        }\n\n        return $coursesFromSession;\n    }\n\n    /**\n     * Return user id list or count of users depending of the $getCount parameter.\n     *\n     * @param string $status\n     * @param int    $userId\n     * @param bool   $getCount\n     * @param int    $from\n     * @param int    $numberItems\n     * @param int    $column\n     * @param string $direction\n     * @param string $keyword\n     * @param string $active\n     * @param string $lastConnectionDate\n     * @param array  $sessionIdList\n     * @param array  $studentIdList\n     * @param int    $filterByStatus\n     *\n     * @return array|int\n     */\n    public static function getAllUsersFromCoursesFromAllSessionFromStatus(\n        $status,\n        $userId,\n        $getCount = false,\n        $from = null,\n        $numberItems = null,\n        $column = '',\n        $direction = 'asc',\n        $keyword = null,\n        $active = null,\n        $lastConnectionDate = null,\n        $sessionIdList = [],\n        $studentIdList = [],\n        $filterByStatus = null,\n        $filterUsers = null\n    ) {\n        $filterByStatus = (int) $filterByStatus;\n        $userId = (int) $userId;\n\n        if (empty($column)) {\n            $column = 'u.lastname';\n            if (api_is_western_name_order()) {\n                $column = 'u.firstname';\n            }\n        }\n\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_course_user = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n        $tbl_user_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_USER);\n        $tbl_course_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_COURSE);\n        $tbl_session_rel_course_rel_user = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tbl_session_rel_access_url = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n        $direction = in_array(strtolower($direction), ['asc', 'desc']) ? $direction : 'asc';\n        $column = Database::escape_string($column);\n\n        $urlId = api_get_current_access_url_id();\n\n        $sessionConditions = '';\n        $courseConditions = '';\n        $userConditions = '';\n\n        if (isset($active)) {\n            $active = (int) $active;\n            $userConditions .= \" AND active = $active\";\n        }\n\n        $courseList = CourseManager::get_courses_followed_by_drh($userId, DRH);\n        if (!empty($courseList)) {\n            $courseIdList = array_column($courseList, 'id');\n            $courseConditions = ' AND c.id IN (\"'.implode('\",\"', $courseIdList).'\")';\n        }\n\n        $userConditionsFromDrh = '';\n\n        // Classic DRH\n        if (empty($studentIdList)) {\n            $studentListSql = UserManager::get_users_followed_by_drh(\n                $userId,\n                $filterByStatus,\n                true,\n                false\n            );\n            if (!empty($studentListSql)) {\n                $studentIdList = array_keys($studentListSql);\n                $studentListSql = \"'\".implode(\"','\", $studentIdList).\"'\";\n            }\n        } else {\n            $studentIdList = array_map('intval', $studentIdList);\n            $studentListSql = \"'\".implode(\"','\", $studentIdList).\"'\";\n        }\n        if (!empty($studentListSql)) {\n            $userConditionsFromDrh = \" AND u.user_id IN ($studentListSql) \";\n        }\n\n        switch ($status) {\n            case 'admin':\n            case 'drh':\n                break;\n            case 'drh_all':\n                // Show all by DRH\n                if (empty($sessionIdList)) {\n                    $sessionListFollowed = self::get_sessions_followed_by_drh(\n                        $userId,\n                        null,\n                        null,\n                        false,\n                        true\n                    );\n\n                    if (!empty($sessionListFollowed)) {\n                        $sessionIdList = array_column($sessionListFollowed, 'id');\n                    }\n                }\n\n                if (!empty($sessionIdList)) {\n                    $sessionIdList = array_map('intval', $sessionIdList);\n                    $sessionsListSql = \"'\".implode(\"','\", $sessionIdList).\"'\";\n                    $sessionConditions = \" AND s.id IN ($sessionsListSql) \";\n                }\n\n                break;\n            case 'teacher':\n            case 'session_admin':\n                $sessionConditions = \" AND s.id_coach = $userId \";\n                $userConditionsFromDrh = '';\n                break;\n        }\n\n        $select = 'SELECT DISTINCT u.* ';\n        $masterSelect = 'SELECT DISTINCT user_id FROM ';\n\n        if ($getCount) {\n            $select = 'SELECT DISTINCT u.user_id ';\n            $masterSelect = 'SELECT COUNT(DISTINCT(user_id)) as count FROM ';\n        }\n\n        if (!empty($filterByStatus)) {\n            $userConditions .= \" AND u.status = $filterByStatus\";\n        }\n\n        if (!empty($lastConnectionDate)) {\n            $lastConnectionDate = Database::escape_string($lastConnectionDate);\n            $userConditions .= \" AND u.last_login <= '$lastConnectionDate' \";\n        }\n\n        if (!empty($filterUsers)) {\n            $userConditions .= \" AND u.id IN(\".implode(',', $filterUsers).\")\";\n        }\n\n        if (!empty($keyword)) {\n            $keyword = trim(Database::escape_string($keyword));\n            $keywordParts = array_filter(explode(' ', $keyword));\n            $extraKeyword = '';\n            if (!empty($keywordParts)) {\n                $keywordPartsFixed = Database::escape_string(implode('%', $keywordParts));\n                if (!empty($keywordPartsFixed)) {\n                    $extraKeyword .= \" OR\n                        CONCAT(u.firstname, ' ', u.lastname) LIKE '%$keywordPartsFixed%' OR\n                        CONCAT(u.lastname, ' ', u.firstname) LIKE '%$keywordPartsFixed%' \";\n                }\n            }\n\n            $userConditions .= \" AND (\n                u.username LIKE '%$keyword%' OR\n                u.firstname LIKE '%$keyword%' OR\n                u.lastname LIKE '%$keyword%' OR\n                u.official_code LIKE '%$keyword%' OR\n                u.email LIKE '%$keyword%' OR\n                CONCAT(u.firstname, ' ', u.lastname) LIKE '%$keyword%' OR\n                CONCAT(u.lastname, ' ', u.firstname) LIKE '%$keyword%'\n                $extraKeyword\n            )\";\n        }\n\n        $where = \" WHERE\n                   access_url_id = $urlId\n                   $userConditions\n        \";\n\n        $userUnion = '';\n        if (!empty($userConditionsFromDrh)) {\n            $userUnion = \"\n            UNION (\n                $select\n                FROM $tbl_user u\n                INNER JOIN $tbl_user_rel_access_url url ON (url.user_id = u.id)\n                $where\n                $userConditionsFromDrh\n            )\";\n        }\n\n        $sql = \"$masterSelect (\n                ($select\n                    FROM $tbl_session s\n                    INNER JOIN $tbl_session_rel_access_url url ON (url.session_id = s.id)\n                    INNER JOIN $tbl_session_rel_course_rel_user su ON (s.id = su.session_id)\n                    INNER JOIN $tbl_user u ON (u.user_id = su.user_id)\n                    $where\n                    $sessionConditions\n                    $userConditionsFromDrh\n                ) UNION (\n                    $select\n                    FROM $tbl_course c\n                    INNER JOIN $tbl_course_rel_access_url url ON (url.c_id = c.id)\n                    INNER JOIN $tbl_course_user cu ON (cu.c_id = c.id)\n                    INNER JOIN $tbl_user u ON (u.user_id = cu.user_id)\n                    $where\n                    $courseConditions\n                    $userConditionsFromDrh\n                ) $userUnion\n                ) as t1\n                \";\n\n        if ($getCount) {\n            $result = Database::query($sql);\n\n            $count = 0;\n            if (Database::num_rows($result)) {\n                $rows = Database::fetch_array($result);\n                $count = $rows['count'];\n            }\n\n            return $count;\n        }\n\n        if (!empty($column) && !empty($direction)) {\n            $column = str_replace('u.', '', $column);\n            $sql .= \" ORDER BY `$column` $direction \";\n        }\n\n        $limitCondition = '';\n        if (isset($from) && isset($numberItems)) {\n            $from = (int) $from;\n            $numberItems = (int) $numberItems;\n            $limitCondition = \"LIMIT $from, $numberItems\";\n        }\n\n        $sql .= $limitCondition;\n\n        $result = Database::query($sql);\n\n        return Database::store_result($result);\n    }\n\n    /**\n     * @param int   $sessionId\n     * @param int   $courseId\n     * @param array $coachList\n     * @param bool  $deleteCoachesNotInList\n     */\n    public static function updateCoaches(\n        $sessionId,\n        $courseId,\n        $coachList,\n        $deleteCoachesNotInList = false\n    ) {\n        $currentCoaches = self::getCoachesByCourseSession($sessionId, $courseId);\n\n        if (!empty($coachList)) {\n            foreach ($coachList as $userId) {\n                self::set_coach_to_course_session($userId, $sessionId, $courseId);\n            }\n        }\n\n        if ($deleteCoachesNotInList) {\n            if (!empty($coachList)) {\n                $coachesToDelete = array_diff($currentCoaches, $coachList);\n            } else {\n                $coachesToDelete = $currentCoaches;\n            }\n\n            if (!empty($coachesToDelete)) {\n                foreach ($coachesToDelete as $userId) {\n                    self::set_coach_to_course_session(\n                        $userId,\n                        $sessionId,\n                        $courseId,\n                        true\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * @param array $sessions\n     * @param array $sessionsDestination\n     *\n     * @return array\n     */\n    public static function copyStudentsFromSession($sessions, $sessionsDestination)\n    {\n        $messages = [];\n        if (!empty($sessions)) {\n            foreach ($sessions as $sessionId) {\n                $sessionInfo = self::fetch($sessionId);\n                $userList = self::get_users_by_session($sessionId, 0);\n                if (!empty($userList)) {\n                    $newUserList = [];\n                    $userToString = null;\n                    foreach ($userList as $userInfo) {\n                        $newUserList[] = $userInfo['user_id'];\n                        $userToString .= $userInfo['firstname'].' '.$userInfo['lastname'].'<br />';\n                    }\n\n                    if (!empty($sessionsDestination)) {\n                        foreach ($sessionsDestination as $sessionDestinationId) {\n                            $sessionDestinationInfo = self::fetch($sessionDestinationId);\n                            $messages[] = Display::return_message(\n                                sprintf(\n                                    get_lang(\n                                        'AddingStudentsFromSessionXToSessionY'\n                                    ),\n                                    $sessionInfo['name'],\n                                    $sessionDestinationInfo['name']\n                                ),\n                                'info',\n                                false\n                            );\n                            if ($sessionId == $sessionDestinationId) {\n                                $messages[] = Display::return_message(\n                                    sprintf(\n                                        get_lang('SessionXSkipped'),\n                                        $sessionDestinationId\n                                    ),\n                                    'warning',\n                                    false\n                                );\n                                continue;\n                            }\n                            $messages[] = Display::return_message(get_lang('StudentList').'<br />'.$userToString, 'info', false);\n                            self::subscribeUsersToSession(\n                                $sessionDestinationId,\n                                $newUserList,\n                                SESSION_VISIBLE_READ_ONLY,\n                                false\n                            );\n                        }\n                    } else {\n                        $messages[] = Display::return_message(get_lang('NoDestinationSessionProvided'), 'warning');\n                    }\n                } else {\n                    $messages[] = Display::return_message(\n                        get_lang('NoStudentsFoundForSession').' #'.$sessionInfo['name'],\n                        'warning'\n                    );\n                }\n            }\n        } else {\n            $messages[] = Display::return_message(get_lang('NoData'), 'warning');\n        }\n\n        return $messages;\n    }\n\n    /**\n     * Assign coaches of a session(s) as teachers to a given course (or courses).\n     *\n     * @param array A list of session IDs\n     * @param array A list of course IDs\n     *\n     * @return string\n     */\n    public static function copyCoachesFromSessionToCourse($sessions, $courses)\n    {\n        $coachesPerSession = [];\n        foreach ($sessions as $sessionId) {\n            $coaches = self::getCoachesBySession($sessionId);\n            $coachesPerSession[$sessionId] = $coaches;\n        }\n\n        $result = [];\n\n        if (!empty($courses)) {\n            foreach ($courses as $courseId) {\n                $courseInfo = api_get_course_info_by_id($courseId);\n                foreach ($coachesPerSession as $sessionId => $coachList) {\n                    CourseManager::updateTeachers(\n                        $courseInfo,\n                        $coachList,\n                        false,\n                        false,\n                        false\n                    );\n                    $result[$courseInfo['code']][$sessionId] = $coachList;\n                }\n            }\n        }\n        $sessionUrl = api_get_path(WEB_CODE_PATH).'session/resume_session.php?id_session=';\n        $htmlResult = null;\n\n        if (!empty($result)) {\n            foreach ($result as $courseCode => $data) {\n                $url = api_get_course_url($courseCode);\n                $htmlResult .= sprintf(\n                    get_lang('CoachesSubscribedAsATeacherInCourseX'),\n                    Display::url($courseCode, $url, ['target' => '_blank'])\n                );\n                foreach ($data as $sessionId => $coachList) {\n                    $sessionInfo = self::fetch($sessionId);\n                    $htmlResult .= '<br />';\n                    $htmlResult .= Display::url(\n                        get_lang('Session').': '.$sessionInfo['name'].' <br />',\n                        $sessionUrl.$sessionId,\n                        ['target' => '_blank']\n                    );\n                    $teacherList = [];\n                    foreach ($coachList as $coachId) {\n                        $userInfo = api_get_user_info($coachId);\n                        $teacherList[] = $userInfo['complete_name'];\n                    }\n                    if (!empty($teacherList)) {\n                        $htmlResult .= implode(', ', $teacherList);\n                    } else {\n                        $htmlResult .= get_lang('NothingToAdd');\n                    }\n                }\n                $htmlResult .= '<br />';\n            }\n            $htmlResult = Display::return_message($htmlResult, 'normal', false);\n        }\n\n        return $htmlResult;\n    }\n\n    /**\n     * @param string $keyword\n     * @param string $active\n     * @param string $lastConnectionDate\n     * @param array  $sessionIdList\n     * @param array  $studentIdList\n     * @param int    $filterUserStatus   STUDENT|COURSEMANAGER constants\n     *\n     * @return array|int\n     */\n    public static function getCountUserTracking(\n        $keyword = null,\n        $active = null,\n        $lastConnectionDate = null,\n        $sessionIdList = [],\n        $studentIdList = [],\n        $filterUserStatus = null\n    ) {\n        $userId = api_get_user_id();\n        $drhLoaded = false;\n        if (api_is_drh()) {\n            if (api_drh_can_access_all_session_content()) {\n                $count = self::getAllUsersFromCoursesFromAllSessionFromStatus(\n                    'drh_all',\n                    $userId,\n                    true,\n                    null,\n                    null,\n                    null,\n                    null,\n                    $keyword,\n                    $active,\n                    $lastConnectionDate,\n                    $sessionIdList,\n                    $studentIdList,\n                    $filterUserStatus\n                );\n                $drhLoaded = true;\n            }\n            $allowDhrAccessToAllStudents = api_get_configuration_value('drh_allow_access_to_all_students');\n            if ($allowDhrAccessToAllStudents) {\n                $conditions = ['status' => STUDENT];\n                if (isset($active)) {\n                    $conditions['active'] = (int) $active;\n                }\n                $students = UserManager::get_user_list(\n                    $conditions,\n                    [],\n                    false,\n                    false,\n                    null,\n                    $keyword,\n                    $lastConnectionDate\n                );\n                $count = count($students);\n                $drhLoaded = true;\n            }\n        }\n\n        $checkSessionVisibility = api_get_configuration_value('show_users_in_active_sessions_in_tracking');\n\n        if (false === $drhLoaded) {\n            $count = UserManager::getUsersFollowedByUser(\n                $userId,\n                $filterUserStatus,\n                false,\n                false,\n                true,\n                null,\n                null,\n                null,\n                null,\n                $active,\n                $lastConnectionDate,\n                api_is_student_boss() ? STUDENT_BOSS : COURSEMANAGER,\n                $keyword,\n                $checkSessionVisibility\n            );\n        }\n\n        return $count;\n    }\n\n    /**\n     * Get teachers followed by a user.\n     *\n     * @param int    $userId\n     * @param int    $active\n     * @param string $lastConnectionDate\n     * @param bool   $getCount\n     * @param array  $sessionIdList\n     *\n     * @return array|int\n     */\n    public static function getTeacherTracking(\n        $userId,\n        $active = 1,\n        $lastConnectionDate = null,\n        $getCount = false,\n        $sessionIdList = []\n    ) {\n        $teacherListId = [];\n        if (api_is_drh() || api_is_platform_admin()) {\n            // Followed teachers by drh\n            if (api_drh_can_access_all_session_content()) {\n                if (empty($sessionIdList)) {\n                    $sessions = self::get_sessions_followed_by_drh($userId);\n                    $sessionIdList = [];\n                    foreach ($sessions as $session) {\n                        $sessionIdList[] = $session['id'];\n                    }\n                }\n\n                $sessionIdList = array_map('intval', $sessionIdList);\n                $sessionToString = implode(\"', '\", $sessionIdList);\n\n                $course = Database::get_main_table(TABLE_MAIN_COURSE);\n                $sessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n                $courseUser = Database::get_main_table(TABLE_MAIN_COURSE_USER);\n\n                // Select the teachers.\n                $sql = \"SELECT DISTINCT(cu.user_id)\n                        FROM $course c\n                        INNER JOIN $sessionCourse src\n                        ON c.id = src.c_id\n                        INNER JOIN $courseUser cu\n                        ON (cu.c_id = c.id)\n\t\t                WHERE src.session_id IN ('$sessionToString') AND cu.status = 1\";\n                $result = Database::query($sql);\n                while ($row = Database::fetch_array($result, 'ASSOC')) {\n                    $teacherListId[$row['user_id']] = $row['user_id'];\n                }\n            } else {\n                $teacherResult = UserManager::get_users_followed_by_drh($userId, COURSEMANAGER);\n                foreach ($teacherResult as $userInfo) {\n                    $teacherListId[] = $userInfo['user_id'];\n                }\n            }\n        }\n\n        if (!empty($teacherListId)) {\n            $tableUser = Database::get_main_table(TABLE_MAIN_USER);\n\n            $select = \"SELECT DISTINCT u.* \";\n            if ($getCount) {\n                $select = \"SELECT count(DISTINCT(u.user_id)) as count\";\n            }\n\n            $sql = \"$select FROM $tableUser u\";\n\n            if (!empty($lastConnectionDate)) {\n                $tableLogin = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n                //$sql .= \" INNER JOIN $tableLogin l ON (l.login_user_id = u.user_id) \";\n            }\n            $active = intval($active);\n            $teacherListId = implode(\"','\", $teacherListId);\n            $where = \" WHERE u.active = $active AND u.user_id IN ('$teacherListId') \";\n\n            if (!empty($lastConnectionDate)) {\n                $lastConnectionDate = Database::escape_string($lastConnectionDate);\n                //$where .= \" AND l.login_date <= '$lastConnectionDate' \";\n            }\n\n            $sql .= $where;\n            $result = Database::query($sql);\n            if (Database::num_rows($result)) {\n                if ($getCount) {\n                    $row = Database::fetch_array($result);\n\n                    return $row['count'];\n                } else {\n                    return Database::store_result($result, 'ASSOC');\n                }\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * Get the list of course tools that have to be dealt with in case of\n     * registering any course to a session.\n     *\n     * @return array The list of tools to be dealt with (literal names)\n     */\n    public static function getCourseToolToBeManaged()\n    {\n        return [\n            'courseDescription',\n            'courseIntroduction',\n        ];\n    }\n\n    /**\n     * Calls the methods bound to each tool when a course is registered into a session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public static function installCourse($sessionId, $courseId)\n    {\n        return true;\n        $toolList = self::getCourseToolToBeManaged();\n\n        foreach ($toolList as $tool) {\n            $method = 'add'.$tool;\n            if (method_exists(get_class(), $method)) {\n                self::$method($sessionId, $courseId);\n            }\n        }\n    }\n\n    /**\n     * Calls the methods bound to each tool when a course is unregistered from\n     * a session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     */\n    public static function unInstallCourse($sessionId, $courseId)\n    {\n        return true;\n        $toolList = self::getCourseToolToBeManaged();\n\n        foreach ($toolList as $tool) {\n            $method = 'remove'.$tool;\n            if (method_exists(get_class(), $method)) {\n                self::$method($sessionId, $courseId);\n            }\n        }\n    }\n\n    /**\n     * @param array $userSessionList        format see self::importSessionDrhCSV()\n     * @param bool  $sendEmail\n     * @param bool  $removeOldRelationShips\n     */\n    public static function subscribeDrhToSessionList(\n        $userSessionList,\n        $sendEmail,\n        $removeOldRelationShips\n    ) {\n        if (!empty($userSessionList)) {\n            foreach ($userSessionList as $userId => $data) {\n                $sessionList = [];\n                foreach ($data['session_list'] as $sessionInfo) {\n                    $sessionList[] = $sessionInfo['session_id'];\n                }\n                $userInfo = $data['user_info'];\n                self::subscribeSessionsToDrh(\n                    $userInfo,\n                    $sessionList,\n                    $sendEmail,\n                    $removeOldRelationShips\n                );\n            }\n        }\n    }\n\n    /**\n     * @param array $userSessionList format see self::importSessionDrhCSV()\n     *\n     * @return string\n     */\n    public static function checkSubscribeDrhToSessionList($userSessionList)\n    {\n        $message = null;\n        if (!empty($userSessionList)) {\n            if (!empty($userSessionList)) {\n                foreach ($userSessionList as $userId => $data) {\n                    $userInfo = $data['user_info'];\n\n                    $sessionListSubscribed = self::get_sessions_followed_by_drh($userId);\n                    if (!empty($sessionListSubscribed)) {\n                        $sessionListSubscribed = array_keys($sessionListSubscribed);\n                    }\n\n                    $sessionList = [];\n                    if (!empty($data['session_list'])) {\n                        foreach ($data['session_list'] as $sessionInfo) {\n                            if (in_array($sessionInfo['session_id'], $sessionListSubscribed)) {\n                                $sessionList[] = $sessionInfo['session_info']['name'];\n                            }\n                        }\n                    }\n\n                    $message .= '<strong>'.get_lang('User').'</strong>: ';\n                    $message .= $userInfo['complete_name_with_username'].' <br />';\n\n                    if (!in_array($userInfo['status'], [DRH]) && !api_is_platform_admin_by_id($userInfo['user_id'])) {\n                        $message .= get_lang('UserMustHaveTheDrhRole').'<br />';\n                        continue;\n                    }\n\n                    if (!empty($sessionList)) {\n                        $message .= '<strong>'.get_lang('Sessions').':</strong> <br />';\n                        $message .= implode(', ', $sessionList).'<br /><br />';\n                    } else {\n                        $message .= get_lang('NoSessionProvided').' <br /><br />';\n                    }\n                }\n            }\n        }\n\n        return $message;\n    }\n\n    /**\n     * @param string $file\n     * @param bool   $sendEmail\n     * @param bool   $removeOldRelationShips\n     *\n     * @return string\n     */\n    public static function importSessionDrhCSV($file, $sendEmail, $removeOldRelationShips)\n    {\n        $list = Import::csv_reader($file);\n\n        if (!empty($list)) {\n            $userSessionList = [];\n            foreach ($list as $data) {\n                $sessionInfo = [];\n                if (isset($data['SessionId'])) {\n                    $sessionInfo = api_get_session_info($data['SessionId']);\n                }\n\n                if (isset($data['SessionName']) && empty($sessionInfo)) {\n                    $sessionInfo = self::get_session_by_name($data['SessionName']);\n                }\n\n                if (empty($sessionInfo)) {\n                    $sessionData = isset($data['SessionName']) ? $data['SessionName'] : $data['SessionId'];\n                    Display::addFlash(\n                        Display::return_message(get_lang('SessionNotFound').' - '.$sessionData, 'warning')\n                    );\n                    continue;\n                }\n\n                $userList = explode(',', $data['Username']);\n\n                foreach ($userList as $username) {\n                    $userInfo = api_get_user_info_from_username($username);\n\n                    if (empty($userInfo)) {\n                        Display::addFlash(\n                            Display::return_message(get_lang('UserDoesNotExist').' - '.$username, 'warning')\n                        );\n                        continue;\n                    }\n\n                    if (!empty($userInfo) && !empty($sessionInfo)) {\n                        $userSessionList[$userInfo['user_id']]['session_list'][] = [\n                            'session_id' => $sessionInfo['id'],\n                            'session_info' => $sessionInfo,\n                        ];\n                        $userSessionList[$userInfo['user_id']]['user_info'] = $userInfo;\n                    }\n                }\n            }\n\n            self::subscribeDrhToSessionList($userSessionList, $sendEmail, $removeOldRelationShips);\n\n            return self::checkSubscribeDrhToSessionList($userSessionList);\n        }\n    }\n\n    /**\n     * Courses re-ordering in resume_session.php flag see BT#8316.\n     */\n    public static function orderCourseIsEnabled()\n    {\n        $sessionCourseOrder = api_get_setting('session_course_ordering');\n        if ($sessionCourseOrder === 'true') {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @param string $direction (up/down)\n     * @param int    $sessionId\n     * @param int    $courseId\n     *\n     * @return bool\n     */\n    public static function move($direction, $sessionId, $courseId)\n    {\n        if (!self::orderCourseIsEnabled()) {\n            return false;\n        }\n\n        $sessionId = intval($sessionId);\n        $courseId = intval($courseId);\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $courseList = self::get_course_list_by_session_id($sessionId, null, 'position');\n\n        $position = [];\n        $count = 0;\n        foreach ($courseList as $course) {\n            if ($course['position'] == '') {\n                $course['position'] = $count;\n            }\n            $position[$course['code']] = $course['position'];\n            // Saving current order.\n            $sql = \"UPDATE $table SET position = $count\n                    WHERE session_id = $sessionId AND c_id = '\".$course['real_id'].\"'\";\n            Database::query($sql);\n            $count++;\n        }\n\n        // Loading new positions.\n        $courseList = self::get_course_list_by_session_id($sessionId, null, 'position');\n\n        $found = false;\n\n        switch ($direction) {\n            case 'up':\n                $courseList = array_reverse($courseList);\n                break;\n            case 'down':\n                break;\n        }\n\n        foreach ($courseList as $course) {\n            if ($found) {\n                $nextId = $course['real_id'];\n                $nextOrder = $course['position'];\n                break;\n            }\n\n            if ($courseId == $course['real_id']) {\n                $thisCourseCode = $course['real_id'];\n                $thisOrder = $course['position'];\n                $found = true;\n            }\n        }\n\n        $sql1 = \"UPDATE $table SET position = '\".intval($nextOrder).\"'\n                 WHERE session_id = $sessionId AND c_id =  $thisCourseCode\";\n        Database::query($sql1);\n\n        $sql2 = \"UPDATE $table SET position = '\".intval($thisOrder).\"'\n                 WHERE session_id = $sessionId AND c_id = $nextId\";\n        Database::query($sql2);\n\n        return true;\n    }\n\n    /**\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return bool\n     */\n    public static function moveUp($sessionId, $courseId)\n    {\n        return self::move('up', $sessionId, $courseId);\n    }\n\n    /**\n     * @param int    $sessionId\n     * @param string $courseCode\n     *\n     * @return bool\n     */\n    public static function moveDown($sessionId, $courseCode)\n    {\n        return self::move('down', $sessionId, $courseCode);\n    }\n\n    /**\n     * Use the session duration to allow/block user access see BT#8317\n     * Needs these DB changes\n     * ALTER TABLE session ADD COLUMN duration int;\n     * ALTER TABLE session_rel_user ADD COLUMN duration int;.\n     */\n    public static function durationPerUserIsEnabled()\n    {\n        return api_get_configuration_value('session_duration_feature');\n    }\n\n    /**\n     * Returns the number of days the student has left in a session when using\n     * sessions durations.\n     *\n     * @param int $userId\n     *\n     * @return int\n     */\n    public static function getDayLeftInSession(array $sessionInfo, $userId)\n    {\n        $sessionId = $sessionInfo['id'];\n        $subscription = self::getUserSession($userId, $sessionId);\n        $duration = empty($subscription['duration'])\n            ? $sessionInfo['duration']\n            : $sessionInfo['duration'] + $subscription['duration'];\n\n        // Get an array with the details of the first access of the student to\n        // this session\n        $courseAccess = CourseManager::getFirstCourseAccessPerSessionAndUser(\n            $sessionId,\n            $userId\n        );\n\n        $currentTime = time();\n\n        // If no previous access, return false\n        if (count($courseAccess) == 0) {\n            return $duration;\n        }\n\n        $firstAccess = api_strtotime($courseAccess['login_course_date'], 'UTC');\n        $endDateInSeconds = $firstAccess + $duration * 24 * 60 * 60;\n        $leftDays = round(($endDateInSeconds - $currentTime) / 60 / 60 / 24);\n\n        return $leftDays;\n    }\n\n    /**\n     * @param int $duration\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function editUserSessionDuration($duration, $userId, $sessionId)\n    {\n        $duration = (int) $duration;\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        if (empty($userId) || empty($sessionId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $parameters = ['duration' => $duration];\n        $where = ['session_id = ? AND user_id = ? ' => [$sessionId, $userId]];\n        Database::update($table, $parameters, $where);\n\n        return true;\n    }\n\n    /**\n     * Gets one row from the session_rel_user table.\n     *\n     * @param int $userId\n     * @param int $sessionId\n     *\n     * @return array\n     */\n    public static function getUserSession($userId, $sessionId)\n    {\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        if (empty($userId) || empty($sessionId)) {\n            return false;\n        }\n\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sql = \"SELECT * FROM $table\n                WHERE session_id = $sessionId AND user_id = $userId\";\n        $result = Database::query($sql);\n        $values = [];\n        if (Database::num_rows($result)) {\n            $values = Database::fetch_array($result, 'ASSOC');\n        }\n\n        return $values;\n    }\n\n    /**\n     * Check if user is subscribed inside a session as student.\n     *\n     * @param int $sessionId The session id\n     * @param int $userId    The user id\n     *\n     * @return bool Whether is subscribed\n     */\n    public static function isUserSubscribedAsStudent($sessionId, $userId)\n    {\n        $sessionRelUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $sessionId = (int) $sessionId;\n        $userId = (int) $userId;\n\n        // COUNT(1) actually returns the number of rows from the table (as if\n        // counting the results from the first column)\n        $sql = \"SELECT COUNT(1) AS qty FROM $sessionRelUserTable\n                WHERE\n                    session_id = $sessionId AND\n                    user_id = $userId AND\n                    relation_type = 0\";\n\n        $result = Database::fetch_assoc(Database::query($sql));\n\n        if (!empty($result) && $result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if user is subscribed inside a session as a HRM.\n     *\n     * @param int $sessionId The session id\n     * @param int $userId    The user id\n     *\n     * @return bool Whether is subscribed\n     */\n    public static function isUserSubscribedAsHRM($sessionId, $userId)\n    {\n        $sessionRelUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        $sessionId = (int) $sessionId;\n        $userId = (int) $userId;\n\n        // COUNT(1) actually returns the number of rows from the table (as if\n        // counting the results from the first column)\n        $sql = \"SELECT COUNT(1) AS qty FROM $sessionRelUserTable\n                WHERE\n                    session_id = $sessionId AND\n                    user_id = $userId AND\n                    relation_type = \".SESSION_RELATION_TYPE_RRHH;\n\n        $result = Database::fetch_assoc(Database::query($sql));\n\n        if (!empty($result) && $result['qty'] > 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Get the session coached by a user (general coach and course-session coach).\n     *\n     * @param int  $coachId                       The coach id\n     * @param bool $checkSessionRelUserVisibility Check the session visibility\n     * @param bool $asPlatformAdmin               The user is a platform admin and we want all sessions\n     *\n     * @return array The session list\n     */\n    public static function getSessionsCoachedByUser(\n        $coachId,\n        $checkSessionRelUserVisibility = false,\n        $asPlatformAdmin = false\n    ) {\n        // Get all sessions where $coachId is the general coach\n        $sessions = self::get_sessions_by_general_coach($coachId, $asPlatformAdmin);\n        // Get all sessions where $coachId is the course - session coach\n        $courseSessionList = self::getCoursesListByCourseCoach($coachId);\n        $sessionsByCoach = [];\n        if (!empty($courseSessionList)) {\n            foreach ($courseSessionList as $userCourseSubscription) {\n                $session = $userCourseSubscription->getSession();\n                $sessionsByCoach[$session->getId()] = api_get_session_info(\n                    $session->getId()\n                );\n            }\n        }\n\n        if (!empty($sessionsByCoach)) {\n            $sessions = array_merge($sessions, $sessionsByCoach);\n        }\n\n        // Remove repeated sessions\n        if (!empty($sessions)) {\n            $cleanSessions = [];\n            foreach ($sessions as $session) {\n                $cleanSessions[$session['id']] = $session;\n            }\n            $sessions = $cleanSessions;\n        }\n\n        if ($checkSessionRelUserVisibility) {\n            if (!empty($sessions)) {\n                $newSessions = [];\n                foreach ($sessions as $session) {\n                    $visibility = api_get_session_visibility($session['id']);\n                    if ($visibility == SESSION_INVISIBLE) {\n                        continue;\n                    }\n                    $newSessions[] = $session;\n                }\n                $sessions = $newSessions;\n            }\n        }\n\n        return $sessions;\n    }\n\n    /**\n     * Check if the course belongs to the session.\n     *\n     * @param int    $sessionId  The session id\n     * @param string $courseCode The course code\n     *\n     * @return bool\n     */\n    public static function sessionHasCourse($sessionId, $courseCode)\n    {\n        $sessionId = (int) $sessionId;\n        $courseCode = Database::escape_string($courseCode);\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $sessionRelCourseTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n\n        $sql = \"SELECT COUNT(1) AS qty\n                FROM $courseTable c\n                INNER JOIN $sessionRelCourseTable src\n                ON c.id = src.c_id\n                WHERE src.session_id = $sessionId\n                AND c.code = '$courseCode'  \";\n\n        $result = Database::query($sql);\n\n        if (false !== $result) {\n            $data = Database::fetch_assoc($result);\n\n            if ($data['qty'] > 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Calculate the total user time in the platform.\n     *\n     * @param int    $userId The user id\n     * @param string $from   Optional. From date\n     * @param string $until  Optional. Until date\n     *\n     * @return string The time (hh:mm:ss)\n     */\n    public static function getTotalUserTimeInPlatform($userId, $from = '', $until = '')\n    {\n        $userId = (int) $userId;\n        $trackLoginTable = Database::get_main_table(TABLE_STATISTIC_TRACK_E_LOGIN);\n        $whereConditions = [\n            'login_user_id = ? ' => $userId,\n        ];\n\n        if (!empty($from) && !empty($until)) {\n            $whereConditions[\"AND (login_date >= '?' \"] = $from;\n            $whereConditions[\"AND logout_date <= DATE_ADD('?', INTERVAL 1 DAY)) \"] = $until;\n        }\n\n        $trackResult = Database::select(\n            'SEC_TO_TIME(SUM(UNIX_TIMESTAMP(logout_date) - UNIX_TIMESTAMP(login_date))) as total_time',\n            $trackLoginTable,\n            [\n                'where' => $whereConditions,\n            ],\n            'first'\n        );\n\n        if (false != $trackResult) {\n            return $trackResult['total_time'] ? $trackResult['total_time'] : '00:00:00';\n        }\n\n        return '00:00:00';\n    }\n\n    /**\n     * Get the courses list by a course coach.\n     *\n     * @param int $coachId The coach id\n     *\n     * @return array (id, user_id, session_id, c_id, visibility, status, legal_agreement)\n     */\n    public static function getCoursesListByCourseCoach($coachId)\n    {\n        $entityManager = Database::getManager();\n        $scuRepo = $entityManager->getRepository(\n            'ChamiloCoreBundle:SessionRelCourseRelUser'\n        );\n\n        return $scuRepo->findBy([\n            'user' => $coachId,\n            'status' => SessionRelCourseRelUser::STATUS_COURSE_COACH,\n        ]);\n    }\n\n    /**\n     * Get the count of user courses in session.\n     *\n     * @param int $sessionId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function getTotalUserCoursesInSession($sessionId, $courseId = 0)\n    {\n        $tableUser = Database::get_main_table(TABLE_MAIN_USER);\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sessionId = (int) $sessionId;\n\n        if (empty($sessionId)) {\n            return [];\n        }\n\n        $courseCondition = '';\n        if (!empty($courseId)) {\n            $courseId = (int) $courseId;\n            $courseCondition = \"  c_id = $courseId AND \";\n        }\n\n        $sql = \"SELECT\n                    COUNT(u.id) as count,\n                    u.id,\n                    scu.status status_in_session,\n                    u.status user_status\n                FROM $table scu\n                INNER JOIN $tableUser u\n                ON scu.user_id = u.id\n                WHERE\n                  $courseCondition\n                  scu.session_id = \".$sessionId.\"\n                GROUP BY u.id\";\n\n        $result = Database::query($sql);\n\n        $list = [];\n        while ($data = Database::fetch_assoc($result)) {\n            $list[] = $data;\n        }\n\n        return $list;\n    }\n\n    /**\n     * Returns list of a few data from session (name, short description, start\n     * date, end date) and the given extra fields if defined based on a\n     * session category Id.\n     *\n     * @param int    $categoryId  The internal ID of the session category\n     * @param string $target      Value to search for in the session field values\n     * @param array  $extraFields A list of fields to be scanned and returned\n     *\n     * @return mixed\n     */\n    public static function getShortSessionListAndExtraByCategory(\n        $categoryId,\n        $target,\n        $extraFields = null,\n        $publicationDate = null\n    ) {\n        $categoryId = (int) $categoryId;\n        $sessionList = [];\n        // Check if categoryId is valid\n        if ($categoryId > 0) {\n            $target = Database::escape_string($target);\n            $sTable = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sfTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sfvTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            // Join session field and session field values tables\n            $joinTable = $sfTable.' sf INNER JOIN '.$sfvTable.' sfv ON sf.id = sfv.field_id';\n            $fieldsArray = [];\n            foreach ($extraFields as $field) {\n                $fieldsArray[] = Database::escape_string($field);\n            }\n            $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n            if (isset($publicationDate)) {\n                $publicationDateString = $publicationDate->format('Y-m-d H:i:s');\n                $wherePublication = \" AND id NOT IN (\n                    SELECT sfv.item_id FROM $joinTable\n                    WHERE\n                        sf.extra_field_type = $extraFieldType AND\n                        ((sf.variable = 'publication_start_date' AND sfv.value > '$publicationDateString' and sfv.value != '') OR\n                        (sf.variable = 'publication_end_date' AND sfv.value < '$publicationDateString' and sfv.value != ''))\n                )\";\n            }\n            // Get the session list from session category and target\n            $sessionList = Database::select(\n                'id, name, access_start_date, access_end_date',\n                $sTable,\n                [\n                    'where' => [\n                        \"session_category_id = ? AND id IN (\n                            SELECT sfv.item_id FROM $joinTable\n                            WHERE\n                                sf.extra_field_type = $extraFieldType AND\n                                sfv.item_id = session.id AND\n                                sf.variable = 'target' AND\n                                sfv.value = ?\n                        ) $wherePublication\" => [$categoryId, $target],\n                    ],\n                ]\n            );\n            $whereFieldVariables = [];\n            $whereFieldIds = [];\n            if (\n                is_array($fieldsArray) &&\n                count($fieldsArray) > 0\n            ) {\n                $whereParams = '?';\n                for ($i = 1; $i < count($fieldsArray); $i++) {\n                    $whereParams .= ', ?';\n                }\n                $whereFieldVariables = ' variable IN ( '.$whereParams.' )';\n                $whereFieldIds = 'field_id IN ( '.$whereParams.' )';\n            }\n            // Get session fields\n            $extraField = new ExtraFieldModel('session');\n            $questionMarks = substr(str_repeat('?, ', count($fieldsArray)), 0, -2);\n            $fieldsList = $extraField->get_all([\n                ' variable IN ( '.$questionMarks.' )' => $fieldsArray,\n            ]);\n            // Index session fields\n            foreach ($fieldsList as $field) {\n                $fields[$field['id']] = $field['variable'];\n            }\n            // Get session field values\n            $extra = new ExtraFieldValue('session');\n            $questionMarksFields = substr(str_repeat('?, ', count($fields)), 0, -2);\n            $sessionFieldValueList = $extra->get_all(['where' => ['field_id IN ( '.$questionMarksFields.' )' => array_keys($fields)]]);\n            // Add session fields values to session list\n            foreach ($sessionList as $id => &$session) {\n                foreach ($sessionFieldValueList as $sessionFieldValue) {\n                    // Match session field values to session\n                    if ($sessionFieldValue['item_id'] == $id) {\n                        // Check if session field value is set in session field list\n                        if (isset($fields[$sessionFieldValue['field_id']])) {\n                            // Avoid overwriting the session's ID field\n                            if ($fields[$sessionFieldValue['field_id']] != 'id') {\n                                $var = $fields[$sessionFieldValue['field_id']];\n                                $val = $sessionFieldValue['value'];\n                                // Assign session field value to session\n                                $session[$var] = $val;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $sessionList;\n    }\n\n    /**\n     * Return the Session Category id searched by name.\n     *\n     * @param string $categoryName Name attribute of session category used for search query\n     * @param bool   $force        boolean used to get even if something is wrong (e.g not unique name)\n     *\n     * @return int|array If success, return category id (int), else it will return an array\n     *                   with the next structure:\n     *                   array('error' => true, 'errorMessage' => ERROR_MESSAGE)\n     */\n    public static function getSessionCategoryIdByName($categoryName, $force = false)\n    {\n        // Start error result\n        $errorResult = ['error' => true, 'errorMessage' => get_lang('ThereWasAnError')];\n        $categoryName = Database::escape_string($categoryName);\n        // Check if is not empty category name\n        if (!empty($categoryName)) {\n            $sessionCategoryTable = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n            // Get all session category with same name\n            $result = Database::select(\n                'id',\n                $sessionCategoryTable,\n                [\n                    'where' => [\n                        'name = ?' => $categoryName,\n                    ],\n                ]\n            );\n            // Check the result\n            if ($result < 1) {\n                // If not found any result, update error message\n                $errorResult['errorMessage'] = 'Not found any session category name '.$categoryName;\n            } elseif (count($result) > 1 && !$force) {\n                // If found more than one result and force is disabled, update error message\n                $errorResult['errorMessage'] = 'Found many session categories';\n            } elseif (count($result) == 1 || $force) {\n                // If found just one session category or force option is enabled\n\n                return key($result);\n            }\n        } else {\n            // category name is empty, update error message\n            $errorResult['errorMessage'] = 'Not valid category name';\n        }\n\n        return $errorResult;\n    }\n\n    /**\n     * Return all data from sessions (plus extra field, course and coach data) by category id.\n     *\n     * @param int $sessionCategoryId session category id used to search sessions\n     *\n     * @return array If success, return session list and more session related data, else it will return an array\n     *               with the next structure:\n     *               array('error' => true, 'errorMessage' => ERROR_MESSAGE)\n     */\n    public static function getSessionListAndExtraByCategoryId($sessionCategoryId)\n    {\n        // Start error result\n        $errorResult = [\n            'error' => true,\n            'errorMessage' => get_lang('ThereWasAnError'),\n        ];\n\n        $sessionCategoryId = intval($sessionCategoryId);\n        // Check if session category id is valid\n        if ($sessionCategoryId > 0) {\n            // Get table names\n            $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n            $sessionFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n            $sessionFieldValueTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n            $sessionCourseUserTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n            $userTable = Database::get_main_table(TABLE_MAIN_USER);\n            $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n\n            // Get all data from all sessions whit the session category specified\n            $sessionList = Database::select(\n                '*',\n                $sessionTable,\n                [\n                    'where' => [\n                        'session_category_id = ?' => $sessionCategoryId,\n                    ],\n                ]\n            );\n\n            $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n\n            // Check if session list query had result\n            if (!empty($sessionList)) {\n                // implode all session id\n                $sessionIdsString = '('.implode(', ', array_keys($sessionList)).')';\n                // Get all field variables\n                $sessionFieldList = Database::select(\n                    'id, variable',\n                    $sessionFieldTable,\n                    ['extra_field_type = ? ' => [$extraFieldType]]\n                );\n\n                // Get all field values\n                $sql = \"SELECT item_id, field_id, value FROM\n                        $sessionFieldValueTable v INNER JOIN $sessionFieldTable f\n                        ON (f.id = v.field_id)\n                        WHERE\n                            item_id IN $sessionIdsString AND\n                            extra_field_type = $extraFieldType\n                \";\n                $result = Database::query($sql);\n                $sessionFieldValueList = Database::store_result($result, 'ASSOC');\n\n                // Check if session field values had result\n                if (!empty($sessionFieldValueList)) {\n                    $sessionFieldValueListBySession = [];\n                    foreach ($sessionFieldValueList as $key => $sessionFieldValue) {\n                        // Create an array to index ids to session id\n                        $sessionFieldValueListBySession[$sessionFieldValue['item_id']][] = $key;\n                    }\n                }\n                // Query used to find course-coaches from sessions\n                $sql = \"SELECT\n                            scu.session_id,\n                            c.id AS course_id,\n                            c.code AS course_code,\n                            c.title AS course_title,\n                            u.username AS coach_username,\n                            u.firstname AS coach_firstname,\n                            u.lastname AS coach_lastname\n                        FROM $courseTable c\n                        INNER JOIN $sessionCourseUserTable scu ON c.id = scu.c_id\n                        INNER JOIN $userTable u ON scu.user_id = u.user_id\n                        WHERE scu.status = 2 AND scu.session_id IN $sessionIdsString\n                        ORDER BY scu.session_id ASC \";\n                $res = Database::query($sql);\n                $sessionCourseList = Database::store_result($res, 'ASSOC');\n                // Check if course list had result\n                if (!empty($sessionCourseList)) {\n                    foreach ($sessionCourseList as $key => $sessionCourse) {\n                        // Create an array to index ids to session_id\n                        $sessionCourseListBySession[$sessionCourse['session_id']][] = $key;\n                    }\n                }\n                // Join lists\n                if (is_array($sessionList)) {\n                    foreach ($sessionList as $id => &$row) {\n                        if (\n                            !empty($sessionFieldValueListBySession) &&\n                            is_array($sessionFieldValueListBySession[$id])\n                        ) {\n                            // If have an index array for session extra fields, use it to join arrays\n                            foreach ($sessionFieldValueListBySession[$id] as $key) {\n                                $row['extra'][$key] = [\n                                    'field_name' => $sessionFieldList[$sessionFieldValueList[$key]['field_id']]['variable'],\n                                    'value' => $sessionFieldValueList[$key]['value'],\n                                ];\n                            }\n                        }\n                        if (\n                            !empty($sessionCourseListBySession) &&\n                            is_array($sessionCourseListBySession[$id])\n                        ) {\n                            // If have an index array for session course coach, use it to join arrays\n                            foreach ($sessionCourseListBySession[$id] as $key) {\n                                $row['course'][$key] = [\n                                    'course_id' => $sessionCourseList[$key]['course_id'],\n                                    'course_code' => $sessionCourseList[$key]['course_code'],\n                                    'course_title' => $sessionCourseList[$key]['course_title'],\n                                    'coach_username' => $sessionCourseList[$key]['coach_username'],\n                                    'coach_firstname' => $sessionCourseList[$key]['coach_firstname'],\n                                    'coach_lastname' => $sessionCourseList[$key]['coach_lastname'],\n                                ];\n                            }\n                        }\n                    }\n                }\n\n                return $sessionList;\n            } else {\n                // Not found result, update error message\n                $errorResult['errorMessage'] = 'Not found any session for session category id '.$sessionCategoryId;\n            }\n        }\n\n        return $errorResult;\n    }\n\n    /**\n     * Return session description from session id.\n     *\n     * @param int $sessionId\n     *\n     * @return string\n     */\n    public static function getDescriptionFromSessionId($sessionId)\n    {\n        // Init variables\n        $sessionId = (int) $sessionId;\n        $description = '';\n        // Check if session id is valid\n        if ($sessionId > 0) {\n            // Select query from session id\n            $rows = Database::select(\n                'description',\n                Database::get_main_table(TABLE_MAIN_SESSION),\n                [\n                    'where' => [\n                        'id = ?' => $sessionId,\n                    ],\n                ]\n            );\n\n            // Check if select query result is not empty\n            if (!empty($rows)) {\n                // Get session description\n                $description = $rows[0]['description'];\n            }\n        }\n\n        return $description;\n    }\n\n    /**\n     * Get a session list filtered by name, description or any of the given extra fields.\n     *\n     * @param string $term                 The term to search\n     * @param array  $extraFieldsToInclude Extra fields to include in the session data\n     *\n     * @return array The list\n     */\n    public static function searchSession($term, $extraFieldsToInclude = [])\n    {\n        $sTable = Database::get_main_table(TABLE_MAIN_SESSION);\n        $extraFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $sfvTable = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $term = Database::escape_string($term);\n        $extraFieldType = ExtraField::SESSION_FIELD_TYPE;\n        if (is_array($extraFieldsToInclude) && count($extraFieldsToInclude) > 0) {\n            $resultData = Database::select('*', $sTable, [\n                'where' => [\n                    \"name LIKE %?% \" => $term,\n                    \" OR description LIKE %?% \" => $term,\n                    \" OR id IN (\n                    SELECT item_id\n                    FROM $sfvTable v INNER JOIN $extraFieldTable e\n                    ON (v.field_id = e.id)\n                    WHERE value LIKE %?% AND extra_field_type = $extraFieldType\n                ) \" => $term,\n                ],\n            ]);\n        } else {\n            $resultData = Database::select('*', $sTable, [\n                'where' => [\n                    \"name LIKE %?% \" => $term,\n                    \"OR description LIKE %?% \" => $term,\n                ],\n            ]);\n\n            return $resultData;\n        }\n\n        foreach ($resultData as $id => &$session) {\n            $session['extra'] = self::getFilteredExtraFields($id, $extraFieldsToInclude);\n        }\n\n        return $resultData;\n    }\n\n    /**\n     * @param int   $sessionId\n     * @param array $extraFieldsToInclude (empty means all)\n     *\n     * @return array\n     */\n    public static function getFilteredExtraFields($sessionId, $extraFieldsToInclude = [])\n    {\n        $extraData = [];\n        $variables = [];\n        $variablePlaceHolders = [];\n\n        foreach ($extraFieldsToInclude as $sessionExtraField) {\n            $variablePlaceHolders[] = \"?\";\n            $variables[] = Database::escape_string($sessionExtraField);\n        }\n\n        $sessionExtraField = new ExtraFieldModel('session');\n        $fieldList = $sessionExtraField->get_all(empty($extraFieldsToInclude) ? [] : [\n            \"variable IN ( \".implode(\", \", $variablePlaceHolders).\" ) \" => $variables,\n        ]);\n\n        if (empty($fieldList)) {\n            return [];\n        }\n\n        $fields = [];\n\n        // Index session fields\n        foreach ($fieldList as $field) {\n            $fields[$field['id']] = $field['variable'];\n        }\n\n        // Get session field values\n        $extra = new ExtraFieldValue('session');\n        $sessionFieldValueList = [];\n        foreach (array_keys($fields) as $fieldId) {\n            $sessionFieldValue = $extra->get_values_by_handler_and_field_id($sessionId, $fieldId);\n            if ($sessionFieldValue != false) {\n                $sessionFieldValueList[$fieldId] = $sessionFieldValue;\n            }\n        }\n\n        foreach ($sessionFieldValueList as $sessionFieldValue) {\n            $extrafieldVariable = $fields[$sessionFieldValue['field_id']];\n            $extrafieldValue = $sessionFieldValue['value'];\n\n            $extraData[] = [\n                'variable' => $extrafieldVariable,\n                'value' => $extrafieldValue,\n            ];\n        }\n\n        return $extraData;\n    }\n\n    /**\n     * @param int $sessionId\n     *\n     * @return bool\n     */\n    public static function isValidId($sessionId)\n    {\n        $sessionId = (int) $sessionId;\n        if ($sessionId > 0) {\n            $rows = Database::select(\n                'id',\n                Database::get_main_table(TABLE_MAIN_SESSION),\n                ['where' => ['id = ?' => $sessionId]]\n            );\n            if (!empty($rows)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Get list of sessions based on users of a group for a group admin.\n     *\n     * @param int $userId The user id\n     *\n     * @return array\n     */\n    public static function getSessionsFollowedForGroupAdmin($userId)\n    {\n        $sessionList = [];\n        $sessionTable = Database::get_main_table(TABLE_MAIN_SESSION);\n        $sessionUserTable = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $userGroup = new UserGroup();\n        $userIdList = $userGroup->getGroupUsersByUser($userId);\n\n        if (empty($userIdList)) {\n            return [];\n        }\n\n        $sql = \"SELECT DISTINCT s.*\n                FROM $sessionTable s\n                INNER JOIN $sessionUserTable sru\n                ON s.id = sru.id_session\n                WHERE\n                    (sru.id_user IN (\".implode(', ', $userIdList).\")\n                    AND sru.relation_type = 0\n                )\";\n\n        if (api_is_multiple_url_enabled()) {\n            $sessionAccessUrlTable = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $accessUrlId = api_get_current_access_url_id();\n\n            if (-1 != $accessUrlId) {\n                $sql = \"SELECT DISTINCT s.*\n                        FROM $sessionTable s\n                        INNER JOIN $sessionUserTable sru ON s.id = sru.id_session\n                        INNER JOIN $sessionAccessUrlTable srau ON s.id = srau.session_id\n                        WHERE\n                            srau.access_url_id = $accessUrlId\n                            AND (\n                                sru.id_user IN (\".implode(', ', $userIdList).\")\n                                AND sru.relation_type = 0\n                            )\";\n            }\n        }\n\n        $result = Database::query($sql);\n        while ($row = Database::fetch_assoc($result)) {\n            $sessionList[] = $row;\n        }\n\n        return $sessionList;\n    }\n\n    /**\n     * @param array $sessionInfo\n     *\n     * @return string\n     */\n    public static function getSessionVisibility($sessionInfo)\n    {\n        switch ($sessionInfo['visibility']) {\n            case 1:\n                return get_lang('ReadOnly');\n            case 2:\n                return get_lang('Visible');\n            case 3:\n                return api_ucfirst(get_lang('Invisible'));\n        }\n    }\n\n    /**\n     * Returns a human readable string.\n     *\n     * @param array $sessionInfo An array with all the session dates\n     * @param bool  $showTime\n     *\n     * @return array\n     */\n    public static function parseSessionDates($sessionInfo, $showTime = false)\n    {\n        $displayDates = self::convertSessionDateToString(\n            $sessionInfo['display_start_date'],\n            $sessionInfo['display_end_date'],\n            $showTime,\n            true\n        );\n        $accessDates = self::convertSessionDateToString(\n            $sessionInfo['access_start_date'],\n            $sessionInfo['access_end_date'],\n            $showTime,\n            true\n        );\n\n        $coachDates = self::convertSessionDateToString(\n            $sessionInfo['coach_access_start_date'],\n            $sessionInfo['coach_access_end_date'],\n            $showTime,\n            true\n        );\n\n        $result = [\n            'access' => $accessDates,\n            'display' => $displayDates,\n            'coach' => $coachDates,\n        ];\n\n        return $result;\n    }\n\n    /**\n     * @param array $sessionInfo Optional\n     *\n     * @return array\n     */\n    public static function setForm(FormValidator $form, array $sessionInfo = [])\n    {\n        $sessionId = 0;\n        $coachInfo = [];\n\n        if (!empty($sessionInfo)) {\n            $sessionId = (int) $sessionInfo['id'];\n            $coachInfo = api_get_user_info($sessionInfo['id_coach']);\n        }\n\n        $categoriesList = self::get_all_session_category();\n        $userInfo = api_get_user_info();\n\n        $categoriesOptions = [\n            '0' => get_lang('None'),\n        ];\n\n        if ($categoriesList != false) {\n            foreach ($categoriesList as $categoryItem) {\n                $categoriesOptions[$categoryItem['id']] = $categoryItem['name'];\n            }\n        }\n\n        // Database Table Definitions\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n\n        $form->addText(\n            'name',\n            get_lang('SessionName'),\n            true,\n            ['maxlength' => 150, 'aria-label' => get_lang('SessionName')]\n        );\n        $form->addRule('name', get_lang('SessionNameAlreadyExists'), 'callback', 'check_session_name');\n\n        if (!api_is_platform_admin() && api_is_teacher()) {\n            $form->addElement(\n                'select',\n                'coach_username',\n                get_lang('CoachName'),\n                [api_get_user_id() => $userInfo['complete_name']],\n                [\n                    'id' => 'coach_username',\n                    'style' => 'width:370px;',\n                ]\n            );\n        } else {\n            $sql = \"SELECT COUNT(1) FROM $tbl_user WHERE status = 1\";\n            $rs = Database::query($sql);\n            $countUsers = (int) Database::result($rs, 0, 0);\n\n            if ($countUsers < 50) {\n                $orderClause = 'ORDER BY ';\n                $orderClause .= api_sort_by_first_name() ? 'firstname, lastname, username' : 'lastname, firstname, username';\n\n                $sql = \"SELECT user_id, lastname, firstname, username\n                        FROM $tbl_user\n                        WHERE status = '1' \".\n                        $orderClause;\n\n                if (api_is_multiple_url_enabled()) {\n                    $userRelAccessUrlTable = Database::get_main_table(\n                        TABLE_MAIN_ACCESS_URL_REL_USER\n                    );\n                    $accessUrlId = api_get_current_access_url_id();\n                    if ($accessUrlId != -1) {\n                        $sql = \"SELECT user.user_id, username, lastname, firstname\n                        FROM $tbl_user user\n                        INNER JOIN $userRelAccessUrlTable url_user\n                        ON (url_user.user_id = user.user_id)\n                        WHERE\n                            access_url_id = $accessUrlId AND\n                            status = 1 \"\n                            .$orderClause;\n                    }\n                }\n\n                $result = Database::query($sql);\n                $coachesList = Database::store_result($result);\n                $coachesOptions = [];\n                foreach ($coachesList as $coachItem) {\n                    $coachesOptions[$coachItem['user_id']] =\n                        api_get_person_name($coachItem['firstname'], $coachItem['lastname']).' ('.$coachItem['username'].')';\n                }\n\n                $form->addElement(\n                    'select',\n                    'coach_username',\n                    get_lang('CoachName'),\n                    $coachesOptions,\n                    [\n                        'id' => 'coach_username',\n                        'style' => 'width:370px;',\n                    ]\n                );\n            } else {\n                $form->addElement(\n                    'select_ajax',\n                    'coach_username',\n                    get_lang('CoachName'),\n                    $coachInfo ? [$coachInfo['id'] => $coachInfo['complete_name_with_username']] : [],\n                    [\n                        'url' => api_get_path(WEB_AJAX_PATH).'session.ajax.php?a=search_general_coach',\n                        'width' => '100%',\n                        'id' => 'coach_username',\n                    ]\n                );\n            }\n        }\n\n        $form->addRule('coach_username', get_lang('ThisFieldIsRequired'), 'required');\n        $form->addHtml('<div id=\"ajax_list_coachs\"></div>');\n\n        $form->addButtonAdvancedSettings('advanced_params');\n        $form->addElement('html', '<div id=\"advanced_params_options\" style=\"display:none\">');\n\n        if (empty($sessionId)) {\n            $form->addSelectAjax(\n                'session_template',\n                get_lang('SessionTemplate'),\n                [],\n                ['url' => api_get_path(WEB_AJAX_PATH).'session.ajax.php?a=search_template_session', 'id' => 'system_template']\n            );\n        }\n\n        $form->addSelect(\n            'session_category',\n            get_lang('SessionCategory'),\n            $categoriesOptions,\n            [\n                'id' => 'session_category',\n            ]\n        );\n\n        if (api_get_configuration_value('allow_session_status')) {\n            $statusList = self::getStatusList();\n            $form->addSelect(\n                'status',\n                get_lang('SessionStatus'),\n                $statusList,\n                [\n                    'id' => 'status',\n                ]\n            );\n        }\n\n        $form->addHtmlEditor(\n            'description',\n            get_lang('Description'),\n            false,\n            false,\n            [\n                'ToolbarSet' => 'Minimal',\n            ]\n        );\n\n        $form->addElement('checkbox', 'show_description', null, get_lang('ShowDescription'));\n\n        $visibilityGroup = [];\n        $visibilityGroup[] = $form->createElement(\n            'select',\n            'session_visibility',\n            null,\n            [\n                SESSION_VISIBLE_READ_ONLY => get_lang('SessionReadOnly'),\n                SESSION_VISIBLE => get_lang('SessionAccessible'),\n                SESSION_INVISIBLE => api_ucfirst(get_lang('SessionNotAccessible')),\n            ]\n        );\n        $form->addGroup(\n            $visibilityGroup,\n            'visibility_group',\n            get_lang('SessionVisibility'),\n            null,\n            false\n        );\n\n        $options = [\n            0 => get_lang('ByDuration'),\n            1 => get_lang('ByDates'),\n        ];\n\n        $form->addSelect('access', get_lang('Access'), $options, [\n            'onchange' => 'accessSwitcher()',\n            'id' => 'access',\n        ]);\n\n        $form->addHtml('<div id=\"duration_div\" style=\"display:none\">');\n        $form->addElement(\n            'number',\n            'duration',\n            [\n                get_lang('SessionDurationTitle'),\n                get_lang('SessionDurationDescription'),\n            ],\n            [\n                'maxlength' => 50,\n            ]\n        );\n\n        $form->addHtml('</div>');\n        $form->addHtml('<div id=\"date_fields\" style=\"display:none\">');\n\n        // Dates\n        $form->addDateTimePicker(\n            'access_start_date',\n            [get_lang('SessionStartDate'), get_lang('SessionStartDateComment')],\n            ['id' => 'access_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'access_end_date',\n            [get_lang('SessionEndDate'), get_lang('SessionEndDateComment')],\n            ['id' => 'access_end_date']\n        );\n\n        $form->addRule(\n            ['access_start_date', 'access_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addDateTimePicker(\n            'display_start_date',\n            [\n                get_lang('SessionDisplayStartDate'),\n                get_lang('SessionDisplayStartDateComment'),\n            ],\n            ['id' => 'display_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'display_end_date',\n            [\n                get_lang('SessionDisplayEndDate'),\n                get_lang('SessionDisplayEndDateComment'),\n            ],\n            ['id' => 'display_end_date']\n        );\n\n        $form->addRule(\n            ['display_start_date', 'display_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addDateTimePicker(\n            'coach_access_start_date',\n            [\n                get_lang('SessionCoachStartDate'),\n                get_lang('SessionCoachStartDateComment'),\n            ],\n            ['id' => 'coach_access_start_date']\n        );\n\n        $form->addDateTimePicker(\n            'coach_access_end_date',\n            [\n                get_lang('SessionCoachEndDate'),\n                get_lang('SessionCoachEndDateComment'),\n            ],\n            ['id' => 'coach_access_end_date']\n        );\n\n        $form->addRule(\n            ['coach_access_start_date', 'coach_access_end_date'],\n            get_lang('StartDateMustBeBeforeTheEndDate'),\n            'compare_datetime_text',\n            '< allow_empty'\n        );\n\n        $form->addElement('html', '</div>');\n\n        $form->addCheckBox(\n            'send_subscription_notification',\n            [\n                get_lang('SendSubscriptionNotification'),\n                get_lang('SendAnEmailWhenAUserBeingSubscribed'),\n            ]\n        );\n\n        // Extra fields\n        $setExtraFieldsMandatory = api_get_configuration_value('session_creation_form_set_extra_fields_mandatory');\n        $fieldsRequired = [];\n        if (false !== $setExtraFieldsMandatory && !empty($setExtraFieldsMandatory['fields'])) {\n            $fieldsRequired = $setExtraFieldsMandatory['fields'];\n        }\n        $extra_field = new ExtraFieldModel('session');\n        $extra = $extra_field->addElements(\n            $form,\n            $sessionId,\n            [],\n            false,\n            false,\n            [],\n            [],\n            [],\n            false,\n            false,\n            [],\n            [],\n            false,\n            [],\n            $fieldsRequired\n        );\n\n        $form->addElement('html', '</div>');\n\n        $js = $extra['jquery_ready_content'];\n\n        return ['js' => $js];\n    }\n\n    /**\n     * Gets the number of rows in the session table filtered through the given\n     * array of parameters.\n     *\n     * @param array Array of options/filters/keys\n     *\n     * @return int The number of rows, or false on wrong param\n     * @assert ('a') === false\n     */\n    public static function get_count_admin_complete($options = [])\n    {\n        if (!is_array($options)) {\n            return false;\n        }\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $sessionCourseUserTable = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $courseTable = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tbl_session_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $where = 'WHERE 1 = 1 ';\n        $user_id = api_get_user_id();\n\n        if (api_is_session_admin() &&\n            'false' == api_get_setting('allow_session_admins_to_see_all_sessions')\n        ) {\n            $where .= \" WHERE s.session_admin_id = $user_id \";\n        }\n\n        $extraFieldTables = '';\n        if (!empty($options['where'])) {\n            $options['where'] = str_replace('course_title', 'c.title', $options['where']);\n            $options['where'] = str_replace(\"( session_active = '0' )\", '1=1', $options['where']);\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $options['where']\n            );\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $options['where']\n            );\n\n            if (!empty($options['extra'])) {\n                $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n                $options['where'] = str_replace('AND', 'OR', $options['where']);\n\n                foreach ($options['extra'] as $extra) {\n                    $options['where'] = str_replace(\n                        $extra['field'],\n                        'fv.field_id = '.$extra['id'].' AND fvo.option_value',\n                        $options['where']\n                    );\n                    $extraFieldTables = \"$tbl_session_field_values fv, $tbl_session_field_options fvo, \";\n                }\n            }\n            $where .= ' AND '.$options['where'];\n        }\n\n        $today = api_get_utc_datetime();\n        $query_rows = \"SELECT count(*) as total_rows, c.title as course_title, s.name,\n                        IF (\n                            (s.access_start_date <= '$today' AND '$today' < s.access_end_date) OR\n                            (s.access_start_date = '0000-00-00 00:00:00' AND s.access_end_date = '0000-00-00 00:00:00' ) OR\n                            (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n                            (s.access_start_date <= '$today' AND ('0000-00-00 00:00:00' = s.access_end_date OR s.access_end_date IS NULL )) OR\n                            ('$today' < s.access_end_date AND ('0000-00-00 00:00:00' = s.access_start_date OR s.access_start_date IS NULL) )\n                        , 1, 0) as session_active\n                       FROM $extraFieldTables $tbl_session s\n                       LEFT JOIN  $tbl_session_category sc\n                       ON s.session_category_id = sc.id\n                       INNER JOIN $tbl_user u\n                       ON s.id_coach = u.id\n                       INNER JOIN $sessionCourseUserTable scu\n                       ON s.id = scu.session_id\n                       INNER JOIN $courseTable c\n                       ON c.id = scu.c_id\n                       $where \";\n\n        if (api_is_multiple_url_enabled()) {\n            $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if (-1 != $access_url_id) {\n                $where .= \" AND ar.access_url_id = $access_url_id \";\n                $query_rows = \"SELECT count(*) as total_rows\n                               FROM $tbl_session s\n                               LEFT JOIN  $tbl_session_category sc\n                               ON s.session_category_id = sc.id\n                               INNER JOIN $tbl_user u\n                               ON s.id_coach = u.id\n                               INNER JOIN $table_access_url_rel_session ar\n                               ON ar.session_id = s.id $where \";\n            }\n        }\n\n        $result = Database::query($query_rows);\n        $num = 0;\n        if (Database::num_rows($result)) {\n            $rows = Database::fetch_array($result);\n            $num = $rows['total_rows'];\n        }\n\n        return $num;\n    }\n\n    /**\n     * @param string $listType\n     * @param array  $extraFields\n     *\n     * @return array\n     */\n    public static function getGridColumns(\n        $listType = 'all',\n        $extraFields = [],\n        $addExtraFields = true\n    ) {\n        $showCount = api_get_configuration_value('session_list_show_count_users');\n        // Column config\n        $operators = ['cn', 'nc'];\n        $date_operators = ['gt', 'ge', 'lt', 'le'];\n\n        switch ($listType) {\n            case 'my_space':\n                $columns = [\n                    get_lang('Title'),\n                    get_lang('Date'),\n                    get_lang('NbCoursesPerSession'),\n                    get_lang('NbStudentPerSession'),\n                    get_lang('Details'),\n                ];\n\n                $columnModel = [\n                    ['name' => 'name', 'index' => 'name', 'width' => '255', 'align' => 'left'],\n                    ['name' => 'date', 'index' => 'access_start_date', 'width' => '150', 'align' => 'left'],\n                    [\n                        'name' => 'course_per_session',\n                        'index' => 'course_per_session',\n                        'width' => '150',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'student_per_session',\n                        'index' => 'student_per_session',\n                        'width' => '100',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'actions',\n                        'index' => 'actions',\n                        'width' => '100',\n                        'sortable' => 'false',\n                        'search' => 'false',\n                    ],\n                ];\n                break;\n            case 'all':\n            case 'active':\n            case 'close':\n                $columns = [\n                    '#',\n                    get_lang('Name'),\n                    get_lang('Category'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Visibility'),\n                ];\n\n                $columnModel = [\n                    [\n                        'name' => 'id',\n                        'index' => 's.id',\n                        'width' => '160',\n                        'hidden' => 'true',\n                    ],\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '160',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'category_name',\n                        'index' => 'category_name',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_today',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_one_month',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                ];\n\n                if ($showCount) {\n                    $columns[] = get_lang('Users');\n                    $columnModel[] = [\n                        'name' => 'users',\n                        'index' => 'users',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n\n                    // ofaj\n                    $columns[] = get_lang('Teachers');\n                    $columnModel[] = [\n                        'name' => 'teachers',\n                        'index' => 'teachers',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $columns[] = get_lang('SessionStatus');\n                    $list = self::getStatusList();\n                    $listToString = '';\n                    foreach ($list as $statusId => $status) {\n                        $listToString .= $statusId.':'.$status.';';\n                    }\n\n                    $columnModel[] = [\n                        'name' => 'status',\n                        'index' => 'status',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => $listToString,\n                        ],\n                    ];\n                }\n                break;\n            case 'complete':\n                $columns = [\n                    get_lang('Name'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Coach'),\n                    get_lang('Status'),\n                    get_lang('Visibility'),\n                    get_lang('CourseTitle'),\n                ];\n                $columnModel = [\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '200',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['dataInit' => 'date_pick_today', 'sopt' => $date_operators],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['dataInit' => 'date_pick_one_month', 'sopt' => $date_operators],\n                    ],\n                    [\n                        'name' => 'coach_name',\n                        'index' => 'coach_name',\n                        'width' => '70',\n                        'align' => 'left',\n                        'search' => 'false',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'session_active',\n                        'index' => 'session_active',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => '1:'.get_lang('Active').';0:'.get_lang('Inactive'),\n                        ],\n                        // for the top bar\n                        'editoptions' => [\n                            'value' => '\" \":'.get_lang('All').';1:'.get_lang('Active').';0:'.get_lang(\n                                    'Inactive'\n                                ),\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                    [\n                        'name' => 'course_title',\n                        'index' => 'course_title',\n                        'width' => '50',\n                        'hidden' => 'true',\n                        'search' => 'true',\n                        'searchoptions' => ['searchhidden' => 'true', 'sopt' => $operators],\n                    ],\n                ];\n\n                break;\n\n            case 'custom':\n                $columns = [\n                    '#',\n                    get_lang('Name'),\n                    get_lang('Category'),\n                    get_lang('SessionDisplayStartDate'),\n                    get_lang('SessionDisplayEndDate'),\n                    get_lang('Visibility'),\n                ];\n                $columnModel = [\n                    [\n                        'name' => 'id',\n                        'index' => 's.id',\n                        'width' => '160',\n                        'hidden' => 'true',\n                    ],\n                    [\n                        'name' => 'name',\n                        'index' => 's.name',\n                        'width' => '160',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'category_name',\n                        'index' => 'category_name',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => ['sopt' => $operators],\n                    ],\n                    [\n                        'name' => 'display_start_date',\n                        'index' => 'display_start_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_today',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'display_end_date',\n                        'index' => 'display_end_date',\n                        'width' => '50',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'searchoptions' => [\n                            'dataInit' => 'date_pick_one_month',\n                            'sopt' => $date_operators,\n                        ],\n                    ],\n                    [\n                        'name' => 'visibility',\n                        'index' => 'visibility',\n                        'width' => '40',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ],\n                ];\n\n                if ($showCount) {\n                    $columns[] = get_lang('Users');\n                    $columnModel[] = [\n                        'name' => 'users',\n                        'index' => 'users',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n\n                    // ofaj\n                    $columns[] = get_lang('Teachers');\n                    $columnModel[] = [\n                        'name' => 'teachers',\n                        'index' => 'teachers',\n                        'width' => '20',\n                        'align' => 'left',\n                        'search' => 'false',\n                    ];\n                }\n\n                if (api_get_configuration_value('allow_session_status')) {\n                    $columns[] = get_lang('SessionStatus');\n                    $list = self::getStatusList();\n                    $listToString = '';\n                    foreach ($list as $statusId => $status) {\n                        $listToString .= $statusId.':'.$status.';';\n                    }\n\n                    $columnModel[] = [\n                        'name' => 'status',\n                        'index' => 'status',\n                        'width' => '25',\n                        'align' => 'left',\n                        'search' => 'true',\n                        'stype' => 'select',\n                        // for the bottom bar\n                        'searchoptions' => [\n                            'defaultValue' => '1',\n                            'value' => $listToString,\n                        ],\n                    ];\n                }\n\n                break;\n        }\n\n        if (!empty($extraFields)) {\n            foreach ($extraFields as $field) {\n                $columns[] = $field['display_text'];\n                $columnModel[] = [\n                    'name' => $field['variable'],\n                    'index' => $field['variable'],\n                    'width' => '80',\n                    'align' => 'center',\n                    'search' => 'false',\n                ];\n            }\n        }\n\n        // Inject extra session fields\n        $rules = [];\n        if ($addExtraFields) {\n            $sessionField = new ExtraFieldModel('session');\n            $rules = $sessionField->getRules($columns, $columnModel);\n        }\n\n        if (!in_array('actions', array_column($columnModel, 'name'))) {\n            $columnModel[] = [\n                'name' => 'actions',\n                'index' => 'actions',\n                'width' => '80',\n                'align' => 'left',\n                'formatter' => 'action_formatter',\n                'sortable' => 'false',\n                'search' => 'false',\n            ];\n            $columns[] = get_lang('Actions');\n        }\n\n        $columnName = [];\n        foreach ($columnModel as $col) {\n            $columnName[] = $col['name'];\n        }\n\n        $return = [\n            'columns' => $columns,\n            'column_model' => $columnModel,\n            'rules' => $rules,\n            'simple_column_name' => $columnName,\n        ];\n\n        return $return;\n    }\n\n    /**\n     * Converts all dates sent through the param array (given form) to correct dates with timezones.\n     *\n     * @param array The dates The same array, with times converted\n     * @param bool $applyFormat Whether apply the DATE_TIME_FORMAT_SHORT format for sessions\n     *\n     * @return array The same array, with times converted\n     */\n    public static function convert_dates_to_local($params, $applyFormat = false)\n    {\n        if (!is_array($params)) {\n            return false;\n        }\n        $params['display_start_date'] = api_get_local_time($params['display_start_date'], null, null, true);\n        $params['display_end_date'] = api_get_local_time($params['display_end_date'], null, null, true);\n\n        $params['access_start_date'] = api_get_local_time($params['access_start_date'], null, null, true);\n        $params['access_end_date'] = api_get_local_time($params['access_end_date'], null, null, true);\n\n        $params['coach_access_start_date'] = isset($params['coach_access_start_date']) ? api_get_local_time($params['coach_access_start_date'], null, null, true) : null;\n        $params['coach_access_end_date'] = isset($params['coach_access_end_date']) ? api_get_local_time($params['coach_access_end_date'], null, null, true) : null;\n\n        if ($applyFormat) {\n            if (isset($params['display_start_date'])) {\n                $params['display_start_date'] = api_format_date($params['display_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['display_end_date'])) {\n                $params['display_end_date'] = api_format_date($params['display_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['access_start_date'])) {\n                $params['access_start_date'] = api_format_date($params['access_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['access_end_date'])) {\n                $params['access_end_date'] = api_format_date($params['access_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['coach_access_start_date'])) {\n                $params['coach_access_start_date'] = api_format_date($params['coach_access_start_date'], DATE_TIME_FORMAT_SHORT);\n            }\n\n            if (isset($params['coach_access_end_date'])) {\n                $params['coach_access_end_date'] = api_format_date($params['coach_access_end_date'], DATE_TIME_FORMAT_SHORT);\n            }\n        }\n\n        return $params;\n    }\n\n    /**\n     * Gets the admin session list callback of the session/session_list.php\n     * page with all user/details in the right fomat.\n     *\n     * @param array $options\n     *\n     * @return array Array of rows results\n     * @asset ('a') === false\n     */\n    public static function get_sessions_admin_complete($options = [])\n    {\n        if (!is_array($options)) {\n            return false;\n        }\n\n        $tbl_session = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tbl_session_category = Database::get_main_table(TABLE_MAIN_SESSION_CATEGORY);\n        $tbl_user = Database::get_main_table(TABLE_MAIN_USER);\n        $tbl_session_rel_course = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tbl_course = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        $extraFieldTable = Database::get_main_table(TABLE_EXTRA_FIELD);\n        $tbl_session_field_values = Database::get_main_table(TABLE_EXTRA_FIELD_VALUES);\n        $tbl_session_field_options = Database::get_main_table(TABLE_EXTRA_FIELD_OPTIONS);\n\n        $where = 'WHERE 1 = 1 ';\n        $user_id = api_get_user_id();\n\n        if (!api_is_platform_admin()) {\n            if (api_is_session_admin() &&\n                'false' == api_get_setting('allow_session_admins_to_manage_all_sessions')\n            ) {\n                $where .= \" AND s.session_admin_id = $user_id \";\n            }\n        }\n\n        $coach_name = \" CONCAT(u.lastname , ' ', u.firstname) as coach_name \";\n        if (api_is_western_name_order()) {\n            $coach_name = \" CONCAT(u.firstname, ' ', u.lastname) as coach_name \";\n        }\n\n        $today = api_get_utc_datetime();\n        $injectExtraFields = null;\n        $extra_fields_info = [];\n\n        //for now only sessions\n        $extra_field = new ExtraFieldModel('session');\n        $double_fields = [];\n        $extra_field_option = new ExtraFieldOption('session');\n\n        if (isset($options['extra'])) {\n            $extra_fields = $options['extra'];\n            if (!empty($extra_fields)) {\n                foreach ($extra_fields as $extra) {\n                    $injectExtraFields .= \" IF (fv.field_id = {$extra['id']}, fvo.option_display_text, NULL ) as {$extra['field']} , \";\n                    if (isset($extra_fields_info[$extra['id']])) {\n                        $info = $extra_fields_info[$extra['id']];\n                    } else {\n                        $info = $extra_field->get($extra['id']);\n                        $extra_fields_info[$extra['id']] = $info;\n                    }\n\n                    if (ExtraFieldModel::FIELD_TYPE_DOUBLE_SELECT == $info['field_type']) {\n                        $double_fields[$info['id']] = $info;\n                    }\n                }\n            }\n        }\n\n        $options_by_double = [];\n        foreach ($double_fields as $double) {\n            $my_options = $extra_field_option->get_field_options_by_field(\n                $double['id'],\n                true\n            );\n            $options_by_double['extra_'.$double['field_variable']] = $my_options;\n        }\n\n        //sc.name as category_name,\n        $select = \"\n                SELECT * FROM (\n                    SELECT DISTINCT\n                        IF (\n                            (s.access_start_date <= '$today' AND '$today' < s.access_end_date) OR\n                            (s.access_start_date = '0000-00-00 00:00:00' AND s.access_end_date = '0000-00-00 00:00:00' ) OR\n                            (s.access_start_date IS NULL AND s.access_end_date IS NULL) OR\n                            (s.access_start_date <= '$today' AND ('0000-00-00 00:00:00' = s.access_end_date OR s.access_end_date IS NULL )) OR\n                            ('$today' < s.access_end_date AND ('0000-00-00 00:00:00' = s.access_start_date OR s.access_start_date IS NULL) )\n                        , 1, 0) as session_active,\n                s.name,\n                s.nbr_courses,\n                s.nbr_users,\n                s.display_start_date,\n                s.display_end_date,\n                $coach_name,\n                access_start_date,\n                access_end_date,\n                s.visibility,\n                u.id as user_id,\n                $injectExtraFields\n                c.title as course_title,\n                s.id \";\n\n        if (!empty($options['where'])) {\n            if (!empty($options['extra'])) {\n                $options['where'] = str_replace(' 1 = 1  AND', '', $options['where']);\n                $options['where'] = str_replace('AND', 'OR', $options['where']);\n                foreach ($options['extra'] as $extra) {\n                    $options['where'] = str_replace($extra['field'], 'fv.field_id = '.$extra['id'].' AND fvo.option_value', $options['where']);\n                }\n            }\n            $options['where'] = str_replace('course_title', 'c.title', $options['where']);\n            $options['where'] = str_replace(\"( session_active = '0' )\", '1=1', $options['where']);\n            $options['where'] = str_replace(\n                [\"AND session_active = '1'  )\", \" AND (  session_active = '1'  )\"],\n                [') GROUP BY s.name HAVING session_active = 1 ', \" GROUP BY s.name HAVING session_active = 1 \"],\n                $options['where']\n            );\n\n            $options['where'] = str_replace(\n                [\"AND session_active = '0'  )\", \" AND (  session_active = '0'  )\"],\n                [') GROUP BY s.name HAVING session_active = 0 ', \" GROUP BY s.name HAVING session_active = '0' \"],\n                $options['where']\n            );\n\n            $where .= ' AND '.$options['where'];\n        }\n\n        $limit = '';\n        if (!empty($options['limit'])) {\n            $limit = ' LIMIT '.$options['limit'];\n        }\n\n        $query = \"$select FROM $tbl_session s\n                    LEFT JOIN $tbl_session_field_values fv\n                    ON (fv.item_id = s.id)\n                    LEFT JOIN $extraFieldTable f\n                    ON f.id = fv.field_id\n                    LEFT JOIN $tbl_session_field_options fvo\n                    ON (fv.field_id = fvo.field_id)\n                    LEFT JOIN $tbl_session_rel_course src\n                    ON (src.session_id = s.id)\n                    LEFT JOIN $tbl_course c\n                    ON (src.c_id = c.id)\n                    LEFT JOIN $tbl_session_category sc\n                    ON (s.session_category_id = sc.id)\n                    INNER JOIN $tbl_user u\n                    ON (s.id_coach = u.id)\n                    $where\n                    $limit\n        \";\n\n        if (api_is_multiple_url_enabled()) {\n            $table_access_url_rel_session = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n            $access_url_id = api_get_current_access_url_id();\n            if (-1 != $access_url_id) {\n                $query = \"$select\n                    FROM $tbl_session s\n                    LEFT JOIN $tbl_session_field_values fv\n                    ON (fv.item_id = s.id)\n                    LEFT JOIN $tbl_session_field_options fvo\n                    ON (fv.field_id = fvo.field_id)\n                    LEFT JOIN $tbl_session_rel_course src\n                    ON (src.session_id = s.id)\n                    LEFT JOIN $tbl_course c\n                    ON (src.c_id = c.id)\n                    LEFT JOIN $tbl_session_category sc\n                    ON (s.session_category_id = sc.id)\n                    INNER JOIN $tbl_user u\n                    ON (s.id_coach = u.id)\n                    INNER JOIN $table_access_url_rel_session ar\n                    ON (ar.session_id = s.id AND ar.access_url_id = $access_url_id)\n                    $where\n                    $limit\n                \";\n            }\n        }\n\n        $query .= ') AS s';\n\n        if (!empty($options['order'])) {\n            $query .= ' ORDER BY '.$options['order'];\n        }\n\n        $result = Database::query($query);\n\n        $acceptIcon = Display::return_icon(\n            'accept.png',\n            get_lang('Active'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $errorIcon = Display::return_icon(\n            'error.png',\n            get_lang('Inactive'),\n            [],\n            ICON_SIZE_SMALL\n        );\n\n        $formatted_sessions = [];\n        if (Database::num_rows($result)) {\n            $sessions = Database::store_result($result, 'ASSOC');\n            foreach ($sessions as $session) {\n                $session_id = $session['id'];\n                $session['name'] = Display::url($session['name'], \"resume_session.php?id_session=\".$session['id']);\n                $session['coach_name'] = Display::url($session['coach_name'], \"user_information.php?user_id=\".$session['user_id']);\n                if (1 == $session['session_active']) {\n                    $session['session_active'] = $acceptIcon;\n                } else {\n                    $session['session_active'] = $errorIcon;\n                }\n\n                $session = self::convert_dates_to_local($session);\n\n                switch ($session['visibility']) {\n                    case SESSION_VISIBLE_READ_ONLY: //1\n                        $session['visibility'] = get_lang('ReadOnly');\n                        break;\n                    case SESSION_VISIBLE:           //2\n                    case SESSION_AVAILABLE:         //4\n                        $session['visibility'] = get_lang('Visible');\n                        break;\n                    case SESSION_INVISIBLE:         //3\n                        $session['visibility'] = api_ucfirst(get_lang('Invisible'));\n                        break;\n                }\n\n                // Cleaning double selects\n                foreach ($session as $key => &$value) {\n                    if (isset($options_by_double[$key]) || isset($options_by_double[$key.'_second'])) {\n                        $options = explode('::', $value);\n                    }\n                    $original_key = $key;\n\n                    if (strpos($key, '_second') === false) {\n                    } else {\n                        $key = str_replace('_second', '', $key);\n                    }\n\n                    if (isset($options_by_double[$key])) {\n                        if (isset($options[0])) {\n                            if (isset($options_by_double[$key][$options[0]])) {\n                                if (strpos($original_key, '_second') === false) {\n                                    $value = $options_by_double[$key][$options[0]]['option_display_text'];\n                                } else {\n                                    $value = $options_by_double[$key][$options[1]]['option_display_text'];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Magic filter\n                if (isset($formatted_sessions[$session_id])) {\n                    $formatted_sessions[$session_id] = self::compareArraysToMerge(\n                        $formatted_sessions[$session_id],\n                        $session\n                    );\n                } else {\n                    $formatted_sessions[$session_id] = $session;\n                }\n            }\n        }\n\n        return $formatted_sessions;\n    }\n\n    /**\n     * Compare two arrays.\n     *\n     * @param array $array1\n     * @param array $array2\n     *\n     * @return array\n     */\n    public static function compareArraysToMerge($array1, $array2)\n    {\n        if (empty($array2)) {\n            return $array1;\n        }\n        foreach ($array1 as $key => $item) {\n            if (!isset($array1[$key])) {\n                //My string is empty try the other one\n                if (isset($array2[$key]) && !empty($array2[$key])) {\n                    $array1[$key] = $array2[$key];\n                }\n            }\n        }\n\n        return $array1;\n    }\n\n    /**\n     * Get link to the admin page for this session.\n     *\n     * @param int $id Session ID\n     *\n     * @return mixed URL to the admin page to manage the session, or false on error\n     */\n    public static function getAdminPath($id)\n    {\n        $id = (int) $id;\n        $session = self::fetch($id);\n        if (empty($session)) {\n            return false;\n        }\n\n        return api_get_path(WEB_CODE_PATH).'session/resume_session.php?id_session='.$id;\n    }\n\n    /**\n     * Get link to the user page for this session.\n     * If a course is provided, build the link to the course.\n     *\n     * @param int $id       Session ID\n     * @param int $courseId Course ID (optional) in case the link has to send straight to the course\n     *\n     * @return mixed URL to the page to use the session, or false on error\n     */\n    public static function getPath($id, $courseId = 0)\n    {\n        $id = (int) $id;\n        $session = self::fetch($id);\n        if (empty($session)) {\n            return false;\n        }\n        if (empty($courseId)) {\n            return api_get_path(WEB_CODE_PATH).'session/index.php?session_id='.$id;\n        } else {\n            $courseInfo = api_get_course_info_by_id($courseId);\n            if ($courseInfo) {\n                return $courseInfo['course_public_url'].'?id_session='.$id;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2\n     * for course where user is coach\n     * i.e. coach for the course or\n     * main coach for a session the course is in\n     * for a session category (or woth no session category if empty).\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getSessionCourseForUser($userId)\n    {\n        // list of COURSES where user is COURSE session coach\n        $listCourseCourseCoachSession = self::getCoursesForCourseSessionCoach($userId);\n        // list of courses where user is MAIN session coach\n        $listCourseMainCoachSession = self::getCoursesForMainSessionCoach($userId);\n        // merge these 2 array\n        $listResCourseSession = $listCourseCourseCoachSession;\n        foreach ($listCourseMainCoachSession as $courseId2 => $listSessionId2) {\n            if (isset($listResCourseSession[$courseId2])) {\n                // if sessionId array exists for this course\n                // same courseId, merge the list of session\n                foreach ($listCourseMainCoachSession[$courseId2] as $i => $sessionId2) {\n                    if (!in_array($sessionId2, $listResCourseSession[$courseId2])) {\n                        $listResCourseSession[$courseId2][] = $sessionId2;\n                    }\n                }\n            } else {\n                $listResCourseSession[$courseId2] = $listSessionId2;\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2.\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getCoursesForCourseSessionCoach($userId)\n    {\n        $userId = (int) $userId;\n        $listResCourseSession = [];\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n        $tblSessionRelCourseRelUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n\n        $sql = \"SELECT session_id, c_id, c.id\n                FROM $tblSessionRelCourseRelUser srcru\n                LEFT JOIN $tblCourse c\n                ON c.id = srcru.c_id\n                WHERE\n                    srcru.user_id = $userId AND\n                    srcru.status = 2\";\n\n        $res = Database::query($sql);\n\n        while ($data = Database::fetch_assoc($res)) {\n            if (api_get_session_visibility($data['session_id'])) {\n                if (!isset($listResCourseSession[$data['id']])) {\n                    $listResCourseSession[$data['id']] = [];\n                }\n                $listResCourseSession[$data['id']][] = $data['session_id'];\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an associative array 'id_course' => [id_session1, id_session2...]\n     * where course id_course is in sessions id_session1, id_session2.\n     *\n     * @param $userId\n     *\n     * @return array\n     */\n    public static function getCoursesForMainSessionCoach($userId)\n    {\n        $userId = (int) $userId;\n        $listResCourseSession = [];\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        // list of SESSION where user is session coach\n        $sql = \"SELECT id FROM $tblSession\n                WHERE id_coach = \".$userId;\n        $res = Database::query($sql);\n\n        while ($data = Database::fetch_assoc($res)) {\n            $sessionId = $data['id'];\n            $listCoursesInSession = self::getCoursesInSession($sessionId);\n            foreach ($listCoursesInSession as $i => $courseId) {\n                if (api_get_session_visibility($sessionId)) {\n                    if (!isset($listResCourseSession[$courseId])) {\n                        $listResCourseSession[$courseId] = [];\n                    }\n                    $listResCourseSession[$courseId][] = $sessionId;\n                }\n            }\n        }\n\n        return $listResCourseSession;\n    }\n\n    /**\n     * Return an array of course_id used in session $sessionId.\n     *\n     * @param $sessionId\n     *\n     * @return array\n     */\n    public static function getCoursesInSession($sessionId)\n    {\n        if (empty($sessionId)) {\n            return [];\n        }\n\n        $tblSessionRelCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tblCourse = Database::get_main_table(TABLE_MAIN_COURSE);\n\n        // list of course in this session\n        $sql = \"SELECT session_id, c.id\n                FROM $tblSessionRelCourse src\n                LEFT JOIN $tblCourse c\n                ON c.id = src.c_id\n                WHERE session_id = \".intval($sessionId);\n        $res = Database::query($sql);\n\n        $listResultsCourseId = [];\n        while ($data = Database::fetch_assoc($res)) {\n            $listResultsCourseId[] = $data['id'];\n        }\n\n        return $listResultsCourseId;\n    }\n\n    /**\n     * Return an array of courses in session for user\n     * and for each courses the list of session that use this course for user.\n     *\n     * [0] => array\n     *      userCatId\n     *      userCatTitle\n     *      courseInUserCatList\n     *          [0] => array\n     *              courseId\n     *              title\n     *              courseCode\n     *              sessionCatList\n     *                  [0] => array\n     *                      catSessionId\n     *                      catSessionName\n     *                      sessionList\n     *                          [0] => array\n     *                              sessionId\n     *                              sessionName\n     *\n     * @param int $userId\n     *\n     * @return array\n     */\n    public static function getNamedSessionCourseForCoach($userId)\n    {\n        $listResults = [];\n        $listCourseSession = self::getSessionCourseForUser($userId);\n        foreach ($listCourseSession as $courseId => $listSessionId) {\n            // Course info\n            $courseInfo = api_get_course_info_by_id($courseId);\n            $listOneCourse = [];\n            $listOneCourse['courseId'] = $courseId;\n            $listOneCourse['title'] = $courseInfo['title'];\n            //$listOneCourse['courseCode'] = $courseInfo['code'];\n            $listOneCourse['course'] = $courseInfo;\n            $listOneCourse['sessionCatList'] = [];\n            $listCat = [];\n            foreach ($listSessionId as $i => $sessionId) {\n                // here we got all session for this course\n                // lets check there session categories\n                $sessionInfo = self::fetch($sessionId);\n                $catId = $sessionInfo['session_category_id'];\n                if (!isset($listCat[$catId])) {\n                    $listCatInfo = self::get_session_category($catId);\n                    if ($listCatInfo) {\n                        $listCat[$catId] = [];\n                        $listCat[$catId]['catSessionId'] = $catId;\n                        $listCat[$catId]['catSessionName'] = $listCatInfo['name'];\n                        $listCat[$catId]['sessionList'] = [];\n                    }\n                }\n                $listSessionInfo = self::fetch($sessionId);\n                $listSessionIdName = [\n                    'sessionId' => $sessionId,\n                    'sessionName' => $listSessionInfo['name'],\n                ];\n                $listCat[$catId]['sessionList'][] = $listSessionIdName;\n            }\n            // sort $listCat by catSessionName\n            usort($listCat, 'self::compareBySessionName');\n            // in each catSession sort sessionList by sessionName\n            foreach ($listCat as $i => $listCatSessionInfo) {\n                $listSessionList = $listCatSessionInfo['sessionList'];\n                usort($listSessionList, 'self::compareCatSessionInfo');\n                $listCat[$i]['sessionList'] = $listSessionList;\n            }\n\n            $listOneCourse['sessionCatList'] = $listCat;\n\n            // user course category\n            $courseCategory = CourseManager::getUserCourseCategoryForCourse(\n                $userId,\n                $courseId\n            );\n\n            $userCatTitle = '';\n            $userCatId = 0;\n            if ($courseCategory) {\n                $userCatId = $courseCategory['user_course_cat'];\n                $userCatTitle = $courseCategory['title'];\n            }\n\n            $listResults[$userCatId]['courseInUserCategoryId'] = $userCatId;\n            $listResults[$userCatId]['courseInUserCategoryTitle'] = $userCatTitle;\n            $listResults[$userCatId]['courseInUserCatList'][] = $listOneCourse;\n        }\n\n        // sort by user course cat\n        uasort($listResults, 'self::compareByUserCourseCat');\n\n        // sort by course title\n        foreach ($listResults as $userCourseCatId => $tabCoursesInCat) {\n            $courseInUserCatList = $tabCoursesInCat['courseInUserCatList'];\n            uasort($courseInUserCatList, 'self::compareByCourse');\n            $listResults[$userCourseCatId]['courseInUserCatList'] = $courseInUserCatList;\n        }\n\n        return $listResults;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $courseId\n     *\n     * @return array\n     */\n    public static function searchCourseInSessionsFromUser($userId, $courseId)\n    {\n        $table = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $userId = (int) $userId;\n        $courseId = (int) $courseId;\n        if (empty($userId) || empty($courseId)) {\n            return [];\n        }\n\n        $sql = \"SELECT * FROM $table\n                WHERE c_id = $courseId AND user_id = $userId\";\n        $result = Database::query($sql);\n\n        return Database::store_result($result, 'ASSOC');\n    }\n\n    /**\n     * Subscribe and redirect to session after inscription.\n     */\n    public static function redirectToSession()\n    {\n        $sessionId = (int) ChamiloSession::read('session_redirect');\n        $onlyOneCourseSessionToRedirect = ChamiloSession::read('only_one_course_session_redirect');\n        if ($sessionId) {\n            $sessionInfo = api_get_session_info($sessionId);\n            if (!empty($sessionInfo)) {\n                $userId = api_get_user_id();\n                $response = self::isUserSubscribedAsStudent($sessionId, $userId);\n                if ($response) {\n                    $urlToRedirect = api_get_path(WEB_CODE_PATH).'session/index.php?session_id='.$sessionId;\n                    if (!empty($onlyOneCourseSessionToRedirect)) {\n                        $urlToRedirect = api_get_path(WEB_PATH).\n                            'courses/'.$onlyOneCourseSessionToRedirect.'/index.php?id_session='.$sessionId;\n                    }\n\n                    header('Location: '.$urlToRedirect);\n                    exit;\n                }\n            }\n        }\n    }\n\n    /**\n     * @return int\n     */\n    public static function getCountUsersInCourseSession(Course $course, Session $session)\n    {\n        $urlId = api_get_current_access_url_id();\n\n        return Database::getManager()\n            ->createQuery(\"\n                SELECT COUNT(scu)\n                FROM ChamiloCoreBundle:SessionRelCourseRelUser scu\n                INNER JOIN ChamiloCoreBundle:SessionRelUser su\n                    WITH scu.user = su.user\n                    AND scu.session = su.session\n                INNER JOIN ChamiloCoreBundle:AccessUrlRelUser a\n                    WITH a.user = su.user\n                WHERE\n                    scu.course = :course AND\n                    su.relationType <> :relationType AND\n                    scu.session = :session AND\n                    a.portal = :url\n            \")\n            ->setParameters([\n                'course' => $course->getId(),\n                'relationType' => SESSION_RELATION_TYPE_RRHH,\n                'session' => $session->getId(),\n                'url' => $urlId,\n            ])\n            ->getSingleScalarResult();\n    }\n\n    /**\n     * Get course IDs where user in not subscribed in session.\n     *\n     * @return array\n     */\n    public static function getAvoidedCoursesInSession(User $user, Session $session)\n    {\n        $courseIds = [];\n\n        /** @var SessionRelCourse $sessionCourse */\n        foreach ($session->getCourses() as $sessionCourse) {\n            /** @var Course $course */\n            $course = $sessionCourse->getCourse();\n\n            if ($session->getUserInCourse($user, $course)->count()) {\n                continue;\n            }\n\n            $courseIds[] = $course->getId();\n        }\n\n        return $courseIds;\n    }\n\n    /**\n     * @param int             $userId\n     * @param int             $sessionId\n     * @param ExtraFieldValue $extraFieldValue\n     * @param string          $collapsableLink\n     *\n     * @return array\n     */\n    public static function getCollapsableData($userId, $sessionId, $extraFieldValue, $collapsableLink)\n    {\n        $collapsed = 0;\n\n        // Get default collapsed value in extra field\n        $value = $extraFieldValue->get_values_by_handler_and_field_variable($sessionId, 'collapsed');\n        if (!empty($value) && isset($value['value'])) {\n            $collapsed = $value['value'];\n        }\n\n        $userRelSession = self::getUserSession($userId, $sessionId);\n\n        if ($userRelSession) {\n            if (isset($userRelSession['collapsed']) && '' != $userRelSession['collapsed']) {\n                $collapsed = $userRelSession['collapsed'];\n            }\n        } else {\n            return ['collapsed' => $collapsed, 'collapsable_link' => '&nbsp;'];\n        }\n\n        $link = $collapsableLink.'&session_id='.$sessionId.'&value=1';\n        $image = '<i class=\"fa fa-folder-open\"></i>';\n        if (1 == $collapsed) {\n            $link = $collapsableLink.'&session_id='.$sessionId.'&value=0';\n            $image = '<i class=\"fa fa-folder\"></i>';\n        }\n\n        $link = Display::url(\n            $image,\n            $link\n        );\n\n        return ['collapsed' => $collapsed, 'collapsable_link' => $link];\n    }\n\n    /**\n     * Converts \"start date\" and \"end date\" to \"From start date to end date\" string.\n     *\n     * @param string $startDate\n     * @param string $endDate\n     * @param bool   $showTime\n     * @param bool   $dateHuman\n     *\n     * @return string\n     */\n    public static function convertSessionDateToString($startDate, $endDate, $showTime, $dateHuman)\n    {\n        // api_get_local_time returns empty if date is invalid like 0000-00-00 00:00:00\n        $startDateToLocal = api_get_local_time(\n            $startDate,\n            null,\n            null,\n            true,\n            $showTime,\n            $dateHuman\n        );\n        $endDateToLocal = api_get_local_time(\n            $endDate,\n            null,\n            null,\n            true,\n            $showTime,\n            $dateHuman\n        );\n\n        $format = $showTime ? DATE_TIME_FORMAT_LONG_24H : DATE_FORMAT_LONG_NO_DAY;\n\n        $result = '';\n        if (!empty($startDateToLocal) && !empty($endDateToLocal)) {\n            $result = sprintf(\n                get_lang('FromDateXToDateY'),\n                api_format_date($startDateToLocal, $format),\n                api_format_date($endDateToLocal, $format)\n            );\n        } else {\n            if (!empty($startDateToLocal)) {\n                $result = get_lang('From').' '.api_format_date($startDateToLocal, $format);\n            }\n            if (!empty($endDateToLocal)) {\n                $result = get_lang('Until').' '.api_format_date($endDateToLocal, $format);\n            }\n        }\n        if (empty($result)) {\n            $result = get_lang('NoTimeLimits');\n        }\n\n        return $result;\n    }\n\n    public static function getStatusList()\n    {\n        return [\n            self::STATUS_PLANNED => get_lang('Planned'),\n            self::STATUS_PROGRESS => get_lang('InProgress'),\n            self::STATUS_FINISHED => get_lang('Finished'),\n            self::STATUS_CANCELLED => get_lang('Cancelled'),\n        ];\n    }\n\n    public static function getStatusLabel($status)\n    {\n        $list = self::getStatusList();\n\n        if (!isset($list[$status])) {\n            return get_lang('NoStatus');\n        }\n\n        return $list[$status];\n    }\n\n    public static function getDefaultSessionTab()\n    {\n        $default = 'all';\n        $view = api_get_configuration_value('default_session_list_view');\n\n        if (!empty($view)) {\n            $default = $view;\n        }\n\n        return $default;\n    }\n\n    /**\n     * @return string\n     */\n    public static function getSessionListTabs($listType)\n    {\n        $tabs = [\n            [\n                'content' => get_lang('AllSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=all',\n            ],\n            [\n                'content' => get_lang('ActiveSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=active',\n            ],\n            [\n                'content' => get_lang('ClosedSessionsShort'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=close',\n            ],\n            [\n                'content' => get_lang('SessionListCustom'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list.php?list_type=custom',\n            ],\n            /*[\n                'content' => get_lang('Complete'),\n                'url' => api_get_path(WEB_CODE_PATH).'session/session_list_simple.php?list_type=complete',\n            ],*/\n        ];\n\n        switch ($listType) {\n            case 'all':\n                $default = 1;\n                break;\n            case 'active':\n                $default = 2;\n                break;\n            case 'close':\n                $default = 3;\n                break;\n            case 'custom':\n                $default = 4;\n                break;\n        }\n\n        return Display::tabsOnlyLink($tabs, $default);\n    }\n\n    /**\n     * Check if a session is followed by human resources manager.\n     *\n     * @param int $sessionId\n     * @param int $userId\n     *\n     * @return bool\n     */\n    public static function isSessionFollowedByDrh($sessionId, $userId)\n    {\n        $userId = (int) $userId;\n        $sessionId = (int) $sessionId;\n\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n        $tblSessionRelUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n\n        if (api_is_multiple_url_enabled()) {\n            $tblSessionRelAccessUrl = Database::get_main_table(TABLE_MAIN_ACCESS_URL_REL_SESSION);\n\n            $sql = \"SELECT s.id FROM $tblSession s\n                INNER JOIN $tblSessionRelUser sru ON (sru.session_id = s.id)\n                LEFT JOIN $tblSessionRelAccessUrl a ON (s.id = a.session_id)\n                WHERE\n                    sru.user_id = '$userId' AND\n                    sru.session_id = '$sessionId' AND\n                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"' AND\n                    access_url_id = \".api_get_current_access_url_id();\n        } else {\n            $sql = \"SELECT s.id FROM $tblSession s\n                INNER JOIN $tblSessionRelUser sru ON sru.session_id = s.id\n                WHERE\n                    sru.user_id = '$userId' AND\n                    sru.session_id = '$sessionId' AND\n                    sru.relation_type = '\".SESSION_RELATION_TYPE_RRHH.\"'\";\n        }\n\n        $result = Database::query($sql);\n\n        return Database::num_rows($result) > 0;\n    }\n\n    /**\n     * Add a warning message when session is read-only mode.\n     */\n    public static function addFlashSessionReadOnly()\n    {\n        if (api_get_session_id() && !api_is_allowed_to_session_edit()) {\n            Display::addFlash(\n                Display::return_message(get_lang('SessionIsReadOnly'), 'warning')\n            );\n        }\n    }\n\n    public static function insertUsersInCourses(array $studentIds, array $courseIds, int $sessionId)\n    {\n        $tblSessionUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        foreach ($courseIds as $courseId) {\n            self::insertUsersInCourse($studentIds, $courseId, $sessionId, [], false);\n        }\n\n        foreach ($studentIds as $studentId) {\n            Database::query(\n                \"INSERT IGNORE INTO $tblSessionUser (session_id, user_id, registered_at)\n                VALUES ($sessionId, $studentId, '\".api_get_utc_datetime().\"')\"\n            );\n        }\n\n        Database::query(\n            \"UPDATE $tblSession s\n            SET s.nbr_users = (\n                SELECT COUNT(1) FROM session_rel_user sru\n                WHERE sru.session_id = $sessionId AND sru.relation_type <> \".Session::DRH.\"\n            )\n            WHERE s.id = $sessionId\"\n        );\n    }\n\n    public static function insertUsersInCourse(\n        array $studentIds,\n        int $courseId,\n        int $sessionId,\n        array $relationInfo = [],\n        bool $updateSession = true\n    ) {\n        $tblSessionCourseUser = Database::get_main_table(TABLE_MAIN_SESSION_COURSE_USER);\n        $tblSessionCourse = Database::get_main_table(TABLE_MAIN_SESSION_COURSE);\n        $tblSessionUser = Database::get_main_table(TABLE_MAIN_SESSION_USER);\n        $tblSession = Database::get_main_table(TABLE_MAIN_SESSION);\n\n        $relationInfo = array_merge(['visibility' => 0, 'status' => Session::STUDENT], $relationInfo);\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $courseCode = $courseInfo['code'];\n        $subscribeToForums = (int) api_get_course_setting('subscribe_users_to_forum_notifications', $courseInfo);\n        if ($subscribeToForums) {\n            $forums = [];\n            $forumsBaseCourse = [];\n            require_once api_get_path(SYS_CODE_PATH).'forum/forumfunction.inc.php';\n            $forums = get_forums(0, $courseCode, true, $sessionId);\n            if (api_get_configuration_value('subscribe_users_to_forum_notifications_also_in_base_course')) {\n                $forumsBaseCourse = get_forums(0, $courseCode, true, 0);\n            }\n        }\n\n        $sessionCourseUser = [\n            'session_id' => $sessionId,\n            'c_id' => $courseId,\n            'visibility' => $relationInfo['visibility'],\n            'status' => $relationInfo['status'],\n        ];\n        $sessionUser = [\n            'session_id' => $sessionId,\n            'registered_at' => api_get_utc_datetime(),\n        ];\n\n        foreach ($studentIds as $studentId) {\n            $sessionCourseUser['user_id'] = $studentId;\n\n            $count = Database::select(\n                'COUNT(1) as nbr',\n                $tblSessionCourseUser,\n                ['where' => ['session_id = ? AND c_id = ? AND user_id = ?' => [$sessionId, $courseId, $studentId]]],\n                'first'\n            );\n\n            if (empty($count['nbr'])) {\n                Database::insert($tblSessionCourseUser, $sessionCourseUser);\n\n                Event::logUserSubscribedInCourseSession($studentId, $courseId, $sessionId);\n                if ($subscribeToForums) {\n                    $userInfo = api_get_user_info($studentID);\n                    if (!empty($forums)) {\n                        foreach ($forums as $forum) {\n                            $forumId = $forum['iid'];\n                            set_notification('forum', $forumId, false, $userInfo, $courseInfo);\n                        }\n                    }\n                    if (!empty($forumsBaseCourse)) {\n                        foreach ($forumsBaseCourse as $forum) {\n                            $forumId = $forum['iid'];\n                            set_notification('forum', $forumId, false, $userInfo, $courseInfo);\n                        }\n                    }\n                }\n            }\n\n            if ($updateSession) {\n                $sessionUser['user_id'] = $studentId;\n\n                $count = Database::select(\n                    'COUNT(1) as nbr',\n                    $tblSessionUser,\n                    ['where' => ['session_id = ? AND user_id = ?' => [$sessionId, $studentId]]],\n                    'first'\n                );\n\n                if (empty($count['nbr'])) {\n                    Database::insert($tblSessionUser, $sessionUser);\n                }\n            }\n        }\n\n        Database::query(\n            \"UPDATE $tblSessionCourse src\n            SET src.nbr_users = (\n                SELECT COUNT(1) FROM $tblSessionCourseUser srcru\n                WHERE\n                    srcru.session_id = $sessionId AND srcru.c_id = $courseId AND srcru.status <> \".Session::COACH.\"\n            )\n            WHERE src.session_id = $sessionId AND src.c_id = $courseId\"\n        );\n\n        if ($updateSession) {\n            Database::query(\n                \"UPDATE $tblSession s\n                SET s.nbr_users = (\n                    SELECT COUNT(1) FROM session_rel_user sru\n                    WHERE sru.session_id = $sessionId AND sru.relation_type <> \".Session::DRH.\"\n                )\n                WHERE s.id = $sessionId\"\n            );\n        }\n    }\n\n    public static function getCareersFromSession(int $sessionId): array\n    {\n        $extraFieldValueSession = new ExtraFieldValue('session');\n        $extraFieldValueCareer = new ExtraFieldValue('career');\n\n        $value = $extraFieldValueSession->get_values_by_handler_and_field_variable($sessionId, 'careerid');\n        $careers = [];\n        if (isset($value['value']) && !empty($value['value'])) {\n            $careerList = str_replace(['[', ']'], '', $value['value']);\n            $careerList = explode(',', $careerList);\n            $careerManager = new Career();\n            foreach ($careerList as $career) {\n                $careerIdValue = $extraFieldValueCareer->get_item_id_from_field_variable_and_field_value(\n                    'external_career_id',\n                    $career\n                );\n                if (isset($careerIdValue['item_id']) && !empty($careerIdValue['item_id'])) {\n                    $finalCareerId = $careerIdValue['item_id'];\n                    $careerInfo = $careerManager->get($finalCareerId);\n                    if (!empty($careerInfo)) {\n                        $careers[] = $careerInfo;\n                    }\n                }\n            }\n        }\n\n        return $careers;\n    }\n\n    public static function getCareerDiagramPerSessionList($sessionList, $userId)\n    {\n        if (empty($sessionList) || empty($userId)) {\n            return '';\n        }\n\n        $userId = (int) $userId;\n        $careersAdded = [];\n        $careerModel = new Career();\n        $frames = '';\n        foreach ($sessionList as $sessionId) {\n            $visibility = api_get_session_visibility($sessionId, null, false, $userId);\n            if (SESSION_AVAILABLE === $visibility) {\n                $careerList = self::getCareersFromSession($sessionId);\n                if (empty($careerList)) {\n                    continue;\n                }\n                foreach ($careerList as $career) {\n                    $careerId = $careerIdToShow = $career['id'];\n                    if (api_get_configuration_value('use_career_external_id_as_identifier_in_diagrams')) {\n                        $careerIdToShow = $careerModel->getCareerIdFromInternalToExternal($careerId);\n                    }\n\n                    if (!in_array($careerId, $careersAdded)) {\n                        $careersAdded[] = $careerId;\n                        $careerUrl = api_get_path(WEB_CODE_PATH).'user/career_diagram.php?iframe=1&career_id='.$careerIdToShow.'&user_id='.$userId;\n                        $frames .= '\n                            <iframe\n                                onload=\"resizeIframe(this)\"\n                                style=\"width:100%;\"\n                                border=\"0\"\n                                frameborder=\"0\"\n                                scrolling=\"no\"\n                                src=\"'.$careerUrl.'\"\n                            ></iframe>';\n                    }\n                }\n            }\n        }\n\n        $content = '';\n        if (!empty($frames)) {\n            $content = Display::page_subheader(get_lang('OngoingTraining'));\n            $content .= '\n               <script>\n                resizeIframe = function(iFrame) {\n                    iFrame.height = iFrame.contentWindow.document.body.scrollHeight + 20;\n                }\n                </script>\n            ';\n            $content .= $frames;\n            $content .= Career::renderDiagramFooter();\n        }\n\n        return $content;\n    }\n\n    public static function importAgendaFromSessionModel(int $modelSessionId, int $sessionId, int $courseId)\n    {\n        $em = Database::getManager();\n        $repo = $em->getRepository('ChamiloCourseBundle:CCalendarEvent');\n\n        $courseInfo = api_get_course_info_by_id($courseId);\n        $session = api_get_session_entity($sessionId);\n        $modelSession = api_get_session_entity($modelSessionId);\n\n        $sessionDateDiff = $modelSession->getAccessStartDate()->diff($session->getAccessStartDate());\n\n        $events = $repo->findBy(\n            ['cId' => $courseId, 'sessionId' => $modelSessionId]\n        );\n\n        $agenda = new Agenda('course');\n        $agenda->set_course($courseInfo);\n        $agenda->setSessionId($sessionId);\n\n        foreach ($events as $event) {\n            $startDate = $event->getStartDate()->add($sessionDateDiff);\n            $endDate = $event->getEndDate()->add($sessionDateDiff);\n\n            $agenda->addEvent(\n                $startDate->format('Y-m-d H:i:s'),\n                $endDate->format('Y-m-d H:i:s'),\n                'false',\n                $event->getTitle(),\n                $event->getContent(),\n                ['GROUP:0'],\n                false,\n                null,\n                [],\n                [],\n                $event->getComment(),\n                $event->getColor()\n            );\n        }\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return bool\n     */\n    private static function allowed($id)\n    {\n        $sessionInfo = self::fetch($id);\n\n        if (empty($sessionInfo)) {\n            return false;\n        }\n\n        if (api_is_platform_admin()) {\n            return true;\n        }\n\n        $userId = api_get_user_id();\n\n        if (api_is_session_admin() &&\n            api_get_setting('allow_session_admins_to_manage_all_sessions') != 'true'\n        ) {\n            if ($sessionInfo['session_admin_id'] != $userId) {\n                return false;\n            }\n        }\n\n        if (api_is_teacher() &&\n            api_get_setting('allow_teachers_to_create_sessions') == 'true'\n        ) {\n            if ($sessionInfo['id_coach'] != $userId) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Add classes (by their names) to a session.\n     *\n     * @param int   $sessionId\n     * @param array $classesNames\n     * @param bool  $deleteClassSessions Optional. Empty the session list for the usergroup (class)\n     */\n    private static function addClassesByName($sessionId, $classesNames, $deleteClassSessions = true, ?string &$error_message = '')\n    {\n        if (!$classesNames) {\n            return;\n        }\n\n        $usergroup = new UserGroup();\n\n        foreach ($classesNames as $className) {\n            if (empty($className)) {\n                continue;\n            }\n\n            $classIdByName = $usergroup->getIdByName($className);\n\n            if (empty($classIdByName)) {\n                $error_message .= sprintf(get_lang('ClassNameXDoesntExists'), $className).'<br>';\n                continue;\n            }\n\n            $usergroup->subscribe_sessions_to_usergroup(\n                $usergroup->getIdByName($className),\n                [$sessionId],\n                $deleteClassSessions\n            );\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareCatSessionInfo($listA, $listB)\n    {\n        if ($listA['sessionName'] == $listB['sessionName']) {\n            return 0;\n        } elseif ($listA['sessionName'] > $listB['sessionName']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareBySessionName($listA, $listB)\n    {\n        if ('' == $listB['catSessionName']) {\n            return -1;\n        } elseif ('' == $listA['catSessionName']) {\n            return 1;\n        } elseif ($listA['catSessionName'] == $listB['catSessionName']) {\n            return 0;\n        } elseif ($listA['catSessionName'] > $listB['catSessionName']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareByUserCourseCat($listA, $listB)\n    {\n        if ($listA['courseInUserCategoryTitle'] == $listB['courseInUserCategoryTitle']) {\n            return 0;\n        } elseif ($listA['courseInUserCategoryTitle'] > $listB['courseInUserCategoryTitle']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * @param array $listA\n     * @param array $listB\n     *\n     * @return int\n     */\n    private static function compareByCourse($listA, $listB)\n    {\n        if ($listA['title'] == $listB['title']) {\n            return 0;\n        } elseif ($listA['title'] > $listB['title']) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}\n"], "filenames": ["main/inc/lib/sessionmanager.lib.php"], "buggy_code_start_loc": [3054], "buggy_code_end_loc": [3140], "fixing_code_start_loc": [3054], "fixing_code_end_loc": [3140], "type": "CWE-79", "message": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the session category management section.", "other": {"cve": {"id": "CVE-2023-37065", "sourceIdentifier": "cve@mitre.org", "published": "2023-07-07T17:15:10.097", "lastModified": "2023-07-13T17:26:18.693", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Chamilo 1.11.x up to 1.11.20 allows users with admin privilege account to insert XSS in the session category management section."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chamilo:chamilo:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.11.0", "versionEndIncluding": "1.11.20", "matchCriteriaId": "7C09DB8C-2B3F-4EE5-B478-546C468B1E04"}]}]}], "references": [{"url": "https://github.com/chamilo/chamilo-lms/commit/da61f287d2e508a5e940953b474051d0f21e91c0", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://support.chamilo.org/projects/1/wiki/Security_issues#Issue-118-2023-06-06-Low-impact-Low-risk-XSS-through-admin-account-session-category-management", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/chamilo/chamilo-lms/commit/da61f287d2e508a5e940953b474051d0f21e91c0"}}