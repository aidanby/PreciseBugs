{"buggy_code": ["# coding: utf-8\n\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.admin.views.decorators import staff_member_required\nfrom django.contrib.auth import load_backend, login\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.http import Http404\nfrom django.shortcuts import redirect\nfrom django.utils.html import escape\nfrom django.utils.translation import gettext_lazy as _\n\nfrom grappelli.settings import SWITCH_USER_ORIGINAL, SWITCH_USER_TARGET\n\ntry:\n    from django.contrib.auth import get_user_model\n    User = get_user_model()\nexcept ImportError:\n    from django.contrib.auth.models import User\n\n\n@staff_member_required\ndef switch_user(request, object_id):\n\n    # current/session user\n    current_user = request.user\n    session_user = request.session.get(\"original_user\", {\"id\": current_user.id, \"username\": current_user.get_username()})\n\n    # check redirect\n    redirect_url = request.GET.get(\"redirect\", None)\n    if redirect_url is None or not redirect_url.startswith(\"/\"):\n        raise Http404()\n\n    # check original_user\n    try:\n        original_user = User.objects.get(pk=session_user[\"id\"], is_staff=True)\n        if not SWITCH_USER_ORIGINAL(original_user):\n            messages.add_message(request, messages.ERROR, _(\"Permission denied.\"))\n            return redirect(request.GET.get(\"redirect\"))\n    except ObjectDoesNotExist:\n        msg = _('%(name)s object with primary key %(key)r does not exist.') % {'name': \"User\", 'key': escape(session_user[\"id\"])}\n        messages.add_message(request, messages.ERROR, msg)\n        return redirect(request.GET.get(\"redirect\"))\n\n    # check new user\n    try:\n        target_user = User.objects.get(pk=object_id, is_staff=True)\n        if target_user != original_user and not SWITCH_USER_TARGET(original_user, target_user):\n            messages.add_message(request, messages.ERROR, _(\"Permission denied.\"))\n            return redirect(request.GET.get(\"redirect\"))\n    except ObjectDoesNotExist:\n        msg = _('%(name)s object with primary key %(key)r does not exist.') % {'name': \"User\", 'key': escape(object_id)}\n        messages.add_message(request, messages.ERROR, msg)\n        return redirect(request.GET.get(\"redirect\"))\n\n    # find backend\n    if not hasattr(target_user, 'backend'):\n        for backend in settings.AUTHENTICATION_BACKENDS:\n            if target_user == load_backend(backend).get_user(target_user.pk):\n                target_user.backend = backend\n                break\n\n    # target user login, set original as session\n    if hasattr(target_user, 'backend'):\n        login(request, target_user)\n        if original_user.id != target_user.id:\n            request.session[\"original_user\"] = {\"id\": original_user.id, \"username\": original_user.get_username()}\n\n    return redirect(request.GET.get(\"redirect\"))\n"], "fixing_code": ["# coding: utf-8\n\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.admin.views.decorators import staff_member_required\nfrom django.contrib.auth import load_backend, login\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.http import Http404\nfrom django.shortcuts import redirect\nfrom django.utils.html import escape\nfrom django.utils.http import url_has_allowed_host_and_scheme\nfrom django.utils.translation import gettext_lazy as _\n\nfrom grappelli.settings import SWITCH_USER_ORIGINAL, SWITCH_USER_TARGET\n\ntry:\n    from django.contrib.auth import get_user_model\n    User = get_user_model()\nexcept ImportError:\n    from django.contrib.auth.models import User\n\n\n@staff_member_required\ndef switch_user(request, object_id):\n\n    # current/session user\n    current_user = request.user\n    session_user = request.session.get(\"original_user\", {\"id\": current_user.id, \"username\": current_user.get_username()})\n\n    # check redirect\n    redirect_url = request.GET.get(\"redirect\", None)\n    if redirect_url is None or not \\\n        url_has_allowed_host_and_scheme(\n            url=redirect_url,\n            allowed_hosts={request.get_host()},\n            require_https=request.is_secure(),\n        ):\n        raise Http404()\n        \n    # check original_user\n    try:\n        original_user = User.objects.get(pk=session_user[\"id\"], is_staff=True)\n        if not SWITCH_USER_ORIGINAL(original_user):\n            messages.add_message(request, messages.ERROR, _(\"Permission denied.\"))\n            return redirect(redirect_url)\n    except ObjectDoesNotExist:\n        msg = _('%(name)s object with primary key %(key)r does not exist.') % {'name': \"User\", 'key': escape(session_user[\"id\"])}\n        messages.add_message(request, messages.ERROR, msg)\n        return redirect(redirect_url)\n\n    # check new user\n    try:\n        target_user = User.objects.get(pk=object_id, is_staff=True)\n        if target_user != original_user and not SWITCH_USER_TARGET(original_user, target_user):\n            messages.add_message(request, messages.ERROR, _(\"Permission denied.\"))\n            return redirect(redirect_url)\n    except ObjectDoesNotExist:\n        msg = _('%(name)s object with primary key %(key)r does not exist.') % {'name': \"User\", 'key': escape(object_id)}\n        messages.add_message(request, messages.ERROR, msg)\n        return redirect(redirect_url)\n\n    # find backend\n    if not hasattr(target_user, 'backend'):\n        for backend in settings.AUTHENTICATION_BACKENDS:\n            if target_user == load_backend(backend).get_user(target_user.pk):\n                target_user.backend = backend\n                break\n\n    # target user login, set original as session\n    if hasattr(target_user, 'backend'):\n        login(request, target_user)\n        if original_user.id != target_user.id:\n            request.session[\"original_user\"] = {\"id\": original_user.id, \"username\": original_user.get_username()}\n\n    return redirect(redirect_url)\n"], "filenames": ["grappelli/views/switch.py"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [70], "fixing_code_start_loc": [11], "fixing_code_end_loc": [76], "type": "CWE-601", "message": "views/switch.py in django-grappelli (aka Django Grappelli) before 2.15.2 attempts to prevent external redirection with startswith(\"/\") but this does not consider a protocol-relative URL (e.g., //example.com) attack.", "other": {"cve": {"id": "CVE-2021-46898", "sourceIdentifier": "cve@mitre.org", "published": "2023-10-22T19:15:08.297", "lastModified": "2023-10-30T15:56:43.517", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "views/switch.py in django-grappelli (aka Django Grappelli) before 2.15.2 attempts to prevent external redirection with startswith(\"/\") but this does not consider a protocol-relative URL (e.g., //example.com) attack."}, {"lang": "es", "value": "views/switch.py en django-grappelli (tambi\u00e9n conocido como Django Grappelli) anterior a 2.15.2 intenta evitar la redirecci\u00f3n externa con startwith(\"/\") pero esto no considera un ataque de URL relativo al protocolo (por ejemplo, //example.com) ."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vonautomatisch:django_grappelli:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.15.2", "matchCriteriaId": "01233523-51DB-4BA3-8508-64ED220ACB74"}]}]}], "references": [{"url": "https://github.com/sehmaschine/django-grappelli/commit/4ca94bcda0fa2720594506853d85e00c8212968f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/sehmaschine/django-grappelli/compare/2.15.1...2.15.2", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://github.com/sehmaschine/django-grappelli/issues/975", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking"]}, {"url": "https://github.com/sehmaschine/django-grappelli/pull/976", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/sehmaschine/django-grappelli/commit/4ca94bcda0fa2720594506853d85e00c8212968f"}}