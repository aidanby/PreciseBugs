{"buggy_code": ["package business.impl;\n\nimport business.ReviewService;\nimport models.Review;\nimport play.db.ebean.Model;\n\nimport java.util.List;\n\n/**\n * Created by Dani on 13/3/15.\n */\npublic class ReviewServiceImpl implements ReviewService {\n\n    private static Model.Finder<Integer, Review> find = new Model.Finder<>(\n            Integer.class, Review.class\n    );\n\n    @Override\n    public List<Review> getByMovieId(int movieId) {\n        return find.where().eq(\"movieId\", movieId).findList();\n    }\n\n    @Override\n    public Review getByMovieIdAndUsername(int movieId, String username) {\n        return find.where(\"movieId = \" + movieId + \" and username = '\" + username + \"'\").findUnique();\n    }\n\n    @Override\n    public Review rateMovie(String username, int movieId, String comment, double rating) {\n        Review review = new Review(username, movieId, comment, rating);\n        review.save();\n        return review;\n    }\n}\n", "package controllers;\n\nimport filters.LoginRequiredAction;\nimport infrastructure.Factories;\nimport models.Genre;\nimport models.Movie;\nimport models.Review;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport play.data.DynamicForm;\nimport play.data.Form;\nimport play.libs.Json;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.With;\nimport views.html.webplayer;\n\nimport java.util.List;\n\n/**\n * Created by Dani on 14/3/15.\n */\n@With(LoginRequiredAction.class)\n//@With({LoginRequiredAction.class, SubscriptionRequiredAction.class})\npublic class WebplayerController extends Controller {\n\n    public static Result showWebplayer() {\n        List<Movie> randomMovies = Factories.businessFactory.getMovieService().getRandom(6);\n        List<Movie> allMovies = Factories.businessFactory.getMovieService().getAll();\n        List<Genre> genres = Factories.businessFactory.getGenreService().getAll();\n        return ok(webplayer.render(randomMovies, allMovies, genres));\n    }\n\n    public static Result findGenres() {\n        List<Genre> genres = Factories.businessFactory.getGenreService().getAll();\n        String json = Factories.businessFactory.getGenreService().genresToJson(genres);\n        return ok(json);\n    }\n\n    public static Result getGenre(String name) {\n        Genre genre = Factories.businessFactory.getGenreService().get(name);\n        return ok(Json.toJson(genre).toString());\n    }\n\n    public static Result getMoviesByGenre(String name) {\n        List<Movie> movies = Factories.businessFactory.getGenreService().getMovies(name);\n        String json = Factories.businessFactory.getMovieService().moviesToJson(movies);\n        return ok(json);\n    }\n\n    public static Result findMovies() {\n        String search = StringEscapeUtils.escapeHtml4(request().getQueryString(\"search\"));\n        List<Movie> movies;\n        if (search == null) {\n            movies = Factories.businessFactory.getMovieService().getAll();\n        } else {\n            movies = Factories.businessFactory.getMovieService().search(search);\n        }\n        String json = Factories.businessFactory.getMovieService().moviesToJson(movies);\n        return ok(json);\n    }\n\n    public static Result getMovie(int id) {\n        Movie movie = Factories.businessFactory.getMovieService().get(id);\n        String username = session(Application.USERNAME_KEY);\n        Review review = Factories.businessFactory.getReviewService().getByMovieIdAndUsername(movie.getId(), username);\n        if (review != null)\n            return ok(Factories.businessFactory.getMovieService().movieWithReviewToJson(movie, review));\n        else\n            return ok(Factories.businessFactory.getMovieService().movieToJson(movie));\n    }\n\n    public static Result rateMovie(int id) {\n        DynamicForm requestData = Form.form().bindFromRequest();\n        String comment = StringEscapeUtils.escapeHtml4(requestData.get(\"comment\"));\n        String ratingStr = requestData.get(\"rating\");\n        double rating = ratingStr == null ? 0 : Double.parseDouble(ratingStr);\n        String username = session(Application.USERNAME_KEY);\n        Review review = Factories.businessFactory.getReviewService().rateMovie(username, id, comment, rating);\n        return ok(Json.toJson(review).toString());\n\n    }\n}\n"], "fixing_code": ["package business.impl;\n\nimport business.ReviewService;\nimport com.avaje.ebean.Expr;\nimport models.Review;\nimport play.db.ebean.Model;\n\nimport java.util.List;\n\n/**\n * Created by Dani on 13/3/15.\n */\npublic class ReviewServiceImpl implements ReviewService {\n\n    private static Model.Finder<Integer, Review> find = new Model.Finder<>(\n            Integer.class, Review.class\n    );\n\n    @Override\n    public List<Review> getByMovieId(int movieId) {\n        return find.where().eq(\"movieId\", movieId).findList();\n    }\n\n    @Override\n    public Review getByMovieIdAndUsername(int movieId, String username) {\n        return find.where().and(Expr.eq(\"movieId\", movieId), Expr.eq(\"username\", username)).findUnique();\n    }\n\n    @Override\n    public Review rateMovie(String username, int movieId, String comment, double rating) {\n        Review review = new Review(username, movieId, comment, rating);\n        review.save();\n        return review;\n    }\n}\n", "package controllers;\n\nimport filters.LoginRequiredAction;\nimport filters.SubscriptionRequiredAction;\nimport infrastructure.Factories;\nimport models.Genre;\nimport models.Movie;\nimport models.Review;\nimport org.apache.commons.lang3.StringEscapeUtils;\nimport play.data.DynamicForm;\nimport play.data.Form;\nimport play.libs.Json;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.With;\nimport views.html.webplayer;\n\nimport java.util.List;\n\n/**\n * Created by Dani on 14/3/15.\n */\n@With({LoginRequiredAction.class, SubscriptionRequiredAction.class})\npublic class WebplayerController extends Controller {\n\n    public static Result showWebplayer() {\n        List<Movie> randomMovies = Factories.businessFactory.getMovieService().getRandom(6);\n        List<Movie> allMovies = Factories.businessFactory.getMovieService().getAll();\n        List<Genre> genres = Factories.businessFactory.getGenreService().getAll();\n        return ok(webplayer.render(randomMovies, allMovies, genres));\n    }\n\n    public static Result findGenres() {\n        List<Genre> genres = Factories.businessFactory.getGenreService().getAll();\n        String json = Factories.businessFactory.getGenreService().genresToJson(genres);\n        return ok(json);\n    }\n\n    public static Result getGenre(String name) {\n        Genre genre = Factories.businessFactory.getGenreService().get(name);\n        return ok(Json.toJson(genre).toString());\n    }\n\n    public static Result getMoviesByGenre(String name) {\n        List<Movie> movies = Factories.businessFactory.getGenreService().getMovies(name);\n        String json = Factories.businessFactory.getMovieService().moviesToJson(movies);\n        return ok(json);\n    }\n\n    public static Result findMovies() {\n        String search = StringEscapeUtils.escapeHtml4(request().getQueryString(\"search\"));\n        List<Movie> movies;\n        if (search == null) {\n            movies = Factories.businessFactory.getMovieService().getAll();\n        } else {\n            movies = Factories.businessFactory.getMovieService().search(search);\n        }\n        String json = Factories.businessFactory.getMovieService().moviesToJson(movies);\n        return ok(json);\n    }\n\n    public static Result getMovie(int id) {\n        Movie movie = Factories.businessFactory.getMovieService().get(id);\n        String username = session(Application.USERNAME_KEY);\n        Review review = Factories.businessFactory.getReviewService().getByMovieIdAndUsername(movie.getId(), username);\n        if (review != null)\n            return ok(Factories.businessFactory.getMovieService().movieWithReviewToJson(movie, review));\n        else\n            return ok(Factories.businessFactory.getMovieService().movieToJson(movie));\n    }\n\n    public static Result rateMovie(int id) {\n        DynamicForm requestData = Form.form().bindFromRequest();\n        String comment = StringEscapeUtils.escapeHtml4(requestData.get(\"comment\"));\n        String ratingStr = requestData.get(\"rating\");\n        double rating = ratingStr == null ? 0 : Double.parseDouble(ratingStr);\n        String username = session(Application.USERNAME_KEY);\n        Review review = Factories.businessFactory.getReviewService().rateMovie(username, id, comment, rating);\n        return ok(Json.toJson(review).toString());\n\n    }\n}\n"], "filenames": ["app/business/impl/ReviewServiceImpl.java", "app/controllers/WebplayerController.java"], "buggy_code_start_loc": [3, 3], "buggy_code_end_loc": [26, 24], "fixing_code_start_loc": [4, 4], "fixing_code_end_loc": [27, 24], "type": "CWE-89", "message": "A vulnerability classified as critical was found in danynab movify-j. This vulnerability affects the function getByMovieId of the file app/business/impl/ReviewServiceImpl.java. The manipulation of the argument movieId/username leads to sql injection. The name of the patch is c3085e01936a4d7eff1eda3093f25d56cc4d2ec5. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218476.", "other": {"cve": {"id": "CVE-2015-10068", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-18T08:15:09.660", "lastModified": "2023-01-25T16:57:55.447", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical was found in danynab movify-j. This vulnerability affects the function getByMovieId of the file app/business/impl/ReviewServiceImpl.java. The manipulation of the argument movieId/username leads to sql injection. The name of the patch is c3085e01936a4d7eff1eda3093f25d56cc4d2ec5. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-218476."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:movify-j_project:movify-j:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-03-14", "matchCriteriaId": "FDDAA6C8-745A-4BCC-B4A6-A865BE5B91CF"}]}]}], "references": [{"url": "https://github.com/danynab/movify-j/commit/c3085e01936a4d7eff1eda3093f25d56cc4d2ec5", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218476", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218476", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/danynab/movify-j/commit/c3085e01936a4d7eff1eda3093f25d56cc4d2ec5"}}