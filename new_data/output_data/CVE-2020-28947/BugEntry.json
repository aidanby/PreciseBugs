{"buggy_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass TemplateElementsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 50,\n            'order' => array(\n                    'TemplateElement.position' => 'asc'\n            )\n    );\n\n    public function index($id)\n    {\n\n        //check permissions\n        $template = $this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), false);\n        if (!$this->_isSiteAdmin() && !$template) {\n            throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to see it.');\n        }\n\n        $templateElements = $this->TemplateElement->find('all', array(\n            'conditions' => array(\n                'template_id' => $id,\n            ),\n            'contain' => array(\n                'TemplateElementAttribute',\n                'TemplateElementText',\n                'TemplateElementFile'\n            ),\n            'order' => array('TemplateElement.position ASC')\n        ));\n        $this->loadModel('Attribute');\n        $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n        $this->set('id', $id);\n        $this->layout = 'ajaxTemplate';\n        $this->set('elements', $templateElements);\n        $mayModify = false;\n        if ($this->_isSiteAdmin() || $template['Template']['org'] == $this->Auth->user('Organisation')['name']) {\n            $mayModify = true;\n        }\n        $this->set('mayModify', $mayModify);\n        $this->render('ajax/ajaxIndex');\n    }\n\n    public function templateElementAddChoices($id)\n    {\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        $this->set('id', $id);\n        $this->layout = 'ajax';\n        $this->render('ajax/template_element_add_choices');\n    }\n\n    public function add($type, $id)\n    {\n        $ModelType = 'TemplateElement' . ucfirst($type);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200, 'type' => 'json'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        if ($this->request->is('get')) {\n            $this->set('id', $id);\n            if ($type == 'attribute') {\n                $this->loadModel('Attribute');\n                // combobox for types\n                $types = array_keys($this->Attribute->typeDefinitions);\n                $types = $this->_arrayToValuesIndexArray($types);\n                $this->set('types', $types);\n                // combobox for categories\n                $categories = array_keys($this->Attribute->categoryDefinitions);\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categories', compact('categories'));\n                $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n                $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n                $categoryDefinitions = $this->Attribute->categoryDefinitions;\n                foreach ($categoryDefinitions as $k => $catDef) {\n                    foreach ($catDef['types'] as $l => $t) {\n                        if ($t == 'malware-sample' || $t == 'attachment') {\n                            unset($categoryDefinitions[$k]['types'][$l]);\n                        }\n                    }\n                }\n                $this->set('categoryDefinitions', $categoryDefinitions);\n                $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n                $this->set('typeGroupCategoryMapping', $this->Attribute->typeGroupCategoryMapping);\n            } elseif ($type == 'file') {\n                $this->loadModel('Attribute');\n                $categoryArray = array();\n                $categories = array();\n                foreach ($this->Attribute->categoryDefinitions as $k => $catDef) {\n                    $temp = array();\n                    if (in_array('malware-sample', $catDef['types'])) {\n                        $temp[] = 'malware-sample';\n                    }\n                    if (in_array('attachment', $catDef['types'])) {\n                        $temp[] = 'attachment';\n                    }\n                    if (!empty($temp)) {\n                        $categoryArray[$k] = $temp;\n                        $categories[] = $k;\n                    }\n                }\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categoryArray', $categoryArray);\n                $this->set('categories', $categories);\n            }\n            $this->layout = 'ajaxTemplate';\n            $this->render('ajax/template_element_add_' . $type);\n        } elseif ($this->request->is('post')) {\n            $pos = $this->TemplateElement->lastPosition($id);\n            $this->TemplateElement->create();\n            $templateElement = array(\n                'TemplateElement' => array(\n                    'template_id' => $id,\n                    'position' => ++$pos,\n                    'element_definition' => $type\n                ),\n            );\n            $errorMessage = 'The element could not be added.';\n            if ($this->TemplateElement->save($templateElement)) {\n                $this->request->data[$ModelType]['template_element_id'] = $this->TemplateElement->id;\n                $this->TemplateElement->$ModelType->create();\n                if ($this->TemplateElement->$ModelType->save($this->request->data)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element successfully added to template.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    $this->TemplateElement->delete($this->TemplateElement->id);\n                    $errorMessage = $this->TemplateElement->$ModelType->validationErrors;\n                }\n            } else {\n                $errorMessage = $this->TemplateElement->validationErrors;\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $errorMessage)), 'status' => 200, 'type' => 'json'));\n        }\n    }\n\n    public function edit($type, $id)\n    {\n        $ModelType = 'TemplateElement' . ucfirst($type);\n        $templateElement = $this->TemplateElement->find('first', array(\n            'conditions' => array('TemplateElement.id' => $id),\n            'contain' => array('Template', $ModelType)\n        ));\n        $this->set('template_id', $templateElement['Template']['id']);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200, 'type' => 'json'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        if ($this->request->is('get')) {\n            $this->set('id', $id);\n            $this->request->data[$ModelType] = $templateElement[$ModelType][0];\n            if ($type == 'attribute') {\n                $this->loadModel('Attribute');\n                // combobox for types\n                $types = array_keys($this->Attribute->typeDefinitions);\n                $types = $this->_arrayToValuesIndexArray($types);\n                $this->set('types', $types);\n                // combobox for categories\n                $categories = array_keys($this->Attribute->categoryDefinitions);\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categories', compact('categories'));\n                $categoryDefinitions = $this->Attribute->categoryDefinitions;\n                foreach ($categoryDefinitions as $k => $catDef) {\n                    foreach ($catDef['types'] as $l => $t) {\n                        if ($t == 'malware-sample' || $t == 'attachment') {\n                            unset($categoryDefinitions[$k]['types'][$l]);\n                        }\n                    }\n                }\n                if ($this->request->data['TemplateElementAttribute']['complex']) {\n                    $this->set('initialTypes', $this->_arrayToValuesIndexArray($this->Attribute->typeGroupCategoryMapping[$templateElement['TemplateElementAttribute'][0]['category']]));\n                } else {\n                    $this->set('initialTypes', $this->_arrayToValuesIndexArray($categoryDefinitions[$templateElement['TemplateElementAttribute'][0]['category']]['types']));\n                }\n                $this->set('initialValues', $templateElement['TemplateElementAttribute'][0]);\n                $this->set('categoryDefinitions', $categoryDefinitions);\n                $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n                $this->set('typeGroupCategoryMapping', $this->Attribute->typeGroupCategoryMapping);\n            } elseif ($type == 'file') {\n                $this->loadModel('Attribute');\n                $categoryArray = array();\n                $categories = array();\n                foreach ($this->Attribute->categoryDefinitions as $k => $catDef) {\n                    $temp = array();\n                    if (in_array('malware-sample', $catDef['types'])) {\n                        $temp[] = 'malware-sample';\n                    }\n                    if (in_array('attachment', $catDef['types'])) {\n                        $temp[] = 'attachment';\n                    }\n                    if (!empty($temp)) {\n                        $categoryArray[$k] = $temp;\n                        $categories[] = $k;\n                    }\n                }\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categoryArray', $categoryArray);\n                $this->set('categories', $categories);\n            }\n            $this->layout = 'ajaxTemplate';\n            $this->render('ajax/template_element_edit_' . $type);\n        } elseif ($this->request->is('post') || $this->request->is('put')) {\n            $this->request->data[$ModelType]['id'] = $templateElement[$ModelType][0]['id'];\n            $this->request->data[$ModelType]['template_element_id'] = $templateElement[$ModelType][0]['template_element_id'];\n            if ($this->TemplateElement->$ModelType->save($this->request->data)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element successfully edited.')), 'status' => 200, 'type' => 'json'));\n            } else {\n                $this->TemplateElement->delete($this->TemplateElement->id);\n                $errorMessage = $this->TemplateElement->$ModelType->validationErrors;\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'The element could not be edited.')), 'status' => 200, 'type' => 'json'));\n        }\n    }\n\n    public function delete($id)\n    {\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        $this->TemplateElement->read(null, $id);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($this->TemplateElement->data['Template']['id'], $this->Auth->user(), true)) {\n            throw new NotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isSiteAdmin() || $this->Auth->user('Organisation')['name'] == $this->TemplateElement->data['Template']['org']) {\n                // check permissions\n                if (empty($this->TemplateElement->data)) {\n                    throw new NotFoundException();\n                }\n                $type = 'TemplateElement' . ucfirst($this->TemplateElement->data['TemplateElement']['element_definition']);\n                if ($this->TemplateElement->$type->delete($this->TemplateElement->data[$type][0]['id'])) {\n                    $this->TemplateElement->delete($this->TemplateElement->data['TemplateElement']['id']);\n                    $this->TemplateElement->Template->trimElementPositions($this->TemplateElement->data['TemplateElement']['template_id']);\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element deleted.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Couldn\\'t delete the Element')), 'status' => 200, 'type' => 'json'));\n                }\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'You don\\'t have permission to do that.')), 'status' => 200, 'type' => 'json'));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('template_id', $this->TemplateElement->data['Template']['id']);\n            $this->render('ajax/templateElementConfirmationForm');\n        }\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\nApp::uses('RandomTool', 'Tools');\n\nclass Template extends AppModel\n{\n    public $actsAs = array('Containable');\n\n    public $hasMany = array(\n        'TemplateTag' => array(\n            'dependent' => true,\n        ),\n        'TemplateElement' => array(\n            'order' => 'TemplateElement.position',\n            'dependent' => true,\n        )\n    );\n\n    public function trimElementPositions($id)\n    {\n        // permissions\n        $this->id = $id;\n        if (!$this->exists()) {\n            throw new NotFoundException(__('Invalid template.'));\n        }\n\n        $template = $this->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'contain' => array(\n                        'TemplateElement' => array('id', 'template_id', 'position'),\n                ),\n                'fields' => array('id', 'org'),\n        ));\n        foreach ($template['TemplateElement'] as $k => &$element) {\n            $element['position'] = $k+1;\n        }\n        $this->saveAll($template);\n    }\n\n    public function checkAuthorisation($id, $user, $write)\n    {\n        // fetch the bare template\n        $template = $this->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1,\n        ));\n\n        // if not found return false\n        if (empty($template)) {\n            return false;\n        }\n\n        //if the user is a site admin, return the template withoug question\n        if ($user['Role']['perm_site_admin']) {\n            return $template;\n        }\n\n        if ($write) {\n            // if write access is requested, check if template belongs to user's org and whether the user is authorised to edit templates\n            if ($user['Organisation']['name'] == $template['Template']['org'] && $user['Role']['perm_template']) {\n                return $template;\n            }\n            return false;\n        } else {\n\n            // if read access is requested, check if the template belongs to the user's org or alternatively whether the template is shareable\n            if ($user['Organisation']['name'] == $template['Template']['org'] || $template['Template']['share']) {\n                return $template;\n            }\n            return false;\n        }\n    }\n\n    public function generateRandomFileName()\n    {\n        return (new RandomTool())->random_str(false, 12);\n    }\n}\n", "<div id=\"ajaxTemplateElementsIndex\">\n    <h2><?php echo __('Template Elements');?></h2>\n    <ul <?php if ($mayModify): ?> id=\"sortable\" <?php endif; ?> style=\"list-style:none; margin:0px;\">\n                <?php\n                foreach ($elements as $k => $element):\n                    echo $this->element('templateElements/templateRow' . ucfirst($element['TemplateElement']['element_definition']), array('element' => $element, 'element_id' => $element['TemplateElement']['id']));\n                endforeach;\n            ?>\n    </ul>\n    <?php if ($mayModify): ?>\n    <div id=\"AddTemplateElementDiv\" role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Add a new template element');?>\" title=\"<?php echo __('Add a new template element');?>\" class=\"addTemplateElement useCursorPointer\" onClick=\"templateAddElementClicked(<?php echo $id; ?>);\">+</div>\n    <?php endif; ?>\n</div>\n<script type=\"text/javascript\">\n$(function() {\n    //Return a helper with preserved width of cells\n    var fixHelper = function(e, ui) {\n        ui.children().each(function() {\n            $(this).width($(this).width());\n        });\n        return ui;\n    };\n\n    $(\"#sortable\").sortable({\n        helper: fixHelper,\n        update: function () {\n            var order = [];\n\n            $(\"#sortable\").children().each(function (i) {\n                var li = $(this);\n                order[i] = li.attr(\"id\");\n            });\n\n            saveElementSorting(JSON.stringify(order));\n        }\n    }).disableSelection();\n});\n</script>\n"], "fixing_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass TemplateElementsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');\n\n    public $paginate = array(\n            'limit' => 50,\n            'order' => array(\n                    'TemplateElement.position' => 'asc'\n            )\n    );\n\n    public function index($id)\n    {\n        if (!is_numeric($id)) {\n            throw new MethodNotAllowedException(__('No template with the provided ID exists, or you are not authorised to see it.'));\n        }\n        //check permissions\n        $template = $this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), false);\n        if (!$this->_isSiteAdmin() && !$template) {\n            throw new MethodNotAllowedException(__('No template with the provided ID exists, or you are not authorised to see it.'));\n        }\n\n        $templateElements = $this->TemplateElement->find('all', array(\n            'conditions' => array(\n                'template_id' => $id,\n            ),\n            'contain' => array(\n                'TemplateElementAttribute',\n                'TemplateElementText',\n                'TemplateElementFile'\n            ),\n            'order' => array('TemplateElement.position ASC')\n        ));\n        $this->loadModel('Attribute');\n        $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n        $this->set('id', $id);\n        $this->layout = 'ajaxTemplate';\n        $this->set('elements', $templateElements);\n        $mayModify = false;\n        if ($this->_isSiteAdmin() || $template['Template']['org'] == $this->Auth->user('Organisation')['name']) {\n            $mayModify = true;\n        }\n        $this->set('mayModify', $mayModify);\n        $this->render('ajax/ajaxIndex');\n    }\n\n    public function templateElementAddChoices($id)\n    {\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        $this->set('id', $id);\n        $this->layout = 'ajax';\n        $this->render('ajax/template_element_add_choices');\n    }\n\n    public function add($type, $id)\n    {\n        $ModelType = 'TemplateElement' . ucfirst($type);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200, 'type' => 'json'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        if ($this->request->is('get')) {\n            $this->set('id', $id);\n            if ($type == 'attribute') {\n                $this->loadModel('Attribute');\n                // combobox for types\n                $types = array_keys($this->Attribute->typeDefinitions);\n                $types = $this->_arrayToValuesIndexArray($types);\n                $this->set('types', $types);\n                // combobox for categories\n                $categories = array_keys($this->Attribute->categoryDefinitions);\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categories', compact('categories'));\n                $this->set('attrDescriptions', $this->Attribute->fieldDescriptions);\n                $this->set('typeDefinitions', $this->Attribute->typeDefinitions);\n                $categoryDefinitions = $this->Attribute->categoryDefinitions;\n                foreach ($categoryDefinitions as $k => $catDef) {\n                    foreach ($catDef['types'] as $l => $t) {\n                        if ($t == 'malware-sample' || $t == 'attachment') {\n                            unset($categoryDefinitions[$k]['types'][$l]);\n                        }\n                    }\n                }\n                $this->set('categoryDefinitions', $categoryDefinitions);\n                $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n                $this->set('typeGroupCategoryMapping', $this->Attribute->typeGroupCategoryMapping);\n            } elseif ($type == 'file') {\n                $this->loadModel('Attribute');\n                $categoryArray = array();\n                $categories = array();\n                foreach ($this->Attribute->categoryDefinitions as $k => $catDef) {\n                    $temp = array();\n                    if (in_array('malware-sample', $catDef['types'])) {\n                        $temp[] = 'malware-sample';\n                    }\n                    if (in_array('attachment', $catDef['types'])) {\n                        $temp[] = 'attachment';\n                    }\n                    if (!empty($temp)) {\n                        $categoryArray[$k] = $temp;\n                        $categories[] = $k;\n                    }\n                }\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categoryArray', $categoryArray);\n                $this->set('categories', $categories);\n            }\n            $this->layout = 'ajaxTemplate';\n            $this->render('ajax/template_element_add_' . $type);\n        } elseif ($this->request->is('post')) {\n            $pos = $this->TemplateElement->lastPosition($id);\n            $this->TemplateElement->create();\n            $templateElement = array(\n                'TemplateElement' => array(\n                    'template_id' => $id,\n                    'position' => ++$pos,\n                    'element_definition' => $type\n                ),\n            );\n            $errorMessage = 'The element could not be added.';\n            if ($this->TemplateElement->save($templateElement)) {\n                $this->request->data[$ModelType]['template_element_id'] = $this->TemplateElement->id;\n                $this->TemplateElement->$ModelType->create();\n                if ($this->TemplateElement->$ModelType->save($this->request->data)) {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element successfully added to template.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    $this->TemplateElement->delete($this->TemplateElement->id);\n                    $errorMessage = $this->TemplateElement->$ModelType->validationErrors;\n                }\n            } else {\n                $errorMessage = $this->TemplateElement->validationErrors;\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => $errorMessage)), 'status' => 200, 'type' => 'json'));\n        }\n    }\n\n    public function edit($type, $id)\n    {\n        $ModelType = 'TemplateElement' . ucfirst($type);\n        $templateElement = $this->TemplateElement->find('first', array(\n            'conditions' => array('TemplateElement.id' => $id),\n            'contain' => array('Template', $ModelType)\n        ));\n        $this->set('template_id', $templateElement['Template']['id']);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($id, $this->Auth->user(), true)) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200, 'type' => 'json'));\n        }\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        if ($this->request->is('get')) {\n            $this->set('id', $id);\n            $this->request->data[$ModelType] = $templateElement[$ModelType][0];\n            if ($type == 'attribute') {\n                $this->loadModel('Attribute');\n                // combobox for types\n                $types = array_keys($this->Attribute->typeDefinitions);\n                $types = $this->_arrayToValuesIndexArray($types);\n                $this->set('types', $types);\n                // combobox for categories\n                $categories = array_keys($this->Attribute->categoryDefinitions);\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categories', compact('categories'));\n                $categoryDefinitions = $this->Attribute->categoryDefinitions;\n                foreach ($categoryDefinitions as $k => $catDef) {\n                    foreach ($catDef['types'] as $l => $t) {\n                        if ($t == 'malware-sample' || $t == 'attachment') {\n                            unset($categoryDefinitions[$k]['types'][$l]);\n                        }\n                    }\n                }\n                if ($this->request->data['TemplateElementAttribute']['complex']) {\n                    $this->set('initialTypes', $this->_arrayToValuesIndexArray($this->Attribute->typeGroupCategoryMapping[$templateElement['TemplateElementAttribute'][0]['category']]));\n                } else {\n                    $this->set('initialTypes', $this->_arrayToValuesIndexArray($categoryDefinitions[$templateElement['TemplateElementAttribute'][0]['category']]['types']));\n                }\n                $this->set('initialValues', $templateElement['TemplateElementAttribute'][0]);\n                $this->set('categoryDefinitions', $categoryDefinitions);\n                $this->set('validTypeGroups', $this->Attribute->validTypeGroups);\n                $this->set('typeGroupCategoryMapping', $this->Attribute->typeGroupCategoryMapping);\n            } elseif ($type == 'file') {\n                $this->loadModel('Attribute');\n                $categoryArray = array();\n                $categories = array();\n                foreach ($this->Attribute->categoryDefinitions as $k => $catDef) {\n                    $temp = array();\n                    if (in_array('malware-sample', $catDef['types'])) {\n                        $temp[] = 'malware-sample';\n                    }\n                    if (in_array('attachment', $catDef['types'])) {\n                        $temp[] = 'attachment';\n                    }\n                    if (!empty($temp)) {\n                        $categoryArray[$k] = $temp;\n                        $categories[] = $k;\n                    }\n                }\n                $categories = $this->_arrayToValuesIndexArray($categories);\n                $this->set('categoryArray', $categoryArray);\n                $this->set('categories', $categories);\n            }\n            $this->layout = 'ajaxTemplate';\n            $this->render('ajax/template_element_edit_' . $type);\n        } elseif ($this->request->is('post') || $this->request->is('put')) {\n            $this->request->data[$ModelType]['id'] = $templateElement[$ModelType][0]['id'];\n            $this->request->data[$ModelType]['template_element_id'] = $templateElement[$ModelType][0]['template_element_id'];\n            if ($this->TemplateElement->$ModelType->save($this->request->data)) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element successfully edited.')), 'status' => 200, 'type' => 'json'));\n            } else {\n                $this->TemplateElement->delete($this->TemplateElement->id);\n                $errorMessage = $this->TemplateElement->$ModelType->validationErrors;\n            }\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'The element could not be edited.')), 'status' => 200, 'type' => 'json'));\n        }\n    }\n\n    public function delete($id)\n    {\n        if (!$this->request->is('ajax')) {\n            throw new MethodNotAllowedException('This action is for ajax requests only.');\n        }\n        $this->TemplateElement->read(null, $id);\n        if (!$this->_isSiteAdmin() && !$this->TemplateElement->Template->checkAuthorisation($this->TemplateElement->data['Template']['id'], $this->Auth->user(), true)) {\n            throw new NotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isSiteAdmin() || $this->Auth->user('Organisation')['name'] == $this->TemplateElement->data['Template']['org']) {\n                // check permissions\n                if (empty($this->TemplateElement->data)) {\n                    throw new NotFoundException();\n                }\n                $type = 'TemplateElement' . ucfirst($this->TemplateElement->data['TemplateElement']['element_definition']);\n                if ($this->TemplateElement->$type->delete($this->TemplateElement->data[$type][0]['id'])) {\n                    $this->TemplateElement->delete($this->TemplateElement->data['TemplateElement']['id']);\n                    $this->TemplateElement->Template->trimElementPositions($this->TemplateElement->data['TemplateElement']['template_id']);\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Element deleted.')), 'status' => 200, 'type' => 'json'));\n                } else {\n                    return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'Couldn\\'t delete the Element')), 'status' => 200, 'type' => 'json'));\n                }\n            } else {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'errors' => 'You don\\'t have permission to do that.')), 'status' => 200, 'type' => 'json'));\n            }\n        } else {\n            $this->set('id', $id);\n            $this->set('template_id', $this->TemplateElement->data['Template']['id']);\n            $this->render('ajax/templateElementConfirmationForm');\n        }\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\nApp::uses('RandomTool', 'Tools');\n\nclass Template extends AppModel\n{\n    public $actsAs = array('Containable');\n\n    public $hasMany = array(\n        'TemplateTag' => array(\n            'dependent' => true,\n        ),\n        'TemplateElement' => array(\n            'order' => 'TemplateElement.position',\n            'dependent' => true,\n        )\n    );\n\n    public function trimElementPositions($id)\n    {\n        // permissions\n        $this->id = $id;\n        if (!$this->exists()) {\n            throw new NotFoundException(__('Invalid template.'));\n        }\n\n        $template = $this->find('first', array(\n                'conditions' => array('id' => $id),\n                'recursive' => -1,\n                'contain' => array(\n                        'TemplateElement' => array('id', 'template_id', 'position'),\n                ),\n                'fields' => array('id', 'org'),\n        ));\n        foreach ($template['TemplateElement'] as $k => &$element) {\n            $element['position'] = $k+1;\n        }\n        $this->saveAll($template);\n    }\n\n    public function checkAuthorisation($id, $user, $write)\n    {\n        // fetch the bare template\n        $template = $this->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1,\n        ));\n\n        // if not found return false\n        if (empty($template)) {\n            return false;\n        }\n\n        //if the user is a site admin, return the template without question\n        if ($user['Role']['perm_site_admin']) {\n            return $template;\n        }\n\n        if ($write) {\n            // if write access is requested, check if template belongs to user's org and whether the user is authorised to edit templates\n            if ($user['Organisation']['name'] == $template['Template']['org'] && $user['Role']['perm_template']) {\n                return $template;\n            }\n            return false;\n        } else {\n\n            // if read access is requested, check if the template belongs to the user's org or alternatively whether the template is shareable\n            if ($user['Organisation']['name'] == $template['Template']['org'] || $template['Template']['share']) {\n                return $template;\n            }\n            return false;\n        }\n    }\n\n    public function generateRandomFileName()\n    {\n        return (new RandomTool())->random_str(false, 12);\n    }\n}\n", "<div id=\"ajaxTemplateElementsIndex\">\n    <h2><?php echo __('Template Elements');?></h2>\n    <ul <?php if ($mayModify): ?> id=\"sortable\" <?php endif; ?> style=\"list-style:none; margin:0px;\">\n                <?php\n                foreach ($elements as $k => $element):\n                    echo $this->element('templateElements/templateRow' . ucfirst($element['TemplateElement']['element_definition']), array('element' => $element, 'element_id' => $element['TemplateElement']['id']));\n                endforeach;\n            ?>\n    </ul>\n    <?php if ($mayModify): ?>\n    <div id=\"AddTemplateElementDiv\" role=\"button\" tabindex=\"0\" aria-label=\"<?php echo __('Add a new template element');?>\" title=\"<?php echo __('Add a new template element');?>\" class=\"addTemplateElement useCursorPointer\" onClick=\"templateAddElementClicked(<?php echo h($id); ?>);\">+</div>\n    <?php endif; ?>\n</div>\n<script type=\"text/javascript\">\n$(function() {\n    //Return a helper with preserved width of cells\n    var fixHelper = function(e, ui) {\n        ui.children().each(function() {\n            $(this).width($(this).width());\n        });\n        return ui;\n    };\n\n    $(\"#sortable\").sortable({\n        helper: fixHelper,\n        update: function () {\n            var order = [];\n\n            $(\"#sortable\").children().each(function (i) {\n                var li = $(this);\n                order[i] = li.attr(\"id\");\n            });\n\n            saveElementSorting(JSON.stringify(order));\n        }\n    }).disableSelection();\n});\n</script>\n"], "filenames": ["app/Controller/TemplateElementsController.php", "app/Model/Template.php", "app/View/TemplateElements/ajax/ajaxIndex.ctp"], "buggy_code_start_loc": [18, 55, 11], "buggy_code_end_loc": [23, 56, 12], "fixing_code_start_loc": [18, 55, 11], "fixing_code_end_loc": [25, 56, 12], "type": "CWE-79", "message": "In MISP 2.4.134, XSS exists in the template element index view because the id parameter is mishandled.", "other": {"cve": {"id": "CVE-2020-28947", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-19T18:15:15.163", "lastModified": "2020-11-30T18:37:08.937", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP 2.4.134, XSS exists in the template element index view because the id parameter is mishandled."}, {"lang": "es", "value": "En MISP versi\u00f3n 2.4.134, una vulnerabilidad de tipo XSS se presenta en la vista de \u00edndice del elemento de plantilla porque el par\u00e1metro id es maneja inapropiadamente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.134:*:*:*:*:*:*:*", "matchCriteriaId": "702583F5-1894-4F2F-B517-A3A3E527EE96"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/626ca544ffb5604ea01bb291f69811668b6b5631", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/626ca544ffb5604ea01bb291f69811668b6b5631"}}