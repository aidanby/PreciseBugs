{"buggy_code": ["<?php\n  require_once \"../configuration.php\";\n  require_once \"../includes/class.inc.php\";\n  newClass();\n  //Preset variables\n  /**\n  * Is register succeeded?\n  * @var bool\n  */\n  $register = False;\n  /**\n  * Is register username or mail already in use?\n  * @var bool\n  */\n  $in_use = False;\n  //Checks if variables are set\n  if(isset($_POST[\"U\"])&&isset($_POST[\"M\"])&&isset($_POST[\"P\"])&&isset($_POST[\"PR\"])){\n    //Checks if both passwords are the same\n    if($_POST[\"P\"]==$_POST[\"PR\"]){\n      //Checks if the mailadress is valid\n      if(preg_match('/^[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+(?:\\.[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+)*\\@[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+(?:\\.[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+)+$/i', $_POST[\"M\"])){\n        //Checks if the username is valid\n        if(preg_match('/^[a-z0-9A-Z.]{3,15}$/',$_POST[\"U\"])){\n          //Checks if the password is valid\n          if(preg_match('/^[a-z0-9A-Z.:,;]{8,25}$/',$_POST[\"P\"])){\n            $register = True;\n            $sql = \"SELECT * FROM User\";\n            $db_erg = mysqli_query($U->db_link, $sql);\n            while ($row = mysqli_fetch_array($db_erg, MYSQLI_ASSOC))\n            {\n              //Checks if username or mail are in use\n              if(strtolower($row[\"Username\"]) == strtolower($_POST[\"U\"])||strtolower($row[\"Mail\"])==strtolower($_POST[\"M\"])){\n                $register = False;\n                $in_use = True;\n              }\n            }\n          }else{\n            echo str_replace(\"%a\",$U->getLang(\"login.password\"),$U->getLang(\"login.invalid\"));\n          }\n        }else{\n          echo str_replace(\"%a\",$U->getLang(\"login.username\"),$U->getLang(\"login.invalid\"));\n        }\n      }else{\n        echo str_replace(\"%a\",$U->getLang(\"login.mail\"),$U->getLang(\"login.invalid\"));\n      }\n    }else{\n      echo $U->getLang(\"login.fail_same_password\");\n    }\n  }else{\n    echo $U->getLang(\"login.fillout\");\n  }\n  //Checks if register is cloded\n  if($U->getSetting(\"login.register_open\")==\"0\"  || $U->getSetting(\"login.login_open\") == \"0\"){\n    echo $U->getLang(\"register.closed\");\n    $register = False;\n  }\n  if($register){\n    //Register succeeded:\n    //Register user\n    $sql = 'INSERT INTO User (Username, Mail, Password, Type) VALUES ('.\"'\".$_POST[\"U\"].\"'\".','.\"'\".$_POST[\"M\"].\"'\".','.\"'\".password_hash($_POST[\"P\"],PASSWORD_DEFAULT).\"'\".',0);';\n    if($db_erg = mysqli_query($U->db_link, $sql)){\n      //Database register is succeeded\n      echo $U->getLang(\"register.succeed\");\n      header(\"Location: \".$USOC[\"DOMAIN\"]);\n    }else{\n      //Database register is failed\n      echo mysqli_error($U->db_link);\n    }\n  }\n  if($in_use){\n    //Username or mail already in use:\n    echo $U->getLang(\"register.in_use\");\n  }\n?>\n"], "fixing_code": ["<?php\n  require_once \"../configuration.php\";\n  require_once \"../includes/class.inc.php\";\n  newClass();\n  //Preset variables\n  /**\n  * Is register succeeded?\n  * @var bool\n  */\n  $register = False;\n  /**\n  * Is register username or mail already in use?\n  * @var bool\n  */\n  $in_use = False;\n  //Checks if variables are set\n  if(isset($_POST[\"U\"])&&isset($_POST[\"M\"])&&isset($_POST[\"P\"])&&isset($_POST[\"PR\"])){\n    //Checks if both passwords are the same\n    if($_POST[\"P\"]==$_POST[\"PR\"]){\n      //Checks if the mailadress is valid\n      if(preg_match('/^[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+(?:\\.[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+)*\\@[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+(?:\\.[^\\x00-\\x20()<>@,;:\\\\\".[\\]\\x7f-\\xff]+)+$/i', $_POST[\"M\"])){\n        //Checks if the username is valid\n        if(preg_match('/^[a-z0-9A-Z.]{3,15}$/',$_POST[\"U\"])){\n          //Checks if the password is valid\n          if(preg_match('/^[a-z0-9A-Z.:,;]{8,25}$/',$_POST[\"P\"])){\n            $register = True;\n            $sql = \"SELECT * FROM User\";\n            $dbRes = mysqli_query($U->db_link, $sql);\n            while ($row = mysqli_fetch_array($dbRes, MYSQLI_ASSOC))\n            {\n              //Checks if username or mail are in use\n              if(strtolower($row[\"Username\"]) == strtolower($_POST[\"U\"])||strtolower($row[\"Mail\"])==strtolower($_POST[\"M\"])){\n                $register = False;\n                $in_use = True;\n              }\n            }\n          }else{\n            echo str_replace(\"%a\",$U->getLang(\"login.password\"),$U->getLang(\"login.invalid\"));\n          }\n        }else{\n          echo str_replace(\"%a\",$U->getLang(\"login.username\"),$U->getLang(\"login.invalid\"));\n        }\n      }else{\n        echo str_replace(\"%a\",$U->getLang(\"login.mail\"),$U->getLang(\"login.invalid\"));\n      }\n    }else{\n      echo $U->getLang(\"login.fail_same_password\");\n    }\n  }else{\n    echo $U->getLang(\"login.fillout\");\n  }\n  //Checks if register is cloded\n  if($U->getSetting(\"login.register_open\")==\"0\"  || $U->getSetting(\"login.login_open\") == \"0\"){\n    echo $U->getLang(\"register.closed\");\n    $register = False;\n  }\n  if($register){\n    //Register succeeded:\n    //Register user\n    $sql = 'INSERT INTO User (Username, Mail, Password, Type) VALUES ('.\"'\".mysqli::real_escape_string($_POST[\"U\"]).\"'\".','.\"'\".mysqli::real_escape_string($_POST[\"M\"]).\"'\".','.\"'\".password_hash(mysqli::real_escape_string($_POST[\"P\"]),PASSWORD_DEFAULT).\"'\".','.$USOC[\"userRights\"][\"AfterRegistration\"].');';\n    if($dbRes = mysqli_query($U->db_link, $sql)){\n      //Database register is succeeded\n      echo $U->getLang(\"register.succeed\");\n      header(\"Location: \".$USOC[\"DOMAIN\"]);\n    }else{\n      //Database register is failed\n      echo mysqli_error($U->db_link);\n    }\n  }\n  if($in_use){\n    //Username or mail already in use:\n    echo $U->getLang(\"register.in_use\");\n  }\n?>\n"], "filenames": ["login/register.php"], "buggy_code_start_loc": [28], "buggy_code_end_loc": [62], "fixing_code_start_loc": [28], "fixing_code_end_loc": [62], "type": "CWE-89", "message": "USOC is an open source CMS with a focus on simplicity. In affected versions USOC allows for SQL injection via register.php. In particular usernames, email addresses, and passwords provided by the user were not sanitized and were used directly to construct a sql statement. Users are advised to upgrade as soon as possible. There are not workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-21643", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-04T20:15:07.797", "lastModified": "2022-01-21T14:24:44.283", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "USOC is an open source CMS with a focus on simplicity. In affected versions USOC allows for SQL injection via register.php. In particular usernames, email addresses, and passwords provided by the user were not sanitized and were used directly to construct a sql statement. Users are advised to upgrade as soon as possible. There are not workarounds for this issue."}, {"lang": "es", "value": "USOC es un CMS de c\u00f3digo abierto centrado en la simplicidad. En las versiones afectadas, USOC permite la inyecci\u00f3n SQL por medio del archivo register.php. En particular, los nombres de usuario, las direcciones de correo electr\u00f3nico y las contrase\u00f1as proporcionadas por el usuario no estaban saneadas y eran usadas directamente para construir una sentencia sql. Se aconseja a usuarios que actualicen lo antes posible. No se presentan medidas de mitigaci\u00f3n para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:useful_simple_open-source_cms_project:useful_simple_open-source_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "pb2.4bfx2", "matchCriteriaId": "2DBB6ACF-B401-4A14-A2F3-2E0EB6DE5852"}]}]}], "references": [{"url": "https://github.com/Aaron-Junker/USOC/commit/21e8bfd7a9ab0b7f9344a7a3a7c32a7cdd5a0b69", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Aaron-Junker/USOC/security/advisories/GHSA-fjp4-phjh-jgmc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Aaron-Junker/USOC/commit/21e8bfd7a9ab0b7f9344a7a3a7c32a7cdd5a0b69"}}