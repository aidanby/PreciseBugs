{"buggy_code": ["<?php\r\n\r\nrequire_once dirname(__FILE__) . '/../../../videos/configuration.php';\r\nrequire_once dirname(__FILE__) . '/../../../objects/bootGrid.php';\r\nrequire_once dirname(__FILE__) . '/../../../objects/user.php';\r\n\r\nclass AuditTable extends ObjectYPT {\r\n\r\n    protected $id, $method, $class, $statement, $formats, $values, $ip, $users_id;\r\n    \r\n    static function getSearchFieldsNames() {\r\n        return array('method','class','statement','ip','a.created', 'user');\r\n    }\r\n\r\n    static function getTableName() {\r\n        return 'audit';\r\n    }\r\n        \r\n    \r\n    function audit($method, $class, $statement, $formats, $values, $users_id) {\r\n        $this->method = $method;\r\n        $this->class = $class;\r\n        $this->statement = substr(str_replace(\"'\", \"\", $statement),0,1000).\"n\";\r\n        $this->formats = $formats;\r\n        $this->values = $values;\r\n        $this->ip = getRealIpAddr();\r\n        $this->users_id = empty($users_id)?\"NULL\":$users_id;\r\n        return $this->save();\r\n    }\r\n    \r\n    static function getTotal() {\r\n        //will receive\r\n        //current=1&rowCount=10&sort[sender]=asc&searchPhrase=\r\n        global $global;\r\n        $sql = \"SELECT a.id FROM  \" . static::getTableName() . \" a LEFT JOIN users u ON u.id = users_id  WHERE 1=1  \";\r\n        $sql .= self::getSqlSearchFromPost();\r\n        //echo $sql;\r\n        $res = sqlDAL::readSql($sql); \r\n        $countRow = sqlDAL::num_rows($res);\r\n        sqlDAL::close($res);\r\n        return $countRow;\r\n    }    \r\n\r\n    static function getAll() {\r\n        global $global;\r\n        $sql = \"SELECT u.*, a.* FROM  \" . static::getTableName() . \" a LEFT JOIN users u ON u.id = users_id WHERE 1=1 \";\r\n        $sql .= self::getSqlFromPost(\"a.\");\r\n        //echo $sql;\r\n        $res = sqlDAL::readSql($sql); \r\n        $fullData = sqlDAL::fetchAllAssoc($res);\r\n        sqlDAL::close($res);\r\n        $rows = array();\r\n        if ($res!=false) {\r\n            foreach ($fullData as $row) {\r\n                $rows[] = $row;\r\n            }\r\n        } else {\r\n            die($sql . '\\nError : (' . $global['mysqli']->errno . ') ' . $global['mysqli']->error);\r\n        }\r\n        return $rows;\r\n    }\r\n\r\n}\r\n"], "fixing_code": ["<?php\r\n\r\nrequire_once dirname(__FILE__) . '/../../../videos/configuration.php';\r\nrequire_once dirname(__FILE__) . '/../../../objects/bootGrid.php';\r\nrequire_once dirname(__FILE__) . '/../../../objects/user.php';\r\n\r\nclass AuditTable extends ObjectYPT {\r\n\r\n    protected $id, $method, $class, $statement, $formats, $values, $ip, $users_id;\r\n    \r\n    static function getSearchFieldsNames() {\r\n        return array('method','class','statement','ip','a.created', 'user');\r\n    }\r\n\r\n    static function getTableName() {\r\n        return 'audit';\r\n    }\r\n        \r\n    \r\n    function audit($method, $class, $statement, $formats, $values, $users_id) {\r\n        $this->method = $method;\r\n        $this->class = $class;\r\n        $this->statement = substr(str_replace(\"'\", \"\", $statement),0,1000).\"n\";\r\n        $this->formats = $formats;\r\n        $this->values = str_replace(array(\"'\",\"\\\\\"), array(\"\",\"\"), $values);\r\n        $this->ip = getRealIpAddr();\r\n        $this->users_id = empty($users_id)?\"NULL\":$users_id;\r\n        return $this->save();\r\n    }\r\n    \r\n    static function getTotal() {\r\n        //will receive\r\n        //current=1&rowCount=10&sort[sender]=asc&searchPhrase=\r\n        global $global;\r\n        $sql = \"SELECT a.id FROM  \" . static::getTableName() . \" a LEFT JOIN users u ON u.id = users_id  WHERE 1=1  \";\r\n        $sql .= self::getSqlSearchFromPost();\r\n        //echo $sql;\r\n        $res = sqlDAL::readSql($sql); \r\n        $countRow = sqlDAL::num_rows($res);\r\n        sqlDAL::close($res);\r\n        return $countRow;\r\n    }    \r\n\r\n    static function getAll() {\r\n        global $global;\r\n        $sql = \"SELECT u.*, a.* FROM  \" . static::getTableName() . \" a LEFT JOIN users u ON u.id = users_id WHERE 1=1 \";\r\n        $sql .= self::getSqlFromPost(\"a.\");\r\n        //echo $sql;\r\n        $res = sqlDAL::readSql($sql); \r\n        $fullData = sqlDAL::fetchAllAssoc($res);\r\n        sqlDAL::close($res);\r\n        $rows = array();\r\n        if ($res!=false) {\r\n            foreach ($fullData as $row) {\r\n                $rows[] = $row;\r\n            }\r\n        } else {\r\n            die($sql . '\\nError : (' . $global['mysqli']->errno . ') ' . $global['mysqli']->error);\r\n        }\r\n        return $rows;\r\n    }\r\n\r\n}\r\n"], "filenames": ["plugin/Audit/Objects/AuditTable.php"], "buggy_code_start_loc": [25], "buggy_code_end_loc": [26], "fixing_code_start_loc": [25], "fixing_code_end_loc": [26], "type": "CWE-89", "message": "plugin/Audit/Objects/AuditTable.php in YouPHPTube through 7.2 allows SQL Injection.", "other": {"cve": {"id": "CVE-2019-14430", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-20T14:15:10.973", "lastModified": "2019-08-26T20:42:16.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "plugin/Audit/Objects/AuditTable.php in YouPHPTube through 7.2 allows SQL Injection."}, {"lang": "es", "value": "plugin / Audit / Objects / AuditTable.php en YouPHPTube a trav\u00e9s de 7.2 permite la inyecci\u00f3n de SQL."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:youphptube:youphptube:*:*:*:*:*:*:*:*", "versionEndIncluding": "7.2", "matchCriteriaId": "1F4A46BA-B83A-4D1C-935B-C787398AAF50"}]}]}], "references": [{"url": "https://github.com/YouPHPTube/YouPHPTube/commit/891843d547f7db5639925a67b7f2fd66721f703a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/47294", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/YouPHPTube/YouPHPTube/commit/891843d547f7db5639925a67b7f2fd66721f703a"}}