{"buggy_code": ["#!/usr/bin/env python\n\"\"\"\nCLI interface to markdown-it-py\n\nParse one or more markdown files, convert each to HTML, and print to stdout.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nfrom collections.abc import Iterable, Sequence\nimport sys\n\nfrom markdown_it import __version__\nfrom markdown_it.main import MarkdownIt\n\nversion_str = \"markdown-it-py [version {}]\".format(__version__)\n\n\ndef main(args: Sequence[str] | None = None) -> int:\n    namespace = parse_args(args)\n    if namespace.filenames:\n        convert(namespace.filenames)\n    else:\n        interactive()\n    return 0\n\n\ndef convert(filenames: Iterable[str]) -> None:\n    for filename in filenames:\n        convert_file(filename)\n\n\ndef convert_file(filename: str) -> None:\n    \"\"\"\n    Parse a Markdown file and dump the output to stdout.\n    \"\"\"\n    try:\n        with open(filename, \"r\") as fin:\n            rendered = MarkdownIt().render(fin.read())\n            print(rendered, end=\"\")\n    except OSError:\n        sys.stderr.write(f'Cannot open file \"{filename}\".\\n')\n        sys.exit(1)\n\n\ndef interactive() -> None:\n    \"\"\"\n    Parse user input, dump to stdout, rinse and repeat.\n    Python REPL style.\n    \"\"\"\n    print_heading()\n    contents = []\n    more = False\n    while True:\n        try:\n            prompt, more = (\"... \", True) if more else (\">>> \", True)\n            contents.append(input(prompt) + \"\\n\")\n        except EOFError:\n            print(\"\\n\" + MarkdownIt().render(\"\\n\".join(contents)), end=\"\")\n            more = False\n            contents = []\n        except KeyboardInterrupt:\n            print(\"\\nExiting.\")\n            break\n\n\ndef parse_args(args: Sequence[str] | None) -> argparse.Namespace:\n    \"\"\"Parse input CLI arguments.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Parse one or more markdown files, \"\n        \"convert each to HTML, and print to stdout\",\n        # NOTE: Remember to update README.md w/ the output of `markdown-it -h`\n        epilog=(\n            f\"\"\"\nInteractive:\n\n  $ markdown-it\n  markdown-it-py [version {__version__}] (interactive)\n  Type Ctrl-D to complete input, or Ctrl-C to exit.\n  >>> # Example\n  ... > markdown *input*\n  ...\n  <h1>Example</h1>\n  <blockquote>\n  <p>markdown <em>input</em></p>\n  </blockquote>\n\nBatch:\n\n  $ markdown-it README.md README.footer.md > index.html\n\"\"\"\n        ),\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n    )\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=version_str)\n    parser.add_argument(\n        \"filenames\", nargs=\"*\", help=\"specify an optional list of files to convert\"\n    )\n    return parser.parse_args(args)\n\n\ndef print_heading() -> None:\n    print(\"{} (interactive)\".format(version_str))\n    print(\"Type Ctrl-D to complete input, or Ctrl-C to exit.\")\n\n\nif __name__ == \"__main__\":\n    exit_code = main(sys.argv[1:])\n    sys.exit(exit_code)\n", "import pathlib\nimport tempfile\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom markdown_it.cli import parse\n\n\ndef test_parse():\n    with tempfile.TemporaryDirectory() as tempdir:\n        path = pathlib.Path(tempdir).joinpath(\"test.md\")\n        path.write_text(\"a b c\")\n        assert parse.main([str(path)]) == 0\n\n\ndef test_parse_fail():\n    with pytest.raises(SystemExit) as exc_info:\n        parse.main([\"/tmp/nonexistant_path/for_cli_test.md\"])\n    assert exc_info.value.code == 1\n\n\ndef test_print_heading():\n    with patch(\"builtins.print\") as patched:\n        parse.print_heading()\n    patched.assert_called()\n\n\ndef test_interactive():\n    def mock_input(prompt):\n        raise KeyboardInterrupt\n\n    with patch(\"builtins.print\") as patched:\n        with patch(\"builtins.input\", mock_input):\n            parse.interactive()\n    patched.assert_called()\n"], "fixing_code": ["#!/usr/bin/env python\n\"\"\"\nCLI interface to markdown-it-py\n\nParse one or more markdown files, convert each to HTML, and print to stdout.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nfrom collections.abc import Iterable, Sequence\nimport sys\n\nfrom markdown_it import __version__\nfrom markdown_it.main import MarkdownIt\n\nversion_str = \"markdown-it-py [version {}]\".format(__version__)\n\n\ndef main(args: Sequence[str] | None = None) -> int:\n    namespace = parse_args(args)\n    if namespace.filenames:\n        convert(namespace.filenames)\n    else:\n        interactive()\n    return 0\n\n\ndef convert(filenames: Iterable[str]) -> None:\n    for filename in filenames:\n        convert_file(filename)\n\n\ndef convert_file(filename: str) -> None:\n    \"\"\"\n    Parse a Markdown file and dump the output to stdout.\n    \"\"\"\n    try:\n        with open(filename, \"r\", encoding=\"utf8\", errors=\"ignore\") as fin:\n            rendered = MarkdownIt().render(fin.read())\n            print(rendered, end=\"\")\n    except OSError:\n        sys.stderr.write(f'Cannot open file \"{filename}\".\\n')\n        sys.exit(1)\n\n\ndef interactive() -> None:\n    \"\"\"\n    Parse user input, dump to stdout, rinse and repeat.\n    Python REPL style.\n    \"\"\"\n    print_heading()\n    contents = []\n    more = False\n    while True:\n        try:\n            prompt, more = (\"... \", True) if more else (\">>> \", True)\n            contents.append(input(prompt) + \"\\n\")\n        except EOFError:\n            print(\"\\n\" + MarkdownIt().render(\"\\n\".join(contents)), end=\"\")\n            more = False\n            contents = []\n        except KeyboardInterrupt:\n            print(\"\\nExiting.\")\n            break\n\n\ndef parse_args(args: Sequence[str] | None) -> argparse.Namespace:\n    \"\"\"Parse input CLI arguments.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Parse one or more markdown files, \"\n        \"convert each to HTML, and print to stdout\",\n        # NOTE: Remember to update README.md w/ the output of `markdown-it -h`\n        epilog=(\n            f\"\"\"\nInteractive:\n\n  $ markdown-it\n  markdown-it-py [version {__version__}] (interactive)\n  Type Ctrl-D to complete input, or Ctrl-C to exit.\n  >>> # Example\n  ... > markdown *input*\n  ...\n  <h1>Example</h1>\n  <blockquote>\n  <p>markdown <em>input</em></p>\n  </blockquote>\n\nBatch:\n\n  $ markdown-it README.md README.footer.md > index.html\n\"\"\"\n        ),\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n    )\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=version_str)\n    parser.add_argument(\n        \"filenames\", nargs=\"*\", help=\"specify an optional list of files to convert\"\n    )\n    return parser.parse_args(args)\n\n\ndef print_heading() -> None:\n    print(\"{} (interactive)\".format(version_str))\n    print(\"Type Ctrl-D to complete input, or Ctrl-C to exit.\")\n\n\nif __name__ == \"__main__\":\n    exit_code = main(sys.argv[1:])\n    sys.exit(exit_code)\n", "import pathlib\nimport tempfile\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom markdown_it.cli import parse\n\n\ndef test_parse():\n    with tempfile.TemporaryDirectory() as tempdir:\n        path = pathlib.Path(tempdir).joinpath(\"test.md\")\n        path.write_text(\"a b c\")\n        assert parse.main([str(path)]) == 0\n\n\ndef test_parse_fail():\n    with pytest.raises(SystemExit) as exc_info:\n        parse.main([\"/tmp/nonexistant_path/for_cli_test.md\"])\n    assert exc_info.value.code == 1\n\n\ndef test_non_utf8():\n    with tempfile.TemporaryDirectory() as tempdir:\n        path = pathlib.Path(tempdir).joinpath(\"test.md\")\n        path.write_bytes(b\"\\x80abc\")\n        assert parse.main([str(path)]) == 0\n\n\ndef test_print_heading():\n    with patch(\"builtins.print\") as patched:\n        parse.print_heading()\n    patched.assert_called()\n\n\ndef test_interactive():\n    def mock_input(prompt):\n        raise KeyboardInterrupt\n\n    with patch(\"builtins.print\") as patched:\n        with patch(\"builtins.input\", mock_input):\n            parse.interactive()\n    patched.assert_called()\n"], "filenames": ["markdown_it/cli/parse.py", "tests/test_cli.py"], "buggy_code_start_loc": [38, 22], "buggy_code_end_loc": [39, 22], "fixing_code_start_loc": [38, 23], "fixing_code_end_loc": [39, 30], "type": "NVD-CWE-Other", "message": "Denial of service could be caused to the command line interface of markdown-it-py, before v2.2.0, if an attacker was allowed to use invalid UTF-8 characters as input.", "other": {"cve": {"id": "CVE-2023-26302", "sourceIdentifier": "security@ubuntu.com", "published": "2023-02-22T23:15:17.677", "lastModified": "2023-03-06T16:28:43.110", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Denial of service could be caused to the command line interface of markdown-it-py, before v2.2.0, if an attacker was allowed to use invalid UTF-8 characters as input."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security@ubuntu.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security@ubuntu.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-173"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:executablebooks:markdown-it-py:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.0", "matchCriteriaId": "5E45476E-D78B-486D-9B62-30E7573AAA6A"}]}]}], "references": [{"url": "https://github.com/executablebooks/markdown-it-py/commit/53ca3e9c2b9e9b295f6abf7f4ad2730a9b70f68c", "source": "security@ubuntu.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/executablebooks/markdown-it-py/commit/53ca3e9c2b9e9b295f6abf7f4ad2730a9b70f68c"}}