{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.klass\");\npimcore.object.classes.klass = Class.create({\n\n    allowedInType: 'object',\n    disallowedDataTypes: [],\n    context: \"class\",\n    uploadRoute: 'pimcore_admin_dataobject_class_importclass',\n    exportRoute: 'pimcore_admin_dataobject_class_exportclass',\n\n    initialize: function (data, parentPanel, reopen, editorPrefix) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.editorPrefix = editorPrefix;\n        this.reopen = reopen;\n\n        this.addTree();\n        this.initLayoutFields();\n        this.addLayout();\n    },\n\n    getUploadUrl: function(){\n        return Routing.generate(this.uploadRoute, {id: this.getId()});\n    },\n\n    getExportUrl: function() {\n        return Routing.generate(this.exportRoute, {id: this.getId()});\n    },\n\n\n    addTree: function() {\n        this.tree = Ext.create('Ext.tree.Panel', {\n            region: \"west\",\n            width: 300,\n            split: true,\n            enableDD: true,\n            autoScroll: true,\n            root: {\n                id: \"0\",\n                root: true,\n                text: t(\"general_settings\"),\n                leaf: true,\n                iconCls: \"pimcore_icon_class\",\n                isTarget: true,\n                className: this.data.name\n            },\n            listeners: this.getTreeNodeListeners(),\n            viewConfig: {\n                plugins: {\n                    ptype: 'treeviewdragdrop',\n                    ddGroup: \"element\"\n                }\n            }\n        });\n        this.tree.getStore().setDefaultRootText(\"\");\n    },\n\n    addLayout: function () {\n\n        this.editpanel = new Ext.Panel({\n            region: \"center\",\n            bodyStyle: \"padding: 10px;\",\n            autoScroll: true\n        });\n\n        var displayId = this.data.key ? this.data.key : this.data.id; // because the field-collections use that also\n\n        var panelButtons = [];\n\n        panelButtons.push({\n            text: t(\"configure_custom_layouts\"),\n            iconCls: \"pimcore_icon_class pimcore_icon_overlay_add\",\n            hidden: (this instanceof pimcore.object.fieldcollections.field) || (this instanceof pimcore.object.objectbricks.field),\n            handler: this.configureCustomLayouts.bind(this)\n        });\n\n        panelButtons.push({\n            text: t('reload_definition'),\n            handler: this.onRefresh.bind(this),\n            iconCls: \"pimcore_icon_reload\"\n        });\n\n        panelButtons.push({\n            text: t(\"import\"),\n            iconCls: \"pimcore_icon_upload\",\n            handler: this.upload.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n        panelButtons.push({\n            text: t(\"export\"),\n            iconCls: \"pimcore_icon_download\",\n            handler: function() {\n                pimcore.helpers.download(this.getExportUrl());\n            }.bind(this)\n        });\n\n\n        panelButtons.push({\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n\n        var name = \"\";\n        if(this.data.name) {\n            name = this.data.name + \" ( ID: \" + displayId + \")\";\n        } else {\n            name = \"ID: \" + displayId;\n        }\n\n        this.panel = new Ext.Panel({\n            border: false,\n            layout: \"border\",\n            closable: true,\n            autoScroll: true,\n            title: name,\n            //id: \"pimcore_class_editor_panel_\" + this.getId(),\n            id: this.editorPrefix + this.getId(),\n            items: [\n                this.tree,\n                this.editpanel\n            ],\n            buttons: panelButtons\n        });\n\n\n        this.parentPanel.getEditPanel().add(this.panel);\n\n        this.editpanel.add(this.getRootPanel());\n        this.setCurrentNode(\"root\");\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    configureCustomLayouts: function() {\n        try {\n            var dialog = new pimcore.object.helpers.customLayoutEditor(this.data);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getId: function(){\n        return  this.data.id;\n    },\n\n    upload: function() {\n\n        pimcore.helpers.uploadDialog(this.getUploadUrl(), \"Filedata\", function() {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_class_get'),\n                params: {\n                    id: this.data.id\n                },\n                success: function(response) {\n                    this.data = Ext.decode(response.responseText);\n                    this.parentPanel.getEditPanel().removeAll();\n                    this.addTree();\n                    this.initLayoutFields();\n                    this.addLayout();\n                    pimcore.layout.refresh();\n                }.bind(this)\n            });\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    reload: function(response) {\n\n    },\n\n    initLayoutFields: function () {\n\n        if (this.data.layoutDefinitions) {\n            if (this.data.layoutDefinitions.childs) {\n                for (var i = 0; i < this.data.layoutDefinitions.childs.length; i++) {\n                    this.tree.getRootNode().appendChild(this.recursiveAddNode(this.data.layoutDefinitions.childs[i],\n                        this.tree.getRootNode()));\n                }\n                this.tree.getRootNode().expand();\n            }\n        }\n    },\n\n    recursiveAddNode: function (con, scope) {\n\n        var fn = null;\n        var newNode = null;\n\n        if (con.datatype == \"layout\") {\n            fn = this.addLayoutChild.bind(scope, con.fieldtype, con, this.context);\n        }\n        else if (con.datatype == \"data\") {\n            fn = this.addDataChild.bind(scope, con.fieldtype, con, this.context);\n        }\n\n        newNode = fn();\n\n        if (con.childs) {\n            for (var i = 0; i < con.childs.length; i++) {\n                this.recursiveAddNode(con.childs[i], newNode);\n            }\n        }\n\n        return newNode;\n    },\n\n\n    getTreeNodeListeners: function () {\n\n        var listeners = {\n            \"itemclick\" : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this)\n        };\n        return listeners;\n    },\n\n\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n\n        try {\n            this.saveCurrentNode();\n        } catch (e) {\n            console.log(e);\n        }\n\n\n        try {\n            this.editpanel.removeAll();\n\n            if (record.data.editor) {\n\n                if (record.data.editor.datax.locked) {\n                    return;\n                }\n\n                this.editpanel.add(record.data.editor.getLayout());\n\n                this.setCurrentNode(record.data.editor);\n            }\n\n            if (record.data.root) {\n                this.editpanel.add(this.getRootPanel());\n                this.setCurrentNode(\"root\");\n            }\n\n            this.editpanel.updateLayout();\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getDataMenu: function(tree, record, allowedTypes, parentType, editMode) {\n        // get available data types\n        var dataMenu = [];\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var parentRestrictions;\n        var groups = [];\n        var groupNames = [\"text\",\"numeric\",\"date\",\"select\",\"media\",\"relation\",\"geo\",\"crm\",\"structured\",\"other\"];\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            var dataComp = pimcore.object.classes.data[dataCompName];\n\n            // check for disallowed types\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn[this.allowedInType]) {\n                    allowed = true;\n                }\n            }\n\n            if (!allowed) {\n                continue;\n            }\n\n\n            if (dataComps[i] != \"data\") { // class data is an abstract class => disallow\n                if (in_array(\"data\", allowedTypes[parentType]) || in_array(dataComps[i], allowedTypes[parentType]) ) {\n\n                    // check for restrictions from a parent field (eg. localized fields)\n                    if(in_array(\"data\", allowedTypes[parentType])) {\n                        parentRestrictions = this.getRestrictionsFromParent(record);\n                        if(parentRestrictions != null) {\n                            if(!in_array(dataComps[i], allowedTypes[parentRestrictions])) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    var group = pimcore.object.classes.data[dataComps[i]].prototype.getGroup();\n                    if (!groups[group]) {\n                        if (!in_array(group, groupNames)) {\n                            groupNames.push(group);\n                        }\n                        groups[group] = [];\n                    }\n                    var handler;\n                    if (editMode) {\n                        handler = this.changeDataType.bind(this, tree, record, dataComps[i], true, this.context);\n                    } else {\n                        handler = this.addNewDataChild.bind(this, record, dataComps[i], this.context);\n                    }\n\n                    groups[group].push({\n                        text: pimcore.object.classes.data[dataComps[i]].prototype.getTypeName(),\n                        iconCls: pimcore.object.classes.data[dataComps[i]].prototype.getIconClass(),\n                        handler: handler\n                    });\n                }\n            }\n        }\n\n        for (i = 0; i < groupNames.length; i++) {\n            if (groups[groupNames[i]] && groups[groupNames[i]].length > 0) {\n                dataMenu.push(new Ext.menu.Item({\n                    text: t(groupNames[i]),\n                    iconCls: \"pimcore_icon_data_group_\" + groupNames[i],\n                    hideOnClick: false,\n                    menu: groups[groupNames[i]]\n                }));\n            }\n        }\n        return dataMenu;\n    },\n\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n\n        var allowedTypes = pimcore.object.helpers.layout.getAllowedTypes(this);\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            if ('object' === typeof pimcore.object.classes.data[dataCompName]) {\n                continue;\n            }\n            var component = pimcore.object.classes.data[dataCompName];\n            if(component.prototype.allowIn['localizedfield']) {\n                allowedTypes.localizedfields.push(dataCompName);\n            }\n\n            if(component.prototype.allowIn['block']) {\n                allowedTypes.block.push(dataCompName);\n            }\n        }\n\n\n        // the child-type \"data\" is a placehoder for all data components\n\n\n        var parentType = \"root\";\n\n        if (record.data.editor) {\n            parentType = record.data.editor.type;\n        }\n\n        var changeTypeAllowed = false;\n        if (record.data.type == \"data\") {\n            changeTypeAllowed = true;\n        }\n\n        var childsAllowed = false;\n        if (allowedTypes[parentType] && allowedTypes[parentType].length > 0) {\n            childsAllowed = true;\n        }\n\n        if (childsAllowed || changeTypeAllowed) {\n            // get available layouts\n            var layoutMenu = [];\n            var layouts = Object.keys(pimcore.object.classes.layout);\n\n            for (var i = 0; i < layouts.length; i++) {\n                if (layouts[i] != \"layout\") {\n                    if (in_array(layouts[i], allowedTypes[parentType])) {\n                        layoutMenu.push({\n                            text: pimcore.object.classes.layout[layouts[i]].prototype.getTypeName(),\n                            iconCls: pimcore.object.classes.layout[layouts[i]].prototype.getIconClass(),\n                            handler: function (record, type, context) {\n                                var newNode = this.addLayoutChild.bind(record, type, null, context)();\n                                newNode.getOwnerTree().getSelectionModel().select(newNode);\n                                this.onTreeNodeClick(null, newNode);\n                            }.bind(this, record, layouts[i], this.context)\n                        });\n                    }\n\n                }\n            }\n\n            var getDataMenu = this.getDataMenu.bind(this, tree, record);\n            var addDataMenu = getDataMenu(allowedTypes, parentType, false);\n\n            if (layoutMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_layout_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: layoutMenu\n                }));\n            }\n\n            if (addDataMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_data_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: addDataMenu\n                }));\n            }\n\n            if (changeTypeAllowed) {\n                var changeDataMenu = getDataMenu(allowedTypes, record.parentNode.data.editor.type, true);\n                menu.add(new Ext.menu.Item({\n                    text: t('convert_to'),\n                    iconCls: \"pimcore_icon_convert\",\n                    hideOnClick: false,\n                    menu: changeDataMenu\n                }));\n            }\n\n            if (record.data.type == \"data\") {\n                menu.add(new Ext.menu.Item({\n                    text: t('clone'),\n                    iconCls: \"pimcore_icon_clone\",\n                    hideOnClick: true,\n                    handler: this.changeDataType.bind(this, tree, record, record.data.editor.type, false, this.context)\n                }));\n            }\n\n            menu.add(new Ext.menu.Item({\n                text: t('copy'),\n                iconCls: \"pimcore_icon_copy\",\n                hideOnClick: true,\n                handler: this.copyNode.bind(this, tree, record)\n            }));\n\n            if (childsAllowed) {\n                if (pimcore && pimcore.classEditor && pimcore.classEditor.clipboard) {\n                    menu.add(new Ext.menu.Item({\n                        text: t('paste'),\n                        iconCls: \"pimcore_icon_paste\",\n                        hideOnClick: true,\n                        handler: this.dropNode.bind(this, tree, record)\n                    }));\n                }\n            }\n        }\n\n        var deleteAllowed = true;\n\n        if (record.data.editor) {\n            if (record.data.editor.datax.locked) {\n                deleteAllowed = false;\n            }\n        }\n\n        if (this.id != 0 && deleteAllowed) {\n            menu.add(new Ext.menu.Item({\n                text: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: this.removeChild.bind(this, tree, record)\n            }));\n        }\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    getRestrictionsFromParent: function (node) {\n        if(node.data.editor.type == \"localizedfields\") {\n            return \"localizedfields\";\n        } else {\n            if(node.parentNode && node.parentNode.getDepth() > 0) {\n                var parentType = this.getRestrictionsFromParent(node.parentNode);\n                if(parentType != null) {\n                    return parentType;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    cloneNode:  function(tree, node) {\n        var theReference = this;\n        var nodeLabel = node.data.text;\n        var nodeType = node.data.type;\n\n        var config = {\n            text: nodeLabel,\n            type: nodeType,\n            leaf: node.data.leaf,\n            expanded: node.data.expanded\n        };\n\n\n        config.listeners = theReference.getTreeNodeListeners();\n\n        if (node.data.editor) {\n            config.iconCls = node.data.editor.getIconClass();\n        }\n\n        var newNode = node.createNode(config);\n\n        var theData = {};\n\n        if (node.data.editor) {\n            theData = Ext.apply(theData, node.data.editor.datax);\n        }\n\n        if (node.data.editor) {\n            var definitions = newNode.data.editor = pimcore.object.classes[nodeType];\n            var editorType = node.data.editor.type;\n            var editor = definitions[editorType];\n\n            newNode.data.editor = new editor(newNode, theData);\n        }\n\n        if (nodeType == \"data\") {\n            var availableFields = newNode.data.editor.availableSettingsFields;\n            for (var i = 0; i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (node.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        newNode.data.editor.datax[field] = node.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor.applySpecialData(node.data.editor);\n        }\n\n\n        var len = node.childNodes ? node.childNodes.length : 0;\n\n        var i = 0;\n\n        // Move child nodes across to the copy if required\n        for (i = 0; i < len; i++) {\n            var childNode = node.childNodes[i];\n            var clonedChildNode = this.cloneNode(tree, childNode);\n\n            newNode.appendChild(clonedChildNode);\n        }\n        return newNode;\n    },\n\n\n    copyNode: function(tree, record) {\n        if (!pimcore.classEditor) {\n            pimcore.classEditor = {};\n        }\n\n        var newNode = this.cloneNode(tree, record);\n        pimcore.classEditor.clipboard = newNode;\n\n    },\n\n    dropNode: function(tree, record) {\n        var node = pimcore.classEditor.clipboard;\n        var newNode = this.cloneNode(tree, node);\n\n        record.appendChild(newNode);\n        tree.updateLayout();\n    },\n\n\n    setCurrentNode: function (cn) {\n        this.currentNode = cn;\n    },\n\n    saveCurrentNode: function () {\n        if (this.currentNode) {\n            if (this.currentNode != \"root\") {\n                this.currentNode.applyData();\n            }  else {\n                // save root node data\n                var items = this.rootPanel.queryBy(function(item) {\n                    if (item == this.compositeIndicesPanel) {\n                        return false;\n                    }\n                    return true;\n                });\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (typeof item.getValue == \"function\") {\n                        this.data[item.name] = item.getValue();\n                    }\n                }\n\n                if (this.compositeIndicesPanel) {\n                    this.collectCompositeIndices();\n                }\n            }\n        }\n    },\n\n    collectCompositeIndices: function() {\n        var indexData = [];\n        for(let s=0; s<this.compositeIndicesPanel.items.items.length; s++) {\n            var entry = this.compositeIndicesPanel.items.items[s];\n            var items = entry.queryBy(function(item) {\n                return true;\n            });\n\n            var indexItem = {};\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (typeof item.getValue == \"function\") {\n                    indexItem[item.name] = item.getValue();\n                }\n            }\n            indexData.push(indexItem);\n        }\n\n        this.data[\"compositeIndices\"] = indexData;\n    },\n\n    getRootPanel: function () {\n        this.allowInheritance = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_inherit\"),\n            name: \"allowInherit\",\n            checked: this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.allowVariants.setDisabled(false);\n                    } else {\n                        this.allowVariants.setValue(false);\n                        this.allowVariants.setDisabled(true);\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        this.allowVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_variants\"),\n            name: \"allowVariants\",\n            checked: this.data.allowVariants,\n            disabled: !this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.showVariants.setDisabled(false);\n                    } else {\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.showVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"show_variants\"),\n            name: \"showVariants\",\n            checked: this.data.showVariants,\n            disabled: !this.data.allowInherit\n        });\n\n        var getPhpClassName = function (name) {\n            return \"Pimcore\\\\Model\\\\DataObject\\\\\" + ucfirst(name);\n        };\n\n        var iconStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_geticons'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"text\", \"value\"]\n        });\n\n        var iconField = new Ext.form.field.Text({\n            id: \"iconfield-\" + this.getId(),\n            name: \"icon\",\n            width: 396,\n            value: this.data.icon,\n            listeners: {\n                \"afterrender\": function (el) {\n                    el.inputEl.applyStyles(\"background:url(\" + el.getValue() + \") right center no-repeat;\");\n                }\n            }\n        });\n\n        this.compositeIndexTypeStore = new Ext.data.ArrayStore({\n            data: [['query'], ['localized_query'],['store'], ['localized_store']],\n            fields: ['value']\n        });\n\n        var suggestedColumns = [];\n        var store = this.tree.getStore();\n        var data = store.getData();\n        for (let i = 0; i < data.items.length; i++) {\n            let record = data.items[i];\n            if (record.data.type == \"data\") {\n                suggestedColumns.push([record.data.text]);\n            }\n        }\n\n        this.tagstore = new Ext.data.ArrayStore({\n            data: suggestedColumns,\n            fields: ['value']\n        });\n\n        this.compositeIndicesPanel = new Ext.Panel({\n            autoScroll: true\n        });\n\n        this.rootPanel = new Ext.form.FormPanel({\n            title: '<b>' + t(\"general_settings\") + '</b>',\n            bodyStyle: 'padding: 10px;',\n            autoScroll: true,\n            defaults: {\n                labelWidth: 200\n            },\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"name\"),\n                    name: \"name\",\n                    width: 500,\n                    enableKeyEvents: true,\n                    value: this.data.name,\n                    listeners: {\n                        keyup: function (el) {\n                            this.rootPanel.getComponent(\"phpClassName\").setValue(getPhpClassName(el.getValue()))\n                        }.bind(this)\n                    }\n                },\n                {\n                    xtype: \"textarea\",\n                    fieldLabel: t(\"description\"),\n                    name: \"description\",\n                    width: 500,\n                    value: this.data.description\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"unique_identifier\"),\n                    disabled: true,\n                    value: this.data.id,\n                    width: 500\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"PHP Class Name\"),\n                    name: \"phpClassName\",\n                    itemId: \"phpClassName\",\n                    width: 500,\n                    disabled: true,\n                    value: getPhpClassName(this.data.name)\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"parent_php_class\"),\n                    name: \"parentClass\",\n                    width: 600,\n                    value: this.data.parentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    width: 600,\n                    name: \"implementsInterfaces\",\n                    fieldLabel: t(\"implements_interfaces\"),\n                    value: this.data.implementsInterfaces\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"use_traits\"),\n                    name: \"useTraits\",\n                    width: 600,\n                    value: this.data.useTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_parent_php_class\"),\n                    name: \"listingParentClass\",\n                    width: 600,\n                    value: this.data.listingParentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_use_traits\"),\n                    name: \"listingUseTraits\",\n                    width: 600,\n                    value: this.data.listingUseTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"link_generator_reference\"),\n                    name: \"linkGeneratorReference\",\n                    width: 600,\n                    value: this.data.linkGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_generator_reference\"),\n                    name: \"previewGeneratorReference\",\n                    width: 600,\n                    value: this.data.previewGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_url\"),\n                    name: \"previewUrl\",\n                    width: 600,\n                    value: this.data.previewUrl\n                },\n                {\n                    xtype: \"fieldcontainer\",\n                    layout: \"hbox\",\n                    fieldLabel: t(\"icon\"),\n                    defaults: {\n                        labelWidth: 200\n                    },\n                    items: [\n                        iconField,\n                        {\n                            xtype: \"combobox\",\n                            store: iconStore,\n                            width: 50,\n                            valueField: 'value',\n                            displayField: 'text',\n                            listeners: {\n                                select: function (ele, rec, idx) {\n                                    var icon = ele.container.down(\"#iconfield-\" + this.getId());\n                                    var newValue = rec.data.value;\n                                    icon.component.setValue(newValue);\n                                    icon.component.inputEl.applyStyles(\"background:url(\" + newValue + \") right center no-repeat;\");\n                                    return newValue;\n                                }.bind(this)\n                            }\n                        },\n                        {\n                            iconCls: \"pimcore_icon_refresh\",\n                            xtype: \"button\",\n                            tooltip: t(\"refresh\"),\n                            handler: function(iconField) {\n                                iconField.inputEl.applyStyles(\"background:url(\" + iconField.getValue() + \") right center no-repeat;\");\n                            }.bind(this, iconField)\n                        },\n                        {\n                            xtype: \"button\",\n                            iconCls: \"pimcore_icon_icons\",\n                            text: t('icon_library'),\n                            handler: function () {\n                                pimcore.helpers.openGenericIframeWindow(\"icon-library\", Routing.generate('pimcore_admin_misc_iconlist'), \"pimcore_icon_icons\", t(\"icon_library\"));\n                            }\n                        }\n                    ]\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"group\"),\n                    name: \"group\",\n                    width: 600,\n                    value: this.data.group\n                },\n                this.allowInheritance,\n                this.allowVariants,\n                this.showVariants,\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"generate_type_declarations\"),\n                    name: \"generateTypeDeclarations\",\n                    checked: this.data.generateTypeDeclarations\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_applogger_tab\"),\n                    name: \"showAppLoggerTab\",\n                    checked: this.data.showAppLoggerTab\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_fieldlookup\"),\n                    name: \"showFieldLookup\",\n                    checked: this.data.showFieldLookup\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"enable_grid_locking\"),\n                    name: \"enableGridLocking\",\n                    checked: this.data.enableGridLocking\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"encrypt_data\"),\n                    name: \"encryption\",\n                    style: 'margin: 0',\n                    checked: this.data.encryption\n                },\n                {\n                    xtype: 'container',\n                    html: t('encrypt_data_description'),\n                    style: 'margin-bottom:10px'\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('visibility_of_system_properties') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.id\",\n                    checked: this.data.propertyVisibility.grid.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.id\",\n                    checked: this.data.propertyVisibility.search.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.key\",\n                    checked: this.data.propertyVisibility.grid.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.key\",\n                    checked: this.data.propertyVisibility.search.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.path\",\n                    checked: this.data.propertyVisibility.grid.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.path\",\n                    checked: this.data.propertyVisibility.search.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.published\",\n                    checked: this.data.propertyVisibility.grid.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.published\",\n                    checked: this.data.propertyVisibility.search.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.modificationDate\",\n                    checked: this.data.propertyVisibility.grid.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.modificationDate\",\n                    checked: this.data.propertyVisibility.search.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.creationDate\",\n                    checked: this.data.propertyVisibility.grid.creationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.creationDate\",\n                    checked: this.data.propertyVisibility.search.creationDate\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('composite_indices') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: 'button',\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: function () {\n                        this.addCompositeIndex();\n                    }.bind(this)\n                },\n                this.compositeIndicesPanel,\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('uses_these_bricks') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                this.getBricksGrid()\n\n            ]\n        });\n\n        if (this.data.compositeIndices) {\n            for (let i = 0; i < this.data.compositeIndices.length; i++) {\n                let indexData = this.data.compositeIndices[i];\n                this.addCompositeIndex(indexData);\n            }\n        }\n\n        this.rootPanel.on(\"afterrender\", function() {\n            this.usagesStore.reload();\n        }.bind(this));\n\n        return this.rootPanel;\n    },\n\n    addCompositeIndex: function(data) {\n        data = data || {};\n        var keyField = {\n            xtype: 'textfield',\n            name: \"index_key\",\n            fieldLabel: t(\"key\"),\n            labelWidth: 100,\n            width: 250,\n            value: data.index_key\n        };\n\n        var tagsField = new Ext.form.field.Tag({\n            name: \"index_columns\",\n            width:550,\n            resizable: true,\n            minChars: 2,\n            store: this.tagstore,\n            fieldLabel: t(\"columns\"),\n            value: data.columns,\n            draggable: true,\n            displayField: 'value',\n            valueField: 'value',\n            forceSelection: false,\n            delimiter: '\\x01',\n            createNewOnEnter: true,\n            componentCls: 'superselect-no-drop-down',\n            value: data.index_columns\n        });\n\n        var removeButton = new Ext.button.Button({\n            iconCls: \"pimcore_icon_minus\",\n            style: \"margin-left: 10px\"\n        });\n\n        var typeCombo = {\n            xtype: 'combo',\n            name: \"index_type\",\n            triggerAction: \"all\",\n            editable: true,\n            queryMode: 'local',\n            autoComplete: false,\n            forceSelection: true,\n            selectOnFocus: true,\n            fieldLabel: t(\"table\"),\n            store: this.compositeIndexTypeStore,\n            width: 250,\n            displayField: 'value',\n            valueField: 'value',\n            value: data.index_type ? data.index_type : \"query\",\n            labelWidth: 70,\n            style: \"margin-left: 10px\"\n        };\n\n        var keyEntry = new Ext.form.FieldContainer({\n            layout: 'hbox',\n            border: false,\n            items: [keyField, typeCombo, removeButton]\n        });\n\n\n        var entry = new Ext.form.FieldContainer({\n            layout: 'vbox',\n            border: false,\n            items: [keyEntry, tagsField]\n        });\n\n\n        removeButton.addListener(\"click\", function() {\n            this.compositeIndicesPanel.remove(entry);\n        }.bind(this, entry));\n\n        this.compositeIndicesPanel.add(entry);\n    },\n\n    getBricksGrid: function() {\n        this.usagesStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_getbrickusages'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"objectbrick\", \"field\"]\n        });\n\n        var usagesGrid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.usagesStore,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['gridfilters'],\n            width: 600,\n            columns: [\n                {text: t('objectbrick'), sortable: true, dataIndex: 'objectbrick', filter: 'string', flex: 1},\n                {text: t('field'), sortable: true, dataIndex: 'field', filter: 'string', flex: 1}\n            ],\n            viewConfig: {\n                forceFit: true\n            }\n        });\n        return usagesGrid;\n\n    },\n\n    addLayoutChild: function (type, initData, context) {\n\n        var nodeLabel = t(type);\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"layout\",\n            iconCls: pimcore.object.classes.layout[type].prototype.getIconClass(),\n            leaf: false,\n            expandable: false,\n            expanded: true,\n        };\n        newNode = this.appendChild(newNode);\n\n        //to hide or show the expanding icon depending if childs are available or not\n        newNode.addListener('remove', function(node, removedNode, isMove) {\n            if(!node.hasChildNodes()) {\n                node.set('expandable', false);\n            }\n        });\n        newNode.addListener('append', function(node) {\n            node.set('expandable', true);\n        });\n\n\n        var editor = new pimcore.object.classes.layout[type](newNode, initData);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    addNewDataChild: function (record, type, context) {\n        var node = this.addDataChild.bind(record, type, {}, context)();\n        node.getOwnerTree().getSelectionModel().select(node);\n        this.onTreeNodeClick(null, node);\n\n        var result = this.editpanel.query('field[name=name]');\n        if(result.length && typeof result[0]['focus'] == 'function') {\n            result[0].focus();\n        }\n    },\n\n    addDataChild: function (type, initData, context) {\n\n        var nodeLabel = '';\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"data\",\n            leaf: true,\n            iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n        };\n\n        if (type == \"localizedfields\" || type == \"block\") {\n            newNode.leaf = false;\n            newNode.expanded = true;\n            newNode.expandable = false;\n        }\n\n        newNode = this.appendChild(newNode);\n\n        var editor = new pimcore.object.classes.data[type](newNode, initData);\n        editor.setContext(context);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    changeDataType: function (tree, record, type, removeExisting, context) {\n        try {\n            this.saveCurrentNode();\n\n            var nodeLabel = record.data.text;\n\n            var theData = {};\n\n            theData.name = nodeLabel;\n            theData.datatype = \"data\";\n            theData.fieldtype = type;\n\n            if (!removeExisting) {\n                var matches = nodeLabel.match(/\\d+$/);\n\n                if (matches) {\n                    var number = matches[0];\n\n                    var numberLength = number.length;\n                    number = parseInt(number);\n                    number = number + 1;\n\n                    var l = nodeLabel.length;\n\n                    nodeLabel = nodeLabel.substring(0, l - numberLength);\n                } else {\n                    number = 1;\n                }\n                nodeLabel = nodeLabel + number;\n            }\n\n\n            var parentNode = record.parentNode;\n\n            var newNode = {\n                text: nodeLabel,\n                type: \"data\",\n                leaf: true,\n                iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n            };\n\n            newNode = parentNode.createNode(newNode);\n\n            if (!removeExisting) {\n                theData.name = nodeLabel;\n            }\n\n            var editor = new pimcore.object.classes.data[type](newNode, theData);\n            editor.setContext(context);\n            newNode = record.parentNode.insertBefore(newNode, record);\n\n            var availableFields = editor.availableSettingsFields;\n            for (var i = 0;  i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (record.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        editor.datax[field] = record.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor = editor;\n            newNode.data.editor.applySpecialData(record.data.editor);\n\n\n            if (removeExisting) {\n                parentNode.removeChild(record);\n\n            } else {\n                parentNode.insertBefore(record, newNode);\n            }\n\n            //newNode.select();\n            var f = this.onTreeNodeClick.bind(this, newNode.getOwnerTree(), newNode);\n            f();\n\n            var ownerTree = newNode.getOwnerTree();\n            var selModel = ownerTree.getSelectionModel();\n            selModel.select(newNode);\n\n\n            return newNode;\n        } catch (e) {\n         console.log(e);\n        }\n    },\n\n\n\n\n    removeChild: function (tree, record) {\n        if (this.id != 0) {\n            if (this.currentNode == record.data.editor) {\n                this.currentNode = null;\n                var rootNode = this.tree.getRootNode();\n                var f = this.onTreeNodeClick.bind(this, this.tree, rootNode);\n                f();\n            }\n            record.remove();\n        }\n    },\n\n    getNodeData: function (node) {\n\n        var data = {};\n\n        if (node.data.editor) {\n            if (typeof node.data.editor.getData == \"function\") {\n                data = node.data.editor.getData();\n\n                data.name = trim(data.name);\n\n                // field specific validation\n                var fieldValidation = true;\n                if(typeof node.data.editor.isValid == \"function\") {\n                    fieldValidation = node.data.editor.isValid();\n                }\n\n                var view = this.tree.getView();\n                // check if the name is unique, localizedfields can be used more than once\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n\n                var containerAwareDataName = data.name;\n                var parentNode = node.parentNode;\n                while (parentNode) {\n                    if (parentNode.data.editor && Ext.isFunction(parentNode.data.editor.getData)) {\n                        var parentData = parentNode.data.editor.getData();\n                        if (parentData.datatype == \"data\" && parentNode.data.editor.type == \"block\") {\n                            containerAwareDataName = \"block-\" + parentData.name + \"-\" + containerAwareDataName;\n                            break;\n                        }\n                    }\n\n                    parentNode = parentNode.parentNode;\n                }\n\n                if ((fieldValidation && in_arrayi(containerAwareDataName,this.usedFieldNames) == false) || data.name == \"localizedfields\" && data.fieldtype == \"localizedfields\") {\n\n                    if(data.datatype == \"data\") {\n                        this.usedFieldNames.push(containerAwareDataName);\n                    }\n\n                    if(nodeEl) {\n                        nodeEl.removeCls(\"tree_node_error\");\n                    }\n                }\n                else {\n                    if(nodeEl) {\n                        nodeEl.addCls(\"tree_node_error\");\n                    }\n\n                    var invalidFieldsText = t(\"class_field_name_error\") + \": '\" + data.name + \"'\";\n\n                    if(node.data.editor.invalidFieldNames){\n                        invalidFieldsText = t(\"reserved_field_names_error\")\n                            +(implode(',',node.data.editor.forbiddenNames));\n                    }\n\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"some_fields_cannot_be_saved\"), \"error\",\n                        invalidFieldsText);\n\n                    this.getDataSuccess = false;\n                    return false;\n                }\n            }\n        }\n\n        data.childs = null;\n        if (node.childNodes.length > 0) {\n            data.childs = [];\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                data.childs.push(this.getNodeData(node.childNodes[i]));\n            }\n        }\n\n        return data;\n    },\n\n    getData: function () {\n\n        this.getDataSuccess = true;\n\n        this.usedFieldNames = [];\n\n        var rootNode = this.tree.getRootNode();\n        var nodeData = this.getNodeData(rootNode);\n\n        return nodeData;\n    },\n\n    save: function () {\n\n        this.saveCurrentNode();\n\n        var isValidName = /^[a-zA-Z][a-zA-Z0-9]+$/;\n\n        if (this.data[\"name\"].length > 2 &&\n            isValidName.test(this.data[\"name\"]) &&\n            !in_arrayi(this.data[\"name\"], this.parentPanel.forbiddenNames)\n        ) {\n            delete this.data.layoutDefinitions;\n\n            var m = Ext.encode(this.getData());\n            var n = Ext.encode(this.data);\n\n            if (this.getDataSuccess) {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_class_save'),\n                    method: \"PUT\",\n                    params: {\n                        configuration: m,\n                        values: n,\n                        id: this.data.id\n                    },\n                    success: this.saveOnComplete.bind(this),\n                    failure: this.saveOnError.bind(this)\n                });\n            }\n        } else {\n            Ext.Msg.alert(' ', t('invalid_class_name'));\n        }\n    },\n\n    saveOnComplete: function (response) {\n\n        try {\n            var res = Ext.decode(response.responseText);\n            if(res.success) {\n                // refresh all class stores\n                this.parentPanel.tree.getStore().load();\n                pimcore.globalmanager.get(\"object_types_store\").load();\n                pimcore.globalmanager.get(\"object_types_store_create\").load();\n\n                // set the current modification date, to detect modifications on the class which are not made here\n                this.data.modificationDate = res['class'].modificationDate;\n\n                pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n            } else {\n                if (res.message) {\n                    pimcore.helpers.showNotification(t(\"error\"), res.message, \"error\");\n                } else {\n                    throw \"save was not successful, see log files in /var/log\";\n                }\n            }\n        } catch (e) {\n            this.saveOnError();\n        }\n\n    },\n\n    saveOnError: function () {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    },\n\n    onRefresh: function() {\n        this.parentPanel.getEditPanel().remove(this.panel);\n        this.reopen();\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.klass\");\npimcore.object.classes.klass = Class.create({\n\n    allowedInType: 'object',\n    disallowedDataTypes: [],\n    context: \"class\",\n    uploadRoute: 'pimcore_admin_dataobject_class_importclass',\n    exportRoute: 'pimcore_admin_dataobject_class_exportclass',\n\n    initialize: function (data, parentPanel, reopen, editorPrefix) {\n        this.parentPanel = parentPanel;\n        this.data = data;\n        this.editorPrefix = editorPrefix;\n        this.reopen = reopen;\n\n        this.addTree();\n        this.initLayoutFields();\n        this.addLayout();\n    },\n\n    getUploadUrl: function(){\n        return Routing.generate(this.uploadRoute, {id: this.getId()});\n    },\n\n    getExportUrl: function() {\n        return Routing.generate(this.exportRoute, {id: this.getId()});\n    },\n\n\n    addTree: function() {\n        this.tree = Ext.create('Ext.tree.Panel', {\n            region: \"west\",\n            width: 300,\n            split: true,\n            enableDD: true,\n            autoScroll: true,\n            root: {\n                id: \"0\",\n                root: true,\n                text: t(\"general_settings\"),\n                leaf: true,\n                iconCls: \"pimcore_icon_class\",\n                isTarget: true,\n                className: this.data.name\n            },\n            listeners: this.getTreeNodeListeners(),\n            viewConfig: {\n                plugins: {\n                    ptype: 'treeviewdragdrop',\n                    ddGroup: \"element\"\n                }\n            }\n        });\n        this.tree.getStore().setDefaultRootText(\"\");\n    },\n\n    addLayout: function () {\n\n        this.editpanel = new Ext.Panel({\n            region: \"center\",\n            bodyStyle: \"padding: 10px;\",\n            autoScroll: true\n        });\n\n        var displayId = this.data.key ? this.data.key : this.data.id; // because the field-collections use that also\n\n        var panelButtons = [];\n\n        panelButtons.push({\n            text: t(\"configure_custom_layouts\"),\n            iconCls: \"pimcore_icon_class pimcore_icon_overlay_add\",\n            hidden: (this instanceof pimcore.object.fieldcollections.field) || (this instanceof pimcore.object.objectbricks.field),\n            handler: this.configureCustomLayouts.bind(this)\n        });\n\n        panelButtons.push({\n            text: t('reload_definition'),\n            handler: this.onRefresh.bind(this),\n            iconCls: \"pimcore_icon_reload\"\n        });\n\n        panelButtons.push({\n            text: t(\"import\"),\n            iconCls: \"pimcore_icon_upload\",\n            handler: this.upload.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n        panelButtons.push({\n            text: t(\"export\"),\n            iconCls: \"pimcore_icon_download\",\n            handler: function() {\n                pimcore.helpers.download(this.getExportUrl());\n            }.bind(this)\n        });\n\n\n        panelButtons.push({\n            text: t(\"save\"),\n            iconCls: \"pimcore_icon_apply\",\n            handler: this.save.bind(this),\n            disabled: !this.data.isWriteable\n        });\n\n\n        var name = \"\";\n        if(this.data.name) {\n            name = this.data.name + \" ( ID: \" + displayId + \")\";\n        } else {\n            name = \"ID: \" + displayId;\n        }\n\n        this.panel = new Ext.Panel({\n            border: false,\n            layout: \"border\",\n            closable: true,\n            autoScroll: true,\n            title: name,\n            //id: \"pimcore_class_editor_panel_\" + this.getId(),\n            id: this.editorPrefix + this.getId(),\n            items: [\n                this.tree,\n                this.editpanel\n            ],\n            buttons: panelButtons\n        });\n\n\n        this.parentPanel.getEditPanel().add(this.panel);\n\n        this.editpanel.add(this.getRootPanel());\n        this.setCurrentNode(\"root\");\n        this.parentPanel.getEditPanel().setActiveTab(this.panel);\n\n        pimcore.layout.refresh();\n    },\n\n    configureCustomLayouts: function() {\n        try {\n            var dialog = new pimcore.object.helpers.customLayoutEditor(this.data);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getId: function(){\n        return  this.data.id;\n    },\n\n    upload: function() {\n\n        pimcore.helpers.uploadDialog(this.getUploadUrl(), \"Filedata\", function() {\n            Ext.Ajax.request({\n                url: Routing.generate('pimcore_admin_dataobject_class_get'),\n                params: {\n                    id: this.data.id\n                },\n                success: function(response) {\n                    this.data = Ext.decode(response.responseText);\n                    this.parentPanel.getEditPanel().removeAll();\n                    this.addTree();\n                    this.initLayoutFields();\n                    this.addLayout();\n                    pimcore.layout.refresh();\n                }.bind(this)\n            });\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    reload: function(response) {\n\n    },\n\n    initLayoutFields: function () {\n\n        if (this.data.layoutDefinitions) {\n            if (this.data.layoutDefinitions.childs) {\n                for (var i = 0; i < this.data.layoutDefinitions.childs.length; i++) {\n                    this.tree.getRootNode().appendChild(this.recursiveAddNode(this.data.layoutDefinitions.childs[i],\n                        this.tree.getRootNode()));\n                }\n                this.tree.getRootNode().expand();\n            }\n        }\n    },\n\n    recursiveAddNode: function (con, scope) {\n\n        var fn = null;\n        var newNode = null;\n\n        if (con.datatype == \"layout\") {\n            fn = this.addLayoutChild.bind(scope, con.fieldtype, con, this.context);\n        }\n        else if (con.datatype == \"data\") {\n            fn = this.addDataChild.bind(scope, con.fieldtype, con, this.context);\n        }\n\n        newNode = fn();\n\n        if (con.childs) {\n            for (var i = 0; i < con.childs.length; i++) {\n                this.recursiveAddNode(con.childs[i], newNode);\n            }\n        }\n\n        return newNode;\n    },\n\n\n    getTreeNodeListeners: function () {\n\n        var listeners = {\n            \"itemclick\" : this.onTreeNodeClick.bind(this),\n            \"itemcontextmenu\": this.onTreeNodeContextmenu.bind(this)\n        };\n        return listeners;\n    },\n\n\n\n    onTreeNodeClick: function (tree, record, item, index, e, eOpts ) {\n\n        try {\n            this.saveCurrentNode();\n        } catch (e) {\n            console.log(e);\n        }\n\n\n        try {\n            this.editpanel.removeAll();\n\n            if (record.data.editor) {\n\n                if (record.data.editor.datax.locked) {\n                    return;\n                }\n\n                this.editpanel.add(record.data.editor.getLayout());\n\n                this.setCurrentNode(record.data.editor);\n            }\n\n            if (record.data.root) {\n                this.editpanel.add(this.getRootPanel());\n                this.setCurrentNode(\"root\");\n            }\n\n            this.editpanel.updateLayout();\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    getDataMenu: function(tree, record, allowedTypes, parentType, editMode) {\n        // get available data types\n        var dataMenu = [];\n        var dataComps = Object.keys(pimcore.object.classes.data);\n        var parentRestrictions;\n        var groups = [];\n        var groupNames = [\"text\",\"numeric\",\"date\",\"select\",\"media\",\"relation\",\"geo\",\"crm\",\"structured\",\"other\"];\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            var dataComp = pimcore.object.classes.data[dataCompName];\n\n            // check for disallowed types\n            var allowed = false;\n\n            if('object' !== typeof dataComp) {\n                if (dataComp.prototype.allowIn[this.allowedInType]) {\n                    allowed = true;\n                }\n            }\n\n            if (!allowed) {\n                continue;\n            }\n\n\n            if (dataComps[i] != \"data\") { // class data is an abstract class => disallow\n                if (in_array(\"data\", allowedTypes[parentType]) || in_array(dataComps[i], allowedTypes[parentType]) ) {\n\n                    // check for restrictions from a parent field (eg. localized fields)\n                    if(in_array(\"data\", allowedTypes[parentType])) {\n                        parentRestrictions = this.getRestrictionsFromParent(record);\n                        if(parentRestrictions != null) {\n                            if(!in_array(dataComps[i], allowedTypes[parentRestrictions])) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    var group = pimcore.object.classes.data[dataComps[i]].prototype.getGroup();\n                    if (!groups[group]) {\n                        if (!in_array(group, groupNames)) {\n                            groupNames.push(group);\n                        }\n                        groups[group] = [];\n                    }\n                    var handler;\n                    if (editMode) {\n                        handler = this.changeDataType.bind(this, tree, record, dataComps[i], true, this.context);\n                    } else {\n                        handler = this.addNewDataChild.bind(this, record, dataComps[i], this.context);\n                    }\n\n                    groups[group].push({\n                        text: pimcore.object.classes.data[dataComps[i]].prototype.getTypeName(),\n                        iconCls: pimcore.object.classes.data[dataComps[i]].prototype.getIconClass(),\n                        handler: handler\n                    });\n                }\n            }\n        }\n\n        for (i = 0; i < groupNames.length; i++) {\n            if (groups[groupNames[i]] && groups[groupNames[i]].length > 0) {\n                dataMenu.push(new Ext.menu.Item({\n                    text: t(groupNames[i]),\n                    iconCls: \"pimcore_icon_data_group_\" + groupNames[i],\n                    hideOnClick: false,\n                    menu: groups[groupNames[i]]\n                }));\n            }\n        }\n        return dataMenu;\n    },\n\n\n    onTreeNodeContextmenu: function (tree, record, item, index, e, eOpts ) {\n        e.stopEvent();\n        tree.select();\n\n        var menu = new Ext.menu.Menu();\n\n        var allowedTypes = pimcore.object.helpers.layout.getAllowedTypes(this);\n\n        var dataComps = Object.keys(pimcore.object.classes.data);\n\n        for (var i = 0; i < dataComps.length; i++) {\n            var dataCompName = dataComps[i];\n            if ('object' === typeof pimcore.object.classes.data[dataCompName]) {\n                continue;\n            }\n            var component = pimcore.object.classes.data[dataCompName];\n            if(component.prototype.allowIn['localizedfield']) {\n                allowedTypes.localizedfields.push(dataCompName);\n            }\n\n            if(component.prototype.allowIn['block']) {\n                allowedTypes.block.push(dataCompName);\n            }\n        }\n\n\n        // the child-type \"data\" is a placehoder for all data components\n\n\n        var parentType = \"root\";\n\n        if (record.data.editor) {\n            parentType = record.data.editor.type;\n        }\n\n        var changeTypeAllowed = false;\n        if (record.data.type == \"data\") {\n            changeTypeAllowed = true;\n        }\n\n        var childsAllowed = false;\n        if (allowedTypes[parentType] && allowedTypes[parentType].length > 0) {\n            childsAllowed = true;\n        }\n\n        if (childsAllowed || changeTypeAllowed) {\n            // get available layouts\n            var layoutMenu = [];\n            var layouts = Object.keys(pimcore.object.classes.layout);\n\n            for (var i = 0; i < layouts.length; i++) {\n                if (layouts[i] != \"layout\") {\n                    if (in_array(layouts[i], allowedTypes[parentType])) {\n                        layoutMenu.push({\n                            text: pimcore.object.classes.layout[layouts[i]].prototype.getTypeName(),\n                            iconCls: pimcore.object.classes.layout[layouts[i]].prototype.getIconClass(),\n                            handler: function (record, type, context) {\n                                var newNode = this.addLayoutChild.bind(record, type, null, context)();\n                                newNode.getOwnerTree().getSelectionModel().select(newNode);\n                                this.onTreeNodeClick(null, newNode);\n                            }.bind(this, record, layouts[i], this.context)\n                        });\n                    }\n\n                }\n            }\n\n            var getDataMenu = this.getDataMenu.bind(this, tree, record);\n            var addDataMenu = getDataMenu(allowedTypes, parentType, false);\n\n            if (layoutMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_layout_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: layoutMenu\n                }));\n            }\n\n            if (addDataMenu.length > 0) {\n                menu.add(new Ext.menu.Item({\n                    text: t('add_data_component'),\n                    iconCls: \"pimcore_icon_add\",\n                    hideOnClick: false,\n                    menu: addDataMenu\n                }));\n            }\n\n            if (changeTypeAllowed) {\n                var changeDataMenu = getDataMenu(allowedTypes, record.parentNode.data.editor.type, true);\n                menu.add(new Ext.menu.Item({\n                    text: t('convert_to'),\n                    iconCls: \"pimcore_icon_convert\",\n                    hideOnClick: false,\n                    menu: changeDataMenu\n                }));\n            }\n\n            if (record.data.type == \"data\") {\n                menu.add(new Ext.menu.Item({\n                    text: t('clone'),\n                    iconCls: \"pimcore_icon_clone\",\n                    hideOnClick: true,\n                    handler: this.changeDataType.bind(this, tree, record, record.data.editor.type, false, this.context)\n                }));\n            }\n\n            menu.add(new Ext.menu.Item({\n                text: t('copy'),\n                iconCls: \"pimcore_icon_copy\",\n                hideOnClick: true,\n                handler: this.copyNode.bind(this, tree, record)\n            }));\n\n            if (childsAllowed) {\n                if (pimcore && pimcore.classEditor && pimcore.classEditor.clipboard) {\n                    menu.add(new Ext.menu.Item({\n                        text: t('paste'),\n                        iconCls: \"pimcore_icon_paste\",\n                        hideOnClick: true,\n                        handler: this.dropNode.bind(this, tree, record)\n                    }));\n                }\n            }\n        }\n\n        var deleteAllowed = true;\n\n        if (record.data.editor) {\n            if (record.data.editor.datax.locked) {\n                deleteAllowed = false;\n            }\n        }\n\n        if (this.id != 0 && deleteAllowed) {\n            menu.add(new Ext.menu.Item({\n                text: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: this.removeChild.bind(this, tree, record)\n            }));\n        }\n\n        menu.showAt(e.pageX, e.pageY);\n    },\n\n    getRestrictionsFromParent: function (node) {\n        if(node.data.editor.type == \"localizedfields\") {\n            return \"localizedfields\";\n        } else {\n            if(node.parentNode && node.parentNode.getDepth() > 0) {\n                var parentType = this.getRestrictionsFromParent(node.parentNode);\n                if(parentType != null) {\n                    return parentType;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    cloneNode:  function(tree, node) {\n        var theReference = this;\n        var nodeLabel = node.data.text;\n        var nodeType = node.data.type;\n\n        var config = {\n            text: nodeLabel,\n            type: nodeType,\n            leaf: node.data.leaf,\n            expanded: node.data.expanded\n        };\n\n\n        config.listeners = theReference.getTreeNodeListeners();\n\n        if (node.data.editor) {\n            config.iconCls = node.data.editor.getIconClass();\n        }\n\n        var newNode = node.createNode(config);\n\n        var theData = {};\n\n        if (node.data.editor) {\n            theData = Ext.apply(theData, node.data.editor.datax);\n        }\n\n        if (node.data.editor) {\n            var definitions = newNode.data.editor = pimcore.object.classes[nodeType];\n            var editorType = node.data.editor.type;\n            var editor = definitions[editorType];\n\n            newNode.data.editor = new editor(newNode, theData);\n        }\n\n        if (nodeType == \"data\") {\n            var availableFields = newNode.data.editor.availableSettingsFields;\n            for (var i = 0; i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (node.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        newNode.data.editor.datax[field] = node.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor.applySpecialData(node.data.editor);\n        }\n\n\n        var len = node.childNodes ? node.childNodes.length : 0;\n\n        var i = 0;\n\n        // Move child nodes across to the copy if required\n        for (i = 0; i < len; i++) {\n            var childNode = node.childNodes[i];\n            var clonedChildNode = this.cloneNode(tree, childNode);\n\n            newNode.appendChild(clonedChildNode);\n        }\n        return newNode;\n    },\n\n\n    copyNode: function(tree, record) {\n        if (!pimcore.classEditor) {\n            pimcore.classEditor = {};\n        }\n\n        var newNode = this.cloneNode(tree, record);\n        pimcore.classEditor.clipboard = newNode;\n\n    },\n\n    dropNode: function(tree, record) {\n        var node = pimcore.classEditor.clipboard;\n        var newNode = this.cloneNode(tree, node);\n\n        record.appendChild(newNode);\n        tree.updateLayout();\n    },\n\n\n    setCurrentNode: function (cn) {\n        this.currentNode = cn;\n    },\n\n    saveCurrentNode: function () {\n        if (this.currentNode) {\n            if (this.currentNode != \"root\") {\n                this.currentNode.applyData();\n            }  else {\n                // save root node data\n                var items = this.rootPanel.queryBy(function(item) {\n                    if (item == this.compositeIndicesPanel) {\n                        return false;\n                    }\n                    return true;\n                });\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    if (typeof item.getValue == \"function\") {\n                        let value = item.getValue();\n                        if (typeof item.config.xtype !== 'undefined' && item.config.xtype === 'textfield') {\n                            value = Ext.util.Format.htmlEncode(value);\n                        }\n\n                        this.data[item.name] = value;\n                    }\n                }\n\n                if (this.compositeIndicesPanel) {\n                    this.collectCompositeIndices();\n                }\n            }\n        }\n    },\n\n    collectCompositeIndices: function() {\n        var indexData = [];\n        for(let s=0; s<this.compositeIndicesPanel.items.items.length; s++) {\n            var entry = this.compositeIndicesPanel.items.items[s];\n            var items = entry.queryBy(function(item) {\n                return true;\n            });\n\n            var indexItem = {};\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n                if (typeof item.getValue == \"function\") {\n                    indexItem[item.name] = item.getValue();\n                }\n            }\n            indexData.push(indexItem);\n        }\n\n        this.data[\"compositeIndices\"] = indexData;\n    },\n\n    getRootPanel: function () {\n        this.allowInheritance = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_inherit\"),\n            name: \"allowInherit\",\n            checked: this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.allowVariants.setDisabled(false);\n                    } else {\n                        this.allowVariants.setValue(false);\n                        this.allowVariants.setDisabled(true);\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n\n        this.allowVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"allow_variants\"),\n            name: \"allowVariants\",\n            checked: this.data.allowVariants,\n            disabled: !this.data.allowInherit,\n            listeners: {\n                \"change\": function(field, checked) {\n                    if(checked == true) {\n                        this.showVariants.setDisabled(false);\n                    } else {\n                        this.showVariants.setValue(false);\n                        this.showVariants.setDisabled(true);\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.showVariants = new Ext.form.Checkbox({\n            fieldLabel: t(\"show_variants\"),\n            name: \"showVariants\",\n            checked: this.data.showVariants,\n            disabled: !this.data.allowInherit\n        });\n\n        var getPhpClassName = function (name) {\n            return \"Pimcore\\\\Model\\\\DataObject\\\\\" + ucfirst(name);\n        };\n\n        var iconStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_geticons'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"text\", \"value\"]\n        });\n\n        var iconField = new Ext.form.field.Text({\n            id: \"iconfield-\" + this.getId(),\n            name: \"icon\",\n            width: 396,\n            renderer: Ext.util.Format.htmlEncode,\n            value: this.data.icon,\n            listeners: {\n                \"afterrender\": function (el) {\n                    el.inputEl.applyStyles(\"background:url(\" + el.getValue() + \") right center no-repeat;\");\n                }\n            }\n        });\n\n        this.compositeIndexTypeStore = new Ext.data.ArrayStore({\n            data: [['query'], ['localized_query'],['store'], ['localized_store']],\n            fields: ['value']\n        });\n\n        var suggestedColumns = [];\n        var store = this.tree.getStore();\n        var data = store.getData();\n        for (let i = 0; i < data.items.length; i++) {\n            let record = data.items[i];\n            if (record.data.type == \"data\") {\n                suggestedColumns.push([record.data.text]);\n            }\n        }\n\n        this.tagstore = new Ext.data.ArrayStore({\n            data: suggestedColumns,\n            fields: ['value']\n        });\n\n        this.compositeIndicesPanel = new Ext.Panel({\n            autoScroll: true\n        });\n\n        this.rootPanel = new Ext.form.FormPanel({\n            title: '<b>' + t(\"general_settings\") + '</b>',\n            bodyStyle: 'padding: 10px;',\n            autoScroll: true,\n            defaults: {\n                labelWidth: 200\n            },\n            items: [\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"name\"),\n                    name: \"name\",\n                    width: 500,\n                    enableKeyEvents: true,\n                    value: this.data.name,\n                    renderer: Ext.util.Format.htmlEncode,\n                    listeners: {\n                        keyup: function (el) {\n                            this.rootPanel.getComponent(\"phpClassName\").setValue(getPhpClassName(el.getValue()))\n                        }.bind(this)\n                    }\n                },\n                {\n                    xtype: \"textarea\",\n                    fieldLabel: t(\"description\"),\n                    name: \"description\",\n                    width: 500,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.description\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"unique_identifier\"),\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.id,\n                    width: 500\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"PHP Class Name\"),\n                    name: \"phpClassName\",\n                    itemId: \"phpClassName\",\n                    width: 500,\n                    disabled: true,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: getPhpClassName(this.data.name)\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"parent_php_class\"),\n                    name: \"parentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.parentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    width: 600,\n                    name: \"implementsInterfaces\",\n                    fieldLabel: t(\"implements_interfaces\"),\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.implementsInterfaces\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"use_traits\"),\n                    name: \"useTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.useTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_parent_php_class\"),\n                    name: \"listingParentClass\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingParentClass\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"listing_use_traits\"),\n                    name: \"listingUseTraits\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.listingUseTraits\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"link_generator_reference\"),\n                    name: \"linkGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.linkGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_generator_reference\"),\n                    name: \"previewGeneratorReference\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewGeneratorReference\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"preview_url\"),\n                    name: \"previewUrl\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.previewUrl\n                },\n                {\n                    xtype: \"fieldcontainer\",\n                    layout: \"hbox\",\n                    fieldLabel: t(\"icon\"),\n                    defaults: {\n                        labelWidth: 200\n                    },\n                    items: [\n                        iconField,\n                        {\n                            xtype: \"combobox\",\n                            store: iconStore,\n                            width: 50,\n                            valueField: 'value',\n                            displayField: 'text',\n                            listeners: {\n                                select: function (ele, rec, idx) {\n                                    var icon = ele.container.down(\"#iconfield-\" + this.getId());\n                                    var newValue = rec.data.value;\n                                    icon.component.setValue(newValue);\n                                    icon.component.inputEl.applyStyles(\"background:url(\" + newValue + \") right center no-repeat;\");\n                                    return newValue;\n                                }.bind(this)\n                            }\n                        },\n                        {\n                            iconCls: \"pimcore_icon_refresh\",\n                            xtype: \"button\",\n                            tooltip: t(\"refresh\"),\n                            handler: function(iconField) {\n                                iconField.inputEl.applyStyles(\"background:url(\" + iconField.getValue() + \") right center no-repeat;\");\n                            }.bind(this, iconField)\n                        },\n                        {\n                            xtype: \"button\",\n                            iconCls: \"pimcore_icon_icons\",\n                            text: t('icon_library'),\n                            handler: function () {\n                                pimcore.helpers.openGenericIframeWindow(\"icon-library\", Routing.generate('pimcore_admin_misc_iconlist'), \"pimcore_icon_icons\", t(\"icon_library\"));\n                            }\n                        }\n                    ]\n                },\n                {\n                    xtype: \"textfield\",\n                    fieldLabel: t(\"group\"),\n                    name: \"group\",\n                    width: 600,\n                    renderer: Ext.util.Format.htmlEncode,\n                    value: this.data.group\n                },\n                this.allowInheritance,\n                this.allowVariants,\n                this.showVariants,\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"generate_type_declarations\"),\n                    name: \"generateTypeDeclarations\",\n                    checked: this.data.generateTypeDeclarations\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_applogger_tab\"),\n                    name: \"showAppLoggerTab\",\n                    checked: this.data.showAppLoggerTab\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"show_fieldlookup\"),\n                    name: \"showFieldLookup\",\n                    checked: this.data.showFieldLookup\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"enable_grid_locking\"),\n                    name: \"enableGridLocking\",\n                    checked: this.data.enableGridLocking\n                },\n                {\n                    xtype: \"checkbox\",\n                    fieldLabel: t(\"encrypt_data\"),\n                    name: \"encryption\",\n                    style: 'margin: 0',\n                    checked: this.data.encryption\n                },\n                {\n                    xtype: 'container',\n                    html: t('encrypt_data_description'),\n                    style: 'margin-bottom:10px'\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('visibility_of_system_properties') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.id\",\n                    checked: this.data.propertyVisibility.grid.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: \"ID (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.id\",\n                    checked: this.data.propertyVisibility.search.id\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.key\",\n                    checked: this.data.propertyVisibility.grid.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"key\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.key\",\n                    checked: this.data.propertyVisibility.search.key\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.path\",\n                    checked: this.data.propertyVisibility.grid.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"path\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.path\",\n                    checked: this.data.propertyVisibility.search.path\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.published\",\n                    checked: this.data.propertyVisibility.grid.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"published\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.published\",\n                    checked: this.data.propertyVisibility.search.published\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.modificationDate\",\n                    checked: this.data.propertyVisibility.grid.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"modificationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.modificationDate\",\n                    checked: this.data.propertyVisibility.search.modificationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"gridview\") + \")\",\n                    name: \"propertyVisibility.grid.creationDate\",\n                    checked: this.data.propertyVisibility.grid.creationDate\n                },\n                {\n                    xtype: \"checkbox\",\n                    boxLabel: t(\"creationDate\") + \" (\" + t(\"search\") + \")\",\n                    name: \"propertyVisibility.search.creationDate\",\n                    checked: this.data.propertyVisibility.search.creationDate\n                },\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('composite_indices') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                {\n                    xtype: 'button',\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: function () {\n                        this.addCompositeIndex();\n                    }.bind(this)\n                },\n                this.compositeIndicesPanel,\n                {\n                    xtype: \"displayfield\",\n                    hideLabel: true,\n                    width: 600,\n                    value: \"<b>\" + t('uses_these_bricks') + \"</b>\",\n                    cls: \"pimcore_extra_label_headline\"\n                },\n                this.getBricksGrid()\n\n            ]\n        });\n\n        if (this.data.compositeIndices) {\n            for (let i = 0; i < this.data.compositeIndices.length; i++) {\n                let indexData = this.data.compositeIndices[i];\n                this.addCompositeIndex(indexData);\n            }\n        }\n\n        this.rootPanel.on(\"afterrender\", function() {\n            this.usagesStore.reload();\n        }.bind(this));\n\n        return this.rootPanel;\n    },\n\n    addCompositeIndex: function(data) {\n        data = data || {};\n        var keyField = {\n            xtype: 'textfield',\n            name: \"index_key\",\n            fieldLabel: t(\"key\"),\n            labelWidth: 100,\n            width: 250,\n            value: data.index_key\n        };\n\n        var tagsField = new Ext.form.field.Tag({\n            name: \"index_columns\",\n            width:550,\n            resizable: true,\n            minChars: 2,\n            store: this.tagstore,\n            fieldLabel: t(\"columns\"),\n            value: data.columns,\n            draggable: true,\n            displayField: 'value',\n            valueField: 'value',\n            forceSelection: false,\n            delimiter: '\\x01',\n            createNewOnEnter: true,\n            componentCls: 'superselect-no-drop-down',\n            value: data.index_columns\n        });\n\n        var removeButton = new Ext.button.Button({\n            iconCls: \"pimcore_icon_minus\",\n            style: \"margin-left: 10px\"\n        });\n\n        var typeCombo = {\n            xtype: 'combo',\n            name: \"index_type\",\n            triggerAction: \"all\",\n            editable: true,\n            queryMode: 'local',\n            autoComplete: false,\n            forceSelection: true,\n            selectOnFocus: true,\n            fieldLabel: t(\"table\"),\n            store: this.compositeIndexTypeStore,\n            width: 250,\n            displayField: 'value',\n            valueField: 'value',\n            value: data.index_type ? data.index_type : \"query\",\n            labelWidth: 70,\n            style: \"margin-left: 10px\"\n        };\n\n        var keyEntry = new Ext.form.FieldContainer({\n            layout: 'hbox',\n            border: false,\n            items: [keyField, typeCombo, removeButton]\n        });\n\n\n        var entry = new Ext.form.FieldContainer({\n            layout: 'vbox',\n            border: false,\n            items: [keyEntry, tagsField]\n        });\n\n\n        removeButton.addListener(\"click\", function() {\n            this.compositeIndicesPanel.remove(entry);\n        }.bind(this, entry));\n\n        this.compositeIndicesPanel.add(entry);\n    },\n\n    getBricksGrid: function() {\n        this.usagesStore = new Ext.data.ArrayStore({\n            proxy: {\n                url: Routing.generate('pimcore_admin_dataobject_class_getbrickusages'),\n                type: 'ajax',\n                reader: {\n                    type: 'json'\n                },\n                extraParams: {\n                    classId: this.getId()\n                }\n            },\n            fields: [\"objectbrick\", \"field\"]\n        });\n\n        var usagesGrid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.usagesStore,\n            columnLines: true,\n            stripeRows: true,\n            plugins: ['gridfilters'],\n            width: 600,\n            columns: [\n                {text: t('objectbrick'), sortable: true, dataIndex: 'objectbrick', filter: 'string', flex: 1},\n                {text: t('field'), sortable: true, dataIndex: 'field', filter: 'string', flex: 1}\n            ],\n            viewConfig: {\n                forceFit: true\n            }\n        });\n        return usagesGrid;\n\n    },\n\n    addLayoutChild: function (type, initData, context) {\n\n        var nodeLabel = t(type);\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"layout\",\n            iconCls: pimcore.object.classes.layout[type].prototype.getIconClass(),\n            leaf: false,\n            expandable: false,\n            expanded: true,\n        };\n        newNode = this.appendChild(newNode);\n\n        //to hide or show the expanding icon depending if childs are available or not\n        newNode.addListener('remove', function(node, removedNode, isMove) {\n            if(!node.hasChildNodes()) {\n                node.set('expandable', false);\n            }\n        });\n        newNode.addListener('append', function(node) {\n            node.set('expandable', true);\n        });\n\n\n        var editor = new pimcore.object.classes.layout[type](newNode, initData);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    addNewDataChild: function (record, type, context) {\n        var node = this.addDataChild.bind(record, type, {}, context)();\n        node.getOwnerTree().getSelectionModel().select(node);\n        this.onTreeNodeClick(null, node);\n\n        var result = this.editpanel.query('field[name=name]');\n        if(result.length && typeof result[0]['focus'] == 'function') {\n            result[0].focus();\n        }\n    },\n\n    addDataChild: function (type, initData, context) {\n\n        var nodeLabel = '';\n\n        if (initData) {\n            if (initData.name) {\n                nodeLabel = initData.name;\n            }\n        }\n\n        var newNode = {\n            text: htmlspecialchars(nodeLabel),\n            type: \"data\",\n            leaf: true,\n            iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n        };\n\n        if (type == \"localizedfields\" || type == \"block\") {\n            newNode.leaf = false;\n            newNode.expanded = true;\n            newNode.expandable = false;\n        }\n\n        newNode = this.appendChild(newNode);\n\n        var editor = new pimcore.object.classes.data[type](newNode, initData);\n        editor.setContext(context);\n        newNode.set(\"editor\", editor);\n\n        this.expand();\n\n        return newNode;\n    },\n\n    changeDataType: function (tree, record, type, removeExisting, context) {\n        try {\n            this.saveCurrentNode();\n\n            var nodeLabel = record.data.text;\n\n            var theData = {};\n\n            theData.name = nodeLabel;\n            theData.datatype = \"data\";\n            theData.fieldtype = type;\n\n            if (!removeExisting) {\n                var matches = nodeLabel.match(/\\d+$/);\n\n                if (matches) {\n                    var number = matches[0];\n\n                    var numberLength = number.length;\n                    number = parseInt(number);\n                    number = number + 1;\n\n                    var l = nodeLabel.length;\n\n                    nodeLabel = nodeLabel.substring(0, l - numberLength);\n                } else {\n                    number = 1;\n                }\n                nodeLabel = nodeLabel + number;\n            }\n\n\n            var parentNode = record.parentNode;\n\n            var newNode = {\n                text: nodeLabel,\n                type: \"data\",\n                leaf: true,\n                iconCls: pimcore.object.classes.data[type].prototype.getIconClass()\n            };\n\n            newNode = parentNode.createNode(newNode);\n\n            if (!removeExisting) {\n                theData.name = nodeLabel;\n            }\n\n            var editor = new pimcore.object.classes.data[type](newNode, theData);\n            editor.setContext(context);\n            newNode = record.parentNode.insertBefore(newNode, record);\n\n            var availableFields = editor.availableSettingsFields;\n            for (var i = 0;  i < availableFields.length; i++) {\n                var field = availableFields[i];\n                if (record.data.editor.datax[field]) {\n                    if (field != \"name\") {\n                        editor.datax[field] = record.data.editor.datax[field];\n                    }\n                }\n            }\n\n            newNode.data.editor = editor;\n            newNode.data.editor.applySpecialData(record.data.editor);\n\n\n            if (removeExisting) {\n                parentNode.removeChild(record);\n\n            } else {\n                parentNode.insertBefore(record, newNode);\n            }\n\n            //newNode.select();\n            var f = this.onTreeNodeClick.bind(this, newNode.getOwnerTree(), newNode);\n            f();\n\n            var ownerTree = newNode.getOwnerTree();\n            var selModel = ownerTree.getSelectionModel();\n            selModel.select(newNode);\n\n\n            return newNode;\n        } catch (e) {\n         console.log(e);\n        }\n    },\n\n\n\n\n    removeChild: function (tree, record) {\n        if (this.id != 0) {\n            if (this.currentNode == record.data.editor) {\n                this.currentNode = null;\n                var rootNode = this.tree.getRootNode();\n                var f = this.onTreeNodeClick.bind(this, this.tree, rootNode);\n                f();\n            }\n            record.remove();\n        }\n    },\n\n    getNodeData: function (node) {\n\n        var data = {};\n\n        if (node.data.editor) {\n            if (typeof node.data.editor.getData == \"function\") {\n                data = node.data.editor.getData();\n\n                data.name = trim(data.name);\n\n                // field specific validation\n                var fieldValidation = true;\n                if(typeof node.data.editor.isValid == \"function\") {\n                    fieldValidation = node.data.editor.isValid();\n                }\n\n                var view = this.tree.getView();\n                // check if the name is unique, localizedfields can be used more than once\n                var nodeEl = Ext.fly(view.getNodeByRecord(node));\n\n                var containerAwareDataName = data.name;\n                var parentNode = node.parentNode;\n                while (parentNode) {\n                    if (parentNode.data.editor && Ext.isFunction(parentNode.data.editor.getData)) {\n                        var parentData = parentNode.data.editor.getData();\n                        if (parentData.datatype == \"data\" && parentNode.data.editor.type == \"block\") {\n                            containerAwareDataName = \"block-\" + parentData.name + \"-\" + containerAwareDataName;\n                            break;\n                        }\n                    }\n\n                    parentNode = parentNode.parentNode;\n                }\n\n                if ((fieldValidation && in_arrayi(containerAwareDataName,this.usedFieldNames) == false) || data.name == \"localizedfields\" && data.fieldtype == \"localizedfields\") {\n\n                    if(data.datatype == \"data\") {\n                        this.usedFieldNames.push(containerAwareDataName);\n                    }\n\n                    if(nodeEl) {\n                        nodeEl.removeCls(\"tree_node_error\");\n                    }\n                }\n                else {\n                    if(nodeEl) {\n                        nodeEl.addCls(\"tree_node_error\");\n                    }\n\n                    var invalidFieldsText = t(\"class_field_name_error\") + \": '\" + data.name + \"'\";\n\n                    if(node.data.editor.invalidFieldNames){\n                        invalidFieldsText = t(\"reserved_field_names_error\")\n                            +(implode(',',node.data.editor.forbiddenNames));\n                    }\n\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"some_fields_cannot_be_saved\"), \"error\",\n                        invalidFieldsText);\n\n                    this.getDataSuccess = false;\n                    return false;\n                }\n            }\n        }\n\n        data.childs = null;\n        if (node.childNodes.length > 0) {\n            data.childs = [];\n\n            for (var i = 0; i < node.childNodes.length; i++) {\n                data.childs.push(this.getNodeData(node.childNodes[i]));\n            }\n        }\n\n        return data;\n    },\n\n    getData: function () {\n\n        this.getDataSuccess = true;\n\n        this.usedFieldNames = [];\n\n        var rootNode = this.tree.getRootNode();\n        var nodeData = this.getNodeData(rootNode);\n\n        return nodeData;\n    },\n\n    save: function () {\n\n        this.saveCurrentNode();\n\n        var isValidName = /^[a-zA-Z][a-zA-Z0-9]+$/;\n\n        if (this.data[\"name\"].length > 2 &&\n            isValidName.test(this.data[\"name\"]) &&\n            !in_arrayi(this.data[\"name\"], this.parentPanel.forbiddenNames)\n        ) {\n            delete this.data.layoutDefinitions;\n\n            var m = Ext.encode(this.getData());\n            var n = Ext.encode(this.data);\n\n            if (this.getDataSuccess) {\n                Ext.Ajax.request({\n                    url: Routing.generate('pimcore_admin_dataobject_class_save'),\n                    method: \"PUT\",\n                    params: {\n                        configuration: m,\n                        values: n,\n                        id: this.data.id\n                    },\n                    success: this.saveOnComplete.bind(this),\n                    failure: this.saveOnError.bind(this)\n                });\n            }\n        } else {\n            Ext.Msg.alert(' ', t('invalid_class_name'));\n        }\n    },\n\n    saveOnComplete: function (response) {\n\n        try {\n            var res = Ext.decode(response.responseText);\n            if(res.success) {\n                // refresh all class stores\n                this.parentPanel.tree.getStore().load();\n                pimcore.globalmanager.get(\"object_types_store\").load();\n                pimcore.globalmanager.get(\"object_types_store_create\").load();\n\n                // set the current modification date, to detect modifications on the class which are not made here\n                this.data.modificationDate = res['class'].modificationDate;\n\n                pimcore.helpers.showNotification(t(\"success\"), t(\"saved_successfully\"), \"success\");\n            } else {\n                if (res.message) {\n                    pimcore.helpers.showNotification(t(\"error\"), res.message, \"error\");\n                } else {\n                    throw \"save was not successful, see log files in /var/log\";\n                }\n            }\n        } catch (e) {\n            this.saveOnError();\n        }\n\n    },\n\n    saveOnError: function () {\n        pimcore.helpers.showNotification(t(\"error\"), t(\"saving_failed\"), \"error\");\n    },\n\n    onRefresh: function() {\n        this.parentPanel.getEditPanel().remove(this.panel);\n        this.reopen();\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/object/classes/class.js"], "buggy_code_start_loc": [610], "buggy_code_end_loc": [887], "fixing_code_start_loc": [610], "fixing_code_end_loc": [907], "type": "CWE-79", "message": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-4084", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-10T12:15:07.817", "lastModified": "2021-12-13T19:28:35.923", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "pimcore es vulnerable a una Neutralizaci\u00f3n Inadecuada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.4, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.2.6", "matchCriteriaId": "E8D98DAD-EBC5-470A-9F38-2A963406010F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/3c2a14e676a57e5d77a16255965988eef48f9065", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/dcb37f19-ba53-4498-b953-d21999279266", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/3c2a14e676a57e5d77a16255965988eef48f9065"}}