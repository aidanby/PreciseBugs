{"buggy_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass UserController extends BaseController {\n\n\n    //\u6ce8\u518c\n    public function register(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $confirm_password = I(\"confirm_password\");\n        $v_code = I(\"v_code\");\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        if ($register_open === '0') {\n           $this->sendError(10101,\"\u7ba1\u7406\u5458\u5df2\u5173\u95ed\u6ce8\u518c\");\n           return ;\n        }\n        if (C('CloseVerify') || $v_code && $v_code == session('v_code') ) {\n        session('v_code',null) ;\n        if ( $password != '' && $password == $confirm_password) {\n\n            if(!D(\"User\")->checkDbOk()){\n                $this->sendError(100100,\"\u6570\u636e\u5e93\u8fde\u63a5\u4e0d\u4e0a\u3002\u8bf7\u786e\u4fdd\u5b89\u88c5\u4e86php-sqlite\u6269\u5c55\u4ee5\u53ca\u6570\u636e\u5e93\u6587\u4ef6Sqlite/showdoc.db.php\u53ef\u7528\");\n                return;\n            }\n\n            if ( ! D(\"User\")->isExist($username) ) {\n                $new_uid = D(\"User\")->register($username,$password);\n                if ($new_uid) {\n\n                    $create_sample = D(\"Options\")->get(\"create_sample\") ;\n                    //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n                    //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n                    $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n                    if ($create_sample !== '0' && strstr($config, \"'zh-cn',\") ) {\n                        //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n                        $this->_importSample($new_uid);\n                    }\n\n                    //\u8bbe\u7f6e\u81ea\u52a8\u767b\u5f55\n                    $ret = D(\"User\")->where(\"uid = '$new_uid' \")->find() ;\n                    unset($ret['password']);\n                    session(\"login_user\" , $ret );\n                    $token = D(\"UserToken\")->createToken($ret['uid']);\n                    cookie('cookie_token',$token,array('expire'=>60*60*24*90,'httponly'=>'httponly'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\n                  $this->sendResult(array(\n                    \"uid\" => $ret['uid'] ,\n                    \"username\" => $ret['username'] ,\n                    \"name\" => $ret['name'] ,\n                    \"groupid\" => $ret['groupid'] ,\n                    \"avatar\" => $ret['avatar'] ,\n                    \"avatar_small\" => $ret['avatar_small'] ,\n                    \"email\" => $ret['email'] ,\n                    \"email_verify\" => $ret['email_verify'] ,\n                    \"user_token\" => $token ,\n                )); \n\n                }else{\n                    $this->sendError(10101,'register fail');\n                }\n            }else{\n                $this->sendError(10101,L('username_exists'));\n            }\n\n        }else{\n            $this->sendError(10101,L('code_much_the_same'));\n        }\n        }else{\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n        }\n    }\n\n    //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n    private function _importSample($uid){\n        $this->_importZip(\"../Public/SampleZip/apidoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/databasedoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/teamdoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/spreadsheet.zip\" , $uid);\n    }\n\n    private function _importZip($file , $uid){\n        $zipArc = new \\ZipArchive();\n        $ret = $zipArc->open($file, \\ZipArchive::CREATE);\n        $info = $zipArc->getFromName(\"prefix_info.json\") ;\n        if ($info) {\n            $info_array = json_decode($info ,1 );\n            if ($info_array) {\n                D(\"Item\")->import( json_encode($info_array) , $uid );\n                return true;\n            }\n        }\n        return false ;\n    }\n\n    //\u767b\u5f55\n    public function login(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $v_code = I(\"v_code\");\n        if (!$password) {\n                $this->sendError(10206,\"no empty password\");\n                return;\n        }\n        //\u68c0\u67e5\u7528\u6237\u8f93\u9519\u5bc6\u7801\u7684\u6b21\u6570\u3002\u5982\u679c\u8d85\u8fc7\u4e00\u5b9a\u6b21\u6570\uff0c\u5219\u9700\u8981\u9a8c\u8bc1 \u9a8c\u8bc1\u7801\n        $key= 'login_fail_times_'.$username;\n        if(!D(\"VerifyCode\")->_check_times($key)){\n            if (!$v_code || $v_code != session('v_code')) {\n                $this->sendError(10206,L('verification_code_are_incorrect'));\n                return;\n            }\n        }\n        session('v_code',null) ;\n\n        if(!D(\"User\")->checkDbOk()){\n            $this->sendError(100100,\"\u6570\u636e\u5e93\u8fde\u63a5\u4e0d\u4e0a\u3002\u8bf7\u786e\u4fdd\u5b89\u88c5\u4e86php-sqlite\u6269\u5c55\u4ee5\u53ca\u6570\u636e\u5e93\u6587\u4ef6Sqlite/showdoc.db.php\u53ef\u7528\");\n            return;\n        }\n\n        $ret = D(\"User\")->checkLogin($username,$password);\n        //\u5982\u679c\u5931\u8d25\u5219\u5c1d\u8bd5ldap\u767b\u5f55\n        if (!$ret) {\n            $ret = D(\"User\")->checkLdapLogin($username,$password);\n        }\n        if ($ret) {\n            //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n            //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n            $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n\n            if (D(\"Item\")->count() < 1 && strstr($config, \"'zh-cn',\") ) {\n                //\u5982\u679c\u9879\u76ee\u8868\u662f\u7a7a\u7684\uff0c\u5219\u751f\u6210\u7cfb\u7edf\u793a\u4f8b\u9879\u76ee\n                $this->_importSample(1);\n            }\n          unset($ret['password']);\n          session(\"login_user\" , $ret );\n          D(\"User\")->setLastTime($ret['uid']);\n          $token = D(\"UserToken\")->createToken($ret['uid'],60*60*24*180);\n          cookie('cookie_token',$token,array('expire'=>60*60*24*180,'httponly'=>'httponly'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\n          $this->sendResult(array(\n            \"uid\" => $ret['uid'] ,\n            \"username\" => $ret['username'] ,\n            \"name\" => $ret['name'] ,\n            \"groupid\" => $ret['groupid'] ,\n            \"avatar\" => $ret['avatar'] ,\n            \"avatar_small\" => $ret['avatar_small'] ,\n            \"email\" => $ret['email'] ,\n            \"email_verify\" => $ret['email_verify'] ,\n            \"user_token\" => $token ,\n        ));              \n        }else{\n            D(\"VerifyCode\")->_ins_times($key);//\u8f93\u9519\u5bc6\u7801\u5219\u8bbe\u7f6e\u8f93\u9519\u6b21\u6570\n            \n            if(D(\"VerifyCode\")->_check_times($key)){\n                $error_code = 10204 ;\n            }else{\n                $error_code = 10210 ;\n            }\n            $this->sendError($error_code,L('username_or_password_incorrect'));\n            return;\n        }\n        \n    }\n    \n    //\u767b\u5f552\n    public function loginByVerify(){\n        $username = I(\"username\");\n        $password = I(\"password\");\n        $captcha_id = I(\"captcha_id\");\n        $captcha = I(\"captcha\");\n        \n        if ( !D(\"Captcha\")->check($captcha_id , $captcha) ) {\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n            return;\n        }\n        $ret = D(\"User\")->checkLogin($username,$password);\n        //\u5982\u679c\u5931\u8d25\u5219\u5c1d\u8bd5ldap\u767b\u5f55\n        if (!$ret) {\n            $ret = D(\"User\")->checkLdapLogin($username,$password);\n        }\n        \n        if ($ret) {\n            \n            //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n            //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n            $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n\n            if (D(\"Item\")->count() < 1 && strstr($config, \"'zh-cn',\") ) {\n                //\u5982\u679c\u9879\u76ee\u8868\u662f\u7a7a\u7684\uff0c\u5219\u751f\u6210\u7cfb\u7edf\u793a\u4f8b\u9879\u76ee\n                $this->_importSample(1);\n            }\n\n          unset($ret['password']);\n          session(\"login_user\" , $ret );\n          D(\"User\")->setLastTime($ret['uid']);\n          $token = D(\"UserToken\")->createToken($ret['uid'], 60*60*24*180);\n          $this->sendResult(array(\n            \"uid\" => $ret['uid'] ,\n            \"username\" => $ret['username'] ,\n            \"name\" => $ret['name'] ,\n            \"groupid\" => $ret['groupid'] ,\n            \"avatar\" => $ret['avatar'] ,\n            \"avatar_small\" => $ret['avatar_small'] ,\n            \"email\" => $ret['email'] ,\n            \"email_verify\" => $ret['email_verify'] ,\n            \"user_token\" => $token ,\n            )); \n\n        }else{\n            $this->sendError(10204,L('username_or_password_incorrect'));\n            return;\n        }\n        \n    }\n\n    //\u6ce8\u518c2\n    public function registerByVerify(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $confirm_password = I(\"confirm_password\");\n        $captcha_id = I(\"captcha_id\");\n        $captcha = I(\"captcha\");\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        if ($register_open === '0') {\n           $this->sendError(10101,\"\u7ba1\u7406\u5458\u5df2\u5173\u95ed\u6ce8\u518c\");\n           return ;\n        }\n        if ( !D(\"Captcha\")->check($captcha_id , $captcha) ) {\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n            return;\n        }\n        if ( $password != '' && $password == $confirm_password) {\n\n            if ( ! D(\"User\")->isExist($username) ) {\n                $new_uid = D(\"User\")->register($username,$password);\n                if ($new_uid) {\n\n                    $create_sample = D(\"Options\")->get(\"create_sample\") ;\n                    //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n                    //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n                    $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n                    if ($create_sample !== '0' && strstr($config, \"'zh-cn',\") ) {\n                        //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n                        $this->_importSample($new_uid);\n                    }\n\n                    //\u8bbe\u7f6e\u81ea\u52a8\u767b\u5f55\n                    $ret = D(\"User\")->where(\"uid = '$new_uid' \")->find() ;\n                    unset($ret['password']);\n                    session(\"login_user\" , $ret );\n                    $token = D(\"UserToken\")->createToken($ret['uid']);\n                    cookie('cookie_token',$token,array('expire'=>60*60*24*90,'httponly'=>'httponly'));//\u6b64\u5904\u7531\u670d\u52a1\u7aef\u63a7\u5236token\u662f\u5426\u8fc7\u671f\uff0c\u6240\u4ee5cookies\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e\u591a\u4e45\u90fd\u65e0\u6240\u8c13\n                    \n                    $this->sendResult(array(\n                        \"uid\" => $ret['uid'] ,\n                        \"username\" => $ret['username'] ,\n                        \"name\" => $ret['name'] ,\n                        \"groupid\" => $ret['groupid'] ,\n                        \"avatar\" => $ret['avatar'] ,\n                        \"avatar_small\" => $ret['avatar_small'] ,\n                        \"email\" => $ret['email'] ,\n                        \"user_token\" => $token ,\n                    ));\n\n                }else{\n                    $this->sendError(10101,'register fail');\n                }\n            }else{\n                $this->sendError(10101,L('username_exists'));\n            }\n\n        }else{\n            $this->sendError(10101,L('code_much_the_same'));\n        }\n\n    }\n\n    //\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n    public function info(){\n        $login_user = $this->checkLogin();\n        $uid = $login_user['uid'] ;\n        $field = \"uid,username,email,name,avatar,avatar_small,groupid\" ;\n        $info = D(\"User\")->where(\" uid = '$uid' \")->field($field)->find();\n        $this->sendResult($info); \n    }\n\n    //\u83b7\u53d6\u6240\u6709\u7528\u6237\u540d\n    public function allUser(){\n        $login_user = $this->checkLogin();\n        $uid = $login_user['uid'] ;\n        $username = I(\"username\");\n        $field = \"username , uid , name\" ;\n        if ($username) {\n            $username = \\SQLite3::escapeString($username) ;\n            $where = \" username like '%{$username}%'\" ;\n        }else{\n            $where = ' 1 = 1 ';\n        }\n        $info = D(\"User\")->where($where)->field($field)->select();\n        $this->sendResult($info); \n    }\n\n    //\u901a\u8fc7\u65e7\u5bc6\u7801\u9a8c\u8bc1\u6765\u66f4\u65b0\u7528\u6237\u5bc6\u7801\n    public function resetPassword(){\n        $login_user = $this->checkLogin();\n        $username = $login_user['username'];\n        $password = I(\"password\");\n        $new_password = I(\"new_password\");\n        $ret = D(\"User\")->checkLogin($username,$password);\n        if ($ret) {\n                $ret = D(\"User\")->updatePwd($login_user['uid'],$new_password);\n                if ($ret) {\n                    D(\"UserToken\")->where(\"  uid = '%d' \" ,array($login_user['uid']) )->delete();\n                    $this->sendResult(array());\n                }else{\n                    $this->sendError(10101,L('modify_faild'));\n                }\n\n        }else{  \n            $this->sendError(10101,L('old_password_incorrect'));\n        }\n    }\n    \n    //\u9000\u51fa\u767b\u5f55\n    public function logout(){\n        $login_user = $this->checkLogin();\n        D(\"UserToken\")->where(\" uid = '$login_user[uid]' \")->save(array(\"token_expire\"=>0));\n        session(\"login_user\" , NULL);\n        cookie('cookie_token',NULL);\n        session(null);\n        $this->sendResult(array());\n    }\n\n\n    public function updateInfo(){\n        $user = $this->checkLogin();\n        $uid = $user['uid'];\n        $name = I(\"name\");\n\n        D(\"User\")->where(\" uid = '$uid' \")->save(array(\"name\"=>$name));\n        $this->sendResult(array());\n\n    }\n\n    public function oauthInfo(){\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_entrance_tips = '';\n        if($oauth2_form){\n            $oauth2_form = json_decode($oauth2_form,1);\n            if($oauth2_form && $oauth2_form['entrance_tips']){\n                $oauth2_entrance_tips = $oauth2_form['entrance_tips'] ;\n            }\n        }\n        $this->sendResult(array(\n            \"oauth2_open\" => $oauth2_open ,\n            \"oauth2_entrance_tips\" => $oauth2_entrance_tips ,\n        ));\n\n    }\n\n\n\n\n}\n"], "fixing_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass UserController extends BaseController {\n\n\n    //\u6ce8\u518c\n    public function register(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $confirm_password = I(\"confirm_password\");\n        $v_code = I(\"v_code\");\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        if ($register_open === '0') {\n           $this->sendError(10101,\"\u7ba1\u7406\u5458\u5df2\u5173\u95ed\u6ce8\u518c\");\n           return ;\n        }\n        if (C('CloseVerify') || $v_code && $v_code == session('v_code') ) {\n        session('v_code',null) ;\n        if ( $password != '' && $password == $confirm_password) {\n\n            if(!D(\"User\")->checkDbOk()){\n                $this->sendError(100100,\"\u6570\u636e\u5e93\u8fde\u63a5\u4e0d\u4e0a\u3002\u8bf7\u786e\u4fdd\u5b89\u88c5\u4e86php-sqlite\u6269\u5c55\u4ee5\u53ca\u6570\u636e\u5e93\u6587\u4ef6Sqlite/showdoc.db.php\u53ef\u7528\");\n                return;\n            }\n\n            if ( ! D(\"User\")->isExist($username) ) {\n                $new_uid = D(\"User\")->register($username,$password);\n                if ($new_uid) {\n\n                    $create_sample = D(\"Options\")->get(\"create_sample\") ;\n                    //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n                    //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n                    $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n                    if ($create_sample !== '0' && strstr($config, \"'zh-cn',\") ) {\n                        //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n                        $this->_importSample($new_uid);\n                    }\n\n                    //\u8bbe\u7f6e\u81ea\u52a8\u767b\u5f55\n                    $ret = D(\"User\")->where(\"uid = '$new_uid' \")->find() ;\n                    unset($ret['password']);\n                    session(\"login_user\" , $ret );\n                    $token = D(\"UserToken\")->createToken($ret['uid']);\n                    if(version_compare(PHP_VERSION,'7.3.0','>')){\n                        setcookie('cookie_token',$token,array('expires'=>time()+60*60*24*180,'httponly'=>'httponly','samesite' => 'Strict','path'=>'/'));\n                      }else{\n                        cookie('cookie_token',$token,array('expire'=>60*60*24*180,'httponly'=>'httponly'));\n                    }\n                    $this->sendResult(array(\n                    \"uid\" => $ret['uid'] ,\n                    \"username\" => $ret['username'] ,\n                    \"name\" => $ret['name'] ,\n                    \"groupid\" => $ret['groupid'] ,\n                    \"avatar\" => $ret['avatar'] ,\n                    \"avatar_small\" => $ret['avatar_small'] ,\n                    \"email\" => $ret['email'] ,\n                    \"email_verify\" => $ret['email_verify'] ,\n                    \"user_token\" => $token ,\n                )); \n\n                }else{\n                    $this->sendError(10101,'register fail');\n                }\n            }else{\n                $this->sendError(10101,L('username_exists'));\n            }\n\n        }else{\n            $this->sendError(10101,L('code_much_the_same'));\n        }\n        }else{\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n        }\n    }\n\n    //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n    private function _importSample($uid){\n        $this->_importZip(\"../Public/SampleZip/apidoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/databasedoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/teamdoc.zip\" , $uid);\n        $this->_importZip(\"../Public/SampleZip/spreadsheet.zip\" , $uid);\n    }\n\n    private function _importZip($file , $uid){\n        $zipArc = new \\ZipArchive();\n        $ret = $zipArc->open($file, \\ZipArchive::CREATE);\n        $info = $zipArc->getFromName(\"prefix_info.json\") ;\n        if ($info) {\n            $info_array = json_decode($info ,1 );\n            if ($info_array) {\n                D(\"Item\")->import( json_encode($info_array) , $uid );\n                return true;\n            }\n        }\n        return false ;\n    }\n\n    //\u767b\u5f55\n    public function login(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $v_code = I(\"v_code\");\n        if (!$password) {\n                $this->sendError(10206,\"no empty password\");\n                return;\n        }\n        //\u68c0\u67e5\u7528\u6237\u8f93\u9519\u5bc6\u7801\u7684\u6b21\u6570\u3002\u5982\u679c\u8d85\u8fc7\u4e00\u5b9a\u6b21\u6570\uff0c\u5219\u9700\u8981\u9a8c\u8bc1 \u9a8c\u8bc1\u7801\n        $key= 'login_fail_times_'.$username;\n        if(!D(\"VerifyCode\")->_check_times($key)){\n            if (!$v_code || $v_code != session('v_code')) {\n                $this->sendError(10206,L('verification_code_are_incorrect'));\n                return;\n            }\n        }\n        session('v_code',null) ;\n\n        if(!D(\"User\")->checkDbOk()){\n            $this->sendError(100100,\"\u6570\u636e\u5e93\u8fde\u63a5\u4e0d\u4e0a\u3002\u8bf7\u786e\u4fdd\u5b89\u88c5\u4e86php-sqlite\u6269\u5c55\u4ee5\u53ca\u6570\u636e\u5e93\u6587\u4ef6Sqlite/showdoc.db.php\u53ef\u7528\");\n            return;\n        }\n\n        $ret = D(\"User\")->checkLogin($username,$password);\n        //\u5982\u679c\u5931\u8d25\u5219\u5c1d\u8bd5ldap\u767b\u5f55\n        if (!$ret) {\n            $ret = D(\"User\")->checkLdapLogin($username,$password);\n        }\n        if ($ret) {\n            //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n            //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n            $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n\n            if (D(\"Item\")->count() < 1 && strstr($config, \"'zh-cn',\") ) {\n                //\u5982\u679c\u9879\u76ee\u8868\u662f\u7a7a\u7684\uff0c\u5219\u751f\u6210\u7cfb\u7edf\u793a\u4f8b\u9879\u76ee\n                $this->_importSample(1);\n            }\n          unset($ret['password']);\n          session(\"login_user\" , $ret );\n          D(\"User\")->setLastTime($ret['uid']);\n          $token = D(\"UserToken\")->createToken($ret['uid'],60*60*24*180);\n          if(version_compare(PHP_VERSION,'7.3.0','>')){\n            setcookie('cookie_token',$token,array('expires'=>time()+60*60*24*180,'httponly'=>'httponly','samesite' => 'Strict','path'=>'/'));\n          }else{\n            cookie('cookie_token',$token,array('expire'=>60*60*24*180,'httponly'=>'httponly'));\n          }\n          $this->sendResult(array(\n            \"uid\" => $ret['uid'] ,\n            \"username\" => $ret['username'] ,\n            \"name\" => $ret['name'] ,\n            \"groupid\" => $ret['groupid'] ,\n            \"avatar\" => $ret['avatar'] ,\n            \"avatar_small\" => $ret['avatar_small'] ,\n            \"email\" => $ret['email'] ,\n            \"email_verify\" => $ret['email_verify'] ,\n            \"user_token\" => $token ,\n        ));              \n        }else{\n            D(\"VerifyCode\")->_ins_times($key);//\u8f93\u9519\u5bc6\u7801\u5219\u8bbe\u7f6e\u8f93\u9519\u6b21\u6570\n            \n            if(D(\"VerifyCode\")->_check_times($key)){\n                $error_code = 10204 ;\n            }else{\n                $error_code = 10210 ;\n            }\n            $this->sendError($error_code,L('username_or_password_incorrect'));\n            return;\n        }\n        \n    }\n    \n    //\u767b\u5f552\n    public function loginByVerify(){\n        $username = I(\"username\");\n        $password = I(\"password\");\n        $captcha_id = I(\"captcha_id\");\n        $captcha = I(\"captcha\");\n        \n        if ( !D(\"Captcha\")->check($captcha_id , $captcha) ) {\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n            return;\n        }\n        $ret = D(\"User\")->checkLogin($username,$password);\n        //\u5982\u679c\u5931\u8d25\u5219\u5c1d\u8bd5ldap\u767b\u5f55\n        if (!$ret) {\n            $ret = D(\"User\")->checkLdapLogin($username,$password);\n        }\n        \n        if ($ret) {\n            \n            //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n            //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n            $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n\n            if (D(\"Item\")->count() < 1 && strstr($config, \"'zh-cn',\") ) {\n                //\u5982\u679c\u9879\u76ee\u8868\u662f\u7a7a\u7684\uff0c\u5219\u751f\u6210\u7cfb\u7edf\u793a\u4f8b\u9879\u76ee\n                $this->_importSample(1);\n            }\n\n          unset($ret['password']);\n          session(\"login_user\" , $ret );\n          D(\"User\")->setLastTime($ret['uid']);\n          $token = D(\"UserToken\")->createToken($ret['uid'], 60*60*24*180);\n          $this->sendResult(array(\n            \"uid\" => $ret['uid'] ,\n            \"username\" => $ret['username'] ,\n            \"name\" => $ret['name'] ,\n            \"groupid\" => $ret['groupid'] ,\n            \"avatar\" => $ret['avatar'] ,\n            \"avatar_small\" => $ret['avatar_small'] ,\n            \"email\" => $ret['email'] ,\n            \"email_verify\" => $ret['email_verify'] ,\n            \"user_token\" => $token ,\n            )); \n\n        }else{\n            $this->sendError(10204,L('username_or_password_incorrect'));\n            return;\n        }\n        \n    }\n\n    //\u6ce8\u518c2\n    public function registerByVerify(){\n        $username = trim(I(\"username\"));\n        $password = I(\"password\");\n        $confirm_password = I(\"confirm_password\");\n        $captcha_id = I(\"captcha_id\");\n        $captcha = I(\"captcha\");\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        if ($register_open === '0') {\n           $this->sendError(10101,\"\u7ba1\u7406\u5458\u5df2\u5173\u95ed\u6ce8\u518c\");\n           return ;\n        }\n        if ( !D(\"Captcha\")->check($captcha_id , $captcha) ) {\n            $this->sendError(10206,L('verification_code_are_incorrect'));\n            return;\n        }\n        if ( $password != '' && $password == $confirm_password) {\n\n            if ( ! D(\"User\")->isExist($username) ) {\n                $new_uid = D(\"User\")->register($username,$password);\n                if ($new_uid) {\n\n                    $create_sample = D(\"Options\")->get(\"create_sample\") ;\n                    //\u83b7\u53d6\u540e\u53f0\u7684\u8bed\u8a00\u8bbe\u7f6e\n                    //\u8fd9\u662f\u4e2a\u5386\u53f2\u5305\u88b1\u3002\u56e0\u4e3a\u5b89\u88c5\u7684\u65f6\u5019\u8bed\u8a00\u8bbe\u7f6e\u6ca1\u6709\u5199\u5230API\u6a21\u5757\u7684\u914d\u7f6e\u4e0b\uff0c\u6240\u4ee5\u53ea\u80fd\u8bfb\u6587\u4ef6\u8bfb\u53d6Home\u6a21\u5feb\u7684\u914d\u7f6e\u6587\u4ef6\n                    $config = file_get_contents(\"./Application/Home/Conf/config.php\");\n                    if ($create_sample !== '0' && strstr($config, \"'zh-cn',\") ) {\n                        //\u5bfc\u5165\u793a\u4f8b\u9879\u76ee\n                        $this->_importSample($new_uid);\n                    }\n\n                    //\u8bbe\u7f6e\u81ea\u52a8\u767b\u5f55\n                    $ret = D(\"User\")->where(\"uid = '$new_uid' \")->find() ;\n                    unset($ret['password']);\n                    session(\"login_user\" , $ret );\n                    $token = D(\"UserToken\")->createToken($ret['uid']);\n                    if(version_compare(PHP_VERSION,'7.3.0','>')){\n                        setcookie('cookie_token',$token,array('expires'=>time()+60*60*24*180,'httponly'=>'httponly','samesite' => 'Strict','path'=>'/'));\n                      }else{\n                        cookie('cookie_token',$token,array('expire'=>60*60*24*180,'httponly'=>'httponly'));\n                    }                    \n                    $this->sendResult(array(\n                        \"uid\" => $ret['uid'] ,\n                        \"username\" => $ret['username'] ,\n                        \"name\" => $ret['name'] ,\n                        \"groupid\" => $ret['groupid'] ,\n                        \"avatar\" => $ret['avatar'] ,\n                        \"avatar_small\" => $ret['avatar_small'] ,\n                        \"email\" => $ret['email'] ,\n                        \"user_token\" => $token ,\n                    ));\n\n                }else{\n                    $this->sendError(10101,'register fail');\n                }\n            }else{\n                $this->sendError(10101,L('username_exists'));\n            }\n\n        }else{\n            $this->sendError(10101,L('code_much_the_same'));\n        }\n\n    }\n\n    //\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n    public function info(){\n        $login_user = $this->checkLogin();\n        $uid = $login_user['uid'] ;\n        $field = \"uid,username,email,name,avatar,avatar_small,groupid\" ;\n        $info = D(\"User\")->where(\" uid = '$uid' \")->field($field)->find();\n        $this->sendResult($info); \n    }\n\n    //\u83b7\u53d6\u6240\u6709\u7528\u6237\u540d\n    public function allUser(){\n        $login_user = $this->checkLogin();\n        $uid = $login_user['uid'] ;\n        $username = I(\"username\");\n        $field = \"username , uid , name\" ;\n        if ($username) {\n            $username = \\SQLite3::escapeString($username) ;\n            $where = \" username like '%{$username}%'\" ;\n        }else{\n            $where = ' 1 = 1 ';\n        }\n        $info = D(\"User\")->where($where)->field($field)->select();\n        $this->sendResult($info); \n    }\n\n    //\u901a\u8fc7\u65e7\u5bc6\u7801\u9a8c\u8bc1\u6765\u66f4\u65b0\u7528\u6237\u5bc6\u7801\n    public function resetPassword(){\n        $login_user = $this->checkLogin();\n        $username = $login_user['username'];\n        $password = I(\"password\");\n        $new_password = I(\"new_password\");\n        $ret = D(\"User\")->checkLogin($username,$password);\n        if ($ret) {\n                $ret = D(\"User\")->updatePwd($login_user['uid'],$new_password);\n                if ($ret) {\n                    D(\"UserToken\")->where(\"  uid = '%d' \" ,array($login_user['uid']) )->delete();\n                    $this->sendResult(array());\n                }else{\n                    $this->sendError(10101,L('modify_faild'));\n                }\n\n        }else{  \n            $this->sendError(10101,L('old_password_incorrect'));\n        }\n    }\n    \n    //\u9000\u51fa\u767b\u5f55\n    public function logout(){\n        $login_user = $this->checkLogin();\n        D(\"UserToken\")->where(\" uid = '$login_user[uid]' \")->save(array(\"token_expire\"=>0));\n        session(\"login_user\" , NULL);\n        cookie('cookie_token',NULL);\n        session(null);\n        $this->sendResult(array());\n    }\n\n\n    public function updateInfo(){\n        $user = $this->checkLogin();\n        $uid = $user['uid'];\n        $name = I(\"name\");\n\n        D(\"User\")->where(\" uid = '$uid' \")->save(array(\"name\"=>$name));\n        $this->sendResult(array());\n\n    }\n\n    public function oauthInfo(){\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_entrance_tips = '';\n        if($oauth2_form){\n            $oauth2_form = json_decode($oauth2_form,1);\n            if($oauth2_form && $oauth2_form['entrance_tips']){\n                $oauth2_entrance_tips = $oauth2_form['entrance_tips'] ;\n            }\n        }\n        $this->sendResult(array(\n            \"oauth2_open\" => $oauth2_open ,\n            \"oauth2_entrance_tips\" => $oauth2_entrance_tips ,\n        ));\n\n    }\n\n\n\n\n}\n"], "filenames": ["server/Application/Api/Controller/UserController.class.php"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [252], "fixing_code_start_loc": [45], "fixing_code_end_loc": [263], "type": "CWE-352", "message": "showdoc is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3776", "sourceIdentifier": "security@huntr.dev", "published": "2021-11-13T10:15:07.867", "lastModified": "2021-11-16T20:43:19.580", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "showdoc is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "showdoc es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:showdoc:showdoc:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.9.12", "matchCriteriaId": "041B2042-06C7-49B7-9FA1-36B75F724907"}]}]}], "references": [{"url": "https://github.com/star7th/showdoc/commit/67093c879a6563aa6ee08003177777d1975e2351", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/e0edf27d-437e-44fe-907a-df020f385304", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/star7th/showdoc/commit/67093c879a6563aa6ee08003177777d1975e2351"}}