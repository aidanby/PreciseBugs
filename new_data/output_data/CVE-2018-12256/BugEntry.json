{"buggy_code": ["<?php\n  if (isset($_POST['enable']) || isset($_POST['disable'])) {\n\n    try {\n      if (empty($_POST['vqmods'])) throw new Exception(language::translate('error_must_select_vqmods', 'You must select vQmods'));\n\n      foreach ($_POST['vqmods'] as $vqmod) {\n\n        if (!empty($_POST['enable'])) {\n          if (!is_file(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled')) continue;\n          rename(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled', FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml');\n        } else {\n          if (!is_file(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml')) continue;\n          rename(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml', FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled');\n        }\n      }\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n\n  if (isset($_POST['delete'])) {\n\n    try {\n      if (empty($_POST['vqmods'])) throw new Exception(language::translate('error_must_select_vqmods', 'You must select vQmods'));\n\n      foreach ($_POST['vqmods'] as $vqmod) {\n        unlink(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_BASENAME));\n      }\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n\n  if (isset($_POST['upload'])) {\n\n    try {\n      if (!isset($_FILES['vqmod']['tmp_name']) || !is_uploaded_file($_FILES['vqmod']['tmp_name'])) {\n        throw new Exception(language::translate('error_must_select_file_to_upload', 'You must select a file to upload'));\n      }\n\n      if (!in_array($_FILES['vqmod']['type'], array('text/xml', 'application/xml'))) {\n        throw new Exception(language::translate('error_must_provide_vqmod', 'You must provide a valid vQmod file'));\n      }\n\n      move_uploaded_file($_FILES['vqmod']['tmp_name'], FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. $_FILES['vqmod']['name']);\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n?>\n<h1><?php echo $app_icon; ?> <?php echo language::translate('title_vqmods', 'vQmods'); ?></h1>\n\n<?php echo functions::form_draw_form_begin('vqmods_form', 'post'); ?>\n\n  <table class=\"table table-striped table-hover data-table\">\n    <thead>\n      <tr>\n        <th><?php echo functions::draw_fonticon('fa-check-square-o fa-fw checkbox-toggle', 'data-toggle=\"checkbox-toggle\"'); ?></th>\n        <th></th>\n        <th><?php echo language::translate('title_file', 'File'); ?></th>\n        <th class=\"main\"><?php echo language::translate('title_name', 'Name'); ?></th>\n        <th class=\"text-center\"><?php echo language::translate('title_version', 'Version'); ?></th>\n        <th><?php echo language::translate('title_author', 'Author'); ?></th>\n        <th>&nbsp;</th>\n      </tr>\n    </thead>\n    <tbody>\n<?php\n  if ($vqmods = glob(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME . 'vqmod/xml/*.{xml,disabled}', GLOB_BRACE)) {\n    foreach ($vqmods as $vqmod) {\n      $filename = pathinfo($vqmod, PATHINFO_BASENAME);\n      $xml = simplexml_load_file($vqmod);\n      $enabled = preg_match('#\\.xml$#', $vqmod) ? true : false;\n?>\n    <tr class=\"<?php echo empty($enabled) ? 'semi-transparent' : null; ?>\">\n      <td><?php echo functions::form_draw_checkbox('vqmods['. $filename .']', $filename); ?></td>\n      <td><?php echo functions::draw_fonticon('fa-circle', 'style=\"color: '. ($enabled ? '#88cc44' : '#ff6644') .';\"'); ?></td>\n      <td><?php echo $filename; ?></td>\n      <td><?php echo $xml->id; ?></td>\n      <td><?php echo $xml->version; ?></td>\n      <td><?php echo $xml->author; ?></td>\n      <td><a href=\"<?php echo document::href_link(null, array('doc' => 'download', 'vqmod' => $filename), true); ?>\" title=\"<?php echo language::translate('title_download', 'Download'); ?>\"><?php echo functions::draw_fonticon('fa-download fa-lg'); ?></a></td>\n    </tr>\n<?php\n    }\n  }\n?>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td colspan=\"7\"><?php echo language::translate('title_vqmods', 'vQmods'); ?>: <?php echo count($vqmods); ?></td>\n      </tr>\n    </tfoot>\n  </table>\n\n  <?php if (count($vqmods)) { ?>\n  <p>\n    <span class=\"btn-group\">\n      <?php echo functions::form_draw_button('enable', language::translate('title_enable', 'Enable'), 'submit', '', 'on'); ?>\n      <?php echo functions::form_draw_button('disable', language::translate('title_disable', 'Disable'), 'submit', '', 'off'); ?>\n    </span>\n    <?php echo functions::form_draw_button('delete', language::translate('title_delete', 'Delete'), 'submit', 'onclick=\"'. htmlspecialchars('if(!confirm(\"'. language::translate('text_are_you_sure', 'Are you sure?') .'\")) return false;') .'\"', 'delete'); ?>\n  </p>\n  <?php } ?>\n\n<?php echo functions::form_draw_form_end(); ?>\n\n<?php echo functions::form_draw_form_begin('vqmod_form', 'post', '', true); ?>\n  <div class=\"form-group\" style=\"max-width: 320px;\">\n    <label><?php echo language::translate('title_upload_new_vqmod', 'Upload a New vQmod'); ?> (*.xml)</label>\n    <div class=\"input-group\">\n      <?php echo functions::form_draw_file_field('vqmod', 'accept=\"application/xml\"'); ?>\n      <span class=\"input-group-btn\"><?php echo functions::form_draw_button('upload', language::translate('title_upload', 'Upload'), 'submit'); ?></span>\n    </div>\n  </div>\n<?php echo functions::form_draw_form_end(); ?>"], "fixing_code": ["<?php\n  if (isset($_POST['enable']) || isset($_POST['disable'])) {\n\n    try {\n      if (empty($_POST['vqmods'])) throw new Exception(language::translate('error_must_select_vqmods', 'You must select vQmods'));\n\n      foreach ($_POST['vqmods'] as $vqmod) {\n\n        if (!empty($_POST['enable'])) {\n          if (!is_file(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled')) continue;\n          rename(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled', FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml');\n        } else {\n          if (!is_file(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml')) continue;\n          rename(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.xml', FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_FILENAME) .'.disabled');\n        }\n      }\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n\n  if (isset($_POST['delete'])) {\n\n    try {\n      if (empty($_POST['vqmods'])) throw new Exception(language::translate('error_must_select_vqmods', 'You must select vQmods'));\n\n      foreach ($_POST['vqmods'] as $vqmod) {\n        unlink(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($vqmod, PATHINFO_BASENAME));\n      }\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n\n  if (isset($_POST['upload'])) {\n\n    try {\n      if (!isset($_FILES['vqmod']['tmp_name']) || !is_uploaded_file($_FILES['vqmod']['tmp_name'])) {\n        throw new Exception(language::translate('error_must_select_file_to_upload', 'You must select a file to upload'));\n      }\n\n      $dom = new DOMDocument('1.0', 'UTF-8');\n\n      $xml = file_get_contents($_FILES['vqmod']['tmp_name']); // DOMDocument::load() does not support Windows paths so we use DOMDocument::loadXML()\n\n      if (!@$dom->loadXML($xml)) {\n        throw new Exception(language::translate('error_invalid_xml_file', 'Invalid XML file'));\n      }\n\n      if (!$dom->getElementsByTagName('modification')) {\n        throw new Exception(language::translate('error_xml_file_is_not_valid_vqmod', 'XML file is not a valid vQmod file'));\n      }\n\n      $filename = FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME .'vqmod/xml/'. pathinfo($_FILES['vqmod']['name'], PATHINFO_FILENAME) .'.xml';\n\n      if (is_file($filename)) {\n        unlink($filename);\n      }\n\n      move_uploaded_file($_FILES['vqmod']['tmp_name'], $filename);\n\n      notices::add('success', language::translate('success_changes_saved', 'Changes saved successfully'));\n      header('Location: '. document::ilink());\n      exit;\n\n    } catch (Exception $e) {\n      notices::add('errors', $e->getMessage());\n    }\n  }\n\n?>\n<h1><?php echo $app_icon; ?> <?php echo language::translate('title_vqmods', 'vQmods'); ?></h1>\n\n<?php echo functions::form_draw_form_begin('vqmods_form', 'post'); ?>\n\n  <table class=\"table table-striped table-hover data-table\">\n    <thead>\n      <tr>\n        <th><?php echo functions::draw_fonticon('fa-check-square-o fa-fw checkbox-toggle', 'data-toggle=\"checkbox-toggle\"'); ?></th>\n        <th></th>\n        <th><?php echo language::translate('title_file', 'File'); ?></th>\n        <th class=\"main\"><?php echo language::translate('title_name', 'Name'); ?></th>\n        <th class=\"text-center\"><?php echo language::translate('title_version', 'Version'); ?></th>\n        <th><?php echo language::translate('title_author', 'Author'); ?></th>\n        <th>&nbsp;</th>\n      </tr>\n    </thead>\n    <tbody>\n<?php\n  if ($vqmods = glob(FS_DIR_HTTP_ROOT . WS_DIR_HTTP_HOME . 'vqmod/xml/*.{xml,disabled}', GLOB_BRACE)) {\n    foreach ($vqmods as $vqmod) {\n      $filename = pathinfo($vqmod, PATHINFO_BASENAME);\n      $xml = simplexml_load_file($vqmod);\n      $enabled = preg_match('#\\.xml$#', $vqmod) ? true : false;\n?>\n    <tr class=\"<?php echo empty($enabled) ? 'semi-transparent' : null; ?>\">\n      <td><?php echo functions::form_draw_checkbox('vqmods['. $filename .']', $filename); ?></td>\n      <td><?php echo functions::draw_fonticon('fa-circle', 'style=\"color: '. ($enabled ? '#88cc44' : '#ff6644') .';\"'); ?></td>\n      <td><?php echo $filename; ?></td>\n      <td><?php echo $xml->id; ?></td>\n      <td><?php echo $xml->version; ?></td>\n      <td><?php echo $xml->author; ?></td>\n      <td><a href=\"<?php echo document::href_link(null, array('doc' => 'download', 'vqmod' => $filename), true); ?>\" title=\"<?php echo language::translate('title_download', 'Download'); ?>\"><?php echo functions::draw_fonticon('fa-download fa-lg'); ?></a></td>\n    </tr>\n<?php\n    }\n  }\n?>\n    </tbody>\n    <tfoot>\n      <tr>\n        <td colspan=\"7\"><?php echo language::translate('title_vqmods', 'vQmods'); ?>: <?php echo count($vqmods); ?></td>\n      </tr>\n    </tfoot>\n  </table>\n\n  <?php if (count($vqmods)) { ?>\n  <p>\n    <span class=\"btn-group\">\n      <?php echo functions::form_draw_button('enable', language::translate('title_enable', 'Enable'), 'submit', '', 'on'); ?>\n      <?php echo functions::form_draw_button('disable', language::translate('title_disable', 'Disable'), 'submit', '', 'off'); ?>\n    </span>\n    <?php echo functions::form_draw_button('delete', language::translate('title_delete', 'Delete'), 'submit', 'onclick=\"'. htmlspecialchars('if(!confirm(\"'. language::translate('text_are_you_sure', 'Are you sure?') .'\")) return false;') .'\"', 'delete'); ?>\n  </p>\n  <?php } ?>\n\n<?php echo functions::form_draw_form_end(); ?>\n\n<?php echo functions::form_draw_form_begin('vqmod_form', 'post', '', true); ?>\n  <div class=\"form-group\" style=\"max-width: 320px;\">\n    <label><?php echo language::translate('title_upload_new_vqmod', 'Upload a New vQmod'); ?> (*.xml)</label>\n    <div class=\"input-group\">\n      <?php echo functions::form_draw_file_field('vqmod', 'accept=\"application/xml\"'); ?>\n      <span class=\"input-group-btn\"><?php echo functions::form_draw_button('upload', language::translate('title_upload', 'Upload'), 'submit'); ?></span>\n    </div>\n  </div>\n<?php echo functions::form_draw_form_end(); ?>"], "filenames": ["public_html/admin/vqmods.app/vqmods.inc.php"], "buggy_code_start_loc": [52], "buggy_code_end_loc": [65], "fixing_code_start_loc": [52], "fixing_code_end_loc": [81], "type": "CWE-434", "message": "admin/vqmods.app/vqmods.inc.php in LiteCart before 2.1.3 allows remote authenticated attackers to upload a malicious file (resulting in remote code execution) by using the text/xml or application/xml Content-Type in a public_html/admin/?app=vqmods&doc=vqmods request.", "other": {"cve": {"id": "CVE-2018-12256", "sourceIdentifier": "cve@mitre.org", "published": "2018-08-16T20:29:01.813", "lastModified": "2018-10-12T17:25:04.997", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "admin/vqmods.app/vqmods.inc.php in LiteCart before 2.1.3 allows remote authenticated attackers to upload a malicious file (resulting in remote code execution) by using the text/xml or application/xml Content-Type in a public_html/admin/?app=vqmods&doc=vqmods request."}, {"lang": "es", "value": "admin/vqmods.app/vqmods.inc.php en LiteCart en versiones anteriores a la 2.1.3 permite que los atacantes autenticados suban un archivo malicioso (lo que resulta en una ejecuci\u00f3n remota de c\u00f3digo) utilizando text/xml o application/xml Content-Type en una petici\u00f3n public_html/admin/?app=vqmodsdoc=vqmods."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:litecart:litecart:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.3", "matchCriteriaId": "F50BEEC6-2236-4EBB-98CF-E343C1C2D888"}]}]}], "references": [{"url": "https://github.com/litecart/litecart/commit/2305368eb70a26cab34c772c9ae88787f4c3e669", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.litecart.net/download", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/litecart/litecart/commit/2305368eb70a26cab34c772c9ae88787f4c3e669"}}