{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.website\");\npimcore.settings.website = Class.create({\n\n    initialize:function () {\n\n        this.getTabPanel();\n    },\n\n\n    activate:function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_website_settings\");\n    },\n\n\n    getTabPanel:function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id:\"pimcore_website_settings\",\n                title: t('website_settings'),\n                iconCls: \"pimcore_icon_website_settings\",\n                border:false,\n                layout:\"fit\",\n                closable:true,\n                items:[this.getRowEditor()],\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_website_settings\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"settings_website\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor:function () {\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_settings_websitesettings');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url, ['id', 'name', 'type', 'language', 'data', 'siteId', 'creationDate', 'modificationDate'],\n            itemsPerPage\n        );\n\n        this.store.addListener('exception', function (proxy, response, operation) {\n                Ext.MessageBox.show({\n                    title: 'REMOTE EXCEPTION',\n                    msg: operation.getError(),\n                    icon: Ext.MessageBox.ERROR,\n                    buttons: Ext.Msg.OK\n                });\n            }\n        );\n        this.store.setAutoSync(true);\n\n        this.filterField = new Ext.form.TextField({\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents:true,\n            listeners:{\n                \"keydown\":function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        this.languagestore = [[\"\",t(\"none\")]];\n        let websiteLanguages = pimcore.settings.websiteLanguages;\n        let selectContent = \"\";\n        for (let i=0; i<websiteLanguages.length; i++) {\n            selectContent = pimcore.available_languages[websiteLanguages[i]] + \" [\" + websiteLanguages[i] + \"]\";\n            this.languagestore.push([websiteLanguages[i], selectContent]);\n        }\n\n        var typesColumns = [\n            {\n                text: t(\"type\"),\n                dataIndex: 'type',\n                editable: false,\n                flex: 20,\n                renderer: this.getTypeRenderer.bind(this),\n                sortable: true\n            },\n            {\n                text: t(\"name\"),\n                dataIndex: 'name',\n                flex: 100,\n                editable: true,\n                sortable: true,\n                editor: new Ext.form.TextField({})\n            },\n            {\n                text: t('language'),\n                sortable: true,\n                dataIndex: \"language\",\n                editor: new Ext.form.ComboBox({\n                    store: this.languagestore,\n                    mode: \"local\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }),\n                flex: 50\n            },\n            {\n                text: t(\"value\"),\n                dataIndex: 'data',\n                flex: 300,\n                editable: true,\n                editor: new Ext.form.TextField({}),\n                renderer: this.getCellRenderer.bind(this),\n            },\n            {text: t(\"site\"), flex: 100, sortable:true, dataIndex: \"siteId\",\n                editor: new Ext.form.ComboBox({\n                    store: pimcore.globalmanager.get(\"sites\"),\n                    valueField: \"id\",\n                    displayField: \"domain\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }),\n                renderer: function (siteId) {\n                    var store = pimcore.globalmanager.get(\"sites\");\n                    var pos = store.findExact(\"id\", siteId);\n                    if (pos >= 0) {\n                        return store.getAt(pos).get(\"domain\");\n                    }\n                    return null;\n                }\n            }\n            ,\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n            ,\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n            ,\n            {\n                xtype:'actioncolumn',\n                menuText:t('empty'),\n                width:40,\n                tooltip:t('empty'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/full_trash.svg\",\n                handler:function (grid, rowIndex) {\n                    grid.getStore().getAt(rowIndex).set(\"data\",\"\");\n                }.bind(this)\n\n            }\n            ,\n            {\n                xtype:'actioncolumn',\n                menuText: t('delete'),\n                width:40,\n                tooltip:t('delete'),\n                icon:\"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler:function (grid, rowIndex) {\n                    let data = grid.getStore().getAt(rowIndex);\n                    pimcore.helpers.deleteConfirm(t('website_settings'), data.data.name, function () {\n                        grid.getStore().removeAt(rowIndex);\n                    }.bind(this));\n                }.bind(this)\n            }\n        ];\n\n\n        var propertyTypes = new Ext.data.SimpleStore({\n            fields: ['id', 'name'],\n            data: [\n                [\"text\", \"Text\"],\n                [\"document\", \"Document\"],\n                [\"asset\", \"Asset\"],\n                [\"object\", \"Object\"],\n                [\"bool\", \"Checkbox\"]\n            ]\n        });\n\n        this.customKeyField = new Ext.form.TextField({\n            name: 'key',\n            emptyText: t('key')\n        });\n\n        var customType = new Ext.form.ComboBox({\n            fieldLabel: t('type'),\n            name: \"type\",\n            valueField: \"id\",\n            displayField:'name',\n            store: propertyTypes,\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            listWidth: 200,\n            hideLabel: true,\n            emptyText: t('type')\n        });\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(el, e) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        if (cm[i].dataIndex === 'data') {\n                            let editor = this.getCellEditor(e.record);\n                            if (editor) {\n                                e.grid.columns[i].setEditor(editor);\n                            }\n\n                            break;\n                        }\n                    }\n\n                    var editorRow = el.editor.body;\n                    editorRow.rowIdx = e.rowIdx;\n                    // add dnd support\n                    var dd = new Ext.dd.DropZone(editorRow, {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function(e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver : function(elementType, node, dragZone, e, data ) {\n                            if (data.records.length == 1) {\n                                var record = data.records[0];\n                                var data = record.data;\n\n                                if (data.elementType == elementType) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                }\n                            }\n\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n                        }.bind(this, e.record.get('type')),\n\n                        onNodeDrop : function(elementType, node, dragZone, e, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (data.elementType == elementType) {\n                                        Ext.getCmp('valueEditor').setValue(data.path);\n                                        return true;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return false;\n                        }.bind(this, e.record.get('type'))\n                    });\n                }.bind(this),\n                delay: 1\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame:false,\n            autoScroll:true,\n            store:this.store,\n            columnLines:true,\n            trackMouseOver:true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows:true,\n            columns : {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            sm:  Ext.create('Ext.selection.RowModel', {}),\n            bbar:this.pagingtoolbar,\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        xtype: \"tbtext\",\n                        text: t('add_setting') + \" \"\n                    },\n                    this.customKeyField, customType,\n                    {\n                        xtype: \"button\",\n                        handler: this.addSetFromUserDefined.bind(this, this.customKeyField, customType),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    '->',\n                    {\n                        text:t(\"filter\") + \"/\" + t(\"search\"),\n                        xtype:\"tbtext\",\n                        style:\"margin: 0 10px 0 0;\"\n                    },\n                    this.filterField\n                ]\n            },\n            viewConfig: {\n                listeners: {\n                    rowupdated: this.updateRows.bind(this, \"rowupdated\"),\n                    refresh: this.updateRows.bind(this, \"refresh\")\n                },\n                forceFit:true,\n                xtype: 'patchedgridview'\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n        this.grid.on(\"afterrender\", function() {\n            this.setAutoScroll(true);\n        });\n\n        this.store.load();\n\n        return this.grid;\n    },\n\n    getTypeRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n\n        return '<div class=\"pimcore_icon_' + value + '\" data-id=\"' + record.get(\"id\") + '\">&nbsp;</div>';\n    },\n\n    getCellEditor: function (record) {\n        let data = record.data;\n\n        let type = data.type;\n        let property;\n\n        if (type === \"text\") {\n            property = {\n                xtype: 'textfield',\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"textarea\") {\n            property = {\n                xtype: \"textarea\",\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"document\" || type == \"asset\" || type == \"object\") {\n            property = {\n                xtype: 'textfield',\n                editable: false,\n                id: 'valueEditor',\n                fieldCls: \"input_drop_target\",\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"date\") {\n            property = Ext.create('Ext.form.field.Date', {\n                format: \"Y-m-d\"\n            });\n        } else if (type == \"checkbox\" || type == \"bool\") {\n            property =  {\n                xtype: 'checkbox',\n                flex: 1,\n            }\n        } else if (type == \"select\") {\n            var config = data.config;\n            property =  Ext.create('Ext.form.ComboBox', {\n                triggerAction: 'all',\n                editable: false,\n                store: config.split(\",\"),\n                flex: 1,\n            });\n        }\n\n        return property;\n    },\n\n    updateRows: function (event) {\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n            try {\n                var propertyName = Ext.get(rows[i]).query(\".x-grid-cell-first div div\")[0].getAttribute(\"data-id\");\n                var storeIndex = this.grid.getStore().find(\"id\", propertyName);\n\n                var record = this.grid.getStore().getAt(storeIndex);\n                var data = record.data;\n\n                if (data.type == \"document\" || data.type == \"asset\" || data.type == \"object\") {\n\n                    // add dnd support\n                    var dd = new Ext.dd.DropZone(rows[i], {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function(e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver : function(elementType, node, dragZone, e, data ) {\n                            if (data.records.length == 1) {\n                                var record = data.records[0];\n                                var data = record.data;\n\n                                if (data.elementType == elementType) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                }\n                            }\n\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n                        }.bind(this, data.type),\n\n                        onNodeDrop : function(storeIndex, targetNode, dragZone, e, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n                                    var rec = this.grid.getStore().getAt(storeIndex);\n                                    rec.set(\"data\", data.path);\n\n                                    this.updateRows();\n\n                                    return true;\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return false;\n                        }.bind(this, storeIndex)\n                    });\n                }\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n    },\n\n    getCellRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n\n        var data = record.data;\n        var type = data.type;\n\n        if (!value) {\n            value = \"\";\n        }\n\n        if (type == \"document\" || type == \"asset\" || type == \"object\") {\n            return '<div class=\"pimcore_property_droptarget\">' + value + '</div>';\n        } else if (type == \"bool\") {\n            if (value) {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn x-grid-checkcolumn-checked\" style=\"\"></div></div>';\n            } else {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn\" style=\"\"></div></div>';\n            }\n        }\n\n        return Ext.util.Format.htmlEncode(value);\n    },\n\n    addSetFromUserDefined: function (customKey, customType) {\n        if(in_array(customKey.getValue(), this.disallowedKeys)) {\n            Ext.MessageBox.alert(t(\"error\"), t(\"name_is_not_allowed\"));\n        }\n        this.add(customKey.getValue(), customType.getValue(), false, false, false, true);\n        this.customKeyField.setValue(null);\n    },\n\n\n    add: function (key, type, value, config, inherited, inheritable) {\n\n        var store = this.grid.getStore();\n\n        //this.cellEditing.editors.each(Ext.destroy, Ext);\n        //this.cellEditing.editors.clear();\n\n        // check for duplicate name\n        var dublicateIndex = store.findBy(function (key, record, id) {\n            if (record.get(\"name\").toLowerCase() == key.toLowerCase()) {\n                return true;\n            }\n            return false;\n        }.bind(this, key));\n\n\n        if (dublicateIndex >= 0) {\n            if (store.getAt(dublicateIndex).data.inherited == false) {\n                Ext.MessageBox.alert(t(\"error\"), t(\"name_already_in_use\"));\n                return;\n            }\n        }\n\n        // check for empty key & type\n        if (key.length < 2 || !type || type.length < 1) {\n            Ext.MessageBox.alert(t(\"error\"), t(\"name_and_key_must_be_defined\"));\n            return;\n        }\n\n\n        if (!value) {\n            if (type == \"bool\") {\n                value = true;\n            }\n            if (type == \"document\" || type == \"asset\" || type == \"object\") {\n                value = \"\";\n            }\n            if (type == \"text\") {\n                value = \"\";\n            }\n            value = \"\";\n        }\n\n        let res = store.add({\n            name: key,\n            data: value,\n            type: type\n        });\n\n        this.rowEditing.completeEdit();\n        this.rowEditing.startEdit(res[0], 1);\n    }\n\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\NotFoundException;\n\n/**\n * @method \\Pimcore\\Model\\WebsiteSetting\\Dao getDao()\n * @method void save()\n */\nfinal class WebsiteSetting extends AbstractModel\n{\n    /**\n     * @var int|null\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $language;\n\n    /**\n     * @var string\n     */\n    protected $type;\n\n    /**\n     * @var mixed\n     */\n    protected $data;\n\n    /**\n     * @var int|null\n     */\n    protected $siteId;\n\n    /**\n     * @var int|null\n     */\n    protected $creationDate;\n\n    /**\n     * @var int|null\n     */\n    protected $modificationDate;\n\n    /**\n     * this is a small per request cache to know which website setting is which is, this info is used in self::getByName()\n     *\n     * @var array\n     */\n    protected static $nameIdMappingCache = [];\n\n    /**\n     * @param string $name\n     * @param int|null $siteId\n     * @param string|null $language\n     *\n     * @return string\n     */\n    protected static function getCacheKey($name, $siteId = null, $language = null): string\n    {\n        return $name . '~~~' . $siteId . '~~~' . $language;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return self|null\n     */\n    public static function getById($id)\n    {\n        $cacheKey = 'website_setting_' . $id;\n\n        try {\n            $setting = \\Pimcore\\Cache\\RuntimeCache::get($cacheKey);\n            if (!$setting) {\n                throw new \\Exception('Website setting in registry is null');\n            }\n        } catch (\\Exception $e) {\n            try {\n                $setting = new self();\n                $setting->getDao()->getById((int)$id);\n                \\Pimcore\\Cache\\RuntimeCache::set($cacheKey, $setting);\n            } catch (NotFoundException $e) {\n                return null;\n            }\n        }\n\n        return $setting;\n    }\n\n    /**\n     * @param string $name name of the config\n     * @param int|null $siteId site ID\n     * @param string|null $language language, if property cannot be found the value of property without language is returned\n     * @param string|null $fallbackLanguage fallback language\n     *\n     * @return WebsiteSetting|null\n     *\n     * @throws \\Exception\n     */\n    public static function getByName($name, $siteId = null, $language = null, $fallbackLanguage = null)\n    {\n        $nameCacheKey = static::getCacheKey($name, $siteId, $language);\n\n        // check if pimcore already knows the id for this $name, if yes just return it\n        if (array_key_exists($nameCacheKey, self::$nameIdMappingCache)) {\n            return self::getById(self::$nameIdMappingCache[$nameCacheKey]);\n        }\n\n        // create a tmp object to obtain the id\n        $setting = new self();\n\n        try {\n            $setting->getDao()->getByName($name, $siteId, $language);\n        } catch (NotFoundException $e) {\n            if ($language != $fallbackLanguage) {\n                $result = self::getByName($name, $siteId, $fallbackLanguage, $fallbackLanguage);\n\n                return $result;\n            }\n\n            return null;\n        }\n\n        // to have a singleton in a way. like all instances of Element\\ElementInterface do also, like DataObject\\AbstractObject\n        if ($setting->getId() > 0) {\n            // add it to the mini-per request cache\n            self::$nameIdMappingCache[$nameCacheKey] = $setting->getId();\n\n            return self::getById($setting->getId());\n        }\n\n        return $setting;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = (int) $id;\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param int $creationDate\n     *\n     * @return $this\n     */\n    public function setCreationDate($creationDate)\n    {\n        $this->creationDate = (int) $creationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getCreationDate()\n    {\n        return $this->creationDate;\n    }\n\n    /**\n     * @param mixed $data\n     *\n     * @return $this\n     */\n    public function setData($data)\n    {\n        if ($data instanceof ElementInterface) {\n            $this->setType(Service::getElementType($data));\n            $data = $data->getId();\n        }\n\n        $this->data = $data;\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getData()\n    {\n        // lazy-load data of type asset, document, object\n        if (in_array($this->getType(), ['document', 'asset', 'object']) && !$this->data instanceof ElementInterface && is_numeric($this->data)) {\n            return Element\\Service::getElementById($this->getType(), $this->data);\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param int $modificationDate\n     *\n     * @return $this\n     */\n    public function setModificationDate($modificationDate)\n    {\n        $this->modificationDate = (int) $modificationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getModificationDate()\n    {\n        return $this->modificationDate;\n    }\n\n    /**\n     * @param int $siteId\n     *\n     * @return $this\n     */\n    public function setSiteId($siteId)\n    {\n        $this->siteId = (int) $siteId;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getSiteId()\n    {\n        return $this->siteId;\n    }\n\n    /**\n     * enum('text','document','asset','object','bool')\n     *\n     * @param string $type\n     *\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    /**\n     * enum('text','document','asset','object','bool')\n     *\n     * @return string\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLanguage()\n    {\n        return $this->language;\n    }\n\n    /**\n     * @param string $language\n     */\n    public function setLanguage($language)\n    {\n        $this->language = $language;\n    }\n\n    /**\n     * @internal\n     */\n    public function clearDependentCache()\n    {\n        \\Pimcore\\Cache::clearTag('website_config');\n    }\n\n    public function delete(): void\n    {\n        $nameCacheKey = self::getCacheKey($this->getName(), $this->getSiteId(), $this->getLanguage());\n\n        // Remove cached element to avoid returning it with e.g. getByName() after if it is deleted\n        if (array_key_exists($nameCacheKey, self::$nameIdMappingCache)) {\n            unset(self::$nameIdMappingCache[$nameCacheKey]);\n        }\n\n        $this->getDao()->delete();\n    }\n}\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.website\");\npimcore.settings.website = Class.create({\n\n    initialize:function () {\n\n        this.getTabPanel();\n    },\n\n    activate:function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_website_settings\");\n    },\n\n    getTabPanel:function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id:\"pimcore_website_settings\",\n                title: t('website_settings'),\n                iconCls: \"pimcore_icon_website_settings\",\n                border:false,\n                layout:\"fit\",\n                closable:true,\n                items:[this.getRowEditor()],\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_website_settings\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"settings_website\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor:function () {\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_settings_websitesettings');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url, ['id', 'name', 'type', 'language', 'data', 'siteId', 'creationDate', 'modificationDate'],\n            itemsPerPage\n        );\n\n        this.store.addListener('exception', function (proxy, response, operation) {\n                Ext.MessageBox.show({\n                    title: 'REMOTE EXCEPTION',\n                    msg: operation.getError(),\n                    icon: Ext.MessageBox.ERROR,\n                    buttons: Ext.Msg.OK\n                });\n            }\n        );\n        this.store.setAutoSync(true);\n\n        this.filterField = new Ext.form.TextField({\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents:true,\n            listeners:{\n                \"keydown\":function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.store.load();\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        this.languagestore = [[\"\",t(\"none\")]];\n        let websiteLanguages = pimcore.settings.websiteLanguages;\n        let selectContent = \"\";\n        for (let i=0; i<websiteLanguages.length; i++) {\n            selectContent = pimcore.available_languages[websiteLanguages[i]] + \" [\" + websiteLanguages[i] + \"]\";\n            this.languagestore.push([websiteLanguages[i], selectContent]);\n        }\n\n        var typesColumns = [\n            {\n                text: t(\"type\"),\n                dataIndex: 'type',\n                editable: false,\n                flex: 20,\n                renderer: this.getTypeRenderer.bind(this),\n                sortable: true\n            },\n            {\n                text: t(\"name\"),\n                dataIndex: 'name',\n                flex: 100,\n                editable: true,\n                sortable: true,\n                editor: new Ext.form.TextField({\n                    listeners: {\n                        'change': pimcore.helpers.htmlEncodeTextField\n                    }\n                })\n            },\n            {\n                text: t('language'),\n                sortable: true,\n                dataIndex: \"language\",\n                editor: new Ext.form.ComboBox({\n                    store: this.languagestore,\n                    mode: \"local\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }),\n                flex: 50\n            },\n            {\n                text: t(\"value\"),\n                dataIndex: 'data',\n                flex: 300,\n                editable: true,\n                editor: new Ext.form.TextField({\n                    listeners: {\n                        'change': pimcore.helpers.htmlEncodeTextField\n                    }\n                }),\n                renderer: this.getCellRenderer.bind(this),\n            },\n            {text: t(\"site\"), flex: 100, sortable:true, dataIndex: \"siteId\",\n                editor: new Ext.form.ComboBox({\n                    store: pimcore.globalmanager.get(\"sites\"),\n                    valueField: \"id\",\n                    displayField: \"domain\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }),\n                renderer: function (siteId) {\n                    var store = pimcore.globalmanager.get(\"sites\");\n                    var pos = store.findExact(\"id\", siteId);\n                    if (pos >= 0) {\n                        return store.getAt(pos).get(\"domain\");\n                    }\n                    return null;\n                }\n            }\n            ,\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n            ,\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            }\n            ,\n            {\n                xtype:'actioncolumn',\n                menuText:t('empty'),\n                width:40,\n                tooltip:t('empty'),\n                icon: \"/bundles/pimcoreadmin/img/flat-color-icons/full_trash.svg\",\n                handler:function (grid, rowIndex) {\n                    grid.getStore().getAt(rowIndex).set(\"data\",\"\");\n                }.bind(this)\n\n            }\n            ,\n            {\n                xtype:'actioncolumn',\n                menuText: t('delete'),\n                width:40,\n                tooltip:t('delete'),\n                icon:\"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                handler:function (grid, rowIndex) {\n                    let data = grid.getStore().getAt(rowIndex);\n                    pimcore.helpers.deleteConfirm(t('website_settings'), data.data.name, function () {\n                        grid.getStore().removeAt(rowIndex);\n                    }.bind(this));\n                }.bind(this)\n            }\n        ];\n\n\n        var propertyTypes = new Ext.data.SimpleStore({\n            fields: ['id', 'name'],\n            data: [\n                [\"text\", \"Text\"],\n                [\"document\", \"Document\"],\n                [\"asset\", \"Asset\"],\n                [\"object\", \"Object\"],\n                [\"bool\", \"Checkbox\"]\n            ]\n        });\n\n        this.customKeyField = new Ext.form.TextField({\n            name: 'key',\n            emptyText: t('key')\n        });\n\n        var customType = new Ext.form.ComboBox({\n            fieldLabel: t('type'),\n            name: \"type\",\n            valueField: \"id\",\n            displayField:'name',\n            store: propertyTypes,\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            listWidth: 200,\n            hideLabel: true,\n            emptyText: t('type')\n        });\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(el, e) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        if (cm[i].dataIndex === 'data') {\n                            let editor = this.getCellEditor(e.record);\n                            if (editor) {\n                                e.grid.columns[i].setEditor(editor);\n                            }\n\n                            break;\n                        }\n                    }\n\n                    var editorRow = el.editor.body;\n                    editorRow.rowIdx = e.rowIdx;\n                    // add dnd support\n                    var dd = new Ext.dd.DropZone(editorRow, {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function(e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver : function(elementType, node, dragZone, e, data ) {\n                            if (data.records.length == 1) {\n                                var record = data.records[0];\n                                var data = record.data;\n\n                                if (data.elementType == elementType) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                }\n                            }\n\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n                        }.bind(this, e.record.get('type')),\n\n                        onNodeDrop : function(elementType, node, dragZone, e, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (data.elementType == elementType) {\n                                        Ext.getCmp('valueEditor').setValue(data.path);\n                                        return true;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return false;\n                        }.bind(this, e.record.get('type'))\n                    });\n                }.bind(this),\n                delay: 1\n            }\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame:false,\n            autoScroll:true,\n            store:this.store,\n            columnLines:true,\n            trackMouseOver:true,\n            bodyCls: \"pimcore_editable_grid\",\n            stripeRows:true,\n            columns : {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                },\n            },\n            sm:  Ext.create('Ext.selection.RowModel', {}),\n            bbar:this.pagingtoolbar,\n            plugins: [\n                this.rowEditing\n            ],\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        xtype: \"tbtext\",\n                        text: t('add_setting') + \" \"\n                    },\n                    this.customKeyField, customType,\n                    {\n                        xtype: \"button\",\n                        handler: this.addSetFromUserDefined.bind(this, this.customKeyField, customType),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    '->',\n                    {\n                        text:t(\"filter\") + \"/\" + t(\"search\"),\n                        xtype:\"tbtext\",\n                        style:\"margin: 0 10px 0 0;\"\n                    },\n                    this.filterField\n                ]\n            },\n            viewConfig: {\n                listeners: {\n                    rowupdated: this.updateRows.bind(this, \"rowupdated\"),\n                    refresh: this.updateRows.bind(this, \"refresh\")\n                },\n                forceFit:true,\n                xtype: 'patchedgridview'\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n        this.grid.on(\"afterrender\", function() {\n            this.setAutoScroll(true);\n        });\n\n        this.store.load();\n\n        return this.grid;\n    },\n\n    getTypeRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n\n        return '<div class=\"pimcore_icon_' + value + '\" data-id=\"' + record.get(\"id\") + '\">&nbsp;</div>';\n    },\n\n    getCellEditor: function (record) {\n        let data = record.data;\n\n        let type = data.type;\n        let property;\n\n        if (type === \"text\") {\n            property = {\n                xtype: 'textfield',\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"textarea\") {\n            property = {\n                xtype: \"textarea\",\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"document\" || type == \"asset\" || type == \"object\") {\n            property = {\n                xtype: 'textfield',\n                editable: false,\n                id: 'valueEditor',\n                fieldCls: \"input_drop_target\",\n                flex: 1,\n                value: data.data\n            }\n        } else if (type == \"date\") {\n            property = Ext.create('Ext.form.field.Date', {\n                format: \"Y-m-d\"\n            });\n        } else if (type == \"checkbox\" || type == \"bool\") {\n            property =  {\n                xtype: 'checkbox',\n                flex: 1,\n            }\n        } else if (type == \"select\") {\n            var config = data.config;\n            property =  Ext.create('Ext.form.ComboBox', {\n                triggerAction: 'all',\n                editable: false,\n                store: config.split(\",\"),\n                flex: 1,\n            });\n        }\n\n        return property;\n    },\n\n    updateRows: function (event) {\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n            try {\n                var propertyName = Ext.get(rows[i]).query(\".x-grid-cell-first div div\")[0].getAttribute(\"data-id\");\n                var storeIndex = this.grid.getStore().find(\"id\", propertyName);\n\n                var record = this.grid.getStore().getAt(storeIndex);\n                var data = record.data;\n\n                if (data.type == \"document\" || data.type == \"asset\" || data.type == \"object\") {\n\n                    // add dnd support\n                    var dd = new Ext.dd.DropZone(rows[i], {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function(e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver : function(elementType, node, dragZone, e, data ) {\n                            if (data.records.length == 1) {\n                                var record = data.records[0];\n                                var data = record.data;\n\n                                if (data.elementType == elementType) {\n                                    return Ext.dd.DropZone.prototype.dropAllowed;\n                                }\n                            }\n\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n                        }.bind(this, data.type),\n\n                        onNodeDrop : function(storeIndex, targetNode, dragZone, e, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n                                    var rec = this.grid.getStore().getAt(storeIndex);\n                                    rec.set(\"data\", data.path);\n\n                                    this.updateRows();\n\n                                    return true;\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return false;\n                        }.bind(this, storeIndex)\n                    });\n                }\n            }\n            catch (e) {\n                console.log(e);\n            }\n        }\n    },\n\n    getCellRenderer: function (value, metaData, record, rowIndex, colIndex, store) {\n\n        var data = record.data;\n        var type = data.type;\n\n        if (!value) {\n            value = \"\";\n        }\n\n        if (type == \"document\" || type == \"asset\" || type == \"object\") {\n            return '<div class=\"pimcore_property_droptarget\">' + value + '</div>';\n        } else if (type == \"bool\") {\n            if (value) {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn x-grid-checkcolumn-checked\" style=\"\"></div></div>';\n            } else {\n                return '<div style=\"text-align: left\"><div role=\"button\" class=\"x-grid-checkcolumn\" style=\"\"></div></div>';\n            }\n        }\n\n        return Ext.util.Format.htmlEncode(value);\n    },\n\n    addSetFromUserDefined: function (customKey, customType) {\n        if(in_array(customKey.getValue(), this.disallowedKeys)) {\n            Ext.MessageBox.alert(t(\"error\"), t(\"name_is_not_allowed\"));\n        }\n        this.add(customKey.getValue(), customType.getValue(), false, false, false, true);\n        this.customKeyField.setValue(null);\n    },\n\n    add: function (key, type, value, config, inherited, inheritable) {\n\n        var store = this.grid.getStore();\n\n        //this.cellEditing.editors.each(Ext.destroy, Ext);\n        //this.cellEditing.editors.clear();\n\n        // check for duplicate name\n        var dublicateIndex = store.findBy(function (key, record, id) {\n            if (record.get(\"name\").toLowerCase() == key.toLowerCase()) {\n                return true;\n            }\n            return false;\n        }.bind(this, key));\n\n\n        if (dublicateIndex >= 0) {\n            if (store.getAt(dublicateIndex).data.inherited == false) {\n                Ext.MessageBox.alert(t(\"error\"), t(\"name_already_in_use\"));\n                return;\n            }\n        }\n\n        // check for empty key & type\n        if (key.length < 2 || !type || type.length < 1) {\n            Ext.MessageBox.alert(t(\"error\"), t(\"name_and_key_must_be_defined\"));\n            return;\n        }\n\n\n        if (!value) {\n            if (type == \"bool\") {\n                value = true;\n            }\n            if (type == \"document\" || type == \"asset\" || type == \"object\") {\n                value = \"\";\n            }\n            if (type == \"text\") {\n                value = \"\";\n            }\n            value = \"\";\n        }\n\n        let res = store.add({\n            name: key,\n            data: value,\n            type: type\n        });\n\n        this.rowEditing.completeEdit();\n        this.rowEditing.startEdit(res[0], 1);\n    }\n\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Exception\\NotFoundException;\nuse Pimcore\\Security\\SecurityHelper;\n\n/**\n * @method \\Pimcore\\Model\\WebsiteSetting\\Dao getDao()\n * @method void save()\n */\nfinal class WebsiteSetting extends AbstractModel\n{\n    /**\n     * @var int|null\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * @var string\n     */\n    protected $language;\n\n    /**\n     * @var string\n     */\n    protected $type;\n\n    /**\n     * @var mixed\n     */\n    protected $data;\n\n    /**\n     * @var int|null\n     */\n    protected $siteId;\n\n    /**\n     * @var int|null\n     */\n    protected $creationDate;\n\n    /**\n     * @var int|null\n     */\n    protected $modificationDate;\n\n    /**\n     * this is a small per request cache to know which website setting is which is, this info is used in self::getByName()\n     *\n     * @var array\n     */\n    protected static $nameIdMappingCache = [];\n\n    /**\n     * @param string $name\n     * @param int|null $siteId\n     * @param string|null $language\n     *\n     * @return string\n     */\n    protected static function getCacheKey($name, $siteId = null, $language = null): string\n    {\n        return $name . '~~~' . $siteId . '~~~' . $language;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return self|null\n     */\n    public static function getById($id)\n    {\n        $cacheKey = 'website_setting_' . $id;\n\n        try {\n            $setting = \\Pimcore\\Cache\\RuntimeCache::get($cacheKey);\n            if (!$setting) {\n                throw new \\Exception('Website setting in registry is null');\n            }\n        } catch (\\Exception $e) {\n            try {\n                $setting = new self();\n                $setting->getDao()->getById((int)$id);\n                \\Pimcore\\Cache\\RuntimeCache::set($cacheKey, $setting);\n            } catch (NotFoundException $e) {\n                return null;\n            }\n        }\n\n        return $setting;\n    }\n\n    /**\n     * @param string $name name of the config\n     * @param int|null $siteId site ID\n     * @param string|null $language language, if property cannot be found the value of property without language is returned\n     * @param string|null $fallbackLanguage fallback language\n     *\n     * @return WebsiteSetting|null\n     *\n     * @throws \\Exception\n     */\n    public static function getByName($name, $siteId = null, $language = null, $fallbackLanguage = null)\n    {\n        $nameCacheKey = static::getCacheKey($name, $siteId, $language);\n\n        // check if pimcore already knows the id for this $name, if yes just return it\n        if (array_key_exists($nameCacheKey, self::$nameIdMappingCache)) {\n            return self::getById(self::$nameIdMappingCache[$nameCacheKey]);\n        }\n\n        // create a tmp object to obtain the id\n        $setting = new self();\n\n        try {\n            $setting->getDao()->getByName($name, $siteId, $language);\n        } catch (NotFoundException $e) {\n            if ($language != $fallbackLanguage) {\n                $result = self::getByName($name, $siteId, $fallbackLanguage, $fallbackLanguage);\n\n                return $result;\n            }\n\n            return null;\n        }\n\n        // to have a singleton in a way. like all instances of Element\\ElementInterface do also, like DataObject\\AbstractObject\n        if ($setting->getId() > 0) {\n            // add it to the mini-per request cache\n            self::$nameIdMappingCache[$nameCacheKey] = $setting->getId();\n\n            return self::getById($setting->getId());\n        }\n\n        return $setting;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getId()\n    {\n        return $this->id;\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = (int) $id;\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return $this\n     */\n    public function setName($name)\n    {\n        $this->name = SecurityHelper::convertHtmlSpecialChars($name);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param int $creationDate\n     *\n     * @return $this\n     */\n    public function setCreationDate($creationDate)\n    {\n        $this->creationDate = (int) $creationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getCreationDate()\n    {\n        return $this->creationDate;\n    }\n\n    /**\n     * @param mixed $data\n     *\n     * @return $this\n     */\n    public function setData($data)\n    {\n        if ($data instanceof ElementInterface) {\n            $this->setType(Service::getElementType($data));\n            $data = $data->getId();\n        }\n\n        $this->data = SecurityHelper::convertHtmlSpecialChars($data);\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getData()\n    {\n        // lazy-load data of type asset, document, object\n        if (in_array($this->getType(), ['document', 'asset', 'object']) && !$this->data instanceof ElementInterface && is_numeric($this->data)) {\n            return Element\\Service::getElementById($this->getType(), $this->data);\n        }\n\n        return $this->data;\n    }\n\n    /**\n     * @param int $modificationDate\n     *\n     * @return $this\n     */\n    public function setModificationDate($modificationDate)\n    {\n        $this->modificationDate = (int) $modificationDate;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getModificationDate()\n    {\n        return $this->modificationDate;\n    }\n\n    /**\n     * @param int $siteId\n     *\n     * @return $this\n     */\n    public function setSiteId($siteId)\n    {\n        $this->siteId = (int) $siteId;\n\n        return $this;\n    }\n\n    /**\n     * @return int|null\n     */\n    public function getSiteId()\n    {\n        return $this->siteId;\n    }\n\n    /**\n     * enum('text','document','asset','object','bool')\n     *\n     * @param string $type\n     *\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->type = $type;\n\n        return $this;\n    }\n\n    /**\n     * enum('text','document','asset','object','bool')\n     *\n     * @return string\n     */\n    public function getType()\n    {\n        return $this->type;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLanguage()\n    {\n        return $this->language;\n    }\n\n    /**\n     * @param string $language\n     */\n    public function setLanguage($language)\n    {\n        $this->language = $language;\n    }\n\n    /**\n     * @internal\n     */\n    public function clearDependentCache()\n    {\n        \\Pimcore\\Cache::clearTag('website_config');\n    }\n\n    public function delete(): void\n    {\n        $nameCacheKey = self::getCacheKey($this->getName(), $this->getSiteId(), $this->getLanguage());\n\n        // Remove cached element to avoid returning it with e.g. getByName() after if it is deleted\n        if (array_key_exists($nameCacheKey, self::$nameIdMappingCache)) {\n            unset(self::$nameIdMappingCache[$nameCacheKey]);\n        }\n\n        $this->getDao()->delete();\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/website.js", "models/WebsiteSetting.php"], "buggy_code_start_loc": [22, 20], "buggy_code_end_loc": [508, 232], "fixing_code_start_loc": [21, 21], "fixing_code_end_loc": [512, 233], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2342", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T14:15:09.137", "lastModified": "2023-05-04T20:07:48.483", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/42a5bbe5f16b97371fdbfdcf2bb3ee759dea8564", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/01cd3ed5-dce8-4021-9de0-81cb14bf1829", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/42a5bbe5f16b97371fdbfdcf2bb3ee759dea8564"}}