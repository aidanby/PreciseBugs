{"buggy_code": ["<?php\r\n/*\r\n\t,o888888o.    8 888888888o.            ,8.       ,8.          `8.`8888.      ,8'\r\n   8888     `88.  8 8888    `88.          ,888.     ,888.          `8.`8888.    ,8'\r\n,8 8888       `8. 8 8888     `88         .`8888.   .`8888.          `8.`8888.  ,8'\r\n88 8888           8 8888     ,88        ,8.`8888. ,8.`8888.          `8.`8888.,8'\r\n88 8888           8 8888.   ,88'       ,8'8.`8888,8^8.`8888.          `8.`88888'\r\n88 8888           8 888888888P'       ,8' `8.`8888' `8.`8888.         .88.`8888.\r\n88 8888           8 8888`8b          ,8'   `8.`88'   `8.`8888.       .8'`8.`8888.\r\n`8 8888       .8' 8 8888 `8b.       ,8'     `8.`'     `8.`8888.     .8'  `8.`8888.\r\n   8888     ,88'  8 8888   `8b.    ,8'       `8        `8.`8888.   .8'    `8.`8888.\r\n\t`8888888P'    8 8888     `88. ,8'         `         `8.`8888. .8'      `8.`8888.\r\n\r\nCopyright (c) 2013 Xavi Esteve (MIT License)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n*/\r\n\r\n\r\n\r\nrequire_once('limonade/limonade.php');\r\nrequire_once('limonade/limonade/lemons/lemon_mysql.php');\r\nrequire_once('config.php');\r\n\r\n\r\n/********************************************************\r\n * CONFIG\r\n *******************************************************/\r\n// error_reporting(E_ALL);\r\n// option('debug', true);\r\n\r\n\r\n\r\n\r\n$c = mysqli_connect(MYSQL_SERVER, MYSQL_USER, MYSQL_PASS, MYSQL_DATABASE);\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * ROUTERS\r\n *******************************************************/\r\n\r\ndispatch('/login/:pass', 'login');\r\ndispatch('/logout', 'logout');\r\n\r\ndispatch('/', 'home');\r\n\r\n// People\r\ndispatch('/search/:q', 'search');\r\n\r\n// Person\r\ndispatch('/get/:detail', 'get');\r\ndispatch_post('/save', 'save');\r\ndispatch_delete('/delete/:id', 'delete');\r\n\r\ndispatch_post('/comment', 'comment');\r\ndispatch_delete('/comment/:id', 'commentdelete');\r\n\r\n// for API usage\r\ndispatch('/api/:pass/:action/:detail', 'api');\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * MODELS\r\n *******************************************************/\r\n\r\n/**\r\n * login\r\n * Authenticate user\r\n * @param (string) User's password\r\n * @param (bool) Set as false to avoid redirect to the home page\r\n */\r\nfunction login($pass, $redirect = true) {\r\n\tglobal $users, $form, $c;\r\n\r\n\tforeach ($users as $key => $user) {\r\n\t\tif ($pass==$user['pass'] && $form[$user['dbprefix']]) { // pass correct & environment exists\r\n\t\t\t$_SESSION['name'] = $user['name'];\r\n\t\t\t$_SESSION['level'] = $user['level'];\r\n\t\t\t$_SESSION['dbprefix'] = $user['dbprefix'];\r\n\t\t\tif (isset($user['lang'])) {\r\n\t\t\t\t$_SESSION['lang'] = $user['lang'];\r\n\t\t\t}else{\r\n\t\t\t\t$_SESSION['lang'] = LANG_DEFAULT;\r\n\t\t\t}\r\n\t\t\tif (isset($user['sitename'])) {\r\n\t\t\t\t$_SESSION['sitename'] = $user['sitename'];\r\n\t\t\t}\r\n\t\t\t$_SESSION['id'] = $key;\r\n\r\n\t\t\t$q = 'CREATE TABLE IF NOT EXISTS `'.$user['dbprefix'].'people` (\r\n\t\t\t\t`id` int(20) NOT NULL AUTO_INCREMENT,\r\n\t\t\t\t`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n\t\t\t\t`form` text COLLATE utf8_unicode_ci,\r\n\t\t\t\t`comments` text COLLATE utf8_unicode_ci,\r\n\t\t\t\t`created` int(11),\r\n\t\t\t\t`updated` int(11),\r\n\t\t\t\tPRIMARY KEY (`id`)\r\n\t\t\t) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';\r\n\r\n\t\t\t$result = db($q, $c);\r\n\r\n\t\t\tif ( $result === false ){ echo 'Could not create the Database tables, please check your MySQL settings.'; }\r\n\r\n\t\t\tif ($redirect==true) {\r\n\t\t\t\theader(\"Location: \".url_for('/')); // send_header\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * logout\r\n * Close user's session\r\n * @param ()\r\n */\r\nfunction logout() {\r\n\tsession_destroy();\r\n\tredirect_to(\"Location: \".url_for('')); // send_header\r\n\thalt();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * api\r\n * Authenticates and executes a request all-in-one\r\n * @param (string) User's password\r\n * @param (string) Action\r\n * @param (string) Details of the action\r\n */\r\nfunction api ($pass, $action, $detail) {\r\n\tif (!login($pass, false)) {\r\n\t\treturn json(array('status'=>'error','message'=>$lang['authfailed']));\r\n\t}\r\n\t// TODO: There may be a better way to do this and not repeat ourselves\r\n\tif ($action === 'search') { return search($detail);\r\n\t}else if ($action === 'get') { return get($detail);\r\n\t}else if ($action === 'save') { return save();\r\n\t}else if ($action === 'delete') { return delete($detail);\r\n\t}else if ($action === 'comment') { return comment($detail);\r\n\t}else{ return json(array('status'=>'error','message'=>$lang['actionnotrecognized'])); }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * home\r\n * Load the home page as HTML\r\n */\r\nfunction home() {\r\n\tglobal $lang;\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\tdie('<!doctype html><html><body style=\"font-family: \\'Helvetica Neue\\',Helvetica,Arial,sans-serif;\"><h1 style=\"font-weight:100;\">'.$lang['notloggedin'].'</h1></body></html>');\r\n\t}else{\r\n\t\tglobal $form, $plugins;\r\n\t\tset('sitename', (isset($_SESSION['sitename'])) ? set('sitename', $_SESSION['sitename']) : set('sitename', SITE_NAME) );\r\n\t\tset('app_version', SITE_VERSION);\r\n\t\tset('username', $_SESSION['name']);\r\n\t\tset('form', json_encode($form[$_SESSION['dbprefix']]));\r\n\t\tset('people', search());\r\n\t\tset('plugins', json_encode($plugins));\r\n\t\tset('lang', $lang);\r\n\t\treturn html('home.html.php');\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * search\r\n * Search people\r\n * @param (string) Pass a string to search or empty for all results\r\n */\r\nfunction search($s='') {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\t$response = array('status'=>'error','message'=>\"Your user cannot search contacts\");\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t// Search multiple words\r\n\t\t$w = explode(' ', $s);\r\n\t\tforeach ($w as &$wi) {\r\n\t\t\t$wi = \"(name LIKE  '%\".$c->real_escape_string($wi).\"%' OR form LIKE  '%\".$c->real_escape_string($wi).\"%' OR comments LIKE  '%\".$c->real_escape_string($wi).\"%') \";\r\n\t\t}\r\n\t\t$q = \"SELECT id, name, form FROM \".$_SESSION['dbprefix'].\"people WHERE \". implode(' AND ', $w) .\"  ORDER BY name ASC LIMIT 0, 50\";\r\n\t\t$people = db($q, $c);\r\n\r\n\t\tforeach($people as &$person) {\r\n\t\t\t$person['form'] = json_decode($person['form'], true);\r\n\t\t}\r\n//var_dump($people);\r\n\t\tif ($people) {\r\n\t\t\treturn json($people);\r\n\t\t}else{\r\n\t\t\tif ($q) {\r\n\t\t\t\treturn json(array('status'=>'warning','message'=>'No results'));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * get\r\n * Get person details\r\n * @param (integer/string) Pass either person's ID or a search with just one result\r\n */\r\nfunction get($detail) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\t$response = array('status'=>'error','message'=>\"Your user cannot read\");\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\tif (is_numeric($detail)) {\r\n\t\t\t$people = db(\"SELECT * FROM \".$_SESSION['dbprefix'].\"people WHERE id = \".$c->real_escape_string($detail).\" LIMIT 1\", $c);\r\n\t\t}else{\r\n\t\t\t$people = db(\"SELECT * FROM \".$_SESSION['dbprefix'].\"people WHERE name LIKE '%\".$c->real_escape_string($detail).\"%' OR form LIKE '%\".$c->real_escape_string($detail).\"%' ORDER BY updated DESC LIMIT 1\", $c);\r\n\t\t}\r\n\t\tif ($people) {\r\n\t\t\t$people = $people[0];\r\n\t\t\t$people['form'] = json_decode($people['form'], true); // decode to later encode but no other way :(\r\n\t\t\t$people['comments'] = json_decode($people['comments'], true); // decode to later encode but no other way :(\r\n\t\t\t$response = ($people);\r\n\t\t}else{\r\n\t\t\t$response = array('status'=>'error','message'=>'User does not exist');\r\n\t\t}\r\n\t}\r\n\treturn json($response);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * save\r\n * Save person details\r\n */\r\nfunction save() {\r\n\t// Check if user has enough level to Save\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 's')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>'Your user cannot save'));\r\n\r\n\t// User can Save\r\n\t}else if (!isset($_POST['name']) OR $_POST['name']=='') {\r\n\t\t$response = array('status'=>'error','message'=>'Please write a name for the contact');\r\n\t}else{\r\n\r\n\t\tglobal $form, $c;\r\n\t\t$array = array(\r\n\t\t\t'title' => $_POST['title']\r\n\t\t);\r\n\r\n\t\tforeach ($form[$_SESSION['dbprefix']] as $field) {\r\n\t\t\t$array[$field['name']] = $_POST[$field['name']];\r\n\t\t}\r\n//var_dump($array);\r\n\t\tif ($_POST['id']) { // update details\r\n\t\t\t$q = \"UPDATE \".$_SESSION['dbprefix'].\"people SET\r\n\t\t\t\tform = '\".$c->real_escape_string(json_encode($array)).\"',\r\n\t\t\t\tname =  '\".$c->real_escape_string($_POST['name']).\"',\r\n\t\t\t\t`updated` =  '\".time().\"' WHERE  id = \".($_POST['id']).\";\";\r\n\t\t}else{ // create new\r\n\t\t\t$q = \"INSERT INTO \".$_SESSION['dbprefix'].\"people VALUES (\r\n\t\t\t\tNULL,\r\n\t\t\t\t'\".$c->real_escape_string($_POST['name']).\"',\r\n\t\t\t\t'\".$c->real_escape_string(json_encode($array)).\"',\r\n\t\t\t\t'{}',\r\n\t\t\t\t'\".time().\"',\r\n\t\t\t\t'\".time().\"'\r\n\t\t\t);\";\r\n\t\t}\r\n//var_dump($q);\r\n\t\t$result = db($q, $c);\r\n\r\n\t\tif ($result) {\r\n\t\t\tif ($_POST['id']) {\r\n\t\t\t\t$response = json(array('status'=>'success','message'=>'Contact details saved'));\r\n\t\t\t}else{\r\n\t\t\t\t// Get the ID\r\n\t\t\t\t$q = \"SELECT id from \".$_SESSION['dbprefix'].\"people ORDER BY id DESC LIMIT 1\";\r\n\t\t\t\t$id = db($q, $c);\r\n\t\t\t\t$response = json(array('id'=>$id[0]['id'],'status'=>'success','message'=>'New contact created'));\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Could not save contact details'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * delete\r\n * Delete person\r\n * @param (integer) Person ID\r\n */\r\nfunction delete($id) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'd')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>\"Your user cannot delete\"));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t$deletion = db(\"DELETE FROM \".$_SESSION['dbprefix'].\"people WHERE id = \".$c->real_escape_string($id).\"\", $c);\r\n\r\n\t\tif ($deletion) {\r\n\t\t\t$response = json(array('status'=>'success','message'=>'Contact deleted'));\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Contact could not be deleted'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * COMMENTS\r\n *******************************************************/\r\n\r\n/**\r\n * comment\r\n * Add a comment to the person\r\n * @param (integer) Person ID\r\n */\r\nfunction comment($id) {\r\n\tglobal $lang;\r\n\t// Check if user has enough level to Comment\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'c')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>'Your user cannot comment'));\r\n\t}else if (!isset($_POST['comment']) OR $_POST['comment']=='') {\r\n\t\tjson(array('status'=>'error','message'=>$lang['writecommentfirst']));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t$comments = db(\"SELECT comments FROM \".$_SESSION['dbprefix'].\"people WHERE id = \".$c->real_escape_string($_POST['id']).\"\", $c);\r\n\t\t$comments = json_decode($comments[0]['comments'], true);\r\n//var_dump($comments);\r\n\t\tarray_unshift($comments, array(\r\n\t\t\t'id' => generateRandomString(20),\r\n\t\t\t'user' => $_SESSION['name'],\r\n\t\t\t'date' => date('c', time()), // iso 8601 format\r\n\t\t\t'text' => $_POST['comment']\r\n\t\t));\r\n\t\t$q = \"UPDATE \".$_SESSION['dbprefix'].\"people SET comments = '\".$c->real_escape_string(json_encode($comments)).\"' WHERE id = \".$c->real_escape_string($_POST['id']).\"\";\r\n\t\t$result = db($q, $c);\r\n\r\n\t\tif ($result) {\r\n\t\t\t$response = json($comments);\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Could not add comment'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n/**\r\n * commentdelete\r\n * Delete comment\r\n * @param (integer) Comment ID\r\n */\r\nfunction commentdelete($id) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'd')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>\"Your user cannot delete comments\"));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t// load comments from person\r\n\t\t$person = db(\"SELECT id,comments FROM \".$_SESSION['dbprefix'].\"people WHERE comments LIKE '%\".$c->real_escape_string($id).\"%' ORDER BY updated DESC LIMIT 1\", $c);\r\n\t\t$person[0]['comments'] = json_decode($person[0]['comments'], true);\r\n\t\t// remove from array\r\n\t\tforeach($person[0]['comments'] as $key => $comment) {\r\n\t\t\tif ($comment['id']==$id) {\r\n\t\t\t\tunset($person[0]['comments'][$key]);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// update person\r\n\t\t$result = db(\"UPDATE \".$_SESSION['dbprefix'].\"people SET\r\n\t\t\tcomments = '\".$c->real_escape_string(json_encode($person[0]['comments'])).\"'\r\n\t\t\tWHERE  id = \".($person[0]['id']).\";\", $c);\r\n\t\tif ($result) {\r\n\t\t\t$response = json(array(\r\n\t\t\t\t'status'=>'success',\r\n\t\t\t\t'message'=>\"Comment deleted\",\r\n\t\t\t\t'comments'=>$person[0]['comments'])\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>\"Error deleting comment\"));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * HELPERS\r\n *******************************************************/\r\nfunction generateRandomString($length = 100) {\r\n\t$characters = '-_!$0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\t$randomString = '';\r\n\tfor ($i = 0; $i < $length; $i++) {\r\n\t\t$randomString .= $characters[rand(0, strlen($characters) - 1)];\r\n\t}\r\n\treturn $randomString;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * LANG\r\n *******************************************************/\r\nfunction initialize() {\r\n\tglobal $lang;\r\n\t//echo $_SESSION['lang'];\r\n\t if (isset($_SESSION['lang'])) {\r\n\t\trequire('lang/'.$_SESSION['lang'].'.php');\r\n\t\t//echo file_get_contents('lang/'.$_SESSION['lang'].'.php');\r\n\t }else{\r\n\t \trequire('lang/'.LANG_DEFAULT.'.php');\r\n\t }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * LOAD PLUGINS\r\n *******************************************************/\r\nforeach ($plugins as $plugin) {\r\n\tif (file_exists($plugin)) {\r\n\t\trequire_once('plugins/'.$plugin.'/'.$plugin.'.php');\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Let the party begin!\r\nrun();\r\n"], "fixing_code": ["<?php\r\n/*\r\n\t,o888888o.    8 888888888o.            ,8.       ,8.          `8.`8888.      ,8'\r\n   8888     `88.  8 8888    `88.          ,888.     ,888.          `8.`8888.    ,8'\r\n,8 8888       `8. 8 8888     `88         .`8888.   .`8888.          `8.`8888.  ,8'\r\n88 8888           8 8888     ,88        ,8.`8888. ,8.`8888.          `8.`8888.,8'\r\n88 8888           8 8888.   ,88'       ,8'8.`8888,8^8.`8888.          `8.`88888'\r\n88 8888           8 888888888P'       ,8' `8.`8888' `8.`8888.         .88.`8888.\r\n88 8888           8 8888`8b          ,8'   `8.`88'   `8.`8888.       .8'`8.`8888.\r\n`8 8888       .8' 8 8888 `8b.       ,8'     `8.`'     `8.`8888.     .8'  `8.`8888.\r\n   8888     ,88'  8 8888   `8b.    ,8'       `8        `8.`8888.   .8'    `8.`8888.\r\n\t`8888888P'    8 8888     `88. ,8'         `         `8.`8888. .8'      `8.`8888.\r\n\r\nCopyright (c) 2013 Xavi Esteve (MIT License)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n*/\r\n\r\n\r\n\r\nrequire_once('limonade/limonade.php');\r\nrequire_once('limonade/limonade/lemons/lemon_mysql.php');\r\nrequire_once('config.php');\r\n\r\n\r\n/********************************************************\r\n * CONFIG\r\n *******************************************************/\r\n// error_reporting(E_ALL);\r\n// option('debug', true);\r\n\r\n\r\n\r\n\r\n$c = mysqli_connect(MYSQL_SERVER, MYSQL_USER, MYSQL_PASS, MYSQL_DATABASE);\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * ROUTERS\r\n *******************************************************/\r\n\r\ndispatch('/login/:pass', 'login');\r\ndispatch('/logout', 'logout');\r\n\r\ndispatch('/', 'home');\r\n\r\n// People\r\ndispatch('/search/:q', 'search');\r\n\r\n// Person\r\ndispatch('/get/:detail', 'get');\r\ndispatch_post('/save', 'save');\r\ndispatch_delete('/delete/:id', 'delete');\r\n\r\ndispatch_post('/comment', 'comment');\r\ndispatch_delete('/comment/:id', 'commentdelete');\r\n\r\n// for API usage\r\ndispatch('/api/:pass/:action/:detail', 'api');\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * MODELS\r\n *******************************************************/\r\n\r\n/**\r\n * login\r\n * Authenticate user\r\n * @param (string) User's password\r\n * @param (bool) Set as false to avoid redirect to the home page\r\n */\r\nfunction login($pass, $redirect = true) {\r\n\tglobal $users, $form, $c;\r\n\r\n\tforeach ($users as $key => $user) {\r\n\t\tif ($pass==$user['pass'] && $form[$user['dbprefix']]) { // pass correct & environment exists\r\n\t\t\t$_SESSION['name'] = $user['name'];\r\n\t\t\t$_SESSION['level'] = $user['level'];\r\n\t\t\t$_SESSION['dbprefix'] = $user['dbprefix'];\r\n\t\t\tif (isset($user['lang'])) {\r\n\t\t\t\t$_SESSION['lang'] = $user['lang'];\r\n\t\t\t}else{\r\n\t\t\t\t$_SESSION['lang'] = LANG_DEFAULT;\r\n\t\t\t}\r\n\t\t\tif (isset($user['sitename'])) {\r\n\t\t\t\t$_SESSION['sitename'] = $user['sitename'];\r\n\t\t\t}\r\n\t\t\t$_SESSION['id'] = $key;\r\n\r\n\t\t\t$q = 'CREATE TABLE IF NOT EXISTS `'.$user['dbprefix'].'people` (\r\n\t\t\t\t`id` int(20) NOT NULL AUTO_INCREMENT,\r\n\t\t\t\t`name` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\r\n\t\t\t\t`form` text COLLATE utf8_unicode_ci,\r\n\t\t\t\t`comments` text COLLATE utf8_unicode_ci,\r\n\t\t\t\t`created` int(11),\r\n\t\t\t\t`updated` int(11),\r\n\t\t\t\tPRIMARY KEY (`id`)\r\n\t\t\t) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';\r\n\r\n\t\t\t$result = db($q, $c);\r\n\r\n\t\t\tif ( $result === false ){ echo 'Could not create the Database tables, please check your MySQL settings.'; }\r\n\r\n\t\t\tif ($redirect==true) {\r\n\t\t\t\theader(\"Location: \".url_for('/')); // send_header\r\n\t\t\t\treturn true;\r\n\t\t\t}else{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * logout\r\n * Close user's session\r\n * @param ()\r\n */\r\nfunction logout() {\r\n\tsession_destroy();\r\n\tredirect_to(\"Location: \".url_for('')); // send_header\r\n\thalt();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * api\r\n * Authenticates and executes a request all-in-one\r\n * @param (string) User's password\r\n * @param (string) Action\r\n * @param (string) Details of the action\r\n */\r\nfunction api ($pass, $action, $detail) {\r\n\tif (!login($pass, false)) {\r\n\t\treturn json(array('status'=>'error','message'=>$lang['authfailed']));\r\n\t}\r\n\t// TODO: There may be a better way to do this and not repeat ourselves\r\n\tif ($action === 'search') { return search($detail);\r\n\t}else if ($action === 'get') { return get($detail);\r\n\t}else if ($action === 'save') { return save();\r\n\t}else if ($action === 'delete') { return delete($detail);\r\n\t}else if ($action === 'comment') { return comment($detail);\r\n\t}else{ return json(array('status'=>'error','message'=>$lang['actionnotrecognized'])); }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * home\r\n * Load the home page as HTML\r\n */\r\nfunction home() {\r\n\tglobal $lang;\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\tdie('<!doctype html><html><body style=\"font-family: \\'Helvetica Neue\\',Helvetica,Arial,sans-serif;\"><h1 style=\"font-weight:100;\">'.$lang['notloggedin'].'</h1></body></html>');\r\n\t}else{\r\n\t\tglobal $form, $plugins;\r\n\t\tset('sitename', (isset($_SESSION['sitename'])) ? set('sitename', $_SESSION['sitename']) : set('sitename', SITE_NAME) );\r\n\t\tset('app_version', SITE_VERSION);\r\n\t\tset('username', $_SESSION['name']);\r\n\t\tset('form', json_encode($form[$_SESSION['dbprefix']]));\r\n\t\tset('people', search());\r\n\t\tset('plugins', json_encode($plugins));\r\n\t\tset('lang', $lang);\r\n\t\treturn html('home.html.php');\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * search\r\n * Search people\r\n * @param (string) Pass a string to search or empty for all results\r\n */\r\nfunction search($s='') {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\t$response = array('status'=>'error','message'=>\"Your user cannot search contacts\");\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t// Search multiple words\r\n\t\t$w = explode(' ', $s);\r\n\t\tforeach ($w as &$wi) {\r\n\t\t\t$wi = \"(name LIKE  '%\".$c->real_escape_string($wi).\"%' OR form LIKE  '%\".$c->real_escape_string($wi).\"%' OR comments LIKE  '%\".$c->real_escape_string($wi).\"%') \";\r\n\t\t}\r\n\t\t$q = \"SELECT `id`, `name`, `form` FROM `\".$_SESSION['dbprefix'].\"people` WHERE \". implode(' AND ', $w) .\" ORDER BY `name` ASC LIMIT 0, 50\";\r\n\t\t$people = db($q, $c);\r\n\r\n\t\tforeach($people as &$person) {\r\n\t\t\t$person['form'] = json_decode($person['form'], true);\r\n\t\t}\r\n//var_dump($people);\r\n\t\tif ($people) {\r\n\t\t\treturn json($people);\r\n\t\t}else{\r\n\t\t\tif ($q) {\r\n\t\t\t\treturn json(array('status'=>'warning','message'=>'No results'));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * get\r\n * Get person details\r\n * @param (integer/string) Pass either person's ID or a search with just one result\r\n */\r\nfunction get($detail) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'r')===-1) {\r\n\t\t$response = array('status'=>'error','message'=>\"Your user cannot read\");\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\tif (is_numeric($detail)) {\r\n\t\t\t$people = db(\"SELECT * FROM `\".$_SESSION['dbprefix'].\"people` WHERE `id` = '\".$c->real_escape_string($detail).\"' LIMIT 1;\", $c);\r\n\t\t}else{\r\n\t\t\t$people = db(\"SELECT * FROM `\".$_SESSION['dbprefix'].\"people` WHERE `name` LIKE '%\".$c->real_escape_string($detail).\"%' OR `form` LIKE '%\".$c->real_escape_string($detail).\"%' ORDER BY `updated` DESC LIMIT 1;\", $c);\r\n\t\t}\r\n\t\tif ($people) {\r\n\t\t\t$people = $people[0];\r\n\t\t\t$people['form'] = json_decode($people['form'], true); // decode to later encode but no other way :(\r\n\t\t\t$people['comments'] = json_decode($people['comments'], true); // decode to later encode but no other way :(\r\n\t\t\t$response = ($people);\r\n\t\t}else{\r\n\t\t\t$response = array('status'=>'error','message'=>'User does not exist');\r\n\t\t}\r\n\t}\r\n\treturn json($response);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * save\r\n * Save person details\r\n */\r\nfunction save() {\r\n\t// Check if user has enough level to Save\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 's')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>'Your user cannot save'));\r\n\r\n\t// User can Save\r\n\t}else if (!isset($_POST['name']) OR $_POST['name']=='') {\r\n\t\t$response = array('status'=>'error','message'=>'Please write a name for the contact');\r\n\t}else{\r\n\r\n\t\tglobal $form, $c;\r\n\t\t$array = array(\r\n\t\t\t'title' => $_POST['title']\r\n\t\t);\r\n\r\n\t\tforeach ($form[$_SESSION['dbprefix']] as $field) {\r\n\t\t\t$array[$field['name']] = $_POST[$field['name']];\r\n\t\t}\r\n//var_dump($array);\r\n\t\tif ($_POST['id']) { // update details\r\n\t\t\t$q = \"UPDATE `\".$_SESSION['dbprefix'].\"people` SET\r\n\t\t\t\t`form` = '\".$c->real_escape_string(json_encode($array)).\"',\r\n\t\t\t\t`name` = '\".$c->real_escape_string($_POST['name']).\"',\r\n\t\t\t\t`updated` = '\".time().\"' WHERE `id` = '\".$c->real_escape_string($_POST['id']).\"';\";\r\n\t\t}else{ // create new\r\n\t\t\t$q = \"INSERT INTO `\".$_SESSION['dbprefix'].\"people` VALUES (\r\n\t\t\t\tNULL,\r\n\t\t\t\t'\".$c->real_escape_string($_POST['name']).\"',\r\n\t\t\t\t'\".$c->real_escape_string(json_encode($array)).\"',\r\n\t\t\t\t'{}',\r\n\t\t\t\t'\".time().\"',\r\n\t\t\t\t'\".time().\"'\r\n\t\t\t);\";\r\n\t\t}\r\n//var_dump($q);\r\n\t\t$result = db($q, $c);\r\n\r\n\t\tif ($result) {\r\n\t\t\tif ($_POST['id']) {\r\n\t\t\t\t$response = json(array('status'=>'success','message'=>'Contact details saved'));\r\n\t\t\t}else{\r\n\t\t\t\t// Get the ID\r\n\t\t\t\t$q = \"SELECT `id` FROM `\".$_SESSION['dbprefix'].\"people` ORDER BY `id` DESC LIMIT 1;\";\r\n\t\t\t\t$id = db($q, $c);\r\n\t\t\t\t$response = json(array('id'=>$id[0]['id'],'status'=>'success','message'=>'New contact created'));\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Could not save contact details'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * delete\r\n * Delete person\r\n * @param (integer) Person ID\r\n */\r\nfunction delete($id) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'd')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>\"Your user cannot delete\"));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t$deletion = db(\"DELETE FROM `\".$_SESSION['dbprefix'].\"people` WHERE `id` = '\".$c->real_escape_string($id).\"';\", $c);\r\n\r\n\t\tif ($deletion) {\r\n\t\t\t$response = json(array('status'=>'success','message'=>'Contact deleted'));\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Contact could not be deleted'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * COMMENTS\r\n *******************************************************/\r\n\r\n/**\r\n * comment\r\n * Add a comment to the person\r\n * @param (integer) Person ID\r\n */\r\nfunction comment($id) {\r\n\tglobal $lang;\r\n\t// Check if user has enough level to Comment\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'c')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>'Your user cannot comment'));\r\n\t}else if (!isset($_POST['comment']) OR $_POST['comment']=='') {\r\n\t\tjson(array('status'=>'error','message'=>$lang['writecommentfirst']));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t$comments = db(\"SELECT `comments` FROM `\".$_SESSION['dbprefix'].\"people` WHERE id = '\".$c->real_escape_string($_POST['id']).\"';\", $c);\r\n\t\t$comments = json_decode($comments[0]['comments'], true);\r\n//var_dump($comments);\r\n\t\tarray_unshift($comments, array(\r\n\t\t\t'id' => generateRandomString(20),\r\n\t\t\t'user' => $_SESSION['name'],\r\n\t\t\t'date' => date('c', time()), // iso 8601 format\r\n\t\t\t'text' => $_POST['comment']\r\n\t\t));\r\n\t\t$q = \"UPDATE `\".$_SESSION['dbprefix'].\"people` SET `comments` = '\".$c->real_escape_string(json_encode($comments)).\"' WHERE `id` = '\".$c->real_escape_string($_POST['id']).\"';\";\r\n\t\t$result = db($q, $c);\r\n\r\n\t\tif ($result) {\r\n\t\t\t$response = json($comments);\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>'Could not add comment'));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n/**\r\n * commentdelete\r\n * Delete comment\r\n * @param (integer) Comment ID\r\n */\r\nfunction commentdelete($id) {\r\n\tif (!isset($_SESSION['level']) OR strpos($_SESSION['level'], 'd')===-1) {\r\n\t\t$response = json(array('status'=>'error','message'=>\"Your user cannot delete comments\"));\r\n\t}else{\r\n\t\tglobal $c;\r\n\t\t// load comments from person\r\n\t\t$person = db(\"SELECT `id`, `comments` FROM `\".$_SESSION['dbprefix'].\"people` WHERE `comments` LIKE '%\".$c->real_escape_string($id).\"%' ORDER BY `updated` DESC LIMIT 1;\", $c);\r\n\t\t$person[0]['comments'] = json_decode($person[0]['comments'], true);\r\n\t\t// remove from array\r\n\t\tforeach($person[0]['comments'] as $key => $comment) {\r\n\t\t\tif ($comment['id']==$id) {\r\n\t\t\t\tunset($person[0]['comments'][$key]);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// update person\r\n\t\t$result = db(\"UPDATE `\".$_SESSION['dbprefix'].\"people` SET\r\n\t\t\t`comments` = '\".$c->real_escape_string(json_encode($person[0]['comments'])).\"'\r\n\t\t\tWHERE `id` = '\".($person[0]['id']).\"';\", $c);\r\n\t\tif ($result) {\r\n\t\t\t$response = json(array(\r\n\t\t\t\t'status'=>'success',\r\n\t\t\t\t'message'=>\"Comment deleted\",\r\n\t\t\t\t'comments'=>$person[0]['comments'])\r\n\t\t\t);\r\n\t\t}else{\r\n\t\t\t$response = json(array('status'=>'error','message'=>\"Error deleting comment\"));\r\n\t\t}\r\n\t}\r\n\treturn $response;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * HELPERS\r\n *******************************************************/\r\nfunction generateRandomString($length = 100) {\r\n\t$characters = '-_!$0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\t$randomString = '';\r\n\tfor ($i = 0; $i < $length; $i++) {\r\n\t\t$randomString .= $characters[rand(0, strlen($characters) - 1)];\r\n\t}\r\n\treturn $randomString;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * LANG\r\n *******************************************************/\r\nfunction initialize() {\r\n\tglobal $lang;\r\n\t//echo $_SESSION['lang'];\r\n\t if (isset($_SESSION['lang'])) {\r\n\t\trequire('lang/'.$_SESSION['lang'].'.php');\r\n\t\t//echo file_get_contents('lang/'.$_SESSION['lang'].'.php');\r\n\t }else{\r\n\t \trequire('lang/'.LANG_DEFAULT.'.php');\r\n\t }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/********************************************************\r\n * LOAD PLUGINS\r\n *******************************************************/\r\nforeach ($plugins as $plugin) {\r\n\tif (file_exists($plugin)) {\r\n\t\trequire_once('plugins/'.$plugin.'/'.$plugin.'.php');\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Let the party begin!\r\nrun();\r\n"], "filenames": ["index.php"], "buggy_code_start_loc": [215], "buggy_code_end_loc": [435], "fixing_code_start_loc": [215], "fixing_code_end_loc": [435], "type": "CWE-89", "message": "A vulnerability was found in luckyshot CRMx and classified as critical. This issue affects the function get/save/delete/comment/commentdelete of the file index.php. The manipulation leads to sql injection. The attack may be initiated remotely. The name of the patch is 8c62d274986137d6a1d06958a6f75c3553f45f8f. It is recommended to apply a patch to fix this issue. The identifier VDB-216185 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4592", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-18T08:15:09.570", "lastModified": "2022-12-22T16:39:24.723", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in luckyshot CRMx and classified as critical. This issue affects the function get/save/delete/comment/commentdelete of the file index.php. The manipulation leads to sql injection. The attack may be initiated remotely. The name of the patch is 8c62d274986137d6a1d06958a6f75c3553f45f8f. It is recommended to apply a patch to fix this issue. The identifier VDB-216185 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:crmx_project:crmx:-:*:*:*:*:*:*:*", "matchCriteriaId": "A2680C71-E889-4B55-8DE3-24AAC4CF4D55"}]}]}], "references": [{"url": "https://github.com/luckyshot/CRMx/commit/8c62d274986137d6a1d06958a6f75c3553f45f8f", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216185", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/luckyshot/CRMx/commit/8c62d274986137d6a1d06958a6f75c3553f45f8f"}}