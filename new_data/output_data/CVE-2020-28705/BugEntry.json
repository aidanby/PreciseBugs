{"buggy_code": ["<?php\nrequire_once(FUEL_PATH.'/libraries/Fuel_base_controller.php');\n\nclass Module extends Fuel_base_controller {\n\t\n\tpublic $module_obj; // the module object\n\tpublic $module = ''; // the name of the module\n\tpublic $uploaded_data = array(); // reference to the uploaded data\n\n\tprotected $_orig_post = array(); // used for reference\n\t\n\tfunction __construct($validate = TRUE)\n\t{\n\t\tparent::__construct($validate);\n\n\t\t$this->load->module_model(FUEL_FOLDER, 'fuel_archives_model');\n\n\t\tif (empty($this->module))\n\t\t{\n\t\t\t$this->module = fuel_uri_segment(1);\n\t\t}\n\n\t\tif (empty($this->module))\n\t\t{\n\t\t\tshow_error(lang('cannot_determine_module', fuel_url()));\n\t\t}\n\t\t\n\t\t$params = array();\n\n\t\tif ($this->fuel->modules->exists($this->module, FALSE))\n\t\t{\n\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\t\t\t$params = $this->module_obj->info();\n\t\t}\n\t\telse if ($this->fuel->modules->exists($this->module.'_'.fuel_uri_segment(2), FALSE))\n\t\t{\n\t\t\t// if it is a module with multiple controllers, then we'll check first and second FUEL segment with an underscore'\n\t\t\t$this->module = $this->module.'_'.fuel_uri_segment(2);\n\n\t\t\tif ($this->fuel->modules->exists($this->module, FALSE))\n\t\t\t{\n\t\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\t\t\t\t$params = $this->module_obj->info();\n\t\t\t}\n\t\t}\n\t\telse if ($this->fuel->modules->exists(fuel_uri_segment(2), FALSE))\n\t\t{\n\t\t\t$this->module = fuel_uri_segment(2);\n\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\n\t\t\tif ($this->module AND $this->module_obj)\n\t\t\t{\n\t\t\t\t$mod_name = $this->module_obj->name();\t\n\t\t\t}\n\t\t\t\n\t\t\tif (empty($mod_name))\n\t\t\t{\n\t\t\t\tshow_error(lang('error_missing_module', fuel_uri_segment(1)));\n\t\t\t}\n\n\t\t\tunset($mod_name);\n\t\t\t$params = $this->module_obj->info();\n\t\t}\n\n\t\t// stop here if the module is disabled\n\t\tif (empty($params) OR $params['disabled'] === TRUE)\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t\tforeach($params as $key => $val)\n\t\t{\n\t\t\t$this->$key = $val;\n\t\t}\n\t\t\n\t\t// load any configuration\n\t\tif ( ! empty($this->configuration))\n\t\t{\n\t\t\tif (is_array($this->configuration))\n\t\t\t{\n\t\t\t\t$config_module = key($this->configuration);\n\t\t\t\t$config_file = current($this->configuration);\n\n\t\t\t\t$this->config->module_load($config_module, $config_file);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->config->load($this->configuration);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// load any language\n\t\tif ( ! empty($this->language))\n\t\t{\n\t\t\tif (is_array($this->language))\n\t\t\t{\n\t\t\t\t$lang_module = key($this->language);\n\t\t\t\t$lang_file = current($this->language);\n\n\t\t\t\t// now check to see if we need to load the language file or not... \n\t\t\t\t// we load the main language file automatically with the Fuel_base_controller.php\n\t\t\t\t$this->load->module_language($lang_module, $lang_file, $this->fuel->auth->user_lang());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->load->language($this->language);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// load the model\n\t\tif ( ! empty($this->model_location))\n\t\t{\n\t\t\t$this->load->module_model($this->model_location, $this->model_name);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->load->model($this->model_name);\n\t\t}\n\t\t\n\t\t// get the model name\n\t\t$model_parts = explode('/', $this->model_name);\n\t\t$model = end($model_parts);\n\t\t\n\t\t// set the module_uri\n\t\tif (empty($this->module_uri)) $this->module_uri = $this->module;\n\t\t\n\t\t$this->js_controller_params['module'] = $this->module_uri;\n\n\t\tif ( ! empty($model))\n\t\t{\n\t\t\t$this->model =& $this->$model;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_error(lang('incorrect_route_to_module'));\n\t\t}\n\t\t\n\t\t// global variables\n\t\t$vars = array();\n\n\t\tif ( ! empty($params['js']))\n\t\t{\n\t\t\tif (is_string($params['js']))\n\t\t\t{\n\t\t\t\t$params['js'] = preg_split(\"/,\\s*/\", $params['js']);\n\t\t\t}\n\n\t\t\t$vars['js'] = $params['js'];\n\t\t}\n\t\t\n\t\tif ( ! empty($this->nav_selected)) $vars['nav_selected'] = $this->nav_selected;\n\n\t\t$this->load->vars($vars);\n\n\t\t$this->fuel->admin->load_js_localized($params['js_localized']);\n\n\t\tif ( ! empty($this->permission) AND $validate)\n\t\t{\n\t\t\t$this->_validate_user($this->permission);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction index()\n\t{\n\t\t$this->items();\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items()\n\t{\n\t\t$this->load->library('data_table');\n\t\n\t\t$filters = $this->model->filters($this->filters);\n\t\tif (is_object($filters) && ($filters instanceof Base_model_fields)) {\n\t\t\t$filters = $filters->get_fields();\n\t\t}\n\t\t$this->filters = array_merge($this->filters, $filters);\n\n\t\t// set the language dropdown if there is a language column\n\t\tif ($this->fuel->language->has_multiple() AND !empty($this->language_col) AND method_exists($this->model, 'get_languages'))\n\t\t{\n\t\t\t$languages = $this->model->get_languages($this->language_col);\n\t\t\t$first_option = current($languages);\n\n\t\t\tif (( ! empty($languages) AND (is_string($first_option) OR (is_array($first_option)) AND count($first_option) > 1)) AND empty($this->filters[$this->language_col.'_equal']))\n\t\t\t{\n\t\t\t\t$lang_filter = array('type' => 'select', 'options' => $languages, 'label' => lang('label_language'), 'first_option' => lang('label_select_a_language'));\n\t\t\t\t$this->filters[$this->language_col.'_equal'] = $lang_filter;\n\t\t\t\t$this->model->add_filter_join($this->language_col.'_equal', 'and');\n\t\t\t}\n\t\t}\n\t\t\n\t\t$params = $this->_list_process();\n\t\t\n\t\t// save page state\n\t\t$this->fuel->admin->save_page_state($params);\n\t\t\n\t\t// filter the list\n\t\t$this->_filter_list($params);\n\n\t\t// to prevent it from being called unnecessarily with ajax\n\t\tif ( ! is_ajax())\n\t\t{\n\t\t\t$item_total = $this->model->list_items_total();\n\n\t\t\tif ($this->single_item_navigate AND $item_total == 1)\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items();\n\t\t\t\t$id = $items[0][$this->model->key_field()];\n\n\t\t\t\t// lets check a few permissions\n\t\t\t\tif ($this->fuel->auth->has_permission($this->permission, \"edit\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/edit/'.$id);\n\t\t\t\t}\n\t\t\t\telseif ($this->fuel->auth->has_permission($this->permission, \"view\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/view/'.$id);\n\t\t\t\t}\n\t\t\t\telseif ($this->fuel->auth->has_permission($this->permission, \"show\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/show/'.$id);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!empty($url))\n\t\t\t\t{\n\t\t\t\t\tredirect($url);\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->config->set_item('enable_query_strings', FALSE);\n\t\t\n\t\t\t// pagination\n\t\t\t$query_str_arr = $this->input->get(NULL, TRUE);\n\t\t\tunset($query_str_arr['offset']);\n\t\t\t$query_str = ( ! empty($query_str_arr)) ? http_build_query($query_str_arr) : '';\n\n\t\t\t$config['base_url'] = fuel_url($this->module_uri).'/items/?'.$query_str;\n\t\t\t$uri_segment = 4 + (count(explode('/', $this->module_uri)) - 1);\n\t\t\t$config['total_rows'] = $item_total;\n\t\t\t$config['uri_segment'] = fuel_uri_index($uri_segment);\n\t\t\t$config['per_page'] = (int) $params['limit'];\n\t\t\t$config['query_string_segment'] = 'offset';\n\t\t\t$config['page_query_string'] = TRUE;\n\t\t\t$config['num_links'] = 5;\n\n\t\t\t$config['prev_link'] = lang('pagination_prev_page');\n\t\t\t$config['next_link'] = lang('pagination_next_page');\n\t\t\t$config['first_link'] = lang('pagination_first_link');\n\t\t\t$config['last_link'] = lang('pagination_last_link');\n\n\t\t\t// must reset these in case a config file has something different\n\t\t\t$config['full_tag_open'] = NULL;\n\t\t\t$config['full_tag_close'] = NULL;\n\t\t\t$config['num_tag_open'] = '&nbsp;';\n\t\t\t$config['num_tag_close'] = NULL;\n\t\t\t$config['cur_tag_open'] = '&nbsp;<strong>';\n\t\t\t$config['cur_tag_close'] = '</strong>';\n\t\t\t$config['next_tag_open'] = '&nbsp;';\n\t\t\t$config['next_tag_close'] = '&nbsp;';\n\t\t\t$config['prev_tag_open'] = '&nbsp;';\n\t\t\t$config['prev_tag_close'] = NULL;\n\t\t\t$config['first_tag_open'] = '&nbsp;';\n\t\t\t$config['first_tag_close'] = '&nbsp;';\n\t\t\t$config['last_tag_open'] = NULL;\n\t\t\t$config['last_tag_close'] = NULL;\n\t\t\t$this->pagination->initialize($config);\n\n\t\t\t$this->fuel->admin->set_notification(number_format($item_total).' '.pluralize($item_total, lang('num_items')), 'info');\n\n\t\t\tif (method_exists($this->model, 'tree'))\n\t\t\t{\n\t\t\t\t$vars['tree'] = \"\\n<ul></ul>\\n\";\n\t\t\t}\n\n\t\t\t// reset offset if total rows is less then limit\n\t\t\tif ($config['total_rows'] < $params['limit'])\n\t\t\t{\n\t\t\t\t$params['offset'] = 0;\n\t\t\t}\n\t\t}\n\n\t\t// set vars\n\t\t$vars['params'] = $params;\n\t\t$vars['table'] = '';\n\n\t\t// reload table\n\t\tif (is_ajax())\n\t\t{\n\t\t\t// data table items... check col value to know if we want to send sorting parameter\n\t\t\tif (empty($params['col']) OR empty($params['order']))\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items($params['limit'], $params['offset']);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items($params['limit'], $params['offset'], $params['col'], $params['order']);\n\t\t\t\t$this->data_table->set_sorting($params['col'], $params['order']);\n\t\t\t}\n\n\t\t\t$has_edit_permission = $this->fuel->auth->has_permission($this->permission, \"edit\") ? '1' : '0';\n\t\t\t$has_delete_permission = $this->fuel->auth->has_permission($this->permission, \"delete\") ? '1' : '0';\n\n\t\t\t// set data table actions... look first for item_actions set in the fuel_modules\n\t\t\t$delete_func = function($cols) use ($has_delete_permission) {\n\t\t\t\t$CI =& get_instance();\n\t\t\t\t$link = \"\";\n\n\t\t\t\tif ($has_delete_permission)\n\t\t\t\t{\n\t\t\t\t\tif (!empty($cols[$CI->model->key_field()]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$url = fuel_url($this->module_uri.\"/delete/\".$cols[$CI->model->key_field()]);\n\t\t\t\t\t\t$link = \"<a href=\\\"\".$url.\"\\\" class=\\\"action_delete\\\">\".lang(\"table_action_delete\").\"</a>\";\n\t\t\t\t\t\t$link .= \" <input type=\\\"checkbox\\\" name=\\\"delete[\".$cols[$CI->model->key_field()].\"]\\\" value=\\\"1\\\" id=\\\"delete_\".$cols[$CI->model->key_field()].\"\\\" class=\\\"multi_delete\\\"/>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $link;\n\t\t\t};\n\n\t\t\tforeach($this->table_actions as $key => $val)\n\t\t\t{\n\t\t\t\tif ( ! is_int($key))\n\t\t\t\t{\n\t\t\t\t\t$action_type = 'url';\n\t\t\t\t\t$action_val = $this->table_actions[$key];\n\t\t\t\t\t$attrs = array();\n\n\t\t\t\t\tif (is_array($val))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($val['url']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$action_type = 'url';\n\t\t\t\t\t\t\t$action_val = $val['url'];\n\n\t\t\t\t\t\t\tif (isset($val['attrs']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$attrs = $val['attrs'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$action_type = key($val);\n\t\t\t\t\t\t\t$action_val = current($val);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$attrs = (isset($val['attrs'])) ? $val['attrs'] : array();\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->data_table->add_action($key, $action_val, $action_type, $attrs);\n\t\t\t\t}\n\t\t\t\telse if (strtoupper($val) == 'EDIT')\n\t\t\t\t{\n\t\t\t\t\tif ($this->fuel->auth->has_permission($this->permission, \"edit\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t$action_url = fuel_url($this->module_uri.'/edit/{'.$this->model->key_field().'}');\n\t\t\t\t\t\t$this->data_table->add_action(lang('table_action_edit'), $action_url, 'url');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (strtoupper($val) == 'DELETE')\n\t\t\t\t{\n\t\t\t\t\t$this->data_table->add_action($val, $delete_func, 'func');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (strtoupper($val) != 'VIEW' OR ( ! empty($this->preview_path) AND strtoupper($val) == 'VIEW'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$action_name = lang('table_action_'.strtolower($val));\n\t\t\t\t\t\tif (empty($action_name)) $action_name = $val;\n\t\t\t\t\t\t$action_url = fuel_url($this->module_uri.'/'.strtolower($val).'/{'.$this->model->key_field().'}');\n\t\t\t\t\t\t$this->data_table->add_action($action_name, $action_url, 'url');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $this->rows_selectable)\n\t\t\t{\n\t\t\t\t$this->data_table->id = 'data_table_noselect';\n\t\t\t\t$this->data_table->row_action = FALSE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->data_table->row_action = TRUE;\n\t\t\t}\n\n\t\t\t$this->data_table->row_alt_class = 'alt';\n\n\t\t\tif ($this->model->has_auto_increment())\n\t\t\t{\n\t\t\t\t$this->data_table->only_data_fields = array($this->model->key_field());\n\t\t\t}\n\n\t\t\t// Key and boolean fields are data only\n\t\t\t// $this->data_table->only_data_fields = array_merge(array($this->model->key_field()), $this->model->boolean_fields);\n\n\t\t\t$this->data_table->auto_sort = TRUE;\n\t\t\t$this->data_table->actions_field = 'last';\n\t\t\t$this->data_table->no_data_str = lang('no_data');\n\t\t\t$this->data_table->lang_prefix = 'form_label_';\n\t\t\t$this->data_table->row_id_key = $this->model->key_field();\n\n\t\t\t$boolean_fields = $this->model->boolean_fields;\n\t\t\tif ( ! in_array('published', $boolean_fields)) $boolean_fields[] = 'published';\n\t\t\tif ( ! in_array('active', $boolean_fields)) $boolean_fields[] = 'active';\n\n\t\t\t$has_publish_permission = ($this->fuel->auth->has_permission($this->permission, 'publish')) ? '1' : '0';\n\t\t\t$has_edit_permission = $this->fuel->auth->has_permission($this->permission, 'edit') ? '1' : '0';\n\n\t\t\t$_publish_toggle_callback = function($cols, $heading) {\n\t\t\t\t$can_publish = (($heading == \"published\" OR $heading == \"active\") AND '.$has_publish_permission.' OR\n\t\t\t\t(($heading != \"published\" AND $heading != \"active\") AND '.$has_edit_permission.'));\n\n\t\t\t\t$no = lang(\"form_enum_option_no\");\n\t\t\t\t$yes = lang(\"form_enum_option_yes\");\n\t\t\t\t$col_txt = lang('click_to_toggle');\n\t\t\t\t$key_field = $this->model->key_field();\n\n\t\t\t\t// boolean fields\n\t\t\t\tif (is_null($cols[$heading]) OR $cols[$heading] == \"\")\n\t\t\t\t{\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\telse if (!is_true_val($cols[$heading]))\n\t\t\t\t{\n\t\t\t\t\t$text_class = ($can_publish) ? \"publish_text unpublished toggle_on\" : \"unpublished\";\n\t\t\t\t\t$action_class = ($can_publish) ? \"publish_action unpublished hidden\" : \"unpublished hidden\";\n\t\t\t\t\treturn '<span class=\"publish_hover\"><span class=\"'.$text_class.'\" id=\"row_published_'.$cols[$key_field].'\" data-field=\"'.$heading.'\">'.$no.'</span><span class=\"'.$action_class.'\">'.$col_txt.'</span></span>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$text_class = ($can_publish) ? \"publish_text published toggle_off\" : \"published\";\n\t\t\t\t\t$action_class = ($can_publish) ? \"publish_action published hidden\" : \"published hidden\";\n\t\t\t\t\treturn '<span class=\"publish_hover\"><span class=\"'.$text_class.'\" id=\"row_published_'.$cols[$key_field].'\" data-field=\"'.$heading.'\">'.$yes.'</span><span class=\"'.$action_class.'\">'.$col_txt.'</span></span>';\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tforeach($boolean_fields as $bool)\n\t\t\t{\n\t\t\t\t$this->data_table->add_field_formatter($bool, $_publish_toggle_callback);\n\t\t\t}\n\t\t\t\n\t\t\t$this->data_table->auto_sort = TRUE;\n\t\t\t$heading_sort_func = (isset($this->disable_heading_sort) AND $this->disable_heading_sort) ? '' : 'fuel.sortList';\n\t\t\t$this->data_table->sort_js_func = $heading_sort_func;\n\t\t\t$this->data_table->assign_data($items, $this->table_headers);\n\n\t\t\t$vars['table'] = $this->data_table->render();\n\n\t\t\tif ( ! empty($items[0]) AND ( ! empty($this->precedence_col) AND isset($items[0][$this->precedence_col])))\n\t\t\t{\n\t\t\t\t$vars['params']['precedence'] = 1;\n\t\t\t}\n\n\t\t\t$this->load->module_view(FUEL_FOLDER, '_blocks/module_list_table', $vars);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->load->library('form_builder');\n\t\t\t$this->js_controller_params['method'] = 'items';\n\t\t\t$this->js_controller_params['precedence_col'] = $this->precedence_col;\n\n\t\t\t$vars['table'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_list_table', $vars, TRUE);\n\t\t\t$vars['pagination'] = $this->pagination->create_links();\n\n\t\t\t// for extra module 'filters'\n\t\t\t$field_values = array();\n\n\t\t\tforeach($this->filters as $key => $val)\n\t\t\t{\n\t\t\t\t$field_values[$key] = $params[$key];\n\t\t\t}\n\t\t\t\n\t\t\t$this->form_builder->question_keys = array();\n\t\t\t//$this->form_builder->hidden = (array) $this->model->key_field();\n\t\t\t$this->form_builder->label_layout = 'left';\n\t\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t\t$this->form_builder->set_validator($this->model->get_validation());\n\t\t\t$this->form_builder->submit_value = NULL;\n\t\t\t$this->form_builder->use_form_tag = FALSE;\n\t\t\t$this->form_builder->set_fields($this->filters);\n\t\t\t$this->form_builder->display_errors = FALSE;\n\t\t\t$this->form_builder->css_class = 'more_filters';\n\n\t\t\tif ($this->config->item('date_format'))\n\t\t\t{\n\t\t\t\t$this->form_builder->date_format = $this->config->item('date_format');\n\t\t\t}\n\n\t\t\t$this->form_builder->set_field_values($field_values);\n\n\t\t\tif (method_exists($this->model, 'friendly_filter_info'))\n\t\t\t{\n\t\t\t\t$friendly_filter_info = $this->model->friendly_filter_info($field_values);\n\n\t\t\t\tif ( ! empty($friendly_filter_info))\n\t\t\t\t{\n\t\t\t\t\t$vars['info'] = $friendly_filter_info;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// keycheck is already put in place by $this->form->close() in module_list layout\n\t\t\t$this->form_builder->key_check = FALSE; \n\t\t\t$vars['more_filters'] = $this->form_builder->render_divs();\n\t\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_list_actions', $vars, TRUE);\n\t\t\t$vars['form_action'] = $this->module_uri.'/items';\n\t\t\t$vars['form_method'] = 'get';\n\t\t\t$vars['query_string'] = $query_str;\n\t\t\t$vars['description'] = $this->description;\n\n\t\t\t$crumbs = array($this->module_uri => $this->module_name);\n\t\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t\t$inline = $this->input->get('inline', TRUE);\n\t\t\t$this->fuel->admin->set_inline($inline);\n\t\t\t\n\t\t\tif ($inline === TRUE)\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_TITLEBAR);\n\t\t\t}\n\n\t\t\t$this->fuel->admin->render($this->views['list'], $vars, '', FUEL_FOLDER);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view but inline without the left menu\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction inline_items()\n\t{\n\t\t$this->items();\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Processes the list view filters and returns an array of parameters\n\t *\n\t * @access\tprotected\n\t * @return\tarray\n\t */\t\n\tprotected function _list_process()\n\t{\n\t\t$this->load->library('pagination');\n\t\t$this->load->helper('convert');\n\t\t$this->load->helper('cookie');\n\n\t\t/* PROCESS PARAMS BEGIN */\n\t\t$filters = array();\n\t\t\n\t\t$page_state = $this->fuel->admin->get_page_state($this->module_uri);\n\t\tunset($page_state['offset']);\n\t\t\n\t\t$defaults = array();\n\t\t$defaults['col'] = (!empty($this->default_col)) ? $this->default_col : $this->display_field;\n\t\t$defaults['order'] = (isset($this->default_order)) ? $this->default_order : 'asc';\n\t\t$defaults['offset'] = 0;\n\t\t$defaults['limit'] = key($this->limit_options);\n\t\t$defaults['search_term'] = '';\n\t\t$defaults['view_type'] = 'list';\n\t\t$defaults['extra_filters'] = array();\n\t\t$defaults['precedence'] = 0;\n\n\t\t//$defaults['language'] = '';\n\t\t\n\t\t// custom module filters defaults\n\t\tforeach($this->filters as $key => $val)\n\t\t{\n\t\t\t$defaults[$key] = (isset($val['default'])) ? $val['default'] : NULL;\n\t\t}\n\t\t\n\t\t$posted = array();\n\n\t\tif ( ! empty($_POST) OR !empty($_GET))\n\t\t{\n\t\t\t$posted['search_term'] = $this->input->get_post('search_term', TRUE);\n\t\t\t$posted_vars = array('col', 'order', 'limit', 'offset', 'precedence', 'view_type');\n\n\t\t\tforeach($posted_vars as $val)\n\t\t\t{\n\t\t\t\tif ($this->input->get_post($val)) $posted[$val] = $this->input->get_post($val, TRUE);\n\t\t\t}\n\n\t\t\t// custom module filters\n\t\t\t$extra_filters = array();\n\n\t\t\tforeach($this->filters as $key => $val)\n\t\t\t{\n\t\t\t\tif (isset($_POST[$key]) OR isset($_GET[$key]))\n\t\t\t\t{\n\t\t\t\t\t$posted[$key] = $this->input->get_post($key, TRUE);\n\n\t\t\t\t\t// get the raw key without the comparison operators that the model uses\n\t\t\t\t\t$raw_key = preg_replace(array('#_from$#', '#_fromequal$#', '#_to$#', '#_toequal$#', '#_equal$#'), '', $key);\n\n\t\t\t\t\t// manipulate the value if it's a date time field\n\t\t\t\t\tif (method_exists($this->model, 'field_type'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$field_type = $this->model->field_type($raw_key);\n\n\t\t\t\t\t\tif (is_date_format($posted[$key]) AND $field_type == 'datetime' OR $field_type == 'date' AND (int) $posted[$key] !== 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$date  = ($this->input->get_post($key) AND is_date_format($this->input->get_post($key))) ? current(explode(\" \", $this->input->get_post($key))) : \"\";\n\t\t\t\t\t\t\t$hr    = ($this->input->get_post($key.'_hour') AND (int)$this->input->get_post($key.'_hour') > 0 AND (int)$this->input->get_post($key.'_hour') < 24) ? $this->input->get_post($key.'_hour') : \"\";\n\t\t\t\t\t\t\t$min   = ($this->input->get_post($key.'_min') AND is_numeric($this->input->get_post($key.'_min')))  ? $this->input->get_post($key.'_min') : \"00\";\n\t\t\t\t\t\t\t$ampm  = ($this->input->get_post($key.'_am_pm') AND $hr AND $min) ? $this->input->get_post($key.'_am_pm') : \"\";\n\n\t\t\t\t\t\t\tif ( ! empty($ampm) AND !empty($hr) AND $hr > 12)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($hr > 24) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$hr = \"00\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$hr = (int) $hr - 12;\n\t\t\t\t\t\t\t\t\t$ampm = \"pm\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$posted[$key] = $date;\n\n\t\t\t\t\t\t\tif ( ! empty($hr)) $posted[$key] .= \" \".$hr.\":\".$min.$ampm;\n\n\t\t\t\t\t\t\t$posted[$key] = date('Y-m-d H:i:s', strtotime($posted[$key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->filters[$key]['value'] = $posted[$key];\n\t\t\t\t\t$extra_filters[$key] = $posted[$key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$posted['extra_filters'] = $extra_filters;\n\n\t\t}\n\n\t\t$params = array_merge($defaults, $page_state, $posted);\n\t\t//$params = array_merge($defaults, $uri_params, $posted);\n\n\t\tif ($params['search_term'] == lang('label_search')) $params['search_term'] = NULL;\n\n\t\t/* PROCESS PARAMS END */\n\t\treturn $params;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Adds filters to the model\n\t *\n\t * @access\tprotected\n\t * @return\tvoid\n\t */\t\n\tfunction _filter_list($params)\n\t{\n\t\t// create search filter\n\t\t$search_key = !empty($this->search_field) ? $this->search_field : $this->display_field;\n\t\t$filters[$search_key] = trim($params['search_term']);\n\t\t\n\t\t// sort of hacky here... to make it easy for the model to just filter on the search term (like the users model)\n\t\t$this->model->filter_value = trim($params['search_term']);\n\n\t\tforeach($this->filters as $key => $val)\n\t\t{\n\t\t\t$filters[$key] = $params[$key];\n\n\t\t\tif ( ! empty($val['filter_join']))\n\t\t\t{\n\t\t\t\tif ( ! is_array($this->model->filter_join[$key]))\n\t\t\t\t{\n\t\t\t\t\tsettype($this->model->filter_join, 'array');\n\t\t\t\t}\n\n\t\t\t\t$this->model->filter_join[$key] = $val['filter_join'];\n\t\t\t}\n\t\t}\n\n\t\t// set model filters before pagination and setting table data\n\t\tif (method_exists($this->model, 'add_filters'))\n\t\t{\n\t\t\t$this->model->add_filters($filters);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the tree view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items_tree()\n\t{\n\t\t// tree\n\t\tif (method_exists($this->model, 'tree') AND is_ajax())\n\t\t{\n\t\t\t$params = $this->_list_process();\n\t\t\t\n\t\t\t$this->load->library('menu');\n\t\t\t$this->menu->depth = NULL; // as deep as it goes\n\t\t\t$this->menu->use_titles = FALSE;\n\t\t\t$this->menu->root_value = 0;\n\t\t\t$this->model->add_filters($params['extra_filters']);\n\t\t\t$menu_items = $this->model->tree();\n\t\t\t\n\t\t\tif ( ! empty($menu_items))\n\t\t\t{\n\t\t\t\t$output = $this->menu->render($menu_items);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$output = '<div>'.lang('no_data').'</div>';\n\t\t\t}\n\n\t\t\t$this->output->set_output($output);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Saves the precedence of fields\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items_precedence()\n\t{\n\t\tif (is_ajax() AND ! empty($_POST['data_table']) AND ! empty($this->precedence_col))\n\t\t{\n\t\t\tif (is_array($_POST['data_table']))\n\t\t\t{\n\t\t\t\t$i = 0;\n\n\t\t\t\tforeach($_POST['data_table'] as $row)\n\t\t\t\t{\n\t\t\t\t\tif ( ! empty($row))\n\t\t\t\t\t{\n\t\t\t\t\t\t$values = array($this->precedence_col => $i);\n\t\t\t\t\t\t$where = array($this->model->key_field() => $row);\n\t\t\t\t\t\t$this->model->update($values, $where);\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// clear cache\n\t\t\t\t$this->_clear_cache();\n\t\t\t}\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the fields to create a record (form view)\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction create($field = NULL, $redirect = TRUE)\n\t{\n\t\t$id = NULL;\n\t\t\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('save'))\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\n\t\t// check permissions\n\t\tif ( ! $this->fuel->auth->has_permission($this->module_obj->permission, 'create'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif (isset($_POST[$this->model->key_field()])) // check for dupes\n\t\t{\n\t\t\tif ($id = $this->_process_create() AND !has_errors())\n\t\t\t{\n\t\t\t\tif ($inline === TRUE)\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/inline_edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\n\t\t\t\t// save any tab states\n\t\t\t\t$this->_save_tab_state($id);\n\n\t\t\t\tif ($redirect)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->fuel->admin->has_notification(Fuel_admin::NOTIFICATION_SUCCESS))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_saved'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect($url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$shell_vars = $this->_shell_vars($id);\n\n\t\t$get = (array) $this->input->get(NULL, TRUE);\n\t\t$post = (array) $this->input->post(NULL, TRUE);\n\t\t$passed_init_vars = array_filter(array_merge($get, $post));\n\n\t\t$form_vars = $this->_form_vars($id, $passed_init_vars, $field, $inline);\n\t\t$vars = array_merge($shell_vars, $form_vars);\n\t\t$vars['action'] = 'create';\n\t\t$vars['related_items'] = $this->model->related_items(array());\n\t\t$crumbs = array($this->module_uri => $this->module_name, lang('action_create'));\n\t\t\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t$this->fuel->admin->set_inline($inline);\n\n\t\tif ( ! empty($field) AND strpos($field, ':') === FALSE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t}\n\t\telse if ($inline === TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT);\n\t\t}\n\n\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_inline_actions', $vars, TRUE);\n\t\t$this->fuel->admin->render($this->views['create_edit'], $vars, '', FUEL_FOLDER);\n\n\t\treturn $id;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * The same as the create method but does not show the left menu\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction inline_create($field = NULL)\n\t{\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->create($field);\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Duplicates a record. Similar to edit but without the record ID attached.\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction duplicate()\n\t{\n\t\t$_POST[$this->model->key_field()] = 'dup';\n\t\t$this->create();\n\t}\n\n\tprotected function _process_create()\n\t{\n\t\t// reset dup id\n\t\tif ($_POST[$this->model->key_field()] == 'dup')\n\t\t{\n\t\t\t$_POST[$this->model->key_field()] = '';\n\n\t\t\t// alter duplicate information if there is a hook\n\t\t\t$_POST = $this->model->on_duplicate($_POST);\n\n\t\t\t$this->load->library('form_builder');\n\t\t\t$fb = new Form_builder();\n\t\t\t$fb->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t\t$fields = $this->model->form_fields($_POST);\n\t\t\t$fb->set_fields($fields);\n\t\t\t$fb->post_process_field_values();// manipulates the $_POST values directly\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->model->on_before_post($this->input->post());\n\n\t\t\t$posted = $this->_process();\n\n\t\t\t// set publish status to no if you do not have the ability to publish\n\t\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'publish') AND ! $this->fuel->auth->has_permission($this->permission, 'activate'))\n\t\t\t{\n\t\t\t\t$posted['published'] = 'no';\n\t\t\t\t$posted['active'] = 'no';\n\t\t\t}\n\n\t\t\t$model = $this->model;\n\n\t\t\t// run before_create hook\n\t\t\t$this->_run_hook('before_create', $posted);\n\n\t\t\t// run before_save hook\n\t\t\t$this->_run_hook('before_save', $posted);\n\n\t\t\t// save the data\n\t\t\t$id = $this->model->save($posted);\n\n\t\t\tif (empty($id))\n\t\t\t{\n\t\t\t\tadd_error(lang('error_invalid_record'));\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// add id value to the posted array\n\t\t\tif ( ! is_array($this->model->key_field()))\n\t\t\t{\n\t\t\t\t$posted[$this->model->key_field()] = $id;\n\n\t\t\t\t// replace any {id} placeholder values\n\t\t\t\tforeach ($posted as $key => $val)\n\t\t\t\t{\n\t\t\t\t\tif (is_string($val))\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted[$key] = str_replace('{'.$this->model->key_field().'}', $id, $val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// process $_FILES\n\t\t\tif ( ! $this->_process_uploads($posted))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->model->on_after_post($posted);\n\n\t\t\tif (!$this->model->is_valid())\n\t\t\t{\n\t\t\t\tadd_errors($this->model->get_errors());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// archive data\n\t\t\t\t$archive_data = $this->model->cleaned_data();\n\t\t\t\t$archive_data[$this->model->key_field()] = $id;\n\t\t\t\tif ($this->archivable) $this->model->archive($id, $archive_data);\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// run after_create hook\n\t\t\t\t$this->_run_hook('after_create', $data);\n\n\t\t\t\t// run after_save hook\n\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\tif ( ! empty($data))\n\t\t\t\t{\n\t\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t\t$this->_clear_cache();\n\t\t\t\t\treturn $id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the fields to edit a record (form view)\n\t *\n\t * @access\tpublic\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction edit($id = NULL, $field = NULL, $redirect = TRUE)\n\t{\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('save') AND  $this->displayonly === FALSE)\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\n\t\t// check permissions\n\t\tif ( ! $this->fuel->auth->has_permission($this->module_obj->permission, 'edit') AND ! $this->fuel->auth->has_permission($this->module_obj->permission, 'create'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif ($this->input->post($this->model->key_field()))\n\t\t{\n\t\t\tif ($this->_process_edit($id) AND !has_errors())\n\t\t\t{\n\t\t\t\tif ($inline === TRUE)\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/inline_edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\n\t\t\t\tif ($redirect)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->fuel->admin->has_notification(Fuel_admin::NOTIFICATION_SUCCESS))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_saved'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect($url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//$vars = $this->_form($id);\n\t\t$data = $this->_saved_data($id);\n\t\tif (empty($data))\n\t\t{\n\t\t\tshow_error(lang('error_invalid_record'));\n\t\t}\n\t\t$action = ( ! empty($data[$this->model->key_field()])) ? 'edit' : 'create';\n\t\n\t\t// check model first for preview path method\n\t\tif (method_exists($this->model, 'preview_path'))\n\t\t{\n\t\t\t$this->preview_path = $this->model->preview_path($data, $this->preview_path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// otherwise, substitute data values into preview path\n\t\t\t$this->preview_path = $this->module_obj->url($data);\t\n\t\t}\n\n\t\t$shell_vars = $this->_shell_vars($id, $action, $data);\n\t\t$form_vars = $this->_form_vars($id, $data, $field, $inline);\n\n\t\t$vars = array_merge($shell_vars, $form_vars);\n\t\t$vars['data'] = $data;\n\t\t$vars['action'] = $action;\n\t\t$vars['related_items'] = $this->model->related_items($data);\n\n\t\t// active or publish fields\n\t\tif (isset($data['published']))\n\t\t{\n\t\t\t$vars['publish'] = ( ! empty($data['published']) AND is_true_val($data['published'])) ? 'unpublish' : 'publish';\n\t\t}\n\t\t\n\t\tif (isset($data['active']))\n\t\t{\n\t\t\t$vars['activate'] = ( ! empty($data['active']) AND is_true_val($data['active'])) ? 'deactivate' : 'activate';\n\t\t}\n\n\t\tif ( ! empty($field) AND strpos($field, ':') === FALSE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t}\n\t\telse if ($inline === TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT);\n\t\t}\n\n\t\t$crumbs = array($this->module_uri => $this->module_name);\n\n        $msg_data = $this->model->display_name($data);\n        if ( ! empty($msg_data))\n\t\t{\n\t\t\t$crumbs[''] = character_limiter(strip_tags($msg_data), 100);\n\t\t}\n\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\n\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_create_edit_actions', $vars, TRUE);\n\t\t$this->fuel->admin->render($this->views['create_edit'], $vars, '', FUEL_FOLDER);\n\n\t\t// do this after rendering so it doesn't render current page'\n\t\tif ( ! empty($msg_data) AND $inline !== TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->add_recent_page($this->uri->uri_string(), $this->module_name.': '.$msg_data, $this->module);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * The same as the edit method but does not show the left menu\n\t *\n\t * @access\tpublic\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @return\tvoid\n\t */\t\n\tfunction inline_edit($id = NULL, $field = NULL)\n\t{\n\t\tif (empty($id))\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t\t\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->edit($id, $field);\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Processes the form data to save\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @return\tboolean\n\t */\t\n\tprotected function _process_edit($id)\n\t{\n\t\t$this->model->on_before_post($this->input->post());\n\n\t\t$posted = $this->_process($id);\n\n\t\t// run before_edit hook\n\t\t$this->_run_hook('before_edit', $posted);\n\n\t\t// run before_save hook\n\t\t$this->_run_hook('before_save', $posted);\n\n\t\tif ($this->model->save($posted))\n\t\t{\n\t\t\t// process $_FILES...\n\t\t\tif ( ! $this->_process_uploads($posted))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->model->on_after_post($posted);\n\n\t\t\tif ( ! $this->model->is_valid())\n\t\t\t{\n\t\t\t\tadd_errors($this->model->get_errors());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// archive data\n\t\t\t\t$archive_data = $this->model->cleaned_data();\n\t\t\t\tif ($this->archivable) $this->model->archive($id, $archive_data);\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// run after_edit hook\n\t\t\t\t$this->_run_hook('after_edit', $data);\n\n\t\t\t\t// run after_save hook\n\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t$this->_clear_cache();\n\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t}\n\n\t\treturn FALSE;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Sanitizes the input based on the module's settings\n\t *\n\t * @access\tprotected\n\t * @param\tarray\tThe array of posted data to sanitize\n\t * @return\tarray\n\t */\t\n\tprotected function _sanitize($data)\n\t{\n\t\t$posted = $data;\n\n\t\tif ( ! empty($this->sanitize_input))\n\t\t{\n\t\t\t// functions that are valid for sanitizing\n\t\t\t$valid_funcs = $this->fuel->config('module_sanitize_funcs');\n\n\t\t\tif ($this->sanitize_input === TRUE)\n\t\t\t{\n\t\t\t\t$this->sanitize_input = array('xss');\n\t\t\t}\n\n\t\t\t// force to array to normalize\n\t\t\t$sanitize_input = (array) $this->sanitize_input;\n\n\t\t\tif (is_array($data))\n\t\t\t{\n\t\t\t\tforeach($data as $key => $post)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($post))\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted[$key] = $this->_sanitize($post);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// loop through sanitization functions \n\t\t\t\t\t\tforeach($sanitize_input as $func)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$func = (isset($valid_funcs[$func])) ? $valid_funcs[$func] : FALSE;\n\n\t\t\t\t\t\t\tif ($func)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$posted[$key] = $func($posted[$key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// loop through sanitization functions \n\t\t\t\tforeach($sanitize_input as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$func = (isset($valid_funcs[$val])) ? $valid_funcs[$val] : FALSE;\n\n\t\t\t\t\tif ($func)\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted = $func($posted);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $posted;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an array of shell variables to apply to the main area of the page\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of the action to apply to the main form element\n\t * @param\tarray\tAn array of data information\n\t * @return\tarray\n\t */\t\n\tprotected function _shell_vars($id = NULL, $action = 'create', $data = array())\n\t{\n\t\t$model = $this->model;\n\t\t$this->js_controller_params['method'] = 'add_edit';\n\t\t$this->js_controller_params['linked_fields'] = $this->model->linked_fields;\n\t\t\n\t\t// other variables\n\t\tif (method_exists($this->model, 'vars'))\n\t\t{\n\t\t\t$model_vars = $this->model->vars($data);\n\t\t\t$this->load->vars($model_vars);\n\t\t}\n\t\t$vars['id'] = $id;\n\t\t$vars['versions'] = ($this->displayonly === FALSE AND $this->archivable) ? $this->fuel_archives_model->options_list($id, $this->model->table_name()) : array();\n\t\t$vars['others'] = $this->model->get_others($this->display_field, $id);\n\t\t$vars['action'] = $action;\n\t\t$vars['notifications'] = $this->load->module_view(FUEL_FOLDER, '_blocks/notifications', $vars, TRUE);\n\t\t\n\t\treturn $vars;\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an array of saved data based on the id value passed\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @return\tarray\n\t */\t\n\tprotected function _saved_data($id)\n\t{\n\t\tif (empty($id)) return array();\n\n\t\t$edit_method = $this->edit_method;\n\n\t\tif ($edit_method != 'find_one_array')\n\t\t{\n\t\t\t$saved = $this->model->$edit_method($id);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$saved = $this->model->$edit_method(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\t\t}\n\n\t\treturn $saved;\n\t}\n\t\n\t// separated to make it easier in subclasses to use the form without rendering the page\n\tprotected function _form_vars($id = NULL, $values = array(), $field = NULL, $inline = FALSE)\n\t{\n\n\t\t$this->load->library('form_builder');\n\n\t\t// load custom fields\n\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\n\t\t$model = $this->model;\n\t\t$this->js_controller_params['method'] = 'add_edit';\n\t\t$action = (!empty($values[$this->model->key_field()])) ? 'edit' : 'create';\n\n\t\t// create fields... start with the table info and go from there\n\t\t$fields = (!empty($values)) ? $this->model->form_fields($values) : $this->model->form_fields($_POST);\n\n\t\t// if it's an object, then extract\n\t\tif ($fields instanceof Base_model_fields)\n\t\t{\n\t\t\t$fields = $fields->get_fields();\n\t\t}\n\n\t\t// if field parameter is set, then we just display a single field\n\t\tif ( ! empty($field) AND ! is_numeric($field))\n\t\t{\n\t\t\t// added per pierlo in Forum (http://www.getfuelcms.com/forums/discussion/673/fuel_helper-fuel_edit-markers)\n\t\t\t$columns = explode(':', $field);\n\n\t\t\t// special case if you use the word required\n\t\t\tif (in_array('required', $columns))\n\t\t\t{\n\t\t\t\t$columns = array_merge($columns, $this->model->required);\n\t\t\t}\n\n\t\t\t// set them to hidden... just in case model hooks require the values to be passed on save\n\t\t\tforeach($fields as $k => $f)\n\t\t\t{\n\t\t\t\tif ( ! in_array($k, $columns))\n\t\t\t\t{\n\t\t\t\t\t$fields[$k]['type'] = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (count($columns) <= 1)\n\t\t\t\t{\n\t\t\t\t\t$fields[$k]['display_label'] = FALSE;\n\t\t\t\t\t$fields[$k]['required'] = FALSE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set published/active to hidden since setting this is an buttton/action instead of a form field\n\t\t$form = '';\n\n\t\tif (is_array($fields))\n\t\t{\n\t\t\t$field_values = ( ! empty($_POST)) ? $_POST : $values;\n\n\t\t\t$published_active = array(\n\t\t\t\t'publish' => 'published',\n\t\t\t\t'active' => 'activate'\n\t\t\t);\n\n\t\t\tforeach($published_active as $k => $v)\n\t\t\t{\n\t\t\t\tif ( ! $this->fuel->auth->has_permission($this->permission, $k))\n\t\t\t\t{\n\t\t\t\t\tunset($fields[$v]);\n\t\t\t\t}\n\n\t\t\t\tif (isset($fields[$v]) AND !empty($values[$v]))\n\t\t\t\t{\n\t\t\t\t\t$fields['published']['value'] = $values[$v];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->form_builder->set_validator($this->model->get_validation());\n\n\t\t\t// add hidden field with the module name for convenience\n\t\t\t$common_fields = $this->_common_fields($field_values);\n\t\t\t$fields = array_merge($fields, $common_fields);\n\n\t\t\t$fields['__fuel_inline_action__'] = array('type' => 'hidden');\n\t\t\t$fields['__fuel_inline_action__']['class'] = '__fuel_inline_action__';\n\t\t\t$fields['__fuel_inline_action__']['value'] = (empty($id)) ? 'create' : 'edit';\n\n\t\t\t$fields['__fuel_inline__'] = array('type' => 'hidden');\n\t\t\t$fields['__fuel_inline__']['value'] = ($inline) ? 1 : 0;\n\n\t\t\t$this->form_builder->submit_value = lang('btn_save');\n\t\t\t$this->form_builder->question_keys = array();\n\t\t\t$this->form_builder->use_form_tag = FALSE;\n\n\t\t\tif ($this->model->has_auto_increment())\n\t\t\t{\n\t\t\t\t$this->form_builder->hidden = (array) $this->model->key_field();\n\t\t\t}\n\n\t\t\tif ($this->config->item('date_format'))\n\t\t\t{\n\t\t\t\t$this->form_builder->date_format = $this->config->item('date_format');\n\t\t\t}\n\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$this->form_builder->cancel_value = lang('viewpage_close');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->form_builder->cancel_value = lang('btn_cancel');\n\t\t\t}\n\n\t\t\t$this->form_builder->set_fields($fields);\n\t\t\t$this->form_builder->display_errors = FALSE;\n\t\t\t$this->form_builder->set_field_values($field_values);\n\n\t\t\t// we will set this in the BaseFuelController.js file so that the jqx page variable is available upon execution of any form field js\n\t\t\t//$this->form_builder->auto_execute_js = FALSE;\n\t\t\tif (!isset($fields['__FORM_BUILDER__'], $fields['__FORM_BUILDER__']['displayonly']))\n\t\t\t{\n\t\t\t\t$this->form_builder->displayonly = $this->displayonly;\n\t\t\t}\n\t\t\t\n\t\t\t$this->_prep_csrf();\n\t\t\t$form = $this->form_builder->render();\n\t\t}\n\n\t\t$action_uri = (!empty($id)) ? $action.'/'.$id.'/'.$field : $action.'/'.$field;\n\t\t$vars['form_action'] = ($inline) ? $this->module_uri.'/inline_'.$action_uri.query_str() : $this->module_uri.'/'.$action_uri.query_str();\n\t\t$vars['form'] = $form;\n\t\t$vars['data'] = $values;\n\t\t$vars['error'] = $this->model->get_errors();\n\t\t$vars['notifications'] = $this->load->module_view(FUEL_FOLDER, '_blocks/notifications', $vars, TRUE);\n\t\t$vars['instructions'] = (empty($field)) ? $this->instructions : '';\n\t\t$vars['field'] = (!empty($field));\n\n\t\treturn $vars;\n\t}\n\n\tprotected function _process($id = NULL)\n\t{\n\t\t$this->load->helper('security');\n\t\t$this->load->library('form_builder');\n\n\t\t// XSS key check\n\t\tif (!$this->_is_valid_csrf())\n\t\t{\n\t\t\tadd_error(lang('error_saving'));\n\t\t}\n\t\t\n\t\t$this->_orig_post = $_POST;\n\n\t\t// filter placeholder $_POST values \n\t\t$callback = function($matches){\n\t\t\tif (isset($_POST[$matches[\"2\"]]))\n\t\t\t{\n\t\t\t\t$str = $matches[1].$_POST[$matches[\"2\"]].$matches[3];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$str = $matches[0];\n\t\t\t}\n\t\t\treturn $str;\n\t\t};\n\n\t\t// first loop through and create simple non-namespaced $_POST values if they don't exist for convenience'\n\t\tforeach($_POST as $key => $val)\n\t\t{\n\t\t\t$key_parts = explode('--', $key);\n\t\t\t$tmp_key = end($key_parts);\n\t\t\t$_POST[$tmp_key] = $val;\n\t\t}\n\n\t\t// now loop through and do any substitution\n\t\tforeach($_POST as $key => $val)\n\t\t{\n\t\t\tif (is_string($val))\n\t\t\t{\n\t\t\t\t$_POST[$key] = preg_replace_callback('#(.*)\\{(.+)\\}(.*)#U', $callback, $val);\n\t\t\t}\n\t\t}\n\n\t\t// set boolean fields \n\t\tif ( ! empty($this->model->boolean_fields) AND is_array($this->model->boolean_fields))\n\t\t{\n\t\t\tforeach($this->model->boolean_fields as $val)\n\t\t\t{\n\t\t\t\t$_POST[$val] = (isset($_POST[$val])) ? $_POST[$val] : 0;\n\t\t\t}\n\t\t}\n\n\t\t// if no permission to publish, then we revoke\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'publish'))\n\t\t{\n\t\t\tunset($_POST['published']);\n\t\t}\n\n\t\t// set key_field if it is not id\n\t\tif ( ! empty($_POST['id']) AND $this->model->key_field() != 'id')\n\t\t{\n\t\t\t$_POST[$this->model->key_field()] = !empty($id) ? $id : $_POST['id'];\n\t\t}\n\n\t\t// run any form field post processing hooks\n\t\t$this->load->library('form_builder');\n\n\t\t// use a new instance to prevent problems when duplicating\n\t\t$fb = new Form_builder();\n\t\t$fb->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t// $fields = $this->model->form_fields($_POST);\n\t\t$fields = $this->_block_processing($this->model->form_fields(), $_POST);\n\t\t$fb->set_fields($fields);\n\t\t$fb->post_process_field_values();// manipulates the $_POST values directly\n\n\t\t// sanitize input if set in module configuration\n\t\t$posted = $this->_sanitize($_POST);\n\n\t\treturn $posted;\n\t}\n\n\tpublic function _block_processing($fields, $posted)\n\t{\n\t\t// grab the fields array if using the form fields class\n\t\tif (is_object($fields) && ($fields instanceof Base_model_fields)) {\n\t\t\t$fields = $fields->get_fields();\n\t\t}\n\n\t\t// add in block fields\n\t\tforeach($fields as $key => $val)\n\t\t{\n\t\t\t// check blocks for post processing of variables\n\t\t\tif (isset($val['type']) AND $val['type'] == 'block' AND isset($posted[$key]['block_name']))\n\t\t\t{\n\t\t\t\t$block_layout = $this->fuel->layouts->get($posted[$key]['block_name'], 'block');\n\n\t\t\t\tif ($block_layout)\n\t\t\t\t{\n\t\t\t\t\t$block_fields = $block_layout->fields();\n\t\t\t\t\t$fields = array_merge($fields, $block_fields);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check for template layouts that may have nested fields... this is really ugly\n\t\t\tif ( ! empty($val['fields']) AND is_array($val['fields']))\n\t\t\t{\n\t\t\t\t//$fields = array_merge($fields, $val['fields']);\n\t\t\t\tforeach($val['fields'] as $k => $v)\n\t\t\t\t{\n\t\t\t\t\tif (isset($v['type']) AND $v['type'] == 'block' AND isset($posted[$key]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (is_array($posted[$key]) AND is_int(key($posted[$key])))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach($posted[$key] as $a => $b)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (is_array($b))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach($b as $c => $d)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (isset($d['block_name']))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$block_layout = $this->fuel->layouts->get($d['block_name'], 'block');\n\n\t\t\t\t\t\t\t\t\t\t\tif ($block_layout)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$block_fields = $block_layout->fields();\n\n\t\t\t\t\t\t\t\t\t\t\t\t// now switch out the key to allow it to trigger the post_process_callback...\n\t\t\t\t\t\t\t\t\t\t\t\tforeach($block_fields as $e => $f)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t$block_fields[$e]['subkey'] = $k;\n\t\t\t\t\t\t\t\t\t\t\t\t\t$block_fields[$e]['key'] = $key;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t$fields = array_merge($fields, $block_fields);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $fields;\n\t}\n\t\n\tfunction form($id = NULL, $field = NULL)\n\t{\n\t\t$saved = $this->_saved_data($id);\n\t\t$vars = $this->_form_vars($id, $saved, $field);\n\t\t$this->load->module_view(FUEL_FOLDER, '_layouts/module_form', $vars);\n\t}\n\n\tfunction delete($id = NULL)\n\t{\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('delete')) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'delete'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif ( ! empty($_POST['id']))\n\t\t{\n\t\t\t$posted = explode('|', $this->input->post('id', TRUE));\n\n\t\t\t// run before_delete hook\n\t\t\t$this->_run_hook('before_delete', $posted);\n\n\t\t\t// Flags\n\t\t\t$any_success = $any_failure = FALSE;\n\n\t\t\tforeach ($posted as $id)\n\t\t\t{\n\t\t\t\tif ($this->model->delete(array($this->model->table_name().'.'.$this->model->key_field() => $id)))\n\t\t\t\t{\n\t\t\t\t\t$any_success = TRUE;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$any_failure = TRUE;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// run after_delete hook\n\t\t\t$this->_run_hook('after_delete', $posted);\n\n\t\t\t$this->_clear_cache();\n\n\t\t\tif (count($posted) > 1)\n\t\t\t{\n\t\t\t\t$this->fuel->logs->write(lang('module_multiple_deleted', $this->module));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->fuel->logs->write(lang('module_deleted', count($posted), $this->module));\n\t\t\t}\n\t\t\t\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$vars['title'] = '';\n\t\t\t\t$vars['id'] = '';\n\t\t\t\t$vars['back_action'] = '';\n\n\t\t\t\t$this->fuel->admin->render('modules/module_close_modal', $vars, '', FUEL_FOLDER);\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_TITLEBAR);\n\t\t\t\t$this->fuel->admin->render($this->views['delete'], $vars, '', FUEL_FOLDER);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// set a success delete message\n\t\t\t\tif ($any_success)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->session->flashdata('success'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_deleted'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set an error delete message\n\t\t\t\tif ($any_failure)\n\t\t\t\t{\n\t\t\t\t\t// first try to get an error added in model by $this->add_error('...')\n\t\t\t\t\t$msg = $this->model->get_validation()->get_last_error();\n\n\t\t\t\t\t// if there is none like that, lets use default message\n\t\t\t\t\tif (is_null($msg)) $msg = lang('data_not_deleted');\n\n\t\t\t\t\t$this->fuel->admin->set_notification($msg, Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$url = fuel_uri($this->module_uri);\n\t\t\t\tredirect($url);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->js_controller_params['method'] = 'deleteItem';\n\n\t\t\t$vars = array();\n\n\t\t\tif ( ! empty($_POST['delete']) AND is_array($_POST['delete']))\n\t\t\t{\n\t\t\t\t$data = array();\n\n\t\t\t\tforeach($this->input->post('delete') as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$d = $this->model->find_by_key($key, 'array');\n\n\t\t\t\t\tif ( ! empty($d)) $data[] = $d[$this->display_field];\n\t\t\t\t}\n\n\t\t\t\t$vars['id'] = implode('|', array_keys($_POST['delete']));\n\t\t\t\t$vars['title'] = implode(', ', $data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$data = $this->model->find_by_key($id, 'array');\n\t\t\t\t$vars['id'] = $id;\n\t\t\t\t$vars['title'] = $this->model->display_name($data);\n\t\t\t}\n\n\t\t\tif (empty($data)) show_404();\n\n\t\t\t$vars['error'] = $this->model->get_errors();\n\n\t\t\t$crumbs = array($this->module_uri => $this->module_name);\n\t\t\t$crumbs[''] = character_limiter(strip_tags(lang('action_delete').' '.$vars['title']), 100);\n\n\t\t\t$this->fuel->admin->set_titlebar($crumbs);\n\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t\t\t$vars['back_action'] = fuel_url($this->module_uri.'/inline_edit/'.$id);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_NO_ACTION);\n\t\t\t\t$vars['back_action'] = fuel_url($this->module_uri.'/');\n\t\t\t}\n\n\t\t\t$action_uri = 'delete/'.$id;\n\t\t\t$vars['form_action'] = ($inline) ? $this->module_uri.'/inline_'.$action_uri : $this->module_uri.'/'.$action_uri;\n\n\t\t\t$this->fuel->admin->render($this->views['delete'], $vars, '', FUEL_FOLDER);\n\t\t}\n\t}\n\n\tfunction inline_delete($id)\n\t{\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->delete($id);\n\t}\n\t\n\tfunction restore()\n\t{\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'edit'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\tif ( ! empty($_POST['fuel_restore_version']) AND ! empty($_POST['fuel_restore_ref_id']))\n\t\t{\n\t\t\tif ( ! $this->model->restore($this->input->post('fuel_restore_ref_id'), $this->input->post('fuel_restore_version')))\n\t\t\t{\n\t\t\t\t$msg = lang('module_restored', $this->module_name);\n\t\t\t\t$this->fuel->logs->write($msg);\n\n\t\t\t\t$this->fuel->admin->set_notification($this->model->get_validation()->get_last_error(), Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( ! $this->session->flashdata('success'))\n\t\t\t\t{\n\t\t\t\t\t$this->fuel->admin->set_notification(lang('module_restored_success'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t}\n\n\t\t\t\t$this->_clear_cache();\n\t\t\t}\n\n\t\t\tredirect(fuel_uri($this->module_uri.'/edit/'.$this->input->post('fuel_restore_ref_id', TRUE)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t}\n\t\n\tfunction replace($id = NULL)\n\t{\n\t\tif (empty($id)) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'edit') OR ! $this->fuel->auth->has_permission($this->permission, 'delete'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$success = FALSE;\n\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\tif ( ! empty($_POST['fuel_replace_id']))\n\t\t\t{\n\t\t\t\t$replace_id = (int) $this->input->post('fuel_replace_id', true);\n\t\t\t\t//$delete = is_true_val($this->input->post('fuel_delete_replacement'));\n\t\t\t\t$delete = TRUE;\n\t\t\t\tif (!$this->model->replace($replace_id, $id, $delete))\n\t\t\t\t{\n\t\t\t\t\tadd_error($this->model->get_validation()->get_last_error());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->fuel->admin->set_notification(lang('module_replaced_success'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t$success = TRUE;\n\t\t\t\t\t$this->_clear_cache();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tadd_error(lang('error_select_replacement'));\n\t\t\t}\n\t\t\t//redirect(fuel_uri($this->module_uri.'/edit/'.$id));\n\t\t}\n\n\t\t$this->load->library('form_builder');\n\n\t\t$fields = array();\n\t\t$other_options = $this->model->get_others($this->display_field, $id);\n\t\t$fields['fuel_replace_id'] = array('label' => 'Replace record:', 'type' => 'select', 'options' => $other_options, 'first_option' => 'Select record to replace...', 'style' => 'max-width: 400px', 'disabled_options' => array($id));\n\t\t//$fields['fuel_delete_replacement'] = array('label' => 'Delete replacement', 'type' => 'checkbox', 'value' => 'yes');\n\n\t\tif ($success)\n\t\t{\n\t\t\t$fields['new_fuel_replace_id'] = array('type' => 'hidden', 'value' => (int) $replace_id);\n\t\t}\n\n\t\t//$this->form_builder->use_form_tag = FALSE;\n\t\t$this->form_builder->set_fields($fields);\n\t\t$this->form_builder->display_errors = FALSE;\n\t\t//$this->form_builder->submit_value = NULL;\n\n\t\t$vars['form'] = $this->form_builder->render();\n\t\t$this->fuel->admin->set_inline(TRUE);\n\n\t\t$crumbs = array('' => $this->module_name, lang('action_replace'));\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t$this->fuel->admin->render('modules/module_replace', $vars, '', FUEL_FOLDER);\n\t}\n\n\t// displays the module's designated view'\n\tfunction view($id = NULL)\n\t{\n\t\tif ( ! empty($this->preview_path) AND !empty($id))\n\t\t{\n\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t$url = $this->module_obj->url($data);\n\n\t\t\t// change the last page to be the referrer\n\t\t\t$last_page = (isset($_SERVER['HTTP_REFERER'])) ? substr($_SERVER['HTTP_REFERER'], strlen(site_url())) : NULL;\n\t\t\t$this->fuel->admin->set_last_page($last_page);\n\t\t\tredirect($url);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_error(lang('no_preview_path'));\n\t\t}\n\t}\n\n\t// refreshes a single field\n\tfunction refresh_field()\n\t{\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t$fields = $this->model->form_fields();\n\n\t\t\tif (is_object($fields) AND $fields instanceof Base_model_fields)\n\t\t\t{\n\t\t\t\t$fields = $fields->get_fields();\n\t\t\t}\n\n\t\t\t$field = $this->input->post('field', TRUE);\n\n\t\t\tif ( ! isset($fields[$field])) return;\n\n\t\t\t$field_id = $this->input->post('field_id', TRUE);\n\t\t\t$values = $this->input->post('values', TRUE);\n\n\t\t\t$selected = $this->input->post('selected', TRUE);\n\t\t\t$field_parts = explode('vars--', $field);\n\t\t\t$field_key = end($field_parts);\n\n\t\t\t$this->load->library('form_builder');\n\t\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\n\t\t\t// for multi select\n\t\t\tif (is_array($values))\n\t\t\t{\n\t\t\t\t$selectedValues = $values;\n\t\t\t\tif ( ! in_array($selected, $selectedValues))\n\t\t\t\t{\n\t\t\t\t\t$selectedValues[] = $selected;\n\t\t\t\t}\n\n\t\t\t\t$selected = $selectedValues;\n\t\t\t}\n\n\t\t\tif ( ! empty($selected)) $fields[$field]['value'] = $selected;\n\n\t\t\t$fields[$field]['name'] = $field_id;\n\t\t\t$output = '';\n\n\t\t\t// if template/nested field types, then we need to look at the sub field\n\t\t\tif ($fields[$field_key]['type'] == 'template')\n\t\t\t{\n\t\t\t\t//$fields['return_fields'] = TRUE;\n\t\t\t\trequire_once(FUEL_PATH.'libraries/Fuel_custom_fields.php');\n\t\t\t\t$fuel_cf = new Fuel_custom_fields();\n\t\t\t\t$index = $this->input->get_post('index', TRUE);\n\t\t\t\t$key = $this->input->get_post('key', TRUE);\n\t\t\t\t$field_name = $this->input->get_post('field_name', TRUE);\n\t\t\t\t$params = $fields[$field_key];\n\t\t\t\t$params['index'] = $index;\n\t\t\t\t$params['name'] = $field_name;\n\t\t\t\t$params['key'] = $field_name;\n\t\t\t\t$params['value'] = array();\n\t\t\t\t$params['value'][0] = $selected;\n\t\t\t\t$this->form_builder->name_array = $field_name;\n\t\t\t\t//$fb->set_field_values();\n\t\t\t\t$params['instance'] =& $this->form_builder;\n\n\t\t\t\t$sub_fields = $fuel_cf->template($params, TRUE);\n\n\t\t\t\tif ( ! empty($sub_fields[0][$key])) $output = $sub_fields[0][$key];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( ! empty($selected)) $fields[$field_key]['value'] = $selected;\n\n\t\t\t\t$fields[$field_key]['name'] = $field_id;\n\n\t\t\t\t// if the field is an ID, then we will do a select instead of a text field\n\t\t\t\tif (isset($fields[$this->model->key_field()]))\n\t\t\t\t{\n\t\t\t\t\t$fields[$this->model->key_field()]['type'] = 'select';\n\t\t\t\t\t$fields[$this->model->key_field()]['options'] = $this->model->options_list();\n\t\t\t\t}\n\n\t\t\t\t$output = $this->form_builder->create_field($fields[$field_key]);\n\t\t\t}\n\n\t\t\t$this->output->set_output($output);\n\t\t}\n\t}\n\t\n\t// processes linked fields\n\tfunction process_linked()\n\t{\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t$master_field = $this->input->post('master_field', FALSE);\n\t\t\t$master_value = $this->input->post('master_value', FALSE);\n\t\t\t$slave_field = $this->input->post('slave_field', FALSE);\n\n\t\t\t$values = array(\n\t\t\t\t$master_field => $master_value,\n\t\t\t\t$slave_field => '' // blank so we can process\n\t\t\t);\n\n\t\t\t$processed = $this->model->process_linked($values);\n\n\t\t\tif ( ! empty($processed[$slave_field]))\n\t\t\t{\n\t\t\t\t$this->output->set_output($processed[$slave_field]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// automatically calls ajax methods on the model\n\tfunction ajax($method = NULL)\n\t{\n\t\t// must not be empty and must start with find_ (... don't want to access methods like delete)\n\t\tif (is_ajax())\n\t\t{\n\t\t\t// append ajax to the method name... to prevent any conflicts with default methods\n\t\t\t$method = 'ajax_'.$method;\n\n\t\t\t$get = (array) $this->input->get(NULL, TRUE);\n\t\t\t$post = (array) $this->input->post(NULL, TRUE);\n\t\t\t$params = array_filter(array_merge($get, $post));\n\t\t\tif ( ! method_exists($this->model, $method))\n\t\t\t{\n\t\t\t\tshow_error(lang('error_invalid_method'));\n\t\t\t}\n\n\t\t\t$results = $this->model->$method($params);\n\n\t\t\tif (is_string($results))\n\t\t\t{\n\t\t\t\t$this->output->set_output($results);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->output->set_header('Cache-Control: no-cache, must-revalidate');\n\t\t\t\t$this->output->set_header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n\t\t\t\t$this->output->set_header('Last-Modified: '. gmdate('D, d M Y H:i:s').'GMT');\n\t\t\t\t$this->output->set_header('Content-type: application/json');\n\t\t\t\t$output = json_encode($results);\n\n\t\t\t\techo $output;\n\t\t\t}\n\t\t}\n\t}\n\n\t// exports data to CSV\n\tfunction export()\n\t{\n\t\tif (empty($this->exportable)) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'export'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t// load dbutils for convenience to use in custom methods on model\n\t\t\t$this->load->dbutil();\n\t\t\t$this->load->helper('download');\n\n\t\t\t$filters = $this->model->filters($this->filters);\n\t\t\tif (is_object($filters) && ($filters instanceof Base_model_fields)) {\n\t\t\t\t$filters = $filters->get_fields();\n\t\t\t}\n\t\t\t$this->filters = array_merge($this->filters, $filters);\n\t\n\t\t\t$filename = $this->module.'_'.date('Y-m-d').'.csv';\n\t\t\t$params = $this->_list_process();\n\t\t\t$this->_filter_list($params);\n\t\t\t$data = $this->model->export_data($params);\n\n\t\t\tforce_download($filename, $data);\n\t\t}\n\t}\n\n\t// used in list view to quickly unpublish (if they have permission)\n\tfunction toggle_on($id = NULL, $field = 'published')\n\t{\n\t\t$this->_toggle($id, $field, 'on');\n\t}\n\n\t// used in list view to quickly publish (if they have permission)\n\tfunction toggle_off($id = NULL, $field = 'published')\n\t{\n\t\t$this->_toggle($id, $field, 'off');\n\t}\n\n\t// reduce code by creating this shortcut function for the unpublish/publish\n\tfunction _toggle($id, $field, $toggle)\n\t{\n\t\tif ( ! $this->fuel->auth->module_has_action('save') OR ($field == 'publish' AND !$this->fuel->auth->has_permission($this->permission, 'publish')))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (empty($id))\n\t\t{\n\t\t\t$id = $this->input->post($this->model->key_field());\n\t\t}\n\n\t\tif ($id)\n\t\t{\n\t\t\t$save = $this->model->find_by_key($id, 'array');\n\t\t\t$field_info = $this->model->field_info($field);\n\n\t\t\tif ( ! empty($save))\n\t\t\t{\n\t\t\t\tif ($toggle == 'on')\n\t\t\t\t{\n\t\t\t\t\t$save[$field] = ($field_info['type'] != 'enum') ? 1 : 'yes';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$save[$field] = ($field_info['type'] != 'enum') ? 0 : 'no';\n\t\t\t\t}\n\n\t\t\t\t// run before_edit hook\n\t\t\t\t$this->_run_hook('before_edit', $save);\n\n\t\t\t\t// run before_save hook\n\t\t\t\t$this->_run_hook('before_save', $save);\n\n\t\t\t\t$save = $this->model->clean($save);\n\t\t\t\t$where[$this->model->key_field()] = $id;\n\n\t\t\t\t// use update instead of save to avoid issue with has_many and belongs_to being removed\n\t\t\t\tif ($this->model->update($save, $where))\n\t\t\t\t{\n\t\t\t\t\t// clear cache\n\t\t\t\t\t$this->_clear_cache();\n\n\t\t\t\t\t// log it\n\t\t\t\t\t$data = $this->model->find_by_key($id, 'array');\n\n\t\t\t\t\t// run after_edit hook\n\t\t\t\t\t$this->_run_hook('after_edit', $data);\n\n\t\t\t\t\t// run after_save hook\n\t\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->output->set_output(lang('error_saving'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_ajax())\n\t\t{\n\t\t\t$this->output->set_output($toggle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->items();\n\t\t}\n\t}\n\t\n\tprotected function _clear_cache()\n\t{\n\t\t// reset cache for that page only\n\t\tif ($this->clear_cache_on_save) \n\t\t{\n\t\t\t$this->fuel->cache->clear_pages();\n\t\t}\n\t}\n\t\n\tprotected function _allow_action($action)\n\t{\n\t\treturn in_array($action, $this->item_actions);\n\t}\n\t\n\tprotected function _common_fields($values)\n\t{\n\t\t$fields['__fuel_module__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_module__']['value'] = $this->module;\n\t\t$fields['__fuel_module__']['class'] = '__fuel_module__';\n\n\t\t$fields['__fuel_module_uri__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_module_uri__']['value'] = $this->module_uri;\n\t\t$fields['__fuel_module_uri__']['class'] = '__fuel_module_uri__';\n\n\t\t$fields['__fuel_id__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_id__']['value'] = (!empty($values[$this->model->key_field()])) ? $values[$this->model->key_field()] : '';\n\t\t$fields['__fuel_id__']['class'] = '__fuel_id__';\n\n\t\treturn $fields;\n\t}\n\n\tprotected function _save_tab_state($id)\n\t{\n\t\t// set tab\n\t\tif (isset($_POST['__fuel_selected_tab__']))\n\t\t{\n\t\t\tif ( ! empty($_COOKIE['fuel_tabs']))\n\t\t\t{\n\t\t\t\t$tab_cookie = json_decode(urldecode($_COOKIE['fuel_tabs']), TRUE);\n\n\t\t\t\tif ( ! empty($tab_cookie))\n\t\t\t\t{\n\t\t\t\t\t$tab_cookie[$this->module.'_edit_'.$id] = $_POST['__fuel_selected_tab__'];\n\t\t\t\t\t$cookie_val = urlencode(json_encode($tab_cookie));\n\n\t\t\t\t\t// set the cookie for viewing the live site with added FUEL capabilities\n\t\t\t\t\t$config = array(\n\t\t\t\t\t\t'name' => 'fuel_tabs', \n\t\t\t\t\t\t'value' => $cookie_val,\n\t\t\t\t\t\t'expire' => 0,\n\t\t\t\t\t\t//'path' => WEB_PATH\n\t\t\t\t\t\t'path' => $this->fuel->config('fuel_cookie_path')\n\t\t\t\t\t);\n\n\t\t\t\t\tset_cookie($config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function _process_uploads($posted = NULL)\n\t{\n\t\tif (empty($posted)) $posted = $_POST;\n\n\t\t$errors = FALSE;\n\n\t\tif ( ! empty($_FILES))\n\t\t{\n\t\t\t$field_names = array();\n\n\t\t\t// loop through uploaded files\n\t\t\tforeach ($_FILES as $file => $file_info)\n\t\t\t{\n\t\t\t\tif ($file_info['error'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$posted[$file] = $file_info['name'];\n\n\t\t\t\t\t$file_tmp = current(explode('___', $file));\n\t\t\t\t\t$field_name = $file_tmp;\n\n\t\t\t\t\t// if there is a field with the suffix of _upload, then we will overwrite that posted value with this value\n\t\t\t\t\tif (substr($file_tmp, strlen($file_tmp) - 7) == '_upload') \n\t\t\t\t\t{\n\t\t\t\t\t\t$field_name = substr($file_tmp, 0, strlen($file_tmp) - 7);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($posted[$file_tmp.'_file_name']) AND isset($this->_orig_post[$file_tmp.'_file_name']))\n\t\t\t\t\t{\n\t\t\t\t\t\t// get file extension\n\t\t\t\t\t\t$path_info = pathinfo($file_info['name']);\n\t\t\t\t\t\t$field_value = $this->_orig_post[$file_tmp.'_file_name'].'.'.$path_info['extension'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$field_value = $file_info['name'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// look for repeatable values that match\n\t\t\t\t\tif (preg_match('#(.+)_(\\d+)_(.+)#', $file_tmp, $matches))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($posted[$matches[1]][$matches[2]][$matches[3]]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$posted[$matches[1]][$matches[2]][$matches[3]] = $posted[$file];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (strpos($field_value, '{') !== FALSE )\n\t\t\t\t\t{\n\t\t\t\t\t\t//e modifier is deprecated so we have to do this\n\t\t\t\t\t\t$callback = function($match){\n\t\t\t\t\t\t\t\t$return = \"\";\n\t\t\t\t\t\t\t\tif (!empty($match[2]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$return = $match[1].$GLOBALS[\"__tmp_transient_posted__\"][$match[2]].$match[3];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn $return;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// hacky but avoids 5.3 function syntax (which is nicer but doesn't work with 5.2)\n\t\t\t\t\t\t$GLOBALS['__tmp_transient_posted__'] = $posted;\n\n\t\t\t\t\t\t$field_value = preg_replace_callback('#^(.*)\\{(.+)\\}(.*)$#', $callback, $field_value);\n\t\t\t\t\t}\n\n\t\t\t\t\t// set both values for the namespaced and non-namespaced... make them underscored and lower cased\n\t\t\t\t\t$field_name_parts = explode('--', $field_name);\n\t\t\t\t\t$tmp_field_name = end($field_name_parts);\n\n\t\t\t\t\t$file_name = pathinfo($field_value, PATHINFO_FILENAME);\n\t\t\t\t\t$file_ext = pathinfo($field_value, PATHINFO_EXTENSION);\n\t\t\t\t\t//$file_val = url_title($file_name, 'underscore', FALSE).'.'.$file_ext;\n\t\t\t\t\t$file_val = $file_name.'.'.$file_ext;\n\t\t\t\t\t$posted[$tmp_field_name] = $file_val;\n\t\t\t\t\t$posted[$field_name] = $file_val;\n\t\t\t\t\t$posted[$file_tmp.'_file_name'] = $file_val;\n\n\t\t\t\t\t$field_names[$field_name] = $field_name;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hacky cleanup to avoid using 5.3 syntax\n\t\t\tif (isset($GLOBALS[\"__tmp_transient_posted__\"]))\n\t\t\t{\n\t\t\t\tunset($GLOBALS[\"__tmp_transient_posted__\"]);\n\t\t\t}\n\n\t\t\t$params['xss_clean'] = $this->sanitize_files;\n\t\t\t$params['posted'] = $posted;\n\n\t\t\t// UPLOAD!!!\n\t\t\tif ( ! $this->fuel->assets->upload($params))\n\t\t\t{\n\t\t\t\t$errors = TRUE;\n\t\t\t\t$msg = $this->fuel->assets->last_error();\n\t\t\t\tadd_error($msg);\n\t\t\t\t$this->fuel->admin->set_notification($msg, Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// do post processing of updating field values if they changed during upload due to overwrite being FALSE\n\t\t\t\t$uploaded_data = $this->fuel->assets->uploaded_data();\n\n\t\t\t\t// transfer uploaded data info to the model\n\t\t\t\t$this->model->upload_data =& $uploaded_data;\n\n\t\t\t\t// transfer uploaded data the controller object as well\n\t\t\t\t$this->upload_data =& $uploaded_data;\n\t\t\t\t// now process the data related to upload a file including translated path names\n\t\t\t\tif ( ! isset($field_name)) $field_name = '';\n\n\t\t\t\t$this->_process_upload_data($field_names, $uploaded_data, $posted);\n\t\t\t}\n\t\t}\n\n\t\treturn ! $errors;\n\t}\n\n\tprotected function _process_upload_data($field_names, $uploaded_data, $posted)\n\t{\n\n\t\tforeach($uploaded_data as $key => $val)\n\t\t{\n\t\t\tif (!isset($field_names[$key]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$field_name = $field_names[$key];\n\t\t\t$field_name_parts = explode('--', $field_name);\n\t\t\t$field_name = end($field_name_parts);\n\n\t\t\t$save = FALSE;\n\t\t\t$key_parts = explode('___', $key);\n\t\t\t$file_tmp = current($key_parts);\n\n\t\t\t// get the file name field\n\t\t\t// if the file name field exists AND there is no specified hidden filename field to assign to it AND...\n\t\t\t// the model does not have an array key field AND there is a key field value posted\n\t\t\tif (isset($field_name) AND ! is_array($this->model->key_field()) AND isset($posted[$this->model->key_field()]))\n\t\t\t{\n\t\t\t\t$id = $posted[$this->model->key_field()];\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// if there is a field with the suffix of _upload, then we will overwrite that posted value with this value\n\t\t\t\tif (substr($file_tmp, strlen($file_tmp) - 7) == '_upload')\n\t\t\t\t{\n\t\t\t\t\t$field_name = substr($file_tmp, 0, strlen($file_tmp) - 7);\n\t\t\t\t}\n\n\t\t\t\tif (isset($posted[$field_name])) $save = TRUE;\n\n\t\t\t\t// look for repeatable values that match\n\t\t\t\tif (preg_match('#(.+)_(\\d+)_(.+)#', $file_tmp, $matches))\n\t\t\t\t{\n\t\t\t\t\tif (isset($posted[$matches[1]][$matches[2]][$matches[3]]) AND isset($data[$matches[1]][$matches[2]][$matches[3]]))\n\t\t\t\t\t{\n\t\t\t\t\t\t//$data[$matches[1]][$matches[2]][$matches[3]] = $posted[$file_tmp];\n\t\t\t\t\t\t$data[$matches[1]][$matches[2]][$matches[3]] = $val['file_name'];\n\t\t\t\t\t\t$save = TRUE;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($save)\n\t\t\t\t{\n\t\t\t\t\t$data[$field_name] = $val['file_name'];\n\n\t\t\t\t\t// reset any validation to prevent issues with saving again (e.g. unique fields and the is_new function is problematic)\n\t\t\t\t\t$this->model->remove_all_validation($data);\n\t\t\t\t\t$this->model->save($data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\n\t}\n\t\n\tprotected function _run_hook($hook, $params = array())\n\t{\n\t\t// call module specific hook\n\t\t$hook_name = $hook.'_'.$this->module;\n\t\t$GLOBALS['EXT']->_call_hook($hook_name, $params);\n\n\t\t// call global module hook if any\n\t\t$hook_name = $hook.'_module';\n\t\t$GLOBALS['EXT']->_call_hook($hook_name, $params);\n\t}\n}\n"], "fixing_code": ["<?php\nrequire_once(FUEL_PATH.'/libraries/Fuel_base_controller.php');\n\nclass Module extends Fuel_base_controller {\n\t\n\tpublic $module_obj; // the module object\n\tpublic $module = ''; // the name of the module\n\tpublic $uploaded_data = array(); // reference to the uploaded data\n\n\tprotected $_orig_post = array(); // used for reference\n\t\n\tfunction __construct($validate = TRUE)\n\t{\n\t\tparent::__construct($validate);\n\n\t\t$this->load->module_model(FUEL_FOLDER, 'fuel_archives_model');\n\n\t\tif (empty($this->module))\n\t\t{\n\t\t\t$this->module = fuel_uri_segment(1);\n\t\t}\n\n\t\tif (empty($this->module))\n\t\t{\n\t\t\tshow_error(lang('cannot_determine_module', fuel_url()));\n\t\t}\n\t\t\n\t\t$params = array();\n\n\t\tif ($this->fuel->modules->exists($this->module, FALSE))\n\t\t{\n\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\t\t\t$params = $this->module_obj->info();\n\t\t}\n\t\telse if ($this->fuel->modules->exists($this->module.'_'.fuel_uri_segment(2), FALSE))\n\t\t{\n\t\t\t// if it is a module with multiple controllers, then we'll check first and second FUEL segment with an underscore'\n\t\t\t$this->module = $this->module.'_'.fuel_uri_segment(2);\n\n\t\t\tif ($this->fuel->modules->exists($this->module, FALSE))\n\t\t\t{\n\t\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\t\t\t\t$params = $this->module_obj->info();\n\t\t\t}\n\t\t}\n\t\telse if ($this->fuel->modules->exists(fuel_uri_segment(2), FALSE))\n\t\t{\n\t\t\t$this->module = fuel_uri_segment(2);\n\t\t\t$this->module_obj = $this->fuel->modules->get($this->module, FALSE);\n\n\t\t\tif ($this->module AND $this->module_obj)\n\t\t\t{\n\t\t\t\t$mod_name = $this->module_obj->name();\t\n\t\t\t}\n\t\t\t\n\t\t\tif (empty($mod_name))\n\t\t\t{\n\t\t\t\tshow_error(lang('error_missing_module', fuel_uri_segment(1)));\n\t\t\t}\n\n\t\t\tunset($mod_name);\n\t\t\t$params = $this->module_obj->info();\n\t\t}\n\n\t\t// stop here if the module is disabled\n\t\tif (empty($params) OR $params['disabled'] === TRUE)\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t\tforeach($params as $key => $val)\n\t\t{\n\t\t\t$this->$key = $val;\n\t\t}\n\t\t\n\t\t// load any configuration\n\t\tif ( ! empty($this->configuration))\n\t\t{\n\t\t\tif (is_array($this->configuration))\n\t\t\t{\n\t\t\t\t$config_module = key($this->configuration);\n\t\t\t\t$config_file = current($this->configuration);\n\n\t\t\t\t$this->config->module_load($config_module, $config_file);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->config->load($this->configuration);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// load any language\n\t\tif ( ! empty($this->language))\n\t\t{\n\t\t\tif (is_array($this->language))\n\t\t\t{\n\t\t\t\t$lang_module = key($this->language);\n\t\t\t\t$lang_file = current($this->language);\n\n\t\t\t\t// now check to see if we need to load the language file or not... \n\t\t\t\t// we load the main language file automatically with the Fuel_base_controller.php\n\t\t\t\t$this->load->module_language($lang_module, $lang_file, $this->fuel->auth->user_lang());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->load->language($this->language);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// load the model\n\t\tif ( ! empty($this->model_location))\n\t\t{\n\t\t\t$this->load->module_model($this->model_location, $this->model_name);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->load->model($this->model_name);\n\t\t}\n\t\t\n\t\t// get the model name\n\t\t$model_parts = explode('/', $this->model_name);\n\t\t$model = end($model_parts);\n\t\t\n\t\t// set the module_uri\n\t\tif (empty($this->module_uri)) $this->module_uri = $this->module;\n\t\t\n\t\t$this->js_controller_params['module'] = $this->module_uri;\n\n\t\tif ( ! empty($model))\n\t\t{\n\t\t\t$this->model =& $this->$model;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_error(lang('incorrect_route_to_module'));\n\t\t}\n\t\t\n\t\t// global variables\n\t\t$vars = array();\n\n\t\tif ( ! empty($params['js']))\n\t\t{\n\t\t\tif (is_string($params['js']))\n\t\t\t{\n\t\t\t\t$params['js'] = preg_split(\"/,\\s*/\", $params['js']);\n\t\t\t}\n\n\t\t\t$vars['js'] = $params['js'];\n\t\t}\n\t\t\n\t\tif ( ! empty($this->nav_selected)) $vars['nav_selected'] = $this->nav_selected;\n\n\t\t$this->load->vars($vars);\n\n\t\t$this->fuel->admin->load_js_localized($params['js_localized']);\n\n\t\tif ( ! empty($this->permission) AND $validate)\n\t\t{\n\t\t\t$this->_validate_user($this->permission);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction index()\n\t{\n\t\t$this->items();\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items()\n\t{\n\t\t$this->load->library('data_table');\n\t\n\t\t$filters = $this->model->filters($this->filters);\n\t\tif (is_object($filters) && ($filters instanceof Base_model_fields)) {\n\t\t\t$filters = $filters->get_fields();\n\t\t}\n\t\t$this->filters = array_merge($this->filters, $filters);\n\n\t\t// set the language dropdown if there is a language column\n\t\tif ($this->fuel->language->has_multiple() AND !empty($this->language_col) AND method_exists($this->model, 'get_languages'))\n\t\t{\n\t\t\t$languages = $this->model->get_languages($this->language_col);\n\t\t\t$first_option = current($languages);\n\n\t\t\tif (( ! empty($languages) AND (is_string($first_option) OR (is_array($first_option)) AND count($first_option) > 1)) AND empty($this->filters[$this->language_col.'_equal']))\n\t\t\t{\n\t\t\t\t$lang_filter = array('type' => 'select', 'options' => $languages, 'label' => lang('label_language'), 'first_option' => lang('label_select_a_language'));\n\t\t\t\t$this->filters[$this->language_col.'_equal'] = $lang_filter;\n\t\t\t\t$this->model->add_filter_join($this->language_col.'_equal', 'and');\n\t\t\t}\n\t\t}\n\t\t\n\t\t$params = $this->_list_process();\n\t\t\n\t\t// save page state\n\t\t$this->fuel->admin->save_page_state($params);\n\t\t\n\t\t// filter the list\n\t\t$this->_filter_list($params);\n\n\t\t// to prevent it from being called unnecessarily with ajax\n\t\tif ( ! is_ajax())\n\t\t{\n\t\t\t$item_total = $this->model->list_items_total();\n\n\t\t\tif ($this->single_item_navigate AND $item_total == 1)\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items();\n\t\t\t\t$id = $items[0][$this->model->key_field()];\n\n\t\t\t\t// lets check a few permissions\n\t\t\t\tif ($this->fuel->auth->has_permission($this->permission, \"edit\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/edit/'.$id);\n\t\t\t\t}\n\t\t\t\telseif ($this->fuel->auth->has_permission($this->permission, \"view\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/view/'.$id);\n\t\t\t\t}\n\t\t\t\telseif ($this->fuel->auth->has_permission($this->permission, \"show\"))\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_url($this->module_uri.'/show/'.$id);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!empty($url))\n\t\t\t\t{\n\t\t\t\t\tredirect($url);\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->config->set_item('enable_query_strings', FALSE);\n\t\t\n\t\t\t// pagination\n\t\t\t$query_str_arr = $this->input->get(NULL, TRUE);\n\t\t\tunset($query_str_arr['offset']);\n\t\t\t$query_str = ( ! empty($query_str_arr)) ? http_build_query($query_str_arr) : '';\n\n\t\t\t$config['base_url'] = fuel_url($this->module_uri).'/items/?'.$query_str;\n\t\t\t$uri_segment = 4 + (count(explode('/', $this->module_uri)) - 1);\n\t\t\t$config['total_rows'] = $item_total;\n\t\t\t$config['uri_segment'] = fuel_uri_index($uri_segment);\n\t\t\t$config['per_page'] = (int) $params['limit'];\n\t\t\t$config['query_string_segment'] = 'offset';\n\t\t\t$config['page_query_string'] = TRUE;\n\t\t\t$config['num_links'] = 5;\n\n\t\t\t$config['prev_link'] = lang('pagination_prev_page');\n\t\t\t$config['next_link'] = lang('pagination_next_page');\n\t\t\t$config['first_link'] = lang('pagination_first_link');\n\t\t\t$config['last_link'] = lang('pagination_last_link');\n\n\t\t\t// must reset these in case a config file has something different\n\t\t\t$config['full_tag_open'] = NULL;\n\t\t\t$config['full_tag_close'] = NULL;\n\t\t\t$config['num_tag_open'] = '&nbsp;';\n\t\t\t$config['num_tag_close'] = NULL;\n\t\t\t$config['cur_tag_open'] = '&nbsp;<strong>';\n\t\t\t$config['cur_tag_close'] = '</strong>';\n\t\t\t$config['next_tag_open'] = '&nbsp;';\n\t\t\t$config['next_tag_close'] = '&nbsp;';\n\t\t\t$config['prev_tag_open'] = '&nbsp;';\n\t\t\t$config['prev_tag_close'] = NULL;\n\t\t\t$config['first_tag_open'] = '&nbsp;';\n\t\t\t$config['first_tag_close'] = '&nbsp;';\n\t\t\t$config['last_tag_open'] = NULL;\n\t\t\t$config['last_tag_close'] = NULL;\n\t\t\t$this->pagination->initialize($config);\n\n\t\t\t$this->fuel->admin->set_notification(number_format($item_total).' '.pluralize($item_total, lang('num_items')), 'info');\n\n\t\t\tif (method_exists($this->model, 'tree'))\n\t\t\t{\n\t\t\t\t$vars['tree'] = \"\\n<ul></ul>\\n\";\n\t\t\t}\n\n\t\t\t// reset offset if total rows is less then limit\n\t\t\tif ($config['total_rows'] < $params['limit'])\n\t\t\t{\n\t\t\t\t$params['offset'] = 0;\n\t\t\t}\n\t\t}\n\n\t\t// set vars\n\t\t$vars['params'] = $params;\n\t\t$vars['table'] = '';\n\n\t\t// reload table\n\t\tif (is_ajax())\n\t\t{\n\t\t\t// data table items... check col value to know if we want to send sorting parameter\n\t\t\tif (empty($params['col']) OR empty($params['order']))\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items($params['limit'], $params['offset']);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$items = $this->model->list_items($params['limit'], $params['offset'], $params['col'], $params['order']);\n\t\t\t\t$this->data_table->set_sorting($params['col'], $params['order']);\n\t\t\t}\n\n\t\t\t$has_edit_permission = $this->fuel->auth->has_permission($this->permission, \"edit\") ? '1' : '0';\n\t\t\t$has_delete_permission = $this->fuel->auth->has_permission($this->permission, \"delete\") ? '1' : '0';\n\n\t\t\t// set data table actions... look first for item_actions set in the fuel_modules\n\t\t\t$delete_func = function($cols) use ($has_delete_permission) {\n\t\t\t\t$CI =& get_instance();\n\t\t\t\t$link = \"\";\n\n\t\t\t\tif ($has_delete_permission)\n\t\t\t\t{\n\t\t\t\t\tif (!empty($cols[$CI->model->key_field()]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$url = fuel_url($this->module_uri.\"/delete/\".$cols[$CI->model->key_field()]);\n\t\t\t\t\t\t$link = \"<a href=\\\"\".$url.\"\\\" class=\\\"action_delete\\\">\".lang(\"table_action_delete\").\"</a>\";\n\t\t\t\t\t\t$link .= \" <input type=\\\"checkbox\\\" name=\\\"delete[\".$cols[$CI->model->key_field()].\"]\\\" value=\\\"1\\\" id=\\\"delete_\".$cols[$CI->model->key_field()].\"\\\" class=\\\"multi_delete\\\"/>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn $link;\n\t\t\t};\n\n\t\t\tforeach($this->table_actions as $key => $val)\n\t\t\t{\n\t\t\t\tif ( ! is_int($key))\n\t\t\t\t{\n\t\t\t\t\t$action_type = 'url';\n\t\t\t\t\t$action_val = $this->table_actions[$key];\n\t\t\t\t\t$attrs = array();\n\n\t\t\t\t\tif (is_array($val))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($val['url']))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$action_type = 'url';\n\t\t\t\t\t\t\t$action_val = $val['url'];\n\n\t\t\t\t\t\t\tif (isset($val['attrs']))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$attrs = $val['attrs'];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$action_type = key($val);\n\t\t\t\t\t\t\t$action_val = current($val);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$attrs = (isset($val['attrs'])) ? $val['attrs'] : array();\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->data_table->add_action($key, $action_val, $action_type, $attrs);\n\t\t\t\t}\n\t\t\t\telse if (strtoupper($val) == 'EDIT')\n\t\t\t\t{\n\t\t\t\t\tif ($this->fuel->auth->has_permission($this->permission, \"edit\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t$action_url = fuel_url($this->module_uri.'/edit/{'.$this->model->key_field().'}');\n\t\t\t\t\t\t$this->data_table->add_action(lang('table_action_edit'), $action_url, 'url');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (strtoupper($val) == 'DELETE')\n\t\t\t\t{\n\t\t\t\t\t$this->data_table->add_action($val, $delete_func, 'func');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (strtoupper($val) != 'VIEW' OR ( ! empty($this->preview_path) AND strtoupper($val) == 'VIEW'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$action_name = lang('table_action_'.strtolower($val));\n\t\t\t\t\t\tif (empty($action_name)) $action_name = $val;\n\t\t\t\t\t\t$action_url = fuel_url($this->module_uri.'/'.strtolower($val).'/{'.$this->model->key_field().'}');\n\t\t\t\t\t\t$this->data_table->add_action($action_name, $action_url, 'url');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! $this->rows_selectable)\n\t\t\t{\n\t\t\t\t$this->data_table->id = 'data_table_noselect';\n\t\t\t\t$this->data_table->row_action = FALSE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->data_table->row_action = TRUE;\n\t\t\t}\n\n\t\t\t$this->data_table->row_alt_class = 'alt';\n\n\t\t\tif ($this->model->has_auto_increment())\n\t\t\t{\n\t\t\t\t$this->data_table->only_data_fields = array($this->model->key_field());\n\t\t\t}\n\n\t\t\t// Key and boolean fields are data only\n\t\t\t// $this->data_table->only_data_fields = array_merge(array($this->model->key_field()), $this->model->boolean_fields);\n\n\t\t\t$this->data_table->auto_sort = TRUE;\n\t\t\t$this->data_table->actions_field = 'last';\n\t\t\t$this->data_table->no_data_str = lang('no_data');\n\t\t\t$this->data_table->lang_prefix = 'form_label_';\n\t\t\t$this->data_table->row_id_key = $this->model->key_field();\n\n\t\t\t$boolean_fields = $this->model->boolean_fields;\n\t\t\tif ( ! in_array('published', $boolean_fields)) $boolean_fields[] = 'published';\n\t\t\tif ( ! in_array('active', $boolean_fields)) $boolean_fields[] = 'active';\n\n\t\t\t$has_publish_permission = ($this->fuel->auth->has_permission($this->permission, 'publish')) ? '1' : '0';\n\t\t\t$has_edit_permission = $this->fuel->auth->has_permission($this->permission, 'edit') ? '1' : '0';\n\n\t\t\t$_publish_toggle_callback = function($cols, $heading) {\n\t\t\t\t$can_publish = (($heading == \"published\" OR $heading == \"active\") AND '.$has_publish_permission.' OR\n\t\t\t\t(($heading != \"published\" AND $heading != \"active\") AND '.$has_edit_permission.'));\n\n\t\t\t\t$no = lang(\"form_enum_option_no\");\n\t\t\t\t$yes = lang(\"form_enum_option_yes\");\n\t\t\t\t$col_txt = lang('click_to_toggle');\n\t\t\t\t$key_field = $this->model->key_field();\n\n\t\t\t\t// boolean fields\n\t\t\t\tif (is_null($cols[$heading]) OR $cols[$heading] == \"\")\n\t\t\t\t{\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\telse if (!is_true_val($cols[$heading]))\n\t\t\t\t{\n\t\t\t\t\t$text_class = ($can_publish) ? \"publish_text unpublished toggle_on\" : \"unpublished\";\n\t\t\t\t\t$action_class = ($can_publish) ? \"publish_action unpublished hidden\" : \"unpublished hidden\";\n\t\t\t\t\treturn '<span class=\"publish_hover\"><span class=\"'.$text_class.'\" id=\"row_published_'.$cols[$key_field].'\" data-field=\"'.$heading.'\">'.$no.'</span><span class=\"'.$action_class.'\">'.$col_txt.'</span></span>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$text_class = ($can_publish) ? \"publish_text published toggle_off\" : \"published\";\n\t\t\t\t\t$action_class = ($can_publish) ? \"publish_action published hidden\" : \"published hidden\";\n\t\t\t\t\treturn '<span class=\"publish_hover\"><span class=\"'.$text_class.'\" id=\"row_published_'.$cols[$key_field].'\" data-field=\"'.$heading.'\">'.$yes.'</span><span class=\"'.$action_class.'\">'.$col_txt.'</span></span>';\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tforeach($boolean_fields as $bool)\n\t\t\t{\n\t\t\t\t$this->data_table->add_field_formatter($bool, $_publish_toggle_callback);\n\t\t\t}\n\t\t\t\n\t\t\t$this->data_table->auto_sort = TRUE;\n\t\t\t$heading_sort_func = (isset($this->disable_heading_sort) AND $this->disable_heading_sort) ? '' : 'fuel.sortList';\n\t\t\t$this->data_table->sort_js_func = $heading_sort_func;\n\t\t\t$this->data_table->assign_data($items, $this->table_headers);\n\n\t\t\t$vars['table'] = $this->data_table->render();\n\n\t\t\tif ( ! empty($items[0]) AND ( ! empty($this->precedence_col) AND isset($items[0][$this->precedence_col])))\n\t\t\t{\n\t\t\t\t$vars['params']['precedence'] = 1;\n\t\t\t}\n\n\t\t\t$this->load->module_view(FUEL_FOLDER, '_blocks/module_list_table', $vars);\n\t\t\treturn;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->load->library('form_builder');\n\t\t\t$this->js_controller_params['method'] = 'items';\n\t\t\t$this->js_controller_params['precedence_col'] = $this->precedence_col;\n\n\t\t\t$vars['table'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_list_table', $vars, TRUE);\n\t\t\t$vars['pagination'] = $this->pagination->create_links();\n\n\t\t\t// for extra module 'filters'\n\t\t\t$field_values = array();\n\n\t\t\tforeach($this->filters as $key => $val)\n\t\t\t{\n\t\t\t\t$field_values[$key] = $params[$key];\n\t\t\t}\n\t\t\t\n\t\t\t$this->form_builder->question_keys = array();\n\t\t\t//$this->form_builder->hidden = (array) $this->model->key_field();\n\t\t\t$this->form_builder->label_layout = 'left';\n\t\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t\t$this->form_builder->set_validator($this->model->get_validation());\n\t\t\t$this->form_builder->submit_value = NULL;\n\t\t\t$this->form_builder->use_form_tag = FALSE;\n\t\t\t$this->form_builder->set_fields($this->filters);\n\t\t\t$this->form_builder->display_errors = FALSE;\n\t\t\t$this->form_builder->css_class = 'more_filters';\n\n\t\t\tif ($this->config->item('date_format'))\n\t\t\t{\n\t\t\t\t$this->form_builder->date_format = $this->config->item('date_format');\n\t\t\t}\n\n\t\t\t$this->form_builder->set_field_values($field_values);\n\n\t\t\tif (method_exists($this->model, 'friendly_filter_info'))\n\t\t\t{\n\t\t\t\t$friendly_filter_info = $this->model->friendly_filter_info($field_values);\n\n\t\t\t\tif ( ! empty($friendly_filter_info))\n\t\t\t\t{\n\t\t\t\t\t$vars['info'] = $friendly_filter_info;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// keycheck is already put in place by $this->form->close() in module_list layout\n\t\t\t$this->form_builder->key_check = FALSE; \n\t\t\t$vars['more_filters'] = $this->form_builder->render_divs();\n\t\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_list_actions', $vars, TRUE);\n\t\t\t$vars['form_action'] = $this->module_uri.'/items';\n\t\t\t$vars['form_method'] = 'get';\n\t\t\t$vars['query_string'] = $query_str;\n\t\t\t$vars['description'] = $this->description;\n\n\t\t\t$crumbs = array($this->module_uri => $this->module_name);\n\t\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t\t$inline = $this->input->get('inline', TRUE);\n\t\t\t$this->fuel->admin->set_inline($inline);\n\t\t\t\n\t\t\tif ($inline === TRUE)\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_TITLEBAR);\n\t\t\t}\n\n\t\t\t$this->fuel->admin->render($this->views['list'], $vars, '', FUEL_FOLDER);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the list (table) view but inline without the left menu\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction inline_items()\n\t{\n\t\t$this->items();\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Processes the list view filters and returns an array of parameters\n\t *\n\t * @access\tprotected\n\t * @return\tarray\n\t */\t\n\tprotected function _list_process()\n\t{\n\t\t$this->load->library('pagination');\n\t\t$this->load->helper('convert');\n\t\t$this->load->helper('cookie');\n\n\t\t/* PROCESS PARAMS BEGIN */\n\t\t$filters = array();\n\t\t\n\t\t$page_state = $this->fuel->admin->get_page_state($this->module_uri);\n\t\tunset($page_state['offset']);\n\t\t\n\t\t$defaults = array();\n\t\t$defaults['col'] = (!empty($this->default_col)) ? $this->default_col : $this->display_field;\n\t\t$defaults['order'] = (isset($this->default_order)) ? $this->default_order : 'asc';\n\t\t$defaults['offset'] = 0;\n\t\t$defaults['limit'] = key($this->limit_options);\n\t\t$defaults['search_term'] = '';\n\t\t$defaults['view_type'] = 'list';\n\t\t$defaults['extra_filters'] = array();\n\t\t$defaults['precedence'] = 0;\n\n\t\t//$defaults['language'] = '';\n\t\t\n\t\t// custom module filters defaults\n\t\tforeach($this->filters as $key => $val)\n\t\t{\n\t\t\t$defaults[$key] = (isset($val['default'])) ? $val['default'] : NULL;\n\t\t}\n\t\t\n\t\t$posted = array();\n\n\t\tif ( ! empty($_POST) OR !empty($_GET))\n\t\t{\n\t\t\t$posted['search_term'] = $this->input->get_post('search_term', TRUE);\n\t\t\t$posted_vars = array('col', 'order', 'limit', 'offset', 'precedence', 'view_type');\n\n\t\t\tforeach($posted_vars as $val)\n\t\t\t{\n\t\t\t\tif ($this->input->get_post($val)) $posted[$val] = $this->input->get_post($val, TRUE);\n\t\t\t}\n\n\t\t\t// custom module filters\n\t\t\t$extra_filters = array();\n\n\t\t\tforeach($this->filters as $key => $val)\n\t\t\t{\n\t\t\t\tif (isset($_POST[$key]) OR isset($_GET[$key]))\n\t\t\t\t{\n\t\t\t\t\t$posted[$key] = $this->input->get_post($key, TRUE);\n\n\t\t\t\t\t// get the raw key without the comparison operators that the model uses\n\t\t\t\t\t$raw_key = preg_replace(array('#_from$#', '#_fromequal$#', '#_to$#', '#_toequal$#', '#_equal$#'), '', $key);\n\n\t\t\t\t\t// manipulate the value if it's a date time field\n\t\t\t\t\tif (method_exists($this->model, 'field_type'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$field_type = $this->model->field_type($raw_key);\n\n\t\t\t\t\t\tif (is_date_format($posted[$key]) AND $field_type == 'datetime' OR $field_type == 'date' AND (int) $posted[$key] !== 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$date  = ($this->input->get_post($key) AND is_date_format($this->input->get_post($key))) ? current(explode(\" \", $this->input->get_post($key))) : \"\";\n\t\t\t\t\t\t\t$hr    = ($this->input->get_post($key.'_hour') AND (int)$this->input->get_post($key.'_hour') > 0 AND (int)$this->input->get_post($key.'_hour') < 24) ? $this->input->get_post($key.'_hour') : \"\";\n\t\t\t\t\t\t\t$min   = ($this->input->get_post($key.'_min') AND is_numeric($this->input->get_post($key.'_min')))  ? $this->input->get_post($key.'_min') : \"00\";\n\t\t\t\t\t\t\t$ampm  = ($this->input->get_post($key.'_am_pm') AND $hr AND $min) ? $this->input->get_post($key.'_am_pm') : \"\";\n\n\t\t\t\t\t\t\tif ( ! empty($ampm) AND !empty($hr) AND $hr > 12)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ($hr > 24) \n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$hr = \"00\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$hr = (int) $hr - 12;\n\t\t\t\t\t\t\t\t\t$ampm = \"pm\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$posted[$key] = $date;\n\n\t\t\t\t\t\t\tif ( ! empty($hr)) $posted[$key] .= \" \".$hr.\":\".$min.$ampm;\n\n\t\t\t\t\t\t\t$posted[$key] = date('Y-m-d H:i:s', strtotime($posted[$key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->filters[$key]['value'] = $posted[$key];\n\t\t\t\t\t$extra_filters[$key] = $posted[$key];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$posted['extra_filters'] = $extra_filters;\n\n\t\t}\n\n\t\t$params = array_merge($defaults, $page_state, $posted);\n\t\t//$params = array_merge($defaults, $uri_params, $posted);\n\n\t\tif ($params['search_term'] == lang('label_search')) $params['search_term'] = NULL;\n\n\t\t/* PROCESS PARAMS END */\n\t\treturn $params;\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Adds filters to the model\n\t *\n\t * @access\tprotected\n\t * @return\tvoid\n\t */\t\n\tfunction _filter_list($params)\n\t{\n\t\t// create search filter\n\t\t$search_key = !empty($this->search_field) ? $this->search_field : $this->display_field;\n\t\t$filters[$search_key] = trim($params['search_term']);\n\t\t\n\t\t// sort of hacky here... to make it easy for the model to just filter on the search term (like the users model)\n\t\t$this->model->filter_value = trim($params['search_term']);\n\n\t\tforeach($this->filters as $key => $val)\n\t\t{\n\t\t\t$filters[$key] = $params[$key];\n\n\t\t\tif ( ! empty($val['filter_join']))\n\t\t\t{\n\t\t\t\tif ( ! is_array($this->model->filter_join[$key]))\n\t\t\t\t{\n\t\t\t\t\tsettype($this->model->filter_join, 'array');\n\t\t\t\t}\n\n\t\t\t\t$this->model->filter_join[$key] = $val['filter_join'];\n\t\t\t}\n\t\t}\n\n\t\t// set model filters before pagination and setting table data\n\t\tif (method_exists($this->model, 'add_filters'))\n\t\t{\n\t\t\t$this->model->add_filters($filters);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the tree view\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items_tree()\n\t{\n\t\t// tree\n\t\tif (method_exists($this->model, 'tree') AND is_ajax())\n\t\t{\n\t\t\t$params = $this->_list_process();\n\t\t\t\n\t\t\t$this->load->library('menu');\n\t\t\t$this->menu->depth = NULL; // as deep as it goes\n\t\t\t$this->menu->use_titles = FALSE;\n\t\t\t$this->menu->root_value = 0;\n\t\t\t$this->model->add_filters($params['extra_filters']);\n\t\t\t$menu_items = $this->model->tree();\n\t\t\t\n\t\t\tif ( ! empty($menu_items))\n\t\t\t{\n\t\t\t\t$output = $this->menu->render($menu_items);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$output = '<div>'.lang('no_data').'</div>';\n\t\t\t}\n\n\t\t\t$this->output->set_output($output);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Saves the precedence of fields\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction items_precedence()\n\t{\n\t\tif (is_ajax() AND ! empty($_POST['data_table']) AND ! empty($this->precedence_col))\n\t\t{\n\t\t\tif (is_array($_POST['data_table']))\n\t\t\t{\n\t\t\t\t$i = 0;\n\n\t\t\t\tforeach($_POST['data_table'] as $row)\n\t\t\t\t{\n\t\t\t\t\tif ( ! empty($row))\n\t\t\t\t\t{\n\t\t\t\t\t\t$values = array($this->precedence_col => $i);\n\t\t\t\t\t\t$where = array($this->model->key_field() => $row);\n\t\t\t\t\t\t$this->model->update($values, $where);\n\t\t\t\t\t}\n\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// clear cache\n\t\t\t\t$this->_clear_cache();\n\t\t\t}\n\t\t}\n\t}\n\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the fields to create a record (form view)\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction create($field = NULL, $redirect = TRUE)\n\t{\n\t\t$id = NULL;\n\t\t\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('save'))\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\n\t\t// check permissions\n\t\tif ( ! $this->fuel->auth->has_permission($this->module_obj->permission, 'create'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif (isset($_POST[$this->model->key_field()])) // check for dupes\n\t\t{\n\t\t\tif ($id = $this->_process_create() AND !has_errors())\n\t\t\t{\n\t\t\t\tif ($inline === TRUE)\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/inline_edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\n\t\t\t\t// save any tab states\n\t\t\t\t$this->_save_tab_state($id);\n\n\t\t\t\tif ($redirect)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->fuel->admin->has_notification(Fuel_admin::NOTIFICATION_SUCCESS))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_saved'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect($url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$shell_vars = $this->_shell_vars($id);\n\n\t\t$get = (array) $this->input->get(NULL, TRUE);\n\t\t$post = (array) $this->input->post(NULL, TRUE);\n\t\t$passed_init_vars = array_filter(array_merge($get, $post));\n\n\t\t$form_vars = $this->_form_vars($id, $passed_init_vars, $field, $inline);\n\t\t$vars = array_merge($shell_vars, $form_vars);\n\t\t$vars['action'] = 'create';\n\t\t$vars['related_items'] = $this->model->related_items(array());\n\t\t$crumbs = array($this->module_uri => $this->module_name, lang('action_create'));\n\t\t\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t$this->fuel->admin->set_inline($inline);\n\n\t\tif ( ! empty($field) AND strpos($field, ':') === FALSE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t}\n\t\telse if ($inline === TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT);\n\t\t}\n\n\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_inline_actions', $vars, TRUE);\n\t\t$this->fuel->admin->render($this->views['create_edit'], $vars, '', FUEL_FOLDER);\n\n\t\treturn $id;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * The same as the create method but does not show the left menu\n\t *\n\t * @access\tpublic\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction inline_create($field = NULL)\n\t{\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->create($field);\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Duplicates a record. Similar to edit but without the record ID attached.\n\t *\n\t * @access\tpublic\n\t * @return\tvoid\n\t */\t\n\tfunction duplicate()\n\t{\n\t\t$_POST[$this->model->key_field()] = 'dup';\n\t\t$this->create();\n\t}\n\n\tprotected function _process_create()\n\t{\n\t\t// reset dup id\n\t\tif ($_POST[$this->model->key_field()] == 'dup')\n\t\t{\n\t\t\t$_POST[$this->model->key_field()] = '';\n\n\t\t\t// alter duplicate information if there is a hook\n\t\t\t$_POST = $this->model->on_duplicate($_POST);\n\n\t\t\t$this->load->library('form_builder');\n\t\t\t$fb = new Form_builder();\n\t\t\t$fb->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t\t$fields = $this->model->form_fields($_POST);\n\t\t\t$fb->set_fields($fields);\n\t\t\t$fb->post_process_field_values();// manipulates the $_POST values directly\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->model->on_before_post($this->input->post());\n\n\t\t\t$posted = $this->_process();\n\n\t\t\t// set publish status to no if you do not have the ability to publish\n\t\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'publish') AND ! $this->fuel->auth->has_permission($this->permission, 'activate'))\n\t\t\t{\n\t\t\t\t$posted['published'] = 'no';\n\t\t\t\t$posted['active'] = 'no';\n\t\t\t}\n\n\t\t\t$model = $this->model;\n\n\t\t\t// run before_create hook\n\t\t\t$this->_run_hook('before_create', $posted);\n\n\t\t\t// run before_save hook\n\t\t\t$this->_run_hook('before_save', $posted);\n\n\t\t\t// save the data\n\t\t\t$id = $this->model->save($posted);\n\n\t\t\tif (empty($id))\n\t\t\t{\n\t\t\t\tadd_error(lang('error_invalid_record'));\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t// add id value to the posted array\n\t\t\tif ( ! is_array($this->model->key_field()))\n\t\t\t{\n\t\t\t\t$posted[$this->model->key_field()] = $id;\n\n\t\t\t\t// replace any {id} placeholder values\n\t\t\t\tforeach ($posted as $key => $val)\n\t\t\t\t{\n\t\t\t\t\tif (is_string($val))\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted[$key] = str_replace('{'.$this->model->key_field().'}', $id, $val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// process $_FILES\n\t\t\tif ( ! $this->_process_uploads($posted))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->model->on_after_post($posted);\n\n\t\t\tif (!$this->model->is_valid())\n\t\t\t{\n\t\t\t\tadd_errors($this->model->get_errors());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// archive data\n\t\t\t\t$archive_data = $this->model->cleaned_data();\n\t\t\t\t$archive_data[$this->model->key_field()] = $id;\n\t\t\t\tif ($this->archivable) $this->model->archive($id, $archive_data);\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// run after_create hook\n\t\t\t\t$this->_run_hook('after_create', $data);\n\n\t\t\t\t// run after_save hook\n\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\tif ( ! empty($data))\n\t\t\t\t{\n\t\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t\t$this->_clear_cache();\n\t\t\t\t\treturn $id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Displays the fields to edit a record (form view)\n\t *\n\t * @access\tpublic\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @param\tstring\tDetermines whether to redirect the page after save or not\n\t * @return\tvoid\n\t */\t\n\tfunction edit($id = NULL, $field = NULL, $redirect = TRUE)\n\t{\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('save') AND  $this->displayonly === FALSE)\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\n\t\t// check permissions\n\t\tif ( ! $this->fuel->auth->has_permission($this->module_obj->permission, 'edit') AND ! $this->fuel->auth->has_permission($this->module_obj->permission, 'create'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif ($this->input->post($this->model->key_field()))\n\t\t{\n\t\t\tif ($this->_process_edit($id) AND !has_errors())\n\t\t\t{\n\t\t\t\tif ($inline === TRUE)\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/inline_edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$url = fuel_uri($this->module_uri.'/edit/'.$id.'/'.$field, TRUE);\n\t\t\t\t}\n\n\t\t\t\tif ($redirect)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->fuel->admin->has_notification(Fuel_admin::NOTIFICATION_SUCCESS))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_saved'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\n\t\t\t\t\tredirect($url);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//$vars = $this->_form($id);\n\t\t$data = $this->_saved_data($id);\n\t\tif (empty($data))\n\t\t{\n\t\t\tshow_error(lang('error_invalid_record'));\n\t\t}\n\t\t$action = ( ! empty($data[$this->model->key_field()])) ? 'edit' : 'create';\n\t\n\t\t// check model first for preview path method\n\t\tif (method_exists($this->model, 'preview_path'))\n\t\t{\n\t\t\t$this->preview_path = $this->model->preview_path($data, $this->preview_path);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// otherwise, substitute data values into preview path\n\t\t\t$this->preview_path = $this->module_obj->url($data);\t\n\t\t}\n\n\t\t$shell_vars = $this->_shell_vars($id, $action, $data);\n\t\t$form_vars = $this->_form_vars($id, $data, $field, $inline);\n\n\t\t$vars = array_merge($shell_vars, $form_vars);\n\t\t$vars['data'] = $data;\n\t\t$vars['action'] = $action;\n\t\t$vars['related_items'] = $this->model->related_items($data);\n\n\t\t// active or publish fields\n\t\tif (isset($data['published']))\n\t\t{\n\t\t\t$vars['publish'] = ( ! empty($data['published']) AND is_true_val($data['published'])) ? 'unpublish' : 'publish';\n\t\t}\n\t\t\n\t\tif (isset($data['active']))\n\t\t{\n\t\t\t$vars['activate'] = ( ! empty($data['active']) AND is_true_val($data['active'])) ? 'deactivate' : 'activate';\n\t\t}\n\n\t\tif ( ! empty($field) AND strpos($field, ':') === FALSE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t}\n\t\telse if ($inline === TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT);\n\t\t}\n\n\t\t$crumbs = array($this->module_uri => $this->module_name);\n\n        $msg_data = $this->model->display_name($data);\n        if ( ! empty($msg_data))\n\t\t{\n\t\t\t$crumbs[''] = character_limiter(strip_tags($msg_data), 100);\n\t\t}\n\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\n\t\t$vars['actions'] = $this->load->module_view(FUEL_FOLDER, '_blocks/module_create_edit_actions', $vars, TRUE);\n\t\t$this->fuel->admin->render($this->views['create_edit'], $vars, '', FUEL_FOLDER);\n\n\t\t// do this after rendering so it doesn't render current page'\n\t\tif ( ! empty($msg_data) AND $inline !== TRUE)\n\t\t{\n\t\t\t$this->fuel->admin->add_recent_page($this->uri->uri_string(), $this->module_name.': '.$msg_data, $this->module);\n\t\t}\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * The same as the edit method but does not show the left menu\n\t *\n\t * @access\tpublic\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of a field, or fields separated by colon to display in the form (optional)\n\t * @return\tvoid\n\t */\t\n\tfunction inline_edit($id = NULL, $field = NULL)\n\t{\n\t\tif (empty($id))\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t\t\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->edit($id, $field);\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Processes the form data to save\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @return\tboolean\n\t */\t\n\tprotected function _process_edit($id)\n\t{\n\t\t$this->model->on_before_post($this->input->post());\n\n\t\t$posted = $this->_process($id);\n\n\t\t// run before_edit hook\n\t\t$this->_run_hook('before_edit', $posted);\n\n\t\t// run before_save hook\n\t\t$this->_run_hook('before_save', $posted);\n\n\t\tif ($this->model->save($posted))\n\t\t{\n\t\t\t// process $_FILES...\n\t\t\tif ( ! $this->_process_uploads($posted))\n\t\t\t{\n\t\t\t\treturn FALSE;\n\t\t\t}\n\n\t\t\t$this->model->on_after_post($posted);\n\n\t\t\tif ( ! $this->model->is_valid())\n\t\t\t{\n\t\t\t\tadd_errors($this->model->get_errors());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// archive data\n\t\t\t\t$archive_data = $this->model->cleaned_data();\n\t\t\t\tif ($this->archivable) $this->model->archive($id, $archive_data);\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// run after_edit hook\n\t\t\t\t$this->_run_hook('after_edit', $data);\n\n\t\t\t\t// run after_save hook\n\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t$this->_clear_cache();\n\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t\t}\n\n\t\treturn FALSE;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Sanitizes the input based on the module's settings\n\t *\n\t * @access\tprotected\n\t * @param\tarray\tThe array of posted data to sanitize\n\t * @return\tarray\n\t */\t\n\tprotected function _sanitize($data)\n\t{\n\t\t$posted = $data;\n\n\t\tif ( ! empty($this->sanitize_input))\n\t\t{\n\t\t\t// functions that are valid for sanitizing\n\t\t\t$valid_funcs = $this->fuel->config('module_sanitize_funcs');\n\n\t\t\tif ($this->sanitize_input === TRUE)\n\t\t\t{\n\t\t\t\t$this->sanitize_input = array('xss');\n\t\t\t}\n\n\t\t\t// force to array to normalize\n\t\t\t$sanitize_input = (array) $this->sanitize_input;\n\n\t\t\tif (is_array($data))\n\t\t\t{\n\t\t\t\tforeach($data as $key => $post)\n\t\t\t\t{\n\t\t\t\t\tif (is_array($post))\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted[$key] = $this->_sanitize($post);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// loop through sanitization functions \n\t\t\t\t\t\tforeach($sanitize_input as $func)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$func = (isset($valid_funcs[$func])) ? $valid_funcs[$func] : FALSE;\n\n\t\t\t\t\t\t\tif ($func)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$posted[$key] = $func($posted[$key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// loop through sanitization functions \n\t\t\t\tforeach($sanitize_input as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$func = (isset($valid_funcs[$val])) ? $valid_funcs[$val] : FALSE;\n\n\t\t\t\t\tif ($func)\n\t\t\t\t\t{\n\t\t\t\t\t\t$posted = $func($posted);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $posted;\n\t}\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an array of shell variables to apply to the main area of the page\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @param\tstring\tThe name of the action to apply to the main form element\n\t * @param\tarray\tAn array of data information\n\t * @return\tarray\n\t */\t\n\tprotected function _shell_vars($id = NULL, $action = 'create', $data = array())\n\t{\n\t\t$model = $this->model;\n\t\t$this->js_controller_params['method'] = 'add_edit';\n\t\t$this->js_controller_params['linked_fields'] = $this->model->linked_fields;\n\t\t\n\t\t// other variables\n\t\tif (method_exists($this->model, 'vars'))\n\t\t{\n\t\t\t$model_vars = $this->model->vars($data);\n\t\t\t$this->load->vars($model_vars);\n\t\t}\n\t\t$vars['id'] = $id;\n\t\t$vars['versions'] = ($this->displayonly === FALSE AND $this->archivable) ? $this->fuel_archives_model->options_list($id, $this->model->table_name()) : array();\n\t\t$vars['others'] = $this->model->get_others($this->display_field, $id);\n\t\t$vars['action'] = $action;\n\t\t$vars['notifications'] = $this->load->module_view(FUEL_FOLDER, '_blocks/notifications', $vars, TRUE);\n\t\t\n\t\treturn $vars;\n\t}\n\t\n\t\n\t// --------------------------------------------------------------------\n\t\n\t/**\n\t * Returns an array of saved data based on the id value passed\n\t *\n\t * @access\tprotected\n\t * @param\tint\t\tThe ID value of the record to edit\n\t * @return\tarray\n\t */\t\n\tprotected function _saved_data($id)\n\t{\n\t\tif (empty($id)) return array();\n\n\t\t$edit_method = $this->edit_method;\n\n\t\tif ($edit_method != 'find_one_array')\n\t\t{\n\t\t\t$saved = $this->model->$edit_method($id);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$saved = $this->model->$edit_method(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\t\t}\n\n\t\treturn $saved;\n\t}\n\t\n\t// separated to make it easier in subclasses to use the form without rendering the page\n\tprotected function _form_vars($id = NULL, $values = array(), $field = NULL, $inline = FALSE)\n\t{\n\n\t\t$this->load->library('form_builder');\n\n\t\t// load custom fields\n\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\n\t\t$model = $this->model;\n\t\t$this->js_controller_params['method'] = 'add_edit';\n\t\t$action = (!empty($values[$this->model->key_field()])) ? 'edit' : 'create';\n\n\t\t// create fields... start with the table info and go from there\n\t\t$fields = (!empty($values)) ? $this->model->form_fields($values) : $this->model->form_fields($_POST);\n\n\t\t// if it's an object, then extract\n\t\tif ($fields instanceof Base_model_fields)\n\t\t{\n\t\t\t$fields = $fields->get_fields();\n\t\t}\n\n\t\t// if field parameter is set, then we just display a single field\n\t\tif ( ! empty($field) AND ! is_numeric($field))\n\t\t{\n\t\t\t// added per pierlo in Forum (http://www.getfuelcms.com/forums/discussion/673/fuel_helper-fuel_edit-markers)\n\t\t\t$columns = explode(':', $field);\n\n\t\t\t// special case if you use the word required\n\t\t\tif (in_array('required', $columns))\n\t\t\t{\n\t\t\t\t$columns = array_merge($columns, $this->model->required);\n\t\t\t}\n\n\t\t\t// set them to hidden... just in case model hooks require the values to be passed on save\n\t\t\tforeach($fields as $k => $f)\n\t\t\t{\n\t\t\t\tif ( ! in_array($k, $columns))\n\t\t\t\t{\n\t\t\t\t\t$fields[$k]['type'] = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (count($columns) <= 1)\n\t\t\t\t{\n\t\t\t\t\t$fields[$k]['display_label'] = FALSE;\n\t\t\t\t\t$fields[$k]['required'] = FALSE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set published/active to hidden since setting this is an buttton/action instead of a form field\n\t\t$form = '';\n\n\t\tif (is_array($fields))\n\t\t{\n\t\t\t$field_values = ( ! empty($_POST)) ? $_POST : $values;\n\n\t\t\t$published_active = array(\n\t\t\t\t'publish' => 'published',\n\t\t\t\t'active' => 'activate'\n\t\t\t);\n\n\t\t\tforeach($published_active as $k => $v)\n\t\t\t{\n\t\t\t\tif ( ! $this->fuel->auth->has_permission($this->permission, $k))\n\t\t\t\t{\n\t\t\t\t\tunset($fields[$v]);\n\t\t\t\t}\n\n\t\t\t\tif (isset($fields[$v]) AND !empty($values[$v]))\n\t\t\t\t{\n\t\t\t\t\t$fields['published']['value'] = $values[$v];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$this->form_builder->set_validator($this->model->get_validation());\n\n\t\t\t// add hidden field with the module name for convenience\n\t\t\t$common_fields = $this->_common_fields($field_values);\n\t\t\t$fields = array_merge($fields, $common_fields);\n\n\t\t\t$fields['__fuel_inline_action__'] = array('type' => 'hidden');\n\t\t\t$fields['__fuel_inline_action__']['class'] = '__fuel_inline_action__';\n\t\t\t$fields['__fuel_inline_action__']['value'] = (empty($id)) ? 'create' : 'edit';\n\n\t\t\t$fields['__fuel_inline__'] = array('type' => 'hidden');\n\t\t\t$fields['__fuel_inline__']['value'] = ($inline) ? 1 : 0;\n\n\t\t\t$this->form_builder->submit_value = lang('btn_save');\n\t\t\t$this->form_builder->question_keys = array();\n\t\t\t$this->form_builder->use_form_tag = FALSE;\n\n\t\t\tif ($this->model->has_auto_increment())\n\t\t\t{\n\t\t\t\t$this->form_builder->hidden = (array) $this->model->key_field();\n\t\t\t}\n\n\t\t\tif ($this->config->item('date_format'))\n\t\t\t{\n\t\t\t\t$this->form_builder->date_format = $this->config->item('date_format');\n\t\t\t}\n\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$this->form_builder->cancel_value = lang('viewpage_close');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->form_builder->cancel_value = lang('btn_cancel');\n\t\t\t}\n\n\t\t\t$this->form_builder->set_fields($fields);\n\t\t\t$this->form_builder->display_errors = FALSE;\n\t\t\t$this->form_builder->set_field_values($field_values);\n\n\t\t\t// we will set this in the BaseFuelController.js file so that the jqx page variable is available upon execution of any form field js\n\t\t\t//$this->form_builder->auto_execute_js = FALSE;\n\t\t\tif (!isset($fields['__FORM_BUILDER__'], $fields['__FORM_BUILDER__']['displayonly']))\n\t\t\t{\n\t\t\t\t$this->form_builder->displayonly = $this->displayonly;\n\t\t\t}\n\t\t\t\n\t\t\t$this->_prep_csrf();\n\t\t\t$form = $this->form_builder->render();\n\t\t}\n\n\t\t$action_uri = (!empty($id)) ? $action.'/'.$id.'/'.$field : $action.'/'.$field;\n\t\t$vars['form_action'] = ($inline) ? $this->module_uri.'/inline_'.$action_uri.query_str() : $this->module_uri.'/'.$action_uri.query_str();\n\t\t$vars['form'] = $form;\n\t\t$vars['data'] = $values;\n\t\t$vars['error'] = $this->model->get_errors();\n\t\t$vars['notifications'] = $this->load->module_view(FUEL_FOLDER, '_blocks/notifications', $vars, TRUE);\n\t\t$vars['instructions'] = (empty($field)) ? $this->instructions : '';\n\t\t$vars['field'] = (!empty($field));\n\n\t\treturn $vars;\n\t}\n\n\tprotected function _process($id = NULL)\n\t{\n\t\t$this->load->helper('security');\n\t\t$this->load->library('form_builder');\n\n\t\t// XSS key check\n\t\tif (!$this->_is_valid_csrf())\n\t\t{\n\t\t\tadd_error(lang('error_saving'));\n\t\t}\n\t\t\n\t\t$this->_orig_post = $_POST;\n\n\t\t// filter placeholder $_POST values \n\t\t$callback = function($matches){\n\t\t\tif (isset($_POST[$matches[\"2\"]]))\n\t\t\t{\n\t\t\t\t$str = $matches[1].$_POST[$matches[\"2\"]].$matches[3];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$str = $matches[0];\n\t\t\t}\n\t\t\treturn $str;\n\t\t};\n\n\t\t// first loop through and create simple non-namespaced $_POST values if they don't exist for convenience'\n\t\tforeach($_POST as $key => $val)\n\t\t{\n\t\t\t$key_parts = explode('--', $key);\n\t\t\t$tmp_key = end($key_parts);\n\t\t\t$_POST[$tmp_key] = $val;\n\t\t}\n\n\t\t// now loop through and do any substitution\n\t\tforeach($_POST as $key => $val)\n\t\t{\n\t\t\tif (is_string($val))\n\t\t\t{\n\t\t\t\t$_POST[$key] = preg_replace_callback('#(.*)\\{(.+)\\}(.*)#U', $callback, $val);\n\t\t\t}\n\t\t}\n\n\t\t// set boolean fields \n\t\tif ( ! empty($this->model->boolean_fields) AND is_array($this->model->boolean_fields))\n\t\t{\n\t\t\tforeach($this->model->boolean_fields as $val)\n\t\t\t{\n\t\t\t\t$_POST[$val] = (isset($_POST[$val])) ? $_POST[$val] : 0;\n\t\t\t}\n\t\t}\n\n\t\t// if no permission to publish, then we revoke\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'publish'))\n\t\t{\n\t\t\tunset($_POST['published']);\n\t\t}\n\n\t\t// set key_field if it is not id\n\t\tif ( ! empty($_POST['id']) AND $this->model->key_field() != 'id')\n\t\t{\n\t\t\t$_POST[$this->model->key_field()] = !empty($id) ? $id : $_POST['id'];\n\t\t}\n\n\t\t// run any form field post processing hooks\n\t\t$this->load->library('form_builder');\n\n\t\t// use a new instance to prevent problems when duplicating\n\t\t$fb = new Form_builder();\n\t\t$fb->load_custom_fields(APPPATH.'config/custom_fields.php');\n\t\t// $fields = $this->model->form_fields($_POST);\n\t\t$fields = $this->_block_processing($this->model->form_fields(), $_POST);\n\t\t$fb->set_fields($fields);\n\t\t$fb->post_process_field_values();// manipulates the $_POST values directly\n\n\t\t// sanitize input if set in module configuration\n\t\t$posted = $this->_sanitize($_POST);\n\n\t\treturn $posted;\n\t}\n\n\tpublic function _block_processing($fields, $posted)\n\t{\n\t\t// grab the fields array if using the form fields class\n\t\tif (is_object($fields) && ($fields instanceof Base_model_fields)) {\n\t\t\t$fields = $fields->get_fields();\n\t\t}\n\n\t\t// add in block fields\n\t\tforeach($fields as $key => $val)\n\t\t{\n\t\t\t// check blocks for post processing of variables\n\t\t\tif (isset($val['type']) AND $val['type'] == 'block' AND isset($posted[$key]['block_name']))\n\t\t\t{\n\t\t\t\t$block_layout = $this->fuel->layouts->get($posted[$key]['block_name'], 'block');\n\n\t\t\t\tif ($block_layout)\n\t\t\t\t{\n\t\t\t\t\t$block_fields = $block_layout->fields();\n\t\t\t\t\t$fields = array_merge($fields, $block_fields);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// check for template layouts that may have nested fields... this is really ugly\n\t\t\tif ( ! empty($val['fields']) AND is_array($val['fields']))\n\t\t\t{\n\t\t\t\t//$fields = array_merge($fields, $val['fields']);\n\t\t\t\tforeach($val['fields'] as $k => $v)\n\t\t\t\t{\n\t\t\t\t\tif (isset($v['type']) AND $v['type'] == 'block' AND isset($posted[$key]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (is_array($posted[$key]) AND is_int(key($posted[$key])))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach($posted[$key] as $a => $b)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (is_array($b))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tforeach($b as $c => $d)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (isset($d['block_name']))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$block_layout = $this->fuel->layouts->get($d['block_name'], 'block');\n\n\t\t\t\t\t\t\t\t\t\t\tif ($block_layout)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t$block_fields = $block_layout->fields();\n\n\t\t\t\t\t\t\t\t\t\t\t\t// now switch out the key to allow it to trigger the post_process_callback...\n\t\t\t\t\t\t\t\t\t\t\t\tforeach($block_fields as $e => $f)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t$block_fields[$e]['subkey'] = $k;\n\t\t\t\t\t\t\t\t\t\t\t\t\t$block_fields[$e]['key'] = $key;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t$fields = array_merge($fields, $block_fields);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $fields;\n\t}\n\t\n\tfunction form($id = NULL, $field = NULL)\n\t{\n\t\t$saved = $this->_saved_data($id);\n\t\t$vars = $this->_form_vars($id, $saved, $field);\n\t\t$this->load->module_view(FUEL_FOLDER, '_layouts/module_form', $vars);\n\t}\n\n\tfunction delete($id = NULL)\n\t{\n\t\t// check that the action even exists and if not, show a 404\n\t\tif ( ! $this->fuel->auth->module_has_action('delete')) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'delete'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$inline = $this->fuel->admin->is_inline();\n\n\t\tif (! empty($_POST['id']))\n\t\t{\n\t\t\tif (!empty($id))\n\t\t\t{\n\t\t\t\t$posted = array($id);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$posted = explode('|', $this->input->post('id', TRUE));\n\t\t\t}\n\n\t\t\t// run before_delete hook\n\t\t\t$this->_run_hook('before_delete', $posted);\n\n\t\t\t// Flags\n\t\t\t$any_success = $any_failure = FALSE;\n\n\t\t\tforeach ($posted as $id)\n\t\t\t{\n\t\t\t\tif ($this->model->delete(array($this->model->table_name().'.'.$this->model->key_field() => $id)))\n\t\t\t\t{\n\t\t\t\t\t$any_success = TRUE;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$any_failure = TRUE;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// run after_delete hook\n\t\t\t$this->_run_hook('after_delete', $posted);\n\n\t\t\t$this->_clear_cache();\n\n\t\t\tif (count($posted) > 1)\n\t\t\t{\n\t\t\t\t$this->fuel->logs->write(lang('module_multiple_deleted', $this->module));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->fuel->logs->write(lang('module_deleted', count($posted), $this->module));\n\t\t\t}\n\t\t\t\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$vars['title'] = '';\n\t\t\t\t$vars['id'] = '';\n\t\t\t\t$vars['back_action'] = '';\n\n\t\t\t\t$this->fuel->admin->render('modules/module_close_modal', $vars, '', FUEL_FOLDER);\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_TITLEBAR);\n\t\t\t\t$this->fuel->admin->render($this->views['delete'], $vars, '', FUEL_FOLDER);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// set a success delete message\n\t\t\t\tif ($any_success)\n\t\t\t\t{\n\t\t\t\t\tif ( ! $this->session->flashdata('success'))\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->fuel->admin->set_notification(lang('data_deleted'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// set an error delete message\n\t\t\t\tif ($any_failure)\n\t\t\t\t{\n\t\t\t\t\t// first try to get an error added in model by $this->add_error('...')\n\t\t\t\t\t$msg = $this->model->get_validation()->get_last_error();\n\n\t\t\t\t\t// if there is none like that, lets use default message\n\t\t\t\t\tif (is_null($msg)) $msg = lang('data_not_deleted');\n\n\t\t\t\t\t$this->fuel->admin->set_notification($msg, Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$url = fuel_uri($this->module_uri);\n\t\t\t\tredirect($url);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->js_controller_params['method'] = 'deleteItem';\n\n\t\t\t$vars = array();\n\n\t\t\tif ( ! empty($_POST['delete']) AND is_array($_POST['delete']))\n\t\t\t{\n\t\t\t\t$data = array();\n\n\t\t\t\tforeach($this->input->post('delete') as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$d = $this->model->find_by_key($key, 'array');\n\n\t\t\t\t\tif ( ! empty($d)) $data[] = $d[$this->display_field];\n\t\t\t\t}\n\n\t\t\t\t$vars['id'] = implode('|', array_keys($_POST['delete']));\n\t\t\t\t$vars['title'] = implode(', ', $data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$data = $this->model->find_by_key($id, 'array');\n\t\t\t\t$vars['id'] = $id;\n\t\t\t\t$vars['title'] = $this->model->display_name($data);\n\t\t\t}\n\n\t\t\tif (empty($data)) show_404();\n\n\t\t\t$vars['error'] = $this->model->get_errors();\n\n\t\t\t$crumbs = array($this->module_uri => $this->module_name);\n\t\t\t$crumbs[''] = character_limiter(strip_tags(lang('action_delete').' '.$vars['title']), 100);\n\n\t\t\t$this->fuel->admin->set_titlebar($crumbs);\n\n\t\t\tif ($inline)\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_COMPACT_NO_ACTION);\n\t\t\t\t$vars['back_action'] = fuel_url($this->module_uri.'/inline_edit/'.$id);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->fuel->admin->set_display_mode(Fuel_admin::DISPLAY_NO_ACTION);\n\t\t\t\t$vars['back_action'] = fuel_url($this->module_uri.'/');\n\t\t\t}\n\n\t\t\t$action_uri = 'delete/'.$id;\n\t\t\t$vars['form_action'] = ($inline) ? $this->module_uri.'/inline_'.$action_uri : $this->module_uri.'/'.$action_uri;\n\n\t\t\t$this->fuel->admin->render($this->views['delete'], $vars, '', FUEL_FOLDER);\n\t\t}\n\t}\n\n\tfunction inline_delete($id)\n\t{\n\t\t$this->fuel->admin->set_inline(TRUE);\n\t\t$this->delete($id);\n\t}\n\t\n\tfunction restore()\n\t{\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'edit'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\tif ( ! empty($_POST['fuel_restore_version']) AND ! empty($_POST['fuel_restore_ref_id']))\n\t\t{\n\t\t\tif ( ! $this->model->restore($this->input->post('fuel_restore_ref_id'), $this->input->post('fuel_restore_version')))\n\t\t\t{\n\t\t\t\t$msg = lang('module_restored', $this->module_name);\n\t\t\t\t$this->fuel->logs->write($msg);\n\n\t\t\t\t$this->fuel->admin->set_notification($this->model->get_validation()->get_last_error(), Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( ! $this->session->flashdata('success'))\n\t\t\t\t{\n\t\t\t\t\t$this->fuel->admin->set_notification(lang('module_restored_success'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t}\n\n\t\t\t\t$this->_clear_cache();\n\t\t\t}\n\n\t\t\tredirect(fuel_uri($this->module_uri.'/edit/'.$this->input->post('fuel_restore_ref_id', TRUE)));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_404();\n\t\t}\n\t}\n\t\n\tfunction replace($id = NULL)\n\t{\n\t\tif (empty($id)) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'edit') OR ! $this->fuel->auth->has_permission($this->permission, 'delete'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\t$success = FALSE;\n\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\tif ( ! empty($_POST['fuel_replace_id']))\n\t\t\t{\n\t\t\t\t$replace_id = (int) $this->input->post('fuel_replace_id', true);\n\t\t\t\t//$delete = is_true_val($this->input->post('fuel_delete_replacement'));\n\t\t\t\t$delete = TRUE;\n\t\t\t\tif (!$this->model->replace($replace_id, $id, $delete))\n\t\t\t\t{\n\t\t\t\t\tadd_error($this->model->get_validation()->get_last_error());\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->fuel->admin->set_notification(lang('module_replaced_success'), Fuel_admin::NOTIFICATION_SUCCESS);\n\t\t\t\t\t$success = TRUE;\n\t\t\t\t\t$this->_clear_cache();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tadd_error(lang('error_select_replacement'));\n\t\t\t}\n\t\t\t//redirect(fuel_uri($this->module_uri.'/edit/'.$id));\n\t\t}\n\n\t\t$this->load->library('form_builder');\n\n\t\t$fields = array();\n\t\t$other_options = $this->model->get_others($this->display_field, $id);\n\t\t$fields['fuel_replace_id'] = array('label' => 'Replace record:', 'type' => 'select', 'options' => $other_options, 'first_option' => 'Select record to replace...', 'style' => 'max-width: 400px', 'disabled_options' => array($id));\n\t\t//$fields['fuel_delete_replacement'] = array('label' => 'Delete replacement', 'type' => 'checkbox', 'value' => 'yes');\n\n\t\tif ($success)\n\t\t{\n\t\t\t$fields['new_fuel_replace_id'] = array('type' => 'hidden', 'value' => (int) $replace_id);\n\t\t}\n\n\t\t//$this->form_builder->use_form_tag = FALSE;\n\t\t$this->form_builder->set_fields($fields);\n\t\t$this->form_builder->display_errors = FALSE;\n\t\t//$this->form_builder->submit_value = NULL;\n\n\t\t$vars['form'] = $this->form_builder->render();\n\t\t$this->fuel->admin->set_inline(TRUE);\n\n\t\t$crumbs = array('' => $this->module_name, lang('action_replace'));\n\t\t$this->fuel->admin->set_titlebar($crumbs);\n\t\t$this->fuel->admin->render('modules/module_replace', $vars, '', FUEL_FOLDER);\n\t}\n\n\t// displays the module's designated view'\n\tfunction view($id = NULL)\n\t{\n\t\tif ( ! empty($this->preview_path) AND !empty($id))\n\t\t{\n\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t$url = $this->module_obj->url($data);\n\n\t\t\t// change the last page to be the referrer\n\t\t\t$last_page = (isset($_SERVER['HTTP_REFERER'])) ? substr($_SERVER['HTTP_REFERER'], strlen(site_url())) : NULL;\n\t\t\t$this->fuel->admin->set_last_page($last_page);\n\t\t\tredirect($url);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tshow_error(lang('no_preview_path'));\n\t\t}\n\t}\n\n\t// refreshes a single field\n\tfunction refresh_field()\n\t{\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t$fields = $this->model->form_fields();\n\n\t\t\tif (is_object($fields) AND $fields instanceof Base_model_fields)\n\t\t\t{\n\t\t\t\t$fields = $fields->get_fields();\n\t\t\t}\n\n\t\t\t$field = $this->input->post('field', TRUE);\n\n\t\t\tif ( ! isset($fields[$field])) return;\n\n\t\t\t$field_id = $this->input->post('field_id', TRUE);\n\t\t\t$values = $this->input->post('values', TRUE);\n\n\t\t\t$selected = $this->input->post('selected', TRUE);\n\t\t\t$field_parts = explode('vars--', $field);\n\t\t\t$field_key = end($field_parts);\n\n\t\t\t$this->load->library('form_builder');\n\t\t\t$this->form_builder->load_custom_fields(APPPATH.'config/custom_fields.php');\n\n\t\t\t// for multi select\n\t\t\tif (is_array($values))\n\t\t\t{\n\t\t\t\t$selectedValues = $values;\n\t\t\t\tif ( ! in_array($selected, $selectedValues))\n\t\t\t\t{\n\t\t\t\t\t$selectedValues[] = $selected;\n\t\t\t\t}\n\n\t\t\t\t$selected = $selectedValues;\n\t\t\t}\n\n\t\t\tif ( ! empty($selected)) $fields[$field]['value'] = $selected;\n\n\t\t\t$fields[$field]['name'] = $field_id;\n\t\t\t$output = '';\n\n\t\t\t// if template/nested field types, then we need to look at the sub field\n\t\t\tif ($fields[$field_key]['type'] == 'template')\n\t\t\t{\n\t\t\t\t//$fields['return_fields'] = TRUE;\n\t\t\t\trequire_once(FUEL_PATH.'libraries/Fuel_custom_fields.php');\n\t\t\t\t$fuel_cf = new Fuel_custom_fields();\n\t\t\t\t$index = $this->input->get_post('index', TRUE);\n\t\t\t\t$key = $this->input->get_post('key', TRUE);\n\t\t\t\t$field_name = $this->input->get_post('field_name', TRUE);\n\t\t\t\t$params = $fields[$field_key];\n\t\t\t\t$params['index'] = $index;\n\t\t\t\t$params['name'] = $field_name;\n\t\t\t\t$params['key'] = $field_name;\n\t\t\t\t$params['value'] = array();\n\t\t\t\t$params['value'][0] = $selected;\n\t\t\t\t$this->form_builder->name_array = $field_name;\n\t\t\t\t//$fb->set_field_values();\n\t\t\t\t$params['instance'] =& $this->form_builder;\n\n\t\t\t\t$sub_fields = $fuel_cf->template($params, TRUE);\n\n\t\t\t\tif ( ! empty($sub_fields[0][$key])) $output = $sub_fields[0][$key];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ( ! empty($selected)) $fields[$field_key]['value'] = $selected;\n\n\t\t\t\t$fields[$field_key]['name'] = $field_id;\n\n\t\t\t\t// if the field is an ID, then we will do a select instead of a text field\n\t\t\t\tif (isset($fields[$this->model->key_field()]))\n\t\t\t\t{\n\t\t\t\t\t$fields[$this->model->key_field()]['type'] = 'select';\n\t\t\t\t\t$fields[$this->model->key_field()]['options'] = $this->model->options_list();\n\t\t\t\t}\n\n\t\t\t\t$output = $this->form_builder->create_field($fields[$field_key]);\n\t\t\t}\n\n\t\t\t$this->output->set_output($output);\n\t\t}\n\t}\n\t\n\t// processes linked fields\n\tfunction process_linked()\n\t{\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t$master_field = $this->input->post('master_field', FALSE);\n\t\t\t$master_value = $this->input->post('master_value', FALSE);\n\t\t\t$slave_field = $this->input->post('slave_field', FALSE);\n\n\t\t\t$values = array(\n\t\t\t\t$master_field => $master_value,\n\t\t\t\t$slave_field => '' // blank so we can process\n\t\t\t);\n\n\t\t\t$processed = $this->model->process_linked($values);\n\n\t\t\tif ( ! empty($processed[$slave_field]))\n\t\t\t{\n\t\t\t\t$this->output->set_output($processed[$slave_field]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// automatically calls ajax methods on the model\n\tfunction ajax($method = NULL)\n\t{\n\t\t// must not be empty and must start with find_ (... don't want to access methods like delete)\n\t\tif (is_ajax())\n\t\t{\n\t\t\t// append ajax to the method name... to prevent any conflicts with default methods\n\t\t\t$method = 'ajax_'.$method;\n\n\t\t\t$get = (array) $this->input->get(NULL, TRUE);\n\t\t\t$post = (array) $this->input->post(NULL, TRUE);\n\t\t\t$params = array_filter(array_merge($get, $post));\n\t\t\tif ( ! method_exists($this->model, $method))\n\t\t\t{\n\t\t\t\tshow_error(lang('error_invalid_method'));\n\t\t\t}\n\n\t\t\t$results = $this->model->$method($params);\n\n\t\t\tif (is_string($results))\n\t\t\t{\n\t\t\t\t$this->output->set_output($results);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->output->set_header('Cache-Control: no-cache, must-revalidate');\n\t\t\t\t$this->output->set_header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\n\t\t\t\t$this->output->set_header('Last-Modified: '. gmdate('D, d M Y H:i:s').'GMT');\n\t\t\t\t$this->output->set_header('Content-type: application/json');\n\t\t\t\t$output = json_encode($results);\n\n\t\t\t\techo $output;\n\t\t\t}\n\t\t}\n\t}\n\n\t// exports data to CSV\n\tfunction export()\n\t{\n\t\tif (empty($this->exportable)) show_404();\n\n\t\tif ( ! $this->fuel->auth->has_permission($this->permission, 'export'))\n\t\t{\n\t\t\tshow_error(lang('error_no_permissions', fuel_url()));\n\t\t}\n\n\t\tif ( ! empty($_POST))\n\t\t{\n\t\t\t// load dbutils for convenience to use in custom methods on model\n\t\t\t$this->load->dbutil();\n\t\t\t$this->load->helper('download');\n\n\t\t\t$filters = $this->model->filters($this->filters);\n\t\t\tif (is_object($filters) && ($filters instanceof Base_model_fields)) {\n\t\t\t\t$filters = $filters->get_fields();\n\t\t\t}\n\t\t\t$this->filters = array_merge($this->filters, $filters);\n\t\n\t\t\t$filename = $this->module.'_'.date('Y-m-d').'.csv';\n\t\t\t$params = $this->_list_process();\n\t\t\t$this->_filter_list($params);\n\t\t\t$data = $this->model->export_data($params);\n\n\t\t\tforce_download($filename, $data);\n\t\t}\n\t}\n\n\t// used in list view to quickly unpublish (if they have permission)\n\tfunction toggle_on($id = NULL, $field = 'published')\n\t{\n\t\t$this->_toggle($id, $field, 'on');\n\t}\n\n\t// used in list view to quickly publish (if they have permission)\n\tfunction toggle_off($id = NULL, $field = 'published')\n\t{\n\t\t$this->_toggle($id, $field, 'off');\n\t}\n\n\t// reduce code by creating this shortcut function for the unpublish/publish\n\tfunction _toggle($id, $field, $toggle)\n\t{\n\t\tif ( ! $this->fuel->auth->module_has_action('save') OR ($field == 'publish' AND !$this->fuel->auth->has_permission($this->permission, 'publish')))\n\t\t{\n\t\t\treturn FALSE;\n\t\t}\n\n\t\tif (empty($id))\n\t\t{\n\t\t\t$id = $this->input->post($this->model->key_field());\n\t\t}\n\n\t\tif ($id)\n\t\t{\n\t\t\t$save = $this->model->find_by_key($id, 'array');\n\t\t\t$field_info = $this->model->field_info($field);\n\n\t\t\tif ( ! empty($save))\n\t\t\t{\n\t\t\t\tif ($toggle == 'on')\n\t\t\t\t{\n\t\t\t\t\t$save[$field] = ($field_info['type'] != 'enum') ? 1 : 'yes';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$save[$field] = ($field_info['type'] != 'enum') ? 0 : 'no';\n\t\t\t\t}\n\n\t\t\t\t// run before_edit hook\n\t\t\t\t$this->_run_hook('before_edit', $save);\n\n\t\t\t\t// run before_save hook\n\t\t\t\t$this->_run_hook('before_save', $save);\n\n\t\t\t\t$save = $this->model->clean($save);\n\t\t\t\t$where[$this->model->key_field()] = $id;\n\n\t\t\t\t// use update instead of save to avoid issue with has_many and belongs_to being removed\n\t\t\t\tif ($this->model->update($save, $where))\n\t\t\t\t{\n\t\t\t\t\t// clear cache\n\t\t\t\t\t$this->_clear_cache();\n\n\t\t\t\t\t// log it\n\t\t\t\t\t$data = $this->model->find_by_key($id, 'array');\n\n\t\t\t\t\t// run after_edit hook\n\t\t\t\t\t$this->_run_hook('after_edit', $data);\n\n\t\t\t\t\t// run after_save hook\n\t\t\t\t\t$this->_run_hook('after_save', $data);\n\n\t\t\t\t\t$msg_data = $this->model->display_name($data);\n\t\t\t\t\t$msg = lang('module_edited', $this->module_name, $msg_data);\n\t\t\t\t\t$this->fuel->logs->write($msg);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->output->set_output(lang('error_saving'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (is_ajax())\n\t\t{\n\t\t\t$this->output->set_output($toggle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->items();\n\t\t}\n\t}\n\t\n\tprotected function _clear_cache()\n\t{\n\t\t// reset cache for that page only\n\t\tif ($this->clear_cache_on_save) \n\t\t{\n\t\t\t$this->fuel->cache->clear_pages();\n\t\t}\n\t}\n\t\n\tprotected function _allow_action($action)\n\t{\n\t\treturn in_array($action, $this->item_actions);\n\t}\n\t\n\tprotected function _common_fields($values)\n\t{\n\t\t$fields['__fuel_module__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_module__']['value'] = $this->module;\n\t\t$fields['__fuel_module__']['class'] = '__fuel_module__';\n\n\t\t$fields['__fuel_module_uri__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_module_uri__']['value'] = $this->module_uri;\n\t\t$fields['__fuel_module_uri__']['class'] = '__fuel_module_uri__';\n\n\t\t$fields['__fuel_id__'] = array('type' => 'hidden');\n\t\t$fields['__fuel_id__']['value'] = (!empty($values[$this->model->key_field()])) ? $values[$this->model->key_field()] : '';\n\t\t$fields['__fuel_id__']['class'] = '__fuel_id__';\n\n\t\treturn $fields;\n\t}\n\n\tprotected function _save_tab_state($id)\n\t{\n\t\t// set tab\n\t\tif (isset($_POST['__fuel_selected_tab__']))\n\t\t{\n\t\t\tif ( ! empty($_COOKIE['fuel_tabs']))\n\t\t\t{\n\t\t\t\t$tab_cookie = json_decode(urldecode($_COOKIE['fuel_tabs']), TRUE);\n\n\t\t\t\tif ( ! empty($tab_cookie))\n\t\t\t\t{\n\t\t\t\t\t$tab_cookie[$this->module.'_edit_'.$id] = $_POST['__fuel_selected_tab__'];\n\t\t\t\t\t$cookie_val = urlencode(json_encode($tab_cookie));\n\n\t\t\t\t\t// set the cookie for viewing the live site with added FUEL capabilities\n\t\t\t\t\t$config = array(\n\t\t\t\t\t\t'name' => 'fuel_tabs', \n\t\t\t\t\t\t'value' => $cookie_val,\n\t\t\t\t\t\t'expire' => 0,\n\t\t\t\t\t\t//'path' => WEB_PATH\n\t\t\t\t\t\t'path' => $this->fuel->config('fuel_cookie_path')\n\t\t\t\t\t);\n\n\t\t\t\t\tset_cookie($config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected function _process_uploads($posted = NULL)\n\t{\n\t\tif (empty($posted)) $posted = $_POST;\n\n\t\t$errors = FALSE;\n\n\t\tif ( ! empty($_FILES))\n\t\t{\n\t\t\t$field_names = array();\n\n\t\t\t// loop through uploaded files\n\t\t\tforeach ($_FILES as $file => $file_info)\n\t\t\t{\n\t\t\t\tif ($file_info['error'] == 0)\n\t\t\t\t{\n\t\t\t\t\t$posted[$file] = $file_info['name'];\n\n\t\t\t\t\t$file_tmp = current(explode('___', $file));\n\t\t\t\t\t$field_name = $file_tmp;\n\n\t\t\t\t\t// if there is a field with the suffix of _upload, then we will overwrite that posted value with this value\n\t\t\t\t\tif (substr($file_tmp, strlen($file_tmp) - 7) == '_upload') \n\t\t\t\t\t{\n\t\t\t\t\t\t$field_name = substr($file_tmp, 0, strlen($file_tmp) - 7);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isset($posted[$file_tmp.'_file_name']) AND isset($this->_orig_post[$file_tmp.'_file_name']))\n\t\t\t\t\t{\n\t\t\t\t\t\t// get file extension\n\t\t\t\t\t\t$path_info = pathinfo($file_info['name']);\n\t\t\t\t\t\t$field_value = $this->_orig_post[$file_tmp.'_file_name'].'.'.$path_info['extension'];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$field_value = $file_info['name'];\n\t\t\t\t\t}\n\n\t\t\t\t\t// look for repeatable values that match\n\t\t\t\t\tif (preg_match('#(.+)_(\\d+)_(.+)#', $file_tmp, $matches))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (isset($posted[$matches[1]][$matches[2]][$matches[3]]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$posted[$matches[1]][$matches[2]][$matches[3]] = $posted[$file];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (strpos($field_value, '{') !== FALSE )\n\t\t\t\t\t{\n\t\t\t\t\t\t//e modifier is deprecated so we have to do this\n\t\t\t\t\t\t$callback = function($match){\n\t\t\t\t\t\t\t\t$return = \"\";\n\t\t\t\t\t\t\t\tif (!empty($match[2]))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$return = $match[1].$GLOBALS[\"__tmp_transient_posted__\"][$match[2]].$match[3];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn $return;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// hacky but avoids 5.3 function syntax (which is nicer but doesn't work with 5.2)\n\t\t\t\t\t\t$GLOBALS['__tmp_transient_posted__'] = $posted;\n\n\t\t\t\t\t\t$field_value = preg_replace_callback('#^(.*)\\{(.+)\\}(.*)$#', $callback, $field_value);\n\t\t\t\t\t}\n\n\t\t\t\t\t// set both values for the namespaced and non-namespaced... make them underscored and lower cased\n\t\t\t\t\t$field_name_parts = explode('--', $field_name);\n\t\t\t\t\t$tmp_field_name = end($field_name_parts);\n\n\t\t\t\t\t$file_name = pathinfo($field_value, PATHINFO_FILENAME);\n\t\t\t\t\t$file_ext = pathinfo($field_value, PATHINFO_EXTENSION);\n\t\t\t\t\t//$file_val = url_title($file_name, 'underscore', FALSE).'.'.$file_ext;\n\t\t\t\t\t$file_val = $file_name.'.'.$file_ext;\n\t\t\t\t\t$posted[$tmp_field_name] = $file_val;\n\t\t\t\t\t$posted[$field_name] = $file_val;\n\t\t\t\t\t$posted[$file_tmp.'_file_name'] = $file_val;\n\n\t\t\t\t\t$field_names[$field_name] = $field_name;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// hacky cleanup to avoid using 5.3 syntax\n\t\t\tif (isset($GLOBALS[\"__tmp_transient_posted__\"]))\n\t\t\t{\n\t\t\t\tunset($GLOBALS[\"__tmp_transient_posted__\"]);\n\t\t\t}\n\n\t\t\t$params['xss_clean'] = $this->sanitize_files;\n\t\t\t$params['posted'] = $posted;\n\n\t\t\t// UPLOAD!!!\n\t\t\tif ( ! $this->fuel->assets->upload($params))\n\t\t\t{\n\t\t\t\t$errors = TRUE;\n\t\t\t\t$msg = $this->fuel->assets->last_error();\n\t\t\t\tadd_error($msg);\n\t\t\t\t$this->fuel->admin->set_notification($msg, Fuel_admin::NOTIFICATION_ERROR);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// do post processing of updating field values if they changed during upload due to overwrite being FALSE\n\t\t\t\t$uploaded_data = $this->fuel->assets->uploaded_data();\n\n\t\t\t\t// transfer uploaded data info to the model\n\t\t\t\t$this->model->upload_data =& $uploaded_data;\n\n\t\t\t\t// transfer uploaded data the controller object as well\n\t\t\t\t$this->upload_data =& $uploaded_data;\n\t\t\t\t// now process the data related to upload a file including translated path names\n\t\t\t\tif ( ! isset($field_name)) $field_name = '';\n\n\t\t\t\t$this->_process_upload_data($field_names, $uploaded_data, $posted);\n\t\t\t}\n\t\t}\n\n\t\treturn ! $errors;\n\t}\n\n\tprotected function _process_upload_data($field_names, $uploaded_data, $posted)\n\t{\n\n\t\tforeach($uploaded_data as $key => $val)\n\t\t{\n\t\t\tif (!isset($field_names[$key]))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$field_name = $field_names[$key];\n\t\t\t$field_name_parts = explode('--', $field_name);\n\t\t\t$field_name = end($field_name_parts);\n\n\t\t\t$save = FALSE;\n\t\t\t$key_parts = explode('___', $key);\n\t\t\t$file_tmp = current($key_parts);\n\n\t\t\t// get the file name field\n\t\t\t// if the file name field exists AND there is no specified hidden filename field to assign to it AND...\n\t\t\t// the model does not have an array key field AND there is a key field value posted\n\t\t\tif (isset($field_name) AND ! is_array($this->model->key_field()) AND isset($posted[$this->model->key_field()]))\n\t\t\t{\n\t\t\t\t$id = $posted[$this->model->key_field()];\n\t\t\t\t$data = $this->model->find_one_array(array($this->model->table_name().'.'.$this->model->key_field() => $id));\n\n\t\t\t\t// if there is a field with the suffix of _upload, then we will overwrite that posted value with this value\n\t\t\t\tif (substr($file_tmp, strlen($file_tmp) - 7) == '_upload')\n\t\t\t\t{\n\t\t\t\t\t$field_name = substr($file_tmp, 0, strlen($file_tmp) - 7);\n\t\t\t\t}\n\n\t\t\t\tif (isset($posted[$field_name])) $save = TRUE;\n\n\t\t\t\t// look for repeatable values that match\n\t\t\t\tif (preg_match('#(.+)_(\\d+)_(.+)#', $file_tmp, $matches))\n\t\t\t\t{\n\t\t\t\t\tif (isset($posted[$matches[1]][$matches[2]][$matches[3]]) AND isset($data[$matches[1]][$matches[2]][$matches[3]]))\n\t\t\t\t\t{\n\t\t\t\t\t\t//$data[$matches[1]][$matches[2]][$matches[3]] = $posted[$file_tmp];\n\t\t\t\t\t\t$data[$matches[1]][$matches[2]][$matches[3]] = $val['file_name'];\n\t\t\t\t\t\t$save = TRUE;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ($save)\n\t\t\t\t{\n\t\t\t\t\t$data[$field_name] = $val['file_name'];\n\n\t\t\t\t\t// reset any validation to prevent issues with saving again (e.g. unique fields and the is_new function is problematic)\n\t\t\t\t\t$this->model->remove_all_validation($data);\n\t\t\t\t\t$this->model->save($data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\n\t}\n\t\n\tprotected function _run_hook($hook, $params = array())\n\t{\n\t\t// call module specific hook\n\t\t$hook_name = $hook.'_'.$this->module;\n\t\t$GLOBALS['EXT']->_call_hook($hook_name, $params);\n\n\t\t// call global module hook if any\n\t\t$hook_name = $hook.'_module';\n\t\t$GLOBALS['EXT']->_call_hook($hook_name, $params);\n\t}\n}\n"], "filenames": ["fuel/modules/fuel/controllers/Module.php"], "buggy_code_start_loc": [1624], "buggy_code_end_loc": [1627], "fixing_code_start_loc": [1624], "fixing_code_end_loc": [1634], "type": "CWE-352", "message": "FUEL CMS 1.4.13 contains a cross-site request forgery (CSRF) vulnerability that can delete a page via a post ID to /pages/delete/3.", "other": {"cve": {"id": "CVE-2020-28705", "sourceIdentifier": "cve@mitre.org", "published": "2021-03-10T14:15:12.623", "lastModified": "2021-03-12T18:42:30.153", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "FUEL CMS 1.4.13 contains a cross-site request forgery (CSRF) vulnerability that can delete a page via a post ID to /pages/delete/3."}, {"lang": "es", "value": "FUEL CMS versi\u00f3n 1.4.13, contiene una vulnerabilidad de tipo cross-site request forgery (CSRF) que puede eliminar una p\u00e1gina por medio de un ID de publicaci\u00f3n en /pages/delete/3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thedaylightstudio:fuel_cms:1.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "22D4ECFB-0516-4086-83DA-AA5F1EE17D26"}]}]}], "references": [{"url": "https://github.com/daylightstudio/FUEL-CMS/commit/fbf2d59215800f05d4359e8f984d5680d62f0f3b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/daylightstudio/FUEL-CMS/issues/576", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/daylightstudio/FUEL-CMS/commit/fbf2d59215800f05d4359e8f984d5680d62f0f3b"}}