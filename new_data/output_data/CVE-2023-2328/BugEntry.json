{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @category   Pimcore\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.quantityValue.unitsettings\");\npimcore.object.quantityValue.unitsettings = Class.create({\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n   activate: function (filter) {\n        if(filter){\n            this.store.baseParams.filter = filter;\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"quantityValue_units\");\n    },\n\n    getHint: function(){\n        return \"\";\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"quantityValue_units\",\n                iconCls: \"pimcore_icon_quantityValue\",\n                title: t(\"quantityValue_units\"),\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"quantityValue_units\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"quantityValue_units\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n\n    getRowEditor: function () {\n        let fields = [{\n            name: 'id',\n            type: 'string'\n        }, 'abbreviation', 'longname', 'group', 'baseunit', 'factor', 'conversionOffset', 'reference', 'converter'];\n\n        var baseUnitStore = Ext.create('Ext.data.JsonStore', {\n            fields: fields,\n            proxy: {\n                type: 'ajax',\n                async: true,\n                batchActions: false,\n                url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n\n            },\n            // disable client pagination, default: 25\n            pageSize: 0,\n            listeners: {\n                load: function (store, records) {\n                    var storeData = records;\n                    storeData.unshift({'id': -1, 'abbreviation' : \"(\" + t(\"empty\") + \")\"});\n                    store.loadData(storeData);\n                }\n            }\n        });\n        baseUnitStore.load();\n\n        var baseUnitEditor = {\n            xtype: 'combobox',\n            triggerAction: \"all\",\n            autoSelect: true,\n            editable: true,\n            selectOnFocus: true,\n            forceSelection: true,\n            valueField: 'id',\n            displayField: 'abbreviation',\n            queryMode: 'local',\n            store: baseUnitStore\n        };\n\n        var typesColumns = [\n            {flex: 1, dataIndex: 'id', text: t(\"id\"), filter: 'string'},\n            {flex: 1, dataIndex: 'abbreviation', text: t(\"abbreviation\"), editor: new Ext.form.TextField({}), filter: 'string'},\n            {flex: 2, dataIndex: 'longname', text: t(\"longname\"), editor: new Ext.form.TextField({}), filter: 'string'},\n            {flex: 1, dataIndex: 'group', text: t(\"group\"), editor: new Ext.form.TextField({}), filter: 'string', hidden: true},\n            {flex: 1, dataIndex: 'baseunit', text: t(\"baseunit\"), editor: baseUnitEditor, renderer: function(value){\n                if(!value) {\n                    return '('+t('empty')+')';\n                }\n\n                var baseUnit = baseUnitStore.getById(value);\n                if(!baseUnit) {\n                    return '('+t('empty')+')';\n                }\n                return baseUnit.get('abbreviation');\n            }},\n            {flex: 1, dataIndex: 'factor', text: t(\"conversionFactor\"), editor: new Ext.form.NumberField({decimalPrecision: 10}), filter: 'numeric'},\n            {flex: 1, dataIndex: 'conversionOffset', text: t(\"conversionOffset\"), editor: new Ext.form.NumberField({decimalPrecision: 10}), filter: 'numeric'},\n            {flex: 1, dataIndex: 'reference', text: t(\"reference\"), editor: new Ext.form.TextField({}), hidden: true, filter: 'string'},\n            {flex: 1, dataIndex: 'converter', text: t(\"converter_service\"), editor: new Ext.form.TextField({}), filter: 'string'}\n        ];\n\n        typesColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 30,\n            items: [{\n                tooltip: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                }.bind(this)\n            }]\n        });\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = new Ext.data.Store({\n            proxy: {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data',\n                    totalProperty: 'total',\n                    successProperty: 'success'\n                },\n                writer: {\n                    type: 'json',\n                    writeAllFields: true,\n                    rootProperty: 'data',\n                    encode: 'true'\n                },\n                api: {\n                    create  : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'create'}),\n                    read    : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'read'}),\n                    update  : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'update'}),\n                    destroy : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'destroy'})\n                },\n                pageSize: itemsPerPage\n            },\n            fields: fields,\n            remoteSort: true,\n            remoteFilter: true,\n            autoSync: true,\n            listeners: {\n                update: function() {\n                    pimcore.helpers.quantityValue.getClassDefinitionStore().reload();\n                    baseUnitStore.reload();\n                    if (pimcore.helpers.quantityValue.store) {\n                        // remote call could be avoided by updating the store directly\n                        pimcore.helpers.quantityValue.store.reload();\n                    }\n                }\n            }\n        });\n        this.store.load();\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n        });\n\n        this.grid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            plugins: ['pimcore.gridfilters', this.rowEditing],\n            columnLines: true,\n            stripeRows: true,\n            columns : typesColumns,\n            bbar: this.pagingtoolbar,\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    '-',\n                    {\n                        text: t('delete'),\n                        handler: this.onDelete.bind(this),\n                        iconCls: \"pimcore_icon_minus\"\n                    },\n                    '-',\n                    {\n                        text: t('reload'),\n                        handler: function () {\n                            this.store.reload();\n                        }.bind(this),\n                        iconCls: \"pimcore_icon_reload\"\n                    },'-',{\n                        text: this.getHint(),\n                        xtype: \"tbtext\",\n                        style: \"margin: 0 10px 0 0;\"\n                    }\n                ]\n            },\n            viewConfig: {\n                forceFit: true\n            }\n        });\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        Ext.MessageBox.prompt(' ', t('unique_identifier'),\n            function (button, value, object) {\n                var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n                if (button == \"ok\") {\n                    if (value.length >= 1 && regresult == value) {\n\n                        // this is rather a workaround, Ext doesn't sync if the id field is already filled.\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'create'}),\n                            method: 'POST',\n                            params: {\n                                data: Ext.encode({\n                                    id: value\n                                })\n                            },\n                            success: function () {\n                                var u = {\n                                    id: value\n                                };\n                                this.rowEditing.completeEdit();\n                                this.grid.store.insert(0, [u]);\n\n                                this.rowEditing.startEdit(0,0);\n\n                            }.bind(this)\n                        });\n\n                    } else {\n                        Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n                    }\n                }\n            }.bind(this)\n        );\n\n    },\n\n    onDelete: function () {\n        var selections = this.grid.getSelectionModel().getSelected();\n        if (!selections || selections.length < 1) {\n            return false;\n        }\n        var rec = selections.getAt(0);\n        this.grid.store.remove(rec);\n    }\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\DataObject\\QuantityValue;\n\nuse Pimcore\\Cache;\nuse Pimcore\\Event\\DataObjectQuantityValueEvents;\nuse Pimcore\\Event\\Model\\DataObject\\QuantityValueUnitEvent;\nuse Pimcore\\Event\\Traits\\RecursionBlockingEventDispatchHelperTrait;\nuse Pimcore\\Model;\n\n/**\n * @method \\Pimcore\\Model\\DataObject\\QuantityValue\\Unit\\Dao getDao()\n */\nclass Unit extends Model\\AbstractModel\n{\n    use RecursionBlockingEventDispatchHelperTrait;\n\n    const CACHE_KEY = 'quantityvalue_units_table';\n\n    /**\n     * @var string\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $abbreviation;\n\n    /**\n     * @var string\n     */\n    protected $group;\n\n    /**\n     * @var string\n     */\n    protected $longname;\n\n    /**\n     * @var string\n     */\n    protected $baseunit;\n\n    /**\n     * @var string\n     */\n    protected $reference;\n\n    /**\n     * @var float|null\n     */\n    protected $factor;\n\n    /**\n     * @var float|null\n     */\n    protected $conversionOffset;\n\n    /**\n     * @var string\n     */\n    protected $converter;\n\n    /**\n     * @param string $abbreviation\n     *\n     * @return self|null\n     */\n    public static function getByAbbreviation($abbreviation)\n    {\n        try {\n            $unit = new self();\n            $unit->getDao()->getByAbbreviation($abbreviation);\n\n            return $unit;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $reference\n     *\n     * @return self|null\n     */\n    public static function getByReference($reference)\n    {\n        try {\n            $unit = new self();\n            $unit->getDao()->getByReference($reference);\n\n            return $unit;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return Unit|null\n     */\n    public static function getById($id)\n    {\n        try {\n            $table = null;\n            if (Cache\\RuntimeCache::isRegistered(self::CACHE_KEY)) {\n                $table = Cache\\RuntimeCache::get(self::CACHE_KEY);\n            }\n\n            if (!is_array($table)) {\n                $table = Cache::load(self::CACHE_KEY);\n                if (is_array($table)) {\n                    Cache\\RuntimeCache::set(self::CACHE_KEY, $table);\n                }\n            }\n\n            if (!is_array($table)) {\n                $table = [];\n                $list = new Model\\DataObject\\QuantityValue\\Unit\\Listing();\n                $list = $list->load();\n                foreach ($list as $item) {\n                    $table[$item->getId()] = $item;\n                }\n\n                Cache::save($table, self::CACHE_KEY, [], null, 995, true);\n                Cache\\RuntimeCache::set(self::CACHE_KEY, $table);\n            }\n        } catch (\\Exception $e) {\n            return null;\n        }\n\n        if (isset($table[$id])) {\n            return $table[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @param array $values\n     *\n     * @return Unit\n     */\n    public static function create($values = [])\n    {\n        $unit = new self();\n        $unit->setValues($values);\n\n        return $unit;\n    }\n\n    public function save()\n    {\n        $isUpdate = false;\n        if ($this->getId()) {\n            $isUpdate = true;\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_UPDATE);\n        } else {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_ADD);\n        }\n\n        $this->getDao()->save();\n        Cache\\RuntimeCache::set(self::CACHE_KEY, null);\n        Cache::remove(self::CACHE_KEY);\n\n        if ($isUpdate) {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_UPDATE);\n        } else {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_ADD);\n        }\n    }\n\n    public function delete()\n    {\n        $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_DELETE);\n        $this->getDao()->delete();\n        Cache\\RuntimeCache::set(self::CACHE_KEY, null);\n        Cache::remove(self::CACHE_KEY);\n        $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_DELETE);\n    }\n\n    /**\n     * @return string\n     */\n    public function __toString()\n    {\n        return ucfirst($this->getAbbreviation() . ' (' . $this->getId() . ')');\n    }\n\n    /**\n     * @param string $abbreviation\n     *\n     * @return $this\n     */\n    public function setAbbreviation($abbreviation)\n    {\n        $this->abbreviation = $abbreviation;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getAbbreviation()\n    {\n        return $this->abbreviation;\n    }\n\n    /**\n     * @param int|Unit $baseunit\n     *\n     * @return $this\n     */\n    public function setBaseunit($baseunit)\n    {\n        if ($baseunit instanceof self) {\n            $baseunit = $baseunit->getId();\n        }\n        $this->baseunit = $baseunit;\n\n        return $this;\n    }\n\n    /**\n     * @return Unit|null\n     */\n    public function getBaseunit()\n    {\n        if ($this->baseunit) {\n            return self::getById($this->baseunit);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param float $factor\n     *\n     * @return $this\n     */\n    public function setFactor($factor)\n    {\n        $this->factor = $factor;\n\n        return $this;\n    }\n\n    /**\n     * @return float|null\n     */\n    public function getFactor()\n    {\n        return $this->factor;\n    }\n\n    /**\n     * @param string $group\n     *\n     * @return $this\n     */\n    public function setGroup($group)\n    {\n        $this->group = $group;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGroup()\n    {\n        return $this->group;\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = (string) $id;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getId()\n    {\n        return (string) $this->id;\n    }\n\n    /**\n     * @param string $longname\n     *\n     * @return $this\n     */\n    public function setLongname($longname)\n    {\n        $this->longname = $longname;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLongname()\n    {\n        return $this->longname;\n    }\n\n    /**\n     * @return string\n     */\n    public function getReference()\n    {\n        return $this->reference;\n    }\n\n    /**\n     * @param string $reference\n     *\n     * @return $this\n     */\n    public function setReference($reference)\n    {\n        $this->reference = $reference;\n\n        return $this;\n    }\n\n    /**\n     * @return float|null\n     */\n    public function getConversionOffset()\n    {\n        return $this->conversionOffset;\n    }\n\n    /**\n     * @param float $conversionOffset\n     *\n     * @return $this\n     */\n    public function setConversionOffset($conversionOffset)\n    {\n        $this->conversionOffset = $conversionOffset;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getConverter()\n    {\n        return $this->converter;\n    }\n\n    /**\n     * @param string $converter\n     *\n     * @return $this\n     */\n    public function setConverter($converter)\n    {\n        $this->converter = (string)$converter;\n\n        return $this;\n    }\n}\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @category   Pimcore\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.quantityValue.unitsettings\");\npimcore.object.quantityValue.unitsettings = Class.create({\n\n    initialize: function () {\n        this.getTabPanel();\n    },\n\n   activate: function (filter) {\n        if(filter){\n            this.store.baseParams.filter = filter;\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"quantityValue_units\");\n    },\n\n    getHint: function(){\n        return \"\";\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"quantityValue_units\",\n                iconCls: \"pimcore_icon_quantityValue\",\n                title: t(\"quantityValue_units\"),\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"quantityValue_units\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"quantityValue_units\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n\n    getRowEditor: function () {\n        let fields = [{\n            name: 'id',\n            type: 'string'\n        }, 'abbreviation', 'longname', 'group', 'baseunit', 'factor', 'conversionOffset', 'reference', 'converter'];\n\n        var baseUnitStore = Ext.create('Ext.data.JsonStore', {\n            fields: fields,\n            proxy: {\n                type: 'ajax',\n                async: true,\n                batchActions: false,\n                url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data'\n                }\n            },\n            // disable client pagination, default: 25\n            pageSize: 0,\n            listeners: {\n                load: function (store, records) {\n                    var storeData = records;\n                    storeData.unshift({'id': -1, 'abbreviation' : \"(\" + t(\"empty\") + \")\"});\n                    store.loadData(storeData);\n                }\n            }\n        });\n        baseUnitStore.load();\n\n        var baseUnitEditor = {\n            xtype: 'combobox',\n            triggerAction: \"all\",\n            autoSelect: true,\n            editable: true,\n            selectOnFocus: true,\n            forceSelection: true,\n            valueField: 'id',\n            displayField: 'abbreviation',\n            queryMode: 'local',\n            store: baseUnitStore\n        };\n\n        var typesColumns = [\n            {flex: 1, dataIndex: 'id', text: t(\"id\"), filter: 'string'},\n            {flex: 1, dataIndex: 'abbreviation', text: t(\"abbreviation\"), editor: new Ext.form.TextField({listeners: {change: this.sanitizeTextColumn}}), filter: 'string'},\n            {flex: 2, dataIndex: 'longname', text: t(\"longname\"), editor: new Ext.form.TextField({listeners: {change: this.sanitizeTextColumn}}), filter: 'string'},\n            {flex: 1, dataIndex: 'group', text: t(\"group\"), editor: new Ext.form.TextField({listeners: {change: this.sanitizeTextColumn}}), filter: 'string', hidden: true},\n            {flex: 1, dataIndex: 'baseunit', text: t(\"baseunit\"), editor: baseUnitEditor, renderer: function(value){\n                if(!value) {\n                    return '('+t('empty')+')';\n                }\n\n                var baseUnit = baseUnitStore.getById(value);\n                if(!baseUnit) {\n                    return '('+t('empty')+')';\n                }\n                return baseUnit.get('abbreviation');\n            }},\n            {flex: 1, dataIndex: 'factor', text: t(\"conversionFactor\"), editor: new Ext.form.NumberField({decimalPrecision: 10}), filter: 'numeric'},\n            {flex: 1, dataIndex: 'conversionOffset', text: t(\"conversionOffset\"), editor: new Ext.form.NumberField({decimalPrecision: 10}), filter: 'numeric'},\n            {flex: 1, dataIndex: 'reference', text: t(\"reference\"), editor: new Ext.form.TextField({listeners: {change: this.sanitizeTextColumn}}), hidden: true, filter: 'string'},\n            {flex: 1, dataIndex: 'converter', text: t(\"converter_service\"), editor: new Ext.form.TextField({listeners: {change: this.sanitizeTextColumn}}), filter: 'string'}\n        ];\n\n        typesColumns.push({\n            hideable: false,\n            xtype: 'actioncolumn',\n            menuText: t('delete'),\n            width: 30,\n            items: [{\n                tooltip: t('delete'),\n                iconCls: \"pimcore_icon_delete\",\n                handler: function (grid, rowIndex) {\n                    grid.getStore().removeAt(rowIndex);\n                }.bind(this)\n            }]\n        });\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = new Ext.data.Store({\n            proxy: {\n                type: 'ajax',\n                url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget'),\n                reader: {\n                    type: 'json',\n                    rootProperty: 'data',\n                    totalProperty: 'total',\n                    successProperty: 'success'\n                },\n                writer: {\n                    type: 'json',\n                    writeAllFields: true,\n                    rootProperty: 'data',\n                    encode: 'true'\n                },\n                api: {\n                    create  : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'create'}),\n                    read    : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'read'}),\n                    update  : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'update'}),\n                    destroy : Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'destroy'})\n                },\n                pageSize: itemsPerPage\n            },\n            fields: fields,\n            remoteSort: true,\n            remoteFilter: true,\n            autoSync: true,\n            listeners: {\n                update: function() {\n                    pimcore.helpers.quantityValue.getClassDefinitionStore().reload();\n                    baseUnitStore.reload();\n                    if (pimcore.helpers.quantityValue.store) {\n                        // remote call could be avoided by updating the store directly\n                        pimcore.helpers.quantityValue.store.reload();\n                    }\n                }\n            }\n        });\n        this.store.load();\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n        });\n\n        this.grid = new Ext.grid.GridPanel({\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n            plugins: ['pimcore.gridfilters', this.rowEditing],\n            columnLines: true,\n            stripeRows: true,\n            columns : typesColumns,\n            bbar: this.pagingtoolbar,\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            tbar: {\n                cls: 'pimcore_main_toolbar',\n                items: [\n                    {\n                        text: t('add'),\n                        handler: this.onAdd.bind(this),\n                        iconCls: \"pimcore_icon_add\"\n                    },\n                    '-',\n                    {\n                        text: t('delete'),\n                        handler: this.onDelete.bind(this),\n                        iconCls: \"pimcore_icon_minus\"\n                    },\n                    '-',\n                    {\n                        text: t('reload'),\n                        handler: function () {\n                            this.store.reload();\n                        }.bind(this),\n                        iconCls: \"pimcore_icon_reload\"\n                    },'-',{\n                        text: this.getHint(),\n                        xtype: \"tbtext\",\n                        style: \"margin: 0 10px 0 0;\"\n                    }\n                ]\n            },\n            viewConfig: {\n                forceFit: true\n            }\n        });\n\n        return this.grid;\n    },\n\n    onAdd: function (btn, ev) {\n        Ext.MessageBox.prompt(' ', t('unique_identifier'),\n            function (button, value, object) {\n                var regresult = value.match(/[a-zA-Z0-9_\\-]+/);\n                if (button == \"ok\") {\n                    if (value.length >= 1 && regresult == value) {\n\n                        // this is rather a workaround, Ext doesn't sync if the id field is already filled.\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_dataobject_quantityvalue_unitproxyget', {xaction: 'create'}),\n                            method: 'POST',\n                            params: {\n                                data: Ext.encode({\n                                    id: value\n                                })\n                            },\n                            success: function () {\n                                var u = {\n                                    id: value\n                                };\n                                this.rowEditing.completeEdit();\n                                this.grid.store.insert(0, [u]);\n\n                                this.rowEditing.startEdit(0,0);\n\n                            }.bind(this)\n                        });\n\n                    } else {\n                        Ext.Msg.alert(' ', t('failed_to_create_new_item'));\n                    }\n                }\n            }.bind(this)\n        );\n\n    },\n\n    onDelete: function () {\n        var selections = this.grid.getSelectionModel().getSelected();\n        if (!selections || selections.length < 1) {\n            return false;\n        }\n        var rec = selections.getAt(0);\n        this.grid.store.remove(rec);\n    },\n\n    sanitizeTextColumn: function (textField) {\n        if(textField.getValue()){\n            const sanitizedValue = textField.getValue().replace(/[<>\"'!?/\\\\&%$();]/gi, '');\n            textField.setValue(sanitizedValue);\n        }\n    }\n});\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Model\\DataObject\\QuantityValue;\n\nuse Pimcore\\Cache;\nuse Pimcore\\Event\\DataObjectQuantityValueEvents;\nuse Pimcore\\Event\\Model\\DataObject\\QuantityValueUnitEvent;\nuse Pimcore\\Event\\Traits\\RecursionBlockingEventDispatchHelperTrait;\nuse Pimcore\\Model;\n\n/**\n * @method \\Pimcore\\Model\\DataObject\\QuantityValue\\Unit\\Dao getDao()\n */\nclass Unit extends Model\\AbstractModel\n{\n    use RecursionBlockingEventDispatchHelperTrait;\n\n    const CACHE_KEY = 'quantityvalue_units_table';\n\n    /**\n     * @var string\n     */\n    protected $id;\n\n    /**\n     * @var string\n     */\n    protected $abbreviation;\n\n    /**\n     * @var string\n     */\n    protected $group;\n\n    /**\n     * @var string\n     */\n    protected $longname;\n\n    /**\n     * @var string\n     */\n    protected $baseunit;\n\n    /**\n     * @var string\n     */\n    protected $reference;\n\n    /**\n     * @var float|null\n     */\n    protected $factor;\n\n    /**\n     * @var float|null\n     */\n    protected $conversionOffset;\n\n    /**\n     * @var string\n     */\n    protected $converter;\n\n    /**\n     * @param string $abbreviation\n     *\n     * @return self|null\n     */\n    public static function getByAbbreviation($abbreviation)\n    {\n        try {\n            $unit = new self();\n            $unit->getDao()->getByAbbreviation($abbreviation);\n\n            return $unit;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $reference\n     *\n     * @return self|null\n     */\n    public static function getByReference($reference)\n    {\n        try {\n            $unit = new self();\n            $unit->getDao()->getByReference($reference);\n\n            return $unit;\n        } catch (Model\\Exception\\NotFoundException $e) {\n            return null;\n        }\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return Unit|null\n     */\n    public static function getById($id)\n    {\n        try {\n            $table = null;\n            if (Cache\\RuntimeCache::isRegistered(self::CACHE_KEY)) {\n                $table = Cache\\RuntimeCache::get(self::CACHE_KEY);\n            }\n\n            if (!is_array($table)) {\n                $table = Cache::load(self::CACHE_KEY);\n                if (is_array($table)) {\n                    Cache\\RuntimeCache::set(self::CACHE_KEY, $table);\n                }\n            }\n\n            if (!is_array($table)) {\n                $table = [];\n                $list = new Model\\DataObject\\QuantityValue\\Unit\\Listing();\n                $list = $list->load();\n                foreach ($list as $item) {\n                    $table[$item->getId()] = $item;\n                }\n\n                Cache::save($table, self::CACHE_KEY, [], null, 995, true);\n                Cache\\RuntimeCache::set(self::CACHE_KEY, $table);\n            }\n        } catch (\\Exception $e) {\n            return null;\n        }\n\n        if (isset($table[$id])) {\n            return $table[$id];\n        }\n\n        return null;\n    }\n\n    /**\n     * @param array $values\n     *\n     * @return Unit\n     */\n    public static function create($values = [])\n    {\n        $unit = new self();\n        $unit->setValues($values);\n\n        return $unit;\n    }\n\n    public function save()\n    {\n        $isUpdate = false;\n        if ($this->getId()) {\n            $isUpdate = true;\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_UPDATE);\n        } else {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_ADD);\n        }\n\n        $this->getDao()->save();\n        Cache\\RuntimeCache::set(self::CACHE_KEY, null);\n        Cache::remove(self::CACHE_KEY);\n\n        if ($isUpdate) {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_UPDATE);\n        } else {\n            $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_ADD);\n        }\n    }\n\n    public function delete()\n    {\n        $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_PRE_DELETE);\n        $this->getDao()->delete();\n        Cache\\RuntimeCache::set(self::CACHE_KEY, null);\n        Cache::remove(self::CACHE_KEY);\n        $this->dispatchEvent(new QuantityValueUnitEvent($this), DataObjectQuantityValueEvents::UNIT_POST_DELETE);\n    }\n\n    /**\n     * @return string\n     */\n    public function __toString()\n    {\n        return ucfirst($this->getAbbreviation() . ' (' . $this->getId() . ')');\n    }\n\n    /**\n     * @param string $abbreviation\n     *\n     * @return $this\n     */\n    public function setAbbreviation($abbreviation)\n    {\n        $this->abbreviation = htmlspecialchars($abbreviation);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getAbbreviation()\n    {\n        return $this->abbreviation;\n    }\n\n    /**\n     * @param int|Unit $baseunit\n     *\n     * @return $this\n     */\n    public function setBaseunit($baseunit)\n    {\n        if ($baseunit instanceof self) {\n            $baseunit = $baseunit->getId();\n        }\n        $this->baseunit = $baseunit;\n\n        return $this;\n    }\n\n    /**\n     * @return Unit|null\n     */\n    public function getBaseunit()\n    {\n        if ($this->baseunit) {\n            return self::getById($this->baseunit);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param float $factor\n     *\n     * @return $this\n     */\n    public function setFactor($factor)\n    {\n        $this->factor = $factor;\n\n        return $this;\n    }\n\n    /**\n     * @return float|null\n     */\n    public function getFactor()\n    {\n        return $this->factor;\n    }\n\n    /**\n     * @param string $group\n     *\n     * @return $this\n     */\n    public function setGroup($group)\n    {\n        $this->group = htmlspecialchars($group);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getGroup()\n    {\n        return $this->group;\n    }\n\n    /**\n     * @param string $id\n     *\n     * @return $this\n     */\n    public function setId($id)\n    {\n        $this->id = (string) $id;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getId()\n    {\n        return (string) $this->id;\n    }\n\n    /**\n     * @param string $longname\n     *\n     * @return $this\n     */\n    public function setLongname($longname)\n    {\n        $this->longname = htmlspecialchars($longname);\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLongname()\n    {\n        return $this->longname;\n    }\n\n    /**\n     * @return string\n     */\n    public function getReference()\n    {\n        return $this->reference;\n    }\n\n    /**\n     * @param string $reference\n     *\n     * @return $this\n     */\n    public function setReference($reference)\n    {\n        $this->reference = htmlspecialchars($reference);\n\n        return $this;\n    }\n\n    /**\n     * @return float|null\n     */\n    public function getConversionOffset()\n    {\n        return $this->conversionOffset;\n    }\n\n    /**\n     * @param float $conversionOffset\n     *\n     * @return $this\n     */\n    public function setConversionOffset($conversionOffset)\n    {\n        $this->conversionOffset = $conversionOffset;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    public function getConverter()\n    {\n        return $this->converter;\n    }\n\n    /**\n     * @param string $converter\n     *\n     * @return $this\n     */\n    public function setConverter($converter)\n    {\n        $this->converter = htmlspecialchars((string)$converter);\n\n        return $this;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/object/quantityvalue/unitsettings.js", "models/DataObject/QuantityValue/Unit.php"], "buggy_code_start_loc": [80, 212], "buggy_code_end_loc": [282, 388], "fixing_code_start_loc": [79, 212], "fixing_code_end_loc": [289, 388], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2328", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T10:15:09.670", "lastModified": "2023-05-08T18:21:27.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Generic in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/e3562bfe249c557d15474c9a0acd5e06628521fe", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/01a44584-e36b-46f4-ad94-53af488397f6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/e3562bfe249c557d15474c9a0acd5e06628521fe"}}