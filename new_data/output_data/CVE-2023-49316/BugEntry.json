{"buggy_code": ["<?php\n\n/**\n * Binary Finite Fields\n *\n * Utilizes the factory design pattern\n *\n * PHP version 5 and 7\n *\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2017 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n */\n\nnamespace phpseclib3\\Math;\n\nuse phpseclib3\\Common\\Functions\\Strings;\nuse phpseclib3\\Math\\BinaryField\\Integer;\nuse phpseclib3\\Math\\Common\\FiniteField;\n\n/**\n * Binary Finite Fields\n *\n * @author  Jim Wigginton <terrafrost@php.net>\n */\nclass BinaryField extends FiniteField\n{\n    /**\n     * Instance Counter\n     *\n     * @var int\n     */\n    private static $instanceCounter = 0;\n\n    /**\n     * Keeps track of current instance\n     *\n     * @var int\n     */\n    protected $instanceID;\n\n    /** @var BigInteger */\n    private $randomMax;\n\n    /**\n     * Default constructor\n     */\n    public function __construct(...$indices)\n    {\n        $m = array_shift($indices);\n        $val = str_repeat('0', $m) . '1';\n        foreach ($indices as $index) {\n            $val[$index] = '1';\n        }\n        $modulo = static::base2ToBase256(strrev($val));\n\n        $mStart = 2 * $m - 2;\n        $t = ceil($m / 8);\n        $finalMask = chr((1 << ($m % 8)) - 1);\n        if ($finalMask == \"\\0\") {\n            $finalMask = \"\\xFF\";\n        }\n        $bitLen = $mStart + 1;\n        $pad = ceil($bitLen / 8);\n        $h = $bitLen & 7;\n        $h = $h ? 8 - $h : 0;\n\n        $r = rtrim(substr($val, 0, -1), '0');\n        $u = [static::base2ToBase256(strrev($r))];\n        for ($i = 1; $i < 8; $i++) {\n            $u[] = static::base2ToBase256(strrev(str_repeat('0', $i) . $r));\n        }\n\n        // implements algorithm 2.40 (in section 2.3.5) in \"Guide to Elliptic Curve Cryptography\"\n        // with W = 8\n        $reduce = function ($c) use ($u, $mStart, $m, $t, $finalMask, $pad, $h) {\n            $c = str_pad($c, $pad, \"\\0\", STR_PAD_LEFT);\n            for ($i = $mStart; $i >= $m;) {\n                $g = $h >> 3;\n                $mask = $h & 7;\n                $mask = $mask ? 1 << (7 - $mask) : 0x80;\n                for (; $mask > 0; $mask >>= 1, $i--, $h++) {\n                    if (ord($c[$g]) & $mask) {\n                        $temp = $i - $m;\n                        $j = $temp >> 3;\n                        $k = $temp & 7;\n                        $t1 = $j ? substr($c, 0, -$j) : $c;\n                        $length = strlen($t1);\n                        if ($length) {\n                            $t2 = str_pad($u[$k], $length, \"\\0\", STR_PAD_LEFT);\n                            $temp = $t1 ^ $t2;\n                            $c = $j ? substr_replace($c, $temp, 0, $length) : $temp;\n                        }\n                    }\n                }\n            }\n            $c = substr($c, -$t);\n            if (strlen($c) == $t) {\n                $c[0] = $c[0] & $finalMask;\n            }\n            return ltrim($c, \"\\0\");\n        };\n\n        $this->instanceID = self::$instanceCounter++;\n        Integer::setModulo($this->instanceID, $modulo);\n        Integer::setRecurringModuloFunction($this->instanceID, $reduce);\n\n        $this->randomMax = new BigInteger($modulo, 2);\n    }\n\n    /**\n     * Returns an instance of a dynamically generated PrimeFieldInteger class\n     *\n     * @param string $num\n     * @return Integer\n     */\n    public function newInteger($num)\n    {\n        return new Integer($this->instanceID, $num instanceof BigInteger ? $num->toBytes() : $num);\n    }\n\n    /**\n     * Returns an integer on the finite field between one and the prime modulo\n     *\n     * @return Integer\n     */\n    public function randomInteger()\n    {\n        static $one;\n        if (!isset($one)) {\n            $one = new BigInteger(1);\n        }\n\n        return new Integer($this->instanceID, BigInteger::randomRange($one, $this->randomMax)->toBytes());\n    }\n\n    /**\n     * Returns the length of the modulo in bytes\n     *\n     * @return int\n     */\n    public function getLengthInBytes()\n    {\n        return strlen(Integer::getModulo($this->instanceID));\n    }\n\n    /**\n     * Returns the length of the modulo in bits\n     *\n     * @return int\n     */\n    public function getLength()\n    {\n        return strlen(Integer::getModulo($this->instanceID)) << 3;\n    }\n\n    /**\n     * Converts a base-2 string to a base-256 string\n     *\n     * @param string $x\n     * @param int|null $size\n     * @return string\n     */\n    public static function base2ToBase256($x, $size = null)\n    {\n        $str = Strings::bits2bin($x);\n\n        $pad = strlen($x) >> 3;\n        if (strlen($x) & 3) {\n            $pad++;\n        }\n        $str = str_pad($str, $pad, \"\\0\", STR_PAD_LEFT);\n        if (isset($size)) {\n            $str = str_pad($str, $size, \"\\0\", STR_PAD_LEFT);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Converts a base-256 string to a base-2 string\n     *\n     * @param string $x\n     * @return string\n     */\n    public static function base256ToBase2($x)\n    {\n        if (function_exists('gmp_import')) {\n            return gmp_strval(gmp_import($x), 2);\n        }\n\n        return Strings::bin2bits($x);\n    }\n}\n", "<?php\n\n/**\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2013 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n */\n\nnamespace phpseclib3\\Tests\\Unit\\Crypt\\EC;\n\nuse phpseclib3\\Crypt\\EC;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\OpenSSH;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PKCS1;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PKCS8;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PuTTY;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\XML;\nuse phpseclib3\\Crypt\\EC\\PrivateKey;\nuse phpseclib3\\Crypt\\EC\\PublicKey;\nuse phpseclib3\\Crypt\\PublicKeyLoader;\nuse phpseclib3\\Tests\\PhpseclibTestCase;\n\nclass KeyTest extends PhpseclibTestCase\n{\n    public function testBinaryPKCS1PrivateParameters()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PARAMETERS-----\nBgUrgQQAIg==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBPoZHEeuf9UjjhevAbGxWwsmmWw34vkxJwtZ0AknmSUAHo0OAowJSQ\nStf/0U65RhWgBwYFK4EEACKhZANiAASVZJGIs6m/TZhbFoTwBtpvU1JcyixD2YI3\n5YnoIx/6Q1oqJg1vrrmUoXaeEpaO6JH8RgItTl9lYMdmOk5309WJka6tI1QAAK3+\nJq9z4moG4whp3JsuiBQG9wnaHVrQPA4=\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem\n    public function testPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load($expected = '-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIEzUawcXqUsQhaEQ51JLeOIY0ddzlO2nNgwDk32ETqwkoAcGBSuBBAAK\noUQDQgAEFuVcVb9iCUhg2cknHPE+BouHGhQ39ORjMaMI3T4RfRxr6dj5HAXdEqVZ\n1W94KMe30ndmTndcJ8BPeT1Dd15FdQ==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n        //PKCS1::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem -param_enc explicit\n    public function testPKCS1PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIIBEwIBAQQgFr6TF5meGfgCXDqVxoSEltGI+T94G42PPbA6/ibq+ouggaUwgaIC\nAQEwLAYHKoZIzj0BAQIhAP////////////////////////////////////7///wv\nMAYEAQAEAQcEQQR5vmZ++dy7rFWgYpXOhwsHApv82y3OKNlZ8oFbFvgXmEg62ncm\no8RlXaT7/A4RCKj9F7RIpoVUGZxH0I/7ENS4AiEA/////////////////////rqu\n3OavSKA7v9JejNA2QUECAQGhRANCAASCTRhjXqmdbqphSdxNkfTNAOmDW5cZ5fnZ\nys0Tk4pUv/XdiMZtVCGTNsotGeFbT5X64JkP/BFi3PVqjwy2VhOc\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n\n        // this key and the above key have a few small differences.\n        // in both keys the coefficient's are 0 and 7. in the above\n        // key both coefficients are encoded using a single byte.\n        // in the following key the coefficient's are encoded\n        // as 32 bytes (ie. the length of the reduction prime).\n        // eg. one byte null padded to 32 bytes.\n        // also, in the above key the cofactor (1; optional) is\n        // included whereas in the following key it is not\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIIBTgIBAQQgFr6TF5meGfgCXDqVxoSEltGI+T94G42PPbA6/ibq+ouggeAwgd0C\nAQEwLAYHKoZIzj0BAQIhAP////////////////////////////////////7///wv\nMEQEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAABwRBBHm+Zn753LusVaBilc6HCwcCm/zbLc4o\n2VnygVsW+BeYSDradyajxGVdpPv8DhEIqP0XtEimhVQZnEfQj/sQ1LgCIQD/////\n///////////////+uq7c5q9IoDu/0l6M0DZBQaFEA0IABIJNGGNeqZ1uqmFJ3E2R\n9M0A6YNblxnl+dnKzROTilS/9d2Ixm1UIZM2yi0Z4VtPlfrgmQ/8EWLc9WqPDLZW\nE5w=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem\n    // openssl pkcs8 -topk8 -nocrypt -in secp256k1.pem -out secp256k1-2.pem\n    public function testPKCS8PrivateKey()\n    {\n        $key = PublicKeyLoader::load($expected = '-----BEGIN PRIVATE KEY-----\nMIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgAYCXwnhqMT6fCIKIkQ0w\ncac7QqHrn4TCQMF9a+im74WhRANCAATwCjyGuP8xQbvVjznqazL36oeAnD32I+X2\n+wscW3OmyTDpk41HaWYPh+j+BoufsSkCwf8dBRGEQbCieZbbZogy\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem -param_enc explicit\n    // openssl pkcs8 -topk8 -nocrypt -in secp256k1.pem -out secp256k1-2.pem\n    public function testPKCS8PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMIIBIwIBADCBrgYHKoZIzj0CATCBogIBATAsBgcqhkjOPQEBAiEA////////////\n/////////////////////////v///C8wBgQBAAQBBwRBBHm+Zn753LusVaBilc6H\nCwcCm/zbLc4o2VnygVsW+BeYSDradyajxGVdpPv8DhEIqP0XtEimhVQZnEfQj/sQ\n1LgCIQD////////////////////+uq7c5q9IoDu/0l6M0DZBQQIBAQRtMGsCAQEE\nIKFfw3vfd5pqA5SZOTFtpr7hdJoKP/rmTPMCggkAOA35oUQDQgAEnX66+UCzUW3T\n/fkLGIIfZjJm5bIMwAV85LpDom2hI441JRx+/W4WqtGuW+B/LABS6ZHp+qzepThC\nHsjS3Q9Pew==\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n\n        // see testPKCS1PrivateKeySpecifiedCurve for an explanation\n        // of how this key and the above key differ\n        $expected = '-----BEGIN PRIVATE KEY-----\nMIIBXgIBADCB6QYHKoZIzj0CATCB3QIBATAsBgcqhkjOPQEBAiEA////////////\n/////////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEE\neb5mfvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio\n/Re0SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQ\nNkFBBG0wawIBAQQgoV/De993mmoDlJk5MW2mvuF0mgo/+uZM8wKCCQA4DfmhRANC\nAASdfrr5QLNRbdP9+QsYgh9mMmblsgzABXzkukOibaEjjjUlHH79bhaq0a5b4H8s\nAFLpken6rN6lOEIeyNLdD097\n-----END PRIVATE KEY-----';\n        PKCS8::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem\n    public function testBinaryPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMEECAQEEDwBZdP4eSzKk/uQa6jdtfKAHBgUrgQQABKEiAyAABAHqCoNb++mK5qvE\nc4rCzQEuI19czqvXpEPcAWSXew==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // the difference between this and the above key is that\n        // the privateKey part of the above key has a leading null\n        // byte whereas this one doesn't\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMEACAQEEDll0/h5LMqT+5BrqN218oAcGBSuBBAAEoSIDIAAEAeoKg1v76Yrmq8Rz\nisLNAS4jX1zOq9ekQ9wBZJd7\n-----END EC PRIVATE KEY-----';\n\n        PKCS1::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem -param_enc explicit\n    public function testBinaryPKCS1PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIHNAgEBBA8AuSc4BeeyYTq9rbSDuL2ggZIwgY8CAQEwHAYHKoZIzj0BAjARAgFx\nBgkqhkjOPQECAwICAQkwNwQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccj\nAxUAEOcjqxTWluZ2h1YVF1b+v4/LSakEHwQAnXNhbzX0qxQH1zViwQ8ApSgwJ3lY\n7oTRMV7TGIYCDwEAAAAAAAAA2czsijnlbwIBAqEiAyAABAFC7c50y7uw+iuHeMCt\nWwCpKNBUcVeiHme609Dv/g==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // this key and the above key have a few small differences.\n        // the above key has the (optional) seed for the verifiably\n        // random function whereas the following key does not.\n        // also, in the above key the cofactor (1; optional) is\n        // included whereas in the following key it is not;\n        // finally, in the above the privateKey has a leading null\n        // byte whereas it doesn't in the following key\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIGwAgEBBA65JzgF57JhOr2ttIO4vaB3MHUCAQEwHAYHKoZIzj0BAjARAgFxBgkq\nhkjOPQECAwICAQkwIAQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccjBB8E\nAJ1zYW819KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiGAg8BAAAAAAAAANnM7Io55W+h\nIgMgAAQBQu3OdMu7sPorh3jArVsAqSjQVHFXoh5nutPQ7/4=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem\n    // openssl pkcs8 -topk8 -nocrypt -in sect113r1.pem -out sect113r1-2.pem\n    // sect113r1's reduction polynomial is a trinomial\n    public function testBinaryPKCS8PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMFECAQAwEAYHKoZIzj0CAQYFK4EEAAQEOjA4AgEBBA8A5OuqAY8HYoFOaz9mE6mh\nIgMgAAQASF3rOTPXvH0QdRBvsrMBdLMf27yd8AWABrZTxvI=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // the difference between this and the above key is that\n        // the privateKey part of the above key has a leading null\n        // byte whereas this one doesn't\n        $expected = '-----BEGIN PRIVATE KEY-----\nMFACAQAwEAYHKoZIzj0CAQYFK4EEAAQEOTA3AgEBBA7k66oBjwdigU5rP2YTqaEi\nAyAABABIXes5M9e8fRB1EG+yswF0sx/bvJ3wBYAGtlPG8g==\n-----END PRIVATE KEY-----';\n\n        PKCS8::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem -param_enc explicit\n    // openssl pkcs8 -topk8 -nocrypt -in sect113r1.pem -out sect113r1-2.pem\n    public function testBinaryPKCS8PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMIHdAgEAMIGbBgcqhkjOPQIBMIGPAgEBMBwGByqGSM49AQIwEQIBcQYJKoZIzj0B\nAgMCAgEJMDcEDjCIJQym58f+ZJzoWCD3BA7ovuTT4iYHRBiL4OnHIwMVABDnI6sU\n1pbmdodWFRdW/r+Py0mpBB8EAJ1zYW819KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiG\nAg8BAAAAAAAAANnM7Io55W8CAQIEOjA4AgEBBA8AXtfDMRsRTx8snPbWHquhIgMg\nAAQA9xdWGJ6vV23+vkdq0C8BLJVg5E3amMyf/5keGa4=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // see testBinaryPKCS1PrivateKeySpecifiedCurve() for an\n        // explanation of the differences between the above key\n        // and the following key\n        $expected = '-----BEGIN PRIVATE KEY-----\nMIHBAgEAMIGABgcqhkjOPQIBMHUCAQEwHAYHKoZIzj0BAjARAgFxBgkqhkjOPQEC\nAwICAQkwIAQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccjBB8EAJ1zYW81\n9KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiGAg8BAAAAAAAAANnM7Io55W8EOTA3AgEB\nBA5e18MxGxFPHyyc9tYeq6EiAyAABAD3F1YYnq9Xbf6+R2rQLwEslWDkTdqYzJ//\nmR4Zrg==\n-----END PRIVATE KEY-----';\n        PKCS8::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect131r1 -genkey -noout -out sect131r1.pem -param_enc explicit\n    // sect131r1's reduction polynomial is a pentanomial\n    public function testBinaryPentanomialPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIHoAgEBBBECPEK9NCISWf2riBsORoTM+6CBpzCBpAIBATAlBgcqhkjOPQECMBoC\nAgCDBgkqhkjOPQECAwMwCQIBAgIBAwIBCDA9BBEHoRsJp2tWIURBj/P/jCVwuAQR\nAhfAVhCIS2O5xscpFnj500EDFQBNaW5naHVhUXWYW9OtutohtDqX4gQjBACBuvkf\n35gzxA+cGBNDY4OZB4xufqOMAB9zyBNLG0754VACEQQAAAAAAAAAAjEjlTqUZLVN\nAgECoSYDJAAEBEIolGjo5lnsYqNagqYPOaEGOglkllDO2aWPtB6n+x/WXw==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect131r1', $key->getCurve());\n\n        // see testBinaryPKCS1PrivateKeySpecifiedCurve() for an\n        // explanation of the differences between the above key\n        // and the following key\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIHOAgEBBBECPEK9NCISWf2riBsORoTM+6CBjTCBigIBATAlBgcqhkjOPQECMBoC\nAgCDBgkqhkjOPQECAwMwCQIBAgIBAwIBCDAmBBEHoRsJp2tWIURBj/P/jCVwuAQR\nAhfAVhCIS2O5xscpFnj500EEIwQAgbr5H9+YM8QPnBgTQ2ODmQeMbn6jjAAfc8gT\nSxtO+eFQAhEEAAAAAAAAAAIxI5U6lGS1TaEmAyQABARCKJRo6OZZ7GKjWoKmDzmh\nBjoJZJZQztmlj7Qep/sf1l8=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // from https://tools.ietf.org/html/draft-ietf-curdle-pkix-07#section-10.1\n    public function testEd25519PublicKey()\n    {\n        $expected = '-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----';\n        $key = PublicKeyLoader::load($expected);\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // from https://tools.ietf.org/html/draft-ietf-curdle-pkix-07#section-10.3\n    public function testEd25519PrivateKey()\n    {\n        // without public key (public key should be derived)\n        $expected = '-----BEGIN PRIVATE KEY-----\nMC4CAQAwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n-----END PRIVATE KEY-----';\n        $key = PublicKeyLoader::load($expected);\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n\n        // with public key\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\noB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\nZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n\n        // the above key not only omits NULL - it also includes a\n        // unstructuredName attribute with a value of \"Curdle Chairs\"\n        // that the following key does not have\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMFMCAQEwBwYDK2VwBQAEIgQg1O5y2/kTWErVttjx92n4rTr+fCjL8dT74Jeoj0R1\nWEKBIQAZv0QJaYTN/oVBusFn3DuWyFCGqjC2tssMXDitcDFm4Q==\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n    }\n\n    public function testPuTTYnistp256()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp256\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 3\nAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJEXCsWA8s18\nm25MJlVE1urbXPYFi4q8oMbb2H0kE2f5WPxizsKXRmb1J68paXQizryL9fC4FTqI\nCJ1+UnaPfk0=\nPrivate-Lines: 1\nAAAAIQDwaPlajbXY1SxhuwsUqN1CEZ5g4adsbmJsKm+ZbUVm4g==\nPrivate-MAC: b85ca0eb7c612df5d18af85128821bd53faaa3ef\n');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJEXCsWA8s18m25MJlVE1urbXPYFi4q8oMbb2H0kE2f5WPxizsKXRmb1J68paXQizryL9fC4FTqICJ1+UnaPfk0= ecdsa-key-20181105');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYnistp384()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp384\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 3\nAAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBOI53wHG3Cdc\nAJZq5PXWZAEAxxsNVFQlQgOX9toWEOgqQF5LbK2nWLKRvaHMzocUXaTYZDccSS0A\nTZFPT3j1Er1LU9cu4PHpyS07v262jdzkxIvKCPcAeISuV80MC7rHog==\nPrivate-Lines: 2\nAAAAMQCEMkGMDg6N7bUqdvLXe0YmY4qBSi8hmAuMvU38RDoVFVmV+R4RYmMueyrX\nbe9Oyus=\nPrivate-MAC: 97a990a3d5f6b8f268d4be9c4ab9ebfd8fa79849\n');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBOI53wHG3CdcAJZq5PXWZAEAxxsNVFQlQgOX9toWEOgqQF5LbK2nWLKRvaHMzocUXaTYZDccSS0ATZFPT3j1Er1LU9cu4PHpyS07v262jdzkxIvKCPcAeISuV80MC7rHog== ecdsa-key-20181105');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYnistp521()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp521\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 4\nAAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF1Eg0MjaJw\nooFj6HCNh4RWbvmQRY+sdczJyBdT3EaTc/6IUcCfW7w7rAeRp2CDdE9RlAVD8IuL\nqW7DJH06Xeov8wBO5G6jUqXu0rlHsOSiC6VcCxBJuWVNB1IorHnS7PX0f6HdLlIE\nme73P77drqpn5YY0XLtP6hFrF7H5XfCxpNyaJA==\nPrivate-Lines: 2\nAAAAQgHJl8/dIArolFymdzhagXCfd2l8UF3CQXWGVGDQ0R04nnntlyztYiVdRXXK\nr84NnzS7dJcAsR9YaUOZ69NRKNiUAQ==\nPrivate-MAC: 6d49ce289b85549a43d74422dd8bb3ba8798c72c\n');\n        $this->assertSameNL('secp521r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF1Eg0MjaJwooFj6HCNh4RWbvmQRY+sdczJyBdT3EaTc/6IUcCfW7w7rAeRp2CDdE9RlAVD8IuLqW7DJH06Xeov8wBO5G6jUqXu0rlHsOSiC6VcCxBJuWVNB1IorHnS7PX0f6HdLlIEme73P77drqpn5YY0XLtP6hFrF7H5XfCxpNyaJA== ecdsa-key-20181105');\n        $this->assertSameNL('secp521r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYed25519()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ssh-ed25519\nEncryption: none\nComment: ed25519-key-20181105\nPublic-Lines: 2\nAAAAC3NzaC1lZDI1NTE5AAAAIC6I6RyYAqtBcWXws9EDqGbhFtc5rKG4NMn/G7te\nmQtu\nPrivate-Lines: 1\nAAAAIAHu1uI7dxFzo/SleEI2CekXKmgqlXwOgvfaRWxiX4Jd\nPrivate-MAC: 8a06821a1c8b8b40fc40f876e543c4ea3fb81bb9\n');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        PuTTY::setComment('ed25519-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC6I6RyYAqtBcWXws9EDqGbhFtc5rKG4NMn/G7temQtu ed25519-key-20181105');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        OpenSSH::setComment('ed25519-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testlibsodium()\n    {\n        if (!function_exists('sodium_crypto_sign_keypair')) {\n            self::markTestSkipped('libsodium extension is not available.');\n        }\n\n        $kp = sodium_crypto_sign_keypair();\n\n        $key = EC::loadFormat('libsodium', $expected = sodium_crypto_sign_secretkey($kp));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('libsodium'));\n\n        $key = EC::loadFormat('libsodium', $expected = sodium_crypto_sign_publickey($kp));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('libsodium'));\n    }\n\n    // ssh-keygen -t ed25519\n    public function testOpenSSHPrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACCpm7dS1/WDTW+uuhp2+aFLPKaJle6+oJqDGLXhlQAX4AAAAJg8TmN5PE5j\neQAAAAtzc2gtZWQyNTUxOQAAACCpm7dS1/WDTW+uuhp2+aFLPKaJle6+oJqDGLXhlQAX4A\nAAAEDltCTSbrr42IS4hhkS6ly0W2XItRQwxjLT+03bIyA+V6mbt1LX9YNNb666Gnb5oUs8\npomV7r6gmoMYteGVABfgAAAAD3ZhZ3JhbnRAdmFncmFudAECAwQFBg==\n-----END OPENSSH PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        // testing this key is a little difficult because of this format's\n        // two back to back checkint fields. both fields correspond to the\n        // same randomly generated number. ostensibly this let's you verify\n        // successful decryption of encrypted keys but phpseclib doesn't\n        // support encrypted keys\n        // none-the-less, because of the randomized component we can't easily\n        // see if the key string is equal to another known string\n        $key2 = PublicKeyLoader::load($key->toString('OpenSSH'));\n        $this->assertSameNL('Ed25519', $key2->getCurve());\n    }\n\n    // from https://www.w3.org/TR/xmldsig-core/#sec-RFC4050Compat\n    public function testXMLKey()\n    {\n        $key = PublicKeyLoader::load($orig = '<ECDSAKeyValue xmlns=\"http://www.w3.org/2001/04/xmldsig-more#\">\n<DomainParameters>\n  <NamedCurve URN=\"urn:oid:1.2.840.10045.3.1.7\" />\n</DomainParameters>\n<PublicKey>\n  <X Value=\"58511060653801744393249179046482833320204931884267326155134056258624064349885\" />\n  <Y Value=\"102403352136827775240910267217779508359028642524881540878079119895764161434936\" />\n</PublicKey>\n</ECDSAKeyValue>');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        XML::enableRFC4050Syntax();\n\n        $dom = new \\DOMDocument();\n        $dom->preserveWhiteSpace = false;\n        $dom->loadXML($orig);\n        $expected = $dom->C14N();\n\n        //$dom = new DOMDocument();\n        //$dom->preserveWhiteSpace = false;\n        $dom->loadXML($key->toString('XML'));\n        $actual = $dom->C14N();\n\n        $this->assertSameNL($expected, $actual);\n    }\n\n    public function assertSameNL($expected, $actual, $message = '')\n    {\n        $expected = str_replace(\"\\r\\n\", \"\\n\", $expected);\n        $actual = str_replace(\"\\r\\n\", \"\\n\", $actual);\n        $this->assertSame($expected, $actual, $message);\n    }\n\n    public function testOpenSSHPrivateEC()\n    {\n        $key = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNlY2RzYS\n1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQTk2tbDiyQPzljR+LLIsMzJiwqkfHkG\nStUt3kO00FKMoYv3RJfP6mqdE3E3pPcT5cBg4yB+KzYsYDxwuBc03oQcAAAAqCTU2l0k1N\npdAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOTa1sOLJA/OWNH4\nssiwzMmLCqR8eQZK1S3eQ7TQUoyhi/dEl8/qap0TcTek9xPlwGDjIH4rNixgPHC4FzTehB\nwAAAAgZ8mK8+EsQ46susQn4mwMNmpvTaKX9Q9KDvOrzotP2qgAAAAMcm9vdEB2YWdyYW50\nAQIDBA==\n-----END OPENSSH PRIVATE KEY-----';\n\n        $key = PublicKeyLoader::load($key);\n\n        $key2 = PublicKeyLoader::load($key->toString('OpenSSH'));\n        $this->assertInstanceOf(PrivateKey::class, $key2);\n\n        $sig = $key->sign('zzz');\n\n        $key = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOTa1sOLJA/OWNH4ssiwzMmLCqR8eQZK1S3eQ7TQUoyhi/dEl8/qap0TcTek9xPlwGDjIH4rNixgPHC4FzTehBw= root@vagrant';\n        $key = PublicKeyLoader::load($key);\n\n        $this->assertTrue($key->verify('zzz', $sig));\n    }\n\n    public function testOpenSSHPrivateEd25519()\n    {\n        $key = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACChhCZwqkIh43AfURPOgbyYeZRCKvd4jFcyAK4xmiqxQwAAAJDqGgwS6hoM\nEgAAAAtzc2gtZWQyNTUxOQAAACChhCZwqkIh43AfURPOgbyYeZRCKvd4jFcyAK4xmiqxQw\nAAAEDzL/Yl1Vr/5MxhIIEkVKXBMEIumVG8gUjT9i2PTGSehqGEJnCqQiHjcB9RE86BvJh5\nlEIq93iMVzIArjGaKrFDAAAADHJvb3RAdmFncmFudAE=\n-----END OPENSSH PRIVATE KEY-----';\n\n        $key = PublicKeyLoader::load($key);\n        $sig = $key->sign('zzz');\n        $sig2 = $key->withSignatureFormat('SSH2')->sign('zzz');\n\n        $key = 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKGEJnCqQiHjcB9RE86BvJh5lEIq93iMVzIArjGaKrFD root@vagrant';\n        $key = PublicKeyLoader::load($key);\n\n        $this->assertTrue($key->verify('zzz', $sig));\n        $this->assertTrue($key->withSignatureFormat('SSH2')->verify('zzz', $sig2));\n    }\n\n    /**\n     * @group github1712\n     */\n    public function testKeyTooLarge()\n    {\n        $this->expectException('RangeException');\n\n        $key = '-----BEGIN PRIVATE KEY-----\nMIIEDwIBADATBgcqhkjOPQIBBggqhkjOPQMBBwSCA/MwggPvAgEBBIID6P//////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////8=\n-----END PRIVATE KEY-----';\n\n        $private = EC::loadFormat('PKCS8', $key);\n    }\n\n    /**\n     * @group github1712\n     */\n    public function testLargeCurve25519Key()\n    {\n        $raw = pack('H*', '8426220e7a57dc8d685d3966e3a23600e32563ce6033e07d0c89dbb5bd296577');\n        $key = EC::loadFormat('MontgomeryPrivate', $raw);\n\n        $this->assertSameNL($raw, $key->toString('MontgomeryPrivate'));\n    }\n\n    public function testOpenSSHEncryptedCreation()\n    {\n        if (PHP_INT_SIZE == 4) {\n            self::markTestSkipped('32-bit integers slow OpenSSH encrypted keys down too much');\n        }\n\n        $key = EC::createKey('Ed25519');\n        $key = $key->withPassword('test')->toString('OpenSSH');\n\n        $key = PublicKeyLoader::load($key, 'test');\n        $this->assertInstanceOf(PrivateKey::class, $key);\n    }\n\n    public function testECasJWK()\n    {\n        // keys are from https://datatracker.ietf.org/doc/html/rfc7517#appendix-A\n\n        $plaintext = 'zzz';\n\n        $key = '     {\"keys\":\n       [\n         {\"kty\":\"EC\",\n          \"crv\":\"P-256\",\n          \"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\n          \"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\n          \"d\":\"870MB6gfuTJ4HtUnUvYMyJpr5eUZNP4Bk43bVdj3eAE\",\n          \"use\":\"enc\",\n          \"kid\":\"1\"}\n       ]\n     }';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK', [\n            'use' => 'enc',\n            'kid' => '1'\n        ]));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $sig = $key->sign($plaintext);\n\n        $key = '{\"keys\":\n       [\n         {\"kty\":\"EC\",\n          \"crv\":\"P-256\",\n          \"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\n          \"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\n          \"use\":\"enc\",\n          \"kid\":\"1\"}\n       ]\n     }';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK', [\n            'use' => 'enc',\n            'kid' => '1'\n        ]));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $this->assertTrue($key->verify($plaintext, $sig));\n    }\n\n    public function testEd25519asJWK()\n    {\n        // keys are from https://www.rfc-editor.org/rfc/rfc8037.html#appendix-A\n\n        $plaintext = 'zzz';\n\n        $key = '   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\",\n   \"d\":\"nWGxne_9WmC6hEr0kuwsxERJxWl7MmkZcDusAxyuf2A\"}';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n        $keyWithoutWS = '{\"keys\":[' . $keyWithoutWS . ']}';\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK'));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $sig = $key->sign($plaintext);\n\n        $key = '   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\"}';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n        $keyWithoutWS = '{\"keys\":[' . $keyWithoutWS . ']}';\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK'));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $this->assertTrue($key->verify($plaintext, $sig));\n    }\n\n    public function testNakedPKCS8PubKey()\n    {\n        $key = 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErPJyxEu2/oKCrJaaTVTrq39DKJ2XcN6W+k8UvGf+Y/lDWNbFitQocabsDUvSN0edHH3UKP5QPTz4cOlyIPMrXQ==';\n        $key = PublicKeyLoader::load($key);\n        $this->assertInstanceOf(PublicKey::class, $key);\n    }\n\n    public function testMislabledPKCS8PubKey()\n    {\n        $this->expectException('\\phpseclib3\\Exception\\NoKeyLoadedException');\n\n        $key = '-----BEGIN PRIVATE KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErPJyxEu2/oKCrJaaTVTrq39DKJ2X\ncN6W+k8UvGf+Y/lDWNbFitQocabsDUvSN0edHH3UKP5QPTz4cOlyIPMrXQ==\n-----END PUBLIC KEY-----';\n        $key = PublicKeyLoader::load($key);\n        $this->assertInstanceOf(PublicKey::class, $key);\n    }\n\n    /**\n     * @group github1956\n     */\n    public function testIEEESignature()\n    {\n        $key = '{\"alg\":\"ES256\",\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"verify\"],\"kty\":\"EC\",\"x\":\"FKwqyGd4i2NAl8RUXCCBRCAIbcpeGyfyXwgA_AWHb8Y\",\"y\":\"njxhw5O6zGVkBlcPDKYj0E-6VO1giHTUkJWBhgKNqd8\"}';\n        $key = PublicKeyLoader::load($key)->withSignatureFormat('IEEE')->withHash('sha384');\n\n        $signature = 'a4f61518323bac50b4f87a0f766ebb10d1db25358a0a20a98dab20be4e9c3be2d77ff5a8415cfce2967999c73d2a49b2d8c01990f72c04d99ebe3c4ebf75b4e9';\n        $signature = pack('H*', $signature);\n\n        $this->assertTrue($key->verify('hello world!', $signature));\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Binary Finite Fields\n *\n * Utilizes the factory design pattern\n *\n * PHP version 5 and 7\n *\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2017 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n */\n\nnamespace phpseclib3\\Math;\n\nuse phpseclib3\\Common\\Functions\\Strings;\nuse phpseclib3\\Math\\BinaryField\\Integer;\nuse phpseclib3\\Math\\Common\\FiniteField;\n\n/**\n * Binary Finite Fields\n *\n * @author  Jim Wigginton <terrafrost@php.net>\n */\nclass BinaryField extends FiniteField\n{\n    /**\n     * Instance Counter\n     *\n     * @var int\n     */\n    private static $instanceCounter = 0;\n\n    /**\n     * Keeps track of current instance\n     *\n     * @var int\n     */\n    protected $instanceID;\n\n    /** @var BigInteger */\n    private $randomMax;\n\n    /**\n     * Default constructor\n     */\n    public function __construct(...$indices)\n    {\n        $m = array_shift($indices);\n        if ($m > 571) {\n            /* sect571r1 and sect571k1 are the largest binary curves that https://www.secg.org/sec2-v2.pdf defines\n               altho theoretically there may be legit reasons to use binary finite fields with larger degrees\n               imposing a limit on the maximum size is both reasonable and precedented. in particular,\n               http://tools.ietf.org/html/rfc4253#section-6.1 (The Secure Shell (SSH) Transport Layer Protocol) says\n               \"implementations SHOULD check that the packet length is reasonable in order for the implementation to\n                avoid denial of service and/or buffer overflow attacks\" */\n            throw new \\OutOfBoundsException('Degrees larger than 571 are not supported');\n        }\n        $val = str_repeat('0', $m) . '1';\n        foreach ($indices as $index) {\n            $val[$index] = '1';\n        }\n        $modulo = static::base2ToBase256(strrev($val));\n\n        $mStart = 2 * $m - 2;\n        $t = ceil($m / 8);\n        $finalMask = chr((1 << ($m % 8)) - 1);\n        if ($finalMask == \"\\0\") {\n            $finalMask = \"\\xFF\";\n        }\n        $bitLen = $mStart + 1;\n        $pad = ceil($bitLen / 8);\n        $h = $bitLen & 7;\n        $h = $h ? 8 - $h : 0;\n\n        $r = rtrim(substr($val, 0, -1), '0');\n        $u = [static::base2ToBase256(strrev($r))];\n        for ($i = 1; $i < 8; $i++) {\n            $u[] = static::base2ToBase256(strrev(str_repeat('0', $i) . $r));\n        }\n\n        // implements algorithm 2.40 (in section 2.3.5) in \"Guide to Elliptic Curve Cryptography\"\n        // with W = 8\n        $reduce = function ($c) use ($u, $mStart, $m, $t, $finalMask, $pad, $h) {\n            $c = str_pad($c, $pad, \"\\0\", STR_PAD_LEFT);\n            for ($i = $mStart; $i >= $m;) {\n                $g = $h >> 3;\n                $mask = $h & 7;\n                $mask = $mask ? 1 << (7 - $mask) : 0x80;\n                for (; $mask > 0; $mask >>= 1, $i--, $h++) {\n                    if (ord($c[$g]) & $mask) {\n                        $temp = $i - $m;\n                        $j = $temp >> 3;\n                        $k = $temp & 7;\n                        $t1 = $j ? substr($c, 0, -$j) : $c;\n                        $length = strlen($t1);\n                        if ($length) {\n                            $t2 = str_pad($u[$k], $length, \"\\0\", STR_PAD_LEFT);\n                            $temp = $t1 ^ $t2;\n                            $c = $j ? substr_replace($c, $temp, 0, $length) : $temp;\n                        }\n                    }\n                }\n            }\n            $c = substr($c, -$t);\n            if (strlen($c) == $t) {\n                $c[0] = $c[0] & $finalMask;\n            }\n            return ltrim($c, \"\\0\");\n        };\n\n        $this->instanceID = self::$instanceCounter++;\n        Integer::setModulo($this->instanceID, $modulo);\n        Integer::setRecurringModuloFunction($this->instanceID, $reduce);\n\n        $this->randomMax = new BigInteger($modulo, 2);\n    }\n\n    /**\n     * Returns an instance of a dynamically generated PrimeFieldInteger class\n     *\n     * @param string $num\n     * @return Integer\n     */\n    public function newInteger($num)\n    {\n        return new Integer($this->instanceID, $num instanceof BigInteger ? $num->toBytes() : $num);\n    }\n\n    /**\n     * Returns an integer on the finite field between one and the prime modulo\n     *\n     * @return Integer\n     */\n    public function randomInteger()\n    {\n        static $one;\n        if (!isset($one)) {\n            $one = new BigInteger(1);\n        }\n\n        return new Integer($this->instanceID, BigInteger::randomRange($one, $this->randomMax)->toBytes());\n    }\n\n    /**\n     * Returns the length of the modulo in bytes\n     *\n     * @return int\n     */\n    public function getLengthInBytes()\n    {\n        return strlen(Integer::getModulo($this->instanceID));\n    }\n\n    /**\n     * Returns the length of the modulo in bits\n     *\n     * @return int\n     */\n    public function getLength()\n    {\n        return strlen(Integer::getModulo($this->instanceID)) << 3;\n    }\n\n    /**\n     * Converts a base-2 string to a base-256 string\n     *\n     * @param string $x\n     * @param int|null $size\n     * @return string\n     */\n    public static function base2ToBase256($x, $size = null)\n    {\n        $str = Strings::bits2bin($x);\n\n        $pad = strlen($x) >> 3;\n        if (strlen($x) & 3) {\n            $pad++;\n        }\n        $str = str_pad($str, $pad, \"\\0\", STR_PAD_LEFT);\n        if (isset($size)) {\n            $str = str_pad($str, $size, \"\\0\", STR_PAD_LEFT);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Converts a base-256 string to a base-2 string\n     *\n     * @param string $x\n     * @return string\n     */\n    public static function base256ToBase2($x)\n    {\n        if (function_exists('gmp_import')) {\n            return gmp_strval(gmp_import($x), 2);\n        }\n\n        return Strings::bin2bits($x);\n    }\n}\n", "<?php\n\n/**\n * @author    Jim Wigginton <terrafrost@php.net>\n * @copyright 2013 Jim Wigginton\n * @license   http://www.opensource.org/licenses/mit-license.html  MIT License\n */\n\nnamespace phpseclib3\\Tests\\Unit\\Crypt\\EC;\n\nuse phpseclib3\\Crypt\\EC;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\OpenSSH;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PKCS1;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PKCS8;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\PuTTY;\nuse phpseclib3\\Crypt\\EC\\Formats\\Keys\\XML;\nuse phpseclib3\\Crypt\\EC\\PrivateKey;\nuse phpseclib3\\Crypt\\EC\\PublicKey;\nuse phpseclib3\\Crypt\\PublicKeyLoader;\nuse phpseclib3\\Tests\\PhpseclibTestCase;\n\nclass KeyTest extends PhpseclibTestCase\n{\n    public function testBinaryPKCS1PrivateParameters()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PARAMETERS-----\nBgUrgQQAIg==\n-----END EC PARAMETERS-----\n-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBPoZHEeuf9UjjhevAbGxWwsmmWw34vkxJwtZ0AknmSUAHo0OAowJSQ\nStf/0U65RhWgBwYFK4EEACKhZANiAASVZJGIs6m/TZhbFoTwBtpvU1JcyixD2YI3\n5YnoIx/6Q1oqJg1vrrmUoXaeEpaO6JH8RgItTl9lYMdmOk5309WJka6tI1QAAK3+\nJq9z4moG4whp3JsuiBQG9wnaHVrQPA4=\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem\n    public function testPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load($expected = '-----BEGIN EC PRIVATE KEY-----\nMHQCAQEEIEzUawcXqUsQhaEQ51JLeOIY0ddzlO2nNgwDk32ETqwkoAcGBSuBBAAK\noUQDQgAEFuVcVb9iCUhg2cknHPE+BouHGhQ39ORjMaMI3T4RfRxr6dj5HAXdEqVZ\n1W94KMe30ndmTndcJ8BPeT1Dd15FdQ==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n        //PKCS1::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem -param_enc explicit\n    public function testPKCS1PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIIBEwIBAQQgFr6TF5meGfgCXDqVxoSEltGI+T94G42PPbA6/ibq+ouggaUwgaIC\nAQEwLAYHKoZIzj0BAQIhAP////////////////////////////////////7///wv\nMAYEAQAEAQcEQQR5vmZ++dy7rFWgYpXOhwsHApv82y3OKNlZ8oFbFvgXmEg62ncm\no8RlXaT7/A4RCKj9F7RIpoVUGZxH0I/7ENS4AiEA/////////////////////rqu\n3OavSKA7v9JejNA2QUECAQGhRANCAASCTRhjXqmdbqphSdxNkfTNAOmDW5cZ5fnZ\nys0Tk4pUv/XdiMZtVCGTNsotGeFbT5X64JkP/BFi3PVqjwy2VhOc\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n\n        // this key and the above key have a few small differences.\n        // in both keys the coefficient's are 0 and 7. in the above\n        // key both coefficients are encoded using a single byte.\n        // in the following key the coefficient's are encoded\n        // as 32 bytes (ie. the length of the reduction prime).\n        // eg. one byte null padded to 32 bytes.\n        // also, in the above key the cofactor (1; optional) is\n        // included whereas in the following key it is not\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIIBTgIBAQQgFr6TF5meGfgCXDqVxoSEltGI+T94G42PPbA6/ibq+ouggeAwgd0C\nAQEwLAYHKoZIzj0BAQIhAP////////////////////////////////////7///wv\nMEQEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAABwRBBHm+Zn753LusVaBilc6HCwcCm/zbLc4o\n2VnygVsW+BeYSDradyajxGVdpPv8DhEIqP0XtEimhVQZnEfQj/sQ1LgCIQD/////\n///////////////+uq7c5q9IoDu/0l6M0DZBQaFEA0IABIJNGGNeqZ1uqmFJ3E2R\n9M0A6YNblxnl+dnKzROTilS/9d2Ixm1UIZM2yi0Z4VtPlfrgmQ/8EWLc9WqPDLZW\nE5w=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem\n    // openssl pkcs8 -topk8 -nocrypt -in secp256k1.pem -out secp256k1-2.pem\n    public function testPKCS8PrivateKey()\n    {\n        $key = PublicKeyLoader::load($expected = '-----BEGIN PRIVATE KEY-----\nMIGEAgEAMBAGByqGSM49AgEGBSuBBAAKBG0wawIBAQQgAYCXwnhqMT6fCIKIkQ0w\ncac7QqHrn4TCQMF9a+im74WhRANCAATwCjyGuP8xQbvVjznqazL36oeAnD32I+X2\n+wscW3OmyTDpk41HaWYPh+j+BoufsSkCwf8dBRGEQbCieZbbZogy\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name secp256k1 -genkey -noout -out secp256k1.pem -param_enc explicit\n    // openssl pkcs8 -topk8 -nocrypt -in secp256k1.pem -out secp256k1-2.pem\n    public function testPKCS8PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMIIBIwIBADCBrgYHKoZIzj0CATCBogIBATAsBgcqhkjOPQEBAiEA////////////\n/////////////////////////v///C8wBgQBAAQBBwRBBHm+Zn753LusVaBilc6H\nCwcCm/zbLc4o2VnygVsW+BeYSDradyajxGVdpPv8DhEIqP0XtEimhVQZnEfQj/sQ\n1LgCIQD////////////////////+uq7c5q9IoDu/0l6M0DZBQQIBAQRtMGsCAQEE\nIKFfw3vfd5pqA5SZOTFtpr7hdJoKP/rmTPMCggkAOA35oUQDQgAEnX66+UCzUW3T\n/fkLGIIfZjJm5bIMwAV85LpDom2hI441JRx+/W4WqtGuW+B/LABS6ZHp+qzepThC\nHsjS3Q9Pew==\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('secp256k1', $key->getCurve());\n\n        // see testPKCS1PrivateKeySpecifiedCurve for an explanation\n        // of how this key and the above key differ\n        $expected = '-----BEGIN PRIVATE KEY-----\nMIIBXgIBADCB6QYHKoZIzj0CATCB3QIBATAsBgcqhkjOPQEBAiEA////////////\n/////////////////////////v///C8wRAQgAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAEIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBEEE\neb5mfvncu6xVoGKVzocLBwKb/NstzijZWfKBWxb4F5hIOtp3JqPEZV2k+/wOEQio\n/Re0SKaFVBmcR9CP+xDUuAIhAP////////////////////66rtzmr0igO7/SXozQ\nNkFBBG0wawIBAQQgoV/De993mmoDlJk5MW2mvuF0mgo/+uZM8wKCCQA4DfmhRANC\nAASdfrr5QLNRbdP9+QsYgh9mMmblsgzABXzkukOibaEjjjUlHH79bhaq0a5b4H8s\nAFLpken6rN6lOEIeyNLdD097\n-----END PRIVATE KEY-----';\n        PKCS8::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem\n    public function testBinaryPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMEECAQEEDwBZdP4eSzKk/uQa6jdtfKAHBgUrgQQABKEiAyAABAHqCoNb++mK5qvE\nc4rCzQEuI19czqvXpEPcAWSXew==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // the difference between this and the above key is that\n        // the privateKey part of the above key has a leading null\n        // byte whereas this one doesn't\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMEACAQEEDll0/h5LMqT+5BrqN218oAcGBSuBBAAEoSIDIAAEAeoKg1v76Yrmq8Rz\nisLNAS4jX1zOq9ekQ9wBZJd7\n-----END EC PRIVATE KEY-----';\n\n        PKCS1::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem -param_enc explicit\n    public function testBinaryPKCS1PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIHNAgEBBA8AuSc4BeeyYTq9rbSDuL2ggZIwgY8CAQEwHAYHKoZIzj0BAjARAgFx\nBgkqhkjOPQECAwICAQkwNwQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccj\nAxUAEOcjqxTWluZ2h1YVF1b+v4/LSakEHwQAnXNhbzX0qxQH1zViwQ8ApSgwJ3lY\n7oTRMV7TGIYCDwEAAAAAAAAA2czsijnlbwIBAqEiAyAABAFC7c50y7uw+iuHeMCt\nWwCpKNBUcVeiHme609Dv/g==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // this key and the above key have a few small differences.\n        // the above key has the (optional) seed for the verifiably\n        // random function whereas the following key does not.\n        // also, in the above key the cofactor (1; optional) is\n        // included whereas in the following key it is not;\n        // finally, in the above the privateKey has a leading null\n        // byte whereas it doesn't in the following key\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIGwAgEBBA65JzgF57JhOr2ttIO4vaB3MHUCAQEwHAYHKoZIzj0BAjARAgFxBgkq\nhkjOPQECAwICAQkwIAQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccjBB8E\nAJ1zYW819KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiGAg8BAAAAAAAAANnM7Io55W+h\nIgMgAAQBQu3OdMu7sPorh3jArVsAqSjQVHFXoh5nutPQ7/4=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem\n    // openssl pkcs8 -topk8 -nocrypt -in sect113r1.pem -out sect113r1-2.pem\n    // sect113r1's reduction polynomial is a trinomial\n    public function testBinaryPKCS8PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMFECAQAwEAYHKoZIzj0CAQYFK4EEAAQEOjA4AgEBBA8A5OuqAY8HYoFOaz9mE6mh\nIgMgAAQASF3rOTPXvH0QdRBvsrMBdLMf27yd8AWABrZTxvI=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // the difference between this and the above key is that\n        // the privateKey part of the above key has a leading null\n        // byte whereas this one doesn't\n        $expected = '-----BEGIN PRIVATE KEY-----\nMFACAQAwEAYHKoZIzj0CAQYFK4EEAAQEOTA3AgEBBA7k66oBjwdigU5rP2YTqaEi\nAyAABABIXes5M9e8fRB1EG+yswF0sx/bvJ3wBYAGtlPG8g==\n-----END PRIVATE KEY-----';\n\n        PKCS8::useNamedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect113r1 -genkey -noout -out sect113r1.pem -param_enc explicit\n    // openssl pkcs8 -topk8 -nocrypt -in sect113r1.pem -out sect113r1-2.pem\n    public function testBinaryPKCS8PrivateKeySpecifiedCurve()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMIHdAgEAMIGbBgcqhkjOPQIBMIGPAgEBMBwGByqGSM49AQIwEQIBcQYJKoZIzj0B\nAgMCAgEJMDcEDjCIJQym58f+ZJzoWCD3BA7ovuTT4iYHRBiL4OnHIwMVABDnI6sU\n1pbmdodWFRdW/r+Py0mpBB8EAJ1zYW819KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiG\nAg8BAAAAAAAAANnM7Io55W8CAQIEOjA4AgEBBA8AXtfDMRsRTx8snPbWHquhIgMg\nAAQA9xdWGJ6vV23+vkdq0C8BLJVg5E3amMyf/5keGa4=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('sect113r1', $key->getCurve());\n\n        // see testBinaryPKCS1PrivateKeySpecifiedCurve() for an\n        // explanation of the differences between the above key\n        // and the following key\n        $expected = '-----BEGIN PRIVATE KEY-----\nMIHBAgEAMIGABgcqhkjOPQIBMHUCAQEwHAYHKoZIzj0BAjARAgFxBgkqhkjOPQEC\nAwICAQkwIAQOMIglDKbnx/5knOhYIPcEDui+5NPiJgdEGIvg6ccjBB8EAJ1zYW81\n9KsUB9c1YsEPAKUoMCd5WO6E0TFe0xiGAg8BAAAAAAAAANnM7Io55W8EOTA3AgEB\nBA5e18MxGxFPHyyc9tYeq6EiAyAABAD3F1YYnq9Xbf6+R2rQLwEslWDkTdqYzJ//\nmR4Zrg==\n-----END PRIVATE KEY-----';\n        PKCS8::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // openssl ecparam -name sect131r1 -genkey -noout -out sect131r1.pem -param_enc explicit\n    // sect131r1's reduction polynomial is a pentanomial\n    public function testBinaryPentanomialPKCS1PrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN EC PRIVATE KEY-----\nMIHoAgEBBBECPEK9NCISWf2riBsORoTM+6CBpzCBpAIBATAlBgcqhkjOPQECMBoC\nAgCDBgkqhkjOPQECAwMwCQIBAgIBAwIBCDA9BBEHoRsJp2tWIURBj/P/jCVwuAQR\nAhfAVhCIS2O5xscpFnj500EDFQBNaW5naHVhUXWYW9OtutohtDqX4gQjBACBuvkf\n35gzxA+cGBNDY4OZB4xufqOMAB9zyBNLG0754VACEQQAAAAAAAAAAjEjlTqUZLVN\nAgECoSYDJAAEBEIolGjo5lnsYqNagqYPOaEGOglkllDO2aWPtB6n+x/WXw==\n-----END EC PRIVATE KEY-----');\n        $this->assertSameNL('sect131r1', $key->getCurve());\n\n        // see testBinaryPKCS1PrivateKeySpecifiedCurve() for an\n        // explanation of the differences between the above key\n        // and the following key\n        $expected = '-----BEGIN EC PRIVATE KEY-----\nMIHOAgEBBBECPEK9NCISWf2riBsORoTM+6CBjTCBigIBATAlBgcqhkjOPQECMBoC\nAgCDBgkqhkjOPQECAwMwCQIBAgIBAwIBCDAmBBEHoRsJp2tWIURBj/P/jCVwuAQR\nAhfAVhCIS2O5xscpFnj500EEIwQAgbr5H9+YM8QPnBgTQ2ODmQeMbn6jjAAfc8gT\nSxtO+eFQAhEEAAAAAAAAAAIxI5U6lGS1TaEmAyQABARCKJRo6OZZ7GKjWoKmDzmh\nBjoJZJZQztmlj7Qep/sf1l8=\n-----END EC PRIVATE KEY-----';\n        PKCS1::useSpecifiedCurve();\n        $this->assertSameNL($expected, $key->toString('PKCS1'));\n    }\n\n    // from https://tools.ietf.org/html/draft-ietf-curdle-pkix-07#section-10.1\n    public function testEd25519PublicKey()\n    {\n        $expected = '-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAGb9ECWmEzf6FQbrBZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PUBLIC KEY-----';\n        $key = PublicKeyLoader::load($expected);\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n    }\n\n    // from https://tools.ietf.org/html/draft-ietf-curdle-pkix-07#section-10.3\n    public function testEd25519PrivateKey()\n    {\n        // without public key (public key should be derived)\n        $expected = '-----BEGIN PRIVATE KEY-----\nMC4CAQAwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\n-----END PRIVATE KEY-----';\n        $key = PublicKeyLoader::load($expected);\n        $this->assertSameNL($expected, $key->toString('PKCS8'));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n\n        // with public key\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06/nwoy/HU++CXqI9EdVhC\noB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\nZ9w7lshQhqowtrbLDFw4rXAxZuE=\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n\n        // the above key not only omits NULL - it also includes a\n        // unstructuredName attribute with a value of \"Curdle Chairs\"\n        // that the following key does not have\n        $key = PublicKeyLoader::load('-----BEGIN PRIVATE KEY-----\nMFMCAQEwBwYDK2VwBQAEIgQg1O5y2/kTWErVttjx92n4rTr+fCjL8dT74Jeoj0R1\nWEKBIQAZv0QJaYTN/oVBusFn3DuWyFCGqjC2tssMXDitcDFm4Q==\n-----END PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL('Ed25519', $key->getPublicKey()->getCurve());\n    }\n\n    public function testPuTTYnistp256()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp256\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 3\nAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJEXCsWA8s18\nm25MJlVE1urbXPYFi4q8oMbb2H0kE2f5WPxizsKXRmb1J68paXQizryL9fC4FTqI\nCJ1+UnaPfk0=\nPrivate-Lines: 1\nAAAAIQDwaPlajbXY1SxhuwsUqN1CEZ5g4adsbmJsKm+ZbUVm4g==\nPrivate-MAC: b85ca0eb7c612df5d18af85128821bd53faaa3ef\n');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJEXCsWA8s18m25MJlVE1urbXPYFi4q8oMbb2H0kE2f5WPxizsKXRmb1J68paXQizryL9fC4FTqICJ1+UnaPfk0= ecdsa-key-20181105');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYnistp384()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp384\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 3\nAAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBOI53wHG3Cdc\nAJZq5PXWZAEAxxsNVFQlQgOX9toWEOgqQF5LbK2nWLKRvaHMzocUXaTYZDccSS0A\nTZFPT3j1Er1LU9cu4PHpyS07v262jdzkxIvKCPcAeISuV80MC7rHog==\nPrivate-Lines: 2\nAAAAMQCEMkGMDg6N7bUqdvLXe0YmY4qBSi8hmAuMvU38RDoVFVmV+R4RYmMueyrX\nbe9Oyus=\nPrivate-MAC: 97a990a3d5f6b8f268d4be9c4ab9ebfd8fa79849\n');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBOI53wHG3CdcAJZq5PXWZAEAxxsNVFQlQgOX9toWEOgqQF5LbK2nWLKRvaHMzocUXaTYZDccSS0ATZFPT3j1Er1LU9cu4PHpyS07v262jdzkxIvKCPcAeISuV80MC7rHog== ecdsa-key-20181105');\n        $this->assertSameNL('secp384r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYnistp521()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ecdsa-sha2-nistp521\nEncryption: none\nComment: ecdsa-key-20181105\nPublic-Lines: 4\nAAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF1Eg0MjaJw\nooFj6HCNh4RWbvmQRY+sdczJyBdT3EaTc/6IUcCfW7w7rAeRp2CDdE9RlAVD8IuL\nqW7DJH06Xeov8wBO5G6jUqXu0rlHsOSiC6VcCxBJuWVNB1IorHnS7PX0f6HdLlIE\nme73P77drqpn5YY0XLtP6hFrF7H5XfCxpNyaJA==\nPrivate-Lines: 2\nAAAAQgHJl8/dIArolFymdzhagXCfd2l8UF3CQXWGVGDQ0R04nnntlyztYiVdRXXK\nr84NnzS7dJcAsR9YaUOZ69NRKNiUAQ==\nPrivate-MAC: 6d49ce289b85549a43d74422dd8bb3ba8798c72c\n');\n        $this->assertSameNL('secp521r1', $key->getCurve());\n\n        PuTTY::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ecdsa-sha2-nistp521 AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBAF1Eg0MjaJwooFj6HCNh4RWbvmQRY+sdczJyBdT3EaTc/6IUcCfW7w7rAeRp2CDdE9RlAVD8IuLqW7DJH06Xeov8wBO5G6jUqXu0rlHsOSiC6VcCxBJuWVNB1IorHnS7PX0f6HdLlIEme73P77drqpn5YY0XLtP6hFrF7H5XfCxpNyaJA== ecdsa-key-20181105');\n        $this->assertSameNL('secp521r1', $key->getCurve());\n\n        OpenSSH::setComment('ecdsa-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testPuTTYed25519()\n    {\n        $key = PublicKeyLoader::load($expected = 'PuTTY-User-Key-File-2: ssh-ed25519\nEncryption: none\nComment: ed25519-key-20181105\nPublic-Lines: 2\nAAAAC3NzaC1lZDI1NTE5AAAAIC6I6RyYAqtBcWXws9EDqGbhFtc5rKG4NMn/G7te\nmQtu\nPrivate-Lines: 1\nAAAAIAHu1uI7dxFzo/SleEI2CekXKmgqlXwOgvfaRWxiX4Jd\nPrivate-MAC: 8a06821a1c8b8b40fc40f876e543c4ea3fb81bb9\n');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        PuTTY::setComment('ed25519-key-20181105');\n        $this->assertSameNL($expected, $key->toString('PuTTY'));\n\n        $key = PublicKeyLoader::load($expected = 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIC6I6RyYAqtBcWXws9EDqGbhFtc5rKG4NMn/G7temQtu ed25519-key-20181105');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        OpenSSH::setComment('ed25519-key-20181105');\n        $this->assertSameNL($expected, $key->toString('OpenSSH'));\n    }\n\n    public function testlibsodium()\n    {\n        if (!function_exists('sodium_crypto_sign_keypair')) {\n            self::markTestSkipped('libsodium extension is not available.');\n        }\n\n        $kp = sodium_crypto_sign_keypair();\n\n        $key = EC::loadFormat('libsodium', $expected = sodium_crypto_sign_secretkey($kp));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('libsodium'));\n\n        $key = EC::loadFormat('libsodium', $expected = sodium_crypto_sign_publickey($kp));\n        $this->assertSameNL('Ed25519', $key->getCurve());\n        $this->assertSameNL($expected, $key->toString('libsodium'));\n    }\n\n    // ssh-keygen -t ed25519\n    public function testOpenSSHPrivateKey()\n    {\n        $key = PublicKeyLoader::load('-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACCpm7dS1/WDTW+uuhp2+aFLPKaJle6+oJqDGLXhlQAX4AAAAJg8TmN5PE5j\neQAAAAtzc2gtZWQyNTUxOQAAACCpm7dS1/WDTW+uuhp2+aFLPKaJle6+oJqDGLXhlQAX4A\nAAAEDltCTSbrr42IS4hhkS6ly0W2XItRQwxjLT+03bIyA+V6mbt1LX9YNNb666Gnb5oUs8\npomV7r6gmoMYteGVABfgAAAAD3ZhZ3JhbnRAdmFncmFudAECAwQFBg==\n-----END OPENSSH PRIVATE KEY-----');\n        $this->assertSameNL('Ed25519', $key->getCurve());\n\n        // testing this key is a little difficult because of this format's\n        // two back to back checkint fields. both fields correspond to the\n        // same randomly generated number. ostensibly this let's you verify\n        // successful decryption of encrypted keys but phpseclib doesn't\n        // support encrypted keys\n        // none-the-less, because of the randomized component we can't easily\n        // see if the key string is equal to another known string\n        $key2 = PublicKeyLoader::load($key->toString('OpenSSH'));\n        $this->assertSameNL('Ed25519', $key2->getCurve());\n    }\n\n    // from https://www.w3.org/TR/xmldsig-core/#sec-RFC4050Compat\n    public function testXMLKey()\n    {\n        $key = PublicKeyLoader::load($orig = '<ECDSAKeyValue xmlns=\"http://www.w3.org/2001/04/xmldsig-more#\">\n<DomainParameters>\n  <NamedCurve URN=\"urn:oid:1.2.840.10045.3.1.7\" />\n</DomainParameters>\n<PublicKey>\n  <X Value=\"58511060653801744393249179046482833320204931884267326155134056258624064349885\" />\n  <Y Value=\"102403352136827775240910267217779508359028642524881540878079119895764161434936\" />\n</PublicKey>\n</ECDSAKeyValue>');\n        $this->assertSameNL('secp256r1', $key->getCurve());\n\n        XML::enableRFC4050Syntax();\n\n        $dom = new \\DOMDocument();\n        $dom->preserveWhiteSpace = false;\n        $dom->loadXML($orig);\n        $expected = $dom->C14N();\n\n        //$dom = new DOMDocument();\n        //$dom->preserveWhiteSpace = false;\n        $dom->loadXML($key->toString('XML'));\n        $actual = $dom->C14N();\n\n        $this->assertSameNL($expected, $actual);\n    }\n\n    public function assertSameNL($expected, $actual, $message = '')\n    {\n        $expected = str_replace(\"\\r\\n\", \"\\n\", $expected);\n        $actual = str_replace(\"\\r\\n\", \"\\n\", $actual);\n        $this->assertSame($expected, $actual, $message);\n    }\n\n    public function testOpenSSHPrivateEC()\n    {\n        $key = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAaAAAABNlY2RzYS\n1zaGEyLW5pc3RwMjU2AAAACG5pc3RwMjU2AAAAQQTk2tbDiyQPzljR+LLIsMzJiwqkfHkG\nStUt3kO00FKMoYv3RJfP6mqdE3E3pPcT5cBg4yB+KzYsYDxwuBc03oQcAAAAqCTU2l0k1N\npdAAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOTa1sOLJA/OWNH4\nssiwzMmLCqR8eQZK1S3eQ7TQUoyhi/dEl8/qap0TcTek9xPlwGDjIH4rNixgPHC4FzTehB\nwAAAAgZ8mK8+EsQ46susQn4mwMNmpvTaKX9Q9KDvOrzotP2qgAAAAMcm9vdEB2YWdyYW50\nAQIDBA==\n-----END OPENSSH PRIVATE KEY-----';\n\n        $key = PublicKeyLoader::load($key);\n\n        $key2 = PublicKeyLoader::load($key->toString('OpenSSH'));\n        $this->assertInstanceOf(PrivateKey::class, $key2);\n\n        $sig = $key->sign('zzz');\n\n        $key = 'ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOTa1sOLJA/OWNH4ssiwzMmLCqR8eQZK1S3eQ7TQUoyhi/dEl8/qap0TcTek9xPlwGDjIH4rNixgPHC4FzTehBw= root@vagrant';\n        $key = PublicKeyLoader::load($key);\n\n        $this->assertTrue($key->verify('zzz', $sig));\n    }\n\n    public function testOpenSSHPrivateEd25519()\n    {\n        $key = '-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACChhCZwqkIh43AfURPOgbyYeZRCKvd4jFcyAK4xmiqxQwAAAJDqGgwS6hoM\nEgAAAAtzc2gtZWQyNTUxOQAAACChhCZwqkIh43AfURPOgbyYeZRCKvd4jFcyAK4xmiqxQw\nAAAEDzL/Yl1Vr/5MxhIIEkVKXBMEIumVG8gUjT9i2PTGSehqGEJnCqQiHjcB9RE86BvJh5\nlEIq93iMVzIArjGaKrFDAAAADHJvb3RAdmFncmFudAE=\n-----END OPENSSH PRIVATE KEY-----';\n\n        $key = PublicKeyLoader::load($key);\n        $sig = $key->sign('zzz');\n        $sig2 = $key->withSignatureFormat('SSH2')->sign('zzz');\n\n        $key = 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKGEJnCqQiHjcB9RE86BvJh5lEIq93iMVzIArjGaKrFD root@vagrant';\n        $key = PublicKeyLoader::load($key);\n\n        $this->assertTrue($key->verify('zzz', $sig));\n        $this->assertTrue($key->withSignatureFormat('SSH2')->verify('zzz', $sig2));\n    }\n\n    /**\n     * @group github1712\n     */\n    public function testKeyTooLarge()\n    {\n        $this->expectException('RangeException');\n\n        $key = '-----BEGIN PRIVATE KEY-----\nMIIEDwIBADATBgcqhkjOPQIBBggqhkjOPQMBBwSCA/MwggPvAgEBBIID6P//////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////8=\n-----END PRIVATE KEY-----';\n\n        $private = EC::loadFormat('PKCS8', $key);\n    }\n\n    /**\n     * @group github1712\n     */\n    public function testLargeCurve25519Key()\n    {\n        $raw = pack('H*', '8426220e7a57dc8d685d3966e3a23600e32563ce6033e07d0c89dbb5bd296577');\n        $key = EC::loadFormat('MontgomeryPrivate', $raw);\n\n        $this->assertSameNL($raw, $key->toString('MontgomeryPrivate'));\n    }\n\n    public function testOpenSSHEncryptedCreation()\n    {\n        if (PHP_INT_SIZE == 4) {\n            self::markTestSkipped('32-bit integers slow OpenSSH encrypted keys down too much');\n        }\n\n        $key = EC::createKey('Ed25519');\n        $key = $key->withPassword('test')->toString('OpenSSH');\n\n        $key = PublicKeyLoader::load($key, 'test');\n        $this->assertInstanceOf(PrivateKey::class, $key);\n    }\n\n    public function testECasJWK()\n    {\n        // keys are from https://datatracker.ietf.org/doc/html/rfc7517#appendix-A\n\n        $plaintext = 'zzz';\n\n        $key = '     {\"keys\":\n       [\n         {\"kty\":\"EC\",\n          \"crv\":\"P-256\",\n          \"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\n          \"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\n          \"d\":\"870MB6gfuTJ4HtUnUvYMyJpr5eUZNP4Bk43bVdj3eAE\",\n          \"use\":\"enc\",\n          \"kid\":\"1\"}\n       ]\n     }';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK', [\n            'use' => 'enc',\n            'kid' => '1'\n        ]));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $sig = $key->sign($plaintext);\n\n        $key = '{\"keys\":\n       [\n         {\"kty\":\"EC\",\n          \"crv\":\"P-256\",\n          \"x\":\"MKBCTNIcKUSDii11ySs3526iDZ8AiTo7Tu6KPAqv7D4\",\n          \"y\":\"4Etl6SRW2YiLUrN5vfvVHuhp7x8PxltmWWlbbM4IFyM\",\n          \"use\":\"enc\",\n          \"kid\":\"1\"}\n       ]\n     }';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK', [\n            'use' => 'enc',\n            'kid' => '1'\n        ]));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $this->assertTrue($key->verify($plaintext, $sig));\n    }\n\n    public function testEd25519asJWK()\n    {\n        // keys are from https://www.rfc-editor.org/rfc/rfc8037.html#appendix-A\n\n        $plaintext = 'zzz';\n\n        $key = '   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\",\n   \"d\":\"nWGxne_9WmC6hEr0kuwsxERJxWl7MmkZcDusAxyuf2A\"}';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n        $keyWithoutWS = '{\"keys\":[' . $keyWithoutWS . ']}';\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK'));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $sig = $key->sign($plaintext);\n\n        $key = '   {\"kty\":\"OKP\",\"crv\":\"Ed25519\",\n   \"x\":\"11qYAYKxCrfVS_7TyWQHOg7hcvPapiMlrwIaaPcHURo\"}';\n\n        $keyWithoutWS = preg_replace('#\\s#', '', $key);\n        $keyWithoutWS = '{\"keys\":[' . $keyWithoutWS . ']}';\n\n        $key = PublicKeyLoader::load($key);\n\n        $phpseclibKey = str_replace('=', '', $key->toString('JWK'));\n\n        $this->assertSame($keyWithoutWS, $phpseclibKey);\n\n        $this->assertTrue($key->verify($plaintext, $sig));\n    }\n\n    public function testNakedPKCS8PubKey()\n    {\n        $key = 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErPJyxEu2/oKCrJaaTVTrq39DKJ2XcN6W+k8UvGf+Y/lDWNbFitQocabsDUvSN0edHH3UKP5QPTz4cOlyIPMrXQ==';\n        $key = PublicKeyLoader::load($key);\n        $this->assertInstanceOf(PublicKey::class, $key);\n    }\n\n    public function testMislabledPKCS8PubKey()\n    {\n        $this->expectException('\\phpseclib3\\Exception\\NoKeyLoadedException');\n\n        $key = '-----BEGIN PRIVATE KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErPJyxEu2/oKCrJaaTVTrq39DKJ2X\ncN6W+k8UvGf+Y/lDWNbFitQocabsDUvSN0edHH3UKP5QPTz4cOlyIPMrXQ==\n-----END PUBLIC KEY-----';\n        $key = PublicKeyLoader::load($key);\n        $this->assertInstanceOf(PublicKey::class, $key);\n    }\n\n    /**\n     * @group github1956\n     */\n    public function testIEEESignature()\n    {\n        $key = '{\"alg\":\"ES256\",\"crv\":\"P-256\",\"ext\":true,\"key_ops\":[\"verify\"],\"kty\":\"EC\",\"x\":\"FKwqyGd4i2NAl8RUXCCBRCAIbcpeGyfyXwgA_AWHb8Y\",\"y\":\"njxhw5O6zGVkBlcPDKYj0E-6VO1giHTUkJWBhgKNqd8\"}';\n        $key = PublicKeyLoader::load($key)->withSignatureFormat('IEEE')->withHash('sha384');\n\n        $signature = 'a4f61518323bac50b4f87a0f766ebb10d1db25358a0a20a98dab20be4e9c3be2d77ff5a8415cfce2967999c73d2a49b2d8c01990f72c04d99ebe3c4ebf75b4e9';\n        $signature = pack('H*', $signature);\n\n        $this->assertTrue($key->verify('hello world!', $signature));\n    }\n\n    public function testExcessivelyLargeBinaryField()\n    {\n        $this->expectException('\\OutOfBoundsException');\n\n        $key = '-----BEGIN PUBLIC KEY-----\nMIIBDDCB0wYHKoZIzj0CATCBxwIBATAgBgcqhkjOPQECMBUCBH////8GCSqGSM49\nAQIDAgICAMEwTQQZABeFj+t6mJdRaeFx93tAh94JisipEd97AQQZAP37Sb/mw6if\nrK2qeh5bvHzBwuXYMUeIFAMVABA/rsdNaW5naHVhUXV3f8Wxke8wBDMEAfSBvF8P\n+Ep0rWzfb970v2F5YlNy2MDF4QAl45nykDcSzPPqnjoa0X+wsyAbavfOGwUCGQEA\nAAAAAAAAAAAAAADH80p3j0Q6zJIOukkCAQIDNAAEAE2mUTAwdPK952h3G8ZinK8B\nz9DYTLdGkQDqox3AtEs9nn6kE1O/vHE4bqMegjj4gbA=\n-----END PUBLIC KEY-----';\n        $key = EC::loadFormat('PKCS8', $key);\n        $this->assertInstanceOf(PublicKey::class, $key);\n    }\n}\n"], "filenames": ["phpseclib/Math/BinaryField.php", "tests/Unit/Crypt/EC/KeyTest.php"], "buggy_code_start_loc": [50, 706], "buggy_code_end_loc": [50, 706], "fixing_code_start_loc": [51, 707], "fixing_code_end_loc": [60, 723], "type": "CWE-834", "message": "In Math/BinaryField.php in phpseclib 3 before 3.0.34, excessively large degrees can lead to a denial of service.", "other": {"cve": {"id": "CVE-2023-49316", "sourceIdentifier": "cve@mitre.org", "published": "2023-11-27T18:15:07.537", "lastModified": "2023-12-01T20:54:48.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Math/BinaryField.php in phpseclib 3 before 3.0.34, excessively large degrees can lead to a denial of service."}, {"lang": "es", "value": "En Math/BinaryField.php en phpseclib anterior a 3.0.34, grados excesivamente grandes pueden provocar una denegaci\u00f3n de servicio."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-834"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpseclib:phpseclib:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.0.34", "matchCriteriaId": "E0BC1749-CFC3-47D7-BD37-EDF5634758AE"}]}]}], "references": [{"url": "https://github.com/phpseclib/phpseclib/commit/964d78101a70305df33f442f5490f0adb3b7e77f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpseclib/phpseclib/releases/tag/3.0.34", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/phpseclib/phpseclib/commit/964d78101a70305df33f442f5490f0adb3b7e77f"}}