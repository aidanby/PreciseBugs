{"buggy_code": ["/*\n * Copyright 2015-2018 floragunn GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.opensearch.security.securityconf;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.ListMultimap;\nimport com.google.common.collect.MultimapBuilder.SetMultimapBuilder;\nimport com.google.common.collect.SetMultimap;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.util.Strings;\n\nimport org.opensearch.ExceptionsHelper;\nimport org.opensearch.action.support.IndicesOptions;\nimport org.opensearch.cluster.metadata.IndexNameExpressionResolver;\nimport org.opensearch.cluster.service.ClusterService;\nimport org.opensearch.common.collect.Tuple;\nimport org.opensearch.common.settings.Settings;\nimport org.opensearch.common.transport.TransportAddress;\nimport org.opensearch.common.util.set.Sets;\nimport org.opensearch.common.xcontent.NamedXContentRegistry;\nimport org.opensearch.security.resolver.IndexResolverReplacer.Resolved;\nimport org.opensearch.security.securityconf.impl.SecurityDynamicConfiguration;\nimport org.opensearch.security.securityconf.impl.v7.ActionGroupsV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleMappingsV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleV7.Index;\nimport org.opensearch.security.securityconf.impl.v7.TenantV7;\nimport org.opensearch.security.support.ConfigConstants;\nimport org.opensearch.security.support.WildcardMatcher;\nimport org.opensearch.security.user.User;\n\nimport static org.opensearch.cluster.metadata.IndexAbstraction.Type.ALIAS;\n\npublic class ConfigModelV7 extends ConfigModel {\n\n    protected final Logger log = LogManager.getLogger(this.getClass());\n    private ConfigConstants.RolesMappingResolution rolesMappingResolution;\n    private ActionGroupResolver agr = null;\n    private SecurityRoles securityRoles = null;\n    private TenantHolder tenantHolder;\n    private RoleMappingHolder roleMappingHolder;\n    private SecurityDynamicConfiguration<RoleV7> roles;\n    private SecurityDynamicConfiguration<TenantV7> tenants;\n\n    public ConfigModelV7(\n            SecurityDynamicConfiguration<RoleV7> roles,\n            SecurityDynamicConfiguration<RoleMappingsV7> rolemappings,\n            SecurityDynamicConfiguration<ActionGroupsV7> actiongroups,\n            SecurityDynamicConfiguration<TenantV7> tenants,\n            DynamicConfigModel dcm,\n            Settings opensearchSettings) {\n\n        this.roles = roles;\n        this.tenants = tenants;\n        \n        try {\n            rolesMappingResolution = ConfigConstants.RolesMappingResolution.valueOf(\n                    opensearchSettings.get(ConfigConstants.SECURITY_ROLES_MAPPING_RESOLUTION, ConfigConstants.RolesMappingResolution.MAPPING_ONLY.toString())\n                            .toUpperCase());\n        } catch (Exception e) {\n            log.error(\"Cannot apply roles mapping resolution\", e);\n            rolesMappingResolution = ConfigConstants.RolesMappingResolution.MAPPING_ONLY;\n        }\n\n        agr = reloadActionGroups(actiongroups);\n        securityRoles = reload(roles);\n        tenantHolder = new TenantHolder(roles, tenants);\n        roleMappingHolder = new RoleMappingHolder(rolemappings, dcm.getHostsResolverMode());\n    }\n\n    public Set<String> getAllConfiguredTenantNames() {\n        return Collections.unmodifiableSet(tenants.getCEntries().keySet());\n    }\n    \n    public SecurityRoles getSecurityRoles() {\n        return securityRoles;\n    }\n    \n    private static interface ActionGroupResolver {\n        Set<String> resolvedActions(final List<String> actions);\n    }\n\n    private ActionGroupResolver reloadActionGroups(SecurityDynamicConfiguration<ActionGroupsV7> actionGroups) {\n        return new ActionGroupResolver() {\n            \n            private Set<String> getGroupMembers(final String groupname) {\n\n                if (actionGroups == null) {\n                    return Collections.emptySet();\n                }\n\n                return Collections.unmodifiableSet(resolve(actionGroups, groupname));\n            }\n            \n            private Set<String> resolve(final SecurityDynamicConfiguration<?> actionGroups, final String entry) {\n\n                \n                // SG5 format, plain array\n                //List<String> en = actionGroups.getAsList(DotPath.of(entry));\n                //if (en.isEmpty()) {\n                    // try SG6 format including readonly and permissions key\n                //  en = actionGroups.getAsList(DotPath.of(entry + \".\" + ConfigConstants.CONFIGKEY_ACTION_GROUPS_PERMISSIONS));\n                    //}\n                \n                if(!actionGroups.getCEntries().containsKey(entry)) {\n                    return Collections.emptySet();\n                }\n                \n                final Set<String> ret = new HashSet<String>();\n                \n                final Object actionGroupAsObject = actionGroups.getCEntries().get(entry);\n                \n                if(actionGroupAsObject != null && actionGroupAsObject instanceof List) {\n                    \n                    for (final String perm: ((List<String>) actionGroupAsObject)) {\n                        if (actionGroups.getCEntries().keySet().contains(perm)) {\n                            ret.addAll(resolve(actionGroups,perm));\n                        } else {\n                            ret.add(perm);\n                        }\n                    }\n                    \n                    \n                } else if(actionGroupAsObject != null &&  actionGroupAsObject instanceof ActionGroupsV7) {\n                    for (final String perm: ((ActionGroupsV7) actionGroupAsObject).getAllowed_actions()) {\n                        if (actionGroups.getCEntries().keySet().contains(perm)) {\n                            ret.addAll(resolve(actionGroups,perm));\n                        } else {\n                            ret.add(perm);\n                        }\n                    }\n                } else {\n                    throw new RuntimeException(\"Unable to handle \"+actionGroupAsObject);\n                }\n                \n                return Collections.unmodifiableSet(ret);\n            }\n            \n            @Override\n            public Set<String> resolvedActions(final List<String> actions) {\n                final Set<String> resolvedActions = new HashSet<String>();\n                for (String string: actions) {\n                    final Set<String> groups = getGroupMembers(string);\n                    if (groups.isEmpty()) {\n                        resolvedActions.add(string);\n                    } else {\n                        resolvedActions.addAll(groups);\n                    }\n                }\n\n                return Collections.unmodifiableSet(resolvedActions);\n            }\n        };\n    }\n\n    private SecurityRoles reload(SecurityDynamicConfiguration<RoleV7> settings) {\n\n        final Set<Future<SecurityRole>> futures = new HashSet<>(5000);\n        final ExecutorService execs = Executors.newFixedThreadPool(10);\n\n        for(Entry<String, RoleV7> securityRole: settings.getCEntries().entrySet()) {\n\n            Future<SecurityRole> future = execs.submit(new Callable<SecurityRole>() {\n\n                @Override\n                public SecurityRole call() throws Exception {\n                    SecurityRole.Builder _securityRole = new SecurityRole.Builder(securityRole.getKey());\n                    \n                    if(securityRole.getValue() == null) {\n                        return null;\n                    }\n\n                    final Set<String> permittedClusterActions = agr.resolvedActions(securityRole.getValue().getCluster_permissions());\n                    _securityRole.addClusterPerms(permittedClusterActions);\n\n                        /*for(RoleV7.Tenant tenant: securityRole.getValue().getTenant_permissions()) {\n\n                            //if(tenant.equals(user.getName())) {\n                            //    continue;\n                            //}\n\n                            if(isTenantsRw(tenant)) {\n                                _securityRole.addTenant(new Tenant(tenant.getKey(), true));\n                            } else {\n                                _securityRole.addTenant(new Tenant(tenant.getKey(), false));\n                            }\n                        }*/\n\n                        for (final Index permittedAliasesIndex : securityRole.getValue().getIndex_permissions()) {\n\n                            final String dls = permittedAliasesIndex.getDls();\n                            final List<String> fls = permittedAliasesIndex.getFls();\n                            final List<String> maskedFields = permittedAliasesIndex.getMasked_fields();\n\n                            for(String pat: permittedAliasesIndex.getIndex_patterns()) {\n                                IndexPattern _indexPattern = new IndexPattern(pat);\n                                _indexPattern.setDlsQuery(dls);\n                                _indexPattern.addFlsFields(fls);\n                                _indexPattern.addMaskedFields(maskedFields);\n                                _indexPattern.addPerm(agr.resolvedActions(permittedAliasesIndex.getAllowed_actions()));\n    \n                                /*for(Entry<String, List<String>> type: permittedAliasesIndex.getValue().getTypes(-).entrySet()) {\n                                    TypePerm typePerm = new TypePerm(type.getKey());\n                                    final List<String> perms = type.getValue();\n                                    typePerm.addPerms(agr.resolvedActions(perms));\n                                    _indexPattern.addTypePerms(typePerm);\n                                }*/\n    \n                                _securityRole.addIndexPattern(_indexPattern);\n                            \n                            }\n\n                        }\n            \n                            \n                        return _securityRole.build();\n                }\n            });\n\n            futures.add(future);\n        }\n\n        execs.shutdown();\n        try {\n            execs.awaitTermination(30, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Thread interrupted (1) while loading roles\");\n            return null;\n        }\n\n        try {\n            SecurityRoles _securityRoles = new SecurityRoles(futures.size());\n            for (Future<SecurityRole> future : futures) {\n                _securityRoles.addSecurityRole(future.get());\n            }\n\n            return _securityRoles;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Thread interrupted (2) while loading roles\");\n            return null;\n        } catch (ExecutionException e) {\n            log.error(\"Error while updating roles: {}\", e.getCause(), e.getCause());\n            throw ExceptionsHelper.convertToOpenSearchException(e);\n        }\n    }\n\n\n    //beans\n\n    public static class SecurityRoles implements org.opensearch.security.securityconf.SecurityRoles {\n\n        protected final Logger log = LogManager.getLogger(this.getClass());\n\n        final Set<SecurityRole> roles;\n\n        private SecurityRoles(int roleCount) {\n            roles = new HashSet<>(roleCount);\n        }\n\n        private SecurityRoles addSecurityRole(SecurityRole securityRole) {\n            if (securityRole != null) {\n                this.roles.add(securityRole);\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((roles == null) ? 0 : roles.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            SecurityRoles other = (SecurityRoles) obj;\n            if (roles == null) {\n                if (other.roles != null)\n                    return false;\n            } else if (!roles.equals(other.roles))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return \"roles=\" + roles;\n        }\n\n        public Set<SecurityRole> getRoles() {\n            return Collections.unmodifiableSet(roles);\n        }\n        \n        public Set<String> getRoleNames() {\n            return getRoles().stream().map(r -> r.getName()).collect(Collectors.toSet());\n        }\n\n        public SecurityRoles filter(Set<String> keep) {\n            final SecurityRoles retVal = new SecurityRoles(roles.size());\n            for (SecurityRole sr : roles) {\n                if (keep.contains(sr.getName())) {\n                    retVal.addSecurityRole(sr);\n                }\n            }\n            return retVal;\n        }\n\n\n        @Override\n        public EvaluatedDlsFlsConfig getDlsFls(User user, boolean dfmEmptyOverwritesAll, IndexNameExpressionResolver resolver, ClusterService cs,\n                NamedXContentRegistry namedXContentRegistry) {\n\n\n            if (!containsDlsFlsConfig()) {\n                if(log.isDebugEnabled()) {\n                    log.debug(\"No fls or dls found for {} in {} security roles\", user, roles.size());\n                }\n\n                return EvaluatedDlsFlsConfig.EMPTY;\n            }\n        \t\n            Map<String, Set<String>> dlsQueriesByIndex = new HashMap<String, Set<String>>();            \n            Map<String, Set<String>> flsFields = new HashMap<String, Set<String>>();\n            Map<String, Set<String>> maskedFieldsMap = new HashMap<String, Set<String>>();\n\n            // we capture all concrete indices that do not have any\n            // DLS/FLS/Masked Fields restrictions. If the dfm_empty_overwrites_all\n            // switch is enabled, this trumps any restrictions on those indices\n            // that may be imposed by other roles.\n            Set<String> noDlsConcreteIndices = new HashSet<>();\n            Set<String> noFlsConcreteIndices = new HashSet<>();\n            Set<String> noMaskedFieldConcreteIndices = new HashSet<>();\n                        \n            for (SecurityRole role : roles) {\n                for (IndexPattern ip : role.getIpatterns()) {\n\t\t\t\t\tfinal Set<String> concreteIndices = ip.concreteIndexNames(user, resolver, cs);\n\t\t\t\t\tString dls = ip.getDlsQuery(user);\n\n\t\t\t\t\tif (dls != null && dls.length() > 0) {\n\n\t\t\t\t\t\tfor (String concreteIndex : concreteIndices) {\n\t\t\t\t\t\t\tdlsQueriesByIndex.computeIfAbsent(concreteIndex, (key) -> new HashSet<String>()).add(dls);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dfmEmptyOverwritesAll) {\n\t\t\t\t\t    noDlsConcreteIndices.addAll(concreteIndices);\n\t\t\t\t\t}\n\n                    Set<String> fls = ip.getFls();\n\n                    if (fls != null && fls.size() > 0) {\n\n                        for (String concreteIndex : concreteIndices) {\n                            if (flsFields.containsKey(concreteIndex)) {\n                                flsFields.get(concreteIndex).addAll(Sets.newHashSet(fls));\n                            } else {\n                                flsFields.put(concreteIndex, new HashSet<String>());\n                                flsFields.get(concreteIndex).addAll(Sets.newHashSet(fls));\n                            }\n                        }\n                    } else if (dfmEmptyOverwritesAll) {\n                        noFlsConcreteIndices.addAll(concreteIndices);\n                    }\n                    \n                    Set<String> maskedFields = ip.getMaskedFields();\n\n                    if (maskedFields != null && maskedFields.size() > 0) {\n\n                        for (String concreteIndex : concreteIndices) {                            \n                            if (maskedFieldsMap.containsKey(concreteIndex)) {\n                                maskedFieldsMap.get(concreteIndex).addAll(Sets.newHashSet(maskedFields));\n                            } else {\n                                maskedFieldsMap.put(concreteIndex, new HashSet<String>());\n                                maskedFieldsMap.get(concreteIndex).addAll(Sets.newHashSet(maskedFields));\n                            }\n                        }\n                    } else if (dfmEmptyOverwritesAll) {\n                        noMaskedFieldConcreteIndices.addAll(concreteIndices);\n                    }\n                }\n            }\n            if (dfmEmptyOverwritesAll) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Index patterns with no dls queries attached: {} - They will be removed from {}\", noDlsConcreteIndices,\n                            dlsQueriesByIndex.keySet());\n                    log.debug(\"Index patterns with no fls fields attached: {} - They will be removed from {}\", noFlsConcreteIndices,\n                            flsFields.keySet());\n                    log.debug(\"Index patterns with no masked fields attached: {} - They will be removed from {}\", noMaskedFieldConcreteIndices,\n                            maskedFieldsMap.keySet());\n                }\n                // removing the indices that do not have D/M/F restrictions\n                // from the keySet will also modify the underlying map\n                dlsQueriesByIndex.keySet().removeAll(noDlsConcreteIndices);\n                flsFields.keySet().removeAll(noFlsConcreteIndices);\n                maskedFieldsMap.keySet().removeAll(noMaskedFieldConcreteIndices);\n            }\n\n            return new EvaluatedDlsFlsConfig(dlsQueriesByIndex, flsFields, maskedFieldsMap);\n        }\n\n\n      //opensearchDashboards special only, terms eval\n        public Set<String> getAllPermittedIndicesForDashboards(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            Set<String> retVal = new HashSet<>();\n            for (SecurityRole sr : roles) {\n                retVal.addAll(sr.getAllResolvedPermittedIndices(Resolved._LOCAL_ALL, user, actions, resolver, cs));\n                retVal.addAll(resolved.getRemoteIndices());\n            }\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        //dnfof only\n        public Set<String> reduce(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            Set<String> retVal = new HashSet<>();\n            for (SecurityRole sr : roles) {\n                retVal.addAll(sr.getAllResolvedPermittedIndices(resolved, user, actions, resolver, cs));\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"Reduced requested resolved indices {} to permitted indices {}.\", resolved, retVal.toString());\n            }\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        //return true on success\n        public boolean get(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            for (SecurityRole sr : roles) {\n                if (ConfigModelV7.impliesTypePerm(sr.getIpatterns(), resolved, user, actions, resolver, cs)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public boolean impliesClusterPermissionPermission(String action) {\n            return roles.stream().filter(r -> r.impliesClusterPermission(action)).count() > 0;\n        }\n\n        //rolespan\n        public boolean impliesTypePermGlobal(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver,\n                ClusterService cs) {\n            Set<IndexPattern> ipatterns = new HashSet<ConfigModelV7.IndexPattern>();\n            roles.stream().forEach(p -> ipatterns.addAll(p.getIpatterns()));\n            return ConfigModelV7.impliesTypePerm(ipatterns, resolved, user, actions, resolver, cs);\n        }\n        \n        private boolean containsDlsFlsConfig() {\n            for (SecurityRole role : roles) {\n                for (IndexPattern ip : role.getIpatterns()) {\n                    if (ip.hasDlsQuery() || ip.hasFlsFields() || ip.hasMaskedFields()) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n\n    public static class SecurityRole {\n        private final String name;\n        private final Set<IndexPattern> ipatterns;\n        private final WildcardMatcher clusterPerms;\n\n        public static final class Builder {\n            private final String name;\n            private final Set<String> clusterPerms = new HashSet<>();\n            private final Set<IndexPattern> ipatterns = new HashSet<>();\n            public Builder(String name) {\n                this.name = Objects.requireNonNull(name);\n            }\n\n            public Builder addIndexPattern(IndexPattern indexPattern) {\n                this.ipatterns.add(indexPattern);\n                return this;\n            }\n\n            public Builder addClusterPerms(Collection<String> clusterPerms) {\n                if (clusterPerms != null) {\n                    this.clusterPerms.addAll(clusterPerms);\n                }\n                return this;\n            }\n\n\n            public SecurityRole build() {\n                return new SecurityRole(name, ipatterns, WildcardMatcher.from(clusterPerms));\n            }\n        }\n\n        private SecurityRole(String name, Set<IndexPattern> ipatterns, WildcardMatcher clusterPerms) {\n            this.name = Objects.requireNonNull(name);\n            this.ipatterns = ipatterns;\n            this.clusterPerms = clusterPerms;\n        }\n\n        private boolean impliesClusterPermission(String action) {\n            return clusterPerms.test(action);\n        }\n\n        //get indices which are permitted for the given types and actions\n        //dnfof + opensearchDashboards special only\n        private Set<String> getAllResolvedPermittedIndices(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver,\n                ClusterService cs) {\n\n            final Set<String> retVal = new HashSet<>();\n            for (IndexPattern p : ipatterns) {\n                //what if we cannot resolve one (for create purposes)\n                final boolean patternMatch = p.getPerms().matchAll(actions);\n                \n//                final Set<TypePerm> tperms = p.getTypePerms();\n//                for (TypePerm tp : tperms) {\n//                    if (WildcardMatcher.matchAny(tp.typePattern, resolved.getTypes(-).toArray(new String[0]))) {\n//                        patternMatch = WildcardMatcher.matchAll(tp.perms.toArray(new String[0]), actions);\n//                    }\n//                }\n                if (patternMatch) {\n                    //resolved but can contain patterns for nonexistent indices\n                    final WildcardMatcher permitted = WildcardMatcher.from(p.attemptResolveIndexNames(user, resolver, cs)); //maybe they do not exist\n                    final Set<String> res = new HashSet<>();\n                    if (!resolved.isLocalAll() && !resolved.getAllIndices().contains(\"*\") && !resolved.getAllIndices().contains(\"_all\")) {\n                        //resolved but can contain patterns for nonexistent indices\n                        resolved.getAllIndices().stream().filter(permitted).forEach(res::add);\n                    } else {\n                        //we want all indices so just return what's permitted\n\n                        //#557\n                        //final String[] allIndices = resolver.concreteIndexNames(cs.state(), IndicesOptions.lenientExpandOpen(), \"*\");\n                        final String[] allIndices = cs.state().metadata().getConcreteAllOpenIndices();\n                        Arrays.stream(allIndices).filter(permitted).forEach(res::add);\n                    }\n                    retVal.addAll(res);\n                }\n            }\n\n            //all that we want and all thats permitted of them\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        /*private SecurityRole addTenant(Tenant tenant) {\n            if (tenant != null) {\n                this.tenants.add(tenant);\n            }\n            return this;\n        }*/\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((clusterPerms == null) ? 0 : clusterPerms.hashCode());\n            result = prime * result + ((ipatterns == null) ? 0 : ipatterns.hashCode());\n            result = prime * result + ((name == null) ? 0 : name.hashCode());\n            //result = prime * result + ((tenants == null) ? 0 : tenants.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            SecurityRole other = (SecurityRole) obj;\n            if (clusterPerms == null) {\n                if (other.clusterPerms != null)\n                    return false;\n            } else if (!clusterPerms.equals(other.clusterPerms))\n                return false;\n            if (ipatterns == null) {\n                if (other.ipatterns != null)\n                    return false;\n            } else if (!ipatterns.equals(other.ipatterns))\n                return false;\n            if (name == null) {\n                if (other.name != null)\n                    return false;\n            } else if (!name.equals(other.name))\n                return false;\n//            if (tenants == null) {\n//                if (other.tenants != null)\n//                    return false;\n//            } else if (!tenants.equals(other.tenants))\n//                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"  \" + name + System.lineSeparator()\n                    + \"    ipatterns=\" + ipatterns + System.lineSeparator() + \"    clusterPerms=\" + clusterPerms;\n        }\n\n        //public Set<Tenant> getTenants(User user) {\n        //    //TODO filter out user tenants\n        //    return Collections.unmodifiableSet(tenants);\n        //}\n\n        public Set<IndexPattern> getIpatterns() {\n            return Collections.unmodifiableSet(ipatterns);\n        }\n\n        public String getName() {\n            return name;\n        }\n\n    }\n\n    //sg roles\n    public static class IndexPattern {\n        private final String indexPattern;\n        private String dlsQuery;\n        private final Set<String> fls = new HashSet<>();\n        private final Set<String> maskedFields = new HashSet<>();\n        private final Set<String> perms = new HashSet<>();\n\n        public IndexPattern(String indexPattern) {\n            super();\n            this.indexPattern = Objects.requireNonNull(indexPattern);\n        }\n\n        public IndexPattern addFlsFields(List<String> flsFields) {\n            if (flsFields != null) {\n                this.fls.addAll(flsFields);\n            }\n            return this;\n        }\n\n        public IndexPattern addMaskedFields(List<String> maskedFields) {\n            if (maskedFields != null) {\n                this.maskedFields.addAll(maskedFields);\n            }\n            return this;\n        }\n\n        public IndexPattern addPerm(Set<String> perms) {\n            if (perms != null) {\n                this.perms.addAll(perms);\n            }\n            return this;\n        }\n\n        public IndexPattern setDlsQuery(String dlsQuery) {\n            if (dlsQuery != null) {\n                this.dlsQuery = dlsQuery;\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((dlsQuery == null) ? 0 : dlsQuery.hashCode());\n            result = prime * result + ((fls == null) ? 0 : fls.hashCode());\n            result = prime * result + ((maskedFields == null) ? 0 : maskedFields.hashCode());\n            result = prime * result + ((indexPattern == null) ? 0 : indexPattern.hashCode());\n            result = prime * result + ((perms == null) ? 0 : perms.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            IndexPattern other = (IndexPattern) obj;\n            if (dlsQuery == null) {\n                if (other.dlsQuery != null)\n                    return false;\n            } else if (!dlsQuery.equals(other.dlsQuery))\n                return false;\n            if (fls == null) {\n                if (other.fls != null)\n                    return false;\n            } else if (!fls.equals(other.fls))\n                return false;\n            if (maskedFields == null) {\n                if (other.maskedFields != null)\n                    return false;\n            } else if (!maskedFields.equals(other.maskedFields))\n                return false;\n            if (indexPattern == null) {\n                if (other.indexPattern != null)\n                    return false;\n            } else if (!indexPattern.equals(other.indexPattern))\n                return false;\n            if (perms == null) {\n                if (other.perms != null)\n                    return false;\n            } else if (!perms.equals(other.perms))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"        indexPattern=\" + indexPattern + System.lineSeparator() + \"          dlsQuery=\" + dlsQuery\n                    + System.lineSeparator() + \"          fls=\" + fls + System.lineSeparator() + \"          perms=\" + perms;\n        }\n\n        public String getUnresolvedIndexPattern(User user) {\n            return replaceProperties(indexPattern, user);\n        }\n\n        /** Finds the indices accessible to the user and resolves them to concrete names */\n        public Set<String> concreteIndexNames(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs) {\n            return getResolvedIndexPattern(user, resolver, cs, false);\n        }\n\n        /** Finds the indices accessible to the user and attempts to resolve them to names, also includes any unresolved names */\n        public Set<String> attemptResolveIndexNames(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs) {\n            return getResolvedIndexPattern(user, resolver, cs, true);\n        }\n\n        public Set<String> getResolvedIndexPattern(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs, final boolean appendUnresolved) {\n            final String unresolved = getUnresolvedIndexPattern(user);\n            final ImmutableSet.Builder<String> resolvedIndices = new ImmutableSet.Builder<>();\n\n            final WildcardMatcher matcher = WildcardMatcher.from(unresolved);\n            if (!(matcher instanceof WildcardMatcher.Exact)) {\n                final String[] aliasesForPermittedPattern = cs.state().getMetadata().getIndicesLookup().entrySet().stream()\n                        .filter(e -> e.getValue().getType() == ALIAS)\n                        .filter(e -> matcher.test(e.getKey()))\n                        .map(e -> e.getKey())\n                        .toArray(String[]::new);\n                if (aliasesForPermittedPattern.length > 0) {\n                    final String[] resolvedAliases = resolver.concreteIndexNames(cs.state(), IndicesOptions.lenientExpandOpen(), aliasesForPermittedPattern);\n                    resolvedIndices.addAll(Arrays.asList(resolvedAliases));\n                }\n            }\n\n            if (Strings.isNotBlank(unresolved)) {\n                final String[] resolvedIndicesFromPattern = resolver.concreteIndexNames(cs.state(), IndicesOptions.lenientExpandOpen(), unresolved);\n                resolvedIndices.addAll(Arrays.asList(resolvedIndicesFromPattern));\n            }\n\n            if (appendUnresolved || resolvedIndices.build().isEmpty()) {\n                resolvedIndices.add(unresolved);\n            }\n            return resolvedIndices.build();\n        }\n\n        public String getDlsQuery(User user) {\n            return replaceProperties(dlsQuery, user);\n        }\n\n        public boolean hasDlsQuery() {\n            return dlsQuery != null && !dlsQuery.isEmpty();\n        }\n        \n        public Set<String> getFls() {\n            return Collections.unmodifiableSet(fls);\n        }\n\n        public boolean hasFlsFields() {\n            return fls != null && !fls.isEmpty();\n        }\n        \n        public Set<String> getMaskedFields() {\n            return Collections.unmodifiableSet(maskedFields);\n        }\n\n        public boolean hasMaskedFields() {\n            return maskedFields != null && !maskedFields.isEmpty();\n        }\n        \n        public WildcardMatcher getPerms() {\n            return WildcardMatcher.from(perms);\n        }\n\n        \n    }\n\n    /*public static class TypePerm {\n        private final String typePattern;\n        private final Set<String> perms = new HashSet<>();\n\n        private TypePerm(String typePattern) {\n            super();\n            this.typePattern = Objects.requireNonNull(typePattern);\n            /*if(IGNORED_TYPES.contains(typePattern)) {\n                throw new RuntimeException(\"typepattern '\"+typePattern+\"' not allowed\");\n            }\n        }\n\n        private TypePerm addPerms(Collection<String> perms) {\n            if (perms != null) {\n                this.perms.addAll(perms);\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((perms == null) ? 0 : perms.hashCode());\n            result = prime * result + ((typePattern == null) ? 0 : typePattern.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            TypePerm other = (TypePerm) obj;\n            if (perms == null) {\n                if (other.perms != null)\n                    return false;\n            } else if (!perms.equals(other.perms))\n                return false;\n            if (typePattern == null) {\n                if (other.typePattern != null)\n                    return false;\n            } else if (!typePattern.equals(other.typePattern))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"             typePattern=\" + typePattern + System.lineSeparator() + \"             perms=\" + perms;\n        }\n\n        public String getTypePattern() {\n            return typePattern;\n        }\n\n        public Set<String> getPerms() {\n            return Collections.unmodifiableSet(perms);\n        }\n\n    }*/\n\n    public static class Tenant {\n        private final String tenant;\n        private final boolean readWrite;\n\n        private Tenant(String tenant, boolean readWrite) {\n            super();\n            this.tenant = tenant;\n            this.readWrite = readWrite;\n        }\n\n        public String getTenant() {\n            return tenant;\n        }\n\n        public boolean isReadWrite() {\n            return readWrite;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + (readWrite ? 1231 : 1237);\n            result = prime * result + ((tenant == null) ? 0 : tenant.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            Tenant other = (Tenant) obj;\n            if (readWrite != other.readWrite)\n                return false;\n            if (tenant == null) {\n                if (other.tenant != null)\n                    return false;\n            } else if (!tenant.equals(other.tenant))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"                tenant=\" + tenant + System.lineSeparator() + \"                readWrite=\" + readWrite;\n        }\n    }\n\n    private static String replaceProperties(String orig, User user) {\n\n        if (user == null || orig == null) {\n            return orig;\n        }\n\n        orig = orig.replace(\"${user.name}\", user.getName()).replace(\"${user_name}\", user.getName());\n        orig = replaceRoles(orig, user);\n        orig = replaceSecurityRoles(orig, user);\n        for (Entry<String, String> entry : user.getCustomAttributesMap().entrySet()) {\n            if (entry == null || entry.getKey() == null || entry.getValue() == null) {\n                continue;\n            }\n            orig = orig.replace(\"${\" + entry.getKey() + \"}\", entry.getValue());\n            orig = orig.replace(\"${\" + entry.getKey().replace('.', '_') + \"}\", entry.getValue());\n        }\n        return orig;\n    }\n\n    private static String replaceRoles(final String orig, final User user) {\n        String retVal = orig;\n        if (orig.contains(\"${user.roles}\") || orig.contains(\"${user_roles}\")) {\n            final String commaSeparatedRoles = toQuotedCommaSeparatedString(user.getRoles());\n            retVal = orig.replace(\"${user.roles}\", commaSeparatedRoles).replace(\"${user_roles}\", commaSeparatedRoles);\n        }\n        return retVal;\n    }\n\n    private static String replaceSecurityRoles(final String orig, final User user) {\n        String retVal = orig;\n        if (orig.contains(\"${user.securityRoles}\") || orig.contains(\"${user_securityRoles}\")) {\n            final String commaSeparatedRoles = toQuotedCommaSeparatedString(user.getSecurityRoles());\n            retVal = orig.replace(\"${user.securityRoles}\", commaSeparatedRoles).replace(\"${user_securityRoles}\", commaSeparatedRoles);\n        }\n        return retVal;\n    }\n\n    private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n        return Joiner.on(',').join(Iterables.transform(roles, s -> {\n            return new StringBuilder(s.length() + 2).append('\"').append(s).append('\"').toString();\n        }));\n    }\n\n    private static final class IndexMatcherAndPermissions {\n        private WildcardMatcher matcher;\n        private WildcardMatcher perms;\n        public IndexMatcherAndPermissions(Set<String> patterns, Set<String> perms) {\n            this.matcher = WildcardMatcher.from(patterns);\n            this.perms = WildcardMatcher.from(perms);\n        }\n\n        public boolean matches(String index, String action) {\n            return matcher.test(index) && perms.test(action);\n        }\n    }\n\n    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n        IndexMatcherAndPermissions[] indexMatcherAndPermissions;\n        if (resolved.isLocalAll()) {\n            indexMatcherAndPermissions = ipatterns\n                    .stream()\n                    .filter(indexPattern -> \"*\".equals(indexPattern.getUnresolvedIndexPattern(user)))\n                    .map(p -> new IndexMatcherAndPermissions(p.attemptResolveIndexNames(user, resolver, cs), p.perms))\n                    .toArray(IndexMatcherAndPermissions[]::new);\n        } else {\n            indexMatcherAndPermissions = ipatterns\n                    .stream()\n                    .map(p -> new IndexMatcherAndPermissions(p.attemptResolveIndexNames(user, resolver, cs), p.perms))\n                    .toArray(IndexMatcherAndPermissions[]::new);\n        }\n        return resolvedRequestedIndices\n                .stream()\n                .allMatch(index ->\n                        Arrays.stream(requestedActions).allMatch(action ->\n                                Arrays.stream(indexMatcherAndPermissions).anyMatch(ipap ->\n                                        ipap.matches(index, action)\n                                )\n                        )\n                );\n    }\n    \n    private class TenantHolder {\n\n        private SetMultimap<String, Tuple<String, Boolean>> tenantsMM = null;\n\n        public TenantHolder(SecurityDynamicConfiguration<RoleV7> roles, SecurityDynamicConfiguration<TenantV7> definedTenants) {\n            final Set<Future<Tuple<String, Set<Tuple<String, Boolean>>>>> futures = new HashSet<>(roles.getCEntries().size());\n\n            final ExecutorService execs = Executors.newFixedThreadPool(10);\n\n            for(Entry<String, RoleV7> securityRole: roles.getCEntries().entrySet()) {\n\n                if(securityRole.getValue() == null) {\n                    continue;\n                }\n\n                Future<Tuple<String, Set<Tuple<String, Boolean>>>> future = execs.submit(new Callable<Tuple<String, Set<Tuple<String, Boolean>>>>() {\n                    @Override\n                    public Tuple<String, Set<Tuple<String, Boolean>>> call() throws Exception {\n                        final Set<Tuple<String, Boolean>> tuples = new HashSet<>();\n                        final List<RoleV7.Tenant> tenants = securityRole.getValue().getTenant_permissions();\n                        if (tenants != null) {\n                            \n                            for (RoleV7.Tenant tenant : tenants) {\n\n                                // find Wildcarded tenant patterns\n                                List<String> matchingTenants = WildcardMatcher.from(tenant.getTenant_patterns()).getMatchAny(definedTenants.getCEntries().keySet(), Collectors.toList()) ;\n                                for(String matchingTenant: matchingTenants ) {\n                                    tuples.add(new Tuple<String, Boolean>(matchingTenant, agr.resolvedActions(tenant.getAllowed_actions()).contains(\"kibana:saved_objects/*/write\")));\n                                }\n                                // find parameter substitution specified tenant\n                                Pattern parameterPattern = Pattern.compile(\"^\\\\$\\\\{attr\");\n                                List<String> matchingParameterTenantList = tenant.getTenant_patterns().stream().filter(parameterPattern.asPredicate()).collect(Collectors.toList());\n                                for(String matchingParameterTenant : matchingParameterTenantList ) {\n                                    tuples.add(new Tuple<String, Boolean>(matchingParameterTenant,agr.resolvedActions(tenant.getAllowed_actions()).contains(\"kibana:saved_objects/*/write\"))) ;\n                                }\n                            }\n                        }\n\n                        return new Tuple<String, Set<Tuple<String, Boolean>>>(securityRole.getKey(), tuples);\n                    }\n                });\n\n                futures.add(future);\n\n            }\n\n            execs.shutdown();\n            try {\n                execs.awaitTermination(30, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                log.error(\"Thread interrupted (1) while loading roles\");\n                return;\n            }\n\n            try {\n                final SetMultimap<String, Tuple<String, Boolean>> tenantsMM_ = SetMultimapBuilder.hashKeys(futures.size()).hashSetValues(16).build();\n\n                for (Future<Tuple<String, Set<Tuple<String, Boolean>>>> future : futures) {\n                    Tuple<String, Set<Tuple<String, Boolean>>> result = future.get();\n                    tenantsMM_.putAll(result.v1(), result.v2());\n                }\n\n                tenantsMM = tenantsMM_;\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                log.error(\"Thread interrupted (2) while loading roles\");\n                return;\n            } catch (ExecutionException e) {\n                log.error(\"Error while updating roles: {}\", e.getCause(), e.getCause());\n                throw ExceptionsHelper.convertToOpenSearchException(e);\n            }\n\n        }\n\n        public Map<String, Boolean> mapTenants(final User user, Set<String> roles) {\n\n            if (user == null || tenantsMM == null) {\n                return Collections.emptyMap();\n            }\n\n            final Map<String, Boolean> result = new HashMap<>(roles.size());\n            result.put(user.getName(), true);\n\n            tenantsMM.entries().stream().filter(e -> roles.contains(e.getKey())).filter(e -> !user.getName().equals(e.getValue().v1())).forEach(e -> {\n\n                // replaceProperties for tenant name because\n                // at this point e.getValue().v1() can be in this form : \"${attr.[internal|jwt|proxy|ldap].*}\"\n                // let's substitute it with the eventual value of the user's attribute\n                final String tenant = replaceProperties(e.getValue().v1(),user);\n                final boolean rw = e.getValue().v2();\n\n                if (rw || !result.containsKey(tenant)) { //RW outperforms RO\n\n                    // We want to make sure that we add a tenant that exists\n                    // Indeed, because we don't have control over what will be\n                    // passed on as values of users' attributes, we have to make\n                    // sure that we don't allow them to select tenants that do not exist.\n                    if(ConfigModelV7.this.tenants.getCEntries().containsKey(tenant)) {\n                        result.put(tenant, rw);\n                    }\n                }\n            });\n\n            Set<String> _roles = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n            _roles.addAll(roles);\n            if(!result.containsKey(\"global_tenant\") && (\n                    _roles.contains(\"kibana_user\")\n                    || _roles.contains(\"all_access\")\n                    )) {\n                result.put(\"global_tenant\", true);\n            }\n\n            return Collections.unmodifiableMap(result);\n        }\n    }\n\n    private class RoleMappingHolder {\n\n        private ListMultimap<String, String> users;\n        private ListMultimap<List<WildcardMatcher>, String> abars;\n        private ListMultimap<String, String> bars;\n        private ListMultimap<String, String> hosts;\n        private final String hostResolverMode;\n\n        private List<WildcardMatcher> userMatchers;\n        private List<WildcardMatcher> barMatchers;\n        private List<WildcardMatcher> hostMatchers;\n\n        private RoleMappingHolder(final SecurityDynamicConfiguration<RoleMappingsV7> rolemappings, final String hostResolverMode) {\n\n            this.hostResolverMode = hostResolverMode;\n            \n            if (roles != null) {\n\n                users = ArrayListMultimap.create();\n                abars = ArrayListMultimap.create();\n                bars = ArrayListMultimap.create();\n                hosts = ArrayListMultimap.create();\n\n                for (final Entry<String, RoleMappingsV7> roleMap : rolemappings.getCEntries().entrySet()) {\n                    final String roleMapKey = roleMap.getKey();\n                    final RoleMappingsV7 roleMapValue = roleMap.getValue();\n\n                    for (String u : roleMapValue.getUsers()) {\n                        users.put(u, roleMapKey);\n                    }\n\n                    final Set<String> abar = new HashSet<>(roleMapValue.getAnd_backend_roles());\n\n                    if (!abar.isEmpty()) {\n                        abars.put(WildcardMatcher.matchers(abar), roleMapKey);\n                    }\n\n                    for (String bar : roleMapValue.getBackend_roles()) {\n                        bars.put(bar, roleMapKey);\n                    }\n\n                    for (String host : roleMapValue.getHosts()) {\n                        hosts.put(host, roleMapKey);\n                    }\n                }\n\n                userMatchers = WildcardMatcher.matchers(users.keySet());\n                barMatchers = WildcardMatcher.matchers(bars.keySet());\n                hostMatchers = WildcardMatcher.matchers(hosts.keySet());\n            }\n        }\n\n        private Set<String> map(final User user, final TransportAddress caller) {\n\n            if (user == null || users == null || abars == null || bars == null || hosts == null) {\n                return Collections.emptySet();\n            }\n\n            final Set<String> securityRoles = new HashSet<>(user.getSecurityRoles());\n\n            if (rolesMappingResolution == ConfigConstants.RolesMappingResolution.BOTH\n                    || rolesMappingResolution == ConfigConstants.RolesMappingResolution.BACKENDROLES_ONLY) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Pass backendroles from {}\", user);\n                }\n                securityRoles.addAll(user.getRoles());\n            }\n\n            if (((rolesMappingResolution == ConfigConstants.RolesMappingResolution.BOTH\n                    || rolesMappingResolution == ConfigConstants.RolesMappingResolution.MAPPING_ONLY))) {\n\n                for (String p : WildcardMatcher.getAllMatchingPatterns(userMatchers, user.getName())) {\n                    securityRoles.addAll(users.get(p));\n                }\n                for (String p : WildcardMatcher.getAllMatchingPatterns(barMatchers, user.getRoles())) {\n                    securityRoles.addAll(bars.get(p));\n                }\n\n                for (List<WildcardMatcher> patterns : abars.keySet()) {\n                    if (patterns.stream().allMatch(p -> p.matchAny(user.getRoles()))) {\n                        securityRoles.addAll(abars.get(patterns));\n                    }\n                }\n\n                if (caller != null) {\n                    //IPV4 or IPv6 (compressed and without scope identifiers)\n                    final String ipAddress = caller.getAddress();\n\n                    for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, ipAddress)) {\n                        securityRoles.addAll(hosts.get(p));\n                    }\n\n                    if (caller.address() != null\n                            && (hostResolverMode.equalsIgnoreCase(\"ip-hostname\") || hostResolverMode.equalsIgnoreCase(\"ip-hostname-lookup\"))) {\n                        final String hostName = caller.address().getHostString();\n\n                        for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, hostName)) {\n                            securityRoles.addAll(hosts.get(p));\n                        }\n                    }\n\n                    if (caller.address() != null && hostResolverMode.equalsIgnoreCase(\"ip-hostname-lookup\")) {\n\n                        final String resolvedHostName = caller.address().getHostName();\n\n                        for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, resolvedHostName)) {\n                            securityRoles.addAll(hosts.get(p));\n                        }\n                    }\n                }\n            }\n\n            return Collections.unmodifiableSet(securityRoles);\n\n        }\n    }\n    \n    \n    \n    \n\n    public Map<String, Boolean> mapTenants(User user, Set<String> roles) {\n        return tenantHolder.mapTenants(user, roles);\n    }\n\n    public Set<String> mapSecurityRoles(User user, TransportAddress caller) {\n        return roleMappingHolder.map(user, caller);\n    }\n}\n", "/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n\npackage org.opensearch.security;\n\nimport org.apache.hc.core5.http.HttpStatus;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport org.opensearch.security.test.SingleClusterTest;\nimport org.opensearch.security.test.helper.rest.RestHelper;\nimport org.opensearch.security.test.helper.rest.RestHelper.HttpResponse;\n\n\npublic class DataStreamIntegrationTests extends SingleClusterTest {\n\n    public String getIndexTemplateBody() {\n        return  \"{\\\"index_patterns\\\": [ \\\"my-data-stream*\\\" ], \\\"data_stream\\\": { }, \\\"priority\\\": 200, \\\"template\\\": {\\\"settings\\\": { } } }\";\n    }\n\n    public void createSampleDataStreams(RestHelper rh) throws Exception{\n        // Valid index-template is required to create data-streams\n        rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n\n        rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream21\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream22\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream23\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n    }\n\n    @Test\n    public void testCreateDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        HttpResponse response;\n\n        response = rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream22\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testGetDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream33\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testDeleteDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream33\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testDataStreamStats() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream33/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream2*/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testBackingIndicesOfDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream11-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream22-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream21-000001,.ds-my-data-stream22-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream2*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream11-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream22-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream21-000001,.ds-my-data-stream22-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n    }\n}\n", "---\n_meta:\n  type: \"internalusers\"\n  config_version: 2\nbug.99:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_c:\n  hash: \"$2a$04$jQcEXpODnTFoGDuA7DPdSevA84CuH/7MOYkb80M3XZIrH76YMWS9G\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"uc\"\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_b:\n  hash: \"$2a$04$idGSEpNOhFbyiRL6toGPT.orh7ENOEU8kAqwkRFaXWRdA6wVgyqUu\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"ub\"\n  attributes: {}\n  description: \"Migrated from v6\"\nsnapresuser:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_a:\n  hash: \"$2a$04$NDy7mGbRNrmPMh9nSnIB.OTMFkcioEd69A04ReSGkJDd7QHxnCcVC\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"ua\"\n  attributes: {}\n  description: \"Migrated from v6\"\nsarek:\n  hash: \"$2a$12$Ioo1uXmH.Nq/lS5dUVBEsePSmZ5pSIpVO/xKHaquU/Jvq97I7nAgG\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ncrusherw:\n  hash: \"$2a$12$61vXe3cXy32p0cjsW0Y/SeZa7kEVSWuQK0jg98D9d5zOGXfo5NgyC\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet_academy\"\n  attributes: {}\n  description: \"Migrated from v6\"\nkibanaserver:\n  hash: \"$2a$12$4AcgAt3xwOWadA5s5blL6ev39OXDNhmOesEoo33eZtrq2N0YrU3H.\"\n  reserved: true\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ntheindexadmin:\n  hash: \"$2a$12$P.QbiwOsnxgz7kLBT10F7u6GhY7//Keyz7Xwf7lNzskRxpo9.zxFS\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\naliastest:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nopendistro_security_logstash:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ntwitter:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nmindex12:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nspock:\n  hash: \"$2a$12$GI9JXffO3WUjTsU7Yy3E4.LBxC2ILo66Zg/rr79BpikSL2IIRezQa\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcan\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nknuddel:\n  hash: \"_imponly_\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes:\n    test1: test2\n  description: \"Migrated from v6\"\n557:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"557\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbaz:\n  hash: \"$2a$12$A41IxPXV1/Dx46C6i1ufGubv.p3qYX7xVcY46q33sylYbIqQVwTMu\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\npicard:\n  hash: \"$2a$12$wkY2BsRneCU5za1OPYlzsehQit6gu2vprVv/4jHiSEEBv2ThunaTS\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbug108:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nnagilum:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ncustattr:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes:\n    c1: \"v1\"\n    c2: \"v2\"\n    c3.c4.cd: \"test1\"\n    c4.c4.cd: \"test2\"\n    c5: null\n    null: \"abc\"\n  description: \"Migrated from v6\"\nrestoreuser:\n  hash: \"$2a$12$JU2QjYVTlI24Q/enEOpf2uTLCPGchN.eXWCsrBiieUcRoeh53NB0y\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nCN=spock,OU=client,O=client,L=Test,C=DE:\n  hash: \"_impersonation_only_\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcan\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nabc:\n  hash: \"$2a$12$bP0CO5d5nhmaTOj7mGteHugXQQ8jlSV0dxcl5//moZ1xnI.pVPXfe\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nkirk:\n  hash: \"$2a$12$xZOcnwYPYQ3zIadnlQIJ0eNhX1ngwMkTN.oMwkKxoGvDVPn4/6XtO\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\n\u00a7\u00c4\u00d6\u00dc\u00e4\u00f6\u00fc\u00df:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nccsresolv:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nitt1635:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"esb_1\"\n  - \"esb_3\"\n  - \"esb_5\"\n  attributes: {}\n  description: \"Migrated from v6\"\nrexclude:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_role01_role02_role03:\n  hash: \"$2a$12$6.4Y6L//xeKQ7t8YEG0s6OH4F4q9gMw0J8E0GjmUMNZeyIWu1IRWS\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"role01\"\n  - \"role02\"\n  - \"role03\"\n  attributes: {}\n  description: \"Migrated from v6\"\nunderscore:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ndlsnoinvest:\n  hash: \"$2a$12$9Zr4IgoJRqK6xJq4xjoa6OZAnY4QOQ6xIhcCxeYoQtB/HriMkeJSC\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\naliasmngt:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"aliasmngt\"\n  attributes: {}\n  description: \"Migrated from v6\"\n'\"''+-,;_?*@<>!$%&/()=#':\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuserwithnopasswd:\n  hash: null\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nworf:\n  hash: \"$2a$12$A41IxPXV1/Dx46C6i1ufGubv.p3qYX7xVcY46q33sylYbIqQVwTMu\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nwriter:\n  hash: \"$2a$12$LZvbDVnegkTbEFTu9hHnWO4HIrdB9rGaKcEOID5n0VV4j58cnvyZ.\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_role01:\n  hash: \"$2a$12$XrBfLQh2T8wIzpxE5vzhUOPjjGfONcD8UEjd5IT5KveG8ULZaj04.\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"role01\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbulk:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"bulk\"\n  attributes: {}\n  description: \"Migrated from v6\"\nuserwithblankpasswd:\n  hash: \"\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nenv.replace@example.comp.com:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nstatic_role_user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nfoo_index:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nfoo_all:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nbulk_test_user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds0:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds3:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\npit-1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\npit-2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nall-pit:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nhidden_test:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  opendistro_security_roles:\n  - hidden_test\nsem-user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nsem-user2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\n", "---\n_meta:\n  type: \"roles\"\n  config_version: 2\nunittest_1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nrexclude:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"/(?!special|alsonotallowed)(\\\\S|\\\\s)*/\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nunderscore:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*abc_xyz_*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nshakespeare:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  - \"indices:admin/template/get\"\n  - \"indices:admin/exists\"\n  index_permissions:\n  - index_patterns:\n    - \"shakespeare\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n    - \"indices:data/write/bulk*\"\n    - \"indices:admin/validate/query*\"\n    - \"indices:admin/exists\"\n    - \"indices:admin/get*\"\n    - \"indices:admin/mappings/fields/get*\"\n  tenant_permissions: []\naliasmngt:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"logstash-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/aliases*\"\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\ntransport_client:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/liveness\"\n  index_permissions: []\n  tenant_permissions: []\nuser1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"alias1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nccsresolv:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?abc*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nuser2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"alias2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nrole_starfleet_captains:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor*\"\n  index_permissions:\n  - index_patterns:\n    - \"sf\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CRUD\"\n  - index_patterns:\n    - \"public\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CRUD\"\n  tenant_permissions: []\nrestore:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:admin/snapshot/restore\"\n  index_permissions:\n  - index_patterns:\n    - \"vulcangov_restore_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_restore_2a\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_restore_2*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n  - index_patterns:\n    - \"vulcangov_no_restore_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_no_restore_2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_no_restore_3\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n  - index_patterns:\n    - \"vulcangov_no_restore_4\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/create\"\n  tenant_permissions: []\nbaz:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"foo*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"foo\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nkibana4:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search-\"\n    - \"indices:data/read/msearch\"\n    - \"indices:admin/get\"\n    - \"indices:admin/validate/query\"\n    - \"indices:admin/mappings/fields/get\"\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:data/write/delete\"\n    - \"indices:data/write/update\"\n    - \"indices:admin/mapping/put\"\n    - \"indices:data/read/get\"\n    - \"indices:admin/refresh\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\ndlsnoinvest:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"article\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \"investment\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \"company\"\n    dls: \"{\\\"term\\\" : {\\\"category_code\\\" : \\\"software\\\"}}\"\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nremote_ccs:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/shards/search_shards\"\n  tenant_permissions: []\nzdummy_all:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"admin_1\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"abcdef_2_2\"\n    allowed_actions:\n    - \"kibana_all_read\"\nmultiget:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:data/read/mget\"\n  index_permissions:\n  - index_patterns:\n    - \"mindex1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"mindex2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\npublic:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/main\"\n  index_permissions:\n  - index_patterns:\n    - \".notexistingindexcvnjl9809991\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nccsresolv1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?abc*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"xyz\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"*noexist\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nrole01_role02:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"role01_role02\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nkibana4_server:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:data/write/delete\"\n    - \"indices:data/write/update\"\n    - \"indices:admin/mapping/put\"\n    - \"indices:data/read/get\"\n    - \"indices:admin/refresh\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/create\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\n557:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"/\\\\S*/\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nrole_starfleet:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor*\"\n  - \"indices:data/read/scroll\"\n  index_permissions:\n  - index_patterns:\n    - \"sf\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n    - \"indices:*\"\n  - index_patterns:\n    - \"pub*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nopendistro_security_own_index:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"${user_name}\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\naliastest:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"calias-1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nadmin:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nua:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexa*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"permitnotexistentindex*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/field_caps\"\n  tenant_permissions: []\nflsdls:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: \"{\\\"term\\\" : {\\\"_type\\\" : \\\"legends\\\"}}\"\n    fls:\n    - \"fieldx\"\n    - \"field2.b\"\n    - \"field3.m.*\"\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nub:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexb\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nuc:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexc\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"beats-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\ndummy:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/health\"\n  index_permissions: []\n  tenant_permissions: []\nattr:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"${attr_internal_c2}\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nmindex3:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_3\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write*\"\n  tenant_permissions: []\nrole.with.dot:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"index.with.dot\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nmindex2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search\"\n  tenant_permissions: []\nmindex1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search\"\n  tenant_permissions: []\nrole_klingons1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/shards/search_shards\"\n  - index_patterns:\n    - \"klingonempire\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"kltentrw\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"kltentro\"\n    allowed_actions:\n    - \"kibana_all_read\"\nsnapres:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_MANAGE_SNAPSHOTS\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  tenant_permissions: []\nrole_klingons2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"klingonempire\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"praxisrw\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"praxisro\"\n    allowed_actions:\n    - \"kibana_all_read\"\ntheindex_admin:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS\"\n  index_permissions:\n  - index_patterns:\n    - \"theindex\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\npower_user:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_MONITOR\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nremote_marvel_agent:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:admin/template/put\"\n  - \"indices:admin/template/get\"\n  index_permissions:\n  - index_patterns:\n    - \"?marvel-opensearch-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nopendistro_security_kibana_server:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_MONITOR\"\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS\"\n  - \"indices:admin/template*\"\n  - \"indices:data/read/scroll*\"\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?kibana-6\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?kibana_*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?tasks\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/aliases*\"\n  tenant_permissions: []\nopendistro_security_all_access:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \".notexistingindexcvnjl9809991\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nmarvel_user:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?marvel-opensearch-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/get\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\nwriter:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:data/write/bulk*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n    - \"OPENDISTRO_SECURITY_WRITE\"\n  tenant_permissions: []\nopendistro_security_logstash:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:admin/template/get\"\n  - \"indices:admin/template/put\"\n  - \"indices:data/write*\"\n  index_permissions:\n  - index_patterns:\n    - \"logstash-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\nuser:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\ntwitter:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n  - index_patterns:\n    - \"twitter\"\n    - \"analytics\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nenv_test:\n  cluster_permissions:\n  - '*'\n  index_permissions:\n  - index_patterns:\n    - '${env.INDEXNAME1:-index1}'\n    - '${env.INDEXNAME2:-index2}'\n    - '${user_name}'\n    - '${env.INDEXNAME3}'\n    allowed_actions:\n    - \"*\"\nxyz_impsr:\n  cluster_permissions:\n    - \"*\"\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"ALL\"\nrole_foo_index:\n  cluster_permissions:\n    - '*'\n  index_permissions:\n    - index_patterns:\n        - foo-index\n      allowed_actions:\n        - indices:data/read/*\n        - indices:admin/*\n        - indices:monitor/*\nrole_foo_all:\n  cluster_permissions:\n    - '*'\n  index_permissions:\n    - index_patterns:\n        - 'foo-*'\n      allowed_actions:\n        - indices:data/read/*\n        - indices:admin/*\n        - indices:monitor/*\n\nxyz_sr:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\n# This role is hidden in rolesmapping\nxyz_sr_hidden:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\nxyz_sr_reserved:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\nindex_template_perm:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"indices:admin/index_template/*\"\n\ndata_stream_0:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"*my-data-stream2*\"\n      allowed_actions:\n        - \"indices:admin/get\"\n\ndata_stream_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"indices:admin/index_template/put\" ]\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      allowed_actions:\n        - \"indices:admin/data_stream/get\"\n        - \"indices:admin/data_stream/create\"\n\ndata_stream_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream2*\"\n      allowed_actions:\n        - \"indices:admin/data_stream/get\"\n        - \"indices:admin/data_stream/create\"\n        - \"indices:monitor/data_stream/stats\"\n        - \"indices:admin/data_stream/delete\"\n        - \"indices:admin/get\"\n\ndata_stream_3:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"DATASTREAM_ALL\"\n\npoint_in_time_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"pit_1\"\n        - \"*my-data-stream11*\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\npoint_in_time_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream21\"\n        - \"pit_2\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\npoint_in_time_all:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\nhidden_test:\n  cluster_permissions:\n  - SGS_CLUSTER_COMPOSITE_OPS\n  index_permissions:\n  - index_patterns:\n    - hidden_test_not_hidden\n    allowed_actions:\n    - \"*\"\n\nsem-role:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"cluster_monitor\", \"indices:admin/index_template/put\" ]\n  index_permissions:\n    - index_patterns:\n        - \"sem*\"\n      allowed_actions:\n        - \"*\"\n\nsem-role2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"cluster_monitor\" ]\n  index_permissions:\n    - index_patterns:\n        - \"sem*\"\n      allowed_actions:\n        - \"indices:admin/index_template/put\"\n", "---\n_meta:\n  type: \"rolesmapping\"\n  config_version: 2\nopendistro_security_own_index:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"spock\"\n  - \"kirk\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nunittest_1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"CN=spock,OU=client,O=client,L=Test,C=DE\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrexclude:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"rexclude\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nunderscore:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"underscore\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_vulcans_admin:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcanadmin\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nshakespeare:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\naliastest:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"aliastest\"\n  - \"dummy\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nuser1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"worf\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_vulcans:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcangov\"\n  hosts: []\n  users:\n  - \"kirk\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nflsdls:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"sarek\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nccsresolv:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"ccsresolv\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nuser2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_starfleet_captains:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrestore:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"restoreuser\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nattr:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"custattr\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex3:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_starfleet_library:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet*\"\n  - \"ambassador\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nbaz:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"baz\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_klingons1:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nsnapres:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"snapresuser\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_klingons2:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nkibana4:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"bug108\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ndlsnoinvest:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"dlsnoinvest\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ntheindex_admin:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"theindexadmin\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nremote_ccs:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"crusherw\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nzdummy_all:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"bug108\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmultiget:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_kibana_server:\n  reserved: true\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"kibanaserver\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_all_access:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"nagilum\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\npublic:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"*\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nwriter:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"writer\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_logstash:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"opendistro_security_logstash\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole01_role02:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users: []\n  and_backend_roles:\n  - \"role01\"\n  - \"role02\"\n  description: \"Migrated from v6\"\nrole_starfleet:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet\"\n  - \"captains\"\n  - \"defectors\"\n  hosts:\n  - \"*.starfleetintranet.com\"\n  users:\n  - \"nagilum\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_host1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts:\n  - \"127.0.0.1\"\n  - \"localhost\"\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_host2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"host_127.0.0.1\"\n  - \"host_localhost\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ntwitter:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"twitter\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nenv_test:\n  users:\n    - env.replace@example.comp.com\nODS_ALL_ACCESS:\n  users:\n    - static_role_user\nrole_foo_index:\n  users:\n    - foo_index\nrole_foo_all:\n  users:\n    - foo_all\nxyz_sr_hidden:\n  reserved: false\n  hidden: true\n  backend_roles: []\n  hosts: []\n  users:\n    - \"test_user\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nbulk_test_user_role:\n  users:\n    - \"bulk_test_user\"\nindex_template_perm:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds1\"\ndata_stream_0:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds0\"\ndata_stream_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds1\"\ndata_stream_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds2\"\ndata_stream_3:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds3\"\npoint_in_time_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"pit-1\"\npoint_in_time_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"pit-2\"\npoint_in_time_all:\n  reserved: false\n  hidden: false\n  users:\n    - \"all-pit\"\nsem-role:\n  reserved: false\n  hidden: false\n  users:\n    - \"sem-user\"\nsem-role2:\n  reserved: false\n  hidden: false\n  users:\n    - \"sem-user2\"\n"], "fixing_code": ["/*\n * Copyright 2015-2018 floragunn GmbH\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.opensearch.security.securityconf;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.ListMultimap;\nimport com.google.common.collect.MultimapBuilder.SetMultimapBuilder;\nimport com.google.common.collect.SetMultimap;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.util.Strings;\n\nimport org.opensearch.ExceptionsHelper;\nimport org.opensearch.action.support.IndicesOptions;\nimport org.opensearch.cluster.metadata.IndexNameExpressionResolver;\nimport org.opensearch.cluster.service.ClusterService;\nimport org.opensearch.common.collect.Tuple;\nimport org.opensearch.common.settings.Settings;\nimport org.opensearch.common.transport.TransportAddress;\nimport org.opensearch.common.util.set.Sets;\nimport org.opensearch.common.xcontent.NamedXContentRegistry;\nimport org.opensearch.security.resolver.IndexResolverReplacer.Resolved;\nimport org.opensearch.security.securityconf.impl.SecurityDynamicConfiguration;\nimport org.opensearch.security.securityconf.impl.v7.ActionGroupsV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleMappingsV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleV7;\nimport org.opensearch.security.securityconf.impl.v7.RoleV7.Index;\nimport org.opensearch.security.securityconf.impl.v7.TenantV7;\nimport org.opensearch.security.support.ConfigConstants;\nimport org.opensearch.security.support.WildcardMatcher;\nimport org.opensearch.security.user.User;\n\nimport static org.opensearch.cluster.metadata.IndexAbstraction.Type.ALIAS;\nimport static org.opensearch.cluster.metadata.IndexAbstraction.Type.DATA_STREAM;\n\npublic class ConfigModelV7 extends ConfigModel {\n\n    protected final Logger log = LogManager.getLogger(this.getClass());\n    private ConfigConstants.RolesMappingResolution rolesMappingResolution;\n    private ActionGroupResolver agr = null;\n    private SecurityRoles securityRoles = null;\n    private TenantHolder tenantHolder;\n    private RoleMappingHolder roleMappingHolder;\n    private SecurityDynamicConfiguration<RoleV7> roles;\n    private SecurityDynamicConfiguration<TenantV7> tenants;\n\n    public ConfigModelV7(\n            SecurityDynamicConfiguration<RoleV7> roles,\n            SecurityDynamicConfiguration<RoleMappingsV7> rolemappings,\n            SecurityDynamicConfiguration<ActionGroupsV7> actiongroups,\n            SecurityDynamicConfiguration<TenantV7> tenants,\n            DynamicConfigModel dcm,\n            Settings opensearchSettings) {\n\n        this.roles = roles;\n        this.tenants = tenants;\n        \n        try {\n            rolesMappingResolution = ConfigConstants.RolesMappingResolution.valueOf(\n                    opensearchSettings.get(ConfigConstants.SECURITY_ROLES_MAPPING_RESOLUTION, ConfigConstants.RolesMappingResolution.MAPPING_ONLY.toString())\n                            .toUpperCase());\n        } catch (Exception e) {\n            log.error(\"Cannot apply roles mapping resolution\", e);\n            rolesMappingResolution = ConfigConstants.RolesMappingResolution.MAPPING_ONLY;\n        }\n\n        agr = reloadActionGroups(actiongroups);\n        securityRoles = reload(roles);\n        tenantHolder = new TenantHolder(roles, tenants);\n        roleMappingHolder = new RoleMappingHolder(rolemappings, dcm.getHostsResolverMode());\n    }\n\n    public Set<String> getAllConfiguredTenantNames() {\n        return Collections.unmodifiableSet(tenants.getCEntries().keySet());\n    }\n    \n    public SecurityRoles getSecurityRoles() {\n        return securityRoles;\n    }\n    \n    private static interface ActionGroupResolver {\n        Set<String> resolvedActions(final List<String> actions);\n    }\n\n    private ActionGroupResolver reloadActionGroups(SecurityDynamicConfiguration<ActionGroupsV7> actionGroups) {\n        return new ActionGroupResolver() {\n            \n            private Set<String> getGroupMembers(final String groupname) {\n\n                if (actionGroups == null) {\n                    return Collections.emptySet();\n                }\n\n                return Collections.unmodifiableSet(resolve(actionGroups, groupname));\n            }\n            \n            private Set<String> resolve(final SecurityDynamicConfiguration<?> actionGroups, final String entry) {\n\n                \n                // SG5 format, plain array\n                //List<String> en = actionGroups.getAsList(DotPath.of(entry));\n                //if (en.isEmpty()) {\n                    // try SG6 format including readonly and permissions key\n                //  en = actionGroups.getAsList(DotPath.of(entry + \".\" + ConfigConstants.CONFIGKEY_ACTION_GROUPS_PERMISSIONS));\n                    //}\n                \n                if(!actionGroups.getCEntries().containsKey(entry)) {\n                    return Collections.emptySet();\n                }\n                \n                final Set<String> ret = new HashSet<String>();\n                \n                final Object actionGroupAsObject = actionGroups.getCEntries().get(entry);\n                \n                if(actionGroupAsObject != null && actionGroupAsObject instanceof List) {\n                    \n                    for (final String perm: ((List<String>) actionGroupAsObject)) {\n                        if (actionGroups.getCEntries().keySet().contains(perm)) {\n                            ret.addAll(resolve(actionGroups,perm));\n                        } else {\n                            ret.add(perm);\n                        }\n                    }\n                    \n                    \n                } else if(actionGroupAsObject != null &&  actionGroupAsObject instanceof ActionGroupsV7) {\n                    for (final String perm: ((ActionGroupsV7) actionGroupAsObject).getAllowed_actions()) {\n                        if (actionGroups.getCEntries().keySet().contains(perm)) {\n                            ret.addAll(resolve(actionGroups,perm));\n                        } else {\n                            ret.add(perm);\n                        }\n                    }\n                } else {\n                    throw new RuntimeException(\"Unable to handle \"+actionGroupAsObject);\n                }\n                \n                return Collections.unmodifiableSet(ret);\n            }\n            \n            @Override\n            public Set<String> resolvedActions(final List<String> actions) {\n                final Set<String> resolvedActions = new HashSet<String>();\n                for (String string: actions) {\n                    final Set<String> groups = getGroupMembers(string);\n                    if (groups.isEmpty()) {\n                        resolvedActions.add(string);\n                    } else {\n                        resolvedActions.addAll(groups);\n                    }\n                }\n\n                return Collections.unmodifiableSet(resolvedActions);\n            }\n        };\n    }\n\n    private SecurityRoles reload(SecurityDynamicConfiguration<RoleV7> settings) {\n\n        final Set<Future<SecurityRole>> futures = new HashSet<>(5000);\n        final ExecutorService execs = Executors.newFixedThreadPool(10);\n\n        for(Entry<String, RoleV7> securityRole: settings.getCEntries().entrySet()) {\n\n            Future<SecurityRole> future = execs.submit(new Callable<SecurityRole>() {\n\n                @Override\n                public SecurityRole call() throws Exception {\n                    SecurityRole.Builder _securityRole = new SecurityRole.Builder(securityRole.getKey());\n                    \n                    if(securityRole.getValue() == null) {\n                        return null;\n                    }\n\n                    final Set<String> permittedClusterActions = agr.resolvedActions(securityRole.getValue().getCluster_permissions());\n                    _securityRole.addClusterPerms(permittedClusterActions);\n\n                        /*for(RoleV7.Tenant tenant: securityRole.getValue().getTenant_permissions()) {\n\n                            //if(tenant.equals(user.getName())) {\n                            //    continue;\n                            //}\n\n                            if(isTenantsRw(tenant)) {\n                                _securityRole.addTenant(new Tenant(tenant.getKey(), true));\n                            } else {\n                                _securityRole.addTenant(new Tenant(tenant.getKey(), false));\n                            }\n                        }*/\n\n                        for (final Index permittedAliasesIndex : securityRole.getValue().getIndex_permissions()) {\n\n                            final String dls = permittedAliasesIndex.getDls();\n                            final List<String> fls = permittedAliasesIndex.getFls();\n                            final List<String> maskedFields = permittedAliasesIndex.getMasked_fields();\n\n                            for(String pat: permittedAliasesIndex.getIndex_patterns()) {\n                                IndexPattern _indexPattern = new IndexPattern(pat);\n                                _indexPattern.setDlsQuery(dls);\n                                _indexPattern.addFlsFields(fls);\n                                _indexPattern.addMaskedFields(maskedFields);\n                                _indexPattern.addPerm(agr.resolvedActions(permittedAliasesIndex.getAllowed_actions()));\n    \n                                /*for(Entry<String, List<String>> type: permittedAliasesIndex.getValue().getTypes(-).entrySet()) {\n                                    TypePerm typePerm = new TypePerm(type.getKey());\n                                    final List<String> perms = type.getValue();\n                                    typePerm.addPerms(agr.resolvedActions(perms));\n                                    _indexPattern.addTypePerms(typePerm);\n                                }*/\n    \n                                _securityRole.addIndexPattern(_indexPattern);\n                            \n                            }\n\n                        }\n            \n                            \n                        return _securityRole.build();\n                }\n            });\n\n            futures.add(future);\n        }\n\n        execs.shutdown();\n        try {\n            execs.awaitTermination(30, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Thread interrupted (1) while loading roles\");\n            return null;\n        }\n\n        try {\n            SecurityRoles _securityRoles = new SecurityRoles(futures.size());\n            for (Future<SecurityRole> future : futures) {\n                _securityRoles.addSecurityRole(future.get());\n            }\n\n            return _securityRoles;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.error(\"Thread interrupted (2) while loading roles\");\n            return null;\n        } catch (ExecutionException e) {\n            log.error(\"Error while updating roles: {}\", e.getCause(), e.getCause());\n            throw ExceptionsHelper.convertToOpenSearchException(e);\n        }\n    }\n\n\n    //beans\n\n    public static class SecurityRoles implements org.opensearch.security.securityconf.SecurityRoles {\n\n        protected final Logger log = LogManager.getLogger(this.getClass());\n\n        final Set<SecurityRole> roles;\n\n        private SecurityRoles(int roleCount) {\n            roles = new HashSet<>(roleCount);\n        }\n\n        private SecurityRoles addSecurityRole(SecurityRole securityRole) {\n            if (securityRole != null) {\n                this.roles.add(securityRole);\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((roles == null) ? 0 : roles.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            SecurityRoles other = (SecurityRoles) obj;\n            if (roles == null) {\n                if (other.roles != null)\n                    return false;\n            } else if (!roles.equals(other.roles))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return \"roles=\" + roles;\n        }\n\n        public Set<SecurityRole> getRoles() {\n            return Collections.unmodifiableSet(roles);\n        }\n        \n        public Set<String> getRoleNames() {\n            return getRoles().stream().map(r -> r.getName()).collect(Collectors.toSet());\n        }\n\n        public SecurityRoles filter(Set<String> keep) {\n            final SecurityRoles retVal = new SecurityRoles(roles.size());\n            for (SecurityRole sr : roles) {\n                if (keep.contains(sr.getName())) {\n                    retVal.addSecurityRole(sr);\n                }\n            }\n            return retVal;\n        }\n\n\n        @Override\n        public EvaluatedDlsFlsConfig getDlsFls(User user, boolean dfmEmptyOverwritesAll, IndexNameExpressionResolver resolver, ClusterService cs,\n                NamedXContentRegistry namedXContentRegistry) {\n\n\n            if (!containsDlsFlsConfig()) {\n                if(log.isDebugEnabled()) {\n                    log.debug(\"No fls or dls found for {} in {} security roles\", user, roles.size());\n                }\n\n                return EvaluatedDlsFlsConfig.EMPTY;\n            }\n        \t\n            Map<String, Set<String>> dlsQueriesByIndex = new HashMap<String, Set<String>>();            \n            Map<String, Set<String>> flsFields = new HashMap<String, Set<String>>();\n            Map<String, Set<String>> maskedFieldsMap = new HashMap<String, Set<String>>();\n\n            // we capture all concrete indices that do not have any\n            // DLS/FLS/Masked Fields restrictions. If the dfm_empty_overwrites_all\n            // switch is enabled, this trumps any restrictions on those indices\n            // that may be imposed by other roles.\n            Set<String> noDlsConcreteIndices = new HashSet<>();\n            Set<String> noFlsConcreteIndices = new HashSet<>();\n            Set<String> noMaskedFieldConcreteIndices = new HashSet<>();\n                        \n            for (SecurityRole role : roles) {\n                for (IndexPattern ip : role.getIpatterns()) {\n\t\t\t\t\tfinal Set<String> concreteIndices = ip.concreteIndexNames(user, resolver, cs);\n\t\t\t\t\tString dls = ip.getDlsQuery(user);\n\n\t\t\t\t\tif (dls != null && dls.length() > 0) {\n\n\t\t\t\t\t\tfor (String concreteIndex : concreteIndices) {\n\t\t\t\t\t\t\tdlsQueriesByIndex.computeIfAbsent(concreteIndex, (key) -> new HashSet<String>()).add(dls);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (dfmEmptyOverwritesAll) {\n\t\t\t\t\t    noDlsConcreteIndices.addAll(concreteIndices);\n\t\t\t\t\t}\n\n                    Set<String> fls = ip.getFls();\n\n                    if (fls != null && fls.size() > 0) {\n\n                        for (String concreteIndex : concreteIndices) {\n                            if (flsFields.containsKey(concreteIndex)) {\n                                flsFields.get(concreteIndex).addAll(Sets.newHashSet(fls));\n                            } else {\n                                flsFields.put(concreteIndex, new HashSet<String>());\n                                flsFields.get(concreteIndex).addAll(Sets.newHashSet(fls));\n                            }\n                        }\n                    } else if (dfmEmptyOverwritesAll) {\n                        noFlsConcreteIndices.addAll(concreteIndices);\n                    }\n                    \n                    Set<String> maskedFields = ip.getMaskedFields();\n\n                    if (maskedFields != null && maskedFields.size() > 0) {\n\n                        for (String concreteIndex : concreteIndices) {                            \n                            if (maskedFieldsMap.containsKey(concreteIndex)) {\n                                maskedFieldsMap.get(concreteIndex).addAll(Sets.newHashSet(maskedFields));\n                            } else {\n                                maskedFieldsMap.put(concreteIndex, new HashSet<String>());\n                                maskedFieldsMap.get(concreteIndex).addAll(Sets.newHashSet(maskedFields));\n                            }\n                        }\n                    } else if (dfmEmptyOverwritesAll) {\n                        noMaskedFieldConcreteIndices.addAll(concreteIndices);\n                    }\n                }\n            }\n            if (dfmEmptyOverwritesAll) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Index patterns with no dls queries attached: {} - They will be removed from {}\", noDlsConcreteIndices,\n                            dlsQueriesByIndex.keySet());\n                    log.debug(\"Index patterns with no fls fields attached: {} - They will be removed from {}\", noFlsConcreteIndices,\n                            flsFields.keySet());\n                    log.debug(\"Index patterns with no masked fields attached: {} - They will be removed from {}\", noMaskedFieldConcreteIndices,\n                            maskedFieldsMap.keySet());\n                }\n                // removing the indices that do not have D/M/F restrictions\n                // from the keySet will also modify the underlying map\n                dlsQueriesByIndex.keySet().removeAll(noDlsConcreteIndices);\n                flsFields.keySet().removeAll(noFlsConcreteIndices);\n                maskedFieldsMap.keySet().removeAll(noMaskedFieldConcreteIndices);\n            }\n\n            return new EvaluatedDlsFlsConfig(dlsQueriesByIndex, flsFields, maskedFieldsMap);\n        }\n\n\n      //opensearchDashboards special only, terms eval\n        public Set<String> getAllPermittedIndicesForDashboards(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            Set<String> retVal = new HashSet<>();\n            for (SecurityRole sr : roles) {\n                retVal.addAll(sr.getAllResolvedPermittedIndices(Resolved._LOCAL_ALL, user, actions, resolver, cs));\n                retVal.addAll(resolved.getRemoteIndices());\n            }\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        //dnfof only\n        public Set<String> reduce(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            Set<String> retVal = new HashSet<>();\n            for (SecurityRole sr : roles) {\n                retVal.addAll(sr.getAllResolvedPermittedIndices(resolved, user, actions, resolver, cs));\n            }\n            if (log.isDebugEnabled()) {\n                log.debug(\"Reduced requested resolved indices {} to permitted indices {}.\", resolved, retVal.toString());\n            }\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        //return true on success\n        public boolean get(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver, ClusterService cs) {\n            for (SecurityRole sr : roles) {\n                if (ConfigModelV7.impliesTypePerm(sr.getIpatterns(), resolved, user, actions, resolver, cs)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        public boolean impliesClusterPermissionPermission(String action) {\n            return roles.stream().filter(r -> r.impliesClusterPermission(action)).count() > 0;\n        }\n\n        //rolespan\n        public boolean impliesTypePermGlobal(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver,\n                ClusterService cs) {\n            Set<IndexPattern> ipatterns = new HashSet<ConfigModelV7.IndexPattern>();\n            roles.stream().forEach(p -> ipatterns.addAll(p.getIpatterns()));\n            return ConfigModelV7.impliesTypePerm(ipatterns, resolved, user, actions, resolver, cs);\n        }\n        \n        private boolean containsDlsFlsConfig() {\n            for (SecurityRole role : roles) {\n                for (IndexPattern ip : role.getIpatterns()) {\n                    if (ip.hasDlsQuery() || ip.hasFlsFields() || ip.hasMaskedFields()) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n\n    public static class SecurityRole {\n        private final String name;\n        private final Set<IndexPattern> ipatterns;\n        private final WildcardMatcher clusterPerms;\n\n        public static final class Builder {\n            private final String name;\n            private final Set<String> clusterPerms = new HashSet<>();\n            private final Set<IndexPattern> ipatterns = new HashSet<>();\n            public Builder(String name) {\n                this.name = Objects.requireNonNull(name);\n            }\n\n            public Builder addIndexPattern(IndexPattern indexPattern) {\n                this.ipatterns.add(indexPattern);\n                return this;\n            }\n\n            public Builder addClusterPerms(Collection<String> clusterPerms) {\n                if (clusterPerms != null) {\n                    this.clusterPerms.addAll(clusterPerms);\n                }\n                return this;\n            }\n\n\n            public SecurityRole build() {\n                return new SecurityRole(name, ipatterns, WildcardMatcher.from(clusterPerms));\n            }\n        }\n\n        private SecurityRole(String name, Set<IndexPattern> ipatterns, WildcardMatcher clusterPerms) {\n            this.name = Objects.requireNonNull(name);\n            this.ipatterns = ipatterns;\n            this.clusterPerms = clusterPerms;\n        }\n\n        private boolean impliesClusterPermission(String action) {\n            return clusterPerms.test(action);\n        }\n\n        //get indices which are permitted for the given types and actions\n        //dnfof + opensearchDashboards special only\n        private Set<String> getAllResolvedPermittedIndices(Resolved resolved, User user, String[] actions, IndexNameExpressionResolver resolver,\n                ClusterService cs) {\n\n            final Set<String> retVal = new HashSet<>();\n            for (IndexPattern p : ipatterns) {\n                //what if we cannot resolve one (for create purposes)\n                final boolean patternMatch = p.getPerms().matchAll(actions);\n                \n//                final Set<TypePerm> tperms = p.getTypePerms();\n//                for (TypePerm tp : tperms) {\n//                    if (WildcardMatcher.matchAny(tp.typePattern, resolved.getTypes(-).toArray(new String[0]))) {\n//                        patternMatch = WildcardMatcher.matchAll(tp.perms.toArray(new String[0]), actions);\n//                    }\n//                }\n                if (patternMatch) {\n                    //resolved but can contain patterns for nonexistent indices\n                    final WildcardMatcher permitted = WildcardMatcher.from(p.attemptResolveIndexNames(user, resolver, cs)); //maybe they do not exist\n                    final Set<String> res = new HashSet<>();\n                    if (!resolved.isLocalAll() && !resolved.getAllIndices().contains(\"*\") && !resolved.getAllIndices().contains(\"_all\")) {\n                        //resolved but can contain patterns for nonexistent indices\n                        resolved.getAllIndices().stream().filter(permitted).forEach(res::add);\n                    } else {\n                        //we want all indices so just return what's permitted\n\n                        //#557\n                        //final String[] allIndices = resolver.concreteIndexNames(cs.state(), IndicesOptions.lenientExpandOpen(), \"*\");\n                        final String[] allIndices = cs.state().metadata().getConcreteAllOpenIndices();\n                        Arrays.stream(allIndices).filter(permitted).forEach(res::add);\n                    }\n                    retVal.addAll(res);\n                }\n            }\n\n            //all that we want and all thats permitted of them\n            return Collections.unmodifiableSet(retVal);\n        }\n\n        /*private SecurityRole addTenant(Tenant tenant) {\n            if (tenant != null) {\n                this.tenants.add(tenant);\n            }\n            return this;\n        }*/\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((clusterPerms == null) ? 0 : clusterPerms.hashCode());\n            result = prime * result + ((ipatterns == null) ? 0 : ipatterns.hashCode());\n            result = prime * result + ((name == null) ? 0 : name.hashCode());\n            //result = prime * result + ((tenants == null) ? 0 : tenants.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            SecurityRole other = (SecurityRole) obj;\n            if (clusterPerms == null) {\n                if (other.clusterPerms != null)\n                    return false;\n            } else if (!clusterPerms.equals(other.clusterPerms))\n                return false;\n            if (ipatterns == null) {\n                if (other.ipatterns != null)\n                    return false;\n            } else if (!ipatterns.equals(other.ipatterns))\n                return false;\n            if (name == null) {\n                if (other.name != null)\n                    return false;\n            } else if (!name.equals(other.name))\n                return false;\n//            if (tenants == null) {\n//                if (other.tenants != null)\n//                    return false;\n//            } else if (!tenants.equals(other.tenants))\n//                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"  \" + name + System.lineSeparator()\n                    + \"    ipatterns=\" + ipatterns + System.lineSeparator() + \"    clusterPerms=\" + clusterPerms;\n        }\n\n        //public Set<Tenant> getTenants(User user) {\n        //    //TODO filter out user tenants\n        //    return Collections.unmodifiableSet(tenants);\n        //}\n\n        public Set<IndexPattern> getIpatterns() {\n            return Collections.unmodifiableSet(ipatterns);\n        }\n\n        public String getName() {\n            return name;\n        }\n\n    }\n\n    //sg roles\n    public static class IndexPattern {\n        private final String indexPattern;\n        private String dlsQuery;\n        private final Set<String> fls = new HashSet<>();\n        private final Set<String> maskedFields = new HashSet<>();\n        private final Set<String> perms = new HashSet<>();\n\n        public IndexPattern(String indexPattern) {\n            super();\n            this.indexPattern = Objects.requireNonNull(indexPattern);\n        }\n\n        public IndexPattern addFlsFields(List<String> flsFields) {\n            if (flsFields != null) {\n                this.fls.addAll(flsFields);\n            }\n            return this;\n        }\n\n        public IndexPattern addMaskedFields(List<String> maskedFields) {\n            if (maskedFields != null) {\n                this.maskedFields.addAll(maskedFields);\n            }\n            return this;\n        }\n\n        public IndexPattern addPerm(Set<String> perms) {\n            if (perms != null) {\n                this.perms.addAll(perms);\n            }\n            return this;\n        }\n\n        public IndexPattern setDlsQuery(String dlsQuery) {\n            if (dlsQuery != null) {\n                this.dlsQuery = dlsQuery;\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((dlsQuery == null) ? 0 : dlsQuery.hashCode());\n            result = prime * result + ((fls == null) ? 0 : fls.hashCode());\n            result = prime * result + ((maskedFields == null) ? 0 : maskedFields.hashCode());\n            result = prime * result + ((indexPattern == null) ? 0 : indexPattern.hashCode());\n            result = prime * result + ((perms == null) ? 0 : perms.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            IndexPattern other = (IndexPattern) obj;\n            if (dlsQuery == null) {\n                if (other.dlsQuery != null)\n                    return false;\n            } else if (!dlsQuery.equals(other.dlsQuery))\n                return false;\n            if (fls == null) {\n                if (other.fls != null)\n                    return false;\n            } else if (!fls.equals(other.fls))\n                return false;\n            if (maskedFields == null) {\n                if (other.maskedFields != null)\n                    return false;\n            } else if (!maskedFields.equals(other.maskedFields))\n                return false;\n            if (indexPattern == null) {\n                if (other.indexPattern != null)\n                    return false;\n            } else if (!indexPattern.equals(other.indexPattern))\n                return false;\n            if (perms == null) {\n                if (other.perms != null)\n                    return false;\n            } else if (!perms.equals(other.perms))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"        indexPattern=\" + indexPattern + System.lineSeparator() + \"          dlsQuery=\" + dlsQuery\n                    + System.lineSeparator() + \"          fls=\" + fls + System.lineSeparator() + \"          perms=\" + perms;\n        }\n\n        public String getUnresolvedIndexPattern(User user) {\n            return replaceProperties(indexPattern, user);\n        }\n\n        /** Finds the indices accessible to the user and resolves them to concrete names */\n        public Set<String> concreteIndexNames(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs) {\n            return getResolvedIndexPattern(user, resolver, cs, false);\n        }\n\n        /** Finds the indices accessible to the user and attempts to resolve them to names, also includes any unresolved names */\n        public Set<String> attemptResolveIndexNames(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs) {\n            return getResolvedIndexPattern(user, resolver, cs, true);\n        }\n\n        public Set<String> getResolvedIndexPattern(final User user, final IndexNameExpressionResolver resolver, final ClusterService cs, final boolean appendUnresolved) {\n            final String unresolved = getUnresolvedIndexPattern(user);\n            final ImmutableSet.Builder<String> resolvedIndices = new ImmutableSet.Builder<>();\n\n            final WildcardMatcher matcher = WildcardMatcher.from(unresolved);\n            boolean includeDataStreams = true;\n            if (!(matcher instanceof WildcardMatcher.Exact)) {\n                final String[] aliasesAndDataStreamsForPermittedPattern = cs.state().getMetadata().getIndicesLookup().entrySet().stream()\n                        .filter(e -> (e.getValue().getType() == ALIAS) || (e.getValue().getType() == DATA_STREAM))\n                        .filter(e -> matcher.test(e.getKey()))\n                        .map(e -> e.getKey())\n                        .toArray(String[]::new);\n                if (aliasesAndDataStreamsForPermittedPattern.length > 0) {\n                    final String[] resolvedAliasesAndDataStreamIndices = resolver.concreteIndexNames(cs.state(),\n                            IndicesOptions.lenientExpandOpen(), includeDataStreams, aliasesAndDataStreamsForPermittedPattern);\n                    resolvedIndices.addAll(Arrays.asList(resolvedAliasesAndDataStreamIndices));\n                }\n            }\n\n            if (Strings.isNotBlank(unresolved)) {\n                final String[] resolvedIndicesFromPattern = resolver.concreteIndexNames(cs.state(), IndicesOptions.lenientExpandOpen(), includeDataStreams, unresolved);\n                resolvedIndices.addAll(Arrays.asList(resolvedIndicesFromPattern));\n            }\n\n            if (appendUnresolved || resolvedIndices.build().isEmpty()) {\n                resolvedIndices.add(unresolved);\n            }\n            return resolvedIndices.build();\n        }\n\n        public String getDlsQuery(User user) {\n            return replaceProperties(dlsQuery, user);\n        }\n\n        public boolean hasDlsQuery() {\n            return dlsQuery != null && !dlsQuery.isEmpty();\n        }\n        \n        public Set<String> getFls() {\n            return Collections.unmodifiableSet(fls);\n        }\n\n        public boolean hasFlsFields() {\n            return fls != null && !fls.isEmpty();\n        }\n        \n        public Set<String> getMaskedFields() {\n            return Collections.unmodifiableSet(maskedFields);\n        }\n\n        public boolean hasMaskedFields() {\n            return maskedFields != null && !maskedFields.isEmpty();\n        }\n        \n        public WildcardMatcher getPerms() {\n            return WildcardMatcher.from(perms);\n        }\n\n        \n    }\n\n    /*public static class TypePerm {\n        private final String typePattern;\n        private final Set<String> perms = new HashSet<>();\n\n        private TypePerm(String typePattern) {\n            super();\n            this.typePattern = Objects.requireNonNull(typePattern);\n            /*if(IGNORED_TYPES.contains(typePattern)) {\n                throw new RuntimeException(\"typepattern '\"+typePattern+\"' not allowed\");\n            }\n        }\n\n        private TypePerm addPerms(Collection<String> perms) {\n            if (perms != null) {\n                this.perms.addAll(perms);\n            }\n            return this;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + ((perms == null) ? 0 : perms.hashCode());\n            result = prime * result + ((typePattern == null) ? 0 : typePattern.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            TypePerm other = (TypePerm) obj;\n            if (perms == null) {\n                if (other.perms != null)\n                    return false;\n            } else if (!perms.equals(other.perms))\n                return false;\n            if (typePattern == null) {\n                if (other.typePattern != null)\n                    return false;\n            } else if (!typePattern.equals(other.typePattern))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"             typePattern=\" + typePattern + System.lineSeparator() + \"             perms=\" + perms;\n        }\n\n        public String getTypePattern() {\n            return typePattern;\n        }\n\n        public Set<String> getPerms() {\n            return Collections.unmodifiableSet(perms);\n        }\n\n    }*/\n\n    public static class Tenant {\n        private final String tenant;\n        private final boolean readWrite;\n\n        private Tenant(String tenant, boolean readWrite) {\n            super();\n            this.tenant = tenant;\n            this.readWrite = readWrite;\n        }\n\n        public String getTenant() {\n            return tenant;\n        }\n\n        public boolean isReadWrite() {\n            return readWrite;\n        }\n\n        @Override\n        public int hashCode() {\n            final int prime = 31;\n            int result = 1;\n            result = prime * result + (readWrite ? 1231 : 1237);\n            result = prime * result + ((tenant == null) ? 0 : tenant.hashCode());\n            return result;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)\n                return true;\n            if (obj == null)\n                return false;\n            if (getClass() != obj.getClass())\n                return false;\n            Tenant other = (Tenant) obj;\n            if (readWrite != other.readWrite)\n                return false;\n            if (tenant == null) {\n                if (other.tenant != null)\n                    return false;\n            } else if (!tenant.equals(other.tenant))\n                return false;\n            return true;\n        }\n\n        @Override\n        public String toString() {\n            return System.lineSeparator() + \"                tenant=\" + tenant + System.lineSeparator() + \"                readWrite=\" + readWrite;\n        }\n    }\n\n    private static String replaceProperties(String orig, User user) {\n\n        if (user == null || orig == null) {\n            return orig;\n        }\n\n        orig = orig.replace(\"${user.name}\", user.getName()).replace(\"${user_name}\", user.getName());\n        orig = replaceRoles(orig, user);\n        orig = replaceSecurityRoles(orig, user);\n        for (Entry<String, String> entry : user.getCustomAttributesMap().entrySet()) {\n            if (entry == null || entry.getKey() == null || entry.getValue() == null) {\n                continue;\n            }\n            orig = orig.replace(\"${\" + entry.getKey() + \"}\", entry.getValue());\n            orig = orig.replace(\"${\" + entry.getKey().replace('.', '_') + \"}\", entry.getValue());\n        }\n        return orig;\n    }\n\n    private static String replaceRoles(final String orig, final User user) {\n        String retVal = orig;\n        if (orig.contains(\"${user.roles}\") || orig.contains(\"${user_roles}\")) {\n            final String commaSeparatedRoles = toQuotedCommaSeparatedString(user.getRoles());\n            retVal = orig.replace(\"${user.roles}\", commaSeparatedRoles).replace(\"${user_roles}\", commaSeparatedRoles);\n        }\n        return retVal;\n    }\n\n    private static String replaceSecurityRoles(final String orig, final User user) {\n        String retVal = orig;\n        if (orig.contains(\"${user.securityRoles}\") || orig.contains(\"${user_securityRoles}\")) {\n            final String commaSeparatedRoles = toQuotedCommaSeparatedString(user.getSecurityRoles());\n            retVal = orig.replace(\"${user.securityRoles}\", commaSeparatedRoles).replace(\"${user_securityRoles}\", commaSeparatedRoles);\n        }\n        return retVal;\n    }\n\n    private static String toQuotedCommaSeparatedString(final Set<String> roles) {\n        return Joiner.on(',').join(Iterables.transform(roles, s -> {\n            return new StringBuilder(s.length() + 2).append('\"').append(s).append('\"').toString();\n        }));\n    }\n\n    private static final class IndexMatcherAndPermissions {\n        private WildcardMatcher matcher;\n        private WildcardMatcher perms;\n        public IndexMatcherAndPermissions(Set<String> patterns, Set<String> perms) {\n            this.matcher = WildcardMatcher.from(patterns);\n            this.perms = WildcardMatcher.from(perms);\n        }\n\n        public boolean matches(String index, String action) {\n            return matcher.test(index) && perms.test(action);\n        }\n    }\n\n    private static boolean impliesTypePerm(Set<IndexPattern> ipatterns, Resolved resolved, User user, String[] requestedActions,\n                                           IndexNameExpressionResolver resolver, ClusterService cs) {\n        Set<String> resolvedRequestedIndices = resolved.getAllIndices();\n        IndexMatcherAndPermissions[] indexMatcherAndPermissions;\n        if (resolved.isLocalAll()) {\n            indexMatcherAndPermissions = ipatterns\n                    .stream()\n                    .filter(indexPattern -> \"*\".equals(indexPattern.getUnresolvedIndexPattern(user)))\n                    .map(p -> new IndexMatcherAndPermissions(p.attemptResolveIndexNames(user, resolver, cs), p.perms))\n                    .toArray(IndexMatcherAndPermissions[]::new);\n        } else {\n            indexMatcherAndPermissions = ipatterns\n                    .stream()\n                    .map(p -> new IndexMatcherAndPermissions(p.attemptResolveIndexNames(user, resolver, cs), p.perms))\n                    .toArray(IndexMatcherAndPermissions[]::new);\n        }\n        return resolvedRequestedIndices\n                .stream()\n                .allMatch(index ->\n                        Arrays.stream(requestedActions).allMatch(action ->\n                                Arrays.stream(indexMatcherAndPermissions).anyMatch(ipap ->\n                                        ipap.matches(index, action)\n                                )\n                        )\n                );\n    }\n    \n    private class TenantHolder {\n\n        private SetMultimap<String, Tuple<String, Boolean>> tenantsMM = null;\n\n        public TenantHolder(SecurityDynamicConfiguration<RoleV7> roles, SecurityDynamicConfiguration<TenantV7> definedTenants) {\n            final Set<Future<Tuple<String, Set<Tuple<String, Boolean>>>>> futures = new HashSet<>(roles.getCEntries().size());\n\n            final ExecutorService execs = Executors.newFixedThreadPool(10);\n\n            for(Entry<String, RoleV7> securityRole: roles.getCEntries().entrySet()) {\n\n                if(securityRole.getValue() == null) {\n                    continue;\n                }\n\n                Future<Tuple<String, Set<Tuple<String, Boolean>>>> future = execs.submit(new Callable<Tuple<String, Set<Tuple<String, Boolean>>>>() {\n                    @Override\n                    public Tuple<String, Set<Tuple<String, Boolean>>> call() throws Exception {\n                        final Set<Tuple<String, Boolean>> tuples = new HashSet<>();\n                        final List<RoleV7.Tenant> tenants = securityRole.getValue().getTenant_permissions();\n                        if (tenants != null) {\n                            \n                            for (RoleV7.Tenant tenant : tenants) {\n\n                                // find Wildcarded tenant patterns\n                                List<String> matchingTenants = WildcardMatcher.from(tenant.getTenant_patterns()).getMatchAny(definedTenants.getCEntries().keySet(), Collectors.toList()) ;\n                                for(String matchingTenant: matchingTenants ) {\n                                    tuples.add(new Tuple<String, Boolean>(matchingTenant, agr.resolvedActions(tenant.getAllowed_actions()).contains(\"kibana:saved_objects/*/write\")));\n                                }\n                                // find parameter substitution specified tenant\n                                Pattern parameterPattern = Pattern.compile(\"^\\\\$\\\\{attr\");\n                                List<String> matchingParameterTenantList = tenant.getTenant_patterns().stream().filter(parameterPattern.asPredicate()).collect(Collectors.toList());\n                                for(String matchingParameterTenant : matchingParameterTenantList ) {\n                                    tuples.add(new Tuple<String, Boolean>(matchingParameterTenant,agr.resolvedActions(tenant.getAllowed_actions()).contains(\"kibana:saved_objects/*/write\"))) ;\n                                }\n                            }\n                        }\n\n                        return new Tuple<String, Set<Tuple<String, Boolean>>>(securityRole.getKey(), tuples);\n                    }\n                });\n\n                futures.add(future);\n\n            }\n\n            execs.shutdown();\n            try {\n                execs.awaitTermination(30, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                log.error(\"Thread interrupted (1) while loading roles\");\n                return;\n            }\n\n            try {\n                final SetMultimap<String, Tuple<String, Boolean>> tenantsMM_ = SetMultimapBuilder.hashKeys(futures.size()).hashSetValues(16).build();\n\n                for (Future<Tuple<String, Set<Tuple<String, Boolean>>>> future : futures) {\n                    Tuple<String, Set<Tuple<String, Boolean>>> result = future.get();\n                    tenantsMM_.putAll(result.v1(), result.v2());\n                }\n\n                tenantsMM = tenantsMM_;\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                log.error(\"Thread interrupted (2) while loading roles\");\n                return;\n            } catch (ExecutionException e) {\n                log.error(\"Error while updating roles: {}\", e.getCause(), e.getCause());\n                throw ExceptionsHelper.convertToOpenSearchException(e);\n            }\n\n        }\n\n        public Map<String, Boolean> mapTenants(final User user, Set<String> roles) {\n\n            if (user == null || tenantsMM == null) {\n                return Collections.emptyMap();\n            }\n\n            final Map<String, Boolean> result = new HashMap<>(roles.size());\n            result.put(user.getName(), true);\n\n            tenantsMM.entries().stream().filter(e -> roles.contains(e.getKey())).filter(e -> !user.getName().equals(e.getValue().v1())).forEach(e -> {\n\n                // replaceProperties for tenant name because\n                // at this point e.getValue().v1() can be in this form : \"${attr.[internal|jwt|proxy|ldap].*}\"\n                // let's substitute it with the eventual value of the user's attribute\n                final String tenant = replaceProperties(e.getValue().v1(),user);\n                final boolean rw = e.getValue().v2();\n\n                if (rw || !result.containsKey(tenant)) { //RW outperforms RO\n\n                    // We want to make sure that we add a tenant that exists\n                    // Indeed, because we don't have control over what will be\n                    // passed on as values of users' attributes, we have to make\n                    // sure that we don't allow them to select tenants that do not exist.\n                    if(ConfigModelV7.this.tenants.getCEntries().containsKey(tenant)) {\n                        result.put(tenant, rw);\n                    }\n                }\n            });\n\n            Set<String> _roles = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);\n            _roles.addAll(roles);\n            if(!result.containsKey(\"global_tenant\") && (\n                    _roles.contains(\"kibana_user\")\n                    || _roles.contains(\"all_access\")\n                    )) {\n                result.put(\"global_tenant\", true);\n            }\n\n            return Collections.unmodifiableMap(result);\n        }\n    }\n\n    private class RoleMappingHolder {\n\n        private ListMultimap<String, String> users;\n        private ListMultimap<List<WildcardMatcher>, String> abars;\n        private ListMultimap<String, String> bars;\n        private ListMultimap<String, String> hosts;\n        private final String hostResolverMode;\n\n        private List<WildcardMatcher> userMatchers;\n        private List<WildcardMatcher> barMatchers;\n        private List<WildcardMatcher> hostMatchers;\n\n        private RoleMappingHolder(final SecurityDynamicConfiguration<RoleMappingsV7> rolemappings, final String hostResolverMode) {\n\n            this.hostResolverMode = hostResolverMode;\n            \n            if (roles != null) {\n\n                users = ArrayListMultimap.create();\n                abars = ArrayListMultimap.create();\n                bars = ArrayListMultimap.create();\n                hosts = ArrayListMultimap.create();\n\n                for (final Entry<String, RoleMappingsV7> roleMap : rolemappings.getCEntries().entrySet()) {\n                    final String roleMapKey = roleMap.getKey();\n                    final RoleMappingsV7 roleMapValue = roleMap.getValue();\n\n                    for (String u : roleMapValue.getUsers()) {\n                        users.put(u, roleMapKey);\n                    }\n\n                    final Set<String> abar = new HashSet<>(roleMapValue.getAnd_backend_roles());\n\n                    if (!abar.isEmpty()) {\n                        abars.put(WildcardMatcher.matchers(abar), roleMapKey);\n                    }\n\n                    for (String bar : roleMapValue.getBackend_roles()) {\n                        bars.put(bar, roleMapKey);\n                    }\n\n                    for (String host : roleMapValue.getHosts()) {\n                        hosts.put(host, roleMapKey);\n                    }\n                }\n\n                userMatchers = WildcardMatcher.matchers(users.keySet());\n                barMatchers = WildcardMatcher.matchers(bars.keySet());\n                hostMatchers = WildcardMatcher.matchers(hosts.keySet());\n            }\n        }\n\n        private Set<String> map(final User user, final TransportAddress caller) {\n\n            if (user == null || users == null || abars == null || bars == null || hosts == null) {\n                return Collections.emptySet();\n            }\n\n            final Set<String> securityRoles = new HashSet<>(user.getSecurityRoles());\n\n            if (rolesMappingResolution == ConfigConstants.RolesMappingResolution.BOTH\n                    || rolesMappingResolution == ConfigConstants.RolesMappingResolution.BACKENDROLES_ONLY) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"Pass backendroles from {}\", user);\n                }\n                securityRoles.addAll(user.getRoles());\n            }\n\n            if (((rolesMappingResolution == ConfigConstants.RolesMappingResolution.BOTH\n                    || rolesMappingResolution == ConfigConstants.RolesMappingResolution.MAPPING_ONLY))) {\n\n                for (String p : WildcardMatcher.getAllMatchingPatterns(userMatchers, user.getName())) {\n                    securityRoles.addAll(users.get(p));\n                }\n                for (String p : WildcardMatcher.getAllMatchingPatterns(barMatchers, user.getRoles())) {\n                    securityRoles.addAll(bars.get(p));\n                }\n\n                for (List<WildcardMatcher> patterns : abars.keySet()) {\n                    if (patterns.stream().allMatch(p -> p.matchAny(user.getRoles()))) {\n                        securityRoles.addAll(abars.get(patterns));\n                    }\n                }\n\n                if (caller != null) {\n                    //IPV4 or IPv6 (compressed and without scope identifiers)\n                    final String ipAddress = caller.getAddress();\n\n                    for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, ipAddress)) {\n                        securityRoles.addAll(hosts.get(p));\n                    }\n\n                    if (caller.address() != null\n                            && (hostResolverMode.equalsIgnoreCase(\"ip-hostname\") || hostResolverMode.equalsIgnoreCase(\"ip-hostname-lookup\"))) {\n                        final String hostName = caller.address().getHostString();\n\n                        for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, hostName)) {\n                            securityRoles.addAll(hosts.get(p));\n                        }\n                    }\n\n                    if (caller.address() != null && hostResolverMode.equalsIgnoreCase(\"ip-hostname-lookup\")) {\n\n                        final String resolvedHostName = caller.address().getHostName();\n\n                        for (String p : WildcardMatcher.getAllMatchingPatterns(hostMatchers, resolvedHostName)) {\n                            securityRoles.addAll(hosts.get(p));\n                        }\n                    }\n                }\n            }\n\n            return Collections.unmodifiableSet(securityRoles);\n\n        }\n    }\n    \n    \n    \n    \n\n    public Map<String, Boolean> mapTenants(User user, Set<String> roles) {\n        return tenantHolder.mapTenants(user, roles);\n    }\n\n    public Set<String> mapSecurityRoles(User user, TransportAddress caller) {\n        return roleMappingHolder.map(user, caller);\n    }\n}\n", "/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n\npackage org.opensearch.security;\n\nimport org.apache.hc.core5.http.HttpStatus;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport org.opensearch.security.test.SingleClusterTest;\nimport org.opensearch.security.test.helper.rest.RestHelper;\nimport org.opensearch.security.test.helper.rest.RestHelper.HttpResponse;\n\n\npublic class DataStreamIntegrationTests extends SingleClusterTest {\n\n     final String bulkDocsBody =\n        \"{ \\\"create\\\" : {} }\" + System.lineSeparator() +\n        \"{ \\\"@timestamp\\\" : \\\"2099-03-08T11:04:05.000Z\\\", \\\"user\\\" : { \\\"id\\\" : \\\"vlb44hny\\\", \\\"name\\\": \\\"Sam\\\"}, \\\"message\\\" : \\\"Login attempt failed\\\" }\" + System.lineSeparator() +\n        \"{ \\\"create\\\" : {} }\" + System.lineSeparator() +\n        \"{ \\\"@timestamp\\\" : \\\"2099-03-08T11:04:05.000Z\\\", \\\"user\\\" : { \\\"id\\\" : \\\"8a4f500d\\\", \\\"name\\\": \\\"Dam\\\"}, \\\"message\\\" : \\\"Login successful\\\" }\" + System.lineSeparator() +\n        \"{ \\\"create\\\" : {} }\" + System.lineSeparator() +\n        \"{ \\\"@timestamp\\\" : \\\"2099-03-08T11:04:05.000Z\\\", \\\"user\\\" : { \\\"id\\\" : \\\"l7gk7f82\\\", \\\"name\\\": \\\"Pam\\\"}, \\\"message\\\" : \\\"Login attempt failed\\\" }\" + System.lineSeparator();\n\n    final String searchQuery1 = \"{ \\\"seq_no_primary_term\\\" : true, \\\"query\\\": { \\\"match\\\": { \\\"user.id\\\": \\\"8a4f500d\\\"}}}\";\n    final String searchQuery2 = \"{ \\\"seq_no_primary_term\\\" : true, \\\"query\\\": { \\\"match\\\": { \\\"user.id\\\": \\\"l7gk7f82\\\"}}}\";\n\n    public String getIndexTemplateBody() {\n        return  \"{\\\"index_patterns\\\": [ \\\"my-data-stream*\\\" ], \\\"data_stream\\\": { }, \\\"priority\\\": 200, \\\"template\\\": {\\\"settings\\\": { } } }\";\n    }\n\n    public void createSampleDataStreams(RestHelper rh) throws Exception{\n        // Valid index-template is required to create data-streams\n        rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n\n        rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream21\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream22\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream23\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n    }\n\n    @Test\n    public void testCreateDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        HttpResponse response;\n\n        response = rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_index_template/my-data-stream-template\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream11\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream22\", getIndexTemplateBody(), encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePutRequest(\"/_data_stream/my-data-stream33\", getIndexTemplateBody(), encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testGetDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream33\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testDeleteDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream33\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream21,my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeDeleteRequest(\"/_data_stream/my-data-stream*\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testDataStreamStats() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream11/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream22/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream33/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22/_stats\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream2*/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream21,my-data-stream22/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"/_data_stream/my-data-stream*/_stats\", encodeBasicHeader(\"ds3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testGetIndexOnBackingIndicesOfDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        response = rh.executeGetRequest(\"my-data-stream11\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream22\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream11-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream22-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream21-000001,.ds-my-data-stream22-000001\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream2*\", encodeBasicHeader(\"ds0\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream11\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\"my-data-stream22\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream11-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream22-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream21-000001,.ds-my-data-stream22-000001\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n\n        response = rh.executeGetRequest(\".ds-my-data-stream2*\", encodeBasicHeader(\"ds2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n    }\n\n    @Test\n    public void testDocumentLevelSecurityOnDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        rh.executePutRequest(\"/my-data-stream11/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n        rh.executePutRequest(\"/my-data-stream21/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n\n        response = rh.executePostRequest(\"/my-data-stream11/_search\", searchQuery1, encodeBasicHeader(\"ds_dls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/my-data-stream22/_search\", searchQuery1, encodeBasicHeader(\"ds_dls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery1, encodeBasicHeader(\"ds_dls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_dls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertFalse(response.getBody().contains(\"l7gk7f82\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":0,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream22-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_dls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":2,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/.ds-my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_dls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"8a4f500d\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":2,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery2, encodeBasicHeader(\"ds_dls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertFalse(response.getBody().contains(\"l7gk7f82\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":0,\\\"relation\\\":\\\"eq\\\"}\"));\n\n        response = rh.executePostRequest(\"/.ds-my-*/_search\", searchQuery2, encodeBasicHeader(\"ds_dls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertFalse(response.getBody().contains(\"l7gk7f82\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":0,\\\"relation\\\":\\\"eq\\\"}\"));\n    }\n\n    @Test\n    public void testFLSOnBackingIndicesOfDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        rh.executePutRequest(\"/my-data-stream11/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n        rh.executePutRequest(\"/my-data-stream21/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n\n        response = rh.executePostRequest(\"/my-data-stream11/_search\", searchQuery1, encodeBasicHeader(\"ds_fls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery1, encodeBasicHeader(\"ds_fls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_fls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"l7gk7f82\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"Login attempt failed\\\"\"));\n\n        response = rh.executePostRequest(\"/my-data-stream22/_search\", searchQuery1, encodeBasicHeader(\"ds_fls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream22-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_fls1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":2,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_fls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery2, encodeBasicHeader(\"ds_fls3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"l7gk7f82\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Pam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n    }\n\n    @Test\n    public void testFieldMaskingOnDataStream() throws Exception {\n\n        setup();\n        RestHelper rh = nonSslRestHelper();\n        createSampleDataStreams(rh);\n        HttpResponse response;\n\n        rh.executePutRequest(\"/my-data-stream11/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n        rh.executePutRequest(\"/my-data-stream21/_bulk?refresh=true\", bulkDocsBody, encodeBasicHeader(\"ds_admin\", \"nagilum\"));\n\n        response = rh.executePostRequest(\"/my-data-stream11/_search\", searchQuery1, encodeBasicHeader(\"ds_fm1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery1, encodeBasicHeader(\"ds_fm1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream11-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_fm1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"l7gk7f82\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Pam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login attempt failed\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/my-data-stream22/_search\", searchQuery1, encodeBasicHeader(\"ds_fm1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream22-000001/_search\", searchQuery2, encodeBasicHeader(\"ds_fm1\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream2*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":1,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/.ds-my-data-stream1*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm2\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_FORBIDDEN, response.getStatusCode());\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"hits\\\":{\\\"total\\\":{\\\"value\\\":2,\\\"relation\\\":\\\"eq\\\"}\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/.ds-my-*/_search\", searchQuery1, encodeBasicHeader(\"ds_fm3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"8a4f500d\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"Dam\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login successful\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n\n        response = rh.executePostRequest(\"/my-*/_search\", searchQuery2, encodeBasicHeader(\"ds_fm3\", \"nagilum\"));\n        Assert.assertEquals(HttpStatus.SC_OK, response.getStatusCode());\n        Assert.assertTrue(response.getBody().contains(\"\\\"id\\\":\\\"l7gk7f82\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"name\\\":\\\"Pam\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"name\\\":\\\"\"));\n        Assert.assertFalse(response.getBody().contains(\"\\\"message\\\":\\\"Login attempt failed\\\"\"));\n        Assert.assertTrue(response.getBody().contains(\"\\\"message\\\":\\\"\"));\n    }\n}\n", "---\n_meta:\n  type: \"internalusers\"\n  config_version: 2\nbug.99:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_c:\n  hash: \"$2a$04$jQcEXpODnTFoGDuA7DPdSevA84CuH/7MOYkb80M3XZIrH76YMWS9G\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"uc\"\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_b:\n  hash: \"$2a$04$idGSEpNOhFbyiRL6toGPT.orh7ENOEU8kAqwkRFaXWRdA6wVgyqUu\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"ub\"\n  attributes: {}\n  description: \"Migrated from v6\"\nsnapresuser:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_a:\n  hash: \"$2a$04$NDy7mGbRNrmPMh9nSnIB.OTMFkcioEd69A04ReSGkJDd7QHxnCcVC\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"ua\"\n  attributes: {}\n  description: \"Migrated from v6\"\nsarek:\n  hash: \"$2a$12$Ioo1uXmH.Nq/lS5dUVBEsePSmZ5pSIpVO/xKHaquU/Jvq97I7nAgG\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ncrusherw:\n  hash: \"$2a$12$61vXe3cXy32p0cjsW0Y/SeZa7kEVSWuQK0jg98D9d5zOGXfo5NgyC\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet_academy\"\n  attributes: {}\n  description: \"Migrated from v6\"\nkibanaserver:\n  hash: \"$2a$12$4AcgAt3xwOWadA5s5blL6ev39OXDNhmOesEoo33eZtrq2N0YrU3H.\"\n  reserved: true\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ntheindexadmin:\n  hash: \"$2a$12$P.QbiwOsnxgz7kLBT10F7u6GhY7//Keyz7Xwf7lNzskRxpo9.zxFS\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\naliastest:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nopendistro_security_logstash:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ntwitter:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nmindex12:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nspock:\n  hash: \"$2a$12$GI9JXffO3WUjTsU7Yy3E4.LBxC2ILo66Zg/rr79BpikSL2IIRezQa\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcan\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nknuddel:\n  hash: \"_imponly_\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes:\n    test1: test2\n  description: \"Migrated from v6\"\n557:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"557\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbaz:\n  hash: \"$2a$12$A41IxPXV1/Dx46C6i1ufGubv.p3qYX7xVcY46q33sylYbIqQVwTMu\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\npicard:\n  hash: \"$2a$12$wkY2BsRneCU5za1OPYlzsehQit6gu2vprVv/4jHiSEEBv2ThunaTS\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbug108:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nnagilum:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ncustattr:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes:\n    c1: \"v1\"\n    c2: \"v2\"\n    c3.c4.cd: \"test1\"\n    c4.c4.cd: \"test2\"\n    c5: null\n    null: \"abc\"\n  description: \"Migrated from v6\"\nrestoreuser:\n  hash: \"$2a$12$JU2QjYVTlI24Q/enEOpf2uTLCPGchN.eXWCsrBiieUcRoeh53NB0y\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nCN=spock,OU=client,O=client,L=Test,C=DE:\n  hash: \"_impersonation_only_\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcan\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nabc:\n  hash: \"$2a$12$bP0CO5d5nhmaTOj7mGteHugXQQ8jlSV0dxcl5//moZ1xnI.pVPXfe\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nkirk:\n  hash: \"$2a$12$xZOcnwYPYQ3zIadnlQIJ0eNhX1ngwMkTN.oMwkKxoGvDVPn4/6XtO\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\n\u00a7\u00c4\u00d6\u00dc\u00e4\u00f6\u00fc\u00df:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nccsresolv:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nitt1635:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"esb_1\"\n  - \"esb_3\"\n  - \"esb_5\"\n  attributes: {}\n  description: \"Migrated from v6\"\nrexclude:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_role01_role02_role03:\n  hash: \"$2a$12$6.4Y6L//xeKQ7t8YEG0s6OH4F4q9gMw0J8E0GjmUMNZeyIWu1IRWS\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"role01\"\n  - \"role02\"\n  - \"role03\"\n  attributes: {}\n  description: \"Migrated from v6\"\nunderscore:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\ndlsnoinvest:\n  hash: \"$2a$12$9Zr4IgoJRqK6xJq4xjoa6OZAnY4QOQ6xIhcCxeYoQtB/HriMkeJSC\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\naliasmngt:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"aliasmngt\"\n  attributes: {}\n  description: \"Migrated from v6\"\n'\"''+-,;_?*@<>!$%&/()=#':\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuserwithnopasswd:\n  hash: null\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nworf:\n  hash: \"$2a$12$A41IxPXV1/Dx46C6i1ufGubv.p3qYX7xVcY46q33sylYbIqQVwTMu\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nwriter:\n  hash: \"$2a$12$LZvbDVnegkTbEFTu9hHnWO4HIrdB9rGaKcEOID5n0VV4j58cnvyZ.\"\n  reserved: false\n  hidden: false\n  backend_roles: []\n  attributes: {}\n  description: \"Migrated from v6\"\nuser_role01:\n  hash: \"$2a$12$XrBfLQh2T8wIzpxE5vzhUOPjjGfONcD8UEjd5IT5KveG8ULZaj04.\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"role01\"\n  attributes: {}\n  description: \"Migrated from v6\"\nbulk:\n  hash: \"$2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"bulk\"\n  attributes: {}\n  description: \"Migrated from v6\"\nuserwithblankpasswd:\n  hash: \"\"\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  - \"starfleet\"\n  attributes: {}\n  description: \"Migrated from v6\"\nenv.replace@example.comp.com:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nstatic_role_user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nfoo_index:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nfoo_all:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nbulk_test_user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds0:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds3:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\npit-1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\npit-2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nall-pit:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_admin:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_dls1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_dls2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_dls3:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fls1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fls2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fls3:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fm1:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fm2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nds_fm3:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nhidden_test:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  opendistro_security_roles:\n  - hidden_test\nsem-user:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\nsem-user2:\n  hash: $2a$12$n5nubfWATfQjSYHiWtUyeOxMIxFInUHOAx8VMmGmxFNPGpaBmeB.m\n  #password is: nagilum\n", "---\n_meta:\n  type: \"roles\"\n  config_version: 2\nunittest_1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nrexclude:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"/(?!special|alsonotallowed)(\\\\S|\\\\s)*/\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nunderscore:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*abc_xyz_*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nshakespeare:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  - \"indices:admin/template/get\"\n  - \"indices:admin/exists\"\n  index_permissions:\n  - index_patterns:\n    - \"shakespeare\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n    - \"indices:data/write/bulk*\"\n    - \"indices:admin/validate/query*\"\n    - \"indices:admin/exists\"\n    - \"indices:admin/get*\"\n    - \"indices:admin/mappings/fields/get*\"\n  tenant_permissions: []\naliasmngt:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"logstash-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/aliases*\"\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\ntransport_client:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/liveness\"\n  index_permissions: []\n  tenant_permissions: []\nuser1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"alias1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nccsresolv:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?abc*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nuser2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"alias2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nrole_starfleet_captains:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor*\"\n  index_permissions:\n  - index_patterns:\n    - \"sf\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CRUD\"\n  - index_patterns:\n    - \"public\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CRUD\"\n  tenant_permissions: []\nrestore:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:admin/snapshot/restore\"\n  index_permissions:\n  - index_patterns:\n    - \"vulcangov_restore_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_restore_2a\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_restore_2*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n  - index_patterns:\n    - \"vulcangov_no_restore_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_no_restore_2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  - index_patterns:\n    - \"vulcangov_no_restore_3\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n  - index_patterns:\n    - \"vulcangov_no_restore_4\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/create\"\n  tenant_permissions: []\nbaz:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"foo*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"foo\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nkibana4:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search-\"\n    - \"indices:data/read/msearch\"\n    - \"indices:admin/get\"\n    - \"indices:admin/validate/query\"\n    - \"indices:admin/mappings/fields/get\"\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:data/write/delete\"\n    - \"indices:data/write/update\"\n    - \"indices:admin/mapping/put\"\n    - \"indices:data/read/get\"\n    - \"indices:admin/refresh\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\ndlsnoinvest:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"article\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \"investment\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \"company\"\n    dls: \"{\\\"term\\\" : {\\\"category_code\\\" : \\\"software\\\"}}\"\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nremote_ccs:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/shards/search_shards\"\n  tenant_permissions: []\nzdummy_all:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"admin_1\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"abcdef_2_2\"\n    allowed_actions:\n    - \"kibana_all_read\"\nmultiget:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:data/read/mget\"\n  index_permissions:\n  - index_patterns:\n    - \"mindex1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"mindex2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\npublic:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/main\"\n  index_permissions:\n  - index_patterns:\n    - \".notexistingindexcvnjl9809991\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nccsresolv1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?abc*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"xyz\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"*noexist\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nrole01_role02:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"role01_role02\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nkibana4_server:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/nodes/info\"\n  - \"cluster:monitor/health\"\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:data/write/delete\"\n    - \"indices:data/write/update\"\n    - \"indices:admin/mapping/put\"\n    - \"indices:data/read/get\"\n    - \"indices:admin/refresh\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/create\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\n557:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"/\\\\S*/\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nrole_starfleet:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor*\"\n  - \"indices:data/read/scroll\"\n  index_permissions:\n  - index_patterns:\n    - \"sf\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n    - \"indices:*\"\n  - index_patterns:\n    - \"pub*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\nopendistro_security_own_index:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"${user_name}\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\naliastest:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n  - index_patterns:\n    - \"calias-1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nadmin:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_ALL\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nua:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexa*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"permitnotexistentindex*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/field_caps\"\n  tenant_permissions: []\nflsdls:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: \"{\\\"term\\\" : {\\\"_type\\\" : \\\"legends\\\"}}\"\n    fls:\n    - \"fieldx\"\n    - \"field2.b\"\n    - \"field3.m.*\"\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nub:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexb\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nuc:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"indexc\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  - index_patterns:\n    - \"beats-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\ndummy:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"cluster:monitor/health\"\n  index_permissions: []\n  tenant_permissions: []\nattr:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"${attr_internal_c2}\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/*\"\n  tenant_permissions: []\nmindex3:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_3\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write*\"\n  tenant_permissions: []\nrole.with.dot:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"index.with.dot\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nmindex2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_2\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search\"\n  tenant_permissions: []\nmindex1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"mindex_1\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/search\"\n  tenant_permissions: []\nrole_klingons1:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/shards/search_shards\"\n  - index_patterns:\n    - \"klingonempire\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"kltentrw\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"kltentro\"\n    allowed_actions:\n    - \"kibana_all_read\"\nsnapres:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_MANAGE_SNAPSHOTS\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/index\"\n    - \"indices:admin/create\"\n  tenant_permissions: []\nrole_klingons2:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"klingonempire\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions:\n  - tenant_patterns:\n    - \"praxisrw\"\n    allowed_actions:\n    - \"kibana_all_write\"\n  - tenant_patterns:\n    - \"praxisro\"\n    allowed_actions:\n    - \"kibana_all_read\"\ntheindex_admin:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS\"\n  index_permissions:\n  - index_patterns:\n    - \"theindex\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\npower_user:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_MONITOR\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nremote_marvel_agent:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:admin/template/put\"\n  - \"indices:admin/template/get\"\n  index_permissions:\n  - index_patterns:\n    - \"?marvel-opensearch-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nopendistro_security_kibana_server:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_MONITOR\"\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS\"\n  - \"indices:admin/template*\"\n  - \"indices:data/read/scroll*\"\n  index_permissions:\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?kibana-6\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?kibana_*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"?tasks\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_INDICES_ALL\"\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:admin/aliases*\"\n  tenant_permissions: []\nopendistro_security_all_access:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  - index_patterns:\n    - \".notexistingindexcvnjl9809991\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"ALL\"\n  tenant_permissions: []\nmarvel_user:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"?marvel-opensearch-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  - index_patterns:\n    - \"?kibana\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/read/get\"\n    - \"indices:admin/validate/query\"\n    - \"indices:data/read/search\"\n    - \"indices:admin/mappings/fields/get\"\n    - \"indices:admin/exists\"\n    - \"indices:data/read/mget\"\n  tenant_permissions: []\nwriter:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:data/write/bulk*\"\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n    - \"OPENDISTRO_SECURITY_WRITE\"\n  tenant_permissions: []\nopendistro_security_logstash:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"indices:admin/template/get\"\n  - \"indices:admin/template/put\"\n  - \"indices:data/write*\"\n  index_permissions:\n  - index_patterns:\n    - \"logstash-*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"indices:data/write/*\"\n    - \"indices:data/read/*\"\n    - \"OPENDISTRO_SECURITY_CREATE_INDEX\"\n  tenant_permissions: []\nuser:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n  - index_patterns:\n    - \"*\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"OPENDISTRO_SECURITY_READ\"\n  tenant_permissions: []\ntwitter:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n  - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n  - index_patterns:\n    - \"twitter\"\n    - \"analytics\"\n    dls: null\n    fls: null\n    masked_fields: null\n    allowed_actions:\n    - \"*\"\n  tenant_permissions: []\nenv_test:\n  cluster_permissions:\n  - '*'\n  index_permissions:\n  - index_patterns:\n    - '${env.INDEXNAME1:-index1}'\n    - '${env.INDEXNAME2:-index2}'\n    - '${user_name}'\n    - '${env.INDEXNAME3}'\n    allowed_actions:\n    - \"*\"\nxyz_impsr:\n  cluster_permissions:\n    - \"*\"\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"ALL\"\nrole_foo_index:\n  cluster_permissions:\n    - '*'\n  index_permissions:\n    - index_patterns:\n        - foo-index\n      allowed_actions:\n        - indices:data/read/*\n        - indices:admin/*\n        - indices:monitor/*\nrole_foo_all:\n  cluster_permissions:\n    - '*'\n  index_permissions:\n    - index_patterns:\n        - 'foo-*'\n      allowed_actions:\n        - indices:data/read/*\n        - indices:admin/*\n        - indices:monitor/*\n\nxyz_sr:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\n# This role is hidden in rolesmapping\nxyz_sr_hidden:\n  reserved: false\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\nxyz_sr_reserved:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"OPENDISTRO_SECURITY_CLUSTER_COMPOSITE_OPS_RO\"\n  index_permissions:\n    - index_patterns:\n        - \"twitter\"\n        - \"analytics\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"*\"\n  tenant_permissions: []\n\nindex_template_perm:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"indices:admin/index_template/*\"\n\ndata_stream_0:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"*my-data-stream2*\"\n      allowed_actions:\n        - \"indices:admin/get\"\n\ndata_stream_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"indices:admin/index_template/put\" ]\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      allowed_actions:\n        - \"indices:admin/data_stream/get\"\n        - \"indices:admin/data_stream/create\"\n\ndata_stream_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream2*\"\n      allowed_actions:\n        - \"indices:admin/data_stream/get\"\n        - \"indices:admin/data_stream/create\"\n        - \"indices:monitor/data_stream/stats\"\n        - \"indices:admin/data_stream/delete\"\n        - \"indices:admin/get\"\n\ndata_stream_3:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"*\"\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      allowed_actions:\n        - \"DATASTREAM_ALL\"\n        - \"indices:data/write/index\"\n        - \"indices:data/write/bulk*\"\n\ndata_stream_admin:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions:\n    - \"*\"\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      allowed_actions:\n        - \"*\"\n\ndata_stream_dls_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream11\"\n      dls: \"{\\n  \\\"bool\\\": {\\n \\\"must\\\": {\\n \\\"match\\\": {\\n \\\"user.id\\\": \\\"8a4f500d\\\"\\n }\\n }\\n }\\n}\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_dls_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream2*\"\n      dls: \"{\\n  \\\"bool\\\": {\\n \\\"must\\\": {\\n \\\"match\\\": {\\n \\\"user.id\\\": \\\"8a4f500d\\\"\\n }\\n }\\n }\\n}\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_dls_3:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      dls: \"{\\n  \\\"bool\\\": {\\n \\\"must\\\": {\\n \\\"match\\\": {\\n \\\"user.id\\\": \\\"8a4f500d\\\"\\n }\\n }\\n }\\n}\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fls_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream11\"\n      fls:\n        - \"user.id\"\n        - \"message\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fls_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream2*\"\n      fls:\n        - \"user.id\"\n        - \"user.name\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fls_3:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      fls:\n        - \"~message\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fm_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream11\"\n      masked_fields:\n        - \"message\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fm_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream2*\"\n      masked_fields:\n        - \"message\"\n      allowed_actions:\n        - \"read\"\n\ndata_stream_fm_3:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: []\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream*\"\n      masked_fields:\n        - \"user.name\"\n        - \"message\"\n      allowed_actions:\n        - \"read\"\n\npoint_in_time_1:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"pit_1\"\n        - \"*my-data-stream11*\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\npoint_in_time_2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"my-data-stream21\"\n        - \"pit_2\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\npoint_in_time_all:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  index_permissions:\n    - index_patterns:\n        - \"*\"\n      dls: null\n      fls: null\n      masked_fields: null\n      allowed_actions:\n        - \"manage_point_in_time\"\n\nhidden_test:\n  cluster_permissions:\n  - SGS_CLUSTER_COMPOSITE_OPS\n  index_permissions:\n  - index_patterns:\n    - hidden_test_not_hidden\n    allowed_actions:\n    - \"*\"\n\nsem-role:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"cluster_monitor\", \"indices:admin/index_template/put\" ]\n  index_permissions:\n    - index_patterns:\n        - \"sem*\"\n      allowed_actions:\n        - \"*\"\n\nsem-role2:\n  reserved: true\n  hidden: false\n  description: \"Migrated from v6 (all types mapped)\"\n  cluster_permissions: [ \"cluster_monitor\" ]\n  index_permissions:\n    - index_patterns:\n        - \"sem*\"\n      allowed_actions:\n        - \"indices:admin/index_template/put\"\n", "---\n_meta:\n  type: \"rolesmapping\"\n  config_version: 2\nopendistro_security_own_index:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"spock\"\n  - \"kirk\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nunittest_1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"CN=spock,OU=client,O=client,L=Test,C=DE\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrexclude:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"rexclude\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nunderscore:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"underscore\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_vulcans_admin:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcanadmin\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nshakespeare:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\naliastest:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"aliastest\"\n  - \"dummy\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nuser1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"worf\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_vulcans:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"vulcangov\"\n  hosts: []\n  users:\n  - \"kirk\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nflsdls:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"sarek\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nccsresolv:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"ccsresolv\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nuser2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_starfleet_captains:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"captains\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrestore:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"restoreuser\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nattr:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"custattr\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex3:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_starfleet_library:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet*\"\n  - \"ambassador\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nbaz:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"baz\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmindex1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"mindex12\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_klingons1:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nsnapres:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"snapresuser\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_klingons2:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"klingon\"\n  hosts: []\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nkibana4:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"bug108\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ndlsnoinvest:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"dlsnoinvest\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ntheindex_admin:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"theindexadmin\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nremote_ccs:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"crusherw\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nzdummy_all:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"bug108\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nmultiget:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"picard\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_kibana_server:\n  reserved: true\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"kibanaserver\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_all_access:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"nagilum\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\npublic:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"*\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nwriter:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"writer\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nopendistro_security_logstash:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"opendistro_security_logstash\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole01_role02:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users: []\n  and_backend_roles:\n  - \"role01\"\n  - \"role02\"\n  description: \"Migrated from v6\"\nrole_starfleet:\n  reserved: false\n  hidden: false\n  backend_roles:\n  - \"starfleet\"\n  - \"captains\"\n  - \"defectors\"\n  hosts:\n  - \"*.starfleetintranet.com\"\n  users:\n  - \"nagilum\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_host1:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts:\n  - \"127.0.0.1\"\n  - \"localhost\"\n  users: []\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nrole_host2:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"host_127.0.0.1\"\n  - \"host_localhost\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\ntwitter:\n  reserved: false\n  hidden: false\n  backend_roles: []\n  hosts: []\n  users:\n  - \"twitter\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nenv_test:\n  users:\n    - env.replace@example.comp.com\nODS_ALL_ACCESS:\n  users:\n    - static_role_user\nrole_foo_index:\n  users:\n    - foo_index\nrole_foo_all:\n  users:\n    - foo_all\nxyz_sr_hidden:\n  reserved: false\n  hidden: true\n  backend_roles: []\n  hosts: []\n  users:\n    - \"test_user\"\n  and_backend_roles: []\n  description: \"Migrated from v6\"\nbulk_test_user_role:\n  users:\n    - \"bulk_test_user\"\nindex_template_perm:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds1\"\ndata_stream_0:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds0\"\ndata_stream_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds1\"\ndata_stream_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds2\"\ndata_stream_3:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds3\"\npoint_in_time_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"pit-1\"\npoint_in_time_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"pit-2\"\npoint_in_time_all:\n  reserved: false\n  hidden: false\n  users:\n    - \"all-pit\"\ndata_stream_admin:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_admin\"\ndata_stream_dls_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_dls1\"\ndata_stream_dls_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_dls2\"\ndata_stream_dls_3:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_dls3\"\ndata_stream_fls_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fls1\"\ndata_stream_fls_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fls2\"\ndata_stream_fls_3:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fls3\"\ndata_stream_fm_1:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fm1\"\ndata_stream_fm_2:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fm2\"\ndata_stream_fm_3:\n  reserved: false\n  hidden: false\n  users:\n    - \"ds_fm3\"\nsem-role:\n  reserved: false\n  hidden: false\n  users:\n    - \"sem-user\"\nsem-role2:\n  reserved: false\n  hidden: false\n  users:\n    - \"sem-user2\"\n"], "filenames": ["src/main/java/org/opensearch/security/securityconf/ConfigModelV7.java", "src/test/java/org/opensearch/security/DataStreamIntegrationTests.java", "src/test/resources/internal_users.yml", "src/test/resources/roles.yml", "src/test/resources/roles_mapping.yml"], "buggy_code_start_loc": [71, 24, 357, 1125, 430], "buggy_code_end_loc": [786, 253, 357, 1130, 430], "fixing_code_start_loc": [72, 25, 358, 1125, 431], "fixing_code_end_loc": [789, 500, 388, 1263, 481], "type": "CWE-863", "message": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. There is an issue with the implementation of fine-grained access control rules (document-level security, field-level security and field masking) where they are not correctly applied to the indices that back data streams potentially leading to incorrect access authorization. OpenSearch 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to update. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-41918", "sourceIdentifier": "security-advisories@github.com", "published": "2022-11-15T23:15:28.283", "lastModified": "2022-12-12T19:43:03.753", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. There is an issue with the implementation of fine-grained access control rules (document-level security, field-level security and field masking) where they are not correctly applied to the indices that back data streams potentially leading to incorrect access authorization. OpenSearch 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to update. There are no known workarounds for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-612"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:amazon:opensearch:*:*:*:*:*:docker:*:*", "versionEndExcluding": "1.3.7", "matchCriteriaId": "3AE6AA88-66C6-447C-A162-6C81F4C0F471"}, {"vulnerable": true, "criteria": "cpe:2.3:a:amazon:opensearch:*:*:*:*:*:docker:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.4.0", "matchCriteriaId": "75AA1A9B-34D6-4E1F-A746-1A5DA518B4C4"}]}]}], "references": [{"url": "https://github.com/opensearch-project/security/commit/f7cc569c9d3fa5d5432c76c854eed280d45ce6f4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/opensearch-project/security/security/advisories/GHSA-wmx7-x4jp-9jgg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opensearch-project/security/commit/f7cc569c9d3fa5d5432c76c854eed280d45ce6f4"}}