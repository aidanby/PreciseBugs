{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.pages.settings\");\npimcore.document.pages.settings = Class.create(pimcore.document.settings_abstract, {\n\n    getLayout: function () {\n\n        if (this.layout == null) {\n            // meta-data\n            var addMetaData = function (value) {\n\n                if(typeof value != \"string\") {\n                    value = \"\";\n                }\n\n                var count = this.metaDataPanel.query(\"button\").length+1;\n\n                var compositeField = new Ext.form.FieldContainer({\n                    layout: 'hbox',\n                    hideLabel: true,\n                    items: [{\n                        xtype: \"textfield\",\n                        value: value,\n                        width: 636,\n                        name: \"metadata_\" + count,\n                    }]\n                });\n\n                compositeField.add({\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_delete\",\n                    handler: function (compositeField, el) {\n                        this.metaDataPanel.remove(compositeField);\n                        this.metaDataPanel.updateLayout();\n                    }.bind(this, compositeField)\n                });\n\n                this.metaDataPanel.add(compositeField);\n                this.metaDataPanel.updateLayout();\n            }.bind(this);\n\n            this.metaDataPanel = new Ext.form.FieldSet({\n                title: t(\"html_tags\") + \" (&lt;meta .../&gt; &lt;link .../&gt; ...)\",\n                collapsible: false,\n                autoHeight:true,\n                width: 700,\n                style: \"margin-top: 20px;\",\n                items: [{\n                    xtype: \"toolbar\",\n                    style: \"margin-bottom: 10px;\",\n                    items: [\"->\", {\n                        xtype: 'button',\n                        iconCls: \"pimcore_icon_add\",\n                        handler: addMetaData\n                    }]\n                }]\n            });\n\n            try {\n                if(typeof this.document.data.metaData == \"object\" && this.document.data.metaData.length > 0) {\n                    for(var r=0; r<this.document.data.metaData.length; r++) {\n                        addMetaData(this.document.data.metaData[r]);\n                    }\n                }\n            } catch (e) {}\n\n\n            var updateSerpPreview = function () {\n\n                var metaPanel = this.layout.getComponent(\"metaDataPanel\");\n                var title = metaPanel.getComponent(\"title\").getValue();\n                var description = metaPanel.getComponent(\"description\").getValue();\n\n                var truncate = function( text, n ){\n                    if (text.length <= n) { return text; }\n                    var subString = text.substr(0, n-1);\n                    return subString.substr(0, subString.lastIndexOf(' ')) + \" ...\";\n                };\n\n                if(!title) {\n                    metaPanel.getComponent(\"serpPreview\").hide();\n                    return false;\n                }\n\n                if(metaPanel.getEl().getWidth() > 1350) {\n                    metaPanel.getComponent(\"serpPreview\").show();\n                }\n\n                var desktopTitleEl = Ext.get(metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".desktop .title\"));\n                var stringParts = title.split(\" \");\n                desktopTitleEl.setHtml(title);\n                while(desktopTitleEl.getWidth() >= 600) {\n                    stringParts.splice(-1,1);\n                    tmpString = stringParts.join(\" \") + \" ...\";\n                    desktopTitleEl.setHtml(tmpString);\n                }\n\n                var desktopDescrEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".desktop .description\");\n                Ext.fly(desktopDescrEl).setHtml(truncate(description, 160));\n\n                var mobileTitleEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".mobile .title\");\n                Ext.fly(mobileTitleEl).setHtml(truncate(title, 78));\n\n                var mobileDescrEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".mobile .description\");\n                Ext.fly(mobileDescrEl).setHtml(truncate(description, 130));\n\n                return true;\n            }.bind(this);\n\n            var serpAbsoluteUrl = this.document.data.url;\n\n            // create layout\n            this.layout = new Ext.FormPanel({\n                title: t('SEO') + ' &amp; ' + t('settings'),\n                border: false,\n                autoScroll: true,\n                iconCls: \"pimcore_material_icon_page_settings pimcore_material_icon\",\n                bodyStyle:'padding:0 10px 0 10px;',\n                items: [\n                    {\n                        xtype:'fieldset',\n                        title: t('title') + \", \" + t(\"description\") + \" & \" + t('metadata'),\n                        itemId: \"metaDataPanel\",\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 200\n                        },\n                        defaultType: 'textarea',\n                        items :[\n                            {\n                                fieldLabel: t('title') + \" (\" + this.document.data.title.length + \")\",\n                                name: 'title',\n                                itemId: 'title',\n                                maxLength: 255,\n                                height: 51,\n                                width: 700,\n                                value: this.document.data.title,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"keyup\": function (el) {\n                                        el.labelEl.update(t(\"title\") + \" (\" + el.getValue().length + \"):\");\n                                        updateSerpPreview();\n                                    }\n                                }\n                            },\n                            {\n                                fieldLabel: t('description') + \" (\" + this.document.data.description.length + \")\",\n                                maxLength: 350,\n                                height: 51,\n                                width: 700,\n                                name: 'description',\n                                itemId: 'description',\n                                value: this.document.data.description,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"keyup\": function (el) {\n                                        el.labelEl.update(t(\"description\") + \" (\" + el.getValue().length + \"):\");\n                                        updateSerpPreview();\n                                    }\n                                }\n                            },\n                            this.metaDataPanel,\n                            {\n                                xtype: \"container\",\n                                itemId: \"serpPreview\",\n                                cls: \"pimcore_document_page_serp_preview\",\n                                hidden: true,\n                                html:\n                                '<div class=\"entry desktop\">' +\n                                    '<div class=\"title\"></div>' +\n                                    '<div class=\"url\">' + serpAbsoluteUrl + '</div>' +\n                                    '<div class=\"description\"></div>' +\n                                '</div>' +\n                                '<div class=\"entry mobile\">' +\n                                    '<div class=\"title\"></div>' +\n                                    '<div class=\"url\">' + serpAbsoluteUrl + '</div>' +\n                                    '<div class=\"description\"></div>' +\n                                '</div>'\n                            }\n                        ],\n                        listeners: {\n                            \"afterrender\": function (el) {\n                                window.setTimeout(function () {\n                                    if(updateSerpPreview() && el.getEl().getWidth() > 1350) {\n                                        el.getComponent(\"serpPreview\").show();\n                                    }\n                                }, 1000);\n                            }\n                        }\n                    },{\n                        xtype:'fieldset',\n                        title: t('pretty_url') + \" / URL Slug\",\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 300\n                        },\n                        defaultType: 'textfield',\n                        items :[\n                            {\n                                fieldLabel: t('pretty_url_label'),\n                                name: 'prettyUrl',\n                                maxLength: 255,\n                                width: 700,\n                                value: this.document.data.prettyUrl,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"focusleave\": function (el) {\n                                        Ext.Ajax.request({\n                                            url: Routing.generate('pimcore_admin_document_page_checkprettyurl'),\n                                            method: \"POST\",\n                                            params: {\n                                                id: this.document.id,\n                                                path: el.getValue()\n                                            },\n                                            success: function (res) {\n                                                res = Ext.decode(res.responseText);\n                                                if(!res.success) {\n                                                    el.getEl().addCls(\"pimcore_error_input\");\n                                                    if (res.message) {\n                                                        Ext.MessageBox.alert(t(\"info\"), res.message);\n                                                    }\n                                                } else {\n                                                    el.getEl().removeCls(\"pimcore_error_input\");\n                                                }\n                                            }\n                                        });\n                                    }.bind(this)\n                                }\n                            }\n                        ]\n                    }, {\n                        xtype:'fieldset',\n                        title: t('assign_target_groups'),\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 300\n                        },\n                        defaultType: 'textfield',\n                        items :[\n                            Ext.create('Ext.ux.form.MultiSelect', {\n                                fieldLabel: t('visitors_of_this_page_will_be_automatically_associated_with_the_selected_target_groups'),\n                                store: pimcore.globalmanager.get(\"target_group_store\"),\n                                displayField: \"text\",\n                                valueField: \"id\",\n                                name: 'targetGroupIds',\n                                width: 700,\n                                //listWidth: 200,\n                                value: this.document.data[\"targetGroupIds\"],\n                                minHeight: 100\n                            })\n                        ]\n                    },\n                    this.getControllerViewFields(true),\n                    this.getStaticGeneratorFields(true),\n                    this.getPathAndKeyFields(true),\n                    this.getContentMasterFields(true)\n                ]\n            });\n        }\n\n        return this.layout;\n    }\n\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.document.pages.settings\");\npimcore.document.pages.settings = Class.create(pimcore.document.settings_abstract, {\n\n    getLayout: function () {\n\n        if (this.layout == null) {\n            // meta-data\n            var addMetaData = function (value) {\n\n                if(typeof value != \"string\") {\n                    value = \"\";\n                }\n\n                var count = this.metaDataPanel.query(\"button\").length+1;\n\n                var compositeField = new Ext.form.FieldContainer({\n                    layout: 'hbox',\n                    hideLabel: true,\n                    items: [{\n                        xtype: \"textfield\",\n                        value: value,\n                        width: 636,\n                        name: \"metadata_\" + count,\n                    }]\n                });\n\n                compositeField.add({\n                    xtype: \"button\",\n                    iconCls: \"pimcore_icon_delete\",\n                    handler: function (compositeField, el) {\n                        this.metaDataPanel.remove(compositeField);\n                        this.metaDataPanel.updateLayout();\n                    }.bind(this, compositeField)\n                });\n\n                this.metaDataPanel.add(compositeField);\n                this.metaDataPanel.updateLayout();\n            }.bind(this);\n\n            this.metaDataPanel = new Ext.form.FieldSet({\n                title: t(\"html_tags\") + \" (&lt;meta .../&gt; &lt;link .../&gt; ...)\",\n                collapsible: false,\n                autoHeight:true,\n                width: 700,\n                style: \"margin-top: 20px;\",\n                items: [{\n                    xtype: \"toolbar\",\n                    style: \"margin-bottom: 10px;\",\n                    items: [\"->\", {\n                        xtype: 'button',\n                        iconCls: \"pimcore_icon_add\",\n                        handler: addMetaData\n                    }]\n                }]\n            });\n\n            try {\n                if(typeof this.document.data.metaData == \"object\" && this.document.data.metaData.length > 0) {\n                    for(var r=0; r<this.document.data.metaData.length; r++) {\n                        addMetaData(this.document.data.metaData[r]);\n                    }\n                }\n            } catch (e) {}\n\n\n            var updateSerpPreview = function () {\n\n                var metaPanel = this.layout.getComponent(\"metaDataPanel\");\n                var title = htmlspecialchars(metaPanel.getComponent(\"title\").getValue());\n                var description = htmlspecialchars(metaPanel.getComponent(\"description\").getValue());\n\n                var truncate = function( text, n ){\n                    if (text.length <= n) { return text; }\n                    var subString = text.substr(0, n-1);\n                    return subString.substr(0, subString.lastIndexOf(' ')) + \" ...\";\n                };\n\n                if(!title) {\n                    metaPanel.getComponent(\"serpPreview\").hide();\n                    return false;\n                }\n\n                if(metaPanel.getEl().getWidth() > 1350) {\n                    metaPanel.getComponent(\"serpPreview\").show();\n                }\n\n                var desktopTitleEl = Ext.get(metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".desktop .title\"));\n                var stringParts = title.split(\" \");\n                desktopTitleEl.setHtml(title);\n                while(desktopTitleEl.getWidth() >= 600) {\n                    stringParts.splice(-1,1);\n                    tmpString = stringParts.join(\" \") + \" ...\";\n                    desktopTitleEl.setHtml(tmpString);\n                }\n\n                var desktopDescrEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".desktop .description\");\n                Ext.fly(desktopDescrEl).setHtml(truncate(description, 160));\n\n                var mobileTitleEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".mobile .title\");\n                Ext.fly(mobileTitleEl).setHtml(truncate(title, 78));\n\n                var mobileDescrEl = metaPanel.getComponent(\"serpPreview\").getEl().selectNode(\".mobile .description\");\n                Ext.fly(mobileDescrEl).setHtml(truncate(description, 130));\n\n                return true;\n            }.bind(this);\n\n            var serpAbsoluteUrl = this.document.data.url;\n\n            // create layout\n            this.layout = new Ext.FormPanel({\n                title: t('SEO') + ' &amp; ' + t('settings'),\n                border: false,\n                autoScroll: true,\n                iconCls: \"pimcore_material_icon_page_settings pimcore_material_icon\",\n                bodyStyle:'padding:0 10px 0 10px;',\n                items: [\n                    {\n                        xtype:'fieldset',\n                        title: t('title') + \", \" + t(\"description\") + \" & \" + t('metadata'),\n                        itemId: \"metaDataPanel\",\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 200\n                        },\n                        defaultType: 'textarea',\n                        items :[\n                            {\n                                fieldLabel: t('title') + \" (\" + this.document.data.title.length + \")\",\n                                name: 'title',\n                                itemId: 'title',\n                                maxLength: 255,\n                                height: 51,\n                                width: 700,\n                                value: this.document.data.title,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"keyup\": function (el) {\n                                        el.labelEl.update(t(\"title\") + \" (\" + el.getValue().length + \"):\");\n                                        updateSerpPreview();\n                                    }\n                                }\n                            },\n                            {\n                                fieldLabel: t('description') + \" (\" + this.document.data.description.length + \")\",\n                                maxLength: 350,\n                                height: 51,\n                                width: 700,\n                                name: 'description',\n                                itemId: 'description',\n                                value: this.document.data.description,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"keyup\": function (el) {\n                                        el.labelEl.update(t(\"description\") + \" (\" + el.getValue().length + \"):\");\n                                        updateSerpPreview();\n                                    }\n                                }\n                            },\n                            this.metaDataPanel,\n                            {\n                                xtype: \"container\",\n                                itemId: \"serpPreview\",\n                                cls: \"pimcore_document_page_serp_preview\",\n                                hidden: true,\n                                html:\n                                '<div class=\"entry desktop\">' +\n                                    '<div class=\"title\"></div>' +\n                                    '<div class=\"url\">' + serpAbsoluteUrl + '</div>' +\n                                    '<div class=\"description\"></div>' +\n                                '</div>' +\n                                '<div class=\"entry mobile\">' +\n                                    '<div class=\"title\"></div>' +\n                                    '<div class=\"url\">' + serpAbsoluteUrl + '</div>' +\n                                    '<div class=\"description\"></div>' +\n                                '</div>'\n                            }\n                        ],\n                        listeners: {\n                            \"afterrender\": function (el) {\n                                window.setTimeout(function () {\n                                    if(updateSerpPreview() && el.getEl().getWidth() > 1350) {\n                                        el.getComponent(\"serpPreview\").show();\n                                    }\n                                }, 1000);\n                            }\n                        }\n                    },{\n                        xtype:'fieldset',\n                        title: t('pretty_url') + \" / URL Slug\",\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 300\n                        },\n                        defaultType: 'textfield',\n                        items :[\n                            {\n                                fieldLabel: t('pretty_url_label'),\n                                name: 'prettyUrl',\n                                maxLength: 255,\n                                width: 700,\n                                value: this.document.data.prettyUrl,\n                                enableKeyEvents: true,\n                                listeners: {\n                                    \"focusleave\": function (el) {\n                                        Ext.Ajax.request({\n                                            url: Routing.generate('pimcore_admin_document_page_checkprettyurl'),\n                                            method: \"POST\",\n                                            params: {\n                                                id: this.document.id,\n                                                path: el.getValue()\n                                            },\n                                            success: function (res) {\n                                                res = Ext.decode(res.responseText);\n                                                if(!res.success) {\n                                                    el.getEl().addCls(\"pimcore_error_input\");\n                                                    if (res.message) {\n                                                        Ext.MessageBox.alert(t(\"info\"), res.message);\n                                                    }\n                                                } else {\n                                                    el.getEl().removeCls(\"pimcore_error_input\");\n                                                }\n                                            }\n                                        });\n                                    }.bind(this)\n                                }\n                            }\n                        ]\n                    }, {\n                        xtype:'fieldset',\n                        title: t('assign_target_groups'),\n                        collapsible: true,\n                        autoHeight:true,\n                        defaults: {\n                            labelWidth: 300\n                        },\n                        defaultType: 'textfield',\n                        items :[\n                            Ext.create('Ext.ux.form.MultiSelect', {\n                                fieldLabel: t('visitors_of_this_page_will_be_automatically_associated_with_the_selected_target_groups'),\n                                store: pimcore.globalmanager.get(\"target_group_store\"),\n                                displayField: \"text\",\n                                valueField: \"id\",\n                                name: 'targetGroupIds',\n                                width: 700,\n                                //listWidth: 200,\n                                value: this.document.data[\"targetGroupIds\"],\n                                minHeight: 100\n                            })\n                        ]\n                    },\n                    this.getControllerViewFields(true),\n                    this.getStaticGeneratorFields(true),\n                    this.getPathAndKeyFields(true),\n                    this.getContentMasterFields(true)\n                ]\n            });\n        }\n\n        return this.layout;\n    }\n\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/document/pages/settings.js"], "buggy_code_start_loc": [82], "buggy_code_end_loc": [84], "fixing_code_start_loc": [82], "fixing_code_end_loc": [84], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.3.3.", "other": {"cve": {"id": "CVE-2023-2730", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-16T12:15:09.057", "lastModified": "2023-05-22T17:20:52.117", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.3.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.3.3", "matchCriteriaId": "BDE34DAE-3EE0-4271-9AC3-87B634A194FB"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/6c6f5c26-d545-4e7b-82bb-1fe28006c885", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/8ab06bfbb5a05a1b190731d9c7476ec45f5ee878"}}