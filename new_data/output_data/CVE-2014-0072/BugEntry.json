{"buggy_code": ["/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\n#import <Cordova/CDV.h>\n#import \"CDVFileTransfer.h\"\n#import \"CDVFile.h\"\n#import \"CDVLocalFilesystem.h\"\n\n#import <AssetsLibrary/ALAsset.h>\n#import <AssetsLibrary/ALAssetRepresentation.h>\n#import <AssetsLibrary/ALAssetsLibrary.h>\n#import <CFNetwork/CFNetwork.h>\n\nextern CDVFile *filePlugin;\n\n@interface CDVFileTransfer ()\n// Sets the requests headers for the request.\n- (void)applyRequestHeaders:(NSDictionary*)headers toRequest:(NSMutableURLRequest*)req;\n// Creates a delegate to handle an upload.\n- (CDVFileTransferDelegate*)delegateForUploadCommand:(CDVInvokedUrlCommand*)command;\n// Creates an NSData* for the file for the given upload arguments.\n- (void)fileDataForUploadCommand:(CDVInvokedUrlCommand*)command;\n@end\n\n// Buffer size to use for streaming uploads.\nstatic const NSUInteger kStreamBufferSize = 32768;\n// Magic value within the options dict used to set a cookie.\nNSString* const kOptionsKeyCookie = @\"__cookie\";\n// Form boundary for multi-part requests.\nNSString* const kFormBoundary = @\"+++++org.apache.cordova.formBoundary\";\n\n// Writes the given data to the stream in a blocking way.\n// If successful, returns bytesToWrite.\n// If the stream was closed on the other end, returns 0.\n// If there was an error, returns -1.\nstatic CFIndex WriteDataToStream(NSData* data, CFWriteStreamRef stream)\n{\n    UInt8* bytes = (UInt8*)[data bytes];\n    long long bytesToWrite = [data length];\n    long long totalBytesWritten = 0;\n\n    while (totalBytesWritten < bytesToWrite) {\n        CFIndex result = CFWriteStreamWrite(stream,\n                bytes + totalBytesWritten,\n                bytesToWrite - totalBytesWritten);\n        if (result < 0) {\n            CFStreamError error = CFWriteStreamGetError(stream);\n            NSLog(@\"WriteStreamError domain: %ld error: %ld\", error.domain, error.error);\n            return result;\n        } else if (result == 0) {\n            return result;\n        }\n        totalBytesWritten += result;\n    }\n\n    return totalBytesWritten;\n}\n\n@implementation CDVFileTransfer\n@synthesize activeTransfers;\n\n- (NSString*)escapePathComponentForUrlString:(NSString*)urlString\n{\n    NSRange schemeAndHostRange = [urlString rangeOfString:@\"://.*?/\" options:NSRegularExpressionSearch];\n\n    if (schemeAndHostRange.length == 0) {\n        return urlString;\n    }\n\n    NSInteger schemeAndHostEndIndex = NSMaxRange(schemeAndHostRange);\n    NSString* schemeAndHost = [urlString substringToIndex:schemeAndHostEndIndex];\n    NSString* pathComponent = [urlString substringFromIndex:schemeAndHostEndIndex];\n    pathComponent = [pathComponent stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n\n    return [schemeAndHost stringByAppendingString:pathComponent];\n}\n\n- (void)applyRequestHeaders:(NSDictionary*)headers toRequest:(NSMutableURLRequest*)req\n{\n    [req setValue:@\"XMLHttpRequest\" forHTTPHeaderField:@\"X-Requested-With\"];\n\n    NSString* userAgent = [self.commandDelegate userAgent];\n    if (userAgent) {\n        [req setValue:userAgent forHTTPHeaderField:@\"User-Agent\"];\n    }\n\n    for (NSString* headerName in headers) {\n        id value = [headers objectForKey:headerName];\n        if (!value || (value == [NSNull null])) {\n            value = @\"null\";\n        }\n\n        // First, remove an existing header if one exists.\n        [req setValue:nil forHTTPHeaderField:headerName];\n\n        if (![value isKindOfClass:[NSArray class]]) {\n            value = [NSArray arrayWithObject:value];\n        }\n\n        // Then, append all header values.\n        for (id __strong subValue in value) {\n            // Convert from an NSNumber -> NSString.\n            if ([subValue respondsToSelector:@selector(stringValue)]) {\n                subValue = [subValue stringValue];\n            }\n            if ([subValue isKindOfClass:[NSString class]]) {\n                [req addValue:subValue forHTTPHeaderField:headerName];\n            }\n        }\n    }\n}\n\n- (NSURLRequest*)requestForUploadCommand:(CDVInvokedUrlCommand*)command fileData:(NSData*)fileData\n{\n    // arguments order from js: [filePath, server, fileKey, fileName, mimeType, params, debug, chunkedMode]\n    // however, params is a JavaScript object and during marshalling is put into the options dict,\n    // thus debug and chunkedMode are the 6th and 7th arguments\n    NSString* target = [command argumentAtIndex:0];\n    NSString* server = [command argumentAtIndex:1];\n    NSString* fileKey = [command argumentAtIndex:2 withDefault:@\"file\"];\n    NSString* fileName = [command argumentAtIndex:3 withDefault:@\"no-filename\"];\n    NSString* mimeType = [command argumentAtIndex:4 withDefault:nil];\n    NSDictionary* options = [command argumentAtIndex:5 withDefault:nil];\n    //    BOOL trustAllHosts = [[arguments objectAtIndex:6 withDefault:[NSNumber numberWithBool:YES]] boolValue]; // allow self-signed certs\n    BOOL chunkedMode = [[command argumentAtIndex:7 withDefault:[NSNumber numberWithBool:YES]] boolValue];\n    NSDictionary* headers = [command argumentAtIndex:8 withDefault:nil];\n    // Allow alternative http method, default to POST. JS side checks\n    // for allowed methods, currently PUT or POST (forces POST for\n    // unrecognised values)\n    NSString* httpMethod = [command argumentAtIndex:10 withDefault:@\"POST\"];\n    CDVPluginResult* result = nil;\n    CDVFileTransferError errorCode = 0;\n\n    // NSURL does not accepts URLs with spaces in the path. We escape the path in order\n    // to be more lenient.\n    NSURL* url = [NSURL URLWithString:server];\n\n    if (!url) {\n        errorCode = INVALID_URL_ERR;\n        NSLog(@\"File Transfer Error: Invalid server URL %@\", server);\n    } else if (!fileData) {\n        errorCode = FILE_NOT_FOUND_ERR;\n    }\n\n    if (errorCode > 0) {\n        result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:errorCode AndSource:target AndTarget:server]];\n        [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        return nil;\n    }\n\n    NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:url];\n\n    [req setHTTPMethod:httpMethod];\n\n    //    Magic value to set a cookie\n    if ([options objectForKey:kOptionsKeyCookie]) {\n        [req setValue:[options objectForKey:kOptionsKeyCookie] forHTTPHeaderField:@\"Cookie\"];\n        [req setHTTPShouldHandleCookies:NO];\n    }\n\n    NSString* contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", kFormBoundary];\n    [req setValue:contentType forHTTPHeaderField:@\"Content-Type\"];\n    [self applyRequestHeaders:headers toRequest:req];\n\n    NSData* formBoundaryData = [[NSString stringWithFormat:@\"--%@\\r\\n\", kFormBoundary] dataUsingEncoding:NSUTF8StringEncoding];\n    NSMutableData* postBodyBeforeFile = [NSMutableData data];\n\n    for (NSString* key in options) {\n        id val = [options objectForKey:key];\n        if (!val || (val == [NSNull null]) || [key isEqualToString:kOptionsKeyCookie]) {\n            continue;\n        }\n        // if it responds to stringValue selector (eg NSNumber) get the NSString\n        if ([val respondsToSelector:@selector(stringValue)]) {\n            val = [val stringValue];\n        }\n        // finally, check whether it is a NSString (for dataUsingEncoding selector below)\n        if (![val isKindOfClass:[NSString class]]) {\n            continue;\n        }\n\n        [postBodyBeforeFile appendData:formBoundaryData];\n        [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key] dataUsingEncoding:NSUTF8StringEncoding]];\n        [postBodyBeforeFile appendData:[val dataUsingEncoding:NSUTF8StringEncoding]];\n        [postBodyBeforeFile appendData:[@\"\\r\\n\" dataUsingEncoding : NSUTF8StringEncoding]];\n    }\n\n    [postBodyBeforeFile appendData:formBoundaryData];\n    [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fileKey, fileName] dataUsingEncoding:NSUTF8StringEncoding]];\n    if (mimeType != nil) {\n        [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Type: %@\\r\\n\", mimeType] dataUsingEncoding:NSUTF8StringEncoding]];\n    }\n    [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Length: %d\\r\\n\\r\\n\", [fileData length]] dataUsingEncoding:NSUTF8StringEncoding]];\n\n    DLog(@\"fileData length: %d\", [fileData length]);\n    NSData* postBodyAfterFile = [[NSString stringWithFormat:@\"\\r\\n--%@--\\r\\n\", kFormBoundary] dataUsingEncoding:NSUTF8StringEncoding];\n\n    long long totalPayloadLength = [postBodyBeforeFile length] + [fileData length] + [postBodyAfterFile length];\n    [req setValue:[[NSNumber numberWithLongLong:totalPayloadLength] stringValue] forHTTPHeaderField:@\"Content-Length\"];\n\n    if (chunkedMode) {\n        CFReadStreamRef readStream = NULL;\n        CFWriteStreamRef writeStream = NULL;\n        CFStreamCreateBoundPair(NULL, &readStream, &writeStream, kStreamBufferSize);\n        [req setHTTPBodyStream:CFBridgingRelease(readStream)];\n\n        self.backgroundTaskID = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{\n                [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTaskID];\n                self.backgroundTaskID = UIBackgroundTaskInvalid;\n                NSLog(@\"Background task to upload media finished.\");\n            }];\n\n        [self.commandDelegate runInBackground:^{\n            if (CFWriteStreamOpen(writeStream)) {\n                NSData* chunks[] = {postBodyBeforeFile, fileData, postBodyAfterFile};\n                int numChunks = sizeof(chunks) / sizeof(chunks[0]);\n\n                for (int i = 0; i < numChunks; ++i) {\n                    CFIndex result = WriteDataToStream(chunks[i], writeStream);\n                    if (result <= 0) {\n                        break;\n                    }\n                }\n            } else {\n                NSLog(@\"FileTransfer: Failed to open writeStream\");\n            }\n            CFWriteStreamClose(writeStream);\n            CFRelease(writeStream);\n        }];\n    } else {\n        [postBodyBeforeFile appendData:fileData];\n        [postBodyBeforeFile appendData:postBodyAfterFile];\n        [req setHTTPBody:postBodyBeforeFile];\n    }\n    return req;\n}\n\n- (CDVFileTransferDelegate*)delegateForUploadCommand:(CDVInvokedUrlCommand*)command\n{\n    NSString* source = [command.arguments objectAtIndex:0];\n    NSString* server = [command.arguments objectAtIndex:1];\n    BOOL trustAllHosts = [[command.arguments objectAtIndex:6 withDefault:[NSNumber numberWithBool:YES]] boolValue]; // allow self-signed certs\n    NSString* objectId = [command.arguments objectAtIndex:9];\n\n    CDVFileTransferDelegate* delegate = [[CDVFileTransferDelegate alloc] init];\n\n    delegate.command = self;\n    delegate.callbackId = command.callbackId;\n    delegate.direction = CDV_TRANSFER_UPLOAD;\n    delegate.objectId = objectId;\n    delegate.source = source;\n    delegate.target = server;\n    delegate.trustAllHosts = trustAllHosts;\n\n    return delegate;\n}\n\n- (void)fileDataForUploadCommand:(CDVInvokedUrlCommand*)command\n{\n    NSString* source = (NSString*)[command.arguments objectAtIndex:0];\n    NSString* server = [command.arguments objectAtIndex:1];\n    NSError* __autoreleasing err = nil;\n\n    CDVFilesystemURL *sourceURL = [CDVFilesystemURL fileSystemURLWithString:source];\n    NSObject<CDVFileSystem> *fs;\n    if (sourceURL) {\n        // Try to get a CDVFileSystem which will handle this file.\n        // This requires talking to the current CDVFile plugin.\n        fs = [filePlugin filesystemForURL:sourceURL];\n    }\n    if (fs) {\n        [fs readFileAtURL:sourceURL start:0 end:-1 callback:^(NSData *fileData, NSString *mimeType, CDVFileError err) {\n            if (err) {\n                // We couldn't find the asset.  Send the appropriate error.\n                CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n                [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n            }  else {\n                [self uploadData:fileData command:command];\n            }\n        }];\n        return;\n    } else {\n        // Extract the path part out of a file: URL.\n        NSString* filePath = [source hasPrefix:@\"/\"] ? [source copy] : [[NSURL URLWithString:source] path];\n        if (filePath == nil) {\n            // We couldn't find the asset.  Send the appropriate error.\n            CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n            [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n            return;\n        }\n\n        // Memory map the file so that it can be read efficiently even if it is large.\n        NSData* fileData = [NSData dataWithContentsOfFile:filePath options:NSDataReadingMappedIfSafe error:&err];\n\n        if (err != nil) {\n            NSLog(@\"Error opening file %@: %@\", source, err);\n            CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n            [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        } else {\n            [self uploadData:fileData command:command];\n        }\n    }\n}\n\n- (void)upload:(CDVInvokedUrlCommand*)command\n{\n    // fileData and req are split into helper functions to ease the unit testing of delegateForUpload.\n    // First, get the file data.  This method will call `uploadData:command`.\n    [self fileDataForUploadCommand:command];\n}\n\n- (void)uploadData:(NSData*)fileData command:(CDVInvokedUrlCommand*)command\n{\n    NSURLRequest* req = [self requestForUploadCommand:command fileData:fileData];\n\n    if (req == nil) {\n        return;\n    }\n    CDVFileTransferDelegate* delegate = [self delegateForUploadCommand:command];\n    [NSURLConnection connectionWithRequest:req delegate:delegate];\n\n    if (activeTransfers == nil) {\n        activeTransfers = [[NSMutableDictionary alloc] init];\n    }\n\n    [activeTransfers setObject:delegate forKey:delegate.objectId];\n}\n\n- (void)abort:(CDVInvokedUrlCommand*)command\n{\n    NSString* objectId = [command.arguments objectAtIndex:0];\n\n    CDVFileTransferDelegate* delegate = [activeTransfers objectForKey:objectId];\n\n    if (delegate != nil) {\n        [delegate cancelTransfer:delegate.connection];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:CONNECTION_ABORTED AndSource:delegate.source AndTarget:delegate.target]];\n        [self.commandDelegate sendPluginResult:result callbackId:delegate.callbackId];\n    }\n}\n\n- (void)download:(CDVInvokedUrlCommand*)command\n{\n    DLog(@\"File Transfer downloading file...\");\n    NSString* source = [command.arguments objectAtIndex:0];\n    NSString* target = [command.arguments objectAtIndex:1];\n    BOOL trustAllHosts = [[command.arguments objectAtIndex:2 withDefault:[NSNumber numberWithBool:YES]] boolValue]; // allow self-signed certs\n    NSString* objectId = [command.arguments objectAtIndex:3];\n    NSDictionary* headers = [command.arguments objectAtIndex:4 withDefault:nil];\n\n    CDVPluginResult* result = nil;\n    CDVFileTransferError errorCode = 0;\n\n    NSURL* targetURL;\n\n    if ([target hasPrefix:@\"/\"]) {\n        /* Backwards-compatibility:\n         * Check here to see if it looks like the user passed in a raw filesystem path. (Perhaps they had the path saved, and were previously using it with the old version of File). If so, normalize it by removing empty path segments, and check with File to see if any of the installed filesystems will handle it. If so, then we will end up with a filesystem url to use for the remainder of this operation.\n         */\n        target = [target stringByReplacingOccurrencesOfString:@\"//\" withString:@\"/\"];\n        targetURL = [filePlugin fileSystemURLforLocalPath:target].url;\n    } else {\n        targetURL = [NSURL URLWithString:target];\n    }\n\n    NSURL* sourceURL = [NSURL URLWithString:source];\n\n    if (!sourceURL) {\n        errorCode = INVALID_URL_ERR;\n        NSLog(@\"File Transfer Error: Invalid server URL %@\", source);\n    } else if (![targetURL isFileURL]) {\n        CDVFilesystemURL *fsURL = [CDVFilesystemURL fileSystemURLWithString:target];\n        if (!fsURL) {\n           errorCode = FILE_NOT_FOUND_ERR;\n           NSLog(@\"File Transfer Error: Invalid file path or URL %@\", target);\n        }\n    }\n\n    if (errorCode > 0) {\n        result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:errorCode AndSource:source AndTarget:target]];\n        [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        return;\n    }\n\n    NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:sourceURL];\n    [self applyRequestHeaders:headers toRequest:req];\n\n    CDVFileTransferDelegate* delegate = [[CDVFileTransferDelegate alloc] init];\n    delegate.command = self;\n    delegate.direction = CDV_TRANSFER_DOWNLOAD;\n    delegate.callbackId = command.callbackId;\n    delegate.objectId = objectId;\n    delegate.source = source;\n    delegate.target = [targetURL absoluteString];\n    delegate.targetURL = targetURL;\n    delegate.trustAllHosts = trustAllHosts;\n\n    delegate.connection = [NSURLConnection connectionWithRequest:req delegate:delegate];\n\n    if (activeTransfers == nil) {\n        activeTransfers = [[NSMutableDictionary alloc] init];\n    }\n\n    [activeTransfers setObject:delegate forKey:delegate.objectId];\n}\n\n- (NSMutableDictionary*)createFileTransferError:(int)code AndSource:(NSString*)source AndTarget:(NSString*)target\n{\n    NSMutableDictionary* result = [NSMutableDictionary dictionaryWithCapacity:3];\n\n    [result setObject:[NSNumber numberWithInt:code] forKey:@\"code\"];\n    if (source != nil) {\n        [result setObject:source forKey:@\"source\"];\n    }\n    if (target != nil) {\n        [result setObject:target forKey:@\"target\"];\n    }\n    NSLog(@\"FileTransferError %@\", result);\n\n    return result;\n}\n\n- (NSMutableDictionary*)createFileTransferError:(int)code\n                                      AndSource:(NSString*)source\n                                      AndTarget:(NSString*)target\n                                  AndHttpStatus:(int)httpStatus\n                                        AndBody:(NSString*)body\n{\n    NSMutableDictionary* result = [NSMutableDictionary dictionaryWithCapacity:5];\n\n    [result setObject:[NSNumber numberWithInt:code] forKey:@\"code\"];\n    if (source != nil) {\n        [result setObject:source forKey:@\"source\"];\n    }\n    if (target != nil) {\n        [result setObject:target forKey:@\"target\"];\n    }\n    [result setObject:[NSNumber numberWithInt:httpStatus] forKey:@\"http_status\"];\n    if (body != nil) {\n        [result setObject:body forKey:@\"body\"];\n    }\n    NSLog(@\"FileTransferError %@\", result);\n\n    return result;\n}\n\n- (void)onReset\n{\n    for (CDVFileTransferDelegate* delegate in [activeTransfers allValues]) {\n        [delegate.connection cancel];\n    }\n\n    [activeTransfers removeAllObjects];\n}\n\n@end\n\n@interface CDVFileTransferEntityLengthRequest : NSObject {\n    NSURLConnection* _connection;\n    CDVFileTransferDelegate* __weak _originalDelegate;\n}\n\n- (CDVFileTransferEntityLengthRequest*)initWithOriginalRequest:(NSURLRequest*)originalRequest andDelegate:(CDVFileTransferDelegate*)originalDelegate;\n\n@end;\n\n@implementation CDVFileTransferEntityLengthRequest;\n\n- (CDVFileTransferEntityLengthRequest*)initWithOriginalRequest:(NSURLRequest*)originalRequest andDelegate:(CDVFileTransferDelegate*)originalDelegate\n{\n    if (self) {\n        DLog(@\"Requesting entity length for GZIPped content...\");\n\n        NSMutableURLRequest* req = [originalRequest mutableCopy];\n        [req setHTTPMethod:@\"HEAD\"];\n        [req setValue:@\"identity\" forHTTPHeaderField:@\"Accept-Encoding\"];\n\n        _originalDelegate = originalDelegate;\n        _connection = [NSURLConnection connectionWithRequest:req delegate:self];\n    }\n    return self;\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response\n{\n    DLog(@\"HEAD request returned; content-length is %lld\", [response expectedContentLength]);\n    [_originalDelegate updateBytesExpected:[response expectedContentLength]];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data\n{}\n\n- (void)connectionDidFinishLoading:(NSURLConnection*)connection\n{}\n\n@end\n\n@implementation CDVFileTransferDelegate\n\n@synthesize callbackId, connection = _connection, source, target, responseData, responseHeaders, command, bytesTransfered, bytesExpected, direction, responseCode, objectId, targetFileHandle;\n\n- (void)connectionDidFinishLoading:(NSURLConnection*)connection\n{\n    NSString* uploadResponse = nil;\n    NSString* downloadResponse = nil;\n    NSMutableDictionary* uploadResult;\n    CDVPluginResult* result = nil;\n\n    NSLog(@\"File Transfer Finished with response code %d\", self.responseCode);\n\n    if (self.direction == CDV_TRANSFER_UPLOAD) {\n        uploadResponse = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n\n        if ((self.responseCode >= 200) && (self.responseCode < 300)) {\n            // create dictionary to return FileUploadResult object\n            uploadResult = [NSMutableDictionary dictionaryWithCapacity:3];\n            if (uploadResponse != nil) {\n                [uploadResult setObject:uploadResponse forKey:@\"response\"];\n                [uploadResult setObject:self.responseHeaders forKey:@\"headers\"];\n            }\n            [uploadResult setObject:[NSNumber numberWithLongLong:self.bytesTransfered] forKey:@\"bytesSent\"];\n            [uploadResult setObject:[NSNumber numberWithInt:self.responseCode] forKey:@\"responseCode\"];\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:uploadResult];\n        } else {\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:uploadResponse]];\n        }\n    }\n    if (self.direction == CDV_TRANSFER_DOWNLOAD) {\n        if (self.targetFileHandle) {\n            [self.targetFileHandle closeFile];\n            self.targetFileHandle = nil;\n            DLog(@\"File Transfer Download success\");\n\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:[filePlugin makeEntryForURL:self.targetURL]];\n        } else {\n            downloadResponse = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:downloadResponse]];\n        }\n    }\n\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n\n    // remove connection for activeTransfers\n    [command.activeTransfers removeObjectForKey:objectId];\n\n    // remove background id task in case our upload was done in the background\n    [[UIApplication sharedApplication] endBackgroundTask:self.command.backgroundTaskID];\n    self.command.backgroundTaskID = UIBackgroundTaskInvalid;\n}\n\n- (void)removeTargetFile\n{\n    NSFileManager* fileMgr = [NSFileManager defaultManager];\n\n    [fileMgr removeItemAtPath:self.target error:nil];\n}\n\n- (void)cancelTransfer:(NSURLConnection*)connection\n{\n    [connection cancel];\n    [self.command.activeTransfers removeObjectForKey:self.objectId];\n    [self removeTargetFile];\n}\n\n- (void)cancelTransferWithError:(NSURLConnection*)connection errorMessage:(NSString*)errorMessage\n{\n    CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsDictionary:[self.command createFileTransferError:FILE_NOT_FOUND_ERR AndSource:self.source AndTarget:self.target AndHttpStatus:self.responseCode AndBody:errorMessage]];\n\n    NSLog(@\"File Transfer Error: %@\", errorMessage);\n    [self cancelTransfer:connection];\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response\n{\n    NSError* __autoreleasing error = nil;\n\n    self.mimeType = [response MIMEType];\n    self.targetFileHandle = nil;\n\n    // required for iOS 4.3, for some reason; response is\n    // a plain NSURLResponse, not the HTTP subclass\n    if ([response isKindOfClass:[NSHTTPURLResponse class]]) {\n        NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n\n        self.responseCode = [httpResponse statusCode];\n        self.bytesExpected = [response expectedContentLength];\n        self.responseHeaders = [httpResponse allHeaderFields];\n        if ((self.direction == CDV_TRANSFER_DOWNLOAD) && (self.responseCode == 200) && (self.bytesExpected == NSURLResponseUnknownLength)) {\n            // Kick off HEAD request to server to get real length\n            // bytesExpected will be updated when that response is returned\n            self.entityLengthRequest = [[CDVFileTransferEntityLengthRequest alloc] initWithOriginalRequest:connection.currentRequest andDelegate:self];\n        }\n    } else if ([response.URL isFileURL]) {\n        NSDictionary* attr = [[NSFileManager defaultManager] attributesOfItemAtPath:[response.URL path] error:nil];\n        self.responseCode = 200;\n        self.bytesExpected = [attr[NSFileSize] longLongValue];\n    } else {\n        self.responseCode = 200;\n        self.bytesExpected = NSURLResponseUnknownLength;\n    }\n    if ((self.direction == CDV_TRANSFER_DOWNLOAD) && (self.responseCode >= 200) && (self.responseCode < 300)) {\n        // Download response is okay; begin streaming output to file\n        NSString *filePath = nil;\n        CDVFilesystemURL *sourceURL = [CDVFilesystemURL fileSystemURLWithString:self.target];\n        if (sourceURL && sourceURL.fileSystemName != nil) {\n            // This requires talking to the current CDVFile plugin\n            NSObject<CDVFileSystem> *fs = [filePlugin filesystemForURL:sourceURL];\n            filePath = [fs filesystemPathForURL:sourceURL];\n        } else {\n            // Extract the path part out of a file: URL.\n            NSString* filePath = [self.target hasPrefix:@\"/\"] ? [self.target copy] : [[NSURL URLWithString:self.target] path];\n            if (filePath == nil) {\n                // We couldn't find the asset.  Send the appropriate error.\n                [self cancelTransferWithError:connection errorMessage:[NSString stringWithFormat:@\"Could not create target file\"]];\n                return;\n            }\n        }\n\n        NSString* parentPath = [filePath stringByDeletingLastPathComponent];\n\n        // create parent directories if needed\n        if ([[NSFileManager defaultManager] createDirectoryAtPath:parentPath withIntermediateDirectories:YES attributes:nil error:&error] == NO) {\n            if (error) {\n                [self cancelTransferWithError:connection errorMessage:[NSString stringWithFormat:@\"Could not create path to save downloaded file: %@\", [error localizedDescription]]];\n            } else {\n                [self cancelTransferWithError:connection errorMessage:@\"Could not create path to save downloaded file\"];\n            }\n            return;\n        }\n        // create target file\n        if ([[NSFileManager defaultManager] createFileAtPath:filePath contents:nil attributes:nil] == NO) {\n            [self cancelTransferWithError:connection errorMessage:@\"Could not create target file\"];\n            return;\n        }\n        // open target file for writing\n        self.targetFileHandle = [NSFileHandle fileHandleForWritingAtPath:filePath];\n        if (self.targetFileHandle == nil) {\n            [self cancelTransferWithError:connection errorMessage:@\"Could not open target file for writing\"];\n        }\n        DLog(@\"Streaming to file %@\", filePath);\n    }\n}\n\n- (void)connection:(NSURLConnection*)connection didFailWithError:(NSError*)error\n{\n    NSString* body = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n    CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:body]];\n\n    NSLog(@\"File Transfer Error: %@\", [error localizedDescription]);\n\n    [self cancelTransfer:connection];\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data\n{\n    self.bytesTransfered += data.length;\n    if (self.targetFileHandle) {\n        [self.targetFileHandle writeData:data];\n    } else {\n        [self.responseData appendData:data];\n    }\n    [self updateProgress];\n}\n\n- (void)updateBytesExpected:(long long)newBytesExpected\n{\n    DLog(@\"Updating bytesExpected to %lld\", newBytesExpected);\n    self.bytesExpected = newBytesExpected;\n    [self updateProgress];\n}\n\n- (void)updateProgress\n{\n    if (self.direction == CDV_TRANSFER_DOWNLOAD) {\n        BOOL lengthComputable = (self.bytesExpected != NSURLResponseUnknownLength);\n        // If the response is GZipped, and we have an outstanding HEAD request to get\n        // the length, then hold off on sending progress events.\n        if (!lengthComputable && (self.entityLengthRequest != nil)) {\n            return;\n        }\n        NSMutableDictionary* downloadProgress = [NSMutableDictionary dictionaryWithCapacity:3];\n        [downloadProgress setObject:[NSNumber numberWithBool:lengthComputable] forKey:@\"lengthComputable\"];\n        [downloadProgress setObject:[NSNumber numberWithLongLong:self.bytesTransfered] forKey:@\"loaded\"];\n        [downloadProgress setObject:[NSNumber numberWithLongLong:self.bytesExpected] forKey:@\"total\"];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:downloadProgress];\n        [result setKeepCallbackAsBool:true];\n        [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n    }\n}\n\n- (void)connection:(NSURLConnection*)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite\n{\n    if (self.direction == CDV_TRANSFER_UPLOAD) {\n        NSMutableDictionary* uploadProgress = [NSMutableDictionary dictionaryWithCapacity:3];\n\n        [uploadProgress setObject:[NSNumber numberWithBool:true] forKey:@\"lengthComputable\"];\n        [uploadProgress setObject:[NSNumber numberWithLongLong:totalBytesWritten] forKey:@\"loaded\"];\n        [uploadProgress setObject:[NSNumber numberWithLongLong:totalBytesExpectedToWrite] forKey:@\"total\"];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:uploadProgress];\n        [result setKeepCallbackAsBool:true];\n        [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n    }\n    self.bytesTransfered = totalBytesWritten;\n}\n\n// for self signed certificates\n- (void)connection:(NSURLConnection*)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge*)challenge\n{\n    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n        if (self.trustAllHosts) {\n            NSURLCredential* credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            [challenge.sender useCredential:credential forAuthenticationChallenge:challenge];\n        }\n        [challenge.sender continueWithoutCredentialForAuthenticationChallenge:challenge];\n    } else {\n        [challenge.sender performDefaultHandlingForAuthenticationChallenge:challenge];\n    }\n}\n\n- (id)init\n{\n    if ((self = [super init])) {\n        self.responseData = [NSMutableData data];\n        self.targetFileHandle = nil;\n    }\n    return self;\n}\n\n@end;\n"], "fixing_code": ["/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n */\n\n#import <Cordova/CDV.h>\n#import \"CDVFileTransfer.h\"\n#import \"CDVFile.h\"\n#import \"CDVLocalFilesystem.h\"\n\n#import <AssetsLibrary/ALAsset.h>\n#import <AssetsLibrary/ALAssetRepresentation.h>\n#import <AssetsLibrary/ALAssetsLibrary.h>\n#import <CFNetwork/CFNetwork.h>\n\nextern CDVFile *filePlugin;\n\n@interface CDVFileTransfer ()\n// Sets the requests headers for the request.\n- (void)applyRequestHeaders:(NSDictionary*)headers toRequest:(NSMutableURLRequest*)req;\n// Creates a delegate to handle an upload.\n- (CDVFileTransferDelegate*)delegateForUploadCommand:(CDVInvokedUrlCommand*)command;\n// Creates an NSData* for the file for the given upload arguments.\n- (void)fileDataForUploadCommand:(CDVInvokedUrlCommand*)command;\n@end\n\n// Buffer size to use for streaming uploads.\nstatic const NSUInteger kStreamBufferSize = 32768;\n// Magic value within the options dict used to set a cookie.\nNSString* const kOptionsKeyCookie = @\"__cookie\";\n// Form boundary for multi-part requests.\nNSString* const kFormBoundary = @\"+++++org.apache.cordova.formBoundary\";\n\n// Writes the given data to the stream in a blocking way.\n// If successful, returns bytesToWrite.\n// If the stream was closed on the other end, returns 0.\n// If there was an error, returns -1.\nstatic CFIndex WriteDataToStream(NSData* data, CFWriteStreamRef stream)\n{\n    UInt8* bytes = (UInt8*)[data bytes];\n    long long bytesToWrite = [data length];\n    long long totalBytesWritten = 0;\n\n    while (totalBytesWritten < bytesToWrite) {\n        CFIndex result = CFWriteStreamWrite(stream,\n                bytes + totalBytesWritten,\n                bytesToWrite - totalBytesWritten);\n        if (result < 0) {\n            CFStreamError error = CFWriteStreamGetError(stream);\n            NSLog(@\"WriteStreamError domain: %ld error: %ld\", error.domain, error.error);\n            return result;\n        } else if (result == 0) {\n            return result;\n        }\n        totalBytesWritten += result;\n    }\n\n    return totalBytesWritten;\n}\n\n@implementation CDVFileTransfer\n@synthesize activeTransfers;\n\n- (NSString*)escapePathComponentForUrlString:(NSString*)urlString\n{\n    NSRange schemeAndHostRange = [urlString rangeOfString:@\"://.*?/\" options:NSRegularExpressionSearch];\n\n    if (schemeAndHostRange.length == 0) {\n        return urlString;\n    }\n\n    NSInteger schemeAndHostEndIndex = NSMaxRange(schemeAndHostRange);\n    NSString* schemeAndHost = [urlString substringToIndex:schemeAndHostEndIndex];\n    NSString* pathComponent = [urlString substringFromIndex:schemeAndHostEndIndex];\n    pathComponent = [pathComponent stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];\n\n    return [schemeAndHost stringByAppendingString:pathComponent];\n}\n\n- (void)applyRequestHeaders:(NSDictionary*)headers toRequest:(NSMutableURLRequest*)req\n{\n    [req setValue:@\"XMLHttpRequest\" forHTTPHeaderField:@\"X-Requested-With\"];\n\n    NSString* userAgent = [self.commandDelegate userAgent];\n    if (userAgent) {\n        [req setValue:userAgent forHTTPHeaderField:@\"User-Agent\"];\n    }\n\n    for (NSString* headerName in headers) {\n        id value = [headers objectForKey:headerName];\n        if (!value || (value == [NSNull null])) {\n            value = @\"null\";\n        }\n\n        // First, remove an existing header if one exists.\n        [req setValue:nil forHTTPHeaderField:headerName];\n\n        if (![value isKindOfClass:[NSArray class]]) {\n            value = [NSArray arrayWithObject:value];\n        }\n\n        // Then, append all header values.\n        for (id __strong subValue in value) {\n            // Convert from an NSNumber -> NSString.\n            if ([subValue respondsToSelector:@selector(stringValue)]) {\n                subValue = [subValue stringValue];\n            }\n            if ([subValue isKindOfClass:[NSString class]]) {\n                [req addValue:subValue forHTTPHeaderField:headerName];\n            }\n        }\n    }\n}\n\n- (NSURLRequest*)requestForUploadCommand:(CDVInvokedUrlCommand*)command fileData:(NSData*)fileData\n{\n    // arguments order from js: [filePath, server, fileKey, fileName, mimeType, params, debug, chunkedMode]\n    // however, params is a JavaScript object and during marshalling is put into the options dict,\n    // thus debug and chunkedMode are the 6th and 7th arguments\n    NSString* target = [command argumentAtIndex:0];\n    NSString* server = [command argumentAtIndex:1];\n    NSString* fileKey = [command argumentAtIndex:2 withDefault:@\"file\"];\n    NSString* fileName = [command argumentAtIndex:3 withDefault:@\"no-filename\"];\n    NSString* mimeType = [command argumentAtIndex:4 withDefault:nil];\n    NSDictionary* options = [command argumentAtIndex:5 withDefault:nil];\n    //    BOOL trustAllHosts = [[arguments objectAtIndex:6 withDefault:[NSNumber numberWithBool:YES]] boolValue]; // allow self-signed certs\n    BOOL chunkedMode = [[command argumentAtIndex:7 withDefault:[NSNumber numberWithBool:YES]] boolValue];\n    NSDictionary* headers = [command argumentAtIndex:8 withDefault:nil];\n    // Allow alternative http method, default to POST. JS side checks\n    // for allowed methods, currently PUT or POST (forces POST for\n    // unrecognised values)\n    NSString* httpMethod = [command argumentAtIndex:10 withDefault:@\"POST\"];\n    CDVPluginResult* result = nil;\n    CDVFileTransferError errorCode = 0;\n\n    // NSURL does not accepts URLs with spaces in the path. We escape the path in order\n    // to be more lenient.\n    NSURL* url = [NSURL URLWithString:server];\n\n    if (!url) {\n        errorCode = INVALID_URL_ERR;\n        NSLog(@\"File Transfer Error: Invalid server URL %@\", server);\n    } else if (!fileData) {\n        errorCode = FILE_NOT_FOUND_ERR;\n    }\n\n    if (errorCode > 0) {\n        result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:errorCode AndSource:target AndTarget:server]];\n        [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        return nil;\n    }\n\n    NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:url];\n\n    [req setHTTPMethod:httpMethod];\n\n    //    Magic value to set a cookie\n    if ([options objectForKey:kOptionsKeyCookie]) {\n        [req setValue:[options objectForKey:kOptionsKeyCookie] forHTTPHeaderField:@\"Cookie\"];\n        [req setHTTPShouldHandleCookies:NO];\n    }\n\n    NSString* contentType = [NSString stringWithFormat:@\"multipart/form-data; boundary=%@\", kFormBoundary];\n    [req setValue:contentType forHTTPHeaderField:@\"Content-Type\"];\n    [self applyRequestHeaders:headers toRequest:req];\n\n    NSData* formBoundaryData = [[NSString stringWithFormat:@\"--%@\\r\\n\", kFormBoundary] dataUsingEncoding:NSUTF8StringEncoding];\n    NSMutableData* postBodyBeforeFile = [NSMutableData data];\n\n    for (NSString* key in options) {\n        id val = [options objectForKey:key];\n        if (!val || (val == [NSNull null]) || [key isEqualToString:kOptionsKeyCookie]) {\n            continue;\n        }\n        // if it responds to stringValue selector (eg NSNumber) get the NSString\n        if ([val respondsToSelector:@selector(stringValue)]) {\n            val = [val stringValue];\n        }\n        // finally, check whether it is a NSString (for dataUsingEncoding selector below)\n        if (![val isKindOfClass:[NSString class]]) {\n            continue;\n        }\n\n        [postBodyBeforeFile appendData:formBoundaryData];\n        [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"\\r\\n\\r\\n\", key] dataUsingEncoding:NSUTF8StringEncoding]];\n        [postBodyBeforeFile appendData:[val dataUsingEncoding:NSUTF8StringEncoding]];\n        [postBodyBeforeFile appendData:[@\"\\r\\n\" dataUsingEncoding : NSUTF8StringEncoding]];\n    }\n\n    [postBodyBeforeFile appendData:formBoundaryData];\n    [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Disposition: form-data; name=\\\"%@\\\"; filename=\\\"%@\\\"\\r\\n\", fileKey, fileName] dataUsingEncoding:NSUTF8StringEncoding]];\n    if (mimeType != nil) {\n        [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Type: %@\\r\\n\", mimeType] dataUsingEncoding:NSUTF8StringEncoding]];\n    }\n    [postBodyBeforeFile appendData:[[NSString stringWithFormat:@\"Content-Length: %d\\r\\n\\r\\n\", [fileData length]] dataUsingEncoding:NSUTF8StringEncoding]];\n\n    DLog(@\"fileData length: %d\", [fileData length]);\n    NSData* postBodyAfterFile = [[NSString stringWithFormat:@\"\\r\\n--%@--\\r\\n\", kFormBoundary] dataUsingEncoding:NSUTF8StringEncoding];\n\n    long long totalPayloadLength = [postBodyBeforeFile length] + [fileData length] + [postBodyAfterFile length];\n    [req setValue:[[NSNumber numberWithLongLong:totalPayloadLength] stringValue] forHTTPHeaderField:@\"Content-Length\"];\n\n    if (chunkedMode) {\n        CFReadStreamRef readStream = NULL;\n        CFWriteStreamRef writeStream = NULL;\n        CFStreamCreateBoundPair(NULL, &readStream, &writeStream, kStreamBufferSize);\n        [req setHTTPBodyStream:CFBridgingRelease(readStream)];\n\n        self.backgroundTaskID = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{\n                [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTaskID];\n                self.backgroundTaskID = UIBackgroundTaskInvalid;\n                NSLog(@\"Background task to upload media finished.\");\n            }];\n\n        [self.commandDelegate runInBackground:^{\n            if (CFWriteStreamOpen(writeStream)) {\n                NSData* chunks[] = {postBodyBeforeFile, fileData, postBodyAfterFile};\n                int numChunks = sizeof(chunks) / sizeof(chunks[0]);\n\n                for (int i = 0; i < numChunks; ++i) {\n                    CFIndex result = WriteDataToStream(chunks[i], writeStream);\n                    if (result <= 0) {\n                        break;\n                    }\n                }\n            } else {\n                NSLog(@\"FileTransfer: Failed to open writeStream\");\n            }\n            CFWriteStreamClose(writeStream);\n            CFRelease(writeStream);\n        }];\n    } else {\n        [postBodyBeforeFile appendData:fileData];\n        [postBodyBeforeFile appendData:postBodyAfterFile];\n        [req setHTTPBody:postBodyBeforeFile];\n    }\n    return req;\n}\n\n- (CDVFileTransferDelegate*)delegateForUploadCommand:(CDVInvokedUrlCommand*)command\n{\n    NSString* source = [command.arguments objectAtIndex:0];\n    NSString* server = [command.arguments objectAtIndex:1];\n    BOOL trustAllHosts = [[command.arguments objectAtIndex:6 withDefault:[NSNumber numberWithBool:NO]] boolValue]; // allow self-signed certs\n    NSString* objectId = [command.arguments objectAtIndex:9];\n\n    CDVFileTransferDelegate* delegate = [[CDVFileTransferDelegate alloc] init];\n\n    delegate.command = self;\n    delegate.callbackId = command.callbackId;\n    delegate.direction = CDV_TRANSFER_UPLOAD;\n    delegate.objectId = objectId;\n    delegate.source = source;\n    delegate.target = server;\n    delegate.trustAllHosts = trustAllHosts;\n\n    return delegate;\n}\n\n- (void)fileDataForUploadCommand:(CDVInvokedUrlCommand*)command\n{\n    NSString* source = (NSString*)[command.arguments objectAtIndex:0];\n    NSString* server = [command.arguments objectAtIndex:1];\n    NSError* __autoreleasing err = nil;\n\n    CDVFilesystemURL *sourceURL = [CDVFilesystemURL fileSystemURLWithString:source];\n    NSObject<CDVFileSystem> *fs;\n    if (sourceURL) {\n        // Try to get a CDVFileSystem which will handle this file.\n        // This requires talking to the current CDVFile plugin.\n        fs = [filePlugin filesystemForURL:sourceURL];\n    }\n    if (fs) {\n        [fs readFileAtURL:sourceURL start:0 end:-1 callback:^(NSData *fileData, NSString *mimeType, CDVFileError err) {\n            if (err) {\n                // We couldn't find the asset.  Send the appropriate error.\n                CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n                [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n            }  else {\n                [self uploadData:fileData command:command];\n            }\n        }];\n        return;\n    } else {\n        // Extract the path part out of a file: URL.\n        NSString* filePath = [source hasPrefix:@\"/\"] ? [source copy] : [[NSURL URLWithString:source] path];\n        if (filePath == nil) {\n            // We couldn't find the asset.  Send the appropriate error.\n            CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n            [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n            return;\n        }\n\n        // Memory map the file so that it can be read efficiently even if it is large.\n        NSData* fileData = [NSData dataWithContentsOfFile:filePath options:NSDataReadingMappedIfSafe error:&err];\n\n        if (err != nil) {\n            NSLog(@\"Error opening file %@: %@\", source, err);\n            CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:NOT_FOUND_ERR AndSource:source AndTarget:server]];\n            [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        } else {\n            [self uploadData:fileData command:command];\n        }\n    }\n}\n\n- (void)upload:(CDVInvokedUrlCommand*)command\n{\n    // fileData and req are split into helper functions to ease the unit testing of delegateForUpload.\n    // First, get the file data.  This method will call `uploadData:command`.\n    [self fileDataForUploadCommand:command];\n}\n\n- (void)uploadData:(NSData*)fileData command:(CDVInvokedUrlCommand*)command\n{\n    NSURLRequest* req = [self requestForUploadCommand:command fileData:fileData];\n\n    if (req == nil) {\n        return;\n    }\n    CDVFileTransferDelegate* delegate = [self delegateForUploadCommand:command];\n    [NSURLConnection connectionWithRequest:req delegate:delegate];\n\n    if (activeTransfers == nil) {\n        activeTransfers = [[NSMutableDictionary alloc] init];\n    }\n\n    [activeTransfers setObject:delegate forKey:delegate.objectId];\n}\n\n- (void)abort:(CDVInvokedUrlCommand*)command\n{\n    NSString* objectId = [command.arguments objectAtIndex:0];\n\n    CDVFileTransferDelegate* delegate = [activeTransfers objectForKey:objectId];\n\n    if (delegate != nil) {\n        [delegate cancelTransfer:delegate.connection];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:CONNECTION_ABORTED AndSource:delegate.source AndTarget:delegate.target]];\n        [self.commandDelegate sendPluginResult:result callbackId:delegate.callbackId];\n    }\n}\n\n- (void)download:(CDVInvokedUrlCommand*)command\n{\n    DLog(@\"File Transfer downloading file...\");\n    NSString* source = [command.arguments objectAtIndex:0];\n    NSString* target = [command.arguments objectAtIndex:1];\n    BOOL trustAllHosts = [[command.arguments objectAtIndex:2 withDefault:[NSNumber numberWithBool:NO]] boolValue]; // allow self-signed certs\n    NSString* objectId = [command.arguments objectAtIndex:3];\n    NSDictionary* headers = [command.arguments objectAtIndex:4 withDefault:nil];\n\n    CDVPluginResult* result = nil;\n    CDVFileTransferError errorCode = 0;\n\n    NSURL* targetURL;\n\n    if ([target hasPrefix:@\"/\"]) {\n        /* Backwards-compatibility:\n         * Check here to see if it looks like the user passed in a raw filesystem path. (Perhaps they had the path saved, and were previously using it with the old version of File). If so, normalize it by removing empty path segments, and check with File to see if any of the installed filesystems will handle it. If so, then we will end up with a filesystem url to use for the remainder of this operation.\n         */\n        target = [target stringByReplacingOccurrencesOfString:@\"//\" withString:@\"/\"];\n        targetURL = [filePlugin fileSystemURLforLocalPath:target].url;\n    } else {\n        targetURL = [NSURL URLWithString:target];\n    }\n\n    NSURL* sourceURL = [NSURL URLWithString:source];\n\n    if (!sourceURL) {\n        errorCode = INVALID_URL_ERR;\n        NSLog(@\"File Transfer Error: Invalid server URL %@\", source);\n    } else if (![targetURL isFileURL]) {\n        CDVFilesystemURL *fsURL = [CDVFilesystemURL fileSystemURLWithString:target];\n        if (!fsURL) {\n           errorCode = FILE_NOT_FOUND_ERR;\n           NSLog(@\"File Transfer Error: Invalid file path or URL %@\", target);\n        }\n    }\n\n    if (errorCode > 0) {\n        result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[self createFileTransferError:errorCode AndSource:source AndTarget:target]];\n        [self.commandDelegate sendPluginResult:result callbackId:command.callbackId];\n        return;\n    }\n\n    NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:sourceURL];\n    [self applyRequestHeaders:headers toRequest:req];\n\n    CDVFileTransferDelegate* delegate = [[CDVFileTransferDelegate alloc] init];\n    delegate.command = self;\n    delegate.direction = CDV_TRANSFER_DOWNLOAD;\n    delegate.callbackId = command.callbackId;\n    delegate.objectId = objectId;\n    delegate.source = source;\n    delegate.target = [targetURL absoluteString];\n    delegate.targetURL = targetURL;\n    delegate.trustAllHosts = trustAllHosts;\n\n    delegate.connection = [NSURLConnection connectionWithRequest:req delegate:delegate];\n\n    if (activeTransfers == nil) {\n        activeTransfers = [[NSMutableDictionary alloc] init];\n    }\n\n    [activeTransfers setObject:delegate forKey:delegate.objectId];\n}\n\n- (NSMutableDictionary*)createFileTransferError:(int)code AndSource:(NSString*)source AndTarget:(NSString*)target\n{\n    NSMutableDictionary* result = [NSMutableDictionary dictionaryWithCapacity:3];\n\n    [result setObject:[NSNumber numberWithInt:code] forKey:@\"code\"];\n    if (source != nil) {\n        [result setObject:source forKey:@\"source\"];\n    }\n    if (target != nil) {\n        [result setObject:target forKey:@\"target\"];\n    }\n    NSLog(@\"FileTransferError %@\", result);\n\n    return result;\n}\n\n- (NSMutableDictionary*)createFileTransferError:(int)code\n                                      AndSource:(NSString*)source\n                                      AndTarget:(NSString*)target\n                                  AndHttpStatus:(int)httpStatus\n                                        AndBody:(NSString*)body\n{\n    NSMutableDictionary* result = [NSMutableDictionary dictionaryWithCapacity:5];\n\n    [result setObject:[NSNumber numberWithInt:code] forKey:@\"code\"];\n    if (source != nil) {\n        [result setObject:source forKey:@\"source\"];\n    }\n    if (target != nil) {\n        [result setObject:target forKey:@\"target\"];\n    }\n    [result setObject:[NSNumber numberWithInt:httpStatus] forKey:@\"http_status\"];\n    if (body != nil) {\n        [result setObject:body forKey:@\"body\"];\n    }\n    NSLog(@\"FileTransferError %@\", result);\n\n    return result;\n}\n\n- (void)onReset\n{\n    for (CDVFileTransferDelegate* delegate in [activeTransfers allValues]) {\n        [delegate.connection cancel];\n    }\n\n    [activeTransfers removeAllObjects];\n}\n\n@end\n\n@interface CDVFileTransferEntityLengthRequest : NSObject {\n    NSURLConnection* _connection;\n    CDVFileTransferDelegate* __weak _originalDelegate;\n}\n\n- (CDVFileTransferEntityLengthRequest*)initWithOriginalRequest:(NSURLRequest*)originalRequest andDelegate:(CDVFileTransferDelegate*)originalDelegate;\n\n@end;\n\n@implementation CDVFileTransferEntityLengthRequest;\n\n- (CDVFileTransferEntityLengthRequest*)initWithOriginalRequest:(NSURLRequest*)originalRequest andDelegate:(CDVFileTransferDelegate*)originalDelegate\n{\n    if (self) {\n        DLog(@\"Requesting entity length for GZIPped content...\");\n\n        NSMutableURLRequest* req = [originalRequest mutableCopy];\n        [req setHTTPMethod:@\"HEAD\"];\n        [req setValue:@\"identity\" forHTTPHeaderField:@\"Accept-Encoding\"];\n\n        _originalDelegate = originalDelegate;\n        _connection = [NSURLConnection connectionWithRequest:req delegate:self];\n    }\n    return self;\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response\n{\n    DLog(@\"HEAD request returned; content-length is %lld\", [response expectedContentLength]);\n    [_originalDelegate updateBytesExpected:[response expectedContentLength]];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data\n{}\n\n- (void)connectionDidFinishLoading:(NSURLConnection*)connection\n{}\n\n@end\n\n@implementation CDVFileTransferDelegate\n\n@synthesize callbackId, connection = _connection, source, target, responseData, responseHeaders, command, bytesTransfered, bytesExpected, direction, responseCode, objectId, targetFileHandle;\n\n- (void)connectionDidFinishLoading:(NSURLConnection*)connection\n{\n    NSString* uploadResponse = nil;\n    NSString* downloadResponse = nil;\n    NSMutableDictionary* uploadResult;\n    CDVPluginResult* result = nil;\n\n    NSLog(@\"File Transfer Finished with response code %d\", self.responseCode);\n\n    if (self.direction == CDV_TRANSFER_UPLOAD) {\n        uploadResponse = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n\n        if ((self.responseCode >= 200) && (self.responseCode < 300)) {\n            // create dictionary to return FileUploadResult object\n            uploadResult = [NSMutableDictionary dictionaryWithCapacity:3];\n            if (uploadResponse != nil) {\n                [uploadResult setObject:uploadResponse forKey:@\"response\"];\n                [uploadResult setObject:self.responseHeaders forKey:@\"headers\"];\n            }\n            [uploadResult setObject:[NSNumber numberWithLongLong:self.bytesTransfered] forKey:@\"bytesSent\"];\n            [uploadResult setObject:[NSNumber numberWithInt:self.responseCode] forKey:@\"responseCode\"];\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:uploadResult];\n        } else {\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:uploadResponse]];\n        }\n    }\n    if (self.direction == CDV_TRANSFER_DOWNLOAD) {\n        if (self.targetFileHandle) {\n            [self.targetFileHandle closeFile];\n            self.targetFileHandle = nil;\n            DLog(@\"File Transfer Download success\");\n\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:[filePlugin makeEntryForURL:self.targetURL]];\n        } else {\n            downloadResponse = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n            result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:downloadResponse]];\n        }\n    }\n\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n\n    // remove connection for activeTransfers\n    [command.activeTransfers removeObjectForKey:objectId];\n\n    // remove background id task in case our upload was done in the background\n    [[UIApplication sharedApplication] endBackgroundTask:self.command.backgroundTaskID];\n    self.command.backgroundTaskID = UIBackgroundTaskInvalid;\n}\n\n- (void)removeTargetFile\n{\n    NSFileManager* fileMgr = [NSFileManager defaultManager];\n\n    [fileMgr removeItemAtPath:self.target error:nil];\n}\n\n- (void)cancelTransfer:(NSURLConnection*)connection\n{\n    [connection cancel];\n    [self.command.activeTransfers removeObjectForKey:self.objectId];\n    [self removeTargetFile];\n}\n\n- (void)cancelTransferWithError:(NSURLConnection*)connection errorMessage:(NSString*)errorMessage\n{\n    CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_IO_EXCEPTION messageAsDictionary:[self.command createFileTransferError:FILE_NOT_FOUND_ERR AndSource:self.source AndTarget:self.target AndHttpStatus:self.responseCode AndBody:errorMessage]];\n\n    NSLog(@\"File Transfer Error: %@\", errorMessage);\n    [self cancelTransfer:connection];\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response\n{\n    NSError* __autoreleasing error = nil;\n\n    self.mimeType = [response MIMEType];\n    self.targetFileHandle = nil;\n\n    // required for iOS 4.3, for some reason; response is\n    // a plain NSURLResponse, not the HTTP subclass\n    if ([response isKindOfClass:[NSHTTPURLResponse class]]) {\n        NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n\n        self.responseCode = [httpResponse statusCode];\n        self.bytesExpected = [response expectedContentLength];\n        self.responseHeaders = [httpResponse allHeaderFields];\n        if ((self.direction == CDV_TRANSFER_DOWNLOAD) && (self.responseCode == 200) && (self.bytesExpected == NSURLResponseUnknownLength)) {\n            // Kick off HEAD request to server to get real length\n            // bytesExpected will be updated when that response is returned\n            self.entityLengthRequest = [[CDVFileTransferEntityLengthRequest alloc] initWithOriginalRequest:connection.currentRequest andDelegate:self];\n        }\n    } else if ([response.URL isFileURL]) {\n        NSDictionary* attr = [[NSFileManager defaultManager] attributesOfItemAtPath:[response.URL path] error:nil];\n        self.responseCode = 200;\n        self.bytesExpected = [attr[NSFileSize] longLongValue];\n    } else {\n        self.responseCode = 200;\n        self.bytesExpected = NSURLResponseUnknownLength;\n    }\n    if ((self.direction == CDV_TRANSFER_DOWNLOAD) && (self.responseCode >= 200) && (self.responseCode < 300)) {\n        // Download response is okay; begin streaming output to file\n        NSString *filePath = nil;\n        CDVFilesystemURL *sourceURL = [CDVFilesystemURL fileSystemURLWithString:self.target];\n        if (sourceURL && sourceURL.fileSystemName != nil) {\n            // This requires talking to the current CDVFile plugin\n            NSObject<CDVFileSystem> *fs = [filePlugin filesystemForURL:sourceURL];\n            filePath = [fs filesystemPathForURL:sourceURL];\n        } else {\n            // Extract the path part out of a file: URL.\n            NSString* filePath = [self.target hasPrefix:@\"/\"] ? [self.target copy] : [[NSURL URLWithString:self.target] path];\n            if (filePath == nil) {\n                // We couldn't find the asset.  Send the appropriate error.\n                [self cancelTransferWithError:connection errorMessage:[NSString stringWithFormat:@\"Could not create target file\"]];\n                return;\n            }\n        }\n\n        NSString* parentPath = [filePath stringByDeletingLastPathComponent];\n\n        // create parent directories if needed\n        if ([[NSFileManager defaultManager] createDirectoryAtPath:parentPath withIntermediateDirectories:YES attributes:nil error:&error] == NO) {\n            if (error) {\n                [self cancelTransferWithError:connection errorMessage:[NSString stringWithFormat:@\"Could not create path to save downloaded file: %@\", [error localizedDescription]]];\n            } else {\n                [self cancelTransferWithError:connection errorMessage:@\"Could not create path to save downloaded file\"];\n            }\n            return;\n        }\n        // create target file\n        if ([[NSFileManager defaultManager] createFileAtPath:filePath contents:nil attributes:nil] == NO) {\n            [self cancelTransferWithError:connection errorMessage:@\"Could not create target file\"];\n            return;\n        }\n        // open target file for writing\n        self.targetFileHandle = [NSFileHandle fileHandleForWritingAtPath:filePath];\n        if (self.targetFileHandle == nil) {\n            [self cancelTransferWithError:connection errorMessage:@\"Could not open target file for writing\"];\n        }\n        DLog(@\"Streaming to file %@\", filePath);\n    }\n}\n\n- (void)connection:(NSURLConnection*)connection didFailWithError:(NSError*)error\n{\n    NSString* body = [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding];\n    CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_ERROR messageAsDictionary:[command createFileTransferError:CONNECTION_ERR AndSource:source AndTarget:target AndHttpStatus:self.responseCode AndBody:body]];\n\n    NSLog(@\"File Transfer Error: %@\", [error localizedDescription]);\n\n    [self cancelTransfer:connection];\n    [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n}\n\n- (void)connection:(NSURLConnection*)connection didReceiveData:(NSData*)data\n{\n    self.bytesTransfered += data.length;\n    if (self.targetFileHandle) {\n        [self.targetFileHandle writeData:data];\n    } else {\n        [self.responseData appendData:data];\n    }\n    [self updateProgress];\n}\n\n- (void)updateBytesExpected:(long long)newBytesExpected\n{\n    DLog(@\"Updating bytesExpected to %lld\", newBytesExpected);\n    self.bytesExpected = newBytesExpected;\n    [self updateProgress];\n}\n\n- (void)updateProgress\n{\n    if (self.direction == CDV_TRANSFER_DOWNLOAD) {\n        BOOL lengthComputable = (self.bytesExpected != NSURLResponseUnknownLength);\n        // If the response is GZipped, and we have an outstanding HEAD request to get\n        // the length, then hold off on sending progress events.\n        if (!lengthComputable && (self.entityLengthRequest != nil)) {\n            return;\n        }\n        NSMutableDictionary* downloadProgress = [NSMutableDictionary dictionaryWithCapacity:3];\n        [downloadProgress setObject:[NSNumber numberWithBool:lengthComputable] forKey:@\"lengthComputable\"];\n        [downloadProgress setObject:[NSNumber numberWithLongLong:self.bytesTransfered] forKey:@\"loaded\"];\n        [downloadProgress setObject:[NSNumber numberWithLongLong:self.bytesExpected] forKey:@\"total\"];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:downloadProgress];\n        [result setKeepCallbackAsBool:true];\n        [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n    }\n}\n\n- (void)connection:(NSURLConnection*)connection didSendBodyData:(NSInteger)bytesWritten totalBytesWritten:(NSInteger)totalBytesWritten totalBytesExpectedToWrite:(NSInteger)totalBytesExpectedToWrite\n{\n    if (self.direction == CDV_TRANSFER_UPLOAD) {\n        NSMutableDictionary* uploadProgress = [NSMutableDictionary dictionaryWithCapacity:3];\n\n        [uploadProgress setObject:[NSNumber numberWithBool:true] forKey:@\"lengthComputable\"];\n        [uploadProgress setObject:[NSNumber numberWithLongLong:totalBytesWritten] forKey:@\"loaded\"];\n        [uploadProgress setObject:[NSNumber numberWithLongLong:totalBytesExpectedToWrite] forKey:@\"total\"];\n        CDVPluginResult* result = [CDVPluginResult resultWithStatus:CDVCommandStatus_OK messageAsDictionary:uploadProgress];\n        [result setKeepCallbackAsBool:true];\n        [self.command.commandDelegate sendPluginResult:result callbackId:callbackId];\n    }\n    self.bytesTransfered = totalBytesWritten;\n}\n\n// for self signed certificates\n- (void)connection:(NSURLConnection*)connection willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge*)challenge\n{\n    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n        if (self.trustAllHosts) {\n            NSURLCredential* credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n            [challenge.sender useCredential:credential forAuthenticationChallenge:challenge];\n        }\n        [challenge.sender continueWithoutCredentialForAuthenticationChallenge:challenge];\n    } else {\n        [challenge.sender performDefaultHandlingForAuthenticationChallenge:challenge];\n    }\n}\n\n- (id)init\n{\n    if ((self = [super init])) {\n        self.responseData = [NSMutableData data];\n        self.targetFileHandle = nil;\n    }\n    return self;\n}\n\n@end;\n"], "filenames": ["src/ios/CDVFileTransfer.m"], "buggy_code_start_loc": [258], "buggy_code_end_loc": [364], "fixing_code_start_loc": [258], "fixing_code_end_loc": [364], "type": "CWE-20", "message": "ios/CDVFileTransfer.m in the Apache Cordova File-Transfer standalone plugin (org.apache.cordova.file-transfer) before 0.4.2 for iOS and the File-Transfer plugin for iOS from Cordova 2.4.0 through 2.9.0 might allow remote attackers to spoof SSL servers by leveraging a default value of true for the trustAllHosts option.", "other": {"cve": {"id": "CVE-2014-0072", "sourceIdentifier": "secalert@redhat.com", "published": "2017-10-30T19:29:00.327", "lastModified": "2018-10-09T19:35:24.767", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ios/CDVFileTransfer.m in the Apache Cordova File-Transfer standalone plugin (org.apache.cordova.file-transfer) before 0.4.2 for iOS and the File-Transfer plugin for iOS from Cordova 2.4.0 through 2.9.0 might allow remote attackers to spoof SSL servers by leveraging a default value of true for the trustAllHosts option."}, {"lang": "es", "value": "ios/CDVFileTransfer.m en el plugin independiente Apache Cordova File-Transfer (org.apache.cordova.file-transfer) en versiones anteriores a la 0.4.2 para iOS y el plugin File-Transfer para iOS de Cordova desde la versi\u00f3n 2.4.0 hasta la 2.9.0 podr\u00eda permitir que atacantes remotos suplanten servidores SSL aprovechando un valor true por defecto para la opci\u00f3n trustAllHosts."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apache:cordova_file_transfer:*:*:*:*:*:iphone_os:*:*", "versionEndIncluding": "0.4.1", "matchCriteriaId": "6BB4806B-8C36-4438-B7CF-CE7AB4EDB949"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apache:cordova:*:*:*:*:*:iphone_os:*:*", "versionStartIncluding": "2.4.0", "versionEndIncluding": "2.9.0", "matchCriteriaId": "AAAEF4EC-AAD2-4E7E-909E-E215270D10AF"}]}]}], "references": [{"url": "http://d3adend.org/blog/?p=403", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "http://seclists.org/fulldisclosure/2014/Mar/29", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/archive/1/531335/100/0/threaded", "source": "secalert@redhat.com"}, {"url": "https://exchange.xforce.ibmcloud.com/vulnerabilities/91561", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/apache/cordova-plugin-file-transfer/commit/a1d6fc07e8a40c1b2b16f4103c403b30e1089668", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "https://mail-archives.apache.org/mod_mbox/cordova-dev/201403.mbox/%3CCAK_TSXKL9JtkehHC0jEoRwdvVKXt-d5uj40EwNY-Gk3ttX=wJw@mail.gmail.com%3E", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Mailing List", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/apache/cordova-plugin-file-transfer/commit/a1d6fc07e8a40c1b2b16f4103c403b30e1089668"}}