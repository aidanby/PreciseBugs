{"buggy_code": ["from django.core.exceptions import SuspiciousOperation\n\n\nclass DisallowedModelAdminLookup(SuspiciousOperation):\n    \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n    pass\n", "from collections import OrderedDict\nimport copy\nimport operator\nfrom functools import partial, reduce, update_wrapper\nimport warnings\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.admin import widgets, helpers\nfrom django.contrib.admin import validation\nfrom django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n    InlineModelAdminChecks)\nfrom django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n    get_deleted_objects, model_format_dict, NestedObjects,\n    lookup_needs_distinct)\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.auth import get_permission_codename\nfrom django.core import checks\nfrom django.core.exceptions import (PermissionDenied, ValidationError,\n    FieldError, ImproperlyConfigured)\nfrom django.core.paginator import Paginator\nfrom django.core.urlresolvers import reverse\nfrom django.db import models, transaction, router\nfrom django.db.models.constants import LOOKUP_SEP\nfrom django.db.models.related import RelatedObject\nfrom django.db.models.fields import BLANK_CHOICE_DASH, FieldDoesNotExist\nfrom django.db.models.sql.constants import QUERY_TERMS\nfrom django.forms.formsets import all_valid, DELETION_FIELD_NAME\nfrom django.forms.models import (modelform_factory, modelformset_factory,\n    inlineformset_factory, BaseInlineFormSet, modelform_defines_fields)\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.http.response import HttpResponseBase\nfrom django.shortcuts import get_object_or_404\nfrom django.template.response import SimpleTemplateResponse, TemplateResponse\nfrom django.utils import six\nfrom django.utils.decorators import method_decorator\nfrom django.utils.deprecation import (RenameMethodsBase,\n    RemovedInDjango18Warning, RemovedInDjango19Warning)\nfrom django.utils.encoding import force_text, python_2_unicode_compatible\nfrom django.utils.html import escape, escapejs\nfrom django.utils.http import urlencode\nfrom django.utils.text import capfirst, get_text_list\nfrom django.utils.translation import ugettext as _\nfrom django.utils.translation import ungettext\nfrom django.utils.safestring import mark_safe\nfrom django.views.decorators.csrf import csrf_protect\n\n\nIS_POPUP_VAR = '_popup'\nTO_FIELD_VAR = '_to_field'\n\n\nHORIZONTAL, VERTICAL = 1, 2\n\n\ndef get_content_type_for_model(obj):\n    # Since this module gets imported in the application's root package,\n    # it cannot import models from other applications at the module level.\n    from django.contrib.contenttypes.models import ContentType\n    return ContentType.objects.get_for_model(obj, for_concrete_model=False)\n\n\ndef get_ul_class(radio_style):\n    return 'radiolist' if radio_style == VERTICAL else 'radiolist inline'\n\n\nclass IncorrectLookupParameters(Exception):\n    pass\n\n# Defaults for formfield_overrides. ModelAdmin subclasses can change this\n# by adding to ModelAdmin.formfield_overrides.\n\nFORMFIELD_FOR_DBFIELD_DEFAULTS = {\n    models.DateTimeField: {\n        'form_class': forms.SplitDateTimeField,\n        'widget': widgets.AdminSplitDateTime\n    },\n    models.DateField: {'widget': widgets.AdminDateWidget},\n    models.TimeField: {'widget': widgets.AdminTimeWidget},\n    models.TextField: {'widget': widgets.AdminTextareaWidget},\n    models.URLField: {'widget': widgets.AdminURLFieldWidget},\n    models.IntegerField: {'widget': widgets.AdminIntegerFieldWidget},\n    models.BigIntegerField: {'widget': widgets.AdminBigIntegerFieldWidget},\n    models.CharField: {'widget': widgets.AdminTextInputWidget},\n    models.ImageField: {'widget': widgets.AdminFileWidget},\n    models.FileField: {'widget': widgets.AdminFileWidget},\n    models.EmailField: {'widget': widgets.AdminEmailInputWidget},\n}\n\ncsrf_protect_m = method_decorator(csrf_protect)\n\n\nclass RenameBaseModelAdminMethods(forms.MediaDefiningClass, RenameMethodsBase):\n    renamed_methods = (\n        ('queryset', 'get_queryset', RemovedInDjango18Warning),\n    )\n\n\nclass BaseModelAdmin(six.with_metaclass(RenameBaseModelAdminMethods)):\n    \"\"\"Functionality common to both ModelAdmin and InlineAdmin.\"\"\"\n\n    raw_id_fields = ()\n    fields = None\n    exclude = None\n    fieldsets = None\n    form = forms.ModelForm\n    filter_vertical = ()\n    filter_horizontal = ()\n    radio_fields = {}\n    prepopulated_fields = {}\n    formfield_overrides = {}\n    readonly_fields = ()\n    ordering = None\n    view_on_site = True\n\n    # Validation of ModelAdmin definitions\n    # Old, deprecated style:\n    validator_class = None\n    default_validator_class = validation.BaseValidator\n    # New style:\n    checks_class = BaseModelAdminChecks\n\n    @classmethod\n    def validate(cls, model):\n        warnings.warn(\n            'ModelAdmin.validate() is deprecated. Use \"check()\" instead.',\n            RemovedInDjango19Warning)\n        if cls.validator_class:\n            validator = cls.validator_class()\n        else:\n            validator = cls.default_validator_class()\n        validator.validate(cls, model)\n\n    @classmethod\n    def check(cls, model, **kwargs):\n        if cls.validator_class:\n            warnings.warn(\n                'ModelAdmin.validator_class is deprecated. '\n                'ModeAdmin validators must be converted to use '\n                'the system check framework.',\n                RemovedInDjango19Warning)\n            validator = cls.validator_class()\n            try:\n                validator.validate(cls, model)\n            except ImproperlyConfigured as e:\n                return [checks.Error(e.args[0], hint=None, obj=cls)]\n            else:\n                return []\n        else:\n            return cls.checks_class().check(cls, model, **kwargs)\n\n    def __init__(self):\n        overrides = FORMFIELD_FOR_DBFIELD_DEFAULTS.copy()\n        overrides.update(self.formfield_overrides)\n        self.formfield_overrides = overrides\n\n    def formfield_for_dbfield(self, db_field, **kwargs):\n        \"\"\"\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        \"\"\"\n        request = kwargs.pop(\"request\", None)\n\n        # If the field specifies choices, we don't need to look for special\n        # admin widgets - we just need to use a select widget of some kind.\n        if db_field.choices:\n            return self.formfield_for_choice_field(db_field, request, **kwargs)\n\n        # ForeignKey or ManyToManyFields\n        if isinstance(db_field, (models.ForeignKey, models.ManyToManyField)):\n            # Combine the field kwargs with any options for formfield_overrides.\n            # Make sure the passed in **kwargs override anything in\n            # formfield_overrides because **kwargs is more specific, and should\n            # always win.\n            if db_field.__class__ in self.formfield_overrides:\n                kwargs = dict(self.formfield_overrides[db_field.__class__], **kwargs)\n\n            # Get the correct formfield.\n            if isinstance(db_field, models.ForeignKey):\n                formfield = self.formfield_for_foreignkey(db_field, request, **kwargs)\n            elif isinstance(db_field, models.ManyToManyField):\n                formfield = self.formfield_for_manytomany(db_field, request, **kwargs)\n\n            # For non-raw_id fields, wrap the widget with a wrapper that adds\n            # extra HTML -- the \"add other\" interface -- to the end of the\n            # rendered output. formfield can be None if it came from a\n            # OneToOneField with parent_link=True or a M2M intermediary.\n            if formfield and db_field.name not in self.raw_id_fields:\n                related_modeladmin = self.admin_site._registry.get(db_field.rel.to)\n                can_add_related = bool(related_modeladmin and\n                    related_modeladmin.has_add_permission(request))\n                formfield.widget = widgets.RelatedFieldWidgetWrapper(\n                    formfield.widget, db_field.rel, self.admin_site,\n                    can_add_related=can_add_related)\n\n            return formfield\n\n        # If we've got overrides for the formfield defined, use 'em. **kwargs\n        # passed to formfield_for_dbfield override the defaults.\n        for klass in db_field.__class__.mro():\n            if klass in self.formfield_overrides:\n                kwargs = dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs)\n                return db_field.formfield(**kwargs)\n\n        # For any other type of field, just call its formfield() method.\n        return db_field.formfield(**kwargs)\n\n    def formfield_for_choice_field(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a database Field that has declared choices.\n        \"\"\"\n        # If the field is named as a radio_field, use a RadioSelect\n        if db_field.name in self.radio_fields:\n            # Avoid stomping on custom widget/choices arguments.\n            if 'widget' not in kwargs:\n                kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n                    'class': get_ul_class(self.radio_fields[db_field.name]),\n                })\n            if 'choices' not in kwargs:\n                kwargs['choices'] = db_field.get_choices(\n                    include_blank=db_field.blank,\n                    blank_choice=[('', _('None'))]\n                )\n        return db_field.formfield(**kwargs)\n\n    def get_field_queryset(self, db, db_field, request):\n        \"\"\"\n        If the ModelAdmin specifies ordering, the queryset should respect that\n        ordering.  Otherwise don't specify the queryset, let the field decide\n        (returns None in that case).\n        \"\"\"\n        related_admin = self.admin_site._registry.get(db_field.rel.to, None)\n        if related_admin is not None:\n            ordering = related_admin.get_ordering(request)\n            if ordering is not None and ordering != ():\n                return db_field.rel.to._default_manager.using(db).order_by(*ordering)\n        return None\n\n    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a ForeignKey.\n        \"\"\"\n        db = kwargs.get('using')\n        if db_field.name in self.raw_id_fields:\n            kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.rel,\n                                    self.admin_site, using=db)\n        elif db_field.name in self.radio_fields:\n            kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n                'class': get_ul_class(self.radio_fields[db_field.name]),\n            })\n            kwargs['empty_label'] = _('None') if db_field.blank else None\n\n        if 'queryset' not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs['queryset'] = queryset\n\n        return db_field.formfield(**kwargs)\n\n    def formfield_for_manytomany(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a ManyToManyField.\n        \"\"\"\n        # If it uses an intermediary model that isn't auto created, don't show\n        # a field in admin.\n        if not db_field.rel.through._meta.auto_created:\n            return None\n        db = kwargs.get('using')\n\n        if db_field.name in self.raw_id_fields:\n            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.rel,\n                                    self.admin_site, using=db)\n            kwargs['help_text'] = ''\n        elif db_field.name in (list(self.filter_vertical) + list(self.filter_horizontal)):\n            kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, (db_field.name in self.filter_vertical))\n\n        if 'queryset' not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs['queryset'] = queryset\n\n        return db_field.formfield(**kwargs)\n\n    def get_view_on_site_url(self, obj=None):\n        if obj is None or not self.view_on_site:\n            return None\n\n        if callable(self.view_on_site):\n            return self.view_on_site(obj)\n        elif self.view_on_site and hasattr(obj, 'get_absolute_url'):\n            # use the ContentType lookup if view_on_site is True\n            return reverse('admin:view_on_site', kwargs={\n                'content_type_id': get_content_type_for_model(obj).pk,\n                'object_id': obj.pk\n            })\n\n    @property\n    def declared_fieldsets(self):\n        warnings.warn(\n            \"ModelAdmin.declared_fieldsets is deprecated and \"\n            \"will be removed in Django 1.9.\",\n            RemovedInDjango19Warning, stacklevel=2\n        )\n\n        if self.fieldsets:\n            return self.fieldsets\n        elif self.fields:\n            return [(None, {'fields': self.fields})]\n        return None\n\n    def get_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying fields.\n        \"\"\"\n        return self.fields\n\n    def get_fieldsets(self, request, obj=None):\n        \"\"\"\n        Hook for specifying fieldsets.\n        \"\"\"\n        # We access the property and check if it triggers a warning.\n        # If it does, then it's ours and we can safely ignore it, but if\n        # it doesn't then it has been overridden so we must warn about the\n        # deprecation.\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            declared_fieldsets = self.declared_fieldsets\n        if len(w) != 1 or not issubclass(w[0].category, RemovedInDjango19Warning):\n            warnings.warn(\n                \"ModelAdmin.declared_fieldsets is deprecated and \"\n                \"will be removed in Django 1.9.\",\n                RemovedInDjango19Warning\n            )\n            if declared_fieldsets:\n                return declared_fieldsets\n\n        if self.fieldsets:\n            return self.fieldsets\n        return [(None, {'fields': self.get_fields(request, obj)})]\n\n    def get_ordering(self, request):\n        \"\"\"\n        Hook for specifying field ordering.\n        \"\"\"\n        return self.ordering or ()  # otherwise we might try to *None, which is bad ;)\n\n    def get_readonly_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying custom readonly fields.\n        \"\"\"\n        return self.readonly_fields\n\n    def get_prepopulated_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying custom prepopulated fields.\n        \"\"\"\n        return self.prepopulated_fields\n\n    def get_queryset(self, request):\n        \"\"\"\n        Returns a QuerySet of all model instances that can be edited by the\n        admin site. This is used by changelist_view.\n        \"\"\"\n        qs = self.model._default_manager.get_queryset()\n        # TODO: this should be handled by some parameter to the ChangeList.\n        ordering = self.get_ordering(request)\n        if ordering:\n            qs = qs.order_by(*ordering)\n        return qs\n\n    def lookup_allowed(self, lookup, value):\n        from django.contrib.admin.filters import SimpleListFilter\n\n        model = self.model\n        # Check FKey lookups that are allowed, so that popups produced by\n        # ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to,\n        # are allowed to work.\n        for l in model._meta.related_fkey_lookups:\n            # As ``limit_choices_to`` can be a callable, invoke it here.\n            if callable(l):\n                l = l()\n            for k, v in widgets.url_params_from_lookup_dict(l).items():\n                if k == lookup and v == value:\n                    return True\n\n        parts = lookup.split(LOOKUP_SEP)\n\n        # Last term in lookup is a query term (__exact, __startswith etc)\n        # This term can be ignored.\n        if len(parts) > 1 and parts[-1] in QUERY_TERMS:\n            parts.pop()\n\n        # Special case -- foo__id__exact and foo__id queries are implied\n        # if foo has been specifically included in the lookup list; so\n        # drop __id if it is the last part. However, first we need to find\n        # the pk attribute name.\n        rel_name = None\n        for part in parts[:-1]:\n            try:\n                field, _, _, _ = model._meta.get_field_by_name(part)\n            except FieldDoesNotExist:\n                # Lookups on non-existent fields are ok, since they're ignored\n                # later.\n                return True\n            if hasattr(field, 'rel'):\n                if field.rel is None:\n                    # This property or relation doesn't exist, but it's allowed\n                    # since it's ignored in ChangeList.get_filters().\n                    return True\n                model = field.rel.to\n                rel_name = field.rel.get_related_field().name\n            elif isinstance(field, RelatedObject):\n                model = field.model\n                rel_name = model._meta.pk.name\n            else:\n                rel_name = None\n        if rel_name and len(parts) > 1 and parts[-1] == rel_name:\n            parts.pop()\n\n        if len(parts) == 1:\n            return True\n        clean_lookup = LOOKUP_SEP.join(parts)\n        valid_lookups = [self.date_hierarchy]\n        for filter_item in self.list_filter:\n            if isinstance(filter_item, type) and issubclass(filter_item, SimpleListFilter):\n                valid_lookups.append(filter_item.parameter_name)\n            elif isinstance(filter_item, (list, tuple)):\n                valid_lookups.append(filter_item[0])\n            else:\n                valid_lookups.append(filter_item)\n        return clean_lookup in valid_lookups\n\n    def has_add_permission(self, request):\n        \"\"\"\n        Returns True if the given request has permission to add an object.\n        Can be overridden by the user in subclasses.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('add', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_change_permission(self, request, obj=None):\n        \"\"\"\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to change the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to change *any* object of the given type.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('change', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_delete_permission(self, request, obj=None):\n        \"\"\"\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to delete the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to delete *any* object of the given type.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('delete', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n\n@python_2_unicode_compatible\nclass ModelAdmin(BaseModelAdmin):\n    \"Encapsulates all admin options and functionality for a given model.\"\n\n    list_display = ('__str__',)\n    list_display_links = ()\n    list_filter = ()\n    list_select_related = False\n    list_per_page = 100\n    list_max_show_all = 200\n    list_editable = ()\n    search_fields = ()\n    date_hierarchy = None\n    save_as = False\n    save_on_top = False\n    paginator = Paginator\n    preserve_filters = True\n    inlines = []\n\n    # Custom templates (designed to be over-ridden in subclasses)\n    add_form_template = None\n    change_form_template = None\n    change_list_template = None\n    delete_confirmation_template = None\n    delete_selected_confirmation_template = None\n    object_history_template = None\n\n    # Actions\n    actions = []\n    action_form = helpers.ActionForm\n    actions_on_top = True\n    actions_on_bottom = False\n    actions_selection_counter = True\n\n    # validation\n    # Old, deprecated style:\n    default_validator_class = validation.ModelAdminValidator\n    # New style:\n    checks_class = ModelAdminChecks\n\n    def __init__(self, model, admin_site):\n        self.model = model\n        self.opts = model._meta\n        self.admin_site = admin_site\n        super(ModelAdmin, self).__init__()\n\n    def __str__(self):\n        return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n\n    def get_inline_instances(self, request, obj=None):\n        inline_instances = []\n        for inline_class in self.inlines:\n            inline = inline_class(self.model, self.admin_site)\n            if request:\n                if not (inline.has_add_permission(request) or\n                        inline.has_change_permission(request, obj) or\n                        inline.has_delete_permission(request, obj)):\n                    continue\n                if not inline.has_add_permission(request):\n                    inline.max_num = 0\n            inline_instances.append(inline)\n\n        return inline_instances\n\n    def get_urls(self):\n        from django.conf.urls import patterns, url\n\n        def wrap(view):\n            def wrapper(*args, **kwargs):\n                return self.admin_site.admin_view(view)(*args, **kwargs)\n            return update_wrapper(wrapper, view)\n\n        info = self.model._meta.app_label, self.model._meta.model_name\n\n        urlpatterns = patterns('',\n            url(r'^$', wrap(self.changelist_view), name='%s_%s_changelist' % info),\n            url(r'^add/$', wrap(self.add_view), name='%s_%s_add' % info),\n            url(r'^(.+)/history/$', wrap(self.history_view), name='%s_%s_history' % info),\n            url(r'^(.+)/delete/$', wrap(self.delete_view), name='%s_%s_delete' % info),\n            url(r'^(.+)/$', wrap(self.change_view), name='%s_%s_change' % info),\n        )\n        return urlpatterns\n\n    def urls(self):\n        return self.get_urls()\n    urls = property(urls)\n\n    @property\n    def media(self):\n        extra = '' if settings.DEBUG else '.min'\n        js = [\n            'core.js',\n            'admin/RelatedObjectLookups.js',\n            'jquery%s.js' % extra,\n            'jquery.init.js'\n        ]\n        if self.actions is not None:\n            js.append('actions%s.js' % extra)\n        if self.prepopulated_fields:\n            js.extend(['urlify.js', 'prepopulate%s.js' % extra])\n        return forms.Media(js=[static('admin/js/%s' % url) for url in js])\n\n    def get_model_perms(self, request):\n        \"\"\"\n        Returns a dict of all perms for this model. This dict has the keys\n        ``add``, ``change``, and ``delete`` mapping to the True/False for each\n        of those actions.\n        \"\"\"\n        return {\n            'add': self.has_add_permission(request),\n            'change': self.has_change_permission(request),\n            'delete': self.has_delete_permission(request),\n        }\n\n    def get_fields(self, request, obj=None):\n        if self.fields:\n            return self.fields\n        form = self.get_form(request, obj, fields=None)\n        return list(form.base_fields) + list(self.get_readonly_fields(request, obj))\n\n    def get_form(self, request, obj=None, **kwargs):\n        \"\"\"\n        Returns a Form class for use in the admin add view. This is used by\n        add_view and change_view.\n        \"\"\"\n        if 'fields' in kwargs:\n            fields = kwargs.pop('fields')\n        else:\n            fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n        if self.exclude is None:\n            exclude = []\n        else:\n            exclude = list(self.exclude)\n        exclude.extend(self.get_readonly_fields(request, obj))\n        if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:\n            # Take the custom ModelForm's Meta.exclude into account only if the\n            # ModelAdmin doesn't define its own.\n            exclude.extend(self.form._meta.exclude)\n        # if exclude is an empty list we pass None to be consistent with the\n        # default on modelform_factory\n        exclude = exclude or None\n        defaults = {\n            \"form\": self.form,\n            \"fields\": fields,\n            \"exclude\": exclude,\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n\n        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        try:\n            return modelform_factory(self.model, **defaults)\n        except FieldError as e:\n            raise FieldError('%s. Check fields/fieldsets/exclude attributes of class %s.'\n                             % (e, self.__class__.__name__))\n\n    def get_changelist(self, request, **kwargs):\n        \"\"\"\n        Returns the ChangeList class for use on the changelist page.\n        \"\"\"\n        from django.contrib.admin.views.main import ChangeList\n        return ChangeList\n\n    def get_object(self, request, object_id):\n        \"\"\"\n        Returns an instance matching the primary key provided. ``None``  is\n        returned if no match is found (or the object_id failed validation\n        against the primary key field).\n        \"\"\"\n        queryset = self.get_queryset(request)\n        model = queryset.model\n        try:\n            object_id = model._meta.pk.to_python(object_id)\n            return queryset.get(pk=object_id)\n        except (model.DoesNotExist, ValidationError, ValueError):\n            return None\n\n    def get_changelist_form(self, request, **kwargs):\n        \"\"\"\n        Returns a Form class for use in the Formset on the changelist page.\n        \"\"\"\n        defaults = {\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n        if (defaults.get('fields') is None\n                and not modelform_defines_fields(defaults.get('form'))):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        return modelform_factory(self.model, **defaults)\n\n    def get_changelist_formset(self, request, **kwargs):\n        \"\"\"\n        Returns a FormSet class for use on the changelist page if list_editable\n        is used.\n        \"\"\"\n        defaults = {\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n        return modelformset_factory(self.model,\n            self.get_changelist_form(request), extra=0,\n            fields=self.list_editable, **defaults)\n\n    def _get_formsets(self, request, obj):\n        \"\"\"\n        Helper function that exists to allow the deprecation warning to be\n        executed while this function continues to return a generator.\n        \"\"\"\n        for inline in self.get_inline_instances(request, obj):\n            yield inline.get_formset(request, obj)\n\n    def get_formsets(self, request, obj=None):\n        warnings.warn(\n            \"ModelAdmin.get_formsets() is deprecated and will be removed in \"\n            \"Django 1.9. Use ModelAdmin.get_formsets_with_inlines() instead.\",\n            RemovedInDjango19Warning, stacklevel=2\n        )\n        return self._get_formsets(request, obj)\n\n    def get_formsets_with_inlines(self, request, obj=None):\n        \"\"\"\n        Yields formsets and the corresponding inlines.\n        \"\"\"\n        # We call get_formsets() [deprecated] and check if it triggers a\n        # warning. If it does, then it's ours and we can safely ignore it, but\n        # if it doesn't then it has been overridden so we must warn about the\n        # deprecation.\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            formsets = self.get_formsets(request, obj)\n\n        if len(w) != 1 or not issubclass(w[0].category, RemovedInDjango19Warning):\n            warnings.warn(\n                \"ModelAdmin.get_formsets() is deprecated and will be removed in \"\n                \"Django 1.9. Use ModelAdmin.get_formsets_with_inlines() instead.\",\n                RemovedInDjango19Warning\n            )\n            if formsets:\n                zipped = zip(formsets, self.get_inline_instances(request, None))\n                for formset, inline in zipped:\n                    yield formset, inline\n        else:\n            for inline in self.get_inline_instances(request, obj):\n                yield inline.get_formset(request, obj), inline\n\n    def get_paginator(self, request, queryset, per_page, orphans=0, allow_empty_first_page=True):\n        return self.paginator(queryset, per_page, orphans, allow_empty_first_page)\n\n    def log_addition(self, request, object):\n        \"\"\"\n        Log that an object has been successfully added.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, ADDITION\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=force_text(object),\n            action_flag=ADDITION\n        )\n\n    def log_change(self, request, object, message):\n        \"\"\"\n        Log that an object has been successfully changed.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, CHANGE\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=force_text(object),\n            action_flag=CHANGE,\n            change_message=message\n        )\n\n    def log_deletion(self, request, object, object_repr):\n        \"\"\"\n        Log that an object will be deleted. Note that this method must be\n        called before the deletion.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, DELETION\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=object_repr,\n            action_flag=DELETION\n        )\n\n    def action_checkbox(self, obj):\n        \"\"\"\n        A list_display column containing a checkbox widget.\n        \"\"\"\n        return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, force_text(obj.pk))\n    action_checkbox.short_description = mark_safe('<input type=\"checkbox\" id=\"action-toggle\" />')\n    action_checkbox.allow_tags = True\n\n    def get_actions(self, request):\n        \"\"\"\n        Return a dictionary mapping the names of all actions for this\n        ModelAdmin to a tuple of (callable, name, description) for each action.\n        \"\"\"\n        # If self.actions is explicitly set to None that means that we don't\n        # want *any* actions enabled on this page.\n        from django.contrib.admin.views.main import _is_changelist_popup\n        if self.actions is None or _is_changelist_popup(request):\n            return OrderedDict()\n\n        actions = []\n\n        # Gather actions from the admin site first\n        for (name, func) in self.admin_site.actions:\n            description = getattr(func, 'short_description', name.replace('_', ' '))\n            actions.append((func, name, description))\n\n        # Then gather them from the model admin and all parent classes,\n        # starting with self and working back up.\n        for klass in self.__class__.mro()[::-1]:\n            class_actions = getattr(klass, 'actions', [])\n            # Avoid trying to iterate over None\n            if not class_actions:\n                continue\n            actions.extend(self.get_action(action) for action in class_actions)\n\n        # get_action might have returned None, so filter any of those out.\n        actions = filter(None, actions)\n\n        # Convert the actions into an OrderedDict keyed by name.\n        actions = OrderedDict(\n            (name, (func, name, desc))\n            for func, name, desc in actions\n        )\n\n        return actions\n\n    def get_action_choices(self, request, default_choices=BLANK_CHOICE_DASH):\n        \"\"\"\n        Return a list of choices for use in a form object.  Each choice is a\n        tuple (name, description).\n        \"\"\"\n        choices = [] + default_choices\n        for func, name, description in six.itervalues(self.get_actions(request)):\n            choice = (name, description % model_format_dict(self.opts))\n            choices.append(choice)\n        return choices\n\n    def get_action(self, action):\n        \"\"\"\n        Return a given action from a parameter, which can either be a callable,\n        or the name of a method on the ModelAdmin.  Return is a tuple of\n        (callable, name, description).\n        \"\"\"\n        # If the action is a callable, just use it.\n        if callable(action):\n            func = action\n            action = action.__name__\n\n        # Next, look for a method. Grab it off self.__class__ to get an unbound\n        # method instead of a bound one; this ensures that the calling\n        # conventions are the same for functions and methods.\n        elif hasattr(self.__class__, action):\n            func = getattr(self.__class__, action)\n\n        # Finally, look for a named method on the admin site\n        else:\n            try:\n                func = self.admin_site.get_action(action)\n            except KeyError:\n                return None\n\n        if hasattr(func, 'short_description'):\n            description = func.short_description\n        else:\n            description = capfirst(action.replace('_', ' '))\n        return func, action, description\n\n    def get_list_display(self, request):\n        \"\"\"\n        Return a sequence containing the fields to be displayed on the\n        changelist.\n        \"\"\"\n        return self.list_display\n\n    def get_list_display_links(self, request, list_display):\n        \"\"\"\n        Return a sequence containing the fields to be displayed as links\n        on the changelist. The list_display parameter is the list of fields\n        returned by get_list_display().\n        \"\"\"\n        if self.list_display_links or self.list_display_links is None or not list_display:\n            return self.list_display_links\n        else:\n            # Use only the first item in list_display as link\n            return list(list_display)[:1]\n\n    def get_list_filter(self, request):\n        \"\"\"\n        Returns a sequence containing the fields to be displayed as filters in\n        the right sidebar of the changelist page.\n        \"\"\"\n        return self.list_filter\n\n    def get_search_fields(self, request):\n        \"\"\"\n        Returns a sequence containing the fields to be searched whenever\n        somebody submits a search query.\n        \"\"\"\n        return self.search_fields\n\n    def get_search_results(self, request, queryset, search_term):\n        \"\"\"\n        Returns a tuple containing a queryset to implement the search,\n        and a boolean indicating if the results may contain duplicates.\n        \"\"\"\n        # Apply keyword searches.\n        def construct_search(field_name):\n            if field_name.startswith('^'):\n                return \"%s__istartswith\" % field_name[1:]\n            elif field_name.startswith('='):\n                return \"%s__iexact\" % field_name[1:]\n            elif field_name.startswith('@'):\n                return \"%s__search\" % field_name[1:]\n            else:\n                return \"%s__icontains\" % field_name\n\n        use_distinct = False\n        search_fields = self.get_search_fields(request)\n        if search_fields and search_term:\n            orm_lookups = [construct_search(str(search_field))\n                           for search_field in search_fields]\n            for bit in search_term.split():\n                or_queries = [models.Q(**{orm_lookup: bit})\n                              for orm_lookup in orm_lookups]\n                queryset = queryset.filter(reduce(operator.or_, or_queries))\n            if not use_distinct:\n                for search_spec in orm_lookups:\n                    if lookup_needs_distinct(self.opts, search_spec):\n                        use_distinct = True\n                        break\n\n        return queryset, use_distinct\n\n    def get_preserved_filters(self, request):\n        \"\"\"\n        Returns the preserved filters querystring.\n        \"\"\"\n        match = request.resolver_match\n        if self.preserve_filters and match:\n            opts = self.model._meta\n            current_url = '%s:%s' % (match.app_name, match.url_name)\n            changelist_url = 'admin:%s_%s_changelist' % (opts.app_label, opts.model_name)\n            if current_url == changelist_url:\n                preserved_filters = request.GET.urlencode()\n            else:\n                preserved_filters = request.GET.get('_changelist_filters')\n\n            if preserved_filters:\n                return urlencode({'_changelist_filters': preserved_filters})\n        return ''\n\n    def construct_change_message(self, request, form, formsets):\n        \"\"\"\n        Construct a change message from a changed object.\n        \"\"\"\n        change_message = []\n        if form.changed_data:\n            change_message.append(_('Changed %s.') % get_text_list(form.changed_data, _('and')))\n\n        if formsets:\n            for formset in formsets:\n                for added_object in formset.new_objects:\n                    change_message.append(_('Added %(name)s \"%(object)s\".')\n                                          % {'name': force_text(added_object._meta.verbose_name),\n                                             'object': force_text(added_object)})\n                for changed_object, changed_fields in formset.changed_objects:\n                    change_message.append(_('Changed %(list)s for %(name)s \"%(object)s\".')\n                                          % {'list': get_text_list(changed_fields, _('and')),\n                                             'name': force_text(changed_object._meta.verbose_name),\n                                             'object': force_text(changed_object)})\n                for deleted_object in formset.deleted_objects:\n                    change_message.append(_('Deleted %(name)s \"%(object)s\".')\n                                          % {'name': force_text(deleted_object._meta.verbose_name),\n                                             'object': force_text(deleted_object)})\n        change_message = ' '.join(change_message)\n        return change_message or _('No fields changed.')\n\n    def message_user(self, request, message, level=messages.INFO, extra_tags='',\n                     fail_silently=False):\n        \"\"\"\n        Send a message to the user. The default implementation\n        posts a message using the django.contrib.messages backend.\n\n        Exposes almost the same API as messages.add_message(), but accepts the\n        positional arguments in a different order to maintain backwards\n        compatibility. For convenience, it accepts the `level` argument as\n        a string rather than the usual level number.\n        \"\"\"\n\n        if not isinstance(level, int):\n            # attempt to get the level if passed a string\n            try:\n                level = getattr(messages.constants, level.upper())\n            except AttributeError:\n                levels = messages.constants.DEFAULT_TAGS.values()\n                levels_repr = ', '.join('`%s`' % l for l in levels)\n                raise ValueError('Bad message level string: `%s`. '\n                        'Possible values are: %s' % (level, levels_repr))\n\n        messages.add_message(request, level, message, extra_tags=extra_tags,\n                fail_silently=fail_silently)\n\n    def save_form(self, request, form, change):\n        \"\"\"\n        Given a ModelForm return an unsaved instance. ``change`` is True if\n        the object is being changed, and False if it's being added.\n        \"\"\"\n        return form.save(commit=False)\n\n    def save_model(self, request, obj, form, change):\n        \"\"\"\n        Given a model instance save it to the database.\n        \"\"\"\n        obj.save()\n\n    def delete_model(self, request, obj):\n        \"\"\"\n        Given a model instance delete it from the database.\n        \"\"\"\n        obj.delete()\n\n    def save_formset(self, request, form, formset, change):\n        \"\"\"\n        Given an inline formset save it to the database.\n        \"\"\"\n        formset.save()\n\n    def save_related(self, request, form, formsets, change):\n        \"\"\"\n        Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n        list of inline formsets and a boolean value based on whether the\n        parent is being added or changed, save the related objects to the\n        database. Note that at this point save_form() and save_model() have\n        already been called.\n        \"\"\"\n        form.save_m2m()\n        for formset in formsets:\n            self.save_formset(request, form, formset, change=change)\n\n    def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):\n        opts = self.model._meta\n        app_label = opts.app_label\n        preserved_filters = self.get_preserved_filters(request)\n        form_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, form_url)\n        view_on_site_url = self.get_view_on_site_url(obj)\n        context.update({\n            'add': add,\n            'change': change,\n            'has_add_permission': self.has_add_permission(request),\n            'has_change_permission': self.has_change_permission(request, obj),\n            'has_delete_permission': self.has_delete_permission(request, obj),\n            'has_file_field': True,  # FIXME - this should check if form or formsets have a FileField,\n            'has_absolute_url': view_on_site_url is not None,\n            'absolute_url': view_on_site_url,\n            'form_url': form_url,\n            'opts': opts,\n            'content_type_id': get_content_type_for_model(self.model).pk,\n            'save_as': self.save_as,\n            'save_on_top': self.save_on_top,\n            'to_field_var': TO_FIELD_VAR,\n            'is_popup_var': IS_POPUP_VAR,\n            'app_label': app_label,\n        })\n        if add and self.add_form_template is not None:\n            form_template = self.add_form_template\n        else:\n            form_template = self.change_form_template\n\n        return TemplateResponse(request, form_template or [\n            \"admin/%s/%s/change_form.html\" % (app_label, opts.model_name),\n            \"admin/%s/change_form.html\" % app_label,\n            \"admin/change_form.html\"\n        ], context, current_app=self.admin_site.name)\n\n    def response_add(self, request, obj, post_url_continue=None):\n        \"\"\"\n        Determines the HttpResponse for the add_view stage.\n        \"\"\"\n        opts = obj._meta\n        pk_value = obj._get_pk_val()\n        preserved_filters = self.get_preserved_filters(request)\n        msg_dict = {'name': force_text(opts.verbose_name), 'obj': force_text(obj)}\n        # Here, we distinguish between different save types by checking for\n        # the presence of keys in request.POST.\n\n        if IS_POPUP_VAR in request.POST:\n            to_field = request.POST.get(TO_FIELD_VAR)\n            if to_field:\n                attr = str(to_field)\n            else:\n                attr = obj._meta.pk.attname\n            value = obj.serializable_value(attr)\n            return SimpleTemplateResponse('admin/popup_response.html', {\n                'pk_value': escape(pk_value),  # for possible backwards-compatibility\n                'value': escape(value),\n                'obj': escapejs(obj)\n            })\n\n        elif \"_continue\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            if post_url_continue is None:\n                post_url_continue = reverse('admin:%s_%s_change' %\n                                            (opts.app_label, opts.model_name),\n                                            args=(quote(pk_value),),\n                                            current_app=self.admin_site.name)\n            post_url_continue = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url_continue)\n            return HttpResponseRedirect(post_url_continue)\n\n        elif \"_addanother\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may add another %(name)s below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = request.path\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        else:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            return self.response_post_save_add(request, obj)\n\n    def response_change(self, request, obj):\n        \"\"\"\n        Determines the HttpResponse for the change_view stage.\n        \"\"\"\n\n        opts = self.model._meta\n        pk_value = obj._get_pk_val()\n        preserved_filters = self.get_preserved_filters(request)\n\n        msg_dict = {'name': force_text(opts.verbose_name), 'obj': force_text(obj)}\n        if \"_continue\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = request.path\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        elif \"_saveasnew\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = reverse('admin:%s_%s_change' %\n                                   (opts.app_label, opts.model_name),\n                                   args=(pk_value,),\n                                   current_app=self.admin_site.name)\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        elif \"_addanother\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully. You may add another %(name)s below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = reverse('admin:%s_%s_add' %\n                                   (opts.app_label, opts.model_name),\n                                   current_app=self.admin_site.name)\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        else:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            return self.response_post_save_change(request, obj)\n\n    def response_post_save_add(self, request, obj):\n        \"\"\"\n        Figure out where to redirect after the 'Save' button has been pressed\n        when adding a new object.\n        \"\"\"\n        opts = self.model._meta\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url)\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def response_post_save_change(self, request, obj):\n        \"\"\"\n        Figure out where to redirect after the 'Save' button has been pressed\n        when editing an existing object.\n        \"\"\"\n        opts = self.model._meta\n\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url)\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def response_action(self, request, queryset):\n        \"\"\"\n        Handle an admin action. This is called if a request is POSTed to the\n        changelist; it returns an HttpResponse if the action was handled, and\n        None otherwise.\n        \"\"\"\n\n        # There can be multiple action forms on the page (at the top\n        # and bottom of the change list, for example). Get the action\n        # whose button was pushed.\n        try:\n            action_index = int(request.POST.get('index', 0))\n        except ValueError:\n            action_index = 0\n\n        # Construct the action form.\n        data = request.POST.copy()\n        data.pop(helpers.ACTION_CHECKBOX_NAME, None)\n        data.pop(\"index\", None)\n\n        # Use the action whose button was pushed\n        try:\n            data.update({'action': data.getlist('action')[action_index]})\n        except IndexError:\n            # If we didn't get an action from the chosen form that's invalid\n            # POST data, so by deleting action it'll fail the validation check\n            # below. So no need to do anything here\n            pass\n\n        action_form = self.action_form(data, auto_id=None)\n        action_form.fields['action'].choices = self.get_action_choices(request)\n\n        # If the form's valid we can handle the action.\n        if action_form.is_valid():\n            action = action_form.cleaned_data['action']\n            select_across = action_form.cleaned_data['select_across']\n            func = self.get_actions(request)[action][0]\n\n            # Get the list of selected PKs. If nothing's selected, we can't\n            # perform an action on it, so bail. Except we want to perform\n            # the action explicitly on all objects.\n            selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n            if not selected and not select_across:\n                # Reminder that something needs to be selected or nothing will happen\n                msg = _(\"Items must be selected in order to perform \"\n                        \"actions on them. No items have been changed.\")\n                self.message_user(request, msg, messages.WARNING)\n                return None\n\n            if not select_across:\n                # Perform the action only on the selected objects\n                queryset = queryset.filter(pk__in=selected)\n\n            response = func(self, request, queryset)\n\n            # Actions may return an HttpResponse-like object, which will be\n            # used as the response from the POST. If not, we'll be a good\n            # little HTTP citizen and redirect back to the changelist page.\n            if isinstance(response, HttpResponseBase):\n                return response\n            else:\n                return HttpResponseRedirect(request.get_full_path())\n        else:\n            msg = _(\"No action selected.\")\n            self.message_user(request, msg, messages.WARNING)\n            return None\n\n    def response_delete(self, request, obj_display):\n        \"\"\"\n        Determines the HttpResponse for the delete_view stage.\n        \"\"\"\n\n        opts = self.model._meta\n\n        self.message_user(request,\n            _('The %(name)s \"%(obj)s\" was deleted successfully.') % {\n                'name': force_text(opts.verbose_name),\n                'obj': force_text(obj_display)\n            }, messages.SUCCESS)\n\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters(\n                {'preserved_filters': preserved_filters, 'opts': opts}, post_url\n            )\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def render_delete_form(self, request, context):\n        opts = self.model._meta\n        app_label = opts.app_label\n\n        return TemplateResponse(request,\n            self.delete_confirmation_template or [\n                \"admin/{}/{}/delete_confirmation.html\".format(app_label, opts.model_name),\n                \"admin/{}/delete_confirmation.html\".format(app_label),\n                \"admin/delete_confirmation.html\"\n            ], context, current_app=self.admin_site.name)\n\n    def get_inline_formsets(self, request, formsets, inline_instances,\n                            obj=None):\n        inline_admin_formsets = []\n        for inline, formset in zip(inline_instances, formsets):\n            fieldsets = list(inline.get_fieldsets(request, obj))\n            readonly = list(inline.get_readonly_fields(request, obj))\n            prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset,\n                fieldsets, prepopulated, readonly, model_admin=self)\n            inline_admin_formsets.append(inline_admin_formset)\n        return inline_admin_formsets\n\n    def get_changeform_initial_data(self, request):\n        \"\"\"\n        Get the initial form data.\n        Unless overridden, this populates from the GET params.\n        \"\"\"\n        initial = dict(request.GET.items())\n        for k in initial:\n            try:\n                f = self.model._meta.get_field(k)\n            except models.FieldDoesNotExist:\n                continue\n            # We have to special-case M2Ms as a list of comma-separated PKs.\n            if isinstance(f, models.ManyToManyField):\n                initial[k] = initial[k].split(\",\")\n        return initial\n\n    @csrf_protect_m\n    @transaction.atomic\n    def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n\n        model = self.model\n        opts = model._meta\n        add = object_id is None\n\n        if add:\n            if not self.has_add_permission(request):\n                raise PermissionDenied\n            obj = None\n\n        else:\n            obj = self.get_object(request, unquote(object_id))\n\n            if not self.has_change_permission(request, obj):\n                raise PermissionDenied\n\n            if obj is None:\n                raise Http404(_('%(name)s object with primary key %(key)r does not exist.') % {\n                    'name': force_text(opts.verbose_name), 'key': escape(object_id)})\n\n            if request.method == 'POST' and \"_saveasnew\" in request.POST:\n                return self.add_view(request, form_url=reverse('admin:%s_%s_add' % (\n                    opts.app_label, opts.model_name),\n                    current_app=self.admin_site.name))\n\n        ModelForm = self.get_form(request, obj)\n        if request.method == 'POST':\n            form = ModelForm(request.POST, request.FILES, instance=obj)\n            if form.is_valid():\n                form_validated = True\n                new_object = self.save_form(request, form, change=not add)\n            else:\n                form_validated = False\n                new_object = form.instance\n            formsets, inline_instances = self._create_formsets(request, new_object)\n            if all_valid(formsets) and form_validated:\n                self.save_model(request, new_object, form, not add)\n                self.save_related(request, form, formsets, not add)\n                if add:\n                    self.log_addition(request, new_object)\n                    return self.response_add(request, new_object)\n                else:\n                    change_message = self.construct_change_message(request, form, formsets)\n                    self.log_change(request, new_object, change_message)\n                    return self.response_change(request, new_object)\n        else:\n            if add:\n                initial = self.get_changeform_initial_data(request)\n                form = ModelForm(initial=initial)\n                formsets, inline_instances = self._create_formsets(request, self.model())\n            else:\n                form = ModelForm(instance=obj)\n                formsets, inline_instances = self._create_formsets(request, obj)\n\n        adminForm = helpers.AdminForm(\n            form,\n            list(self.get_fieldsets(request, obj)),\n            self.get_prepopulated_fields(request, obj),\n            self.get_readonly_fields(request, obj),\n            model_admin=self)\n        media = self.media + adminForm.media\n\n        inline_formsets = self.get_inline_formsets(request, formsets, inline_instances, obj)\n        for inline_formset in inline_formsets:\n            media = media + inline_formset.media\n\n        context = dict(self.admin_site.each_context(),\n            title=(_('Add %s') if add else _('Change %s')) % force_text(opts.verbose_name),\n            adminform=adminForm,\n            object_id=object_id,\n            original=obj,\n            is_popup=(IS_POPUP_VAR in request.POST or\n                      IS_POPUP_VAR in request.GET),\n            to_field=request.POST.get(TO_FIELD_VAR,\n                                      request.GET.get(TO_FIELD_VAR)),\n            media=media,\n            inline_admin_formsets=inline_formsets,\n            errors=helpers.AdminErrorList(form, formsets),\n            preserved_filters=self.get_preserved_filters(request),\n        )\n\n        context.update(extra_context or {})\n\n        return self.render_change_form(request, context, add=add, change=not add, obj=obj, form_url=form_url)\n\n    def add_view(self, request, form_url='', extra_context=None):\n        return self.changeform_view(request, None, form_url, extra_context)\n\n    def change_view(self, request, object_id, form_url='', extra_context=None):\n        return self.changeform_view(request, object_id, form_url, extra_context)\n\n    @csrf_protect_m\n    def changelist_view(self, request, extra_context=None):\n        \"\"\"\n        The 'change list' admin view for this model.\n        \"\"\"\n        from django.contrib.admin.views.main import ERROR_FLAG\n        opts = self.model._meta\n        app_label = opts.app_label\n        if not self.has_change_permission(request, None):\n            raise PermissionDenied\n\n        list_display = self.get_list_display(request)\n        list_display_links = self.get_list_display_links(request, list_display)\n        list_filter = self.get_list_filter(request)\n        search_fields = self.get_search_fields(request)\n\n        # Check actions to see if any are available on this changelist\n        actions = self.get_actions(request)\n        if actions:\n            # Add the action checkboxes if there are any actions available.\n            list_display = ['action_checkbox'] + list(list_display)\n\n        ChangeList = self.get_changelist(request)\n        try:\n            cl = ChangeList(request, self.model, list_display,\n                list_display_links, list_filter, self.date_hierarchy,\n                search_fields, self.list_select_related, self.list_per_page,\n                self.list_max_show_all, self.list_editable, self)\n\n        except IncorrectLookupParameters:\n            # Wacky lookup parameters were given, so redirect to the main\n            # changelist page, without parameters, and pass an 'invalid=1'\n            # parameter via the query string. If wacky parameters were given\n            # and the 'invalid=1' parameter was already in the query string,\n            # something is screwed up with the database, so display an error\n            # page.\n            if ERROR_FLAG in request.GET.keys():\n                return SimpleTemplateResponse('admin/invalid_setup.html', {\n                    'title': _('Database error'),\n                })\n            return HttpResponseRedirect(request.path + '?' + ERROR_FLAG + '=1')\n\n        # If the request was POSTed, this might be a bulk action or a bulk\n        # edit. Try to look up an action or confirmation first, but if this\n        # isn't an action the POST will fall through to the bulk edit check,\n        # below.\n        action_failed = False\n        selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n\n        # Actions with no confirmation\n        if (actions and request.method == 'POST' and\n                'index' in request.POST and '_save' not in request.POST):\n            if selected:\n                response = self.response_action(request, queryset=cl.get_queryset(request))\n                if response:\n                    return response\n                else:\n                    action_failed = True\n            else:\n                msg = _(\"Items must be selected in order to perform \"\n                        \"actions on them. No items have been changed.\")\n                self.message_user(request, msg, messages.WARNING)\n                action_failed = True\n\n        # Actions with confirmation\n        if (actions and request.method == 'POST' and\n                helpers.ACTION_CHECKBOX_NAME in request.POST and\n                'index' not in request.POST and '_save' not in request.POST):\n            if selected:\n                response = self.response_action(request, queryset=cl.get_queryset(request))\n                if response:\n                    return response\n                else:\n                    action_failed = True\n\n        # If we're allowing changelist editing, we need to construct a formset\n        # for the changelist given all the fields to be edited. Then we'll\n        # use the formset to validate/process POSTed data.\n        formset = cl.formset = None\n\n        # Handle POSTed bulk-edit data.\n        if (request.method == \"POST\" and cl.list_editable and\n                '_save' in request.POST and not action_failed):\n            FormSet = self.get_changelist_formset(request)\n            formset = cl.formset = FormSet(request.POST, request.FILES, queryset=cl.result_list)\n            if formset.is_valid():\n                changecount = 0\n                for form in formset.forms:\n                    if form.has_changed():\n                        obj = self.save_form(request, form, change=True)\n                        self.save_model(request, obj, form, change=True)\n                        self.save_related(request, form, formsets=[], change=True)\n                        change_msg = self.construct_change_message(request, form, None)\n                        self.log_change(request, obj, change_msg)\n                        changecount += 1\n\n                if changecount:\n                    if changecount == 1:\n                        name = force_text(opts.verbose_name)\n                    else:\n                        name = force_text(opts.verbose_name_plural)\n                    msg = ungettext(\"%(count)s %(name)s was changed successfully.\",\n                                    \"%(count)s %(name)s were changed successfully.\",\n                                    changecount) % {'count': changecount,\n                                                    'name': name,\n                                                    'obj': force_text(obj)}\n                    self.message_user(request, msg, messages.SUCCESS)\n\n                return HttpResponseRedirect(request.get_full_path())\n\n        # Handle GET -- construct a formset for display.\n        elif cl.list_editable:\n            FormSet = self.get_changelist_formset(request)\n            formset = cl.formset = FormSet(queryset=cl.result_list)\n\n        # Build the list of media to be used by the formset.\n        if formset:\n            media = self.media + formset.media\n        else:\n            media = self.media\n\n        # Build the action form and populate it with available actions.\n        if actions:\n            action_form = self.action_form(auto_id=None)\n            action_form.fields['action'].choices = self.get_action_choices(request)\n        else:\n            action_form = None\n\n        selection_note_all = ungettext('%(total_count)s selected',\n            'All %(total_count)s selected', cl.result_count)\n\n        context = dict(\n            self.admin_site.each_context(),\n            module_name=force_text(opts.verbose_name_plural),\n            selection_note=_('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)},\n            selection_note_all=selection_note_all % {'total_count': cl.result_count},\n            title=cl.title,\n            is_popup=cl.is_popup,\n            to_field=cl.to_field,\n            cl=cl,\n            media=media,\n            has_add_permission=self.has_add_permission(request),\n            opts=cl.opts,\n            action_form=action_form,\n            actions_on_top=self.actions_on_top,\n            actions_on_bottom=self.actions_on_bottom,\n            actions_selection_counter=self.actions_selection_counter,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n\n        return TemplateResponse(request, self.change_list_template or [\n            'admin/%s/%s/change_list.html' % (app_label, opts.model_name),\n            'admin/%s/change_list.html' % app_label,\n            'admin/change_list.html'\n        ], context, current_app=self.admin_site.name)\n\n    @csrf_protect_m\n    @transaction.atomic\n    def delete_view(self, request, object_id, extra_context=None):\n        \"The 'delete' admin view for this model.\"\n        opts = self.model._meta\n        app_label = opts.app_label\n\n        obj = self.get_object(request, unquote(object_id))\n\n        if not self.has_delete_permission(request, obj):\n            raise PermissionDenied\n\n        if obj is None:\n            raise Http404(\n                _('%(name)s object with primary key %(key)r does not exist.') %\n                {'name': force_text(opts.verbose_name), 'key': escape(object_id)}\n            )\n\n        using = router.db_for_write(self.model)\n\n        # Populate deleted_objects, a data structure of all related objects that\n        # will also be deleted.\n        (deleted_objects, perms_needed, protected) = get_deleted_objects(\n            [obj], opts, request.user, self.admin_site, using)\n\n        if request.POST:  # The user has already confirmed the deletion.\n            if perms_needed:\n                raise PermissionDenied\n            obj_display = force_text(obj)\n            self.log_deletion(request, obj, obj_display)\n            self.delete_model(request, obj)\n\n            return self.response_delete(request, obj_display)\n\n        object_name = force_text(opts.verbose_name)\n\n        if perms_needed or protected:\n            title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n        else:\n            title = _(\"Are you sure?\")\n\n        context = dict(\n            self.admin_site.each_context(),\n            title=title,\n            object_name=object_name,\n            object=obj,\n            deleted_objects=deleted_objects,\n            perms_lacking=perms_needed,\n            protected=protected,\n            opts=opts,\n            app_label=app_label,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n\n        return self.render_delete_form(request, context)\n\n    def history_view(self, request, object_id, extra_context=None):\n        \"The 'history' admin view for this model.\"\n        from django.contrib.admin.models import LogEntry\n        # First check if the user can see this history.\n        model = self.model\n        obj = get_object_or_404(self.get_queryset(request), pk=unquote(object_id))\n\n        if not self.has_change_permission(request, obj):\n            raise PermissionDenied\n\n        # Then get the history for this object.\n        opts = model._meta\n        app_label = opts.app_label\n        action_list = LogEntry.objects.filter(\n            object_id=unquote(object_id),\n            content_type=get_content_type_for_model(model)\n        ).select_related().order_by('action_time')\n\n        context = dict(self.admin_site.each_context(),\n            title=_('Change history: %s') % force_text(obj),\n            action_list=action_list,\n            module_name=capfirst(force_text(opts.verbose_name_plural)),\n            object=obj,\n            opts=opts,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n        return TemplateResponse(request, self.object_history_template or [\n            \"admin/%s/%s/object_history.html\" % (app_label, opts.model_name),\n            \"admin/%s/object_history.html\" % app_label,\n            \"admin/object_history.html\"\n        ], context, current_app=self.admin_site.name)\n\n    def _create_formsets(self, request, obj):\n        \"Helper function to generate formsets for add/change_view.\"\n        formsets = []\n        inline_instances = []\n        prefixes = {}\n        get_formsets_args = [request]\n        if obj.pk:\n            get_formsets_args.append(obj)\n        for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n            prefix = FormSet.get_default_prefix()\n            prefixes[prefix] = prefixes.get(prefix, 0) + 1\n            if prefixes[prefix] != 1 or not prefix:\n                prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n            formset_params = {\n                'instance': obj,\n                'prefix': prefix,\n                'queryset': inline.get_queryset(request),\n            }\n            if request.method == 'POST':\n                formset_params.update({\n                    'data': request.POST,\n                    'files': request.FILES,\n                    'save_as_new': '_saveasnew' in request.POST\n                })\n            formsets.append(FormSet(**formset_params))\n            inline_instances.append(inline)\n        return formsets, inline_instances\n\n\nclass InlineModelAdmin(BaseModelAdmin):\n    \"\"\"\n    Options for inline editing of ``model`` instances.\n\n    Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``\n    from ``model`` to its parent. This is required if ``model`` has more than\n    one ``ForeignKey`` to its parent.\n    \"\"\"\n    model = None\n    fk_name = None\n    formset = BaseInlineFormSet\n    extra = 3\n    min_num = None\n    max_num = None\n    template = None\n    verbose_name = None\n    verbose_name_plural = None\n    can_delete = True\n\n    checks_class = InlineModelAdminChecks\n\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        super(InlineModelAdmin, self).__init__()\n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            self.verbose_name_plural = self.model._meta.verbose_name_plural\n\n    @property\n    def media(self):\n        extra = '' if settings.DEBUG else '.min'\n        js = ['jquery%s.js' % extra, 'jquery.init.js', 'inlines%s.js' % extra]\n        if self.prepopulated_fields:\n            js.extend(['urlify.js', 'prepopulate%s.js' % extra])\n        if self.filter_vertical or self.filter_horizontal:\n            js.extend(['SelectBox.js', 'SelectFilter2.js'])\n        return forms.Media(js=[static('admin/js/%s' % url) for url in js])\n\n    def get_extra(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the number of extra inline forms.\"\"\"\n        return self.extra\n\n    def get_min_num(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the min number of inline forms.\"\"\"\n        return self.min_num\n\n    def get_max_num(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the max number of extra inline forms.\"\"\"\n        return self.max_num\n\n    def get_formset(self, request, obj=None, **kwargs):\n        \"\"\"Returns a BaseInlineFormSet class for use in admin add/change views.\"\"\"\n        if 'fields' in kwargs:\n            fields = kwargs.pop('fields')\n        else:\n            fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n        if self.exclude is None:\n            exclude = []\n        else:\n            exclude = list(self.exclude)\n        exclude.extend(self.get_readonly_fields(request, obj))\n        if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:\n            # Take the custom ModelForm's Meta.exclude into account only if the\n            # InlineModelAdmin doesn't define its own.\n            exclude.extend(self.form._meta.exclude)\n        # If exclude is an empty list we use None, since that's the actual\n        # default.\n        exclude = exclude or None\n        can_delete = self.can_delete and self.has_delete_permission(request, obj)\n        defaults = {\n            \"form\": self.form,\n            \"formset\": self.formset,\n            \"fk_name\": self.fk_name,\n            \"fields\": fields,\n            \"exclude\": exclude,\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n            \"extra\": self.get_extra(request, obj, **kwargs),\n            \"min_num\": self.get_min_num(request, obj, **kwargs),\n            \"max_num\": self.get_max_num(request, obj, **kwargs),\n            \"can_delete\": can_delete,\n        }\n\n        defaults.update(kwargs)\n        base_model_form = defaults['form']\n\n        class DeleteProtectedModelForm(base_model_form):\n            def hand_clean_DELETE(self):\n                \"\"\"\n                We don't validate the 'DELETE' field itself because on\n                templates it's not rendered using the field information, but\n                just using a generic \"deletion_field\" of the InlineModelAdmin.\n                \"\"\"\n                if self.cleaned_data.get(DELETION_FIELD_NAME, False):\n                    using = router.db_for_write(self._meta.model)\n                    collector = NestedObjects(using=using)\n                    collector.collect([self.instance])\n                    if collector.protected:\n                        objs = []\n                        for p in collector.protected:\n                            objs.append(\n                                # Translators: Model verbose name and instance representation, suitable to be an item in a list\n                                _('%(class_name)s %(instance)s') % {\n                                    'class_name': p._meta.verbose_name,\n                                    'instance': p}\n                            )\n                        params = {'class_name': self._meta.model._meta.verbose_name,\n                                  'instance': self.instance,\n                                  'related_objects': get_text_list(objs, _('and'))}\n                        msg = _(\"Deleting %(class_name)s %(instance)s would require \"\n                                \"deleting the following protected related objects: \"\n                                \"%(related_objects)s\")\n                        raise ValidationError(msg, code='deleting_protected', params=params)\n\n            def is_valid(self):\n                result = super(DeleteProtectedModelForm, self).is_valid()\n                self.hand_clean_DELETE()\n                return result\n\n        defaults['form'] = DeleteProtectedModelForm\n\n        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        return inlineformset_factory(self.parent_model, self.model, **defaults)\n\n    def get_fields(self, request, obj=None):\n        if self.fields:\n            return self.fields\n        form = self.get_formset(request, obj, fields=None).form\n        return list(form.base_fields) + list(self.get_readonly_fields(request, obj))\n\n    def get_queryset(self, request):\n        queryset = super(InlineModelAdmin, self).get_queryset(request)\n        if not self.has_change_permission(request):\n            queryset = queryset.none()\n        return queryset\n\n    def has_add_permission(self, request):\n        if self.opts.auto_created:\n            # We're checking the rights to an auto-created intermediate model,\n            # which doesn't have its own individual permissions. The user needs\n            # to have the change permission for the related model in order to\n            # be able to do anything with the intermediate model.\n            return self.has_change_permission(request)\n        return super(InlineModelAdmin, self).has_add_permission(request)\n\n    def has_change_permission(self, request, obj=None):\n        opts = self.opts\n        if opts.auto_created:\n            # The model was auto-created as intermediary for a\n            # ManyToMany-relationship, find the target model\n            for field in opts.fields:\n                if field.rel and field.rel.to != self.parent_model:\n                    opts = field.rel.to._meta\n                    break\n        codename = get_permission_codename('change', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_delete_permission(self, request, obj=None):\n        if self.opts.auto_created:\n            # We're checking the rights to an auto-created intermediate model,\n            # which doesn't have its own individual permissions. The user needs\n            # to have the change permission for the related model in order to\n            # be able to do anything with the intermediate model.\n            return self.has_change_permission(request, obj)\n        return super(InlineModelAdmin, self).has_delete_permission(request, obj)\n\n\nclass StackedInline(InlineModelAdmin):\n    template = 'admin/edit_inline/stacked.html'\n\n\nclass TabularInline(InlineModelAdmin):\n    template = 'admin/edit_inline/tabular.html'\n", "from collections import OrderedDict\nimport sys\nimport warnings\n\nfrom django.core.exceptions import SuspiciousOperation, ImproperlyConfigured\nfrom django.core.paginator import InvalidPage\nfrom django.core.urlresolvers import reverse\nfrom django.db import models\nfrom django.db.models.fields import FieldDoesNotExist\nfrom django.utils import six\nfrom django.utils.deprecation import RenameMethodsBase, RemovedInDjango18Warning\nfrom django.utils.encoding import force_text\nfrom django.utils.translation import ugettext, ugettext_lazy\nfrom django.utils.http import urlencode\n\nfrom django.contrib.admin import FieldListFilter\nfrom django.contrib.admin.exceptions import DisallowedModelAdminLookup\nfrom django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\nfrom django.contrib.admin.utils import (quote, get_fields_from_path,\n    lookup_needs_distinct, prepare_lookup_value)\n\n# Changelist settings\nALL_VAR = 'all'\nORDER_VAR = 'o'\nORDER_TYPE_VAR = 'ot'\nPAGE_VAR = 'p'\nSEARCH_VAR = 'q'\nERROR_FLAG = 'e'\n\nIGNORED_PARAMS = (\n    ALL_VAR, ORDER_VAR, ORDER_TYPE_VAR, SEARCH_VAR, IS_POPUP_VAR, TO_FIELD_VAR)\n\n# Text to display within change-list table cells if the value is blank.\nEMPTY_CHANGELIST_VALUE = ugettext_lazy('(None)')\n\n\ndef _is_changelist_popup(request):\n    \"\"\"\n    Returns True if the popup GET parameter is set.\n\n    This function is introduced to facilitate deprecating the legacy\n    value for IS_POPUP_VAR and should be removed at the end of the\n    deprecation cycle.\n    \"\"\"\n\n    if IS_POPUP_VAR in request.GET:\n        return True\n\n    IS_LEGACY_POPUP_VAR = 'pop'\n    if IS_LEGACY_POPUP_VAR in request.GET:\n        warnings.warn(\n            \"The `%s` GET parameter has been renamed to `%s`.\" %\n            (IS_LEGACY_POPUP_VAR, IS_POPUP_VAR),\n            RemovedInDjango18Warning, 2)\n        return True\n\n    return False\n\n\nclass RenameChangeListMethods(RenameMethodsBase):\n    renamed_methods = (\n        ('get_query_set', 'get_queryset', RemovedInDjango18Warning),\n    )\n\n\nclass ChangeList(six.with_metaclass(RenameChangeListMethods)):\n    def __init__(self, request, model, list_display, list_display_links,\n            list_filter, date_hierarchy, search_fields, list_select_related,\n            list_per_page, list_max_show_all, list_editable, model_admin):\n        self.model = model\n        self.opts = model._meta\n        self.lookup_opts = self.opts\n        self.root_queryset = model_admin.get_queryset(request)\n        self.list_display = list_display\n        self.list_display_links = list_display_links\n        self.list_filter = list_filter\n        self.date_hierarchy = date_hierarchy\n        self.search_fields = search_fields\n        self.list_select_related = list_select_related\n        self.list_per_page = list_per_page\n        self.list_max_show_all = list_max_show_all\n        self.model_admin = model_admin\n        self.preserved_filters = model_admin.get_preserved_filters(request)\n\n        # Get search parameters from the query string.\n        try:\n            self.page_num = int(request.GET.get(PAGE_VAR, 0))\n        except ValueError:\n            self.page_num = 0\n        self.show_all = ALL_VAR in request.GET\n        self.is_popup = _is_changelist_popup(request)\n        self.to_field = request.GET.get(TO_FIELD_VAR)\n        self.params = dict(request.GET.items())\n        if PAGE_VAR in self.params:\n            del self.params[PAGE_VAR]\n        if ERROR_FLAG in self.params:\n            del self.params[ERROR_FLAG]\n\n        if self.is_popup:\n            self.list_editable = ()\n        else:\n            self.list_editable = list_editable\n        self.query = request.GET.get(SEARCH_VAR, '')\n        self.queryset = self.get_queryset(request)\n        self.get_results(request)\n        if self.is_popup:\n            title = ugettext('Select %s')\n        else:\n            title = ugettext('Select %s to change')\n        self.title = title % force_text(self.opts.verbose_name)\n        self.pk_attname = self.lookup_opts.pk.attname\n\n    @property\n    def root_query_set(self):\n        warnings.warn(\"`ChangeList.root_query_set` is deprecated, \"\n                      \"use `root_queryset` instead.\",\n                      RemovedInDjango18Warning, 2)\n        return self.root_queryset\n\n    @property\n    def query_set(self):\n        warnings.warn(\"`ChangeList.query_set` is deprecated, \"\n                      \"use `queryset` instead.\",\n                      RemovedInDjango18Warning, 2)\n        return self.queryset\n\n    def get_filters_params(self, params=None):\n        \"\"\"\n        Returns all params except IGNORED_PARAMS\n        \"\"\"\n        if not params:\n            params = self.params\n        lookup_params = params.copy()  # a dictionary of the query string\n        # Remove all the parameters that are globally and systematically\n        # ignored.\n        for ignored in IGNORED_PARAMS:\n            if ignored in lookup_params:\n                del lookup_params[ignored]\n        return lookup_params\n\n    def get_filters(self, request):\n        lookup_params = self.get_filters_params()\n        use_distinct = False\n\n        for key, value in lookup_params.items():\n            if not self.model_admin.lookup_allowed(key, value):\n                raise DisallowedModelAdminLookup(\"Filtering by %s not allowed\" % key)\n\n        filter_specs = []\n        if self.list_filter:\n            for list_filter in self.list_filter:\n                if callable(list_filter):\n                    # This is simply a custom list filter class.\n                    spec = list_filter(request, lookup_params,\n                        self.model, self.model_admin)\n                else:\n                    field_path = None\n                    if isinstance(list_filter, (tuple, list)):\n                        # This is a custom FieldListFilter class for a given field.\n                        field, field_list_filter_class = list_filter\n                    else:\n                        # This is simply a field name, so use the default\n                        # FieldListFilter class that has been registered for\n                        # the type of the given field.\n                        field, field_list_filter_class = list_filter, FieldListFilter.create\n                    if not isinstance(field, models.Field):\n                        field_path = field\n                        field = get_fields_from_path(self.model, field_path)[-1]\n                    spec = field_list_filter_class(field, request, lookup_params,\n                        self.model, self.model_admin, field_path=field_path)\n                    # Check if we need to use distinct()\n                    use_distinct = (use_distinct or\n                                    lookup_needs_distinct(self.lookup_opts,\n                                                          field_path))\n                if spec and spec.has_output():\n                    filter_specs.append(spec)\n\n        # At this point, all the parameters used by the various ListFilters\n        # have been removed from lookup_params, which now only contains other\n        # parameters passed via the query string. We now loop through the\n        # remaining parameters both to ensure that all the parameters are valid\n        # fields and to determine if at least one of them needs distinct(). If\n        # the lookup parameters aren't real fields, then bail out.\n        try:\n            for key, value in lookup_params.items():\n                lookup_params[key] = prepare_lookup_value(key, value)\n                use_distinct = (use_distinct or\n                                lookup_needs_distinct(self.lookup_opts, key))\n            return filter_specs, bool(filter_specs), lookup_params, use_distinct\n        except FieldDoesNotExist as e:\n            six.reraise(IncorrectLookupParameters, IncorrectLookupParameters(e), sys.exc_info()[2])\n\n    def get_query_string(self, new_params=None, remove=None):\n        if new_params is None:\n            new_params = {}\n        if remove is None:\n            remove = []\n        p = self.params.copy()\n        for r in remove:\n            for k in list(p):\n                if k.startswith(r):\n                    del p[k]\n        for k, v in new_params.items():\n            if v is None:\n                if k in p:\n                    del p[k]\n            else:\n                p[k] = v\n        return '?%s' % urlencode(sorted(p.items()))\n\n    def get_results(self, request):\n        paginator = self.model_admin.get_paginator(request, self.queryset, self.list_per_page)\n        # Get the number of objects, with admin filters applied.\n        result_count = paginator.count\n\n        # Get the total number of objects, with no admin filters applied.\n        # Perform a slight optimization:\n        # full_result_count is equal to paginator.count if no filters\n        # were applied\n        if self.get_filters_params() or self.params.get(SEARCH_VAR):\n            full_result_count = self.root_queryset.count()\n        else:\n            full_result_count = result_count\n        can_show_all = result_count <= self.list_max_show_all\n        multi_page = result_count > self.list_per_page\n\n        # Get the list of objects to display on this page.\n        if (self.show_all and can_show_all) or not multi_page:\n            result_list = self.queryset._clone()\n        else:\n            try:\n                result_list = paginator.page(self.page_num + 1).object_list\n            except InvalidPage:\n                raise IncorrectLookupParameters\n\n        self.result_count = result_count\n        self.full_result_count = full_result_count\n        self.result_list = result_list\n        self.can_show_all = can_show_all\n        self.multi_page = multi_page\n        self.paginator = paginator\n\n    def _get_default_ordering(self):\n        ordering = []\n        if self.model_admin.ordering:\n            ordering = self.model_admin.ordering\n        elif self.lookup_opts.ordering:\n            ordering = self.lookup_opts.ordering\n        return ordering\n\n    def get_ordering_field(self, field_name):\n        \"\"\"\n        Returns the proper model field name corresponding to the given\n        field_name to use for ordering. field_name may either be the name of a\n        proper model field or the name of a method (on the admin or model) or a\n        callable with the 'admin_order_field' attribute. Returns None if no\n        proper model field name can be matched.\n        \"\"\"\n        try:\n            field = self.lookup_opts.get_field(field_name)\n            return field.name\n        except models.FieldDoesNotExist:\n            # See whether field_name is a name of a non-field\n            # that allows sorting.\n            if callable(field_name):\n                attr = field_name\n            elif hasattr(self.model_admin, field_name):\n                attr = getattr(self.model_admin, field_name)\n            else:\n                attr = getattr(self.model, field_name)\n            return getattr(attr, 'admin_order_field', None)\n\n    def get_ordering(self, request, queryset):\n        \"\"\"\n        Returns the list of ordering fields for the change list.\n        First we check the get_ordering() method in model admin, then we check\n        the object's default ordering. Then, any manually-specified ordering\n        from the query string overrides anything. Finally, a deterministic\n        order is guaranteed by ensuring the primary key is used as the last\n        ordering field.\n        \"\"\"\n        params = self.params\n        ordering = list(self.model_admin.get_ordering(request)\n                        or self._get_default_ordering())\n        if ORDER_VAR in params:\n            # Clear ordering and used params\n            ordering = []\n            order_params = params[ORDER_VAR].split('.')\n            for p in order_params:\n                try:\n                    none, pfx, idx = p.rpartition('-')\n                    field_name = self.list_display[int(idx)]\n                    order_field = self.get_ordering_field(field_name)\n                    if not order_field:\n                        continue  # No 'admin_order_field', skip it\n                    # reverse order if order_field has already \"-\" as prefix\n                    if order_field.startswith('-') and pfx == \"-\":\n                        ordering.append(order_field[1:])\n                    else:\n                        ordering.append(pfx + order_field)\n                except (IndexError, ValueError):\n                    continue  # Invalid ordering specified, skip it.\n\n        # Add the given query's ordering fields, if any.\n        ordering.extend(queryset.query.order_by)\n\n        # Ensure that the primary key is systematically present in the list of\n        # ordering fields so we can guarantee a deterministic order across all\n        # database backends.\n        pk_name = self.lookup_opts.pk.name\n        if not (set(ordering) & set(['pk', '-pk', pk_name, '-' + pk_name])):\n            # The two sets do not intersect, meaning the pk isn't present. So\n            # we add it.\n            ordering.append('-pk')\n\n        return ordering\n\n    def get_ordering_field_columns(self):\n        \"\"\"\n        Returns an OrderedDict of ordering field column numbers and asc/desc\n        \"\"\"\n\n        # We must cope with more than one column having the same underlying sort\n        # field, so we base things on column numbers.\n        ordering = self._get_default_ordering()\n        ordering_fields = OrderedDict()\n        if ORDER_VAR not in self.params:\n            # for ordering specified on ModelAdmin or model Meta, we don't know\n            # the right column numbers absolutely, because there might be more\n            # than one column associated with that ordering, so we guess.\n            for field in ordering:\n                if field.startswith('-'):\n                    field = field[1:]\n                    order_type = 'desc'\n                else:\n                    order_type = 'asc'\n                for index, attr in enumerate(self.list_display):\n                    if self.get_ordering_field(attr) == field:\n                        ordering_fields[index] = order_type\n                        break\n        else:\n            for p in self.params[ORDER_VAR].split('.'):\n                none, pfx, idx = p.rpartition('-')\n                try:\n                    idx = int(idx)\n                except ValueError:\n                    continue  # skip it\n                ordering_fields[idx] = 'desc' if pfx == '-' else 'asc'\n        return ordering_fields\n\n    def get_queryset(self, request):\n        # First, we collect all the declared list filters.\n        (self.filter_specs, self.has_filters, remaining_lookup_params,\n         filters_use_distinct) = self.get_filters(request)\n\n        # Then, we let every list filter modify the queryset to its liking.\n        qs = self.root_queryset\n        for filter_spec in self.filter_specs:\n            new_qs = filter_spec.queryset(request, qs)\n            if new_qs is not None:\n                qs = new_qs\n\n        try:\n            # Finally, we apply the remaining lookup parameters from the query\n            # string (i.e. those that haven't already been processed by the\n            # filters).\n            qs = qs.filter(**remaining_lookup_params)\n        except (SuspiciousOperation, ImproperlyConfigured):\n            # Allow certain types of errors to be re-raised as-is so that the\n            # caller can treat them in a special way.\n            raise\n        except Exception as e:\n            # Every other error is caught with a naked except, because we don't\n            # have any other way of validating lookup parameters. They might be\n            # invalid if the keyword arguments are incorrect, or if the values\n            # are not in the correct type, so we might get FieldError,\n            # ValueError, ValidationError, or ?.\n            raise IncorrectLookupParameters(e)\n\n        if not qs.query.select_related:\n            qs = self.apply_select_related(qs)\n\n        # Set ordering.\n        ordering = self.get_ordering(request, qs)\n        qs = qs.order_by(*ordering)\n\n        # Apply search results\n        qs, search_use_distinct = self.model_admin.get_search_results(\n            request, qs, self.query)\n\n        # Remove duplicates from results, if necessary\n        if filters_use_distinct | search_use_distinct:\n            return qs.distinct()\n        else:\n            return qs\n\n    def apply_select_related(self, qs):\n        if self.list_select_related is True:\n            return qs.select_related()\n\n        if self.list_select_related is False:\n            if self.has_related_field_in_list_display():\n                return qs.select_related()\n\n        if self.list_select_related:\n            return qs.select_related(*self.list_select_related)\n        return qs\n\n    def has_related_field_in_list_display(self):\n        for field_name in self.list_display:\n            try:\n                field = self.lookup_opts.get_field(field_name)\n            except models.FieldDoesNotExist:\n                pass\n            else:\n                if isinstance(field.rel, models.ManyToOneRel):\n                    return True\n        return False\n\n    def url_for_result(self, result):\n        pk = getattr(result, self.pk_attname)\n        return reverse('admin:%s_%s_change' % (self.opts.app_label,\n                                               self.opts.model_name),\n                       args=(quote(pk),),\n                       current_app=self.model_admin.admin_site.name)\n", "=================\nDjango Exceptions\n=================\n\n\nDjango raises some Django specific exceptions as well as many standard\nPython exceptions.\n\nDjango Core Exceptions\n======================\n\n.. module:: django.core.exceptions\n    :synopsis: Django core exceptions\n\nDjango core exception classes are defined in :mod:`django.core.exceptions`.\n\nObjectDoesNotExist and DoesNotExist\n-----------------------------------\n.. exception:: DoesNotExist\n\n    The ``DoesNotExist`` exception is raised when an object is not found for\n    the given parameters of a query. Django provides a ``DoesNotExist``\n    exception as an attribute of each model class to identify the class of\n    object that could not be found and to allow you to catch a particular model\n    class with ``try/except``.\n\n.. exception:: ObjectDoesNotExist\n\n    The base class for ``DoesNotExist`` exceptions; a ``try/except`` for\n    ``ObjectDoesNotExist`` will catch ``DoesNotExist`` exceptions for all\n    models.\n\n    See :meth:`~django.db.models.query.QuerySet.get()` for further information\n    on :exc:`ObjectDoesNotExist` and :exc:`DoesNotExist`.\n\nMultipleObjectsReturned\n-----------------------\n.. exception:: MultipleObjectsReturned\n\n    The :exc:`MultipleObjectsReturned` exception is raised by a query if only\n    one object is expected, but multiple objects are returned. A base version\n    of this exception is provided in :mod:`django.core.exceptions`; each model\n    class contains a subclassed version that can be used to identify the\n    specific object type that has returned multiple objects.\n\n    See :meth:`~django.db.models.query.QuerySet.get()` for further information.\n\nSuspiciousOperation\n-------------------\n.. exception:: SuspiciousOperation\n\n    The :exc:`SuspiciousOperation` exception is raised when a user has\n    performed an operation that should be considered suspicious from a security\n    perspective, such as tampering with a session cookie. Subclasses of\n    SuspiciousOperation include:\n\n    * DisallowedHost\n    * DisallowedModelAdminLookup\n    * DisallowedRedirect\n    * InvalidSessionKey\n    * SuspiciousFileOperation\n    * SuspiciousMultipartForm\n    * SuspiciousSession\n    * WizardViewCookieModified\n\n    If a ``SuspiciousOperation`` exception reaches the WSGI handler level it is\n    logged at the ``Error`` level and results in\n    a :class:`~django.http.HttpResponseBadRequest`. See the :doc:`logging\n    documentation </topics/logging/>` for more information.\n\nPermissionDenied\n----------------\n.. exception:: PermissionDenied\n\n    The :exc:`PermissionDenied` exception is raised when a user does not have\n    permission to perform the action requested.\n\nViewDoesNotExist\n----------------\n.. exception:: ViewDoesNotExist\n\n    The :exc:`ViewDoesNotExist` exception is raised by\n    :mod:`django.core.urlresolvers` when a requested view does not exist.\n\nMiddlewareNotUsed\n-----------------\n.. exception:: MiddlewareNotUsed\n\n    The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not\n    used in the server configuration.\n\nImproperlyConfigured\n--------------------\n.. exception:: ImproperlyConfigured\n\n    The :exc:`ImproperlyConfigured` exception is raised when Django is\n    somehow improperly configured -- for example, if a value in ``settings.py``\n    is incorrect or unparseable.\n\nFieldError\n----------\n.. exception:: FieldError\n\n    The :exc:`FieldError` exception is raised when there is a problem with a\n    model field. This can happen for several reasons:\n\n    - A field in a model clashes with a field of the same name from an\n      abstract base class\n    - An infinite loop is caused by ordering\n    - A keyword cannot be parsed from the filter parameters\n    - A field cannot be determined from a keyword in the query\n      parameters\n    - A join is not permitted on the specified field\n    - A field name is invalid\n    - A query contains invalid order_by arguments\n\nValidationError\n---------------\n.. exception:: ValidationError\n\n    The :exc:`ValidationError` exception is raised when data fails form or\n    model field validation. For more information about validation, see\n    :doc:`Form and Field Validation </ref/forms/validation>`,\n    :ref:`Model Field Validation <validating-objects>` and the\n    :doc:`Validator Reference </ref/validators>`.\n\nNON_FIELD_ERRORS\n~~~~~~~~~~~~~~~~\n.. data:: NON_FIELD_ERRORS\n\n``ValidationError``\\s that don't belong to a particular field in a form\nor model are classified as ``NON_FIELD_ERRORS``. This constant is used\nas a key in dictionaries that otherwise map fields to their respective\nlist of errors.\n\n.. currentmodule:: django.core.urlresolvers\n\nURL Resolver exceptions\n=======================\n\nURL Resolver exceptions are defined in :mod:`django.core.urlresolvers`.\n\nResolver404\n--------------\n.. exception:: Resolver404\n\n    The :exc:`Resolver404` exception is raised by\n    :func:`django.core.urlresolvers.resolve()` if the path passed to\n    ``resolve()`` doesn't map to a view. It's a subclass of\n    :class:`django.http.Http404`\n\nNoReverseMatch\n--------------\n.. exception:: NoReverseMatch\n\n    The :exc:`NoReverseMatch` exception is raised by\n    :mod:`django.core.urlresolvers` when a matching URL in your URLconf\n    cannot be identified based on the parameters supplied.\n\n.. currentmodule:: django.db\n\nDatabase Exceptions\n===================\n\nDatabase exceptions are provided in :mod:`django.db`.\n\nDjango wraps the standard database exceptions so that your Django code has a\nguaranteed common implementation of these classes.\n\n.. exception:: Error\n.. exception:: InterfaceError\n.. exception:: DatabaseError\n.. exception:: DataError\n.. exception:: OperationalError\n.. exception:: IntegrityError\n.. exception:: InternalError\n.. exception:: ProgrammingError\n.. exception:: NotSupportedError\n\nThe Django wrappers for database exceptions behave exactly the same as\nthe underlying database exceptions. See :pep:`249`, the Python Database API\nSpecification v2.0, for further information.\n\nAs per :pep:`3134`, a ``__cause__`` attribute is set with the original\n(underlying) database exception, allowing access to any additional\ninformation provided. (Note that this attribute is available under\nboth Python 2 and Python 3, although :pep:`3134` normally only applies\nto Python 3.)\n\n.. versionchanged:: 1.6\n\n    Previous versions of Django only wrapped ``DatabaseError`` and\n    ``IntegrityError``, and did not provide ``__cause__``.\n\n.. exception:: models.ProtectedError\n\nRaised to prevent deletion of referenced objects when using\n:attr:`django.db.models.PROTECT`. :exc:`models.ProtectedError` is a subclass\nof :exc:`IntegrityError`.\n\n.. currentmodule:: django.http\n\nHttp Exceptions\n===============\n\nHttp exceptions are provided in :mod:`django.http`.\n\n.. exception:: UnreadablePostError\n\n    The :exc:`UnreadablePostError` is raised when a user cancels an upload.\n\n.. currentmodule:: django.db.transaction\n\nTransaction Exceptions\n======================\n\nTransaction exceptions are defined in :mod:`django.db.transaction`.\n\n.. exception:: TransactionManagementError\n\n    The :exc:`TransactionManagementError` is raised for any and all problems\n    related to database transactions.\n\nPython Exceptions\n=================\n\nDjango raises built-in Python exceptions when appropriate as well. See the\nPython documentation for further information on the :ref:`bltin-exceptions`.\n", "===========================\nDjango 1.4.14 release notes\n===========================\n\n*Under development*\n\nDjango 1.4.14 fixes several security issues in 1.4.13.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n", "==========================\nDjango 1.5.9 release notes\n==========================\n\n*Under development*\n\nDjango 1.5.9 fixes several security issues in 1.5.8.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n", "==========================\nDjango 1.6.6 release notes\n==========================\n\n*Under development*\n\nDjango 1.6.6 fixes several security issues and bugs in 1.6.5.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n\nBugfixes\n========\n\n* Corrected email and URL validation to reject a trailing dash\n  (:ticket:`22579`).\n\n* Prevented indexes on PostgreSQL virtual fields (:ticket:`22514`).\n\n* Prevented edge case where values of FK fields could be initialized with a\n  wrong value when an inline model formset is created for a relationship\n  defined to point to a field other than the PK (:ticket:`13794`).\n\n* Restored ``pre_delete``  signals for ``GenericRelation`` cascade deletion\n  (:ticket:`22998`).\n\n* Fixed transaction handling when specifying non-default database in\n  ``createcachetable`` and ``flush`` (:ticket:`23089`).\n\n* Fixed the \"ORA-01843: not a valid month\" errors when using Unicode\n  with older versions of Oracle server (:ticket:`20292`).\n\n* Restored bug fix for sending unicode email with Python 2.6.5 and below\n  (:ticket:`19107`).\n\n* Prevented ``UnicodeDecodeError`` in ``runserver`` with non-UTF-8 and\n  non-English locale (:ticket:`23265`).\n\n* Fixed JavaScript errors while editing multi-geometry objects in the OpenLayers\n  widget (:ticket:`23137`, :ticket:`23293`).\n\n* Prevented a crash on Python 3 with query strings containing unencoded\n  non-ASCII characters (:ticket:`22996`).\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport os\nimport re\nimport datetime\nimport unittest\n\nfrom django.conf import settings, global_settings\nfrom django.core import mail\nfrom django.core.checks import Error\nfrom django.core.files import temp as tempfile\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.core.urlresolvers import (NoReverseMatch,\n    get_script_prefix, reverse, set_script_prefix)\n# Register auth models with the admin.\nfrom django.contrib.auth import get_permission_codename\nfrom django.contrib.admin import ModelAdmin\nfrom django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\nfrom django.contrib.admin.models import LogEntry, DELETION\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.contrib.admin.utils import quote\nfrom django.contrib.admin.validation import ModelAdminValidator\nfrom django.contrib.admin.views.main import IS_POPUP_VAR\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.contrib.auth.models import Group, User, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.forms.utils import ErrorList\nfrom django.template.response import TemplateResponse\nfrom django.test import TestCase, skipUnlessDBFeature\nfrom django.test.utils import patch_logger\nfrom django.test import override_settings\nfrom django.utils import formats\nfrom django.utils import translation\nfrom django.utils.cache import get_max_age\nfrom django.utils.encoding import iri_to_uri, force_bytes, force_text\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode, urlquote\nfrom django.utils.six.moves.urllib.parse import parse_qsl, urljoin, urlparse\nfrom django.utils._os import upath\nfrom django.utils import six\n\n# local test models\nfrom .models import (Article, BarAccount, CustomArticle, EmptyModel, FooAccount,\n    Gallery, ModelWithStringPrimaryKey, Person, Persona, Picture, Podcast,\n    Section, Subscriber, Vodcast, Language, Collector, Widget, Grommet,\n    DooHickey, FancyDoodad, Whatsit, Category, Post, Plot, FunkyTag, Chapter,\n    Book, Promo, WorkHour, Employee, Question, Answer, Inquisition, Actor,\n    FoodDelivery, RowLevelChangePermissionModel, Paper, CoverLetter, Story,\n    OtherStory, ComplexSortedPerson, PluggableSearchPerson, Parent, Child, AdminOrderedField,\n    AdminOrderedModelMethod, AdminOrderedAdminMethod, AdminOrderedCallable,\n    Report, MainPrepopulated, RelatedPrepopulated, UnorderedObject,\n    Simple, UndeletableObject, UnchangeableObject, Choice, ShortMessage,\n    Telegram, Pizza, Topping, FilteredManager, City, Restaurant, Worker,\n    ParentWithDependentChildren, Character, FieldOverridePost, Color2)\nfrom .admin import site, site2, CityAdmin\n\n\nERROR_MESSAGE = \"Please enter the correct username and password \\\nfor a staff account. Note that both fields may be case-sensitive.\"\nADMIN_VIEW_TEMPLATES_DIR = settings.TEMPLATE_DIRS + (os.path.join(os.path.dirname(upath(__file__)), 'templates'),)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',),\n                   USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\nclass AdminViewBasicTestCase(TestCase):\n    fixtures = ['admin-views-users.xml', 'admin-views-colors.xml',\n                'admin-views-fabrics.xml', 'admin-views-books.xml']\n\n    # Store the bit of the URL where the admin is registered as a class\n    # variable. That way we can test a second AdminSite just by subclassing\n    # this test case and changing urlbit.\n    urlbit = 'admin'\n\n    urls = \"admin_views.urls\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n        formats.reset_format_cache()\n\n    def assertContentBefore(self, response, text1, text2, failing_msg=None):\n        \"\"\"\n        Testing utility asserting that text1 appears before text2 in response\n        content.\n        \"\"\"\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(response.content.index(force_bytes(text1)) < response.content.index(force_bytes(text2)),\n            failing_msg)\n\n\nclass AdminViewBasicTest(AdminViewBasicTestCase):\n    def test_trailing_slash_required(self):\n        \"\"\"\n        If you leave off the trailing slash, app should redirect and add it.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/add' % self.urlbit)\n        self.assertRedirects(response,\n            '/test_admin/%s/admin_views/article/add/' % self.urlbit,\n            status_code=301)\n\n    def test_admin_static_template_tag(self):\n        \"\"\"\n        Test that admin_static.static is pointing to the collectstatic version\n        (as django.contrib.collectstatic is in installed apps).\n        \"\"\"\n        old_url = staticfiles_storage.base_url\n        staticfiles_storage.base_url = '/test/'\n        try:\n            self.assertEqual(static('path'), '/test/path')\n        finally:\n            staticfiles_storage.base_url = old_url\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the add_view works.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit, {'name': 'My Section'})\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'value=\"My Section\"',\n            msg_prefix=\"Couldn't find an input with the right value in the response\")\n\n    def test_basic_edit_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the change_view works.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/1/' % self.urlbit)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_basic_edit_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works (returns an HTTP 404 error, see\n        #11191) when passing a string as the PK argument for a model with an\n        integer PK field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/abc/' % self.urlbit)\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_inheritance_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works on inherited models (returns an\n        HTTP 404 error, see #19951) when passing a string as the PK argument\n        for a model with an integer PK field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/supervillain/abc/' % self.urlbit)\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            \"name\": \"Another Section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"3\",\n            \"article_set-INITIAL_FORMS\": \"0\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post('/test_admin/%s/admin_views/section/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_popup_add_POST(self):\n        \"\"\"\n        Ensure http response from a popup is properly escaped.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            'title': 'title with a new\\nline',\n            'content': 'some content',\n            'date_0': '2010-09-10',\n            'date_1': '14:55:39',\n        }\n        response = self.client.post('/test_admin/%s/admin_views/article/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddAnotherPopup')\n        self.assertContains(response, 'title with a new\\\\u000Aline')\n\n    # Post data for edit inline\n    inline_post_data = {\n        \"name\": \"Test section\",\n        # inline data\n        \"article_set-TOTAL_FORMS\": \"6\",\n        \"article_set-INITIAL_FORMS\": \"3\",\n        \"article_set-MAX_NUM_FORMS\": \"0\",\n        \"article_set-0-id\": \"1\",\n        # there is no title in database, give one here or formset will fail.\n        \"article_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n        \"article_set-0-content\": \"&lt;p&gt;Middle content&lt;/p&gt;\",\n        \"article_set-0-date_0\": \"2008-03-18\",\n        \"article_set-0-date_1\": \"11:54:58\",\n        \"article_set-0-section\": \"1\",\n        \"article_set-1-id\": \"2\",\n        \"article_set-1-title\": \"Need a title.\",\n        \"article_set-1-content\": \"&lt;p&gt;Oldest content&lt;/p&gt;\",\n        \"article_set-1-date_0\": \"2000-03-18\",\n        \"article_set-1-date_1\": \"11:54:58\",\n        \"article_set-2-id\": \"3\",\n        \"article_set-2-title\": \"Need a title.\",\n        \"article_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n        \"article_set-2-date_0\": \"2009-03-18\",\n        \"article_set-2-date_1\": \"11:54:58\",\n        \"article_set-3-id\": \"\",\n        \"article_set-3-title\": \"\",\n        \"article_set-3-content\": \"\",\n        \"article_set-3-date_0\": \"\",\n        \"article_set-3-date_1\": \"\",\n        \"article_set-4-id\": \"\",\n        \"article_set-4-title\": \"\",\n        \"article_set-4-content\": \"\",\n        \"article_set-4-date_0\": \"\",\n        \"article_set-4-date_1\": \"\",\n        \"article_set-5-id\": \"\",\n        \"article_set-5-title\": \"\",\n        \"article_set-5-content\": \"\",\n        \"article_set-5-date_0\": \"\",\n        \"article_set-5-date_1\": \"\",\n    }\n\n    def test_basic_edit_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on edit_view works.\n        \"\"\"\n        response = self.client.post('/test_admin/%s/admin_views/section/1/' % self.urlbit, self.inline_post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as(self):\n        \"\"\"\n        Test \"save as\".\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-3-section\": \"1\",\n            \"article_set-4-section\": \"1\",\n            \"article_set-5-section\": \"1\",\n        })\n        response = self.client.post('/test_admin/%s/admin_views/section/1/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_change_list_sorting_callable(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a callable\n        (column 2 is callable_year in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': 2})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on callable are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on callable are out of order.\")\n\n    def test_change_list_sorting_model(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a Model method\n        (column 3 is 'model_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '-3'})\n        self.assertContentBefore(response, 'Newest content', 'Middle content',\n            \"Results of sorting on Model method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Oldest content',\n            \"Results of sorting on Model method are out of order.\")\n\n    def test_change_list_sorting_model_admin(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin method\n        (column 4 is 'modeladmin_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '4'})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_model_admin_reverse(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin\n        method in reverse order (i.e. admin_order_field uses the '-' prefix)\n        (column 6 is 'model_year_reverse' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '6'})\n        self.assertContentBefore(response, '2009', '2008',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008', '2000',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        # Let's make sure the ordering is right and that we don't get a\n        # FieldError when we change to descending order\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '-6'})\n        self.assertContentBefore(response, '2000', '2008',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008', '2009',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_multiple(self):\n        p1 = Person.objects.create(name=\"Chris\", gender=1, alive=True)\n        p2 = Person.objects.create(name=\"Chris\", gender=2, alive=True)\n        p3 = Person.objects.create(name=\"Bob\", gender=1, alive=True)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # Sort by name, gender\n        # This hard-codes the URL because it'll fail if it runs against the\n        # 'admin2' custom admin (which doesn't have the Person model).\n        response = self.client.get('/test_admin/admin/admin_views/person/', {'o': '1.2'})\n        self.assertContentBefore(response, link3, link1)\n        self.assertContentBefore(response, link1, link2)\n\n        # Sort by gender descending, name\n        response = self.client.get('/test_admin/admin/admin_views/person/', {'o': '-2.1'})\n        self.assertContentBefore(response, link2, link3)\n        self.assertContentBefore(response, link3, link1)\n\n    def test_change_list_sorting_preserve_queryset_ordering(self):\n        \"\"\"\n        If no ordering is defined in `ModelAdmin.ordering` or in the query\n        string, then the underlying order of the queryset should not be\n        changed, even if it is defined in `Modeladmin.get_queryset()`.\n        Refs #11868, #7309.\n        \"\"\"\n        p1 = Person.objects.create(name=\"Amy\", gender=1, alive=True, age=80)\n        p2 = Person.objects.create(name=\"Bob\", gender=1, alive=True, age=70)\n        p3 = Person.objects.create(name=\"Chris\", gender=2, alive=False, age=60)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # This hard-codes the URL because it'll fail if it runs against the\n        # 'admin2' custom admin (which doesn't have the Person model).\n        response = self.client.get('/test_admin/admin/admin_views/person/', {})\n        self.assertContentBefore(response, link3, link2)\n        self.assertContentBefore(response, link2, link1)\n\n    def test_change_list_sorting_model_meta(self):\n        # Test ordering on Model Meta is respected\n\n        l1 = Language.objects.create(iso='ur', name='Urdu')\n        l2 = Language.objects.create(iso='ar', name='Arabic')\n        link1 = reverse('admin:admin_views_language_change', args=(quote(l1.pk),))\n        link2 = reverse('admin:admin_views_language_change', args=(quote(l2.pk),))\n\n        response = self.client.get('/test_admin/admin/admin_views/language/', {})\n        self.assertContentBefore(response, link2, link1)\n\n        # Test we can override with query string\n        response = self.client.get('/test_admin/admin/admin_views/language/', {'o': '-1'})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_change_list_sorting_override_model_admin(self):\n        # Test ordering on Model Admin is respected, and overrides Model Meta\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_podcast_change', args=(p2.pk,))\n\n        response = self.client.get('/test_admin/admin/admin_views/podcast/', {})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_multiple_sort_same_field(self):\n        # Check that we get the columns we expect if we have two columns\n        # that correspond to the same ordering field\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(quote(p1.pk),))\n        link2 = reverse('admin:admin_views_podcast_change', args=(quote(p2.pk),))\n\n        response = self.client.get('/test_admin/admin/admin_views/podcast/', {})\n        self.assertContentBefore(response, link1, link2)\n\n        p1 = ComplexSortedPerson.objects.create(name=\"Bob\", age=10)\n        p2 = ComplexSortedPerson.objects.create(name=\"Amy\", age=20)\n        link1 = reverse('admin:admin_views_complexsortedperson_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_complexsortedperson_change', args=(p2.pk,))\n\n        response = self.client.get('/test_admin/admin/admin_views/complexsortedperson/', {})\n        # Should have 5 columns (including action checkbox col)\n        self.assertContains(response, '<th scope=\"col\"', count=5)\n\n        self.assertContains(response, 'Name')\n        self.assertContains(response, 'Colored name')\n\n        # Check order\n        self.assertContentBefore(response, 'Name', 'Colored name')\n\n        # Check sorting - should be by name\n        self.assertContentBefore(response, link2, link1)\n\n    def test_sort_indicators_admin_order(self):\n        \"\"\"\n        Ensures that the admin shows default sort indicators for all\n        kinds of 'ordering' fields: field names, method on the model\n        admin and model itself, and other callables. See #17252.\n        \"\"\"\n        models = [(AdminOrderedField, 'adminorderedfield'),\n                  (AdminOrderedModelMethod, 'adminorderedmodelmethod'),\n                  (AdminOrderedAdminMethod, 'adminorderedadminmethod'),\n                  (AdminOrderedCallable, 'adminorderedcallable')]\n        for model, url in models:\n            model.objects.create(stuff='The Last Item', order=3)\n            model.objects.create(stuff='The First Item', order=1)\n            model.objects.create(stuff='The Middle Item', order=2)\n            response = self.client.get('/test_admin/admin/admin_views/%s/' % url, {})\n            self.assertEqual(response.status_code, 200)\n            # Should have 3 columns including action checkbox col.\n            self.assertContains(response, '<th scope=\"col\"', count=3, msg_prefix=url)\n            # Check if the correct column was selected. 2 is the index of the\n            # 'order' column in the model admin's 'list_display' with 0 being\n            # the implicit 'action_checkbox' and 1 being the column 'stuff'.\n            self.assertEqual(response.context['cl'].get_ordering_field_columns(), {2: 'asc'})\n            # Check order of records.\n            self.assertContentBefore(response, 'The First Item', 'The Middle Item')\n            self.assertContentBefore(response, 'The Middle Item', 'The Last Item')\n\n    def test_limited_filter(self):\n        \"\"\"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\n        This also tests relation-spanning filters (e.g. 'color__value').\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">',\n            msg_prefix=\"Expected filter not found in changelist view\")\n        self.assertNotContains(response, '<a href=\"?color__id__exact=3\">Blue</a>',\n            msg_prefix=\"Changelist filter not correctly limited by limit_choices_to\")\n\n    def test_relation_spanning_filters(self):\n        response = self.client.get('/test_admin/%s/admin_views/chapterxtra1/' %\n                                   self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        filters = {\n            'chap__id__exact': dict(\n                values=[c.id for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.id == value),\n            'chap__title': dict(\n                values=[c.title for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.title == value),\n            'chap__book__id__exact': dict(\n                values=[b.id for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.id == value),\n            'chap__book__name': dict(\n                values=[b.name for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.name == value),\n            'chap__book__promo__id__exact': dict(\n                values=[p.id for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(id=value).exists()),\n            'chap__book__promo__name': dict(\n                values=[p.name for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(name=value).exists()),\n        }\n        for filter_path, params in filters.items():\n            for value in params['values']:\n                query_string = urlencode({filter_path: value})\n                # ensure filter link exists\n                self.assertContains(response, '<a href=\"?%s\">' % query_string)\n                # ensure link works\n                filtered_response = self.client.get(\n                    '/test_admin/%s/admin_views/chapterxtra1/?%s' % (\n                        self.urlbit, query_string))\n                self.assertEqual(filtered_response.status_code, 200)\n                # ensure changelist contains only valid objects\n                for obj in filtered_response.context['cl'].queryset.all():\n                    self.assertTrue(params['test'](obj, value))\n\n    def test_incorrect_lookup_parameters(self):\n        \"\"\"Ensure incorrect lookup parameters are handled gracefully.\"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield': '5'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        # Spanning relationships through an inexistant related object (Refs #16716)\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield__whatever': '5'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'color__id__exact': 'StringNotInteger!'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        # Regression test for #18530\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'pub_date__gte': 'foo'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n    def test_isnull_lookups(self):\n        \"\"\"Ensure is_null is handled correctly.\"\"\"\n        Article.objects.create(title=\"I Could Go Anywhere\", content=\"Versatile\", date=datetime.datetime.now())\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, '4 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': 'false'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': '0'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': 'true'})\n        self.assertContains(response, '1 article')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': '1'})\n        self.assertContains(response, '1 article')\n\n    def test_logout_and_password_change_URLs(self):\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, '<a href=\"/test_admin/%s/logout/\">' % self.urlbit)\n        self.assertContains(response, '<a href=\"/test_admin/%s/password_change/\">' % self.urlbit)\n\n    def test_named_group_field_choices_change_list(self):\n        \"\"\"\n        Ensures the admin changelist shows correct values in the relevant column\n        for rows corresponding to instances of a model in which a named group\n        has been used in the choices option of a field.\n        \"\"\"\n        link1 = reverse('admin:admin_views_fabric_change', args=(1,), current_app=self.urlbit)\n        link2 = reverse('admin:admin_views_fabric_change', args=(2,), current_app=self.urlbit)\n        response = self.client.get('/test_admin/%s/admin_views/fabric/' % self.urlbit)\n        fail_msg = \"Changelist table isn't showing the right human-readable values set by a model field 'choices' option named group.\"\n        self.assertContains(response, '<a href=\"%s\">Horizontal</a>' % link1, msg_prefix=fail_msg, html=True)\n        self.assertContains(response, '<a href=\"%s\">Vertical</a>' % link2, msg_prefix=fail_msg, html=True)\n\n    def test_named_group_field_choices_filter(self):\n        \"\"\"\n        Ensures the filter UI shows correctly when at least one named group has\n        been used in the choices option of a model field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/fabric/' % self.urlbit)\n        fail_msg = \"Changelist filter isn't showing options contained inside a model field 'choices' option named group.\"\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        self.assertContains(response,\n            '<a href=\"?surface__exact=x\">Horizontal</a>', msg_prefix=fail_msg, html=True)\n        self.assertContains(response,\n            '<a href=\"?surface__exact=y\">Vertical</a>', msg_prefix=fail_msg, html=True)\n\n    def test_change_list_null_boolean_display(self):\n        Post.objects.create(public=None)\n        # This hard-codes the URl because it'll fail if it runs\n        # against the 'admin2' custom admin (which doesn't have the\n        # Post model).\n        response = self.client.get(\"/test_admin/admin/admin_views/post/\")\n        self.assertContains(response, 'icon-unknown.gif')\n\n    def test_i18n_language_non_english_default(self):\n        \"\"\"\n        Check if the JavaScript i18n view returns an empty language catalog\n        if the default language is non-English but the selected language\n        is English. See #13388 and #3594 for more details.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertNotContains(response, 'Choisir une heure')\n\n    def test_i18n_language_non_english_fallback(self):\n        \"\"\"\n        Makes sure that the fallback language is still working properly\n        in cases where the selected language cannot be found.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertContains(response, 'Choisir une heure')\n\n    def test_l10n_deactivated(self):\n        \"\"\"\n        Check if L10N is deactivated, the JavaScript i18n view doesn't\n        return localized date/time formats. Refs #14824.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertNotContains(response, '%d.%m.%Y %H:%M:%S')\n            self.assertContains(response, '%Y-%m-%d %H:%M:%S')\n\n    def test_disallowed_filtering(self):\n        with patch_logger('django.security.DisallowedModelAdminLookup', 'error') as calls:\n            response = self.client.get(\"/test_admin/admin/admin_views/album/?owner__email__startswith=fuzzy\")\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Filters are allowed if explicitly included in list_filter\n        response = self.client.get(\"/test_admin/admin/admin_views/thing/?color__value__startswith=red\")\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(\"/test_admin/admin/admin_views/thing/?color__value=red\")\n        self.assertEqual(response.status_code, 200)\n\n        # Filters should be allowed if they involve a local field without the\n        # need to whitelist them in list_filter or date_hierarchy.\n        response = self.client.get(\"/test_admin/admin/admin_views/person/?age__gt=30\")\n        self.assertEqual(response.status_code, 200)\n\n        e1 = Employee.objects.create(name='Anonymous', gender=1, age=22, alive=True, code='123')\n        e2 = Employee.objects.create(name='Visitor', gender=2, age=19, alive=True, code='124')\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e1)\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e2)\n        response = self.client.get(\"/test_admin/admin/admin_views/workhour/\")\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'employee__person_ptr__exact')\n        response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n        self.assertEqual(response.status_code, 200)\n\n    def test_allowed_filtering_15103(self):\n        \"\"\"\n        Regressions test for ticket 15103 - filtering on fields defined in a\n        ForeignKey 'limit_choices_to' should be allowed, otherwise raw_id_fields\n        can break.\n        \"\"\"\n        # Filters should be allowed if they are defined on a ForeignKey pointing to this model\n        response = self.client.get(\"/test_admin/admin/admin_views/inquisition/?leader__name=Palin&leader__age=27\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_popup_dismiss_related(self):\n        \"\"\"\n        Regression test for ticket 20664 - ensure the pk is properly quoted.\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        response = self.client.get(\"/test_admin/admin/admin_views/actor/?%s\" % IS_POPUP_VAR)\n        self.assertContains(response, \"opener.dismissRelatedLookupPopup(window, &#39;%s&#39;)\" % actor.pk)\n\n    def test_hide_change_password(self):\n        \"\"\"\n        Tests if the \"change password\" link in the admin is hidden if the User\n        does not have a usable password set.\n        (against 9bea85795705d015cdadc82c68b99196a8554f5c)\n        \"\"\"\n        user = User.objects.get(username='super')\n        user.set_unusable_password()\n        user.save()\n\n        response = self.client.get('/test_admin/admin/')\n        self.assertNotContains(response, reverse('admin:password_change'),\n            msg_prefix='The \"change password\" link should not be displayed if a user does not have a usable password.')\n\n    def test_change_view_with_show_delete_extra_context(self):\n        \"\"\"\n        Ensured that the 'show_delete' context variable in the admin's change\n        view actually controls the display of the delete button.\n        Refs #10057.\n        \"\"\"\n        instance = UndeletableObject.objects.create(name='foo')\n        response = self.client.get('/test_admin/%s/admin_views/undeletableobject/%d/' %\n                                   (self.urlbit, instance.pk))\n        self.assertNotContains(response, 'deletelink')\n\n    def test_allows_attributeerror_to_bubble_up(self):\n        \"\"\"\n        Ensure that AttributeErrors are allowed to bubble when raised inside\n        a change list view.\n\n        Requires a model to be created so there's something to be displayed\n\n        Refs: #16655, #18593, and #18747\n        \"\"\"\n        Simple.objects.create()\n        with self.assertRaises(AttributeError):\n            self.client.get('/test_admin/%s/admin_views/simple/' % self.urlbit)\n\n    def test_changelist_with_no_change_url(self):\n        \"\"\"\n        ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url\n        for change_view is removed from get_urls\n\n        Regression test for #20934\n        \"\"\"\n        UnchangeableObject.objects.create()\n        response = self.client.get('/test_admin/admin/admin_views/unchangeableobject/')\n        self.assertEqual(response.status_code, 200)\n        # Check the format of the shown object -- shouldn't contain a change link\n        self.assertContains(response, '<th class=\"field-__str__\">UnchangeableObject object</th>', html=True)\n\n    def test_invalid_appindex_url(self):\n        \"\"\"\n        #21056 -- URL reversing shouldn't work for nonexistent apps.\n        \"\"\"\n        good_url = '/test_admin/admin/admin_views/'\n        confirm_good_url = reverse('admin:app_list',\n                                   kwargs={'app_label': 'admin_views'})\n        self.assertEqual(good_url, confirm_good_url)\n\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', kwargs={'app_label': 'this_should_fail'})\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', args=('admin_views2',))\n\n    def test_proxy_model_content_type_is_used_for_log_entries(self):\n        \"\"\"\n        Log entries for proxy models should have the proxy model's content\n        type.\n\n        Regression test for #21084.\n        \"\"\"\n        color2_content_type = ContentType.objects.get_for_model(Color2, for_concrete_model=False)\n\n        # add\n        color2_add_url = reverse('admin:admin_views_color2_add')\n        self.client.post(color2_add_url, {'value': 'orange'})\n\n        color2_addition_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_addition_log.content_type)\n\n        # change\n        color_id = color2_addition_log.object_id\n        color2_change_url = reverse('admin:admin_views_color2_change', args=(color_id,))\n\n        self.client.post(color2_change_url, {'value': 'blue'})\n\n        color2_change_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_change_log.content_type)\n\n        # delete\n        color2_delete_url = reverse('admin:admin_views_color2_delete', args=(color_id,))\n        self.client.post(color2_delete_url)\n\n        color2_delete_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_delete_log.content_type)\n\n\n@override_settings(TEMPLATE_DIRS=ADMIN_VIEW_TEMPLATES_DIR)\nclass AdminCustomTemplateTests(AdminViewBasicTestCase):\n    def test_extended_bodyclass_template_change_form(self):\n        \"\"\"\n        Ensure that the admin/change_form.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_change_password(self):\n        \"\"\"\n        Ensure that the auth/user/change_password.html template uses block\n        super in the bodyclass block.\n        \"\"\"\n        user = User.objects.get(username='super')\n        response = self.client.get('/test_admin/%s/auth/user/%s/password/' % (self.urlbit, user.id))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_index(self):\n        \"\"\"\n        Ensure that the admin/index.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_change_list(self):\n        \"\"\"\n        Ensure that the admin/change_list.html' template uses block.super\n        in the bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_login(self):\n        \"\"\"\n        Ensure that the admin/login.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        self.client.logout()\n        response = self.client.get('/test_admin/%s/login/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_confirmation.html template uses\n        block.super in the bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        response = self.client.get('/test_admin/%s/auth/group/%s/delete/' % (self.urlbit, group.id))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_selected_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_selected_confirmation.html template uses\n        block.super in bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        post_data = {\n            'action': 'delete_selected',\n            'selected_across': '0',\n            'index': '0',\n            '_selected_action': group.id\n        }\n        response = self.client.post('/test_admin/%s/auth/group/' % (self.urlbit), post_data)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_filter_with_custom_template(self):\n        \"\"\"\n        Ensure that one can use a custom template to render an admin filter.\n        Refs #17515.\n        \"\"\"\n        response = self.client.get(\"/test_admin/admin/admin_views/color2/\")\n        self.assertTemplateUsed(response, 'custom_filter_template.html')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewFormUrlTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = [\"admin-views-users.xml\"]\n    urlbit = \"admin3\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_change_form_URL_has_correct_value(self):\n        \"\"\"\n        Tests whether change_view has form_url in response.context\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/1/' % self.urlbit)\n        self.assertTrue('form_url' in response.context, msg='form_url not present in response.context')\n        self.assertEqual(response.context['form_url'], 'pony')\n\n    def test_initial_data_can_be_overridden(self):\n        \"\"\"\n        Tests that the behavior for setting initial\n        form data can be overridden in the ModelAdmin class.\n\n        Usually, the initial value is set via the GET params.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/restaurant/add/' % self.urlbit, {'name': 'test_value'})\n        # this would be the usual behaviour\n        self.assertNotContains(response, 'value=\"test_value\"')\n        # this is the overridden behaviour\n        self.assertContains(response, 'value=\"overridden_value\"')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminJavaScriptTest(TestCase):\n    fixtures = ['admin-views-users.xml']\n\n    urls = \"admin_views.urls\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_js_minified_only_if_debug_is_false(self):\n        \"\"\"\n        Ensure that the minified versions of the JS files are only used when\n        DEBUG is False.\n        Refs #17521.\n        \"\"\"\n        with override_settings(DEBUG=False):\n            response = self.client.get(\n                '/test_admin/%s/admin_views/section/add/' % 'admin')\n            self.assertNotContains(response, 'jquery.js')\n            self.assertContains(response, 'jquery.min.js')\n            self.assertNotContains(response, 'prepopulate.js')\n            self.assertContains(response, 'prepopulate.min.js')\n            self.assertNotContains(response, 'actions.js')\n            self.assertContains(response, 'actions.min.js')\n            self.assertNotContains(response, 'collapse.js')\n            self.assertContains(response, 'collapse.min.js')\n            self.assertNotContains(response, 'inlines.js')\n            self.assertContains(response, 'inlines.min.js')\n        with override_settings(DEBUG=True):\n            response = self.client.get(\n                '/test_admin/%s/admin_views/section/add/' % 'admin')\n            self.assertContains(response, 'jquery.js')\n            self.assertNotContains(response, 'jquery.min.js')\n            self.assertContains(response, 'prepopulate.js')\n            self.assertNotContains(response, 'prepopulate.min.js')\n            self.assertContains(response, 'actions.js')\n            self.assertNotContains(response, 'actions.min.js')\n            self.assertContains(response, 'collapse.js')\n            self.assertNotContains(response, 'collapse.min.js')\n            self.assertContains(response, 'inlines.js')\n            self.assertNotContains(response, 'inlines.min.js')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SaveAsTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-person.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_as_duplication(self):\n        \"\"\"Ensure save as actually creates a new person\"\"\"\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 1, 'age': 42}\n        self.client.post('/test_admin/admin/admin_views/person/1/', post_data)\n        self.assertEqual(len(Person.objects.filter(name='John M')), 1)\n        self.assertEqual(len(Person.objects.filter(id=1)), 1)\n\n    def test_save_as_display(self):\n        \"\"\"\n        Ensure that 'save as' is displayed when activated and after submitting\n        invalid data aside save_as_new will not show us a form to overwrite the\n        initial model.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/1/')\n        self.assertTrue(response.context['save_as'])\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 3, 'alive': 'checked'}\n        response = self.client.post('/test_admin/admin/admin_views/person/1/', post_data)\n        self.assertEqual(response.context['form_url'], '/test_admin/admin/admin_views/person/add/')\n\n\nclass CustomModelAdminTest(AdminViewBasicTestCase):\n    urls = \"admin_views.urls\"\n    urlbit = \"admin2\"\n\n    def test_custom_admin_site_login_form(self):\n        self.client.logout()\n        response = self.client.get('/test_admin/admin2/', follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n        login = self.client.post('/test_admin/admin2/login/', {\n            REDIRECT_FIELD_NAME: '/test_admin/admin2/',\n            'username': 'customform',\n            'password': 'secret',\n        }, follow=True)\n        self.assertIsInstance(login, TemplateResponse)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'custom form error')\n\n    def test_custom_admin_site_login_template(self):\n        self.client.logout()\n        response = self.client.get('/test_admin/admin2/', follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/login.html')\n        self.assertContains(response, 'Hello from a custom login template')\n\n    def test_custom_admin_site_logout_template(self):\n        response = self.client.get('/test_admin/admin2/logout/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/logout.html')\n        self.assertContains(response, 'Hello from a custom logout template')\n\n    def test_custom_admin_site_index_view_and_template(self):\n        try:\n            response = self.client.get('/test_admin/admin2/')\n        except TypeError:\n            self.fail('AdminSite.index_template should accept a list of template paths')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/index.html')\n        self.assertContains(response, 'Hello from a custom index template *bar*')\n\n    def test_custom_admin_site_app_index_view_and_template(self):\n        response = self.client.get('/test_admin/admin2/admin_views/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/app_index.html')\n        self.assertContains(response, 'Hello from a custom app_index template')\n\n    def test_custom_admin_site_password_change_template(self):\n        response = self.client.get('/test_admin/admin2/password_change/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'Hello from a custom password change form template')\n\n    def test_custom_admin_site_password_change_done_template(self):\n        response = self.client.get('/test_admin/admin2/password_change/done/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_done.html')\n        self.assertContains(response, 'Hello from a custom password change done template')\n\n    def test_custom_admin_site_view(self):\n        self.client.login(username='super', password='secret')\n        response = self.client.get('/test_admin/%s/my_view/' % self.urlbit)\n        self.assertEqual(response.content, b\"Django is a magical pony!\")\n\n    def test_pwd_change_custom_template(self):\n        self.client.login(username='super', password='secret')\n        su = User.objects.get(username='super')\n        try:\n            response = self.client.get('/test_admin/admin4/auth/user/%s/password/' % su.pk)\n        except TypeError:\n            self.fail('ModelAdmin.change_user_password_template should accept a list of template paths')\n        self.assertEqual(response.status_code, 200)\n\n\ndef get_perm(Model, perm):\n    \"\"\"Return the permission object, for the Model\"\"\"\n    ct = ContentType.objects.get_for_model(Model)\n    return Permission.objects.get(content_type=ct, codename=perm)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewPermissionsTest(TestCase):\n    \"\"\"Tests for Admin Views Permissions.\"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        \"\"\"Test setup.\"\"\"\n        # Setup permissions, for our users who can add, change, and delete.\n        # We can't put this into the fixture, because the content type id\n        # and the permission id could be different on each run of the test.\n\n        opts = Article._meta\n\n        # User who can add Articles\n        add_user = User.objects.get(username='adduser')\n        add_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('add', opts)))\n\n        # User who can change Articles\n        change_user = User.objects.get(username='changeuser')\n        change_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('change', opts)))\n\n        # User who can delete Articles\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('delete', opts)))\n\n        delete_user.user_permissions.add(get_perm(Section,\n            get_permission_codename('delete', Section._meta)))\n\n        # login POST dicts\n        self.super_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super',\n            'password': 'secret',\n        }\n        self.super_email_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super@example.com',\n            'password': 'secret',\n        }\n        self.super_email_bad_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super@example.com',\n            'password': 'notsecret',\n        }\n        self.adduser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'adduser',\n            'password': 'secret',\n        }\n        self.changeuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n        self.deleteuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'deleteuser',\n            'password': 'secret',\n        }\n        self.joepublic_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'joepublic',\n            'password': 'secret',\n        }\n        self.no_username_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'password': 'secret',\n        }\n\n    def test_login(self):\n        \"\"\"\n        Make sure only staff members can log in.\n\n        Successful posts to the login page will redirect to the original url.\n        Unsuccessful attempts will continue to render the login page with\n        a 200 status code.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        # Super User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Test if user enters email address\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        # only correct passwords get a username hint\n        login = self.client.post(login_url, self.super_email_bad_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        new_user = User(username='jondoe', password='secret', email='super@example.com')\n        new_user.save()\n        # check to ensure if there are multiple email addresses a user doesn't get a 500\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Add User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.adduser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Change User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.changeuser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Delete User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.deleteuser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Regular User should not be able to login.\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Requests without username should not return 500 errors.\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.no_username_login)\n        self.assertEqual(login.status_code, 200)\n        form = login.context[0].get('form')\n        self.assertEqual(form.errors['username'][0], 'This field is required.')\n\n    def test_login_successfully_redirects_to_original_URL(self):\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        query_string = 'the-answer=42'\n        redirect_url = '/test_admin/admin/?%s' % query_string\n        new_next = {REDIRECT_FIELD_NAME: redirect_url}\n        post_data = self.super_login.copy()\n        post_data.pop(REDIRECT_FIELD_NAME)\n        login = self.client.post(\n            '%s?%s' % (reverse('admin:login'), urlencode(new_next)),\n            post_data)\n        self.assertRedirects(login, redirect_url)\n\n    def test_double_login_is_not_allowed(self):\n        \"\"\"Regression test for #19327\"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n\n        # Logging in with non-admin user fails\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n\n        # Logging in with admin user while already logged in\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_add_view(self):\n        \"\"\"Test add view restricts access and actually adds items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        add_dict = {'title': 'D\u00f8m ikke',\n                    'content': '<p>great article</p>',\n                    'date_0': '2008-03-18', 'date_1': '10:54:39',\n                    'section': 1}\n\n        # Change User should not have access to add articles\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n        response = self.client.get('/test_admin/admin/admin_views/article/add/')\n        self.assertEqual(response.status_code, 403)\n        # Try POST just to make sure\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.all().count(), 3)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Add user may login and POST to add view, then redirect to admin root\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        addpage = self.client.get('/test_admin/admin/admin_views/article/add/')\n        change_list_link = '&rsaquo; <a href=\"/test_admin/admin/admin_views/article/\">Articles</a>'\n        self.assertNotContains(addpage, change_list_link,\n            msg_prefix='User restricted to add permission is given link to change list view in breadcrumbs.')\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertRedirects(post, '/test_admin/admin/')\n        self.assertEqual(Article.objects.all().count(), 4)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a created object')\n        self.client.get('/test_admin/admin/logout/')\n\n        # Super can add too, but is redirected to the change list view\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n        addpage = self.client.get('/test_admin/admin/admin_views/article/add/')\n        self.assertContains(addpage, change_list_link,\n            msg_prefix='Unrestricted user is not given link to change list view in breadcrumbs.')\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertRedirects(post, '/test_admin/admin/admin_views/article/')\n        self.assertEqual(Article.objects.all().count(), 5)\n        self.client.get('/test_admin/admin/logout/')\n\n        # 8509 - if a normal user is already logged in, it is possible\n        # to change user into the superuser without error\n        self.client.login(username='joepublic', password='secret')\n        # Check and make sure that if user expires, data still persists\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n\n    def test_change_view(self):\n        \"\"\"Change view should restrict access and allow users to edit items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        change_dict = {'title': 'Ikke ford\u00f8mt',\n                       'content': '<p>edited article</p>',\n                       'date_0': '2008-03-18', 'date_1': '10:54:39',\n                       'section': 1}\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/')\n        self.assertEqual(response.status_code, 403)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/')\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertEqual(post.status_code, 403)\n        self.client.get('/test_admin/admin/logout/')\n\n        # change user can view all items and edit them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/')\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/')\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertRedirects(post, '/test_admin/admin/admin_views/article/')\n        self.assertEqual(Article.objects.get(pk=1).content, '<p>edited article</p>')\n\n        # one error in form should produce singular error message, multiple errors plural\n        change_dict['title'] = ''\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertContains(post, 'Please correct the error below.',\n            msg_prefix='Singular error message not found in response to post with one error')\n\n        change_dict['content'] = ''\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertContains(post, 'Please correct the errors below.',\n            msg_prefix='Plural error message not found in response to post with multiple errors')\n        self.client.get('/test_admin/admin/logout/')\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        for login_dict in [self.super_login, self.changeuser_login, self.adduser_login, self.deleteuser_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/')\n            self.assertEqual(response.status_code, 200)\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertRedirects(response, '/test_admin/admin/')\n            self.client.get('/test_admin/admin/logout/')\n\n        for login_dict in [self.joepublic_login, self.no_username_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', {'name': 'changed'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', {'name': 'changed again'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            self.client.get('/test_admin/admin/logout/')\n\n    def test_history_view(self):\n        \"\"\"History view should restrict access.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/history/')\n        self.assertEqual(response.status_code, 403)\n        self.client.get('/test_admin/admin/logout/')\n\n        # change user can view all items and edit them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/history/')\n        self.assertEqual(response.status_code, 200)\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        for login_dict in [self.super_login, self.changeuser_login, self.adduser_login, self.deleteuser_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/history/')\n            self.assertEqual(response.status_code, 403)\n\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/history/')\n            self.assertEqual(response.status_code, 200)\n\n            self.client.get('/test_admin/admin/logout/')\n\n        for login_dict in [self.joepublic_login, self.no_username_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/history/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/history/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n\n            self.client.get('/test_admin/admin/logout/')\n\n    def test_conditionally_show_add_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"add related\" button if the\n        user has permission to add that related item.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        # Set up and log in user.\n        url = '/test_admin/admin/admin_views/article/add/'\n        add_link_text = ' class=\"add-another\"'\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        # The add user can't add sections yet, so they shouldn't see the \"add\n        # section\" link.\n        response = self.client.get(url)\n        self.assertNotContains(response, add_link_text)\n        # Allow the add user to add sections too. Now they can see the \"add\n        # section\" link.\n        add_user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('add', Section._meta))\n        add_user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertContains(response, add_link_text)\n\n    def test_custom_model_admin_templates(self):\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n\n        # Test custom change list template with custom extra context\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/')\n        self.assertContains(response, \"var hello = 'Hello!';\")\n        self.assertTemplateUsed(response, 'custom_admin/change_list.html')\n\n        # Test custom add form template\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/add/')\n        self.assertTemplateUsed(response, 'custom_admin/add_form.html')\n\n        # Add an article so we can test delete, change, and history views\n        post = self.client.post('/test_admin/admin/admin_views/customarticle/add/', {\n            'content': '<p>great article</p>',\n            'date_0': '2008-03-18',\n            'date_1': '10:54:39'\n        })\n        self.assertRedirects(post, '/test_admin/admin/admin_views/customarticle/')\n        self.assertEqual(CustomArticle.objects.all().count(), 1)\n        article_pk = CustomArticle.objects.all()[0].pk\n\n        # Test custom delete, change, and object history templates\n        # Test custom change form template\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/change_form.html')\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/delete/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/delete_confirmation.html')\n        response = self.client.post('/test_admin/admin/admin_views/customarticle/', data={\n            'index': 0,\n            'action': ['delete_selected'],\n            '_selected_action': ['1'],\n        })\n        self.assertTemplateUsed(response, 'custom_admin/delete_selected_confirmation.html')\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/history/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/object_history.html')\n\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_delete_view(self):\n        \"\"\"Delete view should restrict access and actually delete items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        delete_dict = {'post': 'yes'}\n\n        # add user should not be able to delete articles\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/delete/')\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/delete/', delete_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.all().count(), 3)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Delete user can delete\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.deleteuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/section/1/delete/')\n        # test response contains link to related Article\n        self.assertContains(response, \"admin_views/article/1/\")\n\n        response = self.client.get('/test_admin/admin/admin_views/article/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/delete/', delete_dict)\n        self.assertRedirects(post, '/test_admin/admin/')\n        self.assertEqual(Article.objects.all().count(), 2)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a deleted object')\n        article_ct = ContentType.objects.get_for_model(Article)\n        logged = LogEntry.objects.get(content_type=article_ct, action_flag=DELETION)\n        self.assertEqual(logged.object_id, '1')\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_disabled_permissions_when_logged_in(self):\n        self.client.login(username='super', password='secret')\n        superuser = User.objects.get(username='super')\n        superuser.is_active = False\n        superuser.save()\n\n        response = self.client.get('/test_admin/admin/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get('/test_admin/admin/secure-view/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_disabled_staff_permissions_when_logged_in(self):\n        self.client.login(username='super', password='secret')\n        superuser = User.objects.get(username='super')\n        superuser.is_staff = False\n        superuser.save()\n\n        response = self.client.get('/test_admin/admin/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get('/test_admin/admin/secure-view/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_app_index_fail_early(self):\n        \"\"\"\n        If a user has no module perms, avoid iterating over all the modeladmins\n        in the registry.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        opts = Article._meta\n        change_user = User.objects.get(username='changeuser')\n        permission = get_perm(Article, get_permission_codename('change', opts))\n\n        self.client.post(login_url, self.changeuser_login)\n\n        # the user has no module permissions, because this module doesn't exist\n        change_user.user_permissions.remove(permission)\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 403)\n\n        # the user now has module permissions\n        change_user.user_permissions.add(permission)\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_shortcut_view_only_available_to_staff(self):\n        \"\"\"\n        Only admin users should be able to use the admin shortcut view.\n        \"\"\"\n        model_ctype = ContentType.objects.get_for_model(ModelWithStringPrimaryKey)\n        obj = ModelWithStringPrimaryKey.objects.create(string_pk='foo')\n        shortcut_url = \"/test_admin/admin/r/%s/%s/\" % (model_ctype.pk, obj.pk)\n\n        # Not logged in: we should see the login page.\n        response = self.client.get(shortcut_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n\n        # Logged in? Redirect.\n        self.client.login(username='super', password='secret')\n        response = self.client.get(shortcut_url, follow=False)\n        # Can't use self.assertRedirects() because User.get_absolute_url() is silly.\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response.url, 'http://example.com/dummy/foo/')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewsNoUrlTest(TestCase):\n    \"\"\"Regression test for #17333\"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        opts = Report._meta\n        # User who can change Reports\n        change_user = User.objects.get(username='changeuser')\n        change_user.user_permissions.add(get_perm(Report,\n            get_permission_codename('change', opts)))\n\n        # login POST dict\n        self.changeuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n\n    def test_no_standard_modeladmin_urls(self):\n        \"\"\"Admin index views don't break when user's ModelAdmin removes standard urls\"\"\"\n        self.client.get('/test_admin/admin/')\n        r = self.client.post(reverse('admin:login'), self.changeuser_login)\n        r = self.client.get('/test_admin/admin/')\n        # we shouldn' get an 500 error caused by a NoReverseMatch\n        self.assertEqual(r.status_code, 200)\n        self.client.get('/test_admin/admin/logout/')\n\n\n@skipUnlessDBFeature('can_defer_constraint_checks')\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewDeletedObjectsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'deleted-objects.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nesting(self):\n        \"\"\"\n        Objects should be nested to display the relationships that\n        cause them to be scheduled for deletion.\n        \"\"\"\n        pattern = re.compile(br\"\"\"<li>Plot: <a href=\".+/admin_views/plot/1/\">World Domination</a>\\s*<ul>\\s*<li>Plot details: <a href=\".+/admin_views/plotdetails/1/\">almost finished</a>\"\"\")\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        six.assertRegex(self, response.content, pattern)\n\n    def test_cyclic(self):\n        \"\"\"\n        Cyclic relationships should still cause each object to only be\n        listed once.\n\n        \"\"\"\n        one = \"\"\"<li>Cyclic one: <a href=\"/test_admin/admin/admin_views/cyclicone/1/\">I am recursive</a>\"\"\"\n        two = \"\"\"<li>Cyclic two: <a href=\"/test_admin/admin/admin_views/cyclictwo/1/\">I am recursive too</a>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/cyclicone/%s/delete/' % quote(1))\n\n        self.assertContains(response, one, 1)\n        self.assertContains(response, two, 1)\n\n    def test_perms_needed(self):\n        self.client.logout()\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Plot,\n            get_permission_codename('delete', Plot._meta)))\n\n        self.assertTrue(self.client.login(username='deleteuser',\n                                          password='secret'))\n\n        response = self.client.get('/test_admin/admin/admin_views/plot/%s/delete/' % quote(1))\n        self.assertContains(response, \"your account doesn't have permission to delete the following types of objects\")\n        self.assertContains(response, \"<li>plot details</li>\")\n\n    def test_protected(self):\n        q = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q, answer=\"Yes.\")\n\n        response = self.client.get(\"/test_admin/admin/admin_views/question/%s/delete/\" % quote(q.pk))\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Because.</a></li>' % a1.pk)\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Yes.</a></li>' % a2.pk)\n\n    def test_not_registered(self):\n        should_contain = \"\"\"<li>Secret hideout: underground bunker\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        self.assertContains(response, should_contain, 1)\n\n    def test_multiple_fkeys_to_same_model(self):\n        \"\"\"\n        If a deleted object has two relationships from another model,\n        both of those should be followed in looking for related\n        objects to delete.\n\n        \"\"\"\n        should_contain = \"\"\"<li>Plot: <a href=\"/test_admin/admin/admin_views/plot/1/\">World Domination</a>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        self.assertContains(response, should_contain)\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(2))\n        self.assertContains(response, should_contain)\n\n    def test_multiple_fkeys_to_same_instance(self):\n        \"\"\"\n        If a deleted object has two relationships pointing to it from\n        another object, the other object should still only be listed\n        once.\n\n        \"\"\"\n        should_contain = \"\"\"<li>Plot: <a href=\"/test_admin/admin/admin_views/plot/2/\">World Peace</a></li>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(2))\n        self.assertContains(response, should_contain, 1)\n\n    def test_inheritance(self):\n        \"\"\"\n        In the case of an inherited model, if either the child or\n        parent-model instance is deleted, both instances are listed\n        for deletion, as well as any relationships they have.\n\n        \"\"\"\n        should_contain = [\n            \"\"\"<li>Villain: <a href=\"/test_admin/admin/admin_views/villain/3/\">Bob</a>\"\"\",\n            \"\"\"<li>Super villain: <a href=\"/test_admin/admin/admin_views/supervillain/3/\">Bob</a>\"\"\",\n            \"\"\"<li>Secret hideout: floating castle\"\"\",\n            \"\"\"<li>Super secret hideout: super floating castle!\"\"\"\n        ]\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(3))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n        response = self.client.get('/test_admin/admin/admin_views/supervillain/%s/delete/' % quote(3))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n\n    def test_generic_relations(self):\n        \"\"\"\n        If a deleted object has GenericForeignKeys pointing to it,\n        those objects should be listed for deletion.\n\n        \"\"\"\n        plot = Plot.objects.get(pk=3)\n        FunkyTag.objects.create(content_object=plot, name='hott')\n        should_contain = \"\"\"<li>Funky tag: <a href=\"/test_admin/admin/admin_views/funkytag/1/\">hott\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/plot/%s/delete/' % quote(3))\n        self.assertContains(response, should_contain)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestGenericRelations(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'deleted-objects.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_generic_content_object_in_list_display(self):\n        plot = Plot.objects.get(pk=3)\n        FunkyTag.objects.create(content_object=plot, name='hott')\n        response = self.client.get('/test_admin/admin/admin_views/funkytag/')\n        self.assertContains(response, \"%s</td>\" % plot)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewStringPrimaryKeyTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'string-primary-key.xml']\n\n    def __init__(self, *args):\n        super(AdminViewStringPrimaryKeyTest, self).__init__(*args)\n        self.pk = \"\"\"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 -_.!~*'() ;/?:@&=+$, <>#%\" {}|\\^[]`\"\"\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n        content_type_pk = ContentType.objects.get_for_model(ModelWithStringPrimaryKey).pk\n        LogEntry.objects.log_action(100, content_type_pk, self.pk, self.pk, 2, change_message='Changed something')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_get_history_view(self):\n        \"\"\"\n        Retrieving the history for an object using urlencoded form of primary\n        key should work.\n        Refs #12349, #18550.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/history/' % quote(self.pk))\n        self.assertContains(response, escape(self.pk))\n        self.assertContains(response, 'Changed something')\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_change_view(self):\n        \"Retrieving the object using urlencoded form of primary key should work\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(self.pk))\n        self.assertContains(response, escape(self.pk))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_to_changeform_link(self):\n        \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\"\n        prefix = '/test_admin/admin/admin_views/modelwithstringprimarykey/'\n        response = self.client.get(prefix)\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        pk_final_url = escape(iri_to_uri(urlquote(quote(self.pk))))\n        should_contain = \"\"\"<th class=\"field-__str__\"><a href=\"%s%s/\">%s</a></th>\"\"\" % (prefix, pk_final_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_link(self):\n        \"The link from the recent actions list referring to the changeform of the object should be quoted\"\n        response = self.client.get('/test_admin/admin/')\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (link, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_without_content_type(self):\n        \"If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.\"\n        response = self.client.get('/test_admin/admin/')\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (link, escape(self.pk))\n        self.assertContains(response, should_contain)\n        should_contain = \"Model with string primary key\"  # capitalized in Recent Actions\n        self.assertContains(response, should_contain)\n        logentry = LogEntry.objects.get(content_type__name__iexact=should_contain)\n        # http://code.djangoproject.com/ticket/10275\n        # if the log entry doesn't have a content type it should still be\n        # possible to view the Recent Actions part\n        logentry.content_type = None\n        logentry.save()\n\n        counted_presence_before = response.content.count(force_bytes(should_contain))\n        response = self.client.get('/test_admin/admin/')\n        counted_presence_after = response.content.count(force_bytes(should_contain))\n        self.assertEqual(counted_presence_before - 1,\n            counted_presence_after)\n\n    def test_logentry_get_admin_url(self):\n        \"LogEntry.get_admin_url returns a URL to edit the entry's object or None for non-existent (possibly deleted) models\"\n        log_entry_name = \"Model with string primary key\"  # capitalized in Recent Actions\n        logentry = LogEntry.objects.get(content_type__name__iexact=log_entry_name)\n        model = \"modelwithstringprimarykey\"\n        desired_admin_url = \"/test_admin/admin/admin_views/%s/%s/\" % (model, escape(iri_to_uri(urlquote(quote(self.pk)))))\n        self.assertEqual(logentry.get_admin_url(), desired_admin_url)\n\n        logentry.content_type.model = \"non-existent\"\n        self.assertEqual(logentry.get_admin_url(), None)\n\n    def test_deleteconfirmation_link(self):\n        \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/delete/' % quote(self.pk))\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        should_contain = \"\"\"/%s/\">%s</a>\"\"\" % (escape(iri_to_uri(urlquote(quote(self.pk)))), escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_add(self):\n        \"A model with a primary key that ends with add should be visible\"\n        add_model = ModelWithStringPrimaryKey(pk=\"i have something to add\")\n        add_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(add_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_delete(self):\n        \"A model with a primary key that ends with delete should be visible\"\n        delete_model = ModelWithStringPrimaryKey(pk=\"delete\")\n        delete_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(delete_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_history(self):\n        \"A model with a primary key that ends with history should be visible\"\n        history_model = ModelWithStringPrimaryKey(pk=\"history\")\n        history_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(history_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_shortcut_view_with_escaping(self):\n        \"'View on site should' work properly with char fields\"\n        model = ModelWithStringPrimaryKey(pk='abc_123')\n        model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(model.pk))\n        should_contain = '/%s/\" class=\"viewsitelink\">' % model.pk\n        self.assertContains(response, should_contain)\n\n    def test_change_view_history_link(self):\n        \"\"\"Object history button link should work and contain the pk value quoted.\"\"\"\n        url = reverse('admin:%s_modelwithstringprimarykey_change' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        expected_link = reverse('admin:%s_modelwithstringprimarykey_history' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        self.assertContains(response, '<a href=\"%s\" class=\"historylink\"' % expected_link)\n\n    def test_redirect_on_add_view_continue_button(self):\n        \"\"\"As soon as an object is added using \"Save and continue editing\"\n        button, the user should be redirected to the object's change_view.\n\n        In case primary key is a string containing some special characters\n        like slash or underscore, these characters must be escaped (see #22266)\n        \"\"\"\n        response = self.client.post(\n            '/test_admin/admin/admin_views/modelwithstringprimarykey/add/',\n            {\n                'string_pk': '123/history',\n                \"_continue\": \"1\",  # Save and continue editing\n            }\n        )\n\n        self.assertEqual(response.status_code, 302)  # temporary redirect\n        self.assertEqual(\n            response['location'],\n            (\n                'http://testserver/test_admin/admin/admin_views/'\n                'modelwithstringprimarykey/123_2Fhistory/'  # PK is quoted\n            )\n        )\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SecureViewTests(TestCase):\n    \"\"\"\n    Test behavior of a view protected by the staff_member_required decorator.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_secure_view_shows_login_if_not_logged_in(self):\n        \"\"\"\n        Ensure that we see the admin login form.\n        \"\"\"\n        secure_url = '/test_admin/admin/secure-view/'\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?next=%s' % (reverse('admin:login'), secure_url))\n        response = self.client.get(secure_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], secure_url)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewUnicodeTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-unicode.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_unicode_edit(self):\n        \"\"\"\n        A test to ensure that POST on edit_view handles non-ASCII characters.\n        \"\"\"\n        post_data = {\n            \"name\": \"Test l\u00e6rdommer\",\n            # inline data\n            \"chapter_set-TOTAL_FORMS\": \"6\",\n            \"chapter_set-INITIAL_FORMS\": \"3\",\n            \"chapter_set-MAX_NUM_FORMS\": \"0\",\n            \"chapter_set-0-id\": \"1\",\n            \"chapter_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"chapter_set-0-content\": \"&lt;p&gt;Sv\u00e6rt frustrerende med UnicodeDecodeError&lt;/p&gt;\",\n            \"chapter_set-1-id\": \"2\",\n            \"chapter_set-1-title\": \"Kj\u00e6rlighet.\",\n            \"chapter_set-1-content\": \"&lt;p&gt;La kj\u00e6rligheten til de lidende seire.&lt;/p&gt;\",\n            \"chapter_set-2-id\": \"3\",\n            \"chapter_set-2-title\": \"Need a title.\",\n            \"chapter_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"chapter_set-3-id\": \"\",\n            \"chapter_set-3-title\": \"\",\n            \"chapter_set-3-content\": \"\",\n            \"chapter_set-4-id\": \"\",\n            \"chapter_set-4-title\": \"\",\n            \"chapter_set-4-content\": \"\",\n            \"chapter_set-5-id\": \"\",\n            \"chapter_set-5-title\": \"\",\n            \"chapter_set-5-content\": \"\",\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/book/1/', post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_unicode_delete(self):\n        \"\"\"\n        Ensure that the delete_view handles non-ASCII characters\n        \"\"\"\n        delete_dict = {'post': 'yes'}\n        response = self.client.get('/test_admin/admin/admin_views/book/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        response = self.client.post('/test_admin/admin/admin_views/book/1/delete/', delete_dict)\n        self.assertRedirects(response, '/test_admin/admin/admin_views/book/')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewListEditable(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-person.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inheritance(self):\n        Podcast.objects.create(name=\"This Week in Django\",\n            release_date=datetime.date.today())\n        response = self.client.get('/test_admin/admin/admin_views/podcast/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_inheritance_2(self):\n        Vodcast.objects.create(name=\"This Week in Django\", released=True)\n        response = self.client.get('/test_admin/admin/admin_views/vodcast/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_pk(self):\n        Language.objects.create(iso='en', name='English', english_name='English')\n        response = self.client.get('/test_admin/admin/admin_views/language/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_input_html(self):\n        response = self.client.get('/test_admin/admin/admin_views/person/')\n        # 2 inputs per object(the field and the hidden id field) = 6\n        # 4 management hidden fields = 4\n        # 4 action inputs (3 regular checkboxes, 1 checkbox to select all)\n        # main form submit button = 1\n        # search field and search submit button = 2\n        # CSRF field = 1\n        # field to track 'select all' across paginated views = 1\n        # 6 + 4 + 4 + 1 + 2 + 1 + 1 = 19 inputs\n        self.assertContains(response, \"<input\", count=19)\n        # 1 select per object = 3 selects\n        self.assertContains(response, \"<select\", count=4)\n\n    def test_post_messages(self):\n        # Ticket 12707: Saving inline editable should not show admin\n        # action warnings\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/',\n                                    data, follow=True)\n        self.assertEqual(len(response.context['messages']), 1)\n\n    def test_post_submission(self):\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n        # test a filtered page\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"1\",\n            \"form-0-gender\": \"1\",\n            \"form-0-alive\": \"checked\",\n\n            \"form-1-id\": \"3\",\n            \"form-1-gender\": \"1\",\n            \"form-1-alive\": \"checked\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/?gender__exact=1', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n\n        # test a searched page\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"1\",\n            \"form-0-gender\": \"1\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/?q=john', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n\n    def test_non_field_errors(self):\n        ''' Ensure that non field errors are displayed for each of the\n            forms in the changelist's formset. Refs #13126.\n        '''\n        fd1 = FoodDelivery.objects.create(reference='123', driver='bill', restaurant='thai')\n        fd2 = FoodDelivery.objects.create(reference='456', driver='bill', restaurant='india')\n        fd3 = FoodDelivery.objects.create(reference='789', driver='bill', restaurant='pizza')\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"pizza\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/fooddelivery/', data)\n        self.assertContains(response, '<tr><td colspan=\"4\"><ul class=\"errorlist\"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>', 1, html=True)\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            # Same data also.\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"thai\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/fooddelivery/', data)\n        self.assertContains(response, '<tr><td colspan=\"4\"><ul class=\"errorlist\"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>', 2, html=True)\n\n    def test_non_form_errors(self):\n        # test if non-form errors are handled; ticket #12716\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"2\",\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/', data)\n        self.assertContains(response, \"Grace is not a Zombie\")\n\n    def test_non_form_errors_is_errorlist(self):\n        # test if non-form errors are correctly handled; ticket #12878\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"2\",\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/', data)\n        non_form_errors = response.context['cl'].formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n\n    def test_list_editable_ordering(self):\n        collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n\n        Category.objects.create(id=1, order=1, collector=collector)\n        Category.objects.create(id=2, order=2, collector=collector)\n        Category.objects.create(id=3, order=0, collector=collector)\n        Category.objects.create(id=4, order=0, collector=collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        data = {\n            \"form-TOTAL_FORMS\": \"4\",\n            \"form-INITIAL_FORMS\": \"4\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-order\": \"14\",\n            \"form-0-id\": \"1\",\n            \"form-0-collector\": \"1\",\n\n            \"form-1-order\": \"13\",\n            \"form-1-id\": \"2\",\n            \"form-1-collector\": \"1\",\n\n            \"form-2-order\": \"1\",\n            \"form-2-id\": \"3\",\n            \"form-2-collector\": \"1\",\n\n            \"form-3-order\": \"0\",\n            \"form-3-id\": \"4\",\n            \"form-3-collector\": \"1\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/category/', data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n    def test_list_editable_pagination(self):\n        \"\"\"\n        Ensure that pagination works for list_editable items.\n        Refs #16819.\n        \"\"\"\n        UnorderedObject.objects.create(id=1, name='Unordered object #1')\n        UnorderedObject.objects.create(id=2, name='Unordered object #2')\n        UnorderedObject.objects.create(id=3, name='Unordered object #3')\n        response = self.client.get('/test_admin/admin/admin_views/unorderedobject/')\n        self.assertContains(response, 'Unordered object #3')\n        self.assertContains(response, 'Unordered object #2')\n        self.assertNotContains(response, 'Unordered object #1')\n        response = self.client.get('/test_admin/admin/admin_views/unorderedobject/?p=1')\n        self.assertNotContains(response, 'Unordered object #3')\n        self.assertNotContains(response, 'Unordered object #2')\n        self.assertContains(response, 'Unordered object #1')\n\n    def test_list_editable_action_submit(self):\n        # List editable changes should not be executed if the action \"Go\" button is\n        # used to submit the form.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"index\": \"0\",\n            \"_selected_action\": ['3'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 1)\n\n    def test_list_editable_action_choices(self):\n        # List editable changes should be executed if the \"Save\" button is\n        # used to submit the form - any action choices should be ignored.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n            \"_selected_action\": ['1'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n    def test_list_editable_popup(self):\n        \"\"\"\n        Fields should not be list-editable in popups.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/')\n        self.assertNotEqual(response.context['cl'].list_editable, ())\n        response = self.client.get('/test_admin/admin/admin_views/person/?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context['cl'].list_editable, ())\n\n    def test_pk_hidden_fields(self):\n        \"\"\" Ensure that hidden pk fields aren't displayed in the table body and\n            that their corresponding human-readable value is displayed instead.\n            Note that the hidden pk fields are in fact be displayed but\n            separately (not in the table), and only once.\n            Refs #12475.\n        \"\"\"\n        story1 = Story.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = Story.objects.create(title='Crouching Tiger, Hidden Python', content='The Python was sneaking into...')\n        response = self.client.get('/test_admin/admin/admin_views/story/')\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)  # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(response, '<div class=\"hiddenfields\">\\n<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" /><input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>' % (story2.id, story1.id), html=True)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story1.id, 1)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story2.id, 1)\n\n    def test_pk_hidden_fields_with_list_display_links(self):\n        \"\"\" Similarly as test_pk_hidden_fields, but when the hidden pk fields are\n            referenced in list_display_links.\n            Refs #12475.\n        \"\"\"\n        story1 = OtherStory.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = OtherStory.objects.create(title='Crouching Tiger, Hidden Python', content='The Python was sneaking into...')\n        link1 = reverse('admin:admin_views_otherstory_change', args=(story1.pk,))\n        link2 = reverse('admin:admin_views_otherstory_change', args=(story2.pk,))\n        response = self.client.get('/test_admin/admin/admin_views/otherstory/')\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)  # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(response, '<div class=\"hiddenfields\">\\n<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" /><input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>' % (story2.id, story1.id), html=True)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link1, story1.id), 1)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link2, story2.id), 1)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminSearchTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users', 'multiple-child-classes',\n                'admin-views-person']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_search_on_sibling_models(self):\n        \"Check that a search that mentions sibling models\"\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n        # confirm the search returned 1 object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n    def test_with_fk_to_field(self):\n        \"\"\"Ensure that the to_field GET parameter is preserved when a search\n        is performed. Refs #10918.\n        \"\"\"\n        from django.contrib.admin.views.main import TO_FIELD_VAR\n        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)\n        self.assertContains(response, \"\\n1 user\\n\")\n        self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)\n\n    def test_exact_matches(self):\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=ba')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 recommendations\\n\")\n\n    def test_beginning_matches(self):\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=Gui')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 person\\n\")\n        self.assertContains(response, \"Guido\")\n\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=uido')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 persons\\n\")\n        self.assertNotContains(response, \"Guido\")\n\n    def test_pluggable_search(self):\n        PluggableSearchPerson.objects.create(name=\"Bob\", age=10)\n        PluggableSearchPerson.objects.create(name=\"Amy\", age=20)\n\n        response = self.client.get('/test_admin/admin/admin_views/pluggablesearchperson/?q=Bob')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Bob\")\n\n        response = self.client.get('/test_admin/admin/admin_views/pluggablesearchperson/?q=20')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Amy\")\n\n    def test_reset_link(self):\n        \"\"\"\n        Test presence of reset link in search bar (\"1 result (_x total_)\").\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=Gui')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">3 total</a>)</span>\"\"\",\n            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInheritedInlinesTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inline(self):\n        \"Ensure that inline models which inherit from a common parent are correctly handled by admin.\"\n\n        foo_user = \"foo username\"\n        bar_user = \"bar username\"\n\n        name_re = re.compile(b'name=\"(.*?)\"')\n\n        # test the add case\n        response = self.client.get('/test_admin/admin/admin_views/persona/add/')\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        # test the add case\n        post_data = {\n            \"name\": \"Test Name\",\n            # inline data\n            \"accounts-TOTAL_FORMS\": \"1\",\n            \"accounts-INITIAL_FORMS\": \"0\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n            \"accounts-0-username\": foo_user,\n            \"accounts-2-TOTAL_FORMS\": \"1\",\n            \"accounts-2-INITIAL_FORMS\": \"0\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n            \"accounts-2-0-username\": bar_user,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/persona/add/', post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n        persona_id = Persona.objects.all()[0].id\n        foo_id = FooAccount.objects.all()[0].id\n        bar_id = BarAccount.objects.all()[0].id\n\n        # test the edit case\n\n        response = self.client.get('/test_admin/admin/admin_views/persona/%d/' % persona_id)\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        post_data = {\n            \"name\": \"Test Name\",\n\n            \"accounts-TOTAL_FORMS\": \"2\",\n            \"accounts-INITIAL_FORMS\": \"1\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-0-username\": \"%s-1\" % foo_user,\n            \"accounts-0-account_ptr\": str(foo_id),\n            \"accounts-0-persona\": str(persona_id),\n\n            \"accounts-2-TOTAL_FORMS\": \"2\",\n            \"accounts-2-INITIAL_FORMS\": \"1\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-2-0-username\": \"%s-1\" % bar_user,\n            \"accounts-2-0-account_ptr\": str(bar_id),\n            \"accounts-2-0-persona\": str(persona_id),\n        }\n        response = self.client.post('/test_admin/admin/admin_views/persona/%d/' % persona_id, post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, \"%s-1\" % foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, \"%s-1\" % bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminActionsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-actions.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_model_admin_custom_action(self):\n        \"Tests a custom action defined in a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'mail_admin',\n            'index': 0,\n        }\n        self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a ModelAdmin action')\n\n    def test_model_admin_default_delete_action(self):\n        \"Tests the default delete action defined as a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        delete_confirmation_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'post': 'yes',\n        }\n        confirmation = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertIsInstance(confirmation, TemplateResponse)\n        self.assertContains(confirmation, \"Are you sure you want to delete the selected subscribers?\")\n        self.assertContains(confirmation, ACTION_CHECKBOX_NAME, count=2)\n        self.client.post('/test_admin/admin/admin_views/subscriber/', delete_confirmation_data)\n        self.assertEqual(Subscriber.objects.count(), 0)\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_non_localized_pk(self):\n        \"\"\"If USE_THOUSAND_SEPARATOR is set, make sure that the ids for\n        the objects selected for deletion are rendered without separators.\n        Refs #14895.\n        \"\"\"\n        subscriber = Subscriber.objects.get(id=1)\n        subscriber.id = 9999\n        subscriber.save()\n        action_data = {\n            ACTION_CHECKBOX_NAME: [9999, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertTemplateUsed(response, 'admin/delete_selected_confirmation.html')\n        self.assertContains(response, 'value=\"9999\"')  # Instead of 9,999\n        self.assertContains(response, 'value=\"2\"')\n\n    def test_model_admin_default_delete_action_protected(self):\n        \"\"\"\n        Tests the default delete action defined as a ModelAdmin method in the\n        case where some related objects are protected from deletion.\n        \"\"\"\n        q1 = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q1, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q1, answer=\"Yes.\")\n        q2 = Question.objects.create(question=\"Wherefore?\")\n\n        action_data = {\n            ACTION_CHECKBOX_NAME: [q1.pk, q2.pk],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n\n        response = self.client.post(\"/test_admin/admin/admin_views/question/\", action_data)\n\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Because.</a></li>' % a1.pk, html=True)\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Yes.</a></li>' % a2.pk, html=True)\n\n    def test_model_admin_default_delete_action_no_change_url(self):\n        \"\"\"\n        Default delete action shouldn't break if a user's ModelAdmin removes the url for change_view.\n\n        Regression test for #20640\n        \"\"\"\n        obj = UnchangeableObject.objects.create()\n        action_data = {\n            ACTION_CHECKBOX_NAME: obj.pk,\n            \"action\": \"delete_selected\",\n            \"index\": \"0\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/unchangeableobject/', action_data)\n        # No 500 caused by NoReverseMatch\n        self.assertEqual(response.status_code, 200)\n        # The page shouldn't display a link to the nonexistent change page\n        self.assertContains(response, \"<li>Unchangeable object: UnchangeableObject object</li>\", 1, html=True)\n\n    def test_custom_function_mail_action(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_custom_function_action_with_redirect(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'redirect_to',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_default_redirect(self):\n        \"\"\"\n        Test that actions which don't return an HttpResponse are redirected to\n        the same page, retaining the querystring (which may contain changelist\n        information).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        url = '/test_admin/admin/admin_views/externalsubscriber/?o=1'\n        response = self.client.post(url, action_data)\n        self.assertRedirects(response, url)\n\n    def test_custom_function_action_streaming_response(self):\n        \"\"\"Tests a custom action that returns a StreamingHttpResponse.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'download',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        content = b''.join(response.streaming_content)\n        self.assertEqual(content, b'This is the content of the file')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_function_action_no_perm_response(self):\n        \"\"\"Tests a custom action that returns an HttpResponse with 403 code.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'no_perm',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'No permission to perform this action')\n\n    def test_actions_ordering(self):\n        \"\"\"\n        Ensure that actions are ordered as expected.\n        Refs #15964.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/externalsubscriber/')\n        self.assertContains(response, '''<label>Action: <select name=\"action\">\n<option value=\"\" selected=\"selected\">---------</option>\n<option value=\"delete_selected\">Delete selected external\nsubscribers</option>\n<option value=\"redirect_to\">Redirect to (Awesome action)</option>\n<option value=\"external_mail\">External mail (Another awesome\naction)</option>\n<option value=\"download\">Download subscription</option>\n<option value=\"no_perm\">No permission to run</option>\n</select>''', html=True)\n\n    def test_model_without_action(self):\n        \"Tests a ModelAdmin without any action\"\n        response = self.client.get('/test_admin/admin/admin_views/oldsubscriber/')\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"',\n            msg_prefix=\"Found an unexpected action toggle checkboxbox in response\")\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"')\n\n    def test_model_without_action_still_has_jquery(self):\n        \"Tests that a ModelAdmin without any actions still gets jQuery included in page\"\n        response = self.client.get('/test_admin/admin/admin_views/oldsubscriber/')\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'jquery.min.js',\n            msg_prefix=\"jQuery missing from admin pages for model with no admin actions\")\n\n    def test_action_column_class(self):\n        \"Tests that the checkbox column class is present in the response\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'action-checkbox-column')\n\n    def test_multiple_actions_form(self):\n        \"\"\"\n        Test that actions come from the form whose submit button was pressed (#10618).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            # Two different actions selected on the two forms...\n            'action': ['external_mail', 'delete_selected'],\n            # ...but we clicked \"go\" on the top form.\n            'index': 0\n        }\n        self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n\n        # Send mail, don't delete.\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_user_message_on_none_selected(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no items are selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        msg = \"\"\"Items must be selected in order to perform actions on them. No items have been changed.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_user_message_on_no_action(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no action is selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': '',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        msg = \"\"\"No action selected.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_selection_counter(self):\n        \"\"\"\n        Check if the selection counter is there.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertContains(response, '0 of 2 selected')\n\n    def test_popup_actions(self):\n        \"\"\" Actions should not be shown in popups. \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        response = self.client.get(\n            '/test_admin/admin/admin_views/subscriber/?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context[\"action_form\"], None)\n\n    def test_popup_template_response(self):\n        \"\"\"\n        Success on popups shall be rendered from template in order to allow\n        easy customization.\n        \"\"\"\n        response = self.client.post(\n            '/test_admin/admin/admin_views/actor/add/?%s=1' % IS_POPUP_VAR,\n            {'name': 'Troy McClure', 'age': '55', IS_POPUP_VAR: '1'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.template_name, 'admin/popup_response.html')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestCustomChangeList(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_custom_changelist(self):\n        \"\"\"\n        Validate that a custom ChangeList class can be used (#9749)\n        \"\"\"\n        # Insert some data\n        post_data = {\"name\": \"First Gadget\"}\n        response = self.client.post('/test_admin/%s/admin_views/gadget/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        # Hit the page once to get messages out of the queue message list\n        response = self.client.get('/test_admin/%s/admin_views/gadget/' % self.urlbit)\n        # Ensure that data is still not visible on the page\n        response = self.client.get('/test_admin/%s/admin_views/gadget/' % self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'First Gadget')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestInlineNotEditable(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_GET_parent_add(self):\n        \"\"\"\n        InlineModelAdmin broken?\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/parent/add/')\n        self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminCustomQuerysetTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n        self.pks = [EmptyModel.objects.create().id for i in range(3)]\n        self.super_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super',\n            'password': 'secret',\n        }\n\n    def test_changelist_view(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodel/')\n        for i in self.pks:\n            if i > 1:\n                self.assertContains(response, 'Primary key = %s' % i)\n            else:\n                self.assertNotContains(response, 'Primary key = %s' % i)\n\n    def test_changelist_view_count_queries(self):\n        # create 2 Person objects\n        Person.objects.create(name='person1', gender=1)\n        Person.objects.create(name='person2', gender=2)\n\n        # 4 queries are expected: 1 for the session, 1 for the user,\n        # 1 for the count and 1 for the objects on the page\n        with self.assertNumQueries(4):\n            resp = self.client.get('/test_admin/admin/admin_views/person/')\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        # here one more count(*) query will run, because filters were applied\n        with self.assertNumQueries(5):\n            extra = {'q': 'not_in_name'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 0 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 0 selected')\n        with self.assertNumQueries(5):\n            extra = {'q': 'person'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        with self.assertNumQueries(5):\n            extra = {'gender__exact': '1'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 1 selected')\n            self.assertEqual(resp.context['selection_note_all'], '1 selected')\n\n    def test_change_view(self):\n        for i in self.pks:\n            response = self.client.get('/test_admin/admin/admin_views/emptymodel/%s/' % i)\n            if i > 1:\n                self.assertEqual(response.status_code, 200)\n            else:\n                self.assertEqual(response.status_code, 404)\n\n    def test_add_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(CoverLetter.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"author\": \"Candidate, Best\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/coverletter/add/',\n                                    post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;Candidate, Best&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(ShortMessage.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"content\": \"What's this SMS thing?\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/shortmessage/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_add_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(Telegram.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"Urgent telegram\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/telegram/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Urgent telegram&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(Paper.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/paper/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        cl = CoverLetter.objects.create(author=\"John Doe\")\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/coverletter/%s/' % cl.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"author\": \"John Doe II\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/coverletter/%s/' % cl.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. Instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;John Doe II&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        sm = ShortMessage.objects.create(content=\"This is expensive\")\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/shortmessage/%s/' % sm.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"content\": \"Too expensive\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/shortmessage/%s/' % sm.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage_Deferred_timestamp object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        t = Telegram.objects.create(title=\"Frist Telegram\")\n        self.assertEqual(Telegram.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/telegram/%s/' % t.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"Telegram without typo\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/telegram/%s/' % t.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Telegram without typo&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        p = Paper.objects.create(title=\"My Paper Title\")\n        self.assertEqual(Paper.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/paper/%s/' % p.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/paper/%s/' % p.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper_Deferred_author object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_history_view_custom_qs(self):\n        \"\"\"\n        Ensure that custom querysets are considered for the admin history view.\n        Refs #21013.\n        \"\"\"\n        self.client.post(reverse('admin:login'), self.super_login)\n        FilteredManager.objects.create(pk=1)\n        FilteredManager.objects.create(pk=2)\n        response = self.client.get('/test_admin/admin/admin_views/filteredmanager/')\n        self.assertContains(response, \"PK=1\")\n        self.assertContains(response, \"PK=2\")\n        self.assertEqual(self.client.get('/test_admin/admin/admin_views/filteredmanager/1/history/').status_code, 200)\n        self.assertEqual(self.client.get('/test_admin/admin/admin_views/filteredmanager/2/history/').status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInlineFileUploadTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-actions.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n        # Set up test Picture and Gallery.\n        # These must be set up here instead of in fixtures in order to allow Picture\n        # to use a NamedTemporaryFile.\n        tdir = tempfile.gettempdir()\n        file1 = tempfile.NamedTemporaryFile(suffix=\".file1\", dir=tdir)\n        file1.write(b'a' * (2 ** 21))\n        filename = file1.name\n        file1.close()\n        self.gallery = Gallery(name=\"Test Gallery\")\n        self.gallery.save()\n        self.picture = Picture(name=\"Test Picture\", image=filename, gallery=self.gallery)\n        self.picture.save()\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inline_file_upload_edit_validation_error_post(self):\n        \"\"\"\n        Test that inline file uploads correctly display prior data (#10002).\n        \"\"\"\n        post_data = {\n            \"name\": \"Test Gallery\",\n            \"pictures-TOTAL_FORMS\": \"2\",\n            \"pictures-INITIAL_FORMS\": \"1\",\n            \"pictures-MAX_NUM_FORMS\": \"0\",\n            \"pictures-0-id\": six.text_type(self.picture.id),\n            \"pictures-0-gallery\": six.text_type(self.gallery.id),\n            \"pictures-0-name\": \"Test Picture\",\n            \"pictures-0-image\": \"\",\n            \"pictures-1-id\": \"\",\n            \"pictures-1-gallery\": str(self.gallery.id),\n            \"pictures-1-name\": \"Test Picture 2\",\n            \"pictures-1-image\": \"\",\n        }\n        response = self.client.post('/test_admin/%s/admin_views/gallery/%d/' % (self.urlbit, self.gallery.id), post_data)\n        self.assertContains(response, b\"Currently\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInlineTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.post_data = {\n            \"name\": \"Test Name\",\n\n            \"widget_set-TOTAL_FORMS\": \"3\",\n            \"widget_set-INITIAL_FORMS\": \"0\",\n            \"widget_set-MAX_NUM_FORMS\": \"0\",\n            \"widget_set-0-id\": \"\",\n            \"widget_set-0-owner\": \"1\",\n            \"widget_set-0-name\": \"\",\n            \"widget_set-1-id\": \"\",\n            \"widget_set-1-owner\": \"1\",\n            \"widget_set-1-name\": \"\",\n            \"widget_set-2-id\": \"\",\n            \"widget_set-2-owner\": \"1\",\n            \"widget_set-2-name\": \"\",\n\n            \"doohickey_set-TOTAL_FORMS\": \"3\",\n            \"doohickey_set-INITIAL_FORMS\": \"0\",\n            \"doohickey_set-MAX_NUM_FORMS\": \"0\",\n            \"doohickey_set-0-owner\": \"1\",\n            \"doohickey_set-0-code\": \"\",\n            \"doohickey_set-0-name\": \"\",\n            \"doohickey_set-1-owner\": \"1\",\n            \"doohickey_set-1-code\": \"\",\n            \"doohickey_set-1-name\": \"\",\n            \"doohickey_set-2-owner\": \"1\",\n            \"doohickey_set-2-code\": \"\",\n            \"doohickey_set-2-name\": \"\",\n\n            \"grommet_set-TOTAL_FORMS\": \"3\",\n            \"grommet_set-INITIAL_FORMS\": \"0\",\n            \"grommet_set-MAX_NUM_FORMS\": \"0\",\n            \"grommet_set-0-code\": \"\",\n            \"grommet_set-0-owner\": \"1\",\n            \"grommet_set-0-name\": \"\",\n            \"grommet_set-1-code\": \"\",\n            \"grommet_set-1-owner\": \"1\",\n            \"grommet_set-1-name\": \"\",\n            \"grommet_set-2-code\": \"\",\n            \"grommet_set-2-owner\": \"1\",\n            \"grommet_set-2-name\": \"\",\n\n            \"whatsit_set-TOTAL_FORMS\": \"3\",\n            \"whatsit_set-INITIAL_FORMS\": \"0\",\n            \"whatsit_set-MAX_NUM_FORMS\": \"0\",\n            \"whatsit_set-0-owner\": \"1\",\n            \"whatsit_set-0-index\": \"\",\n            \"whatsit_set-0-name\": \"\",\n            \"whatsit_set-1-owner\": \"1\",\n            \"whatsit_set-1-index\": \"\",\n            \"whatsit_set-1-name\": \"\",\n            \"whatsit_set-2-owner\": \"1\",\n            \"whatsit_set-2-index\": \"\",\n            \"whatsit_set-2-name\": \"\",\n\n            \"fancydoodad_set-TOTAL_FORMS\": \"3\",\n            \"fancydoodad_set-INITIAL_FORMS\": \"0\",\n            \"fancydoodad_set-MAX_NUM_FORMS\": \"0\",\n            \"fancydoodad_set-0-doodad_ptr\": \"\",\n            \"fancydoodad_set-0-owner\": \"1\",\n            \"fancydoodad_set-0-name\": \"\",\n            \"fancydoodad_set-0-expensive\": \"on\",\n            \"fancydoodad_set-1-doodad_ptr\": \"\",\n            \"fancydoodad_set-1-owner\": \"1\",\n            \"fancydoodad_set-1-name\": \"\",\n            \"fancydoodad_set-1-expensive\": \"on\",\n            \"fancydoodad_set-2-doodad_ptr\": \"\",\n            \"fancydoodad_set-2-owner\": \"1\",\n            \"fancydoodad_set-2-name\": \"\",\n            \"fancydoodad_set-2-expensive\": \"on\",\n\n            \"category_set-TOTAL_FORMS\": \"3\",\n            \"category_set-INITIAL_FORMS\": \"0\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n            \"category_set-0-order\": \"\",\n            \"category_set-0-id\": \"\",\n            \"category_set-0-collector\": \"1\",\n            \"category_set-1-order\": \"\",\n            \"category_set-1-id\": \"\",\n            \"category_set-1-collector\": \"1\",\n            \"category_set-2-order\": \"\",\n            \"category_set-2-id\": \"\",\n            \"category_set-2-collector\": \"1\",\n        }\n\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n        self.collector = Collector(pk=1, name='John Fowles')\n        self.collector.save()\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_simple_inline(self):\n        \"A simple model can be saved as inlines\"\n        # First add a new inline\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n        widget_id = Widget.objects.all()[0].id\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"widget_set-0-id\"')\n\n        # Now resave that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n\n        # Now modify that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1 Updated\")\n\n    def test_explicit_autofield_inline(self):\n        \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\"\n        # First add a new inline\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"grommet_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Now modify that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1 Updated\")\n\n    def test_char_pk_inline(self):\n        \"A model with a character PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"doohickey_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Now modify that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1 Updated\")\n\n    def test_integer_pk_inline(self):\n        \"A model with an integer PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get('/test_admin/admin/admin_views/collector/1/')\n        self.assertContains(response, 'name=\"whatsit_set-0-index\"')\n\n        # Now resave that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Now modify that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1 Updated\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1 Updated\")\n\n    def test_inherited_inline(self):\n        \"An inherited model can be saved as inlines. Regression for #11042\"\n        # First add a new inline\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n        doodad_pk = FancyDoodad.objects.all()[0].pk\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"fancydoodad_set-0-doodad_ptr\"')\n\n        # Now resave that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n\n        # Now modify that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1 Updated\")\n\n    def test_ordered_inline(self):\n        \"\"\"Check that an inline with an editable ordering fields is\n        updated correctly. Regression for #10922\"\"\"\n        # Create some objects with an initial ordering\n        Category.objects.create(id=1, order=1, collector=self.collector)\n        Category.objects.create(id=2, order=2, collector=self.collector)\n        Category.objects.create(id=3, order=0, collector=self.collector)\n        Category.objects.create(id=4, order=0, collector=self.collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        self.post_data.update({\n            \"name\": \"Frederick Clegg\",\n\n            \"category_set-TOTAL_FORMS\": \"7\",\n            \"category_set-INITIAL_FORMS\": \"4\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n\n            \"category_set-0-order\": \"14\",\n            \"category_set-0-id\": \"1\",\n            \"category_set-0-collector\": \"1\",\n\n            \"category_set-1-order\": \"13\",\n            \"category_set-1-id\": \"2\",\n            \"category_set-1-collector\": \"1\",\n\n            \"category_set-2-order\": \"1\",\n            \"category_set-2-id\": \"3\",\n            \"category_set-2-collector\": \"1\",\n\n            \"category_set-3-order\": \"0\",\n            \"category_set-3-id\": \"4\",\n            \"category_set-3-collector\": \"1\",\n\n            \"category_set-4-order\": \"\",\n            \"category_set-4-id\": \"\",\n            \"category_set-4-collector\": \"1\",\n\n            \"category_set-5-order\": \"\",\n            \"category_set-5-id\": \"\",\n            \"category_set-5-collector\": \"1\",\n\n            \"category_set-6-order\": \"\",\n            \"category_set-6-id\": \"\",\n            \"category_set-6-collector\": \"1\",\n        })\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(self.collector.category_set.count(), 4)\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass NeverCacheTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-colors.xml', 'admin-views-fabrics.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_admin_index(self):\n        \"Check the never-cache status of the main index\"\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_app_index(self):\n        \"Check the never-cache status of an application index\"\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_index(self):\n        \"Check the never-cache status of a model index\"\n        response = self.client.get('/test_admin/admin/admin_views/fabric/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_add(self):\n        \"Check the never-cache status of a model add page\"\n        response = self.client.get('/test_admin/admin/admin_views/fabric/add/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_view(self):\n        \"Check the never-cache status of a model edit page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_history(self):\n        \"Check the never-cache status of a model history page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/history/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_delete(self):\n        \"Check the never-cache status of a model delete page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/delete/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_login(self):\n        \"Check the never-cache status of login views\"\n        self.client.logout()\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_logout(self):\n        \"Check the never-cache status of logout view\"\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_password_change(self):\n        \"Check the never-cache status of the password change view\"\n        self.client.logout()\n        response = self.client.get('/test_admin/password_change/')\n        self.assertEqual(get_max_age(response), None)\n\n    def test_password_change_done(self):\n        \"Check the never-cache status of the password change done view\"\n        response = self.client.get('/test_admin/admin/password_change/done/')\n        self.assertEqual(get_max_age(response), None)\n\n    def test_JS_i18n(self):\n        \"Check the never-cache status of the JavaScript i18n view\"\n        response = self.client.get('/test_admin/admin/jsi18n/')\n        self.assertEqual(get_max_age(response), None)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass PrePopulatedTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_prepopulated_on(self):\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpost/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"id: '#id_slug',\")\n        self.assertContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    def test_prepopulated_off(self):\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpost/1/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"A Long Title\")\n        self.assertNotContains(response, \"id: '#id_slug'\")\n        self.assertNotContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertNotContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_prepopulated_maxlength_localized(self):\n        \"\"\"\n        Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure\n        that maxLength (in the JavaScript) is rendered without separators.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpostlargeslug/add/')\n        self.assertContains(response, \"maxLength: 1000\")  # instead of 1,000\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SeleniumAdminViewsFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_views'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-views-users.xml']\n    urls = \"admin_views.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_prepopulated_fields(self):\n        \"\"\"\n        Ensure that the JavaScript-automated prepopulated fields work with the\n        main form and with stacked and tabular inlines.\n        Refs #13068, #9264, #9983, #9784.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/mainprepopulated/add/'))\n\n        # Main form ----------------------------------------------------------\n        self.selenium.find_element_by_css_selector('#id_pubdate').send_keys('2012-02-18')\n        self.get_select_option('#id_status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome')\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-and-its-awesome-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-and-its-awesome')\n\n        # Stacked inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-pubdate').send_keys('2011-12-17')\n        self.get_select_option('#id_relatedprepopulated_set-0-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-name').send_keys(' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'here-stacked-inline-2011-12-17')\n        self.assertEqual(slug2, 'option-one-here-stacked-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[0].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-pubdate').send_keys('1999-01-25')\n        self.get_select_option('#id_relatedprepopulated_set-1-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-name').send_keys(' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog text... ')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'now-you-have-another-stacked-inline-very-loooooooo')  # 50 characters maximum for slug1 field\n        self.assertEqual(slug2, 'option-two-now-you-have-another-stacked-inline-very-looooooo')  # 60 characters maximum for slug2 field\n\n        # Tabular inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-pubdate').send_keys('1234-12-07')\n        self.get_select_option('#id_relatedprepopulated_set-2-0-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-name').send_keys('And now, with a t\u00c3b\u0171la\u0158 inline !!!')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'and-now-tabular-inline-1234-12-07')\n        self.assertEqual(slug2, 'option-two-and-now-tabular-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[1].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-pubdate').send_keys('1981-08-22')\n        self.get_select_option('#id_relatedprepopulated_set-2-1-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-name').send_keys('a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'tabular-inline-ignored-characters-1981-08-22')\n        self.assertEqual(slug2, 'option-one-tabular-inline-ignored-characters')\n\n        # Save and check that everything is properly stored in the database\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.assertEqual(MainPrepopulated.objects.all().count(), 1)\n        MainPrepopulated.objects.get(\n            name=' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='main-name-and-its-awesome-2012-02-18',\n            slug2='option-two-main-name-and-its-awesome',\n        )\n        self.assertEqual(RelatedPrepopulated.objects.all().count(), 4)\n        RelatedPrepopulated.objects.get(\n            name=' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ',\n            pubdate='2011-12-17',\n            status='option one',\n            slug1='here-stacked-inline-2011-12-17',\n            slug2='option-one-here-stacked-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name=' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooo',  # 75 characters in name field\n            pubdate='1999-01-25',\n            status='option two',\n            slug1='now-you-have-another-stacked-inline-very-loooooooo',\n            slug2='option-two-now-you-have-another-stacked-inline-very-looooooo',\n        )\n        RelatedPrepopulated.objects.get(\n            name='And now, with a t\u00c3b\u0171la\u0158 inline !!!',\n            pubdate='1234-12-07',\n            status='option two',\n            slug1='and-now-tabular-inline-1234-12-07',\n            slug2='option-two-and-now-tabular-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name='a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters',\n            pubdate='1981-08-22',\n            status='option one',\n            slug1='tabular-inline-ignored-characters-1981-08-22',\n            slug2='option-one-tabular-inline-ignored-characters',\n        )\n\n    def test_populate_existing_object(self):\n        \"\"\"\n        Ensure that the prepopulation works for existing objects too, as long\n        as the original field is empty.\n        Refs #19082.\n        \"\"\"\n        # Slugs are empty to start with.\n        item = MainPrepopulated.objects.create(\n            name=' this is the mAin n\u00c0M\u00eb',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='',\n            slug2='',\n        )\n        self.admin_login(username='super',\n                         password='secret',\n                         login_url='/test_admin/admin/')\n\n        object_url = '%s%s' % (\n            self.live_server_url,\n            '/test_admin/admin/admin_views/mainprepopulated/{}/'.format(item.id))\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' the best')\n\n        # The slugs got prepopulated since they were originally empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n        # Save the object\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' hello')\n\n        # The slugs got prepopulated didn't change since they were originally not empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n    def test_collapsible_fieldset(self):\n        \"\"\"\n        Test that the 'collapse' class in fieldsets definition allows to\n        show/hide the appropriate field section.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/article/add/'))\n        self.assertFalse(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.selenium.find_elements_by_link_text('Show')[0].click()\n        self.assertTrue(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.assertEqual(\n            self.selenium.find_element_by_id('fieldsetcollapser0').text,\n            \"Hide\"\n        )\n\n    def test_first_field_focus(self):\n        \"\"\"JavaScript-assisted auto-focus on first usable form field.\"\"\"\n        # First form field has a single widget\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/picture/add/'))\n        self.assertEqual(\n            self.selenium.switch_to_active_element(),\n            self.selenium.find_element_by_id('id_name')\n        )\n\n        # First form field has a MultiWidget\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/reservation/add/'))\n        self.assertEqual(\n            self.selenium.switch_to_active_element(),\n            self.selenium.find_element_by_id('id_start_date_0')\n        )\n\n\nclass SeleniumAdminViewsChromeTests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\n\nclass SeleniumAdminViewsIETests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass ReadonlyTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_readonly_get(self):\n        response = self.client.get('/test_admin/admin/admin_views/post/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"posted\"')\n        # 3 fields + 2 submit buttons + 5 inline management form fields, + 2\n        # hidden fields for inlines + 1 field for the inline + 2 empty form\n        self.assertContains(response, \"<input\", count=15)\n        self.assertContains(response, formats.localize(datetime.date.today()))\n        self.assertContains(response,\n            \"<label>Awesomeness level:</label>\")\n        self.assertContains(response, \"Very awesome.\")\n        self.assertContains(response, \"Unknown coolness.\")\n        self.assertContains(response, \"foo\")\n\n        # Checks that multiline text in a readonly field gets <br /> tags\n        self.assertContains(response, \"Multiline<br />test<br />string\")\n        self.assertContains(response, \"<p>Multiline<br />html<br />content</p>\", html=True)\n        self.assertContains(response, \"InlineMultiline<br />test<br />string\")\n\n        self.assertContains(response,\n            formats.localize(datetime.date.today() - datetime.timedelta(days=7)))\n\n        self.assertContains(response, '<div class=\"form-row field-coolness\">')\n        self.assertContains(response, '<div class=\"form-row field-awesomeness_level\">')\n        self.assertContains(response, '<div class=\"form-row field-posted\">')\n        self.assertContains(response, '<div class=\"form-row field-value\">')\n        self.assertContains(response, '<div class=\"form-row\">')\n        self.assertContains(response, '<p class=\"help\">', 3)\n        self.assertContains(response, '<p class=\"help\">Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n        self.assertContains(response, '<p class=\"help\">Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n        self.assertContains(response, '<p class=\"help\">Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n\n        p = Post.objects.create(title=\"I worked on readonly_fields\", content=\"Its good stuff\")\n        response = self.client.get('/test_admin/admin/admin_views/post/%d/' % p.pk)\n        self.assertContains(response, \"%d amount of cool\" % p.pk)\n\n    def test_readonly_post(self):\n        data = {\n            \"title\": \"Django Got Readonly Fields\",\n            \"content\": \"This is an incredible development.\",\n            \"link_set-TOTAL_FORMS\": \"1\",\n            \"link_set-INITIAL_FORMS\": \"0\",\n            \"link_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/post/add/', data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 1)\n        p = Post.objects.get()\n        self.assertEqual(p.posted, datetime.date.today())\n\n        data[\"posted\"] = \"10-8-1990\"  # some date that's not today\n        response = self.client.post('/test_admin/admin/admin_views/post/add/', data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 2)\n        p = Post.objects.order_by('-id')[0]\n        self.assertEqual(p.posted, datetime.date.today())\n\n    def test_readonly_manytomany(self):\n        \"Regression test for #13004\"\n        response = self.client.get('/test_admin/admin/admin_views/pizza/add/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_user_password_change_limited_queryset(self):\n        su = User.objects.filter(is_superuser=True)[0]\n        response = self.client.get('/test_admin/admin2/auth/user/%s/password/' % su.pk)\n        self.assertEqual(response.status_code, 404)\n\n    def test_change_form_renders_correct_null_choice_value(self):\n        \"\"\"\n        Regression test for #17911.\n        \"\"\"\n        choice = Choice.objects.create(choice=None)\n        response = self.client.get('/test_admin/admin/admin_views/choice/%s/' % choice.pk)\n        self.assertContains(response, '<p>No opinion</p>', html=True)\n        self.assertNotContains(response, '<p>(None)</p>')\n\n    def test_readonly_backwards_ref(self):\n        \"\"\"\n        Regression test for #16433 - backwards references for related objects\n        broke if the related field is read-only due to the help_text attribute\n        \"\"\"\n        topping = Topping.objects.create(name='Salami')\n        pizza = Pizza.objects.create(name='Americano')\n        pizza.toppings.add(topping)\n        response = self.client.get('/test_admin/admin/admin_views/topping/add/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_readonly_field_overrides(self):\n        \"\"\"\n        Regression test for #22087 - ModelForm Meta overrides are ignored by\n        AdminReadonlyField\n        \"\"\"\n        p = FieldOverridePost.objects.create(title=\"Test Post\", content=\"Test Content\")\n        response = self.client.get('/test_admin/admin/admin_views/fieldoverridepost/%d/' % p.pk)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<p class=\"help\">Overridden help text for the date</p>')\n        self.assertContains(response, '<label for=\"id_public\">Overridden public label:</label>', html=True)\n        self.assertNotContains(response, \"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass LimitChoicesToInAdminTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_limit_choices_to_as_callable(self):\n        \"\"\"Test for ticket 2445 changes to admin.\"\"\"\n        threepwood = Character.objects.create(\n            username='threepwood',\n            last_action=datetime.datetime.today() + datetime.timedelta(days=1),\n        )\n        marley = Character.objects.create(\n            username='marley',\n            last_action=datetime.datetime.today() - datetime.timedelta(days=1),\n        )\n        response = self.client.get('/test_admin/admin/admin_views/stumpjoke/add/')\n        # The allowed option should appear twice; the limited option should not appear.\n        self.assertContains(response, threepwood.username, count=2)\n        self.assertNotContains(response, marley.username)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass RawIdFieldsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_limit_choices_to(self):\n        \"\"\"Regression test for 14880\"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True,\n                                   leader=actor,\n                                   country=\"England\")\n        Inquisition.objects.create(expected=False,\n                                   leader=actor,\n                                   country=\"Spain\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_inquisition\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step also tests integers, strings and booleans in the\n        # lookup query string; in model we define inquisition field to have a\n        # limit_choices_to option that includes a filter on a string field\n        # (inquisition__actor__name), a filter on an integer field\n        # (inquisition__actor__age), and a filter on a boolean field\n        # (inquisition__expected).\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Spain\")\n        self.assertNotContains(response2, \"England\")\n\n    def test_limit_choices_to_isnull_false(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant0\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=0 gets parsed correctly from the\n        # lookup query string; in model we define defendant0 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=False\".\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Kilbraken\")\n        self.assertNotContains(response2, \"Palin\")\n\n    def test_limit_choices_to_isnull_true(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant1\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=1 gets parsed correctly from the\n        # lookup query string; in model we define defendant1 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=True\".\n        response2 = self.client.get(popup_url)\n        self.assertNotContains(response2, \"Kilbraken\")\n        self.assertContains(response2, \"Palin\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass UserAdminTest(TestCase):\n    \"\"\"\n    Tests user CRUD functionality.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/%s/' % new_user.pk)\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_save_continue_editing_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_continue': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/%s/' % new_user.pk)\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_password_mismatch(self):\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'mismatch',\n        })\n        self.assertEqual(response.status_code, 200)\n        adminform = response.context['adminform']\n        self.assertTrue('password' not in adminform.form.errors)\n        self.assertEqual(adminform.form.errors['password2'],\n            [\"The two password fields didn't match.\"])\n\n    def test_user_fk_popup(self):\n        \"\"\"Quick user addition in a FK popup shouldn't invoke view for further user customization\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/album/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '/test_admin/admin/auth/user/add')\n        self.assertContains(response, 'class=\"add-another\" id=\"add_id_owner\" onclick=\"return showAddAnotherPopup(this);\"')\n        response = self.client.get('/test_admin/admin/auth/user/add/?_popup=1')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post('/test_admin/admin/auth/user/add/?_popup=1', data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddAnotherPopup')\n\n    def test_save_add_another_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_addanother': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/add/')\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_user_permission_performance(self):\n        u = User.objects.all()[0]\n\n        # Don't depend on a warm cache, see #17377.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(10):\n            response = self.client.get('/test_admin/admin/auth/user/%s/' % u.pk)\n            self.assertEqual(response.status_code, 200)\n\n    def test_form_url_present_in_context(self):\n        u = User.objects.all()[0]\n        response = self.client.get('/test_admin/admin3/auth/user/%s/password/' % u.pk)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['form_url'], 'pony')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass GroupAdminTest(TestCase):\n    \"\"\"\n    Tests group CRUD functionality.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_button(self):\n        group_count = Group.objects.count()\n        response = self.client.post('/test_admin/admin/auth/group/add/', {\n            'name': 'newgroup',\n        })\n\n        Group.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/group/')\n        self.assertEqual(Group.objects.count(), group_count + 1)\n\n    def test_group_permission_performance(self):\n        g = Group.objects.create(name=\"test_group\")\n        with self.assertNumQueries(8):\n            response = self.client.get('/test_admin/admin/auth/group/%s/' % g.pk)\n            self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass CSSTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_field_prefix_css_classes(self):\n        \"\"\"\n        Ensure that fields have a CSS class name with a 'field-' prefix.\n        Refs #16371.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/post/add/')\n\n        # The main form\n        self.assertContains(response, 'class=\"form-row field-title\"')\n        self.assertContains(response, 'class=\"form-row field-content\"')\n        self.assertContains(response, 'class=\"form-row field-public\"')\n        self.assertContains(response, 'class=\"form-row field-awesomeness_level\"')\n        self.assertContains(response, 'class=\"form-row field-coolness\"')\n        self.assertContains(response, 'class=\"form-row field-value\"')\n        self.assertContains(response, 'class=\"form-row\"')  # The lambda function\n\n        # The tabular inline\n        self.assertContains(response, '<td class=\"field-url\">')\n        self.assertContains(response, '<td class=\"field-posted\">')\n\n    def test_index_css_classes(self):\n        \"\"\"\n        Ensure that CSS class names are used for each app and model on the\n        admin index pages.\n        Refs #17050.\n        \"\"\"\n        # General index page\n        response = self.client.get(\"/test_admin/admin/\")\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n        # App index page\n        response = self.client.get(\"/test_admin/admin/admin_views/\")\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n    def test_app_model_in_form_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_form template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/section/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_list_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_list template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/section/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_delete_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by delete_confirmation\n        template\n        \"\"\"\n        response = self.client.get(\n            '/test_admin/admin/admin_views/section/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_app_index_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by app_index template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<body class=\" dashboard app-admin_views')\n\n    def test_app_model_in_delete_selected_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by\n        delete_selected_confirmation template\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/section/',\n            action_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_changelist_field_classes(self):\n        \"\"\"\n        Cells of the change list table should contain the field name in their class attribute\n        Refs #11195.\n        \"\"\"\n        Podcast.objects.create(name=\"Django Dose\",\n            release_date=datetime.date.today())\n        response = self.client.get('/test_admin/admin/admin_views/podcast/')\n        self.assertContains(\n            response, '<th class=\"field-name\">')\n        self.assertContains(\n            response, '<td class=\"field-release_date nowrap\">')\n        self.assertContains(\n            response, '<td class=\"action-checkbox\">')\n\n\ntry:\n    import docutils\nexcept ImportError:\n    docutils = None\n\n\n@unittest.skipUnless(docutils, \"no docutils installed.\")\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminDocsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_tags(self):\n        response = self.client.get('/test_admin/admin/doc/tags/')\n\n        # The builtin tag group exists\n        self.assertContains(response, \"<h2>Built-in tags</h2>\", count=2, html=True)\n\n        # A builtin tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-autoescape\">autoescape</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-autoescape\">autoescape</a></li>', html=True)\n\n        # An app tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"flatpages-get_flatpages\">get_flatpages</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#flatpages-get_flatpages\">get_flatpages</a></li>', html=True)\n\n        # The admin list tag group exists\n        self.assertContains(response, \"<h2>admin_list</h2>\", count=2, html=True)\n\n        # An admin list tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"admin_list-admin_actions\">admin_actions</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#admin_list-admin_actions\">admin_actions</a></li>', html=True)\n\n    def test_filters(self):\n        response = self.client.get('/test_admin/admin/doc/filters/')\n\n        # The builtin filter group exists\n        self.assertContains(response, \"<h2>Built-in filters</h2>\", count=2, html=True)\n\n        # A builtin filter exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-add\">add</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-add\">add</a></li>', html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass ValidXHTMLTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    @override_settings(\n        TEMPLATE_CONTEXT_PROCESSORS=filter(\n            lambda t: t != 'django.core.context_processors.i18n',\n            global_settings.TEMPLATE_CONTEXT_PROCESSORS),\n        USE_I18N=False,\n    )\n    def test_lang_name_present(self):\n        response = self.client.get('/test_admin/%s/admin_views/' % self.urlbit)\n        self.assertNotContains(response, ' lang=\"\"')\n        self.assertNotContains(response, ' xml:lang=\"\"')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',),\n                   USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\nclass DateHierarchyTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assert_non_localized_year(self, response, year):\n        \"\"\"Ensure that the year is not localized with\n        USE_THOUSAND_SEPARATOR. Refs #15234.\n        \"\"\"\n        self.assertNotContains(response, formats.number_format(year))\n\n    def assert_contains_year_link(self, response, date):\n        self.assertContains(response, '?release_date__year=%d\"' % (date.year,))\n\n    def assert_contains_month_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.month, date.year))\n\n    def assert_contains_day_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__day=%d&amp;'\n            'release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.day, date.month, date.year))\n\n    def test_empty(self):\n        \"\"\"\n        Ensure that no date hierarchy links display with empty changelist.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        self.assertNotContains(response, 'release_date__year=')\n        self.assertNotContains(response, 'release_date__month=')\n        self.assertNotContains(response, 'release_date__day=')\n\n    def test_single(self):\n        \"\"\"\n        Ensure that single day-level date hierarchy appears for single object.\n        \"\"\"\n        DATE = datetime.date(2000, 6, 30)\n        Podcast.objects.create(release_date=DATE)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        self.assert_contains_day_link(response, DATE)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_month(self):\n        \"\"\"\n        Ensure that day-level links appear for changelist within single month.\n        \"\"\"\n        DATES = (datetime.date(2000, 6, 30),\n                 datetime.date(2000, 6, 15),\n                 datetime.date(2000, 6, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        for date in DATES:\n            self.assert_contains_day_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_year(self):\n        \"\"\"\n        Ensure that month-level links appear for changelist within single year.\n        \"\"\"\n        DATES = (datetime.date(2000, 1, 30),\n                 datetime.date(2000, 3, 15),\n                 datetime.date(2000, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        # no day-level links\n        self.assertNotContains(response, 'release_date__day=')\n        for date in DATES:\n            self.assert_contains_month_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_multiple_years(self):\n        \"\"\"\n        Ensure that year-level links appear for year-spanning changelist.\n        \"\"\"\n        DATES = (datetime.date(2001, 1, 30),\n                 datetime.date(2003, 3, 15),\n                 datetime.date(2005, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        # no day/month-level links\n        self.assertNotContains(response, 'release_date__day=')\n        self.assertNotContains(response, 'release_date__month=')\n        for date in DATES:\n            self.assert_contains_year_link(response, date)\n\n        # and make sure GET parameters still behave correctly\n        for date in DATES:\n            url = '%s?release_date__year=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year)\n            response = self.client.get(url)\n            self.assert_contains_month_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n            url = '%s?release_date__year=%d&release_date__month=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year, date.month)\n            response = self.client.get(url)\n            self.assert_contains_day_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminCustomSaveRelatedTests(TestCase):\n    \"\"\"\n    Ensure that one can easily customize the way related objects are saved.\n    Refs #16115.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_should_be_able_to_edit_related_objects_on_add_view(self):\n        post = {\n            'child_set-TOTAL_FORMS': '3',\n            'child_set-INITIAL_FORMS': '0',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-1-name': 'Catherine',\n        }\n        self.client.post('/test_admin/admin/admin_views/parent/add/', post)\n        self.assertEqual(1, Parent.objects.count())\n        self.assertEqual(2, Child.objects.count())\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_change_view(self):\n        parent = Parent.objects.create(name='Josh Stone')\n        paul = Child.objects.create(parent=parent, name='Paul')\n        catherine = Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'child_set-TOTAL_FORMS': '5',\n            'child_set-INITIAL_FORMS': '2',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-0-id': paul.id,\n            'child_set-1-name': 'Catherine',\n            'child_set-1-id': catherine.id,\n        }\n        self.client.post('/test_admin/admin/admin_views/parent/%s/' % parent.id, post)\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_changelist_view(self):\n        parent = Parent.objects.create(name='Josh Rock')\n        Child.objects.create(parent=parent, name='Paul')\n        Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '1',\n            'form-MAX_NUM_FORMS': '0',\n            'form-0-id': parent.id,\n            'form-0-name': 'Josh Stone',\n            '_save': 'Save'\n        }\n\n        self.client.post('/test_admin/admin/admin_views/parent/', post)\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewLogoutTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_client_logout_url_can_be_used_to_login(self):\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'registration/logged_out.html')\n        self.assertEqual(response.request['PATH_INFO'], '/test_admin/admin/logout/')\n\n        # we are now logged out\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(response.status_code, 302)  # we should be redirected to the login page.\n\n        # follow the redirect and test results.\n        response = self.client.get('/test_admin/admin/logout/', follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.request['PATH_INFO'], '/test_admin/admin/login/')\n        self.assertContains(response, '<input type=\"hidden\" name=\"next\" value=\"/test_admin/admin/\" />')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminUserMessageTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def send_message(self, level):\n        \"\"\"\n        Helper that sends a post to the dummy test methods and asserts that a\n        message with the level has appeared in the response.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_%s' % level,\n            'index': 0,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/usermessenger/',\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"%s\">Test %s</li>' % (level, level),\n                            html=True)\n\n    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n    def test_message_debug(self):\n        self.send_message('debug')\n\n    def test_message_info(self):\n        self.send_message('info')\n\n    def test_message_success(self):\n        self.send_message('success')\n\n    def test_message_warning(self):\n        self.send_message('warning')\n\n    def test_message_error(self):\n        self.send_message('error')\n\n    def test_message_extra_tags(self):\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_extra_tags',\n            'index': 0,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/usermessenger/',\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"extra_tag info\">Test tags</li>',\n                            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminKeepChangeListFiltersTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    admin_site = site\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def assertURLEqual(self, url1, url2):\n        \"\"\"\n        Assert that two URLs are equal despite the ordering\n        of their querystring. Refs #22360.\n        \"\"\"\n        parsed_url1 = urlparse(url1)\n        path1 = parsed_url1.path\n        parsed_qs1 = dict(parse_qsl(parsed_url1.query))\n\n        parsed_url2 = urlparse(url2)\n        path2 = parsed_url2.path\n        parsed_qs2 = dict(parse_qsl(parsed_url2.query))\n\n        for parsed_qs in [parsed_qs1, parsed_qs2]:\n            if '_changelist_filters' in parsed_qs:\n                changelist_filters = parsed_qs['_changelist_filters']\n                parsed_filters = dict(parse_qsl(changelist_filters))\n                parsed_qs['_changelist_filters'] = parsed_filters\n\n        self.assertEqual(path1, path2)\n        self.assertEqual(parsed_qs1, parsed_qs2)\n\n    def test_assert_url_equal(self):\n        # Test equality.\n        self.assertURLEqual(\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'\n        )\n\n        # Test inequality.\n        with self.assertRaises(AssertionError):\n            self.assertURLEqual(\n                'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n                'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'\n            )\n\n        # Ignore scheme and host.\n        self.assertURLEqual(\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'\n        )\n\n        # Ignore ordering of querystring.\n        self.assertURLEqual(\n            '/test_admin/admin/auth/user/?is_staff__exact=0&is_superuser__exact=0',\n            '/test_admin/admin/auth/user/?is_superuser__exact=0&is_staff__exact=0'\n        )\n\n        # Ignore ordering of _changelist_filters.\n        self.assertURLEqual(\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'\n        )\n\n    def get_changelist_filters(self):\n        return {\n            'is_superuser__exact': 0,\n            'is_staff__exact': 0,\n        }\n\n    def get_changelist_filters_querystring(self):\n        return urlencode(self.get_changelist_filters())\n\n    def get_preserved_filters_querystring(self):\n        return urlencode({\n            '_changelist_filters': self.get_changelist_filters_querystring()\n        })\n\n    def get_sample_user_id(self):\n        return 104\n\n    def get_changelist_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_changelist',\n                    current_app=self.admin_site.name),\n            self.get_changelist_filters_querystring(),\n        )\n\n    def get_add_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_add',\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_change_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_change', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_history_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_history', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_delete_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_delete', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def test_changelist_view(self):\n        response = self.client.get(self.get_changelist_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the `change_view` link has the correct querystring.\n        detail_link = re.search(\n            '<a href=\"(.*?)\">joepublic</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(detail_link.group(1), self.get_change_url())\n\n    def test_change_view(self):\n        # Get the `change_view`.\n        response = self.client.get(self.get_change_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        # Check the history link.\n        history_link = re.search(\n            '<a href=\"(.*?)\" class=\"historylink\">History</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(history_link.group(1), self.get_history_url())\n\n        # Check the delete link.\n        delete_link = re.search(\n            '<a href=\"(.*?)\" class=\"deletelink\">Delete</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(delete_link.group(1), self.get_delete_url())\n\n        # Test redirect on \"Save\".\n        post_data = {\n            'username': 'joepublic',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n        }\n\n        post_data['_save'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url()\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_add_view(self):\n        # Get the `add_view`.\n        response = self.client.get(self.get_add_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        post_data = {\n            'username': 'dummy',\n            'password1': 'test',\n            'password2': 'test',\n        }\n\n        # Test redirect on \"Save\".\n        post_data['_save'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.latest('pk').pk)\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['username'] = 'dummy2'\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.latest('pk').pk)\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['username'] = 'dummy3'\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_delete_view(self):\n        # Test redirect on \"Delete\".\n        response = self.client.post(self.get_delete_url(), {'post': 'yes'})\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n\n    def test_url_prefix(self):\n        context = {\n            'preserved_filters': self.get_preserved_filters_querystring(),\n            'opts': User._meta,\n        }\n\n        url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n        self.assertURLEqual(\n            self.get_changelist_url(),\n            add_preserved_filters(context, url),\n        )\n\n        original_prefix = get_script_prefix()\n        try:\n            set_script_prefix('/prefix/')\n            url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n            self.assertURLEqual(\n                self.get_changelist_url(),\n                add_preserved_filters(context, url),\n            )\n        finally:\n            set_script_prefix(original_prefix)\n\n\nclass NamespacedAdminKeepChangeListFiltersTests(AdminKeepChangeListFiltersTests):\n    admin_site = site2\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestLabelVisibility(TestCase):\n    \"\"\" #11277 -Labels of hidden fields in admin were not hidden. \"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_all_fields_visible(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelvisible/add/')\n        self.assert_fieldline_visible(response)\n        self.assert_field_visible(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def test_all_fields_hidden(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelhidden/add/')\n        self.assert_fieldline_hidden(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_hidden(response, 'second')\n\n    def test_mixin(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelmixin/add/')\n        self.assert_fieldline_visible(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def assert_field_visible(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s\">' % field_name)\n\n    def assert_field_hidden(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s hidden\">' % field_name)\n\n    def assert_fieldline_visible(self, response):\n        self.assertContains(response, '<div class=\"form-row field-first field-second\">')\n\n    def assert_fieldline_hidden(self, response):\n        self.assertContains(response, '<div class=\"form-row hidden')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewOnSiteTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-restaurants.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_add_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test1\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": \"\",\n                     \"dependentchild_set-0-family_name\": \"Test2\"}\n        response = self.client.post('/test_admin/admin/admin_views/parentwithdependentchildren/add/',\n                                    post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertTrue('some_required_info' in response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_change_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        pwdc = ParentWithDependentChildren.objects.create(some_required_info=6,\n                                                          family_name=\"Test1\")\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test2\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": str(pwdc.id),\n                     \"dependentchild_set-0-family_name\": \"Test1\"}\n        response = self.client.post('/test_admin/admin/admin_views/parentwithdependentchildren/%d/'\n                                    % pwdc.id, post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertTrue('some_required_info' in response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_check(self):\n        \"Ensure that the view_on_site value is either a boolean or a callable\"\n        try:\n            CityAdmin.view_on_site = True\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = False\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = lambda obj: obj.get_absolute_url()\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = []\n            self.assertEqual(CityAdmin.check(City), [\n                Error(\n                    \"The value of 'view_on_site' must be a callable or a boolean value.\",\n                    hint=None,\n                    obj=CityAdmin,\n                    id='admin.E025',\n                ),\n            ])\n        finally:\n            # Restore the original values for the benefit of other tests.\n            CityAdmin.view_on_site = True\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get('/test_admin/admin/admin_views/restaurant/1/')\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertNotContains(response,\n                               '\"/test_admin/admin/r/%s/1/\"' % content_type_pk,\n                               )\n\n    def test_true(self):\n        \"Ensure that the default behavior is followed if view_on_site is True\"\n        response = self.client.get('/test_admin/admin/admin_views/city/1/')\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertContains(response,\n                            '\"/test_admin/admin/r/%s/1/\"' % content_type_pk,\n                            )\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get('/test_admin/admin/admin_views/worker/1/')\n        worker = Worker.objects.get(pk=1)\n        self.assertContains(response,\n                            '\"/worker/%s/%s/\"' % (worker.surname, worker.name),\n                            )\n\n    def test_missing_get_absolute_url(self):\n        \"Ensure None is returned if model doesn't have get_absolute_url\"\n        model_admin = ModelAdmin(Worker, None)\n        self.assertIsNone(model_admin.get_view_on_site_url(Worker()))\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass InlineAdminViewOnSiteTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-restaurants.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get('/test_admin/admin/admin_views/state/1/')\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertNotContains(response,\n                               '/test_admin/admin/r/%s/1/' % content_type_pk,\n                               )\n\n    def test_true(self):\n        \"Ensure that the 'View on site' button is displayed if view_on_site is True\"\n        response = self.client.get('/test_admin/admin/admin_views/city/1/')\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertContains(response,\n                            '/test_admin/admin/r/%s/1/' % content_type_pk,\n                            )\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get('/test_admin/admin/admin_views/restaurant/1/')\n        worker = Worker.objects.get(pk=1)\n        self.assertContains(response,\n                            '\"/worker_inline/%s/%s/\"' % (worker.surname, worker.name),\n                            )\n\n\nclass AdminGenericRelationTests(TestCase):\n    def test_generic_relation_fk_list_filter(self):\n        \"\"\"\n        Validates a model with a generic relation to a model with\n        a foreign key can specify the generic+fk relationship\n        path as a list_filter. See trac #21428.\n        \"\"\"\n        class GenericFKAdmin(ModelAdmin):\n            list_filter = ('tags__content_type',)\n\n        validator = ModelAdminValidator()\n        try:\n            validator.validate_list_filter(GenericFKAdmin, Plot)\n        except ImproperlyConfigured:\n            self.fail(\"Couldn't validate a GenericRelation -> FK path in ModelAdmin.list_filter\")\n"], "fixing_code": ["from django.core.exceptions import SuspiciousOperation\n\n\nclass DisallowedModelAdminLookup(SuspiciousOperation):\n    \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n    pass\n\n\nclass DisallowedModelAdminToField(SuspiciousOperation):\n    \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"\n    pass\n", "from collections import OrderedDict\nimport copy\nimport operator\nfrom functools import partial, reduce, update_wrapper\nimport warnings\n\nfrom django import forms\nfrom django.conf import settings\nfrom django.contrib import messages\nfrom django.contrib.admin import widgets, helpers\nfrom django.contrib.admin import validation\nfrom django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n    InlineModelAdminChecks)\nfrom django.contrib.admin.exceptions import DisallowedModelAdminToField\nfrom django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n    get_deleted_objects, model_format_dict, NestedObjects,\n    lookup_needs_distinct)\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.auth import get_permission_codename\nfrom django.core import checks\nfrom django.core.exceptions import (PermissionDenied, ValidationError,\n    FieldError, ImproperlyConfigured)\nfrom django.core.paginator import Paginator\nfrom django.core.urlresolvers import reverse\nfrom django.db import models, transaction, router\nfrom django.db.models.constants import LOOKUP_SEP\nfrom django.db.models.related import RelatedObject\nfrom django.db.models.fields import BLANK_CHOICE_DASH, FieldDoesNotExist\nfrom django.db.models.sql.constants import QUERY_TERMS\nfrom django.forms.formsets import all_valid, DELETION_FIELD_NAME\nfrom django.forms.models import (modelform_factory, modelformset_factory,\n    inlineformset_factory, BaseInlineFormSet, modelform_defines_fields)\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.http.response import HttpResponseBase\nfrom django.shortcuts import get_object_or_404\nfrom django.template.response import SimpleTemplateResponse, TemplateResponse\nfrom django.utils import six\nfrom django.utils.decorators import method_decorator\nfrom django.utils.deprecation import (RenameMethodsBase,\n    RemovedInDjango18Warning, RemovedInDjango19Warning)\nfrom django.utils.encoding import force_text, python_2_unicode_compatible\nfrom django.utils.html import escape, escapejs\nfrom django.utils.http import urlencode\nfrom django.utils.text import capfirst, get_text_list\nfrom django.utils.translation import ugettext as _\nfrom django.utils.translation import ungettext\nfrom django.utils.safestring import mark_safe\nfrom django.views.decorators.csrf import csrf_protect\n\n\nIS_POPUP_VAR = '_popup'\nTO_FIELD_VAR = '_to_field'\n\n\nHORIZONTAL, VERTICAL = 1, 2\n\n\ndef get_content_type_for_model(obj):\n    # Since this module gets imported in the application's root package,\n    # it cannot import models from other applications at the module level.\n    from django.contrib.contenttypes.models import ContentType\n    return ContentType.objects.get_for_model(obj, for_concrete_model=False)\n\n\ndef get_ul_class(radio_style):\n    return 'radiolist' if radio_style == VERTICAL else 'radiolist inline'\n\n\nclass IncorrectLookupParameters(Exception):\n    pass\n\n# Defaults for formfield_overrides. ModelAdmin subclasses can change this\n# by adding to ModelAdmin.formfield_overrides.\n\nFORMFIELD_FOR_DBFIELD_DEFAULTS = {\n    models.DateTimeField: {\n        'form_class': forms.SplitDateTimeField,\n        'widget': widgets.AdminSplitDateTime\n    },\n    models.DateField: {'widget': widgets.AdminDateWidget},\n    models.TimeField: {'widget': widgets.AdminTimeWidget},\n    models.TextField: {'widget': widgets.AdminTextareaWidget},\n    models.URLField: {'widget': widgets.AdminURLFieldWidget},\n    models.IntegerField: {'widget': widgets.AdminIntegerFieldWidget},\n    models.BigIntegerField: {'widget': widgets.AdminBigIntegerFieldWidget},\n    models.CharField: {'widget': widgets.AdminTextInputWidget},\n    models.ImageField: {'widget': widgets.AdminFileWidget},\n    models.FileField: {'widget': widgets.AdminFileWidget},\n    models.EmailField: {'widget': widgets.AdminEmailInputWidget},\n}\n\ncsrf_protect_m = method_decorator(csrf_protect)\n\n\nclass RenameBaseModelAdminMethods(forms.MediaDefiningClass, RenameMethodsBase):\n    renamed_methods = (\n        ('queryset', 'get_queryset', RemovedInDjango18Warning),\n    )\n\n\nclass BaseModelAdmin(six.with_metaclass(RenameBaseModelAdminMethods)):\n    \"\"\"Functionality common to both ModelAdmin and InlineAdmin.\"\"\"\n\n    raw_id_fields = ()\n    fields = None\n    exclude = None\n    fieldsets = None\n    form = forms.ModelForm\n    filter_vertical = ()\n    filter_horizontal = ()\n    radio_fields = {}\n    prepopulated_fields = {}\n    formfield_overrides = {}\n    readonly_fields = ()\n    ordering = None\n    view_on_site = True\n\n    # Validation of ModelAdmin definitions\n    # Old, deprecated style:\n    validator_class = None\n    default_validator_class = validation.BaseValidator\n    # New style:\n    checks_class = BaseModelAdminChecks\n\n    @classmethod\n    def validate(cls, model):\n        warnings.warn(\n            'ModelAdmin.validate() is deprecated. Use \"check()\" instead.',\n            RemovedInDjango19Warning)\n        if cls.validator_class:\n            validator = cls.validator_class()\n        else:\n            validator = cls.default_validator_class()\n        validator.validate(cls, model)\n\n    @classmethod\n    def check(cls, model, **kwargs):\n        if cls.validator_class:\n            warnings.warn(\n                'ModelAdmin.validator_class is deprecated. '\n                'ModeAdmin validators must be converted to use '\n                'the system check framework.',\n                RemovedInDjango19Warning)\n            validator = cls.validator_class()\n            try:\n                validator.validate(cls, model)\n            except ImproperlyConfigured as e:\n                return [checks.Error(e.args[0], hint=None, obj=cls)]\n            else:\n                return []\n        else:\n            return cls.checks_class().check(cls, model, **kwargs)\n\n    def __init__(self):\n        overrides = FORMFIELD_FOR_DBFIELD_DEFAULTS.copy()\n        overrides.update(self.formfield_overrides)\n        self.formfield_overrides = overrides\n\n    def formfield_for_dbfield(self, db_field, **kwargs):\n        \"\"\"\n        Hook for specifying the form Field instance for a given database Field\n        instance.\n\n        If kwargs are given, they're passed to the form Field's constructor.\n        \"\"\"\n        request = kwargs.pop(\"request\", None)\n\n        # If the field specifies choices, we don't need to look for special\n        # admin widgets - we just need to use a select widget of some kind.\n        if db_field.choices:\n            return self.formfield_for_choice_field(db_field, request, **kwargs)\n\n        # ForeignKey or ManyToManyFields\n        if isinstance(db_field, (models.ForeignKey, models.ManyToManyField)):\n            # Combine the field kwargs with any options for formfield_overrides.\n            # Make sure the passed in **kwargs override anything in\n            # formfield_overrides because **kwargs is more specific, and should\n            # always win.\n            if db_field.__class__ in self.formfield_overrides:\n                kwargs = dict(self.formfield_overrides[db_field.__class__], **kwargs)\n\n            # Get the correct formfield.\n            if isinstance(db_field, models.ForeignKey):\n                formfield = self.formfield_for_foreignkey(db_field, request, **kwargs)\n            elif isinstance(db_field, models.ManyToManyField):\n                formfield = self.formfield_for_manytomany(db_field, request, **kwargs)\n\n            # For non-raw_id fields, wrap the widget with a wrapper that adds\n            # extra HTML -- the \"add other\" interface -- to the end of the\n            # rendered output. formfield can be None if it came from a\n            # OneToOneField with parent_link=True or a M2M intermediary.\n            if formfield and db_field.name not in self.raw_id_fields:\n                related_modeladmin = self.admin_site._registry.get(db_field.rel.to)\n                can_add_related = bool(related_modeladmin and\n                    related_modeladmin.has_add_permission(request))\n                formfield.widget = widgets.RelatedFieldWidgetWrapper(\n                    formfield.widget, db_field.rel, self.admin_site,\n                    can_add_related=can_add_related)\n\n            return formfield\n\n        # If we've got overrides for the formfield defined, use 'em. **kwargs\n        # passed to formfield_for_dbfield override the defaults.\n        for klass in db_field.__class__.mro():\n            if klass in self.formfield_overrides:\n                kwargs = dict(copy.deepcopy(self.formfield_overrides[klass]), **kwargs)\n                return db_field.formfield(**kwargs)\n\n        # For any other type of field, just call its formfield() method.\n        return db_field.formfield(**kwargs)\n\n    def formfield_for_choice_field(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a database Field that has declared choices.\n        \"\"\"\n        # If the field is named as a radio_field, use a RadioSelect\n        if db_field.name in self.radio_fields:\n            # Avoid stomping on custom widget/choices arguments.\n            if 'widget' not in kwargs:\n                kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n                    'class': get_ul_class(self.radio_fields[db_field.name]),\n                })\n            if 'choices' not in kwargs:\n                kwargs['choices'] = db_field.get_choices(\n                    include_blank=db_field.blank,\n                    blank_choice=[('', _('None'))]\n                )\n        return db_field.formfield(**kwargs)\n\n    def get_field_queryset(self, db, db_field, request):\n        \"\"\"\n        If the ModelAdmin specifies ordering, the queryset should respect that\n        ordering.  Otherwise don't specify the queryset, let the field decide\n        (returns None in that case).\n        \"\"\"\n        related_admin = self.admin_site._registry.get(db_field.rel.to, None)\n        if related_admin is not None:\n            ordering = related_admin.get_ordering(request)\n            if ordering is not None and ordering != ():\n                return db_field.rel.to._default_manager.using(db).order_by(*ordering)\n        return None\n\n    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a ForeignKey.\n        \"\"\"\n        db = kwargs.get('using')\n        if db_field.name in self.raw_id_fields:\n            kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.rel,\n                                    self.admin_site, using=db)\n        elif db_field.name in self.radio_fields:\n            kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n                'class': get_ul_class(self.radio_fields[db_field.name]),\n            })\n            kwargs['empty_label'] = _('None') if db_field.blank else None\n\n        if 'queryset' not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs['queryset'] = queryset\n\n        return db_field.formfield(**kwargs)\n\n    def formfield_for_manytomany(self, db_field, request=None, **kwargs):\n        \"\"\"\n        Get a form Field for a ManyToManyField.\n        \"\"\"\n        # If it uses an intermediary model that isn't auto created, don't show\n        # a field in admin.\n        if not db_field.rel.through._meta.auto_created:\n            return None\n        db = kwargs.get('using')\n\n        if db_field.name in self.raw_id_fields:\n            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.rel,\n                                    self.admin_site, using=db)\n            kwargs['help_text'] = ''\n        elif db_field.name in (list(self.filter_vertical) + list(self.filter_horizontal)):\n            kwargs['widget'] = widgets.FilteredSelectMultiple(db_field.verbose_name, (db_field.name in self.filter_vertical))\n\n        if 'queryset' not in kwargs:\n            queryset = self.get_field_queryset(db, db_field, request)\n            if queryset is not None:\n                kwargs['queryset'] = queryset\n\n        return db_field.formfield(**kwargs)\n\n    def get_view_on_site_url(self, obj=None):\n        if obj is None or not self.view_on_site:\n            return None\n\n        if callable(self.view_on_site):\n            return self.view_on_site(obj)\n        elif self.view_on_site and hasattr(obj, 'get_absolute_url'):\n            # use the ContentType lookup if view_on_site is True\n            return reverse('admin:view_on_site', kwargs={\n                'content_type_id': get_content_type_for_model(obj).pk,\n                'object_id': obj.pk\n            })\n\n    @property\n    def declared_fieldsets(self):\n        warnings.warn(\n            \"ModelAdmin.declared_fieldsets is deprecated and \"\n            \"will be removed in Django 1.9.\",\n            RemovedInDjango19Warning, stacklevel=2\n        )\n\n        if self.fieldsets:\n            return self.fieldsets\n        elif self.fields:\n            return [(None, {'fields': self.fields})]\n        return None\n\n    def get_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying fields.\n        \"\"\"\n        return self.fields\n\n    def get_fieldsets(self, request, obj=None):\n        \"\"\"\n        Hook for specifying fieldsets.\n        \"\"\"\n        # We access the property and check if it triggers a warning.\n        # If it does, then it's ours and we can safely ignore it, but if\n        # it doesn't then it has been overridden so we must warn about the\n        # deprecation.\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            declared_fieldsets = self.declared_fieldsets\n        if len(w) != 1 or not issubclass(w[0].category, RemovedInDjango19Warning):\n            warnings.warn(\n                \"ModelAdmin.declared_fieldsets is deprecated and \"\n                \"will be removed in Django 1.9.\",\n                RemovedInDjango19Warning\n            )\n            if declared_fieldsets:\n                return declared_fieldsets\n\n        if self.fieldsets:\n            return self.fieldsets\n        return [(None, {'fields': self.get_fields(request, obj)})]\n\n    def get_ordering(self, request):\n        \"\"\"\n        Hook for specifying field ordering.\n        \"\"\"\n        return self.ordering or ()  # otherwise we might try to *None, which is bad ;)\n\n    def get_readonly_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying custom readonly fields.\n        \"\"\"\n        return self.readonly_fields\n\n    def get_prepopulated_fields(self, request, obj=None):\n        \"\"\"\n        Hook for specifying custom prepopulated fields.\n        \"\"\"\n        return self.prepopulated_fields\n\n    def get_queryset(self, request):\n        \"\"\"\n        Returns a QuerySet of all model instances that can be edited by the\n        admin site. This is used by changelist_view.\n        \"\"\"\n        qs = self.model._default_manager.get_queryset()\n        # TODO: this should be handled by some parameter to the ChangeList.\n        ordering = self.get_ordering(request)\n        if ordering:\n            qs = qs.order_by(*ordering)\n        return qs\n\n    def lookup_allowed(self, lookup, value):\n        from django.contrib.admin.filters import SimpleListFilter\n\n        model = self.model\n        # Check FKey lookups that are allowed, so that popups produced by\n        # ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to,\n        # are allowed to work.\n        for l in model._meta.related_fkey_lookups:\n            # As ``limit_choices_to`` can be a callable, invoke it here.\n            if callable(l):\n                l = l()\n            for k, v in widgets.url_params_from_lookup_dict(l).items():\n                if k == lookup and v == value:\n                    return True\n\n        parts = lookup.split(LOOKUP_SEP)\n\n        # Last term in lookup is a query term (__exact, __startswith etc)\n        # This term can be ignored.\n        if len(parts) > 1 and parts[-1] in QUERY_TERMS:\n            parts.pop()\n\n        # Special case -- foo__id__exact and foo__id queries are implied\n        # if foo has been specifically included in the lookup list; so\n        # drop __id if it is the last part. However, first we need to find\n        # the pk attribute name.\n        rel_name = None\n        for part in parts[:-1]:\n            try:\n                field, _, _, _ = model._meta.get_field_by_name(part)\n            except FieldDoesNotExist:\n                # Lookups on non-existent fields are ok, since they're ignored\n                # later.\n                return True\n            if hasattr(field, 'rel'):\n                if field.rel is None:\n                    # This property or relation doesn't exist, but it's allowed\n                    # since it's ignored in ChangeList.get_filters().\n                    return True\n                model = field.rel.to\n                rel_name = field.rel.get_related_field().name\n            elif isinstance(field, RelatedObject):\n                model = field.model\n                rel_name = model._meta.pk.name\n            else:\n                rel_name = None\n        if rel_name and len(parts) > 1 and parts[-1] == rel_name:\n            parts.pop()\n\n        if len(parts) == 1:\n            return True\n        clean_lookup = LOOKUP_SEP.join(parts)\n        valid_lookups = [self.date_hierarchy]\n        for filter_item in self.list_filter:\n            if isinstance(filter_item, type) and issubclass(filter_item, SimpleListFilter):\n                valid_lookups.append(filter_item.parameter_name)\n            elif isinstance(filter_item, (list, tuple)):\n                valid_lookups.append(filter_item[0])\n            else:\n                valid_lookups.append(filter_item)\n        return clean_lookup in valid_lookups\n\n    def to_field_allowed(self, request, to_field):\n        opts = self.model._meta\n\n        try:\n            field = opts.get_field(to_field)\n        except FieldDoesNotExist:\n            return False\n\n        # Make sure at least one of the models registered for this site\n        # references this field.\n        registered_models = self.admin_site._registry\n        for related_object in opts.get_all_related_objects():\n            if (related_object.model in registered_models and\n                    field in related_object.field.foreign_related_fields):\n                return True\n\n        return False\n\n    def has_add_permission(self, request):\n        \"\"\"\n        Returns True if the given request has permission to add an object.\n        Can be overridden by the user in subclasses.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('add', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_change_permission(self, request, obj=None):\n        \"\"\"\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to change the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to change *any* object of the given type.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('change', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_delete_permission(self, request, obj=None):\n        \"\"\"\n        Returns True if the given request has permission to change the given\n        Django model instance, the default implementation doesn't examine the\n        `obj` parameter.\n\n        Can be overridden by the user in subclasses. In such case it should\n        return True if the given request has permission to delete the `obj`\n        model instance. If `obj` is None, this should return True if the given\n        request has permission to delete *any* object of the given type.\n        \"\"\"\n        opts = self.opts\n        codename = get_permission_codename('delete', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n\n@python_2_unicode_compatible\nclass ModelAdmin(BaseModelAdmin):\n    \"Encapsulates all admin options and functionality for a given model.\"\n\n    list_display = ('__str__',)\n    list_display_links = ()\n    list_filter = ()\n    list_select_related = False\n    list_per_page = 100\n    list_max_show_all = 200\n    list_editable = ()\n    search_fields = ()\n    date_hierarchy = None\n    save_as = False\n    save_on_top = False\n    paginator = Paginator\n    preserve_filters = True\n    inlines = []\n\n    # Custom templates (designed to be over-ridden in subclasses)\n    add_form_template = None\n    change_form_template = None\n    change_list_template = None\n    delete_confirmation_template = None\n    delete_selected_confirmation_template = None\n    object_history_template = None\n\n    # Actions\n    actions = []\n    action_form = helpers.ActionForm\n    actions_on_top = True\n    actions_on_bottom = False\n    actions_selection_counter = True\n\n    # validation\n    # Old, deprecated style:\n    default_validator_class = validation.ModelAdminValidator\n    # New style:\n    checks_class = ModelAdminChecks\n\n    def __init__(self, model, admin_site):\n        self.model = model\n        self.opts = model._meta\n        self.admin_site = admin_site\n        super(ModelAdmin, self).__init__()\n\n    def __str__(self):\n        return \"%s.%s\" % (self.model._meta.app_label, self.__class__.__name__)\n\n    def get_inline_instances(self, request, obj=None):\n        inline_instances = []\n        for inline_class in self.inlines:\n            inline = inline_class(self.model, self.admin_site)\n            if request:\n                if not (inline.has_add_permission(request) or\n                        inline.has_change_permission(request, obj) or\n                        inline.has_delete_permission(request, obj)):\n                    continue\n                if not inline.has_add_permission(request):\n                    inline.max_num = 0\n            inline_instances.append(inline)\n\n        return inline_instances\n\n    def get_urls(self):\n        from django.conf.urls import patterns, url\n\n        def wrap(view):\n            def wrapper(*args, **kwargs):\n                return self.admin_site.admin_view(view)(*args, **kwargs)\n            return update_wrapper(wrapper, view)\n\n        info = self.model._meta.app_label, self.model._meta.model_name\n\n        urlpatterns = patterns('',\n            url(r'^$', wrap(self.changelist_view), name='%s_%s_changelist' % info),\n            url(r'^add/$', wrap(self.add_view), name='%s_%s_add' % info),\n            url(r'^(.+)/history/$', wrap(self.history_view), name='%s_%s_history' % info),\n            url(r'^(.+)/delete/$', wrap(self.delete_view), name='%s_%s_delete' % info),\n            url(r'^(.+)/$', wrap(self.change_view), name='%s_%s_change' % info),\n        )\n        return urlpatterns\n\n    def urls(self):\n        return self.get_urls()\n    urls = property(urls)\n\n    @property\n    def media(self):\n        extra = '' if settings.DEBUG else '.min'\n        js = [\n            'core.js',\n            'admin/RelatedObjectLookups.js',\n            'jquery%s.js' % extra,\n            'jquery.init.js'\n        ]\n        if self.actions is not None:\n            js.append('actions%s.js' % extra)\n        if self.prepopulated_fields:\n            js.extend(['urlify.js', 'prepopulate%s.js' % extra])\n        return forms.Media(js=[static('admin/js/%s' % url) for url in js])\n\n    def get_model_perms(self, request):\n        \"\"\"\n        Returns a dict of all perms for this model. This dict has the keys\n        ``add``, ``change``, and ``delete`` mapping to the True/False for each\n        of those actions.\n        \"\"\"\n        return {\n            'add': self.has_add_permission(request),\n            'change': self.has_change_permission(request),\n            'delete': self.has_delete_permission(request),\n        }\n\n    def get_fields(self, request, obj=None):\n        if self.fields:\n            return self.fields\n        form = self.get_form(request, obj, fields=None)\n        return list(form.base_fields) + list(self.get_readonly_fields(request, obj))\n\n    def get_form(self, request, obj=None, **kwargs):\n        \"\"\"\n        Returns a Form class for use in the admin add view. This is used by\n        add_view and change_view.\n        \"\"\"\n        if 'fields' in kwargs:\n            fields = kwargs.pop('fields')\n        else:\n            fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n        if self.exclude is None:\n            exclude = []\n        else:\n            exclude = list(self.exclude)\n        exclude.extend(self.get_readonly_fields(request, obj))\n        if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:\n            # Take the custom ModelForm's Meta.exclude into account only if the\n            # ModelAdmin doesn't define its own.\n            exclude.extend(self.form._meta.exclude)\n        # if exclude is an empty list we pass None to be consistent with the\n        # default on modelform_factory\n        exclude = exclude or None\n        defaults = {\n            \"form\": self.form,\n            \"fields\": fields,\n            \"exclude\": exclude,\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n\n        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        try:\n            return modelform_factory(self.model, **defaults)\n        except FieldError as e:\n            raise FieldError('%s. Check fields/fieldsets/exclude attributes of class %s.'\n                             % (e, self.__class__.__name__))\n\n    def get_changelist(self, request, **kwargs):\n        \"\"\"\n        Returns the ChangeList class for use on the changelist page.\n        \"\"\"\n        from django.contrib.admin.views.main import ChangeList\n        return ChangeList\n\n    def get_object(self, request, object_id):\n        \"\"\"\n        Returns an instance matching the primary key provided. ``None``  is\n        returned if no match is found (or the object_id failed validation\n        against the primary key field).\n        \"\"\"\n        queryset = self.get_queryset(request)\n        model = queryset.model\n        try:\n            object_id = model._meta.pk.to_python(object_id)\n            return queryset.get(pk=object_id)\n        except (model.DoesNotExist, ValidationError, ValueError):\n            return None\n\n    def get_changelist_form(self, request, **kwargs):\n        \"\"\"\n        Returns a Form class for use in the Formset on the changelist page.\n        \"\"\"\n        defaults = {\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n        if (defaults.get('fields') is None\n                and not modelform_defines_fields(defaults.get('form'))):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        return modelform_factory(self.model, **defaults)\n\n    def get_changelist_formset(self, request, **kwargs):\n        \"\"\"\n        Returns a FormSet class for use on the changelist page if list_editable\n        is used.\n        \"\"\"\n        defaults = {\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n        }\n        defaults.update(kwargs)\n        return modelformset_factory(self.model,\n            self.get_changelist_form(request), extra=0,\n            fields=self.list_editable, **defaults)\n\n    def _get_formsets(self, request, obj):\n        \"\"\"\n        Helper function that exists to allow the deprecation warning to be\n        executed while this function continues to return a generator.\n        \"\"\"\n        for inline in self.get_inline_instances(request, obj):\n            yield inline.get_formset(request, obj)\n\n    def get_formsets(self, request, obj=None):\n        warnings.warn(\n            \"ModelAdmin.get_formsets() is deprecated and will be removed in \"\n            \"Django 1.9. Use ModelAdmin.get_formsets_with_inlines() instead.\",\n            RemovedInDjango19Warning, stacklevel=2\n        )\n        return self._get_formsets(request, obj)\n\n    def get_formsets_with_inlines(self, request, obj=None):\n        \"\"\"\n        Yields formsets and the corresponding inlines.\n        \"\"\"\n        # We call get_formsets() [deprecated] and check if it triggers a\n        # warning. If it does, then it's ours and we can safely ignore it, but\n        # if it doesn't then it has been overridden so we must warn about the\n        # deprecation.\n        with warnings.catch_warnings(record=True) as w:\n            warnings.simplefilter(\"always\")\n            formsets = self.get_formsets(request, obj)\n\n        if len(w) != 1 or not issubclass(w[0].category, RemovedInDjango19Warning):\n            warnings.warn(\n                \"ModelAdmin.get_formsets() is deprecated and will be removed in \"\n                \"Django 1.9. Use ModelAdmin.get_formsets_with_inlines() instead.\",\n                RemovedInDjango19Warning\n            )\n            if formsets:\n                zipped = zip(formsets, self.get_inline_instances(request, None))\n                for formset, inline in zipped:\n                    yield formset, inline\n        else:\n            for inline in self.get_inline_instances(request, obj):\n                yield inline.get_formset(request, obj), inline\n\n    def get_paginator(self, request, queryset, per_page, orphans=0, allow_empty_first_page=True):\n        return self.paginator(queryset, per_page, orphans, allow_empty_first_page)\n\n    def log_addition(self, request, object):\n        \"\"\"\n        Log that an object has been successfully added.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, ADDITION\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=force_text(object),\n            action_flag=ADDITION\n        )\n\n    def log_change(self, request, object, message):\n        \"\"\"\n        Log that an object has been successfully changed.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, CHANGE\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=force_text(object),\n            action_flag=CHANGE,\n            change_message=message\n        )\n\n    def log_deletion(self, request, object, object_repr):\n        \"\"\"\n        Log that an object will be deleted. Note that this method must be\n        called before the deletion.\n\n        The default implementation creates an admin LogEntry object.\n        \"\"\"\n        from django.contrib.admin.models import LogEntry, DELETION\n        LogEntry.objects.log_action(\n            user_id=request.user.pk,\n            content_type_id=get_content_type_for_model(object).pk,\n            object_id=object.pk,\n            object_repr=object_repr,\n            action_flag=DELETION\n        )\n\n    def action_checkbox(self, obj):\n        \"\"\"\n        A list_display column containing a checkbox widget.\n        \"\"\"\n        return helpers.checkbox.render(helpers.ACTION_CHECKBOX_NAME, force_text(obj.pk))\n    action_checkbox.short_description = mark_safe('<input type=\"checkbox\" id=\"action-toggle\" />')\n    action_checkbox.allow_tags = True\n\n    def get_actions(self, request):\n        \"\"\"\n        Return a dictionary mapping the names of all actions for this\n        ModelAdmin to a tuple of (callable, name, description) for each action.\n        \"\"\"\n        # If self.actions is explicitly set to None that means that we don't\n        # want *any* actions enabled on this page.\n        from django.contrib.admin.views.main import _is_changelist_popup\n        if self.actions is None or _is_changelist_popup(request):\n            return OrderedDict()\n\n        actions = []\n\n        # Gather actions from the admin site first\n        for (name, func) in self.admin_site.actions:\n            description = getattr(func, 'short_description', name.replace('_', ' '))\n            actions.append((func, name, description))\n\n        # Then gather them from the model admin and all parent classes,\n        # starting with self and working back up.\n        for klass in self.__class__.mro()[::-1]:\n            class_actions = getattr(klass, 'actions', [])\n            # Avoid trying to iterate over None\n            if not class_actions:\n                continue\n            actions.extend(self.get_action(action) for action in class_actions)\n\n        # get_action might have returned None, so filter any of those out.\n        actions = filter(None, actions)\n\n        # Convert the actions into an OrderedDict keyed by name.\n        actions = OrderedDict(\n            (name, (func, name, desc))\n            for func, name, desc in actions\n        )\n\n        return actions\n\n    def get_action_choices(self, request, default_choices=BLANK_CHOICE_DASH):\n        \"\"\"\n        Return a list of choices for use in a form object.  Each choice is a\n        tuple (name, description).\n        \"\"\"\n        choices = [] + default_choices\n        for func, name, description in six.itervalues(self.get_actions(request)):\n            choice = (name, description % model_format_dict(self.opts))\n            choices.append(choice)\n        return choices\n\n    def get_action(self, action):\n        \"\"\"\n        Return a given action from a parameter, which can either be a callable,\n        or the name of a method on the ModelAdmin.  Return is a tuple of\n        (callable, name, description).\n        \"\"\"\n        # If the action is a callable, just use it.\n        if callable(action):\n            func = action\n            action = action.__name__\n\n        # Next, look for a method. Grab it off self.__class__ to get an unbound\n        # method instead of a bound one; this ensures that the calling\n        # conventions are the same for functions and methods.\n        elif hasattr(self.__class__, action):\n            func = getattr(self.__class__, action)\n\n        # Finally, look for a named method on the admin site\n        else:\n            try:\n                func = self.admin_site.get_action(action)\n            except KeyError:\n                return None\n\n        if hasattr(func, 'short_description'):\n            description = func.short_description\n        else:\n            description = capfirst(action.replace('_', ' '))\n        return func, action, description\n\n    def get_list_display(self, request):\n        \"\"\"\n        Return a sequence containing the fields to be displayed on the\n        changelist.\n        \"\"\"\n        return self.list_display\n\n    def get_list_display_links(self, request, list_display):\n        \"\"\"\n        Return a sequence containing the fields to be displayed as links\n        on the changelist. The list_display parameter is the list of fields\n        returned by get_list_display().\n        \"\"\"\n        if self.list_display_links or self.list_display_links is None or not list_display:\n            return self.list_display_links\n        else:\n            # Use only the first item in list_display as link\n            return list(list_display)[:1]\n\n    def get_list_filter(self, request):\n        \"\"\"\n        Returns a sequence containing the fields to be displayed as filters in\n        the right sidebar of the changelist page.\n        \"\"\"\n        return self.list_filter\n\n    def get_search_fields(self, request):\n        \"\"\"\n        Returns a sequence containing the fields to be searched whenever\n        somebody submits a search query.\n        \"\"\"\n        return self.search_fields\n\n    def get_search_results(self, request, queryset, search_term):\n        \"\"\"\n        Returns a tuple containing a queryset to implement the search,\n        and a boolean indicating if the results may contain duplicates.\n        \"\"\"\n        # Apply keyword searches.\n        def construct_search(field_name):\n            if field_name.startswith('^'):\n                return \"%s__istartswith\" % field_name[1:]\n            elif field_name.startswith('='):\n                return \"%s__iexact\" % field_name[1:]\n            elif field_name.startswith('@'):\n                return \"%s__search\" % field_name[1:]\n            else:\n                return \"%s__icontains\" % field_name\n\n        use_distinct = False\n        search_fields = self.get_search_fields(request)\n        if search_fields and search_term:\n            orm_lookups = [construct_search(str(search_field))\n                           for search_field in search_fields]\n            for bit in search_term.split():\n                or_queries = [models.Q(**{orm_lookup: bit})\n                              for orm_lookup in orm_lookups]\n                queryset = queryset.filter(reduce(operator.or_, or_queries))\n            if not use_distinct:\n                for search_spec in orm_lookups:\n                    if lookup_needs_distinct(self.opts, search_spec):\n                        use_distinct = True\n                        break\n\n        return queryset, use_distinct\n\n    def get_preserved_filters(self, request):\n        \"\"\"\n        Returns the preserved filters querystring.\n        \"\"\"\n        match = request.resolver_match\n        if self.preserve_filters and match:\n            opts = self.model._meta\n            current_url = '%s:%s' % (match.app_name, match.url_name)\n            changelist_url = 'admin:%s_%s_changelist' % (opts.app_label, opts.model_name)\n            if current_url == changelist_url:\n                preserved_filters = request.GET.urlencode()\n            else:\n                preserved_filters = request.GET.get('_changelist_filters')\n\n            if preserved_filters:\n                return urlencode({'_changelist_filters': preserved_filters})\n        return ''\n\n    def construct_change_message(self, request, form, formsets):\n        \"\"\"\n        Construct a change message from a changed object.\n        \"\"\"\n        change_message = []\n        if form.changed_data:\n            change_message.append(_('Changed %s.') % get_text_list(form.changed_data, _('and')))\n\n        if formsets:\n            for formset in formsets:\n                for added_object in formset.new_objects:\n                    change_message.append(_('Added %(name)s \"%(object)s\".')\n                                          % {'name': force_text(added_object._meta.verbose_name),\n                                             'object': force_text(added_object)})\n                for changed_object, changed_fields in formset.changed_objects:\n                    change_message.append(_('Changed %(list)s for %(name)s \"%(object)s\".')\n                                          % {'list': get_text_list(changed_fields, _('and')),\n                                             'name': force_text(changed_object._meta.verbose_name),\n                                             'object': force_text(changed_object)})\n                for deleted_object in formset.deleted_objects:\n                    change_message.append(_('Deleted %(name)s \"%(object)s\".')\n                                          % {'name': force_text(deleted_object._meta.verbose_name),\n                                             'object': force_text(deleted_object)})\n        change_message = ' '.join(change_message)\n        return change_message or _('No fields changed.')\n\n    def message_user(self, request, message, level=messages.INFO, extra_tags='',\n                     fail_silently=False):\n        \"\"\"\n        Send a message to the user. The default implementation\n        posts a message using the django.contrib.messages backend.\n\n        Exposes almost the same API as messages.add_message(), but accepts the\n        positional arguments in a different order to maintain backwards\n        compatibility. For convenience, it accepts the `level` argument as\n        a string rather than the usual level number.\n        \"\"\"\n\n        if not isinstance(level, int):\n            # attempt to get the level if passed a string\n            try:\n                level = getattr(messages.constants, level.upper())\n            except AttributeError:\n                levels = messages.constants.DEFAULT_TAGS.values()\n                levels_repr = ', '.join('`%s`' % l for l in levels)\n                raise ValueError('Bad message level string: `%s`. '\n                        'Possible values are: %s' % (level, levels_repr))\n\n        messages.add_message(request, level, message, extra_tags=extra_tags,\n                fail_silently=fail_silently)\n\n    def save_form(self, request, form, change):\n        \"\"\"\n        Given a ModelForm return an unsaved instance. ``change`` is True if\n        the object is being changed, and False if it's being added.\n        \"\"\"\n        return form.save(commit=False)\n\n    def save_model(self, request, obj, form, change):\n        \"\"\"\n        Given a model instance save it to the database.\n        \"\"\"\n        obj.save()\n\n    def delete_model(self, request, obj):\n        \"\"\"\n        Given a model instance delete it from the database.\n        \"\"\"\n        obj.delete()\n\n    def save_formset(self, request, form, formset, change):\n        \"\"\"\n        Given an inline formset save it to the database.\n        \"\"\"\n        formset.save()\n\n    def save_related(self, request, form, formsets, change):\n        \"\"\"\n        Given the ``HttpRequest``, the parent ``ModelForm`` instance, the\n        list of inline formsets and a boolean value based on whether the\n        parent is being added or changed, save the related objects to the\n        database. Note that at this point save_form() and save_model() have\n        already been called.\n        \"\"\"\n        form.save_m2m()\n        for formset in formsets:\n            self.save_formset(request, form, formset, change=change)\n\n    def render_change_form(self, request, context, add=False, change=False, form_url='', obj=None):\n        opts = self.model._meta\n        app_label = opts.app_label\n        preserved_filters = self.get_preserved_filters(request)\n        form_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, form_url)\n        view_on_site_url = self.get_view_on_site_url(obj)\n        context.update({\n            'add': add,\n            'change': change,\n            'has_add_permission': self.has_add_permission(request),\n            'has_change_permission': self.has_change_permission(request, obj),\n            'has_delete_permission': self.has_delete_permission(request, obj),\n            'has_file_field': True,  # FIXME - this should check if form or formsets have a FileField,\n            'has_absolute_url': view_on_site_url is not None,\n            'absolute_url': view_on_site_url,\n            'form_url': form_url,\n            'opts': opts,\n            'content_type_id': get_content_type_for_model(self.model).pk,\n            'save_as': self.save_as,\n            'save_on_top': self.save_on_top,\n            'to_field_var': TO_FIELD_VAR,\n            'is_popup_var': IS_POPUP_VAR,\n            'app_label': app_label,\n        })\n        if add and self.add_form_template is not None:\n            form_template = self.add_form_template\n        else:\n            form_template = self.change_form_template\n\n        return TemplateResponse(request, form_template or [\n            \"admin/%s/%s/change_form.html\" % (app_label, opts.model_name),\n            \"admin/%s/change_form.html\" % app_label,\n            \"admin/change_form.html\"\n        ], context, current_app=self.admin_site.name)\n\n    def response_add(self, request, obj, post_url_continue=None):\n        \"\"\"\n        Determines the HttpResponse for the add_view stage.\n        \"\"\"\n        opts = obj._meta\n        pk_value = obj._get_pk_val()\n        preserved_filters = self.get_preserved_filters(request)\n        msg_dict = {'name': force_text(opts.verbose_name), 'obj': force_text(obj)}\n        # Here, we distinguish between different save types by checking for\n        # the presence of keys in request.POST.\n\n        if IS_POPUP_VAR in request.POST:\n            to_field = request.POST.get(TO_FIELD_VAR)\n            if to_field:\n                attr = str(to_field)\n            else:\n                attr = obj._meta.pk.attname\n            value = obj.serializable_value(attr)\n            return SimpleTemplateResponse('admin/popup_response.html', {\n                'pk_value': escape(pk_value),  # for possible backwards-compatibility\n                'value': escape(value),\n                'obj': escapejs(obj)\n            })\n\n        elif \"_continue\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            if post_url_continue is None:\n                post_url_continue = reverse('admin:%s_%s_change' %\n                                            (opts.app_label, opts.model_name),\n                                            args=(quote(pk_value),),\n                                            current_app=self.admin_site.name)\n            post_url_continue = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url_continue)\n            return HttpResponseRedirect(post_url_continue)\n\n        elif \"_addanother\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may add another %(name)s below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = request.path\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        else:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            return self.response_post_save_add(request, obj)\n\n    def response_change(self, request, obj):\n        \"\"\"\n        Determines the HttpResponse for the change_view stage.\n        \"\"\"\n\n        opts = self.model._meta\n        pk_value = obj._get_pk_val()\n        preserved_filters = self.get_preserved_filters(request)\n\n        msg_dict = {'name': force_text(opts.verbose_name), 'obj': force_text(obj)}\n        if \"_continue\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = request.path\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        elif \"_saveasnew\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was added successfully. You may edit it again below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = reverse('admin:%s_%s_change' %\n                                   (opts.app_label, opts.model_name),\n                                   args=(pk_value,),\n                                   current_app=self.admin_site.name)\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        elif \"_addanother\" in request.POST:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully. You may add another %(name)s below.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            redirect_url = reverse('admin:%s_%s_add' %\n                                   (opts.app_label, opts.model_name),\n                                   current_app=self.admin_site.name)\n            redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, redirect_url)\n            return HttpResponseRedirect(redirect_url)\n\n        else:\n            msg = _('The %(name)s \"%(obj)s\" was changed successfully.') % msg_dict\n            self.message_user(request, msg, messages.SUCCESS)\n            return self.response_post_save_change(request, obj)\n\n    def response_post_save_add(self, request, obj):\n        \"\"\"\n        Figure out where to redirect after the 'Save' button has been pressed\n        when adding a new object.\n        \"\"\"\n        opts = self.model._meta\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url)\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def response_post_save_change(self, request, obj):\n        \"\"\"\n        Figure out where to redirect after the 'Save' button has been pressed\n        when editing an existing object.\n        \"\"\"\n        opts = self.model._meta\n\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts': opts}, post_url)\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def response_action(self, request, queryset):\n        \"\"\"\n        Handle an admin action. This is called if a request is POSTed to the\n        changelist; it returns an HttpResponse if the action was handled, and\n        None otherwise.\n        \"\"\"\n\n        # There can be multiple action forms on the page (at the top\n        # and bottom of the change list, for example). Get the action\n        # whose button was pushed.\n        try:\n            action_index = int(request.POST.get('index', 0))\n        except ValueError:\n            action_index = 0\n\n        # Construct the action form.\n        data = request.POST.copy()\n        data.pop(helpers.ACTION_CHECKBOX_NAME, None)\n        data.pop(\"index\", None)\n\n        # Use the action whose button was pushed\n        try:\n            data.update({'action': data.getlist('action')[action_index]})\n        except IndexError:\n            # If we didn't get an action from the chosen form that's invalid\n            # POST data, so by deleting action it'll fail the validation check\n            # below. So no need to do anything here\n            pass\n\n        action_form = self.action_form(data, auto_id=None)\n        action_form.fields['action'].choices = self.get_action_choices(request)\n\n        # If the form's valid we can handle the action.\n        if action_form.is_valid():\n            action = action_form.cleaned_data['action']\n            select_across = action_form.cleaned_data['select_across']\n            func = self.get_actions(request)[action][0]\n\n            # Get the list of selected PKs. If nothing's selected, we can't\n            # perform an action on it, so bail. Except we want to perform\n            # the action explicitly on all objects.\n            selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n            if not selected and not select_across:\n                # Reminder that something needs to be selected or nothing will happen\n                msg = _(\"Items must be selected in order to perform \"\n                        \"actions on them. No items have been changed.\")\n                self.message_user(request, msg, messages.WARNING)\n                return None\n\n            if not select_across:\n                # Perform the action only on the selected objects\n                queryset = queryset.filter(pk__in=selected)\n\n            response = func(self, request, queryset)\n\n            # Actions may return an HttpResponse-like object, which will be\n            # used as the response from the POST. If not, we'll be a good\n            # little HTTP citizen and redirect back to the changelist page.\n            if isinstance(response, HttpResponseBase):\n                return response\n            else:\n                return HttpResponseRedirect(request.get_full_path())\n        else:\n            msg = _(\"No action selected.\")\n            self.message_user(request, msg, messages.WARNING)\n            return None\n\n    def response_delete(self, request, obj_display):\n        \"\"\"\n        Determines the HttpResponse for the delete_view stage.\n        \"\"\"\n\n        opts = self.model._meta\n\n        self.message_user(request,\n            _('The %(name)s \"%(obj)s\" was deleted successfully.') % {\n                'name': force_text(opts.verbose_name),\n                'obj': force_text(obj_display)\n            }, messages.SUCCESS)\n\n        if self.has_change_permission(request, None):\n            post_url = reverse('admin:%s_%s_changelist' %\n                               (opts.app_label, opts.model_name),\n                               current_app=self.admin_site.name)\n            preserved_filters = self.get_preserved_filters(request)\n            post_url = add_preserved_filters(\n                {'preserved_filters': preserved_filters, 'opts': opts}, post_url\n            )\n        else:\n            post_url = reverse('admin:index',\n                               current_app=self.admin_site.name)\n        return HttpResponseRedirect(post_url)\n\n    def render_delete_form(self, request, context):\n        opts = self.model._meta\n        app_label = opts.app_label\n\n        return TemplateResponse(request,\n            self.delete_confirmation_template or [\n                \"admin/{}/{}/delete_confirmation.html\".format(app_label, opts.model_name),\n                \"admin/{}/delete_confirmation.html\".format(app_label),\n                \"admin/delete_confirmation.html\"\n            ], context, current_app=self.admin_site.name)\n\n    def get_inline_formsets(self, request, formsets, inline_instances,\n                            obj=None):\n        inline_admin_formsets = []\n        for inline, formset in zip(inline_instances, formsets):\n            fieldsets = list(inline.get_fieldsets(request, obj))\n            readonly = list(inline.get_readonly_fields(request, obj))\n            prepopulated = dict(inline.get_prepopulated_fields(request, obj))\n            inline_admin_formset = helpers.InlineAdminFormSet(inline, formset,\n                fieldsets, prepopulated, readonly, model_admin=self)\n            inline_admin_formsets.append(inline_admin_formset)\n        return inline_admin_formsets\n\n    def get_changeform_initial_data(self, request):\n        \"\"\"\n        Get the initial form data.\n        Unless overridden, this populates from the GET params.\n        \"\"\"\n        initial = dict(request.GET.items())\n        for k in initial:\n            try:\n                f = self.model._meta.get_field(k)\n            except models.FieldDoesNotExist:\n                continue\n            # We have to special-case M2Ms as a list of comma-separated PKs.\n            if isinstance(f, models.ManyToManyField):\n                initial[k] = initial[k].split(\",\")\n        return initial\n\n    @csrf_protect_m\n    @transaction.atomic\n    def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n\n        to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n        if to_field and not self.to_field_allowed(request, to_field):\n            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n\n        model = self.model\n        opts = model._meta\n        add = object_id is None\n\n        if add:\n            if not self.has_add_permission(request):\n                raise PermissionDenied\n            obj = None\n\n        else:\n            obj = self.get_object(request, unquote(object_id))\n\n            if not self.has_change_permission(request, obj):\n                raise PermissionDenied\n\n            if obj is None:\n                raise Http404(_('%(name)s object with primary key %(key)r does not exist.') % {\n                    'name': force_text(opts.verbose_name), 'key': escape(object_id)})\n\n            if request.method == 'POST' and \"_saveasnew\" in request.POST:\n                return self.add_view(request, form_url=reverse('admin:%s_%s_add' % (\n                    opts.app_label, opts.model_name),\n                    current_app=self.admin_site.name))\n\n        ModelForm = self.get_form(request, obj)\n        if request.method == 'POST':\n            form = ModelForm(request.POST, request.FILES, instance=obj)\n            if form.is_valid():\n                form_validated = True\n                new_object = self.save_form(request, form, change=not add)\n            else:\n                form_validated = False\n                new_object = form.instance\n            formsets, inline_instances = self._create_formsets(request, new_object)\n            if all_valid(formsets) and form_validated:\n                self.save_model(request, new_object, form, not add)\n                self.save_related(request, form, formsets, not add)\n                if add:\n                    self.log_addition(request, new_object)\n                    return self.response_add(request, new_object)\n                else:\n                    change_message = self.construct_change_message(request, form, formsets)\n                    self.log_change(request, new_object, change_message)\n                    return self.response_change(request, new_object)\n        else:\n            if add:\n                initial = self.get_changeform_initial_data(request)\n                form = ModelForm(initial=initial)\n                formsets, inline_instances = self._create_formsets(request, self.model())\n            else:\n                form = ModelForm(instance=obj)\n                formsets, inline_instances = self._create_formsets(request, obj)\n\n        adminForm = helpers.AdminForm(\n            form,\n            list(self.get_fieldsets(request, obj)),\n            self.get_prepopulated_fields(request, obj),\n            self.get_readonly_fields(request, obj),\n            model_admin=self)\n        media = self.media + adminForm.media\n\n        inline_formsets = self.get_inline_formsets(request, formsets, inline_instances, obj)\n        for inline_formset in inline_formsets:\n            media = media + inline_formset.media\n\n        context = dict(self.admin_site.each_context(),\n            title=(_('Add %s') if add else _('Change %s')) % force_text(opts.verbose_name),\n            adminform=adminForm,\n            object_id=object_id,\n            original=obj,\n            is_popup=(IS_POPUP_VAR in request.POST or\n                      IS_POPUP_VAR in request.GET),\n            to_field=to_field,\n            media=media,\n            inline_admin_formsets=inline_formsets,\n            errors=helpers.AdminErrorList(form, formsets),\n            preserved_filters=self.get_preserved_filters(request),\n        )\n\n        context.update(extra_context or {})\n\n        return self.render_change_form(request, context, add=add, change=not add, obj=obj, form_url=form_url)\n\n    def add_view(self, request, form_url='', extra_context=None):\n        return self.changeform_view(request, None, form_url, extra_context)\n\n    def change_view(self, request, object_id, form_url='', extra_context=None):\n        return self.changeform_view(request, object_id, form_url, extra_context)\n\n    @csrf_protect_m\n    def changelist_view(self, request, extra_context=None):\n        \"\"\"\n        The 'change list' admin view for this model.\n        \"\"\"\n        from django.contrib.admin.views.main import ERROR_FLAG\n        opts = self.model._meta\n        app_label = opts.app_label\n        if not self.has_change_permission(request, None):\n            raise PermissionDenied\n\n        list_display = self.get_list_display(request)\n        list_display_links = self.get_list_display_links(request, list_display)\n        list_filter = self.get_list_filter(request)\n        search_fields = self.get_search_fields(request)\n\n        # Check actions to see if any are available on this changelist\n        actions = self.get_actions(request)\n        if actions:\n            # Add the action checkboxes if there are any actions available.\n            list_display = ['action_checkbox'] + list(list_display)\n\n        ChangeList = self.get_changelist(request)\n        try:\n            cl = ChangeList(request, self.model, list_display,\n                list_display_links, list_filter, self.date_hierarchy,\n                search_fields, self.list_select_related, self.list_per_page,\n                self.list_max_show_all, self.list_editable, self)\n\n        except IncorrectLookupParameters:\n            # Wacky lookup parameters were given, so redirect to the main\n            # changelist page, without parameters, and pass an 'invalid=1'\n            # parameter via the query string. If wacky parameters were given\n            # and the 'invalid=1' parameter was already in the query string,\n            # something is screwed up with the database, so display an error\n            # page.\n            if ERROR_FLAG in request.GET.keys():\n                return SimpleTemplateResponse('admin/invalid_setup.html', {\n                    'title': _('Database error'),\n                })\n            return HttpResponseRedirect(request.path + '?' + ERROR_FLAG + '=1')\n\n        # If the request was POSTed, this might be a bulk action or a bulk\n        # edit. Try to look up an action or confirmation first, but if this\n        # isn't an action the POST will fall through to the bulk edit check,\n        # below.\n        action_failed = False\n        selected = request.POST.getlist(helpers.ACTION_CHECKBOX_NAME)\n\n        # Actions with no confirmation\n        if (actions and request.method == 'POST' and\n                'index' in request.POST and '_save' not in request.POST):\n            if selected:\n                response = self.response_action(request, queryset=cl.get_queryset(request))\n                if response:\n                    return response\n                else:\n                    action_failed = True\n            else:\n                msg = _(\"Items must be selected in order to perform \"\n                        \"actions on them. No items have been changed.\")\n                self.message_user(request, msg, messages.WARNING)\n                action_failed = True\n\n        # Actions with confirmation\n        if (actions and request.method == 'POST' and\n                helpers.ACTION_CHECKBOX_NAME in request.POST and\n                'index' not in request.POST and '_save' not in request.POST):\n            if selected:\n                response = self.response_action(request, queryset=cl.get_queryset(request))\n                if response:\n                    return response\n                else:\n                    action_failed = True\n\n        # If we're allowing changelist editing, we need to construct a formset\n        # for the changelist given all the fields to be edited. Then we'll\n        # use the formset to validate/process POSTed data.\n        formset = cl.formset = None\n\n        # Handle POSTed bulk-edit data.\n        if (request.method == \"POST\" and cl.list_editable and\n                '_save' in request.POST and not action_failed):\n            FormSet = self.get_changelist_formset(request)\n            formset = cl.formset = FormSet(request.POST, request.FILES, queryset=cl.result_list)\n            if formset.is_valid():\n                changecount = 0\n                for form in formset.forms:\n                    if form.has_changed():\n                        obj = self.save_form(request, form, change=True)\n                        self.save_model(request, obj, form, change=True)\n                        self.save_related(request, form, formsets=[], change=True)\n                        change_msg = self.construct_change_message(request, form, None)\n                        self.log_change(request, obj, change_msg)\n                        changecount += 1\n\n                if changecount:\n                    if changecount == 1:\n                        name = force_text(opts.verbose_name)\n                    else:\n                        name = force_text(opts.verbose_name_plural)\n                    msg = ungettext(\"%(count)s %(name)s was changed successfully.\",\n                                    \"%(count)s %(name)s were changed successfully.\",\n                                    changecount) % {'count': changecount,\n                                                    'name': name,\n                                                    'obj': force_text(obj)}\n                    self.message_user(request, msg, messages.SUCCESS)\n\n                return HttpResponseRedirect(request.get_full_path())\n\n        # Handle GET -- construct a formset for display.\n        elif cl.list_editable:\n            FormSet = self.get_changelist_formset(request)\n            formset = cl.formset = FormSet(queryset=cl.result_list)\n\n        # Build the list of media to be used by the formset.\n        if formset:\n            media = self.media + formset.media\n        else:\n            media = self.media\n\n        # Build the action form and populate it with available actions.\n        if actions:\n            action_form = self.action_form(auto_id=None)\n            action_form.fields['action'].choices = self.get_action_choices(request)\n        else:\n            action_form = None\n\n        selection_note_all = ungettext('%(total_count)s selected',\n            'All %(total_count)s selected', cl.result_count)\n\n        context = dict(\n            self.admin_site.each_context(),\n            module_name=force_text(opts.verbose_name_plural),\n            selection_note=_('0 of %(cnt)s selected') % {'cnt': len(cl.result_list)},\n            selection_note_all=selection_note_all % {'total_count': cl.result_count},\n            title=cl.title,\n            is_popup=cl.is_popup,\n            to_field=cl.to_field,\n            cl=cl,\n            media=media,\n            has_add_permission=self.has_add_permission(request),\n            opts=cl.opts,\n            action_form=action_form,\n            actions_on_top=self.actions_on_top,\n            actions_on_bottom=self.actions_on_bottom,\n            actions_selection_counter=self.actions_selection_counter,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n\n        return TemplateResponse(request, self.change_list_template or [\n            'admin/%s/%s/change_list.html' % (app_label, opts.model_name),\n            'admin/%s/change_list.html' % app_label,\n            'admin/change_list.html'\n        ], context, current_app=self.admin_site.name)\n\n    @csrf_protect_m\n    @transaction.atomic\n    def delete_view(self, request, object_id, extra_context=None):\n        \"The 'delete' admin view for this model.\"\n        opts = self.model._meta\n        app_label = opts.app_label\n\n        obj = self.get_object(request, unquote(object_id))\n\n        if not self.has_delete_permission(request, obj):\n            raise PermissionDenied\n\n        if obj is None:\n            raise Http404(\n                _('%(name)s object with primary key %(key)r does not exist.') %\n                {'name': force_text(opts.verbose_name), 'key': escape(object_id)}\n            )\n\n        using = router.db_for_write(self.model)\n\n        # Populate deleted_objects, a data structure of all related objects that\n        # will also be deleted.\n        (deleted_objects, perms_needed, protected) = get_deleted_objects(\n            [obj], opts, request.user, self.admin_site, using)\n\n        if request.POST:  # The user has already confirmed the deletion.\n            if perms_needed:\n                raise PermissionDenied\n            obj_display = force_text(obj)\n            self.log_deletion(request, obj, obj_display)\n            self.delete_model(request, obj)\n\n            return self.response_delete(request, obj_display)\n\n        object_name = force_text(opts.verbose_name)\n\n        if perms_needed or protected:\n            title = _(\"Cannot delete %(name)s\") % {\"name\": object_name}\n        else:\n            title = _(\"Are you sure?\")\n\n        context = dict(\n            self.admin_site.each_context(),\n            title=title,\n            object_name=object_name,\n            object=obj,\n            deleted_objects=deleted_objects,\n            perms_lacking=perms_needed,\n            protected=protected,\n            opts=opts,\n            app_label=app_label,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n\n        return self.render_delete_form(request, context)\n\n    def history_view(self, request, object_id, extra_context=None):\n        \"The 'history' admin view for this model.\"\n        from django.contrib.admin.models import LogEntry\n        # First check if the user can see this history.\n        model = self.model\n        obj = get_object_or_404(self.get_queryset(request), pk=unquote(object_id))\n\n        if not self.has_change_permission(request, obj):\n            raise PermissionDenied\n\n        # Then get the history for this object.\n        opts = model._meta\n        app_label = opts.app_label\n        action_list = LogEntry.objects.filter(\n            object_id=unquote(object_id),\n            content_type=get_content_type_for_model(model)\n        ).select_related().order_by('action_time')\n\n        context = dict(self.admin_site.each_context(),\n            title=_('Change history: %s') % force_text(obj),\n            action_list=action_list,\n            module_name=capfirst(force_text(opts.verbose_name_plural)),\n            object=obj,\n            opts=opts,\n            preserved_filters=self.get_preserved_filters(request),\n        )\n        context.update(extra_context or {})\n        return TemplateResponse(request, self.object_history_template or [\n            \"admin/%s/%s/object_history.html\" % (app_label, opts.model_name),\n            \"admin/%s/object_history.html\" % app_label,\n            \"admin/object_history.html\"\n        ], context, current_app=self.admin_site.name)\n\n    def _create_formsets(self, request, obj):\n        \"Helper function to generate formsets for add/change_view.\"\n        formsets = []\n        inline_instances = []\n        prefixes = {}\n        get_formsets_args = [request]\n        if obj.pk:\n            get_formsets_args.append(obj)\n        for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n            prefix = FormSet.get_default_prefix()\n            prefixes[prefix] = prefixes.get(prefix, 0) + 1\n            if prefixes[prefix] != 1 or not prefix:\n                prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n            formset_params = {\n                'instance': obj,\n                'prefix': prefix,\n                'queryset': inline.get_queryset(request),\n            }\n            if request.method == 'POST':\n                formset_params.update({\n                    'data': request.POST,\n                    'files': request.FILES,\n                    'save_as_new': '_saveasnew' in request.POST\n                })\n            formsets.append(FormSet(**formset_params))\n            inline_instances.append(inline)\n        return formsets, inline_instances\n\n\nclass InlineModelAdmin(BaseModelAdmin):\n    \"\"\"\n    Options for inline editing of ``model`` instances.\n\n    Provide ``fk_name`` to specify the attribute name of the ``ForeignKey``\n    from ``model`` to its parent. This is required if ``model`` has more than\n    one ``ForeignKey`` to its parent.\n    \"\"\"\n    model = None\n    fk_name = None\n    formset = BaseInlineFormSet\n    extra = 3\n    min_num = None\n    max_num = None\n    template = None\n    verbose_name = None\n    verbose_name_plural = None\n    can_delete = True\n\n    checks_class = InlineModelAdminChecks\n\n    def __init__(self, parent_model, admin_site):\n        self.admin_site = admin_site\n        self.parent_model = parent_model\n        self.opts = self.model._meta\n        super(InlineModelAdmin, self).__init__()\n        if self.verbose_name is None:\n            self.verbose_name = self.model._meta.verbose_name\n        if self.verbose_name_plural is None:\n            self.verbose_name_plural = self.model._meta.verbose_name_plural\n\n    @property\n    def media(self):\n        extra = '' if settings.DEBUG else '.min'\n        js = ['jquery%s.js' % extra, 'jquery.init.js', 'inlines%s.js' % extra]\n        if self.prepopulated_fields:\n            js.extend(['urlify.js', 'prepopulate%s.js' % extra])\n        if self.filter_vertical or self.filter_horizontal:\n            js.extend(['SelectBox.js', 'SelectFilter2.js'])\n        return forms.Media(js=[static('admin/js/%s' % url) for url in js])\n\n    def get_extra(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the number of extra inline forms.\"\"\"\n        return self.extra\n\n    def get_min_num(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the min number of inline forms.\"\"\"\n        return self.min_num\n\n    def get_max_num(self, request, obj=None, **kwargs):\n        \"\"\"Hook for customizing the max number of extra inline forms.\"\"\"\n        return self.max_num\n\n    def get_formset(self, request, obj=None, **kwargs):\n        \"\"\"Returns a BaseInlineFormSet class for use in admin add/change views.\"\"\"\n        if 'fields' in kwargs:\n            fields = kwargs.pop('fields')\n        else:\n            fields = flatten_fieldsets(self.get_fieldsets(request, obj))\n        if self.exclude is None:\n            exclude = []\n        else:\n            exclude = list(self.exclude)\n        exclude.extend(self.get_readonly_fields(request, obj))\n        if self.exclude is None and hasattr(self.form, '_meta') and self.form._meta.exclude:\n            # Take the custom ModelForm's Meta.exclude into account only if the\n            # InlineModelAdmin doesn't define its own.\n            exclude.extend(self.form._meta.exclude)\n        # If exclude is an empty list we use None, since that's the actual\n        # default.\n        exclude = exclude or None\n        can_delete = self.can_delete and self.has_delete_permission(request, obj)\n        defaults = {\n            \"form\": self.form,\n            \"formset\": self.formset,\n            \"fk_name\": self.fk_name,\n            \"fields\": fields,\n            \"exclude\": exclude,\n            \"formfield_callback\": partial(self.formfield_for_dbfield, request=request),\n            \"extra\": self.get_extra(request, obj, **kwargs),\n            \"min_num\": self.get_min_num(request, obj, **kwargs),\n            \"max_num\": self.get_max_num(request, obj, **kwargs),\n            \"can_delete\": can_delete,\n        }\n\n        defaults.update(kwargs)\n        base_model_form = defaults['form']\n\n        class DeleteProtectedModelForm(base_model_form):\n            def hand_clean_DELETE(self):\n                \"\"\"\n                We don't validate the 'DELETE' field itself because on\n                templates it's not rendered using the field information, but\n                just using a generic \"deletion_field\" of the InlineModelAdmin.\n                \"\"\"\n                if self.cleaned_data.get(DELETION_FIELD_NAME, False):\n                    using = router.db_for_write(self._meta.model)\n                    collector = NestedObjects(using=using)\n                    collector.collect([self.instance])\n                    if collector.protected:\n                        objs = []\n                        for p in collector.protected:\n                            objs.append(\n                                # Translators: Model verbose name and instance representation, suitable to be an item in a list\n                                _('%(class_name)s %(instance)s') % {\n                                    'class_name': p._meta.verbose_name,\n                                    'instance': p}\n                            )\n                        params = {'class_name': self._meta.model._meta.verbose_name,\n                                  'instance': self.instance,\n                                  'related_objects': get_text_list(objs, _('and'))}\n                        msg = _(\"Deleting %(class_name)s %(instance)s would require \"\n                                \"deleting the following protected related objects: \"\n                                \"%(related_objects)s\")\n                        raise ValidationError(msg, code='deleting_protected', params=params)\n\n            def is_valid(self):\n                result = super(DeleteProtectedModelForm, self).is_valid()\n                self.hand_clean_DELETE()\n                return result\n\n        defaults['form'] = DeleteProtectedModelForm\n\n        if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n            defaults['fields'] = forms.ALL_FIELDS\n\n        return inlineformset_factory(self.parent_model, self.model, **defaults)\n\n    def get_fields(self, request, obj=None):\n        if self.fields:\n            return self.fields\n        form = self.get_formset(request, obj, fields=None).form\n        return list(form.base_fields) + list(self.get_readonly_fields(request, obj))\n\n    def get_queryset(self, request):\n        queryset = super(InlineModelAdmin, self).get_queryset(request)\n        if not self.has_change_permission(request):\n            queryset = queryset.none()\n        return queryset\n\n    def has_add_permission(self, request):\n        if self.opts.auto_created:\n            # We're checking the rights to an auto-created intermediate model,\n            # which doesn't have its own individual permissions. The user needs\n            # to have the change permission for the related model in order to\n            # be able to do anything with the intermediate model.\n            return self.has_change_permission(request)\n        return super(InlineModelAdmin, self).has_add_permission(request)\n\n    def has_change_permission(self, request, obj=None):\n        opts = self.opts\n        if opts.auto_created:\n            # The model was auto-created as intermediary for a\n            # ManyToMany-relationship, find the target model\n            for field in opts.fields:\n                if field.rel and field.rel.to != self.parent_model:\n                    opts = field.rel.to._meta\n                    break\n        codename = get_permission_codename('change', opts)\n        return request.user.has_perm(\"%s.%s\" % (opts.app_label, codename))\n\n    def has_delete_permission(self, request, obj=None):\n        if self.opts.auto_created:\n            # We're checking the rights to an auto-created intermediate model,\n            # which doesn't have its own individual permissions. The user needs\n            # to have the change permission for the related model in order to\n            # be able to do anything with the intermediate model.\n            return self.has_change_permission(request, obj)\n        return super(InlineModelAdmin, self).has_delete_permission(request, obj)\n\n\nclass StackedInline(InlineModelAdmin):\n    template = 'admin/edit_inline/stacked.html'\n\n\nclass TabularInline(InlineModelAdmin):\n    template = 'admin/edit_inline/tabular.html'\n", "from collections import OrderedDict\nimport sys\nimport warnings\n\nfrom django.core.exceptions import SuspiciousOperation, ImproperlyConfigured\nfrom django.core.paginator import InvalidPage\nfrom django.core.urlresolvers import reverse\nfrom django.db import models\nfrom django.db.models.fields import FieldDoesNotExist\nfrom django.utils import six\nfrom django.utils.deprecation import RenameMethodsBase, RemovedInDjango18Warning\nfrom django.utils.encoding import force_text\nfrom django.utils.translation import ugettext, ugettext_lazy\nfrom django.utils.http import urlencode\n\nfrom django.contrib.admin import FieldListFilter\nfrom django.contrib.admin.exceptions import (\n    DisallowedModelAdminLookup, DisallowedModelAdminToField,\n)\nfrom django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\nfrom django.contrib.admin.utils import (quote, get_fields_from_path,\n    lookup_needs_distinct, prepare_lookup_value)\n\n# Changelist settings\nALL_VAR = 'all'\nORDER_VAR = 'o'\nORDER_TYPE_VAR = 'ot'\nPAGE_VAR = 'p'\nSEARCH_VAR = 'q'\nERROR_FLAG = 'e'\n\nIGNORED_PARAMS = (\n    ALL_VAR, ORDER_VAR, ORDER_TYPE_VAR, SEARCH_VAR, IS_POPUP_VAR, TO_FIELD_VAR)\n\n# Text to display within change-list table cells if the value is blank.\nEMPTY_CHANGELIST_VALUE = ugettext_lazy('(None)')\n\n\ndef _is_changelist_popup(request):\n    \"\"\"\n    Returns True if the popup GET parameter is set.\n\n    This function is introduced to facilitate deprecating the legacy\n    value for IS_POPUP_VAR and should be removed at the end of the\n    deprecation cycle.\n    \"\"\"\n\n    if IS_POPUP_VAR in request.GET:\n        return True\n\n    IS_LEGACY_POPUP_VAR = 'pop'\n    if IS_LEGACY_POPUP_VAR in request.GET:\n        warnings.warn(\n            \"The `%s` GET parameter has been renamed to `%s`.\" %\n            (IS_LEGACY_POPUP_VAR, IS_POPUP_VAR),\n            RemovedInDjango18Warning, 2)\n        return True\n\n    return False\n\n\nclass RenameChangeListMethods(RenameMethodsBase):\n    renamed_methods = (\n        ('get_query_set', 'get_queryset', RemovedInDjango18Warning),\n    )\n\n\nclass ChangeList(six.with_metaclass(RenameChangeListMethods)):\n    def __init__(self, request, model, list_display, list_display_links,\n            list_filter, date_hierarchy, search_fields, list_select_related,\n            list_per_page, list_max_show_all, list_editable, model_admin):\n        self.model = model\n        self.opts = model._meta\n        self.lookup_opts = self.opts\n        self.root_queryset = model_admin.get_queryset(request)\n        self.list_display = list_display\n        self.list_display_links = list_display_links\n        self.list_filter = list_filter\n        self.date_hierarchy = date_hierarchy\n        self.search_fields = search_fields\n        self.list_select_related = list_select_related\n        self.list_per_page = list_per_page\n        self.list_max_show_all = list_max_show_all\n        self.model_admin = model_admin\n        self.preserved_filters = model_admin.get_preserved_filters(request)\n\n        # Get search parameters from the query string.\n        try:\n            self.page_num = int(request.GET.get(PAGE_VAR, 0))\n        except ValueError:\n            self.page_num = 0\n        self.show_all = ALL_VAR in request.GET\n        self.is_popup = _is_changelist_popup(request)\n        to_field = request.GET.get(TO_FIELD_VAR)\n        if to_field and not model_admin.to_field_allowed(request, to_field):\n            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n        self.to_field = to_field\n        self.params = dict(request.GET.items())\n        if PAGE_VAR in self.params:\n            del self.params[PAGE_VAR]\n        if ERROR_FLAG in self.params:\n            del self.params[ERROR_FLAG]\n\n        if self.is_popup:\n            self.list_editable = ()\n        else:\n            self.list_editable = list_editable\n        self.query = request.GET.get(SEARCH_VAR, '')\n        self.queryset = self.get_queryset(request)\n        self.get_results(request)\n        if self.is_popup:\n            title = ugettext('Select %s')\n        else:\n            title = ugettext('Select %s to change')\n        self.title = title % force_text(self.opts.verbose_name)\n        self.pk_attname = self.lookup_opts.pk.attname\n\n    @property\n    def root_query_set(self):\n        warnings.warn(\"`ChangeList.root_query_set` is deprecated, \"\n                      \"use `root_queryset` instead.\",\n                      RemovedInDjango18Warning, 2)\n        return self.root_queryset\n\n    @property\n    def query_set(self):\n        warnings.warn(\"`ChangeList.query_set` is deprecated, \"\n                      \"use `queryset` instead.\",\n                      RemovedInDjango18Warning, 2)\n        return self.queryset\n\n    def get_filters_params(self, params=None):\n        \"\"\"\n        Returns all params except IGNORED_PARAMS\n        \"\"\"\n        if not params:\n            params = self.params\n        lookup_params = params.copy()  # a dictionary of the query string\n        # Remove all the parameters that are globally and systematically\n        # ignored.\n        for ignored in IGNORED_PARAMS:\n            if ignored in lookup_params:\n                del lookup_params[ignored]\n        return lookup_params\n\n    def get_filters(self, request):\n        lookup_params = self.get_filters_params()\n        use_distinct = False\n\n        for key, value in lookup_params.items():\n            if not self.model_admin.lookup_allowed(key, value):\n                raise DisallowedModelAdminLookup(\"Filtering by %s not allowed\" % key)\n\n        filter_specs = []\n        if self.list_filter:\n            for list_filter in self.list_filter:\n                if callable(list_filter):\n                    # This is simply a custom list filter class.\n                    spec = list_filter(request, lookup_params,\n                        self.model, self.model_admin)\n                else:\n                    field_path = None\n                    if isinstance(list_filter, (tuple, list)):\n                        # This is a custom FieldListFilter class for a given field.\n                        field, field_list_filter_class = list_filter\n                    else:\n                        # This is simply a field name, so use the default\n                        # FieldListFilter class that has been registered for\n                        # the type of the given field.\n                        field, field_list_filter_class = list_filter, FieldListFilter.create\n                    if not isinstance(field, models.Field):\n                        field_path = field\n                        field = get_fields_from_path(self.model, field_path)[-1]\n                    spec = field_list_filter_class(field, request, lookup_params,\n                        self.model, self.model_admin, field_path=field_path)\n                    # Check if we need to use distinct()\n                    use_distinct = (use_distinct or\n                                    lookup_needs_distinct(self.lookup_opts,\n                                                          field_path))\n                if spec and spec.has_output():\n                    filter_specs.append(spec)\n\n        # At this point, all the parameters used by the various ListFilters\n        # have been removed from lookup_params, which now only contains other\n        # parameters passed via the query string. We now loop through the\n        # remaining parameters both to ensure that all the parameters are valid\n        # fields and to determine if at least one of them needs distinct(). If\n        # the lookup parameters aren't real fields, then bail out.\n        try:\n            for key, value in lookup_params.items():\n                lookup_params[key] = prepare_lookup_value(key, value)\n                use_distinct = (use_distinct or\n                                lookup_needs_distinct(self.lookup_opts, key))\n            return filter_specs, bool(filter_specs), lookup_params, use_distinct\n        except FieldDoesNotExist as e:\n            six.reraise(IncorrectLookupParameters, IncorrectLookupParameters(e), sys.exc_info()[2])\n\n    def get_query_string(self, new_params=None, remove=None):\n        if new_params is None:\n            new_params = {}\n        if remove is None:\n            remove = []\n        p = self.params.copy()\n        for r in remove:\n            for k in list(p):\n                if k.startswith(r):\n                    del p[k]\n        for k, v in new_params.items():\n            if v is None:\n                if k in p:\n                    del p[k]\n            else:\n                p[k] = v\n        return '?%s' % urlencode(sorted(p.items()))\n\n    def get_results(self, request):\n        paginator = self.model_admin.get_paginator(request, self.queryset, self.list_per_page)\n        # Get the number of objects, with admin filters applied.\n        result_count = paginator.count\n\n        # Get the total number of objects, with no admin filters applied.\n        # Perform a slight optimization:\n        # full_result_count is equal to paginator.count if no filters\n        # were applied\n        if self.get_filters_params() or self.params.get(SEARCH_VAR):\n            full_result_count = self.root_queryset.count()\n        else:\n            full_result_count = result_count\n        can_show_all = result_count <= self.list_max_show_all\n        multi_page = result_count > self.list_per_page\n\n        # Get the list of objects to display on this page.\n        if (self.show_all and can_show_all) or not multi_page:\n            result_list = self.queryset._clone()\n        else:\n            try:\n                result_list = paginator.page(self.page_num + 1).object_list\n            except InvalidPage:\n                raise IncorrectLookupParameters\n\n        self.result_count = result_count\n        self.full_result_count = full_result_count\n        self.result_list = result_list\n        self.can_show_all = can_show_all\n        self.multi_page = multi_page\n        self.paginator = paginator\n\n    def _get_default_ordering(self):\n        ordering = []\n        if self.model_admin.ordering:\n            ordering = self.model_admin.ordering\n        elif self.lookup_opts.ordering:\n            ordering = self.lookup_opts.ordering\n        return ordering\n\n    def get_ordering_field(self, field_name):\n        \"\"\"\n        Returns the proper model field name corresponding to the given\n        field_name to use for ordering. field_name may either be the name of a\n        proper model field or the name of a method (on the admin or model) or a\n        callable with the 'admin_order_field' attribute. Returns None if no\n        proper model field name can be matched.\n        \"\"\"\n        try:\n            field = self.lookup_opts.get_field(field_name)\n            return field.name\n        except models.FieldDoesNotExist:\n            # See whether field_name is a name of a non-field\n            # that allows sorting.\n            if callable(field_name):\n                attr = field_name\n            elif hasattr(self.model_admin, field_name):\n                attr = getattr(self.model_admin, field_name)\n            else:\n                attr = getattr(self.model, field_name)\n            return getattr(attr, 'admin_order_field', None)\n\n    def get_ordering(self, request, queryset):\n        \"\"\"\n        Returns the list of ordering fields for the change list.\n        First we check the get_ordering() method in model admin, then we check\n        the object's default ordering. Then, any manually-specified ordering\n        from the query string overrides anything. Finally, a deterministic\n        order is guaranteed by ensuring the primary key is used as the last\n        ordering field.\n        \"\"\"\n        params = self.params\n        ordering = list(self.model_admin.get_ordering(request)\n                        or self._get_default_ordering())\n        if ORDER_VAR in params:\n            # Clear ordering and used params\n            ordering = []\n            order_params = params[ORDER_VAR].split('.')\n            for p in order_params:\n                try:\n                    none, pfx, idx = p.rpartition('-')\n                    field_name = self.list_display[int(idx)]\n                    order_field = self.get_ordering_field(field_name)\n                    if not order_field:\n                        continue  # No 'admin_order_field', skip it\n                    # reverse order if order_field has already \"-\" as prefix\n                    if order_field.startswith('-') and pfx == \"-\":\n                        ordering.append(order_field[1:])\n                    else:\n                        ordering.append(pfx + order_field)\n                except (IndexError, ValueError):\n                    continue  # Invalid ordering specified, skip it.\n\n        # Add the given query's ordering fields, if any.\n        ordering.extend(queryset.query.order_by)\n\n        # Ensure that the primary key is systematically present in the list of\n        # ordering fields so we can guarantee a deterministic order across all\n        # database backends.\n        pk_name = self.lookup_opts.pk.name\n        if not (set(ordering) & set(['pk', '-pk', pk_name, '-' + pk_name])):\n            # The two sets do not intersect, meaning the pk isn't present. So\n            # we add it.\n            ordering.append('-pk')\n\n        return ordering\n\n    def get_ordering_field_columns(self):\n        \"\"\"\n        Returns an OrderedDict of ordering field column numbers and asc/desc\n        \"\"\"\n\n        # We must cope with more than one column having the same underlying sort\n        # field, so we base things on column numbers.\n        ordering = self._get_default_ordering()\n        ordering_fields = OrderedDict()\n        if ORDER_VAR not in self.params:\n            # for ordering specified on ModelAdmin or model Meta, we don't know\n            # the right column numbers absolutely, because there might be more\n            # than one column associated with that ordering, so we guess.\n            for field in ordering:\n                if field.startswith('-'):\n                    field = field[1:]\n                    order_type = 'desc'\n                else:\n                    order_type = 'asc'\n                for index, attr in enumerate(self.list_display):\n                    if self.get_ordering_field(attr) == field:\n                        ordering_fields[index] = order_type\n                        break\n        else:\n            for p in self.params[ORDER_VAR].split('.'):\n                none, pfx, idx = p.rpartition('-')\n                try:\n                    idx = int(idx)\n                except ValueError:\n                    continue  # skip it\n                ordering_fields[idx] = 'desc' if pfx == '-' else 'asc'\n        return ordering_fields\n\n    def get_queryset(self, request):\n        # First, we collect all the declared list filters.\n        (self.filter_specs, self.has_filters, remaining_lookup_params,\n         filters_use_distinct) = self.get_filters(request)\n\n        # Then, we let every list filter modify the queryset to its liking.\n        qs = self.root_queryset\n        for filter_spec in self.filter_specs:\n            new_qs = filter_spec.queryset(request, qs)\n            if new_qs is not None:\n                qs = new_qs\n\n        try:\n            # Finally, we apply the remaining lookup parameters from the query\n            # string (i.e. those that haven't already been processed by the\n            # filters).\n            qs = qs.filter(**remaining_lookup_params)\n        except (SuspiciousOperation, ImproperlyConfigured):\n            # Allow certain types of errors to be re-raised as-is so that the\n            # caller can treat them in a special way.\n            raise\n        except Exception as e:\n            # Every other error is caught with a naked except, because we don't\n            # have any other way of validating lookup parameters. They might be\n            # invalid if the keyword arguments are incorrect, or if the values\n            # are not in the correct type, so we might get FieldError,\n            # ValueError, ValidationError, or ?.\n            raise IncorrectLookupParameters(e)\n\n        if not qs.query.select_related:\n            qs = self.apply_select_related(qs)\n\n        # Set ordering.\n        ordering = self.get_ordering(request, qs)\n        qs = qs.order_by(*ordering)\n\n        # Apply search results\n        qs, search_use_distinct = self.model_admin.get_search_results(\n            request, qs, self.query)\n\n        # Remove duplicates from results, if necessary\n        if filters_use_distinct | search_use_distinct:\n            return qs.distinct()\n        else:\n            return qs\n\n    def apply_select_related(self, qs):\n        if self.list_select_related is True:\n            return qs.select_related()\n\n        if self.list_select_related is False:\n            if self.has_related_field_in_list_display():\n                return qs.select_related()\n\n        if self.list_select_related:\n            return qs.select_related(*self.list_select_related)\n        return qs\n\n    def has_related_field_in_list_display(self):\n        for field_name in self.list_display:\n            try:\n                field = self.lookup_opts.get_field(field_name)\n            except models.FieldDoesNotExist:\n                pass\n            else:\n                if isinstance(field.rel, models.ManyToOneRel):\n                    return True\n        return False\n\n    def url_for_result(self, result):\n        pk = getattr(result, self.pk_attname)\n        return reverse('admin:%s_%s_change' % (self.opts.app_label,\n                                               self.opts.model_name),\n                       args=(quote(pk),),\n                       current_app=self.model_admin.admin_site.name)\n", "=================\nDjango Exceptions\n=================\n\n\nDjango raises some Django specific exceptions as well as many standard\nPython exceptions.\n\nDjango Core Exceptions\n======================\n\n.. module:: django.core.exceptions\n    :synopsis: Django core exceptions\n\nDjango core exception classes are defined in :mod:`django.core.exceptions`.\n\nObjectDoesNotExist and DoesNotExist\n-----------------------------------\n.. exception:: DoesNotExist\n\n    The ``DoesNotExist`` exception is raised when an object is not found for\n    the given parameters of a query. Django provides a ``DoesNotExist``\n    exception as an attribute of each model class to identify the class of\n    object that could not be found and to allow you to catch a particular model\n    class with ``try/except``.\n\n.. exception:: ObjectDoesNotExist\n\n    The base class for ``DoesNotExist`` exceptions; a ``try/except`` for\n    ``ObjectDoesNotExist`` will catch ``DoesNotExist`` exceptions for all\n    models.\n\n    See :meth:`~django.db.models.query.QuerySet.get()` for further information\n    on :exc:`ObjectDoesNotExist` and :exc:`DoesNotExist`.\n\nMultipleObjectsReturned\n-----------------------\n.. exception:: MultipleObjectsReturned\n\n    The :exc:`MultipleObjectsReturned` exception is raised by a query if only\n    one object is expected, but multiple objects are returned. A base version\n    of this exception is provided in :mod:`django.core.exceptions`; each model\n    class contains a subclassed version that can be used to identify the\n    specific object type that has returned multiple objects.\n\n    See :meth:`~django.db.models.query.QuerySet.get()` for further information.\n\nSuspiciousOperation\n-------------------\n.. exception:: SuspiciousOperation\n\n    The :exc:`SuspiciousOperation` exception is raised when a user has\n    performed an operation that should be considered suspicious from a security\n    perspective, such as tampering with a session cookie. Subclasses of\n    SuspiciousOperation include:\n\n    * DisallowedHost\n    * DisallowedModelAdminLookup\n    * DisallowedModelAdminToField\n    * DisallowedRedirect\n    * InvalidSessionKey\n    * SuspiciousFileOperation\n    * SuspiciousMultipartForm\n    * SuspiciousSession\n    * WizardViewCookieModified\n\n    If a ``SuspiciousOperation`` exception reaches the WSGI handler level it is\n    logged at the ``Error`` level and results in\n    a :class:`~django.http.HttpResponseBadRequest`. See the :doc:`logging\n    documentation </topics/logging/>` for more information.\n\nPermissionDenied\n----------------\n.. exception:: PermissionDenied\n\n    The :exc:`PermissionDenied` exception is raised when a user does not have\n    permission to perform the action requested.\n\nViewDoesNotExist\n----------------\n.. exception:: ViewDoesNotExist\n\n    The :exc:`ViewDoesNotExist` exception is raised by\n    :mod:`django.core.urlresolvers` when a requested view does not exist.\n\nMiddlewareNotUsed\n-----------------\n.. exception:: MiddlewareNotUsed\n\n    The :exc:`MiddlewareNotUsed` exception is raised when a middleware is not\n    used in the server configuration.\n\nImproperlyConfigured\n--------------------\n.. exception:: ImproperlyConfigured\n\n    The :exc:`ImproperlyConfigured` exception is raised when Django is\n    somehow improperly configured -- for example, if a value in ``settings.py``\n    is incorrect or unparseable.\n\nFieldError\n----------\n.. exception:: FieldError\n\n    The :exc:`FieldError` exception is raised when there is a problem with a\n    model field. This can happen for several reasons:\n\n    - A field in a model clashes with a field of the same name from an\n      abstract base class\n    - An infinite loop is caused by ordering\n    - A keyword cannot be parsed from the filter parameters\n    - A field cannot be determined from a keyword in the query\n      parameters\n    - A join is not permitted on the specified field\n    - A field name is invalid\n    - A query contains invalid order_by arguments\n\nValidationError\n---------------\n.. exception:: ValidationError\n\n    The :exc:`ValidationError` exception is raised when data fails form or\n    model field validation. For more information about validation, see\n    :doc:`Form and Field Validation </ref/forms/validation>`,\n    :ref:`Model Field Validation <validating-objects>` and the\n    :doc:`Validator Reference </ref/validators>`.\n\nNON_FIELD_ERRORS\n~~~~~~~~~~~~~~~~\n.. data:: NON_FIELD_ERRORS\n\n``ValidationError``\\s that don't belong to a particular field in a form\nor model are classified as ``NON_FIELD_ERRORS``. This constant is used\nas a key in dictionaries that otherwise map fields to their respective\nlist of errors.\n\n.. currentmodule:: django.core.urlresolvers\n\nURL Resolver exceptions\n=======================\n\nURL Resolver exceptions are defined in :mod:`django.core.urlresolvers`.\n\nResolver404\n--------------\n.. exception:: Resolver404\n\n    The :exc:`Resolver404` exception is raised by\n    :func:`django.core.urlresolvers.resolve()` if the path passed to\n    ``resolve()`` doesn't map to a view. It's a subclass of\n    :class:`django.http.Http404`\n\nNoReverseMatch\n--------------\n.. exception:: NoReverseMatch\n\n    The :exc:`NoReverseMatch` exception is raised by\n    :mod:`django.core.urlresolvers` when a matching URL in your URLconf\n    cannot be identified based on the parameters supplied.\n\n.. currentmodule:: django.db\n\nDatabase Exceptions\n===================\n\nDatabase exceptions are provided in :mod:`django.db`.\n\nDjango wraps the standard database exceptions so that your Django code has a\nguaranteed common implementation of these classes.\n\n.. exception:: Error\n.. exception:: InterfaceError\n.. exception:: DatabaseError\n.. exception:: DataError\n.. exception:: OperationalError\n.. exception:: IntegrityError\n.. exception:: InternalError\n.. exception:: ProgrammingError\n.. exception:: NotSupportedError\n\nThe Django wrappers for database exceptions behave exactly the same as\nthe underlying database exceptions. See :pep:`249`, the Python Database API\nSpecification v2.0, for further information.\n\nAs per :pep:`3134`, a ``__cause__`` attribute is set with the original\n(underlying) database exception, allowing access to any additional\ninformation provided. (Note that this attribute is available under\nboth Python 2 and Python 3, although :pep:`3134` normally only applies\nto Python 3.)\n\n.. versionchanged:: 1.6\n\n    Previous versions of Django only wrapped ``DatabaseError`` and\n    ``IntegrityError``, and did not provide ``__cause__``.\n\n.. exception:: models.ProtectedError\n\nRaised to prevent deletion of referenced objects when using\n:attr:`django.db.models.PROTECT`. :exc:`models.ProtectedError` is a subclass\nof :exc:`IntegrityError`.\n\n.. currentmodule:: django.http\n\nHttp Exceptions\n===============\n\nHttp exceptions are provided in :mod:`django.http`.\n\n.. exception:: UnreadablePostError\n\n    The :exc:`UnreadablePostError` is raised when a user cancels an upload.\n\n.. currentmodule:: django.db.transaction\n\nTransaction Exceptions\n======================\n\nTransaction exceptions are defined in :mod:`django.db.transaction`.\n\n.. exception:: TransactionManagementError\n\n    The :exc:`TransactionManagementError` is raised for any and all problems\n    related to database transactions.\n\nPython Exceptions\n=================\n\nDjango raises built-in Python exceptions when appropriate as well. See the\nPython documentation for further information on the :ref:`bltin-exceptions`.\n", "===========================\nDjango 1.4.14 release notes\n===========================\n\n*Under development*\n\nDjango 1.4.14 fixes several security issues in 1.4.13.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n\nData leakage via query string manipulation in ``contrib.admin``\n===============================================================\n\nIn older versions of Django it was possible to reveal any field's data by\nmodifying the \"popup\" and \"to_field\" parameters of the query string on an admin\nchange form page. For example, requesting a URL like\n``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed\nviewing the password hash of each user. While the admin requires users to have\npermissions to view the change form pages in the first place, this could leak\ndata if you rely on users having access to view only certain fields on a model.\n\nTo address the issue, an exception will now be raised if a ``to_field`` value\nthat isn't a related field to a model that has been registered with the admin\nis specified.\n", "==========================\nDjango 1.5.9 release notes\n==========================\n\n*Under development*\n\nDjango 1.5.9 fixes several security issues in 1.5.8.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n\nData leakage via query string manipulation in ``contrib.admin``\n===============================================================\n\nIn older versions of Django it was possible to reveal any field's data by\nmodifying the \"popup\" and \"to_field\" parameters of the query string on an admin\nchange form page. For example, requesting a URL like\n``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed\nviewing the password hash of each user. While the admin requires users to have\npermissions to view the change form pages in the first place, this could leak\ndata if you rely on users having access to view only certain fields on a model.\n\nTo address the issue, an exception will now be raised if a ``to_field`` value\nthat isn't a related field to a model that has been registered with the admin\nis specified.\n", "==========================\nDjango 1.6.6 release notes\n==========================\n\n*Under development*\n\nDjango 1.6.6 fixes several security issues and bugs in 1.6.5.\n\n:func:`~django.core.urlresolvers.reverse()` could generate URLs pointing to other hosts\n=======================================================================================\n\nIn certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user's passwords.\n\nTo remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.\n\nFile upload denial-of-service\n=============================\n\nBefore this release, Django's file upload handing in its default configuration\nmay degrade to producing a huge number of ``os.stat()`` system calls when a\nduplicate filename is uploaded. Since ``stat()`` may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.\n\nWe've remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n:meth:`Storage.get_available_name()\n<django.core.files.storage.Storage.get_available_name>` now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. ``\"_x3a1gho\"``),\nrather than iterating through an underscore followed by a number (e.g. ``\"_1\"``,\n``\"_2\"``, etc.).\n\n``RemoteUserMiddleware`` session hijacking\n==========================================\n\nWhen using the :class:`~django.contrib.auth.middleware.RemoteUserMiddleware`\nand the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\nrequests without an intervening logout could result in the prior user's session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.\n\nData leakage via query string manipulation in ``contrib.admin``\n===============================================================\n\nIn older versions of Django it was possible to reveal any field's data by\nmodifying the \"popup\" and \"to_field\" parameters of the query string on an admin\nchange form page. For example, requesting a URL like\n``/admin/auth/user/?_popup=1&t=password`` and viewing the page's HTML allowed\nviewing the password hash of each user. While the admin requires users to have\npermissions to view the change form pages in the first place, this could leak\ndata if you rely on users having access to view only certain fields on a model.\n\nTo address the issue, an exception will now be raised if a ``to_field`` value\nthat isn't a related field to a model that has been registered with the admin\nis specified.\n\nBugfixes\n========\n\n* Corrected email and URL validation to reject a trailing dash\n  (:ticket:`22579`).\n\n* Prevented indexes on PostgreSQL virtual fields (:ticket:`22514`).\n\n* Prevented edge case where values of FK fields could be initialized with a\n  wrong value when an inline model formset is created for a relationship\n  defined to point to a field other than the PK (:ticket:`13794`).\n\n* Restored ``pre_delete``  signals for ``GenericRelation`` cascade deletion\n  (:ticket:`22998`).\n\n* Fixed transaction handling when specifying non-default database in\n  ``createcachetable`` and ``flush`` (:ticket:`23089`).\n\n* Fixed the \"ORA-01843: not a valid month\" errors when using Unicode\n  with older versions of Oracle server (:ticket:`20292`).\n\n* Restored bug fix for sending unicode email with Python 2.6.5 and below\n  (:ticket:`19107`).\n\n* Prevented ``UnicodeDecodeError`` in ``runserver`` with non-UTF-8 and\n  non-English locale (:ticket:`23265`).\n\n* Fixed JavaScript errors while editing multi-geometry objects in the OpenLayers\n  widget (:ticket:`23137`, :ticket:`23293`).\n\n* Prevented a crash on Python 3 with query strings containing unencoded\n  non-ASCII characters (:ticket:`22996`).\n", "# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nimport os\nimport re\nimport datetime\nimport unittest\n\nfrom django.conf import settings, global_settings\nfrom django.core import mail\nfrom django.core.checks import Error\nfrom django.core.files import temp as tempfile\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.core.urlresolvers import (NoReverseMatch,\n    get_script_prefix, reverse, set_script_prefix)\n# Register auth models with the admin.\nfrom django.contrib.auth import get_permission_codename\nfrom django.contrib.admin import ModelAdmin\nfrom django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\nfrom django.contrib.admin.models import LogEntry, DELETION\nfrom django.contrib.admin.options import TO_FIELD_VAR\nfrom django.contrib.admin.templatetags.admin_static import static\nfrom django.contrib.admin.templatetags.admin_urls import add_preserved_filters\nfrom django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\nfrom django.contrib.admin.utils import quote\nfrom django.contrib.admin.validation import ModelAdminValidator\nfrom django.contrib.admin.views.main import IS_POPUP_VAR\nfrom django.contrib.auth import REDIRECT_FIELD_NAME\nfrom django.contrib.auth.models import Group, User, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.contrib.staticfiles.storage import staticfiles_storage\nfrom django.forms.utils import ErrorList\nfrom django.template.response import TemplateResponse\nfrom django.test import TestCase, skipUnlessDBFeature\nfrom django.test.utils import patch_logger\nfrom django.test import override_settings\nfrom django.utils import formats\nfrom django.utils import translation\nfrom django.utils.cache import get_max_age\nfrom django.utils.encoding import iri_to_uri, force_bytes, force_text\nfrom django.utils.html import escape\nfrom django.utils.http import urlencode, urlquote\nfrom django.utils.six.moves.urllib.parse import parse_qsl, urljoin, urlparse\nfrom django.utils._os import upath\nfrom django.utils import six\n\n# local test models\nfrom .models import (Article, BarAccount, CustomArticle, EmptyModel, FooAccount,\n    Gallery, ModelWithStringPrimaryKey, Person, Persona, Picture, Podcast,\n    Section, Subscriber, Vodcast, Language, Collector, Widget, Grommet,\n    DooHickey, FancyDoodad, Whatsit, Category, Post, Plot, FunkyTag, Chapter,\n    Book, Promo, WorkHour, Employee, Question, Answer, Inquisition, Actor,\n    FoodDelivery, RowLevelChangePermissionModel, Paper, CoverLetter, Story,\n    OtherStory, ComplexSortedPerson, PluggableSearchPerson, Parent, Child, AdminOrderedField,\n    AdminOrderedModelMethod, AdminOrderedAdminMethod, AdminOrderedCallable,\n    Report, MainPrepopulated, RelatedPrepopulated, UnorderedObject,\n    Simple, UndeletableObject, UnchangeableObject, Choice, ShortMessage,\n    Telegram, Pizza, Topping, FilteredManager, City, Restaurant, Worker,\n    ParentWithDependentChildren, Character, FieldOverridePost, Color2)\nfrom .admin import site, site2, CityAdmin\n\n\nERROR_MESSAGE = \"Please enter the correct username and password \\\nfor a staff account. Note that both fields may be case-sensitive.\"\nADMIN_VIEW_TEMPLATES_DIR = settings.TEMPLATE_DIRS + (os.path.join(os.path.dirname(upath(__file__)), 'templates'),)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',),\n                   USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\nclass AdminViewBasicTestCase(TestCase):\n    fixtures = ['admin-views-users.xml', 'admin-views-colors.xml',\n                'admin-views-fabrics.xml', 'admin-views-books.xml']\n\n    # Store the bit of the URL where the admin is registered as a class\n    # variable. That way we can test a second AdminSite just by subclassing\n    # this test case and changing urlbit.\n    urlbit = 'admin'\n\n    urls = \"admin_views.urls\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n        formats.reset_format_cache()\n\n    def assertContentBefore(self, response, text1, text2, failing_msg=None):\n        \"\"\"\n        Testing utility asserting that text1 appears before text2 in response\n        content.\n        \"\"\"\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(response.content.index(force_bytes(text1)) < response.content.index(force_bytes(text2)),\n            failing_msg)\n\n\nclass AdminViewBasicTest(AdminViewBasicTestCase):\n    def test_trailing_slash_required(self):\n        \"\"\"\n        If you leave off the trailing slash, app should redirect and add it.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/add' % self.urlbit)\n        self.assertRedirects(response,\n            '/test_admin/%s/admin_views/article/add/' % self.urlbit,\n            status_code=301)\n\n    def test_admin_static_template_tag(self):\n        \"\"\"\n        Test that admin_static.static is pointing to the collectstatic version\n        (as django.contrib.collectstatic is in installed apps).\n        \"\"\"\n        old_url = staticfiles_storage.base_url\n        staticfiles_storage.base_url = '/test/'\n        try:\n            self.assertEqual(static('path'), '/test/path')\n        finally:\n            staticfiles_storage.base_url = old_url\n\n    def test_basic_add_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the add_view works.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_add_with_GET_args(self):\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit, {'name': 'My Section'})\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'value=\"My Section\"',\n            msg_prefix=\"Couldn't find an input with the right value in the response\")\n\n    def test_basic_edit_GET(self):\n        \"\"\"\n        A smoke test to ensure GET on the change_view works.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/1/' % self.urlbit)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n\n    def test_basic_edit_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works (returns an HTTP 404 error, see\n        #11191) when passing a string as the PK argument for a model with an\n        integer PK field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/abc/' % self.urlbit)\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_inheritance_GET_string_PK(self):\n        \"\"\"\n        Ensure GET on the change_view works on inherited models (returns an\n        HTTP 404 error, see #19951) when passing a string as the PK argument\n        for a model with an integer PK field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/supervillain/abc/' % self.urlbit)\n        self.assertEqual(response.status_code, 404)\n\n    def test_basic_add_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on add_view works.\n        \"\"\"\n        post_data = {\n            \"name\": \"Another Section\",\n            # inline data\n            \"article_set-TOTAL_FORMS\": \"3\",\n            \"article_set-INITIAL_FORMS\": \"0\",\n            \"article_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post('/test_admin/%s/admin_views/section/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_popup_add_POST(self):\n        \"\"\"\n        Ensure http response from a popup is properly escaped.\n        \"\"\"\n        post_data = {\n            '_popup': '1',\n            'title': 'title with a new\\nline',\n            'content': 'some content',\n            'date_0': '2010-09-10',\n            'date_1': '14:55:39',\n        }\n        response = self.client.post('/test_admin/%s/admin_views/article/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddAnotherPopup')\n        self.assertContains(response, 'title with a new\\\\u000Aline')\n\n    # Post data for edit inline\n    inline_post_data = {\n        \"name\": \"Test section\",\n        # inline data\n        \"article_set-TOTAL_FORMS\": \"6\",\n        \"article_set-INITIAL_FORMS\": \"3\",\n        \"article_set-MAX_NUM_FORMS\": \"0\",\n        \"article_set-0-id\": \"1\",\n        # there is no title in database, give one here or formset will fail.\n        \"article_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n        \"article_set-0-content\": \"&lt;p&gt;Middle content&lt;/p&gt;\",\n        \"article_set-0-date_0\": \"2008-03-18\",\n        \"article_set-0-date_1\": \"11:54:58\",\n        \"article_set-0-section\": \"1\",\n        \"article_set-1-id\": \"2\",\n        \"article_set-1-title\": \"Need a title.\",\n        \"article_set-1-content\": \"&lt;p&gt;Oldest content&lt;/p&gt;\",\n        \"article_set-1-date_0\": \"2000-03-18\",\n        \"article_set-1-date_1\": \"11:54:58\",\n        \"article_set-2-id\": \"3\",\n        \"article_set-2-title\": \"Need a title.\",\n        \"article_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n        \"article_set-2-date_0\": \"2009-03-18\",\n        \"article_set-2-date_1\": \"11:54:58\",\n        \"article_set-3-id\": \"\",\n        \"article_set-3-title\": \"\",\n        \"article_set-3-content\": \"\",\n        \"article_set-3-date_0\": \"\",\n        \"article_set-3-date_1\": \"\",\n        \"article_set-4-id\": \"\",\n        \"article_set-4-title\": \"\",\n        \"article_set-4-content\": \"\",\n        \"article_set-4-date_0\": \"\",\n        \"article_set-4-date_1\": \"\",\n        \"article_set-5-id\": \"\",\n        \"article_set-5-title\": \"\",\n        \"article_set-5-content\": \"\",\n        \"article_set-5-date_0\": \"\",\n        \"article_set-5-date_1\": \"\",\n    }\n\n    def test_basic_edit_POST(self):\n        \"\"\"\n        A smoke test to ensure POST on edit_view works.\n        \"\"\"\n        response = self.client.post('/test_admin/%s/admin_views/section/1/' % self.urlbit, self.inline_post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_edit_save_as(self):\n        \"\"\"\n        Test \"save as\".\n        \"\"\"\n        post_data = self.inline_post_data.copy()\n        post_data.update({\n            '_saveasnew': 'Save+as+new',\n            \"article_set-1-section\": \"1\",\n            \"article_set-2-section\": \"1\",\n            \"article_set-3-section\": \"1\",\n            \"article_set-4-section\": \"1\",\n            \"article_set-5-section\": \"1\",\n        })\n        response = self.client.post('/test_admin/%s/admin_views/section/1/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_change_list_sorting_callable(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a callable\n        (column 2 is callable_year in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': 2})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on callable are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on callable are out of order.\")\n\n    def test_change_list_sorting_model(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a Model method\n        (column 3 is 'model_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '-3'})\n        self.assertContentBefore(response, 'Newest content', 'Middle content',\n            \"Results of sorting on Model method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Oldest content',\n            \"Results of sorting on Model method are out of order.\")\n\n    def test_change_list_sorting_model_admin(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin method\n        (column 4 is 'modeladmin_year' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '4'})\n        self.assertContentBefore(response, 'Oldest content', 'Middle content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, 'Middle content', 'Newest content',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_model_admin_reverse(self):\n        \"\"\"\n        Ensure we can sort on a list_display field that is a ModelAdmin\n        method in reverse order (i.e. admin_order_field uses the '-' prefix)\n        (column 6 is 'model_year_reverse' in ArticleAdmin)\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '6'})\n        self.assertContentBefore(response, '2009', '2008',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008', '2000',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        # Let's make sure the ordering is right and that we don't get a\n        # FieldError when we change to descending order\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'o': '-6'})\n        self.assertContentBefore(response, '2000', '2008',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n        self.assertContentBefore(response, '2008', '2009',\n            \"Results of sorting on ModelAdmin method are out of order.\")\n\n    def test_change_list_sorting_multiple(self):\n        p1 = Person.objects.create(name=\"Chris\", gender=1, alive=True)\n        p2 = Person.objects.create(name=\"Chris\", gender=2, alive=True)\n        p3 = Person.objects.create(name=\"Bob\", gender=1, alive=True)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # Sort by name, gender\n        # This hard-codes the URL because it'll fail if it runs against the\n        # 'admin2' custom admin (which doesn't have the Person model).\n        response = self.client.get('/test_admin/admin/admin_views/person/', {'o': '1.2'})\n        self.assertContentBefore(response, link3, link1)\n        self.assertContentBefore(response, link1, link2)\n\n        # Sort by gender descending, name\n        response = self.client.get('/test_admin/admin/admin_views/person/', {'o': '-2.1'})\n        self.assertContentBefore(response, link2, link3)\n        self.assertContentBefore(response, link3, link1)\n\n    def test_change_list_sorting_preserve_queryset_ordering(self):\n        \"\"\"\n        If no ordering is defined in `ModelAdmin.ordering` or in the query\n        string, then the underlying order of the queryset should not be\n        changed, even if it is defined in `Modeladmin.get_queryset()`.\n        Refs #11868, #7309.\n        \"\"\"\n        p1 = Person.objects.create(name=\"Amy\", gender=1, alive=True, age=80)\n        p2 = Person.objects.create(name=\"Bob\", gender=1, alive=True, age=70)\n        p3 = Person.objects.create(name=\"Chris\", gender=2, alive=False, age=60)\n        link1 = reverse('admin:admin_views_person_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_person_change', args=(p2.pk,))\n        link3 = reverse('admin:admin_views_person_change', args=(p3.pk,))\n\n        # This hard-codes the URL because it'll fail if it runs against the\n        # 'admin2' custom admin (which doesn't have the Person model).\n        response = self.client.get('/test_admin/admin/admin_views/person/', {})\n        self.assertContentBefore(response, link3, link2)\n        self.assertContentBefore(response, link2, link1)\n\n    def test_change_list_sorting_model_meta(self):\n        # Test ordering on Model Meta is respected\n\n        l1 = Language.objects.create(iso='ur', name='Urdu')\n        l2 = Language.objects.create(iso='ar', name='Arabic')\n        link1 = reverse('admin:admin_views_language_change', args=(quote(l1.pk),))\n        link2 = reverse('admin:admin_views_language_change', args=(quote(l2.pk),))\n\n        response = self.client.get('/test_admin/admin/admin_views/language/', {})\n        self.assertContentBefore(response, link2, link1)\n\n        # Test we can override with query string\n        response = self.client.get('/test_admin/admin/admin_views/language/', {'o': '-1'})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_change_list_sorting_override_model_admin(self):\n        # Test ordering on Model Admin is respected, and overrides Model Meta\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_podcast_change', args=(p2.pk,))\n\n        response = self.client.get('/test_admin/admin/admin_views/podcast/', {})\n        self.assertContentBefore(response, link1, link2)\n\n    def test_multiple_sort_same_field(self):\n        # Check that we get the columns we expect if we have two columns\n        # that correspond to the same ordering field\n        dt = datetime.datetime.now()\n        p1 = Podcast.objects.create(name=\"A\", release_date=dt)\n        p2 = Podcast.objects.create(name=\"B\", release_date=dt - datetime.timedelta(10))\n        link1 = reverse('admin:admin_views_podcast_change', args=(quote(p1.pk),))\n        link2 = reverse('admin:admin_views_podcast_change', args=(quote(p2.pk),))\n\n        response = self.client.get('/test_admin/admin/admin_views/podcast/', {})\n        self.assertContentBefore(response, link1, link2)\n\n        p1 = ComplexSortedPerson.objects.create(name=\"Bob\", age=10)\n        p2 = ComplexSortedPerson.objects.create(name=\"Amy\", age=20)\n        link1 = reverse('admin:admin_views_complexsortedperson_change', args=(p1.pk,))\n        link2 = reverse('admin:admin_views_complexsortedperson_change', args=(p2.pk,))\n\n        response = self.client.get('/test_admin/admin/admin_views/complexsortedperson/', {})\n        # Should have 5 columns (including action checkbox col)\n        self.assertContains(response, '<th scope=\"col\"', count=5)\n\n        self.assertContains(response, 'Name')\n        self.assertContains(response, 'Colored name')\n\n        # Check order\n        self.assertContentBefore(response, 'Name', 'Colored name')\n\n        # Check sorting - should be by name\n        self.assertContentBefore(response, link2, link1)\n\n    def test_sort_indicators_admin_order(self):\n        \"\"\"\n        Ensures that the admin shows default sort indicators for all\n        kinds of 'ordering' fields: field names, method on the model\n        admin and model itself, and other callables. See #17252.\n        \"\"\"\n        models = [(AdminOrderedField, 'adminorderedfield'),\n                  (AdminOrderedModelMethod, 'adminorderedmodelmethod'),\n                  (AdminOrderedAdminMethod, 'adminorderedadminmethod'),\n                  (AdminOrderedCallable, 'adminorderedcallable')]\n        for model, url in models:\n            model.objects.create(stuff='The Last Item', order=3)\n            model.objects.create(stuff='The First Item', order=1)\n            model.objects.create(stuff='The Middle Item', order=2)\n            response = self.client.get('/test_admin/admin/admin_views/%s/' % url, {})\n            self.assertEqual(response.status_code, 200)\n            # Should have 3 columns including action checkbox col.\n            self.assertContains(response, '<th scope=\"col\"', count=3, msg_prefix=url)\n            # Check if the correct column was selected. 2 is the index of the\n            # 'order' column in the model admin's 'list_display' with 0 being\n            # the implicit 'action_checkbox' and 1 being the column 'stuff'.\n            self.assertEqual(response.context['cl'].get_ordering_field_columns(), {2: 'asc'})\n            # Check order of records.\n            self.assertContentBefore(response, 'The First Item', 'The Middle Item')\n            self.assertContentBefore(response, 'The Middle Item', 'The Last Item')\n\n    def test_limited_filter(self):\n        \"\"\"Ensure admin changelist filters do not contain objects excluded via limit_choices_to.\n        This also tests relation-spanning filters (e.g. 'color__value').\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">',\n            msg_prefix=\"Expected filter not found in changelist view\")\n        self.assertNotContains(response, '<a href=\"?color__id__exact=3\">Blue</a>',\n            msg_prefix=\"Changelist filter not correctly limited by limit_choices_to\")\n\n    def test_relation_spanning_filters(self):\n        response = self.client.get('/test_admin/%s/admin_views/chapterxtra1/' %\n                                   self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        filters = {\n            'chap__id__exact': dict(\n                values=[c.id for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.id == value),\n            'chap__title': dict(\n                values=[c.title for c in Chapter.objects.all()],\n                test=lambda obj, value: obj.chap.title == value),\n            'chap__book__id__exact': dict(\n                values=[b.id for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.id == value),\n            'chap__book__name': dict(\n                values=[b.name for b in Book.objects.all()],\n                test=lambda obj, value: obj.chap.book.name == value),\n            'chap__book__promo__id__exact': dict(\n                values=[p.id for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(id=value).exists()),\n            'chap__book__promo__name': dict(\n                values=[p.name for p in Promo.objects.all()],\n                test=lambda obj, value: obj.chap.book.promo_set.filter(name=value).exists()),\n        }\n        for filter_path, params in filters.items():\n            for value in params['values']:\n                query_string = urlencode({filter_path: value})\n                # ensure filter link exists\n                self.assertContains(response, '<a href=\"?%s\">' % query_string)\n                # ensure link works\n                filtered_response = self.client.get(\n                    '/test_admin/%s/admin_views/chapterxtra1/?%s' % (\n                        self.urlbit, query_string))\n                self.assertEqual(filtered_response.status_code, 200)\n                # ensure changelist contains only valid objects\n                for obj in filtered_response.context['cl'].queryset.all():\n                    self.assertTrue(params['test'](obj, value))\n\n    def test_incorrect_lookup_parameters(self):\n        \"\"\"Ensure incorrect lookup parameters are handled gracefully.\"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield': '5'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        # Spanning relationships through an inexistant related object (Refs #16716)\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'notarealfield__whatever': '5'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'color__id__exact': 'StringNotInteger!'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n        # Regression test for #18530\n        response = self.client.get('/test_admin/%s/admin_views/thing/' % self.urlbit, {'pub_date__gte': 'foo'})\n        self.assertRedirects(response, '/test_admin/%s/admin_views/thing/?e=1' % self.urlbit)\n\n    def test_isnull_lookups(self):\n        \"\"\"Ensure is_null is handled correctly.\"\"\"\n        Article.objects.create(title=\"I Could Go Anywhere\", content=\"Versatile\", date=datetime.datetime.now())\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, '4 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': 'false'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': '0'})\n        self.assertContains(response, '3 articles')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': 'true'})\n        self.assertContains(response, '1 article')\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit, {'section__isnull': '1'})\n        self.assertContains(response, '1 article')\n\n    def test_logout_and_password_change_URLs(self):\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, '<a href=\"/test_admin/%s/logout/\">' % self.urlbit)\n        self.assertContains(response, '<a href=\"/test_admin/%s/password_change/\">' % self.urlbit)\n\n    def test_named_group_field_choices_change_list(self):\n        \"\"\"\n        Ensures the admin changelist shows correct values in the relevant column\n        for rows corresponding to instances of a model in which a named group\n        has been used in the choices option of a field.\n        \"\"\"\n        link1 = reverse('admin:admin_views_fabric_change', args=(1,), current_app=self.urlbit)\n        link2 = reverse('admin:admin_views_fabric_change', args=(2,), current_app=self.urlbit)\n        response = self.client.get('/test_admin/%s/admin_views/fabric/' % self.urlbit)\n        fail_msg = \"Changelist table isn't showing the right human-readable values set by a model field 'choices' option named group.\"\n        self.assertContains(response, '<a href=\"%s\">Horizontal</a>' % link1, msg_prefix=fail_msg, html=True)\n        self.assertContains(response, '<a href=\"%s\">Vertical</a>' % link2, msg_prefix=fail_msg, html=True)\n\n    def test_named_group_field_choices_filter(self):\n        \"\"\"\n        Ensures the filter UI shows correctly when at least one named group has\n        been used in the choices option of a model field.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/fabric/' % self.urlbit)\n        fail_msg = \"Changelist filter isn't showing options contained inside a model field 'choices' option named group.\"\n        self.assertContains(response, '<div id=\"changelist-filter\">')\n        self.assertContains(response,\n            '<a href=\"?surface__exact=x\">Horizontal</a>', msg_prefix=fail_msg, html=True)\n        self.assertContains(response,\n            '<a href=\"?surface__exact=y\">Vertical</a>', msg_prefix=fail_msg, html=True)\n\n    def test_change_list_null_boolean_display(self):\n        Post.objects.create(public=None)\n        # This hard-codes the URl because it'll fail if it runs\n        # against the 'admin2' custom admin (which doesn't have the\n        # Post model).\n        response = self.client.get(\"/test_admin/admin/admin_views/post/\")\n        self.assertContains(response, 'icon-unknown.gif')\n\n    def test_i18n_language_non_english_default(self):\n        \"\"\"\n        Check if the JavaScript i18n view returns an empty language catalog\n        if the default language is non-English but the selected language\n        is English. See #13388 and #3594 for more details.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertNotContains(response, 'Choisir une heure')\n\n    def test_i18n_language_non_english_fallback(self):\n        \"\"\"\n        Makes sure that the fallback language is still working properly\n        in cases where the selected language cannot be found.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertContains(response, 'Choisir une heure')\n\n    def test_l10n_deactivated(self):\n        \"\"\"\n        Check if L10N is deactivated, the JavaScript i18n view doesn't\n        return localized date/time formats. Refs #14824.\n        \"\"\"\n        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n            response = self.client.get('/test_admin/admin/jsi18n/')\n            self.assertNotContains(response, '%d.%m.%Y %H:%M:%S')\n            self.assertContains(response, '%Y-%m-%d %H:%M:%S')\n\n    def test_disallowed_filtering(self):\n        with patch_logger('django.security.DisallowedModelAdminLookup', 'error') as calls:\n            response = self.client.get(\"/test_admin/admin/admin_views/album/?owner__email__startswith=fuzzy\")\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Filters are allowed if explicitly included in list_filter\n        response = self.client.get(\"/test_admin/admin/admin_views/thing/?color__value__startswith=red\")\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get(\"/test_admin/admin/admin_views/thing/?color__value=red\")\n        self.assertEqual(response.status_code, 200)\n\n        # Filters should be allowed if they involve a local field without the\n        # need to whitelist them in list_filter or date_hierarchy.\n        response = self.client.get(\"/test_admin/admin/admin_views/person/?age__gt=30\")\n        self.assertEqual(response.status_code, 200)\n\n        e1 = Employee.objects.create(name='Anonymous', gender=1, age=22, alive=True, code='123')\n        e2 = Employee.objects.create(name='Visitor', gender=2, age=19, alive=True, code='124')\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e1)\n        WorkHour.objects.create(datum=datetime.datetime.now(), employee=e2)\n        response = self.client.get(\"/test_admin/admin/admin_views/workhour/\")\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'employee__person_ptr__exact')\n        response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n        self.assertEqual(response.status_code, 200)\n\n    def test_disallowed_to_field(self):\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Specifying a field that is not refered by any other model registered\n        # to this admin site should raise an exception.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        # Specifying a field referenced by another model should be allowed.\n        response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})\n        self.assertEqual(response.status_code, 200)\n\n        # We also want to prevent the add and change view from leaking a\n        # disallowed field value.\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n        section = Section.objects.create()\n        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n            response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})\n            self.assertEqual(response.status_code, 400)\n            self.assertEqual(len(calls), 1)\n\n    def test_allowed_filtering_15103(self):\n        \"\"\"\n        Regressions test for ticket 15103 - filtering on fields defined in a\n        ForeignKey 'limit_choices_to' should be allowed, otherwise raw_id_fields\n        can break.\n        \"\"\"\n        # Filters should be allowed if they are defined on a ForeignKey pointing to this model\n        response = self.client.get(\"/test_admin/admin/admin_views/inquisition/?leader__name=Palin&leader__age=27\")\n        self.assertEqual(response.status_code, 200)\n\n    def test_popup_dismiss_related(self):\n        \"\"\"\n        Regression test for ticket 20664 - ensure the pk is properly quoted.\n        \"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        response = self.client.get(\"/test_admin/admin/admin_views/actor/?%s\" % IS_POPUP_VAR)\n        self.assertContains(response, \"opener.dismissRelatedLookupPopup(window, &#39;%s&#39;)\" % actor.pk)\n\n    def test_hide_change_password(self):\n        \"\"\"\n        Tests if the \"change password\" link in the admin is hidden if the User\n        does not have a usable password set.\n        (against 9bea85795705d015cdadc82c68b99196a8554f5c)\n        \"\"\"\n        user = User.objects.get(username='super')\n        user.set_unusable_password()\n        user.save()\n\n        response = self.client.get('/test_admin/admin/')\n        self.assertNotContains(response, reverse('admin:password_change'),\n            msg_prefix='The \"change password\" link should not be displayed if a user does not have a usable password.')\n\n    def test_change_view_with_show_delete_extra_context(self):\n        \"\"\"\n        Ensured that the 'show_delete' context variable in the admin's change\n        view actually controls the display of the delete button.\n        Refs #10057.\n        \"\"\"\n        instance = UndeletableObject.objects.create(name='foo')\n        response = self.client.get('/test_admin/%s/admin_views/undeletableobject/%d/' %\n                                   (self.urlbit, instance.pk))\n        self.assertNotContains(response, 'deletelink')\n\n    def test_allows_attributeerror_to_bubble_up(self):\n        \"\"\"\n        Ensure that AttributeErrors are allowed to bubble when raised inside\n        a change list view.\n\n        Requires a model to be created so there's something to be displayed\n\n        Refs: #16655, #18593, and #18747\n        \"\"\"\n        Simple.objects.create()\n        with self.assertRaises(AttributeError):\n            self.client.get('/test_admin/%s/admin_views/simple/' % self.urlbit)\n\n    def test_changelist_with_no_change_url(self):\n        \"\"\"\n        ModelAdmin.changelist_view shouldn't result in a NoReverseMatch if url\n        for change_view is removed from get_urls\n\n        Regression test for #20934\n        \"\"\"\n        UnchangeableObject.objects.create()\n        response = self.client.get('/test_admin/admin/admin_views/unchangeableobject/')\n        self.assertEqual(response.status_code, 200)\n        # Check the format of the shown object -- shouldn't contain a change link\n        self.assertContains(response, '<th class=\"field-__str__\">UnchangeableObject object</th>', html=True)\n\n    def test_invalid_appindex_url(self):\n        \"\"\"\n        #21056 -- URL reversing shouldn't work for nonexistent apps.\n        \"\"\"\n        good_url = '/test_admin/admin/admin_views/'\n        confirm_good_url = reverse('admin:app_list',\n                                   kwargs={'app_label': 'admin_views'})\n        self.assertEqual(good_url, confirm_good_url)\n\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', kwargs={'app_label': 'this_should_fail'})\n        with self.assertRaises(NoReverseMatch):\n            reverse('admin:app_list', args=('admin_views2',))\n\n    def test_proxy_model_content_type_is_used_for_log_entries(self):\n        \"\"\"\n        Log entries for proxy models should have the proxy model's content\n        type.\n\n        Regression test for #21084.\n        \"\"\"\n        color2_content_type = ContentType.objects.get_for_model(Color2, for_concrete_model=False)\n\n        # add\n        color2_add_url = reverse('admin:admin_views_color2_add')\n        self.client.post(color2_add_url, {'value': 'orange'})\n\n        color2_addition_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_addition_log.content_type)\n\n        # change\n        color_id = color2_addition_log.object_id\n        color2_change_url = reverse('admin:admin_views_color2_change', args=(color_id,))\n\n        self.client.post(color2_change_url, {'value': 'blue'})\n\n        color2_change_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_change_log.content_type)\n\n        # delete\n        color2_delete_url = reverse('admin:admin_views_color2_delete', args=(color_id,))\n        self.client.post(color2_delete_url)\n\n        color2_delete_log = LogEntry.objects.all()[0]\n        self.assertEqual(color2_content_type, color2_delete_log.content_type)\n\n\n@override_settings(TEMPLATE_DIRS=ADMIN_VIEW_TEMPLATES_DIR)\nclass AdminCustomTemplateTests(AdminViewBasicTestCase):\n    def test_extended_bodyclass_template_change_form(self):\n        \"\"\"\n        Ensure that the admin/change_form.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/add/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_change_password(self):\n        \"\"\"\n        Ensure that the auth/user/change_password.html template uses block\n        super in the bodyclass block.\n        \"\"\"\n        user = User.objects.get(username='super')\n        response = self.client.get('/test_admin/%s/auth/user/%s/password/' % (self.urlbit, user.id))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_index(self):\n        \"\"\"\n        Ensure that the admin/index.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_change_list(self):\n        \"\"\"\n        Ensure that the admin/change_list.html' template uses block.super\n        in the bodyclass block.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/article/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_login(self):\n        \"\"\"\n        Ensure that the admin/login.html template uses block.super in the\n        bodyclass block.\n        \"\"\"\n        self.client.logout()\n        response = self.client.get('/test_admin/%s/login/' % self.urlbit)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_confirmation.html template uses\n        block.super in the bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        response = self.client.get('/test_admin/%s/auth/group/%s/delete/' % (self.urlbit, group.id))\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_extended_bodyclass_template_delete_selected_confirmation(self):\n        \"\"\"\n        Ensure that the admin/delete_selected_confirmation.html template uses\n        block.super in bodyclass block.\n        \"\"\"\n        group = Group.objects.create(name=\"foogroup\")\n        post_data = {\n            'action': 'delete_selected',\n            'selected_across': '0',\n            'index': '0',\n            '_selected_action': group.id\n        }\n        response = self.client.post('/test_admin/%s/auth/group/' % (self.urlbit), post_data)\n        self.assertContains(response, 'bodyclass_consistency_check ')\n\n    def test_filter_with_custom_template(self):\n        \"\"\"\n        Ensure that one can use a custom template to render an admin filter.\n        Refs #17515.\n        \"\"\"\n        response = self.client.get(\"/test_admin/admin/admin_views/color2/\")\n        self.assertTemplateUsed(response, 'custom_filter_template.html')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewFormUrlTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = [\"admin-views-users.xml\"]\n    urlbit = \"admin3\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_change_form_URL_has_correct_value(self):\n        \"\"\"\n        Tests whether change_view has form_url in response.context\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/section/1/' % self.urlbit)\n        self.assertTrue('form_url' in response.context, msg='form_url not present in response.context')\n        self.assertEqual(response.context['form_url'], 'pony')\n\n    def test_initial_data_can_be_overridden(self):\n        \"\"\"\n        Tests that the behavior for setting initial\n        form data can be overridden in the ModelAdmin class.\n\n        Usually, the initial value is set via the GET params.\n        \"\"\"\n        response = self.client.get('/test_admin/%s/admin_views/restaurant/add/' % self.urlbit, {'name': 'test_value'})\n        # this would be the usual behaviour\n        self.assertNotContains(response, 'value=\"test_value\"')\n        # this is the overridden behaviour\n        self.assertContains(response, 'value=\"overridden_value\"')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminJavaScriptTest(TestCase):\n    fixtures = ['admin-views-users.xml']\n\n    urls = \"admin_views.urls\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_js_minified_only_if_debug_is_false(self):\n        \"\"\"\n        Ensure that the minified versions of the JS files are only used when\n        DEBUG is False.\n        Refs #17521.\n        \"\"\"\n        with override_settings(DEBUG=False):\n            response = self.client.get(\n                '/test_admin/%s/admin_views/section/add/' % 'admin')\n            self.assertNotContains(response, 'jquery.js')\n            self.assertContains(response, 'jquery.min.js')\n            self.assertNotContains(response, 'prepopulate.js')\n            self.assertContains(response, 'prepopulate.min.js')\n            self.assertNotContains(response, 'actions.js')\n            self.assertContains(response, 'actions.min.js')\n            self.assertNotContains(response, 'collapse.js')\n            self.assertContains(response, 'collapse.min.js')\n            self.assertNotContains(response, 'inlines.js')\n            self.assertContains(response, 'inlines.min.js')\n        with override_settings(DEBUG=True):\n            response = self.client.get(\n                '/test_admin/%s/admin_views/section/add/' % 'admin')\n            self.assertContains(response, 'jquery.js')\n            self.assertNotContains(response, 'jquery.min.js')\n            self.assertContains(response, 'prepopulate.js')\n            self.assertNotContains(response, 'prepopulate.min.js')\n            self.assertContains(response, 'actions.js')\n            self.assertNotContains(response, 'actions.min.js')\n            self.assertContains(response, 'collapse.js')\n            self.assertNotContains(response, 'collapse.min.js')\n            self.assertContains(response, 'inlines.js')\n            self.assertNotContains(response, 'inlines.min.js')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SaveAsTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-person.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_as_duplication(self):\n        \"\"\"Ensure save as actually creates a new person\"\"\"\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 1, 'age': 42}\n        self.client.post('/test_admin/admin/admin_views/person/1/', post_data)\n        self.assertEqual(len(Person.objects.filter(name='John M')), 1)\n        self.assertEqual(len(Person.objects.filter(id=1)), 1)\n\n    def test_save_as_display(self):\n        \"\"\"\n        Ensure that 'save as' is displayed when activated and after submitting\n        invalid data aside save_as_new will not show us a form to overwrite the\n        initial model.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/1/')\n        self.assertTrue(response.context['save_as'])\n        post_data = {'_saveasnew': '', 'name': 'John M', 'gender': 3, 'alive': 'checked'}\n        response = self.client.post('/test_admin/admin/admin_views/person/1/', post_data)\n        self.assertEqual(response.context['form_url'], '/test_admin/admin/admin_views/person/add/')\n\n\nclass CustomModelAdminTest(AdminViewBasicTestCase):\n    urls = \"admin_views.urls\"\n    urlbit = \"admin2\"\n\n    def test_custom_admin_site_login_form(self):\n        self.client.logout()\n        response = self.client.get('/test_admin/admin2/', follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertEqual(response.status_code, 200)\n        login = self.client.post('/test_admin/admin2/login/', {\n            REDIRECT_FIELD_NAME: '/test_admin/admin2/',\n            'username': 'customform',\n            'password': 'secret',\n        }, follow=True)\n        self.assertIsInstance(login, TemplateResponse)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, 'custom form error')\n\n    def test_custom_admin_site_login_template(self):\n        self.client.logout()\n        response = self.client.get('/test_admin/admin2/', follow=True)\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/login.html')\n        self.assertContains(response, 'Hello from a custom login template')\n\n    def test_custom_admin_site_logout_template(self):\n        response = self.client.get('/test_admin/admin2/logout/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/logout.html')\n        self.assertContains(response, 'Hello from a custom logout template')\n\n    def test_custom_admin_site_index_view_and_template(self):\n        try:\n            response = self.client.get('/test_admin/admin2/')\n        except TypeError:\n            self.fail('AdminSite.index_template should accept a list of template paths')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/index.html')\n        self.assertContains(response, 'Hello from a custom index template *bar*')\n\n    def test_custom_admin_site_app_index_view_and_template(self):\n        response = self.client.get('/test_admin/admin2/admin_views/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/app_index.html')\n        self.assertContains(response, 'Hello from a custom app_index template')\n\n    def test_custom_admin_site_password_change_template(self):\n        response = self.client.get('/test_admin/admin2/password_change/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_form.html')\n        self.assertContains(response, 'Hello from a custom password change form template')\n\n    def test_custom_admin_site_password_change_done_template(self):\n        response = self.client.get('/test_admin/admin2/password_change/done/')\n        self.assertIsInstance(response, TemplateResponse)\n        self.assertTemplateUsed(response, 'custom_admin/password_change_done.html')\n        self.assertContains(response, 'Hello from a custom password change done template')\n\n    def test_custom_admin_site_view(self):\n        self.client.login(username='super', password='secret')\n        response = self.client.get('/test_admin/%s/my_view/' % self.urlbit)\n        self.assertEqual(response.content, b\"Django is a magical pony!\")\n\n    def test_pwd_change_custom_template(self):\n        self.client.login(username='super', password='secret')\n        su = User.objects.get(username='super')\n        try:\n            response = self.client.get('/test_admin/admin4/auth/user/%s/password/' % su.pk)\n        except TypeError:\n            self.fail('ModelAdmin.change_user_password_template should accept a list of template paths')\n        self.assertEqual(response.status_code, 200)\n\n\ndef get_perm(Model, perm):\n    \"\"\"Return the permission object, for the Model\"\"\"\n    ct = ContentType.objects.get_for_model(Model)\n    return Permission.objects.get(content_type=ct, codename=perm)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewPermissionsTest(TestCase):\n    \"\"\"Tests for Admin Views Permissions.\"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        \"\"\"Test setup.\"\"\"\n        # Setup permissions, for our users who can add, change, and delete.\n        # We can't put this into the fixture, because the content type id\n        # and the permission id could be different on each run of the test.\n\n        opts = Article._meta\n\n        # User who can add Articles\n        add_user = User.objects.get(username='adduser')\n        add_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('add', opts)))\n\n        # User who can change Articles\n        change_user = User.objects.get(username='changeuser')\n        change_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('change', opts)))\n\n        # User who can delete Articles\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Article,\n            get_permission_codename('delete', opts)))\n\n        delete_user.user_permissions.add(get_perm(Section,\n            get_permission_codename('delete', Section._meta)))\n\n        # login POST dicts\n        self.super_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super',\n            'password': 'secret',\n        }\n        self.super_email_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super@example.com',\n            'password': 'secret',\n        }\n        self.super_email_bad_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super@example.com',\n            'password': 'notsecret',\n        }\n        self.adduser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'adduser',\n            'password': 'secret',\n        }\n        self.changeuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n        self.deleteuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'deleteuser',\n            'password': 'secret',\n        }\n        self.joepublic_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'joepublic',\n            'password': 'secret',\n        }\n        self.no_username_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'password': 'secret',\n        }\n\n    def test_login(self):\n        \"\"\"\n        Make sure only staff members can log in.\n\n        Successful posts to the login page will redirect to the original url.\n        Unsuccessful attempts will continue to render the login page with\n        a 200 status code.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        # Super User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Test if user enters email address\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        # only correct passwords get a username hint\n        login = self.client.post(login_url, self.super_email_bad_login)\n        self.assertContains(login, ERROR_MESSAGE)\n        new_user = User(username='jondoe', password='secret', email='super@example.com')\n        new_user.save()\n        # check to ensure if there are multiple email addresses a user doesn't get a 500\n        login = self.client.post(login_url, self.super_email_login)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Add User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.adduser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Change User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.changeuser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Delete User\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.deleteuser_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Regular User should not be able to login.\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Requests without username should not return 500 errors.\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        login = self.client.post(login_url, self.no_username_login)\n        self.assertEqual(login.status_code, 200)\n        form = login.context[0].get('form')\n        self.assertEqual(form.errors['username'][0], 'This field is required.')\n\n    def test_login_successfully_redirects_to_original_URL(self):\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n        query_string = 'the-answer=42'\n        redirect_url = '/test_admin/admin/?%s' % query_string\n        new_next = {REDIRECT_FIELD_NAME: redirect_url}\n        post_data = self.super_login.copy()\n        post_data.pop(REDIRECT_FIELD_NAME)\n        login = self.client.post(\n            '%s?%s' % (reverse('admin:login'), urlencode(new_next)),\n            post_data)\n        self.assertRedirects(login, redirect_url)\n\n    def test_double_login_is_not_allowed(self):\n        \"\"\"Regression test for #19327\"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(response.status_code, 302)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n\n        # Logging in with non-admin user fails\n        login = self.client.post(login_url, self.joepublic_login)\n        self.assertEqual(login.status_code, 200)\n        self.assertContains(login, ERROR_MESSAGE)\n\n        # Establish a valid admin session\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n\n        # Logging in with admin user while already logged in\n        login = self.client.post(login_url, self.super_login)\n        self.assertRedirects(login, '/test_admin/admin/')\n        self.assertFalse(login.context)\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_add_view(self):\n        \"\"\"Test add view restricts access and actually adds items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        add_dict = {'title': 'D\u00f8m ikke',\n                    'content': '<p>great article</p>',\n                    'date_0': '2008-03-18', 'date_1': '10:54:39',\n                    'section': 1}\n\n        # Change User should not have access to add articles\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n        response = self.client.get('/test_admin/admin/admin_views/article/add/')\n        self.assertEqual(response.status_code, 403)\n        # Try POST just to make sure\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.all().count(), 3)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Add user may login and POST to add view, then redirect to admin root\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        addpage = self.client.get('/test_admin/admin/admin_views/article/add/')\n        change_list_link = '&rsaquo; <a href=\"/test_admin/admin/admin_views/article/\">Articles</a>'\n        self.assertNotContains(addpage, change_list_link,\n            msg_prefix='User restricted to add permission is given link to change list view in breadcrumbs.')\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertRedirects(post, '/test_admin/admin/')\n        self.assertEqual(Article.objects.all().count(), 4)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a created object')\n        self.client.get('/test_admin/admin/logout/')\n\n        # Super can add too, but is redirected to the change list view\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n        addpage = self.client.get('/test_admin/admin/admin_views/article/add/')\n        self.assertContains(addpage, change_list_link,\n            msg_prefix='Unrestricted user is not given link to change list view in breadcrumbs.')\n        post = self.client.post('/test_admin/admin/admin_views/article/add/', add_dict)\n        self.assertRedirects(post, '/test_admin/admin/admin_views/article/')\n        self.assertEqual(Article.objects.all().count(), 5)\n        self.client.get('/test_admin/admin/logout/')\n\n        # 8509 - if a normal user is already logged in, it is possible\n        # to change user into the superuser without error\n        self.client.login(username='joepublic', password='secret')\n        # Check and make sure that if user expires, data still persists\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n        # make sure the view removes test cookie\n        self.assertEqual(self.client.session.test_cookie_worked(), False)\n\n    def test_change_view(self):\n        \"\"\"Change view should restrict access and allow users to edit items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        change_dict = {'title': 'Ikke ford\u00f8mt',\n                       'content': '<p>edited article</p>',\n                       'date_0': '2008-03-18', 'date_1': '10:54:39',\n                       'section': 1}\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/')\n        self.assertEqual(response.status_code, 403)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/')\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertEqual(post.status_code, 403)\n        self.client.get('/test_admin/admin/logout/')\n\n        # change user can view all items and edit them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/')\n        self.assertEqual(response.status_code, 200)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/')\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertRedirects(post, '/test_admin/admin/admin_views/article/')\n        self.assertEqual(Article.objects.get(pk=1).content, '<p>edited article</p>')\n\n        # one error in form should produce singular error message, multiple errors plural\n        change_dict['title'] = ''\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertContains(post, 'Please correct the error below.',\n            msg_prefix='Singular error message not found in response to post with one error')\n\n        change_dict['content'] = ''\n        post = self.client.post('/test_admin/admin/admin_views/article/1/', change_dict)\n        self.assertContains(post, 'Please correct the errors below.',\n            msg_prefix='Plural error message not found in response to post with multiple errors')\n        self.client.get('/test_admin/admin/logout/')\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        for login_dict in [self.super_login, self.changeuser_login, self.adduser_login, self.deleteuser_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 403)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/')\n            self.assertEqual(response.status_code, 200)\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', {'name': 'changed'})\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertRedirects(response, '/test_admin/admin/')\n            self.client.get('/test_admin/admin/logout/')\n\n        for login_dict in [self.joepublic_login, self.no_username_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/', {'name': 'changed'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=1).name, 'odd id')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.post('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/', {'name': 'changed again'}, follow=True)\n            self.assertEqual(RowLevelChangePermissionModel.objects.get(id=2).name, 'changed')\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            self.client.get('/test_admin/admin/logout/')\n\n    def test_history_view(self):\n        \"\"\"History view should restrict access.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n\n        # add user should not be able to view the list of article or change any of them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/history/')\n        self.assertEqual(response.status_code, 403)\n        self.client.get('/test_admin/admin/logout/')\n\n        # change user can view all items and edit them\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.changeuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/history/')\n        self.assertEqual(response.status_code, 200)\n\n        # Test redirection when using row-level change permissions. Refs #11513.\n        RowLevelChangePermissionModel.objects.create(id=1, name=\"odd id\")\n        RowLevelChangePermissionModel.objects.create(id=2, name=\"even id\")\n        for login_dict in [self.super_login, self.changeuser_login, self.adduser_login, self.deleteuser_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/history/')\n            self.assertEqual(response.status_code, 403)\n\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/history/')\n            self.assertEqual(response.status_code, 200)\n\n            self.client.get('/test_admin/admin/logout/')\n\n        for login_dict in [self.joepublic_login, self.no_username_login]:\n            self.client.post(login_url, login_dict)\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/1/history/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n            response = self.client.get('/test_admin/admin/admin_views/rowlevelchangepermissionmodel/2/history/', follow=True)\n            self.assertEqual(response.status_code, 200)\n            self.assertContains(response, 'login-form')\n\n            self.client.get('/test_admin/admin/logout/')\n\n    def test_conditionally_show_add_section_link(self):\n        \"\"\"\n        The foreign key widget should only show the \"add related\" button if the\n        user has permission to add that related item.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        # Set up and log in user.\n        url = '/test_admin/admin/admin_views/article/add/'\n        add_link_text = ' class=\"add-another\"'\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        # The add user can't add sections yet, so they shouldn't see the \"add\n        # section\" link.\n        response = self.client.get(url)\n        self.assertNotContains(response, add_link_text)\n        # Allow the add user to add sections too. Now they can see the \"add\n        # section\" link.\n        add_user = User.objects.get(username='adduser')\n        perm = get_perm(Section, get_permission_codename('add', Section._meta))\n        add_user.user_permissions.add(perm)\n        response = self.client.get(url)\n        self.assertContains(response, add_link_text)\n\n    def test_custom_model_admin_templates(self):\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.super_login)\n\n        # Test custom change list template with custom extra context\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/')\n        self.assertContains(response, \"var hello = 'Hello!';\")\n        self.assertTemplateUsed(response, 'custom_admin/change_list.html')\n\n        # Test custom add form template\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/add/')\n        self.assertTemplateUsed(response, 'custom_admin/add_form.html')\n\n        # Add an article so we can test delete, change, and history views\n        post = self.client.post('/test_admin/admin/admin_views/customarticle/add/', {\n            'content': '<p>great article</p>',\n            'date_0': '2008-03-18',\n            'date_1': '10:54:39'\n        })\n        self.assertRedirects(post, '/test_admin/admin/admin_views/customarticle/')\n        self.assertEqual(CustomArticle.objects.all().count(), 1)\n        article_pk = CustomArticle.objects.all()[0].pk\n\n        # Test custom delete, change, and object history templates\n        # Test custom change form template\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/change_form.html')\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/delete/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/delete_confirmation.html')\n        response = self.client.post('/test_admin/admin/admin_views/customarticle/', data={\n            'index': 0,\n            'action': ['delete_selected'],\n            '_selected_action': ['1'],\n        })\n        self.assertTemplateUsed(response, 'custom_admin/delete_selected_confirmation.html')\n        response = self.client.get('/test_admin/admin/admin_views/customarticle/%d/history/' % article_pk)\n        self.assertTemplateUsed(response, 'custom_admin/object_history.html')\n\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_delete_view(self):\n        \"\"\"Delete view should restrict access and actually delete items.\"\"\"\n\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        delete_dict = {'post': 'yes'}\n\n        # add user should not be able to delete articles\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.adduser_login)\n        response = self.client.get('/test_admin/admin/admin_views/article/1/delete/')\n        self.assertEqual(response.status_code, 403)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/delete/', delete_dict)\n        self.assertEqual(post.status_code, 403)\n        self.assertEqual(Article.objects.all().count(), 3)\n        self.client.get('/test_admin/admin/logout/')\n\n        # Delete user can delete\n        self.client.get('/test_admin/admin/')\n        self.client.post(login_url, self.deleteuser_login)\n        response = self.client.get('/test_admin/admin/admin_views/section/1/delete/')\n        # test response contains link to related Article\n        self.assertContains(response, \"admin_views/article/1/\")\n\n        response = self.client.get('/test_admin/admin/admin_views/article/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        post = self.client.post('/test_admin/admin/admin_views/article/1/delete/', delete_dict)\n        self.assertRedirects(post, '/test_admin/admin/')\n        self.assertEqual(Article.objects.all().count(), 2)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a deleted object')\n        article_ct = ContentType.objects.get_for_model(Article)\n        logged = LogEntry.objects.get(content_type=article_ct, action_flag=DELETION)\n        self.assertEqual(logged.object_id, '1')\n        self.client.get('/test_admin/admin/logout/')\n\n    def test_disabled_permissions_when_logged_in(self):\n        self.client.login(username='super', password='secret')\n        superuser = User.objects.get(username='super')\n        superuser.is_active = False\n        superuser.save()\n\n        response = self.client.get('/test_admin/admin/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get('/test_admin/admin/secure-view/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_disabled_staff_permissions_when_logged_in(self):\n        self.client.login(username='super', password='secret')\n        superuser = User.objects.get(username='super')\n        superuser.is_staff = False\n        superuser.save()\n\n        response = self.client.get('/test_admin/admin/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n        self.assertNotContains(response, 'Log out')\n\n        response = self.client.get('/test_admin/admin/secure-view/', follow=True)\n        self.assertContains(response, 'id=\"login-form\"')\n\n    def test_app_index_fail_early(self):\n        \"\"\"\n        If a user has no module perms, avoid iterating over all the modeladmins\n        in the registry.\n        \"\"\"\n        login_url = reverse('admin:login') + '?next=/test_admin/admin/'\n        opts = Article._meta\n        change_user = User.objects.get(username='changeuser')\n        permission = get_perm(Article, get_permission_codename('change', opts))\n\n        self.client.post(login_url, self.changeuser_login)\n\n        # the user has no module permissions, because this module doesn't exist\n        change_user.user_permissions.remove(permission)\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 403)\n\n        # the user now has module permissions\n        change_user.user_permissions.add(permission)\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_shortcut_view_only_available_to_staff(self):\n        \"\"\"\n        Only admin users should be able to use the admin shortcut view.\n        \"\"\"\n        model_ctype = ContentType.objects.get_for_model(ModelWithStringPrimaryKey)\n        obj = ModelWithStringPrimaryKey.objects.create(string_pk='foo')\n        shortcut_url = \"/test_admin/admin/r/%s/%s/\" % (model_ctype.pk, obj.pk)\n\n        # Not logged in: we should see the login page.\n        response = self.client.get(shortcut_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n\n        # Logged in? Redirect.\n        self.client.login(username='super', password='secret')\n        response = self.client.get(shortcut_url, follow=False)\n        # Can't use self.assertRedirects() because User.get_absolute_url() is silly.\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(response.url, 'http://example.com/dummy/foo/')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewsNoUrlTest(TestCase):\n    \"\"\"Regression test for #17333\"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        opts = Report._meta\n        # User who can change Reports\n        change_user = User.objects.get(username='changeuser')\n        change_user.user_permissions.add(get_perm(Report,\n            get_permission_codename('change', opts)))\n\n        # login POST dict\n        self.changeuser_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'changeuser',\n            'password': 'secret',\n        }\n\n    def test_no_standard_modeladmin_urls(self):\n        \"\"\"Admin index views don't break when user's ModelAdmin removes standard urls\"\"\"\n        self.client.get('/test_admin/admin/')\n        r = self.client.post(reverse('admin:login'), self.changeuser_login)\n        r = self.client.get('/test_admin/admin/')\n        # we shouldn' get an 500 error caused by a NoReverseMatch\n        self.assertEqual(r.status_code, 200)\n        self.client.get('/test_admin/admin/logout/')\n\n\n@skipUnlessDBFeature('can_defer_constraint_checks')\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewDeletedObjectsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'deleted-objects.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_nesting(self):\n        \"\"\"\n        Objects should be nested to display the relationships that\n        cause them to be scheduled for deletion.\n        \"\"\"\n        pattern = re.compile(br\"\"\"<li>Plot: <a href=\".+/admin_views/plot/1/\">World Domination</a>\\s*<ul>\\s*<li>Plot details: <a href=\".+/admin_views/plotdetails/1/\">almost finished</a>\"\"\")\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        six.assertRegex(self, response.content, pattern)\n\n    def test_cyclic(self):\n        \"\"\"\n        Cyclic relationships should still cause each object to only be\n        listed once.\n\n        \"\"\"\n        one = \"\"\"<li>Cyclic one: <a href=\"/test_admin/admin/admin_views/cyclicone/1/\">I am recursive</a>\"\"\"\n        two = \"\"\"<li>Cyclic two: <a href=\"/test_admin/admin/admin_views/cyclictwo/1/\">I am recursive too</a>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/cyclicone/%s/delete/' % quote(1))\n\n        self.assertContains(response, one, 1)\n        self.assertContains(response, two, 1)\n\n    def test_perms_needed(self):\n        self.client.logout()\n        delete_user = User.objects.get(username='deleteuser')\n        delete_user.user_permissions.add(get_perm(Plot,\n            get_permission_codename('delete', Plot._meta)))\n\n        self.assertTrue(self.client.login(username='deleteuser',\n                                          password='secret'))\n\n        response = self.client.get('/test_admin/admin/admin_views/plot/%s/delete/' % quote(1))\n        self.assertContains(response, \"your account doesn't have permission to delete the following types of objects\")\n        self.assertContains(response, \"<li>plot details</li>\")\n\n    def test_protected(self):\n        q = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q, answer=\"Yes.\")\n\n        response = self.client.get(\"/test_admin/admin/admin_views/question/%s/delete/\" % quote(q.pk))\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Because.</a></li>' % a1.pk)\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Yes.</a></li>' % a2.pk)\n\n    def test_not_registered(self):\n        should_contain = \"\"\"<li>Secret hideout: underground bunker\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        self.assertContains(response, should_contain, 1)\n\n    def test_multiple_fkeys_to_same_model(self):\n        \"\"\"\n        If a deleted object has two relationships from another model,\n        both of those should be followed in looking for related\n        objects to delete.\n\n        \"\"\"\n        should_contain = \"\"\"<li>Plot: <a href=\"/test_admin/admin/admin_views/plot/1/\">World Domination</a>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(1))\n        self.assertContains(response, should_contain)\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(2))\n        self.assertContains(response, should_contain)\n\n    def test_multiple_fkeys_to_same_instance(self):\n        \"\"\"\n        If a deleted object has two relationships pointing to it from\n        another object, the other object should still only be listed\n        once.\n\n        \"\"\"\n        should_contain = \"\"\"<li>Plot: <a href=\"/test_admin/admin/admin_views/plot/2/\">World Peace</a></li>\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(2))\n        self.assertContains(response, should_contain, 1)\n\n    def test_inheritance(self):\n        \"\"\"\n        In the case of an inherited model, if either the child or\n        parent-model instance is deleted, both instances are listed\n        for deletion, as well as any relationships they have.\n\n        \"\"\"\n        should_contain = [\n            \"\"\"<li>Villain: <a href=\"/test_admin/admin/admin_views/villain/3/\">Bob</a>\"\"\",\n            \"\"\"<li>Super villain: <a href=\"/test_admin/admin/admin_views/supervillain/3/\">Bob</a>\"\"\",\n            \"\"\"<li>Secret hideout: floating castle\"\"\",\n            \"\"\"<li>Super secret hideout: super floating castle!\"\"\"\n        ]\n        response = self.client.get('/test_admin/admin/admin_views/villain/%s/delete/' % quote(3))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n        response = self.client.get('/test_admin/admin/admin_views/supervillain/%s/delete/' % quote(3))\n        for should in should_contain:\n            self.assertContains(response, should, 1)\n\n    def test_generic_relations(self):\n        \"\"\"\n        If a deleted object has GenericForeignKeys pointing to it,\n        those objects should be listed for deletion.\n\n        \"\"\"\n        plot = Plot.objects.get(pk=3)\n        FunkyTag.objects.create(content_object=plot, name='hott')\n        should_contain = \"\"\"<li>Funky tag: <a href=\"/test_admin/admin/admin_views/funkytag/1/\">hott\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/plot/%s/delete/' % quote(3))\n        self.assertContains(response, should_contain)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestGenericRelations(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'deleted-objects.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_generic_content_object_in_list_display(self):\n        plot = Plot.objects.get(pk=3)\n        FunkyTag.objects.create(content_object=plot, name='hott')\n        response = self.client.get('/test_admin/admin/admin_views/funkytag/')\n        self.assertContains(response, \"%s</td>\" % plot)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewStringPrimaryKeyTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'string-primary-key.xml']\n\n    def __init__(self, *args):\n        super(AdminViewStringPrimaryKeyTest, self).__init__(*args)\n        self.pk = \"\"\"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 -_.!~*'() ;/?:@&=+$, <>#%\" {}|\\^[]`\"\"\"\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n        content_type_pk = ContentType.objects.get_for_model(ModelWithStringPrimaryKey).pk\n        LogEntry.objects.log_action(100, content_type_pk, self.pk, self.pk, 2, change_message='Changed something')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_get_history_view(self):\n        \"\"\"\n        Retrieving the history for an object using urlencoded form of primary\n        key should work.\n        Refs #12349, #18550.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/history/' % quote(self.pk))\n        self.assertContains(response, escape(self.pk))\n        self.assertContains(response, 'Changed something')\n        self.assertEqual(response.status_code, 200)\n\n    def test_get_change_view(self):\n        \"Retrieving the object using urlencoded form of primary key should work\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(self.pk))\n        self.assertContains(response, escape(self.pk))\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_to_changeform_link(self):\n        \"Link to the changeform of the object in changelist should use reverse() and be quoted -- #18072\"\n        prefix = '/test_admin/admin/admin_views/modelwithstringprimarykey/'\n        response = self.client.get(prefix)\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        pk_final_url = escape(iri_to_uri(urlquote(quote(self.pk))))\n        should_contain = \"\"\"<th class=\"field-__str__\"><a href=\"%s%s/\">%s</a></th>\"\"\" % (prefix, pk_final_url, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_link(self):\n        \"The link from the recent actions list referring to the changeform of the object should be quoted\"\n        response = self.client.get('/test_admin/admin/')\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (link, escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_recentactions_without_content_type(self):\n        \"If a LogEntry is missing content_type it will not display it in span tag under the hyperlink.\"\n        response = self.client.get('/test_admin/admin/')\n        link = reverse('admin:admin_views_modelwithstringprimarykey_change', args=(quote(self.pk),))\n        should_contain = \"\"\"<a href=\"%s\">%s</a>\"\"\" % (link, escape(self.pk))\n        self.assertContains(response, should_contain)\n        should_contain = \"Model with string primary key\"  # capitalized in Recent Actions\n        self.assertContains(response, should_contain)\n        logentry = LogEntry.objects.get(content_type__name__iexact=should_contain)\n        # http://code.djangoproject.com/ticket/10275\n        # if the log entry doesn't have a content type it should still be\n        # possible to view the Recent Actions part\n        logentry.content_type = None\n        logentry.save()\n\n        counted_presence_before = response.content.count(force_bytes(should_contain))\n        response = self.client.get('/test_admin/admin/')\n        counted_presence_after = response.content.count(force_bytes(should_contain))\n        self.assertEqual(counted_presence_before - 1,\n            counted_presence_after)\n\n    def test_logentry_get_admin_url(self):\n        \"LogEntry.get_admin_url returns a URL to edit the entry's object or None for non-existent (possibly deleted) models\"\n        log_entry_name = \"Model with string primary key\"  # capitalized in Recent Actions\n        logentry = LogEntry.objects.get(content_type__name__iexact=log_entry_name)\n        model = \"modelwithstringprimarykey\"\n        desired_admin_url = \"/test_admin/admin/admin_views/%s/%s/\" % (model, escape(iri_to_uri(urlquote(quote(self.pk)))))\n        self.assertEqual(logentry.get_admin_url(), desired_admin_url)\n\n        logentry.content_type.model = \"non-existent\"\n        self.assertEqual(logentry.get_admin_url(), None)\n\n    def test_deleteconfirmation_link(self):\n        \"The link from the delete confirmation page referring back to the changeform of the object should be quoted\"\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/delete/' % quote(self.pk))\n        # this URL now comes through reverse(), thus url quoting and iri_to_uri encoding\n        should_contain = \"\"\"/%s/\">%s</a>\"\"\" % (escape(iri_to_uri(urlquote(quote(self.pk)))), escape(self.pk))\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_add(self):\n        \"A model with a primary key that ends with add should be visible\"\n        add_model = ModelWithStringPrimaryKey(pk=\"i have something to add\")\n        add_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(add_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_delete(self):\n        \"A model with a primary key that ends with delete should be visible\"\n        delete_model = ModelWithStringPrimaryKey(pk=\"delete\")\n        delete_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(delete_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_url_conflicts_with_history(self):\n        \"A model with a primary key that ends with history should be visible\"\n        history_model = ModelWithStringPrimaryKey(pk=\"history\")\n        history_model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(history_model.pk))\n        should_contain = \"\"\"<h1>Change model with string primary key</h1>\"\"\"\n        self.assertContains(response, should_contain)\n\n    def test_shortcut_view_with_escaping(self):\n        \"'View on site should' work properly with char fields\"\n        model = ModelWithStringPrimaryKey(pk='abc_123')\n        model.save()\n        response = self.client.get('/test_admin/admin/admin_views/modelwithstringprimarykey/%s/' % quote(model.pk))\n        should_contain = '/%s/\" class=\"viewsitelink\">' % model.pk\n        self.assertContains(response, should_contain)\n\n    def test_change_view_history_link(self):\n        \"\"\"Object history button link should work and contain the pk value quoted.\"\"\"\n        url = reverse('admin:%s_modelwithstringprimarykey_change' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        response = self.client.get(url)\n        self.assertEqual(response.status_code, 200)\n        expected_link = reverse('admin:%s_modelwithstringprimarykey_history' %\n            ModelWithStringPrimaryKey._meta.app_label,\n            args=(quote(self.pk),))\n        self.assertContains(response, '<a href=\"%s\" class=\"historylink\"' % expected_link)\n\n    def test_redirect_on_add_view_continue_button(self):\n        \"\"\"As soon as an object is added using \"Save and continue editing\"\n        button, the user should be redirected to the object's change_view.\n\n        In case primary key is a string containing some special characters\n        like slash or underscore, these characters must be escaped (see #22266)\n        \"\"\"\n        response = self.client.post(\n            '/test_admin/admin/admin_views/modelwithstringprimarykey/add/',\n            {\n                'string_pk': '123/history',\n                \"_continue\": \"1\",  # Save and continue editing\n            }\n        )\n\n        self.assertEqual(response.status_code, 302)  # temporary redirect\n        self.assertEqual(\n            response['location'],\n            (\n                'http://testserver/test_admin/admin/admin_views/'\n                'modelwithstringprimarykey/123_2Fhistory/'  # PK is quoted\n            )\n        )\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SecureViewTests(TestCase):\n    \"\"\"\n    Test behavior of a view protected by the staff_member_required decorator.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_secure_view_shows_login_if_not_logged_in(self):\n        \"\"\"\n        Ensure that we see the admin login form.\n        \"\"\"\n        secure_url = '/test_admin/admin/secure-view/'\n        response = self.client.get(secure_url)\n        self.assertRedirects(response, '%s?next=%s' % (reverse('admin:login'), secure_url))\n        response = self.client.get(secure_url, follow=True)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.context[REDIRECT_FIELD_NAME], secure_url)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewUnicodeTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-unicode.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_unicode_edit(self):\n        \"\"\"\n        A test to ensure that POST on edit_view handles non-ASCII characters.\n        \"\"\"\n        post_data = {\n            \"name\": \"Test l\u00e6rdommer\",\n            # inline data\n            \"chapter_set-TOTAL_FORMS\": \"6\",\n            \"chapter_set-INITIAL_FORMS\": \"3\",\n            \"chapter_set-MAX_NUM_FORMS\": \"0\",\n            \"chapter_set-0-id\": \"1\",\n            \"chapter_set-0-title\": \"Norske bostaver \u00e6\u00f8\u00e5 skaper problemer\",\n            \"chapter_set-0-content\": \"&lt;p&gt;Sv\u00e6rt frustrerende med UnicodeDecodeError&lt;/p&gt;\",\n            \"chapter_set-1-id\": \"2\",\n            \"chapter_set-1-title\": \"Kj\u00e6rlighet.\",\n            \"chapter_set-1-content\": \"&lt;p&gt;La kj\u00e6rligheten til de lidende seire.&lt;/p&gt;\",\n            \"chapter_set-2-id\": \"3\",\n            \"chapter_set-2-title\": \"Need a title.\",\n            \"chapter_set-2-content\": \"&lt;p&gt;Newest content&lt;/p&gt;\",\n            \"chapter_set-3-id\": \"\",\n            \"chapter_set-3-title\": \"\",\n            \"chapter_set-3-content\": \"\",\n            \"chapter_set-4-id\": \"\",\n            \"chapter_set-4-title\": \"\",\n            \"chapter_set-4-content\": \"\",\n            \"chapter_set-5-id\": \"\",\n            \"chapter_set-5-title\": \"\",\n            \"chapter_set-5-content\": \"\",\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/book/1/', post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n\n    def test_unicode_delete(self):\n        \"\"\"\n        Ensure that the delete_view handles non-ASCII characters\n        \"\"\"\n        delete_dict = {'post': 'yes'}\n        response = self.client.get('/test_admin/admin/admin_views/book/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        response = self.client.post('/test_admin/admin/admin_views/book/1/delete/', delete_dict)\n        self.assertRedirects(response, '/test_admin/admin/admin_views/book/')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewListEditable(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-person.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inheritance(self):\n        Podcast.objects.create(name=\"This Week in Django\",\n            release_date=datetime.date.today())\n        response = self.client.get('/test_admin/admin/admin_views/podcast/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_inheritance_2(self):\n        Vodcast.objects.create(name=\"This Week in Django\", released=True)\n        response = self.client.get('/test_admin/admin/admin_views/vodcast/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_pk(self):\n        Language.objects.create(iso='en', name='English', english_name='English')\n        response = self.client.get('/test_admin/admin/admin_views/language/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_changelist_input_html(self):\n        response = self.client.get('/test_admin/admin/admin_views/person/')\n        # 2 inputs per object(the field and the hidden id field) = 6\n        # 4 management hidden fields = 4\n        # 4 action inputs (3 regular checkboxes, 1 checkbox to select all)\n        # main form submit button = 1\n        # search field and search submit button = 2\n        # CSRF field = 1\n        # field to track 'select all' across paginated views = 1\n        # 6 + 4 + 4 + 1 + 2 + 1 + 1 = 19 inputs\n        self.assertContains(response, \"<input\", count=19)\n        # 1 select per object = 3 selects\n        self.assertContains(response, \"<select\", count=4)\n\n    def test_post_messages(self):\n        # Ticket 12707: Saving inline editable should not show admin\n        # action warnings\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/',\n                                    data, follow=True)\n        self.assertEqual(len(response.context['messages']), 1)\n\n    def test_post_submission(self):\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n        # test a filtered page\n        data = {\n            \"form-TOTAL_FORMS\": \"2\",\n            \"form-INITIAL_FORMS\": \"2\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"1\",\n            \"form-0-gender\": \"1\",\n            \"form-0-alive\": \"checked\",\n\n            \"form-1-id\": \"3\",\n            \"form-1-gender\": \"1\",\n            \"form-1-alive\": \"checked\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/?gender__exact=1', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n\n        # test a searched page\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"1\",\n            \"form-0-gender\": \"1\",\n\n            \"_save\": \"Save\",\n        }\n        self.client.post('/test_admin/admin/admin_views/person/?q=john', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n\n    def test_non_field_errors(self):\n        ''' Ensure that non field errors are displayed for each of the\n            forms in the changelist's formset. Refs #13126.\n        '''\n        fd1 = FoodDelivery.objects.create(reference='123', driver='bill', restaurant='thai')\n        fd2 = FoodDelivery.objects.create(reference='456', driver='bill', restaurant='india')\n        fd3 = FoodDelivery.objects.create(reference='789', driver='bill', restaurant='pizza')\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"pizza\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/fooddelivery/', data)\n        self.assertContains(response, '<tr><td colspan=\"4\"><ul class=\"errorlist\"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>', 1, html=True)\n\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": str(fd1.id),\n            \"form-0-reference\": \"123\",\n            \"form-0-driver\": \"bill\",\n            \"form-0-restaurant\": \"thai\",\n\n            # Same data as above: Forbidden because of unique_together!\n            \"form-1-id\": str(fd2.id),\n            \"form-1-reference\": \"456\",\n            \"form-1-driver\": \"bill\",\n            \"form-1-restaurant\": \"thai\",\n\n            # Same data also.\n            \"form-2-id\": str(fd3.id),\n            \"form-2-reference\": \"789\",\n            \"form-2-driver\": \"bill\",\n            \"form-2-restaurant\": \"thai\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/fooddelivery/', data)\n        self.assertContains(response, '<tr><td colspan=\"4\"><ul class=\"errorlist\"><li>Food delivery with this Driver and Restaurant already exists.</li></ul></td></tr>', 2, html=True)\n\n    def test_non_form_errors(self):\n        # test if non-form errors are handled; ticket #12716\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"2\",\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/', data)\n        self.assertContains(response, \"Grace is not a Zombie\")\n\n    def test_non_form_errors_is_errorlist(self):\n        # test if non-form errors are correctly handled; ticket #12878\n        data = {\n            \"form-TOTAL_FORMS\": \"1\",\n            \"form-INITIAL_FORMS\": \"1\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-id\": \"2\",\n            \"form-0-alive\": \"1\",\n            \"form-0-gender\": \"2\",\n\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/person/', data)\n        non_form_errors = response.context['cl'].formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n\n    def test_list_editable_ordering(self):\n        collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n\n        Category.objects.create(id=1, order=1, collector=collector)\n        Category.objects.create(id=2, order=2, collector=collector)\n        Category.objects.create(id=3, order=0, collector=collector)\n        Category.objects.create(id=4, order=0, collector=collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        data = {\n            \"form-TOTAL_FORMS\": \"4\",\n            \"form-INITIAL_FORMS\": \"4\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-order\": \"14\",\n            \"form-0-id\": \"1\",\n            \"form-0-collector\": \"1\",\n\n            \"form-1-order\": \"13\",\n            \"form-1-id\": \"2\",\n            \"form-1-collector\": \"1\",\n\n            \"form-2-order\": \"1\",\n            \"form-2-id\": \"3\",\n            \"form-2-collector\": \"1\",\n\n            \"form-3-order\": \"0\",\n            \"form-3-id\": \"4\",\n            \"form-3-collector\": \"1\",\n\n            # Ensure that the form processing understands this as a list_editable \"Save\"\n            # and not an action \"Go\".\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/category/', data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n    def test_list_editable_pagination(self):\n        \"\"\"\n        Ensure that pagination works for list_editable items.\n        Refs #16819.\n        \"\"\"\n        UnorderedObject.objects.create(id=1, name='Unordered object #1')\n        UnorderedObject.objects.create(id=2, name='Unordered object #2')\n        UnorderedObject.objects.create(id=3, name='Unordered object #3')\n        response = self.client.get('/test_admin/admin/admin_views/unorderedobject/')\n        self.assertContains(response, 'Unordered object #3')\n        self.assertContains(response, 'Unordered object #2')\n        self.assertNotContains(response, 'Unordered object #1')\n        response = self.client.get('/test_admin/admin/admin_views/unorderedobject/?p=1')\n        self.assertNotContains(response, 'Unordered object #3')\n        self.assertNotContains(response, 'Unordered object #2')\n        self.assertContains(response, 'Unordered object #1')\n\n    def test_list_editable_action_submit(self):\n        # List editable changes should not be executed if the action \"Go\" button is\n        # used to submit the form.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"index\": \"0\",\n            \"_selected_action\": ['3'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, True)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 1)\n\n    def test_list_editable_action_choices(self):\n        # List editable changes should be executed if the \"Save\" button is\n        # used to submit the form - any action choices should be ignored.\n        data = {\n            \"form-TOTAL_FORMS\": \"3\",\n            \"form-INITIAL_FORMS\": \"3\",\n            \"form-MAX_NUM_FORMS\": \"0\",\n\n            \"form-0-gender\": \"1\",\n            \"form-0-id\": \"1\",\n\n            \"form-1-gender\": \"2\",\n            \"form-1-id\": \"2\",\n\n            \"form-2-alive\": \"checked\",\n            \"form-2-gender\": \"1\",\n            \"form-2-id\": \"3\",\n\n            \"_save\": \"Save\",\n            \"_selected_action\": ['1'],\n            \"action\": ['', 'delete_selected'],\n        }\n        self.client.post('/test_admin/admin/admin_views/person/', data)\n\n        self.assertEqual(Person.objects.get(name=\"John Mauchly\").alive, False)\n        self.assertEqual(Person.objects.get(name=\"Grace Hopper\").gender, 2)\n\n    def test_list_editable_popup(self):\n        \"\"\"\n        Fields should not be list-editable in popups.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/')\n        self.assertNotEqual(response.context['cl'].list_editable, ())\n        response = self.client.get('/test_admin/admin/admin_views/person/?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context['cl'].list_editable, ())\n\n    def test_pk_hidden_fields(self):\n        \"\"\" Ensure that hidden pk fields aren't displayed in the table body and\n            that their corresponding human-readable value is displayed instead.\n            Note that the hidden pk fields are in fact be displayed but\n            separately (not in the table), and only once.\n            Refs #12475.\n        \"\"\"\n        story1 = Story.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = Story.objects.create(title='Crouching Tiger, Hidden Python', content='The Python was sneaking into...')\n        response = self.client.get('/test_admin/admin/admin_views/story/')\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)  # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(response, '<div class=\"hiddenfields\">\\n<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" /><input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>' % (story2.id, story1.id), html=True)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story1.id, 1)\n        self.assertContains(response, '<td class=\"field-id\">%d</td>' % story2.id, 1)\n\n    def test_pk_hidden_fields_with_list_display_links(self):\n        \"\"\" Similarly as test_pk_hidden_fields, but when the hidden pk fields are\n            referenced in list_display_links.\n            Refs #12475.\n        \"\"\"\n        story1 = OtherStory.objects.create(title='The adventures of Guido', content='Once upon a time in Djangoland...')\n        story2 = OtherStory.objects.create(title='Crouching Tiger, Hidden Python', content='The Python was sneaking into...')\n        link1 = reverse('admin:admin_views_otherstory_change', args=(story1.pk,))\n        link2 = reverse('admin:admin_views_otherstory_change', args=(story2.pk,))\n        response = self.client.get('/test_admin/admin/admin_views/otherstory/')\n        self.assertContains(response, 'id=\"id_form-0-id\"', 1)  # Only one hidden field, in a separate place than the table.\n        self.assertContains(response, 'id=\"id_form-1-id\"', 1)\n        self.assertContains(response, '<div class=\"hiddenfields\">\\n<input type=\"hidden\" name=\"form-0-id\" value=\"%d\" id=\"id_form-0-id\" /><input type=\"hidden\" name=\"form-1-id\" value=\"%d\" id=\"id_form-1-id\" />\\n</div>' % (story2.id, story1.id), html=True)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link1, story1.id), 1)\n        self.assertContains(response, '<th class=\"field-id\"><a href=\"%s\">%d</a></th>' % (link2, story2.id), 1)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminSearchTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users', 'multiple-child-classes',\n                'admin-views-person']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_search_on_sibling_models(self):\n        \"Check that a search that mentions sibling models\"\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n        # confirm the search returned 1 object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n    def test_with_fk_to_field(self):\n        \"\"\"Ensure that the to_field GET parameter is preserved when a search\n        is performed. Refs #10918.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)\n        self.assertContains(response, \"\\n1 user\\n\")\n        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n\n    def test_exact_matches(self):\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 recommendation\\n\")\n\n        response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=ba')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 recommendations\\n\")\n\n    def test_beginning_matches(self):\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=Gui')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 person\\n\")\n        self.assertContains(response, \"Guido\")\n\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=uido')\n        # confirm the search returned zero objects\n        self.assertContains(response, \"\\n0 persons\\n\")\n        self.assertNotContains(response, \"Guido\")\n\n    def test_pluggable_search(self):\n        PluggableSearchPerson.objects.create(name=\"Bob\", age=10)\n        PluggableSearchPerson.objects.create(name=\"Amy\", age=20)\n\n        response = self.client.get('/test_admin/admin/admin_views/pluggablesearchperson/?q=Bob')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Bob\")\n\n        response = self.client.get('/test_admin/admin/admin_views/pluggablesearchperson/?q=20')\n        # confirm the search returned one object\n        self.assertContains(response, \"\\n1 pluggable search person\\n\")\n        self.assertContains(response, \"Amy\")\n\n    def test_reset_link(self):\n        \"\"\"\n        Test presence of reset link in search bar (\"1 result (_x total_)\").\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/person/?q=Gui')\n        self.assertContains(response,\n            \"\"\"<span class=\"small quiet\">1 result (<a href=\"?\">3 total</a>)</span>\"\"\",\n            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInheritedInlinesTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inline(self):\n        \"Ensure that inline models which inherit from a common parent are correctly handled by admin.\"\n\n        foo_user = \"foo username\"\n        bar_user = \"bar username\"\n\n        name_re = re.compile(b'name=\"(.*?)\"')\n\n        # test the add case\n        response = self.client.get('/test_admin/admin/admin_views/persona/add/')\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        # test the add case\n        post_data = {\n            \"name\": \"Test Name\",\n            # inline data\n            \"accounts-TOTAL_FORMS\": \"1\",\n            \"accounts-INITIAL_FORMS\": \"0\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n            \"accounts-0-username\": foo_user,\n            \"accounts-2-TOTAL_FORMS\": \"1\",\n            \"accounts-2-INITIAL_FORMS\": \"0\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n            \"accounts-2-0-username\": bar_user,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/persona/add/', post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n        persona_id = Persona.objects.all()[0].id\n        foo_id = FooAccount.objects.all()[0].id\n        bar_id = BarAccount.objects.all()[0].id\n\n        # test the edit case\n\n        response = self.client.get('/test_admin/admin/admin_views/persona/%d/' % persona_id)\n        names = name_re.findall(response.content)\n        # make sure we have no duplicate HTML names\n        self.assertEqual(len(names), len(set(names)))\n\n        post_data = {\n            \"name\": \"Test Name\",\n\n            \"accounts-TOTAL_FORMS\": \"2\",\n            \"accounts-INITIAL_FORMS\": \"1\",\n            \"accounts-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-0-username\": \"%s-1\" % foo_user,\n            \"accounts-0-account_ptr\": str(foo_id),\n            \"accounts-0-persona\": str(persona_id),\n\n            \"accounts-2-TOTAL_FORMS\": \"2\",\n            \"accounts-2-INITIAL_FORMS\": \"1\",\n            \"accounts-2-MAX_NUM_FORMS\": \"0\",\n\n            \"accounts-2-0-username\": \"%s-1\" % bar_user,\n            \"accounts-2-0-account_ptr\": str(bar_id),\n            \"accounts-2-0-persona\": str(persona_id),\n        }\n        response = self.client.post('/test_admin/admin/admin_views/persona/%d/' % persona_id, post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Persona.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.count(), 1)\n        self.assertEqual(BarAccount.objects.count(), 1)\n        self.assertEqual(FooAccount.objects.all()[0].username, \"%s-1\" % foo_user)\n        self.assertEqual(BarAccount.objects.all()[0].username, \"%s-1\" % bar_user)\n        self.assertEqual(Persona.objects.all()[0].accounts.count(), 2)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminActionsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-actions.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_model_admin_custom_action(self):\n        \"Tests a custom action defined in a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'mail_admin',\n            'index': 0,\n        }\n        self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a ModelAdmin action')\n\n    def test_model_admin_default_delete_action(self):\n        \"Tests the default delete action defined as a ModelAdmin method\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        delete_confirmation_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': 'delete_selected',\n            'post': 'yes',\n        }\n        confirmation = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertIsInstance(confirmation, TemplateResponse)\n        self.assertContains(confirmation, \"Are you sure you want to delete the selected subscribers?\")\n        self.assertContains(confirmation, ACTION_CHECKBOX_NAME, count=2)\n        self.client.post('/test_admin/admin/admin_views/subscriber/', delete_confirmation_data)\n        self.assertEqual(Subscriber.objects.count(), 0)\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_non_localized_pk(self):\n        \"\"\"If USE_THOUSAND_SEPARATOR is set, make sure that the ids for\n        the objects selected for deletion are rendered without separators.\n        Refs #14895.\n        \"\"\"\n        subscriber = Subscriber.objects.get(id=1)\n        subscriber.id = 9999\n        subscriber.save()\n        action_data = {\n            ACTION_CHECKBOX_NAME: [9999, 2],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        self.assertTemplateUsed(response, 'admin/delete_selected_confirmation.html')\n        self.assertContains(response, 'value=\"9999\"')  # Instead of 9,999\n        self.assertContains(response, 'value=\"2\"')\n\n    def test_model_admin_default_delete_action_protected(self):\n        \"\"\"\n        Tests the default delete action defined as a ModelAdmin method in the\n        case where some related objects are protected from deletion.\n        \"\"\"\n        q1 = Question.objects.create(question=\"Why?\")\n        a1 = Answer.objects.create(question=q1, answer=\"Because.\")\n        a2 = Answer.objects.create(question=q1, answer=\"Yes.\")\n        q2 = Question.objects.create(question=\"Wherefore?\")\n\n        action_data = {\n            ACTION_CHECKBOX_NAME: [q1.pk, q2.pk],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n\n        response = self.client.post(\"/test_admin/admin/admin_views/question/\", action_data)\n\n        self.assertContains(response, \"would require deleting the following protected related objects\")\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Because.</a></li>' % a1.pk, html=True)\n        self.assertContains(response, '<li>Answer: <a href=\"/test_admin/admin/admin_views/answer/%s/\">Yes.</a></li>' % a2.pk, html=True)\n\n    def test_model_admin_default_delete_action_no_change_url(self):\n        \"\"\"\n        Default delete action shouldn't break if a user's ModelAdmin removes the url for change_view.\n\n        Regression test for #20640\n        \"\"\"\n        obj = UnchangeableObject.objects.create()\n        action_data = {\n            ACTION_CHECKBOX_NAME: obj.pk,\n            \"action\": \"delete_selected\",\n            \"index\": \"0\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/unchangeableobject/', action_data)\n        # No 500 caused by NoReverseMatch\n        self.assertEqual(response.status_code, 200)\n        # The page shouldn't display a link to the nonexistent change page\n        self.assertContains(response, \"<li>Unchangeable object: UnchangeableObject object</li>\", 1, html=True)\n\n    def test_custom_function_mail_action(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_custom_function_action_with_redirect(self):\n        \"Tests a custom action defined in a function\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'redirect_to',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(response.status_code, 302)\n\n    def test_default_redirect(self):\n        \"\"\"\n        Test that actions which don't return an HttpResponse are redirected to\n        the same page, retaining the querystring (which may contain changelist\n        information).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'external_mail',\n            'index': 0,\n        }\n        url = '/test_admin/admin/admin_views/externalsubscriber/?o=1'\n        response = self.client.post(url, action_data)\n        self.assertRedirects(response, url)\n\n    def test_custom_function_action_streaming_response(self):\n        \"\"\"Tests a custom action that returns a StreamingHttpResponse.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'download',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        content = b''.join(response.streaming_content)\n        self.assertEqual(content, b'This is the content of the file')\n        self.assertEqual(response.status_code, 200)\n\n    def test_custom_function_action_no_perm_response(self):\n        \"\"\"Tests a custom action that returns an HttpResponse with 403 code.\"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'no_perm',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n        self.assertEqual(response.status_code, 403)\n        self.assertEqual(response.content, b'No permission to perform this action')\n\n    def test_actions_ordering(self):\n        \"\"\"\n        Ensure that actions are ordered as expected.\n        Refs #15964.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/externalsubscriber/')\n        self.assertContains(response, '''<label>Action: <select name=\"action\">\n<option value=\"\" selected=\"selected\">---------</option>\n<option value=\"delete_selected\">Delete selected external\nsubscribers</option>\n<option value=\"redirect_to\">Redirect to (Awesome action)</option>\n<option value=\"external_mail\">External mail (Another awesome\naction)</option>\n<option value=\"download\">Download subscription</option>\n<option value=\"no_perm\">No permission to run</option>\n</select>''', html=True)\n\n    def test_model_without_action(self):\n        \"Tests a ModelAdmin without any action\"\n        response = self.client.get('/test_admin/admin/admin_views/oldsubscriber/')\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"',\n            msg_prefix=\"Found an unexpected action toggle checkboxbox in response\")\n        self.assertNotContains(response, '<input type=\"checkbox\" class=\"action-select\"')\n\n    def test_model_without_action_still_has_jquery(self):\n        \"Tests that a ModelAdmin without any actions still gets jQuery included in page\"\n        response = self.client.get('/test_admin/admin/admin_views/oldsubscriber/')\n        self.assertEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'jquery.min.js',\n            msg_prefix=\"jQuery missing from admin pages for model with no admin actions\")\n\n    def test_action_column_class(self):\n        \"Tests that the checkbox column class is present in the response\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        self.assertContains(response, 'action-checkbox-column')\n\n    def test_multiple_actions_form(self):\n        \"\"\"\n        Test that actions come from the form whose submit button was pressed (#10618).\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            # Two different actions selected on the two forms...\n            'action': ['external_mail', 'delete_selected'],\n            # ...but we clicked \"go\" on the top form.\n            'index': 0\n        }\n        self.client.post('/test_admin/admin/admin_views/externalsubscriber/', action_data)\n\n        # Send mail, don't delete.\n        self.assertEqual(len(mail.outbox), 1)\n        self.assertEqual(mail.outbox[0].subject, 'Greetings from a function action')\n\n    def test_user_message_on_none_selected(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no items are selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        msg = \"\"\"Items must be selected in order to perform actions on them. No items have been changed.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_user_message_on_no_action(self):\n        \"\"\"\n        User should see a warning when 'Go' is pressed and no action is selected.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1, 2],\n            'action': '',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/subscriber/', action_data)\n        msg = \"\"\"No action selected.\"\"\"\n        self.assertContains(response, msg)\n        self.assertEqual(Subscriber.objects.count(), 2)\n\n    def test_selection_counter(self):\n        \"\"\"\n        Check if the selection counter is there.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertContains(response, '0 of 2 selected')\n\n    def test_popup_actions(self):\n        \"\"\" Actions should not be shown in popups. \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/subscriber/')\n        self.assertNotEqual(response.context[\"action_form\"], None)\n        response = self.client.get(\n            '/test_admin/admin/admin_views/subscriber/?%s' % IS_POPUP_VAR)\n        self.assertEqual(response.context[\"action_form\"], None)\n\n    def test_popup_template_response(self):\n        \"\"\"\n        Success on popups shall be rendered from template in order to allow\n        easy customization.\n        \"\"\"\n        response = self.client.post(\n            '/test_admin/admin/admin_views/actor/add/?%s=1' % IS_POPUP_VAR,\n            {'name': 'Troy McClure', 'age': '55', IS_POPUP_VAR: '1'})\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.template_name, 'admin/popup_response.html')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestCustomChangeList(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_custom_changelist(self):\n        \"\"\"\n        Validate that a custom ChangeList class can be used (#9749)\n        \"\"\"\n        # Insert some data\n        post_data = {\"name\": \"First Gadget\"}\n        response = self.client.post('/test_admin/%s/admin_views/gadget/add/' % self.urlbit, post_data)\n        self.assertEqual(response.status_code, 302)  # redirect somewhere\n        # Hit the page once to get messages out of the queue message list\n        response = self.client.get('/test_admin/%s/admin_views/gadget/' % self.urlbit)\n        # Ensure that data is still not visible on the page\n        response = self.client.get('/test_admin/%s/admin_views/gadget/' % self.urlbit)\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'First Gadget')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestInlineNotEditable(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_GET_parent_add(self):\n        \"\"\"\n        InlineModelAdmin broken?\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/parent/add/')\n        self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminCustomQuerysetTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n        self.pks = [EmptyModel.objects.create().id for i in range(3)]\n        self.super_login = {\n            REDIRECT_FIELD_NAME: '/test_admin/admin/',\n            'username': 'super',\n            'password': 'secret',\n        }\n\n    def test_changelist_view(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodel/')\n        for i in self.pks:\n            if i > 1:\n                self.assertContains(response, 'Primary key = %s' % i)\n            else:\n                self.assertNotContains(response, 'Primary key = %s' % i)\n\n    def test_changelist_view_count_queries(self):\n        # create 2 Person objects\n        Person.objects.create(name='person1', gender=1)\n        Person.objects.create(name='person2', gender=2)\n\n        # 4 queries are expected: 1 for the session, 1 for the user,\n        # 1 for the count and 1 for the objects on the page\n        with self.assertNumQueries(4):\n            resp = self.client.get('/test_admin/admin/admin_views/person/')\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        # here one more count(*) query will run, because filters were applied\n        with self.assertNumQueries(5):\n            extra = {'q': 'not_in_name'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 0 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 0 selected')\n        with self.assertNumQueries(5):\n            extra = {'q': 'person'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 2 selected')\n            self.assertEqual(resp.context['selection_note_all'], 'All 2 selected')\n        with self.assertNumQueries(5):\n            extra = {'gender__exact': '1'}\n            resp = self.client.get('/test_admin/admin/admin_views/person/', extra)\n            self.assertEqual(resp.context['selection_note'], '0 of 1 selected')\n            self.assertEqual(resp.context['selection_note_all'], '1 selected')\n\n    def test_change_view(self):\n        for i in self.pks:\n            response = self.client.get('/test_admin/admin/admin_views/emptymodel/%s/' % i)\n            if i > 1:\n                self.assertEqual(response.status_code, 200)\n            else:\n                self.assertEqual(response.status_code, 404)\n\n    def test_add_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(CoverLetter.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"author\": \"Candidate, Best\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/coverletter/add/',\n                                    post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;Candidate, Best&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(ShortMessage.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"content\": \"What's this SMS thing?\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/shortmessage/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_add_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        self.assertEqual(Telegram.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"Urgent telegram\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/telegram/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Urgent telegram&quot; was added successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        self.assertEqual(Paper.objects.count(), 0)\n        # Emulate model instance creation via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/paper/add/',\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper object&quot; was added successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_defer_qs(self):\n        # Test for #14529. defer() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        cl = CoverLetter.objects.create(author=\"John Doe\")\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/coverletter/%s/' % cl.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"author\": \"John Doe II\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/coverletter/%s/' % cl.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(CoverLetter.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. Instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The cover letter &quot;John Doe II&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        sm = ShortMessage.objects.create(content=\"This is expensive\")\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/shortmessage/%s/' % sm.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"content\": \"Too expensive\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/shortmessage/%s/' % sm.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(ShortMessage.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The short message &quot;ShortMessage_Deferred_timestamp object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_edit_model_modeladmin_only_qs(self):\n        # Test for #14529. only() is used in ModelAdmin.get_queryset()\n\n        # model has __unicode__ method\n        t = Telegram.objects.create(title=\"Frist Telegram\")\n        self.assertEqual(Telegram.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/telegram/%s/' % t.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"Telegram without typo\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/telegram/%s/' % t.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Telegram.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The instance\n        # representation is set by model's __unicode__()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The telegram &quot;Telegram without typo&quot; was changed successfully.</li>',\n            html=True\n        )\n\n        # model has no __unicode__ method\n        p = Paper.objects.create(title=\"My Paper Title\")\n        self.assertEqual(Paper.objects.count(), 1)\n        response = self.client.get('/test_admin/admin/admin_views/paper/%s/' % p.pk)\n        self.assertEqual(response.status_code, 200)\n        # Emulate model instance edit via the admin\n        post_data = {\n            \"title\": \"My Modified Paper Title\",\n            \"_save\": \"Save\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/paper/%s/' % p.pk,\n                post_data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(Paper.objects.count(), 1)\n        # Message should contain non-ugly model verbose name. The ugly(!)\n        # instance representation is set by six.text_type()\n        self.assertContains(\n            response,\n            '<li class=\"success\">The paper &quot;Paper_Deferred_author object&quot; was changed successfully.</li>',\n            html=True\n        )\n\n    def test_history_view_custom_qs(self):\n        \"\"\"\n        Ensure that custom querysets are considered for the admin history view.\n        Refs #21013.\n        \"\"\"\n        self.client.post(reverse('admin:login'), self.super_login)\n        FilteredManager.objects.create(pk=1)\n        FilteredManager.objects.create(pk=2)\n        response = self.client.get('/test_admin/admin/admin_views/filteredmanager/')\n        self.assertContains(response, \"PK=1\")\n        self.assertContains(response, \"PK=2\")\n        self.assertEqual(self.client.get('/test_admin/admin/admin_views/filteredmanager/1/history/').status_code, 200)\n        self.assertEqual(self.client.get('/test_admin/admin/admin_views/filteredmanager/2/history/').status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInlineFileUploadTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-actions.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n        # Set up test Picture and Gallery.\n        # These must be set up here instead of in fixtures in order to allow Picture\n        # to use a NamedTemporaryFile.\n        tdir = tempfile.gettempdir()\n        file1 = tempfile.NamedTemporaryFile(suffix=\".file1\", dir=tdir)\n        file1.write(b'a' * (2 ** 21))\n        filename = file1.name\n        file1.close()\n        self.gallery = Gallery(name=\"Test Gallery\")\n        self.gallery.save()\n        self.picture = Picture(name=\"Test Picture\", image=filename, gallery=self.gallery)\n        self.picture.save()\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_inline_file_upload_edit_validation_error_post(self):\n        \"\"\"\n        Test that inline file uploads correctly display prior data (#10002).\n        \"\"\"\n        post_data = {\n            \"name\": \"Test Gallery\",\n            \"pictures-TOTAL_FORMS\": \"2\",\n            \"pictures-INITIAL_FORMS\": \"1\",\n            \"pictures-MAX_NUM_FORMS\": \"0\",\n            \"pictures-0-id\": six.text_type(self.picture.id),\n            \"pictures-0-gallery\": six.text_type(self.gallery.id),\n            \"pictures-0-name\": \"Test Picture\",\n            \"pictures-0-image\": \"\",\n            \"pictures-1-id\": \"\",\n            \"pictures-1-gallery\": str(self.gallery.id),\n            \"pictures-1-name\": \"Test Picture 2\",\n            \"pictures-1-image\": \"\",\n        }\n        response = self.client.post('/test_admin/%s/admin_views/gallery/%d/' % (self.urlbit, self.gallery.id), post_data)\n        self.assertContains(response, b\"Currently\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminInlineTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.post_data = {\n            \"name\": \"Test Name\",\n\n            \"widget_set-TOTAL_FORMS\": \"3\",\n            \"widget_set-INITIAL_FORMS\": \"0\",\n            \"widget_set-MAX_NUM_FORMS\": \"0\",\n            \"widget_set-0-id\": \"\",\n            \"widget_set-0-owner\": \"1\",\n            \"widget_set-0-name\": \"\",\n            \"widget_set-1-id\": \"\",\n            \"widget_set-1-owner\": \"1\",\n            \"widget_set-1-name\": \"\",\n            \"widget_set-2-id\": \"\",\n            \"widget_set-2-owner\": \"1\",\n            \"widget_set-2-name\": \"\",\n\n            \"doohickey_set-TOTAL_FORMS\": \"3\",\n            \"doohickey_set-INITIAL_FORMS\": \"0\",\n            \"doohickey_set-MAX_NUM_FORMS\": \"0\",\n            \"doohickey_set-0-owner\": \"1\",\n            \"doohickey_set-0-code\": \"\",\n            \"doohickey_set-0-name\": \"\",\n            \"doohickey_set-1-owner\": \"1\",\n            \"doohickey_set-1-code\": \"\",\n            \"doohickey_set-1-name\": \"\",\n            \"doohickey_set-2-owner\": \"1\",\n            \"doohickey_set-2-code\": \"\",\n            \"doohickey_set-2-name\": \"\",\n\n            \"grommet_set-TOTAL_FORMS\": \"3\",\n            \"grommet_set-INITIAL_FORMS\": \"0\",\n            \"grommet_set-MAX_NUM_FORMS\": \"0\",\n            \"grommet_set-0-code\": \"\",\n            \"grommet_set-0-owner\": \"1\",\n            \"grommet_set-0-name\": \"\",\n            \"grommet_set-1-code\": \"\",\n            \"grommet_set-1-owner\": \"1\",\n            \"grommet_set-1-name\": \"\",\n            \"grommet_set-2-code\": \"\",\n            \"grommet_set-2-owner\": \"1\",\n            \"grommet_set-2-name\": \"\",\n\n            \"whatsit_set-TOTAL_FORMS\": \"3\",\n            \"whatsit_set-INITIAL_FORMS\": \"0\",\n            \"whatsit_set-MAX_NUM_FORMS\": \"0\",\n            \"whatsit_set-0-owner\": \"1\",\n            \"whatsit_set-0-index\": \"\",\n            \"whatsit_set-0-name\": \"\",\n            \"whatsit_set-1-owner\": \"1\",\n            \"whatsit_set-1-index\": \"\",\n            \"whatsit_set-1-name\": \"\",\n            \"whatsit_set-2-owner\": \"1\",\n            \"whatsit_set-2-index\": \"\",\n            \"whatsit_set-2-name\": \"\",\n\n            \"fancydoodad_set-TOTAL_FORMS\": \"3\",\n            \"fancydoodad_set-INITIAL_FORMS\": \"0\",\n            \"fancydoodad_set-MAX_NUM_FORMS\": \"0\",\n            \"fancydoodad_set-0-doodad_ptr\": \"\",\n            \"fancydoodad_set-0-owner\": \"1\",\n            \"fancydoodad_set-0-name\": \"\",\n            \"fancydoodad_set-0-expensive\": \"on\",\n            \"fancydoodad_set-1-doodad_ptr\": \"\",\n            \"fancydoodad_set-1-owner\": \"1\",\n            \"fancydoodad_set-1-name\": \"\",\n            \"fancydoodad_set-1-expensive\": \"on\",\n            \"fancydoodad_set-2-doodad_ptr\": \"\",\n            \"fancydoodad_set-2-owner\": \"1\",\n            \"fancydoodad_set-2-name\": \"\",\n            \"fancydoodad_set-2-expensive\": \"on\",\n\n            \"category_set-TOTAL_FORMS\": \"3\",\n            \"category_set-INITIAL_FORMS\": \"0\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n            \"category_set-0-order\": \"\",\n            \"category_set-0-id\": \"\",\n            \"category_set-0-collector\": \"1\",\n            \"category_set-1-order\": \"\",\n            \"category_set-1-id\": \"\",\n            \"category_set-1-collector\": \"1\",\n            \"category_set-2-order\": \"\",\n            \"category_set-2-id\": \"\",\n            \"category_set-2-collector\": \"1\",\n        }\n\n        result = self.client.login(username='super', password='secret')\n        self.assertEqual(result, True)\n        self.collector = Collector(pk=1, name='John Fowles')\n        self.collector.save()\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_simple_inline(self):\n        \"A simple model can be saved as inlines\"\n        # First add a new inline\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n        widget_id = Widget.objects.all()[0].id\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"widget_set-0-id\"')\n\n        # Now resave that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1\")\n\n        # Now modify that inline\n        self.post_data['widget_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['widget_set-0-id'] = str(widget_id)\n        self.post_data['widget_set-0-name'] = \"Widget 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Widget.objects.count(), 1)\n        self.assertEqual(Widget.objects.all()[0].name, \"Widget 1 Updated\")\n\n    def test_explicit_autofield_inline(self):\n        \"A model with an explicit autofield primary key can be saved as inlines. Regression for #8093\"\n        # First add a new inline\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"grommet_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1\")\n\n        # Now modify that inline\n        self.post_data['grommet_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['grommet_set-0-code'] = str(Grommet.objects.all()[0].code)\n        self.post_data['grommet_set-0-name'] = \"Grommet 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Grommet.objects.count(), 1)\n        self.assertEqual(Grommet.objects.all()[0].name, \"Grommet 1 Updated\")\n\n    def test_char_pk_inline(self):\n        \"A model with a character PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"doohickey_set-0-code\"')\n\n        # Now resave that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1\")\n\n        # Now modify that inline\n        self.post_data['doohickey_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['doohickey_set-0-code'] = \"DH1\"\n        self.post_data['doohickey_set-0-name'] = \"Doohickey 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(DooHickey.objects.count(), 1)\n        self.assertEqual(DooHickey.objects.all()[0].name, \"Doohickey 1 Updated\")\n\n    def test_integer_pk_inline(self):\n        \"A model with an integer PK can be saved as inlines. Regression for #10992\"\n        # First add a new inline\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get('/test_admin/admin/admin_views/collector/1/')\n        self.assertContains(response, 'name=\"whatsit_set-0-index\"')\n\n        # Now resave that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1\")\n\n        # Now modify that inline\n        self.post_data['whatsit_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['whatsit_set-0-index'] = \"42\"\n        self.post_data['whatsit_set-0-name'] = \"Whatsit 1 Updated\"\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Whatsit.objects.count(), 1)\n        self.assertEqual(Whatsit.objects.all()[0].name, \"Whatsit 1 Updated\")\n\n    def test_inherited_inline(self):\n        \"An inherited model can be saved as inlines. Regression for #11042\"\n        # First add a new inline\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        collector_url = '/test_admin/admin/admin_views/collector/%d/' % self.collector.pk\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n        doodad_pk = FancyDoodad.objects.all()[0].pk\n\n        # Check that the PK link exists on the rendered form\n        response = self.client.get(collector_url)\n        self.assertContains(response, 'name=\"fancydoodad_set-0-doodad_ptr\"')\n\n        # Now resave that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1\")\n\n        # Now modify that inline\n        self.post_data['fancydoodad_set-INITIAL_FORMS'] = \"1\"\n        self.post_data['fancydoodad_set-0-doodad_ptr'] = str(doodad_pk)\n        self.post_data['fancydoodad_set-0-name'] = \"Fancy Doodad 1 Updated\"\n        response = self.client.post(collector_url, self.post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(FancyDoodad.objects.count(), 1)\n        self.assertEqual(FancyDoodad.objects.all()[0].name, \"Fancy Doodad 1 Updated\")\n\n    def test_ordered_inline(self):\n        \"\"\"Check that an inline with an editable ordering fields is\n        updated correctly. Regression for #10922\"\"\"\n        # Create some objects with an initial ordering\n        Category.objects.create(id=1, order=1, collector=self.collector)\n        Category.objects.create(id=2, order=2, collector=self.collector)\n        Category.objects.create(id=3, order=0, collector=self.collector)\n        Category.objects.create(id=4, order=0, collector=self.collector)\n\n        # NB: The order values must be changed so that the items are reordered.\n        self.post_data.update({\n            \"name\": \"Frederick Clegg\",\n\n            \"category_set-TOTAL_FORMS\": \"7\",\n            \"category_set-INITIAL_FORMS\": \"4\",\n            \"category_set-MAX_NUM_FORMS\": \"0\",\n\n            \"category_set-0-order\": \"14\",\n            \"category_set-0-id\": \"1\",\n            \"category_set-0-collector\": \"1\",\n\n            \"category_set-1-order\": \"13\",\n            \"category_set-1-id\": \"2\",\n            \"category_set-1-collector\": \"1\",\n\n            \"category_set-2-order\": \"1\",\n            \"category_set-2-id\": \"3\",\n            \"category_set-2-collector\": \"1\",\n\n            \"category_set-3-order\": \"0\",\n            \"category_set-3-id\": \"4\",\n            \"category_set-3-collector\": \"1\",\n\n            \"category_set-4-order\": \"\",\n            \"category_set-4-id\": \"\",\n            \"category_set-4-collector\": \"1\",\n\n            \"category_set-5-order\": \"\",\n            \"category_set-5-id\": \"\",\n            \"category_set-5-collector\": \"1\",\n\n            \"category_set-6-order\": \"\",\n            \"category_set-6-id\": \"\",\n            \"category_set-6-collector\": \"1\",\n        })\n        response = self.client.post('/test_admin/admin/admin_views/collector/1/', self.post_data)\n        # Successful post will redirect\n        self.assertEqual(response.status_code, 302)\n\n        # Check that the order values have been applied to the right objects\n        self.assertEqual(self.collector.category_set.count(), 4)\n        self.assertEqual(Category.objects.get(id=1).order, 14)\n        self.assertEqual(Category.objects.get(id=2).order, 13)\n        self.assertEqual(Category.objects.get(id=3).order, 1)\n        self.assertEqual(Category.objects.get(id=4).order, 0)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass NeverCacheTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-colors.xml', 'admin-views-fabrics.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_admin_index(self):\n        \"Check the never-cache status of the main index\"\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_app_index(self):\n        \"Check the never-cache status of an application index\"\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_index(self):\n        \"Check the never-cache status of a model index\"\n        response = self.client.get('/test_admin/admin/admin_views/fabric/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_add(self):\n        \"Check the never-cache status of a model add page\"\n        response = self.client.get('/test_admin/admin/admin_views/fabric/add/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_view(self):\n        \"Check the never-cache status of a model edit page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_history(self):\n        \"Check the never-cache status of a model history page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/history/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_model_delete(self):\n        \"Check the never-cache status of a model delete page\"\n        response = self.client.get('/test_admin/admin/admin_views/section/1/delete/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_login(self):\n        \"Check the never-cache status of login views\"\n        self.client.logout()\n        response = self.client.get('/test_admin/admin/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_logout(self):\n        \"Check the never-cache status of logout view\"\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(get_max_age(response), 0)\n\n    def test_password_change(self):\n        \"Check the never-cache status of the password change view\"\n        self.client.logout()\n        response = self.client.get('/test_admin/password_change/')\n        self.assertEqual(get_max_age(response), None)\n\n    def test_password_change_done(self):\n        \"Check the never-cache status of the password change done view\"\n        response = self.client.get('/test_admin/admin/password_change/done/')\n        self.assertEqual(get_max_age(response), None)\n\n    def test_JS_i18n(self):\n        \"Check the never-cache status of the JavaScript i18n view\"\n        response = self.client.get('/test_admin/admin/jsi18n/')\n        self.assertEqual(get_max_age(response), None)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass PrePopulatedTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_prepopulated_on(self):\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpost/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"id: '#id_slug',\")\n        self.assertContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    def test_prepopulated_off(self):\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpost/1/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"A Long Title\")\n        self.assertNotContains(response, \"id: '#id_slug'\")\n        self.assertNotContains(response, \"field['dependency_ids'].push('#id_title');\")\n        self.assertNotContains(response, \"id: '#id_prepopulatedsubpost_set-0-subslug',\")\n\n    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n    def test_prepopulated_maxlength_localized(self):\n        \"\"\"\n        Regression test for #15938: if USE_THOUSAND_SEPARATOR is set, make sure\n        that maxLength (in the JavaScript) is rendered without separators.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/prepopulatedpostlargeslug/add/')\n        self.assertContains(response, \"maxLength: 1000\")  # instead of 1,000\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass SeleniumAdminViewsFirefoxTests(AdminSeleniumWebDriverTestCase):\n\n    available_apps = ['admin_views'] + AdminSeleniumWebDriverTestCase.available_apps\n    fixtures = ['admin-views-users.xml']\n    urls = \"admin_views.urls\"\n    webdriver_class = 'selenium.webdriver.firefox.webdriver.WebDriver'\n\n    def test_prepopulated_fields(self):\n        \"\"\"\n        Ensure that the JavaScript-automated prepopulated fields work with the\n        main form and with stacked and tabular inlines.\n        Refs #13068, #9264, #9983, #9784.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/mainprepopulated/add/'))\n\n        # Main form ----------------------------------------------------------\n        self.selenium.find_element_by_css_selector('#id_pubdate').send_keys('2012-02-18')\n        self.get_select_option('#id_status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome')\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-and-its-awesome-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-and-its-awesome')\n\n        # Stacked inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-pubdate').send_keys('2011-12-17')\n        self.get_select_option('#id_relatedprepopulated_set-0-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-name').send_keys(' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-0-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'here-stacked-inline-2011-12-17')\n        self.assertEqual(slug2, 'option-one-here-stacked-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[0].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-pubdate').send_keys('1999-01-25')\n        self.get_select_option('#id_relatedprepopulated_set-1-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-name').send_keys(' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooog text... ')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-1-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'now-you-have-another-stacked-inline-very-loooooooo')  # 50 characters maximum for slug1 field\n        self.assertEqual(slug2, 'option-two-now-you-have-another-stacked-inline-very-looooooo')  # 60 characters maximum for slug2 field\n\n        # Tabular inlines ----------------------------------------------------\n        # Initial inline\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-pubdate').send_keys('1234-12-07')\n        self.get_select_option('#id_relatedprepopulated_set-2-0-status', 'option two').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-name').send_keys('And now, with a t\u00c3b\u0171la\u0158 inline !!!')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-0-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'and-now-tabular-inline-1234-12-07')\n        self.assertEqual(slug2, 'option-two-and-now-tabular-inline')\n\n        # Add an inline\n        self.selenium.find_elements_by_link_text('Add another Related prepopulated')[1].click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-pubdate').send_keys('1981-08-22')\n        self.get_select_option('#id_relatedprepopulated_set-2-1-status', 'option one').click()\n        self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-name').send_keys('a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters')\n        slug1 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_relatedprepopulated_set-2-1-slug2').get_attribute('value')\n        self.assertEqual(slug1, 'tabular-inline-ignored-characters-1981-08-22')\n        self.assertEqual(slug2, 'option-one-tabular-inline-ignored-characters')\n\n        # Save and check that everything is properly stored in the database\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n        self.assertEqual(MainPrepopulated.objects.all().count(), 1)\n        MainPrepopulated.objects.get(\n            name=' this is the mAin n\u00c0M\u00eb and it\\'s aw\u03b5\u0161ome',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='main-name-and-its-awesome-2012-02-18',\n            slug2='option-two-main-name-and-its-awesome',\n        )\n        self.assertEqual(RelatedPrepopulated.objects.all().count(), 4)\n        RelatedPrepopulated.objects.get(\n            name=' here is a s\u0164\u0101\u00c7ke\u00f0   inline !  ',\n            pubdate='2011-12-17',\n            status='option one',\n            slug1='here-stacked-inline-2011-12-17',\n            slug2='option-one-here-stacked-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name=' now you haVe an\u00f6ther   s\u0164\u0101\u00c7ke\u00f0  inline with a very ... loooooooooooooooooo',  # 75 characters in name field\n            pubdate='1999-01-25',\n            status='option two',\n            slug1='now-you-have-another-stacked-inline-very-loooooooo',\n            slug2='option-two-now-you-have-another-stacked-inline-very-looooooo',\n        )\n        RelatedPrepopulated.objects.get(\n            name='And now, with a t\u00c3b\u0171la\u0158 inline !!!',\n            pubdate='1234-12-07',\n            status='option two',\n            slug1='and-now-tabular-inline-1234-12-07',\n            slug2='option-two-and-now-tabular-inline',\n        )\n        RelatedPrepopulated.objects.get(\n            name='a t\u00c3b\u0171la\u0158 inline with ignored ;\"&*^\\%$#@-/`~ characters',\n            pubdate='1981-08-22',\n            status='option one',\n            slug1='tabular-inline-ignored-characters-1981-08-22',\n            slug2='option-one-tabular-inline-ignored-characters',\n        )\n\n    def test_populate_existing_object(self):\n        \"\"\"\n        Ensure that the prepopulation works for existing objects too, as long\n        as the original field is empty.\n        Refs #19082.\n        \"\"\"\n        # Slugs are empty to start with.\n        item = MainPrepopulated.objects.create(\n            name=' this is the mAin n\u00c0M\u00eb',\n            pubdate='2012-02-18',\n            status='option two',\n            slug1='',\n            slug2='',\n        )\n        self.admin_login(username='super',\n                         password='secret',\n                         login_url='/test_admin/admin/')\n\n        object_url = '%s%s' % (\n            self.live_server_url,\n            '/test_admin/admin/admin_views/mainprepopulated/{}/'.format(item.id))\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' the best')\n\n        # The slugs got prepopulated since they were originally empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n        # Save the object\n        self.selenium.find_element_by_xpath('//input[@value=\"Save\"]').click()\n        self.wait_page_loaded()\n\n        self.selenium.get(object_url)\n        self.selenium.find_element_by_css_selector('#id_name').send_keys(' hello')\n\n        # The slugs got prepopulated didn't change since they were originally not empty\n        slug1 = self.selenium.find_element_by_css_selector('#id_slug1').get_attribute('value')\n        slug2 = self.selenium.find_element_by_css_selector('#id_slug2').get_attribute('value')\n        self.assertEqual(slug1, 'main-name-best-2012-02-18')\n        self.assertEqual(slug2, 'option-two-main-name-best')\n\n    def test_collapsible_fieldset(self):\n        \"\"\"\n        Test that the 'collapse' class in fieldsets definition allows to\n        show/hide the appropriate field section.\n        \"\"\"\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/article/add/'))\n        self.assertFalse(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.selenium.find_elements_by_link_text('Show')[0].click()\n        self.assertTrue(self.selenium.find_element_by_id('id_title').is_displayed())\n        self.assertEqual(\n            self.selenium.find_element_by_id('fieldsetcollapser0').text,\n            \"Hide\"\n        )\n\n    def test_first_field_focus(self):\n        \"\"\"JavaScript-assisted auto-focus on first usable form field.\"\"\"\n        # First form field has a single widget\n        self.admin_login(username='super', password='secret', login_url='/test_admin/admin/')\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/picture/add/'))\n        self.assertEqual(\n            self.selenium.switch_to_active_element(),\n            self.selenium.find_element_by_id('id_name')\n        )\n\n        # First form field has a MultiWidget\n        self.selenium.get('%s%s' % (self.live_server_url,\n            '/test_admin/admin/admin_views/reservation/add/'))\n        self.assertEqual(\n            self.selenium.switch_to_active_element(),\n            self.selenium.find_element_by_id('id_start_date_0')\n        )\n\n\nclass SeleniumAdminViewsChromeTests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.chrome.webdriver.WebDriver'\n\n\nclass SeleniumAdminViewsIETests(SeleniumAdminViewsFirefoxTests):\n    webdriver_class = 'selenium.webdriver.ie.webdriver.WebDriver'\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass ReadonlyTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_readonly_get(self):\n        response = self.client.get('/test_admin/admin/admin_views/post/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"posted\"')\n        # 3 fields + 2 submit buttons + 5 inline management form fields, + 2\n        # hidden fields for inlines + 1 field for the inline + 2 empty form\n        self.assertContains(response, \"<input\", count=15)\n        self.assertContains(response, formats.localize(datetime.date.today()))\n        self.assertContains(response,\n            \"<label>Awesomeness level:</label>\")\n        self.assertContains(response, \"Very awesome.\")\n        self.assertContains(response, \"Unknown coolness.\")\n        self.assertContains(response, \"foo\")\n\n        # Checks that multiline text in a readonly field gets <br /> tags\n        self.assertContains(response, \"Multiline<br />test<br />string\")\n        self.assertContains(response, \"<p>Multiline<br />html<br />content</p>\", html=True)\n        self.assertContains(response, \"InlineMultiline<br />test<br />string\")\n\n        self.assertContains(response,\n            formats.localize(datetime.date.today() - datetime.timedelta(days=7)))\n\n        self.assertContains(response, '<div class=\"form-row field-coolness\">')\n        self.assertContains(response, '<div class=\"form-row field-awesomeness_level\">')\n        self.assertContains(response, '<div class=\"form-row field-posted\">')\n        self.assertContains(response, '<div class=\"form-row field-value\">')\n        self.assertContains(response, '<div class=\"form-row\">')\n        self.assertContains(response, '<p class=\"help\">', 3)\n        self.assertContains(response, '<p class=\"help\">Some help text for the title (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n        self.assertContains(response, '<p class=\"help\">Some help text for the content (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n        self.assertContains(response, '<p class=\"help\">Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)</p>', html=True)\n\n        p = Post.objects.create(title=\"I worked on readonly_fields\", content=\"Its good stuff\")\n        response = self.client.get('/test_admin/admin/admin_views/post/%d/' % p.pk)\n        self.assertContains(response, \"%d amount of cool\" % p.pk)\n\n    def test_readonly_post(self):\n        data = {\n            \"title\": \"Django Got Readonly Fields\",\n            \"content\": \"This is an incredible development.\",\n            \"link_set-TOTAL_FORMS\": \"1\",\n            \"link_set-INITIAL_FORMS\": \"0\",\n            \"link_set-MAX_NUM_FORMS\": \"0\",\n        }\n        response = self.client.post('/test_admin/admin/admin_views/post/add/', data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 1)\n        p = Post.objects.get()\n        self.assertEqual(p.posted, datetime.date.today())\n\n        data[\"posted\"] = \"10-8-1990\"  # some date that's not today\n        response = self.client.post('/test_admin/admin/admin_views/post/add/', data)\n        self.assertEqual(response.status_code, 302)\n        self.assertEqual(Post.objects.count(), 2)\n        p = Post.objects.order_by('-id')[0]\n        self.assertEqual(p.posted, datetime.date.today())\n\n    def test_readonly_manytomany(self):\n        \"Regression test for #13004\"\n        response = self.client.get('/test_admin/admin/admin_views/pizza/add/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_user_password_change_limited_queryset(self):\n        su = User.objects.filter(is_superuser=True)[0]\n        response = self.client.get('/test_admin/admin2/auth/user/%s/password/' % su.pk)\n        self.assertEqual(response.status_code, 404)\n\n    def test_change_form_renders_correct_null_choice_value(self):\n        \"\"\"\n        Regression test for #17911.\n        \"\"\"\n        choice = Choice.objects.create(choice=None)\n        response = self.client.get('/test_admin/admin/admin_views/choice/%s/' % choice.pk)\n        self.assertContains(response, '<p>No opinion</p>', html=True)\n        self.assertNotContains(response, '<p>(None)</p>')\n\n    def test_readonly_backwards_ref(self):\n        \"\"\"\n        Regression test for #16433 - backwards references for related objects\n        broke if the related field is read-only due to the help_text attribute\n        \"\"\"\n        topping = Topping.objects.create(name='Salami')\n        pizza = Pizza.objects.create(name='Americano')\n        pizza.toppings.add(topping)\n        response = self.client.get('/test_admin/admin/admin_views/topping/add/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_readonly_field_overrides(self):\n        \"\"\"\n        Regression test for #22087 - ModelForm Meta overrides are ignored by\n        AdminReadonlyField\n        \"\"\"\n        p = FieldOverridePost.objects.create(title=\"Test Post\", content=\"Test Content\")\n        response = self.client.get('/test_admin/admin/admin_views/fieldoverridepost/%d/' % p.pk)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<p class=\"help\">Overridden help text for the date</p>')\n        self.assertContains(response, '<label for=\"id_public\">Overridden public label:</label>', html=True)\n        self.assertNotContains(response, \"Some help text for the date (with unicode \u0160\u0110\u0106\u017d\u0107\u017e\u0161\u0111)\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass LimitChoicesToInAdminTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_limit_choices_to_as_callable(self):\n        \"\"\"Test for ticket 2445 changes to admin.\"\"\"\n        threepwood = Character.objects.create(\n            username='threepwood',\n            last_action=datetime.datetime.today() + datetime.timedelta(days=1),\n        )\n        marley = Character.objects.create(\n            username='marley',\n            last_action=datetime.datetime.today() - datetime.timedelta(days=1),\n        )\n        response = self.client.get('/test_admin/admin/admin_views/stumpjoke/add/')\n        # The allowed option should appear twice; the limited option should not appear.\n        self.assertContains(response, threepwood.username, count=2)\n        self.assertNotContains(response, marley.username)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass RawIdFieldsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_limit_choices_to(self):\n        \"\"\"Regression test for 14880\"\"\"\n        actor = Actor.objects.create(name=\"Palin\", age=27)\n        Inquisition.objects.create(expected=True,\n                                   leader=actor,\n                                   country=\"England\")\n        Inquisition.objects.create(expected=False,\n                                   leader=actor,\n                                   country=\"Spain\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_inquisition\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step also tests integers, strings and booleans in the\n        # lookup query string; in model we define inquisition field to have a\n        # limit_choices_to option that includes a filter on a string field\n        # (inquisition__actor__name), a filter on an integer field\n        # (inquisition__actor__age), and a filter on a boolean field\n        # (inquisition__expected).\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Spain\")\n        self.assertNotContains(response2, \"England\")\n\n    def test_limit_choices_to_isnull_false(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant0\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=0 gets parsed correctly from the\n        # lookup query string; in model we define defendant0 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=False\".\n        response2 = self.client.get(popup_url)\n        self.assertContains(response2, \"Kilbraken\")\n        self.assertNotContains(response2, \"Palin\")\n\n    def test_limit_choices_to_isnull_true(self):\n        \"\"\"Regression test for 20182\"\"\"\n        Actor.objects.create(name=\"Palin\", age=27)\n        Actor.objects.create(name=\"Kilbraken\", age=50, title=\"Judge\")\n        response = self.client.get('/test_admin/admin/admin_views/sketch/add/')\n        # Find the link\n        m = re.search(br'<a href=\"([^\"]*)\"[^>]* id=\"lookup_id_defendant1\"', response.content)\n        self.assertTrue(m)  # Got a match\n        popup_url = m.groups()[0].decode().replace(\"&amp;\", \"&\")\n\n        # Handle relative links\n        popup_url = urljoin(response.request['PATH_INFO'], popup_url)\n        # Get the popup and verify the correct objects show up in the resulting\n        # page. This step tests field__isnull=1 gets parsed correctly from the\n        # lookup query string; in model we define defendant1 field to have a\n        # limit_choices_to option that includes \"actor__title__isnull=True\".\n        response2 = self.client.get(popup_url)\n        self.assertNotContains(response2, \"Kilbraken\")\n        self.assertContains(response2, \"Palin\")\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass UserAdminTest(TestCase):\n    \"\"\"\n    Tests user CRUD functionality.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/%s/' % new_user.pk)\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_save_continue_editing_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_continue': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/%s/' % new_user.pk)\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_password_mismatch(self):\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'mismatch',\n        })\n        self.assertEqual(response.status_code, 200)\n        adminform = response.context['adminform']\n        self.assertTrue('password' not in adminform.form.errors)\n        self.assertEqual(adminform.form.errors['password2'],\n            [\"The two password fields didn't match.\"])\n\n    def test_user_fk_popup(self):\n        \"\"\"Quick user addition in a FK popup shouldn't invoke view for further user customization\"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/album/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '/test_admin/admin/auth/user/add')\n        self.assertContains(response, 'class=\"add-another\" id=\"add_id_owner\" onclick=\"return showAddAnotherPopup(this);\"')\n        response = self.client.get('/test_admin/admin/auth/user/add/?_popup=1')\n        self.assertEqual(response.status_code, 200)\n        self.assertNotContains(response, 'name=\"_continue\"')\n        self.assertNotContains(response, 'name=\"_addanother\"')\n        data = {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_popup': '1',\n            '_save': '1',\n        }\n        response = self.client.post('/test_admin/admin/auth/user/add/?_popup=1', data, follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'dismissAddAnotherPopup')\n\n    def test_save_add_another_button(self):\n        user_count = User.objects.count()\n        response = self.client.post('/test_admin/admin/auth/user/add/', {\n            'username': 'newuser',\n            'password1': 'newpassword',\n            'password2': 'newpassword',\n            '_addanother': '1',\n        })\n        new_user = User.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/user/add/')\n        self.assertEqual(User.objects.count(), user_count + 1)\n        self.assertTrue(new_user.has_usable_password())\n\n    def test_user_permission_performance(self):\n        u = User.objects.all()[0]\n\n        # Don't depend on a warm cache, see #17377.\n        ContentType.objects.clear_cache()\n\n        with self.assertNumQueries(10):\n            response = self.client.get('/test_admin/admin/auth/user/%s/' % u.pk)\n            self.assertEqual(response.status_code, 200)\n\n    def test_form_url_present_in_context(self):\n        u = User.objects.all()[0]\n        response = self.client.get('/test_admin/admin3/auth/user/%s/password/' % u.pk)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['form_url'], 'pony')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass GroupAdminTest(TestCase):\n    \"\"\"\n    Tests group CRUD functionality.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_save_button(self):\n        group_count = Group.objects.count()\n        response = self.client.post('/test_admin/admin/auth/group/add/', {\n            'name': 'newgroup',\n        })\n\n        Group.objects.order_by('-id')[0]\n        self.assertRedirects(response, '/test_admin/admin/auth/group/')\n        self.assertEqual(Group.objects.count(), group_count + 1)\n\n    def test_group_permission_performance(self):\n        g = Group.objects.create(name=\"test_group\")\n        with self.assertNumQueries(8):\n            response = self.client.get('/test_admin/admin/auth/group/%s/' % g.pk)\n            self.assertEqual(response.status_code, 200)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass CSSTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_field_prefix_css_classes(self):\n        \"\"\"\n        Ensure that fields have a CSS class name with a 'field-' prefix.\n        Refs #16371.\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/post/add/')\n\n        # The main form\n        self.assertContains(response, 'class=\"form-row field-title\"')\n        self.assertContains(response, 'class=\"form-row field-content\"')\n        self.assertContains(response, 'class=\"form-row field-public\"')\n        self.assertContains(response, 'class=\"form-row field-awesomeness_level\"')\n        self.assertContains(response, 'class=\"form-row field-coolness\"')\n        self.assertContains(response, 'class=\"form-row field-value\"')\n        self.assertContains(response, 'class=\"form-row\"')  # The lambda function\n\n        # The tabular inline\n        self.assertContains(response, '<td class=\"field-url\">')\n        self.assertContains(response, '<td class=\"field-posted\">')\n\n    def test_index_css_classes(self):\n        \"\"\"\n        Ensure that CSS class names are used for each app and model on the\n        admin index pages.\n        Refs #17050.\n        \"\"\"\n        # General index page\n        response = self.client.get(\"/test_admin/admin/\")\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n        # App index page\n        response = self.client.get(\"/test_admin/admin/admin_views/\")\n        self.assertContains(response, '<div class=\"app-admin_views module\">')\n        self.assertContains(response, '<tr class=\"model-actor\">')\n        self.assertContains(response, '<tr class=\"model-album\">')\n\n    def test_app_model_in_form_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_form template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/section/add/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_list_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by change_list template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/section/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_delete_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by delete_confirmation\n        template\n        \"\"\"\n        response = self.client.get(\n            '/test_admin/admin/admin_views/section/1/delete/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_app_model_in_app_index_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by app_index template\n        \"\"\"\n        response = self.client.get('/test_admin/admin/admin_views/')\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, '<body class=\" dashboard app-admin_views')\n\n    def test_app_model_in_delete_selected_confirmation_body_class(self):\n        \"\"\"\n        Ensure app and model tag are correctly read by\n        delete_selected_confirmation template\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'delete_selected',\n            'index': 0,\n        }\n        response = self.client.post('/test_admin/admin/admin_views/section/',\n            action_data)\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response,\n            '<body class=\" app-admin_views model-section ')\n\n    def test_changelist_field_classes(self):\n        \"\"\"\n        Cells of the change list table should contain the field name in their class attribute\n        Refs #11195.\n        \"\"\"\n        Podcast.objects.create(name=\"Django Dose\",\n            release_date=datetime.date.today())\n        response = self.client.get('/test_admin/admin/admin_views/podcast/')\n        self.assertContains(\n            response, '<th class=\"field-name\">')\n        self.assertContains(\n            response, '<td class=\"field-release_date nowrap\">')\n        self.assertContains(\n            response, '<td class=\"action-checkbox\">')\n\n\ntry:\n    import docutils\nexcept ImportError:\n    docutils = None\n\n\n@unittest.skipUnless(docutils, \"no docutils installed.\")\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminDocsTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_tags(self):\n        response = self.client.get('/test_admin/admin/doc/tags/')\n\n        # The builtin tag group exists\n        self.assertContains(response, \"<h2>Built-in tags</h2>\", count=2, html=True)\n\n        # A builtin tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-autoescape\">autoescape</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-autoescape\">autoescape</a></li>', html=True)\n\n        # An app tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"flatpages-get_flatpages\">get_flatpages</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#flatpages-get_flatpages\">get_flatpages</a></li>', html=True)\n\n        # The admin list tag group exists\n        self.assertContains(response, \"<h2>admin_list</h2>\", count=2, html=True)\n\n        # An admin list tag exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"admin_list-admin_actions\">admin_actions</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#admin_list-admin_actions\">admin_actions</a></li>', html=True)\n\n    def test_filters(self):\n        response = self.client.get('/test_admin/admin/doc/filters/')\n\n        # The builtin filter group exists\n        self.assertContains(response, \"<h2>Built-in filters</h2>\", count=2, html=True)\n\n        # A builtin filter exists in both the index and detail\n        self.assertContains(response, '<h3 id=\"built_in-add\">add</h3>', html=True)\n        self.assertContains(response, '<li><a href=\"#built_in-add\">add</a></li>', html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass ValidXHTMLTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    urlbit = 'admin'\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    @override_settings(\n        TEMPLATE_CONTEXT_PROCESSORS=filter(\n            lambda t: t != 'django.core.context_processors.i18n',\n            global_settings.TEMPLATE_CONTEXT_PROCESSORS),\n        USE_I18N=False,\n    )\n    def test_lang_name_present(self):\n        response = self.client.get('/test_admin/%s/admin_views/' % self.urlbit)\n        self.assertNotContains(response, ' lang=\"\"')\n        self.assertNotContains(response, ' xml:lang=\"\"')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',),\n                   USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\nclass DateHierarchyTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        formats.reset_format_cache()\n\n    def assert_non_localized_year(self, response, year):\n        \"\"\"Ensure that the year is not localized with\n        USE_THOUSAND_SEPARATOR. Refs #15234.\n        \"\"\"\n        self.assertNotContains(response, formats.number_format(year))\n\n    def assert_contains_year_link(self, response, date):\n        self.assertContains(response, '?release_date__year=%d\"' % (date.year,))\n\n    def assert_contains_month_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.month, date.year))\n\n    def assert_contains_day_link(self, response, date):\n        self.assertContains(\n            response, '?release_date__day=%d&amp;'\n            'release_date__month=%d&amp;release_date__year=%d\"' % (\n                date.day, date.month, date.year))\n\n    def test_empty(self):\n        \"\"\"\n        Ensure that no date hierarchy links display with empty changelist.\n        \"\"\"\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        self.assertNotContains(response, 'release_date__year=')\n        self.assertNotContains(response, 'release_date__month=')\n        self.assertNotContains(response, 'release_date__day=')\n\n    def test_single(self):\n        \"\"\"\n        Ensure that single day-level date hierarchy appears for single object.\n        \"\"\"\n        DATE = datetime.date(2000, 6, 30)\n        Podcast.objects.create(release_date=DATE)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        self.assert_contains_day_link(response, DATE)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_month(self):\n        \"\"\"\n        Ensure that day-level links appear for changelist within single month.\n        \"\"\"\n        DATES = (datetime.date(2000, 6, 30),\n                 datetime.date(2000, 6, 15),\n                 datetime.date(2000, 6, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        for date in DATES:\n            self.assert_contains_day_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_within_year(self):\n        \"\"\"\n        Ensure that month-level links appear for changelist within single year.\n        \"\"\"\n        DATES = (datetime.date(2000, 1, 30),\n                 datetime.date(2000, 3, 15),\n                 datetime.date(2000, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        url = reverse('admin:admin_views_podcast_changelist')\n        response = self.client.get(url)\n        # no day-level links\n        self.assertNotContains(response, 'release_date__day=')\n        for date in DATES:\n            self.assert_contains_month_link(response, date)\n        self.assert_non_localized_year(response, 2000)\n\n    def test_multiple_years(self):\n        \"\"\"\n        Ensure that year-level links appear for year-spanning changelist.\n        \"\"\"\n        DATES = (datetime.date(2001, 1, 30),\n                 datetime.date(2003, 3, 15),\n                 datetime.date(2005, 5, 3))\n        for date in DATES:\n            Podcast.objects.create(release_date=date)\n        response = self.client.get(\n            reverse('admin:admin_views_podcast_changelist'))\n        # no day/month-level links\n        self.assertNotContains(response, 'release_date__day=')\n        self.assertNotContains(response, 'release_date__month=')\n        for date in DATES:\n            self.assert_contains_year_link(response, date)\n\n        # and make sure GET parameters still behave correctly\n        for date in DATES:\n            url = '%s?release_date__year=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year)\n            response = self.client.get(url)\n            self.assert_contains_month_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n            url = '%s?release_date__year=%d&release_date__month=%d' % (\n                  reverse('admin:admin_views_podcast_changelist'),\n                  date.year, date.month)\n            response = self.client.get(url)\n            self.assert_contains_day_link(response, date)\n            self.assert_non_localized_year(response, 2000)\n            self.assert_non_localized_year(response, 2003)\n            self.assert_non_localized_year(response, 2005)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminCustomSaveRelatedTests(TestCase):\n    \"\"\"\n    Ensure that one can easily customize the way related objects are saved.\n    Refs #16115.\n    \"\"\"\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_should_be_able_to_edit_related_objects_on_add_view(self):\n        post = {\n            'child_set-TOTAL_FORMS': '3',\n            'child_set-INITIAL_FORMS': '0',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-1-name': 'Catherine',\n        }\n        self.client.post('/test_admin/admin/admin_views/parent/add/', post)\n        self.assertEqual(1, Parent.objects.count())\n        self.assertEqual(2, Child.objects.count())\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_change_view(self):\n        parent = Parent.objects.create(name='Josh Stone')\n        paul = Child.objects.create(parent=parent, name='Paul')\n        catherine = Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'child_set-TOTAL_FORMS': '5',\n            'child_set-INITIAL_FORMS': '2',\n            'name': 'Josh Stone',\n            'child_set-0-name': 'Paul',\n            'child_set-0-id': paul.id,\n            'child_set-1-name': 'Catherine',\n            'child_set-1-id': catherine.id,\n        }\n        self.client.post('/test_admin/admin/admin_views/parent/%s/' % parent.id, post)\n\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n    def test_should_be_able_to_edit_related_objects_on_changelist_view(self):\n        parent = Parent.objects.create(name='Josh Rock')\n        Child.objects.create(parent=parent, name='Paul')\n        Child.objects.create(parent=parent, name='Catherine')\n        post = {\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '1',\n            'form-MAX_NUM_FORMS': '0',\n            'form-0-id': parent.id,\n            'form-0-name': 'Josh Stone',\n            '_save': 'Save'\n        }\n\n        self.client.post('/test_admin/admin/admin_views/parent/', post)\n        children_names = list(Child.objects.order_by('name').values_list('name', flat=True))\n\n        self.assertEqual('Josh Stone', Parent.objects.latest('id').name)\n        self.assertEqual(['Catherine Stone', 'Paul Stone'], children_names)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewLogoutTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_client_logout_url_can_be_used_to_login(self):\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'registration/logged_out.html')\n        self.assertEqual(response.request['PATH_INFO'], '/test_admin/admin/logout/')\n\n        # we are now logged out\n        response = self.client.get('/test_admin/admin/logout/')\n        self.assertEqual(response.status_code, 302)  # we should be redirected to the login page.\n\n        # follow the redirect and test results.\n        response = self.client.get('/test_admin/admin/logout/', follow=True)\n        self.assertEqual(response.status_code, 200)\n        self.assertTemplateUsed(response, 'admin/login.html')\n        self.assertEqual(response.request['PATH_INFO'], '/test_admin/admin/login/')\n        self.assertContains(response, '<input type=\"hidden\" name=\"next\" value=\"/test_admin/admin/\" />')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminUserMessageTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def send_message(self, level):\n        \"\"\"\n        Helper that sends a post to the dummy test methods and asserts that a\n        message with the level has appeared in the response.\n        \"\"\"\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_%s' % level,\n            'index': 0,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/usermessenger/',\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"%s\">Test %s</li>' % (level, level),\n                            html=True)\n\n    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n    def test_message_debug(self):\n        self.send_message('debug')\n\n    def test_message_info(self):\n        self.send_message('info')\n\n    def test_message_success(self):\n        self.send_message('success')\n\n    def test_message_warning(self):\n        self.send_message('warning')\n\n    def test_message_error(self):\n        self.send_message('error')\n\n    def test_message_extra_tags(self):\n        action_data = {\n            ACTION_CHECKBOX_NAME: [1],\n            'action': 'message_extra_tags',\n            'index': 0,\n        }\n\n        response = self.client.post('/test_admin/admin/admin_views/usermessenger/',\n                                    action_data, follow=True)\n        self.assertContains(response,\n                            '<li class=\"extra_tag info\">Test tags</li>',\n                            html=True)\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminKeepChangeListFiltersTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n    admin_site = site\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def assertURLEqual(self, url1, url2):\n        \"\"\"\n        Assert that two URLs are equal despite the ordering\n        of their querystring. Refs #22360.\n        \"\"\"\n        parsed_url1 = urlparse(url1)\n        path1 = parsed_url1.path\n        parsed_qs1 = dict(parse_qsl(parsed_url1.query))\n\n        parsed_url2 = urlparse(url2)\n        path2 = parsed_url2.path\n        parsed_qs2 = dict(parse_qsl(parsed_url2.query))\n\n        for parsed_qs in [parsed_qs1, parsed_qs2]:\n            if '_changelist_filters' in parsed_qs:\n                changelist_filters = parsed_qs['_changelist_filters']\n                parsed_filters = dict(parse_qsl(changelist_filters))\n                parsed_qs['_changelist_filters'] = parsed_filters\n\n        self.assertEqual(path1, path2)\n        self.assertEqual(parsed_qs1, parsed_qs2)\n\n    def test_assert_url_equal(self):\n        # Test equality.\n        self.assertURLEqual(\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'\n        )\n\n        # Test inequality.\n        with self.assertRaises(AssertionError):\n            self.assertURLEqual(\n                'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n                'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D1%26is_superuser__exact%3D1'\n            )\n\n        # Ignore scheme and host.\n        self.assertURLEqual(\n            'http://testserver/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0'\n        )\n\n        # Ignore ordering of querystring.\n        self.assertURLEqual(\n            '/test_admin/admin/auth/user/?is_staff__exact=0&is_superuser__exact=0',\n            '/test_admin/admin/auth/user/?is_superuser__exact=0&is_staff__exact=0'\n        )\n\n        # Ignore ordering of _changelist_filters.\n        self.assertURLEqual(\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_staff__exact%3D0%26is_superuser__exact%3D0',\n            '/test_admin/admin/auth/user/105/?_changelist_filters=is_superuser__exact%3D0%26is_staff__exact%3D0'\n        )\n\n    def get_changelist_filters(self):\n        return {\n            'is_superuser__exact': 0,\n            'is_staff__exact': 0,\n        }\n\n    def get_changelist_filters_querystring(self):\n        return urlencode(self.get_changelist_filters())\n\n    def get_preserved_filters_querystring(self):\n        return urlencode({\n            '_changelist_filters': self.get_changelist_filters_querystring()\n        })\n\n    def get_sample_user_id(self):\n        return 104\n\n    def get_changelist_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_changelist',\n                    current_app=self.admin_site.name),\n            self.get_changelist_filters_querystring(),\n        )\n\n    def get_add_url(self):\n        return '%s?%s' % (\n            reverse('admin:auth_user_add',\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_change_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_change', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_history_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_history', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def get_delete_url(self, user_id=None):\n        if user_id is None:\n            user_id = self.get_sample_user_id()\n        return \"%s?%s\" % (\n            reverse('admin:auth_user_delete', args=(user_id,),\n                    current_app=self.admin_site.name),\n            self.get_preserved_filters_querystring(),\n        )\n\n    def test_changelist_view(self):\n        response = self.client.get(self.get_changelist_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the `change_view` link has the correct querystring.\n        detail_link = re.search(\n            '<a href=\"(.*?)\">joepublic</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(detail_link.group(1), self.get_change_url())\n\n    def test_change_view(self):\n        # Get the `change_view`.\n        response = self.client.get(self.get_change_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        # Check the history link.\n        history_link = re.search(\n            '<a href=\"(.*?)\" class=\"historylink\">History</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(history_link.group(1), self.get_history_url())\n\n        # Check the delete link.\n        delete_link = re.search(\n            '<a href=\"(.*?)\" class=\"deletelink\">Delete</a>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(delete_link.group(1), self.get_delete_url())\n\n        # Test redirect on \"Save\".\n        post_data = {\n            'username': 'joepublic',\n            'last_login_0': '2007-05-30',\n            'last_login_1': '13:20:10',\n            'date_joined_0': '2007-05-30',\n            'date_joined_1': '13:20:10',\n        }\n\n        post_data['_save'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url()\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_change_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_add_view(self):\n        # Get the `add_view`.\n        response = self.client.get(self.get_add_url())\n        self.assertEqual(response.status_code, 200)\n\n        # Check the form action.\n        form_action = re.search(\n            '<form enctype=\"multipart/form-data\" action=\"(.*?)\" method=\"post\" id=\"user_form\".*?>',\n            force_text(response.content)\n        )\n        self.assertURLEqual(form_action.group(1), '?%s' % self.get_preserved_filters_querystring())\n\n        post_data = {\n            'username': 'dummy',\n            'password1': 'test',\n            'password2': 'test',\n        }\n\n        # Test redirect on \"Save\".\n        post_data['_save'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.latest('pk').pk)\n        )\n        post_data.pop('_save')\n\n        # Test redirect on \"Save and continue\".\n        post_data['username'] = 'dummy2'\n        post_data['_continue'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_change_url(User.objects.latest('pk').pk)\n        )\n        post_data.pop('_continue')\n\n        # Test redirect on \"Save and add new\".\n        post_data['username'] = 'dummy3'\n        post_data['_addanother'] = 1\n        response = self.client.post(self.get_add_url(), data=post_data)\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_add_url()\n        )\n        post_data.pop('_addanother')\n\n    def test_delete_view(self):\n        # Test redirect on \"Delete\".\n        response = self.client.post(self.get_delete_url(), {'post': 'yes'})\n        self.assertEqual(response.status_code, 302)\n        self.assertURLEqual(\n            response.url,\n            self.get_changelist_url()\n        )\n\n    def test_url_prefix(self):\n        context = {\n            'preserved_filters': self.get_preserved_filters_querystring(),\n            'opts': User._meta,\n        }\n\n        url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n        self.assertURLEqual(\n            self.get_changelist_url(),\n            add_preserved_filters(context, url),\n        )\n\n        original_prefix = get_script_prefix()\n        try:\n            set_script_prefix('/prefix/')\n            url = reverse('admin:auth_user_changelist', current_app=self.admin_site.name)\n            self.assertURLEqual(\n                self.get_changelist_url(),\n                add_preserved_filters(context, url),\n            )\n        finally:\n            set_script_prefix(original_prefix)\n\n\nclass NamespacedAdminKeepChangeListFiltersTests(AdminKeepChangeListFiltersTests):\n    admin_site = site2\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass TestLabelVisibility(TestCase):\n    \"\"\" #11277 -Labels of hidden fields in admin were not hidden. \"\"\"\n\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def test_all_fields_visible(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelvisible/add/')\n        self.assert_fieldline_visible(response)\n        self.assert_field_visible(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def test_all_fields_hidden(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelhidden/add/')\n        self.assert_fieldline_hidden(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_hidden(response, 'second')\n\n    def test_mixin(self):\n        response = self.client.get('/test_admin/admin/admin_views/emptymodelmixin/add/')\n        self.assert_fieldline_visible(response)\n        self.assert_field_hidden(response, 'first')\n        self.assert_field_visible(response, 'second')\n\n    def assert_field_visible(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s\">' % field_name)\n\n    def assert_field_hidden(self, response, field_name):\n        self.assertContains(response, '<div class=\"field-box field-%s hidden\">' % field_name)\n\n    def assert_fieldline_visible(self, response):\n        self.assertContains(response, '<div class=\"form-row field-first field-second\">')\n\n    def assert_fieldline_hidden(self, response):\n        self.assertContains(response, '<div class=\"form-row hidden')\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass AdminViewOnSiteTests(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-restaurants.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_add_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test1\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": \"\",\n                     \"dependentchild_set-0-family_name\": \"Test2\"}\n        response = self.client.post('/test_admin/admin/admin_views/parentwithdependentchildren/add/',\n                                    post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertTrue('some_required_info' in response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_change_view_form_and_formsets_run_validation(self):\n        \"\"\"\n        Issue #20522\n        Verifying that if the parent form fails validation, the inlines also\n        run validation even if validation is contingent on parent form data\n        \"\"\"\n        pwdc = ParentWithDependentChildren.objects.create(some_required_info=6,\n                                                          family_name=\"Test1\")\n        # The form validation should fail because 'some_required_info' is\n        # not included on the parent form, and the family_name of the parent\n        # does not match that of the child\n        post_data = {\"family_name\": \"Test2\",\n                     \"dependentchild_set-TOTAL_FORMS\": \"1\",\n                     \"dependentchild_set-INITIAL_FORMS\": \"0\",\n                     \"dependentchild_set-MAX_NUM_FORMS\": \"1\",\n                     \"dependentchild_set-0-id\": \"\",\n                     \"dependentchild_set-0-parent\": str(pwdc.id),\n                     \"dependentchild_set-0-family_name\": \"Test1\"}\n        response = self.client.post('/test_admin/admin/admin_views/parentwithdependentchildren/%d/'\n                                    % pwdc.id, post_data)\n\n        # just verifying the parent form failed validation, as expected --\n        # this isn't the regression test\n        self.assertTrue('some_required_info' in response.context['adminform'].form.errors)\n\n        # actual regression test\n        for error_set in response.context['inline_admin_formset'].formset.errors:\n            self.assertEqual(['Children must share a family name with their parents in this contrived test case'],\n                             error_set.get('__all__'))\n\n    def test_check(self):\n        \"Ensure that the view_on_site value is either a boolean or a callable\"\n        try:\n            CityAdmin.view_on_site = True\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = False\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = lambda obj: obj.get_absolute_url()\n            self.assertEqual(CityAdmin.check(City), [])\n            CityAdmin.view_on_site = []\n            self.assertEqual(CityAdmin.check(City), [\n                Error(\n                    \"The value of 'view_on_site' must be a callable or a boolean value.\",\n                    hint=None,\n                    obj=CityAdmin,\n                    id='admin.E025',\n                ),\n            ])\n        finally:\n            # Restore the original values for the benefit of other tests.\n            CityAdmin.view_on_site = True\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get('/test_admin/admin/admin_views/restaurant/1/')\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertNotContains(response,\n                               '\"/test_admin/admin/r/%s/1/\"' % content_type_pk,\n                               )\n\n    def test_true(self):\n        \"Ensure that the default behavior is followed if view_on_site is True\"\n        response = self.client.get('/test_admin/admin/admin_views/city/1/')\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertContains(response,\n                            '\"/test_admin/admin/r/%s/1/\"' % content_type_pk,\n                            )\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get('/test_admin/admin/admin_views/worker/1/')\n        worker = Worker.objects.get(pk=1)\n        self.assertContains(response,\n                            '\"/worker/%s/%s/\"' % (worker.surname, worker.name),\n                            )\n\n    def test_missing_get_absolute_url(self):\n        \"Ensure None is returned if model doesn't have get_absolute_url\"\n        model_admin = ModelAdmin(Worker, None)\n        self.assertIsNone(model_admin.get_view_on_site_url(Worker()))\n\n\n@override_settings(PASSWORD_HASHERS=('django.contrib.auth.hashers.SHA1PasswordHasher',))\nclass InlineAdminViewOnSiteTest(TestCase):\n    urls = \"admin_views.urls\"\n    fixtures = ['admin-views-users.xml', 'admin-views-restaurants.xml']\n\n    def setUp(self):\n        self.client.login(username='super', password='secret')\n\n    def tearDown(self):\n        self.client.logout()\n\n    def test_false(self):\n        \"Ensure that the 'View on site' button is not displayed if view_on_site is False\"\n        response = self.client.get('/test_admin/admin/admin_views/state/1/')\n        content_type_pk = ContentType.objects.get_for_model(City).pk\n        self.assertNotContains(response,\n                               '/test_admin/admin/r/%s/1/' % content_type_pk,\n                               )\n\n    def test_true(self):\n        \"Ensure that the 'View on site' button is displayed if view_on_site is True\"\n        response = self.client.get('/test_admin/admin/admin_views/city/1/')\n        content_type_pk = ContentType.objects.get_for_model(Restaurant).pk\n        self.assertContains(response,\n                            '/test_admin/admin/r/%s/1/' % content_type_pk,\n                            )\n\n    def test_callable(self):\n        \"Ensure that the right link is displayed if view_on_site is a callable\"\n        response = self.client.get('/test_admin/admin/admin_views/restaurant/1/')\n        worker = Worker.objects.get(pk=1)\n        self.assertContains(response,\n                            '\"/worker_inline/%s/%s/\"' % (worker.surname, worker.name),\n                            )\n\n\nclass AdminGenericRelationTests(TestCase):\n    def test_generic_relation_fk_list_filter(self):\n        \"\"\"\n        Validates a model with a generic relation to a model with\n        a foreign key can specify the generic+fk relationship\n        path as a list_filter. See trac #21428.\n        \"\"\"\n        class GenericFKAdmin(ModelAdmin):\n            list_filter = ('tags__content_type',)\n\n        validator = ModelAdminValidator()\n        try:\n            validator.validate_list_filter(GenericFKAdmin, Plot)\n        except ImproperlyConfigured:\n            self.fail(\"Couldn't validate a GenericRelation -> FK path in ModelAdmin.list_filter\")\n"], "filenames": ["django/contrib/admin/exceptions.py", "django/contrib/admin/options.py", "django/contrib/admin/views/main.py", "docs/ref/exceptions.txt", "docs/releases/1.4.14.txt", "docs/releases/1.5.9.txt", "docs/releases/1.6.6.txt", "tests/admin_views/tests.py"], "buggy_code_start_loc": [6, 13, 17, 58, 49, 49, 50, 20], "buggy_code_end_loc": [6, 1402, 93, 58, 49, 49, 50, 2317], "fixing_code_start_loc": [7, 14, 17, 59, 50, 50, 51, 21], "fixing_code_end_loc": [12, 1424, 98, 60, 65, 65, 66, 2347], "type": "CWE-264", "message": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI.", "other": {"cve": {"id": "CVE-2014-0483", "sourceIdentifier": "security@debian.org", "published": "2014-08-26T14:55:05.347", "lastModified": "2018-10-30T16:27:34.687", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI."}, {"lang": "es", "value": "La interfaz administrativa (contrib.admin) en Django anterior a 1.4.14, 1.5.x anterior a 1.5.9, 1.6.x anterior a 1.6.6, y 1.7 anterior a release candidate 3 no comprueba si un campo representa una relaci\u00f3n entre modelos, lo que permite a usuarios remotos autenticados obtener informaci\u00f3n sensible a trav\u00e9s de un par\u00e1metro to_field en una acci\u00f3n popup en una p\u00e1gina de formularios de cambio de administraci\u00f3n, como fue demostrado por una URI /admin/auth/user/?pop=1&t=password."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:12.3:*:*:*:*:*:*:*", "matchCriteriaId": "DFBF430B-0832-44B0-AA0E-BA9E467F7668"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:*:*:*:*:*:*:*", "matchCriteriaId": "CCDB4B76-6541-4405-B74C-3EEAF84A04E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:alpha:*:*:*:*:*:*", "matchCriteriaId": "8A26B113-8D22-46E5-92C3-12134A68A21E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5:beta:*:*:*:*:*:*", "matchCriteriaId": "0D99FB28-08F3-45B4-8C04-90074FBC2457"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4E2A29CC-A92B-4EC1-8225-408A5048C033"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "73317E26-AA3A-4437-9261-CE76BC1A0749"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "E6046CEB-6CF5-406F-BF6B-4D8C24DDA6FD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.4:*:*:*:*:*:*:*", "matchCriteriaId": "A666B9E5-EA1B-4FA9-A685-61ECF26CB084"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.5:*:*:*:*:*:*:*", "matchCriteriaId": "8EB3FED4-C50A-4449-9A7B-552CFB02F860"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.6:*:*:*:*:*:*:*", "matchCriteriaId": "5B4F3D5C-5768-48F1-8A39-1B87EC061F37"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.7:*:*:*:*:*:*:*", "matchCriteriaId": "B10E08DF-6B92-452A-876B-DC8D376B0B41"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.5.8:*:*:*:*:*:*:*", "matchCriteriaId": "DFC18F77-77CB-45CB-869E-267DACD19601"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:-:*:*:*:*:*:*", "matchCriteriaId": "29477EEA-D5F8-45A9-9777-8A6BC7C668A5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:beta1:*:*:*:*:*:*", "matchCriteriaId": "A83451BD-1D67-4A7F-A62C-F597E51FCC21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:beta2:*:*:*:*:*:*", "matchCriteriaId": "0300DC0D-5DD0-42B5-9FE0-54DC557EA40D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:beta3:*:*:*:*:*:*", "matchCriteriaId": "85A2021F-B2AF-40DC-9FA2-5F90D2EB813E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6:beta4:*:*:*:*:*:*", "matchCriteriaId": "07B12D68-BB49-4931-9D9E-D8134FC0B350"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "0CC369A0-0092-450D-91E9-13C7AF7EBC16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "4B6B7974-ABEF-4E0C-8503-6E9C22D28C78"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "55460F1D-661B-465C-8A22-E4E6DA2834B3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "9FD4FB46-3A98-4B9B-A241-C39E2C2A0FEC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "FF87FDAB-51A2-41C4-A4C4-5180B0230C3F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.4.13", "matchCriteriaId": "2EA690BD-2FBA-425B-AC6F-046081E21183"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4:*:*:*:*:*:*:*", "matchCriteriaId": "9A79FF7F-8F92-4FEB-96CC-6B15D0CE920D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "13EF02D4-406C-4146-9B8F-FAC906E7B6E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC462CE5-1BE0-41E0-A28D-291350F021AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "4166ADA9-D5B4-47D6-BD93-C98841108275"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "080D43D0-C0FF-4F89-910C-D466943816C6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "E04AE832-9059-42AB-AD39-D01E7A633615"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "693EEF6B-810B-4684-9AB5-1BDC95DFA4CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "C9EF4268-0DB7-4150-B8E7-53C6D7F02E04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "C571F85F-9F49-48B6-9AD9-16CD81655F73"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "41F0F1FA-E3EC-421C-9F72-11FC857F6F72"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "D4031E5F-B5D6-4E7D-96FC-A4ACF9C306A2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "7B1577DD-B40E-404B-8E55-3A93AB8A8F62"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:beta1:*:*:*:*:*:*", "matchCriteriaId": "BB1EF6D7-0AF4-4146-BA37-961F7048C1C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:beta2:*:*:*:*:*:*", "matchCriteriaId": "5E4CCE84-425C-4B9C-98B7-D858B64B3418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:beta3:*:*:*:*:*:*", "matchCriteriaId": "B6B77FCE-F26A-41CB-8D72-E9EF0E352288"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:beta4:*:*:*:*:*:*", "matchCriteriaId": "985884FE-AEB9-4D93-806E-ADFCC576FF99"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:rc1:*:*:*:*:*:*", "matchCriteriaId": "D81EE1B4-9CB4-4776-A7CE-44B023C67CA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:djangoproject:django:1.7:rc2:*:*:*:*:*:*", "matchCriteriaId": "81798B3D-A000-40D5-A369-C9A0BEF79A5E"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2014-09/msg00023.html", "source": "security@debian.org"}, {"url": "http://secunia.com/advisories/61276", "source": "security@debian.org"}, {"url": "http://secunia.com/advisories/61281", "source": "security@debian.org"}, {"url": "http://www.debian.org/security/2014/dsa-3010", "source": "security@debian.org"}, {"url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6", "source": "security@debian.org", "tags": ["Exploit", "Patch"]}, {"url": "https://www.djangoproject.com/weblog/2014/aug/20/security/", "source": "security@debian.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6"}}