{"buggy_code": ["package ffcss\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/hbollon/go-edlib\"\n\t\"golang.org/x/text/unicode/norm\"\n)\n\n// Catalog represents a collection of themes\ntype Catalog map[string]Theme\n\n// Lookup looks up a theme by its name in the theme store.\n// It also returns an error starting with \"did you mean:\" when\n// a theme name is not found but themes with similar names exist.\nfunc (store Catalog) Lookup(query string) (Theme, error) {\n\toriginalQuery := query\n\tquery = lookupPreprocess(query)\n\tLogDebug(\"using query %q\", query)\n\tprocessedThemeNames := make([]string, 0, len(store))\n\tfor _, theme := range store {\n\t\tLogDebug(\"\\tlooking up against %q (%q)\", lookupPreprocess(theme.Name()), theme.Name())\n\t\tif lookupPreprocess(theme.Name()) == query {\n\t\t\treturn theme, nil\n\t\t}\n\t\tprocessedThemeNames = append(processedThemeNames, lookupPreprocess(theme.Name()))\n\t}\n\t// Use fuzzy search for did-you-mean errors\n\tsuggestion, _ := edlib.FuzzySearchThreshold(query, processedThemeNames, 0.75, edlib.Levenshtein)\n\n\tif suggestion != \"\" {\n\t\treturn Theme{}, fmt.Errorf(\"theme %q not found. did you mean [blue][bold]%s[reset]?\", originalQuery, suggestion)\n\t}\n\treturn Theme{}, fmt.Errorf(\"theme %q not found\", originalQuery)\n}\n\n// lookupPreprocess applies transformations to s so that it can be compared\n// to search for something.\n// For example, it is used by (ThemeStore).Lookup\nfunc lookupPreprocess(s string) string {\n\treturn strings.ToLower(norm.NFKD.String(regexp.MustCompile(`[-_ .]`).ReplaceAllString(s, \"\")))\n}\n\n// LoadCatalog loads a directory of theme manifests.\n// Keys are theme names (files' basenames with the .yaml removed).\nfunc LoadCatalog(storeDirectory string) (themes Catalog, err error) {\n\tthemeNamePattern := regexp.MustCompile(`^(.+)\\.ya?ml$`)\n\tthemes = make(Catalog)\n\tmanifests, err := os.ReadDir(storeDirectory)\n\tif err != nil {\n\t\treturn\n\t}\n\tLogDebug(\"loading potential themes %v into catalog\", func() []string {\n\t\tdirNames := make([]string, 0, len(manifests))\n\t\tfor _, dir := range manifests {\n\t\t\tdirNames = append(dirNames, dir.Name())\n\t\t}\n\t\treturn dirNames\n\t}())\n\tfor _, manifest := range manifests {\n\t\tif !themeNamePattern.MatchString(manifest.Name()) {\n\t\t\tcontinue\n\t\t}\n\t\tthemeName := themeNamePattern.FindStringSubmatch(manifest.Name())[1]\n\t\ttheme, err := LoadManifest(filepath.Join(storeDirectory, manifest.Name()))\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"while loading theme %q: %w\", themeName, err)\n\t\t}\n\t\tLogDebug(\"\\tadding theme from manifest %q\", manifest.Name())\n\t\tthemes[themeName] = theme\n\t}\n\treturn\n}\n"], "fixing_code": ["package ffcss\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strings\"\n\n\t\"github.com/hbollon/go-edlib\"\n\t\"golang.org/x/text/unicode/norm\"\n)\n\n// Catalog represents a collection of themes\ntype Catalog map[string]Theme\n\n// Lookup looks up a theme by its name in the theme store.\n// It also returns an error starting with \"did you mean:\" when\n// a theme name is not found but themes with similar names exist.\nfunc (store Catalog) Lookup(query string) (Theme, error) {\n\toriginalQuery := query\n\tquery = lookupPreprocess(query)\n\tLogDebug(\"using query %q\", query)\n\tprocessedThemeNames := make([]string, 0, len(store))\n\tfor _, theme := range store {\n\t\tLogDebug(\"\\tlooking up against %q (%q)\", lookupPreprocess(theme.Name()), theme.Name())\n\t\tif lookupPreprocess(theme.Name()) == query {\n\t\t\treturn theme, nil\n\t\t}\n\t\tprocessedThemeNames = append(processedThemeNames, lookupPreprocess(theme.Name()))\n\t}\n\t// Use fuzzy search for did-you-mean errors\n\tsuggestion, _ := edlib.FuzzySearchThreshold(query, processedThemeNames, 0.75, edlib.Levenshtein)\n\n\tif suggestion != \"\" {\n\t\treturn Theme{}, fmt.Errorf(\"theme %q not found. did you mean [blue][bold]%s[reset]?\", originalQuery, suggestion)\n\t}\n\treturn Theme{}, fmt.Errorf(\"theme %q not found\", originalQuery)\n}\n\n// lookupPreprocess applies transformations to s so that it can be compared\n// to search for something.\n// For example, it is used by (ThemeStore).Lookup\nfunc lookupPreprocess(s string) string {\n\treturn strings.ToLower(regexp.MustCompile(`[-_ .]`).ReplaceAllString(norm.NFKD.String(s), \"\"))\n}\n\n// LoadCatalog loads a directory of theme manifests.\n// Keys are theme names (files' basenames with the .yaml removed).\nfunc LoadCatalog(storeDirectory string) (themes Catalog, err error) {\n\tthemeNamePattern := regexp.MustCompile(`^(.+)\\.ya?ml$`)\n\tthemes = make(Catalog)\n\tmanifests, err := os.ReadDir(storeDirectory)\n\tif err != nil {\n\t\treturn\n\t}\n\tLogDebug(\"loading potential themes %v into catalog\", func() []string {\n\t\tdirNames := make([]string, 0, len(manifests))\n\t\tfor _, dir := range manifests {\n\t\t\tdirNames = append(dirNames, dir.Name())\n\t\t}\n\t\treturn dirNames\n\t}())\n\tfor _, manifest := range manifests {\n\t\tif !themeNamePattern.MatchString(manifest.Name()) {\n\t\t\tcontinue\n\t\t}\n\t\tthemeName := themeNamePattern.FindStringSubmatch(manifest.Name())[1]\n\t\ttheme, err := LoadManifest(filepath.Join(storeDirectory, manifest.Name()))\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"while loading theme %q: %w\", themeName, err)\n\t\t}\n\t\tLogDebug(\"\\tadding theme from manifest %q\", manifest.Name())\n\t\tthemes[themeName] = theme\n\t}\n\treturn\n}\n"], "filenames": ["catalog.go"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [46], "fixing_code_start_loc": [45], "fixing_code_end_loc": [46], "type": "CWE-74", "message": "ffcss is a CLI interface to apply and configure Firefox CSS themes. Prior to 0.2.0, the function `lookupPreprocess()` is meant to apply some transformations to a string by disabling characters in the regex `[-_ .]`. However, due to the use of late Unicode normalization of type NFKD, it is possible to bypass that validation and re-introduce all the characters in the regex `[-_ .]`. The `lookupPreprocess()` can be easily bypassed with equivalent Unicode characters like U+FE4D (\ufe4d), which would result in the omitted U+005F (_), for instance. The `lookupPreprocess()` function is only ever used to search for themes loosely (case insensitively, while ignoring dashes, underscores and dots), so the actual security impact is classified as low. This vulnerability is fixed in 0.2.0. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-52081", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-28T16:16:02.090", "lastModified": "2024-02-29T01:42:06.407", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "ffcss is a CLI interface to apply and configure Firefox CSS themes. Prior to 0.2.0, the function `lookupPreprocess()` is meant to apply some transformations to a string by disabling characters in the regex `[-_ .]`. However, due to the use of late Unicode normalization of type NFKD, it is possible to bypass that validation and re-introduce all the characters in the regex `[-_ .]`. The `lookupPreprocess()` can be easily bypassed with equivalent Unicode characters like U+FE4D (\ufe4d), which would result in the omitted U+005F (_), for instance. The `lookupPreprocess()` function is only ever used to search for themes loosely (case insensitively, while ignoring dashes, underscores and dots), so the actual security impact is classified as low. This vulnerability is fixed in 0.2.0. There are no known workarounds."}, {"lang": "es", "value": "ffcss es una interfaz CLI para aplicar y configurar temas CSS de Firefox. Antes de 0.2.0, la funci\u00f3n `lookupPreprocess()` estaba destinada a aplicar algunas transformaciones a una cadena deshabilitando caracteres en la expresi\u00f3n regular `[-_ .]`. Sin embargo, debido al uso de la normalizaci\u00f3n Unicode tard\u00eda del tipo NFKD, es posible omitir esa validaci\u00f3n y volver a introducir todos los caracteres en la expresi\u00f3n regular `[-_ .]`. El `lookupPreprocess()` se puede omitir f\u00e1cilmente con caracteres Unicode equivalentes como U+FE4D (?), lo que dar\u00eda como resultado U+005F (_) omitido, por ejemplo. La funci\u00f3n `lookupPreprocess()` s\u00f3lo se utiliza para buscar temas de forma flexible (sin distinguir entre may\u00fasculas y min\u00fasculas, ignorando guiones, guiones bajos y puntos), por lo que el impacto real en la seguridad se clasifica como bajo. Esta vulnerabilidad se solucion\u00f3 en 0.2.0. No se conocen workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-176"}, {"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ewen-lbh:firefox_css:*:*:*:*:*:go:*:*", "versionEndExcluding": "0.2.0", "matchCriteriaId": "BD1EE5E4-A11D-4E6C-83E6-BB649FB7643D"}]}]}], "references": [{"url": "https://github.com/ewen-lbh/ffcss/commit/f9c491874b858a32fcae15045f169fd7d02f90dc", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ewen-lbh/ffcss/security/advisories/GHSA-wpmx-564x-h2mh", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ewen-lbh/ffcss/commit/f9c491874b858a32fcae15045f169fd7d02f90dc"}}