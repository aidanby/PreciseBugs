{"buggy_code": ["# PYTHON_ARGCOMPLETE_OK\n\"\"\"\nIPython: tools for interactive and parallel computing in Python.\n\nhttps://ipython.org\n\"\"\"\n#-----------------------------------------------------------------------------\n#  Copyright (c) 2008-2011, IPython Development Team.\n#  Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\n#  Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\n#  Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\n#\n#  Distributed under the terms of the Modified BSD License.\n#\n#  The full license is in the file COPYING.txt, distributed with this software.\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Imports\n#-----------------------------------------------------------------------------\n\nimport sys\n\n#-----------------------------------------------------------------------------\n# Setup everything\n#-----------------------------------------------------------------------------\n\n# Don't forget to also update setup.py when this changes!\nif sys.version_info < (3, 8):\n    raise ImportError(\n        \"\"\"\nIPython 8+ supports Python 3.8 and above, following NEP 29.\nWhen using Python 2.7, please install IPython 5.x LTS Long Term Support version.\nPython 3.3 and 3.4 were supported up to IPython 6.x.\nPython 3.5 was supported with IPython 7.0 to 7.9.\nPython 3.6 was supported with IPython up to 7.16.\nPython 3.7 was still supported with the 7.x branch.\n\nSee IPython `README.rst` file for more information:\n\n    https://github.com/ipython/ipython/blob/main/README.rst\n\n\"\"\"\n    )\n\n#-----------------------------------------------------------------------------\n# Setup the top level names\n#-----------------------------------------------------------------------------\n\nfrom .core.getipython import get_ipython\nfrom .core import release\nfrom .core.application import Application\nfrom .terminal.embed import embed\n\nfrom .core.interactiveshell import InteractiveShell\nfrom .utils.sysinfo import sys_info\nfrom .utils.frame import extract_module_locals\n\n# Release data\n__author__ = '%s <%s>' % (release.author, release.author_email)\n__license__  = release.license\n__version__  = release.version\nversion_info = release.version_info\n# list of CVEs that should have been patched in this release.\n# this is informational and should not be relied upon.\n__patched_cves__ = {\"CVE-2022-21699\"}\n\n\ndef embed_kernel(module=None, local_ns=None, **kwargs):\n    \"\"\"Embed and start an IPython kernel in a given scope.\n\n    If you don't want the kernel to initialize the namespace\n    from the scope of the surrounding function,\n    and/or you want to load full IPython configuration,\n    you probably want `IPython.start_kernel()` instead.\n\n    Parameters\n    ----------\n    module : types.ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    **kwargs : various, optional\n        Further keyword args are relayed to the IPKernelApp constructor,\n        allowing configuration of the Kernel.  Will only have an effect\n        on the first embed_kernel call for a given process.\n    \"\"\"\n    \n    (caller_module, caller_locals) = extract_module_locals(1)\n    if module is None:\n        module = caller_module\n    if local_ns is None:\n        local_ns = caller_locals\n    \n    # Only import .zmq when we really need it\n    from ipykernel.embed import embed_kernel as real_embed_kernel\n    real_embed_kernel(module=module, local_ns=local_ns, **kwargs)\n\ndef start_ipython(argv=None, **kwargs):\n    \"\"\"Launch a normal IPython instance (as opposed to embedded)\n\n    `IPython.embed()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_ipython()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed()`.\n\n    This is a public API method, and will survive implementation changes.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`.\n    \"\"\"\n    from IPython.terminal.ipapp import launch_new_instance\n    return launch_new_instance(argv=argv, **kwargs)\n\ndef start_kernel(argv=None, **kwargs):\n    \"\"\"Launch a normal IPython kernel instance (as opposed to embedded)\n\n    `IPython.embed_kernel()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_kernel()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed()`.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`.\n    \"\"\"\n    import warnings\n\n    warnings.warn(\n        \"start_kernel is deprecated since IPython 8.0, use from `ipykernel.kernelapp.launch_new_instance`\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    from ipykernel.kernelapp import launch_new_instance\n    return launch_new_instance(argv=argv, **kwargs)\n", "# encoding: utf-8\n\"\"\"\nUtilities for working with terminals.\n\nAuthors:\n\n* Brian E. Granger\n* Fernando Perez\n* Alexander Belchenko (e-mail: bialix AT ukr.net)\n\"\"\"\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nimport sys\nimport warnings\nfrom shutil import get_terminal_size as _get_terminal_size\n\n# This variable is part of the expected API of the module:\nignore_termtitle = True\n\n\n\nif os.name == 'posix':\n    def _term_clear():\n        os.system('clear')\nelif sys.platform == 'win32':\n    def _term_clear():\n        os.system('cls')\nelse:\n    def _term_clear():\n        pass\n\n\n\ndef toggle_set_term_title(val):\n    \"\"\"Control whether set_term_title is active or not.\n\n    set_term_title() allows writing to the console titlebar.  In embedded\n    widgets this can cause problems, so this call can be used to toggle it on\n    or off as needed.\n\n    The default state of the module is for the function to be disabled.\n\n    Parameters\n    ----------\n    val : bool\n        If True, set_term_title() actually writes to the terminal (using the\n        appropriate platform-specific module).  If False, it is a no-op.\n    \"\"\"\n    global ignore_termtitle\n    ignore_termtitle = not(val)\n\n\ndef _set_term_title(*args,**kw):\n    \"\"\"Dummy no-op.\"\"\"\n    pass\n\n\ndef _restore_term_title():\n    pass\n\n\n_xterm_term_title_saved = False\n\n\ndef _set_term_title_xterm(title):\n    \"\"\" Change virtual terminal title in xterm-workalikes \"\"\"\n    global _xterm_term_title_saved\n    # Only save the title the first time we set, otherwise restore will only\n    # go back one title (probably undoing a %cd title change).\n    if not _xterm_term_title_saved:\n        # save the current title to the xterm \"stack\"\n        sys.stdout.write(\"\\033[22;0t\")\n        _xterm_term_title_saved = True\n    sys.stdout.write('\\033]0;%s\\007' % title)\n\n\ndef _restore_term_title_xterm():\n    # Make sure the restore has at least one accompanying set.\n    global _xterm_term_title_saved\n    assert _xterm_term_title_saved\n    sys.stdout.write('\\033[23;0t') \n    _xterm_term_title_saved = False\n\n\nif os.name == 'posix':\n    TERM = os.environ.get('TERM','')\n    if TERM.startswith('xterm'):\n        _set_term_title = _set_term_title_xterm\n        _restore_term_title = _restore_term_title_xterm\nelif sys.platform == 'win32':\n    try:\n        import ctypes\n\n        SetConsoleTitleW = ctypes.windll.kernel32.SetConsoleTitleW\n        SetConsoleTitleW.argtypes = [ctypes.c_wchar_p]\n    \n        def _set_term_title(title):\n            \"\"\"Set terminal title using ctypes to access the Win32 APIs.\"\"\"\n            SetConsoleTitleW(title)\n    except ImportError:\n        def _set_term_title(title):\n            \"\"\"Set terminal title using the 'title' command.\"\"\"\n            global ignore_termtitle\n\n            try:\n                # Cannot be on network share when issuing system commands\n                curr = os.getcwd()\n                os.chdir(\"C:\")\n                ret = os.system(\"title \" + title)\n            finally:\n                os.chdir(curr)\n            if ret:\n                # non-zero return code signals error, don't try again\n                ignore_termtitle = True\n\n\ndef set_term_title(title):\n    \"\"\"Set terminal title using the necessary platform-dependent calls.\"\"\"\n    if ignore_termtitle:\n        return\n    _set_term_title(title)\n\n\ndef restore_term_title():\n    \"\"\"Restore, if possible, terminal title to the original state\"\"\"\n    if ignore_termtitle:\n        return\n    _restore_term_title()\n\n\ndef freeze_term_title():\n    warnings.warn(\"This function is deprecated, use toggle_set_term_title()\")\n    global ignore_termtitle\n    ignore_termtitle = True\n\n\ndef get_terminal_size(defaultx=80, defaulty=25):\n    return _get_terminal_size((defaultx, defaulty))\n", "============\n 8.x Series\n============\n\n.. _version 8.9.0:\n\nIPython 8.9.0\n-------------\n\nSecond release of IPython in 2023, last Friday of the month, we are back on\ntrack. This is a small release with a few bug-fixes, and improvements, mostly\nwith respect to terminal shortcuts.\n\n\nThe biggest improvement for 8.9 is a drastic amelioration of the\nauto-suggestions sponsored by D.E. Shaw and implemented by the more and more\nactive contributor `@krassowski <https://github.com/krassowski>`.\n\n- ``right`` accepts a single character from suggestion\n- ``ctrl+right`` accepts a semantic token (macos default shortcuts take\n  precedence and need to be disabled to make this work)\n- ``backspace`` deletes a character and resumes hinting autosuggestions\n- ``ctrl-left`` accepts suggestion and moves cursor left one character.\n- ``backspace`` deletes a character and resumes hinting autosuggestions\n- ``down`` moves to suggestion to later in history when no lines are present below the cursors.\n- ``up`` moves to suggestion from earlier in history when no lines are present above the cursor.\n\nThis is best described by the Gif posted by `@krassowski\n<https://github.com/krassowski>`, and in the PR itself :ghpull:`13888`.\n\n.. image:: ../_images/autosuggest.gif\n\nPlease report any feedback in order for us to improve the user experience.\nIn particular we are also working on making the shortcuts configurable.\n\nIf you are interested in better terminal shortcuts, I also invite you to\nparticipate in issue `13879\n<https://github.com/ipython/ipython/issues/13879>`__.\n\n\nAs we follow `NEP29\n<https://numpy.org/neps/nep-0029-deprecation_policy.html>`__, next version of\nIPython will officially stop supporting numpy 1.20, and will stop supporting\nPython 3.8 after April release.\n\nAs usual you can find the full list of PRs on GitHub under `the 8.9 milestone\n<https://github.com/ipython/ipython/milestone/111?closed=1>`__.\n\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.8.0:\n\nIPython 8.8.0\n-------------\n\nFirst release of IPython in 2023 as there was no release at the end of\nDecember.\n\nThis is an unusually big release (relatively speaking) with more than 15 Pull\nRequests merged.\n\nOf particular interest are:\n\n - :ghpull:`13852` that replaces the greedy completer and improves\n   completion, in particular for dictionary keys.\n - :ghpull:`13858` that adds ``py.typed`` to ``setup.cfg`` to make sure it is\n   bundled in wheels.\n - :ghpull:`13869` that implements tab completions for IPython options in the\n   shell when using `argcomplete <https://github.com/kislyuk/argcomplete>`. I\n   believe this also needs a recent version of Traitlets.\n - :ghpull:`13865` makes the ``inspector`` class of `InteractiveShell`\n   configurable.\n - :ghpull:`13880` that removes minor-version entrypoints as the minor version\n   entry points that would be included in the wheel would be the one of the\n   Python version that was used to build the ``whl`` file.\n\nIn no particular order, the rest of the changes update the test suite to be\ncompatible with Pygments 2.14, various docfixes, testing on more recent python\nversions and various updates.\n\nAs usual you can find the full list of PRs on GitHub under `the 8.8 milestone\n<https://github.com/ipython/ipython/milestone/110>`__.\n\nMany thanks to @krassowski for the many PRs and @jasongrout for reviewing and\nmerging contributions.\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.7.0:\n\nIPython 8.7.0\n-------------\n\n\nSmall release of IPython with a couple of bug fixes and new features for this\nmonth. Next month is the end of year, it is unclear if there will be a release\nclose to the new year's eve, or if the next release will be at the end of January.\n\nHere are a few of the relevant fixes,\nas usual you can find the full list of PRs on GitHub under `the 8.7 milestone\n<https://github.com/ipython/ipython/pulls?q=milestone%3A8.7>`__.\n\n\n   - :ghpull:`13834` bump the minimum prompt toolkit to 3.0.11.\n   - IPython shipped with the ``py.typed`` marker now, and we are progressively\n     adding more types. :ghpull:`13831`\n   - :ghpull:`13817` add configuration of code blacks formatting.\n\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.6.0:\n\nIPython 8.6.0\n-------------\n\nBack to a more regular release schedule (at least I try), as Friday is\nalready over by more than 24h hours. This is a slightly bigger release with a\nfew new features that contain no less than 25 PRs.\n\nWe'll notably found a couple of non negligible changes:\n\nThe ``install_ext`` and related functions have been removed after being\ndeprecated for years. You can use pip to install extensions. ``pip`` did not\nexist when ``install_ext`` was introduced. You can still load local extensions\nwithout installing them. Just set your ``sys.path`` for example. :ghpull:`13744`\n\nIPython now has extra entry points that use the major *and minor* version of\npython. For some of you this means that you can do a quick ``ipython3.10`` to\nlaunch IPython from the Python 3.10 interpreter, while still using Python 3.11\nas your main Python. :ghpull:`13743`\n\nThe completer matcher API has been improved. See :ghpull:`13745`. This should\nimprove the type inference and improve dict keys completions in many use case.\nThanks ``@krassowski`` for all the work, and the D.E. Shaw group for sponsoring\nit.\n\nThe color of error nodes in tracebacks can now be customized. See\n:ghpull:`13756`. This is a private attribute until someone finds the time to\nproperly add a configuration option. Note that with Python 3.11 that also shows\nthe relevant nodes in traceback, it would be good to leverage this information\n(plus the \"did you mean\" info added on attribute errors). But that's likely work\nI won't have time to do before long, so contributions welcome.\n\nAs we follow NEP 29, we removed support for numpy 1.19 :ghpull:`13760`.\n\n\nThe ``open()`` function present in the user namespace by default will now refuse\nto open the file descriptors 0,1,2 (stdin, out, err), to avoid crashing IPython.\nThis mostly occurs in teaching context when incorrect values get passed around.\n\n\nThe ``?``, ``??``, and corresponding ``pinfo``, ``pinfo2`` magics can now find\nobjects inside arrays. That is to say, the following now works::\n\n\n   >>> def my_func(*arg, **kwargs):pass\n   >>> container = [my_func]\n   >>> container[0]?\n\n\nIf ``container`` define a custom ``getitem``, this __will__ trigger the custom\nmethod. So don't put side effects in your ``getitems``. Thanks to the D.E. Shaw\ngroup for the request and sponsoring the work.\n\n\nAs usual you can find the full list of PRs on GitHub under `the 8.6 milestone\n<https://github.com/ipython/ipython/pulls?q=milestone%3A8.6>`__.\n\nThanks to all hacktoberfest contributors, please contribute to\n`closember.org <https://closember.org/>`__.\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.5.0:\n\nIPython 8.5.0\n-------------\n\nFirst release since a couple of month due to various reasons and timing preventing\nme for sticking to the usual monthly release the last Friday of each month. This\nis of non negligible size as it has more than two dozen PRs with various fixes\nan bug fixes.\n\nMany thanks to everybody who contributed PRs for your patience in review and\nmerges.\n\nHere is a non-exhaustive list of changes that have been implemented for IPython\n8.5.0. As usual you can find the full list of issues and PRs tagged with `the\n8.5 milestone\n<https://github.com/ipython/ipython/pulls?q=is%3Aclosed+milestone%3A8.5+>`__.\n\n - Added a shortcut for accepting auto suggestion. The End key shortcut for\n   accepting auto-suggestion This binding works in Vi mode too, provided\n   ``TerminalInteractiveShell.emacs_bindings_in_vi_insert_mode`` is set to be\n   ``True`` :ghpull:`13566`.\n\n - No popup in window for latex generation when generating latex (e.g. via\n   `_latex_repr_`) no popup window is shows under Windows. :ghpull:`13679`\n\n - Fixed error raised when attempting to tab-complete an input string with\n   consecutive periods or forward slashes (such as \"file:///var/log/...\").\n   :ghpull:`13675`\n\n - Relative filenames in Latex rendering :\n   The `latex_to_png_dvipng` command internally generates input and output file\n   arguments to `latex` and `dvipis`. These arguments are now generated as\n   relative files to the current working directory instead of absolute file\n   paths. This solves a problem where the current working directory contains\n   characters that are not handled properly by `latex` and `dvips`. There are\n   no changes to the user API. :ghpull:`13680`\n\n - Stripping decorators bug: Fixed bug which meant that ipython code blocks in\n   restructured text documents executed with the ipython-sphinx extension\n   skipped any lines of code containing python decorators. :ghpull:`13612`\n\n - Allow some modules with frozen dataclasses to be reloaded. :ghpull:`13732`\n - Fix paste magic on wayland. :ghpull:`13671`\n - show maxlen in deque's repr. :ghpull:`13648`\n\nRestore line numbers for Input\n------------------------------\n\nLine number information in tracebacks from input are restored.\nLine numbers from input were removed during the transition to v8 enhanced traceback reporting.\n\nSo, instead of::\n\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    Input In [3], in <cell line: 1>()\n    ----> 1 myfunc(2)\n\n    Input In [2], in myfunc(z)\n          1 def myfunc(z):\n    ----> 2     foo.boo(z-1)\n\n    File ~/code/python/ipython/foo.py:3, in boo(x)\n          2 def boo(x):\n    ----> 3     return 1/(1-x)\n\n    ZeroDivisionError: division by zero\n\nThe error traceback now looks like::\n\n      ---------------------------------------------------------------------------\n      ZeroDivisionError                         Traceback (most recent call last)\n      Cell In [3], line 1\n      ----> 1 myfunc(2)\n\n      Cell In [2], line 2, in myfunc(z)\n            1 def myfunc(z):\n      ----> 2     foo.boo(z-1)\n\n      File ~/code/python/ipython/foo.py:3, in boo(x)\n            2 def boo(x):\n      ----> 3     return 1/(1-x)\n\n      ZeroDivisionError: division by zero\n\nor, with xmode=Plain::\n\n    Traceback (most recent call last):\n      Cell In [12], line 1\n        myfunc(2)\n      Cell In [6], line 2 in myfunc\n        foo.boo(z-1)\n      File ~/code/python/ipython/foo.py:3 in boo\n        return 1/(1-x)\n    ZeroDivisionError: division by zero\n\n:ghpull:`13560`\n\nNew setting to silence warning if working inside a virtual environment\n----------------------------------------------------------------------\n\nPreviously, when starting IPython in a virtual environment without IPython installed (so IPython from the global environment is used), the following warning was printed:\n\n    Attempting to work in a virtualenv. If you encounter problems, please install IPython inside the virtualenv.\n\nThis warning can be permanently silenced by setting ``c.InteractiveShell.warn_venv`` to ``False`` (the default is ``True``).\n\n:ghpull:`13706`\n\n-------\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.4.0:\n\nIPython 8.4.0\n-------------\n\nAs for 7.34, this version contains a single fix:  fix uncaught BdbQuit exceptions on ipdb\nexit :ghpull:`13668`, and a single typo fix in documentation: :ghpull:`13682`\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.3.0:\n\nIPython 8.3.0\n-------------\n\n - :ghpull:`13625`, using ``?``, ``??``, ``*?`` will not call\n   ``set_next_input`` as most frontend allow proper multiline editing and it was\n   causing issues for many users of multi-cell frontends. This has been backported to 7.33\n\n\n - :ghpull:`13600`, ``pre_run_*``-hooks will now have a ``cell_id`` attribute on\n   the info object when frontend provides it. This has been backported to 7.33\n\n - :ghpull:`13624`, fixed :kbd:`End` key being broken after accepting an\n   auto-suggestion.\n\n - :ghpull:`13657` fixed an issue where history from different sessions would be mixed.\n\n.. _version 8.2.0:\n\nIPython 8.2.0\n-------------\n\nIPython 8.2 mostly bring bugfixes to IPython.\n\n - Auto-suggestion can now be elected with the ``end`` key. :ghpull:`13566`\n - Some traceback issues with ``assert etb is not None`` have been fixed. :ghpull:`13588`\n - History is now pulled from the sqitel database and not from in-memory.\n   In particular when using the ``%paste`` magic, the content of the pasted text will\n   be part of the history and not the verbatim text ``%paste`` anymore. :ghpull:`13592`\n - Fix ``Ctrl-\\\\`` exit cleanup :ghpull:`13603`\n - Fixes to ``ultratb`` ipdb support when used outside of IPython. :ghpull:`13498`\n\n\nI am still trying to fix and investigate :ghissue:`13598`, which seems to be\nrandom, and would appreciate help if you find a reproducible minimal case. I've\ntried to make various changes to the codebase to mitigate it, but a proper fix\nwill be difficult without understanding the cause.\n\n\nAll the issues on pull-requests for this release can be found in the `8.2\nmilestone. <https://github.com/ipython/ipython/milestone/100>`__ . And some\ndocumentation only PR can be found as part of the `7.33 milestone\n<https://github.com/ipython/ipython/milestone/101>`__ (currently not released).\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.1.1:\n\nIPython 8.1.1\n-------------\n\nFix an issue with virtualenv and Python 3.8 introduced in 8.1\n\nRevert :ghpull:`13537` (fix an issue with symlinks in virtualenv) that raises an\nerror in Python 3.8, and fixed in a different way in :ghpull:`13559`.\n\n.. _version 8.1:\n\nIPython 8.1.0\n-------------\n\nIPython 8.1 is the first minor release after 8.0 and fixes a number of bugs and\nupdates a few behaviors that were problematic with the 8.0 as with many new major\nrelease.\n\nNote that beyond the changes listed here, IPython 8.1.0 also contains all the\nfeatures listed in :ref:`version 7.32`.\n\n - Misc and multiple fixes around quotation auto-closing. It is now disabled by\n   default. Run with ``TerminalInteractiveShell.auto_match=True`` to re-enabled\n - Require pygments>=2.4.0 :ghpull:`13459`, this was implicit in the code, but\n   is now explicit in ``setup.cfg``/``setup.py``\n - Docs improvement of ``core.magic_arguments`` examples. :ghpull:`13433`\n - Multi-line edit executes too early with await. :ghpull:`13424`\n\n - ``black``  is back as an optional dependency, and autoformatting disabled by\n   default until some fixes are implemented (black improperly reformat magics).\n   :ghpull:`13471` Additionally the ability to use ``yapf`` as a code\n   reformatter has been added :ghpull:`13528` . You can use\n   ``TerminalInteractiveShell.autoformatter=\"black\"``,\n   ``TerminalInteractiveShell.autoformatter=\"yapf\"`` to re-enable auto formating\n   with black, or switch to yapf.\n\n - Fix and issue where ``display`` was not defined.\n\n - Auto suggestions are now configurable. Currently only\n   ``AutoSuggestFromHistory`` (default) and ``None``. new provider contribution\n   welcomed. :ghpull:`13475`\n\n - multiple packaging/testing improvement to simplify downstream packaging\n   (xfail with reasons, try to not access network...).\n\n - Update deprecation. ``InteractiveShell.magic`` internal method has been\n   deprecated for many years but did not emit a warning until now.\n\n - internal ``appended_to_syspath`` context manager has been deprecated.\n\n - fix an issue with symlinks in virtualenv :ghpull:`13537` (Reverted in 8.1.1)\n\n - Fix an issue with vim mode, where cursor would not be reset on exit :ghpull:`13472`\n\n - ipython directive now remove only known pseudo-decorators :ghpull:`13532`\n\n - ``IPython/lib/security`` which used to be used for jupyter notebook has been\n   removed.\n\n - Fix an issue where ``async with`` would execute on new lines. :ghpull:`13436`\n\n\nWe want to remind users that IPython is part of the Jupyter organisations, and\nthus governed by a Code of Conduct. Some of the behavior we have seen on GitHub is not acceptable.\nAbuse and non-respectful comments on discussion will not be tolerated.\n\nMany thanks to all the contributors to this release, many of the above fixed issues and\nnew features were done by first time contributors, showing there is still\nplenty of easy contribution possible in IPython\n. You can find all individual contributions\nto this milestone `on github <https://github.com/ipython/ipython/milestone/91>`__.\n\nThanks as well to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries. In particular the Lazy autoloading of\nmagics that you will find described in the 7.32 release notes.\n\n\n.. _version 8.0.1:\n\nIPython 8.0.1 (CVE-2022-21699)\n------------------------------\n\nIPython 8.0.1, 7.31.1 and 5.11 are security releases that change some default\nvalues in order to prevent potential Execution with Unnecessary Privileges.\n\nAlmost all version of IPython looks for configuration and profiles in current\nworking directory. Since IPython was developed before pip and environments\nexisted it was used a convenient way to load code/packages in a project\ndependant way.\n\nIn 2022, it is not necessary anymore, and can lead to confusing behavior where\nfor example cloning a repository and starting IPython or loading a notebook from\nany Jupyter-Compatible interface that has ipython set as a kernel can lead to\ncode execution.\n\n\nI did not find any standard way for packaged to advertise CVEs they fix, I'm\nthus trying to add a ``__patched_cves__`` attribute to the IPython module that\nlist the CVEs that should have been fixed. This attribute is informational only\nas if a executable has a flaw, this value can always be changed by an attacker.\n\n.. code::\n\n    In [1]: import IPython\n\n    In [2]: IPython.__patched_cves__\n    Out[2]: {'CVE-2022-21699'}\n\n    In [3]: 'CVE-2022-21699' in IPython.__patched_cves__\n    Out[3]: True\n\nThus starting with this version:\n\n - The current working directory is not searched anymore for profiles or\n   configurations files.\n - Added a ``__patched_cves__`` attribute (set of strings) to IPython module that contain\n   the list of fixed CVE. This is informational only.\n\nFurther details can be read on the `GitHub Advisory <https://github.com/ipython/ipython/security/advisories/GHSA-pq7m-3gw7-gq5x>`__\n\n\n.. _version 8.0:\n\nIPython 8.0\n-----------\n\nIPython 8.0 is bringing a large number of new features and improvements to both the\nuser of the terminal and of the kernel via Jupyter. The removal of compatibility\nwith an older version of Python is also the opportunity to do a couple of\nperformance improvements in particular with respect to startup time.\nThe 8.x branch started diverging from its predecessor around IPython 7.12\n(January 2020).\n\nThis release contains 250+ pull requests, in addition to many of the features\nand backports that have made it to the 7.x branch. Please see the\n`8.0 milestone <https://github.com/ipython/ipython/milestone/73?closed=1>`__ for the full list of pull requests.\n\nPlease feel free to send pull requests to update those notes after release,\nI have likely forgotten a few things reviewing 250+ PRs.\n\nDependencies changes/downstream packaging\n-----------------------------------------\n\nMost of our building steps have been changed to be (mostly) declarative\nand follow PEP 517. We are trying to completely remove ``setup.py`` (:ghpull:`13238`) and are\nlooking for help to do so.\n\n - minimum supported ``traitlets`` version is now 5+\n - we now require ``stack_data``\n - minimal Python is now 3.8\n - ``nose`` is not a testing requirement anymore\n - ``pytest`` replaces nose.\n - ``iptest``/``iptest3`` cli entrypoints do not exist anymore.\n - the minimum officially \u200bsupported ``numpy`` version has been bumped, but this should\n   not have much effect on packaging.\n\n\nDeprecation and removal\n-----------------------\n\nWe removed almost all features, arguments, functions, and modules that were\nmarked as deprecated between IPython 1.0 and 5.0. As a reminder, 5.0 was released\nin 2016, and 1.0 in 2013. Last release of the 5 branch was 5.10.0, in May 2020.\nThe few remaining deprecated features we left have better deprecation warnings\nor have been turned into explicit errors for better error messages.\n\nI will use this occasion to add the following requests to anyone emitting a\ndeprecation warning:\n\n - Please add at least ``stacklevel=2`` so that the warning is emitted into the\n   caller context, and not the callee one.\n - Please add **since which version** something is deprecated.\n\nAs a side note, it is much easier to conditionally compare version\nnumbers rather than using ``try/except`` when functionality changes with a version.\n\nI won't list all the removed features here, but modules like ``IPython.kernel``,\nwhich was just a shim module around ``ipykernel`` for the past 8 years, have been\nremoved, and so many other similar things that pre-date the name **Jupyter**\nitself.\n\nWe no longer need to add ``IPython.extensions`` to the PYTHONPATH because that is being\nhandled by ``load_extension``.\n\nWe are also removing ``Cythonmagic``, ``sympyprinting`` and ``rmagic`` as they are now in\nother packages and no longer need to be inside IPython.\n\n\nDocumentation\n-------------\n\nThe majority of our docstrings have now been reformatted and automatically fixed by\nthe experimental `V\u00e9lin <https://pypi.org/project/velin/>`_ project to conform\nto numpydoc.\n\nType annotations\n----------------\n\nWhile IPython itself is highly dynamic and can't be completely typed, many of\nthe functions now have type annotations, and part of the codebase is now checked\nby mypy.\n\n\nFeatured changes\n----------------\n\nHere is a features list of changes in IPython 8.0. This is of course non-exhaustive.\nPlease note as well that many features have been added in the 7.x branch as well\n(and hence why you want to read the 7.x what's new notes), in particular\nfeatures contributed by QuantStack (with respect to debugger protocol and Xeus\nPython), as well as many debugger features that I was pleased to implement as\npart of my work at QuanSight and sponsored by DE Shaw.\n\nTraceback improvements\n~~~~~~~~~~~~~~~~~~~~~~\n\nPreviously, error tracebacks for errors happening in code cells were showing a\nhash, the one used for compiling the Python AST::\n\n    In [1]: def foo():\n    ...:     return 3 / 0\n    ...:\n\n    In [2]: foo()\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    <ipython-input-2-c19b6d9633cf> in <module>\n    ----> 1 foo()\n\n    <ipython-input-1-1595a74c32d5> in foo()\n        1 def foo():\n    ----> 2     return 3 / 0\n        3\n\n    ZeroDivisionError: division by zero\n\nThe error traceback is now correctly formatted, showing the cell number in which the error happened::\n\n    In [1]: def foo():\n    ...:     return 3 / 0\n    ...:\n\n    Input In [2]: foo()\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    input In [2], in <module>\n    ----> 1 foo()\n\n    Input In [1], in foo()\n        1 def foo():\n    ----> 2     return 3 / 0\n\n    ZeroDivisionError: division by zero\n\nThe ``stack_data`` package has been integrated, which provides smarter information in the traceback;\nin particular it will highlight the AST node where an error occurs which can help to quickly narrow down errors.\n\nFor example in the following snippet::\n\n    def foo(i):\n        x = [[[0]]]\n        return x[0][i][0]\n\n\n    def bar():\n        return foo(0) + foo(\n            1\n        ) + foo(2)\n\n\ncalling ``bar()`` would raise an ``IndexError`` on the return line of ``foo``,\nand IPython 8.0 is capable of telling you where the index error occurs::\n\n\n    IndexError\n    Input In [2], in <module>\n    ----> 1 bar()\n            ^^^^^\n\n    Input In [1], in bar()\n          6 def bar():\n    ----> 7     return foo(0) + foo(\n                                ^^^^\n          8         1\n             ^^^^^^^^\n          9     ) + foo(2)\n             ^^^^\n\n    Input In [1], in foo(i)\n          1 def foo(i):\n          2     x = [[[0]]]\n    ----> 3     return x[0][i][0]\n                       ^^^^^^^\n\nThe corresponding locations marked here with ``^`` will show up highlighted in\nthe terminal and notebooks.\n\nFinally, a colon ``::`` and line number is appended after a filename in\ntraceback::\n\n\n    ZeroDivisionError               Traceback (most recent call last)\n    File ~/error.py:4, in <module>\n          1 def f():\n          2     1/0\n    ----> 4 f()\n\n    File ~/error.py:2, in f()\n          1 def f():\n    ----> 2     1/0\n\nMany terminals and editors have integrations enabling you to directly jump to the\nrelevant file/line when this syntax is used, so this small addition may have a high\nimpact on productivity.\n\n\nAutosuggestions\n~~~~~~~~~~~~~~~\n\nAutosuggestion is a very useful feature available in `fish <https://fishshell.com/>`__, `zsh <https://en.wikipedia.org/wiki/Z_shell>`__, and `prompt-toolkit <https://python-prompt-toolkit.readthedocs.io/en/master/pages/asking_for_input.html#auto-suggestion>`__.\n\n`Ptpython <https://github.com/prompt-toolkit/ptpython#ptpython>`__ allows users to enable this feature in\n`ptpython/config.py <https://github.com/prompt-toolkit/ptpython/blob/master/examples/ptpython_config/config.py#L90>`__.\n\nThis feature allows users to accept autosuggestions with ctrl e, ctrl f,\nor right arrow as described below.\n\n1. Start ipython\n\n.. image:: ../_images/8.0/auto_suggest_1_prompt_no_text.png\n\n2. Run ``print(\"hello\")``\n\n.. image:: ../_images/8.0/auto_suggest_2_print_hello_suggest.png\n\n3. start typing ``print`` again to see the autosuggestion\n\n.. image:: ../_images/8.0/auto_suggest_3_print_hello_suggest.png\n\n4. Press ``ctrl-f``, or ``ctrl-e``, or ``right-arrow`` to accept the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_4_print_hello.png\n\nYou can also complete word by word:\n\n1. Run ``def say_hello(): print(\"hello\")``\n\n.. image:: ../_images/8.0/auto_suggest_second_prompt.png\n\n2. Start typing  the first letter if ``def`` to see the autosuggestion\n\n.. image:: ../_images/8.0/auto_suggest_d_phantom.png\n\n3. Press ``alt-f`` (or ``escape`` followed by ``f``), to accept the first word of the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_def_phantom.png\n\nImportantly, this feature does not interfere with tab completion:\n\n1. After running ``def say_hello(): print(\"hello\")``, press d\n\n.. image:: ../_images/8.0/auto_suggest_d_phantom.png\n\n2. Press Tab to start tab completion\n\n.. image:: ../_images/8.0/auto_suggest_d_completions.png\n\n3A. Press Tab again to select the first option\n\n.. image:: ../_images/8.0/auto_suggest_def_completions.png\n\n3B. Press ``alt f`` (``escape``, ``f``) to accept to accept the first word of the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_def_phantom.png\n\n3C. Press ``ctrl-f`` or ``ctrl-e`` to accept the entire suggestion\n\n.. image:: ../_images/8.0/auto_suggest_match_parens.png\n\n\nCurrently, autosuggestions are only shown in the emacs or vi insert editing modes:\n\n- The ctrl e, ctrl f, and alt f shortcuts work by default in emacs mode.\n- To use these shortcuts in vi insert mode, you will have to create `custom keybindings in your config.py <https://github.com/mskar/setup/commit/2892fcee46f9f80ef7788f0749edc99daccc52f4/>`__.\n\n\nShow pinfo information in ipdb using \"?\" and \"??\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn IPDB, it is now possible to show the information about an object using \"?\"\nand \"??\", in much the same way that it can be done when using the IPython prompt::\n\n    ipdb> partial?\n    Init signature: partial(self, /, *args, **kwargs)\n    Docstring:\n    partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n    File:           ~/.pyenv/versions/3.8.6/lib/python3.8/functools.py\n    Type:           type\n    Subclasses:\n\nPreviously, ``pinfo`` or ``pinfo2`` command had to be used for this purpose.\n\n\nAutoreload 3 feature\n~~~~~~~~~~~~~~~~~~~~\n\nExample: When an IPython session is run with the 'autoreload' extension loaded,\nyou will now have the option '3' to select, which means the following:\n\n    1. replicate all functionality from option 2\n    2. autoload all new funcs/classes/enums/globals from the module when they are added\n    3. autoload all newly imported funcs/classes/enums/globals from external modules\n\nTry ``%autoreload 3`` in an IPython session after running ``%load_ext autoreload``.\n\nFor more information please see the following unit test : ``extensions/tests/test_autoreload.py:test_autoload_newly_added_objects``\n\nAuto formatting with black in the CLI\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis feature was present in 7.x, but disabled by default.\n\nIn 8.0, input was automatically reformatted with Black when black was installed.\nThis feature has been reverted for the time being.\nYou can re-enable it by setting ``TerminalInteractiveShell.autoformatter`` to ``\"black\"``\n\nHistory Range Glob feature\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPreviously, when using ``%history``, users could specify either\na range of sessions and lines, for example:\n\n.. code-block:: python\n\n   ~8/1-~6/5   # see history from the first line of 8 sessions ago,\n               # to the fifth line of 6 sessions ago.``\n\nOr users could specify a glob pattern:\n\n.. code-block:: python\n\n   -g <pattern>  # glob ALL history for the specified pattern.\n\nHowever users could *not* specify both.\n\nIf a user *did* specify both a range and a glob pattern,\nthen the glob pattern would be used (globbing *all* history) *and the range would be ignored*.\n\nWith this enhancement, if a user specifies both a range and a glob pattern, then the glob pattern will be applied to the specified range of history.\n\nDon't start a multi-line cell with sunken parenthesis\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFrom now on, IPython will not ask for the next line of input when given a single\nline with more closing than opening brackets. For example, this means that if\nyou (mis)type ``]]`` instead of ``[]``, a ``SyntaxError`` will show up, instead of\nthe ``...:`` prompt continuation.\n\nIPython shell for ipdb interact\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ipdb ``interact`` starts an IPython shell instead of Python's built-in ``code.interact()``.\n\nAutomatic Vi prompt stripping\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen pasting code into IPython, it will strip the leading prompt characters if\nthere are any. For example, you can paste the following code into the console -\nit will still work, even though each line is prefixed with prompts (``In``,\n``Out``)::\n\n    In [1]: 2 * 2 == 4\n    Out[1]: True\n\n    In [2]: print(\"This still works as pasted\")\n\n\nPreviously, this was not the case for the Vi-mode prompts::\n\n    In [1]: [ins] In [13]: 2 * 2 == 4\n       ...: Out[13]: True\n       ...:\n      File \"<ipython-input-1-727bb88eaf33>\", line 1\n        [ins] In [13]: 2 * 2 == 4\n              ^\n    SyntaxError: invalid syntax\n\nThis is now fixed, and Vi prompt prefixes - ``[ins]`` and ``[nav]`` -  are\nskipped just as the normal ``In`` would be.\n\nIPython shell can be started in the Vi mode using ``ipython --TerminalInteractiveShell.editing_mode=vi``,\nYou should be able to change mode dynamically with ``%config TerminalInteractiveShell.editing_mode='vi'``\n\nEmpty History Ranges\n~~~~~~~~~~~~~~~~~~~~\n\nA number of magics that take history ranges can now be used with an empty\nrange. These magics are:\n\n * ``%save``\n * ``%load``\n * ``%pastebin``\n * ``%pycat``\n\nUsing them this way will make them take the history of the current session up\nto the point of the magic call (such that the magic itself will not be\nincluded).\n\nTherefore it is now possible to save the whole history to a file using\n``%save <filename>``, load and edit it using ``%load`` (makes for a nice usage\nwhen followed with :kbd:`F2`), send it to `dpaste.org <http://dpast.org>`_ using\n``%pastebin``, or view the whole thing syntax-highlighted with a single\n``%pycat``.\n\n\nWindows timing implementation: Switch to process_time\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTiming on Windows, for example with ``%%time``,  was changed from being based on ``time.perf_counter``\n(which counted time even when the process was sleeping) to being based on ``time.process_time`` instead\n(which only counts CPU time). This brings it closer to the behavior on Linux. See :ghpull:`12984`.\n\nMiscellaneous\n~~~~~~~~~~~~~\n - Non-text formatters are not disabled in the terminal, which should simplify\n   writing extensions displaying images or other mimetypes in supporting terminals.\n   :ghpull:`12315`\n - It is now possible to automatically insert matching brackets in Terminal IPython using the\n   ``TerminalInteractiveShell.auto_match=True`` option. :ghpull:`12586`\n - We are thinking of deprecating the current ``%%javascript`` magic in favor of a better replacement. See :ghpull:`13376`.\n - ``~`` is now expanded when part of a path in most magics :ghpull:`13385`\n - ``%/%%timeit`` magic now adds a comma every thousands to make reading a long number easier :ghpull:`13379`\n - ``\"info\"`` messages can now be customised to hide some fields :ghpull:`13343`\n - ``collections.UserList`` now pretty-prints :ghpull:`13320`\n - The debugger now has a persistent history, which should make it less\n   annoying to retype commands :ghpull:`13246`\n - ``!pip`` ``!conda`` ``!cd`` or ``!ls`` are likely doing the wrong thing. We\n   now warn users if they use one of those commands. :ghpull:`12954`\n - Make ``%precision`` work for ``numpy.float64`` type :ghpull:`12902`\n\nRe-added support for XDG config directories\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nXDG support through the years comes and goes. There is a tension between having\nan identical location for configuration in all platforms versus having simple instructions.\nAfter initial failures a couple of years ago, IPython was modified to automatically migrate XDG\nconfig files back into ``~/.ipython``. That migration code has now been removed.\nIPython now checks the XDG locations, so if you _manually_ move your config\nfiles to your preferred location, IPython will not move them back.\n\n\nPreparing for Python 3.10\n-------------------------\n\nTo prepare for Python 3.10, we have started working on removing reliance and\nany dependency that is not compatible with Python 3.10. This includes migrating our\ntest suite to pytest and starting to remove nose. This also means that the\n``iptest`` command is now gone and all testing is via pytest.\n\nThis was in large part thanks to the NumFOCUS Small Developer grant, which enabled us to\nallocate \\$4000 to hire `Nikita Kniazev (@Kojoley) <https://github.com/Kojoley>`_,\nwho did a fantastic job at updating our code base, migrating to pytest, pushing\nour coverage, and fixing a large number of bugs. I highly recommend contacting\nthem if you need help with C++ and Python projects.\n\nYou can find all relevant issues and PRs with `the SDG 2021 tag <https://github.com/ipython/ipython/issues?q=label%3A%22Numfocus+SDG+2021%22+>`__\n\nRemoving support for older Python versions\n------------------------------------------\n\n\nWe are removing support for Python up through 3.7, allowing internal code to use the more\nefficient ``pathlib`` and to make better use of type annotations.\n\n.. image:: ../_images/8.0/pathlib_pathlib_everywhere.jpg\n   :alt: \"Meme image of Toy Story with Woody and Buzz, with the text 'pathlib, pathlib everywhere'\"\n\n\nWe had about 34 PRs only to update some logic to update some functions from managing strings to\nusing Pathlib.\n\nThe completer has also seen significant updates and now makes use of newer Jedi APIs,\noffering faster and more reliable tab completion.\n\nMisc Statistics\n---------------\n\nHere are some numbers::\n\n    7.x: 296 files, 12561 blank lines, 20282 comments, 35142 line of code.\n    8.0: 252 files, 12053 blank lines, 19232 comments, 34505 line of code.\n\n    $ git diff --stat 7.x...master  | tail -1\n    340 files changed, 13399 insertions(+), 12421 deletions(-)\n\nWe have commits from 162 authors, who contributed 1916 commits in 23 month, excluding merges (to not bias toward\nmaintainers pushing buttons).::\n\n   $ git shortlog  -s --no-merges  7.x...master | sort -nr\n   535\tMatthias Bussonnier\n    86\tNikita Kniazev\n    69\tBlazej Michalik\n    49\tSamuel Gaist\n    27\tItamar Turner-Trauring\n    18\tSpas Kalaydzhisyki\n    17\tThomas Kluyver\n    17\tQuentin Peter\n    17\tJames Morris\n    17\tArtur Svistunov\n    15\tBart Skowron\n    14\tAlex Hall\n    13\trushabh-v\n    13\tTerry Davis\n    13\tBenjamin Ragan-Kelley\n     8\tmartinRenou\n     8\tfarisachugthai\n     7\tdswij\n     7\tGal B\n     7\tCorentin Cadiou\n     6\tyuji96\n     6\tMartin Skarzynski\n     6\tJustin Palmer\n     6\tDaniel Goldfarb\n     6\tBen Greiner\n     5\tSammy Al Hashemi\n     5\tPaul Ivanov\n     5\tInception95\n     5\tEyenpi\n     5\tDouglas Blank\n     5\tCoco Mishra\n     5\tBibo Hao\n     5\tAndr\u00e9 A. Gomes\n     5\tAhmed Fasih\n     4\ttakuya fujiwara\n     4\tpalewire\n     4\tThomas A Caswell\n     4\tTalley Lambert\n     4\tScott Sanderson\n     4\tRam Rachum\n     4\tNick Muoh\n     4\tNathan Goldbaum\n     4\tMithil Poojary\n     4\tMichael T\n     4\tJakub Klus\n     4\tIan Castleden\n     4\tEli Rykoff\n     4\tAshwin Vishnu\n     3\t\u8c2d\u4e5d\u9f0e\n     3\tsleeping\n     3\tSylvain Corlay\n     3\tPeter Corke\n     3\tPaul Bissex\n     3\tMatthew Feickert\n     3\tFernando Perez\n     3\tEric Wieser\n     3\tDaniel Mietchen\n     3\tAditya Sathe\n     3\t007vedant\n     2\trchiodo\n     2\tnicolaslazo\n     2\tluttik\n     2\tgorogoroumaru\n     2\tfoobarbyte\n     2\tbar-hen\n     2\tTheo Ouzhinski\n     2\tStrawkage\n     2\tSamreen Zarroug\n     2\tPete Blois\n     2\tMeysam Azad\n     2\tMatthieu Ancellin\n     2\tMark Schmitz\n     2\tMaor Kleinberger\n     2\tMRCWirtz\n     2\tLumir Balhar\n     2\tJulien Rabinow\n     2\tJuan Luis Cano Rodr\u00edguez\n     2\tJoyce Er\n     2\tJakub\n     2\tFaris A Chugthai\n     2\tEthan Madden\n     2\tDimitri Papadopoulos\n     2\tDiego Fernandez\n     2\tDaniel Shimon\n     2\tCoco Bennett\n     2\tCarlos Cordoba\n     2\tBoyuan Liu\n     2\tBaoGiang HoangVu\n     2\tAugusto\n     2\tArthur Svistunov\n     2\tArthur Moreira\n     2\tAli Nabipour\n     2\tAdam Hackbarth\n     1\trichard\n     1\tlinar-jether\n     1\tlbennett\n     1\tjuacrumar\n     1\tgpotter2\n     1\tdigitalvirtuoso\n     1\tdalthviz\n     1\tYonatan Goldschmidt\n     1\tTomasz K\u0142oczko\n     1\tTobias Bengfort\n     1\tTimur Kushukov\n     1\tThomas\n     1\tSnir Broshi\n     1\tShao Yang Hong\n     1\tSanjana-03\n     1\tRomulo Filho\n     1\tRodolfo Carvalho\n     1\tRichard Shadrach\n     1\tReilly Tucker Siemens\n     1\tRakessh Roshan\n     1\tPiers Titus van der Torren\n     1\tPhanatosZou\n     1\tPavel Safronov\n     1\tPaulo S. Costa\n     1\tPaul McCarthy\n     1\tNotWearingPants\n     1\tNaelson Douglas\n     1\tMichael Tiemann\n     1\tMatt Wozniski\n     1\tMarkus Wageringel\n     1\tMarcus Wirtz\n     1\tMarcio Mazza\n     1\tLum\u00edr 'Frenzy' Balhar\n     1\tLightyagami1\n     1\tLeon Anavi\n     1\tLeafyLi\n     1\tL0uisJ0shua\n     1\tKyle Cutler\n     1\tKrzysztof Cybulski\n     1\tKevin Kirsche\n     1\tKIU Shueng Chuan\n     1\tJonathan Slenders\n     1\tJay Qi\n     1\tJake VanderPlas\n     1\tIwan Briquemont\n     1\tHussaina Begum Nandyala\n     1\tGordon Ball\n     1\tGabriel Simonetto\n     1\tFrank Tobia\n     1\tErik\n     1\tElliott Sales de Andrade\n     1\tDaniel Hahler\n     1\tDan Green-Leipciger\n     1\tDan Green\n     1\tDamian Yurzola\n     1\tCoon, Ethan T\n     1\tCarol Willing\n     1\tBrian Lee\n     1\tBrendan Gerrity\n     1\tBlake Griffin\n     1\tBastian Ebeling\n     1\tBartosz Telenczuk\n     1\tAnkitsingh6299\n     1\tAndrew Port\n     1\tAndrew J. Hesford\n     1\tAlbert Zhang\n     1\tAdam Johnson\n\nThis does not, of course, represent non-code contributions, for which we are also grateful.\n\n\nAPI Changes using Frappuccino\n-----------------------------\n\nThis is an experimental exhaustive API difference using `Frappuccino <https://pypi.org/project/frappuccino/>`_\n\n\nThe following items are new in IPython 8.0 ::\n\n    + IPython.core.async_helpers.get_asyncio_loop()\n    + IPython.core.completer.Dict\n    + IPython.core.completer.Pattern\n    + IPython.core.completer.Sequence\n    + IPython.core.completer.__skip_doctest__\n    + IPython.core.debugger.Pdb.precmd(self, line)\n    + IPython.core.debugger.__skip_doctest__\n    + IPython.core.display.__getattr__(name)\n    + IPython.core.display.warn\n    + IPython.core.display_functions\n    + IPython.core.display_functions.DisplayHandle\n    + IPython.core.display_functions.DisplayHandle.display(self, obj, **kwargs)\n    + IPython.core.display_functions.DisplayHandle.update(self, obj, **kwargs)\n    + IPython.core.display_functions.__all__\n    + IPython.core.display_functions.__builtins__\n    + IPython.core.display_functions.__cached__\n    + IPython.core.display_functions.__doc__\n    + IPython.core.display_functions.__file__\n    + IPython.core.display_functions.__loader__\n    + IPython.core.display_functions.__name__\n    + IPython.core.display_functions.__package__\n    + IPython.core.display_functions.__spec__\n    + IPython.core.display_functions.b2a_hex\n    + IPython.core.display_functions.clear_output(wait=False)\n    + IPython.core.display_functions.display(*objs, include='None', exclude='None', metadata='None', transient='None', display_id='None', raw=False, clear=False, **kwargs)\n    + IPython.core.display_functions.publish_display_data(data, metadata='None', source='<deprecated>', *, transient='None', **kwargs)\n    + IPython.core.display_functions.update_display(obj, *, display_id, **kwargs)\n    + IPython.core.extensions.BUILTINS_EXTS\n    + IPython.core.inputtransformer2.has_sunken_brackets(tokens)\n    + IPython.core.interactiveshell.Callable\n    + IPython.core.interactiveshell.__annotations__\n    + IPython.core.ultratb.List\n    + IPython.core.ultratb.Tuple\n    + IPython.lib.pretty.CallExpression\n    + IPython.lib.pretty.CallExpression.factory(name)\n    + IPython.lib.pretty.RawStringLiteral\n    + IPython.lib.pretty.RawText\n    + IPython.terminal.debugger.TerminalPdb.do_interact(self, arg)\n    + IPython.terminal.embed.Set\n\nThe following items have been removed (or moved to superclass)::\n\n    - IPython.core.application.BaseIPythonApplication.initialize_subcommand\n    - IPython.core.completer.Sentinel\n    - IPython.core.completer.skip_doctest\n    - IPython.core.debugger.Tracer\n    - IPython.core.display.DisplayHandle\n    - IPython.core.display.DisplayHandle.display\n    - IPython.core.display.DisplayHandle.update\n    - IPython.core.display.b2a_hex\n    - IPython.core.display.clear_output\n    - IPython.core.display.display\n    - IPython.core.display.publish_display_data\n    - IPython.core.display.update_display\n    - IPython.core.excolors.Deprec\n    - IPython.core.excolors.ExceptionColors\n    - IPython.core.history.warn\n    - IPython.core.hooks.late_startup_hook\n    - IPython.core.hooks.pre_run_code_hook\n    - IPython.core.hooks.shutdown_hook\n    - IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings\n    - IPython.core.interactiveshell.InteractiveShell.init_readline\n    - IPython.core.interactiveshell.InteractiveShell.write\n    - IPython.core.interactiveshell.InteractiveShell.write_err\n    - IPython.core.interactiveshell.get_default_colors\n    - IPython.core.interactiveshell.removed_co_newlocals\n    - IPython.core.magics.execution.ExecutionMagics.profile_missing_notice\n    - IPython.core.magics.script.PIPE\n    - IPython.core.prefilter.PrefilterManager.init_transformers\n    - IPython.core.release.classifiers\n    - IPython.core.release.description\n    - IPython.core.release.keywords\n    - IPython.core.release.long_description\n    - IPython.core.release.name\n    - IPython.core.release.platforms\n    - IPython.core.release.url\n    - IPython.core.ultratb.VerboseTB.format_records\n    - IPython.core.ultratb.find_recursion\n    - IPython.core.ultratb.findsource\n    - IPython.core.ultratb.fix_frame_records_filenames\n    - IPython.core.ultratb.inspect_error\n    - IPython.core.ultratb.is_recursion_error\n    - IPython.core.ultratb.with_patch_inspect\n    - IPython.external.__all__\n    - IPython.external.__builtins__\n    - IPython.external.__cached__\n    - IPython.external.__doc__\n    - IPython.external.__file__\n    - IPython.external.__loader__\n    - IPython.external.__name__\n    - IPython.external.__package__\n    - IPython.external.__path__\n    - IPython.external.__spec__\n    - IPython.kernel.KernelConnectionInfo\n    - IPython.kernel.__builtins__\n    - IPython.kernel.__cached__\n    - IPython.kernel.__warningregistry__\n    - IPython.kernel.pkg\n    - IPython.kernel.protocol_version\n    - IPython.kernel.protocol_version_info\n    - IPython.kernel.src\n    - IPython.kernel.version_info\n    - IPython.kernel.warn\n    - IPython.lib.backgroundjobs\n    - IPython.lib.backgroundjobs.BackgroundJobBase\n    - IPython.lib.backgroundjobs.BackgroundJobBase.run\n    - IPython.lib.backgroundjobs.BackgroundJobBase.traceback\n    - IPython.lib.backgroundjobs.BackgroundJobExpr\n    - IPython.lib.backgroundjobs.BackgroundJobExpr.call\n    - IPython.lib.backgroundjobs.BackgroundJobFunc\n    - IPython.lib.backgroundjobs.BackgroundJobFunc.call\n    - IPython.lib.backgroundjobs.BackgroundJobManager\n    - IPython.lib.backgroundjobs.BackgroundJobManager.flush\n    - IPython.lib.backgroundjobs.BackgroundJobManager.new\n    - IPython.lib.backgroundjobs.BackgroundJobManager.remove\n    - IPython.lib.backgroundjobs.BackgroundJobManager.result\n    - IPython.lib.backgroundjobs.BackgroundJobManager.status\n    - IPython.lib.backgroundjobs.BackgroundJobManager.traceback\n    - IPython.lib.backgroundjobs.__builtins__\n    - IPython.lib.backgroundjobs.__cached__\n    - IPython.lib.backgroundjobs.__doc__\n    - IPython.lib.backgroundjobs.__file__\n    - IPython.lib.backgroundjobs.__loader__\n    - IPython.lib.backgroundjobs.__name__\n    - IPython.lib.backgroundjobs.__package__\n    - IPython.lib.backgroundjobs.__spec__\n    - IPython.lib.kernel.__builtins__\n    - IPython.lib.kernel.__cached__\n    - IPython.lib.kernel.__doc__\n    - IPython.lib.kernel.__file__\n    - IPython.lib.kernel.__loader__\n    - IPython.lib.kernel.__name__\n    - IPython.lib.kernel.__package__\n    - IPython.lib.kernel.__spec__\n    - IPython.lib.kernel.__warningregistry__\n    - IPython.paths.fs_encoding\n    - IPython.terminal.debugger.DEFAULT_BUFFER\n    - IPython.terminal.debugger.cursor_in_leading_ws\n    - IPython.terminal.debugger.emacs_insert_mode\n    - IPython.terminal.debugger.has_selection\n    - IPython.terminal.debugger.vi_insert_mode\n    - IPython.terminal.interactiveshell.DISPLAY_BANNER_DEPRECATED\n    - IPython.terminal.ipapp.TerminalIPythonApp.parse_command_line\n    - IPython.testing.test\n    - IPython.utils.contexts.NoOpContext\n    - IPython.utils.io.IOStream\n    - IPython.utils.io.IOStream.close\n    - IPython.utils.io.IOStream.write\n    - IPython.utils.io.IOStream.writelines\n    - IPython.utils.io.__warningregistry__\n    - IPython.utils.io.atomic_writing\n    - IPython.utils.io.stderr\n    - IPython.utils.io.stdin\n    - IPython.utils.io.stdout\n    - IPython.utils.io.unicode_std_stream\n    - IPython.utils.path.get_ipython_cache_dir\n    - IPython.utils.path.get_ipython_dir\n    - IPython.utils.path.get_ipython_module_path\n    - IPython.utils.path.get_ipython_package_dir\n    - IPython.utils.path.locate_profile\n    - IPython.utils.path.unquote_filename\n    - IPython.utils.py3compat.PY2\n    - IPython.utils.py3compat.PY3\n    - IPython.utils.py3compat.buffer_to_bytes\n    - IPython.utils.py3compat.builtin_mod_name\n    - IPython.utils.py3compat.cast_bytes\n    - IPython.utils.py3compat.getcwd\n    - IPython.utils.py3compat.isidentifier\n    - IPython.utils.py3compat.u_format\n\nThe following signatures differ between 7.x and 8.0::\n\n    - IPython.core.completer.IPCompleter.unicode_name_matches(self, text)\n    + IPython.core.completer.IPCompleter.unicode_name_matches(text)\n\n    - IPython.core.completer.match_dict_keys(keys, prefix, delims)\n    + IPython.core.completer.match_dict_keys(keys, prefix, delims, extra_prefix='None')\n\n    - IPython.core.interactiveshell.InteractiveShell.object_inspect_mime(self, oname, detail_level=0)\n    + IPython.core.interactiveshell.InteractiveShell.object_inspect_mime(self, oname, detail_level=0, omit_sections='()')\n\n    - IPython.core.interactiveshell.InteractiveShell.set_hook(self, name, hook, priority=50, str_key='None', re_key='None', _warn_deprecated=True)\n    + IPython.core.interactiveshell.InteractiveShell.set_hook(self, name, hook, priority=50, str_key='None', re_key='None')\n\n    - IPython.core.oinspect.Inspector.info(self, obj, oname='', formatter='None', info='None', detail_level=0)\n    + IPython.core.oinspect.Inspector.info(self, obj, oname='', info='None', detail_level=0)\n\n    - IPython.core.oinspect.Inspector.pinfo(self, obj, oname='', formatter='None', info='None', detail_level=0, enable_html_pager=True)\n    + IPython.core.oinspect.Inspector.pinfo(self, obj, oname='', formatter='None', info='None', detail_level=0, enable_html_pager=True, omit_sections='()')\n\n    - IPython.core.profiledir.ProfileDir.copy_config_file(self, config_file, path='None', overwrite=False)\n    + IPython.core.profiledir.ProfileDir.copy_config_file(self, config_file, path, overwrite=False)\n\n    - IPython.core.ultratb.VerboseTB.format_record(self, frame, file, lnum, func, lines, index)\n    + IPython.core.ultratb.VerboseTB.format_record(self, frame_info)\n\n    - IPython.terminal.embed.InteractiveShellEmbed.mainloop(self, local_ns='None', module='None', stack_depth=0, display_banner='None', global_ns='None', compile_flags='None')\n    + IPython.terminal.embed.InteractiveShellEmbed.mainloop(self, local_ns='None', module='None', stack_depth=0, compile_flags='None')\n\n    - IPython.terminal.embed.embed(**kwargs)\n    + IPython.terminal.embed.embed(*, header='', compile_flags='None', **kwargs)\n\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.interact(self, display_banner='<object object at 0xffffff>')\n    + IPython.terminal.interactiveshell.TerminalInteractiveShell.interact(self)\n\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop(self, display_banner='<object object at 0xffffff>')\n    + IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop(self)\n\n    - IPython.utils.path.get_py_filename(name, force_win32='None')\n    + IPython.utils.path.get_py_filename(name)\n\nThe following are new attributes (that might be inherited)::\n\n    + IPython.core.completer.IPCompleter.unicode_names\n    + IPython.core.debugger.InterruptiblePdb.precmd\n    + IPython.core.debugger.Pdb.precmd\n    + IPython.core.ultratb.AutoFormattedTB.has_colors\n    + IPython.core.ultratb.ColorTB.has_colors\n    + IPython.core.ultratb.FormattedTB.has_colors\n    + IPython.core.ultratb.ListTB.has_colors\n    + IPython.core.ultratb.SyntaxTB.has_colors\n    + IPython.core.ultratb.TBTools.has_colors\n    + IPython.core.ultratb.VerboseTB.has_colors\n    + IPython.terminal.debugger.TerminalPdb.do_interact\n    + IPython.terminal.debugger.TerminalPdb.precmd\n\nThe following attribute/methods have been removed::\n\n    - IPython.core.application.BaseIPythonApplication.deprecated_subcommands\n    - IPython.core.ultratb.AutoFormattedTB.format_records\n    - IPython.core.ultratb.ColorTB.format_records\n    - IPython.core.ultratb.FormattedTB.format_records\n    - IPython.terminal.embed.InteractiveShellEmbed.init_deprecation_warnings\n    - IPython.terminal.embed.InteractiveShellEmbed.init_readline\n    - IPython.terminal.embed.InteractiveShellEmbed.write\n    - IPython.terminal.embed.InteractiveShellEmbed.write_err\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.init_deprecation_warnings\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.init_readline\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.write\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.write_err\n    - IPython.terminal.ipapp.LocateIPythonApp.deprecated_subcommands\n    - IPython.terminal.ipapp.LocateIPythonApp.initialize_subcommand\n    - IPython.terminal.ipapp.TerminalIPythonApp.deprecated_subcommands\n    - IPython.terminal.ipapp.TerminalIPythonApp.initialize_subcommand\n"], "fixing_code": ["# PYTHON_ARGCOMPLETE_OK\n\"\"\"\nIPython: tools for interactive and parallel computing in Python.\n\nhttps://ipython.org\n\"\"\"\n#-----------------------------------------------------------------------------\n#  Copyright (c) 2008-2011, IPython Development Team.\n#  Copyright (c) 2001-2007, Fernando Perez <fernando.perez@colorado.edu>\n#  Copyright (c) 2001, Janko Hauser <jhauser@zscout.de>\n#  Copyright (c) 2001, Nathaniel Gray <n8gray@caltech.edu>\n#\n#  Distributed under the terms of the Modified BSD License.\n#\n#  The full license is in the file COPYING.txt, distributed with this software.\n#-----------------------------------------------------------------------------\n\n#-----------------------------------------------------------------------------\n# Imports\n#-----------------------------------------------------------------------------\n\nimport sys\n\n#-----------------------------------------------------------------------------\n# Setup everything\n#-----------------------------------------------------------------------------\n\n# Don't forget to also update setup.py when this changes!\nif sys.version_info < (3, 8):\n    raise ImportError(\n        \"\"\"\nIPython 8+ supports Python 3.8 and above, following NEP 29.\nWhen using Python 2.7, please install IPython 5.x LTS Long Term Support version.\nPython 3.3 and 3.4 were supported up to IPython 6.x.\nPython 3.5 was supported with IPython 7.0 to 7.9.\nPython 3.6 was supported with IPython up to 7.16.\nPython 3.7 was still supported with the 7.x branch.\n\nSee IPython `README.rst` file for more information:\n\n    https://github.com/ipython/ipython/blob/main/README.rst\n\n\"\"\"\n    )\n\n#-----------------------------------------------------------------------------\n# Setup the top level names\n#-----------------------------------------------------------------------------\n\nfrom .core.getipython import get_ipython\nfrom .core import release\nfrom .core.application import Application\nfrom .terminal.embed import embed\n\nfrom .core.interactiveshell import InteractiveShell\nfrom .utils.sysinfo import sys_info\nfrom .utils.frame import extract_module_locals\n\n# Release data\n__author__ = '%s <%s>' % (release.author, release.author_email)\n__license__  = release.license\n__version__  = release.version\nversion_info = release.version_info\n# list of CVEs that should have been patched in this release.\n# this is informational and should not be relied upon.\n__patched_cves__ = {\"CVE-2022-21699\", \"CVE-2023-24816\"}\n\n\ndef embed_kernel(module=None, local_ns=None, **kwargs):\n    \"\"\"Embed and start an IPython kernel in a given scope.\n\n    If you don't want the kernel to initialize the namespace\n    from the scope of the surrounding function,\n    and/or you want to load full IPython configuration,\n    you probably want `IPython.start_kernel()` instead.\n\n    Parameters\n    ----------\n    module : types.ModuleType, optional\n        The module to load into IPython globals (default: caller)\n    local_ns : dict, optional\n        The namespace to load into IPython user namespace (default: caller)\n    **kwargs : various, optional\n        Further keyword args are relayed to the IPKernelApp constructor,\n        allowing configuration of the Kernel.  Will only have an effect\n        on the first embed_kernel call for a given process.\n    \"\"\"\n    \n    (caller_module, caller_locals) = extract_module_locals(1)\n    if module is None:\n        module = caller_module\n    if local_ns is None:\n        local_ns = caller_locals\n    \n    # Only import .zmq when we really need it\n    from ipykernel.embed import embed_kernel as real_embed_kernel\n    real_embed_kernel(module=module, local_ns=local_ns, **kwargs)\n\ndef start_ipython(argv=None, **kwargs):\n    \"\"\"Launch a normal IPython instance (as opposed to embedded)\n\n    `IPython.embed()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_ipython()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed()`.\n\n    This is a public API method, and will survive implementation changes.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`.\n    \"\"\"\n    from IPython.terminal.ipapp import launch_new_instance\n    return launch_new_instance(argv=argv, **kwargs)\n\ndef start_kernel(argv=None, **kwargs):\n    \"\"\"Launch a normal IPython kernel instance (as opposed to embedded)\n\n    `IPython.embed_kernel()` puts a shell in a particular calling scope,\n    such as a function or method for debugging purposes,\n    which is often not desirable.\n\n    `start_kernel()` does full, regular IPython initialization,\n    including loading startup files, configuration, etc.\n    much of which is skipped by `embed()`.\n\n    Parameters\n    ----------\n    argv : list or None, optional\n        If unspecified or None, IPython will parse command-line options from sys.argv.\n        To prevent any command-line parsing, pass an empty list: `argv=[]`.\n    user_ns : dict, optional\n        specify this dictionary to initialize the IPython user namespace with particular values.\n    **kwargs : various, optional\n        Any other kwargs will be passed to the Application constructor,\n        such as `config`.\n    \"\"\"\n    import warnings\n\n    warnings.warn(\n        \"start_kernel is deprecated since IPython 8.0, use from `ipykernel.kernelapp.launch_new_instance`\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    from ipykernel.kernelapp import launch_new_instance\n    return launch_new_instance(argv=argv, **kwargs)\n", "# encoding: utf-8\n\"\"\"\nUtilities for working with terminals.\n\nAuthors:\n\n* Brian E. Granger\n* Fernando Perez\n* Alexander Belchenko (e-mail: bialix AT ukr.net)\n\"\"\"\n\n# Copyright (c) IPython Development Team.\n# Distributed under the terms of the Modified BSD License.\n\nimport os\nimport sys\nimport warnings\nfrom shutil import get_terminal_size as _get_terminal_size\n\n# This variable is part of the expected API of the module:\nignore_termtitle = True\n\n\n\nif os.name == 'posix':\n    def _term_clear():\n        os.system('clear')\nelif sys.platform == 'win32':\n    def _term_clear():\n        os.system('cls')\nelse:\n    def _term_clear():\n        pass\n\n\n\ndef toggle_set_term_title(val):\n    \"\"\"Control whether set_term_title is active or not.\n\n    set_term_title() allows writing to the console titlebar.  In embedded\n    widgets this can cause problems, so this call can be used to toggle it on\n    or off as needed.\n\n    The default state of the module is for the function to be disabled.\n\n    Parameters\n    ----------\n    val : bool\n        If True, set_term_title() actually writes to the terminal (using the\n        appropriate platform-specific module).  If False, it is a no-op.\n    \"\"\"\n    global ignore_termtitle\n    ignore_termtitle = not(val)\n\n\ndef _set_term_title(*args,**kw):\n    \"\"\"Dummy no-op.\"\"\"\n    pass\n\n\ndef _restore_term_title():\n    pass\n\n\n_xterm_term_title_saved = False\n\n\ndef _set_term_title_xterm(title):\n    \"\"\" Change virtual terminal title in xterm-workalikes \"\"\"\n    global _xterm_term_title_saved\n    # Only save the title the first time we set, otherwise restore will only\n    # go back one title (probably undoing a %cd title change).\n    if not _xterm_term_title_saved:\n        # save the current title to the xterm \"stack\"\n        sys.stdout.write(\"\\033[22;0t\")\n        _xterm_term_title_saved = True\n    sys.stdout.write('\\033]0;%s\\007' % title)\n\n\ndef _restore_term_title_xterm():\n    # Make sure the restore has at least one accompanying set.\n    global _xterm_term_title_saved\n    assert _xterm_term_title_saved\n    sys.stdout.write('\\033[23;0t') \n    _xterm_term_title_saved = False\n\n\nif os.name == 'posix':\n    TERM = os.environ.get('TERM','')\n    if TERM.startswith('xterm'):\n        _set_term_title = _set_term_title_xterm\n        _restore_term_title = _restore_term_title_xterm\nelif sys.platform == 'win32':\n    import ctypes\n\n    SetConsoleTitleW = ctypes.windll.kernel32.SetConsoleTitleW\n    SetConsoleTitleW.argtypes = [ctypes.c_wchar_p]\n\n    def _set_term_title(title):\n        \"\"\"Set terminal title using ctypes to access the Win32 APIs.\"\"\"\n        SetConsoleTitleW(title)\n\n\ndef set_term_title(title):\n    \"\"\"Set terminal title using the necessary platform-dependent calls.\"\"\"\n    if ignore_termtitle:\n        return\n    _set_term_title(title)\n\n\ndef restore_term_title():\n    \"\"\"Restore, if possible, terminal title to the original state\"\"\"\n    if ignore_termtitle:\n        return\n    _restore_term_title()\n\n\ndef freeze_term_title():\n    warnings.warn(\"This function is deprecated, use toggle_set_term_title()\")\n    global ignore_termtitle\n    ignore_termtitle = True\n\n\ndef get_terminal_size(defaultx=80, defaulty=25):\n    return _get_terminal_size((defaultx, defaulty))\n", "============\n 8.x Series\n============\n\n\nIPython 8.9.1\n-------------\n\nOut of schedule release of IPython with minor fixes to patch a potential CVE-2023-24816.\nThis is a really low severity CVE that you most likely are not affected by unless:\n\n - You are on windows.\n - You have a custom build of Python without ``_ctypes``\n - You cd or start IPython or Jupyter in untrusted directory which names may be valid shell commands.\n\n\n.. _version 8.9.0:\n\nIPython 8.9.0\n-------------\n\nSecond release of IPython in 2023, last Friday of the month, we are back on\ntrack. This is a small release with a few bug-fixes, and improvements, mostly\nwith respect to terminal shortcuts.\n\n\nThe biggest improvement for 8.9 is a drastic amelioration of the\nauto-suggestions sponsored by D.E. Shaw and implemented by the more and more\nactive contributor `@krassowski <https://github.com/krassowski>`.\n\n- ``right`` accepts a single character from suggestion\n- ``ctrl+right`` accepts a semantic token (macos default shortcuts take\n  precedence and need to be disabled to make this work)\n- ``backspace`` deletes a character and resumes hinting autosuggestions\n- ``ctrl-left`` accepts suggestion and moves cursor left one character.\n- ``backspace`` deletes a character and resumes hinting autosuggestions\n- ``down`` moves to suggestion to later in history when no lines are present below the cursors.\n- ``up`` moves to suggestion from earlier in history when no lines are present above the cursor.\n\nThis is best described by the Gif posted by `@krassowski\n<https://github.com/krassowski>`, and in the PR itself :ghpull:`13888`.\n\n.. image:: ../_images/autosuggest.gif\n\nPlease report any feedback in order for us to improve the user experience.\nIn particular we are also working on making the shortcuts configurable.\n\nIf you are interested in better terminal shortcuts, I also invite you to\nparticipate in issue `13879\n<https://github.com/ipython/ipython/issues/13879>`__.\n\n\nAs we follow `NEP29\n<https://numpy.org/neps/nep-0029-deprecation_policy.html>`__, next version of\nIPython will officially stop supporting numpy 1.20, and will stop supporting\nPython 3.8 after April release.\n\nAs usual you can find the full list of PRs on GitHub under `the 8.9 milestone\n<https://github.com/ipython/ipython/milestone/111?closed=1>`__.\n\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.8.0:\n\nIPython 8.8.0\n-------------\n\nFirst release of IPython in 2023 as there was no release at the end of\nDecember.\n\nThis is an unusually big release (relatively speaking) with more than 15 Pull\nRequests merged.\n\nOf particular interest are:\n\n - :ghpull:`13852` that replaces the greedy completer and improves\n   completion, in particular for dictionary keys.\n - :ghpull:`13858` that adds ``py.typed`` to ``setup.cfg`` to make sure it is\n   bundled in wheels.\n - :ghpull:`13869` that implements tab completions for IPython options in the\n   shell when using `argcomplete <https://github.com/kislyuk/argcomplete>`. I\n   believe this also needs a recent version of Traitlets.\n - :ghpull:`13865` makes the ``inspector`` class of `InteractiveShell`\n   configurable.\n - :ghpull:`13880` that removes minor-version entrypoints as the minor version\n   entry points that would be included in the wheel would be the one of the\n   Python version that was used to build the ``whl`` file.\n\nIn no particular order, the rest of the changes update the test suite to be\ncompatible with Pygments 2.14, various docfixes, testing on more recent python\nversions and various updates.\n\nAs usual you can find the full list of PRs on GitHub under `the 8.8 milestone\n<https://github.com/ipython/ipython/milestone/110>`__.\n\nMany thanks to @krassowski for the many PRs and @jasongrout for reviewing and\nmerging contributions.\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.7.0:\n\nIPython 8.7.0\n-------------\n\n\nSmall release of IPython with a couple of bug fixes and new features for this\nmonth. Next month is the end of year, it is unclear if there will be a release\nclose to the new year's eve, or if the next release will be at the end of January.\n\nHere are a few of the relevant fixes,\nas usual you can find the full list of PRs on GitHub under `the 8.7 milestone\n<https://github.com/ipython/ipython/pulls?q=milestone%3A8.7>`__.\n\n\n   - :ghpull:`13834` bump the minimum prompt toolkit to 3.0.11.\n   - IPython shipped with the ``py.typed`` marker now, and we are progressively\n     adding more types. :ghpull:`13831`\n   - :ghpull:`13817` add configuration of code blacks formatting.\n\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.6.0:\n\nIPython 8.6.0\n-------------\n\nBack to a more regular release schedule (at least I try), as Friday is\nalready over by more than 24h hours. This is a slightly bigger release with a\nfew new features that contain no less than 25 PRs.\n\nWe'll notably found a couple of non negligible changes:\n\nThe ``install_ext`` and related functions have been removed after being\ndeprecated for years. You can use pip to install extensions. ``pip`` did not\nexist when ``install_ext`` was introduced. You can still load local extensions\nwithout installing them. Just set your ``sys.path`` for example. :ghpull:`13744`\n\nIPython now has extra entry points that use the major *and minor* version of\npython. For some of you this means that you can do a quick ``ipython3.10`` to\nlaunch IPython from the Python 3.10 interpreter, while still using Python 3.11\nas your main Python. :ghpull:`13743`\n\nThe completer matcher API has been improved. See :ghpull:`13745`. This should\nimprove the type inference and improve dict keys completions in many use case.\nThanks ``@krassowski`` for all the work, and the D.E. Shaw group for sponsoring\nit.\n\nThe color of error nodes in tracebacks can now be customized. See\n:ghpull:`13756`. This is a private attribute until someone finds the time to\nproperly add a configuration option. Note that with Python 3.11 that also shows\nthe relevant nodes in traceback, it would be good to leverage this information\n(plus the \"did you mean\" info added on attribute errors). But that's likely work\nI won't have time to do before long, so contributions welcome.\n\nAs we follow NEP 29, we removed support for numpy 1.19 :ghpull:`13760`.\n\n\nThe ``open()`` function present in the user namespace by default will now refuse\nto open the file descriptors 0,1,2 (stdin, out, err), to avoid crashing IPython.\nThis mostly occurs in teaching context when incorrect values get passed around.\n\n\nThe ``?``, ``??``, and corresponding ``pinfo``, ``pinfo2`` magics can now find\nobjects inside arrays. That is to say, the following now works::\n\n\n   >>> def my_func(*arg, **kwargs):pass\n   >>> container = [my_func]\n   >>> container[0]?\n\n\nIf ``container`` define a custom ``getitem``, this __will__ trigger the custom\nmethod. So don't put side effects in your ``getitems``. Thanks to the D.E. Shaw\ngroup for the request and sponsoring the work.\n\n\nAs usual you can find the full list of PRs on GitHub under `the 8.6 milestone\n<https://github.com/ipython/ipython/pulls?q=milestone%3A8.6>`__.\n\nThanks to all hacktoberfest contributors, please contribute to\n`closember.org <https://closember.org/>`__.\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.5.0:\n\nIPython 8.5.0\n-------------\n\nFirst release since a couple of month due to various reasons and timing preventing\nme for sticking to the usual monthly release the last Friday of each month. This\nis of non negligible size as it has more than two dozen PRs with various fixes\nan bug fixes.\n\nMany thanks to everybody who contributed PRs for your patience in review and\nmerges.\n\nHere is a non-exhaustive list of changes that have been implemented for IPython\n8.5.0. As usual you can find the full list of issues and PRs tagged with `the\n8.5 milestone\n<https://github.com/ipython/ipython/pulls?q=is%3Aclosed+milestone%3A8.5+>`__.\n\n - Added a shortcut for accepting auto suggestion. The End key shortcut for\n   accepting auto-suggestion This binding works in Vi mode too, provided\n   ``TerminalInteractiveShell.emacs_bindings_in_vi_insert_mode`` is set to be\n   ``True`` :ghpull:`13566`.\n\n - No popup in window for latex generation when generating latex (e.g. via\n   `_latex_repr_`) no popup window is shows under Windows. :ghpull:`13679`\n\n - Fixed error raised when attempting to tab-complete an input string with\n   consecutive periods or forward slashes (such as \"file:///var/log/...\").\n   :ghpull:`13675`\n\n - Relative filenames in Latex rendering :\n   The `latex_to_png_dvipng` command internally generates input and output file\n   arguments to `latex` and `dvipis`. These arguments are now generated as\n   relative files to the current working directory instead of absolute file\n   paths. This solves a problem where the current working directory contains\n   characters that are not handled properly by `latex` and `dvips`. There are\n   no changes to the user API. :ghpull:`13680`\n\n - Stripping decorators bug: Fixed bug which meant that ipython code blocks in\n   restructured text documents executed with the ipython-sphinx extension\n   skipped any lines of code containing python decorators. :ghpull:`13612`\n\n - Allow some modules with frozen dataclasses to be reloaded. :ghpull:`13732`\n - Fix paste magic on wayland. :ghpull:`13671`\n - show maxlen in deque's repr. :ghpull:`13648`\n\nRestore line numbers for Input\n------------------------------\n\nLine number information in tracebacks from input are restored.\nLine numbers from input were removed during the transition to v8 enhanced traceback reporting.\n\nSo, instead of::\n\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    Input In [3], in <cell line: 1>()\n    ----> 1 myfunc(2)\n\n    Input In [2], in myfunc(z)\n          1 def myfunc(z):\n    ----> 2     foo.boo(z-1)\n\n    File ~/code/python/ipython/foo.py:3, in boo(x)\n          2 def boo(x):\n    ----> 3     return 1/(1-x)\n\n    ZeroDivisionError: division by zero\n\nThe error traceback now looks like::\n\n      ---------------------------------------------------------------------------\n      ZeroDivisionError                         Traceback (most recent call last)\n      Cell In [3], line 1\n      ----> 1 myfunc(2)\n\n      Cell In [2], line 2, in myfunc(z)\n            1 def myfunc(z):\n      ----> 2     foo.boo(z-1)\n\n      File ~/code/python/ipython/foo.py:3, in boo(x)\n            2 def boo(x):\n      ----> 3     return 1/(1-x)\n\n      ZeroDivisionError: division by zero\n\nor, with xmode=Plain::\n\n    Traceback (most recent call last):\n      Cell In [12], line 1\n        myfunc(2)\n      Cell In [6], line 2 in myfunc\n        foo.boo(z-1)\n      File ~/code/python/ipython/foo.py:3 in boo\n        return 1/(1-x)\n    ZeroDivisionError: division by zero\n\n:ghpull:`13560`\n\nNew setting to silence warning if working inside a virtual environment\n----------------------------------------------------------------------\n\nPreviously, when starting IPython in a virtual environment without IPython installed (so IPython from the global environment is used), the following warning was printed:\n\n    Attempting to work in a virtualenv. If you encounter problems, please install IPython inside the virtualenv.\n\nThis warning can be permanently silenced by setting ``c.InteractiveShell.warn_venv`` to ``False`` (the default is ``True``).\n\n:ghpull:`13706`\n\n-------\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.4.0:\n\nIPython 8.4.0\n-------------\n\nAs for 7.34, this version contains a single fix:  fix uncaught BdbQuit exceptions on ipdb\nexit :ghpull:`13668`, and a single typo fix in documentation: :ghpull:`13682`\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n\n.. _version 8.3.0:\n\nIPython 8.3.0\n-------------\n\n - :ghpull:`13625`, using ``?``, ``??``, ``*?`` will not call\n   ``set_next_input`` as most frontend allow proper multiline editing and it was\n   causing issues for many users of multi-cell frontends. This has been backported to 7.33\n\n\n - :ghpull:`13600`, ``pre_run_*``-hooks will now have a ``cell_id`` attribute on\n   the info object when frontend provides it. This has been backported to 7.33\n\n - :ghpull:`13624`, fixed :kbd:`End` key being broken after accepting an\n   auto-suggestion.\n\n - :ghpull:`13657` fixed an issue where history from different sessions would be mixed.\n\n.. _version 8.2.0:\n\nIPython 8.2.0\n-------------\n\nIPython 8.2 mostly bring bugfixes to IPython.\n\n - Auto-suggestion can now be elected with the ``end`` key. :ghpull:`13566`\n - Some traceback issues with ``assert etb is not None`` have been fixed. :ghpull:`13588`\n - History is now pulled from the sqitel database and not from in-memory.\n   In particular when using the ``%paste`` magic, the content of the pasted text will\n   be part of the history and not the verbatim text ``%paste`` anymore. :ghpull:`13592`\n - Fix ``Ctrl-\\\\`` exit cleanup :ghpull:`13603`\n - Fixes to ``ultratb`` ipdb support when used outside of IPython. :ghpull:`13498`\n\n\nI am still trying to fix and investigate :ghissue:`13598`, which seems to be\nrandom, and would appreciate help if you find a reproducible minimal case. I've\ntried to make various changes to the codebase to mitigate it, but a proper fix\nwill be difficult without understanding the cause.\n\n\nAll the issues on pull-requests for this release can be found in the `8.2\nmilestone. <https://github.com/ipython/ipython/milestone/100>`__ . And some\ndocumentation only PR can be found as part of the `7.33 milestone\n<https://github.com/ipython/ipython/milestone/101>`__ (currently not released).\n\nThanks to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries.\n\n.. _version 8.1.1:\n\nIPython 8.1.1\n-------------\n\nFix an issue with virtualenv and Python 3.8 introduced in 8.1\n\nRevert :ghpull:`13537` (fix an issue with symlinks in virtualenv) that raises an\nerror in Python 3.8, and fixed in a different way in :ghpull:`13559`.\n\n.. _version 8.1:\n\nIPython 8.1.0\n-------------\n\nIPython 8.1 is the first minor release after 8.0 and fixes a number of bugs and\nupdates a few behaviors that were problematic with the 8.0 as with many new major\nrelease.\n\nNote that beyond the changes listed here, IPython 8.1.0 also contains all the\nfeatures listed in :ref:`version 7.32`.\n\n - Misc and multiple fixes around quotation auto-closing. It is now disabled by\n   default. Run with ``TerminalInteractiveShell.auto_match=True`` to re-enabled\n - Require pygments>=2.4.0 :ghpull:`13459`, this was implicit in the code, but\n   is now explicit in ``setup.cfg``/``setup.py``\n - Docs improvement of ``core.magic_arguments`` examples. :ghpull:`13433`\n - Multi-line edit executes too early with await. :ghpull:`13424`\n\n - ``black``  is back as an optional dependency, and autoformatting disabled by\n   default until some fixes are implemented (black improperly reformat magics).\n   :ghpull:`13471` Additionally the ability to use ``yapf`` as a code\n   reformatter has been added :ghpull:`13528` . You can use\n   ``TerminalInteractiveShell.autoformatter=\"black\"``,\n   ``TerminalInteractiveShell.autoformatter=\"yapf\"`` to re-enable auto formating\n   with black, or switch to yapf.\n\n - Fix and issue where ``display`` was not defined.\n\n - Auto suggestions are now configurable. Currently only\n   ``AutoSuggestFromHistory`` (default) and ``None``. new provider contribution\n   welcomed. :ghpull:`13475`\n\n - multiple packaging/testing improvement to simplify downstream packaging\n   (xfail with reasons, try to not access network...).\n\n - Update deprecation. ``InteractiveShell.magic`` internal method has been\n   deprecated for many years but did not emit a warning until now.\n\n - internal ``appended_to_syspath`` context manager has been deprecated.\n\n - fix an issue with symlinks in virtualenv :ghpull:`13537` (Reverted in 8.1.1)\n\n - Fix an issue with vim mode, where cursor would not be reset on exit :ghpull:`13472`\n\n - ipython directive now remove only known pseudo-decorators :ghpull:`13532`\n\n - ``IPython/lib/security`` which used to be used for jupyter notebook has been\n   removed.\n\n - Fix an issue where ``async with`` would execute on new lines. :ghpull:`13436`\n\n\nWe want to remind users that IPython is part of the Jupyter organisations, and\nthus governed by a Code of Conduct. Some of the behavior we have seen on GitHub is not acceptable.\nAbuse and non-respectful comments on discussion will not be tolerated.\n\nMany thanks to all the contributors to this release, many of the above fixed issues and\nnew features were done by first time contributors, showing there is still\nplenty of easy contribution possible in IPython\n. You can find all individual contributions\nto this milestone `on github <https://github.com/ipython/ipython/milestone/91>`__.\n\nThanks as well to the `D. E. Shaw group <https://deshaw.com/>`__ for sponsoring\nwork on IPython and related libraries. In particular the Lazy autoloading of\nmagics that you will find described in the 7.32 release notes.\n\n\n.. _version 8.0.1:\n\nIPython 8.0.1 (CVE-2022-21699)\n------------------------------\n\nIPython 8.0.1, 7.31.1 and 5.11 are security releases that change some default\nvalues in order to prevent potential Execution with Unnecessary Privileges.\n\nAlmost all version of IPython looks for configuration and profiles in current\nworking directory. Since IPython was developed before pip and environments\nexisted it was used a convenient way to load code/packages in a project\ndependant way.\n\nIn 2022, it is not necessary anymore, and can lead to confusing behavior where\nfor example cloning a repository and starting IPython or loading a notebook from\nany Jupyter-Compatible interface that has ipython set as a kernel can lead to\ncode execution.\n\n\nI did not find any standard way for packaged to advertise CVEs they fix, I'm\nthus trying to add a ``__patched_cves__`` attribute to the IPython module that\nlist the CVEs that should have been fixed. This attribute is informational only\nas if a executable has a flaw, this value can always be changed by an attacker.\n\n.. code::\n\n    In [1]: import IPython\n\n    In [2]: IPython.__patched_cves__\n    Out[2]: {'CVE-2022-21699'}\n\n    In [3]: 'CVE-2022-21699' in IPython.__patched_cves__\n    Out[3]: True\n\nThus starting with this version:\n\n - The current working directory is not searched anymore for profiles or\n   configurations files.\n - Added a ``__patched_cves__`` attribute (set of strings) to IPython module that contain\n   the list of fixed CVE. This is informational only.\n\nFurther details can be read on the `GitHub Advisory <https://github.com/ipython/ipython/security/advisories/GHSA-pq7m-3gw7-gq5x>`__\n\n\n.. _version 8.0:\n\nIPython 8.0\n-----------\n\nIPython 8.0 is bringing a large number of new features and improvements to both the\nuser of the terminal and of the kernel via Jupyter. The removal of compatibility\nwith an older version of Python is also the opportunity to do a couple of\nperformance improvements in particular with respect to startup time.\nThe 8.x branch started diverging from its predecessor around IPython 7.12\n(January 2020).\n\nThis release contains 250+ pull requests, in addition to many of the features\nand backports that have made it to the 7.x branch. Please see the\n`8.0 milestone <https://github.com/ipython/ipython/milestone/73?closed=1>`__ for the full list of pull requests.\n\nPlease feel free to send pull requests to update those notes after release,\nI have likely forgotten a few things reviewing 250+ PRs.\n\nDependencies changes/downstream packaging\n-----------------------------------------\n\nMost of our building steps have been changed to be (mostly) declarative\nand follow PEP 517. We are trying to completely remove ``setup.py`` (:ghpull:`13238`) and are\nlooking for help to do so.\n\n - minimum supported ``traitlets`` version is now 5+\n - we now require ``stack_data``\n - minimal Python is now 3.8\n - ``nose`` is not a testing requirement anymore\n - ``pytest`` replaces nose.\n - ``iptest``/``iptest3`` cli entrypoints do not exist anymore.\n - the minimum officially \u200bsupported ``numpy`` version has been bumped, but this should\n   not have much effect on packaging.\n\n\nDeprecation and removal\n-----------------------\n\nWe removed almost all features, arguments, functions, and modules that were\nmarked as deprecated between IPython 1.0 and 5.0. As a reminder, 5.0 was released\nin 2016, and 1.0 in 2013. Last release of the 5 branch was 5.10.0, in May 2020.\nThe few remaining deprecated features we left have better deprecation warnings\nor have been turned into explicit errors for better error messages.\n\nI will use this occasion to add the following requests to anyone emitting a\ndeprecation warning:\n\n - Please add at least ``stacklevel=2`` so that the warning is emitted into the\n   caller context, and not the callee one.\n - Please add **since which version** something is deprecated.\n\nAs a side note, it is much easier to conditionally compare version\nnumbers rather than using ``try/except`` when functionality changes with a version.\n\nI won't list all the removed features here, but modules like ``IPython.kernel``,\nwhich was just a shim module around ``ipykernel`` for the past 8 years, have been\nremoved, and so many other similar things that pre-date the name **Jupyter**\nitself.\n\nWe no longer need to add ``IPython.extensions`` to the PYTHONPATH because that is being\nhandled by ``load_extension``.\n\nWe are also removing ``Cythonmagic``, ``sympyprinting`` and ``rmagic`` as they are now in\nother packages and no longer need to be inside IPython.\n\n\nDocumentation\n-------------\n\nThe majority of our docstrings have now been reformatted and automatically fixed by\nthe experimental `V\u00e9lin <https://pypi.org/project/velin/>`_ project to conform\nto numpydoc.\n\nType annotations\n----------------\n\nWhile IPython itself is highly dynamic and can't be completely typed, many of\nthe functions now have type annotations, and part of the codebase is now checked\nby mypy.\n\n\nFeatured changes\n----------------\n\nHere is a features list of changes in IPython 8.0. This is of course non-exhaustive.\nPlease note as well that many features have been added in the 7.x branch as well\n(and hence why you want to read the 7.x what's new notes), in particular\nfeatures contributed by QuantStack (with respect to debugger protocol and Xeus\nPython), as well as many debugger features that I was pleased to implement as\npart of my work at QuanSight and sponsored by DE Shaw.\n\nTraceback improvements\n~~~~~~~~~~~~~~~~~~~~~~\n\nPreviously, error tracebacks for errors happening in code cells were showing a\nhash, the one used for compiling the Python AST::\n\n    In [1]: def foo():\n    ...:     return 3 / 0\n    ...:\n\n    In [2]: foo()\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    <ipython-input-2-c19b6d9633cf> in <module>\n    ----> 1 foo()\n\n    <ipython-input-1-1595a74c32d5> in foo()\n        1 def foo():\n    ----> 2     return 3 / 0\n        3\n\n    ZeroDivisionError: division by zero\n\nThe error traceback is now correctly formatted, showing the cell number in which the error happened::\n\n    In [1]: def foo():\n    ...:     return 3 / 0\n    ...:\n\n    Input In [2]: foo()\n    ---------------------------------------------------------------------------\n    ZeroDivisionError                         Traceback (most recent call last)\n    input In [2], in <module>\n    ----> 1 foo()\n\n    Input In [1], in foo()\n        1 def foo():\n    ----> 2     return 3 / 0\n\n    ZeroDivisionError: division by zero\n\nThe ``stack_data`` package has been integrated, which provides smarter information in the traceback;\nin particular it will highlight the AST node where an error occurs which can help to quickly narrow down errors.\n\nFor example in the following snippet::\n\n    def foo(i):\n        x = [[[0]]]\n        return x[0][i][0]\n\n\n    def bar():\n        return foo(0) + foo(\n            1\n        ) + foo(2)\n\n\ncalling ``bar()`` would raise an ``IndexError`` on the return line of ``foo``,\nand IPython 8.0 is capable of telling you where the index error occurs::\n\n\n    IndexError\n    Input In [2], in <module>\n    ----> 1 bar()\n            ^^^^^\n\n    Input In [1], in bar()\n          6 def bar():\n    ----> 7     return foo(0) + foo(\n                                ^^^^\n          8         1\n             ^^^^^^^^\n          9     ) + foo(2)\n             ^^^^\n\n    Input In [1], in foo(i)\n          1 def foo(i):\n          2     x = [[[0]]]\n    ----> 3     return x[0][i][0]\n                       ^^^^^^^\n\nThe corresponding locations marked here with ``^`` will show up highlighted in\nthe terminal and notebooks.\n\nFinally, a colon ``::`` and line number is appended after a filename in\ntraceback::\n\n\n    ZeroDivisionError               Traceback (most recent call last)\n    File ~/error.py:4, in <module>\n          1 def f():\n          2     1/0\n    ----> 4 f()\n\n    File ~/error.py:2, in f()\n          1 def f():\n    ----> 2     1/0\n\nMany terminals and editors have integrations enabling you to directly jump to the\nrelevant file/line when this syntax is used, so this small addition may have a high\nimpact on productivity.\n\n\nAutosuggestions\n~~~~~~~~~~~~~~~\n\nAutosuggestion is a very useful feature available in `fish <https://fishshell.com/>`__, `zsh <https://en.wikipedia.org/wiki/Z_shell>`__, and `prompt-toolkit <https://python-prompt-toolkit.readthedocs.io/en/master/pages/asking_for_input.html#auto-suggestion>`__.\n\n`Ptpython <https://github.com/prompt-toolkit/ptpython#ptpython>`__ allows users to enable this feature in\n`ptpython/config.py <https://github.com/prompt-toolkit/ptpython/blob/master/examples/ptpython_config/config.py#L90>`__.\n\nThis feature allows users to accept autosuggestions with ctrl e, ctrl f,\nor right arrow as described below.\n\n1. Start ipython\n\n.. image:: ../_images/8.0/auto_suggest_1_prompt_no_text.png\n\n2. Run ``print(\"hello\")``\n\n.. image:: ../_images/8.0/auto_suggest_2_print_hello_suggest.png\n\n3. start typing ``print`` again to see the autosuggestion\n\n.. image:: ../_images/8.0/auto_suggest_3_print_hello_suggest.png\n\n4. Press ``ctrl-f``, or ``ctrl-e``, or ``right-arrow`` to accept the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_4_print_hello.png\n\nYou can also complete word by word:\n\n1. Run ``def say_hello(): print(\"hello\")``\n\n.. image:: ../_images/8.0/auto_suggest_second_prompt.png\n\n2. Start typing  the first letter if ``def`` to see the autosuggestion\n\n.. image:: ../_images/8.0/auto_suggest_d_phantom.png\n\n3. Press ``alt-f`` (or ``escape`` followed by ``f``), to accept the first word of the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_def_phantom.png\n\nImportantly, this feature does not interfere with tab completion:\n\n1. After running ``def say_hello(): print(\"hello\")``, press d\n\n.. image:: ../_images/8.0/auto_suggest_d_phantom.png\n\n2. Press Tab to start tab completion\n\n.. image:: ../_images/8.0/auto_suggest_d_completions.png\n\n3A. Press Tab again to select the first option\n\n.. image:: ../_images/8.0/auto_suggest_def_completions.png\n\n3B. Press ``alt f`` (``escape``, ``f``) to accept to accept the first word of the suggestion\n\n.. image:: ../_images/8.0/auto_suggest_def_phantom.png\n\n3C. Press ``ctrl-f`` or ``ctrl-e`` to accept the entire suggestion\n\n.. image:: ../_images/8.0/auto_suggest_match_parens.png\n\n\nCurrently, autosuggestions are only shown in the emacs or vi insert editing modes:\n\n- The ctrl e, ctrl f, and alt f shortcuts work by default in emacs mode.\n- To use these shortcuts in vi insert mode, you will have to create `custom keybindings in your config.py <https://github.com/mskar/setup/commit/2892fcee46f9f80ef7788f0749edc99daccc52f4/>`__.\n\n\nShow pinfo information in ipdb using \"?\" and \"??\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn IPDB, it is now possible to show the information about an object using \"?\"\nand \"??\", in much the same way that it can be done when using the IPython prompt::\n\n    ipdb> partial?\n    Init signature: partial(self, /, *args, **kwargs)\n    Docstring:\n    partial(func, *args, **keywords) - new function with partial application\n    of the given arguments and keywords.\n    File:           ~/.pyenv/versions/3.8.6/lib/python3.8/functools.py\n    Type:           type\n    Subclasses:\n\nPreviously, ``pinfo`` or ``pinfo2`` command had to be used for this purpose.\n\n\nAutoreload 3 feature\n~~~~~~~~~~~~~~~~~~~~\n\nExample: When an IPython session is run with the 'autoreload' extension loaded,\nyou will now have the option '3' to select, which means the following:\n\n    1. replicate all functionality from option 2\n    2. autoload all new funcs/classes/enums/globals from the module when they are added\n    3. autoload all newly imported funcs/classes/enums/globals from external modules\n\nTry ``%autoreload 3`` in an IPython session after running ``%load_ext autoreload``.\n\nFor more information please see the following unit test : ``extensions/tests/test_autoreload.py:test_autoload_newly_added_objects``\n\nAuto formatting with black in the CLI\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis feature was present in 7.x, but disabled by default.\n\nIn 8.0, input was automatically reformatted with Black when black was installed.\nThis feature has been reverted for the time being.\nYou can re-enable it by setting ``TerminalInteractiveShell.autoformatter`` to ``\"black\"``\n\nHistory Range Glob feature\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPreviously, when using ``%history``, users could specify either\na range of sessions and lines, for example:\n\n.. code-block:: python\n\n   ~8/1-~6/5   # see history from the first line of 8 sessions ago,\n               # to the fifth line of 6 sessions ago.``\n\nOr users could specify a glob pattern:\n\n.. code-block:: python\n\n   -g <pattern>  # glob ALL history for the specified pattern.\n\nHowever users could *not* specify both.\n\nIf a user *did* specify both a range and a glob pattern,\nthen the glob pattern would be used (globbing *all* history) *and the range would be ignored*.\n\nWith this enhancement, if a user specifies both a range and a glob pattern, then the glob pattern will be applied to the specified range of history.\n\nDon't start a multi-line cell with sunken parenthesis\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFrom now on, IPython will not ask for the next line of input when given a single\nline with more closing than opening brackets. For example, this means that if\nyou (mis)type ``]]`` instead of ``[]``, a ``SyntaxError`` will show up, instead of\nthe ``...:`` prompt continuation.\n\nIPython shell for ipdb interact\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ipdb ``interact`` starts an IPython shell instead of Python's built-in ``code.interact()``.\n\nAutomatic Vi prompt stripping\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen pasting code into IPython, it will strip the leading prompt characters if\nthere are any. For example, you can paste the following code into the console -\nit will still work, even though each line is prefixed with prompts (``In``,\n``Out``)::\n\n    In [1]: 2 * 2 == 4\n    Out[1]: True\n\n    In [2]: print(\"This still works as pasted\")\n\n\nPreviously, this was not the case for the Vi-mode prompts::\n\n    In [1]: [ins] In [13]: 2 * 2 == 4\n       ...: Out[13]: True\n       ...:\n      File \"<ipython-input-1-727bb88eaf33>\", line 1\n        [ins] In [13]: 2 * 2 == 4\n              ^\n    SyntaxError: invalid syntax\n\nThis is now fixed, and Vi prompt prefixes - ``[ins]`` and ``[nav]`` -  are\nskipped just as the normal ``In`` would be.\n\nIPython shell can be started in the Vi mode using ``ipython --TerminalInteractiveShell.editing_mode=vi``,\nYou should be able to change mode dynamically with ``%config TerminalInteractiveShell.editing_mode='vi'``\n\nEmpty History Ranges\n~~~~~~~~~~~~~~~~~~~~\n\nA number of magics that take history ranges can now be used with an empty\nrange. These magics are:\n\n * ``%save``\n * ``%load``\n * ``%pastebin``\n * ``%pycat``\n\nUsing them this way will make them take the history of the current session up\nto the point of the magic call (such that the magic itself will not be\nincluded).\n\nTherefore it is now possible to save the whole history to a file using\n``%save <filename>``, load and edit it using ``%load`` (makes for a nice usage\nwhen followed with :kbd:`F2`), send it to `dpaste.org <http://dpast.org>`_ using\n``%pastebin``, or view the whole thing syntax-highlighted with a single\n``%pycat``.\n\n\nWindows timing implementation: Switch to process_time\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTiming on Windows, for example with ``%%time``,  was changed from being based on ``time.perf_counter``\n(which counted time even when the process was sleeping) to being based on ``time.process_time`` instead\n(which only counts CPU time). This brings it closer to the behavior on Linux. See :ghpull:`12984`.\n\nMiscellaneous\n~~~~~~~~~~~~~\n - Non-text formatters are not disabled in the terminal, which should simplify\n   writing extensions displaying images or other mimetypes in supporting terminals.\n   :ghpull:`12315`\n - It is now possible to automatically insert matching brackets in Terminal IPython using the\n   ``TerminalInteractiveShell.auto_match=True`` option. :ghpull:`12586`\n - We are thinking of deprecating the current ``%%javascript`` magic in favor of a better replacement. See :ghpull:`13376`.\n - ``~`` is now expanded when part of a path in most magics :ghpull:`13385`\n - ``%/%%timeit`` magic now adds a comma every thousands to make reading a long number easier :ghpull:`13379`\n - ``\"info\"`` messages can now be customised to hide some fields :ghpull:`13343`\n - ``collections.UserList`` now pretty-prints :ghpull:`13320`\n - The debugger now has a persistent history, which should make it less\n   annoying to retype commands :ghpull:`13246`\n - ``!pip`` ``!conda`` ``!cd`` or ``!ls`` are likely doing the wrong thing. We\n   now warn users if they use one of those commands. :ghpull:`12954`\n - Make ``%precision`` work for ``numpy.float64`` type :ghpull:`12902`\n\nRe-added support for XDG config directories\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nXDG support through the years comes and goes. There is a tension between having\nan identical location for configuration in all platforms versus having simple instructions.\nAfter initial failures a couple of years ago, IPython was modified to automatically migrate XDG\nconfig files back into ``~/.ipython``. That migration code has now been removed.\nIPython now checks the XDG locations, so if you _manually_ move your config\nfiles to your preferred location, IPython will not move them back.\n\n\nPreparing for Python 3.10\n-------------------------\n\nTo prepare for Python 3.10, we have started working on removing reliance and\nany dependency that is not compatible with Python 3.10. This includes migrating our\ntest suite to pytest and starting to remove nose. This also means that the\n``iptest`` command is now gone and all testing is via pytest.\n\nThis was in large part thanks to the NumFOCUS Small Developer grant, which enabled us to\nallocate \\$4000 to hire `Nikita Kniazev (@Kojoley) <https://github.com/Kojoley>`_,\nwho did a fantastic job at updating our code base, migrating to pytest, pushing\nour coverage, and fixing a large number of bugs. I highly recommend contacting\nthem if you need help with C++ and Python projects.\n\nYou can find all relevant issues and PRs with `the SDG 2021 tag <https://github.com/ipython/ipython/issues?q=label%3A%22Numfocus+SDG+2021%22+>`__\n\nRemoving support for older Python versions\n------------------------------------------\n\n\nWe are removing support for Python up through 3.7, allowing internal code to use the more\nefficient ``pathlib`` and to make better use of type annotations.\n\n.. image:: ../_images/8.0/pathlib_pathlib_everywhere.jpg\n   :alt: \"Meme image of Toy Story with Woody and Buzz, with the text 'pathlib, pathlib everywhere'\"\n\n\nWe had about 34 PRs only to update some logic to update some functions from managing strings to\nusing Pathlib.\n\nThe completer has also seen significant updates and now makes use of newer Jedi APIs,\noffering faster and more reliable tab completion.\n\nMisc Statistics\n---------------\n\nHere are some numbers::\n\n    7.x: 296 files, 12561 blank lines, 20282 comments, 35142 line of code.\n    8.0: 252 files, 12053 blank lines, 19232 comments, 34505 line of code.\n\n    $ git diff --stat 7.x...master  | tail -1\n    340 files changed, 13399 insertions(+), 12421 deletions(-)\n\nWe have commits from 162 authors, who contributed 1916 commits in 23 month, excluding merges (to not bias toward\nmaintainers pushing buttons).::\n\n   $ git shortlog  -s --no-merges  7.x...master | sort -nr\n   535\tMatthias Bussonnier\n    86\tNikita Kniazev\n    69\tBlazej Michalik\n    49\tSamuel Gaist\n    27\tItamar Turner-Trauring\n    18\tSpas Kalaydzhisyki\n    17\tThomas Kluyver\n    17\tQuentin Peter\n    17\tJames Morris\n    17\tArtur Svistunov\n    15\tBart Skowron\n    14\tAlex Hall\n    13\trushabh-v\n    13\tTerry Davis\n    13\tBenjamin Ragan-Kelley\n     8\tmartinRenou\n     8\tfarisachugthai\n     7\tdswij\n     7\tGal B\n     7\tCorentin Cadiou\n     6\tyuji96\n     6\tMartin Skarzynski\n     6\tJustin Palmer\n     6\tDaniel Goldfarb\n     6\tBen Greiner\n     5\tSammy Al Hashemi\n     5\tPaul Ivanov\n     5\tInception95\n     5\tEyenpi\n     5\tDouglas Blank\n     5\tCoco Mishra\n     5\tBibo Hao\n     5\tAndr\u00e9 A. Gomes\n     5\tAhmed Fasih\n     4\ttakuya fujiwara\n     4\tpalewire\n     4\tThomas A Caswell\n     4\tTalley Lambert\n     4\tScott Sanderson\n     4\tRam Rachum\n     4\tNick Muoh\n     4\tNathan Goldbaum\n     4\tMithil Poojary\n     4\tMichael T\n     4\tJakub Klus\n     4\tIan Castleden\n     4\tEli Rykoff\n     4\tAshwin Vishnu\n     3\t\u8c2d\u4e5d\u9f0e\n     3\tsleeping\n     3\tSylvain Corlay\n     3\tPeter Corke\n     3\tPaul Bissex\n     3\tMatthew Feickert\n     3\tFernando Perez\n     3\tEric Wieser\n     3\tDaniel Mietchen\n     3\tAditya Sathe\n     3\t007vedant\n     2\trchiodo\n     2\tnicolaslazo\n     2\tluttik\n     2\tgorogoroumaru\n     2\tfoobarbyte\n     2\tbar-hen\n     2\tTheo Ouzhinski\n     2\tStrawkage\n     2\tSamreen Zarroug\n     2\tPete Blois\n     2\tMeysam Azad\n     2\tMatthieu Ancellin\n     2\tMark Schmitz\n     2\tMaor Kleinberger\n     2\tMRCWirtz\n     2\tLumir Balhar\n     2\tJulien Rabinow\n     2\tJuan Luis Cano Rodr\u00edguez\n     2\tJoyce Er\n     2\tJakub\n     2\tFaris A Chugthai\n     2\tEthan Madden\n     2\tDimitri Papadopoulos\n     2\tDiego Fernandez\n     2\tDaniel Shimon\n     2\tCoco Bennett\n     2\tCarlos Cordoba\n     2\tBoyuan Liu\n     2\tBaoGiang HoangVu\n     2\tAugusto\n     2\tArthur Svistunov\n     2\tArthur Moreira\n     2\tAli Nabipour\n     2\tAdam Hackbarth\n     1\trichard\n     1\tlinar-jether\n     1\tlbennett\n     1\tjuacrumar\n     1\tgpotter2\n     1\tdigitalvirtuoso\n     1\tdalthviz\n     1\tYonatan Goldschmidt\n     1\tTomasz K\u0142oczko\n     1\tTobias Bengfort\n     1\tTimur Kushukov\n     1\tThomas\n     1\tSnir Broshi\n     1\tShao Yang Hong\n     1\tSanjana-03\n     1\tRomulo Filho\n     1\tRodolfo Carvalho\n     1\tRichard Shadrach\n     1\tReilly Tucker Siemens\n     1\tRakessh Roshan\n     1\tPiers Titus van der Torren\n     1\tPhanatosZou\n     1\tPavel Safronov\n     1\tPaulo S. Costa\n     1\tPaul McCarthy\n     1\tNotWearingPants\n     1\tNaelson Douglas\n     1\tMichael Tiemann\n     1\tMatt Wozniski\n     1\tMarkus Wageringel\n     1\tMarcus Wirtz\n     1\tMarcio Mazza\n     1\tLum\u00edr 'Frenzy' Balhar\n     1\tLightyagami1\n     1\tLeon Anavi\n     1\tLeafyLi\n     1\tL0uisJ0shua\n     1\tKyle Cutler\n     1\tKrzysztof Cybulski\n     1\tKevin Kirsche\n     1\tKIU Shueng Chuan\n     1\tJonathan Slenders\n     1\tJay Qi\n     1\tJake VanderPlas\n     1\tIwan Briquemont\n     1\tHussaina Begum Nandyala\n     1\tGordon Ball\n     1\tGabriel Simonetto\n     1\tFrank Tobia\n     1\tErik\n     1\tElliott Sales de Andrade\n     1\tDaniel Hahler\n     1\tDan Green-Leipciger\n     1\tDan Green\n     1\tDamian Yurzola\n     1\tCoon, Ethan T\n     1\tCarol Willing\n     1\tBrian Lee\n     1\tBrendan Gerrity\n     1\tBlake Griffin\n     1\tBastian Ebeling\n     1\tBartosz Telenczuk\n     1\tAnkitsingh6299\n     1\tAndrew Port\n     1\tAndrew J. Hesford\n     1\tAlbert Zhang\n     1\tAdam Johnson\n\nThis does not, of course, represent non-code contributions, for which we are also grateful.\n\n\nAPI Changes using Frappuccino\n-----------------------------\n\nThis is an experimental exhaustive API difference using `Frappuccino <https://pypi.org/project/frappuccino/>`_\n\n\nThe following items are new in IPython 8.0 ::\n\n    + IPython.core.async_helpers.get_asyncio_loop()\n    + IPython.core.completer.Dict\n    + IPython.core.completer.Pattern\n    + IPython.core.completer.Sequence\n    + IPython.core.completer.__skip_doctest__\n    + IPython.core.debugger.Pdb.precmd(self, line)\n    + IPython.core.debugger.__skip_doctest__\n    + IPython.core.display.__getattr__(name)\n    + IPython.core.display.warn\n    + IPython.core.display_functions\n    + IPython.core.display_functions.DisplayHandle\n    + IPython.core.display_functions.DisplayHandle.display(self, obj, **kwargs)\n    + IPython.core.display_functions.DisplayHandle.update(self, obj, **kwargs)\n    + IPython.core.display_functions.__all__\n    + IPython.core.display_functions.__builtins__\n    + IPython.core.display_functions.__cached__\n    + IPython.core.display_functions.__doc__\n    + IPython.core.display_functions.__file__\n    + IPython.core.display_functions.__loader__\n    + IPython.core.display_functions.__name__\n    + IPython.core.display_functions.__package__\n    + IPython.core.display_functions.__spec__\n    + IPython.core.display_functions.b2a_hex\n    + IPython.core.display_functions.clear_output(wait=False)\n    + IPython.core.display_functions.display(*objs, include='None', exclude='None', metadata='None', transient='None', display_id='None', raw=False, clear=False, **kwargs)\n    + IPython.core.display_functions.publish_display_data(data, metadata='None', source='<deprecated>', *, transient='None', **kwargs)\n    + IPython.core.display_functions.update_display(obj, *, display_id, **kwargs)\n    + IPython.core.extensions.BUILTINS_EXTS\n    + IPython.core.inputtransformer2.has_sunken_brackets(tokens)\n    + IPython.core.interactiveshell.Callable\n    + IPython.core.interactiveshell.__annotations__\n    + IPython.core.ultratb.List\n    + IPython.core.ultratb.Tuple\n    + IPython.lib.pretty.CallExpression\n    + IPython.lib.pretty.CallExpression.factory(name)\n    + IPython.lib.pretty.RawStringLiteral\n    + IPython.lib.pretty.RawText\n    + IPython.terminal.debugger.TerminalPdb.do_interact(self, arg)\n    + IPython.terminal.embed.Set\n\nThe following items have been removed (or moved to superclass)::\n\n    - IPython.core.application.BaseIPythonApplication.initialize_subcommand\n    - IPython.core.completer.Sentinel\n    - IPython.core.completer.skip_doctest\n    - IPython.core.debugger.Tracer\n    - IPython.core.display.DisplayHandle\n    - IPython.core.display.DisplayHandle.display\n    - IPython.core.display.DisplayHandle.update\n    - IPython.core.display.b2a_hex\n    - IPython.core.display.clear_output\n    - IPython.core.display.display\n    - IPython.core.display.publish_display_data\n    - IPython.core.display.update_display\n    - IPython.core.excolors.Deprec\n    - IPython.core.excolors.ExceptionColors\n    - IPython.core.history.warn\n    - IPython.core.hooks.late_startup_hook\n    - IPython.core.hooks.pre_run_code_hook\n    - IPython.core.hooks.shutdown_hook\n    - IPython.core.interactiveshell.InteractiveShell.init_deprecation_warnings\n    - IPython.core.interactiveshell.InteractiveShell.init_readline\n    - IPython.core.interactiveshell.InteractiveShell.write\n    - IPython.core.interactiveshell.InteractiveShell.write_err\n    - IPython.core.interactiveshell.get_default_colors\n    - IPython.core.interactiveshell.removed_co_newlocals\n    - IPython.core.magics.execution.ExecutionMagics.profile_missing_notice\n    - IPython.core.magics.script.PIPE\n    - IPython.core.prefilter.PrefilterManager.init_transformers\n    - IPython.core.release.classifiers\n    - IPython.core.release.description\n    - IPython.core.release.keywords\n    - IPython.core.release.long_description\n    - IPython.core.release.name\n    - IPython.core.release.platforms\n    - IPython.core.release.url\n    - IPython.core.ultratb.VerboseTB.format_records\n    - IPython.core.ultratb.find_recursion\n    - IPython.core.ultratb.findsource\n    - IPython.core.ultratb.fix_frame_records_filenames\n    - IPython.core.ultratb.inspect_error\n    - IPython.core.ultratb.is_recursion_error\n    - IPython.core.ultratb.with_patch_inspect\n    - IPython.external.__all__\n    - IPython.external.__builtins__\n    - IPython.external.__cached__\n    - IPython.external.__doc__\n    - IPython.external.__file__\n    - IPython.external.__loader__\n    - IPython.external.__name__\n    - IPython.external.__package__\n    - IPython.external.__path__\n    - IPython.external.__spec__\n    - IPython.kernel.KernelConnectionInfo\n    - IPython.kernel.__builtins__\n    - IPython.kernel.__cached__\n    - IPython.kernel.__warningregistry__\n    - IPython.kernel.pkg\n    - IPython.kernel.protocol_version\n    - IPython.kernel.protocol_version_info\n    - IPython.kernel.src\n    - IPython.kernel.version_info\n    - IPython.kernel.warn\n    - IPython.lib.backgroundjobs\n    - IPython.lib.backgroundjobs.BackgroundJobBase\n    - IPython.lib.backgroundjobs.BackgroundJobBase.run\n    - IPython.lib.backgroundjobs.BackgroundJobBase.traceback\n    - IPython.lib.backgroundjobs.BackgroundJobExpr\n    - IPython.lib.backgroundjobs.BackgroundJobExpr.call\n    - IPython.lib.backgroundjobs.BackgroundJobFunc\n    - IPython.lib.backgroundjobs.BackgroundJobFunc.call\n    - IPython.lib.backgroundjobs.BackgroundJobManager\n    - IPython.lib.backgroundjobs.BackgroundJobManager.flush\n    - IPython.lib.backgroundjobs.BackgroundJobManager.new\n    - IPython.lib.backgroundjobs.BackgroundJobManager.remove\n    - IPython.lib.backgroundjobs.BackgroundJobManager.result\n    - IPython.lib.backgroundjobs.BackgroundJobManager.status\n    - IPython.lib.backgroundjobs.BackgroundJobManager.traceback\n    - IPython.lib.backgroundjobs.__builtins__\n    - IPython.lib.backgroundjobs.__cached__\n    - IPython.lib.backgroundjobs.__doc__\n    - IPython.lib.backgroundjobs.__file__\n    - IPython.lib.backgroundjobs.__loader__\n    - IPython.lib.backgroundjobs.__name__\n    - IPython.lib.backgroundjobs.__package__\n    - IPython.lib.backgroundjobs.__spec__\n    - IPython.lib.kernel.__builtins__\n    - IPython.lib.kernel.__cached__\n    - IPython.lib.kernel.__doc__\n    - IPython.lib.kernel.__file__\n    - IPython.lib.kernel.__loader__\n    - IPython.lib.kernel.__name__\n    - IPython.lib.kernel.__package__\n    - IPython.lib.kernel.__spec__\n    - IPython.lib.kernel.__warningregistry__\n    - IPython.paths.fs_encoding\n    - IPython.terminal.debugger.DEFAULT_BUFFER\n    - IPython.terminal.debugger.cursor_in_leading_ws\n    - IPython.terminal.debugger.emacs_insert_mode\n    - IPython.terminal.debugger.has_selection\n    - IPython.terminal.debugger.vi_insert_mode\n    - IPython.terminal.interactiveshell.DISPLAY_BANNER_DEPRECATED\n    - IPython.terminal.ipapp.TerminalIPythonApp.parse_command_line\n    - IPython.testing.test\n    - IPython.utils.contexts.NoOpContext\n    - IPython.utils.io.IOStream\n    - IPython.utils.io.IOStream.close\n    - IPython.utils.io.IOStream.write\n    - IPython.utils.io.IOStream.writelines\n    - IPython.utils.io.__warningregistry__\n    - IPython.utils.io.atomic_writing\n    - IPython.utils.io.stderr\n    - IPython.utils.io.stdin\n    - IPython.utils.io.stdout\n    - IPython.utils.io.unicode_std_stream\n    - IPython.utils.path.get_ipython_cache_dir\n    - IPython.utils.path.get_ipython_dir\n    - IPython.utils.path.get_ipython_module_path\n    - IPython.utils.path.get_ipython_package_dir\n    - IPython.utils.path.locate_profile\n    - IPython.utils.path.unquote_filename\n    - IPython.utils.py3compat.PY2\n    - IPython.utils.py3compat.PY3\n    - IPython.utils.py3compat.buffer_to_bytes\n    - IPython.utils.py3compat.builtin_mod_name\n    - IPython.utils.py3compat.cast_bytes\n    - IPython.utils.py3compat.getcwd\n    - IPython.utils.py3compat.isidentifier\n    - IPython.utils.py3compat.u_format\n\nThe following signatures differ between 7.x and 8.0::\n\n    - IPython.core.completer.IPCompleter.unicode_name_matches(self, text)\n    + IPython.core.completer.IPCompleter.unicode_name_matches(text)\n\n    - IPython.core.completer.match_dict_keys(keys, prefix, delims)\n    + IPython.core.completer.match_dict_keys(keys, prefix, delims, extra_prefix='None')\n\n    - IPython.core.interactiveshell.InteractiveShell.object_inspect_mime(self, oname, detail_level=0)\n    + IPython.core.interactiveshell.InteractiveShell.object_inspect_mime(self, oname, detail_level=0, omit_sections='()')\n\n    - IPython.core.interactiveshell.InteractiveShell.set_hook(self, name, hook, priority=50, str_key='None', re_key='None', _warn_deprecated=True)\n    + IPython.core.interactiveshell.InteractiveShell.set_hook(self, name, hook, priority=50, str_key='None', re_key='None')\n\n    - IPython.core.oinspect.Inspector.info(self, obj, oname='', formatter='None', info='None', detail_level=0)\n    + IPython.core.oinspect.Inspector.info(self, obj, oname='', info='None', detail_level=0)\n\n    - IPython.core.oinspect.Inspector.pinfo(self, obj, oname='', formatter='None', info='None', detail_level=0, enable_html_pager=True)\n    + IPython.core.oinspect.Inspector.pinfo(self, obj, oname='', formatter='None', info='None', detail_level=0, enable_html_pager=True, omit_sections='()')\n\n    - IPython.core.profiledir.ProfileDir.copy_config_file(self, config_file, path='None', overwrite=False)\n    + IPython.core.profiledir.ProfileDir.copy_config_file(self, config_file, path, overwrite=False)\n\n    - IPython.core.ultratb.VerboseTB.format_record(self, frame, file, lnum, func, lines, index)\n    + IPython.core.ultratb.VerboseTB.format_record(self, frame_info)\n\n    - IPython.terminal.embed.InteractiveShellEmbed.mainloop(self, local_ns='None', module='None', stack_depth=0, display_banner='None', global_ns='None', compile_flags='None')\n    + IPython.terminal.embed.InteractiveShellEmbed.mainloop(self, local_ns='None', module='None', stack_depth=0, compile_flags='None')\n\n    - IPython.terminal.embed.embed(**kwargs)\n    + IPython.terminal.embed.embed(*, header='', compile_flags='None', **kwargs)\n\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.interact(self, display_banner='<object object at 0xffffff>')\n    + IPython.terminal.interactiveshell.TerminalInteractiveShell.interact(self)\n\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop(self, display_banner='<object object at 0xffffff>')\n    + IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop(self)\n\n    - IPython.utils.path.get_py_filename(name, force_win32='None')\n    + IPython.utils.path.get_py_filename(name)\n\nThe following are new attributes (that might be inherited)::\n\n    + IPython.core.completer.IPCompleter.unicode_names\n    + IPython.core.debugger.InterruptiblePdb.precmd\n    + IPython.core.debugger.Pdb.precmd\n    + IPython.core.ultratb.AutoFormattedTB.has_colors\n    + IPython.core.ultratb.ColorTB.has_colors\n    + IPython.core.ultratb.FormattedTB.has_colors\n    + IPython.core.ultratb.ListTB.has_colors\n    + IPython.core.ultratb.SyntaxTB.has_colors\n    + IPython.core.ultratb.TBTools.has_colors\n    + IPython.core.ultratb.VerboseTB.has_colors\n    + IPython.terminal.debugger.TerminalPdb.do_interact\n    + IPython.terminal.debugger.TerminalPdb.precmd\n\nThe following attribute/methods have been removed::\n\n    - IPython.core.application.BaseIPythonApplication.deprecated_subcommands\n    - IPython.core.ultratb.AutoFormattedTB.format_records\n    - IPython.core.ultratb.ColorTB.format_records\n    - IPython.core.ultratb.FormattedTB.format_records\n    - IPython.terminal.embed.InteractiveShellEmbed.init_deprecation_warnings\n    - IPython.terminal.embed.InteractiveShellEmbed.init_readline\n    - IPython.terminal.embed.InteractiveShellEmbed.write\n    - IPython.terminal.embed.InteractiveShellEmbed.write_err\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.init_deprecation_warnings\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.init_readline\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.write\n    - IPython.terminal.interactiveshell.TerminalInteractiveShell.write_err\n    - IPython.terminal.ipapp.LocateIPythonApp.deprecated_subcommands\n    - IPython.terminal.ipapp.LocateIPythonApp.initialize_subcommand\n    - IPython.terminal.ipapp.TerminalIPythonApp.deprecated_subcommands\n    - IPython.terminal.ipapp.TerminalIPythonApp.initialize_subcommand\n"], "filenames": ["IPython/__init__.py", "IPython/utils/terminal.py", "docs/source/whatsnew/version8.rst"], "buggy_code_start_loc": [66, 94, 3], "buggy_code_end_loc": [67, 118, 3], "fixing_code_start_loc": [66, 94, 4], "fixing_code_end_loc": [67, 102, 16], "type": "CWE-78", "message": "IPython (Interactive Python) is a command shell for interactive computing in multiple programming languages, originally developed for the Python programming language. Versions prior to 8.1.0 are subject to a command injection vulnerability with very specific prerequisites. This vulnerability requires that the function `IPython.utils.terminal.set_term_title` be called on Windows in a Python environment where ctypes is not available. The dependency on `ctypes` in `IPython.utils._process_win32` prevents the vulnerable code from ever being reached in the ipython binary. However, as a library that could be used by another tool `set_term_title` could be called and hence introduce a vulnerability. Should an attacker get untrusted input to an instance of this function they would be able to inject shell commands as current process and limited to the scope of the current process. Users of ipython as a library are advised to upgrade. Users unable to upgrade should ensure that any calls to the `IPython.utils.terminal.set_term_title` function are done with trusted or filtered input.", "other": {"cve": {"id": "CVE-2023-24816", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-10T20:15:53.817", "lastModified": "2023-02-23T17:33:23.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "IPython (Interactive Python) is a command shell for interactive computing in multiple programming languages, originally developed for the Python programming language. Versions prior to 8.1.0 are subject to a command injection vulnerability with very specific prerequisites. This vulnerability requires that the function `IPython.utils.terminal.set_term_title` be called on Windows in a Python environment where ctypes is not available. The dependency on `ctypes` in `IPython.utils._process_win32` prevents the vulnerable code from ever being reached in the ipython binary. However, as a library that could be used by another tool `set_term_title` could be called and hence introduce a vulnerability. Should an attacker get untrusted input to an instance of this function they would be able to inject shell commands as current process and limited to the scope of the current process. Users of ipython as a library are advised to upgrade. Users unable to upgrade should ensure that any calls to the `IPython.utils.terminal.set_term_title` function are done with trusted or filtered input."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.0, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}, {"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ipython:ipython:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.10.0", "matchCriteriaId": "2A34BED6-E21F-45D9-A529-D0B2B5BE621C"}]}]}], "references": [{"url": "https://github.com/ipython/ipython/blob/3f0bf05f072a91b2a3042d23ce250e5e906183fd/IPython/utils/terminal.py#L103-L117", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/ipython/ipython/blob/56e6925dfa50e2c7f4a6471547b8176275db7c25/IPython/utils/_process_win32.py#L20", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/ipython/ipython/security/advisories/GHSA-29gw-9793-fvw7", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f"}}