{"buggy_code": ["<?php\n\n/*\n *\n * Feature developed as part of a training given by CIRCL in Luxembourg on 26/09/2019\n * Verbose comments for educational purposes only\n *\n */\n\nApp::uses('AppController', 'Controller');\n\nclass UserSettingsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public $paginate = array(\n        'limit' => 60,\n        'maxLimit' => 9999,\n        'order' => array(\n            'UserSetting.id' => 'DESC'\n        ),\n        'contain' => array(\n            'User.id',\n            'User.email'\n        )\n    );\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions = array_merge($this->Security->unlockedActions, array('setHomePage'));\n    }\n\n    public function index()\n    {\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => array('setting', 'user_id', 'sort', 'direction', 'page', 'limit'),\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n        $conditions = array();\n        if (!empty($filters['setting'])) {\n            $conditions['AND'][] = array(\n                'setting' => $filters['setting']\n            );\n        }\n        if (!empty($filters['user_id'])) {\n            if ($filters['user_id'] === 'all') {\n                $context = 'all';\n            } else if ($filters['user_id'] === 'me') {\n                $conditions['AND'][] = array(\n                    'user_id' => $this->Auth->user('id')\n                );\n                $context = 'me';\n            } else if ($filters['user_id'] === 'org') {\n                $conditions['AND'][] = array(\n                    'user_id' => $this->UserSetting->User->find(\n                        'list', array(\n                            'conditions' => array(\n                                'User.org_id' => $this->Auth->user('org_id')\n                            ),\n                            'fields' => array(\n                                'User.id', 'User.id'\n                            )\n                        )\n                    )\n                );\n                $context = 'org';\n            } else {\n                $conditions['AND'][] = array(\n                    'user_id' => $filters['user_id']\n                );\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($this->_isAdmin()) {\n                $conditions['AND'][] = array(\n                    'UserSetting.user_id' => $this->UserSetting->User->find(\n                        'list', array(\n                            'conditions' => array(\n                                'User.org_id' => $this->Auth->user('org_id')\n                            ),\n                            'fields' => array(\n                                'User.id', 'User.id'\n                            )\n                        )\n                    )\n                );\n            } else {\n                $conditions['AND'][] = array(\n                    'UserSetting.user_id' => $this->Auth->user('id')\n                );\n            }\n        }\n        if ($this->_isRest()) {\n            $params = array(\n                'conditions' => $conditions\n            );\n            if (!empty($filters['page'])) {\n                $params['page'] = $filters['page'];\n                $params['limit'] = $this->paginate['limit'];\n            }\n            if (!empty($filters['limit'])) {\n                $params['limit'] = $filters['limit'];\n            }\n            $userSettings = $this->UserSetting->find('all', $params);\n            return $this->RestResponse->viewData($userSettings, $this->response->type());\n        } else {\n            $this->paginate['conditions'] = $conditions;\n            $data = $this->paginate();\n            foreach ($data as $k => $v) {\n                if (!empty($this->UserSetting->validSettings[$v['UserSetting']['setting']])) {\n                    $data[$k]['UserSetting']['restricted'] = empty($this->UserSetting->validSettings[$v['UserSetting']['setting']]['restricted']) ? '' : $this->UserSetting->validSettings[$v['UserSetting']['setting']]['restricted'];\n                } else {\n                    $data[$k]['UserSetting']['restricted'] = array();\n                }\n            }\n            $this->set('data', $data);\n            $this->set('context', empty($context) ? 'null' : $context);\n        }\n    }\n\n    public function view($id)\n    {\n        // check if the ID is valid and whether a user setting with the given ID exists\n        if (empty($id) || !is_numeric($id)) {\n            throw new InvalidArgumentException(__('Invalid ID passed.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.id' => $id\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (empty($userSetting)) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting);\n        if (!$checkAccess) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        if ($this->_isRest()) {\n            unset($userSetting['User']);\n            return $this->RestResponse->viewData($userSetting, $this->response->type());\n        } else {\n            $this->set($data, $userSetting);\n        }\n    }\n\n    public function setSetting($user_id = false, $setting = false)\n    {\n        if (!empty($setting)) {\n            if (!$this->UserSetting->checkSettingValidity($setting)) {\n                throw new MethodNotAllowedException(__('Invalid setting.'));\n            }\n            $settingPermCheck = $this->UserSetting->checkSettingAccess($this->Auth->user(), $setting);\n            if ($settingPermCheck !== true) {\n                throw new MethodNotAllowedException(__('This setting is restricted and requires the following permission(s): %s', $settingPermCheck));\n            }\n        }\n        // handle POST requests\n        if ($this->request->is('post')) {\n            // massage the request to allow for unencapsulated POST requests via the API\n            // {\"key\": \"value\"} instead of {\"UserSetting\": {\"key\": \"value\"}}\n            if (empty($this->request->data['UserSetting'])) {\n                $this->request->data = array('UserSetting' => $this->request->data);\n            }\n            if (!empty($user_id)) {\n                $this->request->data['UserSetting']['user_id'] = $user_id;\n            }\n            if (!empty($setting)) {\n                $this->request->data['UserSetting']['setting'] = $setting;\n            }\n            // force our user's ID as the user ID in all cases\n            $userSetting = array(\n                'user_id' => $this->Auth->user('id')\n            );\n            $result = $this->UserSetting->setSetting($this->Auth->user(), $this->request->data);\n            if ($result) {\n                // if we've managed to save our setting\n                if ($this->_isRest()) {\n                    // if we are dealing with an API request\n                    $userSetting = $this->UserSetting->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('UserSetting.id' => $this->UserSetting->id)\n                    ));\n                    return $this->RestResponse->viewData($userSetting, $this->response->type());\n                } else {\n                    // if we are dealing with a UI request, redirect the user to the user view with the proper flash message\n                    $this->Flash->success(__('Setting saved.'));\n                    $this->redirect(array('controller' => 'user_settings', 'action' => 'index', $this->Auth->User('id')));\n                }\n            } else {\n                // if we've failed saving our setting\n                if ($this->_isRest()) {\n                    // if we are dealing with an API request\n                    return $this->RestResponse->saveFailResponse('UserSettings', 'add', false, $this->UserSetting->validationErrors, $this->response->type());\n                } else {\n                    /*\n                     * if we are dealing with a UI request, simply set an error in a flash message\n                     * and render the view of this endpoint, pre-populated with the submitted values.\n                     */\n                    $this->Flash->error(__('Setting could not be saved.'));\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            // GET request via the API should describe the endpoint\n            return $this->RestResponse->describe('UserSettings', 'setSetting', false, $this->response->type());\n        } else {\n            // load the valid settings from the model\n            $validSettings = $this->UserSetting->validSettings;\n            if ($this->_isSiteAdmin()) {\n                $users = $this->UserSetting->User->find('list', array(\n                    'recursive' => -1,\n                    'fields' => array('User.id', 'User.email')\n                ));\n            } else if ($this->_isAdmin()) {\n                $users = $this->UserSetting->User->find('list', array(\n                    'recursive' => -1,\n                    'conditions' => array('User.org_id' => $this->Auth->user('org_id')),\n                    'fields' => array('User.id', 'User.email')\n                ));\n            } else {\n                $users = array($this->Auth->user('id') => $this->Auth->user('email'));\n            }\n            if (!empty($user_id) && $this->request->is('get')) {\n                $this->request->data['UserSetting']['user_id'] = $user_id;\n            }\n            $this->set('setting', $setting);\n            $this->set('users', $users);\n            $this->set('validSettings', $validSettings);\n        }\n    }\n\n    public function getSetting($user_id, $setting)\n    {\n        if (!$this->UserSetting->checkSettingValidity($setting)) {\n            throw new MethodNotAllowedException(__('Invalid setting.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.user_id' => $user_id,\n                'UserSetting.setting' => $setting\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting, $user_id);\n        if (empty($checkAccess)) {\n            throw new MethodNotAllowedException(__('Invalid setting.'));\n        }\n        if (!empty($userSetting)) {\n            $userSetting = json_encode($userSetting['UserSetting']['value']);\n        } else {\n            $userSetting = '[]';\n        }\n        return $this->RestResponse->viewData($userSetting, $this->response->type(), false, true);\n    }\n\n    public function delete($id = false)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            /*\n             * GET request via the API should describe the endpoint\n             * Unlike with the add() endpoint, we want to run this check before doing anything else,\n             * in order to allow us to reach this endpoint without passing a valid ID\n             */\n            return $this->RestResponse->describe('UserSettings', 'delete', false, $this->response->type());\n        }\n        // check if the ID is valid and whether a user setting with the given ID exists\n        if (empty($id) || !is_numeric($id)) {\n            throw new InvalidArgumentException(__('Invalid ID passed.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.id' => $id\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (empty($userSetting)) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting);\n        if (!$checkAccess) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $settingPermCheck = $this->UserSetting->checkSettingAccess($this->Auth->user(), $userSetting['UserSetting']['setting']);\n        if ($settingPermCheck !== true) {\n            throw new MethodNotAllowedException(__('This setting is restricted and requires the following permission(s): %s', $settingPermCheck));\n        }\n        if ($this->request->is('post') || $this->request->is('delete')) {\n            // Delete the setting that we were after.\n            $result = $this->UserSetting->delete($userSetting['UserSetting']['id']);\n            if ($result) {\n                // set the response for both the UI and API\n                $message = __('Setting deleted.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('UserSettings', 'delete', $id, $this->response->type(), $message);\n                } else {\n                    $this->Flash->success($message);\n                }\n            } else {\n                // set the response for both the UI and API\n                $message = __('Setting could not be deleted.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('UserSettings', 'delete', $id, $message, $this->response->type());\n                } else {\n                    $this->Flash->error($message);\n                }\n            }\n            /*\n             * The API responses stopped executing this function and returned a serialised response to the user.\n             * For UI users, redirect to where they issued the request from.\n             */\n            $this->redirect($this->referer());\n        } else {\n            throw new MethodNotAllowedException(__('Expecting POST or DELETE request.'));\n        }\n    }\n\n    public function setHomePage()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This endpoint only aaccepts POST requests.'));\n        }\n        if (empty($this->request->data['path'])) {\n            $this->request->data = array('path' => $this->request->data);\n        }\n        if (empty($this->request->data['path'])) {\n            throw new InvalidArgumentException(__('No path POSTed.'));\n        }\n        $setting = array(\n            'UserSetting' => array(\n                'user_id' => $this->Auth->user('id'),\n                'setting' => 'homepage',\n                'value' => json_encode(array('path' => $this->request->data['path']))\n            )\n        );\n        $result = $this->UserSetting->setSetting($this->Auth->user(), $setting);\n        return $this->RestResponse->saveSuccessResponse('UserSettings', 'setHomePage', false, $this->response->type(), 'Homepage set to ' . $this->request->data['path']);\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n *\n * Feature developed as part of a training given by CIRCL in Luxembourg on 26/09/2019\n * Verbose comments for educational purposes only\n *\n */\n\nApp::uses('AppController', 'Controller');\n\nclass UserSettingsController extends AppController\n{\n    public $components = array('Session', 'RequestHandler');\n\n    public $paginate = array(\n        'limit' => 60,\n        'maxLimit' => 9999,\n        'order' => array(\n            'UserSetting.id' => 'DESC'\n        ),\n        'contain' => array(\n            'User.id',\n            'User.email'\n        )\n    );\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n    }\n\n    public function index()\n    {\n        $filterData = array(\n            'request' => $this->request,\n            'paramArray' => array('setting', 'user_id', 'sort', 'direction', 'page', 'limit'),\n            'named_params' => $this->params['named']\n        );\n        $exception = false;\n        $filters = $this->_harvestParameters($filterData, $exception);\n        $conditions = array();\n        if (!empty($filters['setting'])) {\n            $conditions['AND'][] = array(\n                'setting' => $filters['setting']\n            );\n        }\n        if (!empty($filters['user_id'])) {\n            if ($filters['user_id'] === 'all') {\n                $context = 'all';\n            } else if ($filters['user_id'] === 'me') {\n                $conditions['AND'][] = array(\n                    'user_id' => $this->Auth->user('id')\n                );\n                $context = 'me';\n            } else if ($filters['user_id'] === 'org') {\n                $conditions['AND'][] = array(\n                    'user_id' => $this->UserSetting->User->find(\n                        'list', array(\n                            'conditions' => array(\n                                'User.org_id' => $this->Auth->user('org_id')\n                            ),\n                            'fields' => array(\n                                'User.id', 'User.id'\n                            )\n                        )\n                    )\n                );\n                $context = 'org';\n            } else {\n                $conditions['AND'][] = array(\n                    'user_id' => $filters['user_id']\n                );\n            }\n        }\n        if (!$this->_isSiteAdmin()) {\n            if ($this->_isAdmin()) {\n                $conditions['AND'][] = array(\n                    'UserSetting.user_id' => $this->UserSetting->User->find(\n                        'list', array(\n                            'conditions' => array(\n                                'User.org_id' => $this->Auth->user('org_id')\n                            ),\n                            'fields' => array(\n                                'User.id', 'User.id'\n                            )\n                        )\n                    )\n                );\n            } else {\n                $conditions['AND'][] = array(\n                    'UserSetting.user_id' => $this->Auth->user('id')\n                );\n            }\n        }\n        if ($this->_isRest()) {\n            $params = array(\n                'conditions' => $conditions\n            );\n            if (!empty($filters['page'])) {\n                $params['page'] = $filters['page'];\n                $params['limit'] = $this->paginate['limit'];\n            }\n            if (!empty($filters['limit'])) {\n                $params['limit'] = $filters['limit'];\n            }\n            $userSettings = $this->UserSetting->find('all', $params);\n            return $this->RestResponse->viewData($userSettings, $this->response->type());\n        } else {\n            $this->paginate['conditions'] = $conditions;\n            $data = $this->paginate();\n            foreach ($data as $k => $v) {\n                if (!empty($this->UserSetting->validSettings[$v['UserSetting']['setting']])) {\n                    $data[$k]['UserSetting']['restricted'] = empty($this->UserSetting->validSettings[$v['UserSetting']['setting']]['restricted']) ? '' : $this->UserSetting->validSettings[$v['UserSetting']['setting']]['restricted'];\n                } else {\n                    $data[$k]['UserSetting']['restricted'] = array();\n                }\n            }\n            $this->set('data', $data);\n            $this->set('context', empty($context) ? 'null' : $context);\n        }\n    }\n\n    public function view($id)\n    {\n        // check if the ID is valid and whether a user setting with the given ID exists\n        if (empty($id) || !is_numeric($id)) {\n            throw new InvalidArgumentException(__('Invalid ID passed.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.id' => $id\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (empty($userSetting)) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting);\n        if (!$checkAccess) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        if ($this->_isRest()) {\n            unset($userSetting['User']);\n            return $this->RestResponse->viewData($userSetting, $this->response->type());\n        } else {\n            $this->set($data, $userSetting);\n        }\n    }\n\n    public function setSetting($user_id = false, $setting = false)\n    {\n        if (!empty($setting)) {\n            if (!$this->UserSetting->checkSettingValidity($setting)) {\n                throw new MethodNotAllowedException(__('Invalid setting.'));\n            }\n            $settingPermCheck = $this->UserSetting->checkSettingAccess($this->Auth->user(), $setting);\n            if ($settingPermCheck !== true) {\n                throw new MethodNotAllowedException(__('This setting is restricted and requires the following permission(s): %s', $settingPermCheck));\n            }\n        }\n        // handle POST requests\n        if ($this->request->is('post')) {\n            // massage the request to allow for unencapsulated POST requests via the API\n            // {\"key\": \"value\"} instead of {\"UserSetting\": {\"key\": \"value\"}}\n            if (empty($this->request->data['UserSetting'])) {\n                $this->request->data = array('UserSetting' => $this->request->data);\n            }\n            if (!empty($user_id)) {\n                $this->request->data['UserSetting']['user_id'] = $user_id;\n            }\n            if (!empty($setting)) {\n                $this->request->data['UserSetting']['setting'] = $setting;\n            }\n            // force our user's ID as the user ID in all cases\n            $userSetting = array(\n                'user_id' => $this->Auth->user('id')\n            );\n            $result = $this->UserSetting->setSetting($this->Auth->user(), $this->request->data);\n            if ($result) {\n                // if we've managed to save our setting\n                if ($this->_isRest()) {\n                    // if we are dealing with an API request\n                    $userSetting = $this->UserSetting->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('UserSetting.id' => $this->UserSetting->id)\n                    ));\n                    return $this->RestResponse->viewData($userSetting, $this->response->type());\n                } else {\n                    // if we are dealing with a UI request, redirect the user to the user view with the proper flash message\n                    $this->Flash->success(__('Setting saved.'));\n                    $this->redirect(array('controller' => 'user_settings', 'action' => 'index', $this->Auth->User('id')));\n                }\n            } else {\n                // if we've failed saving our setting\n                if ($this->_isRest()) {\n                    // if we are dealing with an API request\n                    return $this->RestResponse->saveFailResponse('UserSettings', 'add', false, $this->UserSetting->validationErrors, $this->response->type());\n                } else {\n                    /*\n                     * if we are dealing with a UI request, simply set an error in a flash message\n                     * and render the view of this endpoint, pre-populated with the submitted values.\n                     */\n                    $this->Flash->error(__('Setting could not be saved.'));\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            // GET request via the API should describe the endpoint\n            return $this->RestResponse->describe('UserSettings', 'setSetting', false, $this->response->type());\n        } else {\n            // load the valid settings from the model\n            $validSettings = $this->UserSetting->validSettings;\n            if ($this->_isSiteAdmin()) {\n                $users = $this->UserSetting->User->find('list', array(\n                    'recursive' => -1,\n                    'fields' => array('User.id', 'User.email')\n                ));\n            } else if ($this->_isAdmin()) {\n                $users = $this->UserSetting->User->find('list', array(\n                    'recursive' => -1,\n                    'conditions' => array('User.org_id' => $this->Auth->user('org_id')),\n                    'fields' => array('User.id', 'User.email')\n                ));\n            } else {\n                $users = array($this->Auth->user('id') => $this->Auth->user('email'));\n            }\n            if (!empty($user_id) && $this->request->is('get')) {\n                $this->request->data['UserSetting']['user_id'] = $user_id;\n            }\n            $this->set('setting', $setting);\n            $this->set('users', $users);\n            $this->set('validSettings', $validSettings);\n        }\n    }\n\n    public function getSetting($user_id, $setting)\n    {\n        if (!$this->UserSetting->checkSettingValidity($setting)) {\n            throw new MethodNotAllowedException(__('Invalid setting.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.user_id' => $user_id,\n                'UserSetting.setting' => $setting\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting, $user_id);\n        if (empty($checkAccess)) {\n            throw new MethodNotAllowedException(__('Invalid setting.'));\n        }\n        if (!empty($userSetting)) {\n            $userSetting = json_encode($userSetting['UserSetting']['value']);\n        } else {\n            $userSetting = '[]';\n        }\n        return $this->RestResponse->viewData($userSetting, $this->response->type(), false, true);\n    }\n\n    public function delete($id = false)\n    {\n        if ($this->request->is('get') && $this->_isRest()) {\n            /*\n             * GET request via the API should describe the endpoint\n             * Unlike with the add() endpoint, we want to run this check before doing anything else,\n             * in order to allow us to reach this endpoint without passing a valid ID\n             */\n            return $this->RestResponse->describe('UserSettings', 'delete', false, $this->response->type());\n        }\n        // check if the ID is valid and whether a user setting with the given ID exists\n        if (empty($id) || !is_numeric($id)) {\n            throw new InvalidArgumentException(__('Invalid ID passed.'));\n        }\n        $userSetting = $this->UserSetting->find('first', array(\n            'recursive' => -1,\n            'conditions' => array(\n                'UserSetting.id' => $id\n            ),\n            'contain' => array('User.id', 'User.org_id')\n        ));\n        if (empty($userSetting)) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $checkAccess = $this->UserSetting->checkAccess($this->Auth->user(), $userSetting);\n        if (!$checkAccess) {\n            throw new NotFoundException(__('Invalid user setting.'));\n        }\n        $settingPermCheck = $this->UserSetting->checkSettingAccess($this->Auth->user(), $userSetting['UserSetting']['setting']);\n        if ($settingPermCheck !== true) {\n            throw new MethodNotAllowedException(__('This setting is restricted and requires the following permission(s): %s', $settingPermCheck));\n        }\n        if ($this->request->is('post') || $this->request->is('delete')) {\n            // Delete the setting that we were after.\n            $result = $this->UserSetting->delete($userSetting['UserSetting']['id']);\n            if ($result) {\n                // set the response for both the UI and API\n                $message = __('Setting deleted.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveSuccessResponse('UserSettings', 'delete', $id, $this->response->type(), $message);\n                } else {\n                    $this->Flash->success($message);\n                }\n            } else {\n                // set the response for both the UI and API\n                $message = __('Setting could not be deleted.');\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('UserSettings', 'delete', $id, $message, $this->response->type());\n                } else {\n                    $this->Flash->error($message);\n                }\n            }\n            /*\n             * The API responses stopped executing this function and returned a serialised response to the user.\n             * For UI users, redirect to where they issued the request from.\n             */\n            $this->redirect($this->referer());\n        } else {\n            throw new MethodNotAllowedException(__('Expecting POST or DELETE request.'));\n        }\n    }\n\n    public function setHomePage()\n    {\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['UserSetting'])) {\n                $this->request->data = $this->request->data['UserSetting'];\n            }\n            if (!isset($this->request->data['path'])) {\n                $this->request->data = array('path' => $this->request->data);\n            }\n            if (empty($this->request->data['path'])) {\n                throw new InvalidArgumentException(__('No path POSTed.'));\n            }\n            $setting = array(\n                'UserSetting' => array(\n                    'user_id' => $this->Auth->user('id'),\n                    'setting' => 'homepage',\n                    'value' => json_encode(array('path' => $this->request->data['path']))\n                )\n            );\n            $result = $this->UserSetting->setSetting($this->Auth->user(), $setting);\n            return $this->RestResponse->saveSuccessResponse('UserSettings', 'setHomePage', false, $this->response->type(), 'Homepage set to ' . $this->request->data['path']);\n        } else {\n            $this->layout = false;\n        }\n    }\n}\n"], "filenames": ["app/Controller/UserSettingsController.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [346], "fixing_code_start_loc": [30], "fixing_code_end_loc": [349], "type": "CWE-79", "message": "A cross-site scripting (XSS) vulnerability exists in MISP v2.4.128 in app/Controller/UserSettingsController.php at SetHomePage() function. Due to a lack of controller validation in \"path\" parameter, an attacker can execute malicious JavaScript code.", "other": {"cve": {"id": "CVE-2020-24085", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-26T18:15:42.927", "lastModified": "2021-01-30T01:52:56.210", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A cross-site scripting (XSS) vulnerability exists in MISP v2.4.128 in app/Controller/UserSettingsController.php at SetHomePage() function. Due to a lack of controller validation in \"path\" parameter, an attacker can execute malicious JavaScript code."}, {"lang": "es", "value": "Se presenta una vulnerabilidad de tipo cross site scripting (XSS) en MISP v2.4.128 en el archivo app/Controller/UserSettingsController.php en la funci\u00f3n SetHomePage().&#xa0;Debido a la falta de comprobaci\u00f3n del controlador en el par\u00e1metro \"path\", un atacante puede ejecutar c\u00f3digo JavaScript malicioso"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.128:*:*:*:*:*:*:*", "matchCriteriaId": "1F16A85A-DEA7-491C-8D83-E4D61E428C32"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/b3550b48f30ad9fef86c5b5c664487aaf6f52787", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/b3550b48f30ad9fef86c5b5c664487aaf6f52787"}}