{"buggy_code": ["<?php\n/**\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * Copyright (C) 2011 Cassian LUP <cassi.lup@gmail.com>\n *\n * LICENSE: This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as\n *  published by the Free Software Foundation, either version 3 of the\n *  License, or (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Affero General Public License for more details.\n *\n *  You should have received a copy of the GNU Affero General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @author Cassian LUP <cassi.lup@gmail.com>\n * @link http://www.open-emr.org\n */\n\n    //setting the session & other config options\n    session_start();\n\n    //don't require standard openemr authorization in globals.php\n    $ignoreAuth = 1;\n\n    //For redirect if the site on session does not match\n    $landingpage = \"index.php?site=\".$_GET['site'];\n\n    //includes\n    require_once('../interface/globals.php');\n\n    use OpenEMR\\Core\\Header;\n\n    ini_set(\"error_log\", E_ERROR || ~E_NOTICE);\n    //exit if portal is turned off\nif (!(isset($GLOBALS['portal_onsite_two_enable'])) || !($GLOBALS['portal_onsite_two_enable'])) {\n    echo htmlspecialchars(xl('Patient Portal is turned off'), ENT_NOQUOTES);\n    exit;\n}\n\n    // security measure -- will check on next page.\n    $_SESSION['itsme'] = 1;\n    //\n\n    //\n    // Deal with language selection\n    //\n    // collect default language id (skip this if this is a password update)\nif (!(isset($_SESSION['password_update']) || isset($_GET['requestNew']))) {\n    $res2 = sqlStatement(\"select * from lang_languages where lang_description = ?\", array($GLOBALS['language_default']));\n    for ($iter = 0; $row = sqlFetchArray($res2); $iter++) {\n        $result2[$iter] = $row;\n    }\n\n    if (count($result2) == 1) {\n        $defaultLangID = $result2[0]{\"lang_id\"};\n        $defaultLangName = $result2[0]{\"lang_description\"};\n    } else {\n        //default to english if any problems\n        $defaultLangID = 1;\n        $defaultLangName = \"English\";\n    }\n\n  // set session variable to default so login information appears in default language\n    $_SESSION['language_choice'] = $defaultLangID;\n  // collect languages if showing language menu\n    if ($GLOBALS['language_menu_login']) {\n        // sorting order of language titles depends on language translation options.\n        $mainLangID = empty($_SESSION['language_choice']) ? '1' : $_SESSION['language_choice'];\n        if ($mainLangID == '1' && !empty($GLOBALS['skip_english_translation'])) {\n            $sql = \"SELECT * FROM lang_languages ORDER BY lang_description, lang_id\";\n            $res3=SqlStatement($sql);\n        } else {\n          // Use and sort by the translated language name.\n            $sql = \"SELECT ll.lang_id, \" .\n                 \"IF(LENGTH(ld.definition),ld.definition,ll.lang_description) AS trans_lang_description, \" .\n                 \"ll.lang_description \" .\n                 \"FROM lang_languages AS ll \" .\n                 \"LEFT JOIN lang_constants AS lc ON lc.constant_name = ll.lang_description \" .\n                 \"LEFT JOIN lang_definitions AS ld ON ld.cons_id = lc.cons_id AND \" .\n                 \"ld.lang_id = ? \" .\n                 \"ORDER BY IF(LENGTH(ld.definition),ld.definition,ll.lang_description), ll.lang_id\";\n            $res3=SqlStatement($sql, array($mainLangID));\n        }\n        for ($iter = 0; $row = sqlFetchArray($res3); $iter++) {\n            $result3[$iter] = $row;\n        }\n        if (count($result3) == 1) {\n          //default to english if only return one language\n            $hiddenLanguageField = \"<input type='hidden' name='languageChoice' value='1' />\\n\";\n        }\n    } else {\n        $hiddenLanguageField = \"<input type='hidden' name='languageChoice' value='\".htmlspecialchars($defaultLangID, ENT_QUOTES).\"' />\\n\";\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo xlt('Patient Portal Login'); ?></title>\n    <?php\n        $css = $GLOBALS['css_header'];\n        $GLOBALS['css_header'] = \"\";\n        Header::setupHeader(['datetime-picker']);\n        //$GLOBALS['css_header'] = $css;\n    ?>\n    <script type=\"text/javascript\" src=\"<?php echo $GLOBALS['assets_static_relative']; ?>/jquery.gritter-1-7-4/js/jquery.gritter.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"<?php echo $GLOBALS['assets_static_relative']; ?>/jquery.gritter-1-7-4/css/jquery.gritter.css\" />\n    <script type=\"text/javascript\" src=\"<?php echo $GLOBALS['assets_static_relative']; ?>/emodal-1-2-65/dist/eModal.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/base.css?v=<?php echo $v_js_includes; ?>\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/register.css?v=<?php echo $v_js_includes; ?>\" />\n<script type=\"text/javascript\">\n    function process() {\n        if (!(validate())) {\n            alert ('<?php echo addslashes(xl('Field(s) are missing!')); ?>');\n            return false;\n        }\n    }\n    function validate() {\n            var pass=true;\n        if (document.getElementById('uname').value == \"\") {\n        document.getElementById('uname').style.border = \"1px solid red\";\n                pass=false;\n        }\n        if (document.getElementById('pass').value == \"\") {\n        document.getElementById('pass').style.border = \"1px solid red\";\n                pass=false;\n        }\n            return pass;\n    }\n    function process_new_pass() {\n        if (!(validate_new_pass())) {\n            alert ('<?php echo addslashes(xl('Field(s) are missing!')); ?>');\n            return false;\n        }\n        if (document.getElementById('pass_new').value != document.getElementById('pass_new_confirm').value) {\n            alert ('<?php echo addslashes(xl('The new password fields are not the same.')); ?>');\n            return false;\n        }\n        if (document.getElementById('pass').value == document.getElementById('pass_new').value) {\n            alert ('<?php echo addslashes(xl('The new password can not be the same as the current password.')); ?>');\n            return false;\n        }\n    }\n\n    function validate_new_pass() {\n        var pass=true;\n        if (document.getElementById('uname').value == \"\") {\n            document.getElementById('uname').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass').value == \"\") {\n            document.getElementById('pass').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass_new').value == \"\") {\n            document.getElementById('pass_new').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass_new_confirm').value == \"\") {\n            document.getElementById('pass_new_confirm').style.border = \"1px solid red\";\n            pass=false;\n        }\n        return pass;\n    }\n</script>\n</head>\n<body class=\"skin-blue\">\n<br><br>\n<div class=\"container text-center\">\n    <?php if (isset($_SESSION['password_update']) || isset($_GET['password_update'])) {\n        $_SESSION['password_update']=1;\n        ?>\n      <div id=\"wrapper\" class=\"centerwrapper\" style=\"text-align:center;\">\n        <h2 class=\"title\"><?php echo xlt('Please Enter a New Password'); ?></h2>\n        <form action=\"get_patient_info.php\" method=\"POST\" onsubmit=\"return process_new_pass()\" >\n            <table style=\"width:100%\">\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('User Name'); ?></td>\n                    <td><input name=\"uname\" id=\"uname\" type=\"text\" autocomplete=\"off\" value=\"<?php echo attr($_SESSION['portal_username']); ?>\"/></td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Current Password');?></td>\n                    <td>\n                        <input name=\"pass\" id=\"pass\" type=\"password\" autocomplete=\"off\" value=\"\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('New Password');?></td>\n                    <td>\n                        <input name=\"pass_new\" id=\"pass_new\" type=\"password\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Confirm New Password');?></td>\n                    <td>\n                        <input name=\"pass_new_confirm\" id=\"pass_new_confirm\" type=\"password\" />\n                    </td>\n                </tr>\n                 <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Confirm Email Address');?></td>\n                    <td>\n                        <input name=\"passaddon\" id=\"passaddon\" placeholder=\"<?php echo xla('Your on file email address'); ?>\" type=\"email\" autocomplete=\"off\" value=\"\"  />\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan=2><br><input class=\"pull-right\" type=\"submit\" value=\"<?php echo xla('Log In');?>\" /></td>\n                </tr>\n            </table>\n        </form>\n        <div class=\"copyright\"><?php echo xlt('Powered by');?> OpenEMR</div>\n      </div>\n    <?php } elseif (isset($_GET['requestNew'])) { ?>\n    <div id=\"wrapper\" class=\"centerwrapper\" style=\"text-align:center;\" >\n        <form  class=\"form-inline\" id=\"resetPass\" action=\"\" method=\"\" >\n            <div class=\"row\">\n                <div class=\"col-sm-10 col-md-offset-1 text-center\">\n                    <fieldset>\n                        <legend class='bg-primary'><h3><?php echo xlt('Patient Credentials Reset') ?></h3></legend>\n                        <div class=\"well\">\n                        <div class=\"row\">\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"fname\"><?php echo xlt('First')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <input type=\"text\" class=\"form-control\" id=\"fname\" required placeholder=\"<?php echo xla('First Name'); ?>\">\n                                </div>\n                            </div>\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"lname\"><?php echo xlt('Last Name')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <input type=\"text\" class=\"form-control\" id=\"lname\" required placeholder=\"<?php echo xla('Enter Last'); ?>\">\n                                </div>\n                            </div>\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"dob\"><?php echo xlt('Birth Date')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <div class=\"input-group\">\n                                        <input id=\"dob\" type=\"text\" required class=\"form-control datepicker\" placeholder=\"<?php echo xla('YYYY-MM-DD'); ?>\" />\n                                    </div>\n                                </div>\n                            </div></div>\n                            <div class=\"row\">\n                                <div class=\"col-sm-12 form-group\">\n                                    <label class=\"control-label\" for=\"emailInput\"><?php echo xlt('Enter E-Mail Address')?></label>\n                                    <div class=\"controls inline-inputs\">\n                                        <input id=\"emailInput\" type=\"email\" class=\"form-control\" style=\"width: 100%\" required\n                                            placeholder=\"<?php echo xla('Must be current email address on file.'); ?>\" maxlength=\"100\">\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <button id=\"submitRequest\" class=\"btn btn-primary nextBtn btn-sm pull-right\" type=\"button\"><?php echo xlt('Verify') ?></button>\n                    </fieldset>\n                </div>\n            </div>\n        </form>\n    </div>\n    <?php } else {\n?>  <!-- Main logon -->\n    <div id=\"wrapper\" class=\"row centerwrapper text-center\">\n    <img style=\"width:65%\" src='<?php echo $GLOBALS['images_static_relative']; ?>/login-logo.png'/>\n    <form  class=\"form-inline text-center\" action=\"get_patient_info.php\" method=\"POST\" onsubmit=\"return process()\">\n        <div class=\"row\">\n                <div class=\"col-sm-12 text-center\">\n                    <fieldset>\n                        <legend class=\"bg-primary\"><h3><?php echo xlt('Patient Portal Login'); ?></h3></legend>\n                        <div class=\"well\">\n                        <div class=\"row\">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"form-group inline\">\n                                        <label class=\"control-label\" for=\"uname\"><?php echo xlt('Username')?></label>\n                                        <div class=\"controls inline-inputs\">\n                                            <input type=\"text\" class=\"form-control\" name=\"uname\" id=\"uname\" type=\"text\" autocomplete=\"on\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group inline\">\n                                        <label class=\"control-label\" for=\"pass\"><?php echo xlt('Password')?></label>\n                                        <div class=\"controls inline-inputs\">\n                                            <input class=\"form-control\" name=\"pass\" id=\"pass\" type=\"password\" required autocomplete=\"on\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-sm-12 form-group\">\n                                    <label class=\"control-label\" for=\"passaddon\"><?php echo xlt('E-Mail Address')?></label>\n                                    <div class=\"controls inline-inputs\">\n                                        <input class=\"form-control\" style=\"width: 100%\" name=\"passaddon\" id=\"passaddon\" placeholder=\"<?php echo xla('on file email'); ?>\" type=\"email\" autocomplete=\"on\" />\n                                    </div>\n                                </div>\n                            </div>\n                        <?php if ($GLOBALS['language_menu_login']) { ?>\n                        <?php if (count($result3) != 1) { ?>\n                        <div class=\"form-group row\">\n                            <label for=\"selLanguage\"><?php echo xlt('Language'); ?></label>\n                            <select class=\"form-control\" id=\"selLanguage\" name=\"languageChoice\">\n                            <?php\n                                echo \"<option selected='selected' value='\" . htmlspecialchars($defaultLangID, ENT_QUOTES) . \"'>\" .\n                                     htmlspecialchars(xl('Default') . \" - \" . xl($defaultLangName), ENT_NOQUOTES) . \"</option>\\n\";\n                            foreach ($result3 as $iter) {\n                                if ($GLOBALS['language_menu_showall']) {\n                                    if (! $GLOBALS['allow_debug_language'] && $iter['lang_description'] == 'dummy') {\n                                        continue; // skip the dummy language\n                                    }\n                                    echo \"<option value='\" . htmlspecialchars($iter['lang_id'], ENT_QUOTES) . \"'>\" .\n                                         htmlspecialchars($iter['trans_lang_description'], ENT_NOQUOTES) . \"</option>\\n\";\n                                } else {\n                                    if (in_array($iter['lang_description'], $GLOBALS['language_menu_show'])) {\n                                        if (! $GLOBALS['allow_debug_language'] && $iter['lang_description'] == 'dummy') {\n                                            continue; // skip the dummy language\n                                        }\n                                        echo \"<option value='\" . htmlspecialchars($iter['lang_id'], ENT_QUOTES) . \"'>\" .\n                                             htmlspecialchars($iter['trans_lang_description'], ENT_NOQUOTES) . \"</option>\\n\";\n                                    }\n                                }\n                            }\n                            ?>\n                          </select>\n                        </div>\n                        <?php } } ?>\n                        </div>\n                        <div class=\"col-sm-12 col-md-12\">\n                            <?php if ($GLOBALS['portal_onsite_two_register']) { ?>\n                                <button class=\"btn btn-default pull-left\"  onclick=\"location.replace('./account/register.php')\"><?php echo xlt('Register');?></button>\n                            <?php } ?>\n                            <?php if ($GLOBALS['portal_two_pass_reset'] && isset($_GET['w']) && (isset($_GET['u']) || isset($_GET['p']))) { ?>\n                               <button class=\"btn btn-danger\" onclick=\"location.replace('./index.php?requestNew=1')\" style=\"margin-left:10px\"><?php echo xlt('Reset Credentials');?></button>\n                            <?php } ?>\n                                <button  class=\"btn btn-success pull-right\" type=\"submit\" ><?php echo xlt('Log In');?></button>\n                        </div>\n                    </fieldset>\n                </div>\n          </div>\n            <?php if (!(empty($hiddenLanguageField))) {\n                echo $hiddenLanguageField; } ?>\n    </form>\n    </div><!-- div wrapper -->\n    <?php } ?> <!--  logon wrapper -->\n</div><!-- container -->\n\n<script type=\"text/javascript\">\n$(document).ready(function() {\n\n<?php // if something went wrong\nif (isset($_GET['requestNew'])) {\n    $_SESSION['patient_portal_onsite_two'] = true;\n    $_SESSION['authUser'] = 'portal-user';\n    $_SESSION['pid'] = true;\n    ?>\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_showseconds = false; ?>\n        <?php $datetimepicker_formatInput = false; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n     });\n    $(document.body).on('hidden.bs.modal', function () {\n        callServer('cleanup');\n    });\n    $(\"#submitRequest\").click(function () {\n        callServer('is_new', '');\n    });\n<?php } ?>\n<?php if (isset($_GET['w'])) { ?>\n    var unique_id = $.gritter.add({\n        title: '<span class=\"red\"><?php echo xlt('Oops!');?></span>',\n        text: '<?php echo xlt('Something went wrong. Please try again.'); ?>',\n        sticky: false,\n        time: '5000',\n        class_name: 'my-nonsticky-class'\n    });\n<?php } ?>\n<?php // if successfully logged out\nif (isset($_GET['logout'])) { ?>\n    var unique_id = $.gritter.add({\n        title: '<span class=\"green\"><?php echo xlt('Success');?></span>',\n        text: '<?php echo xlt('You have been successfully logged out.');?>',\n        sticky: false,\n        time: '5000',\n        class_name: 'my-nonsticky-class'\n    });\n<?php } ?>\n\nreturn false;\n});\n/* Test Data\n$(\"#emailInput\").val(\"me@me.com\");\n$(\"#fname\").val(\"Jerry\");\n$(\"#lname\").val(\"Padgett\");\n$(\"#dob\").val(\"1919-03-03\"); */\n\nfunction callServer(action, value, value2, last, first) {\n    var data = {\n        'action' : action,\n        'value' : value,\n        'dob' : $(\"#dob\").val(),\n        'last' : $(\"#lname\").val(),\n        'first' : $(\"#fname\").val(),\n        'email' : $(\"#emailInput\").val()\n    }\n    if (action == 'do_signup') {\n        data = {\n            'action': action,\n            'pid': value\n        };\n    }\n    else if (action == 'notify_admin') {\n        data = {\n            'action': action,\n            'pid': value,\n            'provider': value2\n        };\n    }\n    else if (action == 'cleanup') {\n        data = {\n            'action': action\n        }\n    };\n    $.ajax({\n        type : 'GET',\n        url : './account/account.php',\n        data : data\n    }).done(function (rtn) {\n        if (action == \"cleanup\") {\n            window.location.href = \"./index.php\" // Goto landing page.\n        }\n        else if (action == \"is_new\") {\n            if (parseInt(rtn) > 0) {\n                var yes = confirm('<?php echo xls(\"Account is validated. Send new credentials?\") ?>');\n                if(!yes)\n                    callServer('cleanup');\n                else\n                    callServer('do_signup', parseInt(rtn));\n            }\n            else {\n                // After error alert app exit to landing page.\n                var message = \"<?php echo xls('Unable to find your records. Be sure to use your correct Dob, First and Last name and Email of record. If you have opted out of email with none on file then leave blank.'); ?>\";\n                eModal.alert(message);\n            }\n        }\n        else if (action == 'do_signup') {\n            if (rtn == \"\") {\n                var message = \"<?php echo xlt('Unable to either create credentials or send email.'); ?>\";\n                alert(message);\n                return false;\n            }\n            //alert(rtn); // sync alert.. rtn holds username and password for testing.\n            var message = \"<?php echo xls(\"Your new credentials have been sent. Check your email inbox and also possibly your spam folder. Once you log into your patient portal feel free to make an appointment or send us a secure message. We look forward to seeing you soon.\"); ?>\"\n            eModal.alert(message); // This is an async call. The modal close event exits us to portal landing page after cleanup.\n        }\n    }).fail(function (err) {\n        var message = \"<?php echo xls('Something went wrong.') ?>\";\n        alert(message);\n    });\n}\n</script>\n</body>\n</html>\n", "<?php\n/**\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n *\n * LICENSE: This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as\n *  published by the Free Software Foundation, either version 3 of the\n *  License, or (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Affero General Public License for more details.\n *\n *  You should have received a copy of the GNU Affero General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @link http://www.open-emr.org\n */\n// namespace OnsitePortal;\n/**\n *\n * @param\n *            wrapper class for moving some care coordination zend product\n */\nrequire_once(dirname(__FILE__) . '/../../library/sql.inc');\nrequire_once(dirname(__FILE__) . '/../../library/crypto.php');\nclass ApplicationTable\n{\n\n    public function __construct()\n    {\n    }\n\n    /**\n     * Function zQuery\n     * All DB Transactions take place\n     *\n     * @param String $sql\n     *            SQL Query Statment\n     * @param array $params\n     *            SQL Parameters\n     * @param boolean $log\n     *            Logging True / False\n     * @param boolean $error\n     *            Error Display True / False\n     * @return type\n     */\n    public function zQuery($sql, $params = '', $log = false, $error = true)\n    {\n        $return = false;\n        $result = false;\n\n        try {\n            $return = sqlStatement($sql, $params);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $sql, $params);\n            }\n        }\n\n        if ($log) {\n            auditSQLEvent($sql, $result, $params);\n        }\n\n        return $return;\n    }\n    public function getPortalAudit($patientid, $action = 'review', $activity = 'profile', $status = 'waiting', $auditflg = 1, $rtn = 'last', $oelog = true, $error = true)\n    {\n        $return = false;\n        $result = false;\n        $audit = array (\n                    $patientid,\n                    $activity,\n                    $auditflg,\n                    $status,\n                    $action\n            );\n        try {\n            $sql = \"Select * From onsite_portal_activity As pa Where  pa.patient_id = ? And  pa.activity = ? And  pa.require_audit = ? \".\n                                    \"And pa.status = ? And  pa.pending_action = ? ORDER BY pa.date DESC LIMIT 1\"; // @todo setup condional for limit\n            $return = sqlStatementNoLog($sql, $audit);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $logsql, $audit);\n            }\n        }\n\n        if ($oelog) {\n            auditSQLEvent($sql, $result, $audit);\n        }\n\n        if ($rtn == 'last') {\n            return sqlFetchArray($return);\n        } else {\n            return $return;\n        }\n    }\n    /**\n     * Function portalAudit\n     * All Portal audit Transactions log\n     * Hoping to work both ends, patient and user, from one or most two tables\n     *\n     * @param String $sql\n     *            SQL Query Statment for actions will execute sql as normal for cases\n     *            user auth is not required.\n     * @param array $params\n     *            Parameters for actions\n     * @param array $auditvals\n     *            Parameters of audit\n     * @param boolean $log\n     *            openemr Logging True / False\n     * @param boolean $error\n     *            Error Display True / False\n     * @param type audit array params for portal audits\n     *         $audit = Array();\n     *         $audit['patient_id']=\"\";\n     *         $audit['activity']=\"\";\n     *         $audit['require_audit']=\"\";\n     *         $audit['pending_action']=\"\";\n     *         $audit['action_taken']=\"\";\n     *         $audit['status']=\"\";\n     *         $audit['narrative']=\"\";\n     *         $audit['table_action']=\"\"; //auth user action sql to run after review\n     *         $audit['table_args']=\"\"; //auth user action data to run after review\n     *         $audit['action_user']=\"\";\n     *         $audit['action_taken_time']=\"\";\n     *         $audit['checksum']=\"\";\n     */\n    public function portalAudit($type = 'insert', $rec = '', array $auditvals, $oelog = true, $error = true)\n    {\n        $return = false;\n        $result = false;\n        $audit = array ();\n        if ($type != 'insert') {\n            $audit['date'] = $auditvals['date'] ? $auditvals['date'] : date(\"Y-m-d H:i:s\");\n        }\n\n        $audit['patient_id'] = $auditvals['patient_id'] ? $auditvals['patient_id'] : $_SESSION['pid'];\n        $audit['activity'] = $auditvals['activity'] ? $auditvals['activity'] : \"\";\n        $audit['require_audit'] = $auditvals['require_audit'] ? $auditvals['require_audit'] : \"\";\n        $audit['pending_action'] = $auditvals['pending_action'] ? $auditvals['pending_action'] : \"\";\n        $audit['action_taken'] = $auditvals['action_taken'] ? $auditvals['action_taken'] : \"\";\n        $audit['status'] = $auditvals['status'] ? $auditvals['status'] : \"new\";\n        $audit['narrative'] = $auditvals['narrative'] ? $auditvals['narrative'] : \"\";\n        $audit['table_action'] = $auditvals['table_action'] ? $auditvals['table_action'] : \"\";\n        if ($auditvals['activity'] == 'profile') {\n            $audit['table_args'] = serialize($auditvals['table_args']);\n        } else {\n            $audit['table_args'] = $auditvals['table_args'];\n        }\n\n        $audit['action_user'] = $auditvals['action_user'] ? $auditvals['action_user'] : \"\";\n        $audit['action_taken_time'] = $auditvals['action_taken_time'] ? $auditvals['action_taken_time'] : \"\";\n        $audit['checksum'] = $auditvals['checksum'] ? $auditvals['checksum'] : \"\";\n\n        try {\n            if ($type != 'update') {\n                $logsql = \"INSERT INTO onsite_portal_activity\".\n                        \"( date, patient_id, activity, require_audit, pending_action, action_taken, status, narrative,\".\n                            \"table_action, table_args, action_user, action_taken_time, checksum) \".\n                                \"VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n            } else {\n                $logsql = \"update onsite_portal_activity set date=?, patient_id=?, activity=?, require_audit=?,\".\n                        \"            pending_action=?, action_taken=?,status=?, narrative=?, table_action=?, table_args=?,\".\n                                        \"action_user=?, action_taken_time=?, checksum=? \";\n                $logsql .= \"where id=\".$rec .\" And patient_id=\".$audit['patient_id'];\n            }\n\n            $return = sqlStatementNoLog($logsql, $audit);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $logsql, $audit);\n            }\n        }\n\n        if ($oelog) {\n            $this->portalLog('profile audit transaction', $audit['patient_id'], $logsql, $audit, $result, 'See portal audit activity');\n            //auditSQLEvent( $logsql, $result, $audit );\n        }\n\n        return $return;\n    }\n\n    public function portalLog($event = '', $patient_id = null, $comments = \"\", $binds = '', $success = '1', $user_notes = '', $ccda_doc_id = 0)\n    {\n        $groupname = isset($GLOBALS['groupname']) ? $GLOBALS['groupname'] : 'none';\n        $user = isset($_SESSION['portal_username']) ? $_SESSION['portal_username'] : $_SESSION['authUser'];\n        $log_from = isset($_SESSION['portal_username']) ? 'onsite-portal' : 'portal-dashboard';\n        if (!isset($_SESSION['portal_username']) && !isset($_SESSION['authUser'])) {\n            $log_from = 'portal-login';\n        }\n\n        $user_notes .= isset($_SESSION['whereto']) ? (' Module:' . $_SESSION['whereto']) : \"\";\n\n        $processed_binds = \"\";\n        if (is_array($binds)) {\n            $first_loop = true;\n            foreach ($binds as $value_bind) {\n                if ($first_loop) {\n                    $processed_binds .= \"'\" . add_escape_custom($value_bind) . \"'\";\n                    $first_loop = false;\n                } else {\n                    $processed_binds .= \",'\" . add_escape_custom($value_bind) . \"'\";\n                }\n            }\n\n            if (! empty($processed_binds)) {\n                $processed_binds = \"(\" . $processed_binds . \")\";\n                $comments .= \" \" . $processed_binds;\n            }\n        }\n\n        $this->portalNewEvent($event, $user, $groupname, $success, $comments, $patient_id, $log_from, $user_notes, $ccda_doc_id);\n    }\n    /**\n     * Function errorHandler\n     * All error display and log\n     * Display the Error, Line and File\n     * Same behavior of HelpfulDie fuction in OpenEMR\n     * Path /library/sql.inc\n     *\n     * @param type $e\n     * @param string $sql\n     * @param array $binds\n     */\n    public function errorHandler($e, $sql, $binds = '')\n    {\n        $trace = $e->getTraceAsString();\n        $nLast = strpos($trace, '[internal function]');\n        $trace = substr($trace, 0, ( $nLast - 3 ));\n        $logMsg = '';\n        do {\n            $logMsg .= \"\\r Exception: \" . self::escapeHtml($e->getMessage());\n        } while ($e = $e->getPrevious());\n        /**\n         * List all Params\n         */\n        $processedBinds = \"\";\n        if (is_array($binds)) {\n            $firstLoop = true;\n            foreach ($binds as $valueBind) {\n                if ($firstLoop) {\n                    $processedBinds .= \"'\" . $valueBind . \"'\";\n                    $firstLoop = false;\n                } else {\n                    $processedBinds .= \",'\" . $valueBind . \"'\";\n                }\n            }\n\n            if (! empty($processedBinds)) {\n                $processedBinds = \"(\" . $processedBinds . \")\";\n            }\n        }\n\n        echo '<pre><span style=\"color: red;\">';\n        echo 'ERROR : ' . $logMsg;\n        echo \"\\r\\n\";\n        echo 'SQL statement : ' . self::escapeHtml($sql);\n        echo self::escapeHtml($processedBinds);\n        echo '</span></pre>';\n        echo '<pre>';\n        echo $trace;\n        echo '</pre>';\n        /**\n         * Error Logging\n         */\n        $logMsg .= \"\\n SQL statement : $sql\" . $processedBinds;\n        $logMsg .= \"\\n $trace\";\n        error_log(\"ERROR: \" . $logMsg, 0);\n    }\n    public function escapeHtml($string)\n    {\n        return htmlspecialchars($string, ENT_QUOTES);\n    }\n    /*\n     * Retrive the data format from GLOBALS\n     *\n     * @param Date format set in GLOBALS\n     * @return Date format in PHP\n     */\n    public function dateFormat($format)\n    {\n        if ($format == \"0\") {\n            $date_format = 'yyyy/mm/dd';\n        } else if ($format == 1) {\n            $date_format = 'mm/dd/yyyy';\n        } else if ($format == 2) {\n            $date_format = 'dd/mm/yyyy';\n        } else {\n            $date_format = $format;\n        }\n\n        return $date_format;\n    }\n    /**\n     * fixDate - Date Conversion Between Different Formats\n     *\n     * @param String $input_date\n     *            Date to be converted\n     * @param String $date_format\n     *            Target Date Format\n     */\n    public function fixDate($input_date, $output_format = null, $input_format = null)\n    {\n        if (! $input_date) {\n            return;\n        }\n\n        $input_date = preg_replace('/T|Z/', ' ', $input_date);\n\n        $temp = explode(' ', $input_date); // split using space and consider the first portion, in case of date with time\n        $input_date = $temp[0];\n\n        $output_format = ApplicationTable::dateFormat($output_format);\n        $input_format = ApplicationTable::dateFormat($input_format);\n\n        preg_match(\"/[^ymd]/\", $output_format, $date_seperator_output);\n        $seperator_output = $date_seperator_output[0];\n        $output_date_arr = explode($seperator_output, $output_format);\n\n        preg_match(\"/[^ymd]/\", $input_format, $date_seperator_input);\n        $seperator_input = $date_seperator_input[0];\n        $input_date_array = explode($seperator_input, $input_format);\n\n        preg_match(\"/[^1234567890]/\", $input_date, $date_seperator_input);\n        $seperator_input = $date_seperator_input[0];\n        $input_date_arr = explode($seperator_input, $input_date);\n\n        foreach ($output_date_arr as $key => $format) {\n            $index = array_search($format, $input_date_array);\n            $output_date_arr[$key] = $input_date_arr[$index];\n        }\n\n        $output_date = implode($seperator_output, $output_date_arr);\n\n        $output_date = $temp[1] ? $output_date . \" \" . $temp[1] : $output_date; // append the time, if exists, with the new formatted date\n        return $output_date;\n    }\n\n    /*\n     * Using generate id function from OpenEMR sql.inc library file\n     * @param string $seqname table name containing sequence (default is adodbseq)\n     * @param integer $startID id to start with for a new sequence (default is 1)\n     * @return integer returns the sequence integer\n     */\n    public function generateSequenceID()\n    {\n        return generate_id();\n    }\n    public function portalNewEvent($event, $user, $groupname, $success, $comments = \"\", $patient_id = null, $log_from = '', $user_notes = \"\", $ccda_doc_id = 0)\n    {\n        $adodb = $GLOBALS['adodb']['db'];\n        $crt_user = isset($_SERVER['SSL_CLIENT_S_DN_CN']) ? $_SERVER['SSL_CLIENT_S_DN_CN'] : null;\n\n        $encrypt_comment = 'No';\n        if (! empty($comments)) {\n            if ($GLOBALS[\"enable_auditlog_encryption\"]) {\n                $comments = aes256Encrypt($comments);\n                $encrypt_comment = 'Yes';\n            }\n        }\n\n        $sql = \"insert into log ( date, event, user, groupname, success, comments, log_from, crt_user, patient_id, user_notes) \" . \"values ( NOW(), \" . $adodb->qstr($event) . \",\" .\n            $adodb->qstr($user) . \",\" . $adodb->qstr($groupname) . \",\" . $adodb->qstr($success) . \",\" .\n            $adodb->qstr($comments) . \",\" . $adodb->qstr($log_from) . \",\" . $adodb->qstr($crt_user) . \",\" .\n            $adodb->qstr($patient_id) . \",\" . $adodb->qstr($user_notes) .\")\";\n\n        $ret = sqlInsertClean_audit($sql);\n\n        $last_log_id = $GLOBALS['adodb']['db']->Insert_ID();\n        $encryptLogQry = \"INSERT INTO log_comment_encrypt (log_id, encrypt, checksum) \" . \" VALUES ( \" . $adodb->qstr($last_log_id) . \",\" . $adodb->qstr($encrypt_comment) . \",\" . \"'')\";\n        sqlInsertClean_audit($encryptLogQry);\n\n        if (( $patient_id == \"NULL\" ) || ( $patient_id == null )) {\n            $patient_id = 0;\n        }\n\n        send_atna_audit_msg($user, $groupname, $event, $patient_id, $success, $comments);\n    }\n}// app query class\n", "<?php\n/**\n * Document Template Download Module.\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * Copyright (C) 2013-2014 Rod Roark <rod@sunsetsystems.com>\n *\n * LICENSE: This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://opensource.org/licenses/gpl-license.php>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @author  Rod Roark <rod@sunsetsystems.com>\n * @link    http://www.open-emr.org\n */\n\n// This module downloads a specified document template to the browser after\n// substituting relevant patient data into its variables.\nrequire_once(dirname(__file__) . \"/../verify_session.php\");\n\nrequire_once($GLOBALS['srcdir'] . '/acl.inc');\nrequire_once($GLOBALS['srcdir'] . '/htmlspecialchars.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/formdata.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/formatting.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/appointments.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/options.inc.php');\n\n$form_filename = $_POST['docid'];\n$pid = $_POST['pid'];\n// $user = strip_escape_custom($_POST['user']);\n\n$nextLocation = 0; // offset to resume scanning\n$keyLocation = false; // offset of a potential {string} to replace\n$keyLength = 0; // length of {string} to replace\n$groupLevel = 0; // 0 if not in a {GRP} section\n$groupCount = 0; // 0 if no items in the group yet\n$itemSeparator = '; '; // separator between group items\n$tcnt = $grcnt = $ckcnt = 0;\n$html_flag = false;\n\n// Flags to ignore new lines\n\n// Check if the current location has the specified {string}.\nfunction keySearch(&$s, $key)\n{\n    global $keyLocation, $keyLength;\n    $keyLength = strlen($key);\n    if ($keyLength == 0) {\n        return false;\n    }\n\n    return $key == substr($s, $keyLocation, $keyLength);\n}\n\n// Replace the {string} at the current location with the specified data.\n// Also update the location to resume scanning accordingly.\nfunction keyReplace(&$s, $data)\n{\n    global $keyLocation, $keyLength, $nextLocation;\n    $nextLocation = $keyLocation + strlen($data);\n    return substr($s, 0, $keyLocation) . $data . substr($s, $keyLocation + $keyLength);\n}\n\n// Do some final processing of field data before it's put into the document.\nfunction dataFixup($data, $title = '')\n{\n    global $groupLevel, $groupCount, $itemSeparator;\n    if ($data !== '') {\n        // Replace some characters that can mess up XML without assuming XML content type.\n        $data = str_replace('&', '[and]', $data);\n        $data = str_replace('<', '[less]', $data);\n        $data = str_replace('>', '[greater]', $data);\n        // If in a group, include labels and separators.\n        if ($groupLevel) {\n            if ($title !== '') {\n                $data = $title . ': ' . $data;\n            }\n\n            if ($groupCount) {\n                $data = $itemSeparator . $data;\n            }\n\n            ++ $groupCount;\n        }\n    }\n\n    return $data;\n}\n\n// Return a string naming all issues for the specified patient and issue type.\nfunction getIssues($type)\n{\n    // global $itemSeparator;\n    $tmp = '';\n    $lres = sqlStatement(\"SELECT title, comments FROM lists WHERE \" . \"pid = ? AND type = ? AND enddate IS NULL \" . \"ORDER BY begdate\", array(\n        $GLOBALS['pid'],\n        $type\n    ));\n    while ($lrow = sqlFetchArray($lres)) {\n        if ($tmp) {\n            $tmp .= '; ';\n        }\n\n        $tmp .= $lrow['title'];\n        if ($lrow['comments']) {\n            $tmp .= ' (' . $lrow['comments'] . ')';\n        }\n    }\n\n    return $tmp;\n}\n\n// Top level function for scanning and replacement of a file's contents.\nfunction doSubs($s)\n{\n    global $ptrow, $hisrow, $enrow, $nextLocation, $keyLocation, $keyLength;\n    global $groupLevel, $groupCount, $itemSeparator, $pid, $encounter;\n    global $tcnt, $grcnt, $ckcnt;\n    global $html_flag;\n    $nextLocation = 0;\n    $groupLevel = 0;\n    $groupCount = 0;\n    \n    while (($keyLocation = strpos($s, '{', $nextLocation)) !== false) {\n        $nextLocation = $keyLocation + 1;\n        \n        if (keySearch($s, '{PatientSignature}')) {\n            $fn = $GLOBALS['web_root'] . '/portal/sign/assets/signhere.png';\n            $sigfld = '<span>';\n            $sigfld .= '<img style=\"cursor:pointer;color:red\" class=\"signature\" type=\"patient-signature\" id=\"patientSignature\" onclick=\"getSignature(this)\"' . 'alt=\"' . xla(\"Click in signature on file\") . '\" src=\"' . $fn . '\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{AdminSignature}')) {\n            $fn = $GLOBALS['web_root'] . '/portal/sign/assets/signhere.png';\n            $sigfld = '<span>';\n            $sigfld .= '<img style=\"cursor:pointer;color:red\" class=\"signature\" type=\"admin-signature\" id=\"adminSignature\" onclick=\"getSignature(this)\"' . 'alt=\"' . xla(\"Click in signature on file\") . '\" src=\"' . $fn . '\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{ParseAsHTML}')) {\n            $html_flag = true;\n            $s = keyReplace($s, \"\");\n        } else if (keySearch($s, '{TextInput}')) {\n            $sigfld = '<span>';\n            $sigfld .= '<input class=\"templateInput\" type=\"text\" style=\"color:black;\" data-textvalue=\"\" onblur=\"templateText(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{smTextInput}')) {\n            $sigfld = '<span>';\n            $sigfld .= '<input class=\"templateInput\" type=\"text\" style=\"color:black;max-width:50px;\" data-textvalue=\"\" onblur=\"templateText(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{CheckMark}')) {\n            $ckcnt ++;\n            $sigfld = '<span class=\"checkMark\" data-id=\"check' . $ckcnt . '\">';\n            $sigfld .= '<input type=\"checkbox\"  id=\"check' . $ckcnt . '\" data-value=\"\" onclick=\"templateCheckMark(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{ynRadioGroup}')) {\n            $grcnt ++;\n            $sigfld = '<span class=\"ynuGroup\" data-value=\"N/A\" data-id=\"' . $grcnt . '\" id=\"rgrp' . $grcnt . '\">';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" data-id=\"' . $grcnt . '\" value=\"Yes\">' . xlt(\"Yes\") . '</label>';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" data-id=\"' . $grcnt . '\" value=\"No\">' . xlt(\"No\") . '</label>';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" checked=\"checked\" data-id=\"' . $grcnt . '\" value=\"N/A\">N/A</label>';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{PatientName}')) {\n            $tmp = $ptrow['fname'];\n            if ($ptrow['mname']) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['mname'];\n            }\n\n            if ($ptrow['lname']) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['lname'];\n            }\n\n            $s = keyReplace($s, dataFixup($tmp, xl('Name')));\n        } else if (keySearch($s, '{PatientID}')) {\n            $s = keyReplace($s, dataFixup($ptrow['pubpid'], xl('Chart ID')));\n        } else if (keySearch($s, '{Address}')) {\n            $s = keyReplace($s, dataFixup($ptrow['street'], xl('Street')));\n        } else if (keySearch($s, '{City}')) {\n            $s = keyReplace($s, dataFixup($ptrow['city'], xl('City')));\n        } else if (keySearch($s, '{State}')) {\n            $s = keyReplace($s, dataFixup(getListItemTitle('state', $ptrow['state']), xl('State')));\n        } else if (keySearch($s, '{Zip}')) {\n            $s = keyReplace($s, dataFixup($ptrow['postal_code'], xl('Postal Code')));\n        } else if (keySearch($s, '{PatientPhone}')) {\n            $ptphone = $ptrow['phone_contact'];\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_home'];\n            }\n\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_cell'];\n            }\n\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_biz'];\n            }\n\n            if (preg_match(\"/([2-9]\\d\\d)\\D*(\\d\\d\\d)\\D*(\\d\\d\\d\\d)/\", $ptphone, $tmp)) {\n                $ptphone = '(' . $tmp[1] . ')' . $tmp[2] . '-' . $tmp[3];\n            }\n\n            $s = keyReplace($s, dataFixup($ptphone, xl('Phone')));\n        } else if (keySearch($s, '{PatientDOB}')) {\n            $s = keyReplace($s, dataFixup(oeFormatShortDate($ptrow['DOB']), xl('Birth Date')));\n        } else if (keySearch($s, '{PatientSex}')) {\n            $s = keyReplace($s, dataFixup(getListItemTitle('sex', $ptrow['sex']), xl('Sex')));\n        } else if (keySearch($s, '{DOS}')) {\n            // $s = @keyReplace($s, dataFixup(oeFormatShortDate(substr($enrow['date'], 0, 10)), xl('Service Date'))); // changed DOS to todays date- add future enc DOS\n            $s = @keyReplace($s, dataFixup(oeFormatShortDate(substr(date(\"Y-m-d\"), 0, 10)), xl('Service Date')));\n        } else if (keySearch($s, '{ChiefComplaint}')) {\n            $cc = $enrow['reason'];\n            $patientid = $ptrow['pid'];\n            $DOS = substr($enrow['date'], 0, 10);\n            // Prefer appointment comment if one is present.\n            $evlist = fetchEvents($DOS, $DOS, \" AND pc_pid = '$patientid' \");\n            foreach ($evlist as $tmp) {\n                if ($tmp['pc_pid'] == $pid && ! empty($tmp['pc_hometext'])) {\n                    $cc = $tmp['pc_hometext'];\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($cc, xl('Chief Complaint')));\n        } else if (keySearch($s, '{ReferringDOC}')) {\n            $tmp = empty($ptrow['ur_fname']) ? '' : $ptrow['ur_fname'];\n            if (! empty($ptrow['ur_mname'])) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['ur_mname'];\n            }\n\n            if (! empty($ptrow['ur_lname'])) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['ur_lname'];\n            }\n\n            $s = keyReplace($s, dataFixup($tmp, xl('Referer')));\n        } else if (keySearch($s, '{Allergies}')) {\n            $tmp = generate_plaintext_field(array(\n                'data_type' => '24',\n                'list_id' => ''\n            ), '');\n            $s = keyReplace($s, dataFixup($tmp, xl('Allergies')));\n        } else if (keySearch($s, '{Medications}')) {\n            $s = keyReplace($s, dataFixup(getIssues('medication'), xl('Medications')));\n        } else if (keySearch($s, '{ProblemList}')) {\n            $s = keyReplace($s, dataFixup(getIssues('medical_problem'), xl('Problem List')));\n        } // This tag indicates the fields from here until {/GRP} are a group of fields\n          // separated by semicolons. Fields with no data are omitted, and fields with\n          // data are prepended with their field label from the form layout.\n        else if (keySearch($s, '{GRP}')) {\n            ++ $groupLevel;\n            $groupCount = 0;\n            $s = keyReplace($s, '');\n        } else if (keySearch($s, '{/GRP}')) {\n            if ($groupLevel > 0) {\n                -- $groupLevel;\n            }\n\n            $s = keyReplace($s, '');\n        } // This is how we specify the separator between group items in a way that\n          // is independent of the document format. Whatever is between {ITEMSEP} and\n          // {/ITEMSEP} is the separator string. Default is \"; \".\n        else if (preg_match('/^\\{ITEMSEP\\}(.*?)\\{\\/ITEMSEP\\}/', substr($s, $keyLocation), $matches)) {\n            $itemSeparator = $matches[1];\n            $keyLength = strlen($matches[0]);\n            $s = keyReplace($s, '');\n        } // This handles keys like {LBFxxx:fieldid} for layout-based encounter forms.\n        else if (preg_match('/^\\{(LBF\\w+):(\\w+)\\}/', substr($s, $keyLocation), $matches)) {\n            $formname = $matches[1];\n            $fieldid = $matches[2];\n            $keyLength = 3 + strlen($formname) + strlen($fieldid);\n            $data = '';\n            $currvalue = '';\n            $title = '';\n            $frow = sqlQuery(\"SELECT * FROM layout_options \" . \"WHERE form_id = ? AND field_id = ? LIMIT 1\", array(\n                $formname,\n                $fieldid\n            ));\n            if (! empty($frow)) {\n                $ldrow = sqlQuery(\"SELECT ld.field_value \" . \"FROM lbf_data AS ld, forms AS f WHERE \" . \"f.pid = ? AND f.encounter = ? AND f.formdir = ? AND f.deleted = 0 AND \" . \"ld.form_id = f.form_id AND ld.field_id = ? \" . \"ORDER BY f.form_id DESC LIMIT 1\", array(\n                    $pid,\n                    $encounter,\n                    $formname,\n                    $fieldid\n                ));\n                if (! empty($ldrow)) {\n                    $currvalue = $ldrow['field_value'];\n                    $title = $frow['title'];\n                }\n\n                if ($currvalue !== '') {\n                    $data = generate_plaintext_field($frow, $currvalue);\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($data, $title));\n        } // This handles keys like {DEM:fieldid} and {HIS:fieldid}.\n        else if (preg_match('/^\\{(DEM|HIS):(\\w+)\\}/', substr($s, $keyLocation), $matches)) {\n            $formname = $matches[1];\n            $fieldid = $matches[2];\n            $keyLength = 3 + strlen($formname) + strlen($fieldid);\n            $data = '';\n            $currvalue = '';\n            $title = '';\n            $frow = sqlQuery(\"SELECT * FROM layout_options \" . \"WHERE form_id = ? AND field_id = ? LIMIT 1\", array(\n                $formname,\n                $fieldid\n            ));\n            if (! empty($frow)) {\n                $tmprow = $formname == 'DEM' ? $ptrow : $hisrow;\n                if (isset($tmprow[$fieldid])) {\n                    $currvalue = $tmprow[$fieldid];\n                    $title = $frow['title'];\n                }\n\n                if ($currvalue !== '') {\n                    $data = generate_plaintext_field($frow, $currvalue);\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($data, $title));\n        }\n    } // End if { character found.\n    \n    return $s;\n}\n// Get patient demographic info.\n$ptrow = sqlQuery(\"SELECT pd.*, \" . \"ur.fname AS ur_fname, ur.mname AS ur_mname, ur.lname AS ur_lname, ur.title AS ur_title, ur.specialty AS ur_specialty \" . \"FROM patient_data AS pd \" . \"LEFT JOIN users AS ur ON ur.id = pd.ref_providerID \" . \"WHERE pd.pid = ?\", array(\n    $pid\n));\n\n$hisrow = sqlQuery(\"SELECT * FROM history_data WHERE pid = ? \" . \"ORDER BY date DESC LIMIT 1\", array(\n    $pid\n));\n\n$enrow = array();\n\n// Get some info for the currently selected encounter.\nif ($encounter) {\n    $enrow = sqlQuery(\"SELECT * FROM form_encounter WHERE pid = ? AND \" . \"encounter = ?\", array(\n        $pid,\n        $encounter\n    ));\n}\n\n$templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/onsite_portal_documents/templates';\n$templatepath = \"$templatedir/$form_filename\";\n// test if this is folder with template, if not, must be for a specific patient\nif (! file_exists($templatepath)) {\n    $templatepath = \"$templatedir/\" . $pid . \"/$form_filename\";\n}\n\n// Create a temporary file to hold the output.\n$fname = tempnam($GLOBALS['temporary_files_dir'], 'OED');\n\n// Get mime type in a way that works with old and new PHP releases.\n$mimetype = 'application/octet-stream';\n$ext = strtolower(array_pop((explode('.', $fname))));\nif ('dotx' == $ext) {\n    // PHP does not seem to recognize this type.\n    $mimetype = 'application/msword';\n} else if (function_exists('finfo_open')) {\n    $finfo = finfo_open(FILEINFO_MIME_TYPE);\n    $mimetype = finfo_file($finfo, $templatepath);\n    finfo_close($finfo);\n} else if (function_exists('mime_content_type')) {\n    $mimetype = mime_content_type($templatepath);\n} else {\n    if ('doc' == $ext) {\n        $mimetype = 'application/msword';\n    } else if ('dot' == $ext) {\n        $mimetype = 'application/msword';\n    } else if ('htm' == $ext) {\n        $mimetype = 'text/html';\n    } else if ('html' == $ext) {\n        $mimetype = 'text/html';\n    } else if ('odt' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.text';\n    } else if ('ods' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.spreadsheet';\n    } else if ('ott' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.text';\n    } else if ('pdf' == $ext) {\n        $mimetype = 'application/pdf';\n    } else if ('ppt' == $ext) {\n        $mimetype = 'application/vnd.ms-powerpoint';\n    } elseif ('ps' == $ext) {\n        $mimetype = 'application/postscript';\n    } else if ('rtf' == $ext) {\n        $mimetype = 'application/rtf';\n    } else if ('txt' == $ext) {\n        $mimetype = 'text/plain';\n    } else if ('xls' == $ext) {\n        $mimetype = 'application/vnd.ms-excel';\n    }\n}\n\n$zipin = new ZipArchive();\nif ($zipin->open($templatepath) === true) {\n    $xml = '';\n    // Must be a zip archive.\n    $zipout = new ZipArchive();\n    $zipout->open($fname, ZipArchive::OVERWRITE);\n    for ($i = 0; $i < $zipin->numFiles; ++ $i) {\n        $ename = $zipin->getNameIndex($i);\n        $edata = $zipin->getFromIndex($i);\n        $edata = doSubs($edata);\n        $xml .= $edata;\n        $zipout->addFromString($ename, $edata);\n    }\n\n    $zipout->close();\n    $zipin->close();\n    $html = nl2br($xml);\n} else {\n    // Not a zip archive.\n    $edata = file_get_contents($templatepath);\n    $edata = doSubs($edata);\n    if ($html_flag) { // return raw html template\n        $html = $edata;\n    } else { // add br for lf in text template\n        $html = nl2br($edata);\n    }\n}\n\necho $html;\n"], "fixing_code": ["<?php\n/**\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * Copyright (C) 2011 Cassian LUP <cassi.lup@gmail.com>\n *\n * LICENSE: This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as\n *  published by the Free Software Foundation, either version 3 of the\n *  License, or (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Affero General Public License for more details.\n *\n *  You should have received a copy of the GNU Affero General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @author Cassian LUP <cassi.lup@gmail.com>\n * @link http://www.open-emr.org\n */\n\n    //setting the session & other config options\n    session_start();\n\n    //don't require standard openemr authorization in globals.php\n    $ignoreAuth = 1;\n\n    //For redirect if the site on session does not match\n    $landingpage = \"index.php?site=\".$_GET['site'];\n\n    //includes\n    require_once('../interface/globals.php');\n\n    use OpenEMR\\Core\\Header;\n\n    ini_set(\"error_log\", E_ERROR || ~E_NOTICE);\n    //exit if portal is turned off\nif (!(isset($GLOBALS['portal_onsite_two_enable'])) || !($GLOBALS['portal_onsite_two_enable'])) {\n    echo htmlspecialchars(xl('Patient Portal is turned off'), ENT_NOQUOTES);\n    exit;\n}\n\n    // security measure -- will check on next page.\n    $_SESSION['itsme'] = 1;\n    //\n\n    //\n    // Deal with language selection\n    //\n    // collect default language id (skip this if this is a password update)\nif (!(isset($_SESSION['password_update']) || isset($_GET['requestNew']))) {\n    $res2 = sqlStatement(\"select * from lang_languages where lang_description = ?\", array($GLOBALS['language_default']));\n    for ($iter = 0; $row = sqlFetchArray($res2); $iter++) {\n        $result2[$iter] = $row;\n    }\n\n    if (count($result2) == 1) {\n        $defaultLangID = $result2[0]{\"lang_id\"};\n        $defaultLangName = $result2[0]{\"lang_description\"};\n    } else {\n        //default to english if any problems\n        $defaultLangID = 1;\n        $defaultLangName = \"English\";\n    }\n\n  // set session variable to default so login information appears in default language\n    $_SESSION['language_choice'] = $defaultLangID;\n  // collect languages if showing language menu\n    if ($GLOBALS['language_menu_login']) {\n        // sorting order of language titles depends on language translation options.\n        $mainLangID = empty($_SESSION['language_choice']) ? '1' : $_SESSION['language_choice'];\n        if ($mainLangID == '1' && !empty($GLOBALS['skip_english_translation'])) {\n            $sql = \"SELECT * FROM lang_languages ORDER BY lang_description, lang_id\";\n            $res3=SqlStatement($sql);\n        } else {\n          // Use and sort by the translated language name.\n            $sql = \"SELECT ll.lang_id, \" .\n                 \"IF(LENGTH(ld.definition),ld.definition,ll.lang_description) AS trans_lang_description, \" .\n                 \"ll.lang_description \" .\n                 \"FROM lang_languages AS ll \" .\n                 \"LEFT JOIN lang_constants AS lc ON lc.constant_name = ll.lang_description \" .\n                 \"LEFT JOIN lang_definitions AS ld ON ld.cons_id = lc.cons_id AND \" .\n                 \"ld.lang_id = ? \" .\n                 \"ORDER BY IF(LENGTH(ld.definition),ld.definition,ll.lang_description), ll.lang_id\";\n            $res3=SqlStatement($sql, array($mainLangID));\n        }\n        for ($iter = 0; $row = sqlFetchArray($res3); $iter++) {\n            $result3[$iter] = $row;\n        }\n        if (count($result3) == 1) {\n          //default to english if only return one language\n            $hiddenLanguageField = \"<input type='hidden' name='languageChoice' value='1' />\\n\";\n        }\n    } else {\n        $hiddenLanguageField = \"<input type='hidden' name='languageChoice' value='\".htmlspecialchars($defaultLangID, ENT_QUOTES).\"' />\\n\";\n    }\n}\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <title><?php echo xlt('Patient Portal Login'); ?></title>\n    <?php\n        $css = $GLOBALS['css_header'];\n        $GLOBALS['css_header'] = \"\";\n        Header::setupHeader(['datetime-picker']);\n        //$GLOBALS['css_header'] = $css;\n    ?>\n    <script type=\"text/javascript\" src=\"<?php echo $GLOBALS['assets_static_relative']; ?>/jquery.gritter-1-7-4/js/jquery.gritter.min.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"<?php echo $GLOBALS['assets_static_relative']; ?>/jquery.gritter-1-7-4/css/jquery.gritter.css\" />\n    <script type=\"text/javascript\" src=\"<?php echo $GLOBALS['assets_static_relative']; ?>/emodal-1-2-65/dist/eModal.js\"></script>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/base.css?v=<?php echo $v_js_includes; ?>\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"assets/css/register.css?v=<?php echo $v_js_includes; ?>\" />\n<script type=\"text/javascript\">\n    function process() {\n        if (!(validate())) {\n            alert ('<?php echo addslashes(xl('Field(s) are missing!')); ?>');\n            return false;\n        }\n    }\n    function validate() {\n            var pass=true;\n        if (document.getElementById('uname').value == \"\") {\n        document.getElementById('uname').style.border = \"1px solid red\";\n                pass=false;\n        }\n        if (document.getElementById('pass').value == \"\") {\n        document.getElementById('pass').style.border = \"1px solid red\";\n                pass=false;\n        }\n            return pass;\n    }\n    function process_new_pass() {\n        if (!(validate_new_pass())) {\n            alert ('<?php echo addslashes(xl('Field(s) are missing!')); ?>');\n            return false;\n        }\n        if (document.getElementById('pass_new').value != document.getElementById('pass_new_confirm').value) {\n            alert ('<?php echo addslashes(xl('The new password fields are not the same.')); ?>');\n            return false;\n        }\n        if (document.getElementById('pass').value == document.getElementById('pass_new').value) {\n            alert ('<?php echo addslashes(xl('The new password can not be the same as the current password.')); ?>');\n            return false;\n        }\n    }\n\n    function validate_new_pass() {\n        var pass=true;\n        if (document.getElementById('uname').value == \"\") {\n            document.getElementById('uname').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass').value == \"\") {\n            document.getElementById('pass').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass_new').value == \"\") {\n            document.getElementById('pass_new').style.border = \"1px solid red\";\n            pass=false;\n        }\n        if (document.getElementById('pass_new_confirm').value == \"\") {\n            document.getElementById('pass_new_confirm').style.border = \"1px solid red\";\n            pass=false;\n        }\n        return pass;\n    }\n</script>\n</head>\n<body class=\"skin-blue\">\n<br><br>\n<div class=\"container text-center\">\n    <?php if (isset($_SESSION['password_update']) || isset($_GET['password_update'])) {\n        $_SESSION['password_update']=1;\n        ?>\n      <div id=\"wrapper\" class=\"centerwrapper\" style=\"text-align:center;\">\n        <h2 class=\"title\"><?php echo xlt('Please Enter a New Password'); ?></h2>\n        <form action=\"get_patient_info.php\" method=\"POST\" onsubmit=\"return process_new_pass()\" >\n            <table style=\"width:100%\">\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('User Name'); ?></td>\n                    <td><input name=\"uname\" id=\"uname\" type=\"text\" autocomplete=\"off\" value=\"<?php echo attr($_SESSION['portal_username']); ?>\"/></td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Current Password');?></td>\n                    <td>\n                        <input name=\"pass\" id=\"pass\" type=\"password\" autocomplete=\"off\" value=\"\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('New Password');?></td>\n                    <td>\n                        <input name=\"pass_new\" id=\"pass_new\" type=\"password\" />\n                    </td>\n                </tr>\n                <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Confirm New Password');?></td>\n                    <td>\n                        <input name=\"pass_new_confirm\" id=\"pass_new_confirm\" type=\"password\" />\n                    </td>\n                </tr>\n                 <tr>\n                    <td class=\"algnRight\"><?php echo xlt('Confirm Email Address');?></td>\n                    <td>\n                        <input name=\"passaddon\" id=\"passaddon\" placeholder=\"<?php echo xla('Your on file email address'); ?>\" type=\"email\" autocomplete=\"off\" value=\"\"  />\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan=2><br><input class=\"pull-right\" type=\"submit\" value=\"<?php echo xla('Log In');?>\" /></td>\n                </tr>\n            </table>\n        </form>\n        <div class=\"copyright\"><?php echo xlt('Powered by');?> OpenEMR</div>\n      </div>\n    <?php } elseif (isset($_GET['requestNew'])) { ?>\n    <div id=\"wrapper\" class=\"centerwrapper\" style=\"text-align:center;\" >\n        <form  class=\"form-inline\" id=\"resetPass\" action=\"\" method=\"\" >\n            <div class=\"row\">\n                <div class=\"col-sm-10 col-md-offset-1 text-center\">\n                    <fieldset>\n                        <legend class='bg-primary'><h3><?php echo xlt('Patient Credentials Reset') ?></h3></legend>\n                        <div class=\"well\">\n                        <div class=\"row\">\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"fname\"><?php echo xlt('First')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <input type=\"text\" class=\"form-control\" id=\"fname\" required placeholder=\"<?php echo xla('First Name'); ?>\">\n                                </div>\n                            </div>\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"lname\"><?php echo xlt('Last Name')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <input type=\"text\" class=\"form-control\" id=\"lname\" required placeholder=\"<?php echo xla('Enter Last'); ?>\">\n                                </div>\n                            </div>\n                            <div class=\"form-group inline\">\n                                <label class=\"control-label\" for=\"dob\"><?php echo xlt('Birth Date')?></label>\n                                <div class=\"controls inline-inputs\">\n                                    <div class=\"input-group\">\n                                        <input id=\"dob\" type=\"text\" required class=\"form-control datepicker\" placeholder=\"<?php echo xla('YYYY-MM-DD'); ?>\" />\n                                    </div>\n                                </div>\n                            </div></div>\n                            <div class=\"row\">\n                                <div class=\"col-sm-12 form-group\">\n                                    <label class=\"control-label\" for=\"emailInput\"><?php echo xlt('Enter E-Mail Address')?></label>\n                                    <div class=\"controls inline-inputs\">\n                                        <input id=\"emailInput\" type=\"email\" class=\"form-control\" style=\"width: 100%\" required\n                                            placeholder=\"<?php echo xla('Must be current email address on file.'); ?>\" maxlength=\"100\">\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <button id=\"submitRequest\" class=\"btn btn-primary nextBtn btn-sm pull-right\" type=\"button\"><?php echo xlt('Verify') ?></button>\n                    </fieldset>\n                </div>\n            </div>\n        </form>\n    </div>\n    <?php } else {\n?>  <!-- Main logon -->\n    <div id=\"wrapper\" class=\"row centerwrapper text-center\">\n    <img style=\"width:65%\" src='<?php echo $GLOBALS['images_static_relative']; ?>/login-logo.png'/>\n    <form  class=\"form-inline text-center\" action=\"get_patient_info.php\" method=\"POST\" onsubmit=\"return process()\">\n        <div class=\"row\">\n                <div class=\"col-sm-12 text-center\">\n                    <fieldset>\n                        <legend class=\"bg-primary\"><h3><?php echo xlt('Patient Portal Login'); ?></h3></legend>\n                        <div class=\"well\">\n                        <div class=\"row\">\n                                <div class=\"col-sm-12\">\n                                    <div class=\"form-group inline\">\n                                        <label class=\"control-label\" for=\"uname\"><?php echo xlt('Username')?></label>\n                                        <div class=\"controls inline-inputs\">\n                                            <input type=\"text\" class=\"form-control\" name=\"uname\" id=\"uname\" type=\"text\" autocomplete=\"on\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"form-group inline\">\n                                        <label class=\"control-label\" for=\"pass\"><?php echo xlt('Password')?></label>\n                                        <div class=\"controls inline-inputs\">\n                                            <input class=\"form-control\" name=\"pass\" id=\"pass\" type=\"password\" required autocomplete=\"on\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-sm-12 form-group\">\n                                    <label class=\"control-label\" for=\"passaddon\"><?php echo xlt('E-Mail Address')?></label>\n                                    <div class=\"controls inline-inputs\">\n                                        <input class=\"form-control\" style=\"width: 100%\" name=\"passaddon\" id=\"passaddon\" placeholder=\"<?php echo xla('on file email'); ?>\" type=\"email\" autocomplete=\"on\" />\n                                    </div>\n                                </div>\n                            </div>\n                        <?php if ($GLOBALS['language_menu_login']) { ?>\n                        <?php if (count($result3) != 1) { ?>\n                        <div class=\"form-group row\">\n                            <label for=\"selLanguage\"><?php echo xlt('Language'); ?></label>\n                            <select class=\"form-control\" id=\"selLanguage\" name=\"languageChoice\">\n                            <?php\n                                echo \"<option selected='selected' value='\" . htmlspecialchars($defaultLangID, ENT_QUOTES) . \"'>\" .\n                                     htmlspecialchars(xl('Default') . \" - \" . xl($defaultLangName), ENT_NOQUOTES) . \"</option>\\n\";\n                            foreach ($result3 as $iter) {\n                                if ($GLOBALS['language_menu_showall']) {\n                                    if (! $GLOBALS['allow_debug_language'] && $iter['lang_description'] == 'dummy') {\n                                        continue; // skip the dummy language\n                                    }\n                                    echo \"<option value='\" . htmlspecialchars($iter['lang_id'], ENT_QUOTES) . \"'>\" .\n                                         htmlspecialchars($iter['trans_lang_description'], ENT_NOQUOTES) . \"</option>\\n\";\n                                } else {\n                                    if (in_array($iter['lang_description'], $GLOBALS['language_menu_show'])) {\n                                        if (! $GLOBALS['allow_debug_language'] && $iter['lang_description'] == 'dummy') {\n                                            continue; // skip the dummy language\n                                        }\n                                        echo \"<option value='\" . htmlspecialchars($iter['lang_id'], ENT_QUOTES) . \"'>\" .\n                                             htmlspecialchars($iter['trans_lang_description'], ENT_NOQUOTES) . \"</option>\\n\";\n                                    }\n                                }\n                            }\n                            ?>\n                          </select>\n                        </div>\n                        <?php } } ?>\n                        </div>\n                        <div class=\"col-sm-12 col-md-12\">\n                            <?php if ($GLOBALS['portal_onsite_two_register']) { ?>\n                                <button class=\"btn btn-default pull-left\"  onclick=\"location.replace('./account/register.php')\"><?php echo xlt('Register');?></button>\n                            <?php } ?>\n                            <?php if ($GLOBALS['portal_two_pass_reset'] && isset($_GET['w']) && (isset($_GET['u']) || isset($_GET['p']))) { ?>\n                               <button class=\"btn btn-danger\" onclick=\"location.replace('./index.php?requestNew=1')\" style=\"margin-left:10px\"><?php echo xlt('Reset Credentials');?></button>\n                            <?php } ?>\n                                <button  class=\"btn btn-success pull-right\" type=\"submit\" ><?php echo xlt('Log In');?></button>\n                        </div>\n                    </fieldset>\n                </div>\n          </div>\n            <?php if (!(empty($hiddenLanguageField))) {\n                echo $hiddenLanguageField; } ?>\n    </form>\n    </div><!-- div wrapper -->\n    <?php } ?> <!--  logon wrapper -->\n</div><!-- container -->\n\n<script type=\"text/javascript\">\n$(document).ready(function() {\n\n<?php // if something went wrong\nif (isset($_GET['requestNew'])) {\n    $_SESSION['register'] = true;\n    $_SESSION['authUser'] = 'portal-user';\n    $_SESSION['pid'] = true;\n    ?>\n    $('.datepicker').datetimepicker({\n        <?php $datetimepicker_timepicker = false; ?>\n        <?php $datetimepicker_showseconds = false; ?>\n        <?php $datetimepicker_formatInput = false; ?>\n        <?php require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php'); ?>\n     });\n    $(document.body).on('hidden.bs.modal', function () {\n        callServer('cleanup');\n    });\n    $(\"#submitRequest\").click(function () {\n        callServer('is_new', '');\n    });\n<?php } ?>\n<?php if (isset($_GET['w'])) { ?>\n    var unique_id = $.gritter.add({\n        title: '<span class=\"red\"><?php echo xlt('Oops!');?></span>',\n        text: '<?php echo xlt('Something went wrong. Please try again.'); ?>',\n        sticky: false,\n        time: '5000',\n        class_name: 'my-nonsticky-class'\n    });\n<?php } ?>\n<?php // if successfully logged out\nif (isset($_GET['logout'])) { ?>\n    var unique_id = $.gritter.add({\n        title: '<span class=\"green\"><?php echo xlt('Success');?></span>',\n        text: '<?php echo xlt('You have been successfully logged out.');?>',\n        sticky: false,\n        time: '5000',\n        class_name: 'my-nonsticky-class'\n    });\n<?php } ?>\n\nreturn false;\n});\n/* Test Data\n$(\"#emailInput\").val(\"me@me.com\");\n$(\"#fname\").val(\"Jerry\");\n$(\"#lname\").val(\"Padgett\");\n$(\"#dob\").val(\"1919-03-03\"); */\n\nfunction callServer(action, value, value2, last, first) {\n    var data = {\n        'action' : action,\n        'value' : value,\n        'dob' : $(\"#dob\").val(),\n        'last' : $(\"#lname\").val(),\n        'first' : $(\"#fname\").val(),\n        'email' : $(\"#emailInput\").val()\n    }\n    if (action == 'do_signup') {\n        data = {\n            'action': action,\n            'pid': value\n        };\n    }\n    else if (action == 'notify_admin') {\n        data = {\n            'action': action,\n            'pid': value,\n            'provider': value2\n        };\n    }\n    else if (action == 'cleanup') {\n        data = {\n            'action': action\n        }\n    };\n    $.ajax({\n        type : 'GET',\n        url : './account/account.php',\n        data : data\n    }).done(function (rtn) {\n        if (action == \"cleanup\") {\n            window.location.href = \"./index.php\" // Goto landing page.\n        }\n        else if (action == \"is_new\") {\n            if (parseInt(rtn) > 0) {\n                var yes = confirm('<?php echo xls(\"Account is validated. Send new credentials?\") ?>');\n                if(!yes)\n                    callServer('cleanup');\n                else\n                    callServer('do_signup', parseInt(rtn));\n            }\n            else {\n                // After error alert app exit to landing page.\n                var message = \"<?php echo xls('Unable to find your records. Be sure to use your correct Dob, First and Last name and Email of record. If you have opted out of email with none on file then leave blank.'); ?>\";\n                eModal.alert(message);\n            }\n        }\n        else if (action == 'do_signup') {\n            if (rtn == \"\") {\n                var message = \"<?php echo xlt('Unable to either create credentials or send email.'); ?>\";\n                alert(message);\n                return false;\n            }\n            //alert(rtn); // sync alert.. rtn holds username and password for testing.\n            var message = \"<?php echo xls(\"Your new credentials have been sent. Check your email inbox and also possibly your spam folder. Once you log into your patient portal feel free to make an appointment or send us a secure message. We look forward to seeing you soon.\"); ?>\"\n            eModal.alert(message); // This is an async call. The modal close event exits us to portal landing page after cleanup.\n        }\n    }).fail(function (err) {\n        var message = \"<?php echo xls('Something went wrong.') ?>\";\n        alert(message);\n    });\n}\n</script>\n</body>\n</html>\n", "<?php\n/**\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n *\n * LICENSE: This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU Affero General Public License as\n *  published by the Free Software Foundation, either version 3 of the\n *  License, or (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Affero General Public License for more details.\n *\n *  You should have received a copy of the GNU Affero General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @link http://www.open-emr.org\n */\n// namespace OnsitePortal;\n/**\n *\n * @param\n *            wrapper class for moving some care coordination zend product\n */\nrequire_once(dirname(__FILE__) . '/../../library/sql.inc');\nrequire_once(dirname(__FILE__) . '/../../library/crypto.php');\nclass ApplicationTable\n{\n\n    public function __construct()\n    {\n    }\n\n    /**\n     * Function zQuery\n     * All DB Transactions take place\n     *\n     * @param String $sql\n     *            SQL Query Statment\n     * @param array $params\n     *            SQL Parameters\n     * @param boolean $log\n     *            Logging True / False\n     * @param boolean $error\n     *            Error Display True / False\n     * @return type\n     */\n    public function zQuery($sql, $params = '', $log = false, $error = true)\n    {\n        $return = false;\n        $result = false;\n\n        try {\n            $return = sqlStatement($sql, $params);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $sql, $params);\n            }\n        }\n\n        if ($log) {\n            auditSQLEvent($sql, $result, $params);\n        }\n\n        return $return;\n    }\n    public function getPortalAudit($patientid, $action = 'review', $activity = 'profile', $status = 'waiting', $auditflg = 1, $rtn = 'last', $oelog = true, $error = true)\n    {\n        $return = false;\n        $result = false;\n        $audit = array (\n                    $patientid,\n                    $activity,\n                    $auditflg,\n                    $status,\n                    $action\n            );\n        try {\n            $sql = \"Select * From onsite_portal_activity As pa Where  pa.patient_id = ? And  pa.activity = ? And  pa.require_audit = ? \".\n                                    \"And pa.status = ? And  pa.pending_action = ? ORDER BY pa.date DESC LIMIT 1\"; // @todo setup condional for limit\n            $return = sqlStatementNoLog($sql, $audit);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $logsql, $audit);\n            }\n        }\n\n        if ($oelog) {\n            auditSQLEvent($sql, $result, $audit);\n        }\n\n        if ($rtn == 'last') {\n            return sqlFetchArray($return);\n        } else {\n            return $return;\n        }\n    }\n    /**\n     * Function portalAudit\n     * All Portal audit Transactions log\n     * Hoping to work both ends, patient and user, from one or most two tables\n     *\n     * @param String $sql\n     *            SQL Query Statment for actions will execute sql as normal for cases\n     *            user auth is not required.\n     * @param array $params\n     *            Parameters for actions\n     * @param array $auditvals\n     *            Parameters of audit\n     * @param boolean $log\n     *            openemr Logging True / False\n     * @param boolean $error\n     *            Error Display True / False\n     * @param type audit array params for portal audits\n     *         $audit = Array();\n     *         $audit['patient_id']=\"\";\n     *         $audit['activity']=\"\";\n     *         $audit['require_audit']=\"\";\n     *         $audit['pending_action']=\"\";\n     *         $audit['action_taken']=\"\";\n     *         $audit['status']=\"\";\n     *         $audit['narrative']=\"\";\n     *         $audit['table_action']=\"\"; //auth user action sql to run after review\n     *         $audit['table_args']=\"\"; //auth user action data to run after review\n     *         $audit['action_user']=\"\";\n     *         $audit['action_taken_time']=\"\";\n     *         $audit['checksum']=\"\";\n     */\n    public function portalAudit($type = 'insert', $rec = '', array $auditvals, $oelog = true, $error = true)\n    {\n        $return = false;\n        $result = false;\n        $audit = array ();\n        if ($type != 'insert') {\n            $audit['date'] = $auditvals['date'] ? $auditvals['date'] : date(\"Y-m-d H:i:s\");\n        }\n\n        $audit['patient_id'] = $auditvals['patient_id'] ? $auditvals['patient_id'] : $_SESSION['pid'];\n        $audit['activity'] = $auditvals['activity'] ? $auditvals['activity'] : \"\";\n        $audit['require_audit'] = $auditvals['require_audit'] ? $auditvals['require_audit'] : \"\";\n        $audit['pending_action'] = $auditvals['pending_action'] ? $auditvals['pending_action'] : \"\";\n        $audit['action_taken'] = $auditvals['action_taken'] ? $auditvals['action_taken'] : \"\";\n        $audit['status'] = $auditvals['status'] ? $auditvals['status'] : \"new\";\n        $audit['narrative'] = $auditvals['narrative'] ? $auditvals['narrative'] : \"\";\n        $audit['table_action'] = $auditvals['table_action'] ? $auditvals['table_action'] : \"\";\n        if ($auditvals['activity'] == 'profile') {\n            $audit['table_args'] = serialize($auditvals['table_args']);\n        } else {\n            $audit['table_args'] = $auditvals['table_args'];\n        }\n\n        $audit['action_user'] = $auditvals['action_user'] ? $auditvals['action_user'] : \"\";\n        $audit['action_taken_time'] = $auditvals['action_taken_time'] ? $auditvals['action_taken_time'] : \"\";\n        $audit['checksum'] = $auditvals['checksum'] ? $auditvals['checksum'] : \"\";\n\n        try {\n            if ($type != 'update') {\n                $logsql = \"INSERT INTO onsite_portal_activity\".\n                        \"( date, patient_id, activity, require_audit, pending_action, action_taken, status, narrative,\".\n                            \"table_action, table_args, action_user, action_taken_time, checksum) \".\n                                \"VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n            } else {\n                $logsql = \"update onsite_portal_activity set date=?, patient_id=?, activity=?, require_audit=?,\".\n                        \"            pending_action=?, action_taken=?,status=?, narrative=?, table_action=?, table_args=?,\".\n                                        \"action_user=?, action_taken_time=?, checksum=? \";\n                $logsql .= \"where id='\" . add_escape_custom($rec) . \"' And patient_id='\" . add_escape_custom($audit['patient_id']) . \"'\";\n            }\n\n            $return = sqlStatementNoLog($logsql, $audit);\n            $result = true;\n        } catch (Exception $e) {\n            if ($error) {\n                $this->errorHandler($e, $logsql, $audit);\n            }\n        }\n\n        if ($oelog) {\n            $this->portalLog('profile audit transaction', $audit['patient_id'], $logsql, $audit, $result, 'See portal audit activity');\n            //auditSQLEvent( $logsql, $result, $audit );\n        }\n\n        return $return;\n    }\n\n    public function portalLog($event = '', $patient_id = null, $comments = \"\", $binds = '', $success = '1', $user_notes = '', $ccda_doc_id = 0)\n    {\n        $groupname = isset($GLOBALS['groupname']) ? $GLOBALS['groupname'] : 'none';\n        $user = isset($_SESSION['portal_username']) ? $_SESSION['portal_username'] : $_SESSION['authUser'];\n        $log_from = isset($_SESSION['portal_username']) ? 'onsite-portal' : 'portal-dashboard';\n        if (!isset($_SESSION['portal_username']) && !isset($_SESSION['authUser'])) {\n            $log_from = 'portal-login';\n        }\n\n        $user_notes .= isset($_SESSION['whereto']) ? (' Module:' . $_SESSION['whereto']) : \"\";\n\n        $processed_binds = \"\";\n        if (is_array($binds)) {\n            $first_loop = true;\n            foreach ($binds as $value_bind) {\n                if ($first_loop) {\n                    $processed_binds .= \"'\" . add_escape_custom($value_bind) . \"'\";\n                    $first_loop = false;\n                } else {\n                    $processed_binds .= \",'\" . add_escape_custom($value_bind) . \"'\";\n                }\n            }\n\n            if (! empty($processed_binds)) {\n                $processed_binds = \"(\" . $processed_binds . \")\";\n                $comments .= \" \" . $processed_binds;\n            }\n        }\n\n        $this->portalNewEvent($event, $user, $groupname, $success, $comments, $patient_id, $log_from, $user_notes, $ccda_doc_id);\n    }\n    /**\n     * Function errorHandler\n     * All error display and log\n     * Display the Error, Line and File\n     * Same behavior of HelpfulDie fuction in OpenEMR\n     * Path /library/sql.inc\n     *\n     * @param type $e\n     * @param string $sql\n     * @param array $binds\n     */\n    public function errorHandler($e, $sql, $binds = '')\n    {\n        $trace = $e->getTraceAsString();\n        $nLast = strpos($trace, '[internal function]');\n        $trace = substr($trace, 0, ( $nLast - 3 ));\n        $logMsg = '';\n        do {\n            $logMsg .= \"\\r Exception: \" . self::escapeHtml($e->getMessage());\n        } while ($e = $e->getPrevious());\n        /**\n         * List all Params\n         */\n        $processedBinds = \"\";\n        if (is_array($binds)) {\n            $firstLoop = true;\n            foreach ($binds as $valueBind) {\n                if ($firstLoop) {\n                    $processedBinds .= \"'\" . $valueBind . \"'\";\n                    $firstLoop = false;\n                } else {\n                    $processedBinds .= \",'\" . $valueBind . \"'\";\n                }\n            }\n\n            if (! empty($processedBinds)) {\n                $processedBinds = \"(\" . $processedBinds . \")\";\n            }\n        }\n\n        echo '<pre><span style=\"color: red;\">';\n        echo 'ERROR : ' . $logMsg;\n        echo \"\\r\\n\";\n        echo 'SQL statement : ' . self::escapeHtml($sql);\n        echo self::escapeHtml($processedBinds);\n        echo '</span></pre>';\n        echo '<pre>';\n        echo $trace;\n        echo '</pre>';\n        /**\n         * Error Logging\n         */\n        $logMsg .= \"\\n SQL statement : $sql\" . $processedBinds;\n        $logMsg .= \"\\n $trace\";\n        error_log(\"ERROR: \" . $logMsg, 0);\n    }\n    public function escapeHtml($string)\n    {\n        return htmlspecialchars($string, ENT_QUOTES);\n    }\n    /*\n     * Retrive the data format from GLOBALS\n     *\n     * @param Date format set in GLOBALS\n     * @return Date format in PHP\n     */\n    public function dateFormat($format)\n    {\n        if ($format == \"0\") {\n            $date_format = 'yyyy/mm/dd';\n        } else if ($format == 1) {\n            $date_format = 'mm/dd/yyyy';\n        } else if ($format == 2) {\n            $date_format = 'dd/mm/yyyy';\n        } else {\n            $date_format = $format;\n        }\n\n        return $date_format;\n    }\n    /**\n     * fixDate - Date Conversion Between Different Formats\n     *\n     * @param String $input_date\n     *            Date to be converted\n     * @param String $date_format\n     *            Target Date Format\n     */\n    public function fixDate($input_date, $output_format = null, $input_format = null)\n    {\n        if (! $input_date) {\n            return;\n        }\n\n        $input_date = preg_replace('/T|Z/', ' ', $input_date);\n\n        $temp = explode(' ', $input_date); // split using space and consider the first portion, in case of date with time\n        $input_date = $temp[0];\n\n        $output_format = ApplicationTable::dateFormat($output_format);\n        $input_format = ApplicationTable::dateFormat($input_format);\n\n        preg_match(\"/[^ymd]/\", $output_format, $date_seperator_output);\n        $seperator_output = $date_seperator_output[0];\n        $output_date_arr = explode($seperator_output, $output_format);\n\n        preg_match(\"/[^ymd]/\", $input_format, $date_seperator_input);\n        $seperator_input = $date_seperator_input[0];\n        $input_date_array = explode($seperator_input, $input_format);\n\n        preg_match(\"/[^1234567890]/\", $input_date, $date_seperator_input);\n        $seperator_input = $date_seperator_input[0];\n        $input_date_arr = explode($seperator_input, $input_date);\n\n        foreach ($output_date_arr as $key => $format) {\n            $index = array_search($format, $input_date_array);\n            $output_date_arr[$key] = $input_date_arr[$index];\n        }\n\n        $output_date = implode($seperator_output, $output_date_arr);\n\n        $output_date = $temp[1] ? $output_date . \" \" . $temp[1] : $output_date; // append the time, if exists, with the new formatted date\n        return $output_date;\n    }\n\n    /*\n     * Using generate id function from OpenEMR sql.inc library file\n     * @param string $seqname table name containing sequence (default is adodbseq)\n     * @param integer $startID id to start with for a new sequence (default is 1)\n     * @return integer returns the sequence integer\n     */\n    public function generateSequenceID()\n    {\n        return generate_id();\n    }\n    public function portalNewEvent($event, $user, $groupname, $success, $comments = \"\", $patient_id = null, $log_from = '', $user_notes = \"\", $ccda_doc_id = 0)\n    {\n        $adodb = $GLOBALS['adodb']['db'];\n        $crt_user = isset($_SERVER['SSL_CLIENT_S_DN_CN']) ? $_SERVER['SSL_CLIENT_S_DN_CN'] : null;\n\n        $encrypt_comment = 'No';\n        if (! empty($comments)) {\n            if ($GLOBALS[\"enable_auditlog_encryption\"]) {\n                $comments = aes256Encrypt($comments);\n                $encrypt_comment = 'Yes';\n            }\n        }\n\n        $sql = \"insert into log ( date, event, user, groupname, success, comments, log_from, crt_user, patient_id, user_notes) \" . \"values ( NOW(), \" . $adodb->qstr($event) . \",\" .\n            $adodb->qstr($user) . \",\" . $adodb->qstr($groupname) . \",\" . $adodb->qstr($success) . \",\" .\n            $adodb->qstr($comments) . \",\" . $adodb->qstr($log_from) . \",\" . $adodb->qstr($crt_user) . \",\" .\n            $adodb->qstr($patient_id) . \",\" . $adodb->qstr($user_notes) .\")\";\n\n        $ret = sqlInsertClean_audit($sql);\n\n        $last_log_id = $GLOBALS['adodb']['db']->Insert_ID();\n        $encryptLogQry = \"INSERT INTO log_comment_encrypt (log_id, encrypt, checksum) \" . \" VALUES ( \" . $adodb->qstr($last_log_id) . \",\" . $adodb->qstr($encrypt_comment) . \",\" . \"'')\";\n        sqlInsertClean_audit($encryptLogQry);\n\n        if (( $patient_id == \"NULL\" ) || ( $patient_id == null )) {\n            $patient_id = 0;\n        }\n\n        send_atna_audit_msg($user, $groupname, $event, $patient_id, $success, $comments);\n    }\n}// app query class\n", "<?php\n/**\n * Document Template Download Module.\n *\n * Copyright (C) 2016-2017 Jerry Padgett <sjpadgett@gmail.com>\n * Copyright (C) 2013-2014 Rod Roark <rod@sunsetsystems.com>\n *\n * LICENSE: This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://opensource.org/licenses/gpl-license.php>.\n *\n * @package OpenEMR\n * @author Jerry Padgett <sjpadgett@gmail.com>\n * @author  Rod Roark <rod@sunsetsystems.com>\n * @link    http://www.open-emr.org\n */\n\n// This module downloads a specified document template to the browser after\n// substituting relevant patient data into its variables.\nrequire_once(dirname(__file__) . \"/../verify_session.php\");\n\nrequire_once($GLOBALS['srcdir'] . '/acl.inc');\nrequire_once($GLOBALS['srcdir'] . '/htmlspecialchars.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/formdata.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/formatting.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/appointments.inc.php');\nrequire_once($GLOBALS['srcdir'] . '/options.inc.php');\n\n$form_filename = $_POST['docid'];\n$pid = $_POST['pid'];\n// $user = strip_escape_custom($_POST['user']);\n\n$nextLocation = 0; // offset to resume scanning\n$keyLocation = false; // offset of a potential {string} to replace\n$keyLength = 0; // length of {string} to replace\n$groupLevel = 0; // 0 if not in a {GRP} section\n$groupCount = 0; // 0 if no items in the group yet\n$itemSeparator = '; '; // separator between group items\n$tcnt = $grcnt = $ckcnt = 0;\n$html_flag = false;\n\n// Flags to ignore new lines\n\n// Check if the current location has the specified {string}.\nfunction keySearch(&$s, $key)\n{\n    global $keyLocation, $keyLength;\n    $keyLength = strlen($key);\n    if ($keyLength == 0) {\n        return false;\n    }\n\n    return $key == substr($s, $keyLocation, $keyLength);\n}\n\n// Replace the {string} at the current location with the specified data.\n// Also update the location to resume scanning accordingly.\nfunction keyReplace(&$s, $data)\n{\n    global $keyLocation, $keyLength, $nextLocation;\n    $nextLocation = $keyLocation + strlen($data);\n    return substr($s, 0, $keyLocation) . $data . substr($s, $keyLocation + $keyLength);\n}\n\n// Do some final processing of field data before it's put into the document.\nfunction dataFixup($data, $title = '')\n{\n    global $groupLevel, $groupCount, $itemSeparator;\n    if ($data !== '') {\n        // Replace some characters that can mess up XML without assuming XML content type.\n        $data = str_replace('&', '[and]', $data);\n        $data = str_replace('<', '[less]', $data);\n        $data = str_replace('>', '[greater]', $data);\n        // If in a group, include labels and separators.\n        if ($groupLevel) {\n            if ($title !== '') {\n                $data = $title . ': ' . $data;\n            }\n\n            if ($groupCount) {\n                $data = $itemSeparator . $data;\n            }\n\n            ++ $groupCount;\n        }\n    }\n\n    return $data;\n}\n\n// Return a string naming all issues for the specified patient and issue type.\nfunction getIssues($type)\n{\n    // global $itemSeparator;\n    $tmp = '';\n    $lres = sqlStatement(\"SELECT title, comments FROM lists WHERE \" . \"pid = ? AND type = ? AND enddate IS NULL \" . \"ORDER BY begdate\", array(\n        $GLOBALS['pid'],\n        $type\n    ));\n    while ($lrow = sqlFetchArray($lres)) {\n        if ($tmp) {\n            $tmp .= '; ';\n        }\n\n        $tmp .= $lrow['title'];\n        if ($lrow['comments']) {\n            $tmp .= ' (' . $lrow['comments'] . ')';\n        }\n    }\n\n    return $tmp;\n}\n\n// Top level function for scanning and replacement of a file's contents.\nfunction doSubs($s)\n{\n    global $ptrow, $hisrow, $enrow, $nextLocation, $keyLocation, $keyLength;\n    global $groupLevel, $groupCount, $itemSeparator, $pid, $encounter;\n    global $tcnt, $grcnt, $ckcnt;\n    global $html_flag;\n    $nextLocation = 0;\n    $groupLevel = 0;\n    $groupCount = 0;\n\n    while (($keyLocation = strpos($s, '{', $nextLocation)) !== false) {\n        $nextLocation = $keyLocation + 1;\n\n        if (keySearch($s, '{PatientSignature}')) {\n            $fn = $GLOBALS['web_root'] . '/portal/sign/assets/signhere.png';\n            $sigfld = '<span>';\n            $sigfld .= '<img style=\"cursor:pointer;color:red\" class=\"signature\" type=\"patient-signature\" id=\"patientSignature\" onclick=\"getSignature(this)\"' . 'alt=\"' . xla(\"Click in signature on file\") . '\" src=\"' . $fn . '\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{AdminSignature}')) {\n            $fn = $GLOBALS['web_root'] . '/portal/sign/assets/signhere.png';\n            $sigfld = '<span>';\n            $sigfld .= '<img style=\"cursor:pointer;color:red\" class=\"signature\" type=\"admin-signature\" id=\"adminSignature\" onclick=\"getSignature(this)\"' . 'alt=\"' . xla(\"Click in signature on file\") . '\" src=\"' . $fn . '\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{ParseAsHTML}')) {\n            $html_flag = true;\n            $s = keyReplace($s, \"\");\n        } else if (keySearch($s, '{TextInput}')) {\n            $sigfld = '<span>';\n            $sigfld .= '<input class=\"templateInput\" type=\"text\" style=\"color:black;\" data-textvalue=\"\" onblur=\"templateText(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{smTextInput}')) {\n            $sigfld = '<span>';\n            $sigfld .= '<input class=\"templateInput\" type=\"text\" style=\"color:black;max-width:50px;\" data-textvalue=\"\" onblur=\"templateText(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{CheckMark}')) {\n            $ckcnt ++;\n            $sigfld = '<span class=\"checkMark\" data-id=\"check' . $ckcnt . '\">';\n            $sigfld .= '<input type=\"checkbox\"  id=\"check' . $ckcnt . '\" data-value=\"\" onclick=\"templateCheckMark(this);\">';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{ynRadioGroup}')) {\n            $grcnt ++;\n            $sigfld = '<span class=\"ynuGroup\" data-value=\"N/A\" data-id=\"' . $grcnt . '\" id=\"rgrp' . $grcnt . '\">';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" data-id=\"' . $grcnt . '\" value=\"Yes\">' . xlt(\"Yes\") . '</label>';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" data-id=\"' . $grcnt . '\" value=\"No\">' . xlt(\"No\") . '</label>';\n            $sigfld .= '<label><input onclick=\"templateRadio(this)\" type=\"radio\" name=\"ynradio' . $grcnt . '\" checked=\"checked\" data-id=\"' . $grcnt . '\" value=\"N/A\">N/A</label>';\n            $sigfld .= '</span>';\n            $s = keyReplace($s, $sigfld);\n        } else if (keySearch($s, '{PatientName}')) {\n            $tmp = $ptrow['fname'];\n            if ($ptrow['mname']) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['mname'];\n            }\n\n            if ($ptrow['lname']) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['lname'];\n            }\n\n            $s = keyReplace($s, dataFixup($tmp, xl('Name')));\n        } else if (keySearch($s, '{PatientID}')) {\n            $s = keyReplace($s, dataFixup($ptrow['pubpid'], xl('Chart ID')));\n        } else if (keySearch($s, '{Address}')) {\n            $s = keyReplace($s, dataFixup($ptrow['street'], xl('Street')));\n        } else if (keySearch($s, '{City}')) {\n            $s = keyReplace($s, dataFixup($ptrow['city'], xl('City')));\n        } else if (keySearch($s, '{State}')) {\n            $s = keyReplace($s, dataFixup(getListItemTitle('state', $ptrow['state']), xl('State')));\n        } else if (keySearch($s, '{Zip}')) {\n            $s = keyReplace($s, dataFixup($ptrow['postal_code'], xl('Postal Code')));\n        } else if (keySearch($s, '{PatientPhone}')) {\n            $ptphone = $ptrow['phone_contact'];\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_home'];\n            }\n\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_cell'];\n            }\n\n            if (empty($ptphone)) {\n                $ptphone = $ptrow['phone_biz'];\n            }\n\n            if (preg_match(\"/([2-9]\\d\\d)\\D*(\\d\\d\\d)\\D*(\\d\\d\\d\\d)/\", $ptphone, $tmp)) {\n                $ptphone = '(' . $tmp[1] . ')' . $tmp[2] . '-' . $tmp[3];\n            }\n\n            $s = keyReplace($s, dataFixup($ptphone, xl('Phone')));\n        } else if (keySearch($s, '{PatientDOB}')) {\n            $s = keyReplace($s, dataFixup(oeFormatShortDate($ptrow['DOB']), xl('Birth Date')));\n        } else if (keySearch($s, '{PatientSex}')) {\n            $s = keyReplace($s, dataFixup(getListItemTitle('sex', $ptrow['sex']), xl('Sex')));\n        } else if (keySearch($s, '{DOS}')) {\n            // $s = @keyReplace($s, dataFixup(oeFormatShortDate(substr($enrow['date'], 0, 10)), xl('Service Date'))); // changed DOS to todays date- add future enc DOS\n            $s = @keyReplace($s, dataFixup(oeFormatShortDate(substr(date(\"Y-m-d\"), 0, 10)), xl('Service Date')));\n        } else if (keySearch($s, '{ChiefComplaint}')) {\n            $cc = $enrow['reason'];\n            $patientid = $ptrow['pid'];\n            $DOS = substr($enrow['date'], 0, 10);\n            // Prefer appointment comment if one is present.\n            $evlist = fetchEvents($DOS, $DOS, \" AND pc_pid = ? \", null, false, 0, array($patientid));\n            foreach ($evlist as $tmp) {\n                if ($tmp['pc_pid'] == $pid && ! empty($tmp['pc_hometext'])) {\n                    $cc = $tmp['pc_hometext'];\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($cc, xl('Chief Complaint')));\n        } else if (keySearch($s, '{ReferringDOC}')) {\n            $tmp = empty($ptrow['ur_fname']) ? '' : $ptrow['ur_fname'];\n            if (! empty($ptrow['ur_mname'])) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['ur_mname'];\n            }\n\n            if (! empty($ptrow['ur_lname'])) {\n                if ($tmp) {\n                    $tmp .= ' ';\n                }\n\n                $tmp .= $ptrow['ur_lname'];\n            }\n\n            $s = keyReplace($s, dataFixup($tmp, xl('Referer')));\n        } else if (keySearch($s, '{Allergies}')) {\n            $tmp = generate_plaintext_field(array(\n                'data_type' => '24',\n                'list_id' => ''\n            ), '');\n            $s = keyReplace($s, dataFixup($tmp, xl('Allergies')));\n        } else if (keySearch($s, '{Medications}')) {\n            $s = keyReplace($s, dataFixup(getIssues('medication'), xl('Medications')));\n        } else if (keySearch($s, '{ProblemList}')) {\n            $s = keyReplace($s, dataFixup(getIssues('medical_problem'), xl('Problem List')));\n        } // This tag indicates the fields from here until {/GRP} are a group of fields\n          // separated by semicolons. Fields with no data are omitted, and fields with\n          // data are prepended with their field label from the form layout.\n        else if (keySearch($s, '{GRP}')) {\n            ++ $groupLevel;\n            $groupCount = 0;\n            $s = keyReplace($s, '');\n        } else if (keySearch($s, '{/GRP}')) {\n            if ($groupLevel > 0) {\n                -- $groupLevel;\n            }\n\n            $s = keyReplace($s, '');\n        } // This is how we specify the separator between group items in a way that\n          // is independent of the document format. Whatever is between {ITEMSEP} and\n          // {/ITEMSEP} is the separator string. Default is \"; \".\n        else if (preg_match('/^\\{ITEMSEP\\}(.*?)\\{\\/ITEMSEP\\}/', substr($s, $keyLocation), $matches)) {\n            $itemSeparator = $matches[1];\n            $keyLength = strlen($matches[0]);\n            $s = keyReplace($s, '');\n        } // This handles keys like {LBFxxx:fieldid} for layout-based encounter forms.\n        else if (preg_match('/^\\{(LBF\\w+):(\\w+)\\}/', substr($s, $keyLocation), $matches)) {\n            $formname = $matches[1];\n            $fieldid = $matches[2];\n            $keyLength = 3 + strlen($formname) + strlen($fieldid);\n            $data = '';\n            $currvalue = '';\n            $title = '';\n            $frow = sqlQuery(\"SELECT * FROM layout_options \" . \"WHERE form_id = ? AND field_id = ? LIMIT 1\", array(\n                $formname,\n                $fieldid\n            ));\n            if (! empty($frow)) {\n                $ldrow = sqlQuery(\"SELECT ld.field_value \" . \"FROM lbf_data AS ld, forms AS f WHERE \" . \"f.pid = ? AND f.encounter = ? AND f.formdir = ? AND f.deleted = 0 AND \" . \"ld.form_id = f.form_id AND ld.field_id = ? \" . \"ORDER BY f.form_id DESC LIMIT 1\", array(\n                    $pid,\n                    $encounter,\n                    $formname,\n                    $fieldid\n                ));\n                if (! empty($ldrow)) {\n                    $currvalue = $ldrow['field_value'];\n                    $title = $frow['title'];\n                }\n\n                if ($currvalue !== '') {\n                    $data = generate_plaintext_field($frow, $currvalue);\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($data, $title));\n        } // This handles keys like {DEM:fieldid} and {HIS:fieldid}.\n        else if (preg_match('/^\\{(DEM|HIS):(\\w+)\\}/', substr($s, $keyLocation), $matches)) {\n            $formname = $matches[1];\n            $fieldid = $matches[2];\n            $keyLength = 3 + strlen($formname) + strlen($fieldid);\n            $data = '';\n            $currvalue = '';\n            $title = '';\n            $frow = sqlQuery(\"SELECT * FROM layout_options \" . \"WHERE form_id = ? AND field_id = ? LIMIT 1\", array(\n                $formname,\n                $fieldid\n            ));\n            if (! empty($frow)) {\n                $tmprow = $formname == 'DEM' ? $ptrow : $hisrow;\n                if (isset($tmprow[$fieldid])) {\n                    $currvalue = $tmprow[$fieldid];\n                    $title = $frow['title'];\n                }\n\n                if ($currvalue !== '') {\n                    $data = generate_plaintext_field($frow, $currvalue);\n                }\n            }\n\n            $s = keyReplace($s, dataFixup($data, $title));\n        }\n    } // End if { character found.\n\n    return $s;\n}\n// Get patient demographic info.\n$ptrow = sqlQuery(\"SELECT pd.*, \" . \"ur.fname AS ur_fname, ur.mname AS ur_mname, ur.lname AS ur_lname, ur.title AS ur_title, ur.specialty AS ur_specialty \" . \"FROM patient_data AS pd \" . \"LEFT JOIN users AS ur ON ur.id = pd.ref_providerID \" . \"WHERE pd.pid = ?\", array(\n    $pid\n));\n\n$hisrow = sqlQuery(\"SELECT * FROM history_data WHERE pid = ? \" . \"ORDER BY date DESC LIMIT 1\", array(\n    $pid\n));\n\n$enrow = array();\n\n// Get some info for the currently selected encounter.\nif ($encounter) {\n    $enrow = sqlQuery(\"SELECT * FROM form_encounter WHERE pid = ? AND \" . \"encounter = ?\", array(\n        $pid,\n        $encounter\n    ));\n}\n\n$templatedir = $GLOBALS['OE_SITE_DIR'] . '/documents/onsite_portal_documents/templates';\n\ncheck_file_dir_name($form_filename);\n$templatepath = \"$templatedir/$form_filename\";\n// test if this is folder with template, if not, must be for a specific patient\nif (! file_exists($templatepath)) {\n    check_file_dir_name($pid);\n    $templatepath = \"$templatedir/\" . $pid . \"/$form_filename\";\n}\n\n// Create a temporary file to hold the output.\n$fname = tempnam($GLOBALS['temporary_files_dir'], 'OED');\n\n// Get mime type in a way that works with old and new PHP releases.\n$mimetype = 'application/octet-stream';\n$ext = strtolower(array_pop((explode('.', $fname))));\nif ('dotx' == $ext) {\n    // PHP does not seem to recognize this type.\n    $mimetype = 'application/msword';\n} else if (function_exists('finfo_open')) {\n    $finfo = finfo_open(FILEINFO_MIME_TYPE);\n    $mimetype = finfo_file($finfo, $templatepath);\n    finfo_close($finfo);\n} else if (function_exists('mime_content_type')) {\n    $mimetype = mime_content_type($templatepath);\n} else {\n    if ('doc' == $ext) {\n        $mimetype = 'application/msword';\n    } else if ('dot' == $ext) {\n        $mimetype = 'application/msword';\n    } else if ('htm' == $ext) {\n        $mimetype = 'text/html';\n    } else if ('html' == $ext) {\n        $mimetype = 'text/html';\n    } else if ('odt' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.text';\n    } else if ('ods' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.spreadsheet';\n    } else if ('ott' == $ext) {\n        $mimetype = 'application/vnd.oasis.opendocument.text';\n    } else if ('pdf' == $ext) {\n        $mimetype = 'application/pdf';\n    } else if ('ppt' == $ext) {\n        $mimetype = 'application/vnd.ms-powerpoint';\n    } elseif ('ps' == $ext) {\n        $mimetype = 'application/postscript';\n    } else if ('rtf' == $ext) {\n        $mimetype = 'application/rtf';\n    } else if ('txt' == $ext) {\n        $mimetype = 'text/plain';\n    } else if ('xls' == $ext) {\n        $mimetype = 'application/vnd.ms-excel';\n    }\n}\n\n$zipin = new ZipArchive();\nif ($zipin->open($templatepath) === true) {\n    $xml = '';\n    // Must be a zip archive.\n    $zipout = new ZipArchive();\n    $zipout->open($fname, ZipArchive::OVERWRITE);\n    for ($i = 0; $i < $zipin->numFiles; ++ $i) {\n        $ename = $zipin->getNameIndex($i);\n        $edata = $zipin->getFromIndex($i);\n        $edata = doSubs($edata);\n        $xml .= $edata;\n        $zipout->addFromString($ename, $edata);\n    }\n\n    $zipout->close();\n    $zipin->close();\n    $html = nl2br($xml);\n} else {\n    // Not a zip archive.\n    $edata = file_get_contents($templatepath);\n    $edata = doSubs($edata);\n    if ($html_flag) { // return raw html template\n        $html = $edata;\n    } else { // add br for lf in text template\n        $html = nl2br($edata);\n    }\n}\n\necho $html;\n"], "filenames": ["portal/index.php", "portal/lib/appsql.class.php", "portal/lib/download_template.php"], "buggy_code_start_loc": [352, 172, 131], "buggy_code_end_loc": [353, 173, 373], "fixing_code_start_loc": [352, 172, 131], "fixing_code_end_loc": [353, 173, 377], "type": "CWE-89", "message": "An issue was discovered in OpenEMR before 5.0.1 Patch 7. SQL Injection exists in the SaveAudit function in /portal/lib/paylib.php and the portalAudit function in /portal/lib/appsql.class.php.", "other": {"cve": {"id": "CVE-2018-17181", "sourceIdentifier": "cve@mitre.org", "published": "2019-05-17T16:29:00.453", "lastModified": "2019-05-20T14:11:33.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in OpenEMR before 5.0.1 Patch 7. SQL Injection exists in the SaveAudit function in /portal/lib/paylib.php and the portalAudit function in /portal/lib/appsql.class.php."}, {"lang": "es", "value": "Un problema fue descubierto en OpenEMR antes de 5.0.1 Patch 7. La SQL Injection existe en las funciones SaveAudit en /portal/lib/paylib.php y portalAudit en /portal/lib/appsql.class.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.1.7", "matchCriteriaId": "3E6ABA37-073E-43C1-99B5-66CA7DA459FB"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/4963fe4932a0a4e1e982642226174e9931d09541", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.open-emr.org/wiki/index.php/OpenEMR_Patches#5.0.1_Patch_.289.2F9.2F18.29", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/4963fe4932a0a4e1e982642226174e9931d09541"}}