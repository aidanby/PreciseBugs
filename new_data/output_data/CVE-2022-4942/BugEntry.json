{"buggy_code": ["/**\n * @fileoverview Template generator will create the full HTML template for the reporter based on the results and options passed in.\n * The code in this file is based on the code written by Julian Laval for eslint's default reporter\n * and inspired by Sven Piller's eslint-formatter-markdown\n * @author Marcelo S. Portugal <marceloquarion@gmail.com>\n */\n'use strict';\n\nconst _ = require('lodash'),\n\tfs = require('fs'),\n\tpath = require('path');\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst styles = _.template(fs.readFileSync(path.join(__dirname, 'helpers/styles.html'), 'utf-8')),\n\tscripts = _.template(fs.readFileSync(path.join(__dirname, 'helpers/scripts.html'), 'utf-8')),\n\tpageTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/main-page.html'), 'utf-8')),\n\tresultTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/result.html'), 'utf-8')),\n\tresultDetailsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/details.html'), 'utf-8')),\n\tresultSummaryTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/summary.html'), 'utf-8')),\n\tcodeWrapperTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/code-wrapper.html'), 'utf-8')),\n\tcodeTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/code.html'), 'utf-8')),\n\tissueTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/issue.html'), 'utf-8')),\n\tsummaryDetailsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/summary-details.html'), 'utf-8')),\n\trulesTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/rules.html'), 'utf-8')),\n\tmostProblemsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/most-problems.html'), 'utf-8')),\n\tfilesTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/files.html'), 'utf-8'));\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n\treturn (count === 1 ? word : `${word}s`);\n}\n\n/**\n * Renders text along the template of x problems (x errors, x warnings)\n * @param {int} totalErrors Total errors\n * @param {int} totalWarnings Total warnings\n * @returns {string} The formatted string, pluralized where necessary\n */\nfunction renderSummary(totalErrors, totalWarnings) {\n\tconst totalProblems = totalErrors + totalWarnings;\n\tlet renderedText = `${totalProblems} ${pluralize('problem', totalProblems)}`;\n\n\tif (totalProblems !== 0) {\n\t\trenderedText += ` (${totalErrors} ${pluralize('error', totalErrors)}, ${totalWarnings} ${pluralize('warning', totalWarnings)})`;\n\t}\n\treturn renderedText;\n}\n\n/**\n * Takes in a rule Id and returns the correct link for the description\n * @param {string} ruleId A eslint rule Id\n * @return {string} The link to the rules description\n */\nfunction getRuleLink(ruleId) {\n\tlet ruleLink = `http://eslint.org/docs/rules/${ruleId}`;\n\n\tif (_.startsWith(ruleId, 'angular')) {\n\t\truleId = ruleId.replace('angular/', '');\n\t\truleLink = `https://github.com/Gillespie59/eslint-plugin-angular/blob/master/docs/${ruleId}.md`;\n\t} else if (_.startsWith(ruleId, 'lodash')) {\n\t\truleId = ruleId.replace('lodash/', '');\n\t\truleLink = `https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/${ruleId}.md`;\n\t}\n\treturn ruleLink;\n}\n\n/**\n * Generates the summary details section by only including the necessary tables.\n * @param {object} rules An object with all of the rules sorted by type\n * @param {array} [problemFiles] An optional object with the top 5 worst files being linted\n * @param {String} currDir Current working directory\n * @return {string} HTML string of all the summary detail tables that are needed\n */\nfunction renderSummaryDetails(rules, problemFiles, currDir) {\n\tlet summaryDetails = '<div class=\"row\">';\n\n\t// errors exist\n\tif (rules['2']) {\n\t\tsummaryDetails += summaryDetailsTemplate({\n\t\t\truleType: 'error',\n\t\t\ttopRules: renderRules(rules['2'])\n\t\t});\n\t}\n\n\t// warnings exist\n\tif (rules['1']) {\n\t\tsummaryDetails += summaryDetailsTemplate({\n\t\t\truleType: 'warning',\n\t\t\ttopRules: renderRules(rules['1'])\n\t\t});\n\t}\n\n\tsummaryDetails += '</div>';\n\n\t// files with problems exist\n\tif (!_.isEmpty(problemFiles)) {\n\t\tsummaryDetails += mostProblemsTemplate({\n\t\t\tfiles: renderProblemFiles(problemFiles, currDir)\n\t\t});\n\t}\n\n\treturn summaryDetails;\n}\n\n/**\n * Get the color based on whether there are errors/warnings...\n * @param {int} totalErrors Total errors\n * @param {int} totalWarnings Total warnings\n * @returns {string} The color code (success = green, warning = yellow, error = red)\n */\nfunction renderColor(totalErrors, totalWarnings) {\n\tif (totalErrors !== 0) {\n\t\treturn severityString(2);\n\t} else if (totalWarnings !== 0) {\n\t\treturn severityString(1);\n\t}\n\treturn severityString(0);\n}\n\n/**\n * Converts the severity number to a string\n * @param {int} severity severity number\n * @returns {string} The color string based on severity number (0 = success, 1 = warning, 2 = error)\n */\nfunction severityString(severity) {\n\tconst colors = ['success', 'warning', 'error'];\n\n\treturn colors[severity];\n}\n\n/**\n * Renders an issue\n * @param {object} message a message object with an issue\n * @returns {string} HTML string of an issue\n */\nfunction renderIssue(message) {\n\treturn issueTemplate({\n\t\tseverity: severityString(message.severity),\n\t\tseverityName: message.severity === 1 ? 'Warning' : 'Error',\n\t\tlineNumber: message.line,\n\t\tcolumn: message.column,\n\t\tmessage: message.message,\n\t\truleId: message.ruleId,\n\t\truleLink: getRuleLink(message.ruleId)\n\t});\n}\n\n/**\n * Renders the source code for the files that have issues and marks the lines that have problems\n * @param {string} sourceCode source code string\n * @param {array} messages array of messages with the problems in a file\n * @param {int} parentIndex file index\n * @returns {string} HTML string of the code file that is being linted\n */\nfunction renderSourceCode(sourceCode, messages, parentIndex) {\n\treturn codeWrapperTemplate({\n\t\tparentIndex,\n\t\tsourceCode: _.map(sourceCode.split('\\n'), function(code, lineNumber) {\n\t\t\tconst lineMessages = _.filter(messages, {line: lineNumber + 1}),\n\t\t\t\tseverity = _.get(lineMessages[0], 'severity') || 0;\n\n\t\t\tlet template = '';\n\n\t\t\t// checks if there is a problem on the current line and renders it\n\t\t\tif (!_.isEmpty(lineMessages)) {\n\t\t\t\ttemplate += _.map(lineMessages, renderIssue).join('');\n\t\t\t}\n\n\t\t\t// adds a line of code to the template (with line number and severity color if appropriate\n\t\t\ttemplate += codeTemplate({\n\t\t\t\tlineNumber: lineNumber + 1,\n\t\t\t\tcode,\n\t\t\t\tseverity: severityString(severity)\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}).join('\\n')\n\t});\n}\n\n/**\n * Renders the result details with tabs for source code and a summary\n * @param {string} sourceCode source code string\n * @param {array} messages array of messages with the problems in a file\n * @param {int} parentIndex file index\n * @returns {string} HTML string of result details\n */\nfunction renderResultDetails(sourceCode, messages, parentIndex) {\n\tconst topIssues = messages.length < 10 ? '' : _.groupBy(messages, 'severity');\n\n\treturn resultDetailsTemplate({\n\t\tparentIndex,\n\t\tsourceCode: renderSourceCode(sourceCode, messages, parentIndex),\n\t\tdetailSummary: resultSummaryTemplate({\n\t\t\ttopIssues: renderSummaryDetails(topIssues),\n\t\t\tissues: _.map(messages, renderIssue).join('')\n\t\t})\n\t});\n}\n\n/**\n * Formats the source code before adding it to the HTML\n * @param {string} sourceCode Source code string\n * @returns {string} Source code string which will not cause issues in the HTML\n */\nfunction formatSourceCode(sourceCode) {\n\treturn sourceCode.replace(/</g, '&#60;').replace(/>/g, '&#62;');\n}\n\n/**\n * Creates the test results HTML\n * @param {Array} results Test results.\n * @param {String} currDir Current working directory\n * @returns {string} HTML string describing the results.\n */\nfunction renderResults(results, currDir) {\n\treturn _.map(results, function(result, index) {\n\t\tlet template = resultTemplate({\n\t\t\tindex,\n\t\t\tfileId: _.camelCase(result.filePath),\n\t\t\tfilePath: result.filePath.replace(currDir, ''),\n\t\t\tcolor: renderColor(result.errorCount, result.warningCount),\n\t\t\tsummary: renderSummary(result.errorCount, result.warningCount),\n\t\t\tproblemCount: result.errorCount + result.warningCount\n\t\t});\n\n\t\t// only renders the source code if there are issues present in the file\n\t\tif (!_.isEmpty(result.messages)) {\n\t\t\t// reads the file to get the source code if the source is not provided\n\t\t\tconst sourceCode = formatSourceCode(result.source || fs.readFileSync(result.filePath, 'utf8'));\n\n\t\t\ttemplate += renderResultDetails(sourceCode, result.messages, index);\n\t\t}\n\n\t\treturn template;\n\t}).join('\\n');\n}\n\n/**\n * @param {Array} rules Test rules.\n * @returns {string} HTML string describing the rules.\n */\nfunction renderRules(rules) {\n\treturn _(rules).groupBy('ruleId').map(function(ruleMessages, ruleId) {\n\t\treturn {\n\t\t\truleId,\n\t\t\truleCount: _.size(ruleMessages),\n\t\t\truleLink: getRuleLink(ruleId)\n\t\t};\n\t}).orderBy(['ruleCount'], ['desc']).take(5).map(rulesTemplate).value().join('\\n');\n}\n\n/**\n * Renders list of problem files\n * @param {array} files\n * @param {String} currDir Current working directory\n * @return {string} HTML string describing the files.\n */\nfunction renderProblemFiles(files, currDir) {\n\treturn _.map(files, function(fileDetails) {\n\t\treturn filesTemplate({\n\t\t\tfileId: _.camelCase(fileDetails.filePath),\n\t\t\tfilePath: fileDetails.filePath.replace(currDir, ''),\n\t\t\terrorCount: fileDetails.errorCount,\n\t\t\twarningCount: fileDetails.warningCount\n\t\t});\n\t}).join('\\n');\n}\n\n/**\n * Writes a file at the specified location and removes the specified strings\n * @param {string} filePath The path of the new file\n * @param {string} fileContent The contents of the new file\n * @param {RegExp} regex A regex with strings to be removed from the fileContent\n * @return {void} n/a\n */\nfunction writeFile(filePath, fileContent, regex) {\n\tfs.writeFileSync(filePath, fileContent.replace(regex, ''));\n}\n\n/**\n * Returns the output directory for the report\n * @return {String} the output directory for the report\n */\nfunction getOutputDir() {\n\tconst outputOptionIdx = process.argv.indexOf('-o') !== -1 ? process.argv.indexOf('-o') : process.argv.indexOf('--output-file'),\n\t\targsLength = process.argv.length,\n\t\toutputDirOption = '--outputDirectory=';\n\n\tif (process.argv[1].includes('grunt')) {\n\t\tfor (var i = 2; i < argsLength; i++) {\n\t\t\tif (process.argv[i].includes(outputDirOption)) {\n\t\t\t\treturn `/${process.argv[i].replace(outputDirOption, '')}`;\n\t\t\t}\n\t\t}\n\t\treturn '/reports/'; // defaults to a reports folder if nothing else is found\n\t} else if (outputOptionIdx !== -1) {\n\t\treturn `/${process.argv[outputOptionIdx + 1].split('/')[0]}/`;\n\t}\n\n\treturn '';\n}\n\n/**\n * Returns the full path to the report\n * @param currWorkingDir\n * @return {string} the full path to the report\n */\nfunction getOutputPath(currWorkingDir) {\n\treturn currWorkingDir + getOutputDir();\n}\n\n/**\n * Creates a styles.css and a main.js file for the report\n * @param {string} currWorkingDir The current working directory\n */\nfunction buildScriptsAndStyleFiles(outputPath) {\n\tconst stylesRegex = /<style>|<\\/style>/gi,\n\t\tscriptsRegex = /<script type=\"text\\/javascript\">|<\\/script>/gi;\n\n\t// creates the report directory if it doesn't exist\n\tif (!fs.existsSync(outputPath)) {\n\t\tfs.mkdirSync(outputPath);\n\t}\n\n\t// create the styles.css and main.js files\n\twriteFile(`${outputPath}styles.css`, styles(), stylesRegex);\n\twriteFile(`${outputPath}main.js`, scripts(), scriptsRegex);\n}\n\n/**\n * Returns whether or not the output directory is known\n * @return {boolean} Whether or not the output directory is known\n */\nfunction isOutputDirKnown() {\n\treturn process.argv.length > 0 && getOutputDir() !== '';\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports.generateTemplate = function generateTemplate(results, isMultiOn) {\n\tconst currWorkingDir = process.cwd() || '',\n\t\trules = _(results).map('messages').flatten().groupBy('severity').value(), // rule messages grouped by severity\n\t\tproblemFiles = _(results).reject({\n\t\t\terrorCount: 0,\n\t\t\twarningCount: 0\n\t\t}).orderBy(['errorCount', 'warningCount'], ['desc', 'desc']).take(5).value(); // top five files with most problems\n\n\tlet totalErrors = 0,\n\t\ttotalWarnings = 0;\n\n\tif (isMultiOn && isOutputDirKnown()) {\n\t\tconst outputPath = getOutputPath(currWorkingDir);\n\n\t\tbuildScriptsAndStyleFiles(outputPath);\n\t}\n\n\t// Iterate over results to get totals\n\tresults.forEach(function(result) {\n\t\ttotalErrors += result.errorCount;\n\t\ttotalWarnings += result.warningCount;\n\t});\n\n\treturn pageTemplate({\n\t\treportColor: renderColor(totalErrors, totalWarnings),\n\t\treportSummary: renderSummary(totalErrors, totalWarnings),\n\t\tsummaryDetails: renderSummaryDetails(rules, problemFiles, currWorkingDir),\n\t\tresults: renderResults(results, currWorkingDir),\n\t\tstyles: isMultiOn && isOutputDirKnown() ? '<link rel=\"stylesheet\" href=\"./styles.css\">' : styles(),\n\t\tscripts: isMultiOn && isOutputDirKnown() ? '<script type=\"text/javascript\" src=\"./main.js\"></script>' : scripts()\n\t});\n};"], "fixing_code": ["/**\n * @fileoverview Template generator will create the full HTML template for the reporter based on the results and options passed in.\n * The code in this file is based on the code written by Julian Laval for eslint's default reporter\n * and inspired by Sven Piller's eslint-formatter-markdown\n * @author Marcelo S. Portugal <marceloquarion@gmail.com>\n */\n'use strict';\n\nconst _ = require('lodash'),\n\tfs = require('fs'),\n\tpath = require('path');\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst styles = _.template(fs.readFileSync(path.join(__dirname, 'helpers/styles.html'), 'utf-8')),\n\tscripts = _.template(fs.readFileSync(path.join(__dirname, 'helpers/scripts.html'), 'utf-8')),\n\tpageTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/main-page.html'), 'utf-8')),\n\tresultTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/result.html'), 'utf-8')),\n\tresultDetailsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/details.html'), 'utf-8')),\n\tresultSummaryTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/summary.html'), 'utf-8')),\n\tcodeWrapperTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/code-wrapper.html'), 'utf-8')),\n\tcodeTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/code.html'), 'utf-8')),\n\tissueTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/details/code/issue.html'), 'utf-8')),\n\tsummaryDetailsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/summary-details.html'), 'utf-8')),\n\trulesTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/rules.html'), 'utf-8')),\n\tmostProblemsTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/most-problems.html'), 'utf-8')),\n\tfilesTemplate = _.template(fs.readFileSync(path.join(__dirname, 'templates/summary/files.html'), 'utf-8'));\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n\treturn (count === 1 ? word : `${word}s`);\n}\n\n/**\n * Renders text along the template of x problems (x errors, x warnings)\n * @param {int} totalErrors Total errors\n * @param {int} totalWarnings Total warnings\n * @returns {string} The formatted string, pluralized where necessary\n */\nfunction renderSummary(totalErrors, totalWarnings) {\n\tconst totalProblems = totalErrors + totalWarnings;\n\tlet renderedText = `${totalProblems} ${pluralize('problem', totalProblems)}`;\n\n\tif (totalProblems !== 0) {\n\t\trenderedText += ` (${totalErrors} ${pluralize('error', totalErrors)}, ${totalWarnings} ${pluralize('warning', totalWarnings)})`;\n\t}\n\treturn renderedText;\n}\n\n/**\n * Takes in a rule Id and returns the correct link for the description\n * @param {string} ruleId A eslint rule Id\n * @return {string} The link to the rules description\n */\nfunction getRuleLink(ruleId) {\n\tlet ruleLink = `http://eslint.org/docs/rules/${ruleId}`;\n\n\tif (_.startsWith(ruleId, 'angular')) {\n\t\truleId = ruleId.replace('angular/', '');\n\t\truleLink = `https://github.com/Gillespie59/eslint-plugin-angular/blob/master/docs/${ruleId}.md`;\n\t} else if (_.startsWith(ruleId, 'lodash')) {\n\t\truleId = ruleId.replace('lodash/', '');\n\t\truleLink = `https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/${ruleId}.md`;\n\t}\n\treturn ruleLink;\n}\n\n/**\n * Generates the summary details section by only including the necessary tables.\n * @param {object} rules An object with all of the rules sorted by type\n * @param {array} [problemFiles] An optional object with the top 5 worst files being linted\n * @param {String} currDir Current working directory\n * @return {string} HTML string of all the summary detail tables that are needed\n */\nfunction renderSummaryDetails(rules, problemFiles, currDir) {\n\tlet summaryDetails = '<div class=\"row\">';\n\n\t// errors exist\n\tif (rules['2']) {\n\t\tsummaryDetails += summaryDetailsTemplate({\n\t\t\truleType: 'error',\n\t\t\ttopRules: renderRules(rules['2'])\n\t\t});\n\t}\n\n\t// warnings exist\n\tif (rules['1']) {\n\t\tsummaryDetails += summaryDetailsTemplate({\n\t\t\truleType: 'warning',\n\t\t\ttopRules: renderRules(rules['1'])\n\t\t});\n\t}\n\n\tsummaryDetails += '</div>';\n\n\t// files with problems exist\n\tif (!_.isEmpty(problemFiles)) {\n\t\tsummaryDetails += mostProblemsTemplate({\n\t\t\tfiles: renderProblemFiles(problemFiles, currDir)\n\t\t});\n\t}\n\n\treturn summaryDetails;\n}\n\n/**\n * Get the color based on whether there are errors/warnings...\n * @param {int} totalErrors Total errors\n * @param {int} totalWarnings Total warnings\n * @returns {string} The color code (success = green, warning = yellow, error = red)\n */\nfunction renderColor(totalErrors, totalWarnings) {\n\tif (totalErrors !== 0) {\n\t\treturn severityString(2);\n\t} else if (totalWarnings !== 0) {\n\t\treturn severityString(1);\n\t}\n\treturn severityString(0);\n}\n\n/**\n * Converts the severity number to a string\n * @param {int} severity severity number\n * @returns {string} The color string based on severity number (0 = success, 1 = warning, 2 = error)\n */\nfunction severityString(severity) {\n\tconst colors = ['success', 'warning', 'error'];\n\n\treturn colors[severity];\n}\n\n/**\n * Renders an issue\n * @param {object} message a message object with an issue\n * @returns {string} HTML string of an issue\n */\nfunction renderIssue(message) {\n\treturn issueTemplate({\n\t\tseverity: severityString(message.severity),\n\t\tseverityName: message.severity === 1 ? 'Warning' : 'Error',\n\t\tlineNumber: message.line,\n\t\tcolumn: message.column,\n\t\tmessage: _.escape(message.message),\n\t\truleId: message.ruleId,\n\t\truleLink: getRuleLink(message.ruleId)\n\t});\n}\n\n/**\n * Renders the source code for the files that have issues and marks the lines that have problems\n * @param {string} sourceCode source code string\n * @param {array} messages array of messages with the problems in a file\n * @param {int} parentIndex file index\n * @returns {string} HTML string of the code file that is being linted\n */\nfunction renderSourceCode(sourceCode, messages, parentIndex) {\n\treturn codeWrapperTemplate({\n\t\tparentIndex,\n\t\tsourceCode: _.map(sourceCode.split('\\n'), function(code, lineNumber) {\n\t\t\tconst lineMessages = _.filter(messages, {line: lineNumber + 1}),\n\t\t\t\tseverity = _.get(lineMessages[0], 'severity') || 0;\n\n\t\t\tlet template = '';\n\n\t\t\t// checks if there is a problem on the current line and renders it\n\t\t\tif (!_.isEmpty(lineMessages)) {\n\t\t\t\ttemplate += _.map(lineMessages, renderIssue).join('');\n\t\t\t}\n\n\t\t\t// adds a line of code to the template (with line number and severity color if appropriate\n\t\t\ttemplate += codeTemplate({\n\t\t\t\tlineNumber: lineNumber + 1,\n\t\t\t\tcode,\n\t\t\t\tseverity: severityString(severity)\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}).join('\\n')\n\t});\n}\n\n/**\n * Renders the result details with tabs for source code and a summary\n * @param {string} sourceCode source code string\n * @param {array} messages array of messages with the problems in a file\n * @param {int} parentIndex file index\n * @returns {string} HTML string of result details\n */\nfunction renderResultDetails(sourceCode, messages, parentIndex) {\n\tconst topIssues = messages.length < 10 ? '' : _.groupBy(messages, 'severity');\n\n\treturn resultDetailsTemplate({\n\t\tparentIndex,\n\t\tsourceCode: renderSourceCode(sourceCode, messages, parentIndex),\n\t\tdetailSummary: resultSummaryTemplate({\n\t\t\ttopIssues: renderSummaryDetails(topIssues),\n\t\t\tissues: _.map(messages, renderIssue).join('')\n\t\t})\n\t});\n}\n\n/**\n * Creates the test results HTML\n * @param {Array} results Test results.\n * @param {String} currDir Current working directory\n * @returns {string} HTML string describing the results.\n */\nfunction renderResults(results, currDir) {\n\treturn _.map(results, function(result, index) {\n\t\tlet template = resultTemplate({\n\t\t\tindex,\n\t\t\tfileId: _.camelCase(result.filePath),\n\t\t\tfilePath: result.filePath.replace(currDir, ''),\n\t\t\tcolor: renderColor(result.errorCount, result.warningCount),\n\t\t\tsummary: renderSummary(result.errorCount, result.warningCount),\n\t\t\tproblemCount: result.errorCount + result.warningCount\n\t\t});\n\n\t\t// only renders the source code if there are issues present in the file\n\t\tif (!_.isEmpty(result.messages)) {\n\t\t\t// reads the file to get the source code if the source is not provided\n\t\t\tconst sourceCode = _.escape(result.source || fs.readFileSync(result.filePath, 'utf8'));\n\n\t\t\ttemplate += renderResultDetails(sourceCode, result.messages, index);\n\t\t}\n\n\t\treturn template;\n\t}).join('\\n');\n}\n\n/**\n * @param {Array} rules Test rules.\n * @returns {string} HTML string describing the rules.\n */\nfunction renderRules(rules) {\n\treturn _(rules).groupBy('ruleId').map(function(ruleMessages, ruleId) {\n\t\treturn {\n\t\t\truleId,\n\t\t\truleCount: _.size(ruleMessages),\n\t\t\truleLink: getRuleLink(ruleId)\n\t\t};\n\t}).orderBy(['ruleCount'], ['desc']).take(5).map(rulesTemplate).value().join('\\n');\n}\n\n/**\n * Renders list of problem files\n * @param {array} files\n * @param {String} currDir Current working directory\n * @return {string} HTML string describing the files.\n */\nfunction renderProblemFiles(files, currDir) {\n\treturn _.map(files, function(fileDetails) {\n\t\treturn filesTemplate({\n\t\t\tfileId: _.camelCase(fileDetails.filePath),\n\t\t\tfilePath: fileDetails.filePath.replace(currDir, ''),\n\t\t\terrorCount: fileDetails.errorCount,\n\t\t\twarningCount: fileDetails.warningCount\n\t\t});\n\t}).join('\\n');\n}\n\n/**\n * Writes a file at the specified location and removes the specified strings\n * @param {string} filePath The path of the new file\n * @param {string} fileContent The contents of the new file\n * @param {RegExp} regex A regex with strings to be removed from the fileContent\n * @return {void} n/a\n */\nfunction writeFile(filePath, fileContent, regex) {\n\tfs.writeFileSync(filePath, fileContent.replace(regex, ''));\n}\n\n/**\n * Returns the output directory for the report\n * @return {String} the output directory for the report\n */\nfunction getOutputDir() {\n\tconst outputOptionIdx = process.argv.indexOf('-o') !== -1 ? process.argv.indexOf('-o') : process.argv.indexOf('--output-file'),\n\t\targsLength = process.argv.length,\n\t\toutputDirOption = '--outputDirectory=';\n\n\tif (process.argv[1].includes('grunt')) {\n\t\tfor (var i = 2; i < argsLength; i++) {\n\t\t\tif (process.argv[i].includes(outputDirOption)) {\n\t\t\t\treturn `/${process.argv[i].replace(outputDirOption, '')}`;\n\t\t\t}\n\t\t}\n\t\treturn '/reports/'; // defaults to a reports folder if nothing else is found\n\t} else if (outputOptionIdx !== -1) {\n\t\treturn `/${process.argv[outputOptionIdx + 1].split('/')[0]}/`;\n\t}\n\n\treturn '';\n}\n\n/**\n * Returns the full path to the report\n * @param currWorkingDir\n * @return {string} the full path to the report\n */\nfunction getOutputPath(currWorkingDir) {\n\treturn currWorkingDir + getOutputDir();\n}\n\n/**\n * Creates a styles.css and a main.js file for the report\n * @param {string} currWorkingDir The current working directory\n */\nfunction buildScriptsAndStyleFiles(outputPath) {\n\tconst stylesRegex = /<style>|<\\/style>/gi,\n\t\tscriptsRegex = /<script type=\"text\\/javascript\">|<\\/script>/gi;\n\n\t// creates the report directory if it doesn't exist\n\tif (!fs.existsSync(outputPath)) {\n\t\tfs.mkdirSync(outputPath);\n\t}\n\n\t// create the styles.css and main.js files\n\twriteFile(`${outputPath}styles.css`, styles(), stylesRegex);\n\twriteFile(`${outputPath}main.js`, scripts(), scriptsRegex);\n}\n\n/**\n * Returns whether or not the output directory is known\n * @return {boolean} Whether or not the output directory is known\n */\nfunction isOutputDirKnown() {\n\treturn process.argv.length > 0 && getOutputDir() !== '';\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports.generateTemplate = function generateTemplate(results, isMultiOn) {\n\tconst currWorkingDir = process.cwd() || '',\n\t\trules = _(results).map('messages').flatten().groupBy('severity').value(), // rule messages grouped by severity\n\t\tproblemFiles = _(results).reject({\n\t\t\terrorCount: 0,\n\t\t\twarningCount: 0\n\t\t}).orderBy(['errorCount', 'warningCount'], ['desc', 'desc']).take(5).value(); // top five files with most problems\n\n\tlet totalErrors = 0,\n\t\ttotalWarnings = 0;\n\n\tif (isMultiOn && isOutputDirKnown()) {\n\t\tconst outputPath = getOutputPath(currWorkingDir);\n\n\t\tbuildScriptsAndStyleFiles(outputPath);\n\t}\n\n\t// Iterate over results to get totals\n\tresults.forEach(function(result) {\n\t\ttotalErrors += result.errorCount;\n\t\ttotalWarnings += result.warningCount;\n\t});\n\n\treturn pageTemplate({\n\t\treportColor: renderColor(totalErrors, totalWarnings),\n\t\treportSummary: renderSummary(totalErrors, totalWarnings),\n\t\tsummaryDetails: renderSummaryDetails(rules, problemFiles, currWorkingDir),\n\t\tresults: renderResults(results, currWorkingDir),\n\t\tstyles: isMultiOn && isOutputDirKnown() ? '<link rel=\"stylesheet\" href=\"./styles.css\">' : styles(),\n\t\tscripts: isMultiOn && isOutputDirKnown() ? '<script type=\"text/javascript\" src=\"./main.js\"></script>' : scripts()\n\t});\n};\n"], "filenames": ["lib/template-generator.js"], "buggy_code_start_loc": [150], "buggy_code_end_loc": [383], "fixing_code_start_loc": [150], "fixing_code_end_loc": [374], "type": "CWE-79", "message": "A vulnerability was found in mportuga eslint-detailed-reporter up to 0.9.0 and classified as problematic. Affected by this issue is the function renderIssue in the library lib/template-generator.js. The manipulation of the argument message leads to cross site scripting. The attack may be launched remotely. The name of the patch is 505c190efd4905990db6207863bdcbd9b1d7e1bd. It is recommended to apply a patch to fix this issue. VDB-226310 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4942", "sourceIdentifier": "cna@vuldb.com", "published": "2023-04-20T06:15:07.440", "lastModified": "2023-04-29T02:52:40.117", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in mportuga eslint-detailed-reporter up to 0.9.0 and classified as problematic. Affected by this issue is the function renderIssue in the library lib/template-generator.js. The manipulation of the argument message leads to cross site scripting. The attack may be launched remotely. The name of the patch is 505c190efd4905990db6207863bdcbd9b1d7e1bd. It is recommended to apply a patch to fix this issue. VDB-226310 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:eslint-detailed-reporter_project:eslint-detailed-reporter:*:*:*:*:*:node.js:*:*", "versionEndIncluding": "0.9.0", "matchCriteriaId": "1F6B2E8F-9681-4AE4-A964-9D2E8377EBB6"}]}]}], "references": [{"url": "https://github.com/mportuga/eslint-detailed-reporter/commit/505c190efd4905990db6207863bdcbd9b1d7e1bd", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/mportuga/eslint-detailed-reporter/pull/46", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.226310", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.226310", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mportuga/eslint-detailed-reporter/commit/505c190efd4905990db6207863bdcbd9b1d7e1bd"}}