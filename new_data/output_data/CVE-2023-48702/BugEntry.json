{"buggy_code": ["using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.Net.Mime;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Jellyfin.Api.Attributes;\nusing Jellyfin.Api.Constants;\nusing Jellyfin.Api.Models.ConfigurationDtos;\nusing Jellyfin.Extensions.Json;\nusing MediaBrowser.Controller.Configuration;\nusing MediaBrowser.Controller.MediaEncoding;\nusing MediaBrowser.Model.Configuration;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Jellyfin.Api.Controllers\n{\n    /// <summary>\n    /// Configuration Controller.\n    /// </summary>\n    [Route(\"System\")]\n    [Authorize(Policy = Policies.DefaultAuthorization)]\n    public class ConfigurationController : BaseJellyfinApiController\n    {\n        private readonly IServerConfigurationManager _configurationManager;\n        private readonly IMediaEncoder _mediaEncoder;\n\n        private readonly JsonSerializerOptions _serializerOptions = JsonDefaults.Options;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ConfigurationController\"/> class.\n        /// </summary>\n        /// <param name=\"configurationManager\">Instance of the <see cref=\"IServerConfigurationManager\"/> interface.</param>\n        /// <param name=\"mediaEncoder\">Instance of the <see cref=\"IMediaEncoder\"/> interface.</param>\n        public ConfigurationController(\n            IServerConfigurationManager configurationManager,\n            IMediaEncoder mediaEncoder)\n        {\n            _configurationManager = configurationManager;\n            _mediaEncoder = mediaEncoder;\n        }\n\n        /// <summary>\n        /// Gets application configuration.\n        /// </summary>\n        /// <response code=\"200\">Application configuration returned.</response>\n        /// <returns>Application configuration.</returns>\n        [HttpGet(\"Configuration\")]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        public ActionResult<ServerConfiguration> GetConfiguration()\n        {\n            return _configurationManager.Configuration;\n        }\n\n        /// <summary>\n        /// Updates application configuration.\n        /// </summary>\n        /// <param name=\"configuration\">Configuration.</param>\n        /// <response code=\"204\">Configuration updated.</response>\n        /// <returns>Update status.</returns>\n        [HttpPost(\"Configuration\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateConfiguration([FromBody, Required] ServerConfiguration configuration)\n        {\n            _configurationManager.ReplaceConfiguration(configuration);\n            return NoContent();\n        }\n\n        /// <summary>\n        /// Gets a named configuration.\n        /// </summary>\n        /// <param name=\"key\">Configuration key.</param>\n        /// <response code=\"200\">Configuration returned.</response>\n        /// <returns>Configuration.</returns>\n        [HttpGet(\"Configuration/{key}\")]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        [ProducesFile(MediaTypeNames.Application.Json)]\n        public ActionResult<object> GetNamedConfiguration([FromRoute, Required] string key)\n        {\n            return _configurationManager.GetConfiguration(key);\n        }\n\n        /// <summary>\n        /// Updates named configuration.\n        /// </summary>\n        /// <param name=\"key\">Configuration key.</param>\n        /// <param name=\"configuration\">Configuration.</param>\n        /// <response code=\"204\">Named configuration updated.</response>\n        /// <returns>Update status.</returns>\n        [HttpPost(\"Configuration/{key}\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateNamedConfiguration([FromRoute, Required] string key, [FromBody, Required] JsonDocument configuration)\n        {\n            var configurationType = _configurationManager.GetConfigurationType(key);\n            var deserializedConfiguration = configuration.Deserialize(configurationType, _serializerOptions);\n\n            if (deserializedConfiguration == null)\n            {\n                throw new ArgumentException(\"Body doesn't contain a valid configuration\");\n            }\n\n            _configurationManager.SaveConfiguration(key, deserializedConfiguration);\n            return NoContent();\n        }\n\n        /// <summary>\n        /// Gets a default MetadataOptions object.\n        /// </summary>\n        /// <response code=\"200\">Metadata options returned.</response>\n        /// <returns>Default MetadataOptions.</returns>\n        [HttpGet(\"Configuration/MetadataOptions/Default\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        public ActionResult<MetadataOptions> GetDefaultMetadataOptions()\n        {\n            return new MetadataOptions();\n        }\n\n        /// <summary>\n        /// Updates the path to the media encoder.\n        /// </summary>\n        /// <param name=\"mediaEncoderPath\">Media encoder path form body.</param>\n        /// <response code=\"204\">Media encoder path updated.</response>\n        /// <returns>Status.</returns>\n        [HttpPost(\"MediaEncoder/Path\")]\n        [Authorize(Policy = Policies.FirstTimeSetupOrElevated)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateMediaEncoderPath([FromBody, Required] MediaEncoderPathDto mediaEncoderPath)\n        {\n            _mediaEncoder.UpdateEncoderPath(mediaEncoderPath.Path, mediaEncoderPath.PathType);\n            return NoContent();\n        }\n    }\n}\n"], "fixing_code": ["using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.Net.Mime;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Jellyfin.Api.Attributes;\nusing Jellyfin.Api.Constants;\nusing Jellyfin.Api.Models.ConfigurationDtos;\nusing Jellyfin.Extensions.Json;\nusing MediaBrowser.Controller.Configuration;\nusing MediaBrowser.Controller.MediaEncoding;\nusing MediaBrowser.Model.Configuration;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Jellyfin.Api.Controllers\n{\n    /// <summary>\n    /// Configuration Controller.\n    /// </summary>\n    [Route(\"System\")]\n    [Authorize(Policy = Policies.DefaultAuthorization)]\n    public class ConfigurationController : BaseJellyfinApiController\n    {\n        private readonly IServerConfigurationManager _configurationManager;\n        private readonly IMediaEncoder _mediaEncoder;\n\n        private readonly JsonSerializerOptions _serializerOptions = JsonDefaults.Options;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ConfigurationController\"/> class.\n        /// </summary>\n        /// <param name=\"configurationManager\">Instance of the <see cref=\"IServerConfigurationManager\"/> interface.</param>\n        /// <param name=\"mediaEncoder\">Instance of the <see cref=\"IMediaEncoder\"/> interface.</param>\n        public ConfigurationController(\n            IServerConfigurationManager configurationManager,\n            IMediaEncoder mediaEncoder)\n        {\n            _configurationManager = configurationManager;\n            _mediaEncoder = mediaEncoder;\n        }\n\n        /// <summary>\n        /// Gets application configuration.\n        /// </summary>\n        /// <response code=\"200\">Application configuration returned.</response>\n        /// <returns>Application configuration.</returns>\n        [HttpGet(\"Configuration\")]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        public ActionResult<ServerConfiguration> GetConfiguration()\n        {\n            return _configurationManager.Configuration;\n        }\n\n        /// <summary>\n        /// Updates application configuration.\n        /// </summary>\n        /// <param name=\"configuration\">Configuration.</param>\n        /// <response code=\"204\">Configuration updated.</response>\n        /// <returns>Update status.</returns>\n        [HttpPost(\"Configuration\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateConfiguration([FromBody, Required] ServerConfiguration configuration)\n        {\n            _configurationManager.ReplaceConfiguration(configuration);\n            return NoContent();\n        }\n\n        /// <summary>\n        /// Gets a named configuration.\n        /// </summary>\n        /// <param name=\"key\">Configuration key.</param>\n        /// <response code=\"200\">Configuration returned.</response>\n        /// <returns>Configuration.</returns>\n        [HttpGet(\"Configuration/{key}\")]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        [ProducesFile(MediaTypeNames.Application.Json)]\n        public ActionResult<object> GetNamedConfiguration([FromRoute, Required] string key)\n        {\n            return _configurationManager.GetConfiguration(key);\n        }\n\n        /// <summary>\n        /// Updates named configuration.\n        /// </summary>\n        /// <param name=\"key\">Configuration key.</param>\n        /// <param name=\"configuration\">Configuration.</param>\n        /// <response code=\"204\">Named configuration updated.</response>\n        /// <returns>Update status.</returns>\n        [HttpPost(\"Configuration/{key}\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateNamedConfiguration([FromRoute, Required] string key, [FromBody, Required] JsonDocument configuration)\n        {\n            var configurationType = _configurationManager.GetConfigurationType(key);\n            var deserializedConfiguration = configuration.Deserialize(configurationType, _serializerOptions);\n\n            if (deserializedConfiguration == null)\n            {\n                throw new ArgumentException(\"Body doesn't contain a valid configuration\");\n            }\n\n            _configurationManager.SaveConfiguration(key, deserializedConfiguration);\n            return NoContent();\n        }\n\n        /// <summary>\n        /// Gets a default MetadataOptions object.\n        /// </summary>\n        /// <response code=\"200\">Metadata options returned.</response>\n        /// <returns>Default MetadataOptions.</returns>\n        [HttpGet(\"Configuration/MetadataOptions/Default\")]\n        [Authorize(Policy = Policies.RequiresElevation)]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        public ActionResult<MetadataOptions> GetDefaultMetadataOptions()\n        {\n            return new MetadataOptions();\n        }\n\n        /// <summary>\n        /// Updates the path to the media encoder.\n        /// </summary>\n        /// <param name=\"mediaEncoderPath\">Media encoder path form body.</param>\n        /// <response code=\"204\">Media encoder path updated.</response>\n        /// <returns>Status.</returns>\n        [Obsolete(\"This endpoint is obsolete.\")]\n        [HttpPost(\"MediaEncoder/Path\")]\n        [Authorize(Policy = Policies.FirstTimeSetupOrElevated)]\n        [ProducesResponseType(StatusCodes.Status204NoContent)]\n        public ActionResult UpdateMediaEncoderPath([FromBody, Required] MediaEncoderPathDto mediaEncoderPath)\n        {\n            // API ENDPOINT DISABLED (NOOP) FOR SECURITY PURPOSES\n            //_mediaEncoder.UpdateEncoderPath(mediaEncoderPath.Path, mediaEncoderPath.PathType);\n            return NoContent();\n        }\n    }\n}\n"], "filenames": ["Jellyfin.Api/Controllers/ConfigurationController.cs"], "buggy_code_start_loc": [127], "buggy_code_end_loc": [134], "fixing_code_start_loc": [128], "fixing_code_end_loc": [136], "type": "CWE-77", "message": "Jellyfin is a system for managing and streaming media. Prior to version 10.8.13, the `/System/MediaEncoder/Path` endpoint executes an arbitrary file using `ProcessStartInfo` via the `ValidateVersion` function. A malicious administrator can setup a network share and supply a UNC path to `/System/MediaEncoder/Path` which points to an executable on the network share, causing Jellyfin server to run the executable in the local context. The endpoint was removed in version 10.8.13.", "other": {"cve": {"id": "CVE-2023-48702", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-13T21:15:07.847", "lastModified": "2023-12-18T19:10:51.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Jellyfin is a system for managing and streaming media. Prior to version 10.8.13, the `/System/MediaEncoder/Path` endpoint executes an arbitrary file using `ProcessStartInfo` via the `ValidateVersion` function. A malicious administrator can setup a network share and supply a UNC path to `/System/MediaEncoder/Path` which points to an executable on the network share, causing Jellyfin server to run the executable in the local context. The endpoint was removed in version 10.8.13."}, {"lang": "es", "value": "Jellyfin es un sistema para gestionar y transmitir medios. Antes de la versi\u00f3n 10.8.13, el endpoint `/System/MediaEncoder/Path` ejecuta un archivo arbitrario usando `ProcessStartInfo` a trav\u00e9s de la funci\u00f3n `ValidateVersion`. Un administrador malintencionado puede configurar un recurso compartido de red y proporcionar una ruta UNC a `/System/MediaEncoder/Path` que apunta a un ejecutable en el recurso compartido de red, lo que hace que el servidor Jellyfin ejecute el ejecutable en el contexto local. El endpoint se elimin\u00f3 en la versi\u00f3n 10.8.13."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jellyfin:jellyfin:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.8.13", "matchCriteriaId": "93D6F598-55D9-4041-BED8-4448226B5EFF"}]}]}], "references": [{"url": "https://github.com/jellyfin/jellyfin/commit/83d2c69516471e2db72d9273c6a04247d0f37c86", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/jellyfin/jellyfin/security/advisories/GHSA-rr9h-w522-cvmr", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2023-028_jellyfin/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jellyfin/jellyfin/commit/83d2c69516471e2db72d9273c6a04247d0f37c86"}}