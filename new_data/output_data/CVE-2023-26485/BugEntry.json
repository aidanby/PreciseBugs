{"buggy_code": ["#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"scanners.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define ENCODED_SIZE 20\n#define LISTMARKER_SIZE 20\n\n// Functions to convert cmark_nodes to commonmark strings.\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node, \n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  bool needs_escaping = false;\n  bool follows_digit =\n      renderer->buffer->size > 0 &&\n      cmark_isdigit(renderer->buffer->ptr[renderer->buffer->size - 1]);\n  char encoded[ENCODED_SIZE];\n\n  needs_escaping =\n      c < 0x80 && escape != LITERAL &&\n      ((escape == NORMAL &&\n        (c < 0x20 ||\n\t c == '*' || c == '_' || c == '[' || c == ']' || c == '#' || c == '<' ||\n         c == '>' || c == '\\\\' || c == '`' || c == '~' || c == '!' ||\n         (c == '&' && cmark_isalpha(nextc)) || (c == '!' && nextc == '[') ||\n         (renderer->begin_content && (c == '-' || c == '+' || c == '=') &&\n          // begin_content doesn't get set to false til we've passed digits\n          // at the beginning of line, so...\n          !follows_digit) ||\n         (renderer->begin_content && (c == '.' || c == ')') && follows_digit &&\n          (nextc == 0 || cmark_isspace(nextc))))) ||\n       (escape == URL &&\n        (c == '`' || c == '<' || c == '>' || cmark_isspace((char)c) || c == '\\\\' ||\n         c == ')' || c == '(')) ||\n       (escape == TITLE &&\n        (c == '`' || c == '<' || c == '>' || c == '\"' || c == '\\\\')));\n\n  if (needs_escaping) {\n    if (escape == URL && cmark_isspace((char)c)) {\n      // use percent encoding for spaces\n      snprintf(encoded, ENCODED_SIZE, \"%%%2X\", c);\n      cmark_strbuf_puts(renderer->buffer, encoded);\n      renderer->column += 3;\n    } else if (cmark_ispunct((char)c)) {\n      cmark_render_ascii(renderer, \"\\\\\");\n      cmark_render_code_point(renderer, c);\n    } else { // render as entity\n      snprintf(encoded, ENCODED_SIZE, \"&#%d;\", c);\n      cmark_strbuf_puts(renderer->buffer, encoded);\n      renderer->column += (int)strlen(encoded);\n    }\n  } else {\n    cmark_render_code_point(renderer, c);\n  }\n}\n\nstatic int longest_backtick_sequence(const char *code) {\n  int longest = 0;\n  int current = 0;\n  size_t i = 0;\n  size_t code_len = strlen(code);\n  while (i <= code_len) {\n    if (code[i] == '`') {\n      current++;\n    } else {\n      if (current > longest) {\n        longest = current;\n      }\n      current = 0;\n    }\n    i++;\n  }\n  return longest;\n}\n\nstatic int shortest_unused_backtick_sequence(const char *code) {\n  // note: if the shortest sequence is >= 32, this returns 32\n  // so as not to overflow the bit array.\n  uint32_t used = 1;\n  int current = 0;\n  size_t i = 0;\n  size_t code_len = strlen(code);\n  while (i <= code_len) {\n    if (code[i] == '`') {\n      current++;\n    } else {\n      if (current > 0 && current < 32) {\n        used |= (1U << current);\n      }\n      current = 0;\n    }\n    i++;\n  }\n  // return number of first bit that is 0:\n  i = 0;\n  while (i < 32 && used & 1) {\n    used = used >> 1;\n    i++;\n  }\n  return (int)i;\n}\n\nstatic bool is_autolink(cmark_node *node) {\n  cmark_chunk *title;\n  cmark_chunk *url;\n  cmark_node *link_text;\n  char *realurl;\n  int realurllen;\n\n  if (node->type != CMARK_NODE_LINK) {\n    return false;\n  }\n\n  url = &node->as.link.url;\n  if (url->len == 0 || scan_scheme(url, 0) == 0) {\n    return false;\n  }\n\n  title = &node->as.link.title;\n  // if it has a title, we can't treat it as an autolink:\n  if (title->len > 0) {\n    return false;\n  }\n\n  link_text = node->first_child;\n  if (link_text == NULL) {\n    return false;\n  }\n  cmark_consolidate_text_nodes(link_text);\n  realurl = (char *)url->data;\n  realurllen = url->len;\n  if (strncmp(realurl, \"mailto:\", 7) == 0) {\n    realurl += 7;\n    realurllen -= 7;\n  }\n  return (realurllen == link_text->as.literal.len &&\n          strncmp(realurl, (char *)link_text->as.literal.data,\n                  link_text->as.literal.len) == 0);\n}\n\n// if node is a block node, returns node.\n// otherwise returns first block-level node that is an ancestor of node.\n// if there is no block-level ancestor, returns NULL.\nstatic cmark_node *get_containing_block(cmark_node *node) {\n  while (node) {\n    if (CMARK_NODE_BLOCK_P(node)) {\n      return node;\n    } else {\n      node = node->parent;\n    }\n  }\n  return NULL;\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  cmark_node *tmp;\n  int list_number;\n  cmark_delim_type list_delim;\n  int numticks;\n  bool extra_spaces;\n  int i;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  const char *info, *code, *title;\n  char fencechar[2] = {'\\0', '\\0'};\n  size_t info_len, code_len;\n  char listmarker[LISTMARKER_SIZE];\n  char *emph_delim;\n  bool first_in_list_item;\n  bufsize_t marker_width;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&\n                    !(CMARK_OPT_HARDBREAKS & options);\n\n  // Don't adjust tight list status til we've started the list.\n  // Otherwise we loose the blank line between a paragraph and\n  // a following list.\n  if (!(node->type == CMARK_NODE_ITEM && node->prev == NULL && entering)) {\n    tmp = get_containing_block(node);\n    renderer->in_tight_list_item =\n        tmp && // tmp might be NULL if there is no containing block\n        ((tmp->type == CMARK_NODE_ITEM &&\n          cmark_node_get_list_tight(tmp->parent)) ||\n         (tmp && tmp->parent && tmp->parent->type == CMARK_NODE_ITEM &&\n          cmark_node_get_list_tight(tmp->parent->parent)));\n  }\n\n  if (node->extension && node->extension->commonmark_render_func) {\n    node->extension->commonmark_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      LIT(\"> \");\n      renderer->begin_content = true;\n      cmark_strbuf_puts(renderer->prefix, \"> \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 2);\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    if (!entering && node->next && (node->next->type == CMARK_NODE_CODE_BLOCK ||\n                                    node->next->type == CMARK_NODE_LIST)) {\n      // this ensures that a following indented code block or list will be\n      // inteprereted correctly.\n      CR();\n      LIT(\"<!-- end list -->\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n      marker_width = 4;\n    } else {\n      list_number = cmark_node_get_list_start(node->parent);\n      list_delim = cmark_node_get_list_delim(node->parent);\n      tmp = node;\n      while (tmp->prev) {\n        tmp = tmp->prev;\n        list_number += 1;\n      }\n      // we ensure a width of at least 4 so\n      // we get nice transition from single digits\n      // to double\n      snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,\n               list_delim == CMARK_PAREN_DELIM ? \")\" : \".\",\n               list_number < 10 ? \"  \" : \" \");\n      marker_width = (bufsize_t)strlen(listmarker);\n    }\n    if (entering) {\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"  - \");\n        renderer->begin_content = true;\n      } else {\n        LIT(listmarker);\n        renderer->begin_content = true;\n      }\n      for (i = marker_width; i--;) {\n        cmark_strbuf_putc(renderer->prefix, ' ');\n      }\n    } else {\n      cmark_strbuf_truncate(renderer->prefix,\n                            renderer->prefix->size - marker_width);\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      for (i = cmark_node_get_heading_level(node); i > 0; i--) {\n        LIT(\"#\");\n      }\n      LIT(\" \");\n      renderer->begin_content = true;\n      renderer->no_linebreaks = true;\n    } else {\n      renderer->no_linebreaks = false;\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    first_in_list_item = node->prev == NULL && node->parent &&\n                         node->parent->type == CMARK_NODE_ITEM;\n\n    if (!first_in_list_item) {\n      BLANKLINE();\n    }\n    info = cmark_node_get_fence_info(node);\n    info_len = strlen(info);\n    fencechar[0] = strchr(info, '`') == NULL ? '`' : '~';\n    code = cmark_node_get_literal(node);\n    code_len = strlen(code);\n    // use indented form if no info, and code doesn't\n    // begin or end with a blank line, and code isn't\n    // first thing in a list item\n    if (info_len == 0 && (code_len > 2 && !cmark_isspace(code[0]) &&\n                          !(cmark_isspace(code[code_len - 1]) &&\n                            cmark_isspace(code[code_len - 2]))) &&\n        !first_in_list_item) {\n      LIT(\"    \");\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n      OUT(cmark_node_get_literal(node), false, LITERAL);\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    } else {\n      numticks = longest_backtick_sequence(code) + 1;\n      if (numticks < 3) {\n        numticks = 3;\n      }\n      for (i = 0; i < numticks; i++) {\n        LIT(fencechar);\n      }\n      LIT(\" \");\n      OUT(info, false, LITERAL);\n      CR();\n      OUT(cmark_node_get_literal(node), false, LITERAL);\n      CR();\n      for (i = 0; i < numticks; i++) {\n        LIT(fencechar);\n      }\n    }\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    BLANKLINE();\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    BLANKLINE();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    LIT(\"-----\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    if (!(CMARK_OPT_HARDBREAKS & options)) {\n      LIT(\"  \");\n    }\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (CMARK_OPT_HARDBREAKS & options) {\n      LIT(\"  \");\n      CR();\n    } else if (!renderer->no_linebreaks && renderer->width == 0 &&\n               !(CMARK_OPT_HARDBREAKS & options) &&\n               !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    code = cmark_node_get_literal(node);\n    code_len = strlen(code);\n    numticks = shortest_unused_backtick_sequence(code);\n    extra_spaces = code_len == 0 ||\n\t    code[0] == '`' || code[code_len - 1] == '`' ||\n\t    code[0] == ' ' || code[code_len - 1] == ' ';\n    for (i = 0; i < numticks; i++) {\n      LIT(\"`\");\n    }\n    if (extra_spaces) {\n      LIT(\" \");\n    }\n    OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);\n    if (extra_spaces) {\n      LIT(\" \");\n    }\n    for (i = 0; i < numticks; i++) {\n      LIT(\"`\");\n    }\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (entering) {\n      LIT(\"**\");\n    } else {\n      LIT(\"**\");\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    // If we have EMPH(EMPH(x)), we need to use *_x_*\n    // because **x** is STRONG(x):\n    if (node->parent && node->parent->type == CMARK_NODE_EMPH &&\n        node->next == NULL && node->prev == NULL) {\n      emph_delim = \"_\";\n    } else {\n      emph_delim = \"*\";\n    }\n    if (entering) {\n      LIT(emph_delim);\n    } else {\n      LIT(emph_delim);\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (is_autolink(node)) {\n      if (entering) {\n        LIT(\"<\");\n        if (strncmp(cmark_node_get_url(node), \"mailto:\", 7) == 0) {\n          LIT((const char *)cmark_node_get_url(node) + 7);\n        } else {\n          LIT((const char *)cmark_node_get_url(node));\n        }\n        LIT(\">\");\n        // return signal to skip contents of node...\n        return 0;\n      }\n    } else {\n      if (entering) {\n        LIT(\"[\");\n      } else {\n        LIT(\"](\");\n        OUT(cmark_node_get_url(node), false, URL);\n        title = cmark_node_get_title(node);\n        if (strlen(title) > 0) {\n          LIT(\" \\\"\");\n          OUT(title, false, TITLE);\n          LIT(\"\\\"\");\n        }\n        LIT(\")\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"![\");\n    } else {\n      LIT(\"](\");\n      OUT(cmark_node_get_url(node), false, URL);\n      title = cmark_node_get_title(node);\n      if (strlen(title) > 0) {\n        OUT(\" \\\"\", allow_wrap, LITERAL);\n        OUT(title, false, TITLE);\n        LIT(\"\\\"\");\n      }\n      LIT(\")\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      LIT(\"[^\");\n\n      char *footnote_label = renderer->mem->calloc(node->parent_footnote_def->as.literal.len + 1, sizeof(char));\n      memmove(footnote_label, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n\n      OUT(footnote_label, false, LITERAL);\n      renderer->mem->free(footnote_label);\n\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      renderer->footnote_ix += 1;\n      LIT(\"[^\");\n\n      char *footnote_label = renderer->mem->calloc(node->as.literal.len + 1, sizeof(char));\n      memmove(footnote_label, node->as.literal.data, node->as.literal.len);\n\n      OUT(footnote_label, false, LITERAL);\n      renderer->mem->free(footnote_label);\n\n      LIT(\"]:\\n\");\n\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    }\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_commonmark(cmark_node *root, int options, int width) {\n  return cmark_render_commonmark_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_commonmark_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  if (options & CMARK_OPT_HARDBREAKS) {\n    // disable breaking on width, since it has\n    // a different meaning with OPT_HARDBREAKS\n    width = 0;\n  }\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include \"cmark_ctype.h\"\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"houdini.h\"\n#include \"scanners.h\"\n#include \"syntax_extension.h\"\n#include \"html.h\"\n#include \"render.h\"\n\n// Functions to convert cmark_nodes to HTML strings.\n\nstatic void escape_html(cmark_strbuf *dest, const unsigned char *source,\n                        bufsize_t length) {\n  houdini_escape_html0(dest, source, length, 0);\n}\n\nstatic void filter_html_block(cmark_html_renderer *renderer, uint8_t *data, size_t len) {\n  cmark_strbuf *html = renderer->html;\n  cmark_llist *it;\n  cmark_syntax_extension *ext;\n  bool filtered;\n  uint8_t *match;\n\n  while (len) {\n    match = (uint8_t *) memchr(data, '<', len);\n    if (!match)\n      break;\n\n    if (match != data) {\n      cmark_strbuf_put(html, data, (bufsize_t)(match - data));\n      len -= (match - data);\n      data = match;\n    }\n\n    filtered = false;\n    for (it = renderer->filter_extensions; it; it = it->next) {\n      ext = ((cmark_syntax_extension *) it->data);\n      if (!ext->html_filter_func(ext, data, len)) {\n        filtered = true;\n        break;\n      }\n    }\n\n    if (!filtered) {\n      cmark_strbuf_putc(html, '<');\n    } else {\n      cmark_strbuf_puts(html, \"&lt;\");\n    }\n\n    ++data;\n    --len;\n  }\n\n  if (len)\n    cmark_strbuf_put(html, data, (bufsize_t)len);\n}\n\nstatic bool S_put_footnote_backref(cmark_html_renderer *renderer, cmark_strbuf *html, cmark_node *node) {\n  if (renderer->written_footnote_ix >= renderer->footnote_ix)\n    return false;\n  renderer->written_footnote_ix = renderer->footnote_ix;\n  char m[32];\n  snprintf(m, sizeof(m), \"%d\", renderer->written_footnote_ix);\n\n  cmark_strbuf_puts(html, \"<a href=\\\"#fnref-\");\n  houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n  cmark_strbuf_puts(html, \"\\\" class=\\\"footnote-backref\\\" data-footnote-backref data-footnote-backref-idx=\\\"\");\n  cmark_strbuf_puts(html, m);\n  cmark_strbuf_puts(html, \"\\\" aria-label=\\\"Back to reference \");\n  cmark_strbuf_puts(html, m);\n  cmark_strbuf_puts(html, \"\\\">\u21a9</a>\");\n\n  if (node->footnote.def_count > 1)\n  {\n    for(int i = 2; i <= node->footnote.def_count; i++) {\n      char n[32];\n      snprintf(n, sizeof(n), \"%d\", i);\n\n      cmark_strbuf_puts(html, \" <a href=\\\"#fnref-\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\" class=\\\"footnote-backref\\\" data-footnote-backref data-footnote-backref-idx=\\\"\");\n      cmark_strbuf_puts(html, m);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\" aria-label=\\\"Back to reference \");\n      cmark_strbuf_puts(html, m);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\">\u21a9<sup class=\\\"footnote-ref\\\">\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"</sup></a>\");\n    }\n  }\n\n  return true;\n}\n\nstatic int S_render_node(cmark_html_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  cmark_node *parent;\n  cmark_node *grandparent;\n  cmark_strbuf *html = renderer->html;\n  cmark_llist *it;\n  cmark_syntax_extension *ext;\n  char start_heading[] = \"<h0\";\n  char end_heading[] = \"</h0\";\n  bool tight;\n  bool filtered;\n  char buffer[BUFFER_SIZE];\n\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n\n  if (renderer->plain == node) { // back at original node\n    renderer->plain = NULL;\n  }\n\n  if (renderer->plain != NULL) {\n    switch (node->type) {\n    case CMARK_NODE_TEXT:\n    case CMARK_NODE_CODE:\n    case CMARK_NODE_HTML_INLINE:\n      escape_html(html, node->as.literal.data, node->as.literal.len);\n      break;\n\n    case CMARK_NODE_LINEBREAK:\n    case CMARK_NODE_SOFTBREAK:\n      cmark_strbuf_putc(html, ' ');\n      break;\n\n    default:\n      break;\n    }\n    return 1;\n  }\n\n  if (node->extension && node->extension->html_render_func) {\n    node->extension->html_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"<blockquote\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_puts(html, \">\\n\");\n    } else {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"</blockquote>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_LIST: {\n    cmark_list_type list_type = node->as.list.list_type;\n    int start = node->as.list.start;\n\n    if (entering) {\n      cmark_html_render_cr(html);\n      if (list_type == CMARK_BULLET_LIST) {\n        cmark_strbuf_puts(html, \"<ul\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      } else if (start == 1) {\n        cmark_strbuf_puts(html, \"<ol\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      } else {\n        snprintf(buffer, BUFFER_SIZE, \"<ol start=\\\"%d\\\"\", start);\n        cmark_strbuf_puts(html, buffer);\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      }\n    } else {\n      cmark_strbuf_puts(html,\n                        list_type == CMARK_BULLET_LIST ? \"</ul>\\n\" : \"</ol>\\n\");\n    }\n    break;\n  }\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"<li\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_putc(html, '>');\n    } else {\n      cmark_strbuf_puts(html, \"</li>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      cmark_html_render_cr(html);\n      start_heading[2] = (char)('0' + node->as.heading.level);\n      cmark_strbuf_puts(html, start_heading);\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_putc(html, '>');\n    } else {\n      end_heading[3] = (char)('0' + node->as.heading.level);\n      cmark_strbuf_puts(html, end_heading);\n      cmark_strbuf_puts(html, \">\\n\");\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    cmark_html_render_cr(html);\n\n    if (node->as.code.info.len == 0) {\n      cmark_strbuf_puts(html, \"<pre\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_puts(html, \"><code>\");\n    } else {\n      bufsize_t first_tag = 0;\n      while (first_tag < node->as.code.info.len &&\n             !cmark_isspace(node->as.code.info.data[first_tag])) {\n        first_tag += 1;\n      }\n\n      if (options & CMARK_OPT_GITHUB_PRE_LANG) {\n        cmark_strbuf_puts(html, \"<pre\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \" lang=\\\"\");\n        escape_html(html, node->as.code.info.data, first_tag);\n        if (first_tag < node->as.code.info.len && (options & CMARK_OPT_FULL_INFO_STRING)) {\n          cmark_strbuf_puts(html, \"\\\" data-meta=\\\"\");\n          escape_html(html, node->as.code.info.data + first_tag + 1, node->as.code.info.len - first_tag - 1);\n        }\n        cmark_strbuf_puts(html, \"\\\"><code>\");\n      } else {\n        cmark_strbuf_puts(html, \"<pre\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \"><code class=\\\"language-\");\n        escape_html(html, node->as.code.info.data, first_tag);\n        if (first_tag < node->as.code.info.len && (options & CMARK_OPT_FULL_INFO_STRING)) {\n          cmark_strbuf_puts(html, \"\\\" data-meta=\\\"\");\n          escape_html(html, node->as.code.info.data + first_tag + 1, node->as.code.info.len - first_tag - 1);\n        }\n        cmark_strbuf_puts(html, \"\\\">\");\n      }\n    }\n\n    escape_html(html, node->as.code.literal.data, node->as.code.literal.len);\n    cmark_strbuf_puts(html, \"</code></pre>\\n\");\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    cmark_html_render_cr(html);\n    if (!(options & CMARK_OPT_UNSAFE)) {\n      cmark_strbuf_puts(html, \"<!-- raw HTML omitted -->\");\n    } else if (renderer->filter_extensions) {\n      filter_html_block(renderer, node->as.literal.data, node->as.literal.len);\n    } else {\n      cmark_strbuf_put(html, node->as.literal.data, node->as.literal.len);\n    }\n    cmark_html_render_cr(html);\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    cmark_html_render_cr(html);\n    if (entering) {\n      cmark_strbuf_put(html, node->as.custom.on_enter.data,\n                       node->as.custom.on_enter.len);\n    } else {\n      cmark_strbuf_put(html, node->as.custom.on_exit.data,\n                       node->as.custom.on_exit.len);\n    }\n    cmark_html_render_cr(html);\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    cmark_html_render_cr(html);\n    cmark_strbuf_puts(html, \"<hr\");\n    cmark_html_render_sourcepos(node, html, options);\n    cmark_strbuf_puts(html, \" />\\n\");\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    parent = cmark_node_parent(node);\n    grandparent = cmark_node_parent(parent);\n    if (grandparent != NULL && grandparent->type == CMARK_NODE_LIST) {\n      tight = grandparent->as.list.tight;\n    } else {\n      tight = false;\n    }\n    if (!tight) {\n      if (entering) {\n        cmark_html_render_cr(html);\n        cmark_strbuf_puts(html, \"<p\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_putc(html, '>');\n      } else {\n        if (parent->type == CMARK_NODE_FOOTNOTE_DEFINITION && node->next == NULL) {\n          cmark_strbuf_putc(html, ' ');\n          S_put_footnote_backref(renderer, html, parent);\n        }\n        cmark_strbuf_puts(html, \"</p>\\n\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    escape_html(html, node->as.literal.data, node->as.literal.len);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    cmark_strbuf_puts(html, \"<br />\\n\");\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      cmark_strbuf_puts(html, \"<br />\\n\");\n    } else if (options & CMARK_OPT_NOBREAKS) {\n      cmark_strbuf_putc(html, ' ');\n    } else {\n      cmark_strbuf_putc(html, '\\n');\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    cmark_strbuf_puts(html, \"<code>\");\n    escape_html(html, node->as.literal.data, node->as.literal.len);\n    cmark_strbuf_puts(html, \"</code>\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    if (!(options & CMARK_OPT_UNSAFE)) {\n      cmark_strbuf_puts(html, \"<!-- raw HTML omitted -->\");\n    } else {\n      filtered = false;\n      for (it = renderer->filter_extensions; it; it = it->next) {\n        ext = (cmark_syntax_extension *) it->data;\n        if (!ext->html_filter_func(ext, node->as.literal.data, node->as.literal.len)) {\n          filtered = true;\n          break;\n        }\n      }\n      if (!filtered) {\n        cmark_strbuf_put(html, node->as.literal.data, node->as.literal.len);\n      } else {\n        cmark_strbuf_puts(html, \"&lt;\");\n        cmark_strbuf_put(html, node->as.literal.data + 1, node->as.literal.len - 1);\n      }\n    }\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    if (entering) {\n      cmark_strbuf_put(html, node->as.custom.on_enter.data,\n                       node->as.custom.on_enter.len);\n    } else {\n      cmark_strbuf_put(html, node->as.custom.on_exit.data,\n                       node->as.custom.on_exit.len);\n    }\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<strong>\");\n    } else {\n      cmark_strbuf_puts(html, \"</strong>\");\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<em>\");\n    } else {\n      cmark_strbuf_puts(html, \"</em>\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<a href=\\\"\");\n      if ((options & CMARK_OPT_UNSAFE) ||\n            !(scan_dangerous_url(&node->as.link.url, 0))) {\n        houdini_escape_href(html, node->as.link.url.data,\n                            node->as.link.url.len);\n      }\n      if (node->as.link.title.len) {\n        cmark_strbuf_puts(html, \"\\\" title=\\\"\");\n        escape_html(html, node->as.link.title.data, node->as.link.title.len);\n      }\n      cmark_strbuf_puts(html, \"\\\">\");\n    } else {\n      cmark_strbuf_puts(html, \"</a>\");\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<img src=\\\"\");\n      if ((options & CMARK_OPT_UNSAFE) ||\n            !(scan_dangerous_url(&node->as.link.url, 0))) {\n        houdini_escape_href(html, node->as.link.url.data,\n                            node->as.link.url.len);\n      }\n      cmark_strbuf_puts(html, \"\\\" alt=\\\"\");\n      renderer->plain = node;\n    } else {\n      if (node->as.link.title.len) {\n        cmark_strbuf_puts(html, \"\\\" title=\\\"\");\n        escape_html(html, node->as.link.title.data, node->as.link.title.len);\n      }\n\n      cmark_strbuf_puts(html, \"\\\" />\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      if (renderer->footnote_ix == 0) {\n        cmark_strbuf_puts(html, \"<section class=\\\"footnotes\\\" data-footnotes>\\n<ol>\\n\");\n      }\n      ++renderer->footnote_ix;\n\n      cmark_strbuf_puts(html, \"<li id=\\\"fn-\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"\\\">\\n\");\n    } else {\n      if (S_put_footnote_backref(renderer, html, node)) {\n        cmark_strbuf_putc(html, '\\n');\n      }\n      cmark_strbuf_puts(html, \"</li>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<sup class=\\\"footnote-ref\\\"><a href=\\\"#fn-\");\n      houdini_escape_href(html, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n      cmark_strbuf_puts(html, \"\\\" id=\\\"fnref-\");\n      houdini_escape_href(html, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n\n      if (node->footnote.ref_ix > 1) {\n        char n[32];\n        snprintf(n, sizeof(n), \"%d\", node->footnote.ref_ix);\n        cmark_strbuf_puts(html, \"-\");\n        cmark_strbuf_puts(html, n);\n      }\n\n      cmark_strbuf_puts(html, \"\\\" data-footnote-ref>\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"</a></sup>\");\n    }\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_html(cmark_node *root, int options, cmark_llist *extensions) {\n  return cmark_render_html_with_mem(root, options, extensions, cmark_node_mem(root));\n}\n\nchar *cmark_render_html_with_mem(cmark_node *root, int options, cmark_llist *extensions, cmark_mem *mem) {\n  char *result;\n  cmark_strbuf html = CMARK_BUF_INIT(mem);\n  cmark_event_type ev_type;\n  cmark_node *cur;\n  cmark_html_renderer renderer = {&html, NULL, NULL, 0, 0, NULL};\n  cmark_iter *iter = cmark_iter_new(root);\n\n  for (; extensions; extensions = extensions->next)\n    if (((cmark_syntax_extension *) extensions->data)->html_filter_func)\n      renderer.filter_extensions = cmark_llist_append(\n          mem,\n          renderer.filter_extensions,\n          (cmark_syntax_extension *) extensions->data);\n\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    S_render_node(&renderer, cur, ev_type, options);\n  }\n\n  if (renderer.footnote_ix) {\n    cmark_strbuf_puts(&html, \"</ol>\\n</section>\\n\");\n  }\n\n  result = (char *)cmark_strbuf_detach(&html);\n\n  cmark_llist_free(mem, renderer.filter_extensions);\n\n  cmark_iter_free(iter);\n  return result;\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"scanners.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LIST_NUMBER_STRING_SIZE 20\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node,\n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  if (escape == LITERAL) {\n    cmark_render_code_point(renderer, c);\n    return;\n  }\n\n  switch (c) {\n  case 123: // '{'\n  case 125: // '}'\n  case 35:  // '#'\n  case 37:  // '%'\n  case 38:  // '&'\n    cmark_render_ascii(renderer, \"\\\\\");\n    cmark_render_code_point(renderer, c);\n    break;\n  case 36: // '$'\n  case 95: // '_'\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\\\\");\n    }\n    cmark_render_code_point(renderer, c);\n    break;\n  case 45:             // '-'\n    if (nextc == 45) { // prevent ligature\n      cmark_render_ascii(renderer, \"-{}\");\n    } else {\n      cmark_render_ascii(renderer, \"-\");\n    }\n    break;\n  case 126: // '~'\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\\\textasciitilde{}\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 94: // '^'\n    cmark_render_ascii(renderer, \"\\\\^{}\");\n    break;\n  case 92: // '\\\\'\n    if (escape == URL) {\n      // / acts as path sep even on windows:\n      cmark_render_ascii(renderer, \"/\");\n    } else {\n      cmark_render_ascii(renderer, \"\\\\textbackslash{}\");\n    }\n    break;\n  case 124: // '|'\n    cmark_render_ascii(renderer, \"\\\\textbar{}\");\n    break;\n  case 60: // '<'\n    cmark_render_ascii(renderer, \"\\\\textless{}\");\n    break;\n  case 62: // '>'\n    cmark_render_ascii(renderer, \"\\\\textgreater{}\");\n    break;\n  case 91: // '['\n  case 93: // ']'\n    cmark_render_ascii(renderer, \"{\");\n    cmark_render_code_point(renderer, c);\n    cmark_render_ascii(renderer, \"}\");\n    break;\n  case 34: // '\"'\n    cmark_render_ascii(renderer, \"\\\\textquotedbl{}\");\n    // requires \\usepackage[T1]{fontenc}\n    break;\n  case 39: // '\\''\n    cmark_render_ascii(renderer, \"\\\\textquotesingle{}\");\n    // requires \\usepackage{textcomp}\n    break;\n  case 160: // nbsp\n    cmark_render_ascii(renderer, \"~\");\n    break;\n  case 8230: // hellip\n    cmark_render_ascii(renderer, \"\\\\ldots{}\");\n    break;\n  case 8216: // lsquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"`\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8217: // rsquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\'\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8220: // ldquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"``\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8221: // rdquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"''\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8212: // emdash\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"---\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8211: // endash\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"--\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  default:\n    cmark_render_code_point(renderer, c);\n  }\n}\n\ntypedef enum {\n  NO_LINK,\n  URL_AUTOLINK,\n  EMAIL_AUTOLINK,\n  NORMAL_LINK,\n  INTERNAL_LINK\n} link_type;\n\nstatic link_type get_link_type(cmark_node *node) {\n  size_t title_len, url_len;\n  cmark_node *link_text;\n  char *realurl;\n  int realurllen;\n  bool isemail = false;\n\n  if (node->type != CMARK_NODE_LINK) {\n    return NO_LINK;\n  }\n\n  const char *url = cmark_node_get_url(node);\n  cmark_chunk url_chunk = cmark_chunk_literal(url);\n\n  if (url && *url == '#') {\n    return INTERNAL_LINK;\n  }\n\n  url_len = strlen(url);\n  if (url_len == 0 || scan_scheme(&url_chunk, 0) == 0) {\n    return NO_LINK;\n  }\n\n  const char *title = cmark_node_get_title(node);\n  title_len = strlen(title);\n  // if it has a title, we can't treat it as an autolink:\n  if (title_len == 0) {\n\n    link_text = node->first_child;\n    cmark_consolidate_text_nodes(link_text);\n\n    if (!link_text)\n      return NO_LINK;\n\n    realurl = (char *)url;\n    realurllen = (int)url_len;\n    if (strncmp(realurl, \"mailto:\", 7) == 0) {\n      realurl += 7;\n      realurllen -= 7;\n      isemail = true;\n    }\n    if (realurllen == link_text->as.literal.len &&\n        strncmp(realurl, (char *)link_text->as.literal.data,\n                link_text->as.literal.len) == 0) {\n      if (isemail) {\n        return EMAIL_AUTOLINK;\n      } else {\n        return URL_AUTOLINK;\n      }\n    }\n  }\n\n  return NORMAL_LINK;\n}\n\nstatic int S_get_enumlevel(cmark_node *node) {\n  int enumlevel = 0;\n  cmark_node *tmp = node;\n  while (tmp) {\n    if (tmp->type == CMARK_NODE_LIST &&\n        cmark_node_get_list_type(node) == CMARK_ORDERED_LIST) {\n      enumlevel++;\n    }\n    tmp = tmp->parent;\n  }\n  return enumlevel;\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  int list_number;\n  int enumlevel;\n  char list_number_string[LIST_NUMBER_STRING_SIZE];\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  cmark_list_type list_type;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);\n\n  if (node->extension && node->extension->latex_render_func) {\n    node->extension->latex_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      LIT(\"\\\\begin{quote}\");\n      CR();\n    } else {\n      LIT(\"\\\\end{quote}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    list_type = cmark_node_get_list_type(node);\n    if (entering) {\n      LIT(\"\\\\begin{\");\n      LIT(list_type == CMARK_ORDERED_LIST ? \"enumerate\" : \"itemize\");\n      LIT(\"}\");\n      CR();\n      list_number = cmark_node_get_list_start(node);\n      if (list_number > 1) {\n        enumlevel = S_get_enumlevel(node);\n        // latex normally supports only five levels\n        if (enumlevel >= 1 && enumlevel <= 5) {\n          snprintf(list_number_string, LIST_NUMBER_STRING_SIZE, \"%d\",\n                   list_number);\n          LIT(\"\\\\setcounter{enum\");\n          switch (enumlevel) {\n          case 1: LIT(\"i\"); break;\n          case 2: LIT(\"ii\"); break;\n          case 3: LIT(\"iii\"); break;\n          case 4: LIT(\"iv\"); break;\n          case 5: LIT(\"v\"); break;\n          default: LIT(\"i\"); break;\n\t  }\n          LIT(\"}{\");\n          OUT(list_number_string, false, NORMAL);\n          LIT(\"}\");\n        }\n        CR();\n      }\n    } else {\n      LIT(\"\\\\end{\");\n      LIT(list_type == CMARK_ORDERED_LIST ? \"enumerate\" : \"itemize\");\n      LIT(\"}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      LIT(\"\\\\item \");\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      switch (cmark_node_get_heading_level(node)) {\n      case 1:\n        LIT(\"\\\\section\");\n        break;\n      case 2:\n        LIT(\"\\\\subsection\");\n        break;\n      case 3:\n        LIT(\"\\\\subsubsection\");\n        break;\n      case 4:\n        LIT(\"\\\\paragraph\");\n        break;\n      case 5:\n        LIT(\"\\\\subparagraph\");\n        break;\n      }\n      LIT(\"{\");\n    } else {\n      LIT(\"}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    CR();\n    LIT(\"\\\\begin{verbatim}\");\n    CR();\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    CR();\n    LIT(\"\\\\end{verbatim}\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    CR();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    CR();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    LIT(\"\\\\begin{center}\\\\rule{0.5\\\\linewidth}{\\\\linethickness}\\\\end{center}\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    LIT(\"\\\\\\\\\");\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      LIT(\"\\\\\\\\\");\n      CR();\n    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, NORMAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    LIT(\"\\\\texttt{\");\n    OUT(cmark_node_get_literal(node), false, NORMAL);\n    LIT(\"}\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (entering) {\n      LIT(\"\\\\textbf{\");\n    } else {\n      LIT(\"}\");\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      LIT(\"\\\\emph{\");\n    } else {\n      LIT(\"}\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (entering) {\n      const char *url = cmark_node_get_url(node);\n      // requires \\usepackage{hyperref}\n      switch (get_link_type(node)) {\n      case URL_AUTOLINK:\n        LIT(\"\\\\url{\");\n        OUT(url, false, URL);\n        LIT(\"}\");\n        return 0; // Don't process further nodes to avoid double-rendering artefacts\n      case EMAIL_AUTOLINK:\n        LIT(\"\\\\href{\");\n        OUT(url, false, URL);\n        LIT(\"}\\\\nolinkurl{\");\n        break;\n      case NORMAL_LINK:\n        LIT(\"\\\\href{\");\n        OUT(url, false, URL);\n        LIT(\"}{\");\n        break;\n      case INTERNAL_LINK:\n        LIT(\"\\\\protect\\\\hyperlink{\");\n        OUT(url + 1, false, URL);\n        LIT(\"}{\");\n        break;\n      case NO_LINK:\n        LIT(\"{\"); // error?\n      }\n    } else {\n      LIT(\"}\");\n    }\n\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"\\\\protect\\\\includegraphics{\");\n      // requires \\include{graphicx}\n      OUT(cmark_node_get_url(node), false, URL);\n      LIT(\"}\");\n      return 0;\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    // TODO\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_latex(cmark_node *root, int options, int width) {\n  return cmark_render_latex_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_latex_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LIST_NUMBER_SIZE 20\n\n// Functions to convert cmark_nodes to groff man strings.\nstatic void S_outc(cmark_renderer *renderer, cmark_node *node, \n                   cmark_escaping escape, int32_t c,\n                   unsigned char nextc) {\n  (void)(nextc);\n\n  if (escape == LITERAL) {\n    cmark_render_code_point(renderer, c);\n    return;\n  }\n\n  switch (c) {\n  case 46:\n    if (renderer->begin_line) {\n      cmark_render_ascii(renderer, \"\\\\&.\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 39:\n    if (renderer->begin_line) {\n      cmark_render_ascii(renderer, \"\\\\&'\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 45:\n    cmark_render_ascii(renderer, \"\\\\-\");\n    break;\n  case 92:\n    cmark_render_ascii(renderer, \"\\\\e\");\n    break;\n  case 8216: // left single quote\n    cmark_render_ascii(renderer, \"\\\\[oq]\");\n    break;\n  case 8217: // right single quote\n    cmark_render_ascii(renderer, \"\\\\[cq]\");\n    break;\n  case 8220: // left double quote\n    cmark_render_ascii(renderer, \"\\\\[lq]\");\n    break;\n  case 8221: // right double quote\n    cmark_render_ascii(renderer, \"\\\\[rq]\");\n    break;\n  case 8212: // em dash\n    cmark_render_ascii(renderer, \"\\\\[em]\");\n    break;\n  case 8211: // en dash\n    cmark_render_ascii(renderer, \"\\\\[en]\");\n    break;\n  default:\n    cmark_render_code_point(renderer, c);\n  }\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  cmark_node *tmp;\n  int list_number;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);\n\n  if (node->extension && node->extension->man_render_func) {\n    node->extension->man_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    if (entering) {\n      /* Define a strikethrough macro */\n      /* Commenting out because this makes tests fail\n      LIT(\".de ST\");\n      CR();\n      LIT(\".nr ww \\\\w'\\\\\\\\$1'\");\n      CR();\n      LIT(\"\\\\Z@\\\\v'-.25m'\\\\l'\\\\\\\\n[ww]u'@\\\\\\\\$1\");\n      CR();\n      LIT(\"..\");\n      CR();\n      */\n    }\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      CR();\n      LIT(\".RS\");\n      CR();\n    } else {\n      CR();\n      LIT(\".RE\");\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      CR();\n      LIT(\".IP \");\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"\\\\[bu] 2\");\n      } else {\n        list_number = cmark_node_get_list_start(node->parent);\n        tmp = node;\n        while (tmp->prev) {\n          tmp = tmp->prev;\n          list_number += 1;\n        }\n        char list_number_s[LIST_NUMBER_SIZE];\n        snprintf(list_number_s, LIST_NUMBER_SIZE, \"\\\"%d.\\\" 4\", list_number);\n        LIT(list_number_s);\n      }\n      CR();\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      CR();\n      LIT(cmark_node_get_heading_level(node) == 1 ? \".SH\" : \".SS\");\n      CR();\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    CR();\n    LIT(\".IP\\n.nf\\n\\\\f[C]\\n\");\n    OUT(cmark_node_get_literal(node), false, NORMAL);\n    CR();\n    LIT(\"\\\\f[]\\n.fi\");\n    CR();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    CR();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    CR();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    CR();\n    LIT(\".PP\\n  *  *  *  *  *\");\n    CR();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (entering) {\n      // no blank line if first paragraph in list:\n      if (node->parent && node->parent->type == CMARK_NODE_ITEM &&\n          node->prev == NULL) {\n        // no blank line or .PP\n      } else {\n        CR();\n        LIT(\".PP\");\n        CR();\n      }\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    LIT(\".PD 0\\n.P\\n.PD\");\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      LIT(\".PD 0\\n.P\\n.PD\");\n      CR();\n    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    LIT(\"\\\\f[C]\");\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    LIT(\"\\\\f[]\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (entering) {\n      LIT(\"\\\\f[B]\");\n    } else {\n      LIT(\"\\\\f[]\");\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      LIT(\"\\\\f[I]\");\n    } else {\n      LIT(\"\\\\f[]\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (!entering) {\n      LIT(\" (\");\n      OUT(cmark_node_get_url(node), allow_wrap, URL);\n      LIT(\")\");\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"[IMAGE: \");\n    } else {\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    // TODO\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_man(cmark_node *root, int options, int width) {\n  return cmark_render_man_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_man_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  return cmark_render(mem, root, options, width, S_outc, S_render_node);\n}\n", "#ifndef CMARK_NODE_H\n#define CMARK_NODE_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <stdio.h>\n#include <stdint.h>\n\n#include \"cmark-gfm.h\"\n#include \"cmark-gfm-extension_api.h\"\n#include \"buffer.h\"\n#include \"chunk.h\"\n\ntypedef struct {\n  cmark_list_type list_type;\n  int marker_offset;\n  int padding;\n  int start;\n  cmark_delim_type delimiter;\n  unsigned char bullet_char;\n  bool tight;\n  bool checked; // For task list extension\n} cmark_list;\n\ntypedef struct {\n  cmark_chunk info;\n  cmark_chunk literal;\n  uint8_t fence_length;\n  uint8_t fence_offset;\n  unsigned char fence_char;\n  int8_t fenced;\n} cmark_code;\n\ntypedef struct {\n  int level;\n  bool setext;\n} cmark_heading;\n\ntypedef struct {\n  cmark_chunk url;\n  cmark_chunk title;\n} cmark_link;\n\ntypedef struct {\n  cmark_chunk on_enter;\n  cmark_chunk on_exit;\n} cmark_custom;\n\nenum cmark_node__internal_flags {\n  CMARK_NODE__OPEN = (1 << 0),\n  CMARK_NODE__OPEN_BLOCK = (1 << 1),\n  CMARK_NODE__LAST_LINE_BLANK = (1 << 2),\n  CMARK_NODE__LAST_LINE_CHECKED = (1 << 3),\n\n  // Extensions can register custom flags by calling `cmark_register_node_flag`.\n  // This is the starting value for the custom flags.\n  CMARK_NODE__REGISTER_FIRST = (1 << 4),\n};\n\ntypedef uint16_t cmark_node_internal_flags;\n\nstruct cmark_node {\n  cmark_strbuf content;\n\n  struct cmark_node *next;\n  struct cmark_node *prev;\n  struct cmark_node *parent;\n  struct cmark_node *first_child;\n  struct cmark_node *last_child;\n\n  void *user_data;\n  cmark_free_func user_data_free_func;\n\n  int start_line;\n  int start_column;\n  int end_line;\n  int end_column;\n  int internal_offset;\n  uint16_t type;\n  cmark_node_internal_flags flags;\n\n  cmark_syntax_extension *extension;\n\n  union {\n    int ref_ix;\n    int def_count;\n  } footnote;\n\n  cmark_node *parent_footnote_def;\n\n  union {\n    cmark_chunk literal;\n    cmark_list list;\n    cmark_code code;\n    cmark_heading heading;\n    cmark_link link;\n    cmark_custom custom;\n    int html_block_type;\n    void *opaque;\n  } as;\n};\n\n/**\n * Syntax extensions can use this function to register a custom node\n * flag. The flags are stored in the `flags` field of the `cmark_node`\n * struct. The `flags` parameter should be the address of a global variable\n * which will store the flag value.\n */\nCMARK_GFM_EXPORT\nvoid cmark_register_node_flag(cmark_node_internal_flags *flags);\n\n/**\n * DEPRECATED.\n *\n * This function was added in cmark-gfm version 0.29.0.gfm.7, and was\n * required to be called at program start time, which caused\n * backwards-compatibility issues in applications that use cmark-gfm as a\n * library. It is now a no-op.\n */\nCMARK_GFM_EXPORT\nvoid cmark_init_standard_node_flags();\n\nstatic CMARK_INLINE cmark_mem *cmark_node_mem(cmark_node *node) {\n  return node->content.mem;\n}\nCMARK_GFM_EXPORT int cmark_node_check(cmark_node *node, FILE *out);\n\nstatic CMARK_INLINE bool CMARK_NODE_TYPE_BLOCK_P(cmark_node_type node_type) {\n\treturn (node_type & CMARK_NODE_TYPE_MASK) == CMARK_NODE_TYPE_BLOCK;\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_BLOCK_P(cmark_node *node) {\n\treturn node != NULL && CMARK_NODE_TYPE_BLOCK_P((cmark_node_type) node->type);\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_TYPE_INLINE_P(cmark_node_type node_type) {\n\treturn (node_type & CMARK_NODE_TYPE_MASK) == CMARK_NODE_TYPE_INLINE;\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_INLINE_P(cmark_node *node) {\n\treturn node != NULL && CMARK_NODE_TYPE_INLINE_P((cmark_node_type) node->type);\n}\n\nCMARK_GFM_EXPORT bool cmark_node_can_contain_type(cmark_node *node, cmark_node_type child_type);\n\n/**\n * Enable (or disable) extra safety checks. These extra checks cause\n * extra performance overhead (in some cases quadratic), so they are only\n * intended to be used during testing.\n */\nCMARK_GFM_EXPORT void cmark_enable_safety_checks(bool enable);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n", "#include \"node.h\"\n#include \"syntax_extension.h\"\n#include \"render.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LISTMARKER_SIZE 20\n\n// Functions to convert cmark_nodes to plain text strings.\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node, \n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  cmark_render_code_point(renderer, c);\n}\n\n// if node is a block node, returns node.\n// otherwise returns first block-level node that is an ancestor of node.\n// if there is no block-level ancestor, returns NULL.\nstatic cmark_node *get_containing_block(cmark_node *node) {\n  while (node) {\n    if (CMARK_NODE_BLOCK_P(node)) {\n      return node;\n    } else {\n      node = node->parent;\n    }\n  }\n  return NULL;\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  cmark_node *tmp;\n  int list_number;\n  cmark_delim_type list_delim;\n  int i;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  char listmarker[LISTMARKER_SIZE];\n  bool first_in_list_item;\n  bufsize_t marker_width;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&\n                    !(CMARK_OPT_HARDBREAKS & options);\n\n  // Don't adjust tight list status til we've started the list.\n  // Otherwise we loose the blank line between a paragraph and\n  // a following list.\n  if (!(node->type == CMARK_NODE_ITEM && node->prev == NULL && entering)) {\n    tmp = get_containing_block(node);\n    renderer->in_tight_list_item =\n        tmp && // tmp might be NULL if there is no containing block\n        ((tmp->type == CMARK_NODE_ITEM &&\n          cmark_node_get_list_tight(tmp->parent)) ||\n         (tmp && tmp->parent && tmp->parent->type == CMARK_NODE_ITEM &&\n          cmark_node_get_list_tight(tmp->parent->parent)));\n  }\n\n  if (node->extension && node->extension->plaintext_render_func) {\n    node->extension->plaintext_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    break;\n\n  case CMARK_NODE_LIST:\n    if (!entering && node->next && (node->next->type == CMARK_NODE_CODE_BLOCK ||\n                                    node->next->type == CMARK_NODE_LIST)) {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n      marker_width = 4;\n    } else {\n      list_number = cmark_node_get_list_start(node->parent);\n      list_delim = cmark_node_get_list_delim(node->parent);\n      tmp = node;\n      while (tmp->prev) {\n        tmp = tmp->prev;\n        list_number += 1;\n      }\n      // we ensure a width of at least 4 so\n      // we get nice transition from single digits\n      // to double\n      snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,\n               list_delim == CMARK_PAREN_DELIM ? \")\" : \".\",\n               list_number < 10 ? \"  \" : \" \");\n      marker_width = (bufsize_t)strlen(listmarker);\n    }\n    if (entering) {\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"  - \");\n        renderer->begin_content = true;\n      } else {\n        LIT(listmarker);\n        renderer->begin_content = true;\n      }\n      for (i = marker_width; i--;) {\n        cmark_strbuf_putc(renderer->prefix, ' ');\n      }\n    } else {\n      cmark_strbuf_truncate(renderer->prefix,\n                            renderer->prefix->size - marker_width);\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      renderer->begin_content = true;\n      renderer->no_linebreaks = true;\n    } else {\n      renderer->no_linebreaks = false;\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    first_in_list_item = node->prev == NULL && node->parent &&\n                         node->parent->type == CMARK_NODE_ITEM;\n\n    if (!first_in_list_item) {\n      BLANKLINE();\n    }\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (CMARK_OPT_HARDBREAKS & options) {\n      CR();\n    } else if (!renderer->no_linebreaks && renderer->width == 0 &&\n               !(CMARK_OPT_HARDBREAKS & options) &&\n               !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    break;\n\n  case CMARK_NODE_STRONG:\n    break;\n\n  case CMARK_NODE_EMPH:\n    break;\n\n  case CMARK_NODE_LINK:\n    break;\n\n  case CMARK_NODE_IMAGE:\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      LIT(\"[^\");\n      OUT(cmark_chunk_to_cstr(renderer->mem, &node->as.literal), false, LITERAL);\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      renderer->footnote_ix += 1;\n      LIT(\"[^\");\n      char n[32];\n      snprintf(n, sizeof(n), \"%d\", renderer->footnote_ix);\n      OUT(n, false, LITERAL);\n      LIT(\"]: \");\n\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    }\n    break;\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_plaintext(cmark_node *root, int options, int width) {\n  return cmark_render_plaintext_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_plaintext_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  if (options & CMARK_OPT_HARDBREAKS) {\n    // disable breaking on width, since it has\n    // a different meaning with OPT_HARDBREAKS\n    width = 0;\n  }\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include \"buffer.h\"\n#include \"chunk.h\"\n#include \"cmark-gfm.h\"\n#include \"utf8.h\"\n#include \"render.h\"\n#include \"node.h\"\n#include \"syntax_extension.h\"\n\nstatic CMARK_INLINE void S_cr(cmark_renderer *renderer) {\n  if (renderer->need_cr < 1) {\n    renderer->need_cr = 1;\n  }\n}\n\nstatic CMARK_INLINE void S_blankline(cmark_renderer *renderer) {\n  if (renderer->need_cr < 2) {\n    renderer->need_cr = 2;\n  }\n}\n\nstatic void S_out(cmark_renderer *renderer, cmark_node *node,\n                  const char *source, bool wrap,\n                  cmark_escaping escape) {\n  int length = (int)strlen(source);\n  unsigned char nextc;\n  int32_t c;\n  int i = 0;\n  int last_nonspace;\n  int len;\n  cmark_chunk remainder = cmark_chunk_literal(\"\");\n  int k = renderer->buffer->size - 1;\n\n  cmark_syntax_extension *ext = NULL;\n  cmark_node *n = node;\n  while (n && !ext) {\n    ext = n->extension;\n    if (!ext)\n      n = n->parent;\n  }\n  if (ext && !ext->commonmark_escape_func)\n    ext = NULL;\n\n  wrap = wrap && !renderer->no_linebreaks;\n\n  if (renderer->in_tight_list_item && renderer->need_cr > 1) {\n    renderer->need_cr = 1;\n  }\n  while (renderer->need_cr) {\n    if (k < 0 || renderer->buffer->ptr[k] == '\\n') {\n      k -= 1;\n    } else {\n      cmark_strbuf_putc(renderer->buffer, '\\n');\n      if (renderer->need_cr > 1) {\n        cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                         renderer->prefix->size);\n      }\n    }\n    renderer->column = 0;\n    renderer->last_breakable = 0;\n    renderer->begin_line = true;\n    renderer->begin_content = true;\n    renderer->need_cr -= 1;\n  }\n\n  while (i < length) {\n    if (renderer->begin_line) {\n      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                       renderer->prefix->size);\n      // note: this assumes prefix is ascii:\n      renderer->column = renderer->prefix->size;\n    }\n\n    len = cmark_utf8proc_iterate((const uint8_t *)source + i, length - i, &c);\n    if (len == -1) { // error condition\n      return;        // return without rendering rest of string\n    }\n\n    if (ext && ext->commonmark_escape_func(ext, node, c))\n      cmark_strbuf_putc(renderer->buffer, '\\\\');\n\n    nextc = source[i + len];\n    if (c == 32 && wrap) {\n      if (!renderer->begin_line) {\n        last_nonspace = renderer->buffer->size;\n        cmark_strbuf_putc(renderer->buffer, ' ');\n        renderer->column += 1;\n        renderer->begin_line = false;\n        renderer->begin_content = false;\n        // skip following spaces\n        while (source[i + 1] == ' ') {\n          i++;\n        }\n        // We don't allow breaks that make a digit the first character\n        // because this causes problems with commonmark output.\n        if (!cmark_isdigit(source[i + 1])) {\n          renderer->last_breakable = last_nonspace;\n        }\n      }\n\n    } else if (escape == LITERAL) {\n      if (c == 10) {\n        cmark_strbuf_putc(renderer->buffer, '\\n');\n        renderer->column = 0;\n        renderer->begin_line = true;\n        renderer->begin_content = true;\n        renderer->last_breakable = 0;\n      } else {\n        cmark_render_code_point(renderer, c);\n        renderer->begin_line = false;\n        // we don't set 'begin_content' to false til we've\n        // finished parsing a digit.  Reason:  in commonmark\n        // we need to escape a potential list marker after\n        // a digit:\n        renderer->begin_content =\n            renderer->begin_content && cmark_isdigit((char)c) == 1;\n      }\n    } else {\n      (renderer->outc)(renderer, node, escape, c, nextc);\n      renderer->begin_line = false;\n      renderer->begin_content =\n          renderer->begin_content && cmark_isdigit((char)c) == 1;\n    }\n\n    // If adding the character went beyond width, look for an\n    // earlier place where the line could be broken:\n    if (renderer->width > 0 && renderer->column > renderer->width &&\n        !renderer->begin_line && renderer->last_breakable > 0) {\n\n      // copy from last_breakable to remainder\n      cmark_chunk_set_cstr(renderer->mem, &remainder,\n                           (char *)renderer->buffer->ptr +\n                               renderer->last_breakable + 1);\n      // truncate at last_breakable\n      cmark_strbuf_truncate(renderer->buffer, renderer->last_breakable);\n      // add newline, prefix, and remainder\n      cmark_strbuf_putc(renderer->buffer, '\\n');\n      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                       renderer->prefix->size);\n      cmark_strbuf_put(renderer->buffer, remainder.data, remainder.len);\n      renderer->column = renderer->prefix->size + remainder.len;\n      cmark_chunk_free(renderer->mem, &remainder);\n      renderer->last_breakable = 0;\n      renderer->begin_line = false;\n      renderer->begin_content = false;\n    }\n\n    i += len;\n  }\n}\n\n// Assumes no newlines, assumes ascii content:\nvoid cmark_render_ascii(cmark_renderer *renderer, const char *s) {\n  int origsize = renderer->buffer->size;\n  cmark_strbuf_puts(renderer->buffer, s);\n  renderer->column += renderer->buffer->size - origsize;\n}\n\nvoid cmark_render_code_point(cmark_renderer *renderer, uint32_t c) {\n  cmark_utf8proc_encode_char(c, renderer->buffer);\n  renderer->column += 1;\n}\n\nchar *cmark_render(cmark_mem *mem, cmark_node *root, int options, int width,\n                   void (*outc)(cmark_renderer *, cmark_node *,\n                                cmark_escaping, int32_t,\n                                unsigned char),\n                   int (*render_node)(cmark_renderer *renderer,\n                                      cmark_node *node,\n                                      cmark_event_type ev_type, int options)) {\n  cmark_strbuf pref = CMARK_BUF_INIT(mem);\n  cmark_strbuf buf = CMARK_BUF_INIT(mem);\n  cmark_node *cur;\n  cmark_event_type ev_type;\n  char *result;\n  cmark_iter *iter = cmark_iter_new(root);\n\n  cmark_renderer renderer = {mem,   &buf, &pref, 0,           width,\n                             0,     0,    true,  true,        false,\n                             false, outc, S_cr,  S_blankline, S_out,\n                             0};\n\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    if (!render_node(&renderer, cur, ev_type, options)) {\n      // a false value causes us to skip processing\n      // the node's contents.  this is used for\n      // autolinks.\n      cmark_iter_reset(iter, cur, CMARK_EVENT_EXIT);\n    }\n  }\n\n  // ensure final newline\n  if (renderer.buffer->size == 0 || renderer.buffer->ptr[renderer.buffer->size - 1] != '\\n') {\n    cmark_strbuf_putc(renderer.buffer, '\\n');\n  }\n\n  result = (char *)cmark_strbuf_detach(renderer.buffer);\n\n  cmark_iter_free(iter);\n  cmark_strbuf_free(renderer.prefix);\n  cmark_strbuf_free(renderer.buffer);\n\n  return result;\n}\n", "#ifndef CMARK_RENDER_H\n#define CMARK_RENDER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <stdlib.h>\n#include \"buffer.h\"\n#include \"chunk.h\"\n\ntypedef enum { LITERAL, NORMAL, TITLE, URL } cmark_escaping;\n\nstruct cmark_renderer {\n  cmark_mem *mem;\n  cmark_strbuf *buffer;\n  cmark_strbuf *prefix;\n  int column;\n  int width;\n  int need_cr;\n  bufsize_t last_breakable;\n  bool begin_line;\n  bool begin_content;\n  bool no_linebreaks;\n  bool in_tight_list_item;\n  void (*outc)(struct cmark_renderer *, cmark_node *, cmark_escaping, int32_t, unsigned char);\n  void (*cr)(struct cmark_renderer *);\n  void (*blankline)(struct cmark_renderer *);\n  void (*out)(struct cmark_renderer *, cmark_node *, const char *, bool, cmark_escaping);\n  unsigned int footnote_ix;\n};\n\ntypedef struct cmark_renderer cmark_renderer;\n\nstruct cmark_html_renderer {\n  cmark_strbuf *html;\n  cmark_node *plain;\n  cmark_llist *filter_extensions;\n  unsigned int footnote_ix;\n  unsigned int written_footnote_ix;\n  void *opaque;\n};\n\ntypedef struct cmark_html_renderer cmark_html_renderer;\n\nvoid cmark_render_ascii(cmark_renderer *renderer, const char *s);\n\nvoid cmark_render_code_point(cmark_renderer *renderer, uint32_t c);\n\nchar *cmark_render(cmark_mem *mem, cmark_node *root, int options, int width,\n                   void (*outc)(cmark_renderer *, cmark_node *,\n                                cmark_escaping, int32_t,\n                                unsigned char),\n                   int (*render_node)(cmark_renderer *renderer,\n                                      cmark_node *node,\n                                      cmark_event_type ev_type, int options));\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"houdini.h\"\n#include \"syntax_extension.h\"\n\n#define BUFFER_SIZE 100\n\n// Functions to convert cmark_nodes to XML strings.\n\nstatic void escape_xml(cmark_strbuf *dest, const unsigned char *source,\n                       bufsize_t length) {\n  houdini_escape_html0(dest, source, length, 0);\n}\n\nstruct render_state {\n  cmark_strbuf *xml;\n  int indent;\n};\n\nstatic CMARK_INLINE void indent(struct render_state *state) {\n  int i;\n  for (i = 0; i < state->indent; i++) {\n    cmark_strbuf_putc(state->xml, ' ');\n  }\n}\n\nstatic int S_render_node(cmark_node *node, cmark_event_type ev_type,\n                         struct render_state *state, int options) {\n  cmark_strbuf *xml = state->xml;\n  bool literal = false;\n  cmark_delim_type delim;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  char buffer[BUFFER_SIZE];\n\n  if (entering) {\n    indent(state);\n    cmark_strbuf_putc(xml, '<');\n    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n\n    if (options & CMARK_OPT_SOURCEPOS && node->start_line != 0) {\n      snprintf(buffer, BUFFER_SIZE, \" sourcepos=\\\"%d:%d-%d:%d\\\"\",\n               node->start_line, node->start_column, node->end_line,\n               node->end_column);\n      cmark_strbuf_puts(xml, buffer);\n    }\n\n    if (node->extension && node->extension->xml_attr_func) {\n      const char* r = node->extension->xml_attr_func(node->extension, node);\n      if (r != NULL)\n        cmark_strbuf_puts(xml, r);\n    }\n\n    literal = false;\n\n    switch (node->type) {\n    case CMARK_NODE_DOCUMENT:\n      cmark_strbuf_puts(xml, \" xmlns=\\\"http://commonmark.org/xml/1.0\\\"\");\n      break;\n    case CMARK_NODE_TEXT:\n    case CMARK_NODE_CODE:\n    case CMARK_NODE_HTML_BLOCK:\n    case CMARK_NODE_HTML_INLINE:\n      cmark_strbuf_puts(xml, \" xml:space=\\\"preserve\\\">\");\n      escape_xml(xml, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(xml, \"</\");\n      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n      literal = true;\n      break;\n    case CMARK_NODE_LIST:\n      switch (cmark_node_get_list_type(node)) {\n      case CMARK_ORDERED_LIST:\n        cmark_strbuf_puts(xml, \" type=\\\"ordered\\\"\");\n        snprintf(buffer, BUFFER_SIZE, \" start=\\\"%d\\\"\",\n                 cmark_node_get_list_start(node));\n        cmark_strbuf_puts(xml, buffer);\n        delim = cmark_node_get_list_delim(node);\n        if (delim == CMARK_PAREN_DELIM) {\n          cmark_strbuf_puts(xml, \" delim=\\\"paren\\\"\");\n        } else if (delim == CMARK_PERIOD_DELIM) {\n          cmark_strbuf_puts(xml, \" delim=\\\"period\\\"\");\n        }\n        break;\n      case CMARK_BULLET_LIST:\n        cmark_strbuf_puts(xml, \" type=\\\"bullet\\\"\");\n        break;\n      default:\n        break;\n      }\n      snprintf(buffer, BUFFER_SIZE, \" tight=\\\"%s\\\"\",\n               (cmark_node_get_list_tight(node) ? \"true\" : \"false\"));\n      cmark_strbuf_puts(xml, buffer);\n      break;\n    case CMARK_NODE_HEADING:\n      snprintf(buffer, BUFFER_SIZE, \" level=\\\"%d\\\"\", node->as.heading.level);\n      cmark_strbuf_puts(xml, buffer);\n      break;\n    case CMARK_NODE_CODE_BLOCK:\n      if (node->as.code.info.len > 0) {\n        cmark_strbuf_puts(xml, \" info=\\\"\");\n        escape_xml(xml, node->as.code.info.data, node->as.code.info.len);\n        cmark_strbuf_putc(xml, '\"');\n      }\n      cmark_strbuf_puts(xml, \" xml:space=\\\"preserve\\\">\");\n      escape_xml(xml, node->as.code.literal.data, node->as.code.literal.len);\n      cmark_strbuf_puts(xml, \"</\");\n      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n      literal = true;\n      break;\n    case CMARK_NODE_CUSTOM_BLOCK:\n    case CMARK_NODE_CUSTOM_INLINE:\n      cmark_strbuf_puts(xml, \" on_enter=\\\"\");\n      escape_xml(xml, node->as.custom.on_enter.data,\n                 node->as.custom.on_enter.len);\n      cmark_strbuf_putc(xml, '\"');\n      cmark_strbuf_puts(xml, \" on_exit=\\\"\");\n      escape_xml(xml, node->as.custom.on_exit.data,\n                 node->as.custom.on_exit.len);\n      cmark_strbuf_putc(xml, '\"');\n      break;\n    case CMARK_NODE_LINK:\n    case CMARK_NODE_IMAGE:\n      cmark_strbuf_puts(xml, \" destination=\\\"\");\n      escape_xml(xml, node->as.link.url.data, node->as.link.url.len);\n      cmark_strbuf_putc(xml, '\"');\n      cmark_strbuf_puts(xml, \" title=\\\"\");\n      escape_xml(xml, node->as.link.title.data, node->as.link.title.len);\n      cmark_strbuf_putc(xml, '\"');\n      break;\n    default:\n      break;\n    }\n    if (node->first_child) {\n      state->indent += 2;\n    } else if (!literal) {\n      cmark_strbuf_puts(xml, \" /\");\n    }\n    cmark_strbuf_puts(xml, \">\\n\");\n\n  } else if (node->first_child) {\n    state->indent -= 2;\n    indent(state);\n    cmark_strbuf_puts(xml, \"</\");\n    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n    cmark_strbuf_puts(xml, \">\\n\");\n  }\n\n  return 1;\n}\n\nchar *cmark_render_xml(cmark_node *root, int options) {\n  return cmark_render_xml_with_mem(root, options, cmark_node_mem(root));\n}\n\nchar *cmark_render_xml_with_mem(cmark_node *root, int options, cmark_mem *mem) {\n  char *result;\n  cmark_strbuf xml = CMARK_BUF_INIT(mem);\n  cmark_event_type ev_type;\n  cmark_node *cur;\n  struct render_state state = {&xml, 0};\n\n  cmark_iter *iter = cmark_iter_new(root);\n\n  cmark_strbuf_puts(state.xml, \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n  cmark_strbuf_puts(state.xml,\n                    \"<!DOCTYPE document SYSTEM \\\"CommonMark.dtd\\\">\\n\");\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    S_render_node(cur, ev_type, &state, options);\n  }\n  result = (char *)cmark_strbuf_detach(&xml);\n\n  cmark_iter_free(iter);\n  return result;\n}\n", "---\ntitle: GitHub Flavored Markdown Spec\nversion: 0.29\ndate: '2019-04-06'\nlicense: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)'\n...\n\n# Introduction\n\n## What is GitHub Flavored Markdown?\n\nGitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown\nthat is currently supported for user content on GitHub.com and GitHub\nEnterprise.\n\nThis formal specification, based on the CommonMark Spec, defines the syntax and\nsemantics of this dialect.\n\nGFM is a strict superset of CommonMark. All the features which are supported in\nGitHub user content and that are not specified on the original CommonMark Spec\nare hence known as **extensions**, and highlighted as such.\n\nWhile GFM supports a wide range of inputs, it's worth noting that GitHub.com\nand GitHub Enterprise perform additional post-processing and sanitization after\nGFM is converted to HTML to ensure security and consistency of the website.\n\n## What is Markdown?\n\nMarkdown is a plain text format for writing structured documents,\nbased on conventions for indicating formatting in email\nand usenet posts.  It was developed by John Gruber (with\nhelp from Aaron Swartz) and released in 2004 in the form of a\n[syntax description](http://daringfireball.net/projects/markdown/syntax)\nand a Perl script (`Markdown.pl`) for converting Markdown to\nHTML.  In the next decade, dozens of implementations were\ndeveloped in many languages.  Some extended the original\nMarkdown syntax with conventions for footnotes, tables, and\nother document elements.  Some allowed Markdown documents to be\nrendered in formats other than HTML.  Websites like Reddit,\nStackOverflow, and GitHub had millions of people using Markdown.\nAnd Markdown started to be used beyond the web, to author books,\narticles, slide shows, letters, and lecture notes.\n\nWhat distinguishes Markdown from many other lightweight markup\nsyntaxes, which are often easier to write, is its readability.\nAs Gruber writes:\n\n> The overriding design goal for Markdown's formatting syntax is\n> to make it as readable as possible. The idea is that a\n> Markdown-formatted document should be publishable as-is, as\n> plain text, without looking like it's been marked up with tags\n> or formatting instructions.\n> (<http://daringfireball.net/projects/markdown/>)\n\nThe point can be illustrated by comparing a sample of\n[AsciiDoc](http://www.methods.co.nz/asciidoc/) with\nan equivalent sample of Markdown.  Here is a sample of\nAsciiDoc from the AsciiDoc manual:\n\n```\n1. List item one.\n+\nList item one continued with a second paragraph followed by an\nIndented block.\n+\n.................\n$ ls *.sh\n$ mv *.sh ~/tmp\n.................\n+\nList item continued with a third paragraph.\n\n2. List item two continued with an open block.\n+\n--\nThis paragraph is part of the preceding list item.\n\na. This list is nested and does not require explicit item\ncontinuation.\n+\nThis paragraph is part of the preceding list item.\n\nb. List item b.\n\nThis paragraph belongs to item two of the outer list.\n--\n```\n\nAnd here is the equivalent in Markdown:\n```\n1.  List item one.\n\n    List item one continued with a second paragraph followed by an\n    Indented block.\n\n        $ ls *.sh\n        $ mv *.sh ~/tmp\n\n    List item continued with a third paragraph.\n\n2.  List item two continued with an open block.\n\n    This paragraph is part of the preceding list item.\n\n    1. This list is nested and does not require explicit item continuation.\n\n       This paragraph is part of the preceding list item.\n\n    2. List item b.\n\n    This paragraph belongs to item two of the outer list.\n```\n\nThe AsciiDoc version is, arguably, easier to write. You don't need\nto worry about indentation.  But the Markdown version is much easier\nto read.  The nesting of list items is apparent to the eye in the\nsource, not just in the processed document.\n\n## Why is a spec needed?\n\nJohn Gruber's [canonical description of Markdown's\nsyntax](http://daringfireball.net/projects/markdown/syntax)\ndoes not specify the syntax unambiguously.  Here are some examples of\nquestions it does not answer:\n\n1.  How much indentation is needed for a sublist?  The spec says that\n    continuation paragraphs need to be indented four spaces, but is\n    not fully explicit about sublists.  It is natural to think that\n    they, too, must be indented four spaces, but `Markdown.pl` does\n    not require that.  This is hardly a \"corner case,\" and divergences\n    between implementations on this issue often lead to surprises for\n    users in real documents. (See [this comment by John\n    Gruber](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/1997).)\n\n2.  Is a blank line needed before a block quote or heading?\n    Most implementations do not require the blank line.  However,\n    this can lead to unexpected results in hard-wrapped text, and\n    also to ambiguities in parsing (note that some implementations\n    put the heading inside the blockquote, while others do not).\n    (John Gruber has also spoken [in favor of requiring the blank\n    lines](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/2146).)\n\n3.  Is a blank line needed before an indented code block?\n    (`Markdown.pl` requires it, but this is not mentioned in the\n    documentation, and some implementations do not require it.)\n\n    ``` markdown\n    paragraph\n        code?\n    ```\n\n4.  What is the exact rule for determining when list items get\n    wrapped in `<p>` tags?  Can a list be partially \"loose\" and partially\n    \"tight\"?  What should we do with a list like this?\n\n    ``` markdown\n    1. one\n\n    2. two\n    3. three\n    ```\n\n    Or this?\n\n    ``` markdown\n    1.  one\n        - a\n\n        - b\n    2.  two\n    ```\n\n    (There are some relevant comments by John Gruber\n    [here](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/2554).)\n\n5.  Can list markers be indented?  Can ordered list markers be right-aligned?\n\n    ``` markdown\n     8. item 1\n     9. item 2\n    10. item 2a\n    ```\n\n6.  Is this one list with a thematic break in its second item,\n    or two lists separated by a thematic break?\n\n    ``` markdown\n    * a\n    * * * * *\n    * b\n    ```\n\n7.  When list markers change from numbers to bullets, do we have\n    two lists or one?  (The Markdown syntax description suggests two,\n    but the perl scripts and many other implementations produce one.)\n\n    ``` markdown\n    1. fee\n    2. fie\n    -  foe\n    -  fum\n    ```\n\n8.  What are the precedence rules for the markers of inline structure?\n    For example, is the following a valid link, or does the code span\n    take precedence ?\n\n    ``` markdown\n    [a backtick (`)](/url) and [another backtick (`)](/url).\n    ```\n\n9.  What are the precedence rules for markers of emphasis and strong\n    emphasis?  For example, how should the following be parsed?\n\n    ``` markdown\n    *foo *bar* baz*\n    ```\n\n10. What are the precedence rules between block-level and inline-level\n    structure?  For example, how should the following be parsed?\n\n    ``` markdown\n    - `a long code span can contain a hyphen like this\n      - and it can screw things up`\n    ```\n\n11. Can list items include section headings?  (`Markdown.pl` does not\n    allow this, but does allow blockquotes to include headings.)\n\n    ``` markdown\n    - # Heading\n    ```\n\n12. Can list items be empty?\n\n    ``` markdown\n    * a\n    *\n    * b\n    ```\n\n13. Can link references be defined inside block quotes or list items?\n\n    ``` markdown\n    > Blockquote [foo].\n    >\n    > [foo]: /url\n    ```\n\n14. If there are multiple definitions for the same reference, which takes\n    precedence?\n\n    ``` markdown\n    [foo]: /url1\n    [foo]: /url2\n\n    [foo][]\n    ```\n\nIn the absence of a spec, early implementers consulted `Markdown.pl`\nto resolve these ambiguities.  But `Markdown.pl` was quite buggy, and\ngave manifestly bad results in many cases, so it was not a\nsatisfactory replacement for a spec.\n\nBecause there is no unambiguous spec, implementations have diverged\nconsiderably.  As a result, users are often surprised to find that\na document that renders one way on one system (say, a GitHub wiki)\nrenders differently on another (say, converting to docbook using\npandoc).  To make matters worse, because nothing in Markdown counts\nas a \"syntax error,\" the divergence often isn't discovered right away.\n\n## About this document\n\nThis document attempts to specify Markdown syntax unambiguously.\nIt contains many examples with side-by-side Markdown and\nHTML.  These are intended to double as conformance tests.  An\naccompanying script `spec_tests.py` can be used to run the tests\nagainst any Markdown program:\n\n    python test/spec_tests.py --spec spec.txt --program PROGRAM\n\nSince this document describes how Markdown is to be parsed into\nan abstract syntax tree, it would have made sense to use an abstract\nrepresentation of the syntax tree instead of HTML.  But HTML is capable\nof representing the structural distinctions we need to make, and the\nchoice of HTML for the tests makes it possible to run the tests against\nan implementation without writing an abstract syntax tree renderer.\n\nThis document is generated from a text file, `spec.txt`, written\nin Markdown with a small extension for the side-by-side tests.\nThe script `tools/makespec.py` can be used to convert `spec.txt` into\nHTML or CommonMark (which can then be converted into other formats).\n\nIn the examples, the `\u2192` character is used to represent tabs.\n\n# Preliminaries\n\n## Characters and lines\n\nAny sequence of [characters] is a valid CommonMark\ndocument.\n\nA [character](@) is a Unicode code point.  Although some\ncode points (for example, combining accents) do not correspond to\ncharacters in an intuitive sense, all code points count as characters\nfor purposes of this spec.\n\nThis spec does not specify an encoding; it thinks of lines as composed\nof [characters] rather than bytes.  A conforming parser may be limited\nto a certain encoding.\n\nA [line](@) is a sequence of zero or more [characters]\nother than newline (`U+000A`) or carriage return (`U+000D`),\nfollowed by a [line ending] or by the end of file.\n\nA [line ending](@) is a newline (`U+000A`), a carriage return\n(`U+000D`) not followed by a newline, or a carriage return and a\nfollowing newline.\n\nA line containing no characters, or a line containing only spaces\n(`U+0020`) or tabs (`U+0009`), is called a [blank line](@).\n\nThe following definitions of character classes will be used in this spec:\n\nA [whitespace character](@) is a space\n(`U+0020`), tab (`U+0009`), newline (`U+000A`), line tabulation (`U+000B`),\nform feed (`U+000C`), or carriage return (`U+000D`).\n\n[Whitespace](@) is a sequence of one or more [whitespace\ncharacters].\n\nA [Unicode whitespace character](@) is\nany code point in the Unicode `Zs` general category, or a tab (`U+0009`),\ncarriage return (`U+000D`), newline (`U+000A`), or form feed\n(`U+000C`).\n\n[Unicode whitespace](@) is a sequence of one\nor more [Unicode whitespace characters].\n\nA [space](@) is `U+0020`.\n\nA [non-whitespace character](@) is any character\nthat is not a [whitespace character].\n\nAn [ASCII punctuation character](@)\nis `!`, `\"`, `#`, `$`, `%`, `&`, `'`, `(`, `)`,\n`*`, `+`, `,`, `-`, `.`, `/` (U+0021\u20132F), \n`:`, `;`, `<`, `=`, `>`, `?`, `@` (U+003A\u20130040),\n`[`, `\\`, `]`, `^`, `_`, `` ` `` (U+005B\u20130060), \n`{`, `|`, `}`, or `~` (U+007B\u2013007E).\n\nA [punctuation character](@) is an [ASCII\npunctuation character] or anything in\nthe general Unicode categories  `Pc`, `Pd`, `Pe`, `Pf`, `Pi`, `Po`, or `Ps`.\n\n## Tabs\n\nTabs in lines are not expanded to [spaces].  However,\nin contexts where whitespace helps to define block structure,\ntabs behave as if they were replaced by spaces with a tab stop\nof 4 characters.\n\nThus, for example, a tab can be used instead of four spaces\nin an indented code block.  (Note, however, that internal\ntabs are passed through as literal tabs, not expanded to\nspaces.)\n\n```````````````````````````````` example\n\u2192foo\u2192baz\u2192\u2192bim\n.\n<pre><code>foo\u2192baz\u2192\u2192bim\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n  \u2192foo\u2192baz\u2192\u2192bim\n.\n<pre><code>foo\u2192baz\u2192\u2192bim\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n    a\u2192a\n    \u1f50\u2192a\n.\n<pre><code>a\u2192a\n\u1f50\u2192a\n</code></pre>\n````````````````````````````````\n\nIn the following example, a continuation paragraph of a list\nitem is indented with a tab; this has exactly the same effect\nas indentation with four spaces would:\n\n```````````````````````````````` example\n  - foo\n\n\u2192bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n- foo\n\n\u2192\u2192bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>  bar\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nNormally the `>` that begins a block quote may be followed\noptionally by a space, which is not considered part of the\ncontent.  In the following case `>` is followed by a tab,\nwhich is treated as if it were expanded into three spaces.\nSince one of these spaces is considered part of the\ndelimiter, `foo` is considered to be indented six spaces\ninside the block quote context, so we get an indented\ncode block starting with two spaces.\n\n```````````````````````````````` example\n>\u2192\u2192foo\n.\n<blockquote>\n<pre><code>  foo\n</code></pre>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example\n-\u2192\u2192foo\n.\n<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    foo\n\u2192bar\n.\n<pre><code>foo\nbar\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n - foo\n   - bar\n\u2192 - baz\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n#\u2192Foo\n.\n<h1>Foo</h1>\n````````````````````````````````\n\n```````````````````````````````` example\n*\u2192*\u2192*\u2192\n.\n<hr />\n````````````````````````````````\n\n\n## Insecure characters\n\nFor security reasons, the Unicode character `U+0000` must be replaced\nwith the REPLACEMENT CHARACTER (`U+FFFD`).\n\n# Blocks and inlines\n\nWe can think of a document as a sequence of\n[blocks](@)---structural elements like paragraphs, block\nquotations, lists, headings, rules, and code blocks.  Some blocks (like\nblock quotes and list items) contain other blocks; others (like\nheadings and paragraphs) contain [inline](@) content---text,\nlinks, emphasized text, images, code spans, and so on.\n\n## Precedence\n\nIndicators of block structure always take precedence over indicators\nof inline structure.  So, for example, the following is a list with\ntwo items, not a list with one item containing a code span:\n\n```````````````````````````````` example\n- `one\n- two`\n.\n<ul>\n<li>`one</li>\n<li>two`</li>\n</ul>\n````````````````````````````````\n\n\nThis means that parsing can proceed in two steps:  first, the block\nstructure of the document can be discerned; second, text lines inside\nparagraphs, headings, and other block constructs can be parsed for inline\nstructure.  The second step requires information about link reference\ndefinitions that will be available only at the end of the first\nstep.  Note that the first step requires processing lines in sequence,\nbut the second can be parallelized, since the inline parsing of\none block element does not affect the inline parsing of any other.\n\n## Container blocks and leaf blocks\n\nWe can divide blocks into two types:\n[container blocks](@),\nwhich can contain other blocks, and [leaf blocks](@),\nwhich cannot.\n\n# Leaf blocks\n\nThis section describes the different kinds of leaf block that make up a\nMarkdown document.\n\n## Thematic breaks\n\nA line consisting of 0-3 spaces of indentation, followed by a sequence\nof three or more matching `-`, `_`, or `*` characters, each followed\noptionally by any number of spaces or tabs, forms a\n[thematic break](@).\n\n```````````````````````````````` example\n***\n---\n___\n.\n<hr />\n<hr />\n<hr />\n````````````````````````````````\n\n\nWrong characters:\n\n```````````````````````````````` example\n+++\n.\n<p>+++</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n===\n.\n<p>===</p>\n````````````````````````````````\n\n\nNot enough characters:\n\n```````````````````````````````` example\n--\n**\n__\n.\n<p>--\n**\n__</p>\n````````````````````````````````\n\n\nOne to three spaces indent are allowed:\n\n```````````````````````````````` example\n ***\n  ***\n   ***\n.\n<hr />\n<hr />\n<hr />\n````````````````````````````````\n\n\nFour spaces is too many:\n\n```````````````````````````````` example\n    ***\n.\n<pre><code>***\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo\n    ***\n.\n<p>Foo\n***</p>\n````````````````````````````````\n\n\nMore than three characters may be used:\n\n```````````````````````````````` example\n_____________________________________\n.\n<hr />\n````````````````````````````````\n\n\nSpaces are allowed between the characters:\n\n```````````````````````````````` example\n - - -\n.\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n **  * ** * ** * **\n.\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n-     -      -      -\n.\n<hr />\n````````````````````````````````\n\n\nSpaces are allowed at the end:\n\n```````````````````````````````` example\n- - - -    \n.\n<hr />\n````````````````````````````````\n\n\nHowever, no other characters may occur in the line:\n\n```````````````````````````````` example\n_ _ _ _ a\n\na------\n\n---a---\n.\n<p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>\n````````````````````````````````\n\n\nIt is required that all of the [non-whitespace characters] be the same.\nSo, this is not a thematic break:\n\n```````````````````````````````` example\n *-*\n.\n<p><em>-</em></p>\n````````````````````````````````\n\n\nThematic breaks do not need blank lines before or after:\n\n```````````````````````````````` example\n- foo\n***\n- bar\n.\n<ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nThematic breaks can interrupt a paragraph:\n\n```````````````````````````````` example\nFoo\n***\nbar\n.\n<p>Foo</p>\n<hr />\n<p>bar</p>\n````````````````````````````````\n\n\nIf a line of dashes that meets the above conditions for being a\nthematic break could also be interpreted as the underline of a [setext\nheading], the interpretation as a\n[setext heading] takes precedence. Thus, for example,\nthis is a setext heading, not a paragraph followed by a thematic break:\n\n```````````````````````````````` example\nFoo\n---\nbar\n.\n<h2>Foo</h2>\n<p>bar</p>\n````````````````````````````````\n\n\nWhen both a thematic break and a list item are possible\ninterpretations of a line, the thematic break takes precedence:\n\n```````````````````````````````` example\n* Foo\n* * *\n* Bar\n.\n<ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>\n````````````````````````````````\n\n\nIf you want a thematic break in a list item, use a different bullet:\n\n```````````````````````````````` example\n- Foo\n- * * *\n.\n<ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>\n````````````````````````````````\n\n\n## ATX headings\n\nAn [ATX heading](@)\nconsists of a string of characters, parsed as inline content, between an\nopening sequence of 1--6 unescaped `#` characters and an optional\nclosing sequence of any number of unescaped `#` characters.\nThe opening sequence of `#` characters must be followed by a\n[space] or by the end of line. The optional closing sequence of `#`s must be\npreceded by a [space] and may be followed by spaces only.  The opening\n`#` character may be indented 0-3 spaces.  The raw contents of the\nheading are stripped of leading and trailing spaces before being parsed\nas inline content.  The heading level is equal to the number of `#`\ncharacters in the opening sequence.\n\nSimple headings:\n\n```````````````````````````````` example\n# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n.\n<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>\n````````````````````````````````\n\n\nMore than six `#` characters is not a heading:\n\n```````````````````````````````` example\n####### foo\n.\n<p>####### foo</p>\n````````````````````````````````\n\n\nAt least one space is required between the `#` characters and the\nheading's contents, unless the heading is empty.  Note that many\nimplementations currently do not require the space.  However, the\nspace was required by the\n[original ATX implementation](http://www.aaronsw.com/2002/atx/atx.py),\nand it helps prevent things like the following from being parsed as\nheadings:\n\n```````````````````````````````` example\n#5 bolt\n\n#hashtag\n.\n<p>#5 bolt</p>\n<p>#hashtag</p>\n````````````````````````````````\n\n\nThis is not a heading, because the first `#` is escaped:\n\n```````````````````````````````` example\n\\## foo\n.\n<p>## foo</p>\n````````````````````````````````\n\n\nContents are parsed as inlines:\n\n```````````````````````````````` example\n# foo *bar* \\*baz\\*\n.\n<h1>foo <em>bar</em> *baz*</h1>\n````````````````````````````````\n\n\nLeading and trailing [whitespace] is ignored in parsing inline content:\n\n```````````````````````````````` example\n#                  foo                     \n.\n<h1>foo</h1>\n````````````````````````````````\n\n\nOne to three spaces indentation are allowed:\n\n```````````````````````````````` example\n ### foo\n  ## foo\n   # foo\n.\n<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>\n````````````````````````````````\n\n\nFour spaces are too much:\n\n```````````````````````````````` example\n    # foo\n.\n<pre><code># foo\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo\n    # bar\n.\n<p>foo\n# bar</p>\n````````````````````````````````\n\n\nA closing sequence of `#` characters is optional:\n\n```````````````````````````````` example\n## foo ##\n  ###   bar    ###\n.\n<h2>foo</h2>\n<h3>bar</h3>\n````````````````````````````````\n\n\nIt need not be the same length as the opening sequence:\n\n```````````````````````````````` example\n# foo ##################################\n##### foo ##\n.\n<h1>foo</h1>\n<h5>foo</h5>\n````````````````````````````````\n\n\nSpaces are allowed after the closing sequence:\n\n```````````````````````````````` example\n### foo ###     \n.\n<h3>foo</h3>\n````````````````````````````````\n\n\nA sequence of `#` characters with anything but [spaces] following it\nis not a closing sequence, but counts as part of the contents of the\nheading:\n\n```````````````````````````````` example\n### foo ### b\n.\n<h3>foo ### b</h3>\n````````````````````````````````\n\n\nThe closing sequence must be preceded by a space:\n\n```````````````````````````````` example\n# foo#\n.\n<h1>foo#</h1>\n````````````````````````````````\n\n\nBackslash-escaped `#` characters do not count as part\nof the closing sequence:\n\n```````````````````````````````` example\n### foo \\###\n## foo #\\##\n# foo \\#\n.\n<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>\n````````````````````````````````\n\n\nATX headings need not be separated from surrounding content by blank\nlines, and they can interrupt paragraphs:\n\n```````````````````````````````` example\n****\n## foo\n****\n.\n<hr />\n<h2>foo</h2>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo bar\n# baz\nBar foo\n.\n<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>\n````````````````````````````````\n\n\nATX headings can be empty:\n\n```````````````````````````````` example\n## \n#\n### ###\n.\n<h2></h2>\n<h1></h1>\n<h3></h3>\n````````````````````````````````\n\n\n## Setext headings\n\nA [setext heading](@) consists of one or more\nlines of text, each containing at least one [non-whitespace\ncharacter], with no more than 3 spaces indentation, followed by\na [setext heading underline].  The lines of text must be such\nthat, were they not followed by the setext heading underline,\nthey would be interpreted as a paragraph:  they cannot be\ninterpretable as a [code fence], [ATX heading][ATX headings],\n[block quote][block quotes], [thematic break][thematic breaks],\n[list item][list items], or [HTML block][HTML blocks].\n\nA [setext heading underline](@) is a sequence of\n`=` characters or a sequence of `-` characters, with no more than 3\nspaces of indentation and any number of trailing spaces or tabs.\n\nThe heading is a level 1 heading if `=` characters are used in\nthe [setext heading underline], and a level 2 heading if `-`\ncharacters are used.  The contents of the heading are the result\nof parsing the preceding lines of text as CommonMark inline\ncontent.\n\nIn general, a setext heading need not be preceded or followed by a\nblank line.  However, it cannot interrupt a paragraph, so when a\nsetext heading comes after a paragraph, a blank line is needed between\nthem.\n\nSimple examples:\n\n```````````````````````````````` example\nFoo *bar*\n=========\n\nFoo *bar*\n---------\n.\n<h1>Foo <em>bar</em></h1>\n<h2>Foo <em>bar</em></h2>\n````````````````````````````````\n\n\nThe content of the header may span more than one line:\n\n```````````````````````````````` example\nFoo *bar\nbaz*\n====\n.\n<h1>Foo <em>bar\nbaz</em></h1>\n````````````````````````````````\n\nThe contents are the result of parsing the headings's raw\ncontent as inlines.  The heading's raw content is formed by\nconcatenating the lines and removing initial and final\n[whitespace].\n\n```````````````````````````````` example\n  Foo *bar\nbaz*\u2192\n====\n.\n<h1>Foo <em>bar\nbaz</em></h1>\n````````````````````````````````\n\n\nThe underlining can be any length:\n\n```````````````````````````````` example\nFoo\n-------------------------\n\nFoo\n=\n.\n<h2>Foo</h2>\n<h1>Foo</h1>\n````````````````````````````````\n\n\nThe heading content can be indented up to three spaces, and need\nnot line up with the underlining:\n\n```````````````````````````````` example\n   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n.\n<h2>Foo</h2>\n<h2>Foo</h2>\n<h1>Foo</h1>\n````````````````````````````````\n\n\nFour spaces indent is too much:\n\n```````````````````````````````` example\n    Foo\n    ---\n\n    Foo\n---\n.\n<pre><code>Foo\n---\n\nFoo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\nThe setext heading underline can be indented up to three spaces, and\nmay have trailing spaces:\n\n```````````````````````````````` example\nFoo\n   ----      \n.\n<h2>Foo</h2>\n````````````````````````````````\n\n\nFour spaces is too much:\n\n```````````````````````````````` example\nFoo\n    ---\n.\n<p>Foo\n---</p>\n````````````````````````````````\n\n\nThe setext heading underline cannot contain internal spaces:\n\n```````````````````````````````` example\nFoo\n= =\n\nFoo\n--- -\n.\n<p>Foo\n= =</p>\n<p>Foo</p>\n<hr />\n````````````````````````````````\n\n\nTrailing spaces in the content line do not cause a line break:\n\n```````````````````````````````` example\nFoo  \n-----\n.\n<h2>Foo</h2>\n````````````````````````````````\n\n\nNor does a backslash at the end:\n\n```````````````````````````````` example\nFoo\\\n----\n.\n<h2>Foo\\</h2>\n````````````````````````````````\n\n\nSince indicators of block structure take precedence over\nindicators of inline structure, the following are setext headings:\n\n```````````````````````````````` example\n`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n.\n<h2>`Foo</h2>\n<p>`</p>\n<h2>&lt;a title=&quot;a lot</h2>\n<p>of dashes&quot;/&gt;</p>\n````````````````````````````````\n\n\nThe setext heading underline cannot be a [lazy continuation\nline] in a list item or block quote:\n\n```````````````````````````````` example\n> Foo\n---\n.\n<blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n> foo\nbar\n===\n.\n<blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- Foo\n---\n.\n<ul>\n<li>Foo</li>\n</ul>\n<hr />\n````````````````````````````````\n\n\nA blank line is needed between a paragraph and a following\nsetext heading, since otherwise the paragraph becomes part\nof the heading's content:\n\n```````````````````````````````` example\nFoo\nBar\n---\n.\n<h2>Foo\nBar</h2>\n````````````````````````````````\n\n\nBut in general a blank line is not required before or after\nsetext headings:\n\n```````````````````````````````` example\n---\nFoo\n---\nBar\n---\nBaz\n.\n<hr />\n<h2>Foo</h2>\n<h2>Bar</h2>\n<p>Baz</p>\n````````````````````````````````\n\n\nSetext headings cannot be empty:\n\n```````````````````````````````` example\n\n====\n.\n<p>====</p>\n````````````````````````````````\n\n\nSetext heading text lines must not be interpretable as block\nconstructs other than paragraphs.  So, the line of dashes\nin these examples gets interpreted as a thematic break:\n\n```````````````````````````````` example\n---\n---\n.\n<hr />\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n- foo\n-----\n.\n<ul>\n<li>foo</li>\n</ul>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n    foo\n---\n.\n<pre><code>foo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n> foo\n-----\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\nIf you want a heading with `> foo` as its literal text, you can\nuse backslash escapes:\n\n```````````````````````````````` example\n\\> foo\n------\n.\n<h2>&gt; foo</h2>\n````````````````````````````````\n\n\n**Compatibility note:**  Most existing Markdown implementations\ndo not allow the text of setext headings to span multiple lines.\nBut there is no consensus about how to interpret\n\n``` markdown\nFoo\nbar\n---\nbaz\n```\n\nOne can find four different interpretations:\n\n1. paragraph \"Foo\", heading \"bar\", paragraph \"baz\"\n2. paragraph \"Foo bar\", thematic break, paragraph \"baz\"\n3. paragraph \"Foo bar --- baz\"\n4. heading \"Foo bar\", paragraph \"baz\"\n\nWe find interpretation 4 most natural, and interpretation 4\nincreases the expressive power of CommonMark, by allowing\nmultiline headings.  Authors who want interpretation 1 can\nput a blank line after the first paragraph:\n\n```````````````````````````````` example\nFoo\n\nbar\n---\nbaz\n.\n<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n````````````````````````````````\n\n\nAuthors who want interpretation 2 can put blank lines around\nthe thematic break,\n\n```````````````````````````````` example\nFoo\nbar\n\n---\n\nbaz\n.\n<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n````````````````````````````````\n\n\nor use a thematic break that cannot count as a [setext heading\nunderline], such as\n\n```````````````````````````````` example\nFoo\nbar\n* * *\nbaz\n.\n<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n````````````````````````````````\n\n\nAuthors who want interpretation 3 can use backslash escapes:\n\n```````````````````````````````` example\nFoo\nbar\n\\---\nbaz\n.\n<p>Foo\nbar\n---\nbaz</p>\n````````````````````````````````\n\n\n## Indented code blocks\n\nAn [indented code block](@) is composed of one or more\n[indented chunks] separated by blank lines.\nAn [indented chunk](@) is a sequence of non-blank lines,\neach indented four or more spaces. The contents of the code block are\nthe literal contents of the lines, including trailing\n[line endings], minus four spaces of indentation.\nAn indented code block has no [info string].\n\nAn indented code block cannot interrupt a paragraph, so there must be\na blank line between a paragraph and a following indented code block.\n(A blank line is not needed, however, between a code block and a following\nparagraph.)\n\n```````````````````````````````` example\n    a simple\n      indented code block\n.\n<pre><code>a simple\n  indented code block\n</code></pre>\n````````````````````````````````\n\n\nIf there is any ambiguity between an interpretation of indentation\nas a code block and as indicating that material belongs to a [list\nitem][list items], the list item interpretation takes precedence:\n\n```````````````````````````````` example\n  - foo\n\n    bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1.  foo\n\n    - bar\n.\n<ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\n\nThe contents of a code block are literal text, and do not get parsed\nas Markdown:\n\n```````````````````````````````` example\n    <a/>\n    *hi*\n\n    - one\n.\n<pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>\n````````````````````````````````\n\n\nHere we have three chunks separated by blank lines:\n\n```````````````````````````````` example\n    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n.\n<pre><code>chunk1\n\nchunk2\n\n\n\nchunk3\n</code></pre>\n````````````````````````````````\n\n\nAny initial spaces beyond four will be included in the content, even\nin interior blank lines:\n\n```````````````````````````````` example\n    chunk1\n      \n      chunk2\n.\n<pre><code>chunk1\n  \n  chunk2\n</code></pre>\n````````````````````````````````\n\n\nAn indented code block cannot interrupt a paragraph.  (This\nallows hanging indents and the like.)\n\n```````````````````````````````` example\nFoo\n    bar\n\n.\n<p>Foo\nbar</p>\n````````````````````````````````\n\n\nHowever, any non-blank line with fewer than four leading spaces ends\nthe code block immediately.  So a paragraph may occur immediately\nafter indented code:\n\n```````````````````````````````` example\n    foo\nbar\n.\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n````````````````````````````````\n\n\nAnd indented code can occur immediately before and after other kinds of\nblocks:\n\n```````````````````````````````` example\n# Heading\n    foo\nHeading\n------\n    foo\n----\n.\n<h1>Heading</h1>\n<pre><code>foo\n</code></pre>\n<h2>Heading</h2>\n<pre><code>foo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\nThe first line can be indented more than four spaces:\n\n```````````````````````````````` example\n        foo\n    bar\n.\n<pre><code>    foo\nbar\n</code></pre>\n````````````````````````````````\n\n\nBlank lines preceding or following an indented code block\nare not included in it:\n\n```````````````````````````````` example\n\n    \n    foo\n    \n\n.\n<pre><code>foo\n</code></pre>\n````````````````````````````````\n\n\nTrailing spaces are included in the code block's content:\n\n```````````````````````````````` example\n    foo  \n.\n<pre><code>foo  \n</code></pre>\n````````````````````````````````\n\n\n\n## Fenced code blocks\n\nA [code fence](@) is a sequence\nof at least three consecutive backtick characters (`` ` ``) or\ntildes (`~`).  (Tildes and backticks cannot be mixed.)\nA [fenced code block](@)\nbegins with a code fence, indented no more than three spaces.\n\nThe line with the opening code fence may optionally contain some text\nfollowing the code fence; this is trimmed of leading and trailing\nwhitespace and called the [info string](@). If the [info string] comes\nafter a backtick fence, it may not contain any backtick\ncharacters.  (The reason for this restriction is that otherwise\nsome inline code would be incorrectly interpreted as the\nbeginning of a fenced code block.)\n\nThe content of the code block consists of all subsequent lines, until\na closing [code fence] of the same type as the code block\nbegan with (backticks or tildes), and with at least as many backticks\nor tildes as the opening code fence.  If the leading code fence is\nindented N spaces, then up to N spaces of indentation are removed from\neach line of the content (if present).  (If a content line is not\nindented, it is preserved unchanged.  If it is indented less than N\nspaces, all of the indentation is removed.)\n\nThe closing code fence may be indented up to three spaces, and may be\nfollowed only by spaces, which are ignored.  If the end of the\ncontaining block (or document) is reached and no closing code fence\nhas been found, the code block contains all of the lines after the\nopening code fence until the end of the containing block (or\ndocument).  (An alternative spec would require backtracking in the\nevent that a closing code fence is not found.  But this makes parsing\nmuch less efficient, and there seems to be no real downside to the\nbehavior described here.)\n\nA fenced code block may interrupt a paragraph, and does not require\na blank line either before or after.\n\nThe content of a code fence is treated as literal text, not parsed\nas inlines.  The first word of the [info string] is typically used to\nspecify the language of the code sample, and rendered in the `class`\nattribute of the `code` tag.  However, this spec does not mandate any\nparticular treatment of the [info string].\n\nHere is a simple example with backticks:\n\n```````````````````````````````` example\n```\n<\n >\n```\n.\n<pre><code>&lt;\n &gt;\n</code></pre>\n````````````````````````````````\n\n\nWith tildes:\n\n```````````````````````````````` example\n~~~\n<\n >\n~~~\n.\n<pre><code>&lt;\n &gt;\n</code></pre>\n````````````````````````````````\n\nFewer than three backticks is not enough:\n\n```````````````````````````````` example\n``\nfoo\n``\n.\n<p><code>foo</code></p>\n````````````````````````````````\n\nThe closing code fence must use the same character as the opening\nfence:\n\n```````````````````````````````` example\n```\naaa\n~~~\n```\n.\n<pre><code>aaa\n~~~\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~\naaa\n```\n~~~\n.\n<pre><code>aaa\n```\n</code></pre>\n````````````````````````````````\n\n\nThe closing code fence must be at least as long as the opening fence:\n\n```````````````````````````````` example\n````\naaa\n```\n``````\n.\n<pre><code>aaa\n```\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~\naaa\n~~~\n~~~~\n.\n<pre><code>aaa\n~~~\n</code></pre>\n````````````````````````````````\n\n\nUnclosed code blocks are closed by the end of the document\n(or the enclosing [block quote][block quotes] or [list item][list items]):\n\n```````````````````````````````` example\n```\n.\n<pre><code></code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`````\n\n```\naaa\n.\n<pre><code>\n```\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> ```\n> aaa\n\nbbb\n.\n<blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>\n````````````````````````````````\n\n\nA code block can have all empty lines as its content:\n\n```````````````````````````````` example\n```\n\n  \n```\n.\n<pre><code>\n  \n</code></pre>\n````````````````````````````````\n\n\nA code block can be empty:\n\n```````````````````````````````` example\n```\n```\n.\n<pre><code></code></pre>\n````````````````````````````````\n\n\nFences can be indented.  If the opening fence is indented,\ncontent lines will have equivalent opening indentation removed,\nif present:\n\n```````````````````````````````` example\n ```\n aaa\naaa\n```\n.\n<pre><code>aaa\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n  ```\naaa\n  aaa\naaa\n  ```\n.\n<pre><code>aaa\naaa\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   ```\n   aaa\n    aaa\n  aaa\n   ```\n.\n<pre><code>aaa\n aaa\naaa\n</code></pre>\n````````````````````````````````\n\n\nFour spaces indentation produces an indented code block:\n\n```````````````````````````````` example\n    ```\n    aaa\n    ```\n.\n<pre><code>```\naaa\n```\n</code></pre>\n````````````````````````````````\n\n\nClosing fences may be indented by 0-3 spaces, and their indentation\nneed not match that of the opening fence:\n\n```````````````````````````````` example\n```\naaa\n  ```\n.\n<pre><code>aaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   ```\naaa\n  ```\n.\n<pre><code>aaa\n</code></pre>\n````````````````````````````````\n\n\nThis is not a closing fence, because it is indented 4 spaces:\n\n```````````````````````````````` example\n```\naaa\n    ```\n.\n<pre><code>aaa\n    ```\n</code></pre>\n````````````````````````````````\n\n\n\nCode fences (opening and closing) cannot contain internal spaces:\n\n```````````````````````````````` example\n``` ```\naaa\n.\n<p><code> </code>\naaa</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~~~\naaa\n~~~ ~~\n.\n<pre><code>aaa\n~~~ ~~\n</code></pre>\n````````````````````````````````\n\n\nFenced code blocks can interrupt paragraphs, and can be followed\ndirectly by paragraphs, without a blank line between:\n\n```````````````````````````````` example\nfoo\n```\nbar\n```\nbaz\n.\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n````````````````````````````````\n\n\nOther blocks can also occur before and after fenced code blocks\nwithout an intervening blank line:\n\n```````````````````````````````` example\nfoo\n---\n~~~\nbar\n~~~\n# baz\n.\n<h2>foo</h2>\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>\n````````````````````````````````\n\n\nAn [info string] can be provided after the opening code fence.\nAlthough this spec doesn't mandate any particular treatment of\nthe info string, the first word is typically used to specify\nthe language of the code block. In HTML output, the language is\nnormally indicated by adding a class to the `code` element consisting\nof `language-` followed by the language name.\n\n```````````````````````````````` example\n```ruby\ndef foo(x)\n  return 3\nend\n```\n.\n<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n.\n<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n````;\n````\n.\n<pre><code class=\"language-;\"></code></pre>\n````````````````````````````````\n\n\n[Info strings] for backtick code blocks cannot contain backticks:\n\n```````````````````````````````` example\n``` aa ```\nfoo\n.\n<p><code>aa</code>\nfoo</p>\n````````````````````````````````\n\n\n[Info strings] for tilde code blocks can contain backticks and tildes:\n\n```````````````````````````````` example\n~~~ aa ``` ~~~\nfoo\n~~~\n.\n<pre><code class=\"language-aa\">foo\n</code></pre>\n````````````````````````````````\n\n\nClosing code fences cannot have [info strings]:\n\n```````````````````````````````` example\n```\n``` aaa\n```\n.\n<pre><code>``` aaa\n</code></pre>\n````````````````````````````````\n\n\n\n## HTML blocks\n\nAn [HTML block](@) is a group of lines that is treated\nas raw HTML (and will not be escaped in HTML output).\n\nThere are seven kinds of [HTML block], which can be defined by their\nstart and end conditions.  The block begins with a line that meets a\n[start condition](@) (after up to three spaces optional indentation).\nIt ends with the first subsequent line that meets a matching [end\ncondition](@), or the last line of the document, or the last line of\nthe [container block](#container-blocks) containing the current HTML\nblock, if no line is encountered that meets the [end condition].  If\nthe first line meets both the [start condition] and the [end\ncondition], the block will contain just that line.\n\n1.  **Start condition:**  line begins with the string `<script`,\n`<pre`, or `<style` (case-insensitive), followed by whitespace,\nthe string `>`, or the end of the line.\\\n**End condition:**  line contains an end tag\n`</script>`, `</pre>`, or `</style>` (case-insensitive; it\nneed not match the start tag).\n\n2.  **Start condition:** line begins with the string `<!--`.\\\n**End condition:**  line contains the string `-->`.\n\n3.  **Start condition:** line begins with the string `<?`.\\\n**End condition:** line contains the string `?>`.\n\n4.  **Start condition:** line begins with the string `<!`\nfollowed by an uppercase ASCII letter.\\\n**End condition:** line contains the character `>`.\n\n5.  **Start condition:**  line begins with the string\n`<![CDATA[`.\\\n**End condition:** line contains the string `]]>`.\n\n6.  **Start condition:** line begins with the string `<` or `</`\nfollowed by one of the strings (case-insensitive) `address`,\n`article`, `aside`, `base`, `basefont`, `blockquote`, `body`,\n`caption`, `center`, `col`, `colgroup`, `dd`, `details`, `dialog`,\n`dir`, `div`, `dl`, `dt`, `fieldset`, `figcaption`, `figure`,\n`footer`, `form`, `frame`, `frameset`,\n`h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `head`, `header`, `hr`,\n`html`, `iframe`, `legend`, `li`, `link`, `main`, `menu`, `menuitem`,\n`nav`, `noframes`, `ol`, `optgroup`, `option`, `p`, `param`,\n`section`, `summary`, `table`, `tbody`, `td`,\n`tfoot`, `th`, `thead`, `title`, `tr`, `track`, `ul`, followed\nby [whitespace], the end of the line, the string `>`, or\nthe string `/>`.\\\n**End condition:** line is followed by a [blank line].\n\n7.  **Start condition:**  line begins with a complete [open tag]\n(with any [tag name] other than `script`,\n`style`, or `pre`) or a complete [closing tag],\nfollowed only by [whitespace] or the end of the line.\\\n**End condition:** line is followed by a [blank line].\n\nHTML blocks continue until they are closed by their appropriate\n[end condition], or the last line of the document or other [container\nblock](#container-blocks).  This means any HTML **within an HTML\nblock** that might otherwise be recognised as a start condition will\nbe ignored by the parser and passed through as-is, without changing\nthe parser's state.\n\nFor instance, `<pre>` within a HTML block started by `<table>` will not affect\nthe parser state; as the HTML block was started in by start condition 6, it\nwill end at any blank line. This can be surprising:\n\n```````````````````````````````` example\n<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n.\n<table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>\n````````````````````````````````\n\nIn this case, the HTML block is terminated by the newline \u2014 the `**Hello**`\ntext remains verbatim \u2014 and regular parsing resumes, with a paragraph,\nemphasised `world` and inline and block HTML following.\n\nAll types of [HTML blocks] except type 7 may interrupt\na paragraph.  Blocks of type 7 may not interrupt a paragraph.\n(This restriction is intended to prevent unwanted interpretation\nof long tags inside a wrapped paragraph as starting HTML blocks.)\n\nSome simple examples follow.  Here are some basic HTML blocks\nof type 6:\n\n```````````````````````````````` example\n<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n.\n<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n <div>\n  *hello*\n         <foo><a>\n.\n <div>\n  *hello*\n         <foo><a>\n````````````````````````````````\n\n\nA block can also start with a closing tag:\n\n```````````````````````````````` example\n</div>\n*foo*\n.\n</div>\n*foo*\n````````````````````````````````\n\n\nHere we have two HTML blocks with a Markdown paragraph between them:\n\n```````````````````````````````` example\n<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n.\n<DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>\n````````````````````````````````\n\n\nThe tag on the first line can be partial, as long\nas it is split where there would be whitespace:\n\n```````````````````````````````` example\n<div id=\"foo\"\n  class=\"bar\">\n</div>\n.\n<div id=\"foo\"\n  class=\"bar\">\n</div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n.\n<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n````````````````````````````````\n\n\nAn open tag need not be closed:\n```````````````````````````````` example\n<div>\n*foo*\n\n*bar*\n.\n<div>\n*foo*\n<p><em>bar</em></p>\n````````````````````````````````\n\n\n\nA partial tag need not even be completed (garbage\nin, garbage out):\n\n```````````````````````````````` example\n<div id=\"foo\"\n*hi*\n.\n<div id=\"foo\"\n*hi*\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div class\nfoo\n.\n<div class\nfoo\n````````````````````````````````\n\n\nThe initial tag doesn't even need to be a valid\ntag, as long as it starts like one:\n\n```````````````````````````````` example\n<div *???-&&&-<---\n*foo*\n.\n<div *???-&&&-<---\n*foo*\n````````````````````````````````\n\n\nIn type 6 blocks, the initial tag need not be on a line by\nitself:\n\n```````````````````````````````` example\n<div><a href=\"bar\">*foo*</a></div>\n.\n<div><a href=\"bar\">*foo*</a></div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<table><tr><td>\nfoo\n</td></tr></table>\n.\n<table><tr><td>\nfoo\n</td></tr></table>\n````````````````````````````````\n\n\nEverything until the next blank line or end of document\ngets included in the HTML block.  So, in the following\nexample, what looks like a Markdown code block\nis actually part of the HTML block, which continues until a blank\nline or the end of the document is reached:\n\n```````````````````````````````` example\n<div></div>\n``` c\nint x = 33;\n```\n.\n<div></div>\n``` c\nint x = 33;\n```\n````````````````````````````````\n\n\nTo start an [HTML block] with a tag that is *not* in the\nlist of block-level tags in (6), you must put the tag by\nitself on the first line (and it must be complete):\n\n```````````````````````````````` example\n<a href=\"foo\">\n*bar*\n</a>\n.\n<a href=\"foo\">\n*bar*\n</a>\n````````````````````````````````\n\n\nIn type 7 blocks, the [tag name] can be anything:\n\n```````````````````````````````` example\n<Warning>\n*bar*\n</Warning>\n.\n<Warning>\n*bar*\n</Warning>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<i class=\"foo\">\n*bar*\n</i>\n.\n<i class=\"foo\">\n*bar*\n</i>\n````````````````````````````````\n\n\n```````````````````````````````` example\n</ins>\n*bar*\n.\n</ins>\n*bar*\n````````````````````````````````\n\n\nThese rules are designed to allow us to work with tags that\ncan function as either block-level or inline-level tags.\nThe `<del>` tag is a nice example.  We can surround content with\n`<del>` tags in three different ways.  In this case, we get a raw\nHTML block, because the `<del>` tag is on a line by itself:\n\n```````````````````````````````` example\n<del>\n*foo*\n</del>\n.\n<del>\n*foo*\n</del>\n````````````````````````````````\n\n\nIn this case, we get a raw HTML block that just includes\nthe `<del>` tag (because it ends with the following blank\nline).  So the contents get interpreted as CommonMark:\n\n```````````````````````````````` example\n<del>\n\n*foo*\n\n</del>\n.\n<del>\n<p><em>foo</em></p>\n</del>\n````````````````````````````````\n\n\nFinally, in this case, the `<del>` tags are interpreted\nas [raw HTML] *inside* the CommonMark paragraph.  (Because\nthe tag is not on a line by itself, we get inline HTML\nrather than an [HTML block].)\n\n```````````````````````````````` example\n<del>*foo*</del>\n.\n<p><del><em>foo</em></del></p>\n````````````````````````````````\n\n\nHTML tags designed to contain literal content\n(`script`, `style`, `pre`), comments, processing instructions,\nand declarations are treated somewhat differently.\nInstead of ending at the first blank line, these blocks\nend at the first line containing a corresponding end tag.\nAs a result, these blocks can contain blank lines:\n\nA pre tag (type 1):\n\n```````````````````````````````` example\n<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n.\n<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n````````````````````````````````\n\n\nA script tag (type 1):\n\n```````````````````````````````` example\n<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n.\n<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n````````````````````````````````\n\n\nA style tag (type 1):\n\n```````````````````````````````` example\n<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n.\n<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n````````````````````````````````\n\n\nIf there is no matching end tag, the block will end at the\nend of the document (or the enclosing [block quote][block quotes]\nor [list item][list items]):\n\n```````````````````````````````` example\n<style\n  type=\"text/css\">\n\nfoo\n.\n<style\n  type=\"text/css\">\n\nfoo\n````````````````````````````````\n\n\n```````````````````````````````` example\n> <div>\n> foo\n\nbar\n.\n<blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- <div>\n- foo\n.\n<ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n\nThe end tag can occur on the same line as the start tag:\n\n```````````````````````````````` example\n<style>p{color:red;}</style>\n*foo*\n.\n<style>p{color:red;}</style>\n<p><em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<!-- foo -->*bar*\n*baz*\n.\n<!-- foo -->*bar*\n<p><em>baz</em></p>\n````````````````````````````````\n\n\nNote that anything on the last line after the\nend tag will be included in the [HTML block]:\n\n```````````````````````````````` example\n<script>\nfoo\n</script>1. *bar*\n.\n<script>\nfoo\n</script>1. *bar*\n````````````````````````````````\n\n\nA comment (type 2):\n\n```````````````````````````````` example\n<!-- Foo\n\nbar\n   baz -->\nokay\n.\n<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n````````````````````````````````\n\n\n\nA processing instruction (type 3):\n\n```````````````````````````````` example\n<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n````````````````````````````````\n\n\nA declaration (type 4):\n\n```````````````````````````````` example\n<!DOCTYPE html>\n.\n<!DOCTYPE html>\n````````````````````````````````\n\n\nCDATA (type 5):\n\n```````````````````````````````` example\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n.\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n````````````````````````````````\n\n\nThe opening tag can be indented 1-3 spaces, but not 4:\n\n```````````````````````````````` example\n  <!-- foo -->\n\n    <!-- foo -->\n.\n  <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n  <div>\n\n    <div>\n.\n  <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n````````````````````````````````\n\n\nAn HTML block of types 1--6 can interrupt a paragraph, and need not be\npreceded by a blank line.\n\n```````````````````````````````` example\nFoo\n<div>\nbar\n</div>\n.\n<p>Foo</p>\n<div>\nbar\n</div>\n````````````````````````````````\n\n\nHowever, a following blank line is needed, except at the end of\na document, and except for blocks of types 1--5, [above][HTML\nblock]:\n\n```````````````````````````````` example\n<div>\nbar\n</div>\n*foo*\n.\n<div>\nbar\n</div>\n*foo*\n````````````````````````````````\n\n\nHTML blocks of type 7 cannot interrupt a paragraph:\n\n```````````````````````````````` example\nFoo\n<a href=\"bar\">\nbaz\n.\n<p>Foo\n<a href=\"bar\">\nbaz</p>\n````````````````````````````````\n\n\nThis rule differs from John Gruber's original Markdown syntax\nspecification, which says:\n\n> The only restrictions are that block-level HTML elements \u2014\n> e.g. `<div>`, `<table>`, `<pre>`, `<p>`, etc. \u2014 must be separated from\n> surrounding content by blank lines, and the start and end tags of the\n> block should not be indented with tabs or spaces.\n\nIn some ways Gruber's rule is more restrictive than the one given\nhere:\n\n- It requires that an HTML block be preceded by a blank line.\n- It does not allow the start tag to be indented.\n- It requires a matching end tag, which it also does not allow to\n  be indented.\n\nMost Markdown implementations (including some of Gruber's own) do not\nrespect all of these restrictions.\n\nThere is one respect, however, in which Gruber's rule is more liberal\nthan the one given here, since it allows blank lines to occur inside\nan HTML block.  There are two reasons for disallowing them here.\nFirst, it removes the need to parse balanced tags, which is\nexpensive and can require backtracking from the end of the document\nif no matching end tag is found. Second, it provides a very simple\nand flexible way of including Markdown content inside HTML tags:\nsimply separate the Markdown from the HTML using blank lines:\n\nCompare:\n\n```````````````````````````````` example\n<div>\n\n*Emphasized* text.\n\n</div>\n.\n<div>\n<p><em>Emphasized</em> text.</p>\n</div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div>\n*Emphasized* text.\n</div>\n.\n<div>\n*Emphasized* text.\n</div>\n````````````````````````````````\n\n\nSome Markdown implementations have adopted a convention of\ninterpreting content inside tags as text if the open tag has\nthe attribute `markdown=1`.  The rule given above seems a simpler and\nmore elegant way of achieving the same expressive power, which is also\nmuch simpler to parse.\n\nThe main potential drawback is that one can no longer paste HTML\nblocks into Markdown documents with 100% reliability.  However,\n*in most cases* this will work fine, because the blank lines in\nHTML are usually followed by HTML block tags.  For example:\n\n```````````````````````````````` example\n<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n.\n<table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n````````````````````````````````\n\n\nThere are problems, however, if the inner tags are indented\n*and* separated by spaces, as then they will be interpreted as\nan indented code block:\n\n```````````````````````````````` example\n<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n.\n<table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n````````````````````````````````\n\n\nFortunately, blank lines are usually not necessary and can be\ndeleted.  The exception is inside `<pre>` tags, but as described\n[above][HTML blocks], raw HTML blocks starting with `<pre>`\n*can* contain blank lines.\n\n## Link reference definitions\n\nA [link reference definition](@)\nconsists of a [link label], indented up to three spaces, followed\nby a colon (`:`), optional [whitespace] (including up to one\n[line ending]), a [link destination],\noptional [whitespace] (including up to one\n[line ending]), and an optional [link\ntitle], which if it is present must be separated\nfrom the [link destination] by [whitespace].\nNo further [non-whitespace characters] may occur on the line.\n\nA [link reference definition]\ndoes not correspond to a structural element of a document.  Instead, it\ndefines a label which can be used in [reference links]\nand reference-style [images] elsewhere in the document.  [Link\nreference definitions] can come either before or after the links that use\nthem.\n\n```````````````````````````````` example\n[foo]: /url \"title\"\n\n[foo]\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   [foo]: \n      /url  \n           'the title'  \n\n[foo]\n.\n<p><a href=\"/url\" title=\"the title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[Foo*bar\\]]:my_(url) 'title (with parens)'\n\n[Foo*bar\\]]\n.\n<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]\n.\n<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>\n````````````````````````````````\n\n\nThe title may extend over multiple lines:\n\n```````````````````````````````` example\n[foo]: /url '\ntitle\nline1\nline2\n'\n\n[foo]\n.\n<p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>\n````````````````````````````````\n\n\nHowever, it may not contain a [blank line]:\n\n```````````````````````````````` example\n[foo]: /url 'title\n\nwith blank line'\n\n[foo]\n.\n<p>[foo]: /url 'title</p>\n<p>with blank line'</p>\n<p>[foo]</p>\n````````````````````````````````\n\n\nThe title may be omitted:\n\n```````````````````````````````` example\n[foo]:\n/url\n\n[foo]\n.\n<p><a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nThe link destination may not be omitted:\n\n```````````````````````````````` example\n[foo]:\n\n[foo]\n.\n<p>[foo]:</p>\n<p>[foo]</p>\n````````````````````````````````\n\n However, an empty link destination may be specified using\n angle brackets:\n\n```````````````````````````````` example\n[foo]: <>\n\n[foo]\n.\n<p><a href=\"\">foo</a></p>\n````````````````````````````````\n\nThe title must be separated from the link destination by\nwhitespace:\n\n```````````````````````````````` example\n[foo]: <bar>(baz)\n\n[foo]\n.\n<p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>\n````````````````````````````````\n\n\nBoth title and destination can contain backslash escapes\nand literal backslashes:\n\n```````````````````````````````` example\n[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n.\n<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>\n````````````````````````````````\n\n\nA link can come before its corresponding definition:\n\n```````````````````````````````` example\n[foo]\n\n[foo]: url\n.\n<p><a href=\"url\">foo</a></p>\n````````````````````````````````\n\n\nIf there are several matching definitions, the first one takes\nprecedence:\n\n```````````````````````````````` example\n[foo]\n\n[foo]: first\n[foo]: second\n.\n<p><a href=\"first\">foo</a></p>\n````````````````````````````````\n\n\nAs noted in the section on [Links], matching of labels is\ncase-insensitive (see [matches]).\n\n```````````````````````````````` example\n[FOO]: /url\n\n[Foo]\n.\n<p><a href=\"/url\">Foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[\u0391\u0393\u03a9]: /\u03c6\u03bf\u03c5\n\n[\u03b1\u03b3\u03c9]\n.\n<p><a href=\"/%CF%86%CE%BF%CF%85\">\u03b1\u03b3\u03c9</a></p>\n````````````````````````````````\n\n\nHere is a link reference definition with no corresponding link.\nIt contributes nothing to the document.\n\n```````````````````````````````` example\n[foo]: /url\n.\n````````````````````````````````\n\n\nHere is another one:\n\n```````````````````````````````` example\n[\nfoo\n]: /url\nbar\n.\n<p>bar</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because there are\n[non-whitespace characters] after the title:\n\n```````````````````````````````` example\n[foo]: /url \"title\" ok\n.\n<p>[foo]: /url &quot;title&quot; ok</p>\n````````````````````````````````\n\n\nThis is a link reference definition, but it has no title:\n\n```````````````````````````````` example\n[foo]: /url\n\"title\" ok\n.\n<p>&quot;title&quot; ok</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because it is indented\nfour spaces:\n\n```````````````````````````````` example\n    [foo]: /url \"title\"\n\n[foo]\n.\n<pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because it occurs inside\na code block:\n\n```````````````````````````````` example\n```\n[foo]: /url\n```\n\n[foo]\n.\n<pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>\n````````````````````````````````\n\n\nA [link reference definition] cannot interrupt a paragraph.\n\n```````````````````````````````` example\nFoo\n[bar]: /baz\n\n[bar]\n.\n<p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>\n````````````````````````````````\n\n\nHowever, it can directly follow other block elements, such as headings\nand thematic breaks, and it need not be followed by a blank line.\n\n```````````````````````````````` example\n# [Foo]\n[foo]: /url\n> bar\n.\n<h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo]: /url\nbar\n===\n[foo]\n.\n<h1>bar</h1>\n<p><a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo]: /url\n===\n[foo]\n.\n<p>===\n<a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nSeveral [link reference definitions]\ncan occur one after another, without intervening blank lines.\n\n```````````````````````````````` example\n[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n.\n<p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>\n````````````````````````````````\n\n\n[Link reference definitions] can occur\ninside block containers, like lists and block quotations.  They\naffect the entire document, not just the container in which they\nare defined:\n\n```````````````````````````````` example\n[foo]\n\n> [foo]: /url\n.\n<p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\nWhether something is a [link reference definition] is\nindependent of whether the link reference it defines is\nused in the document.  Thus, for example, the following\ndocument contains just a link reference definition, and\nno visible content:\n\n```````````````````````````````` example\n[foo]: /url\n.\n````````````````````````````````\n\n\n## Paragraphs\n\nA sequence of non-blank lines that cannot be interpreted as other\nkinds of blocks forms a [paragraph](@).\nThe contents of the paragraph are the result of parsing the\nparagraph's raw content as inlines.  The paragraph's raw content\nis formed by concatenating the lines and removing initial and final\n[whitespace].\n\nA simple example with two paragraphs:\n\n```````````````````````````````` example\naaa\n\nbbb\n.\n<p>aaa</p>\n<p>bbb</p>\n````````````````````````````````\n\n\nParagraphs can contain multiple lines, but no blank lines:\n\n```````````````````````````````` example\naaa\nbbb\n\nccc\nddd\n.\n<p>aaa\nbbb</p>\n<p>ccc\nddd</p>\n````````````````````````````````\n\n\nMultiple blank lines between paragraph have no effect:\n\n```````````````````````````````` example\naaa\n\n\nbbb\n.\n<p>aaa</p>\n<p>bbb</p>\n````````````````````````````````\n\n\nLeading spaces are skipped:\n\n```````````````````````````````` example\n  aaa\n bbb\n.\n<p>aaa\nbbb</p>\n````````````````````````````````\n\n\nLines after the first may be indented any amount, since indented\ncode blocks cannot interrupt paragraphs.\n\n```````````````````````````````` example\naaa\n             bbb\n                                       ccc\n.\n<p>aaa\nbbb\nccc</p>\n````````````````````````````````\n\n\nHowever, the first line may be indented at most three spaces,\nor an indented code block will be triggered:\n\n```````````````````````````````` example\n   aaa\nbbb\n.\n<p>aaa\nbbb</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    aaa\nbbb\n.\n<pre><code>aaa\n</code></pre>\n<p>bbb</p>\n````````````````````````````````\n\n\nFinal spaces are stripped before inline parsing, so a paragraph\nthat ends with two or more spaces will not end with a [hard line\nbreak]:\n\n```````````````````````````````` example\naaa     \nbbb     \n.\n<p>aaa<br />\nbbb</p>\n````````````````````````````````\n\n\n## Blank lines\n\n[Blank lines] between block-level elements are ignored,\nexcept for the role they play in determining whether a [list]\nis [tight] or [loose].\n\nBlank lines at the beginning and end of the document are also ignored.\n\n```````````````````````````````` example\n  \n\naaa\n  \n\n# aaa\n\n  \n.\n<p>aaa</p>\n<h1>aaa</h1>\n````````````````````````````````\n\n<div class=\"extension\">\n\n## Tables (extension)\n\nGFM enables the `table` extension, where an additional leaf block type is\navailable.\n\nA [table](@) is an arrangement of data with rows and columns, consisting of a\nsingle header row, a [delimiter row] separating the header from the data, and\nzero or more data rows.\n\nEach row consists of cells containing arbitrary text, in which [inlines] are\nparsed, separated by pipes (`|`).  A leading and trailing pipe is also\nrecommended for clarity of reading, and if there's otherwise parsing ambiguity.\nSpaces between pipes and cell content are trimmed.  Block-level elements cannot\nbe inserted in a table.\n\nThe [delimiter row](@) consists of cells whose only content are hyphens (`-`),\nand optionally, a leading or trailing colon (`:`), or both, to indicate left,\nright, or center alignment respectively.\n\n```````````````````````````````` example table\n| foo | bar |\n| --- | --- |\n| baz | bim |\n.\n<table>\n<thead>\n<tr>\n<th>foo</th>\n<th>bar</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baz</td>\n<td>bim</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nCells in one column don't need to match length, though it's easier to read if\nthey are. Likewise, use of leading and trailing pipes may be inconsistent:\n\n```````````````````````````````` example table\n| abc | defghi |\n:-: | -----------:\nbar | baz\n.\n<table>\n<thead>\n<tr>\n<th align=\"center\">abc</th>\n<th align=\"right\">defghi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">bar</td>\n<td align=\"right\">baz</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nInclude a pipe in a cell's content by escaping it, including inside other\ninline spans:\n\n```````````````````````````````` example table\n| f\\|oo  |\n| ------ |\n| b `\\|` az |\n| b **\\|** im |\n.\n<table>\n<thead>\n<tr>\n<th>f|oo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b <code>|</code> az</td>\n</tr>\n<tr>\n<td>b <strong>|</strong> im</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nThe table is broken at the first empty line, or beginning of another\nblock-level structure:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar | baz |\n> bar\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar | baz |\nbar\n\nbar\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>bar</p>\n````````````````````````````````\n\nThe header row must match the [delimiter row] in the number of cells.  If not,\na table will not be recognized:\n\n```````````````````````````````` example table\n| abc | def |\n| --- |\n| bar |\n.\n<p>| abc | def |\n| --- |\n| bar |</p>\n````````````````````````````````\n\nThe remainder of the table's rows may vary in the number of cells.  If there\nare a number of cells fewer than the number of cells in the header row, empty\ncells are inserted.  If there are greater, the excess is ignored:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar |\n| bar | baz | boo |\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nIf there are no rows in the body, no `<tbody>` is generated in HTML output:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n</table>\n````````````````````````````````\n\n</div>\n\n# Container blocks\n\nA [container block](#container-blocks) is a block that has other\nblocks as its contents.  There are two basic kinds of container blocks:\n[block quotes] and [list items].\n[Lists] are meta-containers for [list items].\n\nWe define the syntax for container blocks recursively.  The general\nform of the definition is:\n\n> If X is a sequence of blocks, then the result of\n> transforming X in such-and-such a way is a container of type Y\n> with these blocks as its content.\n\nSo, we explain what counts as a block quote or list item by explaining\nhow these can be *generated* from their contents. This should suffice\nto define the syntax, although it does not give a recipe for *parsing*\nthese constructions.  (A recipe is provided below in the section entitled\n[A parsing strategy](#appendix-a-parsing-strategy).)\n\n## Block quotes\n\nA [block quote marker](@)\nconsists of 0-3 spaces of initial indent, plus (a) the character `>` together\nwith a following space, or (b) a single character `>` not followed by a space.\n\nThe following rules define [block quotes]:\n\n1.  **Basic case.**  If a string of lines *Ls* constitute a sequence\n    of blocks *Bs*, then the result of prepending a [block quote\n    marker] to the beginning of each line in *Ls*\n    is a [block quote](#block-quotes) containing *Bs*.\n\n2.  **Laziness.**  If a string of lines *Ls* constitute a [block\n    quote](#block-quotes) with contents *Bs*, then the result of deleting\n    the initial [block quote marker] from one or\n    more lines in which the next [non-whitespace character] after the [block\n    quote marker] is [paragraph continuation\n    text] is a block quote with *Bs* as its content.\n    [Paragraph continuation text](@) is text\n    that will be parsed as part of the content of a paragraph, but does\n    not occur at the beginning of the paragraph.\n\n3.  **Consecutiveness.**  A document cannot contain two [block\n    quotes] in a row unless there is a [blank line] between them.\n\nNothing else counts as a [block quote](#block-quotes).\n\nHere is a simple example:\n\n```````````````````````````````` example\n> # Foo\n> bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nThe spaces after the `>` characters can be omitted:\n\n```````````````````````````````` example\n># Foo\n>bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nThe `>` characters can be indented 1-3 spaces:\n\n```````````````````````````````` example\n   > # Foo\n   > bar\n > baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nFour spaces gives us a code block:\n\n```````````````````````````````` example\n    > # Foo\n    > bar\n    > baz\n.\n<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>\n````````````````````````````````\n\n\nThe Laziness clause allows us to omit the `>` before\n[paragraph continuation text]:\n\n```````````````````````````````` example\n> # Foo\n> bar\nbaz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nA block quote can contain some lazy and some non-lazy\ncontinuation lines:\n\n```````````````````````````````` example\n> bar\nbaz\n> foo\n.\n<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>\n````````````````````````````````\n\n\nLaziness only applies to lines that would have been continuations of\nparagraphs had they been prepended with [block quote markers].\nFor example, the `> ` cannot be omitted in the second line of\n\n``` markdown\n> foo\n> ---\n```\n\nwithout changing the meaning:\n\n```````````````````````````````` example\n> foo\n---\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\nSimilarly, if we omit the `> ` in the second line of\n\n``` markdown\n> - foo\n> - bar\n```\n\nthen the block quote ends after the first line:\n\n```````````````````````````````` example\n> - foo\n- bar\n.\n<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nFor the same reason, we can't omit the `> ` in front of\nsubsequent lines of an indented or fenced code block:\n\n```````````````````````````````` example\n>     foo\n    bar\n.\n<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> ```\nfoo\n```\n.\n<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n````````````````````````````````\n\n\nNote that in the following case, we have a [lazy\ncontinuation line]:\n\n```````````````````````````````` example\n> foo\n    - bar\n.\n<blockquote>\n<p>foo\n- bar</p>\n</blockquote>\n````````````````````````````````\n\n\nTo see why, note that in\n\n```markdown\n> foo\n>     - bar\n```\n\nthe `- bar` is indented too far to start a list, and can't\nbe an indented code block because indented code blocks cannot\ninterrupt paragraphs, so it is [paragraph continuation text].\n\nA block quote can be empty:\n\n```````````````````````````````` example\n>\n.\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n>\n>  \n> \n.\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\nA block quote can have initial or final blank lines:\n\n```````````````````````````````` example\n>\n> foo\n>  \n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n````````````````````````````````\n\n\nA blank line always separates block quotes:\n\n```````````````````````````````` example\n> foo\n\n> bar\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\n(Most current Markdown implementations, including John Gruber's\noriginal `Markdown.pl`, will parse this example as a single block quote\nwith two paragraphs.  But it seems better to allow the author to decide\nwhether two block quotes or one are wanted.)\n\nConsecutiveness means that if we put these block quotes together,\nwe get a single block quote:\n\n```````````````````````````````` example\n> foo\n> bar\n.\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n````````````````````````````````\n\n\nTo get a block quote with two paragraphs, use:\n\n```````````````````````````````` example\n> foo\n>\n> bar\n.\n<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\nBlock quotes can interrupt paragraphs:\n\n```````````````````````````````` example\nfoo\n> bar\n.\n<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\nIn general, blank lines are not needed before or after block\nquotes:\n\n```````````````````````````````` example\n> aaa\n***\n> bbb\n.\n<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>\n````````````````````````````````\n\n\nHowever, because of laziness, a blank line is needed between\na block quote and a following paragraph:\n\n```````````````````````````````` example\n> bar\nbaz\n.\n<blockquote>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> bar\n\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> bar\n>\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n````````````````````````````````\n\n\nIt is a consequence of the Laziness rule that any number\nof initial `>`s may be omitted on a continuation line of a\nnested block quote:\n\n```````````````````````````````` example\n> > > foo\nbar\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n>>> foo\n> bar\n>>baz\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nWhen including an indented code block in a block quote,\nremember that the [block quote marker] includes\nboth the `>` and a following space.  So *five spaces* are needed after\nthe `>`:\n\n```````````````````````````````` example\n>     code\n\n>    not code\n.\n<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>\n````````````````````````````````\n\n\n\n## List items\n\nA [list marker](@) is a\n[bullet list marker] or an [ordered list marker].\n\nA [bullet list marker](@)\nis a `-`, `+`, or `*` character.\n\nAn [ordered list marker](@)\nis a sequence of 1--9 arabic digits (`0-9`), followed by either a\n`.` character or a `)` character.  (The reason for the length\nlimit is that with 10 digits we start seeing integer overflows\nin some browsers.)\n\nThe following rules define [list items]:\n\n1.  **Basic case.**  If a sequence of lines *Ls* constitute a sequence of\n    blocks *Bs* starting with a [non-whitespace character], and *M* is a\n    list marker of width *W* followed by 1 \u2264 *N* \u2264 4 spaces, then the result\n    of prepending *M* and the following spaces to the first line of\n    *Ls*, and indenting subsequent lines of *Ls* by *W + N* spaces, is a\n    list item with *Bs* as its contents.  The type of the list item\n    (bullet or ordered) is determined by the type of its list marker.\n    If the list item is ordered, then it is also assigned a start\n    number, based on the ordered list marker.\n\n    Exceptions:\n\n    1. When the first list item in a [list] interrupts\n    a paragraph---that is, when it starts on a line that would\n    otherwise count as [paragraph continuation text]---then (a)\n    the lines *Ls* must not begin with a blank line, and (b) if\n    the list item is ordered, the start number must be 1.\n    2. If any line is a [thematic break][thematic breaks] then\n       that line is not a list item.\n\nFor example, let *Ls* be the lines\n\n```````````````````````````````` example\nA paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n.\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n````````````````````````````````\n\n\nAnd let *M* be the marker `1.`, and *N* = 2.  Then rule #1 says\nthat the following is an ordered list item with start number 1,\nand the same contents as *Ls*:\n\n```````````````````````````````` example\n1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nThe most important thing to notice is that the position of\nthe text after the list marker determines how much indentation\nis needed in subsequent blocks in the list item.  If the list\nmarker takes up two spaces, and there are three spaces between\nthe list marker and the next [non-whitespace character], then blocks\nmust be indented five spaces in order to fall under the list\nitem.\n\nHere are some examples showing how far content must be indented to be\nput under the list item:\n\n```````````````````````````````` example\n- one\n\n two\n.\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- one\n\n  two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n -    one\n\n     two\n.\n<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n -    one\n\n      two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nIt is tempting to think of this in terms of columns:  the continuation\nblocks must be indented at least to the column of the first\n[non-whitespace character] after the list marker. However, that is not quite right.\nThe spaces after the list marker determine how much relative indentation\nis needed.  Which column this indentation reaches will depend on\nhow the list item is embedded in other constructions, as shown by\nthis example:\n\n```````````````````````````````` example\n   > > 1.  one\n>>\n>>     two\n.\n<blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nHere `two` occurs in the same column as the list marker `1.`,\nbut is actually contained in the list item, because there is\nsufficient indentation after the last containing blockquote marker.\n\nThe converse is also possible.  In the following example, the word `two`\noccurs far to the right of the initial text of the list item, `one`, but\nit is not considered part of the list item, because it is not indented\nfar enough past the blockquote marker:\n\n```````````````````````````````` example\n>>- one\n>>\n  >  > two\n.\n<blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nNote that at least one space is needed between the list marker and\nany following content, so these are not list items:\n\n```````````````````````````````` example\n-one\n\n2.two\n.\n<p>-one</p>\n<p>2.two</p>\n````````````````````````````````\n\n\nA list item may contain blocks that are separated by more than\none blank line.\n\n```````````````````````````````` example\n- foo\n\n\n  bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nA list item may contain any kind of block:\n\n```````````````````````````````` example\n1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n.\n<ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nA list item that contains an indented code block will preserve\nempty lines within the code block verbatim.\n\n```````````````````````````````` example\n- Foo\n\n      bar\n\n\n      baz\n.\n<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nNote that ordered list start numbers must be nine digits or less:\n\n```````````````````````````````` example\n123456789. ok\n.\n<ol start=\"123456789\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1234567890. not ok\n.\n<p>1234567890. not ok</p>\n````````````````````````````````\n\n\nA start number may begin with 0s:\n\n```````````````````````````````` example\n0. ok\n.\n<ol start=\"0\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\n```````````````````````````````` example\n003. ok\n.\n<ol start=\"3\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\nA start number may not be negative:\n\n```````````````````````````````` example\n-1. not ok\n.\n<p>-1. not ok</p>\n````````````````````````````````\n\n\n\n2.  **Item starting with indented code.**  If a sequence of lines *Ls*\n    constitute a sequence of blocks *Bs* starting with an indented code\n    block, and *M* is a list marker of width *W* followed by\n    one space, then the result of prepending *M* and the following\n    space to the first line of *Ls*, and indenting subsequent lines of\n    *Ls* by *W + 1* spaces, is a list item with *Bs* as its contents.\n    If a line is empty, then it need not be indented.  The type of the\n    list item (bullet or ordered) is determined by the type of its list\n    marker.  If the list item is ordered, then it is also assigned a\n    start number, based on the ordered list marker.\n\nAn indented code block will have to be indented four spaces beyond\nthe edge of the region where text will be included in the list item.\nIn the following case that is 6 spaces:\n\n```````````````````````````````` example\n- foo\n\n      bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\n\nAnd in this case it is 11 spaces:\n\n```````````````````````````````` example\n  10.  foo\n\n           bar\n.\n<ol start=\"10\">\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nIf the *first* block in the list item is an indented code block,\nthen by rule #2, the contents must be indented *one* space after the\nlist marker:\n\n```````````````````````````````` example\n    indented code\n\nparagraph\n\n    more code\n.\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1.     indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nNote that an additional space indent is interpreted as space\ninside the code block:\n\n```````````````````````````````` example\n1.      indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nNote that rules #1 and #2 only apply to two cases:  (a) cases\nin which the lines to be included in a list item begin with a\n[non-whitespace character], and (b) cases in which\nthey begin with an indented code\nblock.  In a case like the following, where the first block begins with\na three-space indent, the rules do not allow us to form a list item by\nindenting the whole thing and prepending a list marker:\n\n```````````````````````````````` example\n   foo\n\nbar\n.\n<p>foo</p>\n<p>bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n-    foo\n\n  bar\n.\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n````````````````````````````````\n\n\nThis is not a significant restriction, because when a block begins\nwith 1-3 spaces indent, the indentation can always be removed without\na change in interpretation, allowing rule #1 to be applied.  So, in\nthe above case:\n\n```````````````````````````````` example\n-  foo\n\n   bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n3.  **Item starting with a blank line.**  If a sequence of lines *Ls*\n    starting with a single [blank line] constitute a (possibly empty)\n    sequence of blocks *Bs*, not separated from each other by more than\n    one blank line, and *M* is a list marker of width *W*,\n    then the result of prepending *M* to the first line of *Ls*, and\n    indenting subsequent lines of *Ls* by *W + 1* spaces, is a list\n    item with *Bs* as its contents.\n    If a line is empty, then it need not be indented.  The type of the\n    list item (bullet or ordered) is determined by the type of its list\n    marker.  If the list item is ordered, then it is also assigned a\n    start number, based on the ordered list marker.\n\nHere are some list items that start with a blank line but are not empty:\n\n```````````````````````````````` example\n-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n.\n<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nWhen the list item starts with a blank line, the number of spaces\nfollowing the list marker doesn't change the required indentation:\n\n```````````````````````````````` example\n-   \n  foo\n.\n<ul>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n\nA list item can begin with at most one blank line.\nIn the following example, `foo` is not part of the list\nitem:\n\n```````````````````````````````` example\n-\n\n  foo\n.\n<ul>\n<li></li>\n</ul>\n<p>foo</p>\n````````````````````````````````\n\n\nHere is an empty bullet list item:\n\n```````````````````````````````` example\n- foo\n-\n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nIt does not matter whether there are spaces following the [list marker]:\n\n```````````````````````````````` example\n- foo\n-   \n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nHere is an empty ordered list item:\n\n```````````````````````````````` example\n1. foo\n2.\n3. bar\n.\n<ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>\n````````````````````````````````\n\n\nA list may start or end with an empty list item:\n\n```````````````````````````````` example\n*\n.\n<ul>\n<li></li>\n</ul>\n````````````````````````````````\n\nHowever, an empty list item cannot interrupt a paragraph:\n\n```````````````````````````````` example\nfoo\n*\n\nfoo\n1.\n.\n<p>foo\n*</p>\n<p>foo\n1.</p>\n````````````````````````````````\n\n\n4.  **Indentation.**  If a sequence of lines *Ls* constitutes a list item\n    according to rule #1, #2, or #3, then the result of indenting each line\n    of *Ls* by 1-3 spaces (the same for each line) also constitutes a\n    list item with the same contents and attributes.  If a line is\n    empty, then it need not be indented.\n\nIndented one space:\n\n```````````````````````````````` example\n 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndented two spaces:\n\n```````````````````````````````` example\n  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndented three spaces:\n\n```````````````````````````````` example\n   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nFour spaces indent gives a code block:\n\n```````````````````````````````` example\n    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n.\n<pre><code>1.  A paragraph\n    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n</code></pre>\n````````````````````````````````\n\n\n\n5.  **Laziness.**  If a string of lines *Ls* constitute a [list\n    item](#list-items) with contents *Bs*, then the result of deleting\n    some or all of the indentation from one or more lines in which the\n    next [non-whitespace character] after the indentation is\n    [paragraph continuation text] is a\n    list item with the same contents and attributes.  The unindented\n    lines are called\n    [lazy continuation line](@)s.\n\nHere is an example with [lazy continuation lines]:\n\n```````````````````````````````` example\n  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndentation can be partially deleted:\n\n```````````````````````````````` example\n  1.  A paragraph\n    with two lines.\n.\n<ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>\n````````````````````````````````\n\n\nThese examples show how laziness can work in nested structures:\n\n```````````````````````````````` example\n> 1. > Blockquote\ncontinued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> 1. > Blockquote\n> continued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n````````````````````````````````\n\n\n\n6.  **That's all.** Nothing that is not counted as a list item by rules\n    #1--5 counts as a [list item](#list-items).\n\nThe rules for sublists follow from the general rules\n[above][List items].  A sublist must be indented the same number\nof spaces a paragraph would need to be in order to be included\nin the list item.\n\nSo, in this case we need two spaces indent:\n\n```````````````````````````````` example\n- foo\n  - bar\n    - baz\n      - boo\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nOne is not enough:\n\n```````````````````````````````` example\n- foo\n - bar\n  - baz\n   - boo\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n````````````````````````````````\n\n\nHere we need four, because the list marker is wider:\n\n```````````````````````````````` example\n10) foo\n    - bar\n.\n<ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\nThree is not enough:\n\n```````````````````````````````` example\n10) foo\n   - bar\n.\n<ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nA list may be the first block in a list item:\n\n```````````````````````````````` example\n- - foo\n.\n<ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. - 2. foo\n.\n<ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\nA list item can contain a heading:\n\n```````````````````````````````` example\n- # Foo\n- Bar\n  ---\n  baz\n.\n<ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<h2>Bar</h2>\nbaz</li>\n</ul>\n````````````````````````````````\n\n\n### Motivation\n\nJohn Gruber's Markdown spec says the following about list items:\n\n1. \"List markers typically start at the left margin, but may be indented\n   by up to three spaces. List markers must be followed by one or more\n   spaces or a tab.\"\n\n2. \"To make lists look nice, you can wrap items with hanging indents....\n   But if you don't want to, you don't have to.\"\n\n3. \"List items may consist of multiple paragraphs. Each subsequent\n   paragraph in a list item must be indented by either 4 spaces or one\n   tab.\"\n\n4. \"It looks nice if you indent every line of the subsequent paragraphs,\n   but here again, Markdown will allow you to be lazy.\"\n\n5. \"To put a blockquote within a list item, the blockquote's `>`\n   delimiters need to be indented.\"\n\n6. \"To put a code block within a list item, the code block needs to be\n   indented twice \u2014 8 spaces or two tabs.\"\n\nThese rules specify that a paragraph under a list item must be indented\nfour spaces (presumably, from the left margin, rather than the start of\nthe list marker, but this is not said), and that code under a list item\nmust be indented eight spaces instead of the usual four.  They also say\nthat a block quote must be indented, but not by how much; however, the\nexample given has four spaces indentation.  Although nothing is said\nabout other kinds of block-level content, it is certainly reasonable to\ninfer that *all* block elements under a list item, including other\nlists, must be indented four spaces.  This principle has been called the\n*four-space rule*.\n\nThe four-space rule is clear and principled, and if the reference\nimplementation `Markdown.pl` had followed it, it probably would have\nbecome the standard.  However, `Markdown.pl` allowed paragraphs and\nsublists to start with only two spaces indentation, at least on the\nouter level.  Worse, its behavior was inconsistent: a sublist of an\nouter-level list needed two spaces indentation, but a sublist of this\nsublist needed three spaces.  It is not surprising, then, that different\nimplementations of Markdown have developed very different rules for\ndetermining what comes under a list item.  (Pandoc and python-Markdown,\nfor example, stuck with Gruber's syntax description and the four-space\nrule, while discount, redcarpet, marked, PHP Markdown, and others\nfollowed `Markdown.pl`'s behavior more closely.)\n\nUnfortunately, given the divergences between implementations, there\nis no way to give a spec for list items that will be guaranteed not\nto break any existing documents.  However, the spec given here should\ncorrectly handle lists formatted with either the four-space rule or\nthe more forgiving `Markdown.pl` behavior, provided they are laid out\nin a way that is natural for a human to read.\n\nThe strategy here is to let the width and indentation of the list marker\ndetermine the indentation necessary for blocks to fall under the list\nitem, rather than having a fixed and arbitrary number.  The writer can\nthink of the body of the list item as a unit which gets indented to the\nright enough to fit the list marker (and any indentation on the list\nmarker).  (The laziness rule, #5, then allows continuation lines to be\nunindented if needed.)\n\nThis rule is superior, we claim, to any rule requiring a fixed level of\nindentation from the margin.  The four-space rule is clear but\nunnatural. It is quite unintuitive that\n\n``` markdown\n- foo\n\n  bar\n\n  - baz\n```\n\nshould be parsed as two lists with an intervening paragraph,\n\n``` html\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n```\n\nas the four-space rule demands, rather than a single list,\n\n``` html\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n```\n\nThe choice of four spaces is arbitrary.  It can be learned, but it is\nnot likely to be guessed, and it trips up beginners regularly.\n\nWould it help to adopt a two-space rule?  The problem is that such\na rule, together with the rule allowing 1--3 spaces indentation of the\ninitial list marker, allows text that is indented *less than* the\noriginal list marker to be included in the list item. For example,\n`Markdown.pl` parses\n\n``` markdown\n   - one\n\n  two\n```\n\nas a single list item, with `two` a continuation paragraph:\n\n``` html\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n```\n\nand similarly\n\n``` markdown\n>   - one\n>\n>  two\n```\n\nas\n\n``` html\n<blockquote>\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n</blockquote>\n```\n\nThis is extremely unintuitive.\n\nRather than requiring a fixed indent from the margin, we could require\na fixed indent (say, two spaces, or even one space) from the list marker (which\nmay itself be indented).  This proposal would remove the last anomaly\ndiscussed.  Unlike the spec presented above, it would count the following\nas a list item with a subparagraph, even though the paragraph `bar`\nis not indented as far as the first paragraph `foo`:\n\n``` markdown\n 10. foo\n\n   bar  \n```\n\nArguably this text does read like a list item with `bar` as a subparagraph,\nwhich may count in favor of the proposal.  However, on this proposal indented\ncode would have to be indented six spaces after the list marker.  And this\nwould break a lot of existing Markdown, which has the pattern:\n\n``` markdown\n1.  foo\n\n        indented code\n```\n\nwhere the code is indented eight spaces.  The spec above, by contrast, will\nparse this text as expected, since the code block's indentation is measured\nfrom the beginning of `foo`.\n\nThe one case that needs special treatment is a list item that *starts*\nwith indented code.  How much indentation is required in that case, since\nwe don't have a \"first paragraph\" to measure from?  Rule #2 simply stipulates\nthat in such cases, we require one space indentation from the list marker\n(and then the normal four spaces for the indented code).  This will match the\nfour-space rule in cases where the list marker plus its initial indentation\ntakes four spaces (a common case), but diverge in other cases.\n\n<div class=\"extension\">\n\n## Task list items (extension)\n\nGFM enables the `tasklist` extension, where an additional processing step is\nperformed on [list items].\n\nA [task list item](@) is a [list item][list items] where the first block in it\nis a paragraph which begins with a [task list item marker] and at least one\nwhitespace character before any other content.\n\nA [task list item marker](@) consists of an optional number of spaces, a left\nbracket (`[`), either a whitespace character or the letter `x` in either\nlowercase or uppercase, and then a right bracket (`]`).\n\nWhen rendered, the [task list item marker] is replaced with a semantic checkbox element;\nin an HTML output, this would be an `<input type=\"checkbox\">` element.\n\nIf the character between the brackets is a whitespace character, the checkbox\nis unchecked.  Otherwise, the checkbox is checked.\n\nThis spec does not define how the checkbox elements are interacted with: in practice,\nimplementors are free to render the checkboxes as disabled or inmutable elements,\nor they may dynamically handle dynamic interactions (i.e. checking, unchecking) in\nthe final rendered document.\n\n```````````````````````````````` example disabled\n- [ ] foo\n- [x] bar\n.\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> foo</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> bar</li>\n</ul>\n````````````````````````````````\n\nTask lists can be arbitrarily nested:\n\n```````````````````````````````` example disabled\n- [x] foo\n  - [ ] bar\n  - [x] baz\n- [ ] bim\n.\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> foo\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> bar</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> baz</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> bim</li>\n</ul>\n````````````````````````````````\n\n</div>\n\n## Lists\n\nA [list](@) is a sequence of one or more\nlist items [of the same type].  The list items\nmay be separated by any number of blank lines.\n\nTwo list items are [of the same type](@)\nif they begin with a [list marker] of the same type.\nTwo list markers are of the\nsame type if (a) they are bullet list markers using the same character\n(`-`, `+`, or `*`) or (b) they are ordered list numbers with the same\ndelimiter (either `.` or `)`).\n\nA list is an [ordered list](@)\nif its constituent list items begin with\n[ordered list markers], and a\n[bullet list](@) if its constituent list\nitems begin with [bullet list markers].\n\nThe [start number](@)\nof an [ordered list] is determined by the list number of\nits initial list item.  The numbers of subsequent list items are\ndisregarded.\n\nA list is [loose](@) if any of its constituent\nlist items are separated by blank lines, or if any of its constituent\nlist items directly contain two block-level elements with a blank line\nbetween them.  Otherwise a list is [tight](@).\n(The difference in HTML output is that paragraphs in a loose list are\nwrapped in `<p>` tags, while paragraphs in a tight list are not.)\n\nChanging the bullet or ordered list delimiter starts a new list:\n\n```````````````````````````````` example\n- foo\n- bar\n+ baz\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. foo\n2. bar\n3) baz\n.\n<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>\n````````````````````````````````\n\n\nIn CommonMark, a list can interrupt a paragraph. That is,\nno blank line is needed to separate a paragraph from a following\nlist:\n\n```````````````````````````````` example\nFoo\n- bar\n- baz\n.\n<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n````````````````````````````````\n\n`Markdown.pl` does not allow this, through fear of triggering a list\nvia a numeral in a hard-wrapped line:\n\n``` markdown\nThe number of windows in my house is\n14.  The number of doors is 6.\n```\n\nOddly, though, `Markdown.pl` *does* allow a blockquote to\ninterrupt a paragraph, even though the same considerations might\napply.\n\nIn CommonMark, we do allow lists to interrupt paragraphs, for\ntwo reasons.  First, it is natural and not uncommon for people\nto start lists without blank lines:\n\n``` markdown\nI need to buy\n- new shoes\n- a coat\n- a plane ticket\n```\n\nSecond, we are attracted to a\n\n> [principle of uniformity](@):\n> if a chunk of text has a certain\n> meaning, it will continue to have the same meaning when put into a\n> container block (such as a list item or blockquote).\n\n(Indeed, the spec for [list items] and [block quotes] presupposes\nthis principle.) This principle implies that if\n\n``` markdown\n  * I need to buy\n    - new shoes\n    - a coat\n    - a plane ticket\n```\n\nis a list item containing a paragraph followed by a nested sublist,\nas all Markdown implementations agree it is (though the paragraph\nmay be rendered without `<p>` tags, since the list is \"tight\"),\nthen\n\n``` markdown\nI need to buy\n- new shoes\n- a coat\n- a plane ticket\n```\n\nby itself should be a paragraph followed by a nested sublist.\n\nSince it is well established Markdown practice to allow lists to\ninterrupt paragraphs inside list items, the [principle of\nuniformity] requires us to allow this outside list items as\nwell.  ([reStructuredText](http://docutils.sourceforge.net/rst.html)\ntakes a different approach, requiring blank lines before lists\neven inside other list items.)\n\nIn order to solve the problem of unwanted lists in paragraphs with\nhard-wrapped numerals, we allow only lists starting with `1` to\ninterrupt paragraphs.  Thus,\n\n```````````````````````````````` example\nThe number of windows in my house is\n14.  The number of doors is 6.\n.\n<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n````````````````````````````````\n\nWe may still get an unintended result in cases like\n\n```````````````````````````````` example\nThe number of windows in my house is\n1.  The number of doors is 6.\n.\n<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n````````````````````````````````\n\nbut this rule should prevent most spurious list captures.\n\nThere can be any number of blank lines between items:\n\n```````````````````````````````` example\n- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n- foo\n  - bar\n    - baz\n\n\n      bim\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nTo separate consecutive lists of the same type, or to separate a\nlist from an indented code block that would otherwise be parsed\nas a subparagraph of the final list item, you can insert a blank HTML\ncomment:\n\n```````````````````````````````` example\n- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n.\n<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>\n````````````````````````````````\n\n\nList items need not be indented to the same level.  The following\nlist items will be treated as items at the same list level,\nsince none is indented enough to belong to the previous list\nitem:\n\n```````````````````````````````` example\n- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. a\n\n  2. b\n\n   3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n````````````````````````````````\n\nNote, however, that list items may not be indented more than\nthree spaces.  Here `- e` is treated as a paragraph continuation\nline, because it is indented more than three spaces:\n\n```````````````````````````````` example\n- a\n - b\n  - c\n   - d\n    - e\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n````````````````````````````````\n\nAnd here, `3. c` is treated as in indented code block,\nbecause it is indented four spaces and preceded by a\nblank line.\n\n```````````````````````````````` example\n1. a\n\n  2. b\n\n    3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n````````````````````````````````\n\n\nThis is a loose list, because there is a blank line between\ntwo of the list items:\n\n```````````````````````````````` example\n- a\n- b\n\n- c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nSo is this, with a empty second item:\n\n```````````````````````````````` example\n* a\n*\n\n* c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nThese are loose lists, even though there is no space between the items,\nbecause one of the items directly contains two block-level elements\nwith a blank line between them:\n\n```````````````````````````````` example\n- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n- b\n\n  [ref]: /url\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank lines are in a code block:\n\n```````````````````````````````` example\n- a\n- ```\n  b\n\n\n  ```\n- c\n.\n<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank line is between two\nparagraphs of a sublist.  So the sublist is loose while\nthe outer list is tight:\n\n```````````````````````````````` example\n- a\n  - b\n\n    c\n- d\n.\n<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank line is inside the\nblock quote:\n\n```````````````````````````````` example\n* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n````````````````````````````````\n\n\nThis list is tight, because the consecutive block elements\nare not separated by blank lines:\n\n```````````````````````````````` example\n- a\n  > b\n  ```\n  c\n  ```\n- d\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n````````````````````````````````\n\n\nA single-paragraph list is tight:\n\n```````````````````````````````` example\n- a\n.\n<ul>\n<li>a</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n  - b\n.\n<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nThis list is loose, because of the blank line between the\ntwo block elements in the list item:\n\n```````````````````````````````` example\n1. ```\n   foo\n   ```\n\n   bar\n.\n<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n````````````````````````````````\n\n\nHere the outer list is loose, the inner list tight:\n\n```````````````````````````````` example\n* foo\n  * bar\n\n  baz\n.\n<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n.\n<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\n# Inlines\n\nInlines are parsed sequentially from the beginning of the character\nstream to the end (left to right, in left-to-right languages).\nThus, for example, in\n\n```````````````````````````````` example\n`hi`lo`\n.\n<p><code>hi</code>lo`</p>\n````````````````````````````````\n\n`hi` is parsed as code, leaving the backtick at the end as a literal\nbacktick.\n\n\n## Backslash escapes\n\nAny ASCII punctuation character may be backslash-escaped:\n\n```````````````````````````````` example\n\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n.\n<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>\n````````````````````````````````\n\n\nBackslashes before other characters are treated as literal\nbackslashes:\n\n```````````````````````````````` example\n\\\u2192\\A\\a\\ \\3\\\u03c6\\\u00ab\n.\n<p>\\\u2192\\A\\a\\ \\3\\\u03c6\\\u00ab</p>\n````````````````````````````````\n\n\nEscaped characters are treated as regular characters and do\nnot have their usual Markdown meanings:\n\n```````````````````````````````` example\n\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n.\n<p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>\n````````````````````````````````\n\n\nIf a backslash is itself escaped, the following character is not:\n\n```````````````````````````````` example\n\\\\*emphasis*\n.\n<p>\\<em>emphasis</em></p>\n````````````````````````````````\n\n\nA backslash at the end of the line is a [hard line break]:\n\n```````````````````````````````` example\nfoo\\\nbar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\nBackslash escapes do not work in code blocks, code spans, autolinks, or\nraw HTML:\n\n```````````````````````````````` example\n`` \\[\\` ``\n.\n<p><code>\\[\\`</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    \\[\\]\n.\n<pre><code>\\[\\]\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~\n\\[\\]\n~~~\n.\n<pre><code>\\[\\]\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://example.com?find=\\*>\n.\n<p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"/bar\\/)\">\n.\n<a href=\"/bar\\/)\">\n````````````````````````````````\n\n\nBut they work in all other contexts, including URLs and link titles,\nlink references, and [info strings] in [fenced code blocks]:\n\n```````````````````````````````` example\n[foo](/bar\\* \"ti\\*tle\")\n.\n<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n.\n<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n``` foo\\+bar\nfoo\n```\n.\n<pre><code class=\"language-foo+bar\">foo\n</code></pre>\n````````````````````````````````\n\n\n\n## Entity and numeric character references\n\nValid HTML entity references and numeric character references\ncan be used in place of the corresponding Unicode character,\nwith the following exceptions:\n\n- Entity and character references are not recognized in code\n  blocks and code spans.\n\n- Entity and character references cannot stand in place of\n  special characters that define structural elements in\n  CommonMark.  For example, although `&#42;` can be used\n  in place of a literal `*` character, `&#42;` cannot replace\n  `*` in emphasis delimiters, bullet list markers, or thematic\n  breaks.\n\nConforming CommonMark parsers need not store information about\nwhether a particular character was represented in the source\nusing a Unicode character or an entity reference.\n\n[Entity references](@) consist of `&` + any of the valid\nHTML5 entity names + `;`. The\ndocument <https://html.spec.whatwg.org/multipage/entities.json>\nis used as an authoritative source for the valid entity\nreferences and their corresponding code points.\n\n```````````````````````````````` example\n&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n.\n<p>\u00a0 &amp; \u00a9 \u00c6 \u010e\n\u00be \u210b \u2146\n\u2232 \u2267\u0338</p>\n````````````````````````````````\n\n\n[Decimal numeric character\nreferences](@)\nconsist of `&#` + a string of 1--7 arabic digits + `;`. A\nnumeric character reference is parsed as the corresponding\nUnicode character. Invalid Unicode code points will be replaced by\nthe REPLACEMENT CHARACTER (`U+FFFD`).  For security reasons,\nthe code point `U+0000` will also be replaced by `U+FFFD`.\n\n```````````````````````````````` example\n&#35; &#1234; &#992; &#0;\n.\n<p># \u04d2 \u03e0 \ufffd</p>\n````````````````````````````````\n\n\n[Hexadecimal numeric character\nreferences](@) consist of `&#` +\neither `X` or `x` + a string of 1-6 hexadecimal digits + `;`.\nThey too are parsed as the corresponding Unicode character (this\ntime specified with a hexadecimal numeral instead of decimal).\n\n```````````````````````````````` example\n&#X22; &#XD06; &#xcab;\n.\n<p>&quot; \u0d06 \u0cab</p>\n````````````````````````````````\n\n\nHere are some nonentities:\n\n```````````````````````````````` example\n&nbsp &x; &#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n.\n<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#987654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>\n````````````````````````````````\n\n\nAlthough HTML5 does accept some entity references\nwithout a trailing semicolon (such as `&copy`), these are not\nrecognized here, because it makes the grammar too ambiguous:\n\n```````````````````````````````` example\n&copy\n.\n<p>&amp;copy</p>\n````````````````````````````````\n\n\nStrings that are not on the list of HTML5 named entities are not\nrecognized as entity references either:\n\n```````````````````````````````` example\n&MadeUpEntity;\n.\n<p>&amp;MadeUpEntity;</p>\n````````````````````````````````\n\n\nEntity and numeric character references are recognized in any\ncontext besides code spans or code blocks, including\nURLs, [link titles], and [fenced code block][] [info strings]:\n\n```````````````````````````````` example\n<a href=\"&ouml;&ouml;.html\">\n.\n<a href=\"&ouml;&ouml;.html\">\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n.\n<p><a href=\"/f%C3%B6%C3%B6\" title=\"f\u00f6\u00f6\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n.\n<p><a href=\"/f%C3%B6%C3%B6\" title=\"f\u00f6\u00f6\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n``` f&ouml;&ouml;\nfoo\n```\n.\n<pre><code class=\"language-f\u00f6\u00f6\">foo\n</code></pre>\n````````````````````````````````\n\n\nEntity and numeric character references are treated as literal\ntext in code spans and code blocks:\n\n```````````````````````````````` example\n`f&ouml;&ouml;`\n.\n<p><code>f&amp;ouml;&amp;ouml;</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    f&ouml;f&ouml;\n.\n<pre><code>f&amp;ouml;f&amp;ouml;\n</code></pre>\n````````````````````````````````\n\n\nEntity and numeric character references cannot be used\nin place of symbols indicating structure in CommonMark\ndocuments.\n\n```````````````````````````````` example\n&#42;foo&#42;\n*foo*\n.\n<p>*foo*\n<em>foo</em></p>\n````````````````````````````````\n\n```````````````````````````````` example\n&#42; foo\n\n* foo\n.\n<p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo&#10;&#10;bar\n.\n<p>foo\n\nbar</p>\n````````````````````````````````\n\n```````````````````````````````` example\n&#9;foo\n.\n<p>\u2192foo</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[a](url &quot;tit&quot;)\n.\n<p>[a](url &quot;tit&quot;)</p>\n````````````````````````````````\n\n\n## Code spans\n\nA [backtick string](@)\nis a string of one or more backtick characters (`` ` ``) that is neither\npreceded nor followed by a backtick.\n\nA [code span](@) begins with a backtick string and ends with\na backtick string of equal length.  The contents of the code span are\nthe characters between the two backtick strings, normalized in the\nfollowing ways:\n\n- First, [line endings] are converted to [spaces].\n- If the resulting string both begins *and* ends with a [space]\n  character, but does not consist entirely of [space]\n  characters, a single [space] character is removed from the\n  front and back.  This allows you to include code that begins\n  or ends with backtick characters, which must be separated by\n  whitespace from the opening or closing backtick strings.\n\nThis is a simple code span:\n\n```````````````````````````````` example\n`foo`\n.\n<p><code>foo</code></p>\n````````````````````````````````\n\n\nHere two backticks are used, because the code contains a backtick.\nThis example also illustrates stripping of a single leading and\ntrailing space:\n\n```````````````````````````````` example\n`` foo ` bar ``\n.\n<p><code>foo ` bar</code></p>\n````````````````````````````````\n\n\nThis example shows the motivation for stripping leading and trailing\nspaces:\n\n```````````````````````````````` example\n` `` `\n.\n<p><code>``</code></p>\n````````````````````````````````\n\nNote that only *one* space is stripped:\n\n```````````````````````````````` example\n`  ``  `\n.\n<p><code> `` </code></p>\n````````````````````````````````\n\nThe stripping only happens if the space is on both\nsides of the string:\n\n```````````````````````````````` example\n` a`\n.\n<p><code> a</code></p>\n````````````````````````````````\n\nOnly [spaces], and not [unicode whitespace] in general, are\nstripped in this way:\n\n```````````````````````````````` example\n`\u00a0b\u00a0`\n.\n<p><code>\u00a0b\u00a0</code></p>\n````````````````````````````````\n\nNo stripping occurs if the code span contains only spaces:\n\n```````````````````````````````` example\n`\u00a0`\n`  `\n.\n<p><code>\u00a0</code>\n<code>  </code></p>\n````````````````````````````````\n\n\n[Line endings] are treated like spaces:\n\n```````````````````````````````` example\n``\nfoo\nbar  \nbaz\n``\n.\n<p><code>foo bar   baz</code></p>\n````````````````````````````````\n\n```````````````````````````````` example\n``\nfoo \n``\n.\n<p><code>foo </code></p>\n````````````````````````````````\n\n\nInterior spaces are not collapsed:\n\n```````````````````````````````` example\n`foo   bar \nbaz`\n.\n<p><code>foo   bar  baz</code></p>\n````````````````````````````````\n\nNote that browsers will typically collapse consecutive spaces\nwhen rendering `<code>` elements, so it is recommended that\nthe following CSS be used:\n\n    code{white-space: pre-wrap;}\n\n\nNote that backslash escapes do not work in code spans. All backslashes\nare treated literally:\n\n```````````````````````````````` example\n`foo\\`bar`\n.\n<p><code>foo\\</code>bar`</p>\n````````````````````````````````\n\n\nBackslash escapes are never needed, because one can always choose a\nstring of *n* backtick characters as delimiters, where the code does\nnot contain any strings of exactly *n* backtick characters.\n\n```````````````````````````````` example\n``foo`bar``\n.\n<p><code>foo`bar</code></p>\n````````````````````````````````\n\n```````````````````````````````` example\n` foo `` bar `\n.\n<p><code>foo `` bar</code></p>\n````````````````````````````````\n\n\nCode span backticks have higher precedence than any other inline\nconstructs except HTML tags and autolinks.  Thus, for example, this is\nnot parsed as emphasized text, since the second `*` is part of a code\nspan:\n\n```````````````````````````````` example\n*foo`*`\n.\n<p>*foo<code>*</code></p>\n````````````````````````````````\n\n\nAnd this is not parsed as a link:\n\n```````````````````````````````` example\n[not a `link](/foo`)\n.\n<p>[not a <code>link](/foo</code>)</p>\n````````````````````````````````\n\n\nCode spans, HTML tags, and autolinks have the same precedence.\nThus, this is code:\n\n```````````````````````````````` example\n`<a href=\"`\">`\n.\n<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>\n````````````````````````````````\n\n\nBut this is an HTML tag:\n\n```````````````````````````````` example\n<a href=\"`\">`\n.\n<p><a href=\"`\">`</p>\n````````````````````````````````\n\n\nAnd this is code:\n\n```````````````````````````````` example\n`<http://foo.bar.`baz>`\n.\n<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>\n````````````````````````````````\n\n\nBut this is an autolink:\n\n```````````````````````````````` example\n<http://foo.bar.`baz>`\n.\n<p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>\n````````````````````````````````\n\n\nWhen a backtick string is not closed by a matching backtick string,\nwe just have literal backticks:\n\n```````````````````````````````` example\n```foo``\n.\n<p>```foo``</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`foo\n.\n<p>`foo</p>\n````````````````````````````````\n\nThe following case also illustrates the need for opening and\nclosing backtick strings to be equal in length:\n\n```````````````````````````````` example\n`foo``bar``\n.\n<p>`foo<code>bar</code></p>\n````````````````````````````````\n\n\n## Emphasis and strong emphasis\n\nJohn Gruber's original [Markdown syntax\ndescription](http://daringfireball.net/projects/markdown/syntax#em) says:\n\n> Markdown treats asterisks (`*`) and underscores (`_`) as indicators of\n> emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML\n> `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML `<strong>`\n> tag.\n\nThis is enough for most users, but these rules leave much undecided,\nespecially when it comes to nested emphasis.  The original\n`Markdown.pl` test suite makes it clear that triple `***` and\n`___` delimiters can be used for strong emphasis, and most\nimplementations have also allowed the following patterns:\n\n``` markdown\n***strong emph***\n***strong** in emph*\n***emph* in strong**\n**in strong *emph***\n*in emph **strong***\n```\n\nThe following patterns are less widely supported, but the intent\nis clear and they are useful (especially in contexts like bibliography\nentries):\n\n``` markdown\n*emph *with emph* in it*\n**strong **with strong** in it**\n```\n\nMany implementations have also restricted intraword emphasis to\nthe `*` forms, to avoid unwanted emphasis in words containing\ninternal underscores.  (It is best practice to put these in code\nspans, but users often do not.)\n\n``` markdown\ninternal emphasis: foo*bar*baz\nno emphasis: foo_bar_baz\n```\n\nThe rules given below capture all of these patterns, while allowing\nfor efficient parsing strategies that do not backtrack.\n\nFirst, some definitions.  A [delimiter run](@) is either\na sequence of one or more `*` characters that is not preceded or\nfollowed by a non-backslash-escaped `*` character, or a sequence\nof one or more `_` characters that is not preceded or followed by\na non-backslash-escaped `_` character.\n\nA [left-flanking delimiter run](@) is\na [delimiter run] that is (1) not followed by [Unicode whitespace],\nand either (2a) not followed by a [punctuation character], or\n(2b) followed by a [punctuation character] and\npreceded by [Unicode whitespace] or a [punctuation character].\nFor purposes of this definition, the beginning and the end of\nthe line count as Unicode whitespace.\n\nA [right-flanking delimiter run](@) is\na [delimiter run] that is (1) not preceded by [Unicode whitespace],\nand either (2a) not preceded by a [punctuation character], or\n(2b) preceded by a [punctuation character] and\nfollowed by [Unicode whitespace] or a [punctuation character].\nFor purposes of this definition, the beginning and the end of\nthe line count as Unicode whitespace.\n\nHere are some examples of delimiter runs.\n\n  - left-flanking but not right-flanking:\n\n    ```\n    ***abc\n      _abc\n    **\"abc\"\n     _\"abc\"\n    ```\n\n  - right-flanking but not left-flanking:\n\n    ```\n     abc***\n     abc_\n    \"abc\"**\n    \"abc\"_\n    ```\n\n  - Both left and right-flanking:\n\n    ```\n     abc***def\n    \"abc\"_\"def\"\n    ```\n\n  - Neither left nor right-flanking:\n\n    ```\n    abc *** def\n    a _ b\n    ```\n\n(The idea of distinguishing left-flanking and right-flanking\ndelimiter runs based on the character before and the character\nafter comes from Roopesh Chander's\n[vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags).\nvfmd uses the terminology \"emphasis indicator string\" instead of \"delimiter\nrun,\" and its rules for distinguishing left- and right-flanking runs\nare a bit more complex than the ones given here.)\n\nThe following rules define emphasis and strong emphasis:\n\n1.  A single `*` character [can open emphasis](@)\n    iff (if and only if) it is part of a [left-flanking delimiter run].\n\n2.  A single `_` character [can open emphasis] iff\n    it is part of a [left-flanking delimiter run]\n    and either (a) not part of a [right-flanking delimiter run]\n    or (b) part of a [right-flanking delimiter run]\n    preceded by punctuation.\n\n3.  A single `*` character [can close emphasis](@)\n    iff it is part of a [right-flanking delimiter run].\n\n4.  A single `_` character [can close emphasis] iff\n    it is part of a [right-flanking delimiter run]\n    and either (a) not part of a [left-flanking delimiter run]\n    or (b) part of a [left-flanking delimiter run]\n    followed by punctuation.\n\n5.  A double `**` [can open strong emphasis](@)\n    iff it is part of a [left-flanking delimiter run].\n\n6.  A double `__` [can open strong emphasis] iff\n    it is part of a [left-flanking delimiter run]\n    and either (a) not part of a [right-flanking delimiter run]\n    or (b) part of a [right-flanking delimiter run]\n    preceded by punctuation.\n\n7.  A double `**` [can close strong emphasis](@)\n    iff it is part of a [right-flanking delimiter run].\n\n8.  A double `__` [can close strong emphasis] iff\n    it is part of a [right-flanking delimiter run]\n    and either (a) not part of a [left-flanking delimiter run]\n    or (b) part of a [left-flanking delimiter run]\n    followed by punctuation.\n\n9.  Emphasis begins with a delimiter that [can open emphasis] and ends\n    with a delimiter that [can close emphasis], and that uses the same\n    character (`_` or `*`) as the opening delimiter.  The\n    opening and closing delimiters must belong to separate\n    [delimiter runs].  If one of the delimiters can both\n    open and close emphasis, then the sum of the lengths of the\n    delimiter runs containing the opening and closing delimiters\n    must not be a multiple of 3 unless both lengths are\n    multiples of 3.\n\n10. Strong emphasis begins with a delimiter that\n    [can open strong emphasis] and ends with a delimiter that\n    [can close strong emphasis], and that uses the same character\n    (`_` or `*`) as the opening delimiter.  The\n    opening and closing delimiters must belong to separate\n    [delimiter runs].  If one of the delimiters can both open\n    and close strong emphasis, then the sum of the lengths of\n    the delimiter runs containing the opening and closing\n    delimiters must not be a multiple of 3 unless both lengths\n    are multiples of 3.\n\n11. A literal `*` character cannot occur at the beginning or end of\n    `*`-delimited emphasis or `**`-delimited strong emphasis, unless it\n    is backslash-escaped.\n\n12. A literal `_` character cannot occur at the beginning or end of\n    `_`-delimited emphasis or `__`-delimited strong emphasis, unless it\n    is backslash-escaped.\n\nWhere rules 1--12 above are compatible with multiple parsings,\nthe following principles resolve ambiguity:\n\n13. The number of nestings should be minimized. Thus, for example,\n    an interpretation `<strong>...</strong>` is always preferred to\n    `<em><em>...</em></em>`.\n\n14. An interpretation `<em><strong>...</strong></em>` is always\n    preferred to `<strong><em>...</em></strong>`.\n\n15. When two potential emphasis or strong emphasis spans overlap,\n    so that the second begins before the first ends and ends after\n    the first ends, the first takes precedence. Thus, for example,\n    `*foo _bar* baz_` is parsed as `<em>foo _bar</em> baz_` rather\n    than `*foo <em>bar* baz</em>`.\n\n16. When there are two potential emphasis or strong emphasis spans\n    with the same closing delimiter, the shorter one (the one that\n    opens later) takes precedence. Thus, for example,\n    `**foo **bar baz**` is parsed as `**foo <strong>bar baz</strong>`\n    rather than `<strong>foo **bar baz</strong>`.\n\n17. Inline code spans, links, images, and HTML tags group more tightly\n    than emphasis.  So, when there is a choice between an interpretation\n    that contains one of these elements and one that does not, the\n    former always wins.  Thus, for example, `*[foo*](bar)` is\n    parsed as `*<a href=\"bar\">foo*</a>` rather than as\n    `<em>[foo</em>](bar)`.\n\nThese rules can be illustrated through a series of examples.\n\nRule 1:\n\n```````````````````````````````` example\n*foo bar*\n.\n<p><em>foo bar</em></p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `*` is followed by\nwhitespace, and hence not part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na * foo bar*\n.\n<p>a * foo bar*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `*` is preceded\nby an alphanumeric and followed by punctuation, and hence\nnot part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na*\"foo\"*\n.\n<p>a*&quot;foo&quot;*</p>\n````````````````````````````````\n\n\nUnicode nonbreaking spaces count as whitespace, too:\n\n```````````````````````````````` example\n*\u00a0a\u00a0*\n.\n<p>*\u00a0a\u00a0*</p>\n````````````````````````````````\n\n\nIntraword emphasis with `*` is permitted:\n\n```````````````````````````````` example\nfoo*bar*\n.\n<p>foo<em>bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5*6*78\n.\n<p>5<em>6</em>78</p>\n````````````````````````````````\n\n\nRule 2:\n\n```````````````````````````````` example\n_foo bar_\n.\n<p><em>foo bar</em></p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `_` is followed by\nwhitespace:\n\n```````````````````````````````` example\n_ foo bar_\n.\n<p>_ foo bar_</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `_` is preceded\nby an alphanumeric and followed by punctuation:\n\n```````````````````````````````` example\na_\"foo\"_\n.\n<p>a_&quot;foo&quot;_</p>\n````````````````````````````````\n\n\nEmphasis with `_` is not allowed inside words:\n\n```````````````````````````````` example\nfoo_bar_\n.\n<p>foo_bar_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5_6_78\n.\n<p>5_6_78</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f_\n.\n<p>\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f_</p>\n````````````````````````````````\n\n\nHere `_` does not generate emphasis, because the first delimiter run\nis right-flanking and the second left-flanking:\n\n```````````````````````````````` example\naa_\"bb\"_cc\n.\n<p>aa_&quot;bb&quot;_cc</p>\n````````````````````````````````\n\n\nThis is emphasis, even though the opening delimiter is\nboth left- and right-flanking, because it is preceded by\npunctuation:\n\n```````````````````````````````` example\nfoo-_(bar)_\n.\n<p>foo-<em>(bar)</em></p>\n````````````````````````````````\n\n\nRule 3:\n\nThis is not emphasis, because the closing delimiter does\nnot match the opening delimiter:\n\n```````````````````````````````` example\n_foo*\n.\n<p>_foo*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the closing `*` is preceded by\nwhitespace:\n\n```````````````````````````````` example\n*foo bar *\n.\n<p>*foo bar *</p>\n````````````````````````````````\n\n\nA newline also counts as whitespace:\n\n```````````````````````````````` example\n*foo bar\n*\n.\n<p>*foo bar\n*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the second `*` is\npreceded by punctuation and followed by an alphanumeric\n(hence it is not part of a [right-flanking delimiter run]:\n\n```````````````````````````````` example\n*(*foo)\n.\n<p>*(*foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith this example:\n\n```````````````````````````````` example\n*(*foo*)*\n.\n<p><em>(<em>foo</em>)</em></p>\n````````````````````````````````\n\n\nIntraword emphasis with `*` is allowed:\n\n```````````````````````````````` example\n*foo*bar\n.\n<p><em>foo</em>bar</p>\n````````````````````````````````\n\n\n\nRule 4:\n\nThis is not emphasis, because the closing `_` is preceded by\nwhitespace:\n\n```````````````````````````````` example\n_foo bar _\n.\n<p>_foo bar _</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the second `_` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n_(_foo)\n.\n<p>_(_foo)</p>\n````````````````````````````````\n\n\nThis is emphasis within emphasis:\n\n```````````````````````````````` example\n_(_foo_)_\n.\n<p><em>(<em>foo</em>)</em></p>\n````````````````````````````````\n\n\nIntraword emphasis is disallowed for `_`:\n\n```````````````````````````````` example\n_foo_bar\n.\n<p>_foo_bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f\n.\n<p>_\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo_bar_baz_\n.\n<p><em>foo_bar_baz</em></p>\n````````````````````````````````\n\n\nThis is emphasis, even though the closing delimiter is\nboth left- and right-flanking, because it is followed by\npunctuation:\n\n```````````````````````````````` example\n_(bar)_.\n.\n<p><em>(bar)</em>.</p>\n````````````````````````````````\n\n\nRule 5:\n\n```````````````````````````````` example\n**foo bar**\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening delimiter is\nfollowed by whitespace:\n\n```````````````````````````````` example\n** foo bar**\n.\n<p>** foo bar**</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening `**` is preceded\nby an alphanumeric and followed by punctuation, and hence\nnot part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na**\"foo\"**\n.\n<p>a**&quot;foo&quot;**</p>\n````````````````````````````````\n\n\nIntraword strong emphasis with `**` is permitted:\n\n```````````````````````````````` example\nfoo**bar**\n.\n<p>foo<strong>bar</strong></p>\n````````````````````````````````\n\n\nRule 6:\n\n```````````````````````````````` example\n__foo bar__\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening delimiter is\nfollowed by whitespace:\n\n```````````````````````````````` example\n__ foo bar__\n.\n<p>__ foo bar__</p>\n````````````````````````````````\n\n\nA newline counts as whitespace:\n```````````````````````````````` example\n__\nfoo bar__\n.\n<p>__\nfoo bar__</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening `__` is preceded\nby an alphanumeric and followed by punctuation:\n\n```````````````````````````````` example\na__\"foo\"__\n.\n<p>a__&quot;foo&quot;__</p>\n````````````````````````````````\n\n\nIntraword strong emphasis is forbidden with `__`:\n\n```````````````````````````````` example\nfoo__bar__\n.\n<p>foo__bar__</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5__6__78\n.\n<p>5__6__78</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f__\n.\n<p>\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f__</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo, __bar__, baz__\n.\n<p><strong>foo, <strong>bar</strong>, baz</strong></p>\n````````````````````````````````\n\n\nThis is strong emphasis, even though the opening delimiter is\nboth left- and right-flanking, because it is preceded by\npunctuation:\n\n```````````````````````````````` example\nfoo-__(bar)__\n.\n<p>foo-<strong>(bar)</strong></p>\n````````````````````````````````\n\n\n\nRule 7:\n\nThis is not strong emphasis, because the closing delimiter is preceded\nby whitespace:\n\n```````````````````````````````` example\n**foo bar **\n.\n<p>**foo bar **</p>\n````````````````````````````````\n\n\n(Nor can it be interpreted as an emphasized `*foo bar *`, because of\nRule 11.)\n\nThis is not strong emphasis, because the second `**` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n**(**foo)\n.\n<p>**(**foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith these examples:\n\n```````````````````````````````` example\n*(**foo**)*\n.\n<p><em>(<strong>foo</strong>)</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n.\n<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo \"*bar*\" foo**\n.\n<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>\n````````````````````````````````\n\n\nIntraword emphasis:\n\n```````````````````````````````` example\n**foo**bar\n.\n<p><strong>foo</strong>bar</p>\n````````````````````````````````\n\n\nRule 8:\n\nThis is not strong emphasis, because the closing delimiter is\npreceded by whitespace:\n\n```````````````````````````````` example\n__foo bar __\n.\n<p>__foo bar __</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the second `__` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n__(__foo)\n.\n<p>__(__foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith this example:\n\n```````````````````````````````` example\n_(__foo__)_\n.\n<p><em>(<strong>foo</strong>)</em></p>\n````````````````````````````````\n\n\nIntraword strong emphasis is forbidden with `__`:\n\n```````````````````````````````` example\n__foo__bar\n.\n<p>__foo__bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f\n.\n<p>__\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo__bar__baz__\n.\n<p><strong>foo__bar__baz</strong></p>\n````````````````````````````````\n\n\nThis is strong emphasis, even though the closing delimiter is\nboth left- and right-flanking, because it is followed by\npunctuation:\n\n```````````````````````````````` example\n__(bar)__.\n.\n<p><strong>(bar)</strong>.</p>\n````````````````````````````````\n\n\nRule 9:\n\nAny nonempty sequence of inline elements can be the contents of an\nemphasized span.\n\n```````````````````````````````` example\n*foo [bar](/url)*\n.\n<p><em>foo <a href=\"/url\">bar</a></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo\nbar*\n.\n<p><em>foo\nbar</em></p>\n````````````````````````````````\n\n\nIn particular, emphasis and strong emphasis can be nested\ninside emphasis:\n\n```````````````````````````````` example\n_foo __bar__ baz_\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo _bar_ baz_\n.\n<p><em>foo <em>bar</em> baz</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo_ bar_\n.\n<p><em><em>foo</em> bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo *bar**\n.\n<p><em>foo <em>bar</em></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo **bar** baz*\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n````````````````````````````````\n\n```````````````````````````````` example\n*foo**bar**baz*\n.\n<p><em>foo<strong>bar</strong>baz</em></p>\n````````````````````````````````\n\nNote that in the preceding case, the interpretation\n\n``` markdown\n<p><em>foo</em><em>bar<em></em>baz</em></p>\n```\n\n\nis precluded by the condition that a delimiter that\ncan both open and close (like the `*` after `foo`)\ncannot form emphasis if the sum of the lengths of\nthe delimiter runs containing the opening and\nclosing delimiters is a multiple of 3 unless\nboth lengths are multiples of 3.\n\n\nFor the same reason, we don't get two consecutive\nemphasis sections in this example:\n\n```````````````````````````````` example\n*foo**bar*\n.\n<p><em>foo**bar</em></p>\n````````````````````````````````\n\n\nThe same condition ensures that the following\ncases are all strong emphasis nested inside\nemphasis, even when the interior spaces are\nomitted:\n\n\n```````````````````````````````` example\n***foo** bar*\n.\n<p><em><strong>foo</strong> bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo **bar***\n.\n<p><em>foo <strong>bar</strong></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo**bar***\n.\n<p><em>foo<strong>bar</strong></em></p>\n````````````````````````````````\n\n\nWhen the lengths of the interior closing and opening\ndelimiter runs are *both* multiples of 3, though,\nthey can match to create emphasis:\n\n```````````````````````````````` example\nfoo***bar***baz\n.\n<p>foo<em><strong>bar</strong></em>baz</p>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo******bar*********baz\n.\n<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>\n````````````````````````````````\n\n\nIndefinite levels of nesting are possible:\n\n```````````````````````````````` example\n*foo **bar *baz* bim** bop*\n.\n<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo [*bar*](/url)*\n.\n<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>\n````````````````````````````````\n\n\nThere can be no empty emphasis or strong emphasis:\n\n```````````````````````````````` example\n** is not an empty emphasis\n.\n<p>** is not an empty emphasis</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**** is not an empty strong emphasis\n.\n<p>**** is not an empty strong emphasis</p>\n````````````````````````````````\n\n\n\nRule 10:\n\nAny nonempty sequence of inline elements can be the contents of an\nstrongly emphasized span.\n\n```````````````````````````````` example\n**foo [bar](/url)**\n.\n<p><strong>foo <a href=\"/url\">bar</a></strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo\nbar**\n.\n<p><strong>foo\nbar</strong></p>\n````````````````````````````````\n\n\nIn particular, emphasis and strong emphasis can be nested\ninside strong emphasis:\n\n```````````````````````````````` example\n__foo _bar_ baz__\n.\n<p><strong>foo <em>bar</em> baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo __bar__ baz__\n.\n<p><strong>foo <strong>bar</strong> baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo__ bar__\n.\n<p><strong><strong>foo</strong> bar</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo **bar****\n.\n<p><strong>foo <strong>bar</strong></strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo *bar* baz**\n.\n<p><strong>foo <em>bar</em> baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo*bar*baz**\n.\n<p><strong>foo<em>bar</em>baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n***foo* bar**\n.\n<p><strong><em>foo</em> bar</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo *bar***\n.\n<p><strong>foo <em>bar</em></strong></p>\n````````````````````````````````\n\n\nIndefinite levels of nesting are possible:\n\n```````````````````````````````` example\n**foo *bar **baz**\nbim* bop**\n.\n<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo [*bar*](/url)**\n.\n<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>\n````````````````````````````````\n\n\nThere can be no empty emphasis or strong emphasis:\n\n```````````````````````````````` example\n__ is not an empty emphasis\n.\n<p>__ is not an empty emphasis</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____ is not an empty strong emphasis\n.\n<p>____ is not an empty strong emphasis</p>\n````````````````````````````````\n\n\n\nRule 11:\n\n```````````````````````````````` example\nfoo ***\n.\n<p>foo ***</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *\\**\n.\n<p>foo <em>*</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *_*\n.\n<p>foo <em>_</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *****\n.\n<p>foo *****</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo **\\***\n.\n<p>foo <strong>*</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo **_**\n.\n<p>foo <strong>_</strong></p>\n````````````````````````````````\n\n\nNote that when delimiters do not match evenly, Rule 11 determines\nthat the excess literal `*` characters will appear outside of the\nemphasis, rather than inside it:\n\n```````````````````````````````` example\n**foo*\n.\n<p>*<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo**\n.\n<p><em>foo</em>*</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n***foo**\n.\n<p>*<strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n****foo*\n.\n<p>***<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo***\n.\n<p><strong>foo</strong>*</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo****\n.\n<p><em>foo</em>***</p>\n````````````````````````````````\n\n\n\nRule 12:\n\n```````````````````````````````` example\nfoo ___\n.\n<p>foo ___</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _\\__\n.\n<p>foo <em>_</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _*_\n.\n<p>foo <em>*</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _____\n.\n<p>foo _____</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo __\\___\n.\n<p>foo <strong>_</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo __*__\n.\n<p>foo <strong>*</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo_\n.\n<p>_<em>foo</em></p>\n````````````````````````````````\n\n\nNote that when delimiters do not match evenly, Rule 12 determines\nthat the excess literal `_` characters will appear outside of the\nemphasis, rather than inside it:\n\n```````````````````````````````` example\n_foo__\n.\n<p><em>foo</em>_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n___foo__\n.\n<p>_<strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo_\n.\n<p>___<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo___\n.\n<p><strong>foo</strong>_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo____\n.\n<p><em>foo</em>___</p>\n````````````````````````````````\n\n\nRule 13 implies that if you want emphasis nested directly inside\nemphasis, you must use different delimiters:\n\n```````````````````````````````` example\n**foo**\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*_foo_*\n.\n<p><em><em>foo</em></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo__\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_*foo*_\n.\n<p><em><em>foo</em></em></p>\n````````````````````````````````\n\n\nHowever, strong emphasis within strong emphasis is possible without\nswitching delimiters:\n\n```````````````````````````````` example\n****foo****\n.\n<p><strong><strong>foo</strong></strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo____\n.\n<p><strong><strong>foo</strong></strong></p>\n````````````````````````````````\n\n\n\nRule 13 can be applied to arbitrarily long sequences of\ndelimiters:\n\n```````````````````````````````` example\n******foo******\n.\n<p><strong><strong><strong>foo</strong></strong></strong></p>\n````````````````````````````````\n\n\nRule 14:\n\n```````````````````````````````` example\n***foo***\n.\n<p><em><strong>foo</strong></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_____foo_____\n.\n<p><em><strong><strong>foo</strong></strong></em></p>\n````````````````````````````````\n\n\nRule 15:\n\n```````````````````````````````` example\n*foo _bar* baz_\n.\n<p><em>foo _bar</em> baz_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo __bar *baz bim__ bam*\n.\n<p><em>foo <strong>bar *baz bim</strong> bam</em></p>\n````````````````````````````````\n\n\nRule 16:\n\n```````````````````````````````` example\n**foo **bar baz**\n.\n<p>**foo <strong>bar baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo *bar baz*\n.\n<p>*foo <em>bar baz</em></p>\n````````````````````````````````\n\n\nRule 17:\n\n```````````````````````````````` example\n*[bar*](/url)\n.\n<p>*<a href=\"/url\">bar*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo [bar_](/url)\n.\n<p>_foo <a href=\"/url\">bar_</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*<img src=\"foo\" title=\"*\"/>\n.\n<p>*<img src=\"foo\" title=\"*\"/></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**<a href=\"**\">\n.\n<p>**<a href=\"**\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__<a href=\"__\">\n.\n<p>__<a href=\"__\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*a `*`*\n.\n<p><em>a <code>*</code></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_a `_`_\n.\n<p><em>a <code>_</code></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**a<http://foo.bar/?q=**>\n.\n<p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__a<http://foo.bar/?q=__>\n.\n<p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>\n````````````````````````````````\n\n\n<div class=\"extension\">\n\n## Strikethrough (extension)\n\nGFM enables the `strikethrough` extension, where an additional emphasis type is\navailable.\n\nStrikethrough text is any text wrapped in two tildes (`~`).\n\n```````````````````````````````` example strikethrough\n~~Hi~~ Hello, world!\n.\n<p><del>Hi</del> Hello, world!</p>\n````````````````````````````````\n\nAs with regular emphasis delimiters, a new paragraph will cause strikethrough\nparsing to cease:\n\n```````````````````````````````` example strikethrough\nThis ~~has a\n\nnew paragraph~~.\n.\n<p>This ~~has a</p>\n<p>new paragraph~~.</p>\n````````````````````````````````\n\n</div>\n\n## Links\n\nA link contains [link text] (the visible text), a [link destination]\n(the URI that is the link destination), and optionally a [link title].\nThere are two basic kinds of links in Markdown.  In [inline links] the\ndestination and title are given immediately after the link text.  In\n[reference links] the destination and title are defined elsewhere in\nthe document.\n\nA [link text](@) consists of a sequence of zero or more\ninline elements enclosed by square brackets (`[` and `]`).  The\nfollowing rules apply:\n\n- Links may not contain other links, at any level of nesting. If\n  multiple otherwise valid link definitions appear nested inside each\n  other, the inner-most definition is used.\n\n- Brackets are allowed in the [link text] only if (a) they\n  are backslash-escaped or (b) they appear as a matched pair of brackets,\n  with an open bracket `[`, a sequence of zero or more inlines, and\n  a close bracket `]`.\n\n- Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly\n  than the brackets in link text.  Thus, for example,\n  `` [foo`]` `` could not be a link text, since the second `]`\n  is part of a code span.\n\n- The brackets in link text bind more tightly than markers for\n  [emphasis and strong emphasis]. Thus, for example, `*[foo*](url)` is a link.\n\nA [link destination](@) consists of either\n\n- a sequence of zero or more characters between an opening `<` and a\n  closing `>` that contains no line breaks or unescaped\n  `<` or `>` characters, or\n\n- a nonempty sequence of characters that does not start with\n  `<`, does not include ASCII space or control characters, and\n  includes parentheses only if (a) they are backslash-escaped or\n  (b) they are part of a balanced pair of unescaped parentheses.\n  (Implementations may impose limits on parentheses nesting to\n  avoid performance issues, but at least three levels of nesting\n  should be supported.)\n\nA [link title](@)  consists of either\n\n- a sequence of zero or more characters between straight double-quote\n  characters (`\"`), including a `\"` character only if it is\n  backslash-escaped, or\n\n- a sequence of zero or more characters between straight single-quote\n  characters (`'`), including a `'` character only if it is\n  backslash-escaped, or\n\n- a sequence of zero or more characters between matching parentheses\n  (`(...)`), including a `(` or `)` character only if it is\n  backslash-escaped.\n\nAlthough [link titles] may span multiple lines, they may not contain\na [blank line].\n\nAn [inline link](@) consists of a [link text] followed immediately\nby a left parenthesis `(`, optional [whitespace], an optional\n[link destination], an optional [link title] separated from the link\ndestination by [whitespace], optional [whitespace], and a right\nparenthesis `)`. The link's text consists of the inlines contained\nin the [link text] (excluding the enclosing square brackets).\nThe link's URI consists of the link destination, excluding enclosing\n`<...>` if present, with backslash-escapes in effect as described\nabove.  The link's title consists of the link title, excluding its\nenclosing delimiters, with backslash-escapes in effect as described\nabove.\n\nHere is a simple inline link:\n\n```````````````````````````````` example\n[link](/uri \"title\")\n.\n<p><a href=\"/uri\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nThe title may be omitted:\n\n```````````````````````````````` example\n[link](/uri)\n.\n<p><a href=\"/uri\">link</a></p>\n````````````````````````````````\n\n\nBoth the title and the destination may be omitted:\n\n```````````````````````````````` example\n[link]()\n.\n<p><a href=\"\">link</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link](<>)\n.\n<p><a href=\"\">link</a></p>\n````````````````````````````````\n\nThe destination can only contain spaces if it is\nenclosed in pointy brackets:\n\n```````````````````````````````` example\n[link](/my uri)\n.\n<p>[link](/my uri)</p>\n````````````````````````````````\n\n```````````````````````````````` example\n[link](</my uri>)\n.\n<p><a href=\"/my%20uri\">link</a></p>\n````````````````````````````````\n\nThe destination cannot contain line breaks,\neven if enclosed in pointy brackets:\n\n```````````````````````````````` example\n[link](foo\nbar)\n.\n<p>[link](foo\nbar)</p>\n````````````````````````````````\n\n```````````````````````````````` example\n[link](<foo\nbar>)\n.\n<p>[link](<foo\nbar>)</p>\n````````````````````````````````\n\nThe destination can contain `)` if it is enclosed\nin pointy brackets:\n\n```````````````````````````````` example\n[a](<b)c>)\n.\n<p><a href=\"b)c\">a</a></p>\n````````````````````````````````\n\nPointy brackets that enclose links must be unescaped:\n\n```````````````````````````````` example\n[link](<foo\\>)\n.\n<p>[link](&lt;foo&gt;)</p>\n````````````````````````````````\n\nThese are not links, because the opening pointy bracket\nis not matched properly:\n\n```````````````````````````````` example\n[a](<b)c\n[a](<b)c>\n[a](<b>c)\n.\n<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>\n````````````````````````````````\n\nParentheses inside the link destination may be escaped:\n\n```````````````````````````````` example\n[link](\\(foo\\))\n.\n<p><a href=\"(foo)\">link</a></p>\n````````````````````````````````\n\nAny number of parentheses are allowed without escaping, as long as they are\nbalanced:\n\n```````````````````````````````` example\n[link](foo(and(bar)))\n.\n<p><a href=\"foo(and(bar))\">link</a></p>\n````````````````````````````````\n\nHowever, if you have unbalanced parentheses, you need to escape or use the\n`<...>` form:\n\n```````````````````````````````` example\n[link](foo\\(and\\(bar\\))\n.\n<p><a href=\"foo(and(bar)\">link</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link](<foo(and(bar)>)\n.\n<p><a href=\"foo(and(bar)\">link</a></p>\n````````````````````````````````\n\n\nParentheses and other symbols can also be escaped, as usual\nin Markdown:\n\n```````````````````````````````` example\n[link](foo\\)\\:)\n.\n<p><a href=\"foo):\">link</a></p>\n````````````````````````````````\n\n\nA link can contain fragment identifiers and queries:\n\n```````````````````````````````` example\n[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n.\n<p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>\n````````````````````````````````\n\n\nNote that a backslash before a non-escapable character is\njust a backslash:\n\n```````````````````````````````` example\n[link](foo\\bar)\n.\n<p><a href=\"foo%5Cbar\">link</a></p>\n````````````````````````````````\n\n\nURL-escaping should be left alone inside the destination, as all\nURL-escaped characters are also valid URL characters. Entity and\nnumerical character references in the destination will be parsed\ninto the corresponding Unicode code points, as usual.  These may\nbe optionally URL-escaped when written as HTML, but this spec\ndoes not enforce any particular policy for rendering URLs in\nHTML or other formats.  Renderers may make different decisions\nabout how to escape or normalize URLs in the output.\n\n```````````````````````````````` example\n[link](foo%20b&auml;)\n.\n<p><a href=\"foo%20b%C3%A4\">link</a></p>\n````````````````````````````````\n\n\nNote that, because titles can often be parsed as destinations,\nif you try to omit the destination and keep the title, you'll\nget unexpected results:\n\n```````````````````````````````` example\n[link](\"title\")\n.\n<p><a href=\"%22title%22\">link</a></p>\n````````````````````````````````\n\n\nTitles may be in single quotes, double quotes, or parentheses:\n\n```````````````````````````````` example\n[link](/url \"title\")\n[link](/url 'title')\n[link](/url (title))\n.\n<p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nBackslash escapes and entity and numeric character references\nmay be used in titles:\n\n```````````````````````````````` example\n[link](/url \"title \\\"&quot;\")\n.\n<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>\n````````````````````````````````\n\n\nTitles must be separated from the link using a [whitespace].\nOther [Unicode whitespace] like non-breaking space doesn't work.\n\n```````````````````````````````` example\n[link](/url\u00a0\"title\")\n.\n<p><a href=\"/url%C2%A0%22title%22\">link</a></p>\n````````````````````````````````\n\n\nNested balanced quotes are not allowed without escaping:\n\n```````````````````````````````` example\n[link](/url \"title \"and\" title\")\n.\n<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>\n````````````````````````````````\n\n\nBut it is easy to work around this by using a different quote type:\n\n```````````````````````````````` example\n[link](/url 'title \"and\" title')\n.\n<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>\n````````````````````````````````\n\n\n(Note:  `Markdown.pl` did allow double quotes inside a double-quoted\ntitle, and its test suite included a test demonstrating this.\nBut it is hard to see a good rationale for the extra complexity this\nbrings, since there are already many ways---backslash escaping,\nentity and numeric character references, or using a different\nquote type for the enclosing title---to write titles containing\ndouble quotes.  `Markdown.pl`'s handling of titles has a number\nof other strange features.  For example, it allows single-quoted\ntitles in inline links, but not reference links.  And, in\nreference links but not inline links, it allows a title to begin\nwith `\"` and end with `)`.  `Markdown.pl` 1.0.1 even allows\ntitles with no closing quotation mark, though 1.0.2b8 does not.\nIt seems preferable to adopt a simple, rational rule that works\nthe same way in inline links and link reference definitions.)\n\n[Whitespace] is allowed around the destination and title:\n\n```````````````````````````````` example\n[link](   /uri\n  \"title\"  )\n.\n<p><a href=\"/uri\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nBut it is not allowed between the link text and the\nfollowing parenthesis:\n\n```````````````````````````````` example\n[link] (/uri)\n.\n<p>[link] (/uri)</p>\n````````````````````````````````\n\n\nThe link text may contain balanced brackets, but not unbalanced ones,\nunless they are escaped:\n\n```````````````````````````````` example\n[link [foo [bar]]](/uri)\n.\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link] bar](/uri)\n.\n<p>[link] bar](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link [bar](/uri)\n.\n<p>[link <a href=\"/uri\">bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link \\[bar](/uri)\n.\n<p><a href=\"/uri\">link [bar</a></p>\n````````````````````````````````\n\n\nThe link text may contain inline content:\n\n```````````````````````````````` example\n[link *foo **bar** `#`*](/uri)\n.\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[![moon](moon.jpg)](/uri)\n.\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n````````````````````````````````\n\n\nHowever, links may not contain other links, at any level of nesting.\n\n```````````````````````````````` example\n[foo [bar](/uri)](/uri)\n.\n<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *[bar [baz](/uri)](/uri)*](/uri)\n.\n<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![[[foo](uri1)](uri2)](uri3)\n.\n<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of link text grouping over\nemphasis grouping:\n\n```````````````````````````````` example\n*[foo*](/uri)\n.\n<p>*<a href=\"/uri\">foo*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar](baz*)\n.\n<p><a href=\"baz*\">foo *bar</a></p>\n````````````````````````````````\n\n\nNote that brackets that *aren't* part of links do not take\nprecedence:\n\n```````````````````````````````` example\n*foo [bar* baz]\n.\n<p><em>foo [bar</em> baz]</p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of HTML tags, code spans,\nand autolinks over link grouping:\n\n```````````````````````````````` example\n[foo <bar attr=\"](baz)\">\n.\n<p>[foo <bar attr=\"](baz)\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo`](/uri)`\n.\n<p>[foo<code>](/uri)</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo<http://example.com/?search=](uri)>\n.\n<p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>\n````````````````````````````````\n\n\nThere are three kinds of [reference link](@)s:\n[full](#full-reference-link), [collapsed](#collapsed-reference-link),\nand [shortcut](#shortcut-reference-link).\n\nA [full reference link](@)\nconsists of a [link text] immediately followed by a [link label]\nthat [matches] a [link reference definition] elsewhere in the document.\n\nA [link label](@)  begins with a left bracket (`[`) and ends\nwith the first right bracket (`]`) that is not backslash-escaped.\nBetween these brackets there must be at least one [non-whitespace character].\nUnescaped square bracket characters are not allowed inside the\nopening and closing square brackets of [link labels].  A link\nlabel can have at most 999 characters inside the square\nbrackets.\n\nOne label [matches](@)\nanother just in case their normalized forms are equal.  To normalize a\nlabel, strip off the opening and closing brackets,\nperform the *Unicode case fold*, strip leading and trailing\n[whitespace] and collapse consecutive internal\n[whitespace] to a single space.  If there are multiple\nmatching reference link definitions, the one that comes first in the\ndocument is used.  (It is desirable in such cases to emit a warning.)\n\nThe contents of the first link label are parsed as inlines, which are\nused as the link's text.  The link's URI and title are provided by the\nmatching [link reference definition].\n\nHere is a simple example:\n\n```````````````````````````````` example\n[foo][bar]\n\n[bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\nThe rules for the [link text] are the same as with\n[inline links].  Thus:\n\nThe link text may contain balanced brackets, but not unbalanced ones,\nunless they are escaped:\n\n```````````````````````````````` example\n[link [foo [bar]]][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link \\[bar][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link [bar</a></p>\n````````````````````````````````\n\n\nThe link text may contain inline content:\n\n```````````````````````````````` example\n[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n````````````````````````````````\n\n\nHowever, links may not contain other links, at any level of nesting.\n\n```````````````````````````````` example\n[foo [bar](/uri)][ref]\n\n[ref]: /uri\n.\n<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n.\n<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n````````````````````````````````\n\n\n(In the examples above, we have two [shortcut reference links]\ninstead of one [full reference link].)\n\nThe following cases illustrate the precedence of link text grouping over\nemphasis grouping:\n\n```````````````````````````````` example\n*[foo*][ref]\n\n[ref]: /uri\n.\n<p>*<a href=\"/uri\">foo*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">foo *bar</a></p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of HTML tags, code spans,\nand autolinks over link grouping:\n\n```````````````````````````````` example\n[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n.\n<p>[foo <bar attr=\"][ref]\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo`][ref]`\n\n[ref]: /uri\n.\n<p>[foo<code>][ref]</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n.\n<p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>\n````````````````````````````````\n\n\nMatching is case-insensitive:\n\n```````````````````````````````` example\n[foo][BaR]\n\n[bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\nUnicode case fold is used:\n\n```````````````````````````````` example\n[\u0422\u043e\u043b\u043f\u043e\u0439][\u0422\u043e\u043b\u043f\u043e\u0439] is a Russian word.\n\n[\u0422\u041e\u041b\u041f\u041e\u0419]: /url\n.\n<p><a href=\"/url\">\u0422\u043e\u043b\u043f\u043e\u0439</a> is a Russian word.</p>\n````````````````````````````````\n\n\nConsecutive internal [whitespace] is treated as one space for\npurposes of determining matching:\n\n```````````````````````````````` example\n[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n.\n<p><a href=\"/url\">Baz</a></p>\n````````````````````````````````\n\n\nNo [whitespace] is allowed between the [link text] and the\n[link label]:\n\n```````````````````````````````` example\n[foo] [bar]\n\n[bar]: /url \"title\"\n.\n<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n[bar]\n\n[bar]: /url \"title\"\n.\n<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>\n````````````````````````````````\n\n\nThis is a departure from John Gruber's original Markdown syntax\ndescription, which explicitly allows whitespace between the link\ntext and the link label.  It brings reference links in line with\n[inline links], which (according to both original Markdown and\nthis spec) cannot have whitespace after the link text.  More\nimportantly, it prevents inadvertent capture of consecutive\n[shortcut reference links]. If whitespace is allowed between the\nlink text and the link label, then in the following we will have\na single reference link, not two shortcut reference links, as\nintended:\n\n``` markdown\n[foo]\n[bar]\n\n[foo]: /url1\n[bar]: /url2\n```\n\n(Note that [shortcut reference links] were introduced by Gruber\nhimself in a beta version of `Markdown.pl`, but never included\nin the official syntax description.  Without shortcut reference\nlinks, it is harmless to allow space between the link text and\nlink label; but once shortcut references are introduced, it is\ntoo dangerous to allow this, as it frequently leads to\nunintended results.)\n\nWhen there are multiple matching [link reference definitions],\nthe first is used:\n\n```````````````````````````````` example\n[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n.\n<p><a href=\"/url1\">bar</a></p>\n````````````````````````````````\n\n\nNote that matching is performed on normalized strings, not parsed\ninline content.  So the following does not match, even though the\nlabels define equivalent inline content:\n\n```````````````````````````````` example\n[bar][foo\\!]\n\n[foo!]: /url\n.\n<p>[bar][foo!]</p>\n````````````````````````````````\n\n\n[Link labels] cannot contain brackets, unless they are\nbackslash-escaped:\n\n```````````````````````````````` example\n[foo][ref[]\n\n[ref[]: /uri\n.\n<p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo][ref[bar]]\n\n[ref[bar]]: /uri\n.\n<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[[foo]]]\n\n[[[foo]]]: /url\n.\n<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo][ref\\[]\n\n[ref\\[]: /uri\n.\n<p><a href=\"/uri\">foo</a></p>\n````````````````````````````````\n\n\nNote that in this example `]` is not backslash-escaped:\n\n```````````````````````````````` example\n[bar\\\\]: /uri\n\n[bar\\\\]\n.\n<p><a href=\"/uri\">bar\\</a></p>\n````````````````````````````````\n\n\nA [link label] must contain at least one [non-whitespace character]:\n\n```````````````````````````````` example\n[]\n\n[]: /uri\n.\n<p>[]</p>\n<p>[]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[\n ]\n\n[\n ]: /uri\n.\n<p>[\n]</p>\n<p>[\n]: /uri</p>\n````````````````````````````````\n\n\nA [collapsed reference link](@)\nconsists of a [link label] that [matches] a\n[link reference definition] elsewhere in the\ndocument, followed by the string `[]`.\nThe contents of the first link label are parsed as inlines,\nwhich are used as the link's text.  The link's URI and title are\nprovided by the matching reference link definition.  Thus,\n`[foo][]` is equivalent to `[foo][foo]`.\n\n```````````````````````````````` example\n[foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n[Foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n````````````````````````````````\n\n\n\nAs with full reference links, [whitespace] is not\nallowed between the two sets of brackets:\n\n```````````````````````````````` example\n[foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>\n````````````````````````````````\n\n\nA [shortcut reference link](@)\nconsists of a [link label] that [matches] a\n[link reference definition] elsewhere in the\ndocument and is not followed by `[]` or a link label.\nThe contents of the first link label are parsed as inlines,\nwhich are used as the link's text.  The link's URI and title\nare provided by the matching link reference definition.\nThus, `[foo]` is equivalent to `[foo][]`.\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n.\n<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[bar [foo]\n\n[foo]: /url\n.\n<p>[[bar <a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n[Foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n````````````````````````````````\n\n\nA space after the link text should be preserved:\n\n```````````````````````````````` example\n[foo] bar\n\n[foo]: /url\n.\n<p><a href=\"/url\">foo</a> bar</p>\n````````````````````````````````\n\n\nIf you just want bracketed text, you can backslash-escape the\nopening bracket to avoid links:\n\n```````````````````````````````` example\n\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>[foo]</p>\n````````````````````````````````\n\n\nNote that this is a link, because a link label ends with the first\nfollowing closing bracket:\n\n```````````````````````````````` example\n[foo*]: /url\n\n*[foo*]\n.\n<p>*<a href=\"/url\">foo*</a></p>\n````````````````````````````````\n\n\nFull and compact references take precedence over shortcut\nreferences:\n\n```````````````````````````````` example\n[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo][]\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a></p>\n````````````````````````````````\n\nInline links also take precedence:\n\n```````````````````````````````` example\n[foo]()\n\n[foo]: /url1\n.\n<p><a href=\"\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo](not a link)\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a>(not a link)</p>\n````````````````````````````````\n\nIn the following case `[bar][baz]` is parsed as a reference,\n`[foo]` as normal text:\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url\n.\n<p>[foo]<a href=\"/url\">bar</a></p>\n````````````````````````````````\n\n\nHere, though, `[foo][bar]` is parsed as a reference, since\n`[bar]` is defined:\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>\n````````````````````````````````\n\n\nHere `[foo]` is not parsed as a shortcut reference, because it\nis followed by a link label (even though `[bar]` is not defined):\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n.\n<p>[foo]<a href=\"/url1\">bar</a></p>\n````````````````````````````````\n\n\n\n## Images\n\nSyntax for images is like the syntax for links, with one\ndifference. Instead of [link text], we have an\n[image description](@).  The rules for this are the\nsame as for [link text], except that (a) an\nimage description starts with `![` rather than `[`, and\n(b) an image description may contain links.\nAn image description has inline elements\nas its contents.  When an image is rendered to HTML,\nthis is standardly used as the image's `alt` attribute.\n\n```````````````````````````````` example\n![foo](/url \"title\")\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo ![bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo [bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n````````````````````````````````\n\n\nThough this spec is concerned with parsing, not rendering, it is\nrecommended that in rendering to HTML, only the plain string content\nof the [image description] be used.  Note that in\nthe above example, the alt attribute's value is `foo bar`, not `foo\n[bar](/url)` or `foo <a href=\"/url\">bar</a>`.  Only the plain string\ncontent is rendered, without formatting.\n\n```````````````````````````````` example\n![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo](train.jpg)\n.\n<p><img src=\"train.jpg\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nMy ![foo bar](/path/to/train.jpg  \"title\"   )\n.\n<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo](<url>)\n.\n<p><img src=\"url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![](/url)\n.\n<p><img src=\"/url\" alt=\"\" /></p>\n````````````````````````````````\n\n\nReference-style:\n\n```````````````````````````````` example\n![foo][bar]\n\n[bar]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo][bar]\n\n[BAR]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\nCollapsed:\n\n```````````````````````````````` example\n![foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\nThe labels are case-insensitive:\n\n```````````````````````````````` example\n![Foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\nAs with reference links, [whitespace] is not allowed\nbetween the two sets of brackets:\n\n```````````````````````````````` example\n![foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>\n````````````````````````````````\n\n\nShortcut:\n\n```````````````````````````````` example\n![foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\nNote that link labels cannot contain unescaped brackets:\n\n```````````````````````````````` example\n![[foo]]\n\n[[foo]]: /url \"title\"\n.\n<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n![Foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\nIf you just want a literal `!` followed by bracketed text, you can\nbackslash-escape the opening `[`:\n\n```````````````````````````````` example\n!\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>![foo]</p>\n````````````````````````````````\n\n\nIf you want a link after a literal `!`, backslash-escape the\n`!`:\n\n```````````````````````````````` example\n\\![foo]\n\n[foo]: /url \"title\"\n.\n<p>!<a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n## Autolinks\n\n[Autolink](@)s are absolute URIs and email addresses inside\n`<` and `>`. They are parsed as links, with the URL or email address\nas the link label.\n\nA [URI autolink](@) consists of `<`, followed by an\n[absolute URI] followed by `>`.  It is parsed as\na link to the URI, with the URI as the link's label.\n\nAn [absolute URI](@),\nfor these purposes, consists of a [scheme] followed by a colon (`:`)\nfollowed by zero or more characters other than ASCII\n[whitespace] and control characters, `<`, and `>`.  If\nthe URI includes these characters, they must be percent-encoded\n(e.g. `%20` for a space).\n\nFor purposes of this spec, a [scheme](@) is any sequence\nof 2--32 characters beginning with an ASCII letter and followed\nby any combination of ASCII letters, digits, or the symbols plus\n(\"+\"), period (\".\"), or hyphen (\"-\").\n\nHere are some valid autolinks:\n\n```````````````````````````````` example\n<http://foo.bar.baz>\n.\n<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://foo.bar.baz/test?q=hello&id=22&boolean>\n.\n<p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<irc://foo.bar:2233/baz>\n.\n<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>\n````````````````````````````````\n\n\nUppercase is also fine:\n\n```````````````````````````````` example\n<MAILTO:FOO@BAR.BAZ>\n.\n<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>\n````````````````````````````````\n\n\nNote that many strings that count as [absolute URIs] for\npurposes of this spec are not valid URIs, because their\nschemes are not registered or because of other problems\nwith their syntax:\n\n```````````````````````````````` example\n<a+b+c:d>\n.\n<p><a href=\"a+b+c:d\">a+b+c:d</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<made-up-scheme://foo,bar>\n.\n<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://../>\n.\n<p><a href=\"http://../\">http://../</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<localhost:5001/foo>\n.\n<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>\n````````````````````````````````\n\n\nSpaces are not allowed in autolinks:\n\n```````````````````````````````` example\n<http://foo.bar/baz bim>\n.\n<p>&lt;http://foo.bar/baz bim&gt;</p>\n````````````````````````````````\n\n\nBackslash-escapes do not work inside autolinks:\n\n```````````````````````````````` example\n<http://example.com/\\[\\>\n.\n<p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>\n````````````````````````````````\n\n\nAn [email autolink](@)\nconsists of `<`, followed by an [email address],\nfollowed by `>`.  The link's label is the email address,\nand the URL is `mailto:` followed by the email address.\n\nAn [email address](@),\nfor these purposes, is anything that matches\nthe [non-normative regex from the HTML5\nspec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)):\n\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\n    (?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\nExamples of email autolinks:\n\n```````````````````````````````` example\n<foo@bar.example.com>\n.\n<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<foo+special@Bar.baz-bar0.com>\n.\n<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>\n````````````````````````````````\n\n\nBackslash-escapes do not work inside email autolinks:\n\n```````````````````````````````` example\n<foo\\+@bar.example.com>\n.\n<p>&lt;foo+@bar.example.com&gt;</p>\n````````````````````````````````\n\n\nThese are not autolinks:\n\n```````````````````````````````` example\n<>\n.\n<p>&lt;&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n< http://foo.bar >\n.\n<p>&lt; http://foo.bar &gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<m:abc>\n.\n<p>&lt;m:abc&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<foo.bar.baz>\n.\n<p>&lt;foo.bar.baz&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nhttp://example.com\n.\n<p>http://example.com</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo@bar.example.com\n.\n<p>foo@bar.example.com</p>\n````````````````````````````````\n\n<div class=\"extension\">\n\n## Autolinks (extension)\n\nGFM enables the `autolink` extension, where autolinks will be recognised in a\ngreater number of conditions.\n\n[Autolink]s can also be constructed without requiring the use of `<` and to `>`\nto delimit them, although they will be recognized under a smaller set of\ncircumstances.  All such recognized autolinks can only come at the beginning of\na line, after whitespace, or any of the delimiting characters `*`, `_`, `~`,\nand `(`.\n\nAn [extended www autolink](@) will be recognized\nwhen the text `www.` is found followed by a [valid domain].\nA [valid domain](@) consists of segments\nof alphanumeric characters, underscores (`_`) and hyphens (`-`)\nseparated by periods (`.`).\nThere must be at least one period,\nand no underscores may be present in the last two segments of the domain.\n\nThe scheme `http` will be inserted automatically:\n\n```````````````````````````````` example autolink\nwww.commonmark.org\n.\n<p><a href=\"http://www.commonmark.org\">www.commonmark.org</a></p>\n````````````````````````````````\n\nAfter a [valid domain], zero or more non-space non-`<` characters may follow:\n\n```````````````````````````````` example autolink\nVisit www.commonmark.org/help for more information.\n.\n<p>Visit <a href=\"http://www.commonmark.org/help\">www.commonmark.org/help</a> for more information.</p>\n````````````````````````````````\n\nWe then apply [extended autolink path validation](@) as follows:\n\nTrailing punctuation (specifically, `?`, `!`, `.`, `,`, `:`, `*`, `_`, and `~`)\nwill not be considered part of the autolink, though they may be included in the\ninterior of the link:\n\n```````````````````````````````` example autolink\nVisit www.commonmark.org.\n\nVisit www.commonmark.org/a.b.\n.\n<p>Visit <a href=\"http://www.commonmark.org\">www.commonmark.org</a>.</p>\n<p>Visit <a href=\"http://www.commonmark.org/a.b\">www.commonmark.org/a.b</a>.</p>\n````````````````````````````````\n\nWhen an autolink ends in `)`, we scan the entire autolink for the total number\nof parentheses.  If there is a greater number of closing parentheses than\nopening ones, we don't consider the unmatched trailing parentheses part of the\nautolink, in order to facilitate including an autolink inside a parenthesis:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=Markup+(business)\n\nwww.google.com/search?q=Markup+(business)))\n\n(www.google.com/search?q=Markup+(business))\n\n(www.google.com/search?q=Markup+(business)\n.\n<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>))</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>)</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n````````````````````````````````\n\nThis check is only done when the link ends in a closing parentheses `)`, so if\nthe only parentheses are in the interior of the autolink, no special rules are\napplied:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=(business))+ok\n.\n<p><a href=\"http://www.google.com/search?q=(business))+ok\">www.google.com/search?q=(business))+ok</a></p>\n````````````````````````````````\n\nIf an autolink ends in a semicolon (`;`), we check to see if it appears to\nresemble an [entity reference][entity references]; if the preceding text is `&`\nfollowed by one or more alphanumeric characters.  If so, it is excluded from\nthe autolink:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=commonmark&hl=en\n\nwww.google.com/search?q=commonmark&hl;\n.\n<p><a href=\"http://www.google.com/search?q=commonmark&amp;hl=en\">www.google.com/search?q=commonmark&amp;hl=en</a></p>\n<p><a href=\"http://www.google.com/search?q=commonmark\">www.google.com/search?q=commonmark</a>&amp;hl;</p>\n````````````````````````````````\n\n`<` immediately ends an autolink.\n\n```````````````````````````````` example autolink\nwww.commonmark.org/he<lp\n.\n<p><a href=\"http://www.commonmark.org/he\">www.commonmark.org/he</a>&lt;lp</p>\n````````````````````````````````\n\nAn [extended url autolink](@) will be recognised when one of the schemes\n`http://`, `https://`, or `ftp://`, followed by a [valid domain], then zero or\nmore non-space non-`<` characters according to\n[extended autolink path validation]:\n\n```````````````````````````````` example autolink\nhttp://commonmark.org\n\n(Visit https://encrypted.google.com/search?q=Markup+(business))\n\nAnonymous FTP is available at ftp://foo.bar.baz.\n.\n<p><a href=\"http://commonmark.org\">http://commonmark.org</a></p>\n<p>(Visit <a href=\"https://encrypted.google.com/search?q=Markup+(business)\">https://encrypted.google.com/search?q=Markup+(business)</a>)</p>\n<p>Anonymous FTP is available at <a href=\"ftp://foo.bar.baz\">ftp://foo.bar.baz</a>.</p>\n````````````````````````````````\n\n\nAn [extended email autolink](@) will be recognised when an email address is\nrecognised within any text node.  Email addresses are recognised according to\nthe following rules:\n\n* One ore more characters which are alphanumeric, or `.`, `-`, `_`, or `+`.\n* An `@` symbol.\n* One or more characters which are alphanumeric, or `-` or `_`,\n  separated by periods (`.`).\n  There must be at least one period.\n  The last character must not be one of `-` or `_`.\n\nThe scheme `mailto:` will automatically be added to the generated link:\n\n```````````````````````````````` example autolink\nfoo@bar.baz\n.\n<p><a href=\"mailto:foo@bar.baz\">foo@bar.baz</a></p>\n````````````````````````````````\n\n`+` can occur before the `@`, but not after.\n\n```````````````````````````````` example autolink\nhello@mail+xyz.example isn't valid, but hello+xyz@mail.example is.\n.\n<p>hello@mail+xyz.example isn't valid, but <a href=\"mailto:hello+xyz@mail.example\">hello+xyz@mail.example</a> is.</p>\n````````````````````````````````\n\n`.`, `-`, and `_` can occur on both sides of the `@`, but only `.` may occur at\nthe end of the email address, in which case it will not be considered part of\nthe address:\n\n```````````````````````````````` example autolink\na.b-c_d@a.b\n\na.b-c_d@a.b.\n\na.b-c_d@a.b-\n\na.b-c_d@a.b_\n.\n<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a></p>\n<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a>.</p>\n<p>a.b-c_d@a.b-</p>\n<p>a.b-c_d@a.b_</p>\n````````````````````````````````\n\n</div>\n\n## Raw HTML\n\nText between `<` and `>` that looks like an HTML tag is parsed as a\nraw HTML tag and will be rendered in HTML without escaping.\nTag and attribute names are not limited to current HTML tags,\nso custom tags (and even, say, DocBook tags) may be used.\n\nHere is the grammar for tags:\n\nA [tag name](@) consists of an ASCII letter\nfollowed by zero or more ASCII letters, digits, or\nhyphens (`-`).\n\nAn [attribute](@) consists of [whitespace],\nan [attribute name], and an optional\n[attribute value specification].\n\nAn [attribute name](@)\nconsists of an ASCII letter, `_`, or `:`, followed by zero or more ASCII\nletters, digits, `_`, `.`, `:`, or `-`.  (Note:  This is the XML\nspecification restricted to ASCII.  HTML5 is laxer.)\n\nAn [attribute value specification](@)\nconsists of optional [whitespace],\na `=` character, optional [whitespace], and an [attribute\nvalue].\n\nAn [attribute value](@)\nconsists of an [unquoted attribute value],\na [single-quoted attribute value], or a [double-quoted attribute value].\n\nAn [unquoted attribute value](@)\nis a nonempty string of characters not\nincluding [whitespace], `\"`, `'`, `=`, `<`, `>`, or `` ` ``.\n\nA [single-quoted attribute value](@)\nconsists of `'`, zero or more\ncharacters not including `'`, and a final `'`.\n\nA [double-quoted attribute value](@)\nconsists of `\"`, zero or more\ncharacters not including `\"`, and a final `\"`.\n\nAn [open tag](@) consists of a `<` character, a [tag name],\nzero or more [attributes], optional [whitespace], an optional `/`\ncharacter, and a `>` character.\n\nA [closing tag](@) consists of the string `</`, a\n[tag name], optional [whitespace], and the character `>`.\n\nAn [HTML comment](@) consists of `<!-->`, `<!--->`, or  `<!--`, a string of\ncharacters not including the string `-->`, and `-->` (see the\n[HTML spec](https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state)).\n\nA [processing instruction](@)\nconsists of the string `<?`, a string\nof characters not including the string `?>`, and the string\n`?>`.\n\nA [declaration](@) consists of the\nstring `<!`, a name consisting of one or more uppercase ASCII letters,\n[whitespace], a string of characters not including the\ncharacter `>`, and the character `>`.\n\nA [CDATA section](@) consists of\nthe string `<![CDATA[`, a string of characters not including the string\n`]]>`, and the string `]]>`.\n\nAn [HTML tag](@) consists of an [open tag], a [closing tag],\nan [HTML comment], a [processing instruction], a [declaration],\nor a [CDATA section].\n\nHere are some simple open tags:\n\n```````````````````````````````` example\n<a><bab><c2c>\n.\n<p><a><bab><c2c></p>\n````````````````````````````````\n\n\nEmpty elements:\n\n```````````````````````````````` example\n<a/><b2/>\n.\n<p><a/><b2/></p>\n````````````````````````````````\n\n\n[Whitespace] is allowed:\n\n```````````````````````````````` example\n<a  /><b2\ndata=\"foo\" >\n.\n<p><a  /><b2\ndata=\"foo\" ></p>\n````````````````````````````````\n\n\nWith attributes:\n\n```````````````````````````````` example\n<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />\n.\n<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>\n````````````````````````````````\n\n\nCustom tag names can be used:\n\n```````````````````````````````` example\nFoo <responsive-image src=\"foo.jpg\" />\n.\n<p>Foo <responsive-image src=\"foo.jpg\" /></p>\n````````````````````````````````\n\n\nIllegal tag names, not parsed as HTML:\n\n```````````````````````````````` example\n<33> <__>\n.\n<p>&lt;33&gt; &lt;__&gt;</p>\n````````````````````````````````\n\n\nIllegal attribute names:\n\n```````````````````````````````` example\n<a h*#ref=\"hi\">\n.\n<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>\n````````````````````````````````\n\n\nIllegal attribute values:\n\n```````````````````````````````` example\n<a href=\"hi'> <a href=hi'>\n.\n<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>\n````````````````````````````````\n\n\nIllegal [whitespace]:\n\n```````````````````````````````` example\n< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n.\n<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>\n````````````````````````````````\n\n\nMissing [whitespace]:\n\n```````````````````````````````` example\n<a href='bar'title=title>\n.\n<p>&lt;a href='bar'title=title&gt;</p>\n````````````````````````````````\n\n\nClosing tags:\n\n```````````````````````````````` example\n</a></foo >\n.\n<p></a></foo ></p>\n````````````````````````````````\n\n\nIllegal attributes in closing tag:\n\n```````````````````````````````` example\n</a href=\"foo\">\n.\n<p>&lt;/a href=&quot;foo&quot;&gt;</p>\n````````````````````````````````\n\n\nComments:\n\n```````````````````````````````` example\nfoo <!-- this is a --\ncomment - with hyphens -->\n.\n<p>foo <!-- this is a --\ncomment - with hyphens --></p>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo <!--> foo -->\n\nfoo <!---> foo -->\n.\n<p>foo <!--> foo --&gt;</p>\n<p>foo <!---> foo --&gt;</p>\n````````````````````````````````\n\n\nProcessing instructions:\n\n```````````````````````````````` example\nfoo <?php echo $a; ?>\n.\n<p>foo <?php echo $a; ?></p>\n````````````````````````````````\n\n\nDeclarations:\n\n```````````````````````````````` example\nfoo <!ELEMENT br EMPTY>\n.\n<p>foo <!ELEMENT br EMPTY></p>\n````````````````````````````````\n\n\nCDATA sections:\n\n```````````````````````````````` example\nfoo <![CDATA[>&<]]>\n.\n<p>foo <![CDATA[>&<]]></p>\n````````````````````````````````\n\n\nEntity and numeric character references are preserved in HTML\nattributes:\n\n```````````````````````````````` example\nfoo <a href=\"&ouml;\">\n.\n<p>foo <a href=\"&ouml;\"></p>\n````````````````````````````````\n\n\nBackslash escapes do not work in HTML attributes:\n\n```````````````````````````````` example\nfoo <a href=\"\\*\">\n.\n<p>foo <a href=\"\\*\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"\\\"\">\n.\n<p>&lt;a href=&quot;&quot;&quot;&gt;</p>\n````````````````````````````````\n\n\n<div class=\"extension\">\n\n## Disallowed Raw HTML (extension)\n\nGFM enables the `tagfilter` extension, where the following HTML tags will be\nfiltered when rendering HTML output:\n\n* `<title>`\n* `<textarea>`\n* `<style>`\n* `<xmp>`\n* `<iframe>`\n* `<noembed>`\n* `<noframes>`\n* `<script>`\n* `<plaintext>`\n\nFiltering is done by replacing the leading `<` with the entity `&lt;`.  These\ntags are chosen in particular as they change how HTML is interpreted in a way\nunique to them (i.e. nested HTML is interpreted differently), and this is\nusually undesireable in the context of other rendered Markdown content.\n\nAll other HTML tags are left untouched.\n\n```````````````````````````````` example tagfilter\n<strong> <title> <style> <em>\n\n<blockquote>\n  <xmp> is disallowed.  <XMP> is also disallowed.\n</blockquote>\n.\n<p><strong> &lt;title> &lt;style> <em></p>\n<blockquote>\n  &lt;xmp> is disallowed.  &lt;XMP> is also disallowed.\n</blockquote>\n````````````````````````````````\n\n</div>\n\n## Hard line breaks\n\nA line break (not in a code span or HTML tag) that is preceded\nby two or more spaces and does not occur at the end of a block\nis parsed as a [hard line break](@) (rendered\nin HTML as a `<br />` tag):\n\n```````````````````````````````` example\nfoo  \nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nFor a more visible alternative, a backslash before the\n[line ending] may be used instead of two spaces:\n\n```````````````````````````````` example\nfoo\\\nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nMore than two spaces can be used:\n\n```````````````````````````````` example\nfoo       \nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nLeading spaces at the beginning of the next line are ignored:\n\n```````````````````````````````` example\nfoo  \n     bar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo\\\n     bar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\nLine breaks can occur inside emphasis, links, and other constructs\nthat allow inline content:\n\n```````````````````````````````` example\n*foo  \nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo\\\nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n````````````````````````````````\n\n\nLine breaks do not occur inside code spans\n\n```````````````````````````````` example\n`code  \nspan`\n.\n<p><code>code   span</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`code\\\nspan`\n.\n<p><code>code\\ span</code></p>\n````````````````````````````````\n\n\nor HTML tags:\n\n```````````````````````````````` example\n<a href=\"foo  \nbar\">\n.\n<p><a href=\"foo  \nbar\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"foo\\\nbar\">\n.\n<p><a href=\"foo\\\nbar\"></p>\n````````````````````````````````\n\n\nHard line breaks are for separating inline content within a block.\nNeither syntax for hard line breaks works at the end of a paragraph or\nother block element:\n\n```````````````````````````````` example\nfoo\\\n.\n<p>foo\\</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo  \n.\n<p>foo</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n### foo\\\n.\n<h3>foo\\</h3>\n````````````````````````````````\n\n\n```````````````````````````````` example\n### foo  \n.\n<h3>foo</h3>\n````````````````````````````````\n\n\n## Soft line breaks\n\nA regular line break (not in a code span or HTML tag) that is not\npreceded by two or more spaces or a backslash is parsed as a\n[softbreak](@).  (A softbreak may be rendered in HTML either as a\n[line ending] or as a space. The result will be the same in\nbrowsers. In the examples here, a [line ending] will be used.)\n\n```````````````````````````````` example\nfoo\nbaz\n.\n<p>foo\nbaz</p>\n````````````````````````````````\n\n\nSpaces at the end of the line and beginning of the next line are\nremoved:\n\n```````````````````````````````` example\nfoo \n baz\n.\n<p>foo\nbaz</p>\n````````````````````````````````\n\n\nA conforming parser may render a soft line break in HTML either as a\nline break or as a space.\n\nA renderer may also provide an option to render soft line breaks\nas hard line breaks.\n\n## Textual content\n\nAny characters not given an interpretation by the above rules will\nbe parsed as plain textual content.\n\n```````````````````````````````` example\nhello $.;'there\n.\n<p>hello $.;'there</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo \u03c7\u03c1\u1fc6\u03bd\n.\n<p>Foo \u03c7\u03c1\u1fc6\u03bd</p>\n````````````````````````````````\n\n\nInternal spaces are preserved verbatim:\n\n```````````````````````````````` example\nMultiple     spaces\n.\n<p>Multiple     spaces</p>\n````````````````````````````````\n\n\n<!-- END TESTS -->\n\n# Appendix: A parsing strategy\n\nIn this appendix we describe some features of the parsing strategy\nused in the CommonMark reference implementations.\n\n## Overview\n\nParsing has two phases:\n\n1. In the first phase, lines of input are consumed and the block\nstructure of the document---its division into paragraphs, block quotes,\nlist items, and so on---is constructed.  Text is assigned to these\nblocks but not parsed. Link reference definitions are parsed and a\nmap of links is constructed.\n\n2. In the second phase, the raw text contents of paragraphs and headings\nare parsed into sequences of Markdown inline elements (strings,\ncode spans, links, emphasis, and so on), using the map of link\nreferences constructed in phase 1.\n\nAt each point in processing, the document is represented as a tree of\n**blocks**.  The root of the tree is a `document` block.  The `document`\nmay have any number of other blocks as **children**.  These children\nmay, in turn, have other blocks as children.  The last child of a block\nis normally considered **open**, meaning that subsequent lines of input\ncan alter its contents.  (Blocks that are not open are **closed**.)\nHere, for example, is a possible document tree, with the open blocks\nmarked by arrows:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n         list_item\n           paragraph\n             \"Qui *quodsi iracundia*\"\n      -> list_item\n        -> paragraph\n             \"aliquando id\"\n```\n\n## Phase 1: block structure\n\nEach line that is processed has an effect on this tree.  The line is\nanalyzed and, depending on its contents, the document may be altered\nin one or more of the following ways:\n\n1. One or more open blocks may be closed.\n2. One or more new blocks may be created as children of the\n   last open block.\n3. Text may be added to the last (deepest) open block remaining\n   on the tree.\n\nOnce a line has been incorporated into the tree in this way,\nit can be discarded, so input can be read in a stream.\n\nFor each line, we follow this procedure:\n\n1. First we iterate through the open blocks, starting with the\nroot document, and descending through last children down to the last\nopen block.  Each block imposes a condition that the line must satisfy\nif the block is to remain open.  For example, a block quote requires a\n`>` character.  A paragraph requires a non-blank line.\nIn this phase we may match all or just some of the open\nblocks.  But we cannot close unmatched blocks yet, because we may have a\n[lazy continuation line].\n\n2.  Next, after consuming the continuation markers for existing\nblocks, we look for new block starts (e.g. `>` for a block quote).\nIf we encounter a new block start, we close any blocks unmatched\nin step 1 before creating the new block as a child of the last\nmatched block.\n\n3.  Finally, we look at the remainder of the line (after block\nmarkers like `>`, list markers, and indentation have been consumed).\nThis is text that can be incorporated into the last open\nblock (a paragraph, code block, heading, or raw HTML).\n\nSetext headings are formed when we see a line of a paragraph\nthat is a [setext heading underline].\n\nReference link definitions are detected when a paragraph is closed;\nthe accumulated text lines are parsed to see if they begin with\none or more reference link definitions.  Any remainder becomes a\nnormal paragraph.\n\nWe can see how this works by considering how the tree above is\ngenerated by four lines of Markdown:\n\n``` markdown\n> Lorem ipsum dolor\nsit amet.\n> - Qui *quodsi iracundia*\n> - aliquando id\n```\n\nAt the outset, our document model is just\n\n``` tree\n-> document\n```\n\nThe first line of our text,\n\n``` markdown\n> Lorem ipsum dolor\n```\n\ncauses a `block_quote` block to be created as a child of our\nopen `document` block, and a `paragraph` block as a child of\nthe `block_quote`.  Then the text is added to the last open\nblock, the `paragraph`:\n\n``` tree\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\"\n```\n\nThe next line,\n\n``` markdown\nsit amet.\n```\n\nis a \"lazy continuation\" of the open `paragraph`, so it gets added\nto the paragraph's text:\n\n``` tree\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n```\n\nThe third line,\n\n``` markdown\n> - Qui *quodsi iracundia*\n```\n\ncauses the `paragraph` block to be closed, and a new `list` block\nopened as a child of the `block_quote`.  A `list_item` is also\nadded as a child of the `list`, and a `paragraph` as a child of\nthe `list_item`.  The text is then added to the new `paragraph`:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n      -> list_item\n        -> paragraph\n             \"Qui *quodsi iracundia*\"\n```\n\nThe fourth line,\n\n``` markdown\n> - aliquando id\n```\n\ncauses the `list_item` (and its child the `paragraph`) to be closed,\nand a new `list_item` opened up as child of the `list`.  A `paragraph`\nis added as a child of the new `list_item`, to contain the text.\nWe thus obtain the final tree:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n         list_item\n           paragraph\n             \"Qui *quodsi iracundia*\"\n      -> list_item\n        -> paragraph\n             \"aliquando id\"\n```\n\n## Phase 2: inline structure\n\nOnce all of the input has been parsed, all open blocks are closed.\n\nWe then \"walk the tree,\" visiting every node, and parse raw\nstring contents of paragraphs and headings as inlines.  At this\npoint we have seen all the link reference definitions, so we can\nresolve reference links as we go.\n\n``` tree\ndocument\n  block_quote\n    paragraph\n      str \"Lorem ipsum dolor\"\n      softbreak\n      str \"sit amet.\"\n    list (type=bullet tight=true bullet_char=-)\n      list_item\n        paragraph\n          str \"Qui \"\n          emph\n            str \"quodsi iracundia\"\n      list_item\n        paragraph\n          str \"aliquando id\"\n```\n\nNotice how the [line ending] in the first paragraph has\nbeen parsed as a `softbreak`, and the asterisks in the first list item\nhave become an `emph`.\n\n### An algorithm for parsing nested emphasis and links\n\nBy far the trickiest part of inline parsing is handling emphasis,\nstrong emphasis, links, and images.  This is done using the following\nalgorithm.\n\nWhen we're parsing inlines and we hit either\n\n- a run of `*` or `_` characters, or\n- a `[` or `![`\n\nwe insert a text node with these symbols as its literal content, and we\nadd a pointer to this text node to the [delimiter stack](@).\n\nThe [delimiter stack] is a doubly linked list.  Each\nelement contains a pointer to a text node, plus information about\n\n- the type of delimiter (`[`, `![`, `*`, `_`)\n- the number of delimiters,\n- whether the delimiter is \"active\" (all are active to start), and\n- whether the delimiter is a potential opener, a potential closer,\n  or both (which depends on what sort of characters precede\n  and follow the delimiters).\n\nWhen we hit a `]` character, we call the *look for link or image*\nprocedure (see below).\n\nWhen we hit the end of the input, we call the *process emphasis*\nprocedure (see below), with `stack_bottom` = NULL.\n\n#### *look for link or image*\n\nStarting at the top of the delimiter stack, we look backwards\nthrough the stack for an opening `[` or `![` delimiter.\n\n- If we don't find one, we return a literal text node `]`.\n\n- If we do find one, but it's not *active*, we remove the inactive\n  delimiter from the stack, and return a literal text node `]`.\n\n- If we find one and it's active, then we parse ahead to see if\n  we have an inline link/image, reference link/image, compact reference\n  link/image, or shortcut reference link/image.\n\n  + If we don't, then we remove the opening delimiter from the\n    delimiter stack and return a literal text node `]`.\n\n  + If we do, then\n\n    * We return a link or image node whose children are the inlines\n      after the text node pointed to by the opening delimiter.\n\n    * We run *process emphasis* on these inlines, with the `[` opener\n      as `stack_bottom`.\n\n    * We remove the opening delimiter.\n\n    * If we have a link (and not an image), we also set all\n      `[` delimiters before the opening delimiter to *inactive*.  (This\n      will prevent us from getting links within links.)\n\n#### *process emphasis*\n\nParameter `stack_bottom` sets a lower bound to how far we\ndescend in the [delimiter stack].  If it is NULL, we can\ngo all the way to the bottom.  Otherwise, we stop before\nvisiting `stack_bottom`.\n\nLet `current_position` point to the element on the [delimiter stack]\njust above `stack_bottom` (or the first element if `stack_bottom`\nis NULL).\n\nWe keep track of the `openers_bottom` for each delimiter\ntype (`*`, `_`) and each length of the closing delimiter run\n(modulo 3).  Initialize this to `stack_bottom`.\n\nThen we repeat the following until we run out of potential\nclosers:\n\n- Move `current_position` forward in the delimiter stack (if needed)\n  until we find the first potential closer with delimiter `*` or `_`.\n  (This will be the potential closer closest\n  to the beginning of the input -- the first one in parse order.)\n\n- Now, look back in the stack (staying above `stack_bottom` and\n  the `openers_bottom` for this delimiter type) for the\n  first matching potential opener (\"matching\" means same delimiter).\n\n- If one is found:\n\n  + Figure out whether we have emphasis or strong emphasis:\n    if both closer and opener spans have length >= 2, we have\n    strong, otherwise regular.\n\n  + Insert an emph or strong emph node accordingly, after\n    the text node corresponding to the opener.\n\n  + Remove any delimiters between the opener and closer from\n    the delimiter stack.\n\n  + Remove 1 (for regular emph) or 2 (for strong emph) delimiters\n    from the opening and closing text nodes.  If they become empty\n    as a result, remove them and remove the corresponding element\n    of the delimiter stack.  If the closing node is removed, reset\n    `current_position` to the next element in the stack.\n\n- If none is found:\n\n  + Set `openers_bottom` to the element before `current_position`.\n    (We know that there are no openers for this kind of closer up to and\n    including this point, so this puts a lower bound on future searches.)\n\n  + If the closer at `current_position` is not a potential opener,\n    remove it from the delimiter stack (since we know it can't\n    be a closer either).\n\n  + Advance `current_position` to the next element in the stack.\n\nAfter we're done, we remove all delimiters above `stack_bottom` from the\ndelimiter stack.\n"], "fixing_code": ["#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"scanners.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define ENCODED_SIZE 20\n#define LISTMARKER_SIZE 20\n\n// Functions to convert cmark_nodes to commonmark strings.\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node, \n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  bool needs_escaping = false;\n  bool follows_digit =\n      renderer->buffer->size > 0 &&\n      cmark_isdigit(renderer->buffer->ptr[renderer->buffer->size - 1]);\n  char encoded[ENCODED_SIZE];\n\n  needs_escaping =\n      c < 0x80 && escape != LITERAL &&\n      ((escape == NORMAL &&\n        (c < 0x20 ||\n\t c == '*' || c == '_' || c == '[' || c == ']' || c == '#' || c == '<' ||\n         c == '>' || c == '\\\\' || c == '`' || c == '~' || c == '!' ||\n         (c == '&' && cmark_isalpha(nextc)) || (c == '!' && nextc == '[') ||\n         (renderer->begin_content && (c == '-' || c == '+' || c == '=') &&\n          // begin_content doesn't get set to false til we've passed digits\n          // at the beginning of line, so...\n          !follows_digit) ||\n         (renderer->begin_content && (c == '.' || c == ')') && follows_digit &&\n          (nextc == 0 || cmark_isspace(nextc))))) ||\n       (escape == URL &&\n        (c == '`' || c == '<' || c == '>' || cmark_isspace((char)c) || c == '\\\\' ||\n         c == ')' || c == '(')) ||\n       (escape == TITLE &&\n        (c == '`' || c == '<' || c == '>' || c == '\"' || c == '\\\\')));\n\n  if (needs_escaping) {\n    if (escape == URL && cmark_isspace((char)c)) {\n      // use percent encoding for spaces\n      snprintf(encoded, ENCODED_SIZE, \"%%%2X\", c);\n      cmark_strbuf_puts(renderer->buffer, encoded);\n      renderer->column += 3;\n    } else if (cmark_ispunct((char)c)) {\n      cmark_render_ascii(renderer, \"\\\\\");\n      cmark_render_code_point(renderer, c);\n    } else { // render as entity\n      snprintf(encoded, ENCODED_SIZE, \"&#%d;\", c);\n      cmark_strbuf_puts(renderer->buffer, encoded);\n      renderer->column += (int)strlen(encoded);\n    }\n  } else {\n    cmark_render_code_point(renderer, c);\n  }\n}\n\nstatic int longest_backtick_sequence(const char *code) {\n  int longest = 0;\n  int current = 0;\n  size_t i = 0;\n  size_t code_len = strlen(code);\n  while (i <= code_len) {\n    if (code[i] == '`') {\n      current++;\n    } else {\n      if (current > longest) {\n        longest = current;\n      }\n      current = 0;\n    }\n    i++;\n  }\n  return longest;\n}\n\nstatic int shortest_unused_backtick_sequence(const char *code) {\n  // note: if the shortest sequence is >= 32, this returns 32\n  // so as not to overflow the bit array.\n  uint32_t used = 1;\n  int current = 0;\n  size_t i = 0;\n  size_t code_len = strlen(code);\n  while (i <= code_len) {\n    if (code[i] == '`') {\n      current++;\n    } else {\n      if (current > 0 && current < 32) {\n        used |= (1U << current);\n      }\n      current = 0;\n    }\n    i++;\n  }\n  // return number of first bit that is 0:\n  i = 0;\n  while (i < 32 && used & 1) {\n    used = used >> 1;\n    i++;\n  }\n  return (int)i;\n}\n\nstatic bool is_autolink(cmark_node *node) {\n  cmark_chunk *title;\n  cmark_chunk *url;\n  cmark_node *link_text;\n  char *realurl;\n  int realurllen;\n\n  if (node->type != CMARK_NODE_LINK) {\n    return false;\n  }\n\n  url = &node->as.link.url;\n  if (url->len == 0 || scan_scheme(url, 0) == 0) {\n    return false;\n  }\n\n  title = &node->as.link.title;\n  // if it has a title, we can't treat it as an autolink:\n  if (title->len > 0) {\n    return false;\n  }\n\n  link_text = node->first_child;\n  if (link_text == NULL) {\n    return false;\n  }\n  cmark_consolidate_text_nodes(link_text);\n  realurl = (char *)url->data;\n  realurllen = url->len;\n  if (strncmp(realurl, \"mailto:\", 7) == 0) {\n    realurl += 7;\n    realurllen -= 7;\n  }\n  return (realurllen == link_text->as.literal.len &&\n          strncmp(realurl, (char *)link_text->as.literal.data,\n                  link_text->as.literal.len) == 0);\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  int list_number;\n  cmark_delim_type list_delim;\n  int numticks;\n  bool extra_spaces;\n  int i;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  const char *info, *code, *title;\n  char fencechar[2] = {'\\0', '\\0'};\n  size_t info_len, code_len;\n  char listmarker[LISTMARKER_SIZE];\n  char *emph_delim;\n  bool first_in_list_item;\n  bufsize_t marker_width;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&\n                    !(CMARK_OPT_HARDBREAKS & options);\n\n  // Don't adjust tight list status til we've started the list.\n  // Otherwise we loose the blank line between a paragraph and\n  // a following list.\n  if (entering) {\n    if (node->parent && node->parent->type == CMARK_NODE_ITEM) {\n      renderer->in_tight_list_item = node->parent->parent->as.list.tight;\n    }\n  } else {\n    if (node->type == CMARK_NODE_LIST) {\n      renderer->in_tight_list_item =\n        node->parent &&\n        node->parent->type == CMARK_NODE_ITEM &&\n        node->parent->parent->as.list.tight;\n    }\n  }\n\n  if (node->extension && node->extension->commonmark_render_func) {\n    node->extension->commonmark_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      LIT(\"> \");\n      renderer->begin_content = true;\n      cmark_strbuf_puts(renderer->prefix, \"> \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 2);\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    if (!entering && node->next && (node->next->type == CMARK_NODE_CODE_BLOCK ||\n                                    node->next->type == CMARK_NODE_LIST)) {\n      // this ensures that a following indented code block or list will be\n      // inteprereted correctly.\n      CR();\n      LIT(\"<!-- end list -->\");\n      BLANKLINE();\n    }\n    renderer->list_number = cmark_node_get_list_start(node);\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n      marker_width = 4;\n    } else {\n      list_number = renderer->list_number++;\n      list_delim = cmark_node_get_list_delim(node->parent);\n      // we ensure a width of at least 4 so\n      // we get nice transition from single digits\n      // to double\n      snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,\n               list_delim == CMARK_PAREN_DELIM ? \")\" : \".\",\n               list_number < 10 ? \"  \" : \" \");\n      marker_width = (bufsize_t)strlen(listmarker);\n    }\n    if (entering) {\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"  - \");\n        renderer->begin_content = true;\n      } else {\n        LIT(listmarker);\n        renderer->begin_content = true;\n      }\n      for (i = marker_width; i--;) {\n        cmark_strbuf_putc(renderer->prefix, ' ');\n      }\n    } else {\n      cmark_strbuf_truncate(renderer->prefix,\n                            renderer->prefix->size - marker_width);\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      for (i = cmark_node_get_heading_level(node); i > 0; i--) {\n        LIT(\"#\");\n      }\n      LIT(\" \");\n      renderer->begin_content = true;\n      renderer->no_linebreaks = true;\n    } else {\n      renderer->no_linebreaks = false;\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    first_in_list_item = node->prev == NULL && node->parent &&\n                         node->parent->type == CMARK_NODE_ITEM;\n\n    if (!first_in_list_item) {\n      BLANKLINE();\n    }\n    info = cmark_node_get_fence_info(node);\n    info_len = strlen(info);\n    fencechar[0] = strchr(info, '`') == NULL ? '`' : '~';\n    code = cmark_node_get_literal(node);\n    code_len = strlen(code);\n    // use indented form if no info, and code doesn't\n    // begin or end with a blank line, and code isn't\n    // first thing in a list item\n    if (info_len == 0 && (code_len > 2 && !cmark_isspace(code[0]) &&\n                          !(cmark_isspace(code[code_len - 1]) &&\n                            cmark_isspace(code[code_len - 2]))) &&\n        !first_in_list_item) {\n      LIT(\"    \");\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n      OUT(cmark_node_get_literal(node), false, LITERAL);\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    } else {\n      numticks = longest_backtick_sequence(code) + 1;\n      if (numticks < 3) {\n        numticks = 3;\n      }\n      for (i = 0; i < numticks; i++) {\n        LIT(fencechar);\n      }\n      LIT(\" \");\n      OUT(info, false, LITERAL);\n      CR();\n      OUT(cmark_node_get_literal(node), false, LITERAL);\n      CR();\n      for (i = 0; i < numticks; i++) {\n        LIT(fencechar);\n      }\n    }\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    BLANKLINE();\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    BLANKLINE();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    LIT(\"-----\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    if (!(CMARK_OPT_HARDBREAKS & options)) {\n      LIT(\"  \");\n    }\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (CMARK_OPT_HARDBREAKS & options) {\n      LIT(\"  \");\n      CR();\n    } else if (!renderer->no_linebreaks && renderer->width == 0 &&\n               !(CMARK_OPT_HARDBREAKS & options) &&\n               !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    code = cmark_node_get_literal(node);\n    code_len = strlen(code);\n    numticks = shortest_unused_backtick_sequence(code);\n    extra_spaces = code_len == 0 ||\n\t    code[0] == '`' || code[code_len - 1] == '`' ||\n\t    code[0] == ' ' || code[code_len - 1] == ' ';\n    for (i = 0; i < numticks; i++) {\n      LIT(\"`\");\n    }\n    if (extra_spaces) {\n      LIT(\" \");\n    }\n    OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);\n    if (extra_spaces) {\n      LIT(\" \");\n    }\n    for (i = 0; i < numticks; i++) {\n      LIT(\"`\");\n    }\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (node->parent == NULL || node->parent->type != CMARK_NODE_STRONG) {\n      if (entering) {\n        LIT(\"**\");\n      } else {\n        LIT(\"**\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    // If we have EMPH(EMPH(x)), we need to use *_x_*\n    // because **x** is STRONG(x):\n    if (node->parent && node->parent->type == CMARK_NODE_EMPH &&\n        node->next == NULL && node->prev == NULL) {\n      emph_delim = \"_\";\n    } else {\n      emph_delim = \"*\";\n    }\n    if (entering) {\n      LIT(emph_delim);\n    } else {\n      LIT(emph_delim);\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (is_autolink(node)) {\n      if (entering) {\n        LIT(\"<\");\n        if (strncmp(cmark_node_get_url(node), \"mailto:\", 7) == 0) {\n          LIT((const char *)cmark_node_get_url(node) + 7);\n        } else {\n          LIT((const char *)cmark_node_get_url(node));\n        }\n        LIT(\">\");\n        // return signal to skip contents of node...\n        return 0;\n      }\n    } else {\n      if (entering) {\n        LIT(\"[\");\n      } else {\n        LIT(\"](\");\n        OUT(cmark_node_get_url(node), false, URL);\n        title = cmark_node_get_title(node);\n        if (strlen(title) > 0) {\n          LIT(\" \\\"\");\n          OUT(title, false, TITLE);\n          LIT(\"\\\"\");\n        }\n        LIT(\")\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"![\");\n    } else {\n      LIT(\"](\");\n      OUT(cmark_node_get_url(node), false, URL);\n      title = cmark_node_get_title(node);\n      if (strlen(title) > 0) {\n        OUT(\" \\\"\", allow_wrap, LITERAL);\n        OUT(title, false, TITLE);\n        LIT(\"\\\"\");\n      }\n      LIT(\")\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      LIT(\"[^\");\n\n      char *footnote_label = renderer->mem->calloc(node->parent_footnote_def->as.literal.len + 1, sizeof(char));\n      memmove(footnote_label, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n\n      OUT(footnote_label, false, LITERAL);\n      renderer->mem->free(footnote_label);\n\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      renderer->footnote_ix += 1;\n      LIT(\"[^\");\n\n      char *footnote_label = renderer->mem->calloc(node->as.literal.len + 1, sizeof(char));\n      memmove(footnote_label, node->as.literal.data, node->as.literal.len);\n\n      OUT(footnote_label, false, LITERAL);\n      renderer->mem->free(footnote_label);\n\n      LIT(\"]:\\n\");\n\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    }\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_commonmark(cmark_node *root, int options, int width) {\n  return cmark_render_commonmark_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_commonmark_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  if (options & CMARK_OPT_HARDBREAKS) {\n    // disable breaking on width, since it has\n    // a different meaning with OPT_HARDBREAKS\n    width = 0;\n  }\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n#include \"cmark_ctype.h\"\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"houdini.h\"\n#include \"scanners.h\"\n#include \"syntax_extension.h\"\n#include \"html.h\"\n#include \"render.h\"\n\n// Functions to convert cmark_nodes to HTML strings.\n\nstatic void escape_html(cmark_strbuf *dest, const unsigned char *source,\n                        bufsize_t length) {\n  houdini_escape_html0(dest, source, length, 0);\n}\n\nstatic void filter_html_block(cmark_html_renderer *renderer, uint8_t *data, size_t len) {\n  cmark_strbuf *html = renderer->html;\n  cmark_llist *it;\n  cmark_syntax_extension *ext;\n  bool filtered;\n  uint8_t *match;\n\n  while (len) {\n    match = (uint8_t *) memchr(data, '<', len);\n    if (!match)\n      break;\n\n    if (match != data) {\n      cmark_strbuf_put(html, data, (bufsize_t)(match - data));\n      len -= (match - data);\n      data = match;\n    }\n\n    filtered = false;\n    for (it = renderer->filter_extensions; it; it = it->next) {\n      ext = ((cmark_syntax_extension *) it->data);\n      if (!ext->html_filter_func(ext, data, len)) {\n        filtered = true;\n        break;\n      }\n    }\n\n    if (!filtered) {\n      cmark_strbuf_putc(html, '<');\n    } else {\n      cmark_strbuf_puts(html, \"&lt;\");\n    }\n\n    ++data;\n    --len;\n  }\n\n  if (len)\n    cmark_strbuf_put(html, data, (bufsize_t)len);\n}\n\nstatic bool S_put_footnote_backref(cmark_html_renderer *renderer, cmark_strbuf *html, cmark_node *node) {\n  if (renderer->written_footnote_ix >= renderer->footnote_ix)\n    return false;\n  renderer->written_footnote_ix = renderer->footnote_ix;\n  char m[32];\n  snprintf(m, sizeof(m), \"%d\", renderer->written_footnote_ix);\n\n  cmark_strbuf_puts(html, \"<a href=\\\"#fnref-\");\n  houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n  cmark_strbuf_puts(html, \"\\\" class=\\\"footnote-backref\\\" data-footnote-backref data-footnote-backref-idx=\\\"\");\n  cmark_strbuf_puts(html, m);\n  cmark_strbuf_puts(html, \"\\\" aria-label=\\\"Back to reference \");\n  cmark_strbuf_puts(html, m);\n  cmark_strbuf_puts(html, \"\\\">\u21a9</a>\");\n\n  if (node->footnote.def_count > 1)\n  {\n    for(int i = 2; i <= node->footnote.def_count; i++) {\n      char n[32];\n      snprintf(n, sizeof(n), \"%d\", i);\n\n      cmark_strbuf_puts(html, \" <a href=\\\"#fnref-\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\" class=\\\"footnote-backref\\\" data-footnote-backref data-footnote-backref-idx=\\\"\");\n      cmark_strbuf_puts(html, m);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\" aria-label=\\\"Back to reference \");\n      cmark_strbuf_puts(html, m);\n      cmark_strbuf_puts(html, \"-\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"\\\">\u21a9<sup class=\\\"footnote-ref\\\">\");\n      cmark_strbuf_puts(html, n);\n      cmark_strbuf_puts(html, \"</sup></a>\");\n    }\n  }\n\n  return true;\n}\n\nstatic int S_render_node(cmark_html_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  cmark_node *parent;\n  cmark_node *grandparent;\n  cmark_strbuf *html = renderer->html;\n  cmark_llist *it;\n  cmark_syntax_extension *ext;\n  char start_heading[] = \"<h0\";\n  char end_heading[] = \"</h0\";\n  bool tight;\n  bool filtered;\n  char buffer[BUFFER_SIZE];\n\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n\n  if (renderer->plain == node) { // back at original node\n    renderer->plain = NULL;\n  }\n\n  if (renderer->plain != NULL) {\n    switch (node->type) {\n    case CMARK_NODE_TEXT:\n    case CMARK_NODE_CODE:\n    case CMARK_NODE_HTML_INLINE:\n      escape_html(html, node->as.literal.data, node->as.literal.len);\n      break;\n\n    case CMARK_NODE_LINEBREAK:\n    case CMARK_NODE_SOFTBREAK:\n      cmark_strbuf_putc(html, ' ');\n      break;\n\n    default:\n      break;\n    }\n    return 1;\n  }\n\n  if (node->extension && node->extension->html_render_func) {\n    node->extension->html_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"<blockquote\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_puts(html, \">\\n\");\n    } else {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"</blockquote>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_LIST: {\n    cmark_list_type list_type = node->as.list.list_type;\n    int start = node->as.list.start;\n\n    if (entering) {\n      cmark_html_render_cr(html);\n      if (list_type == CMARK_BULLET_LIST) {\n        cmark_strbuf_puts(html, \"<ul\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      } else if (start == 1) {\n        cmark_strbuf_puts(html, \"<ol\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      } else {\n        snprintf(buffer, BUFFER_SIZE, \"<ol start=\\\"%d\\\"\", start);\n        cmark_strbuf_puts(html, buffer);\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \">\\n\");\n      }\n    } else {\n      cmark_strbuf_puts(html,\n                        list_type == CMARK_BULLET_LIST ? \"</ul>\\n\" : \"</ol>\\n\");\n    }\n    break;\n  }\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      cmark_html_render_cr(html);\n      cmark_strbuf_puts(html, \"<li\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_putc(html, '>');\n    } else {\n      cmark_strbuf_puts(html, \"</li>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      cmark_html_render_cr(html);\n      start_heading[2] = (char)('0' + node->as.heading.level);\n      cmark_strbuf_puts(html, start_heading);\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_putc(html, '>');\n    } else {\n      end_heading[3] = (char)('0' + node->as.heading.level);\n      cmark_strbuf_puts(html, end_heading);\n      cmark_strbuf_puts(html, \">\\n\");\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    cmark_html_render_cr(html);\n\n    if (node->as.code.info.len == 0) {\n      cmark_strbuf_puts(html, \"<pre\");\n      cmark_html_render_sourcepos(node, html, options);\n      cmark_strbuf_puts(html, \"><code>\");\n    } else {\n      bufsize_t first_tag = 0;\n      while (first_tag < node->as.code.info.len &&\n             !cmark_isspace(node->as.code.info.data[first_tag])) {\n        first_tag += 1;\n      }\n\n      if (options & CMARK_OPT_GITHUB_PRE_LANG) {\n        cmark_strbuf_puts(html, \"<pre\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \" lang=\\\"\");\n        escape_html(html, node->as.code.info.data, first_tag);\n        if (first_tag < node->as.code.info.len && (options & CMARK_OPT_FULL_INFO_STRING)) {\n          cmark_strbuf_puts(html, \"\\\" data-meta=\\\"\");\n          escape_html(html, node->as.code.info.data + first_tag + 1, node->as.code.info.len - first_tag - 1);\n        }\n        cmark_strbuf_puts(html, \"\\\"><code>\");\n      } else {\n        cmark_strbuf_puts(html, \"<pre\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_puts(html, \"><code class=\\\"language-\");\n        escape_html(html, node->as.code.info.data, first_tag);\n        if (first_tag < node->as.code.info.len && (options & CMARK_OPT_FULL_INFO_STRING)) {\n          cmark_strbuf_puts(html, \"\\\" data-meta=\\\"\");\n          escape_html(html, node->as.code.info.data + first_tag + 1, node->as.code.info.len - first_tag - 1);\n        }\n        cmark_strbuf_puts(html, \"\\\">\");\n      }\n    }\n\n    escape_html(html, node->as.code.literal.data, node->as.code.literal.len);\n    cmark_strbuf_puts(html, \"</code></pre>\\n\");\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    cmark_html_render_cr(html);\n    if (!(options & CMARK_OPT_UNSAFE)) {\n      cmark_strbuf_puts(html, \"<!-- raw HTML omitted -->\");\n    } else if (renderer->filter_extensions) {\n      filter_html_block(renderer, node->as.literal.data, node->as.literal.len);\n    } else {\n      cmark_strbuf_put(html, node->as.literal.data, node->as.literal.len);\n    }\n    cmark_html_render_cr(html);\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    cmark_html_render_cr(html);\n    if (entering) {\n      cmark_strbuf_put(html, node->as.custom.on_enter.data,\n                       node->as.custom.on_enter.len);\n    } else {\n      cmark_strbuf_put(html, node->as.custom.on_exit.data,\n                       node->as.custom.on_exit.len);\n    }\n    cmark_html_render_cr(html);\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    cmark_html_render_cr(html);\n    cmark_strbuf_puts(html, \"<hr\");\n    cmark_html_render_sourcepos(node, html, options);\n    cmark_strbuf_puts(html, \" />\\n\");\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    parent = cmark_node_parent(node);\n    grandparent = cmark_node_parent(parent);\n    if (grandparent != NULL && grandparent->type == CMARK_NODE_LIST) {\n      tight = grandparent->as.list.tight;\n    } else {\n      tight = false;\n    }\n    if (!tight) {\n      if (entering) {\n        cmark_html_render_cr(html);\n        cmark_strbuf_puts(html, \"<p\");\n        cmark_html_render_sourcepos(node, html, options);\n        cmark_strbuf_putc(html, '>');\n      } else {\n        if (parent->type == CMARK_NODE_FOOTNOTE_DEFINITION && node->next == NULL) {\n          cmark_strbuf_putc(html, ' ');\n          S_put_footnote_backref(renderer, html, parent);\n        }\n        cmark_strbuf_puts(html, \"</p>\\n\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    escape_html(html, node->as.literal.data, node->as.literal.len);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    cmark_strbuf_puts(html, \"<br />\\n\");\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      cmark_strbuf_puts(html, \"<br />\\n\");\n    } else if (options & CMARK_OPT_NOBREAKS) {\n      cmark_strbuf_putc(html, ' ');\n    } else {\n      cmark_strbuf_putc(html, '\\n');\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    cmark_strbuf_puts(html, \"<code>\");\n    escape_html(html, node->as.literal.data, node->as.literal.len);\n    cmark_strbuf_puts(html, \"</code>\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    if (!(options & CMARK_OPT_UNSAFE)) {\n      cmark_strbuf_puts(html, \"<!-- raw HTML omitted -->\");\n    } else {\n      filtered = false;\n      for (it = renderer->filter_extensions; it; it = it->next) {\n        ext = (cmark_syntax_extension *) it->data;\n        if (!ext->html_filter_func(ext, node->as.literal.data, node->as.literal.len)) {\n          filtered = true;\n          break;\n        }\n      }\n      if (!filtered) {\n        cmark_strbuf_put(html, node->as.literal.data, node->as.literal.len);\n      } else {\n        cmark_strbuf_puts(html, \"&lt;\");\n        cmark_strbuf_put(html, node->as.literal.data + 1, node->as.literal.len - 1);\n      }\n    }\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    if (entering) {\n      cmark_strbuf_put(html, node->as.custom.on_enter.data,\n                       node->as.custom.on_enter.len);\n    } else {\n      cmark_strbuf_put(html, node->as.custom.on_exit.data,\n                       node->as.custom.on_exit.len);\n    }\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (node->parent == NULL || node->parent->type != CMARK_NODE_STRONG) {\n      if (entering) {\n        cmark_strbuf_puts(html, \"<strong>\");\n      } else {\n        cmark_strbuf_puts(html, \"</strong>\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<em>\");\n    } else {\n      cmark_strbuf_puts(html, \"</em>\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<a href=\\\"\");\n      if ((options & CMARK_OPT_UNSAFE) ||\n            !(scan_dangerous_url(&node->as.link.url, 0))) {\n        houdini_escape_href(html, node->as.link.url.data,\n                            node->as.link.url.len);\n      }\n      if (node->as.link.title.len) {\n        cmark_strbuf_puts(html, \"\\\" title=\\\"\");\n        escape_html(html, node->as.link.title.data, node->as.link.title.len);\n      }\n      cmark_strbuf_puts(html, \"\\\">\");\n    } else {\n      cmark_strbuf_puts(html, \"</a>\");\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<img src=\\\"\");\n      if ((options & CMARK_OPT_UNSAFE) ||\n            !(scan_dangerous_url(&node->as.link.url, 0))) {\n        houdini_escape_href(html, node->as.link.url.data,\n                            node->as.link.url.len);\n      }\n      cmark_strbuf_puts(html, \"\\\" alt=\\\"\");\n      renderer->plain = node;\n    } else {\n      if (node->as.link.title.len) {\n        cmark_strbuf_puts(html, \"\\\" title=\\\"\");\n        escape_html(html, node->as.link.title.data, node->as.link.title.len);\n      }\n\n      cmark_strbuf_puts(html, \"\\\" />\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      if (renderer->footnote_ix == 0) {\n        cmark_strbuf_puts(html, \"<section class=\\\"footnotes\\\" data-footnotes>\\n<ol>\\n\");\n      }\n      ++renderer->footnote_ix;\n\n      cmark_strbuf_puts(html, \"<li id=\\\"fn-\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"\\\">\\n\");\n    } else {\n      if (S_put_footnote_backref(renderer, html, node)) {\n        cmark_strbuf_putc(html, '\\n');\n      }\n      cmark_strbuf_puts(html, \"</li>\\n\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      cmark_strbuf_puts(html, \"<sup class=\\\"footnote-ref\\\"><a href=\\\"#fn-\");\n      houdini_escape_href(html, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n      cmark_strbuf_puts(html, \"\\\" id=\\\"fnref-\");\n      houdini_escape_href(html, node->parent_footnote_def->as.literal.data, node->parent_footnote_def->as.literal.len);\n\n      if (node->footnote.ref_ix > 1) {\n        char n[32];\n        snprintf(n, sizeof(n), \"%d\", node->footnote.ref_ix);\n        cmark_strbuf_puts(html, \"-\");\n        cmark_strbuf_puts(html, n);\n      }\n\n      cmark_strbuf_puts(html, \"\\\" data-footnote-ref>\");\n      houdini_escape_href(html, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(html, \"</a></sup>\");\n    }\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_html(cmark_node *root, int options, cmark_llist *extensions) {\n  return cmark_render_html_with_mem(root, options, extensions, cmark_node_mem(root));\n}\n\nchar *cmark_render_html_with_mem(cmark_node *root, int options, cmark_llist *extensions, cmark_mem *mem) {\n  char *result;\n  cmark_strbuf html = CMARK_BUF_INIT(mem);\n  cmark_event_type ev_type;\n  cmark_node *cur;\n  cmark_html_renderer renderer = {&html, NULL, NULL, 0, 0, NULL};\n  cmark_iter *iter = cmark_iter_new(root);\n\n  for (; extensions; extensions = extensions->next)\n    if (((cmark_syntax_extension *) extensions->data)->html_filter_func)\n      renderer.filter_extensions = cmark_llist_append(\n          mem,\n          renderer.filter_extensions,\n          (cmark_syntax_extension *) extensions->data);\n\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    S_render_node(&renderer, cur, ev_type, options);\n  }\n\n  if (renderer.footnote_ix) {\n    cmark_strbuf_puts(&html, \"</ol>\\n</section>\\n\");\n  }\n\n  result = (char *)cmark_strbuf_detach(&html);\n\n  cmark_llist_free(mem, renderer.filter_extensions);\n\n  cmark_iter_free(iter);\n  return result;\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"scanners.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LIST_NUMBER_STRING_SIZE 20\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node,\n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  if (escape == LITERAL) {\n    cmark_render_code_point(renderer, c);\n    return;\n  }\n\n  switch (c) {\n  case 123: // '{'\n  case 125: // '}'\n  case 35:  // '#'\n  case 37:  // '%'\n  case 38:  // '&'\n    cmark_render_ascii(renderer, \"\\\\\");\n    cmark_render_code_point(renderer, c);\n    break;\n  case 36: // '$'\n  case 95: // '_'\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\\\\");\n    }\n    cmark_render_code_point(renderer, c);\n    break;\n  case 45:             // '-'\n    if (nextc == 45) { // prevent ligature\n      cmark_render_ascii(renderer, \"-{}\");\n    } else {\n      cmark_render_ascii(renderer, \"-\");\n    }\n    break;\n  case 126: // '~'\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\\\textasciitilde{}\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 94: // '^'\n    cmark_render_ascii(renderer, \"\\\\^{}\");\n    break;\n  case 92: // '\\\\'\n    if (escape == URL) {\n      // / acts as path sep even on windows:\n      cmark_render_ascii(renderer, \"/\");\n    } else {\n      cmark_render_ascii(renderer, \"\\\\textbackslash{}\");\n    }\n    break;\n  case 124: // '|'\n    cmark_render_ascii(renderer, \"\\\\textbar{}\");\n    break;\n  case 60: // '<'\n    cmark_render_ascii(renderer, \"\\\\textless{}\");\n    break;\n  case 62: // '>'\n    cmark_render_ascii(renderer, \"\\\\textgreater{}\");\n    break;\n  case 91: // '['\n  case 93: // ']'\n    cmark_render_ascii(renderer, \"{\");\n    cmark_render_code_point(renderer, c);\n    cmark_render_ascii(renderer, \"}\");\n    break;\n  case 34: // '\"'\n    cmark_render_ascii(renderer, \"\\\\textquotedbl{}\");\n    // requires \\usepackage[T1]{fontenc}\n    break;\n  case 39: // '\\''\n    cmark_render_ascii(renderer, \"\\\\textquotesingle{}\");\n    // requires \\usepackage{textcomp}\n    break;\n  case 160: // nbsp\n    cmark_render_ascii(renderer, \"~\");\n    break;\n  case 8230: // hellip\n    cmark_render_ascii(renderer, \"\\\\ldots{}\");\n    break;\n  case 8216: // lsquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"`\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8217: // rsquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"\\'\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8220: // ldquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"``\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8221: // rdquo\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"''\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8212: // emdash\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"---\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 8211: // endash\n    if (escape == NORMAL) {\n      cmark_render_ascii(renderer, \"--\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  default:\n    cmark_render_code_point(renderer, c);\n  }\n}\n\ntypedef enum {\n  NO_LINK,\n  URL_AUTOLINK,\n  EMAIL_AUTOLINK,\n  NORMAL_LINK,\n  INTERNAL_LINK\n} link_type;\n\nstatic link_type get_link_type(cmark_node *node) {\n  size_t title_len, url_len;\n  cmark_node *link_text;\n  char *realurl;\n  int realurllen;\n  bool isemail = false;\n\n  if (node->type != CMARK_NODE_LINK) {\n    return NO_LINK;\n  }\n\n  const char *url = cmark_node_get_url(node);\n  cmark_chunk url_chunk = cmark_chunk_literal(url);\n\n  if (url && *url == '#') {\n    return INTERNAL_LINK;\n  }\n\n  url_len = strlen(url);\n  if (url_len == 0 || scan_scheme(&url_chunk, 0) == 0) {\n    return NO_LINK;\n  }\n\n  const char *title = cmark_node_get_title(node);\n  title_len = strlen(title);\n  // if it has a title, we can't treat it as an autolink:\n  if (title_len == 0) {\n\n    link_text = node->first_child;\n    cmark_consolidate_text_nodes(link_text);\n\n    if (!link_text)\n      return NO_LINK;\n\n    realurl = (char *)url;\n    realurllen = (int)url_len;\n    if (strncmp(realurl, \"mailto:\", 7) == 0) {\n      realurl += 7;\n      realurllen -= 7;\n      isemail = true;\n    }\n    if (realurllen == link_text->as.literal.len &&\n        strncmp(realurl, (char *)link_text->as.literal.data,\n                link_text->as.literal.len) == 0) {\n      if (isemail) {\n        return EMAIL_AUTOLINK;\n      } else {\n        return URL_AUTOLINK;\n      }\n    }\n  }\n\n  return NORMAL_LINK;\n}\n\nstatic int S_get_enumlevel(cmark_node *node) {\n  int enumlevel = 0;\n  cmark_node *tmp = node;\n  while (tmp) {\n    if (tmp->type == CMARK_NODE_LIST &&\n        cmark_node_get_list_type(node) == CMARK_ORDERED_LIST) {\n      enumlevel++;\n    }\n    tmp = tmp->parent;\n  }\n  return enumlevel;\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  int list_number;\n  int enumlevel;\n  char list_number_string[LIST_NUMBER_STRING_SIZE];\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  cmark_list_type list_type;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);\n\n  if (node->extension && node->extension->latex_render_func) {\n    node->extension->latex_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      LIT(\"\\\\begin{quote}\");\n      CR();\n    } else {\n      LIT(\"\\\\end{quote}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    list_type = cmark_node_get_list_type(node);\n    if (entering) {\n      LIT(\"\\\\begin{\");\n      LIT(list_type == CMARK_ORDERED_LIST ? \"enumerate\" : \"itemize\");\n      LIT(\"}\");\n      CR();\n      list_number = cmark_node_get_list_start(node);\n      if (list_number > 1) {\n        enumlevel = S_get_enumlevel(node);\n        // latex normally supports only five levels\n        if (enumlevel >= 1 && enumlevel <= 5) {\n          snprintf(list_number_string, LIST_NUMBER_STRING_SIZE, \"%d\",\n                   list_number);\n          LIT(\"\\\\setcounter{enum\");\n          switch (enumlevel) {\n          case 1: LIT(\"i\"); break;\n          case 2: LIT(\"ii\"); break;\n          case 3: LIT(\"iii\"); break;\n          case 4: LIT(\"iv\"); break;\n          case 5: LIT(\"v\"); break;\n          default: LIT(\"i\"); break;\n\t  }\n          LIT(\"}{\");\n          OUT(list_number_string, false, NORMAL);\n          LIT(\"}\");\n        }\n        CR();\n      }\n    } else {\n      LIT(\"\\\\end{\");\n      LIT(list_type == CMARK_ORDERED_LIST ? \"enumerate\" : \"itemize\");\n      LIT(\"}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      LIT(\"\\\\item \");\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      switch (cmark_node_get_heading_level(node)) {\n      case 1:\n        LIT(\"\\\\section\");\n        break;\n      case 2:\n        LIT(\"\\\\subsection\");\n        break;\n      case 3:\n        LIT(\"\\\\subsubsection\");\n        break;\n      case 4:\n        LIT(\"\\\\paragraph\");\n        break;\n      case 5:\n        LIT(\"\\\\subparagraph\");\n        break;\n      }\n      LIT(\"{\");\n    } else {\n      LIT(\"}\");\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    CR();\n    LIT(\"\\\\begin{verbatim}\");\n    CR();\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    CR();\n    LIT(\"\\\\end{verbatim}\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    CR();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    CR();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    LIT(\"\\\\begin{center}\\\\rule{0.5\\\\linewidth}{\\\\linethickness}\\\\end{center}\");\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    LIT(\"\\\\\\\\\");\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      LIT(\"\\\\\\\\\");\n      CR();\n    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, NORMAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    LIT(\"\\\\texttt{\");\n    OUT(cmark_node_get_literal(node), false, NORMAL);\n    LIT(\"}\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (node->parent == NULL || node->parent->type != CMARK_NODE_STRONG) {\n      if (entering) {\n        LIT(\"\\\\textbf{\");\n      } else {\n        LIT(\"}\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      LIT(\"\\\\emph{\");\n    } else {\n      LIT(\"}\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (entering) {\n      const char *url = cmark_node_get_url(node);\n      // requires \\usepackage{hyperref}\n      switch (get_link_type(node)) {\n      case URL_AUTOLINK:\n        LIT(\"\\\\url{\");\n        OUT(url, false, URL);\n        LIT(\"}\");\n        return 0; // Don't process further nodes to avoid double-rendering artefacts\n      case EMAIL_AUTOLINK:\n        LIT(\"\\\\href{\");\n        OUT(url, false, URL);\n        LIT(\"}\\\\nolinkurl{\");\n        break;\n      case NORMAL_LINK:\n        LIT(\"\\\\href{\");\n        OUT(url, false, URL);\n        LIT(\"}{\");\n        break;\n      case INTERNAL_LINK:\n        LIT(\"\\\\protect\\\\hyperlink{\");\n        OUT(url + 1, false, URL);\n        LIT(\"}{\");\n        break;\n      case NO_LINK:\n        LIT(\"{\"); // error?\n      }\n    } else {\n      LIT(\"}\");\n    }\n\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"\\\\protect\\\\includegraphics{\");\n      // requires \\include{graphicx}\n      OUT(cmark_node_get_url(node), false, URL);\n      LIT(\"}\");\n      return 0;\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    // TODO\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_latex(cmark_node *root, int options, int width) {\n  return cmark_render_latex_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_latex_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"utf8.h\"\n#include \"render.h\"\n#include \"syntax_extension.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LIST_NUMBER_SIZE 20\n\n// Functions to convert cmark_nodes to groff man strings.\nstatic void S_outc(cmark_renderer *renderer, cmark_node *node, \n                   cmark_escaping escape, int32_t c,\n                   unsigned char nextc) {\n  (void)(nextc);\n\n  if (escape == LITERAL) {\n    cmark_render_code_point(renderer, c);\n    return;\n  }\n\n  switch (c) {\n  case 46:\n    if (renderer->begin_line) {\n      cmark_render_ascii(renderer, \"\\\\&.\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 39:\n    if (renderer->begin_line) {\n      cmark_render_ascii(renderer, \"\\\\&'\");\n    } else {\n      cmark_render_code_point(renderer, c);\n    }\n    break;\n  case 45:\n    cmark_render_ascii(renderer, \"\\\\-\");\n    break;\n  case 92:\n    cmark_render_ascii(renderer, \"\\\\e\");\n    break;\n  case 8216: // left single quote\n    cmark_render_ascii(renderer, \"\\\\[oq]\");\n    break;\n  case 8217: // right single quote\n    cmark_render_ascii(renderer, \"\\\\[cq]\");\n    break;\n  case 8220: // left double quote\n    cmark_render_ascii(renderer, \"\\\\[lq]\");\n    break;\n  case 8221: // right double quote\n    cmark_render_ascii(renderer, \"\\\\[rq]\");\n    break;\n  case 8212: // em dash\n    cmark_render_ascii(renderer, \"\\\\[em]\");\n    break;\n  case 8211: // en dash\n    cmark_render_ascii(renderer, \"\\\\[en]\");\n    break;\n  default:\n    cmark_render_code_point(renderer, c);\n  }\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  int list_number;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options);\n\n  if (node->extension && node->extension->man_render_func) {\n    node->extension->man_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    if (entering) {\n      /* Define a strikethrough macro */\n      /* Commenting out because this makes tests fail\n      LIT(\".de ST\");\n      CR();\n      LIT(\".nr ww \\\\w'\\\\\\\\$1'\");\n      CR();\n      LIT(\"\\\\Z@\\\\v'-.25m'\\\\l'\\\\\\\\n[ww]u'@\\\\\\\\$1\");\n      CR();\n      LIT(\"..\");\n      CR();\n      */\n    }\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    if (entering) {\n      CR();\n      LIT(\".RS\");\n      CR();\n    } else {\n      CR();\n      LIT(\".RE\");\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_LIST:\n    renderer->list_number = cmark_node_get_list_start(node);\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (entering) {\n      CR();\n      LIT(\".IP \");\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"\\\\[bu] 2\");\n      } else {\n        list_number = renderer->list_number++;\n        char list_number_s[LIST_NUMBER_SIZE];\n        snprintf(list_number_s, LIST_NUMBER_SIZE, \"\\\"%d.\\\" 4\", list_number);\n        LIT(list_number_s);\n      }\n      CR();\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      CR();\n      LIT(cmark_node_get_heading_level(node) == 1 ? \".SH\" : \".SS\");\n      CR();\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    CR();\n    LIT(\".IP\\n.nf\\n\\\\f[C]\\n\");\n    OUT(cmark_node_get_literal(node), false, NORMAL);\n    CR();\n    LIT(\"\\\\f[]\\n.fi\");\n    CR();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    CR();\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    CR();\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    CR();\n    LIT(\".PP\\n  *  *  *  *  *\");\n    CR();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (entering) {\n      // no blank line if first paragraph in list:\n      if (node->parent && node->parent->type == CMARK_NODE_ITEM &&\n          node->prev == NULL) {\n        // no blank line or .PP\n      } else {\n        CR();\n        LIT(\".PP\");\n        CR();\n      }\n    } else {\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    LIT(\".PD 0\\n.P\\n.PD\");\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (options & CMARK_OPT_HARDBREAKS) {\n      LIT(\".PD 0\\n.P\\n.PD\");\n      CR();\n    } else if (renderer->width == 0 && !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    LIT(\"\\\\f[C]\");\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    LIT(\"\\\\f[]\");\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    OUT(entering ? cmark_node_get_on_enter(node) : cmark_node_get_on_exit(node),\n        false, LITERAL);\n    break;\n\n  case CMARK_NODE_STRONG:\n    if (node->parent == NULL || node->parent->type != CMARK_NODE_STRONG) {\n      if (entering) {\n        LIT(\"\\\\f[B]\");\n      } else {\n        LIT(\"\\\\f[]\");\n      }\n    }\n    break;\n\n  case CMARK_NODE_EMPH:\n    if (entering) {\n      LIT(\"\\\\f[I]\");\n    } else {\n      LIT(\"\\\\f[]\");\n    }\n    break;\n\n  case CMARK_NODE_LINK:\n    if (!entering) {\n      LIT(\" (\");\n      OUT(cmark_node_get_url(node), allow_wrap, URL);\n      LIT(\")\");\n    }\n    break;\n\n  case CMARK_NODE_IMAGE:\n    if (entering) {\n      LIT(\"[IMAGE: \");\n    } else {\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    // TODO\n    break;\n\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_man(cmark_node *root, int options, int width) {\n  return cmark_render_man_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_man_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  return cmark_render(mem, root, options, width, S_outc, S_render_node);\n}\n", "#ifndef CMARK_NODE_H\n#define CMARK_NODE_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <stdio.h>\n#include <stdint.h>\n\n#include \"cmark-gfm.h\"\n#include \"cmark-gfm-extension_api.h\"\n#include \"buffer.h\"\n#include \"chunk.h\"\n\ntypedef struct {\n  cmark_list_type list_type;\n  int marker_offset;\n  int padding;\n  int start;\n  cmark_delim_type delimiter;\n  unsigned char bullet_char;\n  bool tight;\n  bool checked; // For task list extension\n} cmark_list;\n\ntypedef struct {\n  cmark_chunk info;\n  cmark_chunk literal;\n  uint8_t fence_length;\n  uint8_t fence_offset;\n  unsigned char fence_char;\n  int8_t fenced;\n} cmark_code;\n\ntypedef struct {\n  int level;\n  bool setext;\n} cmark_heading;\n\ntypedef struct {\n  cmark_chunk url;\n  cmark_chunk title;\n} cmark_link;\n\ntypedef struct {\n  cmark_chunk on_enter;\n  cmark_chunk on_exit;\n} cmark_custom;\n\nenum cmark_node__internal_flags {\n  CMARK_NODE__OPEN = (1 << 0),\n  CMARK_NODE__OPEN_BLOCK = (1 << 1),\n  CMARK_NODE__LAST_LINE_BLANK = (1 << 2),\n  CMARK_NODE__LAST_LINE_CHECKED = (1 << 3),\n\n  // Extensions can register custom flags by calling `cmark_register_node_flag`.\n  // This is the starting value for the custom flags.\n  CMARK_NODE__REGISTER_FIRST = (1 << 4),\n};\n\ntypedef uint16_t cmark_node_internal_flags;\n\nstruct cmark_node {\n  cmark_strbuf content;\n\n  struct cmark_node *next;\n  struct cmark_node *prev;\n  struct cmark_node *parent;\n  struct cmark_node *first_child;\n  struct cmark_node *last_child;\n\n  void *user_data;\n  cmark_free_func user_data_free_func;\n\n  int start_line;\n  int start_column;\n  int end_line;\n  int end_column;\n  int internal_offset;\n  uint16_t type;\n  cmark_node_internal_flags flags;\n\n  cmark_syntax_extension *extension;\n\n  /**\n   * Used during cmark_render() to cache the most recent non-NULL\n   * extension, if you go up the parent chain like this:\n   *\n   * node->parent->...parent->extension\n   */\n  cmark_syntax_extension *ancestor_extension;\n\n  union {\n    int ref_ix;\n    int def_count;\n  } footnote;\n\n  cmark_node *parent_footnote_def;\n\n  union {\n    cmark_chunk literal;\n    cmark_list list;\n    cmark_code code;\n    cmark_heading heading;\n    cmark_link link;\n    cmark_custom custom;\n    int html_block_type;\n    void *opaque;\n  } as;\n};\n\n/**\n * Syntax extensions can use this function to register a custom node\n * flag. The flags are stored in the `flags` field of the `cmark_node`\n * struct. The `flags` parameter should be the address of a global variable\n * which will store the flag value.\n */\nCMARK_GFM_EXPORT\nvoid cmark_register_node_flag(cmark_node_internal_flags *flags);\n\n/**\n * DEPRECATED.\n *\n * This function was added in cmark-gfm version 0.29.0.gfm.7, and was\n * required to be called at program start time, which caused\n * backwards-compatibility issues in applications that use cmark-gfm as a\n * library. It is now a no-op.\n */\nCMARK_GFM_EXPORT\nvoid cmark_init_standard_node_flags();\n\nstatic CMARK_INLINE cmark_mem *cmark_node_mem(cmark_node *node) {\n  return node->content.mem;\n}\nCMARK_GFM_EXPORT int cmark_node_check(cmark_node *node, FILE *out);\n\nstatic CMARK_INLINE bool CMARK_NODE_TYPE_BLOCK_P(cmark_node_type node_type) {\n\treturn (node_type & CMARK_NODE_TYPE_MASK) == CMARK_NODE_TYPE_BLOCK;\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_BLOCK_P(cmark_node *node) {\n\treturn node != NULL && CMARK_NODE_TYPE_BLOCK_P((cmark_node_type) node->type);\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_TYPE_INLINE_P(cmark_node_type node_type) {\n\treturn (node_type & CMARK_NODE_TYPE_MASK) == CMARK_NODE_TYPE_INLINE;\n}\n\nstatic CMARK_INLINE bool CMARK_NODE_INLINE_P(cmark_node *node) {\n\treturn node != NULL && CMARK_NODE_TYPE_INLINE_P((cmark_node_type) node->type);\n}\n\nCMARK_GFM_EXPORT bool cmark_node_can_contain_type(cmark_node *node, cmark_node_type child_type);\n\n/**\n * Enable (or disable) extra safety checks. These extra checks cause\n * extra performance overhead (in some cases quadratic), so they are only\n * intended to be used during testing.\n */\nCMARK_GFM_EXPORT void cmark_enable_safety_checks(bool enable);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n", "#include \"node.h\"\n#include \"syntax_extension.h\"\n#include \"render.h\"\n\n#define OUT(s, wrap, escaping) renderer->out(renderer, node, s, wrap, escaping)\n#define LIT(s) renderer->out(renderer, node, s, false, LITERAL)\n#define CR() renderer->cr(renderer)\n#define BLANKLINE() renderer->blankline(renderer)\n#define LISTMARKER_SIZE 20\n\n// Functions to convert cmark_nodes to plain text strings.\n\nstatic CMARK_INLINE void outc(cmark_renderer *renderer, cmark_node *node, \n                              cmark_escaping escape,\n                              int32_t c, unsigned char nextc) {\n  cmark_render_code_point(renderer, c);\n}\n\nstatic int S_render_node(cmark_renderer *renderer, cmark_node *node,\n                         cmark_event_type ev_type, int options) {\n  int list_number;\n  cmark_delim_type list_delim;\n  int i;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  char listmarker[LISTMARKER_SIZE];\n  bool first_in_list_item;\n  bufsize_t marker_width;\n  bool allow_wrap = renderer->width > 0 && !(CMARK_OPT_NOBREAKS & options) &&\n                    !(CMARK_OPT_HARDBREAKS & options);\n\n  // Don't adjust tight list status til we've started the list.\n  // Otherwise we loose the blank line between a paragraph and\n  // a following list.\n  if (entering) {\n    if (node->parent && node->parent->type == CMARK_NODE_ITEM) {\n      renderer->in_tight_list_item = node->parent->parent->as.list.tight;\n    }\n  } else {\n    if (node->type == CMARK_NODE_LIST) {\n      renderer->in_tight_list_item =\n        node->parent &&\n        node->parent->type == CMARK_NODE_ITEM &&\n        node->parent->parent->as.list.tight;\n    }\n  }\n\n  if (node->extension && node->extension->plaintext_render_func) {\n    node->extension->plaintext_render_func(node->extension, renderer, node, ev_type, options);\n    return 1;\n  }\n\n  switch (node->type) {\n  case CMARK_NODE_DOCUMENT:\n    break;\n\n  case CMARK_NODE_BLOCK_QUOTE:\n    break;\n\n  case CMARK_NODE_LIST:\n    if (!entering && node->next && (node->next->type == CMARK_NODE_CODE_BLOCK ||\n                                    node->next->type == CMARK_NODE_LIST)) {\n      CR();\n    }\n    renderer->list_number = cmark_node_get_list_start(node);\n    break;\n\n  case CMARK_NODE_ITEM:\n    if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n      marker_width = 4;\n    } else {\n      list_number = renderer->list_number++;\n      list_delim = cmark_node_get_list_delim(node->parent);\n      // we ensure a width of at least 4 so\n      // we get nice transition from single digits\n      // to double\n      snprintf(listmarker, LISTMARKER_SIZE, \"%d%s%s\", list_number,\n               list_delim == CMARK_PAREN_DELIM ? \")\" : \".\",\n               list_number < 10 ? \"  \" : \" \");\n      marker_width = (bufsize_t)strlen(listmarker);\n    }\n    if (entering) {\n      if (cmark_node_get_list_type(node->parent) == CMARK_BULLET_LIST) {\n        LIT(\"  - \");\n        renderer->begin_content = true;\n      } else {\n        LIT(listmarker);\n        renderer->begin_content = true;\n      }\n      for (i = marker_width; i--;) {\n        cmark_strbuf_putc(renderer->prefix, ' ');\n      }\n    } else {\n      cmark_strbuf_truncate(renderer->prefix,\n                            renderer->prefix->size - marker_width);\n      CR();\n    }\n    break;\n\n  case CMARK_NODE_HEADING:\n    if (entering) {\n      renderer->begin_content = true;\n      renderer->no_linebreaks = true;\n    } else {\n      renderer->no_linebreaks = false;\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_CODE_BLOCK:\n    first_in_list_item = node->prev == NULL && node->parent &&\n                         node->parent->type == CMARK_NODE_ITEM;\n\n    if (!first_in_list_item) {\n      BLANKLINE();\n    }\n    OUT(cmark_node_get_literal(node), false, LITERAL);\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_HTML_BLOCK:\n    break;\n\n  case CMARK_NODE_CUSTOM_BLOCK:\n    break;\n\n  case CMARK_NODE_THEMATIC_BREAK:\n    BLANKLINE();\n    break;\n\n  case CMARK_NODE_PARAGRAPH:\n    if (!entering) {\n      BLANKLINE();\n    }\n    break;\n\n  case CMARK_NODE_TEXT:\n    OUT(cmark_node_get_literal(node), allow_wrap, NORMAL);\n    break;\n\n  case CMARK_NODE_LINEBREAK:\n    CR();\n    break;\n\n  case CMARK_NODE_SOFTBREAK:\n    if (CMARK_OPT_HARDBREAKS & options) {\n      CR();\n    } else if (!renderer->no_linebreaks && renderer->width == 0 &&\n               !(CMARK_OPT_HARDBREAKS & options) &&\n               !(CMARK_OPT_NOBREAKS & options)) {\n      CR();\n    } else {\n      OUT(\" \", allow_wrap, LITERAL);\n    }\n    break;\n\n  case CMARK_NODE_CODE:\n    OUT(cmark_node_get_literal(node), allow_wrap, LITERAL);\n    break;\n\n  case CMARK_NODE_HTML_INLINE:\n    break;\n\n  case CMARK_NODE_CUSTOM_INLINE:\n    break;\n\n  case CMARK_NODE_STRONG:\n    break;\n\n  case CMARK_NODE_EMPH:\n    break;\n\n  case CMARK_NODE_LINK:\n    break;\n\n  case CMARK_NODE_IMAGE:\n    break;\n\n  case CMARK_NODE_FOOTNOTE_REFERENCE:\n    if (entering) {\n      LIT(\"[^\");\n      OUT(cmark_chunk_to_cstr(renderer->mem, &node->as.literal), false, LITERAL);\n      LIT(\"]\");\n    }\n    break;\n\n  case CMARK_NODE_FOOTNOTE_DEFINITION:\n    if (entering) {\n      renderer->footnote_ix += 1;\n      LIT(\"[^\");\n      char n[32];\n      snprintf(n, sizeof(n), \"%d\", renderer->footnote_ix);\n      OUT(n, false, LITERAL);\n      LIT(\"]: \");\n\n      cmark_strbuf_puts(renderer->prefix, \"    \");\n    } else {\n      cmark_strbuf_truncate(renderer->prefix, renderer->prefix->size - 4);\n    }\n    break;\n  default:\n    assert(false);\n    break;\n  }\n\n  return 1;\n}\n\nchar *cmark_render_plaintext(cmark_node *root, int options, int width) {\n  return cmark_render_plaintext_with_mem(root, options, width, cmark_node_mem(root));\n}\n\nchar *cmark_render_plaintext_with_mem(cmark_node *root, int options, int width, cmark_mem *mem) {\n  if (options & CMARK_OPT_HARDBREAKS) {\n    // disable breaking on width, since it has\n    // a different meaning with OPT_HARDBREAKS\n    width = 0;\n  }\n  return cmark_render(mem, root, options, width, outc, S_render_node);\n}\n", "#include <stdlib.h>\n#include \"buffer.h\"\n#include \"chunk.h\"\n#include \"cmark-gfm.h\"\n#include \"utf8.h\"\n#include \"render.h\"\n#include \"node.h\"\n#include \"syntax_extension.h\"\n\nstatic CMARK_INLINE void S_cr(cmark_renderer *renderer) {\n  if (renderer->need_cr < 1) {\n    renderer->need_cr = 1;\n  }\n}\n\nstatic CMARK_INLINE void S_blankline(cmark_renderer *renderer) {\n  if (renderer->need_cr < 2) {\n    renderer->need_cr = 2;\n  }\n}\n\nstatic void S_out(cmark_renderer *renderer, cmark_node *node,\n                  const char *source, bool wrap,\n                  cmark_escaping escape) {\n  int length = (int)strlen(source);\n  unsigned char nextc;\n  int32_t c;\n  int i = 0;\n  int last_nonspace;\n  int len;\n  cmark_chunk remainder = cmark_chunk_literal(\"\");\n  int k = renderer->buffer->size - 1;\n\n  cmark_syntax_extension *ext = node->ancestor_extension;\n  if (ext && !ext->commonmark_escape_func)\n    ext = NULL;\n\n  wrap = wrap && !renderer->no_linebreaks;\n\n  if (renderer->in_tight_list_item && renderer->need_cr > 1) {\n    renderer->need_cr = 1;\n  }\n  while (renderer->need_cr) {\n    if (k < 0 || renderer->buffer->ptr[k] == '\\n') {\n      k -= 1;\n    } else {\n      cmark_strbuf_putc(renderer->buffer, '\\n');\n      if (renderer->need_cr > 1) {\n        cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                         renderer->prefix->size);\n      }\n    }\n    renderer->column = 0;\n    renderer->last_breakable = 0;\n    renderer->begin_line = true;\n    renderer->begin_content = true;\n    renderer->need_cr -= 1;\n  }\n\n  while (i < length) {\n    if (renderer->begin_line) {\n      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                       renderer->prefix->size);\n      // note: this assumes prefix is ascii:\n      renderer->column = renderer->prefix->size;\n    }\n\n    len = cmark_utf8proc_iterate((const uint8_t *)source + i, length - i, &c);\n    if (len == -1) { // error condition\n      return;        // return without rendering rest of string\n    }\n\n    if (ext && ext->commonmark_escape_func(ext, node, c))\n      cmark_strbuf_putc(renderer->buffer, '\\\\');\n\n    nextc = source[i + len];\n    if (c == 32 && wrap) {\n      if (!renderer->begin_line) {\n        last_nonspace = renderer->buffer->size;\n        cmark_strbuf_putc(renderer->buffer, ' ');\n        renderer->column += 1;\n        renderer->begin_line = false;\n        renderer->begin_content = false;\n        // skip following spaces\n        while (source[i + 1] == ' ') {\n          i++;\n        }\n        // We don't allow breaks that make a digit the first character\n        // because this causes problems with commonmark output.\n        if (!cmark_isdigit(source[i + 1])) {\n          renderer->last_breakable = last_nonspace;\n        }\n      }\n\n    } else if (escape == LITERAL) {\n      if (c == 10) {\n        cmark_strbuf_putc(renderer->buffer, '\\n');\n        renderer->column = 0;\n        renderer->begin_line = true;\n        renderer->begin_content = true;\n        renderer->last_breakable = 0;\n      } else {\n        cmark_render_code_point(renderer, c);\n        renderer->begin_line = false;\n        // we don't set 'begin_content' to false til we've\n        // finished parsing a digit.  Reason:  in commonmark\n        // we need to escape a potential list marker after\n        // a digit:\n        renderer->begin_content =\n            renderer->begin_content && cmark_isdigit((char)c) == 1;\n      }\n    } else {\n      (renderer->outc)(renderer, node, escape, c, nextc);\n      renderer->begin_line = false;\n      renderer->begin_content =\n          renderer->begin_content && cmark_isdigit((char)c) == 1;\n    }\n\n    // If adding the character went beyond width, look for an\n    // earlier place where the line could be broken:\n    if (renderer->width > 0 && renderer->column > renderer->width &&\n        !renderer->begin_line && renderer->last_breakable > 0) {\n\n      // copy from last_breakable to remainder\n      cmark_chunk_set_cstr(renderer->mem, &remainder,\n                           (char *)renderer->buffer->ptr +\n                               renderer->last_breakable + 1);\n      // truncate at last_breakable\n      cmark_strbuf_truncate(renderer->buffer, renderer->last_breakable);\n      // add newline, prefix, and remainder\n      cmark_strbuf_putc(renderer->buffer, '\\n');\n      cmark_strbuf_put(renderer->buffer, renderer->prefix->ptr,\n                       renderer->prefix->size);\n      cmark_strbuf_put(renderer->buffer, remainder.data, remainder.len);\n      renderer->column = renderer->prefix->size + remainder.len;\n      cmark_chunk_free(renderer->mem, &remainder);\n      renderer->last_breakable = 0;\n      renderer->begin_line = false;\n      renderer->begin_content = false;\n    }\n\n    i += len;\n  }\n}\n\n// Assumes no newlines, assumes ascii content:\nvoid cmark_render_ascii(cmark_renderer *renderer, const char *s) {\n  int origsize = renderer->buffer->size;\n  cmark_strbuf_puts(renderer->buffer, s);\n  renderer->column += renderer->buffer->size - origsize;\n}\n\nvoid cmark_render_code_point(cmark_renderer *renderer, uint32_t c) {\n  cmark_utf8proc_encode_char(c, renderer->buffer);\n  renderer->column += 1;\n}\n\nchar *cmark_render(cmark_mem *mem, cmark_node *root, int options, int width,\n                   void (*outc)(cmark_renderer *, cmark_node *,\n                                cmark_escaping, int32_t,\n                                unsigned char),\n                   int (*render_node)(cmark_renderer *renderer,\n                                      cmark_node *node,\n                                      cmark_event_type ev_type, int options)) {\n  cmark_strbuf pref = CMARK_BUF_INIT(mem);\n  cmark_strbuf buf = CMARK_BUF_INIT(mem);\n  cmark_node *cur;\n  cmark_event_type ev_type;\n  char *result;\n  cmark_iter *iter = cmark_iter_new(root);\n\n  cmark_renderer renderer = {mem,   &buf, &pref, 0,           width,\n                             0,     0,    true,  true,        false,\n                             false, 0,    outc,  S_cr,        S_blankline,\n                             S_out, 0};\n\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    if (cur->extension) {\n      cur->ancestor_extension = cur->extension;\n    } else if (cur->parent) {\n      cur->ancestor_extension = cur->parent->ancestor_extension;\n    }\n    if (!render_node(&renderer, cur, ev_type, options)) {\n      // a false value causes us to skip processing\n      // the node's contents.  this is used for\n      // autolinks.\n      cmark_iter_reset(iter, cur, CMARK_EVENT_EXIT);\n    }\n  }\n\n  // ensure final newline\n  if (renderer.buffer->size == 0 || renderer.buffer->ptr[renderer.buffer->size - 1] != '\\n') {\n    cmark_strbuf_putc(renderer.buffer, '\\n');\n  }\n\n  result = (char *)cmark_strbuf_detach(renderer.buffer);\n\n  cmark_iter_free(iter);\n  cmark_strbuf_free(renderer.prefix);\n  cmark_strbuf_free(renderer.buffer);\n\n  return result;\n}\n", "#ifndef CMARK_RENDER_H\n#define CMARK_RENDER_H\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <stdlib.h>\n#include \"buffer.h\"\n#include \"chunk.h\"\n\ntypedef enum { LITERAL, NORMAL, TITLE, URL } cmark_escaping;\n\nstruct cmark_renderer {\n  cmark_mem *mem;\n  cmark_strbuf *buffer;\n  cmark_strbuf *prefix;\n  int column;\n  int width;\n  int need_cr;\n  bufsize_t last_breakable;\n  bool begin_line;\n  bool begin_content;\n  bool no_linebreaks;\n  bool in_tight_list_item;\n  int list_number;\n  void (*outc)(struct cmark_renderer *, cmark_node *, cmark_escaping, int32_t, unsigned char);\n  void (*cr)(struct cmark_renderer *);\n  void (*blankline)(struct cmark_renderer *);\n  void (*out)(struct cmark_renderer *, cmark_node *, const char *, bool, cmark_escaping);\n  unsigned int footnote_ix;\n};\n\ntypedef struct cmark_renderer cmark_renderer;\n\nstruct cmark_html_renderer {\n  cmark_strbuf *html;\n  cmark_node *plain;\n  cmark_llist *filter_extensions;\n  unsigned int footnote_ix;\n  unsigned int written_footnote_ix;\n  void *opaque;\n};\n\ntypedef struct cmark_html_renderer cmark_html_renderer;\n\nvoid cmark_render_ascii(cmark_renderer *renderer, const char *s);\n\nvoid cmark_render_code_point(cmark_renderer *renderer, uint32_t c);\n\nchar *cmark_render(cmark_mem *mem, cmark_node *root, int options, int width,\n                   void (*outc)(cmark_renderer *, cmark_node *,\n                                cmark_escaping, int32_t,\n                                unsigned char),\n                   int (*render_node)(cmark_renderer *renderer,\n                                      cmark_node *node,\n                                      cmark_event_type ev_type, int options));\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n", "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"config.h\"\n#include \"cmark-gfm.h\"\n#include \"node.h\"\n#include \"buffer.h\"\n#include \"houdini.h\"\n#include \"syntax_extension.h\"\n\n#define BUFFER_SIZE 100\n#define MAX_INDENT 40\n\n// Functions to convert cmark_nodes to XML strings.\n\nstatic void escape_xml(cmark_strbuf *dest, const unsigned char *source,\n                       bufsize_t length) {\n  houdini_escape_html0(dest, source, length, 0);\n}\n\nstruct render_state {\n  cmark_strbuf *xml;\n  int indent;\n};\n\nstatic CMARK_INLINE void indent(struct render_state *state) {\n  int i;\n  for (i = 0; i < state->indent && i < MAX_INDENT; i++) {\n    cmark_strbuf_putc(state->xml, ' ');\n  }\n}\n\nstatic int S_render_node(cmark_node *node, cmark_event_type ev_type,\n                         struct render_state *state, int options) {\n  cmark_strbuf *xml = state->xml;\n  bool literal = false;\n  cmark_delim_type delim;\n  bool entering = (ev_type == CMARK_EVENT_ENTER);\n  char buffer[BUFFER_SIZE];\n\n  if (entering) {\n    indent(state);\n    cmark_strbuf_putc(xml, '<');\n    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n\n    if (options & CMARK_OPT_SOURCEPOS && node->start_line != 0) {\n      snprintf(buffer, BUFFER_SIZE, \" sourcepos=\\\"%d:%d-%d:%d\\\"\",\n               node->start_line, node->start_column, node->end_line,\n               node->end_column);\n      cmark_strbuf_puts(xml, buffer);\n    }\n\n    if (node->extension && node->extension->xml_attr_func) {\n      const char* r = node->extension->xml_attr_func(node->extension, node);\n      if (r != NULL)\n        cmark_strbuf_puts(xml, r);\n    }\n\n    literal = false;\n\n    switch (node->type) {\n    case CMARK_NODE_DOCUMENT:\n      cmark_strbuf_puts(xml, \" xmlns=\\\"http://commonmark.org/xml/1.0\\\"\");\n      break;\n    case CMARK_NODE_TEXT:\n    case CMARK_NODE_CODE:\n    case CMARK_NODE_HTML_BLOCK:\n    case CMARK_NODE_HTML_INLINE:\n      cmark_strbuf_puts(xml, \" xml:space=\\\"preserve\\\">\");\n      escape_xml(xml, node->as.literal.data, node->as.literal.len);\n      cmark_strbuf_puts(xml, \"</\");\n      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n      literal = true;\n      break;\n    case CMARK_NODE_LIST:\n      switch (cmark_node_get_list_type(node)) {\n      case CMARK_ORDERED_LIST:\n        cmark_strbuf_puts(xml, \" type=\\\"ordered\\\"\");\n        snprintf(buffer, BUFFER_SIZE, \" start=\\\"%d\\\"\",\n                 cmark_node_get_list_start(node));\n        cmark_strbuf_puts(xml, buffer);\n        delim = cmark_node_get_list_delim(node);\n        if (delim == CMARK_PAREN_DELIM) {\n          cmark_strbuf_puts(xml, \" delim=\\\"paren\\\"\");\n        } else if (delim == CMARK_PERIOD_DELIM) {\n          cmark_strbuf_puts(xml, \" delim=\\\"period\\\"\");\n        }\n        break;\n      case CMARK_BULLET_LIST:\n        cmark_strbuf_puts(xml, \" type=\\\"bullet\\\"\");\n        break;\n      default:\n        break;\n      }\n      snprintf(buffer, BUFFER_SIZE, \" tight=\\\"%s\\\"\",\n               (cmark_node_get_list_tight(node) ? \"true\" : \"false\"));\n      cmark_strbuf_puts(xml, buffer);\n      break;\n    case CMARK_NODE_HEADING:\n      snprintf(buffer, BUFFER_SIZE, \" level=\\\"%d\\\"\", node->as.heading.level);\n      cmark_strbuf_puts(xml, buffer);\n      break;\n    case CMARK_NODE_CODE_BLOCK:\n      if (node->as.code.info.len > 0) {\n        cmark_strbuf_puts(xml, \" info=\\\"\");\n        escape_xml(xml, node->as.code.info.data, node->as.code.info.len);\n        cmark_strbuf_putc(xml, '\"');\n      }\n      cmark_strbuf_puts(xml, \" xml:space=\\\"preserve\\\">\");\n      escape_xml(xml, node->as.code.literal.data, node->as.code.literal.len);\n      cmark_strbuf_puts(xml, \"</\");\n      cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n      literal = true;\n      break;\n    case CMARK_NODE_CUSTOM_BLOCK:\n    case CMARK_NODE_CUSTOM_INLINE:\n      cmark_strbuf_puts(xml, \" on_enter=\\\"\");\n      escape_xml(xml, node->as.custom.on_enter.data,\n                 node->as.custom.on_enter.len);\n      cmark_strbuf_putc(xml, '\"');\n      cmark_strbuf_puts(xml, \" on_exit=\\\"\");\n      escape_xml(xml, node->as.custom.on_exit.data,\n                 node->as.custom.on_exit.len);\n      cmark_strbuf_putc(xml, '\"');\n      break;\n    case CMARK_NODE_LINK:\n    case CMARK_NODE_IMAGE:\n      cmark_strbuf_puts(xml, \" destination=\\\"\");\n      escape_xml(xml, node->as.link.url.data, node->as.link.url.len);\n      cmark_strbuf_putc(xml, '\"');\n      cmark_strbuf_puts(xml, \" title=\\\"\");\n      escape_xml(xml, node->as.link.title.data, node->as.link.title.len);\n      cmark_strbuf_putc(xml, '\"');\n      break;\n    default:\n      break;\n    }\n    if (node->first_child) {\n      state->indent += 2;\n    } else if (!literal) {\n      cmark_strbuf_puts(xml, \" /\");\n    }\n    cmark_strbuf_puts(xml, \">\\n\");\n\n  } else if (node->first_child) {\n    state->indent -= 2;\n    indent(state);\n    cmark_strbuf_puts(xml, \"</\");\n    cmark_strbuf_puts(xml, cmark_node_get_type_string(node));\n    cmark_strbuf_puts(xml, \">\\n\");\n  }\n\n  return 1;\n}\n\nchar *cmark_render_xml(cmark_node *root, int options) {\n  return cmark_render_xml_with_mem(root, options, cmark_node_mem(root));\n}\n\nchar *cmark_render_xml_with_mem(cmark_node *root, int options, cmark_mem *mem) {\n  char *result;\n  cmark_strbuf xml = CMARK_BUF_INIT(mem);\n  cmark_event_type ev_type;\n  cmark_node *cur;\n  struct render_state state = {&xml, 0};\n\n  cmark_iter *iter = cmark_iter_new(root);\n\n  cmark_strbuf_puts(state.xml, \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");\n  cmark_strbuf_puts(state.xml,\n                    \"<!DOCTYPE document SYSTEM \\\"CommonMark.dtd\\\">\\n\");\n  while ((ev_type = cmark_iter_next(iter)) != CMARK_EVENT_DONE) {\n    cur = cmark_iter_get_node(iter);\n    S_render_node(cur, ev_type, &state, options);\n  }\n  result = (char *)cmark_strbuf_detach(&xml);\n\n  cmark_iter_free(iter);\n  return result;\n}\n", "---\ntitle: GitHub Flavored Markdown Spec\nversion: 0.29\ndate: '2019-04-06'\nlicense: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)'\n...\n\n# Introduction\n\n## What is GitHub Flavored Markdown?\n\nGitHub Flavored Markdown, often shortened as GFM, is the dialect of Markdown\nthat is currently supported for user content on GitHub.com and GitHub\nEnterprise.\n\nThis formal specification, based on the CommonMark Spec, defines the syntax and\nsemantics of this dialect.\n\nGFM is a strict superset of CommonMark. All the features which are supported in\nGitHub user content and that are not specified on the original CommonMark Spec\nare hence known as **extensions**, and highlighted as such.\n\nWhile GFM supports a wide range of inputs, it's worth noting that GitHub.com\nand GitHub Enterprise perform additional post-processing and sanitization after\nGFM is converted to HTML to ensure security and consistency of the website.\n\n## What is Markdown?\n\nMarkdown is a plain text format for writing structured documents,\nbased on conventions for indicating formatting in email\nand usenet posts.  It was developed by John Gruber (with\nhelp from Aaron Swartz) and released in 2004 in the form of a\n[syntax description](http://daringfireball.net/projects/markdown/syntax)\nand a Perl script (`Markdown.pl`) for converting Markdown to\nHTML.  In the next decade, dozens of implementations were\ndeveloped in many languages.  Some extended the original\nMarkdown syntax with conventions for footnotes, tables, and\nother document elements.  Some allowed Markdown documents to be\nrendered in formats other than HTML.  Websites like Reddit,\nStackOverflow, and GitHub had millions of people using Markdown.\nAnd Markdown started to be used beyond the web, to author books,\narticles, slide shows, letters, and lecture notes.\n\nWhat distinguishes Markdown from many other lightweight markup\nsyntaxes, which are often easier to write, is its readability.\nAs Gruber writes:\n\n> The overriding design goal for Markdown's formatting syntax is\n> to make it as readable as possible. The idea is that a\n> Markdown-formatted document should be publishable as-is, as\n> plain text, without looking like it's been marked up with tags\n> or formatting instructions.\n> (<http://daringfireball.net/projects/markdown/>)\n\nThe point can be illustrated by comparing a sample of\n[AsciiDoc](http://www.methods.co.nz/asciidoc/) with\nan equivalent sample of Markdown.  Here is a sample of\nAsciiDoc from the AsciiDoc manual:\n\n```\n1. List item one.\n+\nList item one continued with a second paragraph followed by an\nIndented block.\n+\n.................\n$ ls *.sh\n$ mv *.sh ~/tmp\n.................\n+\nList item continued with a third paragraph.\n\n2. List item two continued with an open block.\n+\n--\nThis paragraph is part of the preceding list item.\n\na. This list is nested and does not require explicit item\ncontinuation.\n+\nThis paragraph is part of the preceding list item.\n\nb. List item b.\n\nThis paragraph belongs to item two of the outer list.\n--\n```\n\nAnd here is the equivalent in Markdown:\n```\n1.  List item one.\n\n    List item one continued with a second paragraph followed by an\n    Indented block.\n\n        $ ls *.sh\n        $ mv *.sh ~/tmp\n\n    List item continued with a third paragraph.\n\n2.  List item two continued with an open block.\n\n    This paragraph is part of the preceding list item.\n\n    1. This list is nested and does not require explicit item continuation.\n\n       This paragraph is part of the preceding list item.\n\n    2. List item b.\n\n    This paragraph belongs to item two of the outer list.\n```\n\nThe AsciiDoc version is, arguably, easier to write. You don't need\nto worry about indentation.  But the Markdown version is much easier\nto read.  The nesting of list items is apparent to the eye in the\nsource, not just in the processed document.\n\n## Why is a spec needed?\n\nJohn Gruber's [canonical description of Markdown's\nsyntax](http://daringfireball.net/projects/markdown/syntax)\ndoes not specify the syntax unambiguously.  Here are some examples of\nquestions it does not answer:\n\n1.  How much indentation is needed for a sublist?  The spec says that\n    continuation paragraphs need to be indented four spaces, but is\n    not fully explicit about sublists.  It is natural to think that\n    they, too, must be indented four spaces, but `Markdown.pl` does\n    not require that.  This is hardly a \"corner case,\" and divergences\n    between implementations on this issue often lead to surprises for\n    users in real documents. (See [this comment by John\n    Gruber](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/1997).)\n\n2.  Is a blank line needed before a block quote or heading?\n    Most implementations do not require the blank line.  However,\n    this can lead to unexpected results in hard-wrapped text, and\n    also to ambiguities in parsing (note that some implementations\n    put the heading inside the blockquote, while others do not).\n    (John Gruber has also spoken [in favor of requiring the blank\n    lines](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/2146).)\n\n3.  Is a blank line needed before an indented code block?\n    (`Markdown.pl` requires it, but this is not mentioned in the\n    documentation, and some implementations do not require it.)\n\n    ``` markdown\n    paragraph\n        code?\n    ```\n\n4.  What is the exact rule for determining when list items get\n    wrapped in `<p>` tags?  Can a list be partially \"loose\" and partially\n    \"tight\"?  What should we do with a list like this?\n\n    ``` markdown\n    1. one\n\n    2. two\n    3. three\n    ```\n\n    Or this?\n\n    ``` markdown\n    1.  one\n        - a\n\n        - b\n    2.  two\n    ```\n\n    (There are some relevant comments by John Gruber\n    [here](https://web.archive.org/web/20170611172104/http://article.gmane.org/gmane.text.markdown.general/2554).)\n\n5.  Can list markers be indented?  Can ordered list markers be right-aligned?\n\n    ``` markdown\n     8. item 1\n     9. item 2\n    10. item 2a\n    ```\n\n6.  Is this one list with a thematic break in its second item,\n    or two lists separated by a thematic break?\n\n    ``` markdown\n    * a\n    * * * * *\n    * b\n    ```\n\n7.  When list markers change from numbers to bullets, do we have\n    two lists or one?  (The Markdown syntax description suggests two,\n    but the perl scripts and many other implementations produce one.)\n\n    ``` markdown\n    1. fee\n    2. fie\n    -  foe\n    -  fum\n    ```\n\n8.  What are the precedence rules for the markers of inline structure?\n    For example, is the following a valid link, or does the code span\n    take precedence ?\n\n    ``` markdown\n    [a backtick (`)](/url) and [another backtick (`)](/url).\n    ```\n\n9.  What are the precedence rules for markers of emphasis and strong\n    emphasis?  For example, how should the following be parsed?\n\n    ``` markdown\n    *foo *bar* baz*\n    ```\n\n10. What are the precedence rules between block-level and inline-level\n    structure?  For example, how should the following be parsed?\n\n    ``` markdown\n    - `a long code span can contain a hyphen like this\n      - and it can screw things up`\n    ```\n\n11. Can list items include section headings?  (`Markdown.pl` does not\n    allow this, but does allow blockquotes to include headings.)\n\n    ``` markdown\n    - # Heading\n    ```\n\n12. Can list items be empty?\n\n    ``` markdown\n    * a\n    *\n    * b\n    ```\n\n13. Can link references be defined inside block quotes or list items?\n\n    ``` markdown\n    > Blockquote [foo].\n    >\n    > [foo]: /url\n    ```\n\n14. If there are multiple definitions for the same reference, which takes\n    precedence?\n\n    ``` markdown\n    [foo]: /url1\n    [foo]: /url2\n\n    [foo][]\n    ```\n\nIn the absence of a spec, early implementers consulted `Markdown.pl`\nto resolve these ambiguities.  But `Markdown.pl` was quite buggy, and\ngave manifestly bad results in many cases, so it was not a\nsatisfactory replacement for a spec.\n\nBecause there is no unambiguous spec, implementations have diverged\nconsiderably.  As a result, users are often surprised to find that\na document that renders one way on one system (say, a GitHub wiki)\nrenders differently on another (say, converting to docbook using\npandoc).  To make matters worse, because nothing in Markdown counts\nas a \"syntax error,\" the divergence often isn't discovered right away.\n\n## About this document\n\nThis document attempts to specify Markdown syntax unambiguously.\nIt contains many examples with side-by-side Markdown and\nHTML.  These are intended to double as conformance tests.  An\naccompanying script `spec_tests.py` can be used to run the tests\nagainst any Markdown program:\n\n    python test/spec_tests.py --spec spec.txt --program PROGRAM\n\nSince this document describes how Markdown is to be parsed into\nan abstract syntax tree, it would have made sense to use an abstract\nrepresentation of the syntax tree instead of HTML.  But HTML is capable\nof representing the structural distinctions we need to make, and the\nchoice of HTML for the tests makes it possible to run the tests against\nan implementation without writing an abstract syntax tree renderer.\n\nThis document is generated from a text file, `spec.txt`, written\nin Markdown with a small extension for the side-by-side tests.\nThe script `tools/makespec.py` can be used to convert `spec.txt` into\nHTML or CommonMark (which can then be converted into other formats).\n\nIn the examples, the `\u2192` character is used to represent tabs.\n\n# Preliminaries\n\n## Characters and lines\n\nAny sequence of [characters] is a valid CommonMark\ndocument.\n\nA [character](@) is a Unicode code point.  Although some\ncode points (for example, combining accents) do not correspond to\ncharacters in an intuitive sense, all code points count as characters\nfor purposes of this spec.\n\nThis spec does not specify an encoding; it thinks of lines as composed\nof [characters] rather than bytes.  A conforming parser may be limited\nto a certain encoding.\n\nA [line](@) is a sequence of zero or more [characters]\nother than newline (`U+000A`) or carriage return (`U+000D`),\nfollowed by a [line ending] or by the end of file.\n\nA [line ending](@) is a newline (`U+000A`), a carriage return\n(`U+000D`) not followed by a newline, or a carriage return and a\nfollowing newline.\n\nA line containing no characters, or a line containing only spaces\n(`U+0020`) or tabs (`U+0009`), is called a [blank line](@).\n\nThe following definitions of character classes will be used in this spec:\n\nA [whitespace character](@) is a space\n(`U+0020`), tab (`U+0009`), newline (`U+000A`), line tabulation (`U+000B`),\nform feed (`U+000C`), or carriage return (`U+000D`).\n\n[Whitespace](@) is a sequence of one or more [whitespace\ncharacters].\n\nA [Unicode whitespace character](@) is\nany code point in the Unicode `Zs` general category, or a tab (`U+0009`),\ncarriage return (`U+000D`), newline (`U+000A`), or form feed\n(`U+000C`).\n\n[Unicode whitespace](@) is a sequence of one\nor more [Unicode whitespace characters].\n\nA [space](@) is `U+0020`.\n\nA [non-whitespace character](@) is any character\nthat is not a [whitespace character].\n\nAn [ASCII punctuation character](@)\nis `!`, `\"`, `#`, `$`, `%`, `&`, `'`, `(`, `)`,\n`*`, `+`, `,`, `-`, `.`, `/` (U+0021\u20132F), \n`:`, `;`, `<`, `=`, `>`, `?`, `@` (U+003A\u20130040),\n`[`, `\\`, `]`, `^`, `_`, `` ` `` (U+005B\u20130060), \n`{`, `|`, `}`, or `~` (U+007B\u2013007E).\n\nA [punctuation character](@) is an [ASCII\npunctuation character] or anything in\nthe general Unicode categories  `Pc`, `Pd`, `Pe`, `Pf`, `Pi`, `Po`, or `Ps`.\n\n## Tabs\n\nTabs in lines are not expanded to [spaces].  However,\nin contexts where whitespace helps to define block structure,\ntabs behave as if they were replaced by spaces with a tab stop\nof 4 characters.\n\nThus, for example, a tab can be used instead of four spaces\nin an indented code block.  (Note, however, that internal\ntabs are passed through as literal tabs, not expanded to\nspaces.)\n\n```````````````````````````````` example\n\u2192foo\u2192baz\u2192\u2192bim\n.\n<pre><code>foo\u2192baz\u2192\u2192bim\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n  \u2192foo\u2192baz\u2192\u2192bim\n.\n<pre><code>foo\u2192baz\u2192\u2192bim\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n    a\u2192a\n    \u1f50\u2192a\n.\n<pre><code>a\u2192a\n\u1f50\u2192a\n</code></pre>\n````````````````````````````````\n\nIn the following example, a continuation paragraph of a list\nitem is indented with a tab; this has exactly the same effect\nas indentation with four spaces would:\n\n```````````````````````````````` example\n  - foo\n\n\u2192bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n- foo\n\n\u2192\u2192bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>  bar\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nNormally the `>` that begins a block quote may be followed\noptionally by a space, which is not considered part of the\ncontent.  In the following case `>` is followed by a tab,\nwhich is treated as if it were expanded into three spaces.\nSince one of these spaces is considered part of the\ndelimiter, `foo` is considered to be indented six spaces\ninside the block quote context, so we get an indented\ncode block starting with two spaces.\n\n```````````````````````````````` example\n>\u2192\u2192foo\n.\n<blockquote>\n<pre><code>  foo\n</code></pre>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example\n-\u2192\u2192foo\n.\n<ul>\n<li>\n<pre><code>  foo\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    foo\n\u2192bar\n.\n<pre><code>foo\nbar\n</code></pre>\n````````````````````````````````\n\n```````````````````````````````` example\n - foo\n   - bar\n\u2192 - baz\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n#\u2192Foo\n.\n<h1>Foo</h1>\n````````````````````````````````\n\n```````````````````````````````` example\n*\u2192*\u2192*\u2192\n.\n<hr />\n````````````````````````````````\n\n\n## Insecure characters\n\nFor security reasons, the Unicode character `U+0000` must be replaced\nwith the REPLACEMENT CHARACTER (`U+FFFD`).\n\n# Blocks and inlines\n\nWe can think of a document as a sequence of\n[blocks](@)---structural elements like paragraphs, block\nquotations, lists, headings, rules, and code blocks.  Some blocks (like\nblock quotes and list items) contain other blocks; others (like\nheadings and paragraphs) contain [inline](@) content---text,\nlinks, emphasized text, images, code spans, and so on.\n\n## Precedence\n\nIndicators of block structure always take precedence over indicators\nof inline structure.  So, for example, the following is a list with\ntwo items, not a list with one item containing a code span:\n\n```````````````````````````````` example\n- `one\n- two`\n.\n<ul>\n<li>`one</li>\n<li>two`</li>\n</ul>\n````````````````````````````````\n\n\nThis means that parsing can proceed in two steps:  first, the block\nstructure of the document can be discerned; second, text lines inside\nparagraphs, headings, and other block constructs can be parsed for inline\nstructure.  The second step requires information about link reference\ndefinitions that will be available only at the end of the first\nstep.  Note that the first step requires processing lines in sequence,\nbut the second can be parallelized, since the inline parsing of\none block element does not affect the inline parsing of any other.\n\n## Container blocks and leaf blocks\n\nWe can divide blocks into two types:\n[container blocks](@),\nwhich can contain other blocks, and [leaf blocks](@),\nwhich cannot.\n\n# Leaf blocks\n\nThis section describes the different kinds of leaf block that make up a\nMarkdown document.\n\n## Thematic breaks\n\nA line consisting of 0-3 spaces of indentation, followed by a sequence\nof three or more matching `-`, `_`, or `*` characters, each followed\noptionally by any number of spaces or tabs, forms a\n[thematic break](@).\n\n```````````````````````````````` example\n***\n---\n___\n.\n<hr />\n<hr />\n<hr />\n````````````````````````````````\n\n\nWrong characters:\n\n```````````````````````````````` example\n+++\n.\n<p>+++</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n===\n.\n<p>===</p>\n````````````````````````````````\n\n\nNot enough characters:\n\n```````````````````````````````` example\n--\n**\n__\n.\n<p>--\n**\n__</p>\n````````````````````````````````\n\n\nOne to three spaces indent are allowed:\n\n```````````````````````````````` example\n ***\n  ***\n   ***\n.\n<hr />\n<hr />\n<hr />\n````````````````````````````````\n\n\nFour spaces is too many:\n\n```````````````````````````````` example\n    ***\n.\n<pre><code>***\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo\n    ***\n.\n<p>Foo\n***</p>\n````````````````````````````````\n\n\nMore than three characters may be used:\n\n```````````````````````````````` example\n_____________________________________\n.\n<hr />\n````````````````````````````````\n\n\nSpaces are allowed between the characters:\n\n```````````````````````````````` example\n - - -\n.\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n **  * ** * ** * **\n.\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n-     -      -      -\n.\n<hr />\n````````````````````````````````\n\n\nSpaces are allowed at the end:\n\n```````````````````````````````` example\n- - - -    \n.\n<hr />\n````````````````````````````````\n\n\nHowever, no other characters may occur in the line:\n\n```````````````````````````````` example\n_ _ _ _ a\n\na------\n\n---a---\n.\n<p>_ _ _ _ a</p>\n<p>a------</p>\n<p>---a---</p>\n````````````````````````````````\n\n\nIt is required that all of the [non-whitespace characters] be the same.\nSo, this is not a thematic break:\n\n```````````````````````````````` example\n *-*\n.\n<p><em>-</em></p>\n````````````````````````````````\n\n\nThematic breaks do not need blank lines before or after:\n\n```````````````````````````````` example\n- foo\n***\n- bar\n.\n<ul>\n<li>foo</li>\n</ul>\n<hr />\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nThematic breaks can interrupt a paragraph:\n\n```````````````````````````````` example\nFoo\n***\nbar\n.\n<p>Foo</p>\n<hr />\n<p>bar</p>\n````````````````````````````````\n\n\nIf a line of dashes that meets the above conditions for being a\nthematic break could also be interpreted as the underline of a [setext\nheading], the interpretation as a\n[setext heading] takes precedence. Thus, for example,\nthis is a setext heading, not a paragraph followed by a thematic break:\n\n```````````````````````````````` example\nFoo\n---\nbar\n.\n<h2>Foo</h2>\n<p>bar</p>\n````````````````````````````````\n\n\nWhen both a thematic break and a list item are possible\ninterpretations of a line, the thematic break takes precedence:\n\n```````````````````````````````` example\n* Foo\n* * *\n* Bar\n.\n<ul>\n<li>Foo</li>\n</ul>\n<hr />\n<ul>\n<li>Bar</li>\n</ul>\n````````````````````````````````\n\n\nIf you want a thematic break in a list item, use a different bullet:\n\n```````````````````````````````` example\n- Foo\n- * * *\n.\n<ul>\n<li>Foo</li>\n<li>\n<hr />\n</li>\n</ul>\n````````````````````````````````\n\n\n## ATX headings\n\nAn [ATX heading](@)\nconsists of a string of characters, parsed as inline content, between an\nopening sequence of 1--6 unescaped `#` characters and an optional\nclosing sequence of any number of unescaped `#` characters.\nThe opening sequence of `#` characters must be followed by a\n[space] or by the end of line. The optional closing sequence of `#`s must be\npreceded by a [space] and may be followed by spaces only.  The opening\n`#` character may be indented 0-3 spaces.  The raw contents of the\nheading are stripped of leading and trailing spaces before being parsed\nas inline content.  The heading level is equal to the number of `#`\ncharacters in the opening sequence.\n\nSimple headings:\n\n```````````````````````````````` example\n# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n.\n<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>\n````````````````````````````````\n\n\nMore than six `#` characters is not a heading:\n\n```````````````````````````````` example\n####### foo\n.\n<p>####### foo</p>\n````````````````````````````````\n\n\nAt least one space is required between the `#` characters and the\nheading's contents, unless the heading is empty.  Note that many\nimplementations currently do not require the space.  However, the\nspace was required by the\n[original ATX implementation](http://www.aaronsw.com/2002/atx/atx.py),\nand it helps prevent things like the following from being parsed as\nheadings:\n\n```````````````````````````````` example\n#5 bolt\n\n#hashtag\n.\n<p>#5 bolt</p>\n<p>#hashtag</p>\n````````````````````````````````\n\n\nThis is not a heading, because the first `#` is escaped:\n\n```````````````````````````````` example\n\\## foo\n.\n<p>## foo</p>\n````````````````````````````````\n\n\nContents are parsed as inlines:\n\n```````````````````````````````` example\n# foo *bar* \\*baz\\*\n.\n<h1>foo <em>bar</em> *baz*</h1>\n````````````````````````````````\n\n\nLeading and trailing [whitespace] is ignored in parsing inline content:\n\n```````````````````````````````` example\n#                  foo                     \n.\n<h1>foo</h1>\n````````````````````````````````\n\n\nOne to three spaces indentation are allowed:\n\n```````````````````````````````` example\n ### foo\n  ## foo\n   # foo\n.\n<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>\n````````````````````````````````\n\n\nFour spaces are too much:\n\n```````````````````````````````` example\n    # foo\n.\n<pre><code># foo\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo\n    # bar\n.\n<p>foo\n# bar</p>\n````````````````````````````````\n\n\nA closing sequence of `#` characters is optional:\n\n```````````````````````````````` example\n## foo ##\n  ###   bar    ###\n.\n<h2>foo</h2>\n<h3>bar</h3>\n````````````````````````````````\n\n\nIt need not be the same length as the opening sequence:\n\n```````````````````````````````` example\n# foo ##################################\n##### foo ##\n.\n<h1>foo</h1>\n<h5>foo</h5>\n````````````````````````````````\n\n\nSpaces are allowed after the closing sequence:\n\n```````````````````````````````` example\n### foo ###     \n.\n<h3>foo</h3>\n````````````````````````````````\n\n\nA sequence of `#` characters with anything but [spaces] following it\nis not a closing sequence, but counts as part of the contents of the\nheading:\n\n```````````````````````````````` example\n### foo ### b\n.\n<h3>foo ### b</h3>\n````````````````````````````````\n\n\nThe closing sequence must be preceded by a space:\n\n```````````````````````````````` example\n# foo#\n.\n<h1>foo#</h1>\n````````````````````````````````\n\n\nBackslash-escaped `#` characters do not count as part\nof the closing sequence:\n\n```````````````````````````````` example\n### foo \\###\n## foo #\\##\n# foo \\#\n.\n<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>\n````````````````````````````````\n\n\nATX headings need not be separated from surrounding content by blank\nlines, and they can interrupt paragraphs:\n\n```````````````````````````````` example\n****\n## foo\n****\n.\n<hr />\n<h2>foo</h2>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo bar\n# baz\nBar foo\n.\n<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>\n````````````````````````````````\n\n\nATX headings can be empty:\n\n```````````````````````````````` example\n## \n#\n### ###\n.\n<h2></h2>\n<h1></h1>\n<h3></h3>\n````````````````````````````````\n\n\n## Setext headings\n\nA [setext heading](@) consists of one or more\nlines of text, each containing at least one [non-whitespace\ncharacter], with no more than 3 spaces indentation, followed by\na [setext heading underline].  The lines of text must be such\nthat, were they not followed by the setext heading underline,\nthey would be interpreted as a paragraph:  they cannot be\ninterpretable as a [code fence], [ATX heading][ATX headings],\n[block quote][block quotes], [thematic break][thematic breaks],\n[list item][list items], or [HTML block][HTML blocks].\n\nA [setext heading underline](@) is a sequence of\n`=` characters or a sequence of `-` characters, with no more than 3\nspaces of indentation and any number of trailing spaces or tabs.\n\nThe heading is a level 1 heading if `=` characters are used in\nthe [setext heading underline], and a level 2 heading if `-`\ncharacters are used.  The contents of the heading are the result\nof parsing the preceding lines of text as CommonMark inline\ncontent.\n\nIn general, a setext heading need not be preceded or followed by a\nblank line.  However, it cannot interrupt a paragraph, so when a\nsetext heading comes after a paragraph, a blank line is needed between\nthem.\n\nSimple examples:\n\n```````````````````````````````` example\nFoo *bar*\n=========\n\nFoo *bar*\n---------\n.\n<h1>Foo <em>bar</em></h1>\n<h2>Foo <em>bar</em></h2>\n````````````````````````````````\n\n\nThe content of the header may span more than one line:\n\n```````````````````````````````` example\nFoo *bar\nbaz*\n====\n.\n<h1>Foo <em>bar\nbaz</em></h1>\n````````````````````````````````\n\nThe contents are the result of parsing the headings's raw\ncontent as inlines.  The heading's raw content is formed by\nconcatenating the lines and removing initial and final\n[whitespace].\n\n```````````````````````````````` example\n  Foo *bar\nbaz*\u2192\n====\n.\n<h1>Foo <em>bar\nbaz</em></h1>\n````````````````````````````````\n\n\nThe underlining can be any length:\n\n```````````````````````````````` example\nFoo\n-------------------------\n\nFoo\n=\n.\n<h2>Foo</h2>\n<h1>Foo</h1>\n````````````````````````````````\n\n\nThe heading content can be indented up to three spaces, and need\nnot line up with the underlining:\n\n```````````````````````````````` example\n   Foo\n---\n\n  Foo\n-----\n\n  Foo\n  ===\n.\n<h2>Foo</h2>\n<h2>Foo</h2>\n<h1>Foo</h1>\n````````````````````````````````\n\n\nFour spaces indent is too much:\n\n```````````````````````````````` example\n    Foo\n    ---\n\n    Foo\n---\n.\n<pre><code>Foo\n---\n\nFoo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\nThe setext heading underline can be indented up to three spaces, and\nmay have trailing spaces:\n\n```````````````````````````````` example\nFoo\n   ----      \n.\n<h2>Foo</h2>\n````````````````````````````````\n\n\nFour spaces is too much:\n\n```````````````````````````````` example\nFoo\n    ---\n.\n<p>Foo\n---</p>\n````````````````````````````````\n\n\nThe setext heading underline cannot contain internal spaces:\n\n```````````````````````````````` example\nFoo\n= =\n\nFoo\n--- -\n.\n<p>Foo\n= =</p>\n<p>Foo</p>\n<hr />\n````````````````````````````````\n\n\nTrailing spaces in the content line do not cause a line break:\n\n```````````````````````````````` example\nFoo  \n-----\n.\n<h2>Foo</h2>\n````````````````````````````````\n\n\nNor does a backslash at the end:\n\n```````````````````````````````` example\nFoo\\\n----\n.\n<h2>Foo\\</h2>\n````````````````````````````````\n\n\nSince indicators of block structure take precedence over\nindicators of inline structure, the following are setext headings:\n\n```````````````````````````````` example\n`Foo\n----\n`\n\n<a title=\"a lot\n---\nof dashes\"/>\n.\n<h2>`Foo</h2>\n<p>`</p>\n<h2>&lt;a title=&quot;a lot</h2>\n<p>of dashes&quot;/&gt;</p>\n````````````````````````````````\n\n\nThe setext heading underline cannot be a [lazy continuation\nline] in a list item or block quote:\n\n```````````````````````````````` example\n> Foo\n---\n.\n<blockquote>\n<p>Foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n> foo\nbar\n===\n.\n<blockquote>\n<p>foo\nbar\n===</p>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- Foo\n---\n.\n<ul>\n<li>Foo</li>\n</ul>\n<hr />\n````````````````````````````````\n\n\nA blank line is needed between a paragraph and a following\nsetext heading, since otherwise the paragraph becomes part\nof the heading's content:\n\n```````````````````````````````` example\nFoo\nBar\n---\n.\n<h2>Foo\nBar</h2>\n````````````````````````````````\n\n\nBut in general a blank line is not required before or after\nsetext headings:\n\n```````````````````````````````` example\n---\nFoo\n---\nBar\n---\nBaz\n.\n<hr />\n<h2>Foo</h2>\n<h2>Bar</h2>\n<p>Baz</p>\n````````````````````````````````\n\n\nSetext headings cannot be empty:\n\n```````````````````````````````` example\n\n====\n.\n<p>====</p>\n````````````````````````````````\n\n\nSetext heading text lines must not be interpretable as block\nconstructs other than paragraphs.  So, the line of dashes\nin these examples gets interpreted as a thematic break:\n\n```````````````````````````````` example\n---\n---\n.\n<hr />\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n- foo\n-----\n.\n<ul>\n<li>foo</li>\n</ul>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n    foo\n---\n.\n<pre><code>foo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\n```````````````````````````````` example\n> foo\n-----\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\nIf you want a heading with `> foo` as its literal text, you can\nuse backslash escapes:\n\n```````````````````````````````` example\n\\> foo\n------\n.\n<h2>&gt; foo</h2>\n````````````````````````````````\n\n\n**Compatibility note:**  Most existing Markdown implementations\ndo not allow the text of setext headings to span multiple lines.\nBut there is no consensus about how to interpret\n\n``` markdown\nFoo\nbar\n---\nbaz\n```\n\nOne can find four different interpretations:\n\n1. paragraph \"Foo\", heading \"bar\", paragraph \"baz\"\n2. paragraph \"Foo bar\", thematic break, paragraph \"baz\"\n3. paragraph \"Foo bar --- baz\"\n4. heading \"Foo bar\", paragraph \"baz\"\n\nWe find interpretation 4 most natural, and interpretation 4\nincreases the expressive power of CommonMark, by allowing\nmultiline headings.  Authors who want interpretation 1 can\nput a blank line after the first paragraph:\n\n```````````````````````````````` example\nFoo\n\nbar\n---\nbaz\n.\n<p>Foo</p>\n<h2>bar</h2>\n<p>baz</p>\n````````````````````````````````\n\n\nAuthors who want interpretation 2 can put blank lines around\nthe thematic break,\n\n```````````````````````````````` example\nFoo\nbar\n\n---\n\nbaz\n.\n<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n````````````````````````````````\n\n\nor use a thematic break that cannot count as a [setext heading\nunderline], such as\n\n```````````````````````````````` example\nFoo\nbar\n* * *\nbaz\n.\n<p>Foo\nbar</p>\n<hr />\n<p>baz</p>\n````````````````````````````````\n\n\nAuthors who want interpretation 3 can use backslash escapes:\n\n```````````````````````````````` example\nFoo\nbar\n\\---\nbaz\n.\n<p>Foo\nbar\n---\nbaz</p>\n````````````````````````````````\n\n\n## Indented code blocks\n\nAn [indented code block](@) is composed of one or more\n[indented chunks] separated by blank lines.\nAn [indented chunk](@) is a sequence of non-blank lines,\neach indented four or more spaces. The contents of the code block are\nthe literal contents of the lines, including trailing\n[line endings], minus four spaces of indentation.\nAn indented code block has no [info string].\n\nAn indented code block cannot interrupt a paragraph, so there must be\na blank line between a paragraph and a following indented code block.\n(A blank line is not needed, however, between a code block and a following\nparagraph.)\n\n```````````````````````````````` example\n    a simple\n      indented code block\n.\n<pre><code>a simple\n  indented code block\n</code></pre>\n````````````````````````````````\n\n\nIf there is any ambiguity between an interpretation of indentation\nas a code block and as indicating that material belongs to a [list\nitem][list items], the list item interpretation takes precedence:\n\n```````````````````````````````` example\n  - foo\n\n    bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1.  foo\n\n    - bar\n.\n<ol>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\n\nThe contents of a code block are literal text, and do not get parsed\nas Markdown:\n\n```````````````````````````````` example\n    <a/>\n    *hi*\n\n    - one\n.\n<pre><code>&lt;a/&gt;\n*hi*\n\n- one\n</code></pre>\n````````````````````````````````\n\n\nHere we have three chunks separated by blank lines:\n\n```````````````````````````````` example\n    chunk1\n\n    chunk2\n  \n \n \n    chunk3\n.\n<pre><code>chunk1\n\nchunk2\n\n\n\nchunk3\n</code></pre>\n````````````````````````````````\n\n\nAny initial spaces beyond four will be included in the content, even\nin interior blank lines:\n\n```````````````````````````````` example\n    chunk1\n      \n      chunk2\n.\n<pre><code>chunk1\n  \n  chunk2\n</code></pre>\n````````````````````````````````\n\n\nAn indented code block cannot interrupt a paragraph.  (This\nallows hanging indents and the like.)\n\n```````````````````````````````` example\nFoo\n    bar\n\n.\n<p>Foo\nbar</p>\n````````````````````````````````\n\n\nHowever, any non-blank line with fewer than four leading spaces ends\nthe code block immediately.  So a paragraph may occur immediately\nafter indented code:\n\n```````````````````````````````` example\n    foo\nbar\n.\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n````````````````````````````````\n\n\nAnd indented code can occur immediately before and after other kinds of\nblocks:\n\n```````````````````````````````` example\n# Heading\n    foo\nHeading\n------\n    foo\n----\n.\n<h1>Heading</h1>\n<pre><code>foo\n</code></pre>\n<h2>Heading</h2>\n<pre><code>foo\n</code></pre>\n<hr />\n````````````````````````````````\n\n\nThe first line can be indented more than four spaces:\n\n```````````````````````````````` example\n        foo\n    bar\n.\n<pre><code>    foo\nbar\n</code></pre>\n````````````````````````````````\n\n\nBlank lines preceding or following an indented code block\nare not included in it:\n\n```````````````````````````````` example\n\n    \n    foo\n    \n\n.\n<pre><code>foo\n</code></pre>\n````````````````````````````````\n\n\nTrailing spaces are included in the code block's content:\n\n```````````````````````````````` example\n    foo  \n.\n<pre><code>foo  \n</code></pre>\n````````````````````````````````\n\n\n\n## Fenced code blocks\n\nA [code fence](@) is a sequence\nof at least three consecutive backtick characters (`` ` ``) or\ntildes (`~`).  (Tildes and backticks cannot be mixed.)\nA [fenced code block](@)\nbegins with a code fence, indented no more than three spaces.\n\nThe line with the opening code fence may optionally contain some text\nfollowing the code fence; this is trimmed of leading and trailing\nwhitespace and called the [info string](@). If the [info string] comes\nafter a backtick fence, it may not contain any backtick\ncharacters.  (The reason for this restriction is that otherwise\nsome inline code would be incorrectly interpreted as the\nbeginning of a fenced code block.)\n\nThe content of the code block consists of all subsequent lines, until\na closing [code fence] of the same type as the code block\nbegan with (backticks or tildes), and with at least as many backticks\nor tildes as the opening code fence.  If the leading code fence is\nindented N spaces, then up to N spaces of indentation are removed from\neach line of the content (if present).  (If a content line is not\nindented, it is preserved unchanged.  If it is indented less than N\nspaces, all of the indentation is removed.)\n\nThe closing code fence may be indented up to three spaces, and may be\nfollowed only by spaces, which are ignored.  If the end of the\ncontaining block (or document) is reached and no closing code fence\nhas been found, the code block contains all of the lines after the\nopening code fence until the end of the containing block (or\ndocument).  (An alternative spec would require backtracking in the\nevent that a closing code fence is not found.  But this makes parsing\nmuch less efficient, and there seems to be no real downside to the\nbehavior described here.)\n\nA fenced code block may interrupt a paragraph, and does not require\na blank line either before or after.\n\nThe content of a code fence is treated as literal text, not parsed\nas inlines.  The first word of the [info string] is typically used to\nspecify the language of the code sample, and rendered in the `class`\nattribute of the `code` tag.  However, this spec does not mandate any\nparticular treatment of the [info string].\n\nHere is a simple example with backticks:\n\n```````````````````````````````` example\n```\n<\n >\n```\n.\n<pre><code>&lt;\n &gt;\n</code></pre>\n````````````````````````````````\n\n\nWith tildes:\n\n```````````````````````````````` example\n~~~\n<\n >\n~~~\n.\n<pre><code>&lt;\n &gt;\n</code></pre>\n````````````````````````````````\n\nFewer than three backticks is not enough:\n\n```````````````````````````````` example\n``\nfoo\n``\n.\n<p><code>foo</code></p>\n````````````````````````````````\n\nThe closing code fence must use the same character as the opening\nfence:\n\n```````````````````````````````` example\n```\naaa\n~~~\n```\n.\n<pre><code>aaa\n~~~\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~\naaa\n```\n~~~\n.\n<pre><code>aaa\n```\n</code></pre>\n````````````````````````````````\n\n\nThe closing code fence must be at least as long as the opening fence:\n\n```````````````````````````````` example\n````\naaa\n```\n``````\n.\n<pre><code>aaa\n```\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~\naaa\n~~~\n~~~~\n.\n<pre><code>aaa\n~~~\n</code></pre>\n````````````````````````````````\n\n\nUnclosed code blocks are closed by the end of the document\n(or the enclosing [block quote][block quotes] or [list item][list items]):\n\n```````````````````````````````` example\n```\n.\n<pre><code></code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`````\n\n```\naaa\n.\n<pre><code>\n```\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> ```\n> aaa\n\nbbb\n.\n<blockquote>\n<pre><code>aaa\n</code></pre>\n</blockquote>\n<p>bbb</p>\n````````````````````````````````\n\n\nA code block can have all empty lines as its content:\n\n```````````````````````````````` example\n```\n\n  \n```\n.\n<pre><code>\n  \n</code></pre>\n````````````````````````````````\n\n\nA code block can be empty:\n\n```````````````````````````````` example\n```\n```\n.\n<pre><code></code></pre>\n````````````````````````````````\n\n\nFences can be indented.  If the opening fence is indented,\ncontent lines will have equivalent opening indentation removed,\nif present:\n\n```````````````````````````````` example\n ```\n aaa\naaa\n```\n.\n<pre><code>aaa\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n  ```\naaa\n  aaa\naaa\n  ```\n.\n<pre><code>aaa\naaa\naaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   ```\n   aaa\n    aaa\n  aaa\n   ```\n.\n<pre><code>aaa\n aaa\naaa\n</code></pre>\n````````````````````````````````\n\n\nFour spaces indentation produces an indented code block:\n\n```````````````````````````````` example\n    ```\n    aaa\n    ```\n.\n<pre><code>```\naaa\n```\n</code></pre>\n````````````````````````````````\n\n\nClosing fences may be indented by 0-3 spaces, and their indentation\nneed not match that of the opening fence:\n\n```````````````````````````````` example\n```\naaa\n  ```\n.\n<pre><code>aaa\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   ```\naaa\n  ```\n.\n<pre><code>aaa\n</code></pre>\n````````````````````````````````\n\n\nThis is not a closing fence, because it is indented 4 spaces:\n\n```````````````````````````````` example\n```\naaa\n    ```\n.\n<pre><code>aaa\n    ```\n</code></pre>\n````````````````````````````````\n\n\n\nCode fences (opening and closing) cannot contain internal spaces:\n\n```````````````````````````````` example\n``` ```\naaa\n.\n<p><code> </code>\naaa</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~~~\naaa\n~~~ ~~\n.\n<pre><code>aaa\n~~~ ~~\n</code></pre>\n````````````````````````````````\n\n\nFenced code blocks can interrupt paragraphs, and can be followed\ndirectly by paragraphs, without a blank line between:\n\n```````````````````````````````` example\nfoo\n```\nbar\n```\nbaz\n.\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n````````````````````````````````\n\n\nOther blocks can also occur before and after fenced code blocks\nwithout an intervening blank line:\n\n```````````````````````````````` example\nfoo\n---\n~~~\nbar\n~~~\n# baz\n.\n<h2>foo</h2>\n<pre><code>bar\n</code></pre>\n<h1>baz</h1>\n````````````````````````````````\n\n\nAn [info string] can be provided after the opening code fence.\nAlthough this spec doesn't mandate any particular treatment of\nthe info string, the first word is typically used to specify\nthe language of the code block. In HTML output, the language is\nnormally indicated by adding a class to the `code` element consisting\nof `language-` followed by the language name.\n\n```````````````````````````````` example\n```ruby\ndef foo(x)\n  return 3\nend\n```\n.\n<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~~    ruby startline=3 $%@#$\ndef foo(x)\n  return 3\nend\n~~~~~~~\n.\n<pre><code class=\"language-ruby\">def foo(x)\n  return 3\nend\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n````;\n````\n.\n<pre><code class=\"language-;\"></code></pre>\n````````````````````````````````\n\n\n[Info strings] for backtick code blocks cannot contain backticks:\n\n```````````````````````````````` example\n``` aa ```\nfoo\n.\n<p><code>aa</code>\nfoo</p>\n````````````````````````````````\n\n\n[Info strings] for tilde code blocks can contain backticks and tildes:\n\n```````````````````````````````` example\n~~~ aa ``` ~~~\nfoo\n~~~\n.\n<pre><code class=\"language-aa\">foo\n</code></pre>\n````````````````````````````````\n\n\nClosing code fences cannot have [info strings]:\n\n```````````````````````````````` example\n```\n``` aaa\n```\n.\n<pre><code>``` aaa\n</code></pre>\n````````````````````````````````\n\n\n\n## HTML blocks\n\nAn [HTML block](@) is a group of lines that is treated\nas raw HTML (and will not be escaped in HTML output).\n\nThere are seven kinds of [HTML block], which can be defined by their\nstart and end conditions.  The block begins with a line that meets a\n[start condition](@) (after up to three spaces optional indentation).\nIt ends with the first subsequent line that meets a matching [end\ncondition](@), or the last line of the document, or the last line of\nthe [container block](#container-blocks) containing the current HTML\nblock, if no line is encountered that meets the [end condition].  If\nthe first line meets both the [start condition] and the [end\ncondition], the block will contain just that line.\n\n1.  **Start condition:**  line begins with the string `<script`,\n`<pre`, or `<style` (case-insensitive), followed by whitespace,\nthe string `>`, or the end of the line.\\\n**End condition:**  line contains an end tag\n`</script>`, `</pre>`, or `</style>` (case-insensitive; it\nneed not match the start tag).\n\n2.  **Start condition:** line begins with the string `<!--`.\\\n**End condition:**  line contains the string `-->`.\n\n3.  **Start condition:** line begins with the string `<?`.\\\n**End condition:** line contains the string `?>`.\n\n4.  **Start condition:** line begins with the string `<!`\nfollowed by an uppercase ASCII letter.\\\n**End condition:** line contains the character `>`.\n\n5.  **Start condition:**  line begins with the string\n`<![CDATA[`.\\\n**End condition:** line contains the string `]]>`.\n\n6.  **Start condition:** line begins with the string `<` or `</`\nfollowed by one of the strings (case-insensitive) `address`,\n`article`, `aside`, `base`, `basefont`, `blockquote`, `body`,\n`caption`, `center`, `col`, `colgroup`, `dd`, `details`, `dialog`,\n`dir`, `div`, `dl`, `dt`, `fieldset`, `figcaption`, `figure`,\n`footer`, `form`, `frame`, `frameset`,\n`h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `head`, `header`, `hr`,\n`html`, `iframe`, `legend`, `li`, `link`, `main`, `menu`, `menuitem`,\n`nav`, `noframes`, `ol`, `optgroup`, `option`, `p`, `param`,\n`section`, `summary`, `table`, `tbody`, `td`,\n`tfoot`, `th`, `thead`, `title`, `tr`, `track`, `ul`, followed\nby [whitespace], the end of the line, the string `>`, or\nthe string `/>`.\\\n**End condition:** line is followed by a [blank line].\n\n7.  **Start condition:**  line begins with a complete [open tag]\n(with any [tag name] other than `script`,\n`style`, or `pre`) or a complete [closing tag],\nfollowed only by [whitespace] or the end of the line.\\\n**End condition:** line is followed by a [blank line].\n\nHTML blocks continue until they are closed by their appropriate\n[end condition], or the last line of the document or other [container\nblock](#container-blocks).  This means any HTML **within an HTML\nblock** that might otherwise be recognised as a start condition will\nbe ignored by the parser and passed through as-is, without changing\nthe parser's state.\n\nFor instance, `<pre>` within a HTML block started by `<table>` will not affect\nthe parser state; as the HTML block was started in by start condition 6, it\nwill end at any blank line. This can be surprising:\n\n```````````````````````````````` example\n<table><tr><td>\n<pre>\n**Hello**,\n\n_world_.\n</pre>\n</td></tr></table>\n.\n<table><tr><td>\n<pre>\n**Hello**,\n<p><em>world</em>.\n</pre></p>\n</td></tr></table>\n````````````````````````````````\n\nIn this case, the HTML block is terminated by the newline \u2014 the `**Hello**`\ntext remains verbatim \u2014 and regular parsing resumes, with a paragraph,\nemphasised `world` and inline and block HTML following.\n\nAll types of [HTML blocks] except type 7 may interrupt\na paragraph.  Blocks of type 7 may not interrupt a paragraph.\n(This restriction is intended to prevent unwanted interpretation\nof long tags inside a wrapped paragraph as starting HTML blocks.)\n\nSome simple examples follow.  Here are some basic HTML blocks\nof type 6:\n\n```````````````````````````````` example\n<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n\nokay.\n.\n<table>\n  <tr>\n    <td>\n           hi\n    </td>\n  </tr>\n</table>\n<p>okay.</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n <div>\n  *hello*\n         <foo><a>\n.\n <div>\n  *hello*\n         <foo><a>\n````````````````````````````````\n\n\nA block can also start with a closing tag:\n\n```````````````````````````````` example\n</div>\n*foo*\n.\n</div>\n*foo*\n````````````````````````````````\n\n\nHere we have two HTML blocks with a Markdown paragraph between them:\n\n```````````````````````````````` example\n<DIV CLASS=\"foo\">\n\n*Markdown*\n\n</DIV>\n.\n<DIV CLASS=\"foo\">\n<p><em>Markdown</em></p>\n</DIV>\n````````````````````````````````\n\n\nThe tag on the first line can be partial, as long\nas it is split where there would be whitespace:\n\n```````````````````````````````` example\n<div id=\"foo\"\n  class=\"bar\">\n</div>\n.\n<div id=\"foo\"\n  class=\"bar\">\n</div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n.\n<div id=\"foo\" class=\"bar\n  baz\">\n</div>\n````````````````````````````````\n\n\nAn open tag need not be closed:\n```````````````````````````````` example\n<div>\n*foo*\n\n*bar*\n.\n<div>\n*foo*\n<p><em>bar</em></p>\n````````````````````````````````\n\n\n\nA partial tag need not even be completed (garbage\nin, garbage out):\n\n```````````````````````````````` example\n<div id=\"foo\"\n*hi*\n.\n<div id=\"foo\"\n*hi*\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div class\nfoo\n.\n<div class\nfoo\n````````````````````````````````\n\n\nThe initial tag doesn't even need to be a valid\ntag, as long as it starts like one:\n\n```````````````````````````````` example\n<div *???-&&&-<---\n*foo*\n.\n<div *???-&&&-<---\n*foo*\n````````````````````````````````\n\n\nIn type 6 blocks, the initial tag need not be on a line by\nitself:\n\n```````````````````````````````` example\n<div><a href=\"bar\">*foo*</a></div>\n.\n<div><a href=\"bar\">*foo*</a></div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<table><tr><td>\nfoo\n</td></tr></table>\n.\n<table><tr><td>\nfoo\n</td></tr></table>\n````````````````````````````````\n\n\nEverything until the next blank line or end of document\ngets included in the HTML block.  So, in the following\nexample, what looks like a Markdown code block\nis actually part of the HTML block, which continues until a blank\nline or the end of the document is reached:\n\n```````````````````````````````` example\n<div></div>\n``` c\nint x = 33;\n```\n.\n<div></div>\n``` c\nint x = 33;\n```\n````````````````````````````````\n\n\nTo start an [HTML block] with a tag that is *not* in the\nlist of block-level tags in (6), you must put the tag by\nitself on the first line (and it must be complete):\n\n```````````````````````````````` example\n<a href=\"foo\">\n*bar*\n</a>\n.\n<a href=\"foo\">\n*bar*\n</a>\n````````````````````````````````\n\n\nIn type 7 blocks, the [tag name] can be anything:\n\n```````````````````````````````` example\n<Warning>\n*bar*\n</Warning>\n.\n<Warning>\n*bar*\n</Warning>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<i class=\"foo\">\n*bar*\n</i>\n.\n<i class=\"foo\">\n*bar*\n</i>\n````````````````````````````````\n\n\n```````````````````````````````` example\n</ins>\n*bar*\n.\n</ins>\n*bar*\n````````````````````````````````\n\n\nThese rules are designed to allow us to work with tags that\ncan function as either block-level or inline-level tags.\nThe `<del>` tag is a nice example.  We can surround content with\n`<del>` tags in three different ways.  In this case, we get a raw\nHTML block, because the `<del>` tag is on a line by itself:\n\n```````````````````````````````` example\n<del>\n*foo*\n</del>\n.\n<del>\n*foo*\n</del>\n````````````````````````````````\n\n\nIn this case, we get a raw HTML block that just includes\nthe `<del>` tag (because it ends with the following blank\nline).  So the contents get interpreted as CommonMark:\n\n```````````````````````````````` example\n<del>\n\n*foo*\n\n</del>\n.\n<del>\n<p><em>foo</em></p>\n</del>\n````````````````````````````````\n\n\nFinally, in this case, the `<del>` tags are interpreted\nas [raw HTML] *inside* the CommonMark paragraph.  (Because\nthe tag is not on a line by itself, we get inline HTML\nrather than an [HTML block].)\n\n```````````````````````````````` example\n<del>*foo*</del>\n.\n<p><del><em>foo</em></del></p>\n````````````````````````````````\n\n\nHTML tags designed to contain literal content\n(`script`, `style`, `pre`), comments, processing instructions,\nand declarations are treated somewhat differently.\nInstead of ending at the first blank line, these blocks\nend at the first line containing a corresponding end tag.\nAs a result, these blocks can contain blank lines:\n\nA pre tag (type 1):\n\n```````````````````````````````` example\n<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\nokay\n.\n<pre language=\"haskell\"><code>\nimport Text.HTML.TagSoup\n\nmain :: IO ()\nmain = print $ parseTags tags\n</code></pre>\n<p>okay</p>\n````````````````````````````````\n\n\nA script tag (type 1):\n\n```````````````````````````````` example\n<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\nokay\n.\n<script type=\"text/javascript\">\n// JavaScript example\n\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n</script>\n<p>okay</p>\n````````````````````````````````\n\n\nA style tag (type 1):\n\n```````````````````````````````` example\n<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\nokay\n.\n<style\n  type=\"text/css\">\nh1 {color:red;}\n\np {color:blue;}\n</style>\n<p>okay</p>\n````````````````````````````````\n\n\nIf there is no matching end tag, the block will end at the\nend of the document (or the enclosing [block quote][block quotes]\nor [list item][list items]):\n\n```````````````````````````````` example\n<style\n  type=\"text/css\">\n\nfoo\n.\n<style\n  type=\"text/css\">\n\nfoo\n````````````````````````````````\n\n\n```````````````````````````````` example\n> <div>\n> foo\n\nbar\n.\n<blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- <div>\n- foo\n.\n<ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n\nThe end tag can occur on the same line as the start tag:\n\n```````````````````````````````` example\n<style>p{color:red;}</style>\n*foo*\n.\n<style>p{color:red;}</style>\n<p><em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<!-- foo -->*bar*\n*baz*\n.\n<!-- foo -->*bar*\n<p><em>baz</em></p>\n````````````````````````````````\n\n\nNote that anything on the last line after the\nend tag will be included in the [HTML block]:\n\n```````````````````````````````` example\n<script>\nfoo\n</script>1. *bar*\n.\n<script>\nfoo\n</script>1. *bar*\n````````````````````````````````\n\n\nA comment (type 2):\n\n```````````````````````````````` example\n<!-- Foo\n\nbar\n   baz -->\nokay\n.\n<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n````````````````````````````````\n\n\n\nA processing instruction (type 3):\n\n```````````````````````````````` example\n<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n````````````````````````````````\n\n\nA declaration (type 4):\n\n```````````````````````````````` example\n<!DOCTYPE html>\n.\n<!DOCTYPE html>\n````````````````````````````````\n\n\nCDATA (type 5):\n\n```````````````````````````````` example\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n.\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n````````````````````````````````\n\n\nThe opening tag can be indented 1-3 spaces, but not 4:\n\n```````````````````````````````` example\n  <!-- foo -->\n\n    <!-- foo -->\n.\n  <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n  <div>\n\n    <div>\n.\n  <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n````````````````````````````````\n\n\nAn HTML block of types 1--6 can interrupt a paragraph, and need not be\npreceded by a blank line.\n\n```````````````````````````````` example\nFoo\n<div>\nbar\n</div>\n.\n<p>Foo</p>\n<div>\nbar\n</div>\n````````````````````````````````\n\n\nHowever, a following blank line is needed, except at the end of\na document, and except for blocks of types 1--5, [above][HTML\nblock]:\n\n```````````````````````````````` example\n<div>\nbar\n</div>\n*foo*\n.\n<div>\nbar\n</div>\n*foo*\n````````````````````````````````\n\n\nHTML blocks of type 7 cannot interrupt a paragraph:\n\n```````````````````````````````` example\nFoo\n<a href=\"bar\">\nbaz\n.\n<p>Foo\n<a href=\"bar\">\nbaz</p>\n````````````````````````````````\n\n\nThis rule differs from John Gruber's original Markdown syntax\nspecification, which says:\n\n> The only restrictions are that block-level HTML elements \u2014\n> e.g. `<div>`, `<table>`, `<pre>`, `<p>`, etc. \u2014 must be separated from\n> surrounding content by blank lines, and the start and end tags of the\n> block should not be indented with tabs or spaces.\n\nIn some ways Gruber's rule is more restrictive than the one given\nhere:\n\n- It requires that an HTML block be preceded by a blank line.\n- It does not allow the start tag to be indented.\n- It requires a matching end tag, which it also does not allow to\n  be indented.\n\nMost Markdown implementations (including some of Gruber's own) do not\nrespect all of these restrictions.\n\nThere is one respect, however, in which Gruber's rule is more liberal\nthan the one given here, since it allows blank lines to occur inside\nan HTML block.  There are two reasons for disallowing them here.\nFirst, it removes the need to parse balanced tags, which is\nexpensive and can require backtracking from the end of the document\nif no matching end tag is found. Second, it provides a very simple\nand flexible way of including Markdown content inside HTML tags:\nsimply separate the Markdown from the HTML using blank lines:\n\nCompare:\n\n```````````````````````````````` example\n<div>\n\n*Emphasized* text.\n\n</div>\n.\n<div>\n<p><em>Emphasized</em> text.</p>\n</div>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<div>\n*Emphasized* text.\n</div>\n.\n<div>\n*Emphasized* text.\n</div>\n````````````````````````````````\n\n\nSome Markdown implementations have adopted a convention of\ninterpreting content inside tags as text if the open tag has\nthe attribute `markdown=1`.  The rule given above seems a simpler and\nmore elegant way of achieving the same expressive power, which is also\nmuch simpler to parse.\n\nThe main potential drawback is that one can no longer paste HTML\nblocks into Markdown documents with 100% reliability.  However,\n*in most cases* this will work fine, because the blank lines in\nHTML are usually followed by HTML block tags.  For example:\n\n```````````````````````````````` example\n<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n.\n<table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n````````````````````````````````\n\n\nThere are problems, however, if the inner tags are indented\n*and* separated by spaces, as then they will be interpreted as\nan indented code block:\n\n```````````````````````````````` example\n<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n.\n<table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n````````````````````````````````\n\n\nFortunately, blank lines are usually not necessary and can be\ndeleted.  The exception is inside `<pre>` tags, but as described\n[above][HTML blocks], raw HTML blocks starting with `<pre>`\n*can* contain blank lines.\n\n## Link reference definitions\n\nA [link reference definition](@)\nconsists of a [link label], indented up to three spaces, followed\nby a colon (`:`), optional [whitespace] (including up to one\n[line ending]), a [link destination],\noptional [whitespace] (including up to one\n[line ending]), and an optional [link\ntitle], which if it is present must be separated\nfrom the [link destination] by [whitespace].\nNo further [non-whitespace characters] may occur on the line.\n\nA [link reference definition]\ndoes not correspond to a structural element of a document.  Instead, it\ndefines a label which can be used in [reference links]\nand reference-style [images] elsewhere in the document.  [Link\nreference definitions] can come either before or after the links that use\nthem.\n\n```````````````````````````````` example\n[foo]: /url \"title\"\n\n[foo]\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n   [foo]: \n      /url  \n           'the title'  \n\n[foo]\n.\n<p><a href=\"/url\" title=\"the title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[Foo*bar\\]]:my_(url) 'title (with parens)'\n\n[Foo*bar\\]]\n.\n<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[Foo bar]:\n<my url>\n'title'\n\n[Foo bar]\n.\n<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>\n````````````````````````````````\n\n\nThe title may extend over multiple lines:\n\n```````````````````````````````` example\n[foo]: /url '\ntitle\nline1\nline2\n'\n\n[foo]\n.\n<p><a href=\"/url\" title=\"\ntitle\nline1\nline2\n\">foo</a></p>\n````````````````````````````````\n\n\nHowever, it may not contain a [blank line]:\n\n```````````````````````````````` example\n[foo]: /url 'title\n\nwith blank line'\n\n[foo]\n.\n<p>[foo]: /url 'title</p>\n<p>with blank line'</p>\n<p>[foo]</p>\n````````````````````````````````\n\n\nThe title may be omitted:\n\n```````````````````````````````` example\n[foo]:\n/url\n\n[foo]\n.\n<p><a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nThe link destination may not be omitted:\n\n```````````````````````````````` example\n[foo]:\n\n[foo]\n.\n<p>[foo]:</p>\n<p>[foo]</p>\n````````````````````````````````\n\n However, an empty link destination may be specified using\n angle brackets:\n\n```````````````````````````````` example\n[foo]: <>\n\n[foo]\n.\n<p><a href=\"\">foo</a></p>\n````````````````````````````````\n\nThe title must be separated from the link destination by\nwhitespace:\n\n```````````````````````````````` example\n[foo]: <bar>(baz)\n\n[foo]\n.\n<p>[foo]: <bar>(baz)</p>\n<p>[foo]</p>\n````````````````````````````````\n\n\nBoth title and destination can contain backslash escapes\nand literal backslashes:\n\n```````````````````````````````` example\n[foo]: /url\\bar\\*baz \"foo\\\"bar\\baz\"\n\n[foo]\n.\n<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>\n````````````````````````````````\n\n\nA link can come before its corresponding definition:\n\n```````````````````````````````` example\n[foo]\n\n[foo]: url\n.\n<p><a href=\"url\">foo</a></p>\n````````````````````````````````\n\n\nIf there are several matching definitions, the first one takes\nprecedence:\n\n```````````````````````````````` example\n[foo]\n\n[foo]: first\n[foo]: second\n.\n<p><a href=\"first\">foo</a></p>\n````````````````````````````````\n\n\nAs noted in the section on [Links], matching of labels is\ncase-insensitive (see [matches]).\n\n```````````````````````````````` example\n[FOO]: /url\n\n[Foo]\n.\n<p><a href=\"/url\">Foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[\u0391\u0393\u03a9]: /\u03c6\u03bf\u03c5\n\n[\u03b1\u03b3\u03c9]\n.\n<p><a href=\"/%CF%86%CE%BF%CF%85\">\u03b1\u03b3\u03c9</a></p>\n````````````````````````````````\n\n\nHere is a link reference definition with no corresponding link.\nIt contributes nothing to the document.\n\n```````````````````````````````` example\n[foo]: /url\n.\n````````````````````````````````\n\n\nHere is another one:\n\n```````````````````````````````` example\n[\nfoo\n]: /url\nbar\n.\n<p>bar</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because there are\n[non-whitespace characters] after the title:\n\n```````````````````````````````` example\n[foo]: /url \"title\" ok\n.\n<p>[foo]: /url &quot;title&quot; ok</p>\n````````````````````````````````\n\n\nThis is a link reference definition, but it has no title:\n\n```````````````````````````````` example\n[foo]: /url\n\"title\" ok\n.\n<p>&quot;title&quot; ok</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because it is indented\nfour spaces:\n\n```````````````````````````````` example\n    [foo]: /url \"title\"\n\n[foo]\n.\n<pre><code>[foo]: /url &quot;title&quot;\n</code></pre>\n<p>[foo]</p>\n````````````````````````````````\n\n\nThis is not a link reference definition, because it occurs inside\na code block:\n\n```````````````````````````````` example\n```\n[foo]: /url\n```\n\n[foo]\n.\n<pre><code>[foo]: /url\n</code></pre>\n<p>[foo]</p>\n````````````````````````````````\n\n\nA [link reference definition] cannot interrupt a paragraph.\n\n```````````````````````````````` example\nFoo\n[bar]: /baz\n\n[bar]\n.\n<p>Foo\n[bar]: /baz</p>\n<p>[bar]</p>\n````````````````````````````````\n\n\nHowever, it can directly follow other block elements, such as headings\nand thematic breaks, and it need not be followed by a blank line.\n\n```````````````````````````````` example\n# [Foo]\n[foo]: /url\n> bar\n.\n<h1><a href=\"/url\">Foo</a></h1>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo]: /url\nbar\n===\n[foo]\n.\n<h1>bar</h1>\n<p><a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo]: /url\n===\n[foo]\n.\n<p>===\n<a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nSeveral [link reference definitions]\ncan occur one after another, without intervening blank lines.\n\n```````````````````````````````` example\n[foo]: /foo-url \"foo\"\n[bar]: /bar-url\n  \"bar\"\n[baz]: /baz-url\n\n[foo],\n[bar],\n[baz]\n.\n<p><a href=\"/foo-url\" title=\"foo\">foo</a>,\n<a href=\"/bar-url\" title=\"bar\">bar</a>,\n<a href=\"/baz-url\">baz</a></p>\n````````````````````````````````\n\n\n[Link reference definitions] can occur\ninside block containers, like lists and block quotations.  They\naffect the entire document, not just the container in which they\nare defined:\n\n```````````````````````````````` example\n[foo]\n\n> [foo]: /url\n.\n<p><a href=\"/url\">foo</a></p>\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\nWhether something is a [link reference definition] is\nindependent of whether the link reference it defines is\nused in the document.  Thus, for example, the following\ndocument contains just a link reference definition, and\nno visible content:\n\n```````````````````````````````` example\n[foo]: /url\n.\n````````````````````````````````\n\n\n## Paragraphs\n\nA sequence of non-blank lines that cannot be interpreted as other\nkinds of blocks forms a [paragraph](@).\nThe contents of the paragraph are the result of parsing the\nparagraph's raw content as inlines.  The paragraph's raw content\nis formed by concatenating the lines and removing initial and final\n[whitespace].\n\nA simple example with two paragraphs:\n\n```````````````````````````````` example\naaa\n\nbbb\n.\n<p>aaa</p>\n<p>bbb</p>\n````````````````````````````````\n\n\nParagraphs can contain multiple lines, but no blank lines:\n\n```````````````````````````````` example\naaa\nbbb\n\nccc\nddd\n.\n<p>aaa\nbbb</p>\n<p>ccc\nddd</p>\n````````````````````````````````\n\n\nMultiple blank lines between paragraph have no effect:\n\n```````````````````````````````` example\naaa\n\n\nbbb\n.\n<p>aaa</p>\n<p>bbb</p>\n````````````````````````````````\n\n\nLeading spaces are skipped:\n\n```````````````````````````````` example\n  aaa\n bbb\n.\n<p>aaa\nbbb</p>\n````````````````````````````````\n\n\nLines after the first may be indented any amount, since indented\ncode blocks cannot interrupt paragraphs.\n\n```````````````````````````````` example\naaa\n             bbb\n                                       ccc\n.\n<p>aaa\nbbb\nccc</p>\n````````````````````````````````\n\n\nHowever, the first line may be indented at most three spaces,\nor an indented code block will be triggered:\n\n```````````````````````````````` example\n   aaa\nbbb\n.\n<p>aaa\nbbb</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    aaa\nbbb\n.\n<pre><code>aaa\n</code></pre>\n<p>bbb</p>\n````````````````````````````````\n\n\nFinal spaces are stripped before inline parsing, so a paragraph\nthat ends with two or more spaces will not end with a [hard line\nbreak]:\n\n```````````````````````````````` example\naaa     \nbbb     \n.\n<p>aaa<br />\nbbb</p>\n````````````````````````````````\n\n\n## Blank lines\n\n[Blank lines] between block-level elements are ignored,\nexcept for the role they play in determining whether a [list]\nis [tight] or [loose].\n\nBlank lines at the beginning and end of the document are also ignored.\n\n```````````````````````````````` example\n  \n\naaa\n  \n\n# aaa\n\n  \n.\n<p>aaa</p>\n<h1>aaa</h1>\n````````````````````````````````\n\n<div class=\"extension\">\n\n## Tables (extension)\n\nGFM enables the `table` extension, where an additional leaf block type is\navailable.\n\nA [table](@) is an arrangement of data with rows and columns, consisting of a\nsingle header row, a [delimiter row] separating the header from the data, and\nzero or more data rows.\n\nEach row consists of cells containing arbitrary text, in which [inlines] are\nparsed, separated by pipes (`|`).  A leading and trailing pipe is also\nrecommended for clarity of reading, and if there's otherwise parsing ambiguity.\nSpaces between pipes and cell content are trimmed.  Block-level elements cannot\nbe inserted in a table.\n\nThe [delimiter row](@) consists of cells whose only content are hyphens (`-`),\nand optionally, a leading or trailing colon (`:`), or both, to indicate left,\nright, or center alignment respectively.\n\n```````````````````````````````` example table\n| foo | bar |\n| --- | --- |\n| baz | bim |\n.\n<table>\n<thead>\n<tr>\n<th>foo</th>\n<th>bar</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baz</td>\n<td>bim</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nCells in one column don't need to match length, though it's easier to read if\nthey are. Likewise, use of leading and trailing pipes may be inconsistent:\n\n```````````````````````````````` example table\n| abc | defghi |\n:-: | -----------:\nbar | baz\n.\n<table>\n<thead>\n<tr>\n<th align=\"center\">abc</th>\n<th align=\"right\">defghi</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">bar</td>\n<td align=\"right\">baz</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nInclude a pipe in a cell's content by escaping it, including inside other\ninline spans:\n\n```````````````````````````````` example table\n| f\\|oo  |\n| ------ |\n| b `\\|` az |\n| b **\\|** im |\n.\n<table>\n<thead>\n<tr>\n<th>f|oo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b <code>|</code> az</td>\n</tr>\n<tr>\n<td>b <strong>|</strong> im</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nThe table is broken at the first empty line, or beginning of another\nblock-level structure:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar | baz |\n> bar\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar | baz |\nbar\n\nbar\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>bar</p>\n````````````````````````````````\n\nThe header row must match the [delimiter row] in the number of cells.  If not,\na table will not be recognized:\n\n```````````````````````````````` example table\n| abc | def |\n| --- |\n| bar |\n.\n<p>| abc | def |\n| --- |\n| bar |</p>\n````````````````````````````````\n\nThe remainder of the table's rows may vary in the number of cells.  If there\nare a number of cells fewer than the number of cells in the header row, empty\ncells are inserted.  If there are greater, the excess is ignored:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n| bar |\n| bar | baz | boo |\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bar</td>\n<td></td>\n</tr>\n<tr>\n<td>bar</td>\n<td>baz</td>\n</tr>\n</tbody>\n</table>\n````````````````````````````````\n\nIf there are no rows in the body, no `<tbody>` is generated in HTML output:\n\n```````````````````````````````` example table\n| abc | def |\n| --- | --- |\n.\n<table>\n<thead>\n<tr>\n<th>abc</th>\n<th>def</th>\n</tr>\n</thead>\n</table>\n````````````````````````````````\n\n</div>\n\n# Container blocks\n\nA [container block](#container-blocks) is a block that has other\nblocks as its contents.  There are two basic kinds of container blocks:\n[block quotes] and [list items].\n[Lists] are meta-containers for [list items].\n\nWe define the syntax for container blocks recursively.  The general\nform of the definition is:\n\n> If X is a sequence of blocks, then the result of\n> transforming X in such-and-such a way is a container of type Y\n> with these blocks as its content.\n\nSo, we explain what counts as a block quote or list item by explaining\nhow these can be *generated* from their contents. This should suffice\nto define the syntax, although it does not give a recipe for *parsing*\nthese constructions.  (A recipe is provided below in the section entitled\n[A parsing strategy](#appendix-a-parsing-strategy).)\n\n## Block quotes\n\nA [block quote marker](@)\nconsists of 0-3 spaces of initial indent, plus (a) the character `>` together\nwith a following space, or (b) a single character `>` not followed by a space.\n\nThe following rules define [block quotes]:\n\n1.  **Basic case.**  If a string of lines *Ls* constitute a sequence\n    of blocks *Bs*, then the result of prepending a [block quote\n    marker] to the beginning of each line in *Ls*\n    is a [block quote](#block-quotes) containing *Bs*.\n\n2.  **Laziness.**  If a string of lines *Ls* constitute a [block\n    quote](#block-quotes) with contents *Bs*, then the result of deleting\n    the initial [block quote marker] from one or\n    more lines in which the next [non-whitespace character] after the [block\n    quote marker] is [paragraph continuation\n    text] is a block quote with *Bs* as its content.\n    [Paragraph continuation text](@) is text\n    that will be parsed as part of the content of a paragraph, but does\n    not occur at the beginning of the paragraph.\n\n3.  **Consecutiveness.**  A document cannot contain two [block\n    quotes] in a row unless there is a [blank line] between them.\n\nNothing else counts as a [block quote](#block-quotes).\n\nHere is a simple example:\n\n```````````````````````````````` example\n> # Foo\n> bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nThe spaces after the `>` characters can be omitted:\n\n```````````````````````````````` example\n># Foo\n>bar\n> baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nThe `>` characters can be indented 1-3 spaces:\n\n```````````````````````````````` example\n   > # Foo\n   > bar\n > baz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nFour spaces gives us a code block:\n\n```````````````````````````````` example\n    > # Foo\n    > bar\n    > baz\n.\n<pre><code>&gt; # Foo\n&gt; bar\n&gt; baz\n</code></pre>\n````````````````````````````````\n\n\nThe Laziness clause allows us to omit the `>` before\n[paragraph continuation text]:\n\n```````````````````````````````` example\n> # Foo\n> bar\nbaz\n.\n<blockquote>\n<h1>Foo</h1>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\nA block quote can contain some lazy and some non-lazy\ncontinuation lines:\n\n```````````````````````````````` example\n> bar\nbaz\n> foo\n.\n<blockquote>\n<p>bar\nbaz\nfoo</p>\n</blockquote>\n````````````````````````````````\n\n\nLaziness only applies to lines that would have been continuations of\nparagraphs had they been prepended with [block quote markers].\nFor example, the `> ` cannot be omitted in the second line of\n\n``` markdown\n> foo\n> ---\n```\n\nwithout changing the meaning:\n\n```````````````````````````````` example\n> foo\n---\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<hr />\n````````````````````````````````\n\n\nSimilarly, if we omit the `> ` in the second line of\n\n``` markdown\n> - foo\n> - bar\n```\n\nthen the block quote ends after the first line:\n\n```````````````````````````````` example\n> - foo\n- bar\n.\n<blockquote>\n<ul>\n<li>foo</li>\n</ul>\n</blockquote>\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nFor the same reason, we can't omit the `> ` in front of\nsubsequent lines of an indented or fenced code block:\n\n```````````````````````````````` example\n>     foo\n    bar\n.\n<blockquote>\n<pre><code>foo\n</code></pre>\n</blockquote>\n<pre><code>bar\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> ```\nfoo\n```\n.\n<blockquote>\n<pre><code></code></pre>\n</blockquote>\n<p>foo</p>\n<pre><code></code></pre>\n````````````````````````````````\n\n\nNote that in the following case, we have a [lazy\ncontinuation line]:\n\n```````````````````````````````` example\n> foo\n    - bar\n.\n<blockquote>\n<p>foo\n- bar</p>\n</blockquote>\n````````````````````````````````\n\n\nTo see why, note that in\n\n```markdown\n> foo\n>     - bar\n```\n\nthe `- bar` is indented too far to start a list, and can't\nbe an indented code block because indented code blocks cannot\ninterrupt paragraphs, so it is [paragraph continuation text].\n\nA block quote can be empty:\n\n```````````````````````````````` example\n>\n.\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n>\n>  \n> \n.\n<blockquote>\n</blockquote>\n````````````````````````````````\n\n\nA block quote can have initial or final blank lines:\n\n```````````````````````````````` example\n>\n> foo\n>  \n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n````````````````````````````````\n\n\nA blank line always separates block quotes:\n\n```````````````````````````````` example\n> foo\n\n> bar\n.\n<blockquote>\n<p>foo</p>\n</blockquote>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\n(Most current Markdown implementations, including John Gruber's\noriginal `Markdown.pl`, will parse this example as a single block quote\nwith two paragraphs.  But it seems better to allow the author to decide\nwhether two block quotes or one are wanted.)\n\nConsecutiveness means that if we put these block quotes together,\nwe get a single block quote:\n\n```````````````````````````````` example\n> foo\n> bar\n.\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n````````````````````````````````\n\n\nTo get a block quote with two paragraphs, use:\n\n```````````````````````````````` example\n> foo\n>\n> bar\n.\n<blockquote>\n<p>foo</p>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\nBlock quotes can interrupt paragraphs:\n\n```````````````````````````````` example\nfoo\n> bar\n.\n<p>foo</p>\n<blockquote>\n<p>bar</p>\n</blockquote>\n````````````````````````````````\n\n\nIn general, blank lines are not needed before or after block\nquotes:\n\n```````````````````````````````` example\n> aaa\n***\n> bbb\n.\n<blockquote>\n<p>aaa</p>\n</blockquote>\n<hr />\n<blockquote>\n<p>bbb</p>\n</blockquote>\n````````````````````````````````\n\n\nHowever, because of laziness, a blank line is needed between\na block quote and a following paragraph:\n\n```````````````````````````````` example\n> bar\nbaz\n.\n<blockquote>\n<p>bar\nbaz</p>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> bar\n\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> bar\n>\nbaz\n.\n<blockquote>\n<p>bar</p>\n</blockquote>\n<p>baz</p>\n````````````````````````````````\n\n\nIt is a consequence of the Laziness rule that any number\nof initial `>`s may be omitted on a continuation line of a\nnested block quote:\n\n```````````````````````````````` example\n> > > foo\nbar\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar</p>\n</blockquote>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n>>> foo\n> bar\n>>baz\n.\n<blockquote>\n<blockquote>\n<blockquote>\n<p>foo\nbar\nbaz</p>\n</blockquote>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nWhen including an indented code block in a block quote,\nremember that the [block quote marker] includes\nboth the `>` and a following space.  So *five spaces* are needed after\nthe `>`:\n\n```````````````````````````````` example\n>     code\n\n>    not code\n.\n<blockquote>\n<pre><code>code\n</code></pre>\n</blockquote>\n<blockquote>\n<p>not code</p>\n</blockquote>\n````````````````````````````````\n\n\n\n## List items\n\nA [list marker](@) is a\n[bullet list marker] or an [ordered list marker].\n\nA [bullet list marker](@)\nis a `-`, `+`, or `*` character.\n\nAn [ordered list marker](@)\nis a sequence of 1--9 arabic digits (`0-9`), followed by either a\n`.` character or a `)` character.  (The reason for the length\nlimit is that with 10 digits we start seeing integer overflows\nin some browsers.)\n\nThe following rules define [list items]:\n\n1.  **Basic case.**  If a sequence of lines *Ls* constitute a sequence of\n    blocks *Bs* starting with a [non-whitespace character], and *M* is a\n    list marker of width *W* followed by 1 \u2264 *N* \u2264 4 spaces, then the result\n    of prepending *M* and the following spaces to the first line of\n    *Ls*, and indenting subsequent lines of *Ls* by *W + N* spaces, is a\n    list item with *Bs* as its contents.  The type of the list item\n    (bullet or ordered) is determined by the type of its list marker.\n    If the list item is ordered, then it is also assigned a start\n    number, based on the ordered list marker.\n\n    Exceptions:\n\n    1. When the first list item in a [list] interrupts\n    a paragraph---that is, when it starts on a line that would\n    otherwise count as [paragraph continuation text]---then (a)\n    the lines *Ls* must not begin with a blank line, and (b) if\n    the list item is ordered, the start number must be 1.\n    2. If any line is a [thematic break][thematic breaks] then\n       that line is not a list item.\n\nFor example, let *Ls* be the lines\n\n```````````````````````````````` example\nA paragraph\nwith two lines.\n\n    indented code\n\n> A block quote.\n.\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n````````````````````````````````\n\n\nAnd let *M* be the marker `1.`, and *N* = 2.  Then rule #1 says\nthat the following is an ordered list item with start number 1,\nand the same contents as *Ls*:\n\n```````````````````````````````` example\n1.  A paragraph\n    with two lines.\n\n        indented code\n\n    > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nThe most important thing to notice is that the position of\nthe text after the list marker determines how much indentation\nis needed in subsequent blocks in the list item.  If the list\nmarker takes up two spaces, and there are three spaces between\nthe list marker and the next [non-whitespace character], then blocks\nmust be indented five spaces in order to fall under the list\nitem.\n\nHere are some examples showing how far content must be indented to be\nput under the list item:\n\n```````````````````````````````` example\n- one\n\n two\n.\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- one\n\n  two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n -    one\n\n     two\n.\n<ul>\n<li>one</li>\n</ul>\n<pre><code> two\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n -    one\n\n      two\n.\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nIt is tempting to think of this in terms of columns:  the continuation\nblocks must be indented at least to the column of the first\n[non-whitespace character] after the list marker. However, that is not quite right.\nThe spaces after the list marker determine how much relative indentation\nis needed.  Which column this indentation reaches will depend on\nhow the list item is embedded in other constructions, as shown by\nthis example:\n\n```````````````````````````````` example\n   > > 1.  one\n>>\n>>     two\n.\n<blockquote>\n<blockquote>\n<ol>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ol>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nHere `two` occurs in the same column as the list marker `1.`,\nbut is actually contained in the list item, because there is\nsufficient indentation after the last containing blockquote marker.\n\nThe converse is also possible.  In the following example, the word `two`\noccurs far to the right of the initial text of the list item, `one`, but\nit is not considered part of the list item, because it is not indented\nfar enough past the blockquote marker:\n\n```````````````````````````````` example\n>>- one\n>>\n  >  > two\n.\n<blockquote>\n<blockquote>\n<ul>\n<li>one</li>\n</ul>\n<p>two</p>\n</blockquote>\n</blockquote>\n````````````````````````````````\n\n\nNote that at least one space is needed between the list marker and\nany following content, so these are not list items:\n\n```````````````````````````````` example\n-one\n\n2.two\n.\n<p>-one</p>\n<p>2.two</p>\n````````````````````````````````\n\n\nA list item may contain blocks that are separated by more than\none blank line.\n\n```````````````````````````````` example\n- foo\n\n\n  bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nA list item may contain any kind of block:\n\n```````````````````````````````` example\n1.  foo\n\n    ```\n    bar\n    ```\n\n    baz\n\n    > bam\n.\n<ol>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n<p>baz</p>\n<blockquote>\n<p>bam</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nA list item that contains an indented code block will preserve\nempty lines within the code block verbatim.\n\n```````````````````````````````` example\n- Foo\n\n      bar\n\n\n      baz\n.\n<ul>\n<li>\n<p>Foo</p>\n<pre><code>bar\n\n\nbaz\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nNote that ordered list start numbers must be nine digits or less:\n\n```````````````````````````````` example\n123456789. ok\n.\n<ol start=\"123456789\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1234567890. not ok\n.\n<p>1234567890. not ok</p>\n````````````````````````````````\n\n\nA start number may begin with 0s:\n\n```````````````````````````````` example\n0. ok\n.\n<ol start=\"0\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\n```````````````````````````````` example\n003. ok\n.\n<ol start=\"3\">\n<li>ok</li>\n</ol>\n````````````````````````````````\n\n\nA start number may not be negative:\n\n```````````````````````````````` example\n-1. not ok\n.\n<p>-1. not ok</p>\n````````````````````````````````\n\n\n\n2.  **Item starting with indented code.**  If a sequence of lines *Ls*\n    constitute a sequence of blocks *Bs* starting with an indented code\n    block, and *M* is a list marker of width *W* followed by\n    one space, then the result of prepending *M* and the following\n    space to the first line of *Ls*, and indenting subsequent lines of\n    *Ls* by *W + 1* spaces, is a list item with *Bs* as its contents.\n    If a line is empty, then it need not be indented.  The type of the\n    list item (bullet or ordered) is determined by the type of its list\n    marker.  If the list item is ordered, then it is also assigned a\n    start number, based on the ordered list marker.\n\nAn indented code block will have to be indented four spaces beyond\nthe edge of the region where text will be included in the list item.\nIn the following case that is 6 spaces:\n\n```````````````````````````````` example\n- foo\n\n      bar\n.\n<ul>\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\n\nAnd in this case it is 11 spaces:\n\n```````````````````````````````` example\n  10.  foo\n\n           bar\n.\n<ol start=\"10\">\n<li>\n<p>foo</p>\n<pre><code>bar\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nIf the *first* block in the list item is an indented code block,\nthen by rule #2, the contents must be indented *one* space after the\nlist marker:\n\n```````````````````````````````` example\n    indented code\n\nparagraph\n\n    more code\n.\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1.     indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code>indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nNote that an additional space indent is interpreted as space\ninside the code block:\n\n```````````````````````````````` example\n1.      indented code\n\n   paragraph\n\n       more code\n.\n<ol>\n<li>\n<pre><code> indented code\n</code></pre>\n<p>paragraph</p>\n<pre><code>more code\n</code></pre>\n</li>\n</ol>\n````````````````````````````````\n\n\nNote that rules #1 and #2 only apply to two cases:  (a) cases\nin which the lines to be included in a list item begin with a\n[non-whitespace character], and (b) cases in which\nthey begin with an indented code\nblock.  In a case like the following, where the first block begins with\na three-space indent, the rules do not allow us to form a list item by\nindenting the whole thing and prepending a list marker:\n\n```````````````````````````````` example\n   foo\n\nbar\n.\n<p>foo</p>\n<p>bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n-    foo\n\n  bar\n.\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n````````````````````````````````\n\n\nThis is not a significant restriction, because when a block begins\nwith 1-3 spaces indent, the indentation can always be removed without\na change in interpretation, allowing rule #1 to be applied.  So, in\nthe above case:\n\n```````````````````````````````` example\n-  foo\n\n   bar\n.\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n3.  **Item starting with a blank line.**  If a sequence of lines *Ls*\n    starting with a single [blank line] constitute a (possibly empty)\n    sequence of blocks *Bs*, not separated from each other by more than\n    one blank line, and *M* is a list marker of width *W*,\n    then the result of prepending *M* to the first line of *Ls*, and\n    indenting subsequent lines of *Ls* by *W + 1* spaces, is a list\n    item with *Bs* as its contents.\n    If a line is empty, then it need not be indented.  The type of the\n    list item (bullet or ordered) is determined by the type of its list\n    marker.  If the list item is ordered, then it is also assigned a\n    start number, based on the ordered list marker.\n\nHere are some list items that start with a blank line but are not empty:\n\n```````````````````````````````` example\n-\n  foo\n-\n  ```\n  bar\n  ```\n-\n      baz\n.\n<ul>\n<li>foo</li>\n<li>\n<pre><code>bar\n</code></pre>\n</li>\n<li>\n<pre><code>baz\n</code></pre>\n</li>\n</ul>\n````````````````````````````````\n\nWhen the list item starts with a blank line, the number of spaces\nfollowing the list marker doesn't change the required indentation:\n\n```````````````````````````````` example\n-   \n  foo\n.\n<ul>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n\nA list item can begin with at most one blank line.\nIn the following example, `foo` is not part of the list\nitem:\n\n```````````````````````````````` example\n-\n\n  foo\n.\n<ul>\n<li></li>\n</ul>\n<p>foo</p>\n````````````````````````````````\n\n\nHere is an empty bullet list item:\n\n```````````````````````````````` example\n- foo\n-\n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nIt does not matter whether there are spaces following the [list marker]:\n\n```````````````````````````````` example\n- foo\n-   \n- bar\n.\n<ul>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nHere is an empty ordered list item:\n\n```````````````````````````````` example\n1. foo\n2.\n3. bar\n.\n<ol>\n<li>foo</li>\n<li></li>\n<li>bar</li>\n</ol>\n````````````````````````````````\n\n\nA list may start or end with an empty list item:\n\n```````````````````````````````` example\n*\n.\n<ul>\n<li></li>\n</ul>\n````````````````````````````````\n\nHowever, an empty list item cannot interrupt a paragraph:\n\n```````````````````````````````` example\nfoo\n*\n\nfoo\n1.\n.\n<p>foo\n*</p>\n<p>foo\n1.</p>\n````````````````````````````````\n\n\n4.  **Indentation.**  If a sequence of lines *Ls* constitutes a list item\n    according to rule #1, #2, or #3, then the result of indenting each line\n    of *Ls* by 1-3 spaces (the same for each line) also constitutes a\n    list item with the same contents and attributes.  If a line is\n    empty, then it need not be indented.\n\nIndented one space:\n\n```````````````````````````````` example\n 1.  A paragraph\n     with two lines.\n\n         indented code\n\n     > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndented two spaces:\n\n```````````````````````````````` example\n  1.  A paragraph\n      with two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndented three spaces:\n\n```````````````````````````````` example\n   1.  A paragraph\n       with two lines.\n\n           indented code\n\n       > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nFour spaces indent gives a code block:\n\n```````````````````````````````` example\n    1.  A paragraph\n        with two lines.\n\n            indented code\n\n        > A block quote.\n.\n<pre><code>1.  A paragraph\n    with two lines.\n\n        indented code\n\n    &gt; A block quote.\n</code></pre>\n````````````````````````````````\n\n\n\n5.  **Laziness.**  If a string of lines *Ls* constitute a [list\n    item](#list-items) with contents *Bs*, then the result of deleting\n    some or all of the indentation from one or more lines in which the\n    next [non-whitespace character] after the indentation is\n    [paragraph continuation text] is a\n    list item with the same contents and attributes.  The unindented\n    lines are called\n    [lazy continuation line](@)s.\n\nHere is an example with [lazy continuation lines]:\n\n```````````````````````````````` example\n  1.  A paragraph\nwith two lines.\n\n          indented code\n\n      > A block quote.\n.\n<ol>\n<li>\n<p>A paragraph\nwith two lines.</p>\n<pre><code>indented code\n</code></pre>\n<blockquote>\n<p>A block quote.</p>\n</blockquote>\n</li>\n</ol>\n````````````````````````````````\n\n\nIndentation can be partially deleted:\n\n```````````````````````````````` example\n  1.  A paragraph\n    with two lines.\n.\n<ol>\n<li>A paragraph\nwith two lines.</li>\n</ol>\n````````````````````````````````\n\n\nThese examples show how laziness can work in nested structures:\n\n```````````````````````````````` example\n> 1. > Blockquote\ncontinued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n````````````````````````````````\n\n\n```````````````````````````````` example\n> 1. > Blockquote\n> continued here.\n.\n<blockquote>\n<ol>\n<li>\n<blockquote>\n<p>Blockquote\ncontinued here.</p>\n</blockquote>\n</li>\n</ol>\n</blockquote>\n````````````````````````````````\n\n\n\n6.  **That's all.** Nothing that is not counted as a list item by rules\n    #1--5 counts as a [list item](#list-items).\n\nThe rules for sublists follow from the general rules\n[above][List items].  A sublist must be indented the same number\nof spaces a paragraph would need to be in order to be included\nin the list item.\n\nSo, in this case we need two spaces indent:\n\n```````````````````````````````` example\n- foo\n  - bar\n    - baz\n      - boo\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>baz\n<ul>\n<li>boo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nOne is not enough:\n\n```````````````````````````````` example\n- foo\n - bar\n  - baz\n   - boo\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n<li>baz</li>\n<li>boo</li>\n</ul>\n````````````````````````````````\n\n\nHere we need four, because the list marker is wider:\n\n```````````````````````````````` example\n10) foo\n    - bar\n.\n<ol start=\"10\">\n<li>foo\n<ul>\n<li>bar</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\nThree is not enough:\n\n```````````````````````````````` example\n10) foo\n   - bar\n.\n<ol start=\"10\">\n<li>foo</li>\n</ol>\n<ul>\n<li>bar</li>\n</ul>\n````````````````````````````````\n\n\nA list may be the first block in a list item:\n\n```````````````````````````````` example\n- - foo\n.\n<ul>\n<li>\n<ul>\n<li>foo</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. - 2. foo\n.\n<ol>\n<li>\n<ul>\n<li>\n<ol start=\"2\">\n<li>foo</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n````````````````````````````````\n\n\nA list item can contain a heading:\n\n```````````````````````````````` example\n- # Foo\n- Bar\n  ---\n  baz\n.\n<ul>\n<li>\n<h1>Foo</h1>\n</li>\n<li>\n<h2>Bar</h2>\nbaz</li>\n</ul>\n````````````````````````````````\n\n\n### Motivation\n\nJohn Gruber's Markdown spec says the following about list items:\n\n1. \"List markers typically start at the left margin, but may be indented\n   by up to three spaces. List markers must be followed by one or more\n   spaces or a tab.\"\n\n2. \"To make lists look nice, you can wrap items with hanging indents....\n   But if you don't want to, you don't have to.\"\n\n3. \"List items may consist of multiple paragraphs. Each subsequent\n   paragraph in a list item must be indented by either 4 spaces or one\n   tab.\"\n\n4. \"It looks nice if you indent every line of the subsequent paragraphs,\n   but here again, Markdown will allow you to be lazy.\"\n\n5. \"To put a blockquote within a list item, the blockquote's `>`\n   delimiters need to be indented.\"\n\n6. \"To put a code block within a list item, the code block needs to be\n   indented twice \u2014 8 spaces or two tabs.\"\n\nThese rules specify that a paragraph under a list item must be indented\nfour spaces (presumably, from the left margin, rather than the start of\nthe list marker, but this is not said), and that code under a list item\nmust be indented eight spaces instead of the usual four.  They also say\nthat a block quote must be indented, but not by how much; however, the\nexample given has four spaces indentation.  Although nothing is said\nabout other kinds of block-level content, it is certainly reasonable to\ninfer that *all* block elements under a list item, including other\nlists, must be indented four spaces.  This principle has been called the\n*four-space rule*.\n\nThe four-space rule is clear and principled, and if the reference\nimplementation `Markdown.pl` had followed it, it probably would have\nbecome the standard.  However, `Markdown.pl` allowed paragraphs and\nsublists to start with only two spaces indentation, at least on the\nouter level.  Worse, its behavior was inconsistent: a sublist of an\nouter-level list needed two spaces indentation, but a sublist of this\nsublist needed three spaces.  It is not surprising, then, that different\nimplementations of Markdown have developed very different rules for\ndetermining what comes under a list item.  (Pandoc and python-Markdown,\nfor example, stuck with Gruber's syntax description and the four-space\nrule, while discount, redcarpet, marked, PHP Markdown, and others\nfollowed `Markdown.pl`'s behavior more closely.)\n\nUnfortunately, given the divergences between implementations, there\nis no way to give a spec for list items that will be guaranteed not\nto break any existing documents.  However, the spec given here should\ncorrectly handle lists formatted with either the four-space rule or\nthe more forgiving `Markdown.pl` behavior, provided they are laid out\nin a way that is natural for a human to read.\n\nThe strategy here is to let the width and indentation of the list marker\ndetermine the indentation necessary for blocks to fall under the list\nitem, rather than having a fixed and arbitrary number.  The writer can\nthink of the body of the list item as a unit which gets indented to the\nright enough to fit the list marker (and any indentation on the list\nmarker).  (The laziness rule, #5, then allows continuation lines to be\nunindented if needed.)\n\nThis rule is superior, we claim, to any rule requiring a fixed level of\nindentation from the margin.  The four-space rule is clear but\nunnatural. It is quite unintuitive that\n\n``` markdown\n- foo\n\n  bar\n\n  - baz\n```\n\nshould be parsed as two lists with an intervening paragraph,\n\n``` html\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n```\n\nas the four-space rule demands, rather than a single list,\n\n``` html\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n```\n\nThe choice of four spaces is arbitrary.  It can be learned, but it is\nnot likely to be guessed, and it trips up beginners regularly.\n\nWould it help to adopt a two-space rule?  The problem is that such\na rule, together with the rule allowing 1--3 spaces indentation of the\ninitial list marker, allows text that is indented *less than* the\noriginal list marker to be included in the list item. For example,\n`Markdown.pl` parses\n\n``` markdown\n   - one\n\n  two\n```\n\nas a single list item, with `two` a continuation paragraph:\n\n``` html\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n```\n\nand similarly\n\n``` markdown\n>   - one\n>\n>  two\n```\n\nas\n\n``` html\n<blockquote>\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n</blockquote>\n```\n\nThis is extremely unintuitive.\n\nRather than requiring a fixed indent from the margin, we could require\na fixed indent (say, two spaces, or even one space) from the list marker (which\nmay itself be indented).  This proposal would remove the last anomaly\ndiscussed.  Unlike the spec presented above, it would count the following\nas a list item with a subparagraph, even though the paragraph `bar`\nis not indented as far as the first paragraph `foo`:\n\n``` markdown\n 10. foo\n\n   bar  \n```\n\nArguably this text does read like a list item with `bar` as a subparagraph,\nwhich may count in favor of the proposal.  However, on this proposal indented\ncode would have to be indented six spaces after the list marker.  And this\nwould break a lot of existing Markdown, which has the pattern:\n\n``` markdown\n1.  foo\n\n        indented code\n```\n\nwhere the code is indented eight spaces.  The spec above, by contrast, will\nparse this text as expected, since the code block's indentation is measured\nfrom the beginning of `foo`.\n\nThe one case that needs special treatment is a list item that *starts*\nwith indented code.  How much indentation is required in that case, since\nwe don't have a \"first paragraph\" to measure from?  Rule #2 simply stipulates\nthat in such cases, we require one space indentation from the list marker\n(and then the normal four spaces for the indented code).  This will match the\nfour-space rule in cases where the list marker plus its initial indentation\ntakes four spaces (a common case), but diverge in other cases.\n\n<div class=\"extension\">\n\n## Task list items (extension)\n\nGFM enables the `tasklist` extension, where an additional processing step is\nperformed on [list items].\n\nA [task list item](@) is a [list item][list items] where the first block in it\nis a paragraph which begins with a [task list item marker] and at least one\nwhitespace character before any other content.\n\nA [task list item marker](@) consists of an optional number of spaces, a left\nbracket (`[`), either a whitespace character or the letter `x` in either\nlowercase or uppercase, and then a right bracket (`]`).\n\nWhen rendered, the [task list item marker] is replaced with a semantic checkbox element;\nin an HTML output, this would be an `<input type=\"checkbox\">` element.\n\nIf the character between the brackets is a whitespace character, the checkbox\nis unchecked.  Otherwise, the checkbox is checked.\n\nThis spec does not define how the checkbox elements are interacted with: in practice,\nimplementors are free to render the checkboxes as disabled or inmutable elements,\nor they may dynamically handle dynamic interactions (i.e. checking, unchecking) in\nthe final rendered document.\n\n```````````````````````````````` example disabled\n- [ ] foo\n- [x] bar\n.\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> foo</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> bar</li>\n</ul>\n````````````````````````````````\n\nTask lists can be arbitrarily nested:\n\n```````````````````````````````` example disabled\n- [x] foo\n  - [ ] bar\n  - [x] baz\n- [ ] bim\n.\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> foo\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> bar</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> baz</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> bim</li>\n</ul>\n````````````````````````````````\n\n</div>\n\n## Lists\n\nA [list](@) is a sequence of one or more\nlist items [of the same type].  The list items\nmay be separated by any number of blank lines.\n\nTwo list items are [of the same type](@)\nif they begin with a [list marker] of the same type.\nTwo list markers are of the\nsame type if (a) they are bullet list markers using the same character\n(`-`, `+`, or `*`) or (b) they are ordered list numbers with the same\ndelimiter (either `.` or `)`).\n\nA list is an [ordered list](@)\nif its constituent list items begin with\n[ordered list markers], and a\n[bullet list](@) if its constituent list\nitems begin with [bullet list markers].\n\nThe [start number](@)\nof an [ordered list] is determined by the list number of\nits initial list item.  The numbers of subsequent list items are\ndisregarded.\n\nA list is [loose](@) if any of its constituent\nlist items are separated by blank lines, or if any of its constituent\nlist items directly contain two block-level elements with a blank line\nbetween them.  Otherwise a list is [tight](@).\n(The difference in HTML output is that paragraphs in a loose list are\nwrapped in `<p>` tags, while paragraphs in a tight list are not.)\n\nChanging the bullet or ordered list delimiter starts a new list:\n\n```````````````````````````````` example\n- foo\n- bar\n+ baz\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<ul>\n<li>baz</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. foo\n2. bar\n3) baz\n.\n<ol>\n<li>foo</li>\n<li>bar</li>\n</ol>\n<ol start=\"3\">\n<li>baz</li>\n</ol>\n````````````````````````````````\n\n\nIn CommonMark, a list can interrupt a paragraph. That is,\nno blank line is needed to separate a paragraph from a following\nlist:\n\n```````````````````````````````` example\nFoo\n- bar\n- baz\n.\n<p>Foo</p>\n<ul>\n<li>bar</li>\n<li>baz</li>\n</ul>\n````````````````````````````````\n\n`Markdown.pl` does not allow this, through fear of triggering a list\nvia a numeral in a hard-wrapped line:\n\n``` markdown\nThe number of windows in my house is\n14.  The number of doors is 6.\n```\n\nOddly, though, `Markdown.pl` *does* allow a blockquote to\ninterrupt a paragraph, even though the same considerations might\napply.\n\nIn CommonMark, we do allow lists to interrupt paragraphs, for\ntwo reasons.  First, it is natural and not uncommon for people\nto start lists without blank lines:\n\n``` markdown\nI need to buy\n- new shoes\n- a coat\n- a plane ticket\n```\n\nSecond, we are attracted to a\n\n> [principle of uniformity](@):\n> if a chunk of text has a certain\n> meaning, it will continue to have the same meaning when put into a\n> container block (such as a list item or blockquote).\n\n(Indeed, the spec for [list items] and [block quotes] presupposes\nthis principle.) This principle implies that if\n\n``` markdown\n  * I need to buy\n    - new shoes\n    - a coat\n    - a plane ticket\n```\n\nis a list item containing a paragraph followed by a nested sublist,\nas all Markdown implementations agree it is (though the paragraph\nmay be rendered without `<p>` tags, since the list is \"tight\"),\nthen\n\n``` markdown\nI need to buy\n- new shoes\n- a coat\n- a plane ticket\n```\n\nby itself should be a paragraph followed by a nested sublist.\n\nSince it is well established Markdown practice to allow lists to\ninterrupt paragraphs inside list items, the [principle of\nuniformity] requires us to allow this outside list items as\nwell.  ([reStructuredText](http://docutils.sourceforge.net/rst.html)\ntakes a different approach, requiring blank lines before lists\neven inside other list items.)\n\nIn order to solve the problem of unwanted lists in paragraphs with\nhard-wrapped numerals, we allow only lists starting with `1` to\ninterrupt paragraphs.  Thus,\n\n```````````````````````````````` example\nThe number of windows in my house is\n14.  The number of doors is 6.\n.\n<p>The number of windows in my house is\n14.  The number of doors is 6.</p>\n````````````````````````````````\n\nWe may still get an unintended result in cases like\n\n```````````````````````````````` example\nThe number of windows in my house is\n1.  The number of doors is 6.\n.\n<p>The number of windows in my house is</p>\n<ol>\n<li>The number of doors is 6.</li>\n</ol>\n````````````````````````````````\n\nbut this rule should prevent most spurious list captures.\n\nThere can be any number of blank lines between items:\n\n```````````````````````````````` example\n- foo\n\n- bar\n\n\n- baz\n.\n<ul>\n<li>\n<p>foo</p>\n</li>\n<li>\n<p>bar</p>\n</li>\n<li>\n<p>baz</p>\n</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\n- foo\n  - bar\n    - baz\n\n\n      bim\n.\n<ul>\n<li>foo\n<ul>\n<li>bar\n<ul>\n<li>\n<p>baz</p>\n<p>bim</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nTo separate consecutive lists of the same type, or to separate a\nlist from an indented code block that would otherwise be parsed\nas a subparagraph of the final list item, you can insert a blank HTML\ncomment:\n\n```````````````````````````````` example\n- foo\n- bar\n\n<!-- -->\n\n- baz\n- bim\n.\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n<!-- -->\n<ul>\n<li>baz</li>\n<li>bim</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n-   foo\n\n    notcode\n\n-   foo\n\n<!-- -->\n\n    code\n.\n<ul>\n<li>\n<p>foo</p>\n<p>notcode</p>\n</li>\n<li>\n<p>foo</p>\n</li>\n</ul>\n<!-- -->\n<pre><code>code\n</code></pre>\n````````````````````````````````\n\n\nList items need not be indented to the same level.  The following\nlist items will be treated as items at the same list level,\nsince none is indented enough to belong to the previous list\nitem:\n\n```````````````````````````````` example\n- a\n - b\n  - c\n   - d\n  - e\n - f\n- g\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d</li>\n<li>e</li>\n<li>f</li>\n<li>g</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n1. a\n\n  2. b\n\n   3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ol>\n````````````````````````````````\n\nNote, however, that list items may not be indented more than\nthree spaces.  Here `- e` is treated as a paragraph continuation\nline, because it is indented more than three spaces:\n\n```````````````````````````````` example\n- a\n - b\n  - c\n   - d\n    - e\n.\n<ul>\n<li>a</li>\n<li>b</li>\n<li>c</li>\n<li>d\n- e</li>\n</ul>\n````````````````````````````````\n\nAnd here, `3. c` is treated as in indented code block,\nbecause it is indented four spaces and preceded by a\nblank line.\n\n```````````````````````````````` example\n1. a\n\n  2. b\n\n    3. c\n.\n<ol>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n</ol>\n<pre><code>3. c\n</code></pre>\n````````````````````````````````\n\n\nThis is a loose list, because there is a blank line between\ntwo of the list items:\n\n```````````````````````````````` example\n- a\n- b\n\n- c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>c</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nSo is this, with a empty second item:\n\n```````````````````````````````` example\n* a\n*\n\n* c\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li></li>\n<li>\n<p>c</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nThese are loose lists, even though there is no space between the items,\nbecause one of the items directly contains two block-level elements\nwith a blank line between them:\n\n```````````````````````````````` example\n- a\n- b\n\n  c\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n- b\n\n  [ref]: /url\n- d\n.\n<ul>\n<li>\n<p>a</p>\n</li>\n<li>\n<p>b</p>\n</li>\n<li>\n<p>d</p>\n</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank lines are in a code block:\n\n```````````````````````````````` example\n- a\n- ```\n  b\n\n\n  ```\n- c\n.\n<ul>\n<li>a</li>\n<li>\n<pre><code>b\n\n\n</code></pre>\n</li>\n<li>c</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank line is between two\nparagraphs of a sublist.  So the sublist is loose while\nthe outer list is tight:\n\n```````````````````````````````` example\n- a\n  - b\n\n    c\n- d\n.\n<ul>\n<li>a\n<ul>\n<li>\n<p>b</p>\n<p>c</p>\n</li>\n</ul>\n</li>\n<li>d</li>\n</ul>\n````````````````````````````````\n\n\nThis is a tight list, because the blank line is inside the\nblock quote:\n\n```````````````````````````````` example\n* a\n  > b\n  >\n* c\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n</li>\n<li>c</li>\n</ul>\n````````````````````````````````\n\n\nThis list is tight, because the consecutive block elements\nare not separated by blank lines:\n\n```````````````````````````````` example\n- a\n  > b\n  ```\n  c\n  ```\n- d\n.\n<ul>\n<li>a\n<blockquote>\n<p>b</p>\n</blockquote>\n<pre><code>c\n</code></pre>\n</li>\n<li>d</li>\n</ul>\n````````````````````````````````\n\n\nA single-paragraph list is tight:\n\n```````````````````````````````` example\n- a\n.\n<ul>\n<li>a</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n  - b\n.\n<ul>\n<li>a\n<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\nThis list is loose, because of the blank line between the\ntwo block elements in the list item:\n\n```````````````````````````````` example\n1. ```\n   foo\n   ```\n\n   bar\n.\n<ol>\n<li>\n<pre><code>foo\n</code></pre>\n<p>bar</p>\n</li>\n</ol>\n````````````````````````````````\n\n\nHere the outer list is loose, the inner list tight:\n\n```````````````````````````````` example\n* foo\n  * bar\n\n  baz\n.\n<ul>\n<li>\n<p>foo</p>\n<ul>\n<li>bar</li>\n</ul>\n<p>baz</p>\n</li>\n</ul>\n````````````````````````````````\n\n\n```````````````````````````````` example\n- a\n  - b\n  - c\n\n- d\n  - e\n  - f\n.\n<ul>\n<li>\n<p>a</p>\n<ul>\n<li>b</li>\n<li>c</li>\n</ul>\n</li>\n<li>\n<p>d</p>\n<ul>\n<li>e</li>\n<li>f</li>\n</ul>\n</li>\n</ul>\n````````````````````````````````\n\n\n# Inlines\n\nInlines are parsed sequentially from the beginning of the character\nstream to the end (left to right, in left-to-right languages).\nThus, for example, in\n\n```````````````````````````````` example\n`hi`lo`\n.\n<p><code>hi</code>lo`</p>\n````````````````````````````````\n\n`hi` is parsed as code, leaving the backtick at the end as a literal\nbacktick.\n\n\n## Backslash escapes\n\nAny ASCII punctuation character may be backslash-escaped:\n\n```````````````````````````````` example\n\\!\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\-\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\_\\`\\{\\|\\}\\~\n.\n<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>\n````````````````````````````````\n\n\nBackslashes before other characters are treated as literal\nbackslashes:\n\n```````````````````````````````` example\n\\\u2192\\A\\a\\ \\3\\\u03c6\\\u00ab\n.\n<p>\\\u2192\\A\\a\\ \\3\\\u03c6\\\u00ab</p>\n````````````````````````````````\n\n\nEscaped characters are treated as regular characters and do\nnot have their usual Markdown meanings:\n\n```````````````````````````````` example\n\\*not emphasized*\n\\<br/> not a tag\n\\[not a link](/foo)\n\\`not code`\n1\\. not a list\n\\* not a list\n\\# not a heading\n\\[foo]: /url \"not a reference\"\n\\&ouml; not a character entity\n.\n<p>*not emphasized*\n&lt;br/&gt; not a tag\n[not a link](/foo)\n`not code`\n1. not a list\n* not a list\n# not a heading\n[foo]: /url &quot;not a reference&quot;\n&amp;ouml; not a character entity</p>\n````````````````````````````````\n\n\nIf a backslash is itself escaped, the following character is not:\n\n```````````````````````````````` example\n\\\\*emphasis*\n.\n<p>\\<em>emphasis</em></p>\n````````````````````````````````\n\n\nA backslash at the end of the line is a [hard line break]:\n\n```````````````````````````````` example\nfoo\\\nbar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\nBackslash escapes do not work in code blocks, code spans, autolinks, or\nraw HTML:\n\n```````````````````````````````` example\n`` \\[\\` ``\n.\n<p><code>\\[\\`</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    \\[\\]\n.\n<pre><code>\\[\\]\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n~~~\n\\[\\]\n~~~\n.\n<pre><code>\\[\\]\n</code></pre>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://example.com?find=\\*>\n.\n<p><a href=\"http://example.com?find=%5C*\">http://example.com?find=\\*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"/bar\\/)\">\n.\n<a href=\"/bar\\/)\">\n````````````````````````````````\n\n\nBut they work in all other contexts, including URLs and link titles,\nlink references, and [info strings] in [fenced code blocks]:\n\n```````````````````````````````` example\n[foo](/bar\\* \"ti\\*tle\")\n.\n<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /bar\\* \"ti\\*tle\"\n.\n<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n``` foo\\+bar\nfoo\n```\n.\n<pre><code class=\"language-foo+bar\">foo\n</code></pre>\n````````````````````````````````\n\n\n\n## Entity and numeric character references\n\nValid HTML entity references and numeric character references\ncan be used in place of the corresponding Unicode character,\nwith the following exceptions:\n\n- Entity and character references are not recognized in code\n  blocks and code spans.\n\n- Entity and character references cannot stand in place of\n  special characters that define structural elements in\n  CommonMark.  For example, although `&#42;` can be used\n  in place of a literal `*` character, `&#42;` cannot replace\n  `*` in emphasis delimiters, bullet list markers, or thematic\n  breaks.\n\nConforming CommonMark parsers need not store information about\nwhether a particular character was represented in the source\nusing a Unicode character or an entity reference.\n\n[Entity references](@) consist of `&` + any of the valid\nHTML5 entity names + `;`. The\ndocument <https://html.spec.whatwg.org/multipage/entities.json>\nis used as an authoritative source for the valid entity\nreferences and their corresponding code points.\n\n```````````````````````````````` example\n&nbsp; &amp; &copy; &AElig; &Dcaron;\n&frac34; &HilbertSpace; &DifferentialD;\n&ClockwiseContourIntegral; &ngE;\n.\n<p>\u00a0 &amp; \u00a9 \u00c6 \u010e\n\u00be \u210b \u2146\n\u2232 \u2267\u0338</p>\n````````````````````````````````\n\n\n[Decimal numeric character\nreferences](@)\nconsist of `&#` + a string of 1--7 arabic digits + `;`. A\nnumeric character reference is parsed as the corresponding\nUnicode character. Invalid Unicode code points will be replaced by\nthe REPLACEMENT CHARACTER (`U+FFFD`).  For security reasons,\nthe code point `U+0000` will also be replaced by `U+FFFD`.\n\n```````````````````````````````` example\n&#35; &#1234; &#992; &#0;\n.\n<p># \u04d2 \u03e0 \ufffd</p>\n````````````````````````````````\n\n\n[Hexadecimal numeric character\nreferences](@) consist of `&#` +\neither `X` or `x` + a string of 1-6 hexadecimal digits + `;`.\nThey too are parsed as the corresponding Unicode character (this\ntime specified with a hexadecimal numeral instead of decimal).\n\n```````````````````````````````` example\n&#X22; &#XD06; &#xcab;\n.\n<p>&quot; \u0d06 \u0cab</p>\n````````````````````````````````\n\n\nHere are some nonentities:\n\n```````````````````````````````` example\n&nbsp &x; &#; &#x;\n&#987654321;\n&#abcdef0;\n&ThisIsNotDefined; &hi?;\n.\n<p>&amp;nbsp &amp;x; &amp;#; &amp;#x;\n&amp;#987654321;\n&amp;#abcdef0;\n&amp;ThisIsNotDefined; &amp;hi?;</p>\n````````````````````````````````\n\n\nAlthough HTML5 does accept some entity references\nwithout a trailing semicolon (such as `&copy`), these are not\nrecognized here, because it makes the grammar too ambiguous:\n\n```````````````````````````````` example\n&copy\n.\n<p>&amp;copy</p>\n````````````````````````````````\n\n\nStrings that are not on the list of HTML5 named entities are not\nrecognized as entity references either:\n\n```````````````````````````````` example\n&MadeUpEntity;\n.\n<p>&amp;MadeUpEntity;</p>\n````````````````````````````````\n\n\nEntity and numeric character references are recognized in any\ncontext besides code spans or code blocks, including\nURLs, [link titles], and [fenced code block][] [info strings]:\n\n```````````````````````````````` example\n<a href=\"&ouml;&ouml;.html\">\n.\n<a href=\"&ouml;&ouml;.html\">\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo](/f&ouml;&ouml; \"f&ouml;&ouml;\")\n.\n<p><a href=\"/f%C3%B6%C3%B6\" title=\"f\u00f6\u00f6\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /f&ouml;&ouml; \"f&ouml;&ouml;\"\n.\n<p><a href=\"/f%C3%B6%C3%B6\" title=\"f\u00f6\u00f6\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n``` f&ouml;&ouml;\nfoo\n```\n.\n<pre><code class=\"language-f\u00f6\u00f6\">foo\n</code></pre>\n````````````````````````````````\n\n\nEntity and numeric character references are treated as literal\ntext in code spans and code blocks:\n\n```````````````````````````````` example\n`f&ouml;&ouml;`\n.\n<p><code>f&amp;ouml;&amp;ouml;</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n    f&ouml;f&ouml;\n.\n<pre><code>f&amp;ouml;f&amp;ouml;\n</code></pre>\n````````````````````````````````\n\n\nEntity and numeric character references cannot be used\nin place of symbols indicating structure in CommonMark\ndocuments.\n\n```````````````````````````````` example\n&#42;foo&#42;\n*foo*\n.\n<p>*foo*\n<em>foo</em></p>\n````````````````````````````````\n\n```````````````````````````````` example\n&#42; foo\n\n* foo\n.\n<p>* foo</p>\n<ul>\n<li>foo</li>\n</ul>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo&#10;&#10;bar\n.\n<p>foo\n\nbar</p>\n````````````````````````````````\n\n```````````````````````````````` example\n&#9;foo\n.\n<p>\u2192foo</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[a](url &quot;tit&quot;)\n.\n<p>[a](url &quot;tit&quot;)</p>\n````````````````````````````````\n\n\n## Code spans\n\nA [backtick string](@)\nis a string of one or more backtick characters (`` ` ``) that is neither\npreceded nor followed by a backtick.\n\nA [code span](@) begins with a backtick string and ends with\na backtick string of equal length.  The contents of the code span are\nthe characters between the two backtick strings, normalized in the\nfollowing ways:\n\n- First, [line endings] are converted to [spaces].\n- If the resulting string both begins *and* ends with a [space]\n  character, but does not consist entirely of [space]\n  characters, a single [space] character is removed from the\n  front and back.  This allows you to include code that begins\n  or ends with backtick characters, which must be separated by\n  whitespace from the opening or closing backtick strings.\n\nThis is a simple code span:\n\n```````````````````````````````` example\n`foo`\n.\n<p><code>foo</code></p>\n````````````````````````````````\n\n\nHere two backticks are used, because the code contains a backtick.\nThis example also illustrates stripping of a single leading and\ntrailing space:\n\n```````````````````````````````` example\n`` foo ` bar ``\n.\n<p><code>foo ` bar</code></p>\n````````````````````````````````\n\n\nThis example shows the motivation for stripping leading and trailing\nspaces:\n\n```````````````````````````````` example\n` `` `\n.\n<p><code>``</code></p>\n````````````````````````````````\n\nNote that only *one* space is stripped:\n\n```````````````````````````````` example\n`  ``  `\n.\n<p><code> `` </code></p>\n````````````````````````````````\n\nThe stripping only happens if the space is on both\nsides of the string:\n\n```````````````````````````````` example\n` a`\n.\n<p><code> a</code></p>\n````````````````````````````````\n\nOnly [spaces], and not [unicode whitespace] in general, are\nstripped in this way:\n\n```````````````````````````````` example\n`\u00a0b\u00a0`\n.\n<p><code>\u00a0b\u00a0</code></p>\n````````````````````````````````\n\nNo stripping occurs if the code span contains only spaces:\n\n```````````````````````````````` example\n`\u00a0`\n`  `\n.\n<p><code>\u00a0</code>\n<code>  </code></p>\n````````````````````````````````\n\n\n[Line endings] are treated like spaces:\n\n```````````````````````````````` example\n``\nfoo\nbar  \nbaz\n``\n.\n<p><code>foo bar   baz</code></p>\n````````````````````````````````\n\n```````````````````````````````` example\n``\nfoo \n``\n.\n<p><code>foo </code></p>\n````````````````````````````````\n\n\nInterior spaces are not collapsed:\n\n```````````````````````````````` example\n`foo   bar \nbaz`\n.\n<p><code>foo   bar  baz</code></p>\n````````````````````````````````\n\nNote that browsers will typically collapse consecutive spaces\nwhen rendering `<code>` elements, so it is recommended that\nthe following CSS be used:\n\n    code{white-space: pre-wrap;}\n\n\nNote that backslash escapes do not work in code spans. All backslashes\nare treated literally:\n\n```````````````````````````````` example\n`foo\\`bar`\n.\n<p><code>foo\\</code>bar`</p>\n````````````````````````````````\n\n\nBackslash escapes are never needed, because one can always choose a\nstring of *n* backtick characters as delimiters, where the code does\nnot contain any strings of exactly *n* backtick characters.\n\n```````````````````````````````` example\n``foo`bar``\n.\n<p><code>foo`bar</code></p>\n````````````````````````````````\n\n```````````````````````````````` example\n` foo `` bar `\n.\n<p><code>foo `` bar</code></p>\n````````````````````````````````\n\n\nCode span backticks have higher precedence than any other inline\nconstructs except HTML tags and autolinks.  Thus, for example, this is\nnot parsed as emphasized text, since the second `*` is part of a code\nspan:\n\n```````````````````````````````` example\n*foo`*`\n.\n<p>*foo<code>*</code></p>\n````````````````````````````````\n\n\nAnd this is not parsed as a link:\n\n```````````````````````````````` example\n[not a `link](/foo`)\n.\n<p>[not a <code>link](/foo</code>)</p>\n````````````````````````````````\n\n\nCode spans, HTML tags, and autolinks have the same precedence.\nThus, this is code:\n\n```````````````````````````````` example\n`<a href=\"`\">`\n.\n<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>\n````````````````````````````````\n\n\nBut this is an HTML tag:\n\n```````````````````````````````` example\n<a href=\"`\">`\n.\n<p><a href=\"`\">`</p>\n````````````````````````````````\n\n\nAnd this is code:\n\n```````````````````````````````` example\n`<http://foo.bar.`baz>`\n.\n<p><code>&lt;http://foo.bar.</code>baz&gt;`</p>\n````````````````````````````````\n\n\nBut this is an autolink:\n\n```````````````````````````````` example\n<http://foo.bar.`baz>`\n.\n<p><a href=\"http://foo.bar.%60baz\">http://foo.bar.`baz</a>`</p>\n````````````````````````````````\n\n\nWhen a backtick string is not closed by a matching backtick string,\nwe just have literal backticks:\n\n```````````````````````````````` example\n```foo``\n.\n<p>```foo``</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`foo\n.\n<p>`foo</p>\n````````````````````````````````\n\nThe following case also illustrates the need for opening and\nclosing backtick strings to be equal in length:\n\n```````````````````````````````` example\n`foo``bar``\n.\n<p>`foo<code>bar</code></p>\n````````````````````````````````\n\n\n## Emphasis and strong emphasis\n\nJohn Gruber's original [Markdown syntax\ndescription](http://daringfireball.net/projects/markdown/syntax#em) says:\n\n> Markdown treats asterisks (`*`) and underscores (`_`) as indicators of\n> emphasis. Text wrapped with one `*` or `_` will be wrapped with an HTML\n> `<em>` tag; double `*`'s or `_`'s will be wrapped with an HTML `<strong>`\n> tag.\n\nThis is enough for most users, but these rules leave much undecided,\nespecially when it comes to nested emphasis.  The original\n`Markdown.pl` test suite makes it clear that triple `***` and\n`___` delimiters can be used for strong emphasis, and most\nimplementations have also allowed the following patterns:\n\n``` markdown\n***strong emph***\n***strong** in emph*\n***emph* in strong**\n**in strong *emph***\n*in emph **strong***\n```\n\nThe following patterns are less widely supported, but the intent\nis clear and they are useful (especially in contexts like bibliography\nentries):\n\n``` markdown\n*emph *with emph* in it*\n**strong **with strong** in it**\n```\n\nMany implementations have also restricted intraword emphasis to\nthe `*` forms, to avoid unwanted emphasis in words containing\ninternal underscores.  (It is best practice to put these in code\nspans, but users often do not.)\n\n``` markdown\ninternal emphasis: foo*bar*baz\nno emphasis: foo_bar_baz\n```\n\nThe rules given below capture all of these patterns, while allowing\nfor efficient parsing strategies that do not backtrack.\n\nFirst, some definitions.  A [delimiter run](@) is either\na sequence of one or more `*` characters that is not preceded or\nfollowed by a non-backslash-escaped `*` character, or a sequence\nof one or more `_` characters that is not preceded or followed by\na non-backslash-escaped `_` character.\n\nA [left-flanking delimiter run](@) is\na [delimiter run] that is (1) not followed by [Unicode whitespace],\nand either (2a) not followed by a [punctuation character], or\n(2b) followed by a [punctuation character] and\npreceded by [Unicode whitespace] or a [punctuation character].\nFor purposes of this definition, the beginning and the end of\nthe line count as Unicode whitespace.\n\nA [right-flanking delimiter run](@) is\na [delimiter run] that is (1) not preceded by [Unicode whitespace],\nand either (2a) not preceded by a [punctuation character], or\n(2b) preceded by a [punctuation character] and\nfollowed by [Unicode whitespace] or a [punctuation character].\nFor purposes of this definition, the beginning and the end of\nthe line count as Unicode whitespace.\n\nHere are some examples of delimiter runs.\n\n  - left-flanking but not right-flanking:\n\n    ```\n    ***abc\n      _abc\n    **\"abc\"\n     _\"abc\"\n    ```\n\n  - right-flanking but not left-flanking:\n\n    ```\n     abc***\n     abc_\n    \"abc\"**\n    \"abc\"_\n    ```\n\n  - Both left and right-flanking:\n\n    ```\n     abc***def\n    \"abc\"_\"def\"\n    ```\n\n  - Neither left nor right-flanking:\n\n    ```\n    abc *** def\n    a _ b\n    ```\n\n(The idea of distinguishing left-flanking and right-flanking\ndelimiter runs based on the character before and the character\nafter comes from Roopesh Chander's\n[vfmd](http://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags).\nvfmd uses the terminology \"emphasis indicator string\" instead of \"delimiter\nrun,\" and its rules for distinguishing left- and right-flanking runs\nare a bit more complex than the ones given here.)\n\nThe following rules define emphasis and strong emphasis:\n\n1.  A single `*` character [can open emphasis](@)\n    iff (if and only if) it is part of a [left-flanking delimiter run].\n\n2.  A single `_` character [can open emphasis] iff\n    it is part of a [left-flanking delimiter run]\n    and either (a) not part of a [right-flanking delimiter run]\n    or (b) part of a [right-flanking delimiter run]\n    preceded by punctuation.\n\n3.  A single `*` character [can close emphasis](@)\n    iff it is part of a [right-flanking delimiter run].\n\n4.  A single `_` character [can close emphasis] iff\n    it is part of a [right-flanking delimiter run]\n    and either (a) not part of a [left-flanking delimiter run]\n    or (b) part of a [left-flanking delimiter run]\n    followed by punctuation.\n\n5.  A double `**` [can open strong emphasis](@)\n    iff it is part of a [left-flanking delimiter run].\n\n6.  A double `__` [can open strong emphasis] iff\n    it is part of a [left-flanking delimiter run]\n    and either (a) not part of a [right-flanking delimiter run]\n    or (b) part of a [right-flanking delimiter run]\n    preceded by punctuation.\n\n7.  A double `**` [can close strong emphasis](@)\n    iff it is part of a [right-flanking delimiter run].\n\n8.  A double `__` [can close strong emphasis] iff\n    it is part of a [right-flanking delimiter run]\n    and either (a) not part of a [left-flanking delimiter run]\n    or (b) part of a [left-flanking delimiter run]\n    followed by punctuation.\n\n9.  Emphasis begins with a delimiter that [can open emphasis] and ends\n    with a delimiter that [can close emphasis], and that uses the same\n    character (`_` or `*`) as the opening delimiter.  The\n    opening and closing delimiters must belong to separate\n    [delimiter runs].  If one of the delimiters can both\n    open and close emphasis, then the sum of the lengths of the\n    delimiter runs containing the opening and closing delimiters\n    must not be a multiple of 3 unless both lengths are\n    multiples of 3.\n\n10. Strong emphasis begins with a delimiter that\n    [can open strong emphasis] and ends with a delimiter that\n    [can close strong emphasis], and that uses the same character\n    (`_` or `*`) as the opening delimiter.  The\n    opening and closing delimiters must belong to separate\n    [delimiter runs].  If one of the delimiters can both open\n    and close strong emphasis, then the sum of the lengths of\n    the delimiter runs containing the opening and closing\n    delimiters must not be a multiple of 3 unless both lengths\n    are multiples of 3.\n\n11. A literal `*` character cannot occur at the beginning or end of\n    `*`-delimited emphasis or `**`-delimited strong emphasis, unless it\n    is backslash-escaped.\n\n12. A literal `_` character cannot occur at the beginning or end of\n    `_`-delimited emphasis or `__`-delimited strong emphasis, unless it\n    is backslash-escaped.\n\nWhere rules 1--12 above are compatible with multiple parsings,\nthe following principles resolve ambiguity:\n\n13. The number of nestings should be minimized. Thus, for example,\n    an interpretation `<strong>...</strong>` is always preferred to\n    `<em><em>...</em></em>`.\n\n14. An interpretation `<em><strong>...</strong></em>` is always\n    preferred to `<strong><em>...</em></strong>`.\n\n15. When two potential emphasis or strong emphasis spans overlap,\n    so that the second begins before the first ends and ends after\n    the first ends, the first takes precedence. Thus, for example,\n    `*foo _bar* baz_` is parsed as `<em>foo _bar</em> baz_` rather\n    than `*foo <em>bar* baz</em>`.\n\n16. When there are two potential emphasis or strong emphasis spans\n    with the same closing delimiter, the shorter one (the one that\n    opens later) takes precedence. Thus, for example,\n    `**foo **bar baz**` is parsed as `**foo <strong>bar baz</strong>`\n    rather than `<strong>foo **bar baz</strong>`.\n\n17. Inline code spans, links, images, and HTML tags group more tightly\n    than emphasis.  So, when there is a choice between an interpretation\n    that contains one of these elements and one that does not, the\n    former always wins.  Thus, for example, `*[foo*](bar)` is\n    parsed as `*<a href=\"bar\">foo*</a>` rather than as\n    `<em>[foo</em>](bar)`.\n\nThese rules can be illustrated through a series of examples.\n\nRule 1:\n\n```````````````````````````````` example\n*foo bar*\n.\n<p><em>foo bar</em></p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `*` is followed by\nwhitespace, and hence not part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na * foo bar*\n.\n<p>a * foo bar*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `*` is preceded\nby an alphanumeric and followed by punctuation, and hence\nnot part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na*\"foo\"*\n.\n<p>a*&quot;foo&quot;*</p>\n````````````````````````````````\n\n\nUnicode nonbreaking spaces count as whitespace, too:\n\n```````````````````````````````` example\n*\u00a0a\u00a0*\n.\n<p>*\u00a0a\u00a0*</p>\n````````````````````````````````\n\n\nIntraword emphasis with `*` is permitted:\n\n```````````````````````````````` example\nfoo*bar*\n.\n<p>foo<em>bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5*6*78\n.\n<p>5<em>6</em>78</p>\n````````````````````````````````\n\n\nRule 2:\n\n```````````````````````````````` example\n_foo bar_\n.\n<p><em>foo bar</em></p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `_` is followed by\nwhitespace:\n\n```````````````````````````````` example\n_ foo bar_\n.\n<p>_ foo bar_</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the opening `_` is preceded\nby an alphanumeric and followed by punctuation:\n\n```````````````````````````````` example\na_\"foo\"_\n.\n<p>a_&quot;foo&quot;_</p>\n````````````````````````````````\n\n\nEmphasis with `_` is not allowed inside words:\n\n```````````````````````````````` example\nfoo_bar_\n.\n<p>foo_bar_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5_6_78\n.\n<p>5_6_78</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f_\n.\n<p>\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f_</p>\n````````````````````````````````\n\n\nHere `_` does not generate emphasis, because the first delimiter run\nis right-flanking and the second left-flanking:\n\n```````````````````````````````` example\naa_\"bb\"_cc\n.\n<p>aa_&quot;bb&quot;_cc</p>\n````````````````````````````````\n\n\nThis is emphasis, even though the opening delimiter is\nboth left- and right-flanking, because it is preceded by\npunctuation:\n\n```````````````````````````````` example\nfoo-_(bar)_\n.\n<p>foo-<em>(bar)</em></p>\n````````````````````````````````\n\n\nRule 3:\n\nThis is not emphasis, because the closing delimiter does\nnot match the opening delimiter:\n\n```````````````````````````````` example\n_foo*\n.\n<p>_foo*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the closing `*` is preceded by\nwhitespace:\n\n```````````````````````````````` example\n*foo bar *\n.\n<p>*foo bar *</p>\n````````````````````````````````\n\n\nA newline also counts as whitespace:\n\n```````````````````````````````` example\n*foo bar\n*\n.\n<p>*foo bar\n*</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the second `*` is\npreceded by punctuation and followed by an alphanumeric\n(hence it is not part of a [right-flanking delimiter run]:\n\n```````````````````````````````` example\n*(*foo)\n.\n<p>*(*foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith this example:\n\n```````````````````````````````` example\n*(*foo*)*\n.\n<p><em>(<em>foo</em>)</em></p>\n````````````````````````````````\n\n\nIntraword emphasis with `*` is allowed:\n\n```````````````````````````````` example\n*foo*bar\n.\n<p><em>foo</em>bar</p>\n````````````````````````````````\n\n\n\nRule 4:\n\nThis is not emphasis, because the closing `_` is preceded by\nwhitespace:\n\n```````````````````````````````` example\n_foo bar _\n.\n<p>_foo bar _</p>\n````````````````````````````````\n\n\nThis is not emphasis, because the second `_` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n_(_foo)\n.\n<p>_(_foo)</p>\n````````````````````````````````\n\n\nThis is emphasis within emphasis:\n\n```````````````````````````````` example\n_(_foo_)_\n.\n<p><em>(<em>foo</em>)</em></p>\n````````````````````````````````\n\n\nIntraword emphasis is disallowed for `_`:\n\n```````````````````````````````` example\n_foo_bar\n.\n<p>_foo_bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f\n.\n<p>_\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c_\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo_bar_baz_\n.\n<p><em>foo_bar_baz</em></p>\n````````````````````````````````\n\n\nThis is emphasis, even though the closing delimiter is\nboth left- and right-flanking, because it is followed by\npunctuation:\n\n```````````````````````````````` example\n_(bar)_.\n.\n<p><em>(bar)</em>.</p>\n````````````````````````````````\n\n\nRule 5:\n\n```````````````````````````````` example\n**foo bar**\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening delimiter is\nfollowed by whitespace:\n\n```````````````````````````````` example\n** foo bar**\n.\n<p>** foo bar**</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening `**` is preceded\nby an alphanumeric and followed by punctuation, and hence\nnot part of a [left-flanking delimiter run]:\n\n```````````````````````````````` example\na**\"foo\"**\n.\n<p>a**&quot;foo&quot;**</p>\n````````````````````````````````\n\n\nIntraword strong emphasis with `**` is permitted:\n\n```````````````````````````````` example\nfoo**bar**\n.\n<p>foo<strong>bar</strong></p>\n````````````````````````````````\n\n\nRule 6:\n\n```````````````````````````````` example\n__foo bar__\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening delimiter is\nfollowed by whitespace:\n\n```````````````````````````````` example\n__ foo bar__\n.\n<p>__ foo bar__</p>\n````````````````````````````````\n\n\nA newline counts as whitespace:\n```````````````````````````````` example\n__\nfoo bar__\n.\n<p>__\nfoo bar__</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the opening `__` is preceded\nby an alphanumeric and followed by punctuation:\n\n```````````````````````````````` example\na__\"foo\"__\n.\n<p>a__&quot;foo&quot;__</p>\n````````````````````````````````\n\n\nIntraword strong emphasis is forbidden with `__`:\n\n```````````````````````````````` example\nfoo__bar__\n.\n<p>foo__bar__</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n5__6__78\n.\n<p>5__6__78</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f__\n.\n<p>\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f__</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo, __bar__, baz__\n.\n<p><strong>foo, bar, baz</strong></p>\n````````````````````````````````\n\n\nThis is strong emphasis, even though the opening delimiter is\nboth left- and right-flanking, because it is preceded by\npunctuation:\n\n```````````````````````````````` example\nfoo-__(bar)__\n.\n<p>foo-<strong>(bar)</strong></p>\n````````````````````````````````\n\n\n\nRule 7:\n\nThis is not strong emphasis, because the closing delimiter is preceded\nby whitespace:\n\n```````````````````````````````` example\n**foo bar **\n.\n<p>**foo bar **</p>\n````````````````````````````````\n\n\n(Nor can it be interpreted as an emphasized `*foo bar *`, because of\nRule 11.)\n\nThis is not strong emphasis, because the second `**` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n**(**foo)\n.\n<p>**(**foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith these examples:\n\n```````````````````````````````` example\n*(**foo**)*\n.\n<p><em>(<strong>foo</strong>)</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n.\n<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo \"*bar*\" foo**\n.\n<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>\n````````````````````````````````\n\n\nIntraword emphasis:\n\n```````````````````````````````` example\n**foo**bar\n.\n<p><strong>foo</strong>bar</p>\n````````````````````````````````\n\n\nRule 8:\n\nThis is not strong emphasis, because the closing delimiter is\npreceded by whitespace:\n\n```````````````````````````````` example\n__foo bar __\n.\n<p>__foo bar __</p>\n````````````````````````````````\n\n\nThis is not strong emphasis, because the second `__` is\npreceded by punctuation and followed by an alphanumeric:\n\n```````````````````````````````` example\n__(__foo)\n.\n<p>__(__foo)</p>\n````````````````````````````````\n\n\nThe point of this restriction is more easily appreciated\nwith this example:\n\n```````````````````````````````` example\n_(__foo__)_\n.\n<p><em>(<strong>foo</strong>)</em></p>\n````````````````````````````````\n\n\nIntraword strong emphasis is forbidden with `__`:\n\n```````````````````````````````` example\n__foo__bar\n.\n<p>__foo__bar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f\n.\n<p>__\u043f\u0440\u0438\u0441\u0442\u0430\u043d\u044f\u043c__\u0441\u0442\u0440\u0435\u043c\u044f\u0442\u0441\u044f</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo__bar__baz__\n.\n<p><strong>foo__bar__baz</strong></p>\n````````````````````````````````\n\n\nThis is strong emphasis, even though the closing delimiter is\nboth left- and right-flanking, because it is followed by\npunctuation:\n\n```````````````````````````````` example\n__(bar)__.\n.\n<p><strong>(bar)</strong>.</p>\n````````````````````````````````\n\n\nRule 9:\n\nAny nonempty sequence of inline elements can be the contents of an\nemphasized span.\n\n```````````````````````````````` example\n*foo [bar](/url)*\n.\n<p><em>foo <a href=\"/url\">bar</a></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo\nbar*\n.\n<p><em>foo\nbar</em></p>\n````````````````````````````````\n\n\nIn particular, emphasis and strong emphasis can be nested\ninside emphasis:\n\n```````````````````````````````` example\n_foo __bar__ baz_\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo _bar_ baz_\n.\n<p><em>foo <em>bar</em> baz</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo_ bar_\n.\n<p><em><em>foo</em> bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo *bar**\n.\n<p><em>foo <em>bar</em></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo **bar** baz*\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n````````````````````````````````\n\n```````````````````````````````` example\n*foo**bar**baz*\n.\n<p><em>foo<strong>bar</strong>baz</em></p>\n````````````````````````````````\n\nNote that in the preceding case, the interpretation\n\n``` markdown\n<p><em>foo</em><em>bar<em></em>baz</em></p>\n```\n\n\nis precluded by the condition that a delimiter that\ncan both open and close (like the `*` after `foo`)\ncannot form emphasis if the sum of the lengths of\nthe delimiter runs containing the opening and\nclosing delimiters is a multiple of 3 unless\nboth lengths are multiples of 3.\n\n\nFor the same reason, we don't get two consecutive\nemphasis sections in this example:\n\n```````````````````````````````` example\n*foo**bar*\n.\n<p><em>foo**bar</em></p>\n````````````````````````````````\n\n\nThe same condition ensures that the following\ncases are all strong emphasis nested inside\nemphasis, even when the interior spaces are\nomitted:\n\n\n```````````````````````````````` example\n***foo** bar*\n.\n<p><em><strong>foo</strong> bar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo **bar***\n.\n<p><em>foo <strong>bar</strong></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo**bar***\n.\n<p><em>foo<strong>bar</strong></em></p>\n````````````````````````````````\n\n\nWhen the lengths of the interior closing and opening\ndelimiter runs are *both* multiples of 3, though,\nthey can match to create emphasis:\n\n```````````````````````````````` example\nfoo***bar***baz\n.\n<p>foo<em><strong>bar</strong></em>baz</p>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo******bar*********baz\n.\n<p>foo<strong>bar</strong>***baz</p>\n````````````````````````````````\n\n\nIndefinite levels of nesting are possible:\n\n```````````````````````````````` example\n*foo **bar *baz* bim** bop*\n.\n<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo [*bar*](/url)*\n.\n<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>\n````````````````````````````````\n\n\nThere can be no empty emphasis or strong emphasis:\n\n```````````````````````````````` example\n** is not an empty emphasis\n.\n<p>** is not an empty emphasis</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**** is not an empty strong emphasis\n.\n<p>**** is not an empty strong emphasis</p>\n````````````````````````````````\n\n\n\nRule 10:\n\nAny nonempty sequence of inline elements can be the contents of an\nstrongly emphasized span.\n\n```````````````````````````````` example\n**foo [bar](/url)**\n.\n<p><strong>foo <a href=\"/url\">bar</a></strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo\nbar**\n.\n<p><strong>foo\nbar</strong></p>\n````````````````````````````````\n\n\nIn particular, emphasis and strong emphasis can be nested\ninside strong emphasis:\n\n```````````````````````````````` example\n__foo _bar_ baz__\n.\n<p><strong>foo <em>bar</em> baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo __bar__ baz__\n.\n<p><strong>foo bar baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo__ bar__\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo **bar****\n.\n<p><strong>foo bar</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo *bar* baz**\n.\n<p><strong>foo <em>bar</em> baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo*bar*baz**\n.\n<p><strong>foo<em>bar</em>baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n***foo* bar**\n.\n<p><strong><em>foo</em> bar</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo *bar***\n.\n<p><strong>foo <em>bar</em></strong></p>\n````````````````````````````````\n\n\nIndefinite levels of nesting are possible:\n\n```````````````````````````````` example\n**foo *bar **baz**\nbim* bop**\n.\n<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo [*bar*](/url)**\n.\n<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>\n````````````````````````````````\n\n\nThere can be no empty emphasis or strong emphasis:\n\n```````````````````````````````` example\n__ is not an empty emphasis\n.\n<p>__ is not an empty emphasis</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____ is not an empty strong emphasis\n.\n<p>____ is not an empty strong emphasis</p>\n````````````````````````````````\n\n\n\nRule 11:\n\n```````````````````````````````` example\nfoo ***\n.\n<p>foo ***</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *\\**\n.\n<p>foo <em>*</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *_*\n.\n<p>foo <em>_</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo *****\n.\n<p>foo *****</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo **\\***\n.\n<p>foo <strong>*</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo **_**\n.\n<p>foo <strong>_</strong></p>\n````````````````````````````````\n\n\nNote that when delimiters do not match evenly, Rule 11 determines\nthat the excess literal `*` characters will appear outside of the\nemphasis, rather than inside it:\n\n```````````````````````````````` example\n**foo*\n.\n<p>*<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo**\n.\n<p><em>foo</em>*</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n***foo**\n.\n<p>*<strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n****foo*\n.\n<p>***<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**foo***\n.\n<p><strong>foo</strong>*</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo****\n.\n<p><em>foo</em>***</p>\n````````````````````````````````\n\n\n\nRule 12:\n\n```````````````````````````````` example\nfoo ___\n.\n<p>foo ___</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _\\__\n.\n<p>foo <em>_</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _*_\n.\n<p>foo <em>*</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo _____\n.\n<p>foo _____</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo __\\___\n.\n<p>foo <strong>_</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo __*__\n.\n<p>foo <strong>*</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo_\n.\n<p>_<em>foo</em></p>\n````````````````````````````````\n\n\nNote that when delimiters do not match evenly, Rule 12 determines\nthat the excess literal `_` characters will appear outside of the\nemphasis, rather than inside it:\n\n```````````````````````````````` example\n_foo__\n.\n<p><em>foo</em>_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n___foo__\n.\n<p>_<strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo_\n.\n<p>___<em>foo</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo___\n.\n<p><strong>foo</strong>_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo____\n.\n<p><em>foo</em>___</p>\n````````````````````````````````\n\n\nRule 13 implies that if you want emphasis nested directly inside\nemphasis, you must use different delimiters:\n\n```````````````````````````````` example\n**foo**\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*_foo_*\n.\n<p><em><em>foo</em></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__foo__\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_*foo*_\n.\n<p><em><em>foo</em></em></p>\n````````````````````````````````\n\n\nHowever, strong emphasis within strong emphasis is possible without\nswitching delimiters:\n\n```````````````````````````````` example\n****foo****\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n____foo____\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\n\nRule 13 can be applied to arbitrarily long sequences of\ndelimiters:\n\n```````````````````````````````` example\n******foo******\n.\n<p><strong>foo</strong></p>\n````````````````````````````````\n\n\nRule 14:\n\n```````````````````````````````` example\n***foo***\n.\n<p><em><strong>foo</strong></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_____foo_____\n.\n<p><em><strong>foo</strong></em></p>\n````````````````````````````````\n\n\nRule 15:\n\n```````````````````````````````` example\n*foo _bar* baz_\n.\n<p><em>foo _bar</em> baz_</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo __bar *baz bim__ bam*\n.\n<p><em>foo <strong>bar *baz bim</strong> bam</em></p>\n````````````````````````````````\n\n\nRule 16:\n\n```````````````````````````````` example\n**foo **bar baz**\n.\n<p>**foo <strong>bar baz</strong></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo *bar baz*\n.\n<p>*foo <em>bar baz</em></p>\n````````````````````````````````\n\n\nRule 17:\n\n```````````````````````````````` example\n*[bar*](/url)\n.\n<p>*<a href=\"/url\">bar*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_foo [bar_](/url)\n.\n<p>_foo <a href=\"/url\">bar_</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*<img src=\"foo\" title=\"*\"/>\n.\n<p>*<img src=\"foo\" title=\"*\"/></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**<a href=\"**\">\n.\n<p>**<a href=\"**\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__<a href=\"__\">\n.\n<p>__<a href=\"__\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*a `*`*\n.\n<p><em>a <code>*</code></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n_a `_`_\n.\n<p><em>a <code>_</code></em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n**a<http://foo.bar/?q=**>\n.\n<p>**a<a href=\"http://foo.bar/?q=**\">http://foo.bar/?q=**</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n__a<http://foo.bar/?q=__>\n.\n<p>__a<a href=\"http://foo.bar/?q=__\">http://foo.bar/?q=__</a></p>\n````````````````````````````````\n\n\n<div class=\"extension\">\n\n## Strikethrough (extension)\n\nGFM enables the `strikethrough` extension, where an additional emphasis type is\navailable.\n\nStrikethrough text is any text wrapped in two tildes (`~`).\n\n```````````````````````````````` example strikethrough\n~~Hi~~ Hello, world!\n.\n<p><del>Hi</del> Hello, world!</p>\n````````````````````````````````\n\nAs with regular emphasis delimiters, a new paragraph will cause strikethrough\nparsing to cease:\n\n```````````````````````````````` example strikethrough\nThis ~~has a\n\nnew paragraph~~.\n.\n<p>This ~~has a</p>\n<p>new paragraph~~.</p>\n````````````````````````````````\n\n</div>\n\n## Links\n\nA link contains [link text] (the visible text), a [link destination]\n(the URI that is the link destination), and optionally a [link title].\nThere are two basic kinds of links in Markdown.  In [inline links] the\ndestination and title are given immediately after the link text.  In\n[reference links] the destination and title are defined elsewhere in\nthe document.\n\nA [link text](@) consists of a sequence of zero or more\ninline elements enclosed by square brackets (`[` and `]`).  The\nfollowing rules apply:\n\n- Links may not contain other links, at any level of nesting. If\n  multiple otherwise valid link definitions appear nested inside each\n  other, the inner-most definition is used.\n\n- Brackets are allowed in the [link text] only if (a) they\n  are backslash-escaped or (b) they appear as a matched pair of brackets,\n  with an open bracket `[`, a sequence of zero or more inlines, and\n  a close bracket `]`.\n\n- Backtick [code spans], [autolinks], and raw [HTML tags] bind more tightly\n  than the brackets in link text.  Thus, for example,\n  `` [foo`]` `` could not be a link text, since the second `]`\n  is part of a code span.\n\n- The brackets in link text bind more tightly than markers for\n  [emphasis and strong emphasis]. Thus, for example, `*[foo*](url)` is a link.\n\nA [link destination](@) consists of either\n\n- a sequence of zero or more characters between an opening `<` and a\n  closing `>` that contains no line breaks or unescaped\n  `<` or `>` characters, or\n\n- a nonempty sequence of characters that does not start with\n  `<`, does not include ASCII space or control characters, and\n  includes parentheses only if (a) they are backslash-escaped or\n  (b) they are part of a balanced pair of unescaped parentheses.\n  (Implementations may impose limits on parentheses nesting to\n  avoid performance issues, but at least three levels of nesting\n  should be supported.)\n\nA [link title](@)  consists of either\n\n- a sequence of zero or more characters between straight double-quote\n  characters (`\"`), including a `\"` character only if it is\n  backslash-escaped, or\n\n- a sequence of zero or more characters between straight single-quote\n  characters (`'`), including a `'` character only if it is\n  backslash-escaped, or\n\n- a sequence of zero or more characters between matching parentheses\n  (`(...)`), including a `(` or `)` character only if it is\n  backslash-escaped.\n\nAlthough [link titles] may span multiple lines, they may not contain\na [blank line].\n\nAn [inline link](@) consists of a [link text] followed immediately\nby a left parenthesis `(`, optional [whitespace], an optional\n[link destination], an optional [link title] separated from the link\ndestination by [whitespace], optional [whitespace], and a right\nparenthesis `)`. The link's text consists of the inlines contained\nin the [link text] (excluding the enclosing square brackets).\nThe link's URI consists of the link destination, excluding enclosing\n`<...>` if present, with backslash-escapes in effect as described\nabove.  The link's title consists of the link title, excluding its\nenclosing delimiters, with backslash-escapes in effect as described\nabove.\n\nHere is a simple inline link:\n\n```````````````````````````````` example\n[link](/uri \"title\")\n.\n<p><a href=\"/uri\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nThe title may be omitted:\n\n```````````````````````````````` example\n[link](/uri)\n.\n<p><a href=\"/uri\">link</a></p>\n````````````````````````````````\n\n\nBoth the title and the destination may be omitted:\n\n```````````````````````````````` example\n[link]()\n.\n<p><a href=\"\">link</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link](<>)\n.\n<p><a href=\"\">link</a></p>\n````````````````````````````````\n\nThe destination can only contain spaces if it is\nenclosed in pointy brackets:\n\n```````````````````````````````` example\n[link](/my uri)\n.\n<p>[link](/my uri)</p>\n````````````````````````````````\n\n```````````````````````````````` example\n[link](</my uri>)\n.\n<p><a href=\"/my%20uri\">link</a></p>\n````````````````````````````````\n\nThe destination cannot contain line breaks,\neven if enclosed in pointy brackets:\n\n```````````````````````````````` example\n[link](foo\nbar)\n.\n<p>[link](foo\nbar)</p>\n````````````````````````````````\n\n```````````````````````````````` example\n[link](<foo\nbar>)\n.\n<p>[link](<foo\nbar>)</p>\n````````````````````````````````\n\nThe destination can contain `)` if it is enclosed\nin pointy brackets:\n\n```````````````````````````````` example\n[a](<b)c>)\n.\n<p><a href=\"b)c\">a</a></p>\n````````````````````````````````\n\nPointy brackets that enclose links must be unescaped:\n\n```````````````````````````````` example\n[link](<foo\\>)\n.\n<p>[link](&lt;foo&gt;)</p>\n````````````````````````````````\n\nThese are not links, because the opening pointy bracket\nis not matched properly:\n\n```````````````````````````````` example\n[a](<b)c\n[a](<b)c>\n[a](<b>c)\n.\n<p>[a](&lt;b)c\n[a](&lt;b)c&gt;\n[a](<b>c)</p>\n````````````````````````````````\n\nParentheses inside the link destination may be escaped:\n\n```````````````````````````````` example\n[link](\\(foo\\))\n.\n<p><a href=\"(foo)\">link</a></p>\n````````````````````````````````\n\nAny number of parentheses are allowed without escaping, as long as they are\nbalanced:\n\n```````````````````````````````` example\n[link](foo(and(bar)))\n.\n<p><a href=\"foo(and(bar))\">link</a></p>\n````````````````````````````````\n\nHowever, if you have unbalanced parentheses, you need to escape or use the\n`<...>` form:\n\n```````````````````````````````` example\n[link](foo\\(and\\(bar\\))\n.\n<p><a href=\"foo(and(bar)\">link</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link](<foo(and(bar)>)\n.\n<p><a href=\"foo(and(bar)\">link</a></p>\n````````````````````````````````\n\n\nParentheses and other symbols can also be escaped, as usual\nin Markdown:\n\n```````````````````````````````` example\n[link](foo\\)\\:)\n.\n<p><a href=\"foo):\">link</a></p>\n````````````````````````````````\n\n\nA link can contain fragment identifiers and queries:\n\n```````````````````````````````` example\n[link](#fragment)\n\n[link](http://example.com#fragment)\n\n[link](http://example.com?foo=3#frag)\n.\n<p><a href=\"#fragment\">link</a></p>\n<p><a href=\"http://example.com#fragment\">link</a></p>\n<p><a href=\"http://example.com?foo=3#frag\">link</a></p>\n````````````````````````````````\n\n\nNote that a backslash before a non-escapable character is\njust a backslash:\n\n```````````````````````````````` example\n[link](foo\\bar)\n.\n<p><a href=\"foo%5Cbar\">link</a></p>\n````````````````````````````````\n\n\nURL-escaping should be left alone inside the destination, as all\nURL-escaped characters are also valid URL characters. Entity and\nnumerical character references in the destination will be parsed\ninto the corresponding Unicode code points, as usual.  These may\nbe optionally URL-escaped when written as HTML, but this spec\ndoes not enforce any particular policy for rendering URLs in\nHTML or other formats.  Renderers may make different decisions\nabout how to escape or normalize URLs in the output.\n\n```````````````````````````````` example\n[link](foo%20b&auml;)\n.\n<p><a href=\"foo%20b%C3%A4\">link</a></p>\n````````````````````````````````\n\n\nNote that, because titles can often be parsed as destinations,\nif you try to omit the destination and keep the title, you'll\nget unexpected results:\n\n```````````````````````````````` example\n[link](\"title\")\n.\n<p><a href=\"%22title%22\">link</a></p>\n````````````````````````````````\n\n\nTitles may be in single quotes, double quotes, or parentheses:\n\n```````````````````````````````` example\n[link](/url \"title\")\n[link](/url 'title')\n[link](/url (title))\n.\n<p><a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a>\n<a href=\"/url\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nBackslash escapes and entity and numeric character references\nmay be used in titles:\n\n```````````````````````````````` example\n[link](/url \"title \\\"&quot;\")\n.\n<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>\n````````````````````````````````\n\n\nTitles must be separated from the link using a [whitespace].\nOther [Unicode whitespace] like non-breaking space doesn't work.\n\n```````````````````````````````` example\n[link](/url\u00a0\"title\")\n.\n<p><a href=\"/url%C2%A0%22title%22\">link</a></p>\n````````````````````````````````\n\n\nNested balanced quotes are not allowed without escaping:\n\n```````````````````````````````` example\n[link](/url \"title \"and\" title\")\n.\n<p>[link](/url &quot;title &quot;and&quot; title&quot;)</p>\n````````````````````````````````\n\n\nBut it is easy to work around this by using a different quote type:\n\n```````````````````````````````` example\n[link](/url 'title \"and\" title')\n.\n<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>\n````````````````````````````````\n\n\n(Note:  `Markdown.pl` did allow double quotes inside a double-quoted\ntitle, and its test suite included a test demonstrating this.\nBut it is hard to see a good rationale for the extra complexity this\nbrings, since there are already many ways---backslash escaping,\nentity and numeric character references, or using a different\nquote type for the enclosing title---to write titles containing\ndouble quotes.  `Markdown.pl`'s handling of titles has a number\nof other strange features.  For example, it allows single-quoted\ntitles in inline links, but not reference links.  And, in\nreference links but not inline links, it allows a title to begin\nwith `\"` and end with `)`.  `Markdown.pl` 1.0.1 even allows\ntitles with no closing quotation mark, though 1.0.2b8 does not.\nIt seems preferable to adopt a simple, rational rule that works\nthe same way in inline links and link reference definitions.)\n\n[Whitespace] is allowed around the destination and title:\n\n```````````````````````````````` example\n[link](   /uri\n  \"title\"  )\n.\n<p><a href=\"/uri\" title=\"title\">link</a></p>\n````````````````````````````````\n\n\nBut it is not allowed between the link text and the\nfollowing parenthesis:\n\n```````````````````````````````` example\n[link] (/uri)\n.\n<p>[link] (/uri)</p>\n````````````````````````````````\n\n\nThe link text may contain balanced brackets, but not unbalanced ones,\nunless they are escaped:\n\n```````````````````````````````` example\n[link [foo [bar]]](/uri)\n.\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link] bar](/uri)\n.\n<p>[link] bar](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link [bar](/uri)\n.\n<p>[link <a href=\"/uri\">bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link \\[bar](/uri)\n.\n<p><a href=\"/uri\">link [bar</a></p>\n````````````````````````````````\n\n\nThe link text may contain inline content:\n\n```````````````````````````````` example\n[link *foo **bar** `#`*](/uri)\n.\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[![moon](moon.jpg)](/uri)\n.\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n````````````````````````````````\n\n\nHowever, links may not contain other links, at any level of nesting.\n\n```````````````````````````````` example\n[foo [bar](/uri)](/uri)\n.\n<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *[bar [baz](/uri)](/uri)*](/uri)\n.\n<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![[[foo](uri1)](uri2)](uri3)\n.\n<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of link text grouping over\nemphasis grouping:\n\n```````````````````````````````` example\n*[foo*](/uri)\n.\n<p>*<a href=\"/uri\">foo*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar](baz*)\n.\n<p><a href=\"baz*\">foo *bar</a></p>\n````````````````````````````````\n\n\nNote that brackets that *aren't* part of links do not take\nprecedence:\n\n```````````````````````````````` example\n*foo [bar* baz]\n.\n<p><em>foo [bar</em> baz]</p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of HTML tags, code spans,\nand autolinks over link grouping:\n\n```````````````````````````````` example\n[foo <bar attr=\"](baz)\">\n.\n<p>[foo <bar attr=\"](baz)\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo`](/uri)`\n.\n<p>[foo<code>](/uri)</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo<http://example.com/?search=](uri)>\n.\n<p>[foo<a href=\"http://example.com/?search=%5D(uri)\">http://example.com/?search=](uri)</a></p>\n````````````````````````````````\n\n\nThere are three kinds of [reference link](@)s:\n[full](#full-reference-link), [collapsed](#collapsed-reference-link),\nand [shortcut](#shortcut-reference-link).\n\nA [full reference link](@)\nconsists of a [link text] immediately followed by a [link label]\nthat [matches] a [link reference definition] elsewhere in the document.\n\nA [link label](@)  begins with a left bracket (`[`) and ends\nwith the first right bracket (`]`) that is not backslash-escaped.\nBetween these brackets there must be at least one [non-whitespace character].\nUnescaped square bracket characters are not allowed inside the\nopening and closing square brackets of [link labels].  A link\nlabel can have at most 999 characters inside the square\nbrackets.\n\nOne label [matches](@)\nanother just in case their normalized forms are equal.  To normalize a\nlabel, strip off the opening and closing brackets,\nperform the *Unicode case fold*, strip leading and trailing\n[whitespace] and collapse consecutive internal\n[whitespace] to a single space.  If there are multiple\nmatching reference link definitions, the one that comes first in the\ndocument is used.  (It is desirable in such cases to emit a warning.)\n\nThe contents of the first link label are parsed as inlines, which are\nused as the link's text.  The link's URI and title are provided by the\nmatching [link reference definition].\n\nHere is a simple example:\n\n```````````````````````````````` example\n[foo][bar]\n\n[bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\nThe rules for the [link text] are the same as with\n[inline links].  Thus:\n\nThe link text may contain balanced brackets, but not unbalanced ones,\nunless they are escaped:\n\n```````````````````````````````` example\n[link [foo [bar]]][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[link \\[bar][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link [bar</a></p>\n````````````````````````````````\n\n\nThe link text may contain inline content:\n\n```````````````````````````````` example\n[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n````````````````````````````````\n\n\nHowever, links may not contain other links, at any level of nesting.\n\n```````````````````````````````` example\n[foo [bar](/uri)][ref]\n\n[ref]: /uri\n.\n<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n.\n<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n````````````````````````````````\n\n\n(In the examples above, we have two [shortcut reference links]\ninstead of one [full reference link].)\n\nThe following cases illustrate the precedence of link text grouping over\nemphasis grouping:\n\n```````````````````````````````` example\n*[foo*][ref]\n\n[ref]: /uri\n.\n<p>*<a href=\"/uri\">foo*</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo *bar][ref]\n\n[ref]: /uri\n.\n<p><a href=\"/uri\">foo *bar</a></p>\n````````````````````````````````\n\n\nThese cases illustrate the precedence of HTML tags, code spans,\nand autolinks over link grouping:\n\n```````````````````````````````` example\n[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n.\n<p>[foo <bar attr=\"][ref]\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo`][ref]`\n\n[ref]: /uri\n.\n<p>[foo<code>][ref]</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo<http://example.com/?search=][ref]>\n\n[ref]: /uri\n.\n<p>[foo<a href=\"http://example.com/?search=%5D%5Bref%5D\">http://example.com/?search=][ref]</a></p>\n````````````````````````````````\n\n\nMatching is case-insensitive:\n\n```````````````````````````````` example\n[foo][BaR]\n\n[bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\nUnicode case fold is used:\n\n```````````````````````````````` example\n[\u0422\u043e\u043b\u043f\u043e\u0439][\u0422\u043e\u043b\u043f\u043e\u0439] is a Russian word.\n\n[\u0422\u041e\u041b\u041f\u041e\u0419]: /url\n.\n<p><a href=\"/url\">\u0422\u043e\u043b\u043f\u043e\u0439</a> is a Russian word.</p>\n````````````````````````````````\n\n\nConsecutive internal [whitespace] is treated as one space for\npurposes of determining matching:\n\n```````````````````````````````` example\n[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n.\n<p><a href=\"/url\">Baz</a></p>\n````````````````````````````````\n\n\nNo [whitespace] is allowed between the [link text] and the\n[link label]:\n\n```````````````````````````````` example\n[foo] [bar]\n\n[bar]: /url \"title\"\n.\n<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo]\n[bar]\n\n[bar]: /url \"title\"\n.\n<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>\n````````````````````````````````\n\n\nThis is a departure from John Gruber's original Markdown syntax\ndescription, which explicitly allows whitespace between the link\ntext and the link label.  It brings reference links in line with\n[inline links], which (according to both original Markdown and\nthis spec) cannot have whitespace after the link text.  More\nimportantly, it prevents inadvertent capture of consecutive\n[shortcut reference links]. If whitespace is allowed between the\nlink text and the link label, then in the following we will have\na single reference link, not two shortcut reference links, as\nintended:\n\n``` markdown\n[foo]\n[bar]\n\n[foo]: /url1\n[bar]: /url2\n```\n\n(Note that [shortcut reference links] were introduced by Gruber\nhimself in a beta version of `Markdown.pl`, but never included\nin the official syntax description.  Without shortcut reference\nlinks, it is harmless to allow space between the link text and\nlink label; but once shortcut references are introduced, it is\ntoo dangerous to allow this, as it frequently leads to\nunintended results.)\n\nWhen there are multiple matching [link reference definitions],\nthe first is used:\n\n```````````````````````````````` example\n[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n.\n<p><a href=\"/url1\">bar</a></p>\n````````````````````````````````\n\n\nNote that matching is performed on normalized strings, not parsed\ninline content.  So the following does not match, even though the\nlabels define equivalent inline content:\n\n```````````````````````````````` example\n[bar][foo\\!]\n\n[foo!]: /url\n.\n<p>[bar][foo!]</p>\n````````````````````````````````\n\n\n[Link labels] cannot contain brackets, unless they are\nbackslash-escaped:\n\n```````````````````````````````` example\n[foo][ref[]\n\n[ref[]: /uri\n.\n<p>[foo][ref[]</p>\n<p>[ref[]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo][ref[bar]]\n\n[ref[bar]]: /uri\n.\n<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[[foo]]]\n\n[[[foo]]]: /url\n.\n<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[foo][ref\\[]\n\n[ref\\[]: /uri\n.\n<p><a href=\"/uri\">foo</a></p>\n````````````````````````````````\n\n\nNote that in this example `]` is not backslash-escaped:\n\n```````````````````````````````` example\n[bar\\\\]: /uri\n\n[bar\\\\]\n.\n<p><a href=\"/uri\">bar\\</a></p>\n````````````````````````````````\n\n\nA [link label] must contain at least one [non-whitespace character]:\n\n```````````````````````````````` example\n[]\n\n[]: /uri\n.\n<p>[]</p>\n<p>[]: /uri</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[\n ]\n\n[\n ]: /uri\n.\n<p>[\n]</p>\n<p>[\n]: /uri</p>\n````````````````````````````````\n\n\nA [collapsed reference link](@)\nconsists of a [link label] that [matches] a\n[link reference definition] elsewhere in the\ndocument, followed by the string `[]`.\nThe contents of the first link label are parsed as inlines,\nwhich are used as the link's text.  The link's URI and title are\nprovided by the matching reference link definition.  Thus,\n`[foo][]` is equivalent to `[foo][foo]`.\n\n```````````````````````````````` example\n[foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n[Foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n````````````````````````````````\n\n\n\nAs with full reference links, [whitespace] is not\nallowed between the two sets of brackets:\n\n```````````````````````````````` example\n[foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>\n````````````````````````````````\n\n\nA [shortcut reference link](@)\nconsists of a [link label] that [matches] a\n[link reference definition] elsewhere in the\ndocument and is not followed by `[]` or a link label.\nThe contents of the first link label are parsed as inlines,\nwhich are used as the link's text.  The link's URI and title\nare provided by the matching link reference definition.\nThus, `[foo]` is equivalent to `[foo][]`.\n\n```````````````````````````````` example\n[foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n.\n<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n[[bar [foo]\n\n[foo]: /url\n.\n<p>[[bar <a href=\"/url\">foo</a></p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n[Foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n````````````````````````````````\n\n\nA space after the link text should be preserved:\n\n```````````````````````````````` example\n[foo] bar\n\n[foo]: /url\n.\n<p><a href=\"/url\">foo</a> bar</p>\n````````````````````````````````\n\n\nIf you just want bracketed text, you can backslash-escape the\nopening bracket to avoid links:\n\n```````````````````````````````` example\n\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>[foo]</p>\n````````````````````````````````\n\n\nNote that this is a link, because a link label ends with the first\nfollowing closing bracket:\n\n```````````````````````````````` example\n[foo*]: /url\n\n*[foo*]\n.\n<p>*<a href=\"/url\">foo*</a></p>\n````````````````````````````````\n\n\nFull and compact references take precedence over shortcut\nreferences:\n\n```````````````````````````````` example\n[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo][]\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a></p>\n````````````````````````````````\n\nInline links also take precedence:\n\n```````````````````````````````` example\n[foo]()\n\n[foo]: /url1\n.\n<p><a href=\"\">foo</a></p>\n````````````````````````````````\n\n```````````````````````````````` example\n[foo](not a link)\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a>(not a link)</p>\n````````````````````````````````\n\nIn the following case `[bar][baz]` is parsed as a reference,\n`[foo]` as normal text:\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url\n.\n<p>[foo]<a href=\"/url\">bar</a></p>\n````````````````````````````````\n\n\nHere, though, `[foo][bar]` is parsed as a reference, since\n`[bar]` is defined:\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>\n````````````````````````````````\n\n\nHere `[foo]` is not parsed as a shortcut reference, because it\nis followed by a link label (even though `[bar]` is not defined):\n\n```````````````````````````````` example\n[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n.\n<p>[foo]<a href=\"/url1\">bar</a></p>\n````````````````````````````````\n\n\n\n## Images\n\nSyntax for images is like the syntax for links, with one\ndifference. Instead of [link text], we have an\n[image description](@).  The rules for this are the\nsame as for [link text], except that (a) an\nimage description starts with `![` rather than `[`, and\n(b) an image description may contain links.\nAn image description has inline elements\nas its contents.  When an image is rendered to HTML,\nthis is standardly used as the image's `alt` attribute.\n\n```````````````````````````````` example\n![foo](/url \"title\")\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo ![bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo [bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n````````````````````````````````\n\n\nThough this spec is concerned with parsing, not rendering, it is\nrecommended that in rendering to HTML, only the plain string content\nof the [image description] be used.  Note that in\nthe above example, the alt attribute's value is `foo bar`, not `foo\n[bar](/url)` or `foo <a href=\"/url\">bar</a>`.  Only the plain string\ncontent is rendered, without formatting.\n\n```````````````````````````````` example\n![foo *bar*][]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo](train.jpg)\n.\n<p><img src=\"train.jpg\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nMy ![foo bar](/path/to/train.jpg  \"title\"   )\n.\n<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo](<url>)\n.\n<p><img src=\"url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![](/url)\n.\n<p><img src=\"/url\" alt=\"\" /></p>\n````````````````````````````````\n\n\nReference-style:\n\n```````````````````````````````` example\n![foo][bar]\n\n[bar]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![foo][bar]\n\n[BAR]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n````````````````````````````````\n\n\nCollapsed:\n\n```````````````````````````````` example\n![foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\nThe labels are case-insensitive:\n\n```````````````````````````````` example\n![Foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\nAs with reference links, [whitespace] is not allowed\nbetween the two sets of brackets:\n\n```````````````````````````````` example\n![foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>\n````````````````````````````````\n\n\nShortcut:\n\n```````````````````````````````` example\n![foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n````````````````````````````````\n\n\nNote that link labels cannot contain unescaped brackets:\n\n```````````````````````````````` example\n![[foo]]\n\n[[foo]]: /url \"title\"\n.\n<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>\n````````````````````````````````\n\n\nThe link labels are case-insensitive:\n\n```````````````````````````````` example\n![Foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n````````````````````````````````\n\n\nIf you just want a literal `!` followed by bracketed text, you can\nbackslash-escape the opening `[`:\n\n```````````````````````````````` example\n!\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>![foo]</p>\n````````````````````````````````\n\n\nIf you want a link after a literal `!`, backslash-escape the\n`!`:\n\n```````````````````````````````` example\n\\![foo]\n\n[foo]: /url \"title\"\n.\n<p>!<a href=\"/url\" title=\"title\">foo</a></p>\n````````````````````````````````\n\n\n## Autolinks\n\n[Autolink](@)s are absolute URIs and email addresses inside\n`<` and `>`. They are parsed as links, with the URL or email address\nas the link label.\n\nA [URI autolink](@) consists of `<`, followed by an\n[absolute URI] followed by `>`.  It is parsed as\na link to the URI, with the URI as the link's label.\n\nAn [absolute URI](@),\nfor these purposes, consists of a [scheme] followed by a colon (`:`)\nfollowed by zero or more characters other than ASCII\n[whitespace] and control characters, `<`, and `>`.  If\nthe URI includes these characters, they must be percent-encoded\n(e.g. `%20` for a space).\n\nFor purposes of this spec, a [scheme](@) is any sequence\nof 2--32 characters beginning with an ASCII letter and followed\nby any combination of ASCII letters, digits, or the symbols plus\n(\"+\"), period (\".\"), or hyphen (\"-\").\n\nHere are some valid autolinks:\n\n```````````````````````````````` example\n<http://foo.bar.baz>\n.\n<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://foo.bar.baz/test?q=hello&id=22&boolean>\n.\n<p><a href=\"http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">http://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<irc://foo.bar:2233/baz>\n.\n<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>\n````````````````````````````````\n\n\nUppercase is also fine:\n\n```````````````````````````````` example\n<MAILTO:FOO@BAR.BAZ>\n.\n<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>\n````````````````````````````````\n\n\nNote that many strings that count as [absolute URIs] for\npurposes of this spec are not valid URIs, because their\nschemes are not registered or because of other problems\nwith their syntax:\n\n```````````````````````````````` example\n<a+b+c:d>\n.\n<p><a href=\"a+b+c:d\">a+b+c:d</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<made-up-scheme://foo,bar>\n.\n<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<http://../>\n.\n<p><a href=\"http://../\">http://../</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<localhost:5001/foo>\n.\n<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>\n````````````````````````````````\n\n\nSpaces are not allowed in autolinks:\n\n```````````````````````````````` example\n<http://foo.bar/baz bim>\n.\n<p>&lt;http://foo.bar/baz bim&gt;</p>\n````````````````````````````````\n\n\nBackslash-escapes do not work inside autolinks:\n\n```````````````````````````````` example\n<http://example.com/\\[\\>\n.\n<p><a href=\"http://example.com/%5C%5B%5C\">http://example.com/\\[\\</a></p>\n````````````````````````````````\n\n\nAn [email autolink](@)\nconsists of `<`, followed by an [email address],\nfollowed by `>`.  The link's label is the email address,\nand the URL is `mailto:` followed by the email address.\n\nAn [email address](@),\nfor these purposes, is anything that matches\nthe [non-normative regex from the HTML5\nspec](https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)):\n\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\n    (?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n\nExamples of email autolinks:\n\n```````````````````````````````` example\n<foo@bar.example.com>\n.\n<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<foo+special@Bar.baz-bar0.com>\n.\n<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>\n````````````````````````````````\n\n\nBackslash-escapes do not work inside email autolinks:\n\n```````````````````````````````` example\n<foo\\+@bar.example.com>\n.\n<p>&lt;foo+@bar.example.com&gt;</p>\n````````````````````````````````\n\n\nThese are not autolinks:\n\n```````````````````````````````` example\n<>\n.\n<p>&lt;&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n< http://foo.bar >\n.\n<p>&lt; http://foo.bar &gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<m:abc>\n.\n<p>&lt;m:abc&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<foo.bar.baz>\n.\n<p>&lt;foo.bar.baz&gt;</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nhttp://example.com\n.\n<p>http://example.com</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo@bar.example.com\n.\n<p>foo@bar.example.com</p>\n````````````````````````````````\n\n<div class=\"extension\">\n\n## Autolinks (extension)\n\nGFM enables the `autolink` extension, where autolinks will be recognised in a\ngreater number of conditions.\n\n[Autolink]s can also be constructed without requiring the use of `<` and to `>`\nto delimit them, although they will be recognized under a smaller set of\ncircumstances.  All such recognized autolinks can only come at the beginning of\na line, after whitespace, or any of the delimiting characters `*`, `_`, `~`,\nand `(`.\n\nAn [extended www autolink](@) will be recognized\nwhen the text `www.` is found followed by a [valid domain].\nA [valid domain](@) consists of segments\nof alphanumeric characters, underscores (`_`) and hyphens (`-`)\nseparated by periods (`.`).\nThere must be at least one period,\nand no underscores may be present in the last two segments of the domain.\n\nThe scheme `http` will be inserted automatically:\n\n```````````````````````````````` example autolink\nwww.commonmark.org\n.\n<p><a href=\"http://www.commonmark.org\">www.commonmark.org</a></p>\n````````````````````````````````\n\nAfter a [valid domain], zero or more non-space non-`<` characters may follow:\n\n```````````````````````````````` example autolink\nVisit www.commonmark.org/help for more information.\n.\n<p>Visit <a href=\"http://www.commonmark.org/help\">www.commonmark.org/help</a> for more information.</p>\n````````````````````````````````\n\nWe then apply [extended autolink path validation](@) as follows:\n\nTrailing punctuation (specifically, `?`, `!`, `.`, `,`, `:`, `*`, `_`, and `~`)\nwill not be considered part of the autolink, though they may be included in the\ninterior of the link:\n\n```````````````````````````````` example autolink\nVisit www.commonmark.org.\n\nVisit www.commonmark.org/a.b.\n.\n<p>Visit <a href=\"http://www.commonmark.org\">www.commonmark.org</a>.</p>\n<p>Visit <a href=\"http://www.commonmark.org/a.b\">www.commonmark.org/a.b</a>.</p>\n````````````````````````````````\n\nWhen an autolink ends in `)`, we scan the entire autolink for the total number\nof parentheses.  If there is a greater number of closing parentheses than\nopening ones, we don't consider the unmatched trailing parentheses part of the\nautolink, in order to facilitate including an autolink inside a parenthesis:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=Markup+(business)\n\nwww.google.com/search?q=Markup+(business)))\n\n(www.google.com/search?q=Markup+(business))\n\n(www.google.com/search?q=Markup+(business)\n.\n<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n<p><a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>))</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a>)</p>\n<p>(<a href=\"http://www.google.com/search?q=Markup+(business)\">www.google.com/search?q=Markup+(business)</a></p>\n````````````````````````````````\n\nThis check is only done when the link ends in a closing parentheses `)`, so if\nthe only parentheses are in the interior of the autolink, no special rules are\napplied:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=(business))+ok\n.\n<p><a href=\"http://www.google.com/search?q=(business))+ok\">www.google.com/search?q=(business))+ok</a></p>\n````````````````````````````````\n\nIf an autolink ends in a semicolon (`;`), we check to see if it appears to\nresemble an [entity reference][entity references]; if the preceding text is `&`\nfollowed by one or more alphanumeric characters.  If so, it is excluded from\nthe autolink:\n\n```````````````````````````````` example autolink\nwww.google.com/search?q=commonmark&hl=en\n\nwww.google.com/search?q=commonmark&hl;\n.\n<p><a href=\"http://www.google.com/search?q=commonmark&amp;hl=en\">www.google.com/search?q=commonmark&amp;hl=en</a></p>\n<p><a href=\"http://www.google.com/search?q=commonmark\">www.google.com/search?q=commonmark</a>&amp;hl;</p>\n````````````````````````````````\n\n`<` immediately ends an autolink.\n\n```````````````````````````````` example autolink\nwww.commonmark.org/he<lp\n.\n<p><a href=\"http://www.commonmark.org/he\">www.commonmark.org/he</a>&lt;lp</p>\n````````````````````````````````\n\nAn [extended url autolink](@) will be recognised when one of the schemes\n`http://`, `https://`, or `ftp://`, followed by a [valid domain], then zero or\nmore non-space non-`<` characters according to\n[extended autolink path validation]:\n\n```````````````````````````````` example autolink\nhttp://commonmark.org\n\n(Visit https://encrypted.google.com/search?q=Markup+(business))\n\nAnonymous FTP is available at ftp://foo.bar.baz.\n.\n<p><a href=\"http://commonmark.org\">http://commonmark.org</a></p>\n<p>(Visit <a href=\"https://encrypted.google.com/search?q=Markup+(business)\">https://encrypted.google.com/search?q=Markup+(business)</a>)</p>\n<p>Anonymous FTP is available at <a href=\"ftp://foo.bar.baz\">ftp://foo.bar.baz</a>.</p>\n````````````````````````````````\n\n\nAn [extended email autolink](@) will be recognised when an email address is\nrecognised within any text node.  Email addresses are recognised according to\nthe following rules:\n\n* One ore more characters which are alphanumeric, or `.`, `-`, `_`, or `+`.\n* An `@` symbol.\n* One or more characters which are alphanumeric, or `-` or `_`,\n  separated by periods (`.`).\n  There must be at least one period.\n  The last character must not be one of `-` or `_`.\n\nThe scheme `mailto:` will automatically be added to the generated link:\n\n```````````````````````````````` example autolink\nfoo@bar.baz\n.\n<p><a href=\"mailto:foo@bar.baz\">foo@bar.baz</a></p>\n````````````````````````````````\n\n`+` can occur before the `@`, but not after.\n\n```````````````````````````````` example autolink\nhello@mail+xyz.example isn't valid, but hello+xyz@mail.example is.\n.\n<p>hello@mail+xyz.example isn't valid, but <a href=\"mailto:hello+xyz@mail.example\">hello+xyz@mail.example</a> is.</p>\n````````````````````````````````\n\n`.`, `-`, and `_` can occur on both sides of the `@`, but only `.` may occur at\nthe end of the email address, in which case it will not be considered part of\nthe address:\n\n```````````````````````````````` example autolink\na.b-c_d@a.b\n\na.b-c_d@a.b.\n\na.b-c_d@a.b-\n\na.b-c_d@a.b_\n.\n<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a></p>\n<p><a href=\"mailto:a.b-c_d@a.b\">a.b-c_d@a.b</a>.</p>\n<p>a.b-c_d@a.b-</p>\n<p>a.b-c_d@a.b_</p>\n````````````````````````````````\n\n</div>\n\n## Raw HTML\n\nText between `<` and `>` that looks like an HTML tag is parsed as a\nraw HTML tag and will be rendered in HTML without escaping.\nTag and attribute names are not limited to current HTML tags,\nso custom tags (and even, say, DocBook tags) may be used.\n\nHere is the grammar for tags:\n\nA [tag name](@) consists of an ASCII letter\nfollowed by zero or more ASCII letters, digits, or\nhyphens (`-`).\n\nAn [attribute](@) consists of [whitespace],\nan [attribute name], and an optional\n[attribute value specification].\n\nAn [attribute name](@)\nconsists of an ASCII letter, `_`, or `:`, followed by zero or more ASCII\nletters, digits, `_`, `.`, `:`, or `-`.  (Note:  This is the XML\nspecification restricted to ASCII.  HTML5 is laxer.)\n\nAn [attribute value specification](@)\nconsists of optional [whitespace],\na `=` character, optional [whitespace], and an [attribute\nvalue].\n\nAn [attribute value](@)\nconsists of an [unquoted attribute value],\na [single-quoted attribute value], or a [double-quoted attribute value].\n\nAn [unquoted attribute value](@)\nis a nonempty string of characters not\nincluding [whitespace], `\"`, `'`, `=`, `<`, `>`, or `` ` ``.\n\nA [single-quoted attribute value](@)\nconsists of `'`, zero or more\ncharacters not including `'`, and a final `'`.\n\nA [double-quoted attribute value](@)\nconsists of `\"`, zero or more\ncharacters not including `\"`, and a final `\"`.\n\nAn [open tag](@) consists of a `<` character, a [tag name],\nzero or more [attributes], optional [whitespace], an optional `/`\ncharacter, and a `>` character.\n\nA [closing tag](@) consists of the string `</`, a\n[tag name], optional [whitespace], and the character `>`.\n\nAn [HTML comment](@) consists of `<!-->`, `<!--->`, or  `<!--`, a string of\ncharacters not including the string `-->`, and `-->` (see the\n[HTML spec](https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state)).\n\nA [processing instruction](@)\nconsists of the string `<?`, a string\nof characters not including the string `?>`, and the string\n`?>`.\n\nA [declaration](@) consists of the\nstring `<!`, a name consisting of one or more uppercase ASCII letters,\n[whitespace], a string of characters not including the\ncharacter `>`, and the character `>`.\n\nA [CDATA section](@) consists of\nthe string `<![CDATA[`, a string of characters not including the string\n`]]>`, and the string `]]>`.\n\nAn [HTML tag](@) consists of an [open tag], a [closing tag],\nan [HTML comment], a [processing instruction], a [declaration],\nor a [CDATA section].\n\nHere are some simple open tags:\n\n```````````````````````````````` example\n<a><bab><c2c>\n.\n<p><a><bab><c2c></p>\n````````````````````````````````\n\n\nEmpty elements:\n\n```````````````````````````````` example\n<a/><b2/>\n.\n<p><a/><b2/></p>\n````````````````````````````````\n\n\n[Whitespace] is allowed:\n\n```````````````````````````````` example\n<a  /><b2\ndata=\"foo\" >\n.\n<p><a  /><b2\ndata=\"foo\" ></p>\n````````````````````````````````\n\n\nWith attributes:\n\n```````````````````````````````` example\n<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />\n.\n<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>\n````````````````````````````````\n\n\nCustom tag names can be used:\n\n```````````````````````````````` example\nFoo <responsive-image src=\"foo.jpg\" />\n.\n<p>Foo <responsive-image src=\"foo.jpg\" /></p>\n````````````````````````````````\n\n\nIllegal tag names, not parsed as HTML:\n\n```````````````````````````````` example\n<33> <__>\n.\n<p>&lt;33&gt; &lt;__&gt;</p>\n````````````````````````````````\n\n\nIllegal attribute names:\n\n```````````````````````````````` example\n<a h*#ref=\"hi\">\n.\n<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>\n````````````````````````````````\n\n\nIllegal attribute values:\n\n```````````````````````````````` example\n<a href=\"hi'> <a href=hi'>\n.\n<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>\n````````````````````````````````\n\n\nIllegal [whitespace]:\n\n```````````````````````````````` example\n< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n.\n<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>\n````````````````````````````````\n\n\nMissing [whitespace]:\n\n```````````````````````````````` example\n<a href='bar'title=title>\n.\n<p>&lt;a href='bar'title=title&gt;</p>\n````````````````````````````````\n\n\nClosing tags:\n\n```````````````````````````````` example\n</a></foo >\n.\n<p></a></foo ></p>\n````````````````````````````````\n\n\nIllegal attributes in closing tag:\n\n```````````````````````````````` example\n</a href=\"foo\">\n.\n<p>&lt;/a href=&quot;foo&quot;&gt;</p>\n````````````````````````````````\n\n\nComments:\n\n```````````````````````````````` example\nfoo <!-- this is a --\ncomment - with hyphens -->\n.\n<p>foo <!-- this is a --\ncomment - with hyphens --></p>\n````````````````````````````````\n\n```````````````````````````````` example\nfoo <!--> foo -->\n\nfoo <!---> foo -->\n.\n<p>foo <!--> foo --&gt;</p>\n<p>foo <!---> foo --&gt;</p>\n````````````````````````````````\n\n\nProcessing instructions:\n\n```````````````````````````````` example\nfoo <?php echo $a; ?>\n.\n<p>foo <?php echo $a; ?></p>\n````````````````````````````````\n\n\nDeclarations:\n\n```````````````````````````````` example\nfoo <!ELEMENT br EMPTY>\n.\n<p>foo <!ELEMENT br EMPTY></p>\n````````````````````````````````\n\n\nCDATA sections:\n\n```````````````````````````````` example\nfoo <![CDATA[>&<]]>\n.\n<p>foo <![CDATA[>&<]]></p>\n````````````````````````````````\n\n\nEntity and numeric character references are preserved in HTML\nattributes:\n\n```````````````````````````````` example\nfoo <a href=\"&ouml;\">\n.\n<p>foo <a href=\"&ouml;\"></p>\n````````````````````````````````\n\n\nBackslash escapes do not work in HTML attributes:\n\n```````````````````````````````` example\nfoo <a href=\"\\*\">\n.\n<p>foo <a href=\"\\*\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"\\\"\">\n.\n<p>&lt;a href=&quot;&quot;&quot;&gt;</p>\n````````````````````````````````\n\n\n<div class=\"extension\">\n\n## Disallowed Raw HTML (extension)\n\nGFM enables the `tagfilter` extension, where the following HTML tags will be\nfiltered when rendering HTML output:\n\n* `<title>`\n* `<textarea>`\n* `<style>`\n* `<xmp>`\n* `<iframe>`\n* `<noembed>`\n* `<noframes>`\n* `<script>`\n* `<plaintext>`\n\nFiltering is done by replacing the leading `<` with the entity `&lt;`.  These\ntags are chosen in particular as they change how HTML is interpreted in a way\nunique to them (i.e. nested HTML is interpreted differently), and this is\nusually undesireable in the context of other rendered Markdown content.\n\nAll other HTML tags are left untouched.\n\n```````````````````````````````` example tagfilter\n<strong> <title> <style> <em>\n\n<blockquote>\n  <xmp> is disallowed.  <XMP> is also disallowed.\n</blockquote>\n.\n<p><strong> &lt;title> &lt;style> <em></p>\n<blockquote>\n  &lt;xmp> is disallowed.  &lt;XMP> is also disallowed.\n</blockquote>\n````````````````````````````````\n\n</div>\n\n## Hard line breaks\n\nA line break (not in a code span or HTML tag) that is preceded\nby two or more spaces and does not occur at the end of a block\nis parsed as a [hard line break](@) (rendered\nin HTML as a `<br />` tag):\n\n```````````````````````````````` example\nfoo  \nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nFor a more visible alternative, a backslash before the\n[line ending] may be used instead of two spaces:\n\n```````````````````````````````` example\nfoo\\\nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nMore than two spaces can be used:\n\n```````````````````````````````` example\nfoo       \nbaz\n.\n<p>foo<br />\nbaz</p>\n````````````````````````````````\n\n\nLeading spaces at the beginning of the next line are ignored:\n\n```````````````````````````````` example\nfoo  \n     bar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo\\\n     bar\n.\n<p>foo<br />\nbar</p>\n````````````````````````````````\n\n\nLine breaks can occur inside emphasis, links, and other constructs\nthat allow inline content:\n\n```````````````````````````````` example\n*foo  \nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n*foo\\\nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n````````````````````````````````\n\n\nLine breaks do not occur inside code spans\n\n```````````````````````````````` example\n`code  \nspan`\n.\n<p><code>code   span</code></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n`code\\\nspan`\n.\n<p><code>code\\ span</code></p>\n````````````````````````````````\n\n\nor HTML tags:\n\n```````````````````````````````` example\n<a href=\"foo  \nbar\">\n.\n<p><a href=\"foo  \nbar\"></p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n<a href=\"foo\\\nbar\">\n.\n<p><a href=\"foo\\\nbar\"></p>\n````````````````````````````````\n\n\nHard line breaks are for separating inline content within a block.\nNeither syntax for hard line breaks works at the end of a paragraph or\nother block element:\n\n```````````````````````````````` example\nfoo\\\n.\n<p>foo\\</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nfoo  \n.\n<p>foo</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\n### foo\\\n.\n<h3>foo\\</h3>\n````````````````````````````````\n\n\n```````````````````````````````` example\n### foo  \n.\n<h3>foo</h3>\n````````````````````````````````\n\n\n## Soft line breaks\n\nA regular line break (not in a code span or HTML tag) that is not\npreceded by two or more spaces or a backslash is parsed as a\n[softbreak](@).  (A softbreak may be rendered in HTML either as a\n[line ending] or as a space. The result will be the same in\nbrowsers. In the examples here, a [line ending] will be used.)\n\n```````````````````````````````` example\nfoo\nbaz\n.\n<p>foo\nbaz</p>\n````````````````````````````````\n\n\nSpaces at the end of the line and beginning of the next line are\nremoved:\n\n```````````````````````````````` example\nfoo \n baz\n.\n<p>foo\nbaz</p>\n````````````````````````````````\n\n\nA conforming parser may render a soft line break in HTML either as a\nline break or as a space.\n\nA renderer may also provide an option to render soft line breaks\nas hard line breaks.\n\n## Textual content\n\nAny characters not given an interpretation by the above rules will\nbe parsed as plain textual content.\n\n```````````````````````````````` example\nhello $.;'there\n.\n<p>hello $.;'there</p>\n````````````````````````````````\n\n\n```````````````````````````````` example\nFoo \u03c7\u03c1\u1fc6\u03bd\n.\n<p>Foo \u03c7\u03c1\u1fc6\u03bd</p>\n````````````````````````````````\n\n\nInternal spaces are preserved verbatim:\n\n```````````````````````````````` example\nMultiple     spaces\n.\n<p>Multiple     spaces</p>\n````````````````````````````````\n\n\n<!-- END TESTS -->\n\n# Appendix: A parsing strategy\n\nIn this appendix we describe some features of the parsing strategy\nused in the CommonMark reference implementations.\n\n## Overview\n\nParsing has two phases:\n\n1. In the first phase, lines of input are consumed and the block\nstructure of the document---its division into paragraphs, block quotes,\nlist items, and so on---is constructed.  Text is assigned to these\nblocks but not parsed. Link reference definitions are parsed and a\nmap of links is constructed.\n\n2. In the second phase, the raw text contents of paragraphs and headings\nare parsed into sequences of Markdown inline elements (strings,\ncode spans, links, emphasis, and so on), using the map of link\nreferences constructed in phase 1.\n\nAt each point in processing, the document is represented as a tree of\n**blocks**.  The root of the tree is a `document` block.  The `document`\nmay have any number of other blocks as **children**.  These children\nmay, in turn, have other blocks as children.  The last child of a block\nis normally considered **open**, meaning that subsequent lines of input\ncan alter its contents.  (Blocks that are not open are **closed**.)\nHere, for example, is a possible document tree, with the open blocks\nmarked by arrows:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n         list_item\n           paragraph\n             \"Qui *quodsi iracundia*\"\n      -> list_item\n        -> paragraph\n             \"aliquando id\"\n```\n\n## Phase 1: block structure\n\nEach line that is processed has an effect on this tree.  The line is\nanalyzed and, depending on its contents, the document may be altered\nin one or more of the following ways:\n\n1. One or more open blocks may be closed.\n2. One or more new blocks may be created as children of the\n   last open block.\n3. Text may be added to the last (deepest) open block remaining\n   on the tree.\n\nOnce a line has been incorporated into the tree in this way,\nit can be discarded, so input can be read in a stream.\n\nFor each line, we follow this procedure:\n\n1. First we iterate through the open blocks, starting with the\nroot document, and descending through last children down to the last\nopen block.  Each block imposes a condition that the line must satisfy\nif the block is to remain open.  For example, a block quote requires a\n`>` character.  A paragraph requires a non-blank line.\nIn this phase we may match all or just some of the open\nblocks.  But we cannot close unmatched blocks yet, because we may have a\n[lazy continuation line].\n\n2.  Next, after consuming the continuation markers for existing\nblocks, we look for new block starts (e.g. `>` for a block quote).\nIf we encounter a new block start, we close any blocks unmatched\nin step 1 before creating the new block as a child of the last\nmatched block.\n\n3.  Finally, we look at the remainder of the line (after block\nmarkers like `>`, list markers, and indentation have been consumed).\nThis is text that can be incorporated into the last open\nblock (a paragraph, code block, heading, or raw HTML).\n\nSetext headings are formed when we see a line of a paragraph\nthat is a [setext heading underline].\n\nReference link definitions are detected when a paragraph is closed;\nthe accumulated text lines are parsed to see if they begin with\none or more reference link definitions.  Any remainder becomes a\nnormal paragraph.\n\nWe can see how this works by considering how the tree above is\ngenerated by four lines of Markdown:\n\n``` markdown\n> Lorem ipsum dolor\nsit amet.\n> - Qui *quodsi iracundia*\n> - aliquando id\n```\n\nAt the outset, our document model is just\n\n``` tree\n-> document\n```\n\nThe first line of our text,\n\n``` markdown\n> Lorem ipsum dolor\n```\n\ncauses a `block_quote` block to be created as a child of our\nopen `document` block, and a `paragraph` block as a child of\nthe `block_quote`.  Then the text is added to the last open\nblock, the `paragraph`:\n\n``` tree\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\"\n```\n\nThe next line,\n\n``` markdown\nsit amet.\n```\n\nis a \"lazy continuation\" of the open `paragraph`, so it gets added\nto the paragraph's text:\n\n``` tree\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n```\n\nThe third line,\n\n``` markdown\n> - Qui *quodsi iracundia*\n```\n\ncauses the `paragraph` block to be closed, and a new `list` block\nopened as a child of the `block_quote`.  A `list_item` is also\nadded as a child of the `list`, and a `paragraph` as a child of\nthe `list_item`.  The text is then added to the new `paragraph`:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n      -> list_item\n        -> paragraph\n             \"Qui *quodsi iracundia*\"\n```\n\nThe fourth line,\n\n``` markdown\n> - aliquando id\n```\n\ncauses the `list_item` (and its child the `paragraph`) to be closed,\nand a new `list_item` opened up as child of the `list`.  A `paragraph`\nis added as a child of the new `list_item`, to contain the text.\nWe thus obtain the final tree:\n\n``` tree\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n         list_item\n           paragraph\n             \"Qui *quodsi iracundia*\"\n      -> list_item\n        -> paragraph\n             \"aliquando id\"\n```\n\n## Phase 2: inline structure\n\nOnce all of the input has been parsed, all open blocks are closed.\n\nWe then \"walk the tree,\" visiting every node, and parse raw\nstring contents of paragraphs and headings as inlines.  At this\npoint we have seen all the link reference definitions, so we can\nresolve reference links as we go.\n\n``` tree\ndocument\n  block_quote\n    paragraph\n      str \"Lorem ipsum dolor\"\n      softbreak\n      str \"sit amet.\"\n    list (type=bullet tight=true bullet_char=-)\n      list_item\n        paragraph\n          str \"Qui \"\n          emph\n            str \"quodsi iracundia\"\n      list_item\n        paragraph\n          str \"aliquando id\"\n```\n\nNotice how the [line ending] in the first paragraph has\nbeen parsed as a `softbreak`, and the asterisks in the first list item\nhave become an `emph`.\n\n### An algorithm for parsing nested emphasis and links\n\nBy far the trickiest part of inline parsing is handling emphasis,\nstrong emphasis, links, and images.  This is done using the following\nalgorithm.\n\nWhen we're parsing inlines and we hit either\n\n- a run of `*` or `_` characters, or\n- a `[` or `![`\n\nwe insert a text node with these symbols as its literal content, and we\nadd a pointer to this text node to the [delimiter stack](@).\n\nThe [delimiter stack] is a doubly linked list.  Each\nelement contains a pointer to a text node, plus information about\n\n- the type of delimiter (`[`, `![`, `*`, `_`)\n- the number of delimiters,\n- whether the delimiter is \"active\" (all are active to start), and\n- whether the delimiter is a potential opener, a potential closer,\n  or both (which depends on what sort of characters precede\n  and follow the delimiters).\n\nWhen we hit a `]` character, we call the *look for link or image*\nprocedure (see below).\n\nWhen we hit the end of the input, we call the *process emphasis*\nprocedure (see below), with `stack_bottom` = NULL.\n\n#### *look for link or image*\n\nStarting at the top of the delimiter stack, we look backwards\nthrough the stack for an opening `[` or `![` delimiter.\n\n- If we don't find one, we return a literal text node `]`.\n\n- If we do find one, but it's not *active*, we remove the inactive\n  delimiter from the stack, and return a literal text node `]`.\n\n- If we find one and it's active, then we parse ahead to see if\n  we have an inline link/image, reference link/image, compact reference\n  link/image, or shortcut reference link/image.\n\n  + If we don't, then we remove the opening delimiter from the\n    delimiter stack and return a literal text node `]`.\n\n  + If we do, then\n\n    * We return a link or image node whose children are the inlines\n      after the text node pointed to by the opening delimiter.\n\n    * We run *process emphasis* on these inlines, with the `[` opener\n      as `stack_bottom`.\n\n    * We remove the opening delimiter.\n\n    * If we have a link (and not an image), we also set all\n      `[` delimiters before the opening delimiter to *inactive*.  (This\n      will prevent us from getting links within links.)\n\n#### *process emphasis*\n\nParameter `stack_bottom` sets a lower bound to how far we\ndescend in the [delimiter stack].  If it is NULL, we can\ngo all the way to the bottom.  Otherwise, we stop before\nvisiting `stack_bottom`.\n\nLet `current_position` point to the element on the [delimiter stack]\njust above `stack_bottom` (or the first element if `stack_bottom`\nis NULL).\n\nWe keep track of the `openers_bottom` for each delimiter\ntype (`*`, `_`) and each length of the closing delimiter run\n(modulo 3).  Initialize this to `stack_bottom`.\n\nThen we repeat the following until we run out of potential\nclosers:\n\n- Move `current_position` forward in the delimiter stack (if needed)\n  until we find the first potential closer with delimiter `*` or `_`.\n  (This will be the potential closer closest\n  to the beginning of the input -- the first one in parse order.)\n\n- Now, look back in the stack (staying above `stack_bottom` and\n  the `openers_bottom` for this delimiter type) for the\n  first matching potential opener (\"matching\" means same delimiter).\n\n- If one is found:\n\n  + Figure out whether we have emphasis or strong emphasis:\n    if both closer and opener spans have length >= 2, we have\n    strong, otherwise regular.\n\n  + Insert an emph or strong emph node accordingly, after\n    the text node corresponding to the opener.\n\n  + Remove any delimiters between the opener and closer from\n    the delimiter stack.\n\n  + Remove 1 (for regular emph) or 2 (for strong emph) delimiters\n    from the opening and closing text nodes.  If they become empty\n    as a result, remove them and remove the corresponding element\n    of the delimiter stack.  If the closing node is removed, reset\n    `current_position` to the next element in the stack.\n\n- If none is found:\n\n  + Set `openers_bottom` to the element before `current_position`.\n    (We know that there are no openers for this kind of closer up to and\n    including this point, so this puts a lower bound on future searches.)\n\n  + If the closer at `current_position` is not a potential opener,\n    remove it from the delimiter stack (since we know it can't\n    be a closer either).\n\n  + Advance `current_position` to the next element in the stack.\n\nAfter we're done, we remove all delimiters above `stack_bottom` from the\ndelimiter stack.\n"], "filenames": ["src/commonmark.c", "src/html.c", "src/latex.c", "src/man.c", "src/node.h", "src/plaintext.c", "src/render.c", "src/render.h", "src/xml.c", "test/spec.txt"], "buggy_code_start_loc": [156, 367, 388, 77, 85, 19, 34, 25, 13, 6929], "buggy_code_end_loc": [412, 371, 392, 232, 85, 89, 184, 25, 30, 7605], "fixing_code_start_loc": [155, 367, 388, 76, 86, 18, 34, 26, 14, 6929], "fixing_code_end_loc": [398, 373, 394, 229, 94, 72, 184, 27, 31, 7605], "type": "CWE-400", "message": "cmark-gfm is GitHub's fork of cmark, a CommonMark parsing and rendering library and program in C. A polynomial time complexity issue in cmark-gfm may lead to unbounded resource exhaustion and subsequent denial of service. This CVE covers quadratic complexity issues when parsing text which leads with either large numbers of `_` characters. This issue has been addressed in version 0.29.0.gfm.10. Users are advised to upgrade. Users unable to upgrade should validate that their input comes from trusted sources. ### Impact A polynomial time complexity issue in cmark-gfm may lead to unbounded resource exhaustion and subsequent denial of service. ### Proof of concept ``` $ ~/cmark-gfm$ python3 -c 'pad = \"_\" * 100000; print(pad + \".\" + pad, end=\"\")' | time ./build/src/cmark-gfm --to plaintext ``` Increasing the number 10000 in the above commands causes the running time to increase quadratically. ### Patches This vulnerability have been patched in 0.29.0.gfm.10. ### Note on cmark and cmark-gfm XXX: TBD [cmark-gfm](https://github.com/github/cmark-gfm) is a fork of [cmark](https://github.com/commonmark/cmark) that adds the GitHub Flavored Markdown extensions. The two codebases have diverged over time, but share a common core. These bugs affect both `cmark` and `cmark-gfm`. ### Credit We would like to thank @gravypod for reporting this vulnerability. ### References https://en.wikipedia.org/wiki/Time_complexity ### For more information If you have any questions or comments about this advisory: * Open an issue in [github/cmark-gfm](https://github.com/github/cmark-gfm)", "other": {"cve": {"id": "CVE-2023-26485", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-31T23:15:07.250", "lastModified": "2023-04-11T06:25:34.807", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "cmark-gfm is GitHub's fork of cmark, a CommonMark parsing and rendering library and program in C. A polynomial time complexity issue in cmark-gfm may lead to unbounded resource exhaustion and subsequent denial of service. This CVE covers quadratic complexity issues when parsing text which leads with either large numbers of `_` characters. This issue has been addressed in version 0.29.0.gfm.10. Users are advised to upgrade. Users unable to upgrade should validate that their input comes from trusted sources. ### Impact A polynomial time complexity issue in cmark-gfm may lead to unbounded resource exhaustion and subsequent denial of service. ### Proof of concept ``` $ ~/cmark-gfm$ python3 -c 'pad = \"_\" * 100000; print(pad + \".\" + pad, end=\"\")' | time ./build/src/cmark-gfm --to plaintext ``` Increasing the number 10000 in the above commands causes the running time to increase quadratically. ### Patches This vulnerability have been patched in 0.29.0.gfm.10. ### Note on cmark and cmark-gfm XXX: TBD [cmark-gfm](https://github.com/github/cmark-gfm) is a fork of [cmark](https://github.com/commonmark/cmark) that adds the GitHub Flavored Markdown extensions. The two codebases have diverged over time, but share a common core. These bugs affect both `cmark` and `cmark-gfm`. ### Credit We would like to thank @gravypod for reporting this vulnerability. ### References https://en.wikipedia.org/wiki/Time_complexity ### For more information If you have any questions or comments about this advisory: * Open an issue in [github/cmark-gfm](https://github.com/github/cmark-gfm)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}, {"lang": "en", "value": "CWE-407"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:github:cmark-gfm:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.29.0.gfm.10", "matchCriteriaId": "E3CE1A70-0583-4858-9DA3-7A4E9717FE3A"}]}]}], "references": [{"url": "https://github.com/github/cmark-gfm/commit/07a66c9bc341f902878e37d7da8647d6ef150987", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/github/cmark-gfm/security/advisories/GHSA-r8vr-c48j-fcc5", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/github/cmark-gfm/commit/07a66c9bc341f902878e37d7da8647d6ef150987"}}