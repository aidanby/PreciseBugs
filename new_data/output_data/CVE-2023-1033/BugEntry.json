{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Ajax;\n\nuse Exception;\nuse DateTime;\nuse Froxlor\\Config\\ConfigDisplay;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Http\\HttpClient;\nuse Froxlor\\Install\\Update;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\nclass Ajax\n{\n\tprotected string $action;\n\tprotected string $theme;\n\tprotected array $userinfo;\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->action = Request::any('action');\n\t\t$this->theme = Request::any('theme', 'Froxlor');\n\n\t\tUI::sendHeaders();\n\t\tUI::sendSslHeaders();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function handle()\n\t{\n\t\t$this->userinfo = $this->getValidatedSession();\n\n\t\tswitch ($this->action) {\n\t\t\tcase 'newsfeed':\n\t\t\t\treturn $this->getNewsfeed();\n\t\t\tcase 'updatecheck':\n\t\t\t\treturn $this->getUpdateCheck();\n\t\t\tcase 'searchglobal':\n\t\t\t\treturn $this->searchGlobal();\n\t\t\tcase 'updatetablelisting':\n\t\t\t\treturn $this->updateTablelisting();\n\t\t\tcase 'resettablelisting':\n\t\t\t\treturn $this->resetTablelisting();\n\t\t\tcase 'editapikey':\n\t\t\t\treturn $this->editApiKey();\n\t\t\tcase 'getConfigDetails':\n\t\t\t\treturn $this->getConfigDetails();\n\t\t\tcase 'getConfigJsonExport':\n\t\t\t\treturn $this->getConfigJsonExport();\n\t\t\tcase 'loadLanguageString':\n\t\t\t\treturn $this->loadLanguageString();\n\t\t\tdefault:\n\t\t\t\treturn $this->errorResponse('Action not found!');\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getValidatedSession(): array\n\t{\n\t\tif (CurrentUser::hasSession() == false) {\n\t\t\tthrow new Exception(\"No valid session\");\n\t\t}\n\t\treturn CurrentUser::getData();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getNewsfeed()\n\t{\n\t\tUI::initTwig();\n\n\t\t$feed = \"https://inside.froxlor.org/news/\";\n\n\t\t// Set custom feed if provided\n\t\t$role = Request::get('role');\n\t\tif ($role == \"customer\") {\n\t\t\t$custom_feed = Settings::Get(\"customer.news_feed_url\");\n\t\t\tif (!empty(trim($custom_feed))) {\n\t\t\t\t$feed = $custom_feed;\n\t\t\t}\n\t\t}\n\n\t\t// Check for simplexml_load_file\n\t\tif (!function_exists(\"simplexml_load_file\")) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-simplexml extension\",\n\t\t\t\t\"Please install the php-simplexml extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t// Check for curl_version\n\t\tif (!function_exists('curl_version')) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-curl extension\",\n\t\t\t\t\"Please install the php-curl extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t$output = HttpClient::urlGet($feed);\n\t\t$news = simplexml_load_string(trim($output));\n\n\t\tif ($news === false) {\n\t\t\t$err = [];\n\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t$err[] = $error->message;\n\t\t\t}\n\t\t\treturn $this->errorResponse(\n\t\t\t\t$err\n\t\t\t);\n\t\t}\n\n\t\t// Handle items\n\t\tif ($news) {\n\t\t\t$items = null;\n\n\t\t\tfor ($i = 0; $i < 3; $i++) {\n\t\t\t\t$item = $news->channel->item[$i];\n\n\t\t\t\t$title = (string)$item->title;\n\t\t\t\t$link = (string)$item->link;\n\t\t\t\t$date = date(\"d.m.Y\", strtotime($item->pubDate));\n\t\t\t\t$content = preg_replace(\"/[\\r\\n]+/\", \" \", strip_tags($item->description));\n\t\t\t\t$content = substr($content, 0, 150) . \"...\";\n\n\t\t\t\t$items .= UI::twig()->render(UI::validateThemeTemplate('/user/newsfeeditem.html.twig', $this->theme), [\n\t\t\t\t\t'link' => $link,\n\t\t\t\t\t'title' => $title,\n\t\t\t\t\t'date' => $date,\n\t\t\t\t\t'content' => $content\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\treturn $this->jsonResponse($items);\n\t\t} else {\n\t\t\treturn $this->errorResponse('No Newsfeeds available at the moment.');\n\t\t}\n\t}\n\n\tpublic function errorResponse($message, int $response_code = 500)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonErrorResponse($message, $response_code);\n\t}\n\n\tpublic function jsonResponse($value, int $response_code = 200)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonResponse($value, $response_code);\n\t}\n\n\tprivate function getUpdateCheck()\n\t{\n\t\tUI::initTwig();\n\n\t\ttry {\n\t\t\t$json_result = \\Froxlor\\Api\\Commands\\Froxlor::getLocal($this->userinfo)->checkUpdate();\n\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t$result['full_version'] = Froxlor::getFullVersion();\n\t\t\t$result['dbversion'] = Froxlor::DBVERSION;\n\t\t\t$uc_data = Update::getUpdateCheckData();\n\t\t\t$result['last_update_check'] = $uc_data['ts'];\n\t\t\t$result['channel'] = Settings::Get('system.update_channel');\n\n\t\t\t$result_rendered = UI::twig()->render(UI::validateThemeTemplate('/misc/version_top.html.twig', $this->theme), $result);\n\t\t\treturn $this->jsonResponse($result_rendered);\n\t\t} catch (Exception $e) {\n\t\t\t// don't display anything if just not allowed due to permissions\n\t\t\tif ($e->getCode() != 403) {\n\t\t\t\treturn $this->errorResponse($e->getMessage(), $e->getCode());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * search globally in various resources\n\t */\n\tprivate function searchGlobal()\n\t{\n\t\t$searchtext = Request::any('searchtext');\n\n\t\t$result = [];\n\n\t\t// settings\n\t\t$result_settings = [];\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$result_settings = GlobalSearch::searchSettings($searchtext, $this->userinfo);\n\t\t}\n\n\t\t// all searchable entities\n\t\t$result_entities = GlobalSearch::searchGlobal($searchtext, $this->userinfo);\n\n\t\t$result = array_merge($result_settings, $result_entities);\n\n\t\treturn $this->jsonResponse($result);\n\t}\n\n\tprivate function updateTablelisting()\n\t{\n\t\t$columns = [];\n\t\tforeach ((Request::any('columns') ?? []) as $value) {\n\t\t\t$columns[] = $value;\n\t\t}\n\t\tif (!empty($columns)) {\n\t\t\tListing::storeColumnListingForUser([Request::any('listing') => $columns]);\n\t\t\treturn $this->jsonResponse($columns);\n\t\t}\n\t\treturn $this->errorResponse('At least one column must be selected', 406);\n\t}\n\n\tprivate function resetTablelisting()\n\t{\n\t\tListing::deleteColumnListingForUser([Request::any('listing') => []]);\n\t\treturn $this->jsonResponse([]);\n\t}\n\n\tprivate function editApiKey()\n\t{\n\t\t$keyid = Request::post('id', 0);\n\t\t$allowed_from = Request::post('allowed_from', \"\");\n\t\t$valid_until = Request::post('valid_until', \"\");\n\n\t\tif (empty($keyid)) {\n\t\t\treturn $this->errorResponse('Invalid call', 406);\n\t\t}\n\n\t\t// validate allowed_from\n\t\tif (!empty($allowed_from)) {\n\t\t\t$ip_list = array_map('trim', explode(\",\", $allowed_from));\n\t\t\t$_check_list = $ip_list;\n\t\t\tforeach ($_check_list as $idx => $ip) {\n\t\t\t\tif (Validate::validate_ip2($ip, true, 'invalidip', true, true, true) == false) {\n\t\t\t\t\treturn $this->errorResponse('Invalid ip address', 406);\n\t\t\t\t}\n\t\t\t\t// check for cidr\n\t\t\t\tif (strpos($ip, '/') !== false) {\n\t\t\t\t\t$ipparts = explode(\"/\", $ip);\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ipparts[0]));\n\t\t\t\t\t// re-add cidr\n\t\t\t\t\t$ip .= '/' . $ipparts[1];\n\t\t\t\t} else {\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ip));\n\t\t\t\t}\n\t\t\t\t$ip_list[$idx] = $ip;\n\t\t\t}\n\t\t\t$allowed_from = implode(\",\", array_unique($ip_list));\n\t\t}\n\n\t\tif (!empty($valid_until)) {\n\t\t\t$valid_until_db = DateTime::createFromFormat('Y-m-d\\TH:i', $valid_until)->format('U');\n\t\t} else {\n\t\t\t$valid_until_db = -1;\n\t\t}\n\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`valid_until` = :vu, `allowed_from` = :af\n\t\t\tWHERE `id` = :keyid AND `adminid` = :aid AND `customerid` = :cid\n\t\t\");\n\t\tif ((int)$this->userinfo['adminsession'] == 1) {\n\t\t\t$cid = 0;\n\t\t} else {\n\t\t\t$cid = $this->userinfo['customerid'];\n\t\t}\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'keyid' => $keyid,\n\t\t\t'af' => $allowed_from,\n\t\t\t'vu' => $valid_until_db,\n\t\t\t'aid' => $this->userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\treturn $this->jsonResponse(['allowed_from' => $allowed_from, 'valid_until' => $valid_until]);\n\t}\n\n\t/**\n\t * return parsed commands/files of configuration templates\n\t */\n\tprivate function getConfigDetails()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$distribution = Request::post('distro', \"\");\n\t\t\t$section = Request::post('section', \"\");\n\t\t\t$daemon = Request::post('daemon', \"\");\n\n\t\t\t// validate distribution config-xml exists\n\t\t\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\t\t\tif (!file_exists($config_dir . \"/\" . $distribution . \".xml\")) {\n\t\t\t\treturn $this->errorResponse(\"Unknown distribution. The configuration could not be found.\");\n\t\t\t}\n\t\t\t// read in all configurations\n\t\t\t$configfiles = new ConfigParser($config_dir . \"/\" . $distribution . \".xml\");\n\t\t\t// get the services\n\t\t\t$services = $configfiles->getServices();\n\t\t\t// validate selected service exists for this distribution\n\t\t\tif (!isset($services[$section])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown category for selected distribution\");\n\t\t\t}\n\t\t\t// get the daemons\n\t\t\t$daemons = $services[$section]->getDaemons();\n\t\t\t// validate selected daemon exists for this section\n\t\t\tif (!isset($daemons[$daemon])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown service for selected category\");\n\t\t\t}\n\t\t\t// finally the config-steps\n\t\t\t$confarr = $daemons[$daemon]->getConfig();\n\t\t\t// get parsed content\n\t\t\tUI::initTwig();\n\t\t\t$content = ConfigDisplay::fromConfigArr($confarr, $configfiles->distributionEditor, $this->theme);\n\n\t\t\treturn $this->jsonResponse([\n\t\t\t\t'title' => $configfiles->getCompleteDistroName() . '&nbsp;&raquo;&nbsp' . $services[$section]->title . '&nbsp;&raquo;&nbsp' . $daemons[$daemon]->title,\n\t\t\t\t'content' => $content\n\t\t\t]);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * download JSON export of config-selection\n\t */\n\tprivate function getConfigJsonExport()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$params = $_GET;\n\t\t\tunset($params['action']);\n\t\t\tunset($params['finish']);\n\t\t\tunset($params['csrf_token']);\n\t\t\theader('Content-disposition: attachment; filename=froxlor-config-' . time() . '.json');\n\t\t\treturn $this->jsonResponse($params);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * loads a given language string by its identifier\n\t */\n\tprivate function loadLanguageString()\n\t{\n\t\t$langid = Request::post('langid', \"\");\n\t\tif (preg_match('/^([a-zA-Z\\.]+)$/', $langid)) {\n\t\t\treturn $this->jsonResponse(lng($langid));\n\t\t}\n\t\treturn $this->errorResponse('Invalid identifier: ' . $langid, 406);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\UI;\n\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\UI\\Panel\\UI;\nuse InvalidArgumentException;\n\nclass Listing\n{\n\tpublic static function format(Collection $collection, array $tabellisting, string $id, array $listing_search_additional_param = []): array\n\t{\n\t\t$tabellisting = $tabellisting[$id];\n\t\t$collection_data = $collection->get();\n\n\t\treturn [\n\t\t\t'id' => $id,\n\t\t\t'title' => $tabellisting['title'],\n\t\t\t'description' => $tabellisting['description'] ?? null,\n\t\t\t'icon' => $tabellisting['icon'] ?? null,\n\t\t\t'table' => [\n\t\t\t\t'th' => self::generateTableHeadings($tabellisting),\n\t\t\t\t'tr' => self::generateTableRows($collection_data['data']['list'], $tabellisting),\n\t\t\t],\n\t\t\t'pagination' => $collection_data['pagination'],\n\t\t\t'empty_msg' => $tabellisting['empty_msg'] ?? null,\n\t\t\t'total_entries' => ($collection->getPagination() instanceof Pagination) ? $collection->getPagination()->getEntries() : 0,\n\t\t\t'is_search' => $collection->getPagination() instanceof Pagination && $collection->getPagination()->isSearchResult(),\n\t\t\t'self_overview' => $tabellisting['self_overview'] ?? [],\n\t\t\t'available_columns' => self::getAvailableColumnsForListing($tabellisting),\n\t\t\t'no_search' => $tabellisting['no_search'] ?? false,\n\t\t\t'listing_search_additional_param' => $listing_search_additional_param,\n\t\t];\n\t}\n\n\tpublic static function formatFromArray(array $collection, array $tabellisting, string $id): array\n\t{\n\t\treturn [\n\t\t\t'id' => $id,\n\t\t\t'title' => $tabellisting['title'],\n\t\t\t'description' => $tabellisting['description'] ?? null,\n\t\t\t'icon' => $tabellisting['icon'] ?? null,\n\t\t\t'table' => [\n\t\t\t\t'th' => self::generateTableHeadings($tabellisting),\n\t\t\t\t'tr' => self::generateTableRows($collection['data'], $tabellisting),\n\t\t\t],\n\t\t\t'pagination' => $collection['pagination'],\n\t\t\t'empty_msg' => $tabellisting['empty_msg'] ?? null,\n\t\t\t'self_overview' => $tabellisting['self_overview'] ?? [],\n\t\t\t'available_columns' => self::getAvailableColumnsForListing($tabellisting),\n\t\t\t'no_search' => $tabellisting['no_search'] ?? false,\n\t\t];\n\t}\n\n\tprivate static function generateTableHeadings(array $tabellisting): array\n\t{\n\t\t$heading = [];\n\n\t\t// Table headings for columns\n\t\tforeach ($tabellisting['visible_columns'] as $visible_column) {\n\t\t\tif (isset($tabellisting['columns'][$visible_column]['visible']) && !$tabellisting['columns'][$visible_column]['visible']) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$heading[$visible_column] = [\n\t\t\t\t'text' => $tabellisting['columns'][$visible_column]['label'],\n\t\t\t\t'class' => $tabellisting['columns'][$visible_column]['class'] ?? null,\n\t\t\t];\n\t\t}\n\n\t\t// Table headings for actions\n\t\tif (isset($tabellisting['actions'])) {\n\t\t\t$heading['actions'] = [\n\t\t\t\t'text' => lng('panel.options'),\n\t\t\t\t'class' => 'text-end',\n\t\t\t];\n\t\t}\n\n\t\treturn $heading;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate static function generateTableRows(array $list, array $tabellisting): array\n\t{\n\t\t$rows = [];\n\n\t\t// Create new row from item\n\t\tforeach ($list as $row => $fields) {\n\t\t\t// Generate columns from item\n\t\t\tforeach ($tabellisting['visible_columns'] as $col => $visible_column) {\n\t\t\t\t// Continue if column is not visible\n\t\t\t\tif (isset($tabellisting['columns'][$visible_column]['visible']) && !$tabellisting['columns'][$visible_column]['visible']) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Get data from filed if it is defined\n\t\t\t\t$field = $tabellisting['columns'][$visible_column]['field'] ?? null;\n\t\t\t\t$data = $field ? self::getMultiArrayFromString($fields, $field) : null;\n\n\t\t\t\t// Call user function for given column if defined or return data from field, otherwise throw exception\n\t\t\t\t$callback = $tabellisting['columns'][$visible_column]['callback'] ?? null;\n\t\t\t\tif ($callback) {\n\t\t\t\t\t$rows[$row]['td'][$col]['data'] = call_user_func($callback, ['data' => $data, 'fields' => $fields]);\n\t\t\t\t} elseif ($field) {\n\t\t\t\t\t$rows[$row]['td'][$col]['data'] = $data;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidArgumentException('The visible column \"' . $visible_column . '\" has neither a \"callback\" nor a \"field\" set.');\n\t\t\t\t}\n\n\t\t\t\t// Set class for table-row if defined\n\t\t\t\t$rows[$row]['td'][$col]['class'] = $tabellisting['columns'][$visible_column]['class'] ?? null;\n\t\t\t}\n\n\t\t\t// Set row classes from format_callback\n\t\t\tif (isset($tabellisting['format_callback'])) {\n\t\t\t\t$class = [];\n\t\t\t\tforeach ($tabellisting['format_callback'] as $format_callback) {\n\t\t\t\t\t$class[] = call_user_func($format_callback, ['fields' => $fields]);\n\t\t\t\t}\n\t\t\t\t$rows[$row]['class'] = implode(' ', $class);\n\t\t\t}\n\n\t\t\t// Set all actions for row\n\t\t\tif (isset($tabellisting['actions'])) {\n\t\t\t\t$actions = self::setLinks($tabellisting['actions'], $fields);\n\n\t\t\t\t$rows[$row]['td'][] = [\n\t\t\t\t\t'class' => 'text-end',\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t'macro' => 'actions',\n\t\t\t\t\t\t'data' => $actions\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\treturn $rows;\n\t}\n\n\tpublic static function getMultiArrayFromString(array $arr, ?string $str)\n\t{\n\t\tforeach (explode('.', $str) as $key) {\n\t\t\tif (!array_key_exists($key, $arr)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t$arr = $arr[$key];\n\t\t}\n\n\t\treturn $arr;\n\t}\n\n\tprivate static function setLinks(array $actions, array $item): array\n\t{\n\t\t$linker = UI::getLinker();\n\n\t\t// Check each action for a href\n\t\tforeach ($actions as $key => $action) {\n\n\t\t\t// complete link built via callback\n\t\t\tif (isset($action['callback']) && !empty($action['callback'])) {\n\t\t\t\t$action = call_user_func($action['callback'], ['fields' => $item]);\n\t\t\t\t$actions[$key] = $action;\n\t\t\t}\n\n\t\t\t// Call user function if visible is an array\n\t\t\tif (isset($action['visible']) && is_array($action['visible'])) {\n\t\t\t\t$actions[$key]['visible'] = call_user_func($action['visible'], ['fields' => $item]);\n\t\t\t}\n\n\t\t\t// Set link if href is an array\n\t\t\tif (isset($action['href']) && is_array($action['href'])) {\n\t\t\t\t// Search for \"columns\" in our href array\n\t\t\t\tforeach ($action['href'] as $href_key => $href_value) {\n\t\t\t\t\t$length = strlen(':');\n\t\t\t\t\tif (substr($href_value, 0, $length) === ':') {\n\t\t\t\t\t\t$column = ltrim($href_value, ':');\n\t\t\t\t\t\t$action['href'][$href_key] = $item[$column];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set actual link from linker\n\t\t\t\t$actions[$key]['href'] = $linker->getLink($action['href']);\n\t\t\t}\n\n\t\t\t// modal trigger - always require a valid callback\n\t\t\tif (isset($action['modal']) && !empty($action['modal'])) {\n\t\t\t\t$actions[$key]['modal'] = call_user_func($action['modal'], ['fields' => $item]);\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\tprivate static function getAvailableColumnsForListing(array $tabellisting): array\n\t{\n\t\t$result = [];\n\t\tif (isset($tabellisting['columns'])) {\n\t\t\tforeach ($tabellisting['columns'] as $column => $coldata) {\n\t\t\t\tif (isset($coldata['visible']) && !$coldata['visible']) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$result[$column] = [\n\t\t\t\t\t'label' => $coldata['label'],\n\t\t\t\t\t'checked' => in_array($column, $tabellisting['visible_columns']),\n\t\t\t\t\t'searchable' => $coldata['searchable'] ?? true,\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * store column listing selection of user to database\n\t * the selection array should look like this:\n\t * [\n\t *     'section_name' => [\n\t *         'column_name',\n\t *         'column_name',\n\t *         'column_name'\n\t *     ]\n\t * ]\n\t *\n\t * @param array $tabellisting\n\t * @return bool\n\t */\n\tpublic static function storeColumnListingForUser(array $tabellisting): bool\n\t{\n\t\t$section = array_key_first($tabellisting);\n\t\tif (empty($section) || !is_array($tabellisting[$section]) || empty($tabellisting[$section])) {\n\t\t\tthrow new InvalidArgumentException(\"Invalid selection array for \" . __METHOD__);\n\t\t}\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t// delete possible existing entry\n\t\tself::deleteColumnListingForUser($tabellisting);\n\t\t// add new entry\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_USERCOLUMNS . \"` SET\n\t\t\t`\" . $userid . \"` = :uid,\n\t\t\t`section` = :section,\n\t\t\t`columns` = :cols\n\t\t\");\n\t\tDatabase::pexecute($ins_stmt, [\n\t\t\t'uid' => CurrentUser::getField($userid),\n\t\t\t'section' => $section,\n\t\t\t'cols' => json_encode($tabellisting[$section])\n\t\t]);\n\t\treturn true;\n\t}\n\n\t/**\n\t * delete column listing selection of user from database\n\t *\n\t * @param array $tabellisting\n\t * @return bool\n\t */\n\tpublic static function deleteColumnListingForUser(array $tabellisting): bool\n\t{\n\t\t$section = array_key_first($tabellisting);\n\t\tif (empty($section)) {\n\t\t\tthrow new InvalidArgumentException(\"Invalid selection array for \" . __METHOD__);\n\t\t}\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t$del_stmt = Database::prepare(\"\n\t\t\tDELETE FROM `\" . TABLE_PANEL_USERCOLUMNS . \"` WHERE `\" . $userid . \"` = :uid AND `section` = :section\n\t\t\");\n\t\tDatabase::pexecute($del_stmt, ['uid' => CurrentUser::getField($userid), 'section' => $section]);\n\t\treturn true;\n\t}\n\n\tpublic static function getVisibleColumnsForListing(string $listing, array $default_columns): array\n\t{\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t$sel_stmt = Database::prepare(\"\n\t\t\tSELECT `columns` FROM `\" . TABLE_PANEL_USERCOLUMNS . \"` WHERE `\" . $userid . \"` = :uid AND `section` = :section\n\t\t\");\n\t\t$columns_json = Database::pexecute_first($sel_stmt, [\n\t\t\t'uid' => CurrentUser::getField($userid),\n\t\t\t'section' => $listing\n\t\t]);\n\t\tif ($columns_json && isset($columns_json['columns'])) {\n\t\t\treturn json_decode($columns_json['columns'], true);\n\t\t}\n\t\treturn $default_columns;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Domain;\nuse Froxlor\\UI\\Callbacks\\Impersonate;\nuse Froxlor\\UI\\Callbacks\\Style;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\nreturn [\n\t'domain_list' => [\n\t\t'title' => lng('admin.domains'),\n\t\t'icon' => 'fa-solid fa-globe',\n\t\t'empty_msg' => $customerCollection->count() == 0 ? lng('admin.domain_nocustomeraddingavailable') : '',\n\t\t'self_overview' => ['section' => 'domains', 'page' => 'domains'],\n\t\t'default_sorting' => ['d.domain_ace' => 'asc'],\n\t\t'columns' => [\n\t\t\t'd.id' => [\n\t\t\t\t'label' => 'ID',\n\t\t\t\t'field' => 'id',\n\t\t\t\t'sortable' => true,\n\t\t\t],\n\t\t\t'd.domain_ace' => [\n\t\t\t\t'label' => lng('domains.domainname'),\n\t\t\t\t'field' => 'domain_ace',\n\t\t\t],\n\t\t\t'ipsandports' => [\n\t\t\t\t'label' => lng('admin.ipsandports.ipsandports'),\n\t\t\t\t'field' => 'ipsandports',\n\t\t\t\t'sortable' => false,\n\t\t\t\t'callback' => [Domain::class, 'listIPs'],\n\t\t\t],\n\t\t\t'c.name' => [\n\t\t\t\t'label' => lng('customer.name'),\n\t\t\t\t'field' => 'customer.name',\n\t\t\t\t'callback' => [Text::class, 'customerfullname'],\n\t\t\t],\n\t\t\t'c.loginname' => [\n\t\t\t\t'label' => lng('login.username'),\n\t\t\t\t'field' => 'customer.loginname',\n\t\t\t\t'callback' => [Impersonate::class, 'customer'],\n\t\t\t],\n\t\t\t'd.aliasdomain' => [\n\t\t\t\t'label' => lng('domains.aliasdomain'),\n\t\t\t\t'field' => 'aliasdomain',\n\t\t\t],\n\t\t\t'd.documentroot' => [\n\t\t\t\t'label' => lng('customer.documentroot'),\n\t\t\t\t'field' => 'documentroot',\n\t\t\t],\n\t\t\t'd.isbinddomain' => [\n\t\t\t\t'label' => lng('domains.isbinddomain'),\n\t\t\t\t'field' => 'isbinddomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.isemaildomain' => [\n\t\t\t\t'label' => lng('admin.emaildomain'),\n\t\t\t\t'field' => 'isemaildomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.email_only' => [\n\t\t\t\t'label' => lng('admin.email_only'),\n\t\t\t\t'field' => 'email_only',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.iswildcarddomain' => [\n\t\t\t\t'label' => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t'field' => 'iswildcarddomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.subcanemaildomain' => [\n\t\t\t\t'label' => lng('admin.subdomainforemail'),\n\t\t\t\t'field' => 'subcanemaildomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.caneditdomain' => [\n\t\t\t\t'label' => lng('admin.domain_editable.title'),\n\t\t\t\t'field' => 'caneditdomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.dkim' => [\n\t\t\t\t'label' => lng('domains.dkimenabled'),\n\t\t\t\t'field' => 'dkim',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.phpenabled' => [\n\t\t\t\t'label' => lng('admin.phpenabled'),\n\t\t\t\t'field' => 'phpenabled',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.openbasedir' => [\n\t\t\t\t'label' => lng('domains.openbasedirenabled'),\n\t\t\t\t'field' => 'openbasedir',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.speciallogfile' => [\n\t\t\t\t'label' => lng('admin.speciallogfile.title'),\n\t\t\t\t'field' => 'speciallogfile',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.hsts' => [\n\t\t\t\t'label' => lng('domains.hsts'),\n\t\t\t\t'field' => 'hsts',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.http2' => [\n\t\t\t\t'label' => lng('admin.domain_http2.title'),\n\t\t\t\t'field' => 'http2',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.letsencrypt' => [\n\t\t\t\t'label' => lng('panel.letsencrypt'),\n\t\t\t\t'field' => 'letsencrypt',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.deactivated' => [\n\t\t\t\t'label' => lng('admin.deactivated'),\n\t\t\t\t'field' => 'deactivated',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('domain_list', [\n\t\t\t'd.domain_ace',\n\t\t\t'c.name',\n\t\t\t'c.loginname',\n\t\t\t'd.aliasdomain',\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'logfiles' => [\n\t\t\t\t'icon' => 'fa-solid fa-file',\n\t\t\t\t'title' => lng('panel.viewlogs'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'logfiles',\n\t\t\t\t\t'domain_id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'canViewLogs']\n\t\t\t],\n\t\t\t'domaindnseditor' => [\n\t\t\t\t'icon' => 'fa-solid fa-globe',\n\t\t\t\t'title' => lng('dnseditor.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domaindnseditor',\n\t\t\t\t\t'domain_id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'adminCanEditDNS']\n\t\t\t],\n\t\t\t'domainssleditor' => [\n\t\t\t\t'callback' => [Domain::class, 'editSSLButtons'],\n\t\t\t],\n\t\t\t'letsencrypt' => [\n\t\t\t\t'icon' => 'fa-solid fa-shield',\n\t\t\t\t'title' => lng('panel.letsencrypt'),\n\t\t\t\t'visible' => [Domain::class, 'hasLetsEncryptActivated']\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'adminCanDelete']\n\t\t\t]\n\t\t],\n\t\t'format_callback' => [\n\t\t\t[Style::class, 'resultDomainTerminatedOrDeactivated']\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Ftp;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\nreturn [\n\t'htaccess_list' => [\n\t\t'title' => lng('menue.extras.pathoptions'),\n\t\t'icon' => 'fa-solid fa-folder',\n\t\t'self_overview' => ['section' => 'extras', 'page' => 'htaccess'],\n\t\t'default_sorting' => ['path' => 'asc'],\n\t\t'columns' => [\n\t\t\t'path' => [\n\t\t\t\t'label' => lng('panel.path'),\n\t\t\t\t'field' => 'path',\n\t\t\t\t'callback' => [Ftp::class, 'pathRelative']\n\t\t\t],\n\t\t\t'options_indexes' => [\n\t\t\t\t'label' => lng('extras.view_directory'),\n\t\t\t\t'field' => 'options_indexes',\n\t\t\t\t'callback' => [Text::class, 'boolean']\n\t\t\t],\n\t\t\t'error404path' => [\n\t\t\t\t'label' => lng('extras.error404path'),\n\t\t\t\t'field' => 'error404path'\n\t\t\t],\n\t\t\t'error403path' => [\n\t\t\t\t'label' => lng('extras.error403path'),\n\t\t\t\t'field' => 'error403path'\n\t\t\t],\n\t\t\t'error500path' => [\n\t\t\t\t'label' => lng('extras.error500path'),\n\t\t\t\t'field' => 'error500path'\n\t\t\t],\n\t\t\t'options_cgi' => [\n\t\t\t\t'label' => lng('extras.execute_perl'),\n\t\t\t\t'field' => 'options_cgi',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t\t'visible' => $cperlenabled\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('htaccess_list', [\n\t\t\t'path',\n\t\t\t'options_indexes',\n\t\t\t'error404path',\n\t\t\t'error403path',\n\t\t\t'error500path',\n\t\t\t'options_cgi'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => 'htaccess',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => 'htaccess',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t]\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Mysql;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\nreturn [\n\t'mysql_list' => [\n\t\t'title' => lng('menue.mysql.databases'),\n\t\t'icon' => 'fa-solid fa-database',\n\t\t'self_overview' => ['section' => 'mysql', 'page' => 'mysqls'],\n\t\t'default_sorting' => ['databasename' => 'asc'],\n\t\t'columns' => [\n\t\t\t'databasename' => [\n\t\t\t\t'label' => lng('mysql.databasename'),\n\t\t\t\t'field' => 'databasename',\n\t\t\t],\n\t\t\t'description' => [\n\t\t\t\t'label' => lng('mysql.databasedescription'),\n\t\t\t\t'field' => 'description'\n\t\t\t],\n\t\t\t'size' => [\n\t\t\t\t'label' => lng('mysql.size'),\n\t\t\t\t'field' => 'size',\n\t\t\t\t'callback' => [Text::class, 'size'],\n\t\t\t\t'searchable' => false\n\t\t\t],\n\t\t\t'dbserver' => [\n\t\t\t\t'label' => lng('mysql.mysql_server'),\n\t\t\t\t'field' => 'dbserver',\n\t\t\t\t'callback' => [Mysql::class, 'dbserver'],\n\t\t\t\t'visible' => $multiple_mysqlservers\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('mysql_list', [\n\t\t\t'databasename',\n\t\t\t'description',\n\t\t\t'size',\n\t\t\t'dbserver'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'mysql',\n\t\t\t\t\t'page' => 'mysqls',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'mysql',\n\t\t\t\t\t'page' => 'mysqls',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t]\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Dns;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\nreturn [\n\t'dns_list' => [\n\t\t'title' => 'DNS Entries',\n\t\t'description' => $domain,\n\t\t'icon' => 'fa-solid fa-globe',\n\t\t'self_overview' => ['section' => 'domains', 'page' => 'domaindnseditor'],\n\t\t'default_sorting' => ['record' => 'asc'],\n\t\t'columns' => [\n\t\t\t'record' => [\n\t\t\t\t'label' => 'Record',\n\t\t\t\t'field' => 'record'\n\t\t\t],\n\t\t\t'type' => [\n\t\t\t\t'label' => 'Type',\n\t\t\t\t'field' => 'type'\n\t\t\t],\n\t\t\t'prio' => [\n\t\t\t\t'label' => 'Priority',\n\t\t\t\t'field' => 'prio',\n\t\t\t\t'callback' => [Dns::class, 'prio'],\n\t\t\t],\n\t\t\t'content' => [\n\t\t\t\t'label' => 'Content',\n\t\t\t\t'field' => 'content',\n\t\t\t\t'callback' => [Text::class, 'wordwrap'],\n\t\t\t],\n\t\t\t'ttl' => [\n\t\t\t\t'label' => 'TTL',\n\t\t\t\t'field' => 'ttl'\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('dns_list', [\n\t\t\t'record',\n\t\t\t'type',\n\t\t\t'prio',\n\t\t\t'content',\n\t\t\t'ttl'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'text-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domaindnseditor',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'domain_id' => $domain_id,\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t]\n\t]\n];\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Ajax;\n\nuse Exception;\nuse DateTime;\nuse Froxlor\\Config\\ConfigDisplay;\nuse Froxlor\\Config\\ConfigParser;\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\Froxlor;\nuse Froxlor\\Http\\HttpClient;\nuse Froxlor\\Install\\Update;\nuse Froxlor\\Settings;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\n\nclass Ajax\n{\n\tprotected string $action;\n\tprotected string $theme;\n\tprotected array $userinfo;\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function __construct()\n\t{\n\t\t$this->action = Request::any('action');\n\t\t$this->theme = Request::any('theme', 'Froxlor');\n\n\t\tUI::sendHeaders();\n\t\tUI::sendSslHeaders();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tpublic function handle()\n\t{\n\t\t$this->userinfo = $this->getValidatedSession();\n\n\t\tswitch ($this->action) {\n\t\t\tcase 'newsfeed':\n\t\t\t\treturn $this->getNewsfeed();\n\t\t\tcase 'updatecheck':\n\t\t\t\treturn $this->getUpdateCheck();\n\t\t\tcase 'searchglobal':\n\t\t\t\treturn $this->searchGlobal();\n\t\t\tcase 'updatetablelisting':\n\t\t\t\treturn $this->updateTablelisting();\n\t\t\tcase 'resettablelisting':\n\t\t\t\treturn $this->resetTablelisting();\n\t\t\tcase 'editapikey':\n\t\t\t\treturn $this->editApiKey();\n\t\t\tcase 'getConfigDetails':\n\t\t\t\treturn $this->getConfigDetails();\n\t\t\tcase 'getConfigJsonExport':\n\t\t\t\treturn $this->getConfigJsonExport();\n\t\t\tcase 'loadLanguageString':\n\t\t\t\treturn $this->loadLanguageString();\n\t\t\tdefault:\n\t\t\t\treturn $this->errorResponse('Action not found!');\n\t\t}\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getValidatedSession(): array\n\t{\n\t\tif (CurrentUser::hasSession() == false) {\n\t\t\tthrow new Exception(\"No valid session\");\n\t\t}\n\t\treturn CurrentUser::getData();\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate function getNewsfeed()\n\t{\n\t\tUI::initTwig();\n\n\t\t$feed = \"https://inside.froxlor.org/news/\";\n\n\t\t// Set custom feed if provided\n\t\t$role = Request::get('role');\n\t\tif ($role == \"customer\") {\n\t\t\t$custom_feed = Settings::Get(\"customer.news_feed_url\");\n\t\t\tif (!empty(trim($custom_feed))) {\n\t\t\t\t$feed = $custom_feed;\n\t\t\t}\n\t\t}\n\n\t\t// Check for simplexml_load_file\n\t\tif (!function_exists(\"simplexml_load_file\")) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-simplexml extension\",\n\t\t\t\t\"Please install the php-simplexml extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t// Check for curl_version\n\t\tif (!function_exists('curl_version')) {\n\t\t\treturn $this->errorResponse([\n\t\t\t\t\"Newsfeed not available due to missing php-curl extension\",\n\t\t\t\t\"Please install the php-curl extension in order to view our newsfeed.\"\n\t\t\t]);\n\t\t}\n\n\t\t$output = HttpClient::urlGet($feed);\n\t\t$news = simplexml_load_string(trim($output));\n\n\t\tif ($news === false) {\n\t\t\t$err = [];\n\t\t\tforeach (libxml_get_errors() as $error) {\n\t\t\t\t$err[] = $error->message;\n\t\t\t}\n\t\t\treturn $this->errorResponse(\n\t\t\t\t$err\n\t\t\t);\n\t\t}\n\n\t\t// Handle items\n\t\tif ($news) {\n\t\t\t$items = null;\n\n\t\t\tfor ($i = 0; $i < 3; $i++) {\n\t\t\t\t$item = $news->channel->item[$i];\n\n\t\t\t\t$title = (string)$item->title;\n\t\t\t\t$link = (string)$item->link;\n\t\t\t\t$date = date(\"d.m.Y\", strtotime($item->pubDate));\n\t\t\t\t$content = preg_replace(\"/[\\r\\n]+/\", \" \", strip_tags($item->description));\n\t\t\t\t$content = substr($content, 0, 150) . \"...\";\n\n\t\t\t\t$items .= UI::twig()->render(UI::validateThemeTemplate('/user/newsfeeditem.html.twig', $this->theme), [\n\t\t\t\t\t'link' => $link,\n\t\t\t\t\t'title' => $title,\n\t\t\t\t\t'date' => $date,\n\t\t\t\t\t'content' => $content\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\treturn $this->jsonResponse($items);\n\t\t} else {\n\t\t\treturn $this->errorResponse('No Newsfeeds available at the moment.');\n\t\t}\n\t}\n\n\tpublic function errorResponse($message, int $response_code = 500)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonErrorResponse($message, $response_code);\n\t}\n\n\tpublic function jsonResponse($value, int $response_code = 200)\n\t{\n\t\theader(\"Content-Type: application/json\");\n\t\treturn \\Froxlor\\Api\\Response::jsonResponse($value, $response_code);\n\t}\n\n\tprivate function getUpdateCheck()\n\t{\n\t\tUI::initTwig();\n\n\t\ttry {\n\t\t\t$json_result = \\Froxlor\\Api\\Commands\\Froxlor::getLocal($this->userinfo)->checkUpdate();\n\t\t\t$result = json_decode($json_result, true)['data'];\n\t\t\t$result['full_version'] = Froxlor::getFullVersion();\n\t\t\t$result['dbversion'] = Froxlor::DBVERSION;\n\t\t\t$uc_data = Update::getUpdateCheckData();\n\t\t\t$result['last_update_check'] = $uc_data['ts'];\n\t\t\t$result['channel'] = Settings::Get('system.update_channel');\n\n\t\t\t$result_rendered = UI::twig()->render(UI::validateThemeTemplate('/misc/version_top.html.twig', $this->theme), $result);\n\t\t\treturn $this->jsonResponse($result_rendered);\n\t\t} catch (Exception $e) {\n\t\t\t// don't display anything if just not allowed due to permissions\n\t\t\tif ($e->getCode() != 403) {\n\t\t\t\treturn $this->errorResponse($e->getMessage(), $e->getCode());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * search globally in various resources\n\t */\n\tprivate function searchGlobal()\n\t{\n\t\t$searchtext = Request::any('searchtext');\n\n\t\t$result = [];\n\n\t\t// settings\n\t\t$result_settings = [];\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$result_settings = GlobalSearch::searchSettings($searchtext, $this->userinfo);\n\t\t}\n\n\t\t// all searchable entities\n\t\t$result_entities = GlobalSearch::searchGlobal($searchtext, $this->userinfo);\n\n\t\t$result = array_merge($result_settings, $result_entities);\n\n\t\treturn $this->jsonResponse($result);\n\t}\n\n\tprivate function updateTablelisting()\n\t{\n\t\t$columns = [];\n\t\tforeach ((Request::post('columns') ?? []) as $value) {\n\t\t\t$columns[] = $value;\n\t\t}\n\t\tif (!empty($columns)) {\n\t\t\t$columns = Listing::storeColumnListingForUser([Request::post('listing') => $columns]);\n\t\t\treturn $this->jsonResponse($columns);\n\t\t}\n\t\treturn $this->errorResponse('At least one column must be selected', 406);\n\t}\n\n\tprivate function resetTablelisting()\n\t{\n\t\tListing::deleteColumnListingForUser([Request::post('listing') => []]);\n\t\treturn $this->jsonResponse([]);\n\t}\n\n\tprivate function editApiKey()\n\t{\n\t\t$keyid = Request::post('id', 0);\n\t\t$allowed_from = Request::post('allowed_from', \"\");\n\t\t$valid_until = Request::post('valid_until', \"\");\n\n\t\tif (empty($keyid)) {\n\t\t\treturn $this->errorResponse('Invalid call', 406);\n\t\t}\n\n\t\t// validate allowed_from\n\t\tif (!empty($allowed_from)) {\n\t\t\t$ip_list = array_map('trim', explode(\",\", $allowed_from));\n\t\t\t$_check_list = $ip_list;\n\t\t\tforeach ($_check_list as $idx => $ip) {\n\t\t\t\tif (Validate::validate_ip2($ip, true, 'invalidip', true, true, true) == false) {\n\t\t\t\t\treturn $this->errorResponse('Invalid ip address', 406);\n\t\t\t\t}\n\t\t\t\t// check for cidr\n\t\t\t\tif (strpos($ip, '/') !== false) {\n\t\t\t\t\t$ipparts = explode(\"/\", $ip);\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ipparts[0]));\n\t\t\t\t\t// re-add cidr\n\t\t\t\t\t$ip .= '/' . $ipparts[1];\n\t\t\t\t} else {\n\t\t\t\t\t// shorten IP\n\t\t\t\t\t$ip = inet_ntop(inet_pton($ip));\n\t\t\t\t}\n\t\t\t\t$ip_list[$idx] = $ip;\n\t\t\t}\n\t\t\t$allowed_from = implode(\",\", array_unique($ip_list));\n\t\t}\n\n\t\tif (!empty($valid_until)) {\n\t\t\t$valid_until_db = DateTime::createFromFormat('Y-m-d\\TH:i', $valid_until)->format('U');\n\t\t} else {\n\t\t\t$valid_until_db = -1;\n\t\t}\n\n\t\t$upd_stmt = Database::prepare(\"\n\t\t\tUPDATE `\" . TABLE_API_KEYS . \"` SET\n\t\t\t`valid_until` = :vu, `allowed_from` = :af\n\t\t\tWHERE `id` = :keyid AND `adminid` = :aid AND `customerid` = :cid\n\t\t\");\n\t\tif ((int)$this->userinfo['adminsession'] == 1) {\n\t\t\t$cid = 0;\n\t\t} else {\n\t\t\t$cid = $this->userinfo['customerid'];\n\t\t}\n\t\tDatabase::pexecute($upd_stmt, [\n\t\t\t'keyid' => $keyid,\n\t\t\t'af' => $allowed_from,\n\t\t\t'vu' => $valid_until_db,\n\t\t\t'aid' => $this->userinfo['adminid'],\n\t\t\t'cid' => $cid\n\t\t]);\n\t\treturn $this->jsonResponse(['allowed_from' => $allowed_from, 'valid_until' => $valid_until]);\n\t}\n\n\t/**\n\t * return parsed commands/files of configuration templates\n\t */\n\tprivate function getConfigDetails()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$distribution = Request::post('distro', \"\");\n\t\t\t$section = Request::post('section', \"\");\n\t\t\t$daemon = Request::post('daemon', \"\");\n\n\t\t\t// validate distribution config-xml exists\n\t\t\t$config_dir = FileDir::makeCorrectDir(Froxlor::getInstallDir() . '/lib/configfiles/');\n\t\t\tif (!file_exists($config_dir . \"/\" . $distribution . \".xml\")) {\n\t\t\t\treturn $this->errorResponse(\"Unknown distribution. The configuration could not be found.\");\n\t\t\t}\n\t\t\t// read in all configurations\n\t\t\t$configfiles = new ConfigParser($config_dir . \"/\" . $distribution . \".xml\");\n\t\t\t// get the services\n\t\t\t$services = $configfiles->getServices();\n\t\t\t// validate selected service exists for this distribution\n\t\t\tif (!isset($services[$section])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown category for selected distribution\");\n\t\t\t}\n\t\t\t// get the daemons\n\t\t\t$daemons = $services[$section]->getDaemons();\n\t\t\t// validate selected daemon exists for this section\n\t\t\tif (!isset($daemons[$daemon])) {\n\t\t\t\treturn $this->errorResponse(\"Unknown service for selected category\");\n\t\t\t}\n\t\t\t// finally the config-steps\n\t\t\t$confarr = $daemons[$daemon]->getConfig();\n\t\t\t// get parsed content\n\t\t\tUI::initTwig();\n\t\t\t$content = ConfigDisplay::fromConfigArr($confarr, $configfiles->distributionEditor, $this->theme);\n\n\t\t\treturn $this->jsonResponse([\n\t\t\t\t'title' => $configfiles->getCompleteDistroName() . '&nbsp;&raquo;&nbsp' . $services[$section]->title . '&nbsp;&raquo;&nbsp' . $daemons[$daemon]->title,\n\t\t\t\t'content' => $content\n\t\t\t]);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * download JSON export of config-selection\n\t */\n\tprivate function getConfigJsonExport()\n\t{\n\t\tif (isset($this->userinfo['adminsession']) && $this->userinfo['adminsession'] == 1 && $this->userinfo['change_serversettings'] == 1) {\n\t\t\t$params = $_GET;\n\t\t\tunset($params['action']);\n\t\t\tunset($params['finish']);\n\t\t\tunset($params['csrf_token']);\n\t\t\theader('Content-disposition: attachment; filename=froxlor-config-' . time() . '.json');\n\t\t\treturn $this->jsonResponse($params);\n\t\t}\n\t\treturn $this->errorResponse('Not allowed', 403);\n\t}\n\n\t/**\n\t * loads a given language string by its identifier\n\t */\n\tprivate function loadLanguageString()\n\t{\n\t\t$langid = Request::post('langid', \"\");\n\t\tif (preg_match('/^([a-zA-Z\\.]+)$/', $langid)) {\n\t\t\treturn $this->jsonResponse(lng($langid));\n\t\t}\n\t\treturn $this->errorResponse('Invalid identifier: ' . $langid, 406);\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\UI;\n\nuse Froxlor\\CurrentUser;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\Froxlor;\nuse Froxlor\\UI\\Panel\\UI;\nuse InvalidArgumentException;\n\nclass Listing\n{\n\tpublic static function format(Collection $collection, array $tabellisting, string $id, array $listing_search_additional_param = []): array\n\t{\n\t\t$tabellisting = $tabellisting[$id];\n\t\t$collection_data = $collection->get();\n\n\t\treturn [\n\t\t\t'id' => $id,\n\t\t\t'title' => $tabellisting['title'],\n\t\t\t'description' => $tabellisting['description'] ?? null,\n\t\t\t'icon' => $tabellisting['icon'] ?? null,\n\t\t\t'table' => [\n\t\t\t\t'th' => self::generateTableHeadings($tabellisting),\n\t\t\t\t'tr' => self::generateTableRows($collection_data['data']['list'], $tabellisting),\n\t\t\t],\n\t\t\t'pagination' => $collection_data['pagination'],\n\t\t\t'empty_msg' => $tabellisting['empty_msg'] ?? null,\n\t\t\t'total_entries' => ($collection->getPagination() instanceof Pagination) ? $collection->getPagination()->getEntries() : 0,\n\t\t\t'is_search' => $collection->getPagination() instanceof Pagination && $collection->getPagination()->isSearchResult(),\n\t\t\t'self_overview' => $tabellisting['self_overview'] ?? [],\n\t\t\t'available_columns' => self::getAvailableColumnsForListing($tabellisting),\n\t\t\t'no_search' => $tabellisting['no_search'] ?? false,\n\t\t\t'listing_search_additional_param' => $listing_search_additional_param,\n\t\t];\n\t}\n\n\tpublic static function formatFromArray(array $collection, array $tabellisting, string $id): array\n\t{\n\t\treturn [\n\t\t\t'id' => $id,\n\t\t\t'title' => $tabellisting['title'],\n\t\t\t'description' => $tabellisting['description'] ?? null,\n\t\t\t'icon' => $tabellisting['icon'] ?? null,\n\t\t\t'table' => [\n\t\t\t\t'th' => self::generateTableHeadings($tabellisting),\n\t\t\t\t'tr' => self::generateTableRows($collection['data'], $tabellisting),\n\t\t\t],\n\t\t\t'pagination' => $collection['pagination'],\n\t\t\t'empty_msg' => $tabellisting['empty_msg'] ?? null,\n\t\t\t'self_overview' => $tabellisting['self_overview'] ?? [],\n\t\t\t'available_columns' => self::getAvailableColumnsForListing($tabellisting),\n\t\t\t'no_search' => $tabellisting['no_search'] ?? false,\n\t\t];\n\t}\n\n\tprivate static function generateTableHeadings(array $tabellisting): array\n\t{\n\t\t$heading = [];\n\n\t\t// Table headings for columns\n\t\tforeach ($tabellisting['visible_columns'] as $visible_column) {\n\t\t\tif (isset($tabellisting['columns'][$visible_column]['visible']) && !$tabellisting['columns'][$visible_column]['visible']) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$heading[$visible_column] = [\n\t\t\t\t'text' => $tabellisting['columns'][$visible_column]['label'],\n\t\t\t\t'class' => $tabellisting['columns'][$visible_column]['class'] ?? null,\n\t\t\t];\n\t\t}\n\n\t\t// Table headings for actions\n\t\tif (isset($tabellisting['actions'])) {\n\t\t\t$heading['actions'] = [\n\t\t\t\t'text' => lng('panel.options'),\n\t\t\t\t'class' => 'text-end',\n\t\t\t];\n\t\t}\n\n\t\treturn $heading;\n\t}\n\n\t/**\n\t * @throws Exception\n\t */\n\tprivate static function generateTableRows(array $list, array $tabellisting): array\n\t{\n\t\t$rows = [];\n\n\t\t// Create new row from item\n\t\tforeach ($list as $row => $fields) {\n\t\t\t// Generate columns from item\n\t\t\tforeach ($tabellisting['visible_columns'] as $col => $visible_column) {\n\t\t\t\t// Continue if column is not visible\n\t\t\t\tif (isset($tabellisting['columns'][$visible_column]['visible']) && !$tabellisting['columns'][$visible_column]['visible']) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Get data from filed if it is defined\n\t\t\t\t$field = $tabellisting['columns'][$visible_column]['field'] ?? null;\n\t\t\t\t$data = $field ? self::getMultiArrayFromString($fields, $field) : null;\n\n\t\t\t\t// Call user function for given column if defined or return data from field, otherwise throw exception\n\t\t\t\t$callback = $tabellisting['columns'][$visible_column]['callback'] ?? null;\n\t\t\t\tif ($callback) {\n\t\t\t\t\t$rows[$row]['td'][$col]['data'] = call_user_func($callback, ['data' => $data, 'fields' => $fields]);\n\t\t\t\t} elseif ($field) {\n\t\t\t\t\t$rows[$row]['td'][$col]['data'] = $data;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidArgumentException('The visible column \"' . $visible_column . '\" has neither a \"callback\" nor a \"field\" set.');\n\t\t\t\t}\n\n\t\t\t\t// Set class for table-row if defined\n\t\t\t\t$rows[$row]['td'][$col]['class'] = $tabellisting['columns'][$visible_column]['class'] ?? null;\n\t\t\t}\n\n\t\t\t// Set row classes from format_callback\n\t\t\tif (isset($tabellisting['format_callback'])) {\n\t\t\t\t$class = [];\n\t\t\t\tforeach ($tabellisting['format_callback'] as $format_callback) {\n\t\t\t\t\t$class[] = call_user_func($format_callback, ['fields' => $fields]);\n\t\t\t\t}\n\t\t\t\t$rows[$row]['class'] = implode(' ', $class);\n\t\t\t}\n\n\t\t\t// Set all actions for row\n\t\t\tif (isset($tabellisting['actions'])) {\n\t\t\t\t$actions = self::setLinks($tabellisting['actions'], $fields);\n\n\t\t\t\t$rows[$row]['td'][] = [\n\t\t\t\t\t'class' => 'text-end',\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t'macro' => 'actions',\n\t\t\t\t\t\t'data' => $actions\n\t\t\t\t\t]\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\treturn $rows;\n\t}\n\n\tpublic static function getMultiArrayFromString(array $arr, ?string $str)\n\t{\n\t\tforeach (explode('.', $str) as $key) {\n\t\t\tif (!array_key_exists($key, $arr)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t$arr = $arr[$key];\n\t\t}\n\n\t\treturn $arr;\n\t}\n\n\tprivate static function setLinks(array $actions, array $item): array\n\t{\n\t\t$linker = UI::getLinker();\n\n\t\t// Check each action for a href\n\t\tforeach ($actions as $key => $action) {\n\n\t\t\t// complete link built via callback\n\t\t\tif (isset($action['callback']) && !empty($action['callback'])) {\n\t\t\t\t$action = call_user_func($action['callback'], ['fields' => $item]);\n\t\t\t\t$actions[$key] = $action;\n\t\t\t}\n\n\t\t\t// Call user function if visible is an array\n\t\t\tif (isset($action['visible']) && is_array($action['visible'])) {\n\t\t\t\t$actions[$key]['visible'] = call_user_func($action['visible'], ['fields' => $item]);\n\t\t\t}\n\n\t\t\t// Set link if href is an array\n\t\t\tif (isset($action['href']) && is_array($action['href'])) {\n\t\t\t\t// Search for \"columns\" in our href array\n\t\t\t\tforeach ($action['href'] as $href_key => $href_value) {\n\t\t\t\t\t$length = strlen(':');\n\t\t\t\t\tif (substr($href_value, 0, $length) === ':') {\n\t\t\t\t\t\t$column = ltrim($href_value, ':');\n\t\t\t\t\t\t$action['href'][$href_key] = $item[$column];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Set actual link from linker\n\t\t\t\t$actions[$key]['href'] = $linker->getLink($action['href']);\n\t\t\t}\n\n\t\t\t// modal trigger - always require a valid callback\n\t\t\tif (isset($action['modal']) && !empty($action['modal'])) {\n\t\t\t\t$actions[$key]['modal'] = call_user_func($action['modal'], ['fields' => $item]);\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\tprivate static function getAvailableColumnsForListing(array $tabellisting): array\n\t{\n\t\t$result = [];\n\t\tif (isset($tabellisting['columns'])) {\n\t\t\tforeach ($tabellisting['columns'] as $column => $coldata) {\n\t\t\t\tif (isset($coldata['visible']) && !$coldata['visible']) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$result[$column] = [\n\t\t\t\t\t'label' => $coldata['label'],\n\t\t\t\t\t'checked' => in_array($column, $tabellisting['visible_columns']),\n\t\t\t\t\t'searchable' => $coldata['searchable'] ?? true,\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * store column listing selection of user to database\n\t * the selection array should look like this:\n\t * [\n\t *     'section_name' => [\n\t *         'column_name',\n\t *         'column_name',\n\t *         'column_name'\n\t *     ]\n\t * ]\n\t *\n\t * @param array $tabellisting\n\t * @return array\n\t */\n\tpublic static function storeColumnListingForUser(array $tabellisting): array\n\t{\n\t\t$section = array_key_first($tabellisting);\n\t\tif (empty($section) || !is_array($tabellisting[$section]) || empty($tabellisting[$section])) {\n\t\t\tthrow new InvalidArgumentException(\"Invalid selection array for \" . __METHOD__);\n\t\t}\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t// include all possible tablelisting-definitions to check for the right section\n\t\tforeach(glob(Froxlor::getInstallDir().'lib/tablelisting/{,*/}*.php', GLOB_BRACE) as $tbl_file) {\n\t\t\t$table_listings = include $tbl_file;\n\t\t\tif (!isset($table_listings[$section])) {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$columns_available = array_keys($table_listings[$section]['columns']);\n\t\t// filter out unknown columns\n\t\tforeach ($tabellisting[$section] as $index => $column_changed) {\n\t\t\tif (!in_array($column_changed, $columns_available)) {\n\t\t\t\tunset($tabellisting[$section][$index]);\n\t\t\t}\n\t\t}\n\t\t// delete possible existing entry\n\t\tself::deleteColumnListingForUser($tabellisting);\n\t\t// add new entry\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_USERCOLUMNS . \"` SET\n\t\t\t`\" . $userid . \"` = :uid,\n\t\t\t`section` = :section,\n\t\t\t`columns` = :cols\n\t\t\");\n\t\tDatabase::pexecute($ins_stmt, [\n\t\t\t'uid' => CurrentUser::getField($userid),\n\t\t\t'section' => $section,\n\t\t\t'cols' => json_encode($tabellisting[$section])\n\t\t]);\n\t\treturn $tabellisting[$section];\n\t}\n\n\t/**\n\t * delete column listing selection of user from database\n\t *\n\t * @param array $tabellisting\n\t * @return bool\n\t */\n\tpublic static function deleteColumnListingForUser(array $tabellisting): bool\n\t{\n\t\t$section = array_key_first($tabellisting);\n\t\tif (empty($section)) {\n\t\t\tthrow new InvalidArgumentException(\"Invalid selection array for \" . __METHOD__);\n\t\t}\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t$del_stmt = Database::prepare(\"\n\t\t\tDELETE FROM `\" . TABLE_PANEL_USERCOLUMNS . \"` WHERE `\" . $userid . \"` = :uid AND `section` = :section\n\t\t\");\n\t\tDatabase::pexecute($del_stmt, ['uid' => CurrentUser::getField($userid), 'section' => $section]);\n\t\treturn true;\n\t}\n\n\tpublic static function getVisibleColumnsForListing(string $listing, array $default_columns): array\n\t{\n\t\t$userid = 'customerid';\n\t\tif (CurrentUser::isAdmin()) {\n\t\t\t$userid = 'adminid';\n\t\t}\n\t\t$sel_stmt = Database::prepare(\"\n\t\t\tSELECT `columns` FROM `\" . TABLE_PANEL_USERCOLUMNS . \"` WHERE `\" . $userid . \"` = :uid AND `section` = :section\n\t\t\");\n\t\t$columns_json = Database::pexecute_first($sel_stmt, [\n\t\t\t'uid' => CurrentUser::getField($userid),\n\t\t\t'section' => $listing\n\t\t]);\n\t\tif ($columns_json && isset($columns_json['columns'])) {\n\t\t\treturn json_decode($columns_json['columns'], true);\n\t\t}\n\t\treturn $default_columns;\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Domain;\nuse Froxlor\\UI\\Callbacks\\Impersonate;\nuse Froxlor\\UI\\Callbacks\\Style;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\n// used outside scope variables\n$customerCollectionCount = !is_null($customerCollection ?? null) ? $customerCollection->count() : 0;\n\nreturn [\n\t'domain_list' => [\n\t\t'title' => lng('admin.domains'),\n\t\t'icon' => 'fa-solid fa-globe',\n\t\t'empty_msg' => $customerCollectionCount == 0 ? lng('admin.domain_nocustomeraddingavailable') : '',\n\t\t'self_overview' => ['section' => 'domains', 'page' => 'domains'],\n\t\t'default_sorting' => ['d.domain_ace' => 'asc'],\n\t\t'columns' => [\n\t\t\t'd.id' => [\n\t\t\t\t'label' => 'ID',\n\t\t\t\t'field' => 'id',\n\t\t\t\t'sortable' => true,\n\t\t\t],\n\t\t\t'd.domain_ace' => [\n\t\t\t\t'label' => lng('domains.domainname'),\n\t\t\t\t'field' => 'domain_ace',\n\t\t\t],\n\t\t\t'ipsandports' => [\n\t\t\t\t'label' => lng('admin.ipsandports.ipsandports'),\n\t\t\t\t'field' => 'ipsandports',\n\t\t\t\t'sortable' => false,\n\t\t\t\t'callback' => [Domain::class, 'listIPs'],\n\t\t\t],\n\t\t\t'c.name' => [\n\t\t\t\t'label' => lng('customer.name'),\n\t\t\t\t'field' => 'customer.name',\n\t\t\t\t'callback' => [Text::class, 'customerfullname'],\n\t\t\t],\n\t\t\t'c.loginname' => [\n\t\t\t\t'label' => lng('login.username'),\n\t\t\t\t'field' => 'customer.loginname',\n\t\t\t\t'callback' => [Impersonate::class, 'customer'],\n\t\t\t],\n\t\t\t'd.aliasdomain' => [\n\t\t\t\t'label' => lng('domains.aliasdomain'),\n\t\t\t\t'field' => 'aliasdomain',\n\t\t\t],\n\t\t\t'd.documentroot' => [\n\t\t\t\t'label' => lng('customer.documentroot'),\n\t\t\t\t'field' => 'documentroot',\n\t\t\t],\n\t\t\t'd.isbinddomain' => [\n\t\t\t\t'label' => lng('domains.isbinddomain'),\n\t\t\t\t'field' => 'isbinddomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.isemaildomain' => [\n\t\t\t\t'label' => lng('admin.emaildomain'),\n\t\t\t\t'field' => 'isemaildomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.email_only' => [\n\t\t\t\t'label' => lng('admin.email_only'),\n\t\t\t\t'field' => 'email_only',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.iswildcarddomain' => [\n\t\t\t\t'label' => lng('domains.serveraliasoption_wildcard'),\n\t\t\t\t'field' => 'iswildcarddomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.subcanemaildomain' => [\n\t\t\t\t'label' => lng('admin.subdomainforemail'),\n\t\t\t\t'field' => 'subcanemaildomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.caneditdomain' => [\n\t\t\t\t'label' => lng('admin.domain_editable.title'),\n\t\t\t\t'field' => 'caneditdomain',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.dkim' => [\n\t\t\t\t'label' => lng('domains.dkimenabled'),\n\t\t\t\t'field' => 'dkim',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.phpenabled' => [\n\t\t\t\t'label' => lng('admin.phpenabled'),\n\t\t\t\t'field' => 'phpenabled',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.openbasedir' => [\n\t\t\t\t'label' => lng('domains.openbasedirenabled'),\n\t\t\t\t'field' => 'openbasedir',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.speciallogfile' => [\n\t\t\t\t'label' => lng('admin.speciallogfile.title'),\n\t\t\t\t'field' => 'speciallogfile',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.hsts' => [\n\t\t\t\t'label' => lng('domains.hsts'),\n\t\t\t\t'field' => 'hsts',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.http2' => [\n\t\t\t\t'label' => lng('admin.domain_http2.title'),\n\t\t\t\t'field' => 'http2',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.letsencrypt' => [\n\t\t\t\t'label' => lng('panel.letsencrypt'),\n\t\t\t\t'field' => 'letsencrypt',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t\t'd.deactivated' => [\n\t\t\t\t'label' => lng('admin.deactivated'),\n\t\t\t\t'field' => 'deactivated',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t],\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('domain_list', [\n\t\t\t'd.domain_ace',\n\t\t\t'c.name',\n\t\t\t'c.loginname',\n\t\t\t'd.aliasdomain',\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'logfiles' => [\n\t\t\t\t'icon' => 'fa-solid fa-file',\n\t\t\t\t'title' => lng('panel.viewlogs'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'logfiles',\n\t\t\t\t\t'domain_id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'canViewLogs']\n\t\t\t],\n\t\t\t'domaindnseditor' => [\n\t\t\t\t'icon' => 'fa-solid fa-globe',\n\t\t\t\t'title' => lng('dnseditor.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domaindnseditor',\n\t\t\t\t\t'domain_id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'adminCanEditDNS']\n\t\t\t],\n\t\t\t'domainssleditor' => [\n\t\t\t\t'callback' => [Domain::class, 'editSSLButtons'],\n\t\t\t],\n\t\t\t'letsencrypt' => [\n\t\t\t\t'icon' => 'fa-solid fa-shield',\n\t\t\t\t'title' => lng('panel.letsencrypt'),\n\t\t\t\t'visible' => [Domain::class, 'hasLetsEncryptActivated']\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domains',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t\t'visible' => [Domain::class, 'adminCanDelete']\n\t\t\t]\n\t\t],\n\t\t'format_callback' => [\n\t\t\t[Style::class, 'resultDomainTerminatedOrDeactivated']\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Ftp;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\n// used outside scope variables\n$cperlenabled = $cperlenabled ?? false;\n\nreturn [\n\t'htaccess_list' => [\n\t\t'title' => lng('menue.extras.pathoptions'),\n\t\t'icon' => 'fa-solid fa-folder',\n\t\t'self_overview' => ['section' => 'extras', 'page' => 'htaccess'],\n\t\t'default_sorting' => ['path' => 'asc'],\n\t\t'columns' => [\n\t\t\t'path' => [\n\t\t\t\t'label' => lng('panel.path'),\n\t\t\t\t'field' => 'path',\n\t\t\t\t'callback' => [Ftp::class, 'pathRelative']\n\t\t\t],\n\t\t\t'options_indexes' => [\n\t\t\t\t'label' => lng('extras.view_directory'),\n\t\t\t\t'field' => 'options_indexes',\n\t\t\t\t'callback' => [Text::class, 'boolean']\n\t\t\t],\n\t\t\t'error404path' => [\n\t\t\t\t'label' => lng('extras.error404path'),\n\t\t\t\t'field' => 'error404path'\n\t\t\t],\n\t\t\t'error403path' => [\n\t\t\t\t'label' => lng('extras.error403path'),\n\t\t\t\t'field' => 'error403path'\n\t\t\t],\n\t\t\t'error500path' => [\n\t\t\t\t'label' => lng('extras.error500path'),\n\t\t\t\t'field' => 'error500path'\n\t\t\t],\n\t\t\t'options_cgi' => [\n\t\t\t\t'label' => lng('extras.execute_perl'),\n\t\t\t\t'field' => 'options_cgi',\n\t\t\t\t'callback' => [Text::class, 'boolean'],\n\t\t\t\t'visible' => $cperlenabled\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('htaccess_list', [\n\t\t\t'path',\n\t\t\t'options_indexes',\n\t\t\t'error404path',\n\t\t\t'error403path',\n\t\t\t'error500path',\n\t\t\t'options_cgi'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => 'htaccess',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'extras',\n\t\t\t\t\t'page' => 'htaccess',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t]\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Mysql;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\n// used outside scope variables\n$multiple_mysqlservers = $multiple_mysqlservers ?? false;\n\nreturn [\n\t'mysql_list' => [\n\t\t'title' => lng('menue.mysql.databases'),\n\t\t'icon' => 'fa-solid fa-database',\n\t\t'self_overview' => ['section' => 'mysql', 'page' => 'mysqls'],\n\t\t'default_sorting' => ['databasename' => 'asc'],\n\t\t'columns' => [\n\t\t\t'databasename' => [\n\t\t\t\t'label' => lng('mysql.databasename'),\n\t\t\t\t'field' => 'databasename',\n\t\t\t],\n\t\t\t'description' => [\n\t\t\t\t'label' => lng('mysql.databasedescription'),\n\t\t\t\t'field' => 'description'\n\t\t\t],\n\t\t\t'size' => [\n\t\t\t\t'label' => lng('mysql.size'),\n\t\t\t\t'field' => 'size',\n\t\t\t\t'callback' => [Text::class, 'size'],\n\t\t\t\t'searchable' => false\n\t\t\t],\n\t\t\t'dbserver' => [\n\t\t\t\t'label' => lng('mysql.mysql_server'),\n\t\t\t\t'field' => 'dbserver',\n\t\t\t\t'callback' => [Mysql::class, 'dbserver'],\n\t\t\t\t'visible' => $multiple_mysqlservers\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('mysql_list', [\n\t\t\t'databasename',\n\t\t\t'description',\n\t\t\t'size',\n\t\t\t'dbserver'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'edit' => [\n\t\t\t\t'icon' => 'fa-solid fa-edit',\n\t\t\t\t'title' => lng('panel.edit'),\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'mysql',\n\t\t\t\t\t'page' => 'mysqls',\n\t\t\t\t\t'action' => 'edit',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'btn-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'mysql',\n\t\t\t\t\t'page' => 'mysqls',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t]\n\t\t]\n\t]\n];\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nuse Froxlor\\UI\\Callbacks\\Dns;\nuse Froxlor\\UI\\Callbacks\\Text;\nuse Froxlor\\UI\\Listing;\n\n// used outside scope variables\n$domain = $domain ?? '';\n$domain_id = $domain_id ?? '';\n\nreturn [\n\t'dns_list' => [\n\t\t'title' => 'DNS Entries',\n\t\t'description' => $domain,\n\t\t'icon' => 'fa-solid fa-globe',\n\t\t'self_overview' => ['section' => 'domains', 'page' => 'domaindnseditor'],\n\t\t'default_sorting' => ['record' => 'asc'],\n\t\t'columns' => [\n\t\t\t'record' => [\n\t\t\t\t'label' => 'Record',\n\t\t\t\t'field' => 'record'\n\t\t\t],\n\t\t\t'type' => [\n\t\t\t\t'label' => 'Type',\n\t\t\t\t'field' => 'type'\n\t\t\t],\n\t\t\t'prio' => [\n\t\t\t\t'label' => 'Priority',\n\t\t\t\t'field' => 'prio',\n\t\t\t\t'callback' => [Dns::class, 'prio'],\n\t\t\t],\n\t\t\t'content' => [\n\t\t\t\t'label' => 'Content',\n\t\t\t\t'field' => 'content',\n\t\t\t\t'callback' => [Text::class, 'wordwrap'],\n\t\t\t],\n\t\t\t'ttl' => [\n\t\t\t\t'label' => 'TTL',\n\t\t\t\t'field' => 'ttl'\n\t\t\t]\n\t\t],\n\t\t'visible_columns' => Listing::getVisibleColumnsForListing('dns_list', [\n\t\t\t'record',\n\t\t\t'type',\n\t\t\t'prio',\n\t\t\t'content',\n\t\t\t'ttl'\n\t\t]),\n\t\t'actions' => [\n\t\t\t'delete' => [\n\t\t\t\t'icon' => 'fa-solid fa-trash',\n\t\t\t\t'title' => lng('panel.delete'),\n\t\t\t\t'class' => 'text-danger',\n\t\t\t\t'href' => [\n\t\t\t\t\t'section' => 'domains',\n\t\t\t\t\t'page' => 'domaindnseditor',\n\t\t\t\t\t'action' => 'delete',\n\t\t\t\t\t'domain_id' => $domain_id,\n\t\t\t\t\t'id' => ':id'\n\t\t\t\t],\n\t\t\t],\n\t\t]\n\t]\n];\n"], "filenames": ["lib/Froxlor/Ajax/Ajax.php", "lib/Froxlor/UI/Listing.php", "lib/tablelisting/admin/tablelisting.domains.php", "lib/tablelisting/customer/tablelisting.htaccess.php", "lib/tablelisting/customer/tablelisting.mysqls.php", "lib/tablelisting/tablelisting.dns.php"], "buggy_code_start_loc": [240, 29, 31, 28, 28, 28], "buggy_code_end_loc": [253, 277, 37, 28, 28, 28], "fixing_code_start_loc": [240, 30, 32, 29, 29, 29], "fixing_code_end_loc": [253, 294, 40, 32, 32, 33], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository froxlor/froxlor prior to 2.0.11.", "other": {"cve": {"id": "CVE-2023-1033", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-25T01:15:54.487", "lastModified": "2023-03-07T01:59:06.247", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository froxlor/froxlor prior to 2.0.11."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.11", "matchCriteriaId": "C1635360-5CD8-4058-99AD-C8F00ED696A9"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/4003a8d2b60728a77476d1d4f5aa5c635f128950", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/ba3cd929-8b60-4d8d-b77d-f28409ecf387", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/4003a8d2b60728a77476d1d4f5aa5c635f128950"}}