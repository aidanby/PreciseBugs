{"buggy_code": ["#! /usr/bin/env perl\n# Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\n#\n# ====================================================================\n# Written by Andy Polyakov, @dot-asm, initially for use in the OpenSSL\n# project. The module is dual licensed under OpenSSL and CRYPTOGAMS\n# licenses depending on where you obtain it. For further details see\n# https://github.com/dot-asm/cryptogams/.\n# ====================================================================\n#\n# This module implements Poly1305 hash for PowerPC.\n#\n# June 2015\n#\n# Numbers are cycles per processed byte with poly1305_blocks alone,\n# and improvement coefficients relative to gcc-generated code.\n#\n#\t\t\t-m32\t\t-m64\n#\n# Freescale e300\t14.8/+80%\t-\n# PPC74x0\t\t7.60/+60%\t-\n# PPC970\t\t7.00/+114%\t3.51/+205%\n# POWER7\t\t3.75/+260%\t1.93/+100%\n# POWER8\t\t-\t\t2.03/+200%\n# POWER9\t\t-\t\t2.00/+150%\n#\n# Do we need floating-point implementation for PPC? Results presented\n# in poly1305_ieee754.c are tricky to compare to, because they are for\n# compiler-generated code. On the other hand it's known that floating-\n# point performance can be dominated by FPU latency, which means that\n# there is limit even for ideally optimized (and even vectorized) code.\n# And this limit is estimated to be higher than above -m64 results. Or\n# in other words floating-point implementation can be meaningful to\n# consider only in 32-bit application context. We probably have to\n# recognize that 32-bit builds are getting less popular on high-end\n# systems and therefore tend to target embedded ones, which might not\n# even have FPU...\n#\n# On side note, Power ISA 2.07 enables vector base 2^26 implementation,\n# and POWER8 might have capacity to break 1.0 cycle per byte barrier...\n#\n# January 2019\n#\n# ... Unfortunately not:-( Estimate was a projection of ARM result,\n# but ARM has vector multiply-n-add instruction, while PowerISA does\n# not, not one usable in the context. Improvement is ~40% over -m64\n# result above and is ~1.43 on little-endian systems.\n\n# $output is the last argument if it looks like a file (it has an extension)\n# $flavour is the first argument if it doesn't look like a file\n$output = $#ARGV >= 0 && $ARGV[$#ARGV] =~ m|\\.\\w+$| ? pop : undef;\n$flavour = $#ARGV >= 0 && $ARGV[0] !~ m|\\.| ? shift : undef;\n\nif ($flavour =~ /64/) {\n\t$SIZE_T\t=8;\n\t$LRSAVE\t=2*$SIZE_T;\n\t$UCMP\t=\"cmpld\";\n\t$STU\t=\"stdu\";\n\t$POP\t=\"ld\";\n\t$PUSH\t=\"std\";\n} elsif ($flavour =~ /32/) {\n\t$SIZE_T\t=4;\n\t$LRSAVE\t=$SIZE_T;\n\t$UCMP\t=\"cmplw\";\n\t$STU\t=\"stwu\";\n\t$POP\t=\"lwz\";\n\t$PUSH\t=\"stw\";\n} else { die \"nonsense $flavour\"; }\n\n# Define endianness based on flavour\n# i.e.: linux64le\n$LITTLE_ENDIAN = ($flavour=~/le$/) ? $SIZE_T : 0;\n\n$0 =~ m/(.*[\\/\\\\])[^\\/\\\\]+$/; $dir=$1;\n( $xlate=\"${dir}ppc-xlate.pl\" and -f $xlate ) or\n( $xlate=\"${dir}../../perlasm/ppc-xlate.pl\" and -f $xlate) or\ndie \"can't locate ppc-xlate.pl\";\n\nopen STDOUT,\"| $^X $xlate $flavour \\\"$output\\\"\"\n    or die \"can't call $xlate: $!\";\n\n$FRAME=24*$SIZE_T;\n\n$sp=\"r1\";\nmy ($ctx,$inp,$len,$padbit) = map(\"r$_\",(3..6));\nmy ($mac,$nonce)=($inp,$len);\nmy $mask = \"r0\";\n\n$code=<<___;\n.machine\t\"any\"\n.text\n___\n\t\t\t\t\t\t\tif ($flavour =~ /64/) {\n###############################################################################\n# base 2^64 implementation\n\nmy ($h0,$h1,$h2,$d0,$d1,$d2, $r0,$r1,$s1, $t0,$t1) = map(\"r$_\",(7..12,27..31));\n\n$code.=<<___;\n.globl\t.poly1305_init_int\n.align\t4\n.poly1305_init_int:\n\txor\tr0,r0,r0\n\tstd\tr0,0($ctx)\t\t# zero hash value\n\tstd\tr0,8($ctx)\n\tstd\tr0,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\t$UCMP\t$inp,r0\n\tbeq-\tLno_key\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tld\t$d0,0($inp)\t\t# load key material\n\tld\t$d1,8($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$h0,4\n\tlwbrx\t$d0,0,$inp\t\t# load key material\n\tli\t$d1,8\n\tlwbrx\t$h0,$h0,$inp\n\tli\t$h1,12\n\tlwbrx\t$d1,$d1,$inp\n\tlwbrx\t$h1,$h1,$inp\n\tinsrdi\t$d0,$h0,32,0\n\tinsrdi\t$d1,$h1,32,0\n___\n$code.=<<___;\n\tlis\t$h1,0xfff\t\t# 0x0fff0000\n\tori\t$h1,$h1,0xfffc\t\t# 0x0ffffffc\n\tinsrdi\t$h1,$h1,32,0\t\t# 0x0ffffffc0ffffffc\n\tori\t$h0,$h1,3\t\t# 0x0ffffffc0fffffff\n\n\tand\t$d0,$d0,$h0\n\tand\t$d1,$d1,$h1\n\n\tstd\t$d0,32($ctx)\t\t# store key\n\tstd\t$d1,40($ctx)\n\nLno_key:\n\txor\tr3,r3,r3\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,2,0\n.size\t.poly1305_init_int,.-.poly1305_init_int\n\n.globl\t.poly1305_blocks\n.align\t4\n.poly1305_blocks:\nLpoly1305_blocks:\n\tsrdi.\t$len,$len,4\n\tbeq-\tLabort\n\n\t$STU\t$sp,-$FRAME($sp)\n\tmflr\tr0\n\t$PUSH\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$FRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$FRAME+$LRSAVE`($sp)\n\n\tld\t$r0,32($ctx)\t\t# load key\n\tld\t$r1,40($ctx)\n\n\tld\t$h0,0($ctx)\t\t# load hash value\n\tld\t$h1,8($ctx)\n\tld\t$h2,16($ctx)\n\n\tsrdi\t$s1,$r1,2\n\tmtctr\t$len\n\tadd\t$s1,$s1,$r1\t\t# s1 = r1 + r1>>2\n\tli\t$mask,3\n\tb\tLoop\n\n.align\t4\nLoop:\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tld\t$t0,0($inp)\t\t# load input\n\tld\t$t1,8($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$d0,4\n\tlwbrx\t$t0,0,$inp\t\t# load input\n\tli\t$t1,8\n\tlwbrx\t$d0,$d0,$inp\n\tli\t$d1,12\n\tlwbrx\t$t1,$t1,$inp\n\tlwbrx\t$d1,$d1,$inp\n\tinsrdi\t$t0,$d0,32,0\n\tinsrdi\t$t1,$d1,32,0\n___\n$code.=<<___;\n\taddi\t$inp,$inp,16\n\n\taddc\t$h0,$h0,$t0\t\t# accumulate input\n\tadde\t$h1,$h1,$t1\n\n\tmulld\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhdu\t$d1,$h0,$r0\n\tadde\t$h2,$h2,$padbit\n\n\tmulld\t$t0,$h1,$s1\t\t# h1*5*r1\n\tmulhdu\t$t1,$h1,$s1\n\taddc\t$d0,$d0,$t0\n\tadde\t$d1,$d1,$t1\n\n\tmulld\t$t0,$h0,$r1\t\t# h0*r1\n\tmulhdu\t$d2,$h0,$r1\n\taddc\t$d1,$d1,$t0\n\taddze\t$d2,$d2\n\n\tmulld\t$t0,$h1,$r0\t\t# h1*r0\n\tmulhdu\t$t1,$h1,$r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tmulld\t$t0,$h2,$s1\t\t# h2*5*r1\n\tmulld\t$t1,$h2,$r0\t\t# h2*r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tandc\t$t0,$d2,$mask\t\t# final reduction step\n\tand\t$h2,$d2,$mask\n\tsrdi\t$t1,$t0,2\n\tadd\t$t0,$t0,$t1\n\taddc\t$h0,$d0,$t0\n\taddze\t$h1,$d1\n\taddze\t$h2,$h2\n\n\tbdnz\tLoop\n\n\tstd\t$h0,0($ctx)\t\t# store hash value\n\tstd\t$h1,8($ctx)\n\tstd\t$h2,16($ctx)\n\n\t$POP\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$FRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$FRAME\nLabort:\n\tblr\n\t.long\t0\n\t.byte\t0,12,4,1,0x80,5,4,0\n.size\t.poly1305_blocks,.-.poly1305_blocks\n___\n{\nmy ($h0,$h1,$h2,$h3,$h4,$t0) = map(\"r$_\",(7..12));\n\n$code.=<<___;\n.globl\t.poly1305_emit\n.align\t5\n.poly1305_emit:\n\tlwz\t$h0,0($ctx)\t# load hash value base 2^26\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\tlwz\tr0,24($ctx)\t# is_base2_26\n\n\tsldi\t$h1,$h1,26\t# base 2^26 -> base 2^64\n\tsldi\t$t0,$h2,52\n\tsrdi\t$h2,$h2,12\n\tsldi\t$h3,$h3,14\n\tadd\t$h0,$h0,$h1\n\taddc\t$h0,$h0,$t0\n\tsldi\t$t0,$h4,40\n\tsrdi\t$h4,$h4,24\n\tadde\t$h1,$h2,$h3\n\taddc\t$h1,$h1,$t0\n\taddze\t$h2,$h4\n\n\tld\t$h3,0($ctx)\t# load hash value base 2^64\n\tld\t$h4,8($ctx)\n\tld\t$t0,16($ctx)\n\n\tneg\tr0,r0\n\txor\t$h0,$h0,$h3\t# choose between radixes\n\txor\t$h1,$h1,$h4\n\txor\t$h2,$h2,$t0\n\tand\t$h0,$h0,r0\n\tand\t$h1,$h1,r0\n\tand\t$h2,$h2,r0\n\txor\t$h0,$h0,$h3\n\txor\t$h1,$h1,$h4\n\txor\t$h2,$h2,$t0\n\n\taddic\t$h3,$h0,5\t# compare to modulus\n\taddze\t$h4,$h1\n\taddze\t$t0,$h2\n\n\tsrdi\t$t0,$t0,2\t# see if it carried/borrowed\n\tneg\t$t0,$t0\n\n\tandc\t$h0,$h0,$t0\n\tand\t$h3,$h3,$t0\n\tandc\t$h1,$h1,$t0\n\tand\t$h4,$h4,$t0\n\tor\t$h0,$h0,$h3\n\tor\t$h1,$h1,$h4\n\n\tlwz\t$t0,4($nonce)\n\tlwz\t$h2,12($nonce)\n\tlwz\t$h3,0($nonce)\n\tlwz\t$h4,8($nonce)\n\n\tinsrdi\t$h3,$t0,32,0\n\tinsrdi\t$h4,$h2,32,0\n\n\taddc\t$h0,$h0,$h3\t# accumulate nonce\n\tadde\t$h1,$h1,$h4\n\n\taddi\t$ctx,$mac,-1\n\taddi\t$mac,$mac,7\n\n\tstbu\t$h0,1($ctx)\t# write [little-endian] result\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tstbu\t$h1,1($mac)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,3,0\n.size\t.poly1305_emit,.-.poly1305_emit\n___\n}\t\t\t\t\t\t\t} else {\n###############################################################################\n# base 2^32 implementation\n\nmy ($h0,$h1,$h2,$h3,$h4, $r0,$r1,$r2,$r3, $s1,$s2,$s3,\n    $t0,$t1,$t2,$t3, $D0,$D1,$D2,$D3, $d0,$d1,$d2,$d3\n   ) = map(\"r$_\",(7..12,14..31));\n\n$code.=<<___;\n.globl\t.poly1305_init_int\n.align\t4\n.poly1305_init_int:\n\txor\tr0,r0,r0\n\tstw\tr0,0($ctx)\t\t# zero hash value\n\tstw\tr0,4($ctx)\n\tstw\tr0,8($ctx)\n\tstw\tr0,12($ctx)\n\tstw\tr0,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\t$UCMP\t$inp,r0\n\tbeq-\tLno_key\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tlw\t$h0,0($inp)\t\t# load key material\n\tlw\t$h1,4($inp)\n\tlw\t$h2,8($inp)\n\tlw\t$h3,12($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$h1,4\n\tlwbrx\t$h0,0,$inp\t\t# load key material\n\tli\t$h2,8\n\tlwbrx\t$h1,$h1,$inp\n\tli\t$h3,12\n\tlwbrx\t$h2,$h2,$inp\n\tlwbrx\t$h3,$h3,$inp\n___\n$code.=<<___;\n\tlis\t$mask,0xf000\t\t# 0xf0000000\n\tli\t$r0,-4\n\tandc\t$r0,$r0,$mask\t\t# 0x0ffffffc\n\n\tandc\t$h0,$h0,$mask\n\tand\t$h1,$h1,$r0\n\tand\t$h2,$h2,$r0\n\tand\t$h3,$h3,$r0\n\n\tstw\t$h0,32($ctx)\t\t# store key\n\tstw\t$h1,36($ctx)\n\tstw\t$h2,40($ctx)\n\tstw\t$h3,44($ctx)\n\nLno_key:\n\txor\tr3,r3,r3\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,2,0\n.size\t.poly1305_init_int,.-.poly1305_init_int\n\n.globl\t.poly1305_blocks\n.align\t4\n.poly1305_blocks:\nLpoly1305_blocks:\n\tsrwi.\t$len,$len,4\n\tbeq-\tLabort\n\n\t$STU\t$sp,-$FRAME($sp)\n\tmflr\tr0\n\t$PUSH\tr14,`$FRAME-$SIZE_T*18`($sp)\n\t$PUSH\tr15,`$FRAME-$SIZE_T*17`($sp)\n\t$PUSH\tr16,`$FRAME-$SIZE_T*16`($sp)\n\t$PUSH\tr17,`$FRAME-$SIZE_T*15`($sp)\n\t$PUSH\tr18,`$FRAME-$SIZE_T*14`($sp)\n\t$PUSH\tr19,`$FRAME-$SIZE_T*13`($sp)\n\t$PUSH\tr20,`$FRAME-$SIZE_T*12`($sp)\n\t$PUSH\tr21,`$FRAME-$SIZE_T*11`($sp)\n\t$PUSH\tr22,`$FRAME-$SIZE_T*10`($sp)\n\t$PUSH\tr23,`$FRAME-$SIZE_T*9`($sp)\n\t$PUSH\tr24,`$FRAME-$SIZE_T*8`($sp)\n\t$PUSH\tr25,`$FRAME-$SIZE_T*7`($sp)\n\t$PUSH\tr26,`$FRAME-$SIZE_T*6`($sp)\n\t$PUSH\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$FRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$FRAME+$LRSAVE`($sp)\n\n\tlwz\t$r0,32($ctx)\t\t# load key\n\tlwz\t$r1,36($ctx)\n\tlwz\t$r2,40($ctx)\n\tlwz\t$r3,44($ctx)\n\n\tlwz\t$h0,0($ctx)\t\t# load hash value\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\n\tsrwi\t$s1,$r1,2\n\tsrwi\t$s2,$r2,2\n\tsrwi\t$s3,$r3,2\n\tadd\t$s1,$s1,$r1\t\t# si = ri + ri>>2\n\tadd\t$s2,$s2,$r2\n\tadd\t$s3,$s3,$r3\n\tmtctr\t$len\n\tli\t$mask,3\n\tb\tLoop\n\n.align\t4\nLoop:\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tlwz\t$d0,0($inp)\t\t# load input\n\tlwz\t$d1,4($inp)\n\tlwz\t$d2,8($inp)\n\tlwz\t$d3,12($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$d1,4\n\tlwbrx\t$d0,0,$inp\t\t# load input\n\tli\t$d2,8\n\tlwbrx\t$d1,$d1,$inp\n\tli\t$d3,12\n\tlwbrx\t$d2,$d2,$inp\n\tlwbrx\t$d3,$d3,$inp\n___\n$code.=<<___;\n\taddi\t$inp,$inp,16\n\n\taddc\t$h0,$h0,$d0\t\t# accumulate input\n\tadde\t$h1,$h1,$d1\n\tadde\t$h2,$h2,$d2\n\n\tmullw\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhwu\t$D0,$h0,$r0\n\n\tmullw\t$d1,$h0,$r1\t\t# h0*r1\n\tmulhwu\t$D1,$h0,$r1\n\n\tmullw\t$d2,$h0,$r2\t\t# h0*r2\n\tmulhwu\t$D2,$h0,$r2\n\n\t adde\t$h3,$h3,$d3\n\t adde\t$h4,$h4,$padbit\n\n\tmullw\t$d3,$h0,$r3\t\t# h0*r3\n\tmulhwu\t$D3,$h0,$r3\n\n\tmullw\t$t0,$h1,$s3\t\t# h1*s3\n\tmulhwu\t$t1,$h1,$s3\n\n\tmullw\t$t2,$h1,$r0\t\t# h1*r0\n\tmulhwu\t$t3,$h1,$r0\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h1,$r1\t\t# h1*r1\n\tmulhwu\t$t1,$h1,$r1\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h1,$r2\t\t# h1*r2\n\tmulhwu\t$t3,$h1,$r2\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h2,$s2\t\t# h2*s2\n\tmulhwu\t$t1,$h2,$s2\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\n\tmullw\t$t2,$h2,$s3\t\t# h2*s3\n\tmulhwu\t$t3,$h2,$s3\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h2,$r0\t\t# h2*r0\n\tmulhwu\t$t1,$h2,$r0\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h2,$r1\t\t# h2*r1\n\tmulhwu\t$t3,$h2,$r1\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h3,$s1\t\t# h3*s1\n\tmulhwu\t$t1,$h3,$s1\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\n\tmullw\t$t2,$h3,$s2\t\t# h3*s2\n\tmulhwu\t$t3,$h3,$s2\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h3,$s3\t\t# h3*s3\n\tmulhwu\t$t1,$h3,$s3\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h3,$r0\t\t# h3*r0\n\tmulhwu\t$t3,$h3,$r0\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h4,$s1\t\t# h4*s1\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\taddc\t$d1,$d1,$t0\n\n\tmullw\t$t1,$h4,$s2\t\t# h4*s2\n\t addze\t$D1,$D1\n\taddc\t$d2,$d2,$t1\n\taddze\t$D2,$D2\n\n\tmullw\t$t2,$h4,$s3\t\t# h4*s3\n\taddc\t$d3,$d3,$t2\n\taddze\t$D3,$D3\n\n\tmullw\t$h4,$h4,$r0\t\t# h4*r0\n\n\taddc\t$h1,$d1,$D0\n\tadde\t$h2,$d2,$D1\n\tadde\t$h3,$d3,$D2\n\tadde\t$h4,$h4,$D3\n\n\tandc\t$D0,$h4,$mask\t\t# final reduction step\n\tand\t$h4,$h4,$mask\n\tsrwi\t$D1,$D0,2\n\tadd\t$D0,$D0,$D1\n\taddc\t$h0,$d0,$D0\n\taddze\t$h1,$h1\n\taddze\t$h2,$h2\n\taddze\t$h3,$h3\n\taddze\t$h4,$h4\n\n\tbdnz\tLoop\n\n\tstw\t$h0,0($ctx)\t\t# store hash value\n\tstw\t$h1,4($ctx)\n\tstw\t$h2,8($ctx)\n\tstw\t$h3,12($ctx)\n\tstw\t$h4,16($ctx)\n\n\t$POP\tr14,`$FRAME-$SIZE_T*18`($sp)\n\t$POP\tr15,`$FRAME-$SIZE_T*17`($sp)\n\t$POP\tr16,`$FRAME-$SIZE_T*16`($sp)\n\t$POP\tr17,`$FRAME-$SIZE_T*15`($sp)\n\t$POP\tr18,`$FRAME-$SIZE_T*14`($sp)\n\t$POP\tr19,`$FRAME-$SIZE_T*13`($sp)\n\t$POP\tr20,`$FRAME-$SIZE_T*12`($sp)\n\t$POP\tr21,`$FRAME-$SIZE_T*11`($sp)\n\t$POP\tr22,`$FRAME-$SIZE_T*10`($sp)\n\t$POP\tr23,`$FRAME-$SIZE_T*9`($sp)\n\t$POP\tr24,`$FRAME-$SIZE_T*8`($sp)\n\t$POP\tr25,`$FRAME-$SIZE_T*7`($sp)\n\t$POP\tr26,`$FRAME-$SIZE_T*6`($sp)\n\t$POP\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$FRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$FRAME\nLabort:\n\tblr\n\t.long\t0\n\t.byte\t0,12,4,1,0x80,18,4,0\n.size\t.poly1305_blocks,.-.poly1305_blocks\n___\n{\nmy ($h0,$h1,$h2,$h3,$h4,$t0,$t1) = map(\"r$_\",(6..12));\n\n$code.=<<___;\n.globl\t.poly1305_emit\n.align\t5\n.poly1305_emit:\n\tlwz\tr0,24($ctx)\t# is_base2_26\n\tlwz\t$h0,0($ctx)\t# load hash value\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\tcmplwi\tr0,0\n\tbeq\tLemit_base2_32\n\n\tslwi\t$t0,$h1,26\t# base 2^26 -> base 2^32\n\tsrwi\t$h1,$h1,6\n\tslwi\t$t1,$h2,20\n\tsrwi\t$h2,$h2,12\n\taddc\t$h0,$h0,$t0\n\tslwi\t$t0,$h3,14\n\tsrwi\t$h3,$h3,18\n\tadde\t$h1,$h1,$t1\n\tslwi\t$t1,$h4,8\n\tsrwi\t$h4,$h4,24\n\tadde\t$h2,$h2,$t0\n\tadde\t$h3,$h3,$t1\n\taddze\t$h4,$h4\n\nLemit_base2_32:\n\taddic\tr0,$h0,5\t# compare to modulus\n\taddze\tr0,$h1\n\taddze\tr0,$h2\n\taddze\tr0,$h3\n\taddze\tr0,$h4\n\n\tsrwi\tr0,r0,2\t\t# see if it carried/borrowed\n\tneg\tr0,r0\n\tandi.\tr0,r0,5\n\n\taddc\t$h0,$h0,r0\n\tlwz\tr0,0($nonce)\n\taddze\t$h1,$h1\n\tlwz\t$t0,4($nonce)\n\taddze\t$h2,$h2\n\tlwz\t$t1,8($nonce)\n\taddze\t$h3,$h3\n\tlwz\t$h4,12($nonce)\n\n\taddc\t$h0,$h0,r0\t# accumulate nonce\n\tadde\t$h1,$h1,$t0\n\tadde\t$h2,$h2,$t1\n\tadde\t$h3,$h3,$h4\n\n\taddi\t$ctx,$mac,-1\n\taddi\t$mac,$mac,7\n\n\tstbu\t$h0,1($ctx)\t# write [little-endian] result\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tstbu\t$h2,1($mac)\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tstbu\t$h3,1($mac)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,3,0\n.size\t.poly1305_emit,.-.poly1305_emit\n___\n}\t\t\t\t\t\t\t}\n{{{\n########################################################################\n# PowerISA 2.07/VSX section                                            #\n########################################################################\n\nmy $LOCALS= 6*$SIZE_T;\nmy $VSXFRAME = $LOCALS + 6*$SIZE_T;\n   $VSXFRAME += 128;\t# local variables\n   $VSXFRAME += 13*16;\t# v20-v31 offload\n\nmy $BIG_ENDIAN = ($flavour !~ /le/) ? 4 : 0;\n\n########################################################################\n# Layout of opaque area is following:\n#\n#\tunsigned __int32 h[5];\t\t# current hash value base 2^26\n#\tunsigned __int32 pad;\n#\tunsigned __int32 is_base2_26, pad;\n#\tunsigned __int64 r[2];\t\t# key value base 2^64\n#\tstruct { unsigned __int32 r^2, r^4, r^1, r^3; } r[9];\n#\n# where r^n are base 2^26 digits of powers of multiplier key. There are\n# 5 digits, but last four are interleaved with multiples of 5, totalling\n# in 9 elements: r0, r1, 5*r1, r2, 5*r2, r3, 5*r3, r4, 5*r4. Order of\n# powers is as they appear in register, not memory.\n\nmy ($H0, $H1, $H2, $H3, $H4) = map(\"v$_\",(0..4));\nmy ($I0, $I1, $I2, $I3, $I4) = map(\"v$_\",(5..9));\nmy ($R0, $R1, $S1, $R2, $S2) = map(\"v$_\",(10..14));\nmy      ($R3, $S3, $R4, $S4) = ($R1, $S1, $R2, $S2);\nmy ($ACC0, $ACC1, $ACC2, $ACC3, $ACC4) = map(\"v$_\",(15..19));\nmy ($T0, $T1, $T2, $T3, $T4) = map(\"v$_\",(20..24));\nmy ($_26,$_4,$_40,$_14,$mask26,$padbits,$I2perm) = map(\"v$_\",(25..31));\nmy ($x00,$x60,$x70,$x10,$x20,$x30,$x40,$x50) = (0, map(\"r$_\",(7,8,27..31)));\nmy ($ctx_,$_ctx,$const) = map(\"r$_\",(10..12));\n\n\t\t\t\t\t\t\tif ($flavour =~ /64/) {\n###############################################################################\n# setup phase of poly1305_blocks_vsx is different on 32- and 64-bit platforms,\n# but the base 2^26 computational part is same...\n\nmy ($h0,$h1,$h2,$d0,$d1,$d2, $r0,$r1,$s1, $t0,$t1) = map(\"r$_\",(6..11,27..31));\nmy $mask = \"r0\";\n\n$code.=<<___;\n.globl\t.poly1305_blocks_vsx\n.align\t5\n.poly1305_blocks_vsx:\n\tlwz\tr7,24($ctx)\t\t# is_base2_26\n\tcmpldi\t$len,128\n\tbge\t__poly1305_blocks_vsx\n\n\tneg\tr0,r7\t\t\t# is_base2_26 as mask\n\tlwz\tr7,0($ctx)\t\t# load hash base 2^26\n\tlwz\tr8,4($ctx)\n\tlwz\tr9,8($ctx)\n\tlwz\tr10,12($ctx)\n\tlwz\tr11,16($ctx)\n\n\tsldi\tr8,r8,26\t\t# base 2^26 -> base 2^64\n\tsldi\tr12,r9,52\n\tadd\tr7,r7,r8\n\tsrdi\tr9,r9,12\n\tsldi\tr10,r10,14\n\taddc\tr7,r7,r12\n\tsldi\tr8,r11,40\n\tadde\tr9,r9,r10\n\tsrdi\tr11,r11,24\n\taddc\tr9,r9,r8\n\taddze\tr11,r11\n\n\tld\tr8,0($ctx)\t\t# load hash base 2^64\n\tld\tr10,8($ctx)\n\tld\tr12,16($ctx)\n\n\txor\tr7,r7,r8\t\t# select between radixes\n\txor\tr9,r9,r10\n\txor\tr11,r11,r12\n\tand\tr7,r7,r0\n\tand\tr9,r9,r0\n\tand\tr11,r11,r0\n\txor\tr7,r7,r8\n\txor\tr9,r9,r10\n\txor\tr11,r11,r12\n\n\tli\tr0,0\n\tstd\tr7,0($ctx)\t\t# store hash base 2^64\n\tstd\tr9,8($ctx)\n\tstd\tr11,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\tb\tLpoly1305_blocks\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,4,0\n.size\t.poly1305_blocks_vsx,.-.poly1305_blocks_vsx\n\n.align\t5\n__poly1305_mul:\n\tmulld\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhdu\t$d1,$h0,$r0\n\n\tmulld\t$t0,$h1,$s1\t\t# h1*5*r1\n\tmulhdu\t$t1,$h1,$s1\n\taddc\t$d0,$d0,$t0\n\tadde\t$d1,$d1,$t1\n\n\tmulld\t$t0,$h0,$r1\t\t# h0*r1\n\tmulhdu\t$d2,$h0,$r1\n\taddc\t$d1,$d1,$t0\n\taddze\t$d2,$d2\n\n\tmulld\t$t0,$h1,$r0\t\t# h1*r0\n\tmulhdu\t$t1,$h1,$r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tmulld\t$t0,$h2,$s1\t\t# h2*5*r1\n\tmulld\t$t1,$h2,$r0\t\t# h2*r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tandc\t$t0,$d2,$mask\t\t# final reduction step\n\tand\t$h2,$d2,$mask\n\tsrdi\t$t1,$t0,2\n\tadd\t$t0,$t0,$t1\n\taddc\t$h0,$d0,$t0\n\taddze\t$h1,$d1\n\taddze\t$h2,$h2\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_mul,.-__poly1305_mul\n\n.align\t5\n__poly1305_splat:\n\textrdi\t$d0,$h0,26,38\n\textrdi\t$d1,$h0,26,12\n\tstw\t$d0,0x00($t1)\n\n\textrdi\t$d2,$h0,12,0\n\tslwi\t$d0,$d1,2\n\tstw\t$d1,0x10($t1)\n\tadd\t$d0,$d0,$d1\t\t# * 5\n\tstw\t$d0,0x20($t1)\n\n\tinsrdi\t$d2,$h1,14,38\n\tslwi\t$d0,$d2,2\n\tstw\t$d2,0x30($t1)\n\tadd\t$d0,$d0,$d2\t\t# * 5\n\tstw\t$d0,0x40($t1)\n\n\textrdi\t$d1,$h1,26,24\n\textrdi\t$d2,$h1,24,0\n\tslwi\t$d0,$d1,2\n\tstw\t$d1,0x50($t1)\n\tadd\t$d0,$d0,$d1\t\t# * 5\n\tstw\t$d0,0x60($t1)\n\n\tinsrdi\t$d2,$h2,3,37\n\tslwi\t$d0,$d2,2\n\tstw\t$d2,0x70($t1)\n\tadd\t$d0,$d0,$d2\t\t# * 5\n\tstw\t$d0,0x80($t1)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_splat,.-__poly1305_splat\n\n.align\t5\n__poly1305_blocks_vsx:\n\t$STU\t$sp,-$VSXFRAME($sp)\n\tmflr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmfspr\tr12,256\n\tstvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv21,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv22,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv23,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv24,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv25,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv26,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv27,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv28,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv29,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv30,r10,$sp\n\tstvx\tv31,r11,$sp\n\tstw\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# save vrsave\n\tli\tr12,-1\n\tmtspr\t256,r12\t\t\t# preserve all AltiVec registers\n\t$PUSH\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\n\tbl\tLPICmeup\n\n\tli\t$x10,0x10\n\tli\t$x20,0x20\n\tli\t$x30,0x30\n\tli\t$x40,0x40\n\tli\t$x50,0x50\n\tlvx_u\t$mask26,$x00,$const\n\tlvx_u\t$_26,$x10,$const\n\tlvx_u\t$_40,$x20,$const\n\tlvx_u\t$I2perm,$x30,$const\n\tlvx_u\t$padbits,$x40,$const\n\n\tcmplwi\tr7,0\t\t\t# is_base2_26?\n\tbne\tLskip_init_vsx\n\n\tld\t$r0,32($ctx)\t\t# load key base 2^64\n\tld\t$r1,40($ctx)\n\tsrdi\t$s1,$r1,2\n\tli\t$mask,3\n\tadd\t$s1,$s1,$r1\t\t# s1 = r1 + r1>>2\n\n\tmr\t$h0,$r0\t\t\t# \"calculate\" r^1\n\tmr\t$h1,$r1\n\tli\t$h2,0\n\taddi\t$t1,$ctx,`48+(12^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^2\n\taddi\t$t1,$ctx,`48+(4^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^3\n\taddi\t$t1,$ctx,`48+(8^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^4\n\taddi\t$t1,$ctx,`48+(0^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tld\t$h0,0($ctx)\t\t# load hash\n\tld\t$h1,8($ctx)\n\tld\t$h2,16($ctx)\n\n\textrdi\t$d0,$h0,26,38\t\t# base 2^64 -> base 2^26\n\textrdi\t$d1,$h0,26,12\n\textrdi\t$d2,$h0,12,0\n\tmtvrwz\t$H0,$d0\n\tinsrdi\t$d2,$h1,14,38\n\tmtvrwz\t$H1,$d1\n\textrdi\t$d1,$h1,26,24\n\tmtvrwz\t$H2,$d2\n\textrdi\t$d2,$h1,24,0\n\tmtvrwz\t$H3,$d1\n\tinsrdi\t$d2,$h2,3,37\n\tmtvrwz\t$H4,$d2\n___\n\t\t\t\t\t\t\t} else {\n###############################################################################\n# 32-bit initialization\n\nmy ($h0,$h1,$h2,$h3,$h4,$t0,$t1) = map(\"r$_\",(7..11,0,12));\nmy ($R3,$S3,$R4,$S4)=($I1,$I2,$I3,$I4);\n\n$code.=<<___;\n.globl\t.poly1305_blocks_vsx\n.align\t5\n.poly1305_blocks_vsx:\n\tlwz\tr7,24($ctx)\t\t# is_base2_26\n\tcmplwi\t$len,128\n\tbge\t__poly1305_blocks_vsx\n\tcmplwi\tr7,0\n\tbeq\tLpoly1305_blocks\n\n\tlwz\t$h0,0($ctx)\t\t# load hash\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\n\tslwi\t$t0,$h1,26\t\t# base 2^26 -> base 2^32\n\tsrwi\t$h1,$h1,6\n\tslwi\t$t1,$h2,20\n\tsrwi\t$h2,$h2,12\n\taddc\t$h0,$h0,$t0\n\tslwi\t$t0,$h3,14\n\tsrwi\t$h3,$h3,18\n\tadde\t$h1,$h1,$t1\n\tslwi\t$t1,$h4,8\n\tsrwi\t$h4,$h4,24\n\tadde\t$h2,$h2,$t0\n\tli\t$t0,0\n\tadde\t$h3,$h3,$t1\n\taddze\t$h4,$h4\n\n\tstw\t$h0,0($ctx)\t\t# store hash base 2^32\n\tstw\t$h1,4($ctx)\n\tstw\t$h2,8($ctx)\n\tstw\t$h3,12($ctx)\n\tstw\t$h4,16($ctx)\n\tstw\t$t0,24($ctx)\t\t# clear is_base2_26\n\n\tb\tLpoly1305_blocks\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,4,0\n.size\t.poly1305_blocks_vsx,.-.poly1305_blocks_vsx\n\n.align\t5\n__poly1305_mul:\n\tvmulouw\t\t$ACC0,$H0,$R0\n\tvmulouw\t\t$ACC1,$H1,$R0\n\tvmulouw\t\t$ACC2,$H2,$R0\n\tvmulouw\t\t$ACC3,$H3,$R0\n\tvmulouw\t\t$ACC4,$H4,$R0\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t################################################################\n\t# lazy reduction\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_mul,.-__poly1305_mul\n\n.align\t5\n__poly1305_blocks_vsx:\n\t$STU\t$sp,-$VSXFRAME($sp)\n\tmflr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmfspr\tr12,256\n\tstvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv21,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv22,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv23,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv24,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv25,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv26,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv27,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv28,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv29,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv30,r10,$sp\n\tstvx\tv31,r11,$sp\n\tstw\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# save vrsave\n\tli\tr12,-1\n\tmtspr\t256,r12\t\t\t# preserve all AltiVec registers\n\t$PUSH\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\n\tbl\tLPICmeup\n\n\tli\t$x10,0x10\n\tli\t$x20,0x20\n\tli\t$x30,0x30\n\tli\t$x40,0x40\n\tli\t$x50,0x50\n\tlvx_u\t$mask26,$x00,$const\n\tlvx_u\t$_26,$x10,$const\n\tlvx_u\t$_40,$x20,$const\n\tlvx_u\t$I2perm,$x30,$const\n\tlvx_u\t$padbits,$x40,$const\n\n\tcmplwi\tr7,0\t\t\t# is_base2_26?\n\tbne\tLskip_init_vsx\n\n\tlwz\t$h1,32($ctx)\t\t# load key base 2^32\n\tlwz\t$h2,36($ctx)\n\tlwz\t$h3,40($ctx)\n\tlwz\t$h4,44($ctx)\n\n\textrwi\t$h0,$h1,26,6\t\t# base 2^32 -> base 2^26\n\textrwi\t$h1,$h1,6,0\n\tinsrwi\t$h1,$h2,20,6\n\textrwi\t$h2,$h2,12,0\n\tinsrwi\t$h2,$h3,14,6\n\textrwi\t$h3,$h3,18,0\n\tinsrwi\t$h3,$h4,8,6\n\textrwi\t$h4,$h4,24,0\n\n\tmtvrwz\t$R0,$h0\n\tslwi\t$h0,$h1,2\n\tmtvrwz\t$R1,$h1\n\tadd\t$h1,$h1,$h0\n\tmtvrwz\t$S1,$h1\n\tslwi\t$h1,$h2,2\n\tmtvrwz\t$R2,$h2\n\tadd\t$h2,$h2,$h1\n\tmtvrwz\t$S2,$h2\n\tslwi\t$h2,$h3,2\n\tmtvrwz\t$R3,$h3\n\tadd\t$h3,$h3,$h2\n\tmtvrwz\t$S3,$h3\n\tslwi\t$h3,$h4,2\n\tmtvrwz\t$R4,$h4\n\tadd\t$h4,$h4,$h3\n\tmtvrwz\t$S4,$h4\n\n\tvmr\t$H0,$R0\n\tvmr\t$H1,$R1\n\tvmr\t$H2,$R2\n\tvmr\t$H3,$R3\n\tvmr\t$H4,$R4\n\n\tbl\t__poly1305_mul\t\t# r^1:- * r^1:-\n\n\tvpermdi\t$R0,$H0,$R0,0b00\n\tvpermdi\t$R1,$H1,$R1,0b00\n\tvpermdi\t$R2,$H2,$R2,0b00\n\tvpermdi\t$R3,$H3,$R3,0b00\n\tvpermdi\t$R4,$H4,$R4,0b00\n\tvpermdi\t$H0,$H0,$H0,0b00\n\tvpermdi\t$H1,$H1,$H1,0b00\n\tvpermdi\t$H2,$H2,$H2,0b00\n\tvpermdi\t$H3,$H3,$H3,0b00\n\tvpermdi\t$H4,$H4,$H4,0b00\n\tvsld\t$S1,$R1,$T0\t\t# <<2\n\tvsld\t$S2,$R2,$T0\n\tvsld\t$S3,$R3,$T0\n\tvsld\t$S4,$R4,$T0\n\tvaddudm\t$S1,$S1,$R1\n\tvaddudm\t$S2,$S2,$R2\n\tvaddudm\t$S3,$S3,$R3\n\tvaddudm\t$S4,$S4,$R4\n\n\tbl\t__poly1305_mul\t\t# r^2:r^2 * r^2:r^1\n\n\taddi\t$h0,$ctx,0x60\n\tlwz\t$h1,0($ctx)\t\t# load hash\n\tlwz\t$h2,4($ctx)\n\tlwz\t$h3,8($ctx)\n\tlwz\t$h4,12($ctx)\n\tlwz\t$t0,16($ctx)\n\n\tvmrgow\t$R0,$R0,$H0\t\t# r^2:r^4:r^1:r^3\n\tvmrgow\t$R1,$R1,$H1\n\tvmrgow\t$R2,$R2,$H2\n\tvmrgow\t$R3,$R3,$H3\n\tvmrgow\t$R4,$R4,$H4\n\tvslw\t$S1,$R1,$T0\t\t# <<2\n\tvslw\t$S2,$R2,$T0\n\tvslw\t$S3,$R3,$T0\n\tvslw\t$S4,$R4,$T0\n\tvadduwm\t$S1,$S1,$R1\n\tvadduwm\t$S2,$S2,$R2\n\tvadduwm\t$S3,$S3,$R3\n\tvadduwm\t$S4,$S4,$R4\n\n\tstvx_u\t$R0,$x30,$ctx\n\tstvx_u\t$R1,$x40,$ctx\n\tstvx_u\t$S1,$x50,$ctx\n\tstvx_u\t$R2,$x00,$h0\n\tstvx_u\t$S2,$x10,$h0\n\tstvx_u\t$R3,$x20,$h0\n\tstvx_u\t$S3,$x30,$h0\n\tstvx_u\t$R4,$x40,$h0\n\tstvx_u\t$S4,$x50,$h0\n\n\textrwi\t$h0,$h1,26,6\t\t# base 2^32 -> base 2^26\n\textrwi\t$h1,$h1,6,0\n\tmtvrwz\t$H0,$h0\n\tinsrwi\t$h1,$h2,20,6\n\textrwi\t$h2,$h2,12,0\n\tmtvrwz\t$H1,$h1\n\tinsrwi\t$h2,$h3,14,6\n\textrwi\t$h3,$h3,18,0\n\tmtvrwz\t$H2,$h2\n\tinsrwi\t$h3,$h4,8,6\n\textrwi\t$h4,$h4,24,0\n\tmtvrwz\t$H3,$h3\n\tinsrwi\t$h4,$t0,3,5\n\tmtvrwz\t$H4,$h4\n___\n\t\t\t\t\t\t\t}\n$code.=<<___;\n\tli\tr0,1\n\tstw\tr0,24($ctx)\t\t# set is_base2_26\n\tb\tLoaded_vsx\n\n.align\t4\nLskip_init_vsx:\n\tli\t\t$x10,4\n\tli\t\t$x20,8\n\tli\t\t$x30,12\n\tli\t\t$x40,16\n\tlvwzx_u\t\t$H0,$x00,$ctx\n\tlvwzx_u\t\t$H1,$x10,$ctx\n\tlvwzx_u\t\t$H2,$x20,$ctx\n\tlvwzx_u\t\t$H3,$x30,$ctx\n\tlvwzx_u\t\t$H4,$x40,$ctx\n\nLoaded_vsx:\n\tli\t\t$x10,0x10\n\tli\t\t$x20,0x20\n\tli\t\t$x30,0x30\n\tli\t\t$x40,0x40\n\tli\t\t$x50,0x50\n\tli\t\t$x60,0x60\n\tli\t\t$x70,0x70\n\taddi\t\t$ctx_,$ctx,64\t\t# &ctx->r[1]\n\taddi\t\t$_ctx,$sp,`$LOCALS+15`\t# &ctx->r[1], r^2:r^4 shadow\n\n\tvxor\t\t$T0,$T0,$T0\t\t# ensure second half is zero\n\tvpermdi\t\t$H0,$H0,$T0,0b00\n\tvpermdi\t\t$H1,$H1,$T0,0b00\n\tvpermdi\t\t$H2,$H2,$T0,0b00\n\tvpermdi\t\t$H3,$H3,$T0,0b00\n\tvpermdi\t\t$H4,$H4,$T0,0b00\n\n\tbe?lvx_u\t$_4,$x50,$const\t\t# byte swap mask\n\tlvx_u\t\t$T1,$x00,$inp\t\t# load first input block\n\tlvx_u\t\t$T2,$x10,$inp\n\tlvx_u\t\t$T3,$x20,$inp\n\tlvx_u\t\t$T4,$x30,$inp\n\tbe?vperm\t$T1,$T1,$T1,$_4\n\tbe?vperm\t$T2,$T2,$T2,$_4\n\tbe?vperm\t$T3,$T3,$T3,$_4\n\tbe?vperm\t$T4,$T4,$T4,$_4\n\n\tvpermdi\t\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\tvspltisb\t$_4,4\n\tvperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvspltisb\t$_14,14\n\tvpermdi\t\t$I3,$T1,$T2,0b11\n\n\tvsrd\t\t$I1,$I0,$_26\n\tvsrd\t\t$I2,$I2,$_4\n\tvsrd\t\t$I4,$I3,$_40\n\tvsrd\t\t$I3,$I3,$_14\n\tvand\t\t$I0,$I0,$mask26\n\tvand\t\t$I1,$I1,$mask26\n\tvand\t\t$I2,$I2,$mask26\n\tvand\t\t$I3,$I3,$mask26\n\n\tvpermdi\t\t$T1,$T3,$T4,0b00\n\tvperm\t\t$T2,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$T3,$T3,$T4,0b11\n\n\tvsrd\t\t$T0,$T1,$_26\n\tvsrd\t\t$T2,$T2,$_4\n\tvsrd\t\t$T4,$T3,$_40\n\tvsrd\t\t$T3,$T3,$_14\n\tvand\t\t$T1,$T1,$mask26\n\tvand\t\t$T0,$T0,$mask26\n\tvand\t\t$T2,$T2,$mask26\n\tvand\t\t$T3,$T3,$mask26\n\n\t# inp[2]:inp[0]:inp[3]:inp[1]\n\tvmrgow\t\t$I4,$T4,$I4\n\tvmrgow\t\t$I0,$T1,$I0\n\tvmrgow\t\t$I1,$T0,$I1\n\tvmrgow\t\t$I2,$T2,$I2\n\tvmrgow\t\t$I3,$T3,$I3\n\tvor\t\t$I4,$I4,$padbits\n\n\tlvx_splt\t$R0,$x30,$ctx\t\t# taking lvx_vsplt out of loop\n\tlvx_splt\t$R1,$x00,$ctx_\t\t# gives ~8% improvement\n\tlvx_splt\t$S1,$x10,$ctx_\n\tlvx_splt\t$R2,$x20,$ctx_\n\tlvx_splt\t$S2,$x30,$ctx_\n\tlvx_splt\t$T1,$x40,$ctx_\n\tlvx_splt\t$T2,$x50,$ctx_\n\tlvx_splt\t$T3,$x60,$ctx_\n\tlvx_splt\t$T4,$x70,$ctx_\n\tstvx\t\t$R1,$x00,$_ctx\n\tstvx\t\t$S1,$x10,$_ctx\n\tstvx\t\t$R2,$x20,$_ctx\n\tstvx\t\t$S2,$x30,$_ctx\n\tstvx\t\t$T1,$x40,$_ctx\n\tstvx\t\t$T2,$x50,$_ctx\n\tstvx\t\t$T3,$x60,$_ctx\n\tstvx\t\t$T4,$x70,$_ctx\n\n\taddi\t\t$inp,$inp,0x40\n\taddi\t\t$const,$const,0x50\n\taddi\t\tr0,$len,-64\n\tsrdi\t\tr0,r0,6\n\tmtctr\t\tr0\n\tb\t\tLoop_vsx\n\n.align\t4\nLoop_vsx:\n\t################################################################\n\t## ((inp[0]*r^4+inp[2]*r^2+inp[4])*r^4+inp[6]*r^2\n\t## ((inp[1]*r^4+inp[3]*r^2+inp[5])*r^3+inp[7]*r\n\t##   \\___________________/\n\t##\n\t## Note that we start with inp[2:3]*r^2. This is because it\n\t## doesn't depend on reduction in previous iteration.\n\t################################################################\n\t## d4 = h4*r0 + h3*r1   + h2*r2   + h1*r3   + h0*r4\n\t## d3 = h3*r0 + h2*r1   + h1*r2   + h0*r3   + h4*5*r4\n\t## d2 = h2*r0 + h1*r1   + h0*r2   + h4*5*r3 + h3*5*r4\n\t## d1 = h1*r0 + h0*r1   + h4*5*r2 + h3*5*r3 + h2*5*r4\n\t## d0 = h0*r0 + h4*5*r1 + h3*5*r2 + h2*5*r3 + h1*5*r4\n\n\tvmuleuw\t\t$ACC0,$I0,$R0\n\tvmuleuw\t\t$ACC1,$I0,$R1\n\tvmuleuw\t\t$ACC2,$I0,$R2\n\tvmuleuw\t\t$ACC3,$I1,$R2\n\n\tvmuleuw\t\t$T0,$I1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\t vmuleuw\t$ACC4,$I2,$R2\n\tvmuleuw\t\t$T0,$I4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S3,$x50,$_ctx\n\tvmuleuw\t\t$T0,$I3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R3,$x40,$_ctx\n\n\t vaddudm\t$H2,$H2,$I2\n\t vaddudm\t$H0,$H0,$I0\n\t vaddudm\t$H3,$H3,$I3\n\t vaddudm\t$H1,$H1,$I1\n\t vaddudm\t$H4,$H4,$I4\n\n\tvmuleuw\t\t$T0,$I3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S4,$x70,$_ctx\n\tvmuleuw\t\t$T0,$I4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R4,$x60,$_ctx\n\n\tvmuleuw\t\t$T0,$I2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t be?lvx_u\t$_4,$x00,$const\t\t# byte swap mask\n\t lvx_u\t\t$T1,$x00,$inp\t\t# load next input block\n\t lvx_u\t\t$T2,$x10,$inp\n\t lvx_u\t\t$T3,$x20,$inp\n\t lvx_u\t\t$T4,$x30,$inp\n\t be?vperm\t$T1,$T1,$T1,$_4\n\t be?vperm\t$T2,$T2,$T2,$_4\n\t be?vperm\t$T3,$T3,$T3,$_4\n\t be?vperm\t$T4,$T4,$T4,$_4\n\n\tvmuleuw\t\t$T0,$I1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vpermdi\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\t vspltisb\t$_4,4\n\t vperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\t vpermdi\t$I3,$T1,$T2,0b11\n\n\t# (hash + inp[0:1]) * r^4\n\tvmulouw\t\t$T0,$H0,$R0\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vpermdi\t$T1,$T3,$T4,0b00\n\t vperm\t\t$T2,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\t vpermdi\t$T3,$T3,$T4,0b11\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S1,$x10,$_ctx\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R1,$x00,$_ctx\n\n\t vsrd\t\t$I1,$I0,$_26\n\t vsrd\t\t$I2,$I2,$_4\n\t vsrd\t\t$I4,$I3,$_40\n\t vsrd\t\t$I3,$I3,$_14\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S2,$x30,$_ctx\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R2,$x20,$_ctx\n\n\t vand\t\t$I0,$I0,$mask26\n\t vand\t\t$I1,$I1,$mask26\n\t vand\t\t$I2,$I2,$mask26\n\t vand\t\t$I3,$I3,$mask26\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vsrd\t\t$T2,$T2,$_4\n\t vsrd\t\t$_4,$T1,$_26\n\t vsrd\t\t$T4,$T3,$_40\n\t vsrd\t\t$T3,$T3,$_14\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vand\t\t$T1,$T1,$mask26\n\t vand\t\t$_4,$_4,$mask26\n\t vand\t\t$T2,$T2,$mask26\n\t vand\t\t$T3,$T3,$mask26\n\n\t################################################################\n\t# lazy reduction as discussed in \"NEON crypto\" by D.J. Bernstein\n\t# and P. Schwabe\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\t vmrgow\t\t$I4,$T4,$I4\n\t vmrgow\t\t$I0,$T1,$I0\n\t vmrgow\t\t$I1,$_4,$I1\n\t vmrgow\t\t$I2,$T2,$I2\n\t vmrgow\t\t$I3,$T3,$I3\n\t vor\t\t$I4,$I4,$padbits\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\taddi\t\t$inp,$inp,0x40\n\tbdnz\t\tLoop_vsx\n\n\tneg\t\t$len,$len\n\tandi.\t\t$len,$len,0x30\n\tsub\t\t$inp,$inp,$len\n\n\tlvx_u\t\t$R0,$x30,$ctx\t\t# load all powers\n\tlvx_u\t\t$R1,$x00,$ctx_\n\tlvx_u\t\t$S1,$x10,$ctx_\n\tlvx_u\t\t$R2,$x20,$ctx_\n\tlvx_u\t\t$S2,$x30,$ctx_\n\nLast_vsx:\n\tvmuleuw\t\t$ACC0,$I0,$R0\n\tvmuleuw\t\t$ACC1,$I1,$R0\n\tvmuleuw\t\t$ACC2,$I2,$R0\n\tvmuleuw\t\t$ACC3,$I3,$R0\n\tvmuleuw\t\t$ACC4,$I4,$R0\n\n\tvmuleuw\t\t$T0,$I4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S3,$x50,$ctx_\n\tvmuleuw\t\t$T0,$I3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R3,$x40,$ctx_\n\n\t vaddudm\t$H2,$H2,$I2\n\t vaddudm\t$H0,$H0,$I0\n\t vaddudm\t$H3,$H3,$I3\n\t vaddudm\t$H1,$H1,$I1\n\t vaddudm\t$H4,$H4,$I4\n\n\tvmuleuw\t\t$T0,$I3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S4,$x70,$ctx_\n\tvmuleuw\t\t$T0,$I2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R4,$x60,$ctx_\n\n\tvmuleuw\t\t$T0,$I2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmuleuw\t\t$T0,$I1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t# (hash + inp[0:1]) * r^4\n\tvmulouw\t\t$T0,$H0,$R0\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S1,$x10,$ctx_\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R1,$x00,$ctx_\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S2,$x30,$ctx_\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R2,$x20,$ctx_\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t################################################################\n\t# horizontal addition\n\n\tvpermdi\t\t$H0,$ACC0,$ACC0,0b10\n\tvpermdi\t\t$H1,$ACC1,$ACC1,0b10\n\tvpermdi\t\t$H2,$ACC2,$ACC2,0b10\n\tvpermdi\t\t$H3,$ACC3,$ACC3,0b10\n\tvpermdi\t\t$H4,$ACC4,$ACC4,0b10\n\tvaddudm\t\t$ACC0,$ACC0,$H0\n\tvaddudm\t\t$ACC1,$ACC1,$H1\n\tvaddudm\t\t$ACC2,$ACC2,$H2\n\tvaddudm\t\t$ACC3,$ACC3,$H3\n\tvaddudm\t\t$ACC4,$ACC4,$H4\n\n\t################################################################\n\t# lazy reduction\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\tbeq\t\tLdone_vsx\n\n\tadd\t\tr6,$const,$len\n\n\tbe?lvx_u\t$_4,$x00,$const\t\t# byte swap mask\n\tlvx_u\t\t$T1,$x00,$inp\t\t# load last partial input block\n\tlvx_u\t\t$T2,$x10,$inp\n\tlvx_u\t\t$T3,$x20,$inp\n\tlvx_u\t\t$T4,$x30,$inp\n\tbe?vperm\t$T1,$T1,$T1,$_4\n\tbe?vperm\t$T2,$T2,$T2,$_4\n\tbe?vperm\t$T3,$T3,$T3,$_4\n\tbe?vperm\t$T4,$T4,$T4,$_4\n\n\tvpermdi\t\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\tvspltisb\t$_4,4\n\tvperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$I3,$T1,$T2,0b11\n\n\tvsrd\t\t$I1,$I0,$_26\n\tvsrd\t\t$I2,$I2,$_4\n\tvsrd\t\t$I4,$I3,$_40\n\tvsrd\t\t$I3,$I3,$_14\n\tvand\t\t$I0,$I0,$mask26\n\tvand\t\t$I1,$I1,$mask26\n\tvand\t\t$I2,$I2,$mask26\n\tvand\t\t$I3,$I3,$mask26\n\n\tvpermdi\t\t$T0,$T3,$T4,0b00\n\tvperm\t\t$T1,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$T2,$T3,$T4,0b11\n\n\tlvx_u\t\t$ACC0,$x00,r6\n\tlvx_u\t\t$ACC1,$x30,r6\n\n\tvsrd\t\t$T3,$T0,$_26\n\tvsrd\t\t$T1,$T1,$_4\n\tvsrd\t\t$T4,$T2,$_40\n\tvsrd\t\t$T2,$T2,$_14\n\tvand\t\t$T0,$T0,$mask26\n\tvand\t\t$T3,$T3,$mask26\n\tvand\t\t$T1,$T1,$mask26\n\tvand\t\t$T2,$T2,$mask26\n\n\t# inp[2]:inp[0]:inp[3]:inp[1]\n\tvmrgow\t\t$I4,$T4,$I4\n\tvmrgow\t\t$I0,$T0,$I0\n\tvmrgow\t\t$I1,$T3,$I1\n\tvmrgow\t\t$I2,$T1,$I2\n\tvmrgow\t\t$I3,$T2,$I3\n\tvor\t\t$I4,$I4,$padbits\n\n\tvperm\t\t$H0,$H0,$H0,$ACC0\t# move hash to right lane\n\tvand\t\t$I0,$I0,    $ACC1\t# mask redundant input lane[s]\n\tvperm\t\t$H1,$H1,$H1,$ACC0\n\tvand\t\t$I1,$I1,    $ACC1\n\tvperm\t\t$H2,$H2,$H2,$ACC0\n\tvand\t\t$I2,$I2,    $ACC1\n\tvperm\t\t$H3,$H3,$H3,$ACC0\n\tvand\t\t$I3,$I3,    $ACC1\n\tvperm\t\t$H4,$H4,$H4,$ACC0\n\tvand\t\t$I4,$I4,    $ACC1\n\n\tvaddudm\t\t$I0,$I0,$H0\t\t# accumulate hash\n\tvxor\t\t$H0,$H0,$H0\t\t# wipe hash value\n\tvaddudm\t\t$I1,$I1,$H1\n\tvxor\t\t$H1,$H1,$H1\n\tvaddudm\t\t$I2,$I2,$H2\n\tvxor\t\t$H2,$H2,$H2\n\tvaddudm\t\t$I3,$I3,$H3\n\tvxor\t\t$H3,$H3,$H3\n\tvaddudm\t\t$I4,$I4,$H4\n\tvxor\t\t$H4,$H4,$H4\n\n\txor.\t\t$len,$len,$len\n\tb\t\tLast_vsx\n\n.align\t4\nLdone_vsx:\n\t$POP\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\tli\t$x10,4\n\tli\t$x20,8\n\tli\t$x30,12\n\tli\t$x40,16\n\tstvwx_u\t$H0,$x00,$ctx\t\t\t# store hash\n\tstvwx_u\t$H1,$x10,$ctx\n\tstvwx_u\t$H2,$x20,$ctx\n\tstvwx_u\t$H3,$x30,$ctx\n\tstvwx_u\t$H4,$x40,$ctx\n\n\tlwz\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# pull vrsave\n\tmtlr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmtspr\t256,r12\t\t\t\t# restore vrsave\n\tlvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv21,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv22,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv23,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv24,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv25,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv26,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv27,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv28,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv29,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv30,r11,$sp\n\tlvx\tv31,r10,$sp\n\t$POP\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$VSXFRAME\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x04,1,0x80,5,4,0\n\t.long\t0\n.size\t__poly1305_blocks_vsx,.-__poly1305_blocks_vsx\n\n.align\t6\nLPICmeup:\n\tmflr\tr0\n\tbcl\t20,31,\\$+4\n\tmflr\t$const      # vvvvvv \"distance\" between . and 1st data entry\n\taddi\t$const,$const,`64-8`\n\tmtlr\tr0\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n\t.space\t`64-9*4`\n\n.quad\t0x0000000003ffffff,0x0000000003ffffff\t# mask26\n.quad\t0x000000000000001a,0x000000000000001a\t# _26\n.quad\t0x0000000000000028,0x0000000000000028\t# _40\n.quad\t0x000000000e0f0001,0x000000001e1f1011\t# I2perm\n.quad\t0x0100000001000000,0x0100000001000000\t# padbits\n.quad\t0x0706050403020100,0x0f0e0d0c0b0a0908\t# byte swap for big-endian\n\n.quad\t0x0000000000000000,0x0000000004050607\t# magic tail masks\n.quad\t0x0405060700000000,0x0000000000000000\n.quad\t0x0000000000000000,0x0405060700000000\n\n.quad\t0xffffffff00000000,0xffffffffffffffff\n.quad\t0xffffffff00000000,0xffffffff00000000\n.quad\t0x0000000000000000,0xffffffff00000000\n___\n}}}\n$code.=<<___;\n.asciz\t\"Poly1305 for PPC, CRYPTOGAMS by \\@dot-asm\"\n___\n\nforeach (split(\"\\n\",$code)) {\n\ts/\\`([^\\`]*)\\`/eval($1)/ge;\n\n\t# instructions prefixed with '?' are endian-specific and need\n\t# to be adjusted accordingly...\n\tif ($flavour !~ /le$/) {\t# big-endian\n\t    s/be\\?//\t\tor\n\t    s/le\\?/#le#/\n\t} else {\t\t\t# little-endian\n\t    s/le\\?//\t\tor\n\t    s/be\\?/#be#/\n\t}\n\n\tprint $_,\"\\n\";\n}\nclose STDOUT or die \"error closing STDOUT: $!\";\n"], "fixing_code": ["#! /usr/bin/env perl\n# Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.\n#\n# Licensed under the Apache License 2.0 (the \"License\").  You may not use\n# this file except in compliance with the License.  You can obtain a copy\n# in the file LICENSE in the source distribution or at\n# https://www.openssl.org/source/license.html\n\n#\n# ====================================================================\n# Written by Andy Polyakov, @dot-asm, initially for use in the OpenSSL\n# project. The module is dual licensed under OpenSSL and CRYPTOGAMS\n# licenses depending on where you obtain it. For further details see\n# https://github.com/dot-asm/cryptogams/.\n# ====================================================================\n#\n# This module implements Poly1305 hash for PowerPC.\n#\n# June 2015\n#\n# Numbers are cycles per processed byte with poly1305_blocks alone,\n# and improvement coefficients relative to gcc-generated code.\n#\n#\t\t\t-m32\t\t-m64\n#\n# Freescale e300\t14.8/+80%\t-\n# PPC74x0\t\t7.60/+60%\t-\n# PPC970\t\t7.00/+114%\t3.51/+205%\n# POWER7\t\t3.75/+260%\t1.93/+100%\n# POWER8\t\t-\t\t2.03/+200%\n# POWER9\t\t-\t\t2.00/+150%\n#\n# Do we need floating-point implementation for PPC? Results presented\n# in poly1305_ieee754.c are tricky to compare to, because they are for\n# compiler-generated code. On the other hand it's known that floating-\n# point performance can be dominated by FPU latency, which means that\n# there is limit even for ideally optimized (and even vectorized) code.\n# And this limit is estimated to be higher than above -m64 results. Or\n# in other words floating-point implementation can be meaningful to\n# consider only in 32-bit application context. We probably have to\n# recognize that 32-bit builds are getting less popular on high-end\n# systems and therefore tend to target embedded ones, which might not\n# even have FPU...\n#\n# On side note, Power ISA 2.07 enables vector base 2^26 implementation,\n# and POWER8 might have capacity to break 1.0 cycle per byte barrier...\n#\n# January 2019\n#\n# ... Unfortunately not:-( Estimate was a projection of ARM result,\n# but ARM has vector multiply-n-add instruction, while PowerISA does\n# not, not one usable in the context. Improvement is ~40% over -m64\n# result above and is ~1.43 on little-endian systems.\n\n# $output is the last argument if it looks like a file (it has an extension)\n# $flavour is the first argument if it doesn't look like a file\n$output = $#ARGV >= 0 && $ARGV[$#ARGV] =~ m|\\.\\w+$| ? pop : undef;\n$flavour = $#ARGV >= 0 && $ARGV[0] !~ m|\\.| ? shift : undef;\n\nif ($flavour =~ /64/) {\n\t$SIZE_T\t=8;\n\t$LRSAVE\t=2*$SIZE_T;\n\t$UCMP\t=\"cmpld\";\n\t$STU\t=\"stdu\";\n\t$POP\t=\"ld\";\n\t$PUSH\t=\"std\";\n} elsif ($flavour =~ /32/) {\n\t$SIZE_T\t=4;\n\t$LRSAVE\t=$SIZE_T;\n\t$UCMP\t=\"cmplw\";\n\t$STU\t=\"stwu\";\n\t$POP\t=\"lwz\";\n\t$PUSH\t=\"stw\";\n} else { die \"nonsense $flavour\"; }\n\n# Define endianness based on flavour\n# i.e.: linux64le\n$LITTLE_ENDIAN = ($flavour=~/le$/) ? $SIZE_T : 0;\n\n$0 =~ m/(.*[\\/\\\\])[^\\/\\\\]+$/; $dir=$1;\n( $xlate=\"${dir}ppc-xlate.pl\" and -f $xlate ) or\n( $xlate=\"${dir}../../perlasm/ppc-xlate.pl\" and -f $xlate) or\ndie \"can't locate ppc-xlate.pl\";\n\nopen STDOUT,\"| $^X $xlate $flavour \\\"$output\\\"\"\n    or die \"can't call $xlate: $!\";\n\n$FRAME=24*$SIZE_T;\n\n$sp=\"r1\";\nmy ($ctx,$inp,$len,$padbit) = map(\"r$_\",(3..6));\nmy ($mac,$nonce)=($inp,$len);\nmy $mask = \"r0\";\n\n$code=<<___;\n.machine\t\"any\"\n.text\n___\n\t\t\t\t\t\t\tif ($flavour =~ /64/) {\n###############################################################################\n# base 2^64 implementation\n\nmy ($h0,$h1,$h2,$d0,$d1,$d2, $r0,$r1,$s1, $t0,$t1) = map(\"r$_\",(7..12,27..31));\n\n$code.=<<___;\n.globl\t.poly1305_init_int\n.align\t4\n.poly1305_init_int:\n\txor\tr0,r0,r0\n\tstd\tr0,0($ctx)\t\t# zero hash value\n\tstd\tr0,8($ctx)\n\tstd\tr0,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\t$UCMP\t$inp,r0\n\tbeq-\tLno_key\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tld\t$d0,0($inp)\t\t# load key material\n\tld\t$d1,8($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$h0,4\n\tlwbrx\t$d0,0,$inp\t\t# load key material\n\tli\t$d1,8\n\tlwbrx\t$h0,$h0,$inp\n\tli\t$h1,12\n\tlwbrx\t$d1,$d1,$inp\n\tlwbrx\t$h1,$h1,$inp\n\tinsrdi\t$d0,$h0,32,0\n\tinsrdi\t$d1,$h1,32,0\n___\n$code.=<<___;\n\tlis\t$h1,0xfff\t\t# 0x0fff0000\n\tori\t$h1,$h1,0xfffc\t\t# 0x0ffffffc\n\tinsrdi\t$h1,$h1,32,0\t\t# 0x0ffffffc0ffffffc\n\tori\t$h0,$h1,3\t\t# 0x0ffffffc0fffffff\n\n\tand\t$d0,$d0,$h0\n\tand\t$d1,$d1,$h1\n\n\tstd\t$d0,32($ctx)\t\t# store key\n\tstd\t$d1,40($ctx)\n\nLno_key:\n\txor\tr3,r3,r3\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,2,0\n.size\t.poly1305_init_int,.-.poly1305_init_int\n\n.globl\t.poly1305_blocks\n.align\t4\n.poly1305_blocks:\nLpoly1305_blocks:\n\tsrdi.\t$len,$len,4\n\tbeq-\tLabort\n\n\t$STU\t$sp,-$FRAME($sp)\n\tmflr\tr0\n\t$PUSH\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$FRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$FRAME+$LRSAVE`($sp)\n\n\tld\t$r0,32($ctx)\t\t# load key\n\tld\t$r1,40($ctx)\n\n\tld\t$h0,0($ctx)\t\t# load hash value\n\tld\t$h1,8($ctx)\n\tld\t$h2,16($ctx)\n\n\tsrdi\t$s1,$r1,2\n\tmtctr\t$len\n\tadd\t$s1,$s1,$r1\t\t# s1 = r1 + r1>>2\n\tli\t$mask,3\n\tb\tLoop\n\n.align\t4\nLoop:\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tld\t$t0,0($inp)\t\t# load input\n\tld\t$t1,8($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$d0,4\n\tlwbrx\t$t0,0,$inp\t\t# load input\n\tli\t$t1,8\n\tlwbrx\t$d0,$d0,$inp\n\tli\t$d1,12\n\tlwbrx\t$t1,$t1,$inp\n\tlwbrx\t$d1,$d1,$inp\n\tinsrdi\t$t0,$d0,32,0\n\tinsrdi\t$t1,$d1,32,0\n___\n$code.=<<___;\n\taddi\t$inp,$inp,16\n\n\taddc\t$h0,$h0,$t0\t\t# accumulate input\n\tadde\t$h1,$h1,$t1\n\n\tmulld\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhdu\t$d1,$h0,$r0\n\tadde\t$h2,$h2,$padbit\n\n\tmulld\t$t0,$h1,$s1\t\t# h1*5*r1\n\tmulhdu\t$t1,$h1,$s1\n\taddc\t$d0,$d0,$t0\n\tadde\t$d1,$d1,$t1\n\n\tmulld\t$t0,$h0,$r1\t\t# h0*r1\n\tmulhdu\t$d2,$h0,$r1\n\taddc\t$d1,$d1,$t0\n\taddze\t$d2,$d2\n\n\tmulld\t$t0,$h1,$r0\t\t# h1*r0\n\tmulhdu\t$t1,$h1,$r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tmulld\t$t0,$h2,$s1\t\t# h2*5*r1\n\tmulld\t$t1,$h2,$r0\t\t# h2*r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tandc\t$t0,$d2,$mask\t\t# final reduction step\n\tand\t$h2,$d2,$mask\n\tsrdi\t$t1,$t0,2\n\tadd\t$t0,$t0,$t1\n\taddc\t$h0,$d0,$t0\n\taddze\t$h1,$d1\n\taddze\t$h2,$h2\n\n\tbdnz\tLoop\n\n\tstd\t$h0,0($ctx)\t\t# store hash value\n\tstd\t$h1,8($ctx)\n\tstd\t$h2,16($ctx)\n\n\t$POP\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$FRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$FRAME\nLabort:\n\tblr\n\t.long\t0\n\t.byte\t0,12,4,1,0x80,5,4,0\n.size\t.poly1305_blocks,.-.poly1305_blocks\n___\n{\nmy ($h0,$h1,$h2,$h3,$h4,$t0) = map(\"r$_\",(7..12));\n\n$code.=<<___;\n.globl\t.poly1305_emit\n.align\t5\n.poly1305_emit:\n\tlwz\t$h0,0($ctx)\t# load hash value base 2^26\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\tlwz\tr0,24($ctx)\t# is_base2_26\n\n\tsldi\t$h1,$h1,26\t# base 2^26 -> base 2^64\n\tsldi\t$t0,$h2,52\n\tsrdi\t$h2,$h2,12\n\tsldi\t$h3,$h3,14\n\tadd\t$h0,$h0,$h1\n\taddc\t$h0,$h0,$t0\n\tsldi\t$t0,$h4,40\n\tsrdi\t$h4,$h4,24\n\tadde\t$h1,$h2,$h3\n\taddc\t$h1,$h1,$t0\n\taddze\t$h2,$h4\n\n\tld\t$h3,0($ctx)\t# load hash value base 2^64\n\tld\t$h4,8($ctx)\n\tld\t$t0,16($ctx)\n\n\tneg\tr0,r0\n\txor\t$h0,$h0,$h3\t# choose between radixes\n\txor\t$h1,$h1,$h4\n\txor\t$h2,$h2,$t0\n\tand\t$h0,$h0,r0\n\tand\t$h1,$h1,r0\n\tand\t$h2,$h2,r0\n\txor\t$h0,$h0,$h3\n\txor\t$h1,$h1,$h4\n\txor\t$h2,$h2,$t0\n\n\taddic\t$h3,$h0,5\t# compare to modulus\n\taddze\t$h4,$h1\n\taddze\t$t0,$h2\n\n\tsrdi\t$t0,$t0,2\t# see if it carried/borrowed\n\tneg\t$t0,$t0\n\n\tandc\t$h0,$h0,$t0\n\tand\t$h3,$h3,$t0\n\tandc\t$h1,$h1,$t0\n\tand\t$h4,$h4,$t0\n\tor\t$h0,$h0,$h3\n\tor\t$h1,$h1,$h4\n\n\tlwz\t$t0,4($nonce)\n\tlwz\t$h2,12($nonce)\n\tlwz\t$h3,0($nonce)\n\tlwz\t$h4,8($nonce)\n\n\tinsrdi\t$h3,$t0,32,0\n\tinsrdi\t$h4,$h2,32,0\n\n\taddc\t$h0,$h0,$h3\t# accumulate nonce\n\tadde\t$h1,$h1,$h4\n\n\taddi\t$ctx,$mac,-1\n\taddi\t$mac,$mac,7\n\n\tstbu\t$h0,1($ctx)\t# write [little-endian] result\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tsrdi\t$h0,$h0,8\n\tstbu\t$h1,1($mac)\n\tsrdi\t$h1,$h1,8\n\n\tstbu\t$h0,1($ctx)\n\tstbu\t$h1,1($mac)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,3,0\n.size\t.poly1305_emit,.-.poly1305_emit\n___\n}\t\t\t\t\t\t\t} else {\n###############################################################################\n# base 2^32 implementation\n\nmy ($h0,$h1,$h2,$h3,$h4, $r0,$r1,$r2,$r3, $s1,$s2,$s3,\n    $t0,$t1,$t2,$t3, $D0,$D1,$D2,$D3, $d0,$d1,$d2,$d3\n   ) = map(\"r$_\",(7..12,14..31));\n\n$code.=<<___;\n.globl\t.poly1305_init_int\n.align\t4\n.poly1305_init_int:\n\txor\tr0,r0,r0\n\tstw\tr0,0($ctx)\t\t# zero hash value\n\tstw\tr0,4($ctx)\n\tstw\tr0,8($ctx)\n\tstw\tr0,12($ctx)\n\tstw\tr0,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\t$UCMP\t$inp,r0\n\tbeq-\tLno_key\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tlw\t$h0,0($inp)\t\t# load key material\n\tlw\t$h1,4($inp)\n\tlw\t$h2,8($inp)\n\tlw\t$h3,12($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$h1,4\n\tlwbrx\t$h0,0,$inp\t\t# load key material\n\tli\t$h2,8\n\tlwbrx\t$h1,$h1,$inp\n\tli\t$h3,12\n\tlwbrx\t$h2,$h2,$inp\n\tlwbrx\t$h3,$h3,$inp\n___\n$code.=<<___;\n\tlis\t$mask,0xf000\t\t# 0xf0000000\n\tli\t$r0,-4\n\tandc\t$r0,$r0,$mask\t\t# 0x0ffffffc\n\n\tandc\t$h0,$h0,$mask\n\tand\t$h1,$h1,$r0\n\tand\t$h2,$h2,$r0\n\tand\t$h3,$h3,$r0\n\n\tstw\t$h0,32($ctx)\t\t# store key\n\tstw\t$h1,36($ctx)\n\tstw\t$h2,40($ctx)\n\tstw\t$h3,44($ctx)\n\nLno_key:\n\txor\tr3,r3,r3\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,2,0\n.size\t.poly1305_init_int,.-.poly1305_init_int\n\n.globl\t.poly1305_blocks\n.align\t4\n.poly1305_blocks:\nLpoly1305_blocks:\n\tsrwi.\t$len,$len,4\n\tbeq-\tLabort\n\n\t$STU\t$sp,-$FRAME($sp)\n\tmflr\tr0\n\t$PUSH\tr14,`$FRAME-$SIZE_T*18`($sp)\n\t$PUSH\tr15,`$FRAME-$SIZE_T*17`($sp)\n\t$PUSH\tr16,`$FRAME-$SIZE_T*16`($sp)\n\t$PUSH\tr17,`$FRAME-$SIZE_T*15`($sp)\n\t$PUSH\tr18,`$FRAME-$SIZE_T*14`($sp)\n\t$PUSH\tr19,`$FRAME-$SIZE_T*13`($sp)\n\t$PUSH\tr20,`$FRAME-$SIZE_T*12`($sp)\n\t$PUSH\tr21,`$FRAME-$SIZE_T*11`($sp)\n\t$PUSH\tr22,`$FRAME-$SIZE_T*10`($sp)\n\t$PUSH\tr23,`$FRAME-$SIZE_T*9`($sp)\n\t$PUSH\tr24,`$FRAME-$SIZE_T*8`($sp)\n\t$PUSH\tr25,`$FRAME-$SIZE_T*7`($sp)\n\t$PUSH\tr26,`$FRAME-$SIZE_T*6`($sp)\n\t$PUSH\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$FRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$FRAME+$LRSAVE`($sp)\n\n\tlwz\t$r0,32($ctx)\t\t# load key\n\tlwz\t$r1,36($ctx)\n\tlwz\t$r2,40($ctx)\n\tlwz\t$r3,44($ctx)\n\n\tlwz\t$h0,0($ctx)\t\t# load hash value\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\n\tsrwi\t$s1,$r1,2\n\tsrwi\t$s2,$r2,2\n\tsrwi\t$s3,$r3,2\n\tadd\t$s1,$s1,$r1\t\t# si = ri + ri>>2\n\tadd\t$s2,$s2,$r2\n\tadd\t$s3,$s3,$r3\n\tmtctr\t$len\n\tli\t$mask,3\n\tb\tLoop\n\n.align\t4\nLoop:\n___\n$code.=<<___\tif ($LITTLE_ENDIAN);\n\tlwz\t$d0,0($inp)\t\t# load input\n\tlwz\t$d1,4($inp)\n\tlwz\t$d2,8($inp)\n\tlwz\t$d3,12($inp)\n___\n$code.=<<___\tif (!$LITTLE_ENDIAN);\n\tli\t$d1,4\n\tlwbrx\t$d0,0,$inp\t\t# load input\n\tli\t$d2,8\n\tlwbrx\t$d1,$d1,$inp\n\tli\t$d3,12\n\tlwbrx\t$d2,$d2,$inp\n\tlwbrx\t$d3,$d3,$inp\n___\n$code.=<<___;\n\taddi\t$inp,$inp,16\n\n\taddc\t$h0,$h0,$d0\t\t# accumulate input\n\tadde\t$h1,$h1,$d1\n\tadde\t$h2,$h2,$d2\n\n\tmullw\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhwu\t$D0,$h0,$r0\n\n\tmullw\t$d1,$h0,$r1\t\t# h0*r1\n\tmulhwu\t$D1,$h0,$r1\n\n\tmullw\t$d2,$h0,$r2\t\t# h0*r2\n\tmulhwu\t$D2,$h0,$r2\n\n\t adde\t$h3,$h3,$d3\n\t adde\t$h4,$h4,$padbit\n\n\tmullw\t$d3,$h0,$r3\t\t# h0*r3\n\tmulhwu\t$D3,$h0,$r3\n\n\tmullw\t$t0,$h1,$s3\t\t# h1*s3\n\tmulhwu\t$t1,$h1,$s3\n\n\tmullw\t$t2,$h1,$r0\t\t# h1*r0\n\tmulhwu\t$t3,$h1,$r0\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h1,$r1\t\t# h1*r1\n\tmulhwu\t$t1,$h1,$r1\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h1,$r2\t\t# h1*r2\n\tmulhwu\t$t3,$h1,$r2\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h2,$s2\t\t# h2*s2\n\tmulhwu\t$t1,$h2,$s2\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\n\tmullw\t$t2,$h2,$s3\t\t# h2*s3\n\tmulhwu\t$t3,$h2,$s3\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h2,$r0\t\t# h2*r0\n\tmulhwu\t$t1,$h2,$r0\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h2,$r1\t\t# h2*r1\n\tmulhwu\t$t3,$h2,$r1\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h3,$s1\t\t# h3*s1\n\tmulhwu\t$t1,$h3,$s1\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\n\tmullw\t$t2,$h3,$s2\t\t# h3*s2\n\tmulhwu\t$t3,$h3,$s2\n\t addc\t$d0,$d0,$t0\n\t adde\t$D0,$D0,$t1\n\n\tmullw\t$t0,$h3,$s3\t\t# h3*s3\n\tmulhwu\t$t1,$h3,$s3\n\t addc\t$d1,$d1,$t2\n\t adde\t$D1,$D1,$t3\n\n\tmullw\t$t2,$h3,$r0\t\t# h3*r0\n\tmulhwu\t$t3,$h3,$r0\n\t addc\t$d2,$d2,$t0\n\t adde\t$D2,$D2,$t1\n\n\tmullw\t$t0,$h4,$s1\t\t# h4*s1\n\t addc\t$d3,$d3,$t2\n\t adde\t$D3,$D3,$t3\n\taddc\t$d1,$d1,$t0\n\n\tmullw\t$t1,$h4,$s2\t\t# h4*s2\n\t addze\t$D1,$D1\n\taddc\t$d2,$d2,$t1\n\taddze\t$D2,$D2\n\n\tmullw\t$t2,$h4,$s3\t\t# h4*s3\n\taddc\t$d3,$d3,$t2\n\taddze\t$D3,$D3\n\n\tmullw\t$h4,$h4,$r0\t\t# h4*r0\n\n\taddc\t$h1,$d1,$D0\n\tadde\t$h2,$d2,$D1\n\tadde\t$h3,$d3,$D2\n\tadde\t$h4,$h4,$D3\n\n\tandc\t$D0,$h4,$mask\t\t# final reduction step\n\tand\t$h4,$h4,$mask\n\tsrwi\t$D1,$D0,2\n\tadd\t$D0,$D0,$D1\n\taddc\t$h0,$d0,$D0\n\taddze\t$h1,$h1\n\taddze\t$h2,$h2\n\taddze\t$h3,$h3\n\taddze\t$h4,$h4\n\n\tbdnz\tLoop\n\n\tstw\t$h0,0($ctx)\t\t# store hash value\n\tstw\t$h1,4($ctx)\n\tstw\t$h2,8($ctx)\n\tstw\t$h3,12($ctx)\n\tstw\t$h4,16($ctx)\n\n\t$POP\tr14,`$FRAME-$SIZE_T*18`($sp)\n\t$POP\tr15,`$FRAME-$SIZE_T*17`($sp)\n\t$POP\tr16,`$FRAME-$SIZE_T*16`($sp)\n\t$POP\tr17,`$FRAME-$SIZE_T*15`($sp)\n\t$POP\tr18,`$FRAME-$SIZE_T*14`($sp)\n\t$POP\tr19,`$FRAME-$SIZE_T*13`($sp)\n\t$POP\tr20,`$FRAME-$SIZE_T*12`($sp)\n\t$POP\tr21,`$FRAME-$SIZE_T*11`($sp)\n\t$POP\tr22,`$FRAME-$SIZE_T*10`($sp)\n\t$POP\tr23,`$FRAME-$SIZE_T*9`($sp)\n\t$POP\tr24,`$FRAME-$SIZE_T*8`($sp)\n\t$POP\tr25,`$FRAME-$SIZE_T*7`($sp)\n\t$POP\tr26,`$FRAME-$SIZE_T*6`($sp)\n\t$POP\tr27,`$FRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$FRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$FRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$FRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$FRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$FRAME\nLabort:\n\tblr\n\t.long\t0\n\t.byte\t0,12,4,1,0x80,18,4,0\n.size\t.poly1305_blocks,.-.poly1305_blocks\n___\n{\nmy ($h0,$h1,$h2,$h3,$h4,$t0,$t1) = map(\"r$_\",(6..12));\n\n$code.=<<___;\n.globl\t.poly1305_emit\n.align\t5\n.poly1305_emit:\n\tlwz\tr0,24($ctx)\t# is_base2_26\n\tlwz\t$h0,0($ctx)\t# load hash value\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\tcmplwi\tr0,0\n\tbeq\tLemit_base2_32\n\n\tslwi\t$t0,$h1,26\t# base 2^26 -> base 2^32\n\tsrwi\t$h1,$h1,6\n\tslwi\t$t1,$h2,20\n\tsrwi\t$h2,$h2,12\n\taddc\t$h0,$h0,$t0\n\tslwi\t$t0,$h3,14\n\tsrwi\t$h3,$h3,18\n\tadde\t$h1,$h1,$t1\n\tslwi\t$t1,$h4,8\n\tsrwi\t$h4,$h4,24\n\tadde\t$h2,$h2,$t0\n\tadde\t$h3,$h3,$t1\n\taddze\t$h4,$h4\n\nLemit_base2_32:\n\taddic\tr0,$h0,5\t# compare to modulus\n\taddze\tr0,$h1\n\taddze\tr0,$h2\n\taddze\tr0,$h3\n\taddze\tr0,$h4\n\n\tsrwi\tr0,r0,2\t\t# see if it carried/borrowed\n\tneg\tr0,r0\n\tandi.\tr0,r0,5\n\n\taddc\t$h0,$h0,r0\n\tlwz\tr0,0($nonce)\n\taddze\t$h1,$h1\n\tlwz\t$t0,4($nonce)\n\taddze\t$h2,$h2\n\tlwz\t$t1,8($nonce)\n\taddze\t$h3,$h3\n\tlwz\t$h4,12($nonce)\n\n\taddc\t$h0,$h0,r0\t# accumulate nonce\n\tadde\t$h1,$h1,$t0\n\tadde\t$h2,$h2,$t1\n\tadde\t$h3,$h3,$h4\n\n\taddi\t$ctx,$mac,-1\n\taddi\t$mac,$mac,7\n\n\tstbu\t$h0,1($ctx)\t# write [little-endian] result\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tsrwi\t$h0,$h0,8\n\tstbu\t$h2,1($mac)\n\tsrwi\t$h2,$h2,8\n\n\tstbu\t$h0,1($ctx)\n\tstbu\t$h2,1($mac)\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tsrwi\t$h1,$h1,8\n\tstbu\t$h3,1($mac)\n\tsrwi\t$h3,$h3,8\n\n\tstbu\t$h1,1($ctx)\n\tstbu\t$h3,1($mac)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,3,0\n.size\t.poly1305_emit,.-.poly1305_emit\n___\n}\t\t\t\t\t\t\t}\n{{{\n########################################################################\n# PowerISA 2.07/VSX section                                            #\n########################################################################\n\nmy $LOCALS= 6*$SIZE_T;\nmy $VSXFRAME = $LOCALS + 6*$SIZE_T;\n   $VSXFRAME += 128;\t# local variables\n   $VSXFRAME += 12*16;\t# v20-v31 offload\n\nmy $BIG_ENDIAN = ($flavour !~ /le/) ? 4 : 0;\n\n########################################################################\n# Layout of opaque area is following:\n#\n#\tunsigned __int32 h[5];\t\t# current hash value base 2^26\n#\tunsigned __int32 pad;\n#\tunsigned __int32 is_base2_26, pad;\n#\tunsigned __int64 r[2];\t\t# key value base 2^64\n#\tstruct { unsigned __int32 r^2, r^4, r^1, r^3; } r[9];\n#\n# where r^n are base 2^26 digits of powers of multiplier key. There are\n# 5 digits, but last four are interleaved with multiples of 5, totalling\n# in 9 elements: r0, r1, 5*r1, r2, 5*r2, r3, 5*r3, r4, 5*r4. Order of\n# powers is as they appear in register, not memory.\n\nmy ($H0, $H1, $H2, $H3, $H4) = map(\"v$_\",(0..4));\nmy ($I0, $I1, $I2, $I3, $I4) = map(\"v$_\",(5..9));\nmy ($R0, $R1, $S1, $R2, $S2) = map(\"v$_\",(10..14));\nmy      ($R3, $S3, $R4, $S4) = ($R1, $S1, $R2, $S2);\nmy ($ACC0, $ACC1, $ACC2, $ACC3, $ACC4) = map(\"v$_\",(15..19));\nmy ($T0, $T1, $T2, $T3, $T4) = map(\"v$_\",(20..24));\nmy ($_26,$_4,$_40,$_14,$mask26,$padbits,$I2perm) = map(\"v$_\",(25..31));\nmy ($x00,$x60,$x70,$x10,$x20,$x30,$x40,$x50) = (0, map(\"r$_\",(7,8,27..31)));\nmy ($ctx_,$_ctx,$const) = map(\"r$_\",(10..12));\n\n\t\t\t\t\t\t\tif ($flavour =~ /64/) {\n###############################################################################\n# setup phase of poly1305_blocks_vsx is different on 32- and 64-bit platforms,\n# but the base 2^26 computational part is same...\n\nmy ($h0,$h1,$h2,$d0,$d1,$d2, $r0,$r1,$s1, $t0,$t1) = map(\"r$_\",(6..11,27..31));\nmy $mask = \"r0\";\n\n$code.=<<___;\n.globl\t.poly1305_blocks_vsx\n.align\t5\n.poly1305_blocks_vsx:\n\tlwz\tr7,24($ctx)\t\t# is_base2_26\n\tcmpldi\t$len,128\n\tbge\t__poly1305_blocks_vsx\n\n\tneg\tr0,r7\t\t\t# is_base2_26 as mask\n\tlwz\tr7,0($ctx)\t\t# load hash base 2^26\n\tlwz\tr8,4($ctx)\n\tlwz\tr9,8($ctx)\n\tlwz\tr10,12($ctx)\n\tlwz\tr11,16($ctx)\n\n\tsldi\tr8,r8,26\t\t# base 2^26 -> base 2^64\n\tsldi\tr12,r9,52\n\tadd\tr7,r7,r8\n\tsrdi\tr9,r9,12\n\tsldi\tr10,r10,14\n\taddc\tr7,r7,r12\n\tsldi\tr8,r11,40\n\tadde\tr9,r9,r10\n\tsrdi\tr11,r11,24\n\taddc\tr9,r9,r8\n\taddze\tr11,r11\n\n\tld\tr8,0($ctx)\t\t# load hash base 2^64\n\tld\tr10,8($ctx)\n\tld\tr12,16($ctx)\n\n\txor\tr7,r7,r8\t\t# select between radixes\n\txor\tr9,r9,r10\n\txor\tr11,r11,r12\n\tand\tr7,r7,r0\n\tand\tr9,r9,r0\n\tand\tr11,r11,r0\n\txor\tr7,r7,r8\n\txor\tr9,r9,r10\n\txor\tr11,r11,r12\n\n\tli\tr0,0\n\tstd\tr7,0($ctx)\t\t# store hash base 2^64\n\tstd\tr9,8($ctx)\n\tstd\tr11,16($ctx)\n\tstw\tr0,24($ctx)\t\t# clear is_base2_26\n\n\tb\tLpoly1305_blocks\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,4,0\n.size\t.poly1305_blocks_vsx,.-.poly1305_blocks_vsx\n\n.align\t5\n__poly1305_mul:\n\tmulld\t$d0,$h0,$r0\t\t# h0*r0\n\tmulhdu\t$d1,$h0,$r0\n\n\tmulld\t$t0,$h1,$s1\t\t# h1*5*r1\n\tmulhdu\t$t1,$h1,$s1\n\taddc\t$d0,$d0,$t0\n\tadde\t$d1,$d1,$t1\n\n\tmulld\t$t0,$h0,$r1\t\t# h0*r1\n\tmulhdu\t$d2,$h0,$r1\n\taddc\t$d1,$d1,$t0\n\taddze\t$d2,$d2\n\n\tmulld\t$t0,$h1,$r0\t\t# h1*r0\n\tmulhdu\t$t1,$h1,$r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tmulld\t$t0,$h2,$s1\t\t# h2*5*r1\n\tmulld\t$t1,$h2,$r0\t\t# h2*r0\n\taddc\t$d1,$d1,$t0\n\tadde\t$d2,$d2,$t1\n\n\tandc\t$t0,$d2,$mask\t\t# final reduction step\n\tand\t$h2,$d2,$mask\n\tsrdi\t$t1,$t0,2\n\tadd\t$t0,$t0,$t1\n\taddc\t$h0,$d0,$t0\n\taddze\t$h1,$d1\n\taddze\t$h2,$h2\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_mul,.-__poly1305_mul\n\n.align\t5\n__poly1305_splat:\n\textrdi\t$d0,$h0,26,38\n\textrdi\t$d1,$h0,26,12\n\tstw\t$d0,0x00($t1)\n\n\textrdi\t$d2,$h0,12,0\n\tslwi\t$d0,$d1,2\n\tstw\t$d1,0x10($t1)\n\tadd\t$d0,$d0,$d1\t\t# * 5\n\tstw\t$d0,0x20($t1)\n\n\tinsrdi\t$d2,$h1,14,38\n\tslwi\t$d0,$d2,2\n\tstw\t$d2,0x30($t1)\n\tadd\t$d0,$d0,$d2\t\t# * 5\n\tstw\t$d0,0x40($t1)\n\n\textrdi\t$d1,$h1,26,24\n\textrdi\t$d2,$h1,24,0\n\tslwi\t$d0,$d1,2\n\tstw\t$d1,0x50($t1)\n\tadd\t$d0,$d0,$d1\t\t# * 5\n\tstw\t$d0,0x60($t1)\n\n\tinsrdi\t$d2,$h2,3,37\n\tslwi\t$d0,$d2,2\n\tstw\t$d2,0x70($t1)\n\tadd\t$d0,$d0,$d2\t\t# * 5\n\tstw\t$d0,0x80($t1)\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_splat,.-__poly1305_splat\n\n.align\t5\n__poly1305_blocks_vsx:\n\t$STU\t$sp,-$VSXFRAME($sp)\n\tmflr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmfspr\tr12,256\n\tstvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv21,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv22,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv23,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv24,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv25,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv26,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv27,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv28,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv29,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv30,r10,$sp\n\tstvx\tv31,r11,$sp\n\tstw\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# save vrsave\n\tli\tr12,-1\n\tmtspr\t256,r12\t\t\t# preserve all AltiVec registers\n\t$PUSH\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\n\tbl\tLPICmeup\n\n\tli\t$x10,0x10\n\tli\t$x20,0x20\n\tli\t$x30,0x30\n\tli\t$x40,0x40\n\tli\t$x50,0x50\n\tlvx_u\t$mask26,$x00,$const\n\tlvx_u\t$_26,$x10,$const\n\tlvx_u\t$_40,$x20,$const\n\tlvx_u\t$I2perm,$x30,$const\n\tlvx_u\t$padbits,$x40,$const\n\n\tcmplwi\tr7,0\t\t\t# is_base2_26?\n\tbne\tLskip_init_vsx\n\n\tld\t$r0,32($ctx)\t\t# load key base 2^64\n\tld\t$r1,40($ctx)\n\tsrdi\t$s1,$r1,2\n\tli\t$mask,3\n\tadd\t$s1,$s1,$r1\t\t# s1 = r1 + r1>>2\n\n\tmr\t$h0,$r0\t\t\t# \"calculate\" r^1\n\tmr\t$h1,$r1\n\tli\t$h2,0\n\taddi\t$t1,$ctx,`48+(12^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^2\n\taddi\t$t1,$ctx,`48+(4^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^3\n\taddi\t$t1,$ctx,`48+(8^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tbl\t__poly1305_mul\t\t# calculate r^4\n\taddi\t$t1,$ctx,`48+(0^$BIG_ENDIAN)`\n\tbl\t__poly1305_splat\n\n\tld\t$h0,0($ctx)\t\t# load hash\n\tld\t$h1,8($ctx)\n\tld\t$h2,16($ctx)\n\n\textrdi\t$d0,$h0,26,38\t\t# base 2^64 -> base 2^26\n\textrdi\t$d1,$h0,26,12\n\textrdi\t$d2,$h0,12,0\n\tmtvrwz\t$H0,$d0\n\tinsrdi\t$d2,$h1,14,38\n\tmtvrwz\t$H1,$d1\n\textrdi\t$d1,$h1,26,24\n\tmtvrwz\t$H2,$d2\n\textrdi\t$d2,$h1,24,0\n\tmtvrwz\t$H3,$d1\n\tinsrdi\t$d2,$h2,3,37\n\tmtvrwz\t$H4,$d2\n___\n\t\t\t\t\t\t\t} else {\n###############################################################################\n# 32-bit initialization\n\nmy ($h0,$h1,$h2,$h3,$h4,$t0,$t1) = map(\"r$_\",(7..11,0,12));\nmy ($R3,$S3,$R4,$S4)=($I1,$I2,$I3,$I4);\n\n$code.=<<___;\n.globl\t.poly1305_blocks_vsx\n.align\t5\n.poly1305_blocks_vsx:\n\tlwz\tr7,24($ctx)\t\t# is_base2_26\n\tcmplwi\t$len,128\n\tbge\t__poly1305_blocks_vsx\n\tcmplwi\tr7,0\n\tbeq\tLpoly1305_blocks\n\n\tlwz\t$h0,0($ctx)\t\t# load hash\n\tlwz\t$h1,4($ctx)\n\tlwz\t$h2,8($ctx)\n\tlwz\t$h3,12($ctx)\n\tlwz\t$h4,16($ctx)\n\n\tslwi\t$t0,$h1,26\t\t# base 2^26 -> base 2^32\n\tsrwi\t$h1,$h1,6\n\tslwi\t$t1,$h2,20\n\tsrwi\t$h2,$h2,12\n\taddc\t$h0,$h0,$t0\n\tslwi\t$t0,$h3,14\n\tsrwi\t$h3,$h3,18\n\tadde\t$h1,$h1,$t1\n\tslwi\t$t1,$h4,8\n\tsrwi\t$h4,$h4,24\n\tadde\t$h2,$h2,$t0\n\tli\t$t0,0\n\tadde\t$h3,$h3,$t1\n\taddze\t$h4,$h4\n\n\tstw\t$h0,0($ctx)\t\t# store hash base 2^32\n\tstw\t$h1,4($ctx)\n\tstw\t$h2,8($ctx)\n\tstw\t$h3,12($ctx)\n\tstw\t$h4,16($ctx)\n\tstw\t$t0,24($ctx)\t\t# clear is_base2_26\n\n\tb\tLpoly1305_blocks\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,4,0\n.size\t.poly1305_blocks_vsx,.-.poly1305_blocks_vsx\n\n.align\t5\n__poly1305_mul:\n\tvmulouw\t\t$ACC0,$H0,$R0\n\tvmulouw\t\t$ACC1,$H1,$R0\n\tvmulouw\t\t$ACC2,$H2,$R0\n\tvmulouw\t\t$ACC3,$H3,$R0\n\tvmulouw\t\t$ACC4,$H4,$R0\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t################################################################\n\t# lazy reduction\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n.size\t__poly1305_mul,.-__poly1305_mul\n\n.align\t5\n__poly1305_blocks_vsx:\n\t$STU\t$sp,-$VSXFRAME($sp)\n\tmflr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmfspr\tr12,256\n\tstvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv21,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv22,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv23,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv24,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv25,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv26,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv27,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv28,r10,$sp\n\taddi\tr10,r10,32\n\tstvx\tv29,r11,$sp\n\taddi\tr11,r11,32\n\tstvx\tv30,r10,$sp\n\tstvx\tv31,r11,$sp\n\tstw\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# save vrsave\n\tli\tr12,-1\n\tmtspr\t256,r12\t\t\t# preserve all AltiVec registers\n\t$PUSH\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$PUSH\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$PUSH\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$PUSH\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$PUSH\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\t$PUSH\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\n\tbl\tLPICmeup\n\n\tli\t$x10,0x10\n\tli\t$x20,0x20\n\tli\t$x30,0x30\n\tli\t$x40,0x40\n\tli\t$x50,0x50\n\tlvx_u\t$mask26,$x00,$const\n\tlvx_u\t$_26,$x10,$const\n\tlvx_u\t$_40,$x20,$const\n\tlvx_u\t$I2perm,$x30,$const\n\tlvx_u\t$padbits,$x40,$const\n\n\tcmplwi\tr7,0\t\t\t# is_base2_26?\n\tbne\tLskip_init_vsx\n\n\tlwz\t$h1,32($ctx)\t\t# load key base 2^32\n\tlwz\t$h2,36($ctx)\n\tlwz\t$h3,40($ctx)\n\tlwz\t$h4,44($ctx)\n\n\textrwi\t$h0,$h1,26,6\t\t# base 2^32 -> base 2^26\n\textrwi\t$h1,$h1,6,0\n\tinsrwi\t$h1,$h2,20,6\n\textrwi\t$h2,$h2,12,0\n\tinsrwi\t$h2,$h3,14,6\n\textrwi\t$h3,$h3,18,0\n\tinsrwi\t$h3,$h4,8,6\n\textrwi\t$h4,$h4,24,0\n\n\tmtvrwz\t$R0,$h0\n\tslwi\t$h0,$h1,2\n\tmtvrwz\t$R1,$h1\n\tadd\t$h1,$h1,$h0\n\tmtvrwz\t$S1,$h1\n\tslwi\t$h1,$h2,2\n\tmtvrwz\t$R2,$h2\n\tadd\t$h2,$h2,$h1\n\tmtvrwz\t$S2,$h2\n\tslwi\t$h2,$h3,2\n\tmtvrwz\t$R3,$h3\n\tadd\t$h3,$h3,$h2\n\tmtvrwz\t$S3,$h3\n\tslwi\t$h3,$h4,2\n\tmtvrwz\t$R4,$h4\n\tadd\t$h4,$h4,$h3\n\tmtvrwz\t$S4,$h4\n\n\tvmr\t$H0,$R0\n\tvmr\t$H1,$R1\n\tvmr\t$H2,$R2\n\tvmr\t$H3,$R3\n\tvmr\t$H4,$R4\n\n\tbl\t__poly1305_mul\t\t# r^1:- * r^1:-\n\n\tvpermdi\t$R0,$H0,$R0,0b00\n\tvpermdi\t$R1,$H1,$R1,0b00\n\tvpermdi\t$R2,$H2,$R2,0b00\n\tvpermdi\t$R3,$H3,$R3,0b00\n\tvpermdi\t$R4,$H4,$R4,0b00\n\tvpermdi\t$H0,$H0,$H0,0b00\n\tvpermdi\t$H1,$H1,$H1,0b00\n\tvpermdi\t$H2,$H2,$H2,0b00\n\tvpermdi\t$H3,$H3,$H3,0b00\n\tvpermdi\t$H4,$H4,$H4,0b00\n\tvsld\t$S1,$R1,$T0\t\t# <<2\n\tvsld\t$S2,$R2,$T0\n\tvsld\t$S3,$R3,$T0\n\tvsld\t$S4,$R4,$T0\n\tvaddudm\t$S1,$S1,$R1\n\tvaddudm\t$S2,$S2,$R2\n\tvaddudm\t$S3,$S3,$R3\n\tvaddudm\t$S4,$S4,$R4\n\n\tbl\t__poly1305_mul\t\t# r^2:r^2 * r^2:r^1\n\n\taddi\t$h0,$ctx,0x60\n\tlwz\t$h1,0($ctx)\t\t# load hash\n\tlwz\t$h2,4($ctx)\n\tlwz\t$h3,8($ctx)\n\tlwz\t$h4,12($ctx)\n\tlwz\t$t0,16($ctx)\n\n\tvmrgow\t$R0,$R0,$H0\t\t# r^2:r^4:r^1:r^3\n\tvmrgow\t$R1,$R1,$H1\n\tvmrgow\t$R2,$R2,$H2\n\tvmrgow\t$R3,$R3,$H3\n\tvmrgow\t$R4,$R4,$H4\n\tvslw\t$S1,$R1,$T0\t\t# <<2\n\tvslw\t$S2,$R2,$T0\n\tvslw\t$S3,$R3,$T0\n\tvslw\t$S4,$R4,$T0\n\tvadduwm\t$S1,$S1,$R1\n\tvadduwm\t$S2,$S2,$R2\n\tvadduwm\t$S3,$S3,$R3\n\tvadduwm\t$S4,$S4,$R4\n\n\tstvx_u\t$R0,$x30,$ctx\n\tstvx_u\t$R1,$x40,$ctx\n\tstvx_u\t$S1,$x50,$ctx\n\tstvx_u\t$R2,$x00,$h0\n\tstvx_u\t$S2,$x10,$h0\n\tstvx_u\t$R3,$x20,$h0\n\tstvx_u\t$S3,$x30,$h0\n\tstvx_u\t$R4,$x40,$h0\n\tstvx_u\t$S4,$x50,$h0\n\n\textrwi\t$h0,$h1,26,6\t\t# base 2^32 -> base 2^26\n\textrwi\t$h1,$h1,6,0\n\tmtvrwz\t$H0,$h0\n\tinsrwi\t$h1,$h2,20,6\n\textrwi\t$h2,$h2,12,0\n\tmtvrwz\t$H1,$h1\n\tinsrwi\t$h2,$h3,14,6\n\textrwi\t$h3,$h3,18,0\n\tmtvrwz\t$H2,$h2\n\tinsrwi\t$h3,$h4,8,6\n\textrwi\t$h4,$h4,24,0\n\tmtvrwz\t$H3,$h3\n\tinsrwi\t$h4,$t0,3,5\n\tmtvrwz\t$H4,$h4\n___\n\t\t\t\t\t\t\t}\n$code.=<<___;\n\tli\tr0,1\n\tstw\tr0,24($ctx)\t\t# set is_base2_26\n\tb\tLoaded_vsx\n\n.align\t4\nLskip_init_vsx:\n\tli\t\t$x10,4\n\tli\t\t$x20,8\n\tli\t\t$x30,12\n\tli\t\t$x40,16\n\tlvwzx_u\t\t$H0,$x00,$ctx\n\tlvwzx_u\t\t$H1,$x10,$ctx\n\tlvwzx_u\t\t$H2,$x20,$ctx\n\tlvwzx_u\t\t$H3,$x30,$ctx\n\tlvwzx_u\t\t$H4,$x40,$ctx\n\nLoaded_vsx:\n\tli\t\t$x10,0x10\n\tli\t\t$x20,0x20\n\tli\t\t$x30,0x30\n\tli\t\t$x40,0x40\n\tli\t\t$x50,0x50\n\tli\t\t$x60,0x60\n\tli\t\t$x70,0x70\n\taddi\t\t$ctx_,$ctx,64\t\t# &ctx->r[1]\n\taddi\t\t$_ctx,$sp,`$LOCALS+15`\t# &ctx->r[1], r^2:r^4 shadow\n\n\tvxor\t\t$T0,$T0,$T0\t\t# ensure second half is zero\n\tvpermdi\t\t$H0,$H0,$T0,0b00\n\tvpermdi\t\t$H1,$H1,$T0,0b00\n\tvpermdi\t\t$H2,$H2,$T0,0b00\n\tvpermdi\t\t$H3,$H3,$T0,0b00\n\tvpermdi\t\t$H4,$H4,$T0,0b00\n\n\tbe?lvx_u\t$_4,$x50,$const\t\t# byte swap mask\n\tlvx_u\t\t$T1,$x00,$inp\t\t# load first input block\n\tlvx_u\t\t$T2,$x10,$inp\n\tlvx_u\t\t$T3,$x20,$inp\n\tlvx_u\t\t$T4,$x30,$inp\n\tbe?vperm\t$T1,$T1,$T1,$_4\n\tbe?vperm\t$T2,$T2,$T2,$_4\n\tbe?vperm\t$T3,$T3,$T3,$_4\n\tbe?vperm\t$T4,$T4,$T4,$_4\n\n\tvpermdi\t\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\tvspltisb\t$_4,4\n\tvperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvspltisb\t$_14,14\n\tvpermdi\t\t$I3,$T1,$T2,0b11\n\n\tvsrd\t\t$I1,$I0,$_26\n\tvsrd\t\t$I2,$I2,$_4\n\tvsrd\t\t$I4,$I3,$_40\n\tvsrd\t\t$I3,$I3,$_14\n\tvand\t\t$I0,$I0,$mask26\n\tvand\t\t$I1,$I1,$mask26\n\tvand\t\t$I2,$I2,$mask26\n\tvand\t\t$I3,$I3,$mask26\n\n\tvpermdi\t\t$T1,$T3,$T4,0b00\n\tvperm\t\t$T2,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$T3,$T3,$T4,0b11\n\n\tvsrd\t\t$T0,$T1,$_26\n\tvsrd\t\t$T2,$T2,$_4\n\tvsrd\t\t$T4,$T3,$_40\n\tvsrd\t\t$T3,$T3,$_14\n\tvand\t\t$T1,$T1,$mask26\n\tvand\t\t$T0,$T0,$mask26\n\tvand\t\t$T2,$T2,$mask26\n\tvand\t\t$T3,$T3,$mask26\n\n\t# inp[2]:inp[0]:inp[3]:inp[1]\n\tvmrgow\t\t$I4,$T4,$I4\n\tvmrgow\t\t$I0,$T1,$I0\n\tvmrgow\t\t$I1,$T0,$I1\n\tvmrgow\t\t$I2,$T2,$I2\n\tvmrgow\t\t$I3,$T3,$I3\n\tvor\t\t$I4,$I4,$padbits\n\n\tlvx_splt\t$R0,$x30,$ctx\t\t# taking lvx_vsplt out of loop\n\tlvx_splt\t$R1,$x00,$ctx_\t\t# gives ~8% improvement\n\tlvx_splt\t$S1,$x10,$ctx_\n\tlvx_splt\t$R2,$x20,$ctx_\n\tlvx_splt\t$S2,$x30,$ctx_\n\tlvx_splt\t$T1,$x40,$ctx_\n\tlvx_splt\t$T2,$x50,$ctx_\n\tlvx_splt\t$T3,$x60,$ctx_\n\tlvx_splt\t$T4,$x70,$ctx_\n\tstvx\t\t$R1,$x00,$_ctx\n\tstvx\t\t$S1,$x10,$_ctx\n\tstvx\t\t$R2,$x20,$_ctx\n\tstvx\t\t$S2,$x30,$_ctx\n\tstvx\t\t$T1,$x40,$_ctx\n\tstvx\t\t$T2,$x50,$_ctx\n\tstvx\t\t$T3,$x60,$_ctx\n\tstvx\t\t$T4,$x70,$_ctx\n\n\taddi\t\t$inp,$inp,0x40\n\taddi\t\t$const,$const,0x50\n\taddi\t\tr0,$len,-64\n\tsrdi\t\tr0,r0,6\n\tmtctr\t\tr0\n\tb\t\tLoop_vsx\n\n.align\t4\nLoop_vsx:\n\t################################################################\n\t## ((inp[0]*r^4+inp[2]*r^2+inp[4])*r^4+inp[6]*r^2\n\t## ((inp[1]*r^4+inp[3]*r^2+inp[5])*r^3+inp[7]*r\n\t##   \\___________________/\n\t##\n\t## Note that we start with inp[2:3]*r^2. This is because it\n\t## doesn't depend on reduction in previous iteration.\n\t################################################################\n\t## d4 = h4*r0 + h3*r1   + h2*r2   + h1*r3   + h0*r4\n\t## d3 = h3*r0 + h2*r1   + h1*r2   + h0*r3   + h4*5*r4\n\t## d2 = h2*r0 + h1*r1   + h0*r2   + h4*5*r3 + h3*5*r4\n\t## d1 = h1*r0 + h0*r1   + h4*5*r2 + h3*5*r3 + h2*5*r4\n\t## d0 = h0*r0 + h4*5*r1 + h3*5*r2 + h2*5*r3 + h1*5*r4\n\n\tvmuleuw\t\t$ACC0,$I0,$R0\n\tvmuleuw\t\t$ACC1,$I0,$R1\n\tvmuleuw\t\t$ACC2,$I0,$R2\n\tvmuleuw\t\t$ACC3,$I1,$R2\n\n\tvmuleuw\t\t$T0,$I1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\t vmuleuw\t$ACC4,$I2,$R2\n\tvmuleuw\t\t$T0,$I4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S3,$x50,$_ctx\n\tvmuleuw\t\t$T0,$I3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R3,$x40,$_ctx\n\n\t vaddudm\t$H2,$H2,$I2\n\t vaddudm\t$H0,$H0,$I0\n\t vaddudm\t$H3,$H3,$I3\n\t vaddudm\t$H1,$H1,$I1\n\t vaddudm\t$H4,$H4,$I4\n\n\tvmuleuw\t\t$T0,$I3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S4,$x70,$_ctx\n\tvmuleuw\t\t$T0,$I4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R4,$x60,$_ctx\n\n\tvmuleuw\t\t$T0,$I2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t be?lvx_u\t$_4,$x00,$const\t\t# byte swap mask\n\t lvx_u\t\t$T1,$x00,$inp\t\t# load next input block\n\t lvx_u\t\t$T2,$x10,$inp\n\t lvx_u\t\t$T3,$x20,$inp\n\t lvx_u\t\t$T4,$x30,$inp\n\t be?vperm\t$T1,$T1,$T1,$_4\n\t be?vperm\t$T2,$T2,$T2,$_4\n\t be?vperm\t$T3,$T3,$T3,$_4\n\t be?vperm\t$T4,$T4,$T4,$_4\n\n\tvmuleuw\t\t$T0,$I1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vpermdi\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\t vspltisb\t$_4,4\n\t vperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\t vpermdi\t$I3,$T1,$T2,0b11\n\n\t# (hash + inp[0:1]) * r^4\n\tvmulouw\t\t$T0,$H0,$R0\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vpermdi\t$T1,$T3,$T4,0b00\n\t vperm\t\t$T2,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\t vpermdi\t$T3,$T3,$T4,0b11\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S1,$x10,$_ctx\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R1,$x00,$_ctx\n\n\t vsrd\t\t$I1,$I0,$_26\n\t vsrd\t\t$I2,$I2,$_4\n\t vsrd\t\t$I4,$I3,$_40\n\t vsrd\t\t$I3,$I3,$_14\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx\t\t$S2,$x30,$_ctx\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx\t\t$R2,$x20,$_ctx\n\n\t vand\t\t$I0,$I0,$mask26\n\t vand\t\t$I1,$I1,$mask26\n\t vand\t\t$I2,$I2,$mask26\n\t vand\t\t$I3,$I3,$mask26\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vsrd\t\t$T2,$T2,$_4\n\t vsrd\t\t$_4,$T1,$_26\n\t vsrd\t\t$T4,$T3,$_40\n\t vsrd\t\t$T3,$T3,$_14\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t vand\t\t$T1,$T1,$mask26\n\t vand\t\t$_4,$_4,$mask26\n\t vand\t\t$T2,$T2,$mask26\n\t vand\t\t$T3,$T3,$mask26\n\n\t################################################################\n\t# lazy reduction as discussed in \"NEON crypto\" by D.J. Bernstein\n\t# and P. Schwabe\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\t vmrgow\t\t$I4,$T4,$I4\n\t vmrgow\t\t$I0,$T1,$I0\n\t vmrgow\t\t$I1,$_4,$I1\n\t vmrgow\t\t$I2,$T2,$I2\n\t vmrgow\t\t$I3,$T3,$I3\n\t vor\t\t$I4,$I4,$padbits\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\taddi\t\t$inp,$inp,0x40\n\tbdnz\t\tLoop_vsx\n\n\tneg\t\t$len,$len\n\tandi.\t\t$len,$len,0x30\n\tsub\t\t$inp,$inp,$len\n\n\tlvx_u\t\t$R0,$x30,$ctx\t\t# load all powers\n\tlvx_u\t\t$R1,$x00,$ctx_\n\tlvx_u\t\t$S1,$x10,$ctx_\n\tlvx_u\t\t$R2,$x20,$ctx_\n\tlvx_u\t\t$S2,$x30,$ctx_\n\nLast_vsx:\n\tvmuleuw\t\t$ACC0,$I0,$R0\n\tvmuleuw\t\t$ACC1,$I1,$R0\n\tvmuleuw\t\t$ACC2,$I2,$R0\n\tvmuleuw\t\t$ACC3,$I3,$R0\n\tvmuleuw\t\t$ACC4,$I4,$R0\n\n\tvmuleuw\t\t$T0,$I4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S3,$x50,$ctx_\n\tvmuleuw\t\t$T0,$I3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R3,$x40,$ctx_\n\n\t vaddudm\t$H2,$H2,$I2\n\t vaddudm\t$H0,$H0,$I0\n\t vaddudm\t$H3,$H3,$I3\n\t vaddudm\t$H1,$H1,$I1\n\t vaddudm\t$H4,$H4,$I4\n\n\tvmuleuw\t\t$T0,$I3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S4,$x70,$ctx_\n\tvmuleuw\t\t$T0,$I2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R4,$x60,$ctx_\n\n\tvmuleuw\t\t$T0,$I2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmuleuw\t\t$T0,$I1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmuleuw\t\t$T0,$I2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmuleuw\t\t$T0,$I3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmuleuw\t\t$T0,$I4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmuleuw\t\t$T0,$I0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t# (hash + inp[0:1]) * r^4\n\tvmulouw\t\t$T0,$H0,$R0\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H1,$R0\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H2,$R0\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H3,$R0\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H4,$R0\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H2,$S3\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H3,$S3\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H4,$S3\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H0,$R3\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S1,$x10,$ctx_\n\tvmulouw\t\t$T0,$H1,$R3\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R1,$x00,$ctx_\n\n\tvmulouw\t\t$T0,$H1,$S4\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H2,$S4\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H3,$S4\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H4,$S4\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tlvx_u\t\t$S2,$x30,$ctx_\n\tvmulouw\t\t$T0,$H0,$R4\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\tlvx_u\t\t$R2,$x20,$ctx_\n\n\tvmulouw\t\t$T0,$H4,$S1\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H0,$R1\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H1,$R1\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H2,$R1\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H3,$R1\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\tvmulouw\t\t$T0,$H3,$S2\n\tvaddudm\t\t$ACC0,$ACC0,$T0\n\tvmulouw\t\t$T0,$H4,$S2\n\tvaddudm\t\t$ACC1,$ACC1,$T0\n\tvmulouw\t\t$T0,$H0,$R2\n\tvaddudm\t\t$ACC2,$ACC2,$T0\n\tvmulouw\t\t$T0,$H1,$R2\n\tvaddudm\t\t$ACC3,$ACC3,$T0\n\tvmulouw\t\t$T0,$H2,$R2\n\tvaddudm\t\t$ACC4,$ACC4,$T0\n\n\t################################################################\n\t# horizontal addition\n\n\tvpermdi\t\t$H0,$ACC0,$ACC0,0b10\n\tvpermdi\t\t$H1,$ACC1,$ACC1,0b10\n\tvpermdi\t\t$H2,$ACC2,$ACC2,0b10\n\tvpermdi\t\t$H3,$ACC3,$ACC3,0b10\n\tvpermdi\t\t$H4,$ACC4,$ACC4,0b10\n\tvaddudm\t\t$ACC0,$ACC0,$H0\n\tvaddudm\t\t$ACC1,$ACC1,$H1\n\tvaddudm\t\t$ACC2,$ACC2,$H2\n\tvaddudm\t\t$ACC3,$ACC3,$H3\n\tvaddudm\t\t$ACC4,$ACC4,$H4\n\n\t################################################################\n\t# lazy reduction\n\n\tvspltisb\t$T0,2\n\tvsrd\t\t$H4,$ACC3,$_26\n\tvsrd\t\t$H1,$ACC0,$_26\n\tvand\t\t$H3,$ACC3,$mask26\n\tvand\t\t$H0,$ACC0,$mask26\n\tvaddudm\t\t$H4,$H4,$ACC4\t\t# h3 -> h4\n\tvaddudm\t\t$H1,$H1,$ACC1\t\t# h0 -> h1\n\n\tvsrd\t\t$ACC4,$H4,$_26\n\tvsrd\t\t$ACC1,$H1,$_26\n\tvand\t\t$H4,$H4,$mask26\n\tvand\t\t$H1,$H1,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\n\tvaddudm\t\t$H2,$ACC2,$ACC1\t\t# h1 -> h2\n\n\tvsld\t\t$ACC4,$ACC4,$T0\t\t# <<2\n\tvsrd\t\t$ACC2,$H2,$_26\n\tvand\t\t$H2,$H2,$mask26\n\tvaddudm\t\t$H0,$H0,$ACC4\t\t# h4 -> h0\n\tvaddudm\t\t$H3,$H3,$ACC2\t\t# h2 -> h3\n\n\tvsrd\t\t$ACC0,$H0,$_26\n\tvsrd\t\t$ACC3,$H3,$_26\n\tvand\t\t$H0,$H0,$mask26\n\tvand\t\t$H3,$H3,$mask26\n\tvaddudm\t\t$H1,$H1,$ACC0\t\t# h0 -> h1\n\tvaddudm\t\t$H4,$H4,$ACC3\t\t# h3 -> h4\n\n\tbeq\t\tLdone_vsx\n\n\tadd\t\tr6,$const,$len\n\n\tbe?lvx_u\t$_4,$x00,$const\t\t# byte swap mask\n\tlvx_u\t\t$T1,$x00,$inp\t\t# load last partial input block\n\tlvx_u\t\t$T2,$x10,$inp\n\tlvx_u\t\t$T3,$x20,$inp\n\tlvx_u\t\t$T4,$x30,$inp\n\tbe?vperm\t$T1,$T1,$T1,$_4\n\tbe?vperm\t$T2,$T2,$T2,$_4\n\tbe?vperm\t$T3,$T3,$T3,$_4\n\tbe?vperm\t$T4,$T4,$T4,$_4\n\n\tvpermdi\t\t$I0,$T1,$T2,0b00\t# smash input to base 2^26\n\tvspltisb\t$_4,4\n\tvperm\t\t$I2,$T1,$T2,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$I3,$T1,$T2,0b11\n\n\tvsrd\t\t$I1,$I0,$_26\n\tvsrd\t\t$I2,$I2,$_4\n\tvsrd\t\t$I4,$I3,$_40\n\tvsrd\t\t$I3,$I3,$_14\n\tvand\t\t$I0,$I0,$mask26\n\tvand\t\t$I1,$I1,$mask26\n\tvand\t\t$I2,$I2,$mask26\n\tvand\t\t$I3,$I3,$mask26\n\n\tvpermdi\t\t$T0,$T3,$T4,0b00\n\tvperm\t\t$T1,$T3,$T4,$I2perm\t# 0x...0e0f0001...1e1f1011\n\tvpermdi\t\t$T2,$T3,$T4,0b11\n\n\tlvx_u\t\t$ACC0,$x00,r6\n\tlvx_u\t\t$ACC1,$x30,r6\n\n\tvsrd\t\t$T3,$T0,$_26\n\tvsrd\t\t$T1,$T1,$_4\n\tvsrd\t\t$T4,$T2,$_40\n\tvsrd\t\t$T2,$T2,$_14\n\tvand\t\t$T0,$T0,$mask26\n\tvand\t\t$T3,$T3,$mask26\n\tvand\t\t$T1,$T1,$mask26\n\tvand\t\t$T2,$T2,$mask26\n\n\t# inp[2]:inp[0]:inp[3]:inp[1]\n\tvmrgow\t\t$I4,$T4,$I4\n\tvmrgow\t\t$I0,$T0,$I0\n\tvmrgow\t\t$I1,$T3,$I1\n\tvmrgow\t\t$I2,$T1,$I2\n\tvmrgow\t\t$I3,$T2,$I3\n\tvor\t\t$I4,$I4,$padbits\n\n\tvperm\t\t$H0,$H0,$H0,$ACC0\t# move hash to right lane\n\tvand\t\t$I0,$I0,    $ACC1\t# mask redundant input lane[s]\n\tvperm\t\t$H1,$H1,$H1,$ACC0\n\tvand\t\t$I1,$I1,    $ACC1\n\tvperm\t\t$H2,$H2,$H2,$ACC0\n\tvand\t\t$I2,$I2,    $ACC1\n\tvperm\t\t$H3,$H3,$H3,$ACC0\n\tvand\t\t$I3,$I3,    $ACC1\n\tvperm\t\t$H4,$H4,$H4,$ACC0\n\tvand\t\t$I4,$I4,    $ACC1\n\n\tvaddudm\t\t$I0,$I0,$H0\t\t# accumulate hash\n\tvxor\t\t$H0,$H0,$H0\t\t# wipe hash value\n\tvaddudm\t\t$I1,$I1,$H1\n\tvxor\t\t$H1,$H1,$H1\n\tvaddudm\t\t$I2,$I2,$H2\n\tvxor\t\t$H2,$H2,$H2\n\tvaddudm\t\t$I3,$I3,$H3\n\tvxor\t\t$H3,$H3,$H3\n\tvaddudm\t\t$I4,$I4,$H4\n\tvxor\t\t$H4,$H4,$H4\n\n\txor.\t\t$len,$len,$len\n\tb\t\tLast_vsx\n\n.align\t4\nLdone_vsx:\n\t$POP\tr0,`$VSXFRAME+$LRSAVE`($sp)\n\tli\t$x10,4\n\tli\t$x20,8\n\tli\t$x30,12\n\tli\t$x40,16\n\tstvwx_u\t$H0,$x00,$ctx\t\t\t# store hash\n\tstvwx_u\t$H1,$x10,$ctx\n\tstvwx_u\t$H2,$x20,$ctx\n\tstvwx_u\t$H3,$x30,$ctx\n\tstvwx_u\t$H4,$x40,$ctx\n\n\tlwz\tr12,`$VSXFRAME-$SIZE_T*5-4`($sp)# pull vrsave\n\tmtlr\tr0\n\tli\tr10,`15+$LOCALS+128`\n\tli\tr11,`31+$LOCALS+128`\n\tmtspr\t256,r12\t\t\t\t# restore vrsave\n\tlvx\tv20,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv21,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv22,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv23,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv24,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv25,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv26,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv27,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv28,r10,$sp\n\taddi\tr10,r10,32\n\tlvx\tv29,r11,$sp\n\taddi\tr11,r11,32\n\tlvx\tv30,r10,$sp\n\tlvx\tv31,r11,$sp\n\t$POP\tr27,`$VSXFRAME-$SIZE_T*5`($sp)\n\t$POP\tr28,`$VSXFRAME-$SIZE_T*4`($sp)\n\t$POP\tr29,`$VSXFRAME-$SIZE_T*3`($sp)\n\t$POP\tr30,`$VSXFRAME-$SIZE_T*2`($sp)\n\t$POP\tr31,`$VSXFRAME-$SIZE_T*1`($sp)\n\taddi\t$sp,$sp,$VSXFRAME\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x04,1,0x80,5,4,0\n\t.long\t0\n.size\t__poly1305_blocks_vsx,.-__poly1305_blocks_vsx\n\n.align\t6\nLPICmeup:\n\tmflr\tr0\n\tbcl\t20,31,\\$+4\n\tmflr\t$const      # vvvvvv \"distance\" between . and 1st data entry\n\taddi\t$const,$const,`64-8`\n\tmtlr\tr0\n\tblr\n\t.long\t0\n\t.byte\t0,12,0x14,0,0,0,0,0\n\t.space\t`64-9*4`\n\n.quad\t0x0000000003ffffff,0x0000000003ffffff\t# mask26\n.quad\t0x000000000000001a,0x000000000000001a\t# _26\n.quad\t0x0000000000000028,0x0000000000000028\t# _40\n.quad\t0x000000000e0f0001,0x000000001e1f1011\t# I2perm\n.quad\t0x0100000001000000,0x0100000001000000\t# padbits\n.quad\t0x0706050403020100,0x0f0e0d0c0b0a0908\t# byte swap for big-endian\n\n.quad\t0x0000000000000000,0x0000000004050607\t# magic tail masks\n.quad\t0x0405060700000000,0x0000000000000000\n.quad\t0x0000000000000000,0x0405060700000000\n\n.quad\t0xffffffff00000000,0xffffffffffffffff\n.quad\t0xffffffff00000000,0xffffffff00000000\n.quad\t0x0000000000000000,0xffffffff00000000\n___\n}}}\n$code.=<<___;\n.asciz\t\"Poly1305 for PPC, CRYPTOGAMS by \\@dot-asm\"\n___\n\nforeach (split(\"\\n\",$code)) {\n\ts/\\`([^\\`]*)\\`/eval($1)/ge;\n\n\t# instructions prefixed with '?' are endian-specific and need\n\t# to be adjusted accordingly...\n\tif ($flavour !~ /le$/) {\t# big-endian\n\t    s/be\\?//\t\tor\n\t    s/le\\?/#le#/\n\t} else {\t\t\t# little-endian\n\t    s/le\\?//\t\tor\n\t    s/be\\?/#be#/\n\t}\n\n\tprint $_,\"\\n\";\n}\nclose STDOUT or die \"error closing STDOUT: $!\";\n"], "filenames": ["crypto/poly1305/asm/poly1305-ppc.pl"], "buggy_code_start_loc": [747], "buggy_code_end_loc": [1922], "fixing_code_start_loc": [747], "fixing_code_end_loc": [1922], "type": "CWE-787", "message": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.", "other": {"cve": {"id": "CVE-2023-6129", "sourceIdentifier": "openssl-security@openssl.org", "published": "2024-01-09T17:15:12.147", "lastModified": "2024-02-16T13:15:09.910", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue."}, {"lang": "es", "value": "Resumen del problema: la implementaci\u00f3n POLY1305 MAC (c\u00f3digo de autenticaci\u00f3n de mensajes) contiene un error que podr\u00eda da\u00f1ar el estado interno de las aplicaciones que se ejecutan en plataformas basadas en CPU PowerPC si la CPU proporciona instrucciones vectoriales. Resumen del impacto: si un atacante puede influir en el uso del algoritmo MAC POLY1305, el estado de la aplicaci\u00f3n podr\u00eda corromperse con varias consecuencias dependientes de la aplicaci\u00f3n. La implementaci\u00f3n POLY1305 MAC (c\u00f3digo de autenticaci\u00f3n de mensajes) en OpenSSL para CPU PowerPC restaura el contenido de los registros vectoriales en un orden diferente al que se guardan. Por lo tanto, el contenido de algunos de estos registros vectoriales se corrompe cuando regresa al llamante. El c\u00f3digo vulnerable se utiliza s\u00f3lo en procesadores PowerPC m\u00e1s nuevos que admiten las instrucciones PowerISA 2.07. Las consecuencias de este tipo de corrupci\u00f3n del estado de la aplicaci\u00f3n interna pueden ser diversas: desde ninguna consecuencia, si la aplicaci\u00f3n que llama no depende en absoluto del contenido de los registros XMM no vol\u00e1tiles, hasta las peores consecuencias, donde el atacante podr\u00eda obtener el control total de el proceso de solicitud. Sin embargo, a menos que el compilador utilice registros vectoriales para almacenar punteros, la consecuencia m\u00e1s probable, si la hubiera, ser\u00eda un resultado incorrecto de algunos c\u00e1lculos dependientes de la aplicaci\u00f3n o una falla que provocar\u00eda una denegaci\u00f3n de servicio. El algoritmo POLY1305 MAC se utiliza con mayor frecuencia como parte del algoritmo CHACHA20-POLY1305 AEAD (cifrado autenticado con datos asociados). El uso m\u00e1s com\u00fan de este cifrado AEAD es con las versiones 1.2 y 1.3 del protocolo TLS. Si este cifrado est\u00e1 habilitado en el servidor, un cliente malicioso puede influir en si se utiliza este cifrado AEAD. Esto implica que las aplicaciones del servidor TLS que utilizan OpenSSL pueden verse potencialmente afectadas. Sin embargo, actualmente no conocemos ninguna aplicaci\u00f3n concreta que pueda verse afectada por este problema, por lo que lo consideramos un problema de seguridad de gravedad baja."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 4.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-787"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openssl:openssl:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0.0", "versionEndIncluding": "3.0.12", "matchCriteriaId": "E74FD809-31DE-4F31-82D6-6D71DF453A03"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openssl:openssl:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.1.0", "versionEndIncluding": "3.1.4", "matchCriteriaId": "28DDD110-1559-46F9-A62B-1B4648F83933"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openssl:openssl:3.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "92B2CAA8-D3C8-4789-8B6A-D6FC6C294842"}]}]}], "references": [{"url": "https://github.com/openssl/openssl/commit/050d26383d4e264966fb83428e72d5d48f402d35", "source": "openssl-security@openssl.org", "tags": ["Patch"]}, {"url": "https://github.com/openssl/openssl/commit/5b139f95c9a47a55a0c54100f3837b1eee942b04", "source": "openssl-security@openssl.org", "tags": ["Patch"]}, {"url": "https://github.com/openssl/openssl/commit/f3fc5808fe9ff74042d639839610d03b8fdcc015", "source": "openssl-security@openssl.org", "tags": ["Patch"]}, {"url": "https://security.netapp.com/advisory/ntap-20240216-0009/", "source": "openssl-security@openssl.org"}, {"url": "https://www.openssl.org/news/secadv/20240109.txt", "source": "openssl-security@openssl.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/openssl/openssl/commit/050d26383d4e264966fb83428e72d5d48f402d35"}}