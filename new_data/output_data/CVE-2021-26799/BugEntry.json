{"buggy_code": ["<?php\n/**\n * Omeka\n * \n * @copyright Copyright 2007-2012 Roy Rosenzweig Center for History and New Media\n * @license http://www.gnu.org/licenses/gpl-3.0.txt GNU GPLv3\n */\n\n/**\n * This ZF controller plugin allows the HtmlPurifier to filter the existing \n * forms (items, collections, users, etc.) so that fields that are allowed to \n * contain HTML are properly filtered.\n * \n * Note that this will not operate on any of the plugins.\n * \n * @package Omeka\\Controller\\Plugin\n */\nclass Omeka_Controller_Plugin_HtmlPurifier extends Zend_Controller_Plugin_Abstract\n{\n    /**\n     * Add the HtmlPurifier options if needed.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     **/\n    public function routeStartup(Zend_Controller_Request_Abstract $request)\n    {\n        $this->_setupHtmlPurifierOptions();\n    }\n\n    /**\n     * Determine whether or not to filter form submissions for various controllers.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     **/\n    public function preDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        // Don't purify if the request is not a post\n        if (!$request->isPost()) {\n            return;\n        }\n\n        // Don't purify if the post is empty\n        $post = $request->getPost();\n        if (empty($post)) {\n            return;\n        }\n\n        // Don't purify if the purifier is not enabled\n        if (get_option('html_purifier_is_enabled') != '1') {\n            return;\n        }\n\n        // Don't purify if there is no purifier\n        $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        $purifier = Omeka_Filter_HtmlPurifier::getHtmlPurifier();\n        if (!$purifier) {\n            return;\n        }\n\n        // To process the items form, implement a 'filterItemsForm' method\n        if ($this->isFormSubmission($request)) {\n            $controllerName = $request->getControllerName();\n            $filterMethodName = 'filter' . ucwords($controllerName) . 'Form';\n            if (method_exists($this, $filterMethodName)) {\n                $this->$filterMethodName($request, $htmlPurifierFilter);\n            }\n        }\n\n        // Let plugins hook into this to process form submissions in their own way.\n        fire_plugin_hook('html_purifier_form_submission', array('purifier' => $purifier));\n\n        // No processing for users form, since it's already properly filtered by\n        // User::filterPostData(). No processing for tags form, none of the tags\n        // should be HTML. The only input on the tags form is the 'new_tag'\n        // field on the edit page. No processing on the item-types form since\n        // there are no HTML fields.\n    }\n\n    /**\n     * Determine whether or not the request contains a form submission to either\n     * the 'add', 'edit', or 'config' actions.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     * @return bool\n     **/\n    public function isFormSubmission($request)\n    {\n        return in_array($request->getActionName(), array('add', 'edit', 'config')) and $request->isPost();\n    }\n\n    /**\n     * Filter the Collections form post, including the 'Elements' array of the POST.\n     *\n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterCollectionsForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_filterElementsFromPost($post, $htmlPurifierFilter);\n\n        $request->setPost($post);\n    }\n\n    /**\n     * Purify all of the data in the theme settings\n     *\n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterThemesForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_purifyArray($post, $htmlPurifierFilter);\n        $request->setPost($post);\n    }\n\n    /**\n     * Recurisvely purify an array\n     *\n     * @param array An unpurified array of string or array values\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     * @return array A purified array of string or array values\n     **/\n    protected function _purifyArray($dataArray = array(), $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        foreach ($dataArray as $k => $v) {\n            if (is_array($v)) {\n                $dataArray[$k] = $this->_purifyArray($v, $htmlPurifierFilter);\n            } elseif (is_string($v)) {\n                $dataArray[$k] = $htmlPurifierFilter->filter($v);\n            }\n        }\n        return $dataArray;\n    }\n\n    /**\n     * Filter the Items form post, including the 'Elements' array of the POST.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterItemsForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_filterElementsFromPost($post, $htmlPurifierFilter);\n\n        // Also strip HTML out of the tags field.\n        $post['tags'] = strip_tags($post['tags']);\n\n        $request->setPost($post);\n    }\n\n    /**\n     * Filter the 'Elements' array of the POST.\n     * \n     * @param Zend_Controller_Request_Abstract $post\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    protected function _filterElementsFromPost($post, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        // Post looks like Elements[element_id][index] = array([text], [html])\n        //\n        // In some cases it doesn't look like that, for example the date field\n        // has month, year, day.\n        //\n        // What we do in this case is just not do anything if there is no text field\n        // alongside the html field.\n        foreach ($post['Elements'] as $elementId => $texts) {\n            foreach ($texts as $index => $values) {\n                if (array_key_exists('text', $values)) {\n                    if (array_key_exists('html', $values) && (boolean) $values['html']) {\n                        $post['Elements'][$elementId][$index]['text'] = $htmlPurifierFilter->filter($values['text']);\n                    }\n                }\n            }\n        }\n        return $post;\n    }\n\n    protected function _setupHtmlPurifierOptions()\n    {\n        if (get_option('html_purifier_is_enabled') === null) {\n            set_option('html_purifier_is_enabled', '1');\n        }\n\n        if (get_option('html_purifier_allowed_html_elements') === null) {\n            set_option('html_purifier_allowed_html_elements', implode(',', Omeka_Filter_HtmlPurifier::getDefaultAllowedHtmlElements()));\n        }\n\n        if (get_option('html_purifier_allowed_html_attributes') === null) {\n            set_option('html_purifier_allowed_html_attributes', implode(',', Omeka_Filter_HtmlPurifier::getDefaultAllowedHtmlAttributes()));\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Omeka\n * \n * @copyright Copyright 2007-2012 Roy Rosenzweig Center for History and New Media\n * @license http://www.gnu.org/licenses/gpl-3.0.txt GNU GPLv3\n */\n\n/**\n * This ZF controller plugin allows the HtmlPurifier to filter the existing \n * forms (items, collections, users, etc.) so that fields that are allowed to \n * contain HTML are properly filtered.\n * \n * Note that this will not operate on any of the plugins.\n * \n * @package Omeka\\Controller\\Plugin\n */\nclass Omeka_Controller_Plugin_HtmlPurifier extends Zend_Controller_Plugin_Abstract\n{\n    /**\n     * Add the HtmlPurifier options if needed.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     **/\n    public function routeStartup(Zend_Controller_Request_Abstract $request)\n    {\n        $this->_setupHtmlPurifierOptions();\n    }\n\n    /**\n     * Determine whether or not to filter form submissions for various controllers.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     **/\n    public function preDispatch(Zend_Controller_Request_Abstract $request)\n    {\n        // Don't purify if the request is not a post\n        if (!$request->isPost()) {\n            return;\n        }\n\n        // Don't purify if the post is empty\n        $post = $request->getPost();\n        if (empty($post)) {\n            return;\n        }\n\n        // Don't purify if the purifier is not enabled\n        if (get_option('html_purifier_is_enabled') != '1') {\n            return;\n        }\n\n        // Don't purify if there is no purifier\n        $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        $purifier = Omeka_Filter_HtmlPurifier::getHtmlPurifier();\n        if (!$purifier) {\n            return;\n        }\n\n        // To process the items form, implement a 'filterItemsForm' method\n        if ($this->isFormSubmission($request)) {\n            $controllerName = $request->getControllerName();\n            $filterMethodName = 'filter' . ucwords($controllerName) . 'Form';\n            if (method_exists($this, $filterMethodName)) {\n                $this->$filterMethodName($request, $htmlPurifierFilter);\n            }\n        }\n\n        // Let plugins hook into this to process form submissions in their own way.\n        fire_plugin_hook('html_purifier_form_submission', array('purifier' => $purifier));\n\n        // No processing for users form, since it's already properly filtered by\n        // User::filterPostData(). No processing for tags form, none of the tags\n        // should be HTML. The only input on the tags form is the 'new_tag'\n        // field on the edit page. No processing on the item-types form since\n        // there are no HTML fields.\n    }\n\n    /**\n     * Determine whether or not the request contains a form submission to either\n     * the 'add', 'edit', or 'config' actions.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     * @return bool\n     **/\n    public function isFormSubmission($request)\n    {\n        return in_array($request->getActionName(), array('add', 'edit', 'config')) and $request->isPost();\n    }\n\n    /**\n     * Filter the Collections form post, including the 'Elements' array of the POST.\n     *\n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterCollectionsForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_filterElementsFromPost($post, $htmlPurifierFilter);\n\n        $request->setPost($post);\n    }\n\n    /**\n     * Filter the Files form post, including the 'Elements' array of the POST.\n     *\n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterFilesForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_filterElementsFromPost($post, $htmlPurifierFilter);\n\n        $request->setPost($post);\n    }\n\n    /**\n     * Purify all of the data in the theme settings\n     *\n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterThemesForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_purifyArray($post, $htmlPurifierFilter);\n        $request->setPost($post);\n    }\n\n    /**\n     * Recurisvely purify an array\n     *\n     * @param array An unpurified array of string or array values\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     * @return array A purified array of string or array values\n     **/\n    protected function _purifyArray($dataArray = array(), $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        foreach ($dataArray as $k => $v) {\n            if (is_array($v)) {\n                $dataArray[$k] = $this->_purifyArray($v, $htmlPurifierFilter);\n            } elseif (is_string($v)) {\n                $dataArray[$k] = $htmlPurifierFilter->filter($v);\n            }\n        }\n        return $dataArray;\n    }\n\n    /**\n     * Filter the Items form post, including the 'Elements' array of the POST.\n     * \n     * @param Zend_Controller_Request_Abstract $request\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    public function filterItemsForm($request, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        $post = $request->getPost();\n        $post = $this->_filterElementsFromPost($post, $htmlPurifierFilter);\n\n        // Also strip HTML out of the tags field.\n        $post['tags'] = strip_tags($post['tags']);\n\n        $request->setPost($post);\n    }\n\n    /**\n     * Filter the 'Elements' array of the POST.\n     * \n     * @param Zend_Controller_Request_Abstract $post\n     * @param Omeka_Filter_HtmlPurifier $htmlPurifierFilter\n     **/\n    protected function _filterElementsFromPost($post, $htmlPurifierFilter = null)\n    {\n        if ($htmlPurifierFilter === null) {\n            $htmlPurifierFilter = new Omeka_Filter_HtmlPurifier();\n        }\n\n        // Post looks like Elements[element_id][index] = array([text], [html])\n        //\n        // In some cases it doesn't look like that, for example the date field\n        // has month, year, day.\n        //\n        // What we do in this case is just not do anything if there is no text field\n        // alongside the html field.\n        foreach ($post['Elements'] as $elementId => $texts) {\n            foreach ($texts as $index => $values) {\n                if (array_key_exists('text', $values)) {\n                    if (array_key_exists('html', $values) && (boolean) $values['html']) {\n                        $post['Elements'][$elementId][$index]['text'] = $htmlPurifierFilter->filter($values['text']);\n                    }\n                }\n            }\n        }\n        return $post;\n    }\n\n    protected function _setupHtmlPurifierOptions()\n    {\n        if (get_option('html_purifier_is_enabled') === null) {\n            set_option('html_purifier_is_enabled', '1');\n        }\n\n        if (get_option('html_purifier_allowed_html_elements') === null) {\n            set_option('html_purifier_allowed_html_elements', implode(',', Omeka_Filter_HtmlPurifier::getDefaultAllowedHtmlElements()));\n        }\n\n        if (get_option('html_purifier_allowed_html_attributes') === null) {\n            set_option('html_purifier_allowed_html_attributes', implode(',', Omeka_Filter_HtmlPurifier::getDefaultAllowedHtmlAttributes()));\n        }\n    }\n}\n"], "filenames": ["application/libraries/Omeka/Controller/Plugin/HtmlPurifier.php"], "buggy_code_start_loc": [97], "buggy_code_end_loc": [97], "fixing_code_start_loc": [98], "fixing_code_end_loc": [116], "type": "CWE-79", "message": "Cross Site Scripting (XSS) vulnerability in admin/files/edit in Omeka Classic <=2.7 allows remote attackers to inject arbitrary web script or HTML.", "other": {"cve": {"id": "CVE-2021-26799", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-23T11:15:08.820", "lastModified": "2021-07-29T20:03:57.460", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Scripting (XSS) vulnerability in admin/files/edit in Omeka Classic <=2.7 allows remote attackers to inject arbitrary web script or HTML."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross Site Scripting (XSS) en el componente admin/files/edit en Omeka Classic versiones anteriores a 2.7 incluy\u00e9ndola, permite a atacantes remotos inyectar script web o HTML arbitrario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:omeka:omeka:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.7", "matchCriteriaId": "719CA2A5-8213-4BC5-9A3B-F4CFBFDB6C45"}]}]}], "references": [{"url": "https://github.com/omeka/Omeka/commit/08bfdf470e234edb68e5307a2fef8c899d89256c", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/omeka/Omeka/issues/935", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/omeka/Omeka/commit/08bfdf470e234edb68e5307a2fef8c899d89256c"}}