{"buggy_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2017-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Catalog product media gallery attribute backend model\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Catalog_Model_Product_Attribute_Backend_Media extends Mage_Eav_Model_Entity_Attribute_Backend_Abstract\n{\n    /**\n     * @var array\n     */\n    protected $_renamedImages = [];\n\n    /**\n     * Load attribute data after product loaded\n     *\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this\n     */\n    public function afterLoad($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = [];\n        $value['images'] = [];\n        $value['values'] = [];\n        $localAttributes = ['label', 'position', 'disabled'];\n\n        foreach ($this->_getResource()->loadGallery($object, $this) as $image) {\n            foreach ($localAttributes as $localAttribute) {\n                if (is_null($image[$localAttribute])) {\n                    $image[$localAttribute] = $this->_getDefaultValue($localAttribute, $image);\n                }\n            }\n            $value['images'][] = $image;\n        }\n\n        $object->setData($attrCode, $value);\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @param array $image\n     * @return string\n     */\n    protected function _getDefaultValue($key, &$image)\n    {\n        return $image[$key . '_default'] ?? '';\n    }\n\n    /**\n     * Validate media_gallery attribute data\n     *\n     * @param Mage_Catalog_Model_Product $object\n     * @throws Mage_Core_Exception\n     * @return bool\n     */\n    public function validate($object)\n    {\n        if ($this->getAttribute()->getIsRequired()) {\n            $value = $object->getData($this->getAttribute()->getAttributeCode());\n            if ($this->getAttribute()->isValueEmpty($value)) {\n                if (!(is_array($value) && count($value) > 0)) {\n                    return false;\n                }\n            }\n        }\n        if ($this->getAttribute()->getIsUnique()) {\n            if (!$this->getAttribute()->getEntity()->checkAttributeUniqueValue($this->getAttribute(), $object)) {\n                $label = $this->getAttribute()->getFrontend()->getLabel();\n                Mage::throwException(Mage::helper('eav')->__('The value of attribute \"%s\" must be unique.', $label));\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this|Mage_Eav_Model_Entity_Attribute_Backend_Abstract|void\n     * @throws Zend_Json_Exception\n     */\n    public function beforeSave($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = $object->getData($attrCode);\n        if (!is_array($value) || !isset($value['images'])) {\n            return;\n        }\n\n        if (!is_array($value['images']) && strlen($value['images']) > 0) {\n            $value['images'] = Mage::helper('core')->jsonDecode($value['images']);\n        }\n\n        if (!is_array($value['images'])) {\n            $value['images'] = [];\n        }\n\n        $clearImages = [];\n        $newImages   = [];\n        $existImages = [];\n        if ($object->getIsDuplicate() != true) {\n            foreach ($value['images'] as &$image) {\n                if (!empty($image['removed'])) {\n                    $clearImages[] = $image['file'];\n                } elseif (!isset($image['value_id'])) {\n                    $newFile                   = $this->_moveImageFromTmp($image['file']);\n                    $image['new_file'] = $newFile;\n                    $newImages[$image['file']] = $image;\n                    $this->_renamedImages[$image['file']] = $newFile;\n                    $image['file']             = $newFile;\n                } else {\n                    $existImages[$image['file']] = $image;\n                }\n            }\n        } else {\n            // For duplicating we need copy original images.\n            $duplicate = [];\n            foreach ($value['images'] as &$image) {\n                if (!isset($image['value_id'])) {\n                    continue;\n                }\n                $newFile = $this->_copyImage($image['file']);\n                $newImages[$image['file']] = [\n                    'new_file' => $newFile,\n                    'label' => $image['label']\n                ];\n                $duplicate[$image['value_id']] = $newFile;\n            }\n\n            $value['duplicate'] = $duplicate;\n        }\n\n        foreach ($object->getMediaAttributes() as $mediaAttribute) {\n            $mediaAttrCode = $mediaAttribute->getAttributeCode();\n            $attrData = $object->getData($mediaAttrCode);\n\n            if (in_array($attrData, $clearImages)) {\n                $object->setData($mediaAttrCode, 'no_selection');\n            }\n\n            if (array_key_exists($attrData, $newImages)) {\n                $object->setData($mediaAttrCode, $newImages[$attrData]['new_file']);\n                $object->setData($mediaAttrCode . '_label', $newImages[$attrData]['label']);\n            }\n\n            if (array_key_exists($attrData, $existImages)) {\n                $object->setData($mediaAttrCode . '_label', $existImages[$attrData]['label']);\n            }\n        }\n\n        Mage::dispatchEvent('catalog_product_media_save_before', ['product' => $object, 'images' => $value]);\n\n        $object->setData($attrCode, $value);\n\n        return $this;\n    }\n\n    /**\n     * Retrieve renamed image name\n     *\n     * @param string $file\n     * @return string\n     */\n    public function getRenamedImage($file)\n    {\n        return $this->_renamedImages[$file] ?? $file;\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return Mage_Eav_Model_Entity_Attribute_Backend_Abstract|void\n     */\n    public function afterSave($object)\n    {\n        if ($object->getIsDuplicate() == true) {\n            $this->duplicate($object);\n            return;\n        }\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = $object->getData($attrCode);\n        if (!is_array($value) || !isset($value['images']) || $object->isLockedAttribute($attrCode)) {\n            return;\n        }\n\n        $storeId = $object->getStoreId();\n\n        $storeIds = $object->getStoreIds();\n        $storeIds[] = Mage_Core_Model_App::ADMIN_STORE_ID;\n\n        // remove current storeId\n        $storeIds = array_flip($storeIds);\n        unset($storeIds[$storeId]);\n        $storeIds = array_keys($storeIds);\n\n        $images = Mage::getResourceModel('catalog/product')\n            ->getAssignedImages($object, $storeIds);\n\n        $picturesInOtherStores = [];\n        foreach ($images as $image) {\n            $picturesInOtherStores[$image['filepath']] = true;\n        }\n\n        $toDelete = [];\n        foreach ($value['images'] as &$image) {\n            if (!empty($image['removed'])) {\n                if (isset($image['value_id']) && !isset($picturesInOtherStores[$image['file']])) {\n                    $toDelete[] = $image['value_id'];\n                }\n                continue;\n            }\n\n            if (!isset($image['value_id'])) {\n                $data = [];\n                $data['entity_id']      = $object->getId();\n                $data['attribute_id']   = $this->getAttribute()->getId();\n                $data['value']          = $image['file'];\n                $image['value_id']      = $this->_getResource()->insertGallery($data);\n            }\n\n            $this->_getResource()->deleteGalleryValueInStore($image['value_id'], $object->getStoreId());\n\n            // Add per store labels, position, disabled\n            $data = [];\n            $data['value_id'] = $image['value_id'];\n            $data['label']    = $image['label'];\n            $data['position'] = (int) $image['position'];\n            $data['disabled'] = (int) $image['disabled'];\n            $data['store_id'] = (int) $object->getStoreId();\n\n            $this->_getResource()->insertGalleryValueInStore($data);\n        }\n\n        $this->_getResource()->deleteGallery($toDelete);\n    }\n\n    /**\n     * Add image to media gallery and return new filename\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string                     $file              file path of image in file system\n     * @param string|array               $mediaAttribute    code of attribute with type 'media_image',\n     *                                                      leave blank if image should be only in gallery\n     * @param bool                    $move              if true, it will move source file\n     * @param bool                    $exclude           mark image as disabled in product page view\n     * @return string\n     * @throws Mage_Core_Exception\n     */\n    public function addImage(\n        Mage_Catalog_Model_Product $product,\n        $file,\n        $mediaAttribute = null,\n        $move = false,\n        $exclude = true\n    ) {\n        $file = realpath($file);\n\n        if (!$file || !file_exists($file)) {\n            Mage::throwException(Mage::helper('catalog')->__('Image does not exist.'));\n        }\n\n        Mage::dispatchEvent('catalog_product_media_add_image', ['product' => $product, 'image' => $file]);\n\n        $pathinfo = pathinfo($file);\n        $imgExtensions = ['jpg','jpeg','gif','png'];\n        if (!isset($pathinfo['extension']) || !in_array(strtolower($pathinfo['extension']), $imgExtensions)) {\n            Mage::throwException(Mage::helper('catalog')->__('Invalid image file type.'));\n        }\n\n        $fileName       = Mage_Core_Model_File_Uploader::getCorrectFileName($pathinfo['basename']);\n        $dispretionPath = Mage_Core_Model_File_Uploader::getDispretionPath($fileName);\n        $fileName       = $dispretionPath . DS . $fileName;\n\n        $fileName = $this->_getNotDuplicatedFilename($fileName, $dispretionPath);\n\n        $ioAdapter = new Varien_Io_File();\n        $ioAdapter->setAllowCreateFolders(true);\n        $distanationDirectory = dirname($this->_getConfig()->getTmpMediaPath($fileName));\n\n        try {\n            $ioAdapter->open([\n                'path' => $distanationDirectory\n            ]);\n\n            /** @var Mage_Core_Helper_File_Storage_Database $storageHelper */\n            $storageHelper = Mage::helper('core/file_storage_database');\n            if ($move) {\n                $ioAdapter->mv($file, $this->_getConfig()->getTmpMediaPath($fileName));\n\n                //If this is used, filesystem should be configured properly\n                $storageHelper->saveFile($this->_getConfig()->getTmpMediaShortUrl($fileName));\n            } else {\n                $ioAdapter->cp($file, $this->_getConfig()->getTmpMediaPath($fileName));\n\n                $storageHelper->saveFile($this->_getConfig()->getTmpMediaShortUrl($fileName));\n                $ioAdapter->chmod($this->_getConfig()->getTmpMediaPath($fileName), 0777);\n            }\n        } catch (Exception $e) {\n            Mage::throwException(Mage::helper('catalog')->__('Failed to move file: %s', $e->getMessage()));\n        }\n\n        $fileName = str_replace(DS, '/', $fileName);\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $product->getData($attrCode);\n        $position = 0;\n        if (!is_array($mediaGalleryData)) {\n            $mediaGalleryData = [\n                'images' => []\n            ];\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if (isset($image['position']) && $image['position'] > $position) {\n                $position = $image['position'];\n            }\n        }\n\n        $position++;\n        $mediaGalleryData['images'][] = [\n            'file'     => $fileName,\n            'position' => $position,\n            'label'    => '',\n            'disabled' => (int) $exclude\n        ];\n\n        $product->setData($attrCode, $mediaGalleryData);\n\n        if (!is_null($mediaAttribute)) {\n            $this->setMediaAttribute($product, $mediaAttribute, $fileName);\n        }\n\n        return $fileName;\n    }\n\n    /**\n     * Add images with different media attributes.\n     * Image will be added only once if the same image is used with different media attributes\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param array $fileAndAttributesArray array of arrays of filename and corresponding media attribute\n     * @param string $filePath path, where image cand be found\n     * @param bool $move if true, it will move source file\n     * @param bool $exclude mark image as disabled in product page view\n     * @return array array of parallel arrays with original and renamed files\n     * @throws Mage_Core_Exception\n     */\n    public function addImagesWithDifferentMediaAttributes(\n        Mage_Catalog_Model_Product $product,\n        $fileAndAttributesArray,\n        $filePath = '',\n        $move = false,\n        $exclude = true\n    ) {\n        $alreadyAddedFiles = [];\n        $alreadyAddedFilesNames = [];\n\n        foreach ($fileAndAttributesArray as $key => $value) {\n            $keyInAddedFiles = array_search($value['file'], $alreadyAddedFiles, true);\n            if ($keyInAddedFiles === false) {\n                $savedFileName = $this->addImage($product, $filePath . $value['file'], null, $move, $exclude);\n                $alreadyAddedFiles[$key] = $value['file'];\n                $alreadyAddedFilesNames[$key] = $savedFileName;\n            } else {\n                $savedFileName = $alreadyAddedFilesNames[$keyInAddedFiles];\n            }\n\n            if (!is_null($value['mediaAttribute'])) {\n                $this->setMediaAttribute($product, $value['mediaAttribute'], $savedFileName);\n            }\n        }\n\n        return ['alreadyAddedFiles' => $alreadyAddedFiles, 'alreadyAddedFilesNames' => $alreadyAddedFilesNames];\n    }\n\n    /**\n     * Update image in gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @param array $data\n     * @return $this\n     */\n    public function updateImage(Mage_Catalog_Model_Product $product, $file, $data)\n    {\n        $fieldsMap = [\n            'label'    => 'label',\n            'position' => 'position',\n            'disabled' => 'disabled',\n            'exclude'  => 'disabled'\n        ];\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n\n        $mediaGalleryData = $product->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if ($image['file'] == $file) {\n                foreach ($fieldsMap as $mappedField => $realField) {\n                    if (isset($data[$mappedField])) {\n                        $image[$realField] = $data[$mappedField];\n                    }\n                }\n            }\n        }\n\n        $product->setData($attrCode, $mediaGalleryData);\n        return $this;\n    }\n\n    /**\n     * Remove image from gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @return $this\n     */\n    public function removeImage(Mage_Catalog_Model_Product $product, $file)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n\n        $mediaGalleryData = $product->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if ($image['file'] == $file) {\n                $image['removed'] = 1;\n            }\n        }\n\n        $product->setData($attrCode, $mediaGalleryData);\n\n        return $this;\n    }\n\n    /**\n     * Retrieve image from gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @return array|bool\n     */\n    public function getImage(Mage_Catalog_Model_Product $product, $file)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $product->getData($attrCode);\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return false;\n        }\n\n        foreach ($mediaGalleryData['images'] as $image) {\n            if ($image['file'] == $file) {\n                return $image;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Clear media attribute value\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string|array $mediaAttribute\n     * @return $this\n     */\n    public function clearMediaAttribute(Mage_Catalog_Model_Product $product, $mediaAttribute)\n    {\n        $mediaAttributeCodes = array_keys($product->getMediaAttributes());\n\n        if (is_array($mediaAttribute)) {\n            foreach ($mediaAttribute as $attribute) {\n                if (in_array($attribute, $mediaAttributeCodes)) {\n                    $product->setData($attribute, null);\n                }\n            }\n        } elseif (in_array($mediaAttribute, $mediaAttributeCodes)) {\n            $product->setData($mediaAttribute, null);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Set media attribute value\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string|array $mediaAttribute\n     * @param string $value\n     * @return $this\n     */\n    public function setMediaAttribute(Mage_Catalog_Model_Product $product, $mediaAttribute, $value)\n    {\n        $mediaAttributeCodes = array_keys($product->getMediaAttributes());\n\n        if (is_array($mediaAttribute)) {\n            foreach ($mediaAttribute as $attribute) {\n                if (in_array($attribute, $mediaAttributeCodes)) {\n                    $product->setData($attribute, $value);\n                }\n            }\n        } elseif (in_array($mediaAttribute, $mediaAttributeCodes)) {\n            $product->setData($mediaAttribute, $value);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retrieve resource model\n     *\n     * @return Mage_Catalog_Model_Resource_Product_Attribute_Backend_Media|object\n     */\n    protected function _getResource()\n    {\n        return Mage::getResourceSingleton('catalog/product_attribute_backend_media');\n    }\n\n    /**\n     * Retrieve media config\n     *\n     * @return Mage_Catalog_Model_Product_Media_Config\n     */\n    protected function _getConfig()\n    {\n        return Mage::getSingleton('catalog/product_media_config');\n    }\n\n    /**\n     * Move image from temporary directory to normal\n     *\n     * @param string $file\n     * @return string\n     */\n    protected function _moveImageFromTmp($file)\n    {\n        $ioObject = new Varien_Io_File();\n        $destDirectory = dirname($this->_getConfig()->getMediaPath($file));\n        try {\n            $ioObject->open(['path' => $destDirectory]);\n        } catch (Exception $e) {\n            $ioObject->mkdir($destDirectory, 0777, true);\n            $ioObject->open(['path' => $destDirectory]);\n        }\n\n        if (strrpos($file, '.tmp') == strlen($file) - 4) {\n            $file = substr($file, 0, -4);\n        }\n        $destFile = $this->_getUniqueFileName($file, $ioObject->dirsep());\n\n        /** @var Mage_Core_Helper_File_Storage_Database $storageHelper */\n        $storageHelper = Mage::helper('core/file_storage_database');\n\n        if ($storageHelper->checkDbUsage()) {\n            $storageHelper->renameFile(\n                $this->_getConfig()->getTmpMediaShortUrl($file),\n                $this->_getConfig()->getMediaShortUrl($destFile)\n            );\n\n            $ioObject->rm($this->_getConfig()->getTmpMediaPath($file));\n            $ioObject->rm($this->_getConfig()->getMediaPath($destFile));\n        } else {\n            $ioObject->mv(\n                $this->_getConfig()->getTmpMediaPath($file),\n                $this->_getConfig()->getMediaPath($destFile)\n            );\n        }\n\n        return str_replace($ioObject->dirsep(), '/', $destFile);\n    }\n\n    /**\n     * Check whether file to move exists. Getting unique name\n     *\n     * @param string $file\n     * @param string $dirsep\n     * @return string\n     */\n    protected function _getUniqueFileName($file, $dirsep)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $destFile = Mage::helper('core/file_storage_database')\n                ->getUniqueFilename(\n                    Mage::getSingleton('catalog/product_media_config')->getBaseMediaUrlAddition(),\n                    $file\n                );\n        } else {\n            $destFile = dirname($file) . $dirsep\n                . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getMediaPath($file));\n        }\n\n        return $destFile;\n    }\n\n    /**\n     * Copy image and return new filename.\n     *\n     * @param string $file\n     * @return string\n     * @throws Mage_Core_Exception\n     */\n    protected function _copyImage($file)\n    {\n        try {\n            $ioObject = new Varien_Io_File();\n            $destDirectory = dirname($this->_getConfig()->getMediaPath($file));\n            $ioObject->open(['path' => $destDirectory]);\n\n            $destFile = $this->_getUniqueFileName($file, $ioObject->dirsep());\n\n            if (!$ioObject->fileExists($this->_getConfig()->getMediaPath($file), true)) {\n                throw new Exception();\n            }\n\n            if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n                Mage::helper('core/file_storage_database')\n                    ->copyFile(\n                        $this->_getConfig()->getMediaShortUrl($file),\n                        $this->_getConfig()->getMediaShortUrl($destFile)\n                    );\n\n                $ioObject->rm($this->_getConfig()->getMediaPath($destFile));\n            } else {\n                $ioObject->cp(\n                    $this->_getConfig()->getMediaPath($file),\n                    $this->_getConfig()->getMediaPath($destFile)\n                );\n            }\n        } catch (Exception $e) {\n            $file = $this->_getConfig()->getMediaPath($file);\n            $io = new Varien_Io_File();\n            Mage::throwException(\n                Mage::helper('catalog')->__(\n                    'Failed to copy file %s. Please, delete media with non-existing images and try again.',\n                    $io->getFilteredPath($file)\n                )\n            );\n        }\n\n        return str_replace($ioObject->dirsep(), '/', $destFile);\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this\n     */\n    public function duplicate($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $object->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        $this->_getResource()->duplicate(\n            $this,\n            $mediaGalleryData['duplicate'] ?? [],\n            $object->getOriginalId(),\n            $object->getId()\n        );\n\n        return $this;\n    }\n\n    /**\n     * Get filename which is not duplicated with other files in media temporary and media directories\n     *\n     * @param String $fileName\n     * @param String $dispretionPath\n     * @return String\n     */\n    protected function _getNotDuplicatedFilename($fileName, $dispretionPath)\n    {\n        $fileMediaName = $dispretionPath . DS\n                  . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getMediaPath($fileName));\n        $fileTmpMediaName = $dispretionPath . DS\n                  . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getTmpMediaPath($fileName));\n\n        if ($fileMediaName != $fileTmpMediaName) {\n            if ($fileMediaName != $fileName) {\n                return $this->_getNotDuplicatedFilename($fileMediaName, $dispretionPath);\n            } elseif ($fileTmpMediaName != $fileName) {\n                return $this->_getNotDuplicatedFilename($fileTmpMediaName, $dispretionPath);\n            }\n        }\n\n        return $fileMediaName;\n    }\n}\n", "<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Varien\n * @package    Varien_Io\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2016-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Filesystem client\n *\n * @category   Varien\n * @package    Varien_Io\n * @author     Magento Core Team <core@magentocommerce.com>\n *\n * @property mixed $_streamException\n */\nclass Varien_Io_File extends Varien_Io_Abstract\n{\n    /**\n     * Save initial working directory\n     *\n     * @var string\n     */\n    protected $_iwd;\n\n    /**\n     * Use virtual current working directory for application integrity\n     *\n     * @var string\n     */\n    protected $_cwd;\n\n    /**\n     * Used to grep ls() output\n     *\n     * @const\n     */\n    public const GREP_FILES = 'files_only';\n\n    /**\n     * Used to grep ls() output\n     *\n     * @const\n     */\n    public const GREP_DIRS = 'dirs_only';\n\n    /**\n     * If this variable is set to TRUE, our library will be able to automaticaly create\n     * non-existant directories.\n     *\n     * @var bool\n     * @access protected\n     */\n    protected $_allowCreateFolders = false;\n\n    /**\n     * Stream open file pointer\n     *\n     * @var resource\n     */\n    protected $_streamHandler;\n\n    /**\n     * Stream mode filename\n     *\n     * @var string\n     */\n    protected $_streamFileName;\n\n    /**\n     * Stream mode chmod\n     *\n     * @var string\n     */\n    protected $_streamChmod;\n\n    /**\n     * Lock file\n     *\n     * @var bool\n     */\n    protected $_streamLocked = false;\n\n    public function __construct()\n    {\n        // Initialize shutdown function\n        register_shutdown_function([$this, 'destruct']);\n    }\n\n    /**\n     * stream close on shutdown\n     */\n    public function destruct()\n    {\n        if ($this->_streamHandler) {\n            $this->streamClose();\n        }\n    }\n\n    /**\n     * Open file in stream mode\n     * For set folder for file use open method\n     *\n     * @param string $fileName\n     * @param string $mode\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamOpen($fileName, $mode = 'w+', $chmod = 0666)\n    {\n        $writeableMode = preg_match('#^[wax]#i', $mode);\n        if ($writeableMode && !is_writeable($this->_cwd)) {\n            throw new Exception('Permission denied for write to ' . $this->getFilteredPath($this->_cwd));\n        }\n\n        if (!ini_get('auto_detect_line_endings')) {\n            ini_set('auto_detect_line_endings', 1);\n        }\n\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $this->_streamHandler = @fopen($fileName, $mode);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        if ($this->_streamHandler === false) {\n            throw new Exception('Error write to file ' . $this->getFilteredPath($fileName));\n        }\n\n        $this->_streamFileName = $fileName;\n        $this->_streamChmod = $chmod;\n        return true;\n    }\n\n    /**\n     * Lock file\n     *\n     * @return bool\n     */\n    public function streamLock($exclusive = true)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        $this->_streamLocked = true;\n        $lock = $exclusive ? LOCK_EX : LOCK_SH;\n        return flock($this->_streamHandler, $lock);\n    }\n\n    /**\n     * Unlock file\n     *\n     * @return bool\n     */\n    public function streamUnlock()\n    {\n        if (!$this->_streamHandler || !$this->_streamLocked) {\n            return false;\n        }\n        $this->_streamLocked = false;\n        return flock($this->_streamHandler, LOCK_UN);\n    }\n\n    /**\n     * Binary-safe file read\n     *\n     * @param int $length\n     * @return bool|string\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamRead($length = 1024)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        if (feof($this->_streamHandler)) {\n            return false;\n        }\n        return @fgets($this->_streamHandler, $length);\n    }\n\n    /**\n     * Gets line from file pointer and parse for CSV fields\n     *\n     * @return array|false|null\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamReadCsv($delimiter = ',', $enclosure = '\"')\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        return @fgetcsv($this->_streamHandler, 0, $delimiter, $enclosure);\n    }\n\n    /**\n     * Binary-safe file write\n     *\n     * @param string $str\n     * @return bool|int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamWrite($str)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        return @fwrite($this->_streamHandler, $str);\n    }\n\n    /**\n     * Format line as CSV and write to file pointer\n     *\n     * @param array $row\n     * @param string $delimiter\n     * @param string $enclosure\n     * @return bool|int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamWriteCsv(array $row, $delimiter = ',', $enclosure = '\"')\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n\n        return @fputcsv($this->_streamHandler, $row, $delimiter, $enclosure);\n    }\n\n    /**\n     * Close an open file pointer\n     * Set chmod on a file\n     *\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamClose()\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        if ($this->_streamLocked) {\n            $this->streamUnlock();\n        }\n        if ($this->_isValidSource($this->_streamHandler)) {\n            @fclose($this->_streamHandler);\n        }\n        $this->chmod($this->_streamFileName, $this->_streamChmod);\n        return true;\n    }\n\n    /**\n     * Retrieve open file statistic\n     *\n     * @param string $part the part of statistic\n     * @param mixed $default default value for part\n     * @return array|bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamStat($part = null, $default = null)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        $stat = @fstat($this->_streamHandler);\n        if (!is_null($part)) {\n            return isset($stat[$part]) ? $stat[$part] : $default;\n        }\n        return $stat;\n    }\n\n    /**\n     * Retrieve stream methods exception\n     *\n     * @return Exception\n     */\n    public function getStreamException()\n    {\n        return $this->_streamException;\n    }\n\n    /**\n     * Open a connection\n     *\n     * Possible arguments:\n     * - path     default current path\n     *\n     * @param array $args\n     * @return boolean\n     */\n    public function open(array $args = [])\n    {\n        if (!empty($args['path']) && $this->_allowCreateFolders) {\n            $this->checkAndCreateFolder($args['path']);\n        }\n\n        $this->_iwd = getcwd();\n        $this->cd(!empty($args['path']) ? $args['path'] : $this->_iwd);\n        return true;\n    }\n\n    /**\n     * Used to set {@link _allowCreateFolders} value\n     *\n     * @param bool $flag\n     * @access public\n     * @return $this\n     */\n    public function setAllowCreateFolders($flag)\n    {\n        $this->_allowCreateFolders = $flag;\n        return $this;\n    }\n\n    /**\n     * Close a connection\n     *\n     * @return boolean\n     */\n    public function close()\n    {\n        return true;\n    }\n\n    /**\n     * Create a directory\n     *\n     * @param string $dir\n     * @param int $mode\n     * @param boolean $recursive\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function mkdir($dir, $mode = 0777, $recursive = true)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n\n        $result = @mkdir($dir, $mode, $recursive);\n        if ($result) {\n            @chmod($dir, $mode);\n        }\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Delete a directory\n     *\n     * @param string $dir\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function rmdir($dir, $recursive = false)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = self::rmdirRecursive($dir, $recursive);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Delete a directory recursively\n     * @param string $dir\n     * @param bool $recursive\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public static function rmdirRecursive($dir, $recursive = true)\n    {\n        $result = true;\n        if ($recursive) {\n            if (is_dir($dir)) {\n                foreach (scandir($dir) as $item) {\n                    if (!strcmp($item, '.') || !strcmp($item, '..')) {\n                        continue;\n                    }\n                    self::rmdirRecursive($dir . \"/\" . $item, $recursive);\n                }\n                $result = @rmdir($dir);\n            } elseif (file_exists($dir)) {\n                $result = @unlink($dir);\n            }\n        } else {\n            $result = @rmdir($dir);\n        }\n        return $result;\n    }\n\n    /**\n     * Get current working directory\n     *\n     * @return string\n     */\n    public function pwd()\n    {\n        return $this->_cwd;\n    }\n\n    /**\n     * Change current working directory\n     *\n     * @param string $dir\n     * @return boolean\n     * @throws Exception\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function cd($dir)\n    {\n        if (is_dir($dir)) {\n            @chdir($this->_iwd);\n            $this->_cwd = realpath($dir);\n            return true;\n        } else {\n            throw new Exception('Unable to list current working directory.');\n        }\n    }\n\n    /**\n     * Read a file to result, file or stream\n     *\n     * If $dest is null the output will be returned.\n     * Otherwise it will be saved to the file or stream and operation result is returned.\n     *\n     * @param string $filename\n     * @param string|resource $dest\n     * @return boolean|string\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function read($filename, $dest = null)\n    {\n        if (!is_null($dest)) {\n            chdir($this->_cwd);\n            $result = @copy($filename, $dest);\n            chdir($this->_iwd);\n            return $result;\n        }\n\n        chdir($this->_cwd);\n        $result = @file_get_contents($filename);\n        chdir($this->_iwd);\n\n        return $result;\n    }\n\n    /**\n     * Write a file from string, file or stream\n     *\n     * @param string $filename\n     * @param string|resource $src\n     * @param int $mode\n     *\n     * @return int|boolean\n     */\n    public function write($filename, $src, $mode = null)\n    {\n        if (!$this->_isValidSource($src) || !$this->_isFilenameWriteable($filename)) {\n            return false;\n        }\n\n        $srcIsFile = $this->_checkSrcIsFile($src);\n        if ($srcIsFile) {\n            $src = realpath($src);\n            $result = $this->cp($src, $filename);\n        } else {\n            $result = $this->filePutContent($filename, $src);\n        }\n\n        if (!is_null($mode) && $result !== false) {\n            $this->chmod($filename, $mode);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Check source is valid\n     *\n     * @param string|resource $src\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _isValidSource($src)\n    {\n        // In case of a string\n        if (is_string($src)) {\n            // If its a file we check for null byte\n            // If it's not a valid path, file_exists() will return a falsey value, and the @ will keep it from complaining about the bad string.\n            return !(@file_exists($src) && strpos($src, chr(0)) !== false);\n        } elseif (is_resource($src)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check filename is writeable\n     * If filename not exist check dirname writeable\n     *\n     * @param string $filename\n     * @throws Varien_Io_Exception\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _isFilenameWriteable($filename)\n    {\n        $error = false;\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        if (file_exists($filename)) {\n            if (!is_writeable($filename)) {\n                $error = \"File '{$this->getFilteredPath($filename)}' isn't writeable\";\n            }\n        } else {\n            $folder = dirname($filename);\n            if (!is_writable($folder)) {\n                $error = \"Folder '{$this->getFilteredPath($folder)}' isn't writeable\";\n            }\n        }\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n\n        if ($error) {\n            throw new Varien_Io_Exception($error);\n        }\n        return true;\n    }\n\n    /**\n     * Check source is file\n     *\n     * @param string $src\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _checkSrcIsFile($src)\n    {\n        $result = false;\n        if (is_string($src) && @is_readable($src) && is_file($src)) {\n            $result = true;\n        }\n\n        return $result;\n    }\n\n    /**\n     * File put content wrapper\n     *\n     * @param string $filename\n     * @param string|resource $src\n     *\n     * @return int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function filePutContent($filename, $src)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @file_put_contents($filename, $src);\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function fileExists($file, $onlyFile = true)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = file_exists($file);\n        if ($result && $onlyFile) {\n            $result = is_file($file);\n        }\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function isWriteable($path)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = is_writeable($path);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    public function getDestinationFolder($filepath)\n    {\n        preg_match('/^(.*[!\\/])/', $filepath, $mathces);\n        if (isset($mathces[0])) {\n            return $mathces[0];\n        }\n        return false;\n    }\n\n    /**\n     * Create destination folder\n     *\n     * @param string $path\n     * @return bool\n     */\n    public function createDestinationDir($path)\n    {\n        if (!$this->_allowCreateFolders) {\n            return false;\n        }\n        return $this->checkAndCreateFolder($this->getCleanPath($path));\n    }\n\n    /**\n     * Check and create if not exists folder\n     *\n     * @param string $folder\n     * @param int $mode\n     * @throws Exception\n     * @return bool\n     */\n    public function checkAndCreateFolder($folder, $mode = 0777)\n    {\n        if (is_dir($folder)) {\n            return true;\n        }\n        if (!is_dir(dirname($folder))) {\n            $this->checkAndCreateFolder(dirname($folder), $mode);\n        }\n        if (!is_dir($folder) && !$this->mkdir($folder, $mode)) {\n            throw new Exception(\"Unable to create directory '{$this->getFilteredPath($folder)}'. Access forbidden.\");\n        }\n        return true;\n    }\n\n    /**\n     * Delete a file\n     *\n     * @param string $filename\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function rm($filename)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @unlink($filename);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Rename or move a directory or a file\n     *\n     * @param string $src\n     * @param string $dest\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function mv($src, $dest)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n        $result = @rename($src, $dest);\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Copy a file\n     *\n     * @param string $src\n     * @param string $dest\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function cp($src, $dest)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @copy($src, $dest);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Change mode of a directory or a file\n     *\n     * @param string $filename\n     * @param int $mode\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function chmod($filename, $mode)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n        $result = file_exists($filename) ? @chmod($filename, $mode) : false;\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Get list of cwd subdirectories and files\n     *\n     * Suggestions (from moshe):\n     * - Use filemtime instead of filectime for performance\n     * - Change $grep to $flags and use binary flags\n     *   - LS_DIRS  = 1\n     *   - LS_FILES = 2\n     *   - LS_ALL   = 3\n     *\n     * @param Varien_Io_File $grep const\n     * @access public\n     * @return array\n     */\n    public function ls($grep = null)\n    {\n        $ignoredDirectories = ['.', '..'];\n\n        if (is_dir($this->_cwd)) {\n            $dir = $this->_cwd;\n        } elseif (is_dir($this->_iwd)) {\n            $dir = $this->_iwd;\n        } else {\n            throw new Exception('Unable to list current working directory.');\n        }\n\n        $list = [];\n\n        if ($dh = opendir($dir)) {\n            while (($entry = readdir($dh)) !== false) {\n                $list_item = [];\n\n                $fullpath = $dir . DIRECTORY_SEPARATOR . $entry;\n\n                if (($grep == self::GREP_DIRS) && (!is_dir($fullpath))) {\n                    continue;\n                } elseif (($grep == self::GREP_FILES) && (!is_file($fullpath))) {\n                    continue;\n                } elseif (in_array($entry, $ignoredDirectories)) {\n                    continue;\n                }\n\n                $list_item['text'] = $entry;\n                $list_item['mod_date'] = date(Varien_Date::DATETIME_PHP_FORMAT, filectime($fullpath));\n                $list_item['permissions'] = $this->_parsePermissions(fileperms($fullpath));\n                $list_item['owner'] = $this->_getFileOwner($fullpath);\n\n                if (is_file($fullpath)) {\n                    $pathinfo = pathinfo($fullpath);\n                    $list_item['size'] = filesize($fullpath);\n                    $list_item['leaf'] = true;\n                    if (isset($pathinfo['extension'])\n                        && in_array(strtolower($pathinfo['extension']), ['jpg', 'jpeg', 'gif', 'bmp', 'png'])\n                        && $list_item['size'] > 0\n                    ) {\n                        $list_item['is_image'] = true;\n                        $list_item['filetype'] = $pathinfo['extension'];\n                    } elseif ($list_item['size'] == 0) {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = 'unknown';\n                    } elseif (isset($pathinfo['extension'])) {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = $pathinfo['extension'];\n                    } else {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = 'unknown';\n                    }\n                } else {\n                    $list_item['leaf'] = false;\n                    $list_item['id'] = $fullpath;\n                }\n\n                $list[] = $list_item;\n            }\n            closedir($dh);\n        } else {\n            throw new Exception('Unable to list current working directory. Access forbidden.');\n        }\n\n        return $list;\n    }\n\n    /**\n     * Convert integer permissions format into human readable\n     *\n     * @param integer $mode\n     * @access protected\n     * @return string\n     */\n    protected function _parsePermissions($mode)\n    {\n        if ($mode & 0x1000) {\n            $type = 'p';\n        } elseif ($mode & 0x2000) { /* FIFO pipe */\n            $type = 'c';\n        } elseif ($mode & 0x4000) { /* Character special */\n            $type = 'd';\n        } elseif ($mode & 0x6000) { /* Directory */\n            $type = 'b';\n        } elseif ($mode & 0x8000) { /* Block special */\n            $type = '-';\n        } elseif ($mode & 0xA000) { /* Regular */\n            $type = 'l';\n        } elseif ($mode & 0xC000) { /* Symbolic Link */\n            $type = 's';\n        } else { /* Socket */\n            $type = 'u';\n        } /* UNKNOWN */\n\n        /* Determine permissions */\n        $owner['read'] = ($mode & 00400) ? 'r' : '-';\n        $owner['write'] = ($mode & 00200) ? 'w' : '-';\n        $owner['execute'] = ($mode & 00100) ? 'x' : '-';\n        $group['read'] = ($mode & 00040) ? 'r' : '-';\n        $group['write'] = ($mode & 00020) ? 'w' : '-';\n        $group['execute'] = ($mode & 00010) ? 'x' : '-';\n        $world['read'] = ($mode & 00004) ? 'r' : '-';\n        $world['write'] = ($mode & 00002) ? 'w' : '-';\n        $world['execute'] = ($mode & 00001) ? 'x' : '-';\n\n        /* Adjust for SUID, SGID and sticky bit */\n        if ($mode & 0x800) {\n            $owner[\"execute\"] = ($owner['execute'] == 'x') ? 's' : 'S';\n        }\n        if ($mode & 0x400) {\n            $group[\"execute\"] = ($group['execute'] == 'x') ? 's' : 'S';\n        }\n        if ($mode & 0x200) {\n            $world[\"execute\"] = ($world['execute'] == 'x') ? 't' : 'T';\n        }\n\n        $s = sprintf('%1s', $type);\n        $s .= sprintf('%1s%1s%1s', $owner['read'], $owner['write'], $owner['execute']);\n        $s .= sprintf('%1s%1s%1s', $group['read'], $group['write'], $group['execute']);\n        $s .= sprintf('%1s%1s%1s', $world['read'], $world['write'], $world['execute']);\n        return trim($s);\n    }\n\n    /**\n     * Get file owner\n     *\n     * @param string $filename\n     * @access protected\n     * @return string\n     */\n    protected function _getFileOwner($filename)\n    {\n        if (!function_exists('posix_getpwuid')) {\n            return 'n/a';\n        }\n\n        $owner     = posix_getpwuid(fileowner($filename));\n        $groupinfo = posix_getgrnam(filegroup($filename));\n\n        return $owner['name'] . ' / ' . $groupinfo;\n    }\n\n    public function dirsep()\n    {\n        return DIRECTORY_SEPARATOR;\n    }\n\n    public function dirname($file)\n    {\n        return $this->getCleanPath(dirname($file));\n    }\n\n    public function getStreamHandler()\n    {\n        return $this->_streamHandler;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2017-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Catalog product media gallery attribute backend model\n *\n * @category   Mage\n * @package    Mage_Catalog\n * @author     Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Catalog_Model_Product_Attribute_Backend_Media extends Mage_Eav_Model_Entity_Attribute_Backend_Abstract\n{\n    /**\n     * @var array\n     */\n    protected $_renamedImages = [];\n\n    /**\n     * Load attribute data after product loaded\n     *\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this\n     */\n    public function afterLoad($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = [];\n        $value['images'] = [];\n        $value['values'] = [];\n        $localAttributes = ['label', 'position', 'disabled'];\n\n        foreach ($this->_getResource()->loadGallery($object, $this) as $image) {\n            foreach ($localAttributes as $localAttribute) {\n                if (is_null($image[$localAttribute])) {\n                    $image[$localAttribute] = $this->_getDefaultValue($localAttribute, $image);\n                }\n            }\n            $value['images'][] = $image;\n        }\n\n        $object->setData($attrCode, $value);\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @param array $image\n     * @return string\n     */\n    protected function _getDefaultValue($key, &$image)\n    {\n        return $image[$key . '_default'] ?? '';\n    }\n\n    /**\n     * Validate media_gallery attribute data\n     *\n     * @param Mage_Catalog_Model_Product $object\n     * @throws Mage_Core_Exception\n     * @return bool\n     */\n    public function validate($object)\n    {\n        if ($this->getAttribute()->getIsRequired()) {\n            $value = $object->getData($this->getAttribute()->getAttributeCode());\n            if ($this->getAttribute()->isValueEmpty($value)) {\n                if (!(is_array($value) && count($value) > 0)) {\n                    return false;\n                }\n            }\n        }\n        if ($this->getAttribute()->getIsUnique()) {\n            if (!$this->getAttribute()->getEntity()->checkAttributeUniqueValue($this->getAttribute(), $object)) {\n                $label = $this->getAttribute()->getFrontend()->getLabel();\n                Mage::throwException(Mage::helper('eav')->__('The value of attribute \"%s\" must be unique.', $label));\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this|Mage_Eav_Model_Entity_Attribute_Backend_Abstract|void\n     * @throws Zend_Json_Exception\n     */\n    public function beforeSave($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = $object->getData($attrCode);\n        if (!is_array($value) || !isset($value['images'])) {\n            return;\n        }\n\n        if (!is_array($value['images']) && strlen($value['images']) > 0) {\n            $value['images'] = Mage::helper('core')->jsonDecode($value['images']);\n        }\n\n        if (!is_array($value['images'])) {\n            $value['images'] = [];\n        }\n\n        $clearImages = [];\n        $newImages   = [];\n        $existImages = [];\n        if ($object->getIsDuplicate() != true) {\n            foreach ($value['images'] as &$image) {\n                if (!empty($image['removed'])) {\n                    $clearImages[] = $image['file'];\n                } elseif (!isset($image['value_id'])) {\n                    $newFile                   = $this->_moveImageFromTmp($image['file']);\n                    $image['new_file'] = $newFile;\n                    $newImages[$image['file']] = $image;\n                    $this->_renamedImages[$image['file']] = $newFile;\n                    $image['file']             = $newFile;\n                } else {\n                    $existImages[$image['file']] = $image;\n                }\n            }\n        } else {\n            // For duplicating we need copy original images.\n            $duplicate = [];\n            foreach ($value['images'] as &$image) {\n                if (!isset($image['value_id'])) {\n                    continue;\n                }\n                $newFile = $this->_copyImage($image['file']);\n                $newImages[$image['file']] = [\n                    'new_file' => $newFile,\n                    'label' => $image['label']\n                ];\n                $duplicate[$image['value_id']] = $newFile;\n            }\n\n            $value['duplicate'] = $duplicate;\n        }\n\n        foreach ($object->getMediaAttributes() as $mediaAttribute) {\n            $mediaAttrCode = $mediaAttribute->getAttributeCode();\n            $attrData = $object->getData($mediaAttrCode);\n\n            if (in_array($attrData, $clearImages)) {\n                $object->setData($mediaAttrCode, 'no_selection');\n            }\n\n            if (array_key_exists($attrData, $newImages)) {\n                $object->setData($mediaAttrCode, $newImages[$attrData]['new_file']);\n                $object->setData($mediaAttrCode . '_label', $newImages[$attrData]['label']);\n            }\n\n            if (array_key_exists($attrData, $existImages)) {\n                $object->setData($mediaAttrCode . '_label', $existImages[$attrData]['label']);\n            }\n        }\n\n        Mage::dispatchEvent('catalog_product_media_save_before', ['product' => $object, 'images' => $value]);\n\n        $object->setData($attrCode, $value);\n\n        return $this;\n    }\n\n    /**\n     * Retrieve renamed image name\n     *\n     * @param string $file\n     * @return string\n     */\n    public function getRenamedImage($file)\n    {\n        return $this->_renamedImages[$file] ?? $file;\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return Mage_Eav_Model_Entity_Attribute_Backend_Abstract|void\n     */\n    public function afterSave($object)\n    {\n        if ($object->getIsDuplicate() == true) {\n            $this->duplicate($object);\n            return;\n        }\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $value = $object->getData($attrCode);\n        if (!is_array($value) || !isset($value['images']) || $object->isLockedAttribute($attrCode)) {\n            return;\n        }\n\n        $storeId = $object->getStoreId();\n\n        $storeIds = $object->getStoreIds();\n        $storeIds[] = Mage_Core_Model_App::ADMIN_STORE_ID;\n\n        // remove current storeId\n        $storeIds = array_flip($storeIds);\n        unset($storeIds[$storeId]);\n        $storeIds = array_keys($storeIds);\n\n        $images = Mage::getResourceModel('catalog/product')\n            ->getAssignedImages($object, $storeIds);\n\n        $picturesInOtherStores = [];\n        foreach ($images as $image) {\n            $picturesInOtherStores[$image['filepath']] = true;\n        }\n\n        $toDelete = [];\n        foreach ($value['images'] as &$image) {\n            if (!empty($image['removed'])) {\n                if (isset($image['value_id']) && !isset($picturesInOtherStores[$image['file']])) {\n                    $toDelete[] = $image['value_id'];\n                }\n                continue;\n            }\n\n            if (!isset($image['value_id'])) {\n                $data = [];\n                $data['entity_id']      = $object->getId();\n                $data['attribute_id']   = $this->getAttribute()->getId();\n                $data['value']          = $image['file'];\n                $image['value_id']      = $this->_getResource()->insertGallery($data);\n            }\n\n            $this->_getResource()->deleteGalleryValueInStore($image['value_id'], $object->getStoreId());\n\n            // Add per store labels, position, disabled\n            $data = [];\n            $data['value_id'] = $image['value_id'];\n            $data['label']    = $image['label'];\n            $data['position'] = (int) $image['position'];\n            $data['disabled'] = (int) $image['disabled'];\n            $data['store_id'] = (int) $object->getStoreId();\n\n            $this->_getResource()->insertGalleryValueInStore($data);\n        }\n\n        $this->_getResource()->deleteGallery($toDelete);\n    }\n\n    /**\n     * Add image to media gallery and return new filename\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string                     $file              file path of image in file system\n     * @param string|array               $mediaAttribute    code of attribute with type 'media_image',\n     *                                                      leave blank if image should be only in gallery\n     * @param bool                    $move              if true, it will move source file\n     * @param bool                    $exclude           mark image as disabled in product page view\n     * @return string\n     * @throws Mage_Core_Exception\n     */\n    public function addImage(\n        Mage_Catalog_Model_Product $product,\n        $file,\n        $mediaAttribute = null,\n        $move = false,\n        $exclude = true\n    ) {\n        if (strpos($file, chr(0)) !== false\n            || preg_match('#(^|[\\\\\\\\/])\\.\\.($|[\\\\\\\\/])#', $file)\n        ) {\n            throw new Exception('Detected malicious path or filename input.');\n        }\n\n        $file = realpath($file);\n\n        if (!$file || !file_exists($file)) {\n            Mage::throwException(Mage::helper('catalog')->__('Image does not exist.'));\n        }\n\n        Mage::dispatchEvent('catalog_product_media_add_image', ['product' => $product, 'image' => $file]);\n\n        $pathinfo = pathinfo($file);\n        $imgExtensions = ['jpg','jpeg','gif','png'];\n        if (!isset($pathinfo['extension']) || !in_array(strtolower($pathinfo['extension']), $imgExtensions)) {\n            Mage::throwException(Mage::helper('catalog')->__('Invalid image file type.'));\n        }\n\n        $fileName       = Mage_Core_Model_File_Uploader::getCorrectFileName($pathinfo['basename']);\n        $dispretionPath = Mage_Core_Model_File_Uploader::getDispretionPath($fileName);\n        $fileName       = $dispretionPath . DS . $fileName;\n\n        $fileName = $this->_getNotDuplicatedFilename($fileName, $dispretionPath);\n\n        $ioAdapter = new Varien_Io_File();\n        $ioAdapter->setAllowCreateFolders(true);\n        $distanationDirectory = dirname($this->_getConfig()->getTmpMediaPath($fileName));\n\n        try {\n            $ioAdapter->open([\n                'path' => $distanationDirectory\n            ]);\n\n            /** @var Mage_Core_Helper_File_Storage_Database $storageHelper */\n            $storageHelper = Mage::helper('core/file_storage_database');\n            if ($move) {\n                $ioAdapter->mv($file, $this->_getConfig()->getTmpMediaPath($fileName));\n\n                //If this is used, filesystem should be configured properly\n                $storageHelper->saveFile($this->_getConfig()->getTmpMediaShortUrl($fileName));\n            } else {\n                $ioAdapter->cp($file, $this->_getConfig()->getTmpMediaPath($fileName));\n\n                $storageHelper->saveFile($this->_getConfig()->getTmpMediaShortUrl($fileName));\n                $ioAdapter->chmod($this->_getConfig()->getTmpMediaPath($fileName), 0777);\n            }\n        } catch (Exception $e) {\n            Mage::throwException(Mage::helper('catalog')->__('Failed to move file: %s', $e->getMessage()));\n        }\n\n        $fileName = str_replace(DS, '/', $fileName);\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $product->getData($attrCode);\n        $position = 0;\n        if (!is_array($mediaGalleryData)) {\n            $mediaGalleryData = [\n                'images' => []\n            ];\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if (isset($image['position']) && $image['position'] > $position) {\n                $position = $image['position'];\n            }\n        }\n\n        $position++;\n        $mediaGalleryData['images'][] = [\n            'file'     => $fileName,\n            'position' => $position,\n            'label'    => '',\n            'disabled' => (int) $exclude\n        ];\n\n        $product->setData($attrCode, $mediaGalleryData);\n\n        if (!is_null($mediaAttribute)) {\n            $this->setMediaAttribute($product, $mediaAttribute, $fileName);\n        }\n\n        return $fileName;\n    }\n\n    /**\n     * Add images with different media attributes.\n     * Image will be added only once if the same image is used with different media attributes\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param array $fileAndAttributesArray array of arrays of filename and corresponding media attribute\n     * @param string $filePath path, where image cand be found\n     * @param bool $move if true, it will move source file\n     * @param bool $exclude mark image as disabled in product page view\n     * @return array array of parallel arrays with original and renamed files\n     * @throws Mage_Core_Exception\n     */\n    public function addImagesWithDifferentMediaAttributes(\n        Mage_Catalog_Model_Product $product,\n        $fileAndAttributesArray,\n        $filePath = '',\n        $move = false,\n        $exclude = true\n    ) {\n        $alreadyAddedFiles = [];\n        $alreadyAddedFilesNames = [];\n\n        foreach ($fileAndAttributesArray as $key => $value) {\n            $keyInAddedFiles = array_search($value['file'], $alreadyAddedFiles, true);\n            if ($keyInAddedFiles === false) {\n                $savedFileName = $this->addImage($product, $filePath . $value['file'], null, $move, $exclude);\n                $alreadyAddedFiles[$key] = $value['file'];\n                $alreadyAddedFilesNames[$key] = $savedFileName;\n            } else {\n                $savedFileName = $alreadyAddedFilesNames[$keyInAddedFiles];\n            }\n\n            if (!is_null($value['mediaAttribute'])) {\n                $this->setMediaAttribute($product, $value['mediaAttribute'], $savedFileName);\n            }\n        }\n\n        return ['alreadyAddedFiles' => $alreadyAddedFiles, 'alreadyAddedFilesNames' => $alreadyAddedFilesNames];\n    }\n\n    /**\n     * Update image in gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @param array $data\n     * @return $this\n     */\n    public function updateImage(Mage_Catalog_Model_Product $product, $file, $data)\n    {\n        $fieldsMap = [\n            'label'    => 'label',\n            'position' => 'position',\n            'disabled' => 'disabled',\n            'exclude'  => 'disabled'\n        ];\n\n        $attrCode = $this->getAttribute()->getAttributeCode();\n\n        $mediaGalleryData = $product->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if ($image['file'] == $file) {\n                foreach ($fieldsMap as $mappedField => $realField) {\n                    if (isset($data[$mappedField])) {\n                        $image[$realField] = $data[$mappedField];\n                    }\n                }\n            }\n        }\n\n        $product->setData($attrCode, $mediaGalleryData);\n        return $this;\n    }\n\n    /**\n     * Remove image from gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @return $this\n     */\n    public function removeImage(Mage_Catalog_Model_Product $product, $file)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n\n        $mediaGalleryData = $product->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        foreach ($mediaGalleryData['images'] as &$image) {\n            if ($image['file'] == $file) {\n                $image['removed'] = 1;\n            }\n        }\n\n        $product->setData($attrCode, $mediaGalleryData);\n\n        return $this;\n    }\n\n    /**\n     * Retrieve image from gallery\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string $file\n     * @return array|bool\n     */\n    public function getImage(Mage_Catalog_Model_Product $product, $file)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $product->getData($attrCode);\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return false;\n        }\n\n        foreach ($mediaGalleryData['images'] as $image) {\n            if ($image['file'] == $file) {\n                return $image;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Clear media attribute value\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string|array $mediaAttribute\n     * @return $this\n     */\n    public function clearMediaAttribute(Mage_Catalog_Model_Product $product, $mediaAttribute)\n    {\n        $mediaAttributeCodes = array_keys($product->getMediaAttributes());\n\n        if (is_array($mediaAttribute)) {\n            foreach ($mediaAttribute as $attribute) {\n                if (in_array($attribute, $mediaAttributeCodes)) {\n                    $product->setData($attribute, null);\n                }\n            }\n        } elseif (in_array($mediaAttribute, $mediaAttributeCodes)) {\n            $product->setData($mediaAttribute, null);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Set media attribute value\n     *\n     * @param Mage_Catalog_Model_Product $product\n     * @param string|array $mediaAttribute\n     * @param string $value\n     * @return $this\n     */\n    public function setMediaAttribute(Mage_Catalog_Model_Product $product, $mediaAttribute, $value)\n    {\n        $mediaAttributeCodes = array_keys($product->getMediaAttributes());\n\n        if (is_array($mediaAttribute)) {\n            foreach ($mediaAttribute as $attribute) {\n                if (in_array($attribute, $mediaAttributeCodes)) {\n                    $product->setData($attribute, $value);\n                }\n            }\n        } elseif (in_array($mediaAttribute, $mediaAttributeCodes)) {\n            $product->setData($mediaAttribute, $value);\n        }\n\n        return $this;\n    }\n\n    /**\n     * Retrieve resource model\n     *\n     * @return Mage_Catalog_Model_Resource_Product_Attribute_Backend_Media|object\n     */\n    protected function _getResource()\n    {\n        return Mage::getResourceSingleton('catalog/product_attribute_backend_media');\n    }\n\n    /**\n     * Retrieve media config\n     *\n     * @return Mage_Catalog_Model_Product_Media_Config\n     */\n    protected function _getConfig()\n    {\n        return Mage::getSingleton('catalog/product_media_config');\n    }\n\n    /**\n     * Move image from temporary directory to normal\n     *\n     * @param string $file\n     * @return string\n     */\n    protected function _moveImageFromTmp($file)\n    {\n        $ioObject = new Varien_Io_File();\n        $destDirectory = dirname($this->_getConfig()->getMediaPath($file));\n        try {\n            $ioObject->open(['path' => $destDirectory]);\n        } catch (Exception $e) {\n            $ioObject->mkdir($destDirectory, 0777, true);\n            $ioObject->open(['path' => $destDirectory]);\n        }\n\n        if (strrpos($file, '.tmp') == strlen($file) - 4) {\n            $file = substr($file, 0, -4);\n        }\n        $destFile = $this->_getUniqueFileName($file, $ioObject->dirsep());\n\n        /** @var Mage_Core_Helper_File_Storage_Database $storageHelper */\n        $storageHelper = Mage::helper('core/file_storage_database');\n\n        if ($storageHelper->checkDbUsage()) {\n            $storageHelper->renameFile(\n                $this->_getConfig()->getTmpMediaShortUrl($file),\n                $this->_getConfig()->getMediaShortUrl($destFile)\n            );\n\n            $ioObject->rm($this->_getConfig()->getTmpMediaPath($file));\n            $ioObject->rm($this->_getConfig()->getMediaPath($destFile));\n        } else {\n            $ioObject->mv(\n                $this->_getConfig()->getTmpMediaPath($file),\n                $this->_getConfig()->getMediaPath($destFile)\n            );\n        }\n\n        return str_replace($ioObject->dirsep(), '/', $destFile);\n    }\n\n    /**\n     * Check whether file to move exists. Getting unique name\n     *\n     * @param string $file\n     * @param string $dirsep\n     * @return string\n     */\n    protected function _getUniqueFileName($file, $dirsep)\n    {\n        if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n            $destFile = Mage::helper('core/file_storage_database')\n                ->getUniqueFilename(\n                    Mage::getSingleton('catalog/product_media_config')->getBaseMediaUrlAddition(),\n                    $file\n                );\n        } else {\n            $destFile = dirname($file) . $dirsep\n                . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getMediaPath($file));\n        }\n\n        return $destFile;\n    }\n\n    /**\n     * Copy image and return new filename.\n     *\n     * @param string $file\n     * @return string\n     * @throws Mage_Core_Exception\n     */\n    protected function _copyImage($file)\n    {\n        try {\n            $ioObject = new Varien_Io_File();\n            $destDirectory = dirname($this->_getConfig()->getMediaPath($file));\n            $ioObject->open(['path' => $destDirectory]);\n\n            $destFile = $this->_getUniqueFileName($file, $ioObject->dirsep());\n\n            if (!$ioObject->fileExists($this->_getConfig()->getMediaPath($file), true)) {\n                throw new Exception();\n            }\n\n            if (Mage::helper('core/file_storage_database')->checkDbUsage()) {\n                Mage::helper('core/file_storage_database')\n                    ->copyFile(\n                        $this->_getConfig()->getMediaShortUrl($file),\n                        $this->_getConfig()->getMediaShortUrl($destFile)\n                    );\n\n                $ioObject->rm($this->_getConfig()->getMediaPath($destFile));\n            } else {\n                $ioObject->cp(\n                    $this->_getConfig()->getMediaPath($file),\n                    $this->_getConfig()->getMediaPath($destFile)\n                );\n            }\n        } catch (Exception $e) {\n            $file = $this->_getConfig()->getMediaPath($file);\n            $io = new Varien_Io_File();\n            Mage::throwException(\n                Mage::helper('catalog')->__(\n                    'Failed to copy file %s. Please, delete media with non-existing images and try again.',\n                    $io->getFilteredPath($file)\n                )\n            );\n        }\n\n        return str_replace($ioObject->dirsep(), '/', $destFile);\n    }\n\n    /**\n     * @param Mage_Catalog_Model_Product $object\n     * @return $this\n     */\n    public function duplicate($object)\n    {\n        $attrCode = $this->getAttribute()->getAttributeCode();\n        $mediaGalleryData = $object->getData($attrCode);\n\n        if (!isset($mediaGalleryData['images']) || !is_array($mediaGalleryData['images'])) {\n            return $this;\n        }\n\n        $this->_getResource()->duplicate(\n            $this,\n            $mediaGalleryData['duplicate'] ?? [],\n            $object->getOriginalId(),\n            $object->getId()\n        );\n\n        return $this;\n    }\n\n    /**\n     * Get filename which is not duplicated with other files in media temporary and media directories\n     *\n     * @param String $fileName\n     * @param String $dispretionPath\n     * @return String\n     */\n    protected function _getNotDuplicatedFilename($fileName, $dispretionPath)\n    {\n        $fileMediaName = $dispretionPath . DS\n                  . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getMediaPath($fileName));\n        $fileTmpMediaName = $dispretionPath . DS\n                  . Mage_Core_Model_File_Uploader::getNewFileName($this->_getConfig()->getTmpMediaPath($fileName));\n\n        if ($fileMediaName != $fileTmpMediaName) {\n            if ($fileMediaName != $fileName) {\n                return $this->_getNotDuplicatedFilename($fileMediaName, $dispretionPath);\n            } elseif ($fileTmpMediaName != $fileName) {\n                return $this->_getNotDuplicatedFilename($fileTmpMediaName, $dispretionPath);\n            }\n        }\n\n        return $fileMediaName;\n    }\n}\n", "<?php\n/**\n * OpenMage\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * @category   Varien\n * @package    Varien_Io\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (https://www.magento.com)\n * @copyright  Copyright (c) 2016-2022 The OpenMage Contributors (https://www.openmage.org)\n * @license    https://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Filesystem client\n *\n * @category   Varien\n * @package    Varien_Io\n * @author     Magento Core Team <core@magentocommerce.com>\n *\n * @property mixed $_streamException\n */\nclass Varien_Io_File extends Varien_Io_Abstract\n{\n    /**\n     * Save initial working directory\n     *\n     * @var string\n     */\n    protected $_iwd;\n\n    /**\n     * Use virtual current working directory for application integrity\n     *\n     * @var string\n     */\n    protected $_cwd;\n\n    /**\n     * Used to grep ls() output\n     *\n     * @const\n     */\n    public const GREP_FILES = 'files_only';\n\n    /**\n     * Used to grep ls() output\n     *\n     * @const\n     */\n    public const GREP_DIRS = 'dirs_only';\n\n    /**\n     * If this variable is set to TRUE, our library will be able to automaticaly create\n     * non-existant directories.\n     *\n     * @var bool\n     * @access protected\n     */\n    protected $_allowCreateFolders = false;\n\n    /**\n     * Stream open file pointer\n     *\n     * @var resource\n     */\n    protected $_streamHandler;\n\n    /**\n     * Stream mode filename\n     *\n     * @var string\n     */\n    protected $_streamFileName;\n\n    /**\n     * Stream mode chmod\n     *\n     * @var string\n     */\n    protected $_streamChmod;\n\n    /**\n     * Lock file\n     *\n     * @var bool\n     */\n    protected $_streamLocked = false;\n\n    public function __construct()\n    {\n        // Initialize shutdown function\n        register_shutdown_function([$this, 'destruct']);\n    }\n\n    /**\n     * stream close on shutdown\n     */\n    public function destruct()\n    {\n        if ($this->_streamHandler) {\n            $this->streamClose();\n        }\n    }\n\n    /**\n     * Open file in stream mode\n     * For set folder for file use open method\n     *\n     * @param string $fileName\n     * @param string $mode\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamOpen($fileName, $mode = 'w+', $chmod = 0666)\n    {\n        $writeableMode = preg_match('#^[wax]#i', $mode);\n        if ($writeableMode && !is_writeable($this->_cwd)) {\n            throw new Exception('Permission denied for write to ' . $this->getFilteredPath($this->_cwd));\n        }\n\n        if (!ini_get('auto_detect_line_endings')) {\n            ini_set('auto_detect_line_endings', 1);\n        }\n\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $this->_streamHandler = @fopen($fileName, $mode);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        if ($this->_streamHandler === false) {\n            throw new Exception('Error write to file ' . $this->getFilteredPath($fileName));\n        }\n\n        $this->_streamFileName = $fileName;\n        $this->_streamChmod = $chmod;\n        return true;\n    }\n\n    /**\n     * Lock file\n     *\n     * @return bool\n     */\n    public function streamLock($exclusive = true)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        $this->_streamLocked = true;\n        $lock = $exclusive ? LOCK_EX : LOCK_SH;\n        return flock($this->_streamHandler, $lock);\n    }\n\n    /**\n     * Unlock file\n     *\n     * @return bool\n     */\n    public function streamUnlock()\n    {\n        if (!$this->_streamHandler || !$this->_streamLocked) {\n            return false;\n        }\n        $this->_streamLocked = false;\n        return flock($this->_streamHandler, LOCK_UN);\n    }\n\n    /**\n     * Binary-safe file read\n     *\n     * @param int $length\n     * @return bool|string\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamRead($length = 1024)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        if (feof($this->_streamHandler)) {\n            return false;\n        }\n        return @fgets($this->_streamHandler, $length);\n    }\n\n    /**\n     * Gets line from file pointer and parse for CSV fields\n     *\n     * @return array|false|null\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamReadCsv($delimiter = ',', $enclosure = '\"')\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        return @fgetcsv($this->_streamHandler, 0, $delimiter, $enclosure);\n    }\n\n    /**\n     * Binary-safe file write\n     *\n     * @param string $str\n     * @return bool|int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamWrite($str)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        return @fwrite($this->_streamHandler, $str);\n    }\n\n    /**\n     * Format line as CSV and write to file pointer\n     *\n     * @param array $row\n     * @param string $delimiter\n     * @param string $enclosure\n     * @return bool|int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamWriteCsv(array $row, $delimiter = ',', $enclosure = '\"')\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n\n        return @fputcsv($this->_streamHandler, $row, $delimiter, $enclosure);\n    }\n\n    /**\n     * Close an open file pointer\n     * Set chmod on a file\n     *\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamClose()\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        if ($this->_streamLocked) {\n            $this->streamUnlock();\n        }\n        if ($this->_isValidSource($this->_streamHandler)) {\n            @fclose($this->_streamHandler);\n        }\n        $this->chmod($this->_streamFileName, $this->_streamChmod);\n        return true;\n    }\n\n    /**\n     * Retrieve open file statistic\n     *\n     * @param string $part the part of statistic\n     * @param mixed $default default value for part\n     * @return array|bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function streamStat($part = null, $default = null)\n    {\n        if (!$this->_streamHandler) {\n            return false;\n        }\n        $stat = @fstat($this->_streamHandler);\n        if (!is_null($part)) {\n            return isset($stat[$part]) ? $stat[$part] : $default;\n        }\n        return $stat;\n    }\n\n    /**\n     * Retrieve stream methods exception\n     *\n     * @return Exception\n     */\n    public function getStreamException()\n    {\n        return $this->_streamException;\n    }\n\n    /**\n     * Open a connection\n     *\n     * Possible arguments:\n     * - path     default current path\n     *\n     * @param array $args\n     * @return boolean\n     */\n    public function open(array $args = [])\n    {\n        if (!empty($args['path']) && $this->_allowCreateFolders) {\n            $this->checkAndCreateFolder($args['path']);\n        }\n\n        $this->_iwd = getcwd();\n        $this->cd(!empty($args['path']) ? $args['path'] : $this->_iwd);\n        return true;\n    }\n\n    /**\n     * Used to set {@link _allowCreateFolders} value\n     *\n     * @param bool $flag\n     * @access public\n     * @return $this\n     */\n    public function setAllowCreateFolders($flag)\n    {\n        $this->_allowCreateFolders = $flag;\n        return $this;\n    }\n\n    /**\n     * Close a connection\n     *\n     * @return boolean\n     */\n    public function close()\n    {\n        return true;\n    }\n\n    /**\n     * Create a directory\n     *\n     * @param string $dir\n     * @param int $mode\n     * @param boolean $recursive\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function mkdir($dir, $mode = 0777, $recursive = true)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n\n        $result = @mkdir($dir, $mode, $recursive);\n        if ($result) {\n            @chmod($dir, $mode);\n        }\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Delete a directory\n     *\n     * @param string $dir\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function rmdir($dir, $recursive = false)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = self::rmdirRecursive($dir, $recursive);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Delete a directory recursively\n     * @param string $dir\n     * @param bool $recursive\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public static function rmdirRecursive($dir, $recursive = true)\n    {\n        $result = true;\n        if ($recursive) {\n            if (is_dir($dir)) {\n                foreach (scandir($dir) as $item) {\n                    if (!strcmp($item, '.') || !strcmp($item, '..')) {\n                        continue;\n                    }\n                    self::rmdirRecursive($dir . \"/\" . $item, $recursive);\n                }\n                $result = @rmdir($dir);\n            } elseif (file_exists($dir)) {\n                $result = @unlink($dir);\n            }\n        } else {\n            $result = @rmdir($dir);\n        }\n        return $result;\n    }\n\n    /**\n     * Get current working directory\n     *\n     * @return string\n     */\n    public function pwd()\n    {\n        return $this->_cwd;\n    }\n\n    /**\n     * Change current working directory\n     *\n     * @param string $dir\n     * @return boolean\n     * @throws Exception\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function cd($dir)\n    {\n        if (is_dir($dir)) {\n            @chdir($this->_iwd);\n            $this->_cwd = realpath($dir);\n            return true;\n        } else {\n            throw new Exception('Unable to list current working directory.');\n        }\n    }\n\n    /**\n     * Read a file to result, file or stream\n     *\n     * If $dest is null the output will be returned.\n     * Otherwise it will be saved to the file or stream and operation result is returned.\n     *\n     * @param string $filename\n     * @param string|resource $dest\n     * @return boolean|string\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function read($filename, $dest = null)\n    {\n        if (!is_null($dest)) {\n            chdir($this->_cwd);\n            $result = @copy($filename, $dest);\n            chdir($this->_iwd);\n            return $result;\n        }\n\n        chdir($this->_cwd);\n        $result = @file_get_contents($filename);\n        chdir($this->_iwd);\n\n        return $result;\n    }\n\n    /**\n     * Write a file from string, file or stream\n     *\n     * @param string $filename\n     * @param string|resource $src\n     * @param int $mode\n     *\n     * @return int|boolean\n     * @throws Exception\n     */\n    public function write($filename, $src, $mode = null)\n    {\n        if (strpos($filename, chr(0)) !== false\n            || preg_match('#(^|[\\\\\\\\/])\\.\\.($|[\\\\\\\\/])#', $filename)\n        ) {\n            throw new Exception('Detected malicious path or filename input.');\n        }\n\n        if (!$this->_IsValidSource($src) || !$this->_isFilenameWriteable($filename)) {\n            return false;\n        }\n\n        $srcIsFile = $this->_checkSrcIsFile($src);\n        if ($srcIsFile) {\n            $src = realpath($src);\n            $result = $this->cp($src, $filename);\n        } else {\n            $result = $this->filePutContent($filename, $src);\n        }\n\n        if (!is_null($mode) && $result !== false) {\n            $this->chmod($filename, $mode);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Check source is valid\n     *\n     * @param string|resource $src\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _isValidSource($src)\n    {\n        // In case of a string\n        if (is_string($src)) {\n            // If its a file we check for null byte\n            // If it's not a valid path, file_exists() will return a falsey value, and the @ will keep it from complaining about the bad string.\n            return !(@file_exists($src) && strpos($src, chr(0)) !== false);\n        } elseif (is_resource($src)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check filename is writeable\n     * If filename not exist check dirname writeable\n     *\n     * @param string $filename\n     * @throws Varien_Io_Exception\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _isFilenameWriteable($filename)\n    {\n        $error = false;\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        if (file_exists($filename)) {\n            if (!is_writeable($filename)) {\n                $error = \"File '{$this->getFilteredPath($filename)}' isn't writeable\";\n            }\n        } else {\n            $folder = dirname($filename);\n            if (!is_writable($folder)) {\n                $error = \"Folder '{$this->getFilteredPath($folder)}' isn't writeable\";\n            }\n        }\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n\n        if ($error) {\n            throw new Varien_Io_Exception($error);\n        }\n        return true;\n    }\n\n    /**\n     * Check source is file\n     *\n     * @param string $src\n     * @return bool\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    protected function _checkSrcIsFile($src)\n    {\n        $result = false;\n        if (is_string($src) && @is_readable($src) && is_file($src)) {\n            $result = true;\n        }\n\n        return $result;\n    }\n\n    /**\n     * File put content wrapper\n     *\n     * @param string $filename\n     * @param string|resource $src\n     *\n     * @return int\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function filePutContent($filename, $src)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @file_put_contents($filename, $src);\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function fileExists($file, $onlyFile = true)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = file_exists($file);\n        if ($result && $onlyFile) {\n            $result = is_file($file);\n        }\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function isWriteable($path)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = is_writeable($path);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    public function getDestinationFolder($filepath)\n    {\n        preg_match('/^(.*[!\\/])/', $filepath, $mathces);\n        if (isset($mathces[0])) {\n            return $mathces[0];\n        }\n        return false;\n    }\n\n    /**\n     * Create destination folder\n     *\n     * @param string $path\n     * @return bool\n     */\n    public function createDestinationDir($path)\n    {\n        if (!$this->_allowCreateFolders) {\n            return false;\n        }\n        return $this->checkAndCreateFolder($this->getCleanPath($path));\n    }\n\n    /**\n     * Check and create if not exists folder\n     *\n     * @param string $folder\n     * @param int $mode\n     * @throws Exception\n     * @return bool\n     */\n    public function checkAndCreateFolder($folder, $mode = 0777)\n    {\n        if (is_dir($folder)) {\n            return true;\n        }\n        if (!is_dir(dirname($folder))) {\n            $this->checkAndCreateFolder(dirname($folder), $mode);\n        }\n        if (!is_dir($folder) && !$this->mkdir($folder, $mode)) {\n            throw new Exception(\"Unable to create directory '{$this->getFilteredPath($folder)}'. Access forbidden.\");\n        }\n        return true;\n    }\n\n    /**\n     * Delete a file\n     *\n     * @param string $filename\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function rm($filename)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @unlink($filename);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Rename or move a directory or a file\n     *\n     * @param string $src\n     * @param string $dest\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function mv($src, $dest)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n        $result = @rename($src, $dest);\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Copy a file\n     *\n     * @param string $src\n     * @param string $dest\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function cp($src, $dest)\n    {\n        if ($this->_cwd) {\n            @chdir($this->_cwd);\n        }\n        $result = @copy($src, $dest);\n        if ($this->_iwd) {\n            @chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Change mode of a directory or a file\n     *\n     * @param string $filename\n     * @param int $mode\n     * @return boolean\n     *\n     * @SuppressWarnings(PHPMD.ErrorControlOperator)\n     */\n    public function chmod($filename, $mode)\n    {\n        if ($this->_cwd) {\n            chdir($this->_cwd);\n        }\n        $result = file_exists($filename) ? @chmod($filename, $mode) : false;\n        if ($this->_iwd) {\n            chdir($this->_iwd);\n        }\n        return $result;\n    }\n\n    /**\n     * Get list of cwd subdirectories and files\n     *\n     * Suggestions (from moshe):\n     * - Use filemtime instead of filectime for performance\n     * - Change $grep to $flags and use binary flags\n     *   - LS_DIRS  = 1\n     *   - LS_FILES = 2\n     *   - LS_ALL   = 3\n     *\n     * @param Varien_Io_File $grep const\n     * @access public\n     * @return array\n     */\n    public function ls($grep = null)\n    {\n        $ignoredDirectories = ['.', '..'];\n\n        if (is_dir($this->_cwd)) {\n            $dir = $this->_cwd;\n        } elseif (is_dir($this->_iwd)) {\n            $dir = $this->_iwd;\n        } else {\n            throw new Exception('Unable to list current working directory.');\n        }\n\n        $list = [];\n\n        if ($dh = opendir($dir)) {\n            while (($entry = readdir($dh)) !== false) {\n                $list_item = [];\n\n                $fullpath = $dir . DIRECTORY_SEPARATOR . $entry;\n\n                if (($grep == self::GREP_DIRS) && (!is_dir($fullpath))) {\n                    continue;\n                } elseif (($grep == self::GREP_FILES) && (!is_file($fullpath))) {\n                    continue;\n                } elseif (in_array($entry, $ignoredDirectories)) {\n                    continue;\n                }\n\n                $list_item['text'] = $entry;\n                $list_item['mod_date'] = date(Varien_Date::DATETIME_PHP_FORMAT, filectime($fullpath));\n                $list_item['permissions'] = $this->_parsePermissions(fileperms($fullpath));\n                $list_item['owner'] = $this->_getFileOwner($fullpath);\n\n                if (is_file($fullpath)) {\n                    $pathinfo = pathinfo($fullpath);\n                    $list_item['size'] = filesize($fullpath);\n                    $list_item['leaf'] = true;\n                    if (isset($pathinfo['extension'])\n                        && in_array(strtolower($pathinfo['extension']), ['jpg', 'jpeg', 'gif', 'bmp', 'png'])\n                        && $list_item['size'] > 0\n                    ) {\n                        $list_item['is_image'] = true;\n                        $list_item['filetype'] = $pathinfo['extension'];\n                    } elseif ($list_item['size'] == 0) {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = 'unknown';\n                    } elseif (isset($pathinfo['extension'])) {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = $pathinfo['extension'];\n                    } else {\n                        $list_item['is_image'] = false;\n                        $list_item['filetype'] = 'unknown';\n                    }\n                } else {\n                    $list_item['leaf'] = false;\n                    $list_item['id'] = $fullpath;\n                }\n\n                $list[] = $list_item;\n            }\n            closedir($dh);\n        } else {\n            throw new Exception('Unable to list current working directory. Access forbidden.');\n        }\n\n        return $list;\n    }\n\n    /**\n     * Convert integer permissions format into human readable\n     *\n     * @param integer $mode\n     * @access protected\n     * @return string\n     */\n    protected function _parsePermissions($mode)\n    {\n        if ($mode & 0x1000) {\n            $type = 'p';\n        } elseif ($mode & 0x2000) { /* FIFO pipe */\n            $type = 'c';\n        } elseif ($mode & 0x4000) { /* Character special */\n            $type = 'd';\n        } elseif ($mode & 0x6000) { /* Directory */\n            $type = 'b';\n        } elseif ($mode & 0x8000) { /* Block special */\n            $type = '-';\n        } elseif ($mode & 0xA000) { /* Regular */\n            $type = 'l';\n        } elseif ($mode & 0xC000) { /* Symbolic Link */\n            $type = 's';\n        } else { /* Socket */\n            $type = 'u';\n        } /* UNKNOWN */\n\n        /* Determine permissions */\n        $owner['read'] = ($mode & 00400) ? 'r' : '-';\n        $owner['write'] = ($mode & 00200) ? 'w' : '-';\n        $owner['execute'] = ($mode & 00100) ? 'x' : '-';\n        $group['read'] = ($mode & 00040) ? 'r' : '-';\n        $group['write'] = ($mode & 00020) ? 'w' : '-';\n        $group['execute'] = ($mode & 00010) ? 'x' : '-';\n        $world['read'] = ($mode & 00004) ? 'r' : '-';\n        $world['write'] = ($mode & 00002) ? 'w' : '-';\n        $world['execute'] = ($mode & 00001) ? 'x' : '-';\n\n        /* Adjust for SUID, SGID and sticky bit */\n        if ($mode & 0x800) {\n            $owner[\"execute\"] = ($owner['execute'] == 'x') ? 's' : 'S';\n        }\n        if ($mode & 0x400) {\n            $group[\"execute\"] = ($group['execute'] == 'x') ? 's' : 'S';\n        }\n        if ($mode & 0x200) {\n            $world[\"execute\"] = ($world['execute'] == 'x') ? 't' : 'T';\n        }\n\n        $s = sprintf('%1s', $type);\n        $s .= sprintf('%1s%1s%1s', $owner['read'], $owner['write'], $owner['execute']);\n        $s .= sprintf('%1s%1s%1s', $group['read'], $group['write'], $group['execute']);\n        $s .= sprintf('%1s%1s%1s', $world['read'], $world['write'], $world['execute']);\n        return trim($s);\n    }\n\n    /**\n     * Get file owner\n     *\n     * @param string $filename\n     * @access protected\n     * @return string\n     */\n    protected function _getFileOwner($filename)\n    {\n        if (!function_exists('posix_getpwuid')) {\n            return 'n/a';\n        }\n\n        $owner     = posix_getpwuid(fileowner($filename));\n        $groupinfo = posix_getgrnam(filegroup($filename));\n\n        return $owner['name'] . ' / ' . $groupinfo;\n    }\n\n    public function dirsep()\n    {\n        return DIRECTORY_SEPARATOR;\n    }\n\n    public function dirname($file)\n    {\n        return $this->getCleanPath(dirname($file));\n    }\n\n    public function getStreamHandler()\n    {\n        return $this->_streamHandler;\n    }\n}\n"], "filenames": ["app/code/core/Mage/Catalog/Model/Product/Attribute/Backend/Media.php", "lib/Varien/Io/File.php"], "buggy_code_start_loc": [278, 486], "buggy_code_end_loc": [278, 491], "fixing_code_start_loc": [279, 487], "fixing_code_end_loc": [285, 498], "type": "CWE-434", "message": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, an administrator with the permissions to upload files via DataFlow and to create products was able to execute arbitrary code via the convert profile. Versions 19.4.22 and 20.0.19 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2021-41231", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-27T19:15:10.197", "lastModified": "2023-02-06T18:56:29.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, an administrator with the permissions to upload files via DataFlow and to create products was able to execute arbitrary code via the convert profile. Versions 19.4.22 and 20.0.19 contain a patch for this issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionEndExcluding": "19.4.22", "matchCriteriaId": "B87F8CA0-6C21-4615-A520-39F1E9E737D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:magento:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.19", "matchCriteriaId": "15B9BC3F-BF81-4DF5-B57B-ECF7059A7991"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/d16fc6c5a1e66c6f0d9f82020f11702a7ddd78e4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v19.4.22", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v20.0.19", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-h632-p764-pjqm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/d16fc6c5a1e66c6f0d9f82020f11702a7ddd78e4"}}