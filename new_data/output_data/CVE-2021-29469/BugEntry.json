{"buggy_code": ["'use strict';\n\n// hgetall converts its replies to an Object. If the reply is empty, null is returned.\n// These function are only called with internal data and have therefore always the same instanceof X\nfunction replyToObject (reply) {\n    // The reply might be a string or a buffer if this is called in a transaction (multi)\n    if (reply.length === 0 || !(reply instanceof Array)) {\n        return null;\n    }\n    var obj = {};\n    for (var i = 0; i < reply.length; i += 2) {\n        obj[reply[i].toString('binary')] = reply[i + 1];\n    }\n    return obj;\n}\n\nfunction replyToStrings (reply) {\n    if (reply instanceof Buffer) {\n        return reply.toString();\n    }\n    if (reply instanceof Array) {\n        var res = new Array(reply.length);\n        for (var i = 0; i < reply.length; i++) {\n            // Recusivly call the function as slowlog returns deep nested replies\n            res[i] = replyToStrings(reply[i]);\n        }\n        return res;\n    }\n\n    return reply;\n}\n\nfunction print (err, reply) {\n    if (err) {\n        // A error always begins with Error:\n        console.log(err.toString());\n    } else {\n        console.log('Reply: ' + reply);\n    }\n}\n\nvar camelCase;\n// Deep clone arbitrary objects with arrays. Can't handle cyclic structures (results in a range error)\n// Any attribute with a non primitive value besides object and array will be passed by reference (e.g. Buffers, Maps, Functions)\n// All capital letters are going to be replaced with a lower case letter and a underscore infront of it\nfunction clone (obj) {\n    var copy;\n    if (Array.isArray(obj)) {\n        copy = new Array(obj.length);\n        for (var i = 0; i < obj.length; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n    if (Object.prototype.toString.call(obj) === '[object Object]') {\n        copy = {};\n        var elems = Object.keys(obj);\n        var elem;\n        while (elem = elems.pop()) {\n            if (elem === 'tls') { // special handle tls\n                copy[elem] = obj[elem];\n                continue;\n            }\n            // Accept camelCase options and convert them to snake_case\n            var snake_case = elem.replace(/[A-Z][^A-Z]/g, '_$&').toLowerCase();\n            // If camelCase is detected, pass it to the client, so all variables are going to be camelCased\n            // There are no deep nested options objects yet, but let's handle this future proof\n            if (snake_case !== elem.toLowerCase()) {\n                camelCase = true;\n            }\n            copy[snake_case] = clone(obj[elem]);\n        }\n        return copy;\n    }\n    return obj;\n}\n\nfunction convenienceClone (obj) {\n    camelCase = false;\n    obj = clone(obj) || {};\n    if (camelCase) {\n        obj.camel_case = true;\n    }\n    return obj;\n}\n\nfunction callbackOrEmit (self, callback, err, res) {\n    if (callback) {\n        callback(err, res);\n    } else if (err) {\n        self.emit('error', err);\n    }\n}\n\nfunction replyInOrder (self, callback, err, res, queue) {\n    // If the queue is explicitly passed, use that, otherwise fall back to the offline queue first,\n    // as there might be commands in both queues at the same time\n    var command_obj;\n    /* istanbul ignore if: TODO: Remove this as soon as we test Redis 3.2 on travis */\n    if (queue) {\n        command_obj = queue.peekBack();\n    } else {\n        command_obj = self.offline_queue.peekBack() || self.command_queue.peekBack();\n    }\n    if (!command_obj) {\n        process.nextTick(function () {\n            callbackOrEmit(self, callback, err, res);\n        });\n    } else {\n        var tmp = command_obj.callback;\n        command_obj.callback = tmp ?\n            function (e, r) {\n                tmp(e, r);\n                callbackOrEmit(self, callback, err, res);\n            } :\n            function (e, r) {\n                if (e) {\n                    self.emit('error', e);\n                }\n                callbackOrEmit(self, callback, err, res);\n            };\n    }\n}\n\nmodule.exports = {\n    reply_to_strings: replyToStrings,\n    reply_to_object: replyToObject,\n    print: print,\n    err_code: /^([A-Z]+)\\s+(.+)$/,\n    monitor_regex: /^[0-9]{10,11}\\.[0-9]+ \\[[0-9]+ .+\\]( \".+?\")+$/,\n    clone: convenienceClone,\n    callback_or_emit: callbackOrEmit,\n    reply_in_order: replyInOrder\n};\n"], "fixing_code": ["'use strict';\n\n// hgetall converts its replies to an Object. If the reply is empty, null is returned.\n// These function are only called with internal data and have therefore always the same instanceof X\nfunction replyToObject (reply) {\n    // The reply might be a string or a buffer if this is called in a transaction (multi)\n    if (reply.length === 0 || !(reply instanceof Array)) {\n        return null;\n    }\n    var obj = {};\n    for (var i = 0; i < reply.length; i += 2) {\n        obj[reply[i].toString('binary')] = reply[i + 1];\n    }\n    return obj;\n}\n\nfunction replyToStrings (reply) {\n    if (reply instanceof Buffer) {\n        return reply.toString();\n    }\n    if (reply instanceof Array) {\n        var res = new Array(reply.length);\n        for (var i = 0; i < reply.length; i++) {\n            // Recusivly call the function as slowlog returns deep nested replies\n            res[i] = replyToStrings(reply[i]);\n        }\n        return res;\n    }\n\n    return reply;\n}\n\nfunction print (err, reply) {\n    if (err) {\n        // A error always begins with Error:\n        console.log(err.toString());\n    } else {\n        console.log('Reply: ' + reply);\n    }\n}\n\nvar camelCase;\n// Deep clone arbitrary objects with arrays. Can't handle cyclic structures (results in a range error)\n// Any attribute with a non primitive value besides object and array will be passed by reference (e.g. Buffers, Maps, Functions)\n// All capital letters are going to be replaced with a lower case letter and a underscore infront of it\nfunction clone (obj) {\n    var copy;\n    if (Array.isArray(obj)) {\n        copy = new Array(obj.length);\n        for (var i = 0; i < obj.length; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n    if (Object.prototype.toString.call(obj) === '[object Object]') {\n        copy = {};\n        var elems = Object.keys(obj);\n        var elem;\n        while (elem = elems.pop()) {\n            if (elem === 'tls') { // special handle tls\n                copy[elem] = obj[elem];\n                continue;\n            }\n            // Accept camelCase options and convert them to snake_case\n            var snake_case = elem.replace(/[A-Z][^A-Z]/g, '_$&').toLowerCase();\n            // If camelCase is detected, pass it to the client, so all variables are going to be camelCased\n            // There are no deep nested options objects yet, but let's handle this future proof\n            if (snake_case !== elem.toLowerCase()) {\n                camelCase = true;\n            }\n            copy[snake_case] = clone(obj[elem]);\n        }\n        return copy;\n    }\n    return obj;\n}\n\nfunction convenienceClone (obj) {\n    camelCase = false;\n    obj = clone(obj) || {};\n    if (camelCase) {\n        obj.camel_case = true;\n    }\n    return obj;\n}\n\nfunction callbackOrEmit (self, callback, err, res) {\n    if (callback) {\n        callback(err, res);\n    } else if (err) {\n        self.emit('error', err);\n    }\n}\n\nfunction replyInOrder (self, callback, err, res, queue) {\n    // If the queue is explicitly passed, use that, otherwise fall back to the offline queue first,\n    // as there might be commands in both queues at the same time\n    var command_obj;\n    /* istanbul ignore if: TODO: Remove this as soon as we test Redis 3.2 on travis */\n    if (queue) {\n        command_obj = queue.peekBack();\n    } else {\n        command_obj = self.offline_queue.peekBack() || self.command_queue.peekBack();\n    }\n    if (!command_obj) {\n        process.nextTick(function () {\n            callbackOrEmit(self, callback, err, res);\n        });\n    } else {\n        var tmp = command_obj.callback;\n        command_obj.callback = tmp ?\n            function (e, r) {\n                tmp(e, r);\n                callbackOrEmit(self, callback, err, res);\n            } :\n            function (e, r) {\n                if (e) {\n                    self.emit('error', e);\n                }\n                callbackOrEmit(self, callback, err, res);\n            };\n    }\n}\n\nmodule.exports = {\n    reply_to_strings: replyToStrings,\n    reply_to_object: replyToObject,\n    print: print,\n    err_code: /^([A-Z]+)\\s+(.+)$/,\n    monitor_regex: /^[0-9]{10,11}\\.[0-9]+ \\[[0-9]+ .+\\].*\"$/,\n    clone: convenienceClone,\n    callback_or_emit: callbackOrEmit,\n    reply_in_order: replyInOrder\n};\n"], "filenames": ["lib/utils.js"], "buggy_code_start_loc": [130], "buggy_code_end_loc": [131], "fixing_code_start_loc": [130], "fixing_code_end_loc": [131], "type": "NVD-CWE-Other", "message": "Node-redis is a Node.js Redis client. Before version 3.1.1, when a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service. The issue is patched in version 3.1.1.", "other": {"cve": {"id": "CVE-2021-29469", "sourceIdentifier": "security-advisories@github.com", "published": "2021-04-23T18:15:08.303", "lastModified": "2022-08-03T10:23:34.110", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Node-redis is a Node.js Redis client. Before version 3.1.1, when a client is in monitoring mode, the regex begin used to detected monitor messages could cause exponential backtracking on some strings. This issue could lead to a denial of service. The issue is patched in version 3.1.1."}, {"lang": "es", "value": "Node-redis es un cliente de Node.js Redis.&#xa0;versiones anteriores a 3.1.1, cuando un cliente est\u00e1 en modo de monitoreo, la expresi\u00f3n regular que comienza a usarse para detectar mensajes de monitoreo podr\u00eda causar un retroceso exponencial en algunas cadenas.&#xa0;Este problema podr\u00eda conllevar a una denegaci\u00f3n de servicio.&#xa0;El problema est\u00e1 parcheado en versi\u00f3n 3.1.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redis.js:redis:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "3.1.1", "matchCriteriaId": "391FC3B2-DDF4-414D-B6B1-FBA70A87DEEE"}]}]}], "references": [{"url": "https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/NodeRedis/node-redis/releases/tag/v3.1.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/NodeRedis/node-redis/security/advisories/GHSA-35q2-47q7-3pc3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20210611-0010/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/NodeRedis/node-redis/commit/2d11b6dc9b9774464a91fb4b448bad8bf699629e"}}