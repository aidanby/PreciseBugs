{"buggy_code": ["<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Api;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\n\nuse MediaWiki\\Rest\\SimpleHandler;\nuse Wikimedia\\ParamValidator\\ParamValidator;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\n\n/**\n * Handle client-specific routes\n * GET/PATCH/DELETE /soa2/v0/applications/{client_id}\n */\nclass SpecificApps extends SimpleHandler {\n\tpublic function run( int $client_id ) {\n\t\t$owner_id = SOA2Apps::userID();\n\t\tif (!$owner_id) return $this->getResponseFactory()->createHttpError(401);\n\t\t$request = $this->getRequest();\n\t\tswitch ( $request->getMethod() ) {\n\t\t\tcase 'GET':\n\t\t\t\treturn $this->get( $client_id, $owner_id );\n\t\t\tcase 'PATCH':\n\t\t\t\treturn $this->patch( $client_id, $owner_id );\n\t\t\tcase 'DELETE':\n\t\t\t\treturn $this->delete( $client_id, $owner_id );\n\t\t}\n\t}\n\tprivate function http400() {\n\t\treturn $this->getResponseFactory()->createHttpError(400);\n\t}\n\tprivate function get( int $client_id, int $owner_id ) {\n\t\t$app = SOA2Apps::application( $client_id, $owner_id );\n\t\tif (!$app) return $this->getResponseFactory()->createHttpError(404);\n\t\treturn $this->getResponseFactory()->createJson($app);\n\t}\n\tprivate function patch( int $client_id, int $owner_id ) {\n\t\t$data = $this->getRequest()->getBody()->getContents();\n\t\t$data = json_decode($data, true);\n\t\tif (!$data) return $this->http400();\n\t\tif (\n\t\t\tarray_key_exists('reset_secret', $data)\n\t\t\t&& !is_bool($data['reset_secret'])\n\t\t) return $this->http400();\n\t\tif (\n\t\t\tarray_key_exists('app_name', $data)\n\t\t\t&& !SOA2Apps::appNameValid($data['app_name'])\n\t\t) return $this->http400();\n\t\tif (\n\t\t\tarray_key_exists('redirect_uris', $data)\n\t\t\t&& !SOA2Apps::redirectURIsValid($data['redirect_uris'])\n\t\t) return $this->http400();\n\t\t$app = SOA2Apps::update( $client_id, $owner_id, $data );\n\t\tif (!$app) return $this->getResponseFactory()->createHttpError(404);\n\t\treturn $this->getResponseFactory()->createJson($app);\n\t}\n\tprivate function delete( int $client_id, int $owner_id ) {\n\t\tif (SOA2Apps::delete( $client_id, $owner_id )) {\n\t\t\treturn $this->getResponseFactory()->createNoContent();\n\t\t} else {\n\t\t\treturn $this->getResponseFactory()->createHttpError(404);\n\t\t}\n\t}\n\tpublic function getParamSettings() {\n\t\treturn [\n\t\t\t'client_id' => [\n\t\t\t\tself::PARAM_SOURCE => 'path',\n\t\t\t\tParamValidator::PARAM_TYPE => 'integer',\n\t\t\t\tParamValidator::PARAM_REQUIRED => true,\n\t\t\t],\n\t\t];\n\t}\n}"], "fixing_code": ["<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Api;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\n\nuse MediaWiki\\Rest\\SimpleHandler;\nuse Wikimedia\\ParamValidator\\ParamValidator;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\n\n/**\n * Handle client-specific routes\n * GET/PATCH/DELETE /soa2/v0/applications/{client_id}\n */\nclass SpecificApps extends SimpleHandler {\n\tpublic function run( int $client_id ) {\n\t\t$owner_id = SOA2Apps::userID();\n\t\tif (!$owner_id) return $this->getResponseFactory()->createHttpError(401);\n\t\t$request = $this->getRequest();\n\t\tswitch ( $request->getMethod() ) {\n\t\t\tcase 'GET':\n\t\t\t\treturn $this->get( $client_id, $owner_id );\n\t\t\tcase 'PATCH':\n\t\t\t\treturn $this->patch( $client_id, $owner_id );\n\t\t\tcase 'DELETE':\n\t\t\t\treturn $this->delete( $client_id, $owner_id );\n\t\t}\n\t}\n\tprivate function http400() {\n\t\treturn $this->getResponseFactory()->createHttpError(400);\n\t}\n\tprivate function get( int $client_id, int $owner_id ) {\n\t\t$app = SOA2Apps::application( $client_id, $owner_id );\n\t\tif (!$app) return $this->getResponseFactory()->createHttpError(404);\n\t\treturn $this->getResponseFactory()->createJson($app);\n\t}\n\tprivate function patch( int $client_id, int $owner_id ) {\n\t\t$data = $this->getRequest()->getBody()->getContents();\n\t\t$data = json_decode($data, true);\n\t\tif (!$data) return $this->http400();\n\t\t// Users may not modify flags, thus 403\n\t\tif (array_key_exists('flags', $data)) return $this->getResponseFactory()->createHttpError(403);\n\t\tif (\n\t\t\tarray_key_exists('reset_secret', $data)\n\t\t\t&& !is_bool($data['reset_secret'])\n\t\t) return $this->http400();\n\t\tif (\n\t\t\tarray_key_exists('app_name', $data)\n\t\t\t&& !SOA2Apps::appNameValid($data['app_name'])\n\t\t) return $this->http400();\n\t\tif (\n\t\t\tarray_key_exists('redirect_uris', $data)\n\t\t\t&& !SOA2Apps::redirectURIsValid($data['redirect_uris'])\n\t\t) return $this->http400();\n\t\t$app = SOA2Apps::update( $client_id, $owner_id, $data );\n\t\tif (!$app) return $this->getResponseFactory()->createHttpError(404);\n\t\treturn $this->getResponseFactory()->createJson($app);\n\t}\n\tprivate function delete( int $client_id, int $owner_id ) {\n\t\tif (SOA2Apps::delete( $client_id, $owner_id )) {\n\t\t\treturn $this->getResponseFactory()->createNoContent();\n\t\t} else {\n\t\t\treturn $this->getResponseFactory()->createHttpError(404);\n\t\t}\n\t}\n\tpublic function getParamSettings() {\n\t\treturn [\n\t\t\t'client_id' => [\n\t\t\t\tself::PARAM_SOURCE => 'path',\n\t\t\t\tParamValidator::PARAM_TYPE => 'integer',\n\t\t\t\tParamValidator::PARAM_REQUIRED => true,\n\t\t\t],\n\t\t];\n\t}\n}"], "filenames": ["includes/api/SpecificApps.php"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [40], "fixing_code_start_loc": [41], "fixing_code_end_loc": [43], "type": "CWE-639", "message": "An authorization bypass exploited by a user-controlled key in SpecificApps REST API in ScratchOAuth2 before commit d856dc704b2504cd3b92cf089fdd366dd40775d6 allows app owners to set flags that indicate whether an app is verified on their own apps.", "other": {"cve": {"id": "CVE-2021-46249", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-15T23:15:07.917", "lastModified": "2022-07-12T17:42:04.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An authorization bypass exploited by a user-controlled key in SpecificApps REST API in ScratchOAuth2 before commit d856dc704b2504cd3b92cf089fdd366dd40775d6 allows app owners to set flags that indicate whether an app is verified on their own apps."}, {"lang": "es", "value": "Una omisi\u00f3n de autorizaci\u00f3n explotado por una clave controlada por el usuario en la API REST de SpecificApps en ScratchOAuth2 versiones anteriores al commit d856dc704b2504cd3b92cf089fdd366dd40775d6, permite a propietarios de aplicaciones establecer flags que indican si una aplicaci\u00f3n est\u00e1 verificada en sus propias aplicaciones"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratchoauth2_project:scratchoauth2:*:*:*:*:*:scratch:*:*", "versionEndExcluding": "2021-04-12", "matchCriteriaId": "E55D1FD3-4081-440A-B720-CF5AC45039D5"}]}]}], "references": [{"url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/d856dc704b2504cd3b92cf089fdd366dd40775d6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/d856dc704b2504cd3b92cf089fdd366dd40775d6"}}